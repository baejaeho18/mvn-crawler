Compiled from "ExecsTest.java"
final class io.druid.concurrent.ExecsTest$1 implements java.lang.Runnable {
  final int val$nTasks;

  final java.util.concurrent.ExecutorService val$blockingExecutor;

  final java.util.concurrent.CountDownLatch val$taskStartSignal;

  final java.util.concurrent.atomic.AtomicInteger val$consumedCount;

  final java.util.concurrent.CountDownLatch val$taskCompletedSignal;

  final java.util.concurrent.atomic.AtomicInteger val$producedCount;

  final java.util.concurrent.CountDownLatch val$queueShouldBeFullSignal;

  io.druid.concurrent.ExecsTest$1(int, java.util.concurrent.ExecutorService, java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicInteger, java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicInteger, java.util.concurrent.CountDownLatch);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #1                  // Field val$nTasks:I
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$blockingExecutor:Ljava/util/concurrent/ExecutorService;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$taskStartSignal:Ljava/util/concurrent/CountDownLatch;
      15: aload_0
      16: aload         4
      18: putfield      #4                  // Field val$consumedCount:Ljava/util/concurrent/atomic/AtomicInteger;
      21: aload_0
      22: aload         5
      24: putfield      #5                  // Field val$taskCompletedSignal:Ljava/util/concurrent/CountDownLatch;
      27: aload_0
      28: aload         6
      30: putfield      #6                  // Field val$producedCount:Ljava/util/concurrent/atomic/AtomicInteger;
      33: aload_0
      34: aload         7
      36: putfield      #7                  // Field val$queueShouldBeFullSignal:Ljava/util/concurrent/CountDownLatch;
      39: aload_0
      40: invokespecial #8                  // Method java/lang/Object."<init>":()V
      43: return

  public void run();
    Code:
       0: iconst_0
       1: istore_1
       2: iload_1
       3: aload_0
       4: getfield      #1                  // Field val$nTasks:I
       7: if_icmpge     77
      10: iload_1
      11: istore_2
      12: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;
      15: new           #10                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #12                 // String Produced task
      24: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: iload_2
      28: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokevirtual #16                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      37: aload_0
      38: getfield      #2                  // Field val$blockingExecutor:Ljava/util/concurrent/ExecutorService;
      41: new           #17                 // class io/druid/concurrent/ExecsTest$1$1
      44: dup
      45: aload_0
      46: iload_2
      47: invokespecial #18                 // Method io/druid/concurrent/ExecsTest$1$1."<init>":(Lio/druid/concurrent/ExecsTest$1;I)V
      50: invokeinterface #19,  2           // InterfaceMethod java/util/concurrent/ExecutorService.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;
      55: pop
      56: aload_0
      57: getfield      #6                  // Field val$producedCount:Ljava/util/concurrent/atomic/AtomicInteger;
      60: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      63: pop
      64: aload_0
      65: getfield      #7                  // Field val$queueShouldBeFullSignal:Ljava/util/concurrent/CountDownLatch;
      68: invokevirtual #21                 // Method java/util/concurrent/CountDownLatch.countDown:()V
      71: iinc          1, 1
      74: goto          2
      77: return
}
