Compiled from "StackedCancelable.scala"
public final class monix.execution.cancelables.StackedCancelable implements monix.execution.cancelables.BooleanCancelable {
  private final monix.execution.atomic.AtomicAny<scala.collection.immutable.List<monix.execution.Cancelable>> state;

  public static monix.execution.cancelables.StackedCancelable apply(monix.execution.Cancelable);
    Code:
       0: getstatic     #18                 // Field monix/execution/cancelables/StackedCancelable$.MODULE$:Lmonix/execution/cancelables/StackedCancelable$;
       3: aload_0
       4: invokevirtual #20                 // Method monix/execution/cancelables/StackedCancelable$.apply:(Lmonix/execution/Cancelable;)Lmonix/execution/cancelables/StackedCancelable;
       7: areturn

  public static monix.execution.cancelables.StackedCancelable apply();
    Code:
       0: getstatic     #18                 // Field monix/execution/cancelables/StackedCancelable$.MODULE$:Lmonix/execution/cancelables/StackedCancelable$;
       3: invokevirtual #23                 // Method monix/execution/cancelables/StackedCancelable$.apply:()Lmonix/execution/cancelables/StackedCancelable;
       6: areturn

  private scala.collection.immutable.List<monix.execution.Cancelable> underlying();
    Code:
       0: aload_0
       1: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
       4: invokevirtual #36                 // Method monix/execution/atomic/AtomicAny.get:()Ljava/lang/Object;
       7: checkcast     #38                 // class scala/collection/immutable/List
      10: areturn

  public boolean isCanceled();
    Code:
       0: aload_0
       1: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
       4: invokevirtual #36                 // Method monix/execution/atomic/AtomicAny.get:()Ljava/lang/Object;
       7: ifnonnull     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
       4: aconst_null
       5: invokevirtual #48                 // Method monix/execution/atomic/AtomicAny.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #38                 // class scala/collection/immutable/List
      11: astore_1
      12: aload_1
      13: ifnull        28
      16: aload_1
      17: new           #50                 // class monix/execution/cancelables/StackedCancelable$$anonfun$cancel$1
      20: dup
      21: aload_0
      22: invokespecial #54                 // Method monix/execution/cancelables/StackedCancelable$$anonfun$cancel$1."<init>":(Lmonix/execution/cancelables/StackedCancelable;)V
      25: invokevirtual #58                 // Method scala/collection/immutable/List.foreach:(Lscala/Function1;)V
      28: return

  public monix.execution.Cancelable popAndCollapse(monix.execution.cancelables.StackedCancelable);
    Code:
       0: aload_1
       1: invokespecial #64                 // Method underlying:()Lscala/collection/immutable/List;
       4: astore_3
       5: aload_3
       6: ifnonnull     22
       9: aload_0
      10: invokevirtual #66                 // Method cancel:()V
      13: getstatic     #71                 // Field monix/execution/Cancelable$.MODULE$:Lmonix/execution/Cancelable$;
      16: invokevirtual #75                 // Method monix/execution/Cancelable$.empty:()Lmonix/execution/Cancelable;
      19: goto          155
      22: aload_0
      23: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
      26: invokevirtual #36                 // Method monix/execution/atomic/AtomicAny.get:()Ljava/lang/Object;
      29: checkcast     #38                 // class scala/collection/immutable/List
      32: astore        4
      34: aload         4
      36: ifnonnull     54
      39: aload_1
      40: invokevirtual #66                 // Method cancel:()V
      43: getstatic     #71                 // Field monix/execution/Cancelable$.MODULE$:Lmonix/execution/Cancelable$;
      46: invokevirtual #75                 // Method monix/execution/Cancelable$.empty:()Lmonix/execution/Cancelable;
      49: astore        5
      51: goto          153
      54: getstatic     #80                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      57: aload         4
      59: invokevirtual #84                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      62: ifeq          95
      65: aload_0
      66: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
      69: getstatic     #80                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      72: aload_3
      73: invokevirtual #88                 // Method monix/execution/atomic/AtomicAny.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      76: ifeq          90
      79: getstatic     #71                 // Field monix/execution/Cancelable$.MODULE$:Lmonix/execution/Cancelable$;
      82: invokevirtual #75                 // Method monix/execution/Cancelable$.empty:()Lmonix/execution/Cancelable;
      85: astore        5
      87: goto          153
      90: aload_1
      91: astore_1
      92: goto          0
      95: aload         4
      97: instanceof    #90                 // class scala/collection/immutable/$colon$colon
     100: ifeq          161
     103: aload         4
     105: checkcast     #90                 // class scala/collection/immutable/$colon$colon
     108: astore        6
     110: aload         6
     112: invokevirtual #93                 // Method scala/collection/immutable/$colon$colon.head:()Ljava/lang/Object;
     115: checkcast     #95                 // class monix/execution/Cancelable
     118: astore        7
     120: aload         6
     122: invokevirtual #98                 // Method scala/collection/immutable/$colon$colon.tl$1:()Lscala/collection/immutable/List;
     125: astore        8
     127: aload_0
     128: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
     131: aload         6
     133: aload_3
     134: astore        9
     136: aload         8
     138: aload         9
     140: invokevirtual #102                // Method scala/collection/immutable/List.$colon$colon$colon:(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
     143: invokevirtual #88                 // Method monix/execution/atomic/AtomicAny.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
     146: ifeq          156
     149: aload         7
     151: astore        5
     153: aload         5
     155: areturn
     156: aload_1
     157: astore_1
     158: goto          0
     161: new           #104                // class scala/MatchError
     164: dup
     165: aload         4
     167: invokespecial #107                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     170: athrow

  public monix.execution.Cancelable popAndPush(monix.execution.Cancelable);
    Code:
       0: aload_0
       1: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
       4: invokevirtual #36                 // Method monix/execution/atomic/AtomicAny.get:()Ljava/lang/Object;
       7: checkcast     #38                 // class scala/collection/immutable/List
      10: astore_3
      11: aload_3
      12: ifnonnull     32
      15: aload_1
      16: invokeinterface #114,  1          // InterfaceMethod monix/execution/Cancelable.cancel:()V
      21: getstatic     #71                 // Field monix/execution/Cancelable$.MODULE$:Lmonix/execution/Cancelable$;
      24: invokevirtual #75                 // Method monix/execution/Cancelable$.empty:()Lmonix/execution/Cancelable;
      27: astore        4
      29: goto          138
      32: getstatic     #80                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      35: aload_3
      36: invokevirtual #84                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      39: ifeq          82
      42: aload_0
      43: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
      46: getstatic     #80                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      49: aload_1
      50: astore        5
      52: getstatic     #80                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      55: aload         5
      57: invokevirtual #118                // Method scala/collection/immutable/Nil$.$colon$colon:(Ljava/lang/Object;)Lscala/collection/immutable/List;
      60: invokevirtual #88                 // Method monix/execution/atomic/AtomicAny.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      63: ifeq          77
      66: getstatic     #71                 // Field monix/execution/Cancelable$.MODULE$:Lmonix/execution/Cancelable$;
      69: invokevirtual #75                 // Method monix/execution/Cancelable$.empty:()Lmonix/execution/Cancelable;
      72: astore        4
      74: goto          138
      77: aload_1
      78: astore_1
      79: goto          0
      82: aload_3
      83: instanceof    #90                 // class scala/collection/immutable/$colon$colon
      86: ifeq          146
      89: aload_3
      90: checkcast     #90                 // class scala/collection/immutable/$colon$colon
      93: astore        6
      95: aload         6
      97: invokevirtual #93                 // Method scala/collection/immutable/$colon$colon.head:()Ljava/lang/Object;
     100: checkcast     #95                 // class monix/execution/Cancelable
     103: astore        7
     105: aload         6
     107: invokevirtual #98                 // Method scala/collection/immutable/$colon$colon.tl$1:()Lscala/collection/immutable/List;
     110: astore        8
     112: aload_0
     113: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
     116: aload         6
     118: aload_1
     119: astore        9
     121: aload         8
     123: aload         9
     125: invokevirtual #119                // Method scala/collection/immutable/List.$colon$colon:(Ljava/lang/Object;)Lscala/collection/immutable/List;
     128: invokevirtual #88                 // Method monix/execution/atomic/AtomicAny.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
     131: ifeq          141
     134: aload         7
     136: astore        4
     138: aload         4
     140: areturn
     141: aload_1
     142: astore_1
     143: goto          0
     146: new           #104                // class scala/MatchError
     149: dup
     150: aload_3
     151: invokespecial #107                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     154: athrow

  public void push(monix.execution.Cancelable);
    Code:
       0: aload_0
       1: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
       4: invokevirtual #36                 // Method monix/execution/atomic/AtomicAny.get:()Ljava/lang/Object;
       7: checkcast     #38                 // class scala/collection/immutable/List
      10: astore_3
      11: aload_3
      12: ifnonnull     29
      15: aload_1
      16: invokeinterface #114,  1          // InterfaceMethod monix/execution/Cancelable.cancel:()V
      21: getstatic     #127                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      24: astore        4
      26: goto          54
      29: aload_0
      30: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
      33: aload_3
      34: aload_1
      35: astore        5
      37: aload_3
      38: aload         5
      40: invokevirtual #119                // Method scala/collection/immutable/List.$colon$colon:(Ljava/lang/Object;)Lscala/collection/immutable/List;
      43: invokevirtual #88                 // Method monix/execution/atomic/AtomicAny.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      46: ifeq          59
      49: getstatic     #127                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      52: astore        4
      54: getstatic     #127                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      57: pop
      58: return
      59: aload_1
      60: astore_1
      61: goto          0

  public monix.execution.Cancelable pop();
    Code:
       0: aload_0
       1: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
       4: invokevirtual #36                 // Method monix/execution/atomic/AtomicAny.get:()Ljava/lang/Object;
       7: checkcast     #38                 // class scala/collection/immutable/List
      10: astore_2
      11: aload_2
      12: ifnonnull     25
      15: getstatic     #71                 // Field monix/execution/Cancelable$.MODULE$:Lmonix/execution/Cancelable$;
      18: invokevirtual #75                 // Method monix/execution/Cancelable$.empty:()Lmonix/execution/Cancelable;
      21: astore_3
      22: goto          92
      25: getstatic     #80                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      28: aload_2
      29: invokevirtual #84                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      32: ifeq          45
      35: getstatic     #71                 // Field monix/execution/Cancelable$.MODULE$:Lmonix/execution/Cancelable$;
      38: invokevirtual #75                 // Method monix/execution/Cancelable$.empty:()Lmonix/execution/Cancelable;
      41: astore_3
      42: goto          92
      45: aload_2
      46: instanceof    #90                 // class scala/collection/immutable/$colon$colon
      49: ifeq          94
      52: aload_2
      53: checkcast     #90                 // class scala/collection/immutable/$colon$colon
      56: astore        4
      58: aload         4
      60: invokevirtual #93                 // Method scala/collection/immutable/$colon$colon.head:()Ljava/lang/Object;
      63: checkcast     #95                 // class monix/execution/Cancelable
      66: astore        5
      68: aload         4
      70: invokevirtual #98                 // Method scala/collection/immutable/$colon$colon.tl$1:()Lscala/collection/immutable/List;
      73: astore        6
      75: aload_0
      76: getfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
      79: aload         4
      81: aload         6
      83: invokevirtual #88                 // Method monix/execution/atomic/AtomicAny.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      86: ifeq          0
      89: aload         5
      91: astore_3
      92: aload_3
      93: areturn
      94: new           #104                // class scala/MatchError
      97: dup
      98: aload_2
      99: invokespecial #107                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     102: athrow

  public monix.execution.cancelables.StackedCancelable(monix.execution.Cancelable);
    Code:
       0: aload_0
       1: invokespecial #130                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: ifnonnull     15
       9: getstatic     #80                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      12: goto          24
      15: aload_1
      16: astore_3
      17: getstatic     #80                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      20: aload_3
      21: invokevirtual #118                // Method scala/collection/immutable/Nil$.$colon$colon:(Ljava/lang/Object;)Lscala/collection/immutable/List;
      24: astore_2
      25: getstatic     #135                // Field monix/execution/atomic/AtomicAny$.MODULE$:Lmonix/execution/atomic/AtomicAny$;
      28: aload_2
      29: getstatic     #140                // Field monix/execution/atomic/PaddingStrategy$LeftRight128$.MODULE$:Lmonix/execution/atomic/PaddingStrategy$LeftRight128$;
      32: invokevirtual #144                // Method monix/execution/atomic/AtomicAny$.withPadding:(Ljava/lang/Object;Lmonix/execution/atomic/PaddingStrategy;)Lmonix/execution/atomic/AtomicAny;
      35: putfield      #30                 // Field state:Lmonix/execution/atomic/AtomicAny;
      38: return
}
