Compiled from "CancelableFuture.scala"
public interface monix.execution.CancelableFuture<T> extends scala.concurrent.Future<T>, monix.execution.Cancelable {
  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$failed();

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$transform(scala.Function1, scala.Function1, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$map(scala.Function1, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$flatMap(scala.Function1, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$filter(scala.Function1, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$collect(scala.PartialFunction, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$recover(scala.PartialFunction, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$recoverWith(scala.PartialFunction, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$zip(scala.concurrent.Future);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$fallbackTo(scala.concurrent.Future);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$mapTo(scala.reflect.ClassTag);

  public abstract scala.concurrent.Future monix$execution$CancelableFuture$$super$andThen(scala.PartialFunction, scala.concurrent.ExecutionContext);

  public abstract monix.execution.CancelableFuture<java.lang.Throwable> failed();

  public abstract <S> monix.execution.CancelableFuture<S> transform(scala.Function1<T, S>, scala.Function1<java.lang.Throwable, java.lang.Throwable>, scala.concurrent.ExecutionContext);

  public abstract <S> monix.execution.CancelableFuture<S> map(scala.Function1<T, S>, scala.concurrent.ExecutionContext);

  public abstract <S> monix.execution.CancelableFuture<S> flatMap(scala.Function1<T, scala.concurrent.Future<S>>, scala.concurrent.ExecutionContext);

  public abstract monix.execution.CancelableFuture<T> filter(scala.Function1<T, java.lang.Object>, scala.concurrent.ExecutionContext);

  public abstract <S> monix.execution.CancelableFuture<S> collect(scala.PartialFunction<T, S>, scala.concurrent.ExecutionContext);

  public abstract <U> monix.execution.CancelableFuture<U> recover(scala.PartialFunction<java.lang.Throwable, U>, scala.concurrent.ExecutionContext);

  public abstract <U> monix.execution.CancelableFuture<U> recoverWith(scala.PartialFunction<java.lang.Throwable, scala.concurrent.Future<U>>, scala.concurrent.ExecutionContext);

  public abstract <U> monix.execution.CancelableFuture<scala.Tuple2<T, U>> zip(scala.concurrent.Future<U>);

  public abstract <U> monix.execution.CancelableFuture<U> fallbackTo(scala.concurrent.Future<U>);

  public abstract <S> monix.execution.CancelableFuture<S> mapTo(scala.reflect.ClassTag<S>);

  public abstract <U> monix.execution.CancelableFuture<T> andThen(scala.PartialFunction<scala.util.Try<T>, U>, scala.concurrent.ExecutionContext);
}
