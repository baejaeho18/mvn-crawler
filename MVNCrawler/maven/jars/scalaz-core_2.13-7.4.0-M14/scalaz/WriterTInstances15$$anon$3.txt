Compiled from "WriterT.scala"
public final class scalaz.WriterTInstances15$$anon$3 implements scalaz.WriterTPlus<F, W> {
  private scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Plus F0$2;

  public final <A> scalaz.WriterT<W, F, A> plus(scalaz.WriterT<W, F, A>, scala.Function0<scalaz.WriterT<W, F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #32                 // InterfaceMethod scalaz/WriterTPlus.plus$:(Lscalaz/WriterTPlus;Lscalaz/WriterT;Lscala/Function0;)Lscalaz/WriterT;
       6: areturn

  public <S$, A> scalaz.Maybe<scalaz.WriterT<W, F, A>> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, scalaz.WriterT<W, F, A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #45                 // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S$, A> scalaz.Maybe<scalaz.WriterT<W, F, A>> unfoldrPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<scalaz.WriterT<W, F, A>, S$>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #52                 // InterfaceMethod scalaz/Plus.unfoldrPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #58                 // InterfaceMethod scalaz/Plus.compose$:(Lscalaz/Plus;)Lscalaz/Plus;
       4: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #65                 // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<scalaz.WriterT<W, F, A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #72                 // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #79                 // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #83                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #83                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.Plus<F> F();
    Code:
       0: aload_0
       1: getfield      #91                 // Field F0$2:Lscalaz/Plus;
       4: areturn

  public java.lang.Object plus(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #94                 // class scalaz/WriterT
       5: aload_2
       6: invokevirtual #96                 // Method plus:(Lscalaz/WriterT;Lscala/Function0;)Lscalaz/WriterT;
       9: areturn

  public scalaz.WriterTInstances15$$anon$3(scalaz.WriterTInstances15, scalaz.Plus);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #91                 // Field F0$2:Lscalaz/Plus;
       5: aload_0
       6: invokespecial #102                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #106                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      13: invokestatic  #111                // Method scala/runtime/Statics.releaseFence:()V
      16: return
}
