Compiled from "Order.scala"
public final class scalaz.Order$$anon$5 implements scalaz.IsomorphismOrder<F, G> {
  private scalaz.syntax.OrderSyntax<F> orderSyntax;

  private scalaz.syntax.EqualSyntax<F> equalSyntax;

  private final scalaz.Order M$1;

  private final scalaz.Isomorphisms$Iso D$1;

  public boolean equal(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #47                 // InterfaceMethod scalaz/IsomorphismOrder.equal$:(Lscalaz/IsomorphismOrder;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public scalaz.Ordering order(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #57                 // InterfaceMethod scalaz/IsomorphismOrder.order$:(Lscalaz/IsomorphismOrder;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public scalaz.Ordering apply(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #62                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #67                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #71                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #75                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #79                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public F max(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #86                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public F min(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #90                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2<F, F> sort(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #97                 // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, F>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #105                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<F> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #113                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<F> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #120                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<F>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #127                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #133                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<F>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #140                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<F> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #144                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #144                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<F> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #152                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #152                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Order<G> G();
    Code:
       0: aload_0
       1: getfield      #159                // Field M$1:Lscalaz/Order;
       4: areturn

  public scalaz.Isomorphisms$Iso<scala.Function1, F, G> iso();
    Code:
       0: aload_0
       1: getfield      #164                // Field D$1:Lscalaz/Isomorphisms$Iso;
       4: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #167                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scalaz.Equal G();
    Code:
       0: aload_0
       1: invokevirtual #170                // Method G:()Lscalaz/Order;
       4: areturn

  public scalaz.Order$$anon$5(scalaz.Order, scalaz.Isomorphisms$Iso);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #159                // Field M$1:Lscalaz/Order;
       5: aload_0
       6: aload_2
       7: putfield      #164                // Field D$1:Lscalaz/Isomorphisms$Iso;
      10: aload_0
      11: invokespecial #175                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #179                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      18: aload_0
      19: invokestatic  #182                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      22: invokestatic  #187                // Method scala/runtime/Statics.releaseFence:()V
      25: return
}
