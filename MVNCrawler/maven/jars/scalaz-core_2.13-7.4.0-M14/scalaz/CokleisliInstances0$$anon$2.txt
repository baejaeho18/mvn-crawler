Compiled from "Cokleisli.scala"
public final class scalaz.CokleisliInstances0$$anon$2 implements scalaz.CokleisliProfunctor<F> {
  private scalaz.syntax.ProfunctorSyntax<?> profunctorSyntax;

  private final scalaz.Functor evidence$1$1;

  public <A, B, C, D> scalaz.Cokleisli<F, C, D> dimap(scalaz.Cokleisli<F, A, B>, scala.Function1<C, A>, scala.Function1<B, D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #33                 // InterfaceMethod scalaz/CokleisliProfunctor.dimap$:(Lscalaz/CokleisliProfunctor;Lscalaz/Cokleisli;Lscala/Function1;Lscala/Function1;)Lscalaz/Cokleisli;
       7: areturn

  public final <A, B, C> scalaz.Cokleisli<F, C, B> mapfst(scalaz.Cokleisli<F, A, B>, scala.Function1<C, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #45                 // InterfaceMethod scalaz/CokleisliProfunctor.mapfst$:(Lscalaz/CokleisliProfunctor;Lscalaz/Cokleisli;Lscala/Function1;)Lscalaz/Cokleisli;
       6: areturn

  public final <A, B, C> scalaz.Cokleisli<F, A, C> mapsnd(scalaz.Cokleisli<F, A, B>, scala.Function1<B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #50                 // InterfaceMethod scalaz/CokleisliProfunctor.mapsnd$:(Lscalaz/CokleisliProfunctor;Lscalaz/Cokleisli;Lscala/Function1;)Lscalaz/Cokleisli;
       6: areturn

  public scalaz.InvariantFunctor<?> invariantFunctor();
    Code:
       0: aload_0
       1: invokestatic  #57                 // InterfaceMethod scalaz/Profunctor.invariantFunctor$:(Lscalaz/Profunctor;)Lscalaz/InvariantFunctor;
       4: areturn

  public <C> scalaz.Functor<?> covariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #64                 // InterfaceMethod scalaz/Profunctor.covariantInstance$:(Lscalaz/Profunctor;)Lscalaz/Functor;
       4: areturn

  public <C> scalaz.Contravariant<?> contravariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #71                 // InterfaceMethod scalaz/Profunctor.contravariantInstance$:(Lscalaz/Profunctor;)Lscalaz/Contravariant;
       4: areturn

  public scalaz.Profunctor<?>.ProfunctorLaw profunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #78                 // InterfaceMethod scalaz/Profunctor.profunctorLaw$:(Lscalaz/Profunctor;)Lscalaz/Profunctor$ProfunctorLaw;
       4: areturn

  public scalaz.syntax.ProfunctorSyntax<?> profunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #82                 // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       4: areturn

  public void scalaz$Profunctor$_setter_$profunctorSyntax_$eq(scalaz.syntax.ProfunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #82                 // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       5: return

  public scalaz.Functor<F> F();
    Code:
       0: getstatic     #94                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #96                 // Field evidence$1$1:Lscalaz/Functor;
       7: invokevirtual #100                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #102                // class scalaz/Functor
      13: areturn

  public java.lang.Object mapsnd(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Cokleisli
       5: aload_2
       6: invokevirtual #107                // Method mapsnd:(Lscalaz/Cokleisli;Lscala/Function1;)Lscalaz/Cokleisli;
       9: areturn

  public java.lang.Object mapfst(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Cokleisli
       5: aload_2
       6: invokevirtual #110                // Method mapfst:(Lscalaz/Cokleisli;Lscala/Function1;)Lscalaz/Cokleisli;
       9: areturn

  public java.lang.Object dimap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Cokleisli
       5: aload_2
       6: aload_3
       7: invokevirtual #113                // Method dimap:(Lscalaz/Cokleisli;Lscala/Function1;Lscala/Function1;)Lscalaz/Cokleisli;
      10: areturn

  public scalaz.CokleisliInstances0$$anon$2(scalaz.CokleisliInstances0, scalaz.Functor);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #96                 // Field evidence$1$1:Lscalaz/Functor;
       5: aload_0
       6: invokespecial #119                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #123                // InterfaceMethod scalaz/Profunctor.$init$:(Lscalaz/Profunctor;)V
      13: invokestatic  #128                // Method scala/runtime/Statics.releaseFence:()V
      16: return
}
