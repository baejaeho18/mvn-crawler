Compiled from "Alter.scala"
public final class scalaz.AlterInstances$$anon$2 implements scalaz.AlterMonoid<F, A> {
  private final scalaz.PlusEmpty<F> F;

  private scalaz.syntax.MonoidSyntax<scalaz.Alter<F, A>> monoidSyntax;

  private scalaz.syntax.SemigroupSyntax<scalaz.Alter<F, A>> semigroupSyntax;

  public scalaz.Alter<F, A> zero();
    Code:
       0: aload_0
       1: invokestatic  #39                 // InterfaceMethod scalaz/AlterMonoid.zero$:(Lscalaz/AlterMonoid;)Lscalaz/Alter;
       4: areturn

  public java.lang.Object multiply(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #49                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #59                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final java.lang.Object ifEmpty(java.lang.Object, scala.Function0, scala.Function0, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #68                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object onNotEmpty(java.lang.Object, scala.Function0, scalaz.Equal, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #77                 // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object onEmpty(java.lang.Object, scala.Function0, scalaz.Equal, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #82                 // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object unfoldlSum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #89                 // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object unfoldrSum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #101                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #108                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<scalaz.Alter<F, A>>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #115                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public scalaz.Alter<F, A> append(scalaz.Alter<F, A>, scala.Function0<scalaz.Alter<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #126                // InterfaceMethod scalaz/AlterSemigroup.append$:(Lscalaz/AlterSemigroup;Lscalaz/Alter;Lscala/Function0;)Lscalaz/Alter;
       6: areturn

  public java.lang.Object multiply1(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #132                // InterfaceMethod scalaz/Semigroup.multiply1$:(Lscalaz/Semigroup;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<scalaz.Alter<F, A>> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, scalaz.Alter<F, A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #139                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<scalaz.Alter<F, A>> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<scalaz.Alter<F, A>, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #144                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #151                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #158                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<scalaz.Alter<F, A>>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #165                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.MonoidSyntax<scalaz.Alter<F, A>> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #169                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<scalaz.Alter<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #169                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<scalaz.Alter<F, A>> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #177                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<scalaz.Alter<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #177                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public scalaz.PlusEmpty<F> F();
    Code:
       0: aload_0
       1: getfield      #184                // Field F:Lscalaz/PlusEmpty;
       4: areturn

  public java.lang.Object append(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #187                // class scalaz/Alter
       5: aload_2
       6: invokevirtual #189                // Method append:(Lscalaz/Alter;Lscala/Function0;)Lscalaz/Alter;
       9: areturn

  public java.lang.Object zero();
    Code:
       0: aload_0
       1: invokevirtual #192                // Method zero:()Lscalaz/Alter;
       4: areturn

  public scalaz.Plus F();
    Code:
       0: aload_0
       1: invokevirtual #195                // Method F:()Lscalaz/PlusEmpty;
       4: areturn

  public scalaz.AlterInstances$$anon$2(scalaz.AlterInstances, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: invokespecial #202                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #206                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
       8: aload_0
       9: invokestatic  #209                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      12: aload_0
      13: aload_2
      14: putfield      #184                // Field F:Lscalaz/PlusEmpty;
      17: invokestatic  #214                // Method scala/runtime/Statics.releaseFence:()V
      20: return
}
