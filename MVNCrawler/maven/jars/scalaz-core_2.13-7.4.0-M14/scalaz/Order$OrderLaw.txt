Compiled from "Order.scala"
public interface scalaz.Order$OrderLaw extends scalaz.Equal<F>.EqualLaw {
  public static boolean antisymmetric$(scalaz.Order$OrderLaw, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #28                 // InterfaceMethod antisymmetric:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public default boolean antisymmetric(F, F);
    Code:
       0: aload_0
       1: invokeinterface #35,  1           // InterfaceMethod scalaz$Order$OrderLaw$$$outer:()Lscalaz/Order;
       6: aload_1
       7: aload_2
       8: invokeinterface #39,  3           // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      13: invokevirtual #43                 // Method scalaz/Ordering.complement:()Lscalaz/Ordering;
      16: aload_0
      17: invokeinterface #35,  1           // InterfaceMethod scalaz$Order$OrderLaw$$$outer:()Lscalaz/Order;
      22: aload_2
      23: aload_1
      24: invokeinterface #39,  3           // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      29: astore_3
      30: dup
      31: ifnonnull     42
      34: pop
      35: aload_3
      36: ifnull        49
      39: goto          51
      42: aload_3
      43: invokevirtual #47                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      46: ifeq          51
      49: iconst_1
      50: ireturn
      51: iconst_0
      52: ireturn

  public static boolean transitiveOrder$(scalaz.Order$OrderLaw, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #55                 // InterfaceMethod transitiveOrder:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       7: ireturn

  public default boolean transitiveOrder(F, F, F);
    Code:
       0: aload_0
       1: invokeinterface #35,  1           // InterfaceMethod scalaz$Order$OrderLaw$$$outer:()Lscalaz/Order;
       6: aload_1
       7: aload_2
       8: invokeinterface #39,  3           // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      13: astore        4
      15: getstatic     #62                 // Field scalaz/std/boolean$.MODULE$:Lscalaz/std/boolean$;
      18: pop
      19: getstatic     #67                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      22: invokevirtual #71                 // Method scala/Predef$.Set:()Lscala/collection/immutable/Set$;
      25: getstatic     #76                 // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      28: iconst_2
      29: anewarray     #18                 // class scalaz/Ordering
      32: dup
      33: iconst_0
      34: aload         4
      36: aastore
      37: dup
      38: iconst_1
      39: getstatic     #79                 // Field scalaz/Ordering$EQ$.MODULE$:Lscalaz/Ordering$EQ$;
      42: aastore
      43: invokevirtual #83                 // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
      46: invokevirtual #89                 // Method scala/collection/immutable/Set$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
      49: checkcast     #91                 // class scala/collection/SetOps
      52: aload_0
      53: invokeinterface #35,  1           // InterfaceMethod scalaz$Order$OrderLaw$$$outer:()Lscalaz/Order;
      58: aload_2
      59: aload_3
      60: invokeinterface #39,  3           // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      65: invokeinterface #93,  2           // InterfaceMethod scala/collection/SetOps.apply:(Ljava/lang/Object;)Z
      70: ifeq          84
      73: aload_0
      74: aload_1
      75: aload_3
      76: aload         4
      78: invokestatic  #97                 // InterfaceMethod $anonfun$transitiveOrder$1:(Lscalaz/Order$OrderLaw;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Ordering;)Z
      81: ifeq          86
      84: iconst_1
      85: ireturn
      86: iconst_0
      87: ireturn

  public static boolean orderAndEqualConsistent$(scalaz.Order$OrderLaw, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #103                // InterfaceMethod orderAndEqualConsistent:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public default boolean orderAndEqualConsistent(F, F);
    Code:
       0: aload_0
       1: invokeinterface #35,  1           // InterfaceMethod scalaz$Order$OrderLaw$$$outer:()Lscalaz/Order;
       6: aload_1
       7: aload_2
       8: invokeinterface #106,  3          // InterfaceMethod scalaz/Order.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      13: aload_0
      14: invokeinterface #35,  1           // InterfaceMethod scalaz$Order$OrderLaw$$$outer:()Lscalaz/Order;
      19: aload_1
      20: aload_2
      21: invokeinterface #39,  3           // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      26: getstatic     #79                 // Field scalaz/Ordering$EQ$.MODULE$:Lscalaz/Ordering$EQ$;
      29: astore_3
      30: dup
      31: ifnonnull     38
      34: pop
      35: goto          49
      38: aload_3
      39: invokevirtual #47                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: if_icmpne     55
      53: iconst_1
      54: ireturn
      55: iconst_0
      56: ireturn

  public abstract scalaz.Order scalaz$Order$OrderLaw$$$outer();

  public static boolean $anonfun$transitiveOrder$1(scalaz.Order$OrderLaw, java.lang.Object, java.lang.Object, scalaz.Ordering);
    Code:
       0: aload_0
       1: invokeinterface #35,  1           // InterfaceMethod scalaz$Order$OrderLaw$$$outer:()Lscalaz/Order;
       6: aload_1
       7: aload_2
       8: invokeinterface #39,  3           // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      13: dup
      14: ifnonnull     25
      17: pop
      18: aload_3
      19: ifnull        32
      22: goto          34
      25: aload_3
      26: invokevirtual #47                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      29: ifeq          34
      32: iconst_1
      33: ireturn
      34: iconst_0
      35: ireturn

  public static void $init$(scalaz.Order<F>.OrderLaw);
    Code:
       0: return
}
