Compiled from "EitherT.scala"
public interface scalaz.EitherTMonadPlus<F, E> extends scalaz.MonadPlus<?>, scalaz.EitherTMonad<F, E>, scalaz.EitherTPlus<F, E> {
  public abstract scalaz.Monoid<E> G();

  public static scalaz.EitherT empty$(scalaz.EitherTMonadPlus);
    Code:
       0: aload_0
       1: invokespecial #30                 // InterfaceMethod empty:()Lscalaz/EitherT;
       4: areturn

  public default <A> scalaz.EitherT<E, F, A> empty();
    Code:
       0: new           #34                 // class scalaz/EitherT
       3: dup
       4: aload_0
       5: invokeinterface #38,  1           // InterfaceMethod F:()Lscalaz/Monad;
      10: aload_0
      11: invokedynamic #60,  0             // InvokeDynamic #0:apply:(Lscalaz/EitherTMonadPlus;)Lscala/Function0;
      16: invokeinterface #66,  2           // InterfaceMethod scalaz/Monad.point:(Lscala/Function0;)Ljava/lang/Object;
      21: invokespecial #70                 // Method scalaz/EitherT."<init>":(Ljava/lang/Object;)V
      24: areturn

  public static scalaz.$bslash$div $anonfun$empty$1(scalaz.EitherTMonadPlus);
    Code:
       0: getstatic     #77                 // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
       3: pop
       4: aload_0
       5: invokeinterface #79,  1           // InterfaceMethod G:()Lscalaz/Monoid;
      10: invokeinterface #84,  1           // InterfaceMethod scalaz/Monoid.zero:()Ljava/lang/Object;
      15: astore_1
      16: new           #86                 // class scalaz/$minus$bslash$div
      19: dup
      20: aload_1
      21: invokespecial #87                 // Method scalaz/$minus$bslash$div."<init>":(Ljava/lang/Object;)V
      24: areturn

  public static void $init$(scalaz.EitherTMonadPlus);
    Code:
       0: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #103,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
