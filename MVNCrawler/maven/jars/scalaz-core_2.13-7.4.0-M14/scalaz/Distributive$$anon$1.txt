Compiled from "Distributive.scala"
public final class scalaz.Distributive$$anon$1 implements scalaz.CompositionDistributive<F, G> {
  private scalaz.syntax.DistributiveSyntax<?> distributiveSyntax;

  private scalaz.syntax.FunctorSyntax<?> functorSyntax;

  private scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax;

  private final scalaz.Distributive $outer;

  private final scalaz.Distributive G0$1;

  public <X, A, B> F distributeImpl(X, scala.Function1<A, F>, scalaz.Functor<X>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #53                 // InterfaceMethod scalaz/CompositionDistributive.distributeImpl$:(Lscalaz/CompositionDistributive;Ljava/lang/Object;Lscala/Function1;Lscalaz/Functor;)Ljava/lang/Object;
       7: areturn

  public <A, B> F map(F, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #68                 // InterfaceMethod scalaz/CompositionFunctor.map$:(Lscalaz/CompositionFunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.Distributive<?> compose(scalaz.Distributive<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #74                 // InterfaceMethod scalaz/Distributive.compose$:(Lscalaz/Distributive;Lscalaz/Distributive;)Lscalaz/Distributive;
       5: areturn

  public <G> scalaz.Distributive<?> product(scalaz.Distributive<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #78                 // InterfaceMethod scalaz/Distributive.product$:(Lscalaz/Distributive;Lscalaz/Distributive;)Lscalaz/Distributive;
       5: areturn

  public <G> scalaz.Distributive<?>.Distribution<G> distribution(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #86                 // InterfaceMethod scalaz/Distributive.distribution$:(Lscalaz/Distributive;Lscalaz/Functor;)Lscalaz/Distributive$Distribution;
       5: areturn

  public <G, A, B> F distribute(G, scala.Function1<A, F>, scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #94                 // InterfaceMethod scalaz/Distributive.distribute$:(Lscalaz/Distributive;Ljava/lang/Object;Lscala/Function1;Lscalaz/Functor;)Ljava/lang/Object;
       7: areturn

  public <G, A> F cosequence(G, scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #101                // InterfaceMethod scalaz/Distributive.cosequence$:(Lscalaz/Distributive;Ljava/lang/Object;Lscalaz/Functor;)Ljava/lang/Object;
       6: areturn

  public <A, B> F xmap(F, scala.Function1<A, B>, scala.Function1<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #109                // InterfaceMethod scalaz/Functor.xmap$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A, B> F apply(F, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #114                // InterfaceMethod scalaz/Functor.apply$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Function1<F, F> lift(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #121                // InterfaceMethod scalaz/Functor.lift$:(Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public <A, B> F strengthL(A, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #128                // InterfaceMethod scalaz/Functor.strengthL$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> F strengthR(F, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #134                // InterfaceMethod scalaz/Functor.strengthR$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> F mapply(A, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #138                // InterfaceMethod scalaz/Functor.mapply$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A> F fpair(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #145                // InterfaceMethod scalaz/Functor.fpair$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> F fproduct(F, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #149                // InterfaceMethod scalaz/Functor.fproduct$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A> F void(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #153                // InterfaceMethod scalaz/Functor.void$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> F counzip(scalaz.$bslash$div<F, F>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #160                // InterfaceMethod scalaz/Functor.counzip$:(Lscalaz/Functor;Lscalaz/$bslash$div;)Ljava/lang/Object;
       5: areturn

  public <G$> scalaz.Functor<?> compose(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #166                // InterfaceMethod scalaz/Functor.compose$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <G$> scalaz.Contravariant<?> icompose(scalaz.Contravariant<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #173                // InterfaceMethod scalaz/Functor.icompose$:(Lscalaz/Functor;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public <G$> scalaz.Bifunctor<?> bicompose(scalaz.Bifunctor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #182                // InterfaceMethod scalaz/Functor.bicompose$:(Lscalaz/Functor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G$> scalaz.Functor<?> product(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #185                // InterfaceMethod scalaz/Functor.product$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <A, B> F widen(F, scalaz.Liskov<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #193                // InterfaceMethod scalaz/Functor.widen$:(Lscalaz/Functor;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public scalaz.Functor<?>.FunctorLaw functorLaw();
    Code:
       0: aload_0
       1: invokestatic  #201                // InterfaceMethod scalaz/Functor.functorLaw$:(Lscalaz/Functor;)Lscalaz/Functor$FunctorLaw;
       4: areturn

  public <A, B> F xmapb(F, scalaz.BijectionT<?, ?, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #209                // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public <A, B> F xmapi(F, scalaz.Isomorphisms$Iso<scala.Function1, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #218                // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<?>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #226                // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.DistributiveSyntax<?> distributiveSyntax();
    Code:
       0: aload_0
       1: getfield      #230                // Field distributiveSyntax:Lscalaz/syntax/DistributiveSyntax;
       4: areturn

  public void scalaz$Distributive$_setter_$distributiveSyntax_$eq(scalaz.syntax.DistributiveSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #230                // Field distributiveSyntax:Lscalaz/syntax/DistributiveSyntax;
       5: return

  public scalaz.syntax.FunctorSyntax<?> functorSyntax();
    Code:
       0: aload_0
       1: getfield      #238                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       4: areturn

  public void scalaz$Functor$_setter_$functorSyntax_$eq(scalaz.syntax.FunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #238                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #245                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #245                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public scalaz.Distributive<F> F();
    Code:
       0: aload_0
       1: getfield      #253                // Field $outer:Lscalaz/Distributive;
       4: areturn

  public scalaz.Distributive<G> G();
    Code:
       0: aload_0
       1: getfield      #257                // Field G0$1:Lscalaz/Distributive;
       4: areturn

  public scalaz.Functor G();
    Code:
       0: aload_0
       1: invokevirtual #260                // Method G:()Lscalaz/Distributive;
       4: areturn

  public scalaz.Functor F();
    Code:
       0: aload_0
       1: invokevirtual #262                // Method F:()Lscalaz/Distributive;
       4: areturn

  public scalaz.Distributive$$anon$1(scalaz.Distributive, scalaz.Distributive);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #253                // Field $outer:Lscalaz/Distributive;
      11: aload_0
      12: aload_2
      13: putfield      #257                // Field G0$1:Lscalaz/Distributive;
      16: aload_0
      17: invokespecial #267                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #271                // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
      24: aload_0
      25: invokestatic  #274                // InterfaceMethod scalaz/Functor.$init$:(Lscalaz/Functor;)V
      28: aload_0
      29: invokestatic  #277                // InterfaceMethod scalaz/Distributive.$init$:(Lscalaz/Distributive;)V
      32: invokestatic  #282                // Method scala/runtime/Statics.releaseFence:()V
      35: return
}
