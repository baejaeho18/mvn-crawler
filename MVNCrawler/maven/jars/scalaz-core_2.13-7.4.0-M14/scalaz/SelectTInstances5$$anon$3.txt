Compiled from "SelectT.scala"
public final class scalaz.SelectTInstances5$$anon$3 implements scalaz.SelectTPlus<R, M> {
  private scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Plus evidence$3$1;

  public <A> scalaz.SelectT<R, M, A> plus(scalaz.SelectT<R, M, A>, scala.Function0<scalaz.SelectT<R, M, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #32                 // InterfaceMethod scalaz/SelectTPlus.plus$:(Lscalaz/SelectTPlus;Lscalaz/SelectT;Lscala/Function0;)Lscalaz/SelectT;
       6: areturn

  public <S$, A> scalaz.Maybe<scalaz.SelectT<R, M, A>> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, scalaz.SelectT<R, M, A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #45                 // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S$, A> scalaz.Maybe<scalaz.SelectT<R, M, A>> unfoldrPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<scalaz.SelectT<R, M, A>, S$>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #52                 // InterfaceMethod scalaz/Plus.unfoldrPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #58                 // InterfaceMethod scalaz/Plus.compose$:(Lscalaz/Plus;)Lscalaz/Plus;
       4: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #65                 // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<scalaz.SelectT<R, M, A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #72                 // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #79                 // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #83                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #83                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.Plus<M> F();
    Code:
       0: getstatic     #95                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #97                 // Field evidence$3$1:Lscalaz/Plus;
       7: invokevirtual #101                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #17                 // class scalaz/Plus
      13: areturn

  public java.lang.Object plus(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #104                // class scalaz/SelectT
       5: aload_2
       6: invokevirtual #106                // Method plus:(Lscalaz/SelectT;Lscala/Function0;)Lscalaz/SelectT;
       9: areturn

  public scalaz.SelectTInstances5$$anon$3(scalaz.SelectTInstances5, scalaz.Plus);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #97                 // Field evidence$3$1:Lscalaz/Plus;
       5: aload_0
       6: invokespecial #112                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #116                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      13: invokestatic  #121                // Method scala/runtime/Statics.releaseFence:()V
      16: return
}
