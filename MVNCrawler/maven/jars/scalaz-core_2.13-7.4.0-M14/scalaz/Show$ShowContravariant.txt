Compiled from "Show.scala"
public class scalaz.Show$ShowContravariant implements scalaz.Contravariant<scalaz.Show> {
  private scalaz.syntax.ContravariantSyntax<scalaz.Show> contravariantSyntax;

  private scalaz.syntax.InvariantFunctorSyntax<scalaz.Show> invariantFunctorSyntax;

  public java.lang.Object narrow(java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #40                 // InterfaceMethod scalaz/Contravariant.narrow$:(Lscalaz/Contravariant;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #52                 // InterfaceMethod scalaz/Contravariant.xmap$:(Lscalaz/Contravariant;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <G> scalaz.Functor<?> compose(scalaz.Contravariant<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #61                 // InterfaceMethod scalaz/Contravariant.compose$:(Lscalaz/Contravariant;Lscalaz/Contravariant;)Lscalaz/Functor;
       5: areturn

  public <G> scalaz.Contravariant<?> icompose(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #69                 // InterfaceMethod scalaz/Contravariant.icompose$:(Lscalaz/Contravariant;Lscalaz/Functor;)Lscalaz/Contravariant;
       5: areturn

  public <G> scalaz.Contravariant<?> product(scalaz.Contravariant<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #77                 // InterfaceMethod scalaz/Contravariant.product$:(Lscalaz/Contravariant;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public scalaz.Contravariant<scalaz.Show>.ContravariantLaw contravariantLaw();
    Code:
       0: aload_0
       1: invokestatic  #84                 // InterfaceMethod scalaz/Contravariant.contravariantLaw$:(Lscalaz/Contravariant;)Lscalaz/Contravariant$ContravariantLaw;
       4: areturn

  public java.lang.Object xmapb(java.lang.Object, scalaz.BijectionT);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #92                 // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmapi(java.lang.Object, scalaz.Isomorphisms$Iso);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #100                // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<scalaz.Show>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #108                // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.ContravariantSyntax<scalaz.Show> contravariantSyntax();
    Code:
       0: aload_0
       1: getfield      #112                // Field contravariantSyntax:Lscalaz/syntax/ContravariantSyntax;
       4: areturn

  public void scalaz$Contravariant$_setter_$contravariantSyntax_$eq(scalaz.syntax.ContravariantSyntax<scalaz.Show>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #112                // Field contravariantSyntax:Lscalaz/syntax/ContravariantSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<scalaz.Show> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #120                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<scalaz.Show>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #120                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public <A, B> scalaz.Show<B> contramap(scalaz.Show<A>, scala.Function1<B, A>);
    Code:
       0: new           #26                 // class scalaz/Show$ShowContravariant$$anonfun$contramap$2
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #131                // Method scalaz/Show$ShowContravariant$$anonfun$contramap$2."<init>":(Lscalaz/Show$ShowContravariant;Lscalaz/Show;Lscala/Function1;)V
      10: areturn

  public java.lang.Object contramap(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #23                 // class scalaz/Show
       5: aload_2
       6: invokevirtual #135                // Method contramap:(Lscalaz/Show;Lscala/Function1;)Lscalaz/Show;
       9: areturn

  public static final scalaz.Cord scalaz$Show$ShowContravariant$$$anonfun$contramap$1(java.lang.Object, scalaz.Show, scala.Function1);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: invokeinterface #145,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       8: invokeinterface #149,  2          // InterfaceMethod scalaz/Show.show:(Ljava/lang/Object;)Lscalaz/Cord;
      13: areturn

  public scalaz.Show$ShowContravariant();
    Code:
       0: aload_0
       1: invokespecial #152                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #156                // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
       8: aload_0
       9: invokestatic  #159                // InterfaceMethod scalaz/Contravariant.$init$:(Lscalaz/Contravariant;)V
      12: invokestatic  #164                // Method scala/runtime/Statics.releaseFence:()V
      15: return
}
