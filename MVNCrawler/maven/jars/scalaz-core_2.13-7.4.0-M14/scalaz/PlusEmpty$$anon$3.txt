Compiled from "PlusEmpty.scala"
public final class scalaz.PlusEmpty$$anon$3 implements scalaz.Monoid<F> {
  private scalaz.syntax.MonoidSyntax<F> monoidSyntax;

  private scalaz.syntax.SemigroupSyntax<F> semigroupSyntax;

  private final scalaz.PlusEmpty $outer;

  public F multiply(F, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #38                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(F, scalaz.Equal<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #51                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty(F, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #61                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty(F, scala.Function0<B>, scalaz.Equal<F>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #71                 // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty(F, scala.Function0<B>, scalaz.Equal<F>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #77                 // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #84                 // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #91                 // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<F>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #98                 // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public F multiply1(F, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #103                // InterfaceMethod scalaz/Semigroup.multiply1$:(Lscalaz/Semigroup;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<F> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, F>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #111                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<F> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<F, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #117                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #124                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #131                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<F>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #138                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.MonoidSyntax<F> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #142                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #142                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<F> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #150                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #150                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public F append(F, scala.Function0<F>);
    Code:
       0: aload_0
       1: getfield      #160                // Field $outer:Lscalaz/PlusEmpty;
       4: aload_1
       5: aload_2
       6: invokeinterface #163,  3          // InterfaceMethod scalaz/PlusEmpty.plus:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      11: areturn

  public F zero();
    Code:
       0: aload_0
       1: getfield      #160                // Field $outer:Lscalaz/PlusEmpty;
       4: invokeinterface #169,  1          // InterfaceMethod scalaz/PlusEmpty.empty:()Ljava/lang/Object;
       9: areturn

  public <S> F unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, F>>>);
    Code:
       0: aload_0
       1: getfield      #160                // Field $outer:Lscalaz/PlusEmpty;
       4: aload_1
       5: aload_2
       6: invokeinterface #175,  3          // InterfaceMethod scalaz/PlusEmpty.unfoldlPsum:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public <S> F unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<F, S>>>);
    Code:
       0: aload_0
       1: getfield      #160                // Field $outer:Lscalaz/PlusEmpty;
       4: aload_1
       5: aload_2
       6: invokeinterface #180,  3          // InterfaceMethod scalaz/PlusEmpty.unfoldrPsum:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public scalaz.PlusEmpty$$anon$3(scalaz.PlusEmpty);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #160                // Field $outer:Lscalaz/PlusEmpty;
      11: aload_0
      12: invokespecial #185                // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #189                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
      19: aload_0
      20: invokestatic  #192                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      23: invokestatic  #197                // Method scala/runtime/Statics.releaseFence:()V
      26: return
}
