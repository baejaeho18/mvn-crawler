Compiled from "Leibniz.scala"
public abstract class scalaz.Leibniz<L, H, A extends H, B extends H> {
  public static <LA, HA, LB, HB, T, A extends HA, A2 extends HA, B extends HB, B2 extends HB> scala.Tuple2<scalaz.Leibniz<LA, HA, A, A2>, scalaz.Leibniz<LB, HB, B, B2>> lower2(scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, T, T>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: aload_0
       4: invokevirtual #27                 // Method scalaz/Leibniz$.lower2:(Lscalaz/Leibniz;)Lscala/Tuple2;
       7: areturn

  public static <LA, HA, T, A extends HA, A2 extends HA> scalaz.Leibniz<LA, HA, A, A2> lower(scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, T, T>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: pop
       4: new           #13                 // class scalaz/Leibniz$$anon$3
       7: dup
       8: invokespecial #35                 // Method scalaz/Leibniz$$anon$3."<init>":()V
      11: areturn

  public static <L, H, A extends H, B extends H> scalaz.Leibniz<L, H, A, B> force();
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: pop
       4: new           #13                 // class scalaz/Leibniz$$anon$3
       7: dup
       8: invokespecial #35                 // Method scalaz/Leibniz$$anon$3."<init>":()V
      11: areturn

  public static <LA, LB, LC, LT, HA, HB, HC, HT, T extends HT, A extends HA, A2 extends HA, B extends HB, B2 extends HB, C extends HC, C2 extends HC> scalaz.Leibniz<LT, HT, T, T> lift3(scalaz.Leibniz<LA, HA, A, A2>, scalaz.Leibniz<LB, HB, B, B2>, scalaz.Leibniz<LC, HC, C, C2>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #46                 // Method scalaz/Leibniz$.lift3:(Lscalaz/Leibniz;Lscalaz/Leibniz;Lscalaz/Leibniz;)Lscalaz/Leibniz;
       9: areturn

  public static <LA, LB, LT, HA, HB, HT, T extends HT, A extends HA, A2 extends HA, B extends HB, B2 extends HB> scalaz.Leibniz<LT, HT, T, T> lift2(scalaz.Leibniz<LA, HA, A, A2>, scalaz.Leibniz<LB, HB, B, B2>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: aload_0
       4: aload_1
       5: invokevirtual #51                 // Method scalaz/Leibniz$.lift2:(Lscalaz/Leibniz;Lscalaz/Leibniz;)Lscalaz/Leibniz;
       8: areturn

  public static <LA, LT, HA, HT, T extends HT, A extends HA, A2 extends HA> scalaz.Leibniz<LT, HT, T, T> lift(scalaz.Leibniz<LA, HA, A, A2>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: aload_0
       4: invokevirtual #55                 // Method scalaz/Leibniz$.lift:(Lscalaz/Leibniz;)Lscalaz/Leibniz;
       7: areturn

  public static <L, H, A extends H, B extends H> scalaz.Leibniz<L, H, B, A> symm(scalaz.Leibniz<L, H, A, B>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: aload_0
       4: invokevirtual #60                 // Method scalaz/Leibniz$.symm:(Lscalaz/Leibniz;)Lscalaz/Leibniz;
       7: areturn

  public static <L, H, A extends H, B extends H, C extends H> scalaz.Leibniz<L, H, A, C> trans(scalaz.Leibniz<L, H, B, C>, scalaz.Leibniz<L, H, A, B>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: pop
       4: aload_0
       5: aload_1
       6: invokevirtual #67                 // Method subst:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #2                  // class scalaz/Leibniz
      12: areturn

  public static <A, B> scala.Function1<A, B> witness(scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, A, B>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: aload_0
       4: invokevirtual #72                 // Method scalaz/Leibniz$.witness:(Lscalaz/Leibniz;)Lscala/Function1;
       7: areturn

  public static <A> scalaz.Leibniz<A, A, A, A> refl();
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: pop
       4: new           #11                 // class scalaz/Leibniz$$anon$2
       7: dup
       8: invokespecial #75                 // Method scalaz/Leibniz$$anon$2."<init>":()V
      11: areturn

  public static scalaz.Category<scalaz.Leibniz> leibniz();
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: invokevirtual #80                 // Method scalaz/Leibniz$.leibniz:()Lscalaz/Category;
       6: areturn

  public B apply(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #67                 // Method subst:(Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public abstract <F> F subst(F);

  public <L2 extends L, H2, C extends H2> scalaz.Leibniz<L2, H2, C, B> compose(scalaz.Leibniz<L2, H2, C, A>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: pop
       4: aload_0
       5: aload_1
       6: invokevirtual #67                 // Method subst:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #2                  // class scalaz/Leibniz
      12: areturn

  public <L2 extends L, H2, C extends H2> scalaz.Leibniz<L2, H2, A, C> andThen(scalaz.Leibniz<L2, H2, B, C>);
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: pop
       4: aload_1
       5: aload_0
       6: invokevirtual #67                 // Method subst:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #2                  // class scalaz/Leibniz
      12: areturn

  public scalaz.Leibniz<L, H, B, A> flip();
    Code:
       0: getstatic     #25                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: aload_0
       4: invokevirtual #60                 // Method scalaz/Leibniz$.symm:(Lscalaz/Leibniz;)Lscalaz/Leibniz;
       7: areturn

  public <X> scala.Function1<X, B> onF(scala.Function1<X, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #67                 // Method subst:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #99                 // class scala/Function1
       8: areturn

  public <FA> java.lang.Object onCov(FA, scalaz.Unapply<scalaz.Functor, FA>);
    Code:
       0: aload_0
       1: aload_2
       2: ifnonnull     7
       5: aconst_null
       6: athrow
       7: aload_2
       8: invokeinterface #108,  1          // InterfaceMethod scalaz/Unapply.leibniz:()Lscalaz/Leibniz;
      13: dup
      14: ifnonnull     19
      17: aconst_null
      18: athrow
      19: aload_1
      20: invokevirtual #67                 // Method subst:(Ljava/lang/Object;)Ljava/lang/Object;
      23: invokevirtual #67                 // Method subst:(Ljava/lang/Object;)Ljava/lang/Object;
      26: areturn

  public <FA> java.lang.Object onContra(FA, scalaz.Unapply<scalaz.Contravariant, FA>);
    Code:
       0: aload_0
       1: aload_2
       2: ifnonnull     7
       5: aconst_null
       6: athrow
       7: aload_2
       8: invokeinterface #108,  1          // InterfaceMethod scalaz/Unapply.leibniz:()Lscalaz/Leibniz;
      13: dup
      14: ifnonnull     19
      17: aconst_null
      18: athrow
      19: aload_1
      20: invokevirtual #67                 // Method subst:(Ljava/lang/Object;)Ljava/lang/Object;
      23: invokevirtual #67                 // Method subst:(Ljava/lang/Object;)Ljava/lang/Object;
      26: areturn

  public scalaz.Liskov<A, B> liskov();
    Code:
       0: getstatic     #119                // Field scalaz/Liskov$.MODULE$:Lscalaz/Liskov$;
       3: pop
       4: new           #15                 // class scalaz/Liskov$$anon$4
       7: dup
       8: aload_0
       9: invokespecial #122                // Method scalaz/Liskov$$anon$4."<init>":(Lscalaz/Leibniz;)V
      12: areturn

  public scalaz.Leibniz();
    Code:
       0: aload_0
       1: invokespecial #123                // Method java/lang/Object."<init>":()V
       4: return
}
