Compiled from "Kleisli.scala"
public final class scalaz.KleisliInstances1$$anon$18 implements scalaz.KleisliStrong<F> {
  private scalaz.syntax.StrongSyntax<?> strongSyntax;

  private scalaz.syntax.ProfunctorSyntax<?> profunctorSyntax;

  private final scalaz.Functor evidence$4$1;

  public <A, B, C> scalaz.Kleisli<F, scala.Tuple2<A, C>, scala.Tuple2<B, C>> first(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #39                 // InterfaceMethod scalaz/KleisliStrong.first$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, scala.Tuple2<C, A>, scala.Tuple2<C, B>> second(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #47                 // InterfaceMethod scalaz/KleisliStrong.second$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, C, B> mapfst(scalaz.Kleisli<F, A, B>, scala.Function1<C, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #55                 // InterfaceMethod scalaz/KleisliStrong.mapfst$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       6: areturn

  public <A, B, C> scalaz.Kleisli<F, A, C> mapsnd(scalaz.Kleisli<F, A, B>, scala.Function1<B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #61                 // InterfaceMethod scalaz/KleisliStrong.mapsnd$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       6: areturn

  public scalaz.Strong<?>.StrongLaws strongLaw();
    Code:
       0: aload_0
       1: invokestatic  #68                 // InterfaceMethod scalaz/Strong.strongLaw$:(Lscalaz/Strong;)Lscalaz/Strong$StrongLaws;
       4: areturn

  public java.lang.Object dimap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #76                 // InterfaceMethod scalaz/Profunctor.dimap$:(Lscalaz/Profunctor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scalaz.InvariantFunctor<?> invariantFunctor();
    Code:
       0: aload_0
       1: invokestatic  #84                 // InterfaceMethod scalaz/Profunctor.invariantFunctor$:(Lscalaz/Profunctor;)Lscalaz/InvariantFunctor;
       4: areturn

  public <C> scalaz.Functor<?> covariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #91                 // InterfaceMethod scalaz/Profunctor.covariantInstance$:(Lscalaz/Profunctor;)Lscalaz/Functor;
       4: areturn

  public <C> scalaz.Contravariant<?> contravariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #98                 // InterfaceMethod scalaz/Profunctor.contravariantInstance$:(Lscalaz/Profunctor;)Lscalaz/Contravariant;
       4: areturn

  public scalaz.Profunctor<?>.ProfunctorLaw profunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #105                // InterfaceMethod scalaz/Profunctor.profunctorLaw$:(Lscalaz/Profunctor;)Lscalaz/Profunctor$ProfunctorLaw;
       4: areturn

  public scalaz.syntax.StrongSyntax<?> strongSyntax();
    Code:
       0: aload_0
       1: getfield      #109                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       4: areturn

  public void scalaz$Strong$_setter_$strongSyntax_$eq(scalaz.syntax.StrongSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #109                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       5: return

  public scalaz.syntax.ProfunctorSyntax<?> profunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #117                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       4: areturn

  public void scalaz$Profunctor$_setter_$profunctorSyntax_$eq(scalaz.syntax.ProfunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #117                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       5: return

  public scalaz.Functor<F> F();
    Code:
       0: getstatic     #128                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #130                // Field evidence$4$1:Lscalaz/Functor;
       7: invokevirtual #134                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #136                // class scalaz/Functor
      13: areturn

  public java.lang.Object mapsnd(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #139                // class scalaz/Kleisli
       5: aload_2
       6: invokevirtual #141                // Method mapsnd:(Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       9: areturn

  public java.lang.Object mapfst(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #139                // class scalaz/Kleisli
       5: aload_2
       6: invokevirtual #143                // Method mapfst:(Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       9: areturn

  public java.lang.Object second(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #139                // class scalaz/Kleisli
       5: invokevirtual #145                // Method second:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public java.lang.Object first(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #139                // class scalaz/Kleisli
       5: invokevirtual #147                // Method first:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public scalaz.KleisliInstances1$$anon$18(scalaz.KleisliInstances1, scalaz.Functor);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #130                // Field evidence$4$1:Lscalaz/Functor;
       5: aload_0
       6: invokespecial #153                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #157                // InterfaceMethod scalaz/Profunctor.$init$:(Lscalaz/Profunctor;)V
      13: aload_0
      14: invokestatic  #160                // InterfaceMethod scalaz/Strong.$init$:(Lscalaz/Strong;)V
      17: invokestatic  #165                // Method scala/runtime/Statics.releaseFence:()V
      20: return
}
