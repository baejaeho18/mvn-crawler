Compiled from "EitherOps.scala"
public interface scalaz.syntax.std.ToEitherOps {
  public static scala.util.Either ToEitherOpsFromEither$(scalaz.syntax.std.ToEitherOps, scala.util.Either);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #16                 // InterfaceMethod ToEitherOpsFromEither:(Lscala/util/Either;)Lscala/util/Either;
       5: areturn

  public default <A, B> scala.util.Either<A, B> ToEitherOpsFromEither(scala.util.Either<A, B>);
    Code:
       0: aload_1
       1: areturn

  public static scala.util.Right ToRightOpsFromRight$(scalaz.syntax.std.ToEitherOps, scala.util.Right);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #26                 // InterfaceMethod ToRightOpsFromRight:(Lscala/util/Right;)Lscala/util/Right;
       5: areturn

  public default <A, B> scala.util.Right<A, B> ToRightOpsFromRight(scala.util.Right<A, B>);
    Code:
       0: aload_1
       1: areturn

  public static scala.util.Left ToLeftOpsFromLeft$(scalaz.syntax.std.ToEitherOps, scala.util.Left);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #34                 // InterfaceMethod ToLeftOpsFromLeft:(Lscala/util/Left;)Lscala/util/Left;
       5: areturn

  public default <A, B> scala.util.Left<A, B> ToLeftOpsFromLeft(scala.util.Left<A, B>);
    Code:
       0: aload_1
       1: areturn

  public static void $init$(scalaz.syntax.std.ToEitherOps);
    Code:
       0: return
}
