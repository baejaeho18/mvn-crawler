Compiled from "package.scala"
public final class scalaz.syntax.std.either$ implements scalaz.syntax.std.ToEitherOps {
  public static final scalaz.syntax.std.either$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class scalaz/syntax/std/either$
       3: dup
       4: invokespecial #14                 // Method "<init>":()V
       7: putstatic     #16                 // Field MODULE$:Lscalaz/syntax/std/either$;
      10: getstatic     #16                 // Field MODULE$:Lscalaz/syntax/std/either$;
      13: pop
      14: return

  public <A, B> scala.util.Either<A, B> ToEitherOpsFromEither(scala.util.Either<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // InterfaceMethod scalaz/syntax/std/ToEitherOps.ToEitherOpsFromEither$:(Lscalaz/syntax/std/ToEitherOps;Lscala/util/Either;)Lscala/util/Either;
       5: areturn

  public <A, B> scala.util.Right<A, B> ToRightOpsFromRight(scala.util.Right<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #33                 // InterfaceMethod scalaz/syntax/std/ToEitherOps.ToRightOpsFromRight$:(Lscalaz/syntax/std/ToEitherOps;Lscala/util/Right;)Lscala/util/Right;
       5: areturn

  public <A, B> scala.util.Left<A, B> ToLeftOpsFromLeft(scala.util.Left<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #41                 // InterfaceMethod scalaz/syntax/std/ToEitherOps.ToLeftOpsFromLeft$:(Lscalaz/syntax/std/ToEitherOps;Lscala/util/Left;)Lscala/util/Left;
       5: areturn

  private scalaz.syntax.std.either$();
    Code:
       0: aload_0
       1: invokespecial #43                 // Method java/lang/Object."<init>":()V
       4: return
}
