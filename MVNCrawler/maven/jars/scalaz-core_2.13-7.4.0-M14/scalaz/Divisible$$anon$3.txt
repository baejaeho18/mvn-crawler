Compiled from "Divisible.scala"
public final class scalaz.Divisible$$anon$3 implements scalaz.IsomorphismDivisible<F, G> {
  private scalaz.syntax.DivisibleSyntax<F> divisibleSyntax;

  private scalaz.syntax.InvariantApplicativeSyntax<F> invariantApplicativeSyntax;

  private scalaz.syntax.DivideSyntax<F> divideSyntax;

  private scalaz.syntax.ContravariantSyntax<F> contravariantSyntax;

  private scalaz.syntax.InvariantFunctorSyntax<F> invariantFunctorSyntax;

  private final scalaz.Divisible E$1;

  private final scalaz.Isomorphisms$Iso2 D$1;

  public <A> F conquer();
    Code:
       0: aload_0
       1: invokestatic  #67                 // InterfaceMethod scalaz/IsomorphismDivisible.conquer$:(Lscalaz/IsomorphismDivisible;)Ljava/lang/Object;
       4: areturn

  public <Z> F xproduct0(scala.Function0<Z>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #77                 // InterfaceMethod scalaz/IsomorphismDivisible.xproduct0$:(Lscalaz/IsomorphismDivisible;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public <Z, A1> F xproduct1(scala.Function0<F>, scala.Function1<A1, Z>, scala.Function1<Z, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #88                 // InterfaceMethod scalaz/IsomorphismDivisible.xproduct1$:(Lscalaz/IsomorphismDivisible;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <Z, A1, A2> F xproduct2(scala.Function0<F>, scala.Function0<F>, scala.Function2<A1, A2, Z>, scala.Function1<Z, scala.Tuple2<A1, A2>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #97                 // InterfaceMethod scalaz/IsomorphismDivisible.xproduct2$:(Lscalaz/IsomorphismDivisible;Lscala/Function0;Lscala/Function0;Lscala/Function2;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public <Z, A1, A2, A3> F xproduct3(scala.Function0<F>, scala.Function0<F>, scala.Function0<F>, scala.Function3<A1, A2, A3, Z>, scala.Function1<Z, scala.Tuple3<A1, A2, A3>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #106                // InterfaceMethod scalaz/IsomorphismDivisible.xproduct3$:(Lscalaz/IsomorphismDivisible;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function3;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public <Z, A1, A2, A3, A4> F xproduct4(scala.Function0<F>, scala.Function0<F>, scala.Function0<F>, scala.Function0<F>, scala.Function4<A1, A2, A3, A4, Z>, scala.Function1<Z, scala.Tuple4<A1, A2, A3, A4>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #115                // InterfaceMethod scalaz/IsomorphismDivisible.xproduct4$:(Lscalaz/IsomorphismDivisible;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function4;Lscala/Function1;)Ljava/lang/Object;
      13: areturn

  public <A, B, C> F divide2(scala.Function0<F>, scala.Function0<F>, scala.Function1<C, scala.Tuple2<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #127                // InterfaceMethod scalaz/IsomorphismDivide.divide2$:(Lscalaz/IsomorphismDivide;Lscala/Function0;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A, B> F contramap(F, scala.Function1<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #137                // InterfaceMethod scalaz/IsomorphismContravariant.contramap$:(Lscalaz/IsomorphismContravariant;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> F xmap(F, scala.Function1<A, B>, scala.Function1<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #148                // InterfaceMethod scalaz/IsomorphismInvariantFunctor.xmap$:(Lscalaz/IsomorphismInvariantFunctor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scalaz.Divisible<F>.DivisibleLaw divisibleLaw();
    Code:
       0: aload_0
       1: invokestatic  #155                // InterfaceMethod scalaz/Divisible.divisibleLaw$:(Lscalaz/Divisible;)Lscalaz/Divisible$DivisibleLaw;
       4: areturn

  public final <Z> F xderiving0(scala.Function0<Z>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #162                // InterfaceMethod scalaz/InvariantApplicative.xderiving0$:(Lscalaz/InvariantApplicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public final <Z, A1> F xderiving1(scala.Function1<A1, Z>, scala.Function1<Z, A1>, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #169                // InterfaceMethod scalaz/InvariantApplicative.xderiving1$:(Lscalaz/InvariantApplicative;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final <Z, A1, A2> F xderiving2(scala.Function2<A1, A2, Z>, scala.Function1<Z, scala.Tuple2<A1, A2>>, F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #176                // InterfaceMethod scalaz/InvariantApplicative.xderiving2$:(Lscalaz/InvariantApplicative;Lscala/Function2;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final <Z, A1, A2, A3> F xderiving3(scala.Function3<A1, A2, A3, Z>, scala.Function1<Z, scala.Tuple3<A1, A2, A3>>, F, F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #183                // InterfaceMethod scalaz/InvariantApplicative.xderiving3$:(Lscalaz/InvariantApplicative;Lscala/Function3;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public final <Z, A1, A2, A3, A4> F xderiving4(scala.Function4<A1, A2, A3, A4, Z>, scala.Function1<Z, scala.Tuple4<A1, A2, A3, A4>>, F, F, F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #190                // InterfaceMethod scalaz/InvariantApplicative.xderiving4$:(Lscalaz/InvariantApplicative;Lscala/Function4;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public final <A, B, C> F divide(scala.Function0<F>, scala.Function0<F>, scala.Function1<C, scala.Tuple2<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #195                // InterfaceMethod scalaz/Divide.divide$:(Lscalaz/Divide;Lscala/Function0;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public final <A1, Z> F divide1(F, scala.Function1<Z, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #201                // InterfaceMethod scalaz/Divide.divide1$:(Lscalaz/Divide;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A1, A2, A3, Z> F divide3(scala.Function0<F>, scala.Function0<F>, scala.Function0<F>, scala.Function1<Z, scala.Tuple3<A1, A2, A3>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #208                // InterfaceMethod scalaz/Divide.divide3$:(Lscalaz/Divide;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public <A1, A2, A3, A4, Z> F divide4(scala.Function0<F>, scala.Function0<F>, scala.Function0<F>, scala.Function0<F>, scala.Function1<Z, scala.Tuple4<A1, A2, A3, A4>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #215                // InterfaceMethod scalaz/Divide.divide4$:(Lscalaz/Divide;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public <A1, A2> F tuple2(scala.Function0<F>, scala.Function0<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #222                // InterfaceMethod scalaz/Divide.tuple2$:(Lscalaz/Divide;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public final <A1, Z> F dividing1(scala.Function1<Z, A1>, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #229                // InterfaceMethod scalaz/Divide.dividing1$:(Lscalaz/Divide;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public final <A1, A2, Z> F dividing2(scala.Function1<Z, scala.Tuple2<A1, A2>>, F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #236                // InterfaceMethod scalaz/Divide.dividing2$:(Lscalaz/Divide;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final <A1, A2, A3, Z> F dividing3(scala.Function1<Z, scala.Tuple3<A1, A2, A3>>, F, F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #243                // InterfaceMethod scalaz/Divide.dividing3$:(Lscalaz/Divide;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final <A1, A2, A3, A4, Z> F dividing4(scala.Function1<Z, scala.Tuple4<A1, A2, A3, A4>>, F, F, F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #250                // InterfaceMethod scalaz/Divide.dividing4$:(Lscalaz/Divide;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public scalaz.Divide<F>.DivideLaw divideLaw();
    Code:
       0: aload_0
       1: invokestatic  #257                // InterfaceMethod scalaz/Divide.divideLaw$:(Lscalaz/Divide;)Lscalaz/Divide$DivideLaw;
       4: areturn

  public <A, B> F narrow(F, scalaz.Liskov<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #265                // InterfaceMethod scalaz/Contravariant.narrow$:(Lscalaz/Contravariant;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.Functor<?> compose(scalaz.Contravariant<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #274                // InterfaceMethod scalaz/Contravariant.compose$:(Lscalaz/Contravariant;Lscalaz/Contravariant;)Lscalaz/Functor;
       5: areturn

  public <G> scalaz.Contravariant<?> icompose(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #282                // InterfaceMethod scalaz/Contravariant.icompose$:(Lscalaz/Contravariant;Lscalaz/Functor;)Lscalaz/Contravariant;
       5: areturn

  public <G> scalaz.Contravariant<?> product(scalaz.Contravariant<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #290                // InterfaceMethod scalaz/Contravariant.product$:(Lscalaz/Contravariant;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public scalaz.Contravariant<F>.ContravariantLaw contravariantLaw();
    Code:
       0: aload_0
       1: invokestatic  #297                // InterfaceMethod scalaz/Contravariant.contravariantLaw$:(Lscalaz/Contravariant;)Lscalaz/Contravariant$ContravariantLaw;
       4: areturn

  public <A, B> F xmapb(F, scalaz.BijectionT<?, ?, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #305                // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public <A, B> F xmapi(F, scalaz.Isomorphisms$Iso<scala.Function1, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #314                // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<F>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #322                // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.DivisibleSyntax<F> divisibleSyntax();
    Code:
       0: aload_0
       1: getfield      #326                // Field divisibleSyntax:Lscalaz/syntax/DivisibleSyntax;
       4: areturn

  public void scalaz$Divisible$_setter_$divisibleSyntax_$eq(scalaz.syntax.DivisibleSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #326                // Field divisibleSyntax:Lscalaz/syntax/DivisibleSyntax;
       5: return

  public scalaz.syntax.InvariantApplicativeSyntax<F> invariantApplicativeSyntax();
    Code:
       0: aload_0
       1: getfield      #334                // Field invariantApplicativeSyntax:Lscalaz/syntax/InvariantApplicativeSyntax;
       4: areturn

  public void scalaz$InvariantApplicative$_setter_$invariantApplicativeSyntax_$eq(scalaz.syntax.InvariantApplicativeSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #334                // Field invariantApplicativeSyntax:Lscalaz/syntax/InvariantApplicativeSyntax;
       5: return

  public scalaz.syntax.DivideSyntax<F> divideSyntax();
    Code:
       0: aload_0
       1: getfield      #341                // Field divideSyntax:Lscalaz/syntax/DivideSyntax;
       4: areturn

  public void scalaz$Divide$_setter_$divideSyntax_$eq(scalaz.syntax.DivideSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #341                // Field divideSyntax:Lscalaz/syntax/DivideSyntax;
       5: return

  public scalaz.syntax.ContravariantSyntax<F> contravariantSyntax();
    Code:
       0: aload_0
       1: getfield      #348                // Field contravariantSyntax:Lscalaz/syntax/ContravariantSyntax;
       4: areturn

  public void scalaz$Contravariant$_setter_$contravariantSyntax_$eq(scalaz.syntax.ContravariantSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #348                // Field contravariantSyntax:Lscalaz/syntax/ContravariantSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<F> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #355                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #355                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public scalaz.Divisible<G> G();
    Code:
       0: aload_0
       1: getfield      #363                // Field E$1:Lscalaz/Divisible;
       4: areturn

  public scalaz.Isomorphisms$Iso2<scalaz.NaturalTransformation, F, G> iso();
    Code:
       0: aload_0
       1: getfield      #367                // Field D$1:Lscalaz/Isomorphisms$Iso2;
       4: areturn

  public scalaz.InvariantFunctor G();
    Code:
       0: aload_0
       1: invokevirtual #370                // Method G:()Lscalaz/Divisible;
       4: areturn

  public scalaz.Contravariant G();
    Code:
       0: aload_0
       1: invokevirtual #370                // Method G:()Lscalaz/Divisible;
       4: areturn

  public scalaz.Divide G();
    Code:
       0: aload_0
       1: invokevirtual #370                // Method G:()Lscalaz/Divisible;
       4: areturn

  public scalaz.InvariantApplicative G();
    Code:
       0: aload_0
       1: invokevirtual #370                // Method G:()Lscalaz/Divisible;
       4: areturn

  public scalaz.Divisible$$anon$3(scalaz.Divisible, scalaz.Isomorphisms$Iso2);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #363                // Field E$1:Lscalaz/Divisible;
       5: aload_0
       6: aload_2
       7: putfield      #367                // Field D$1:Lscalaz/Isomorphisms$Iso2;
      10: aload_0
      11: invokespecial #378                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #382                // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
      18: aload_0
      19: invokestatic  #385                // InterfaceMethod scalaz/Contravariant.$init$:(Lscalaz/Contravariant;)V
      22: aload_0
      23: invokestatic  #388                // InterfaceMethod scalaz/Divide.$init$:(Lscalaz/Divide;)V
      26: aload_0
      27: invokestatic  #391                // InterfaceMethod scalaz/InvariantApplicative.$init$:(Lscalaz/InvariantApplicative;)V
      30: aload_0
      31: invokestatic  #394                // InterfaceMethod scalaz/Divisible.$init$:(Lscalaz/Divisible;)V
      34: invokestatic  #399                // Method scala/runtime/Statics.releaseFence:()V
      37: return
}
