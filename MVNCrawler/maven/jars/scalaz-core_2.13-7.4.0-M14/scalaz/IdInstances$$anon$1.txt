Compiled from "Id.scala"
public final class scalaz.IdInstances$$anon$1 implements scalaz.Traverse1<java.lang.Object>, scalaz.Monad<java.lang.Object>, scalaz.BindRec<java.lang.Object>, scalaz.Comonad<java.lang.Object>, scalaz.Distributive<java.lang.Object>, scalaz.Zip<java.lang.Object>, scalaz.Unzip<java.lang.Object>, scalaz.Align<java.lang.Object>, scalaz.Cozip<java.lang.Object>, scalaz.Optional<java.lang.Object> {
  private scalaz.syntax.OptionalSyntax<java.lang.Object> optionalSyntax;

  private scalaz.syntax.CozipSyntax<java.lang.Object> cozipSyntax;

  private scalaz.syntax.AlignSyntax<java.lang.Object> alignSyntax;

  private scalaz.syntax.UnzipSyntax<java.lang.Object> unzipSyntax;

  private scalaz.syntax.ZipSyntax<java.lang.Object> zipSyntax;

  private scalaz.syntax.DistributiveSyntax<java.lang.Object> distributiveSyntax;

  private scalaz.syntax.ComonadSyntax<java.lang.Object> comonadSyntax;

  private scalaz.syntax.CobindSyntax<java.lang.Object> cobindSyntax;

  private scalaz.syntax.BindRecSyntax<java.lang.Object> bindRecSyntax;

  private scalaz.syntax.MonadSyntax<java.lang.Object> monadSyntax;

  private scalaz.syntax.BindSyntax<java.lang.Object> bindSyntax;

  private scalaz.syntax.ApplicativeSyntax<java.lang.Object> applicativeSyntax;

  private scalaz.syntax.InvariantApplicativeSyntax<java.lang.Object> invariantApplicativeSyntax;

  private scalaz.syntax.ApplySyntax<java.lang.Object> applySyntax;

  private scalaz.syntax.Traverse1Syntax<java.lang.Object> traverse1Syntax;

  private scalaz.syntax.Foldable1Syntax<java.lang.Object> foldable1Syntax;

  private scalaz.syntax.TraverseSyntax<java.lang.Object> traverseSyntax;

  private scalaz.syntax.FoldableSyntax<java.lang.Object> foldableSyntax;

  private scalaz.syntax.FunctorSyntax<java.lang.Object> functorSyntax;

  private scalaz.syntax.InvariantFunctorSyntax<java.lang.Object> invariantFunctorSyntax;

  public final <A> boolean nonEmpty(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #185                // InterfaceMethod scalaz/Optional.nonEmpty$:(Lscalaz/Optional;Ljava/lang/Object;)Z
       5: ireturn

  public final <A> boolean isEmpty(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #192                // InterfaceMethod scalaz/Optional.isEmpty$:(Lscalaz/Optional;Ljava/lang/Object;)Z
       5: ireturn

  public <A> A orElse(A, scala.Function0<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #200                // InterfaceMethod scalaz/Optional.orElse$:(Lscalaz/Optional;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <A, X> X $qmark(A, scala.Function0<X>, scala.Function0<X>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #210                // InterfaceMethod scalaz/Optional.$qmark$:(Lscalaz/Optional;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       7: areturn

  public <A, B, C> scalaz.$bslash$div<A, scalaz.$bslash$div<B, C>> cozip3(scalaz.$bslash$div<A, scalaz.$bslash$div<B, C>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #218                // InterfaceMethod scalaz/Cozip.cozip3$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public <A, B, C, D> scalaz.$bslash$div<A, scalaz.$bslash$div<B, scalaz.$bslash$div<C, D>>> cozip4(scalaz.$bslash$div<A, scalaz.$bslash$div<B, scalaz.$bslash$div<C, D>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #223                // InterfaceMethod scalaz/Cozip.cozip4$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public <A, B, C, D, E> scalaz.$bslash$div<A, scalaz.$bslash$div<B, scalaz.$bslash$div<C, scalaz.$bslash$div<D, E>>>> cozip5(scalaz.$bslash$div<A, scalaz.$bslash$div<B, scalaz.$bslash$div<C, scalaz.$bslash$div<D, E>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #228                // InterfaceMethod scalaz/Cozip.cozip5$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public <A, B, C, D, E, G> scalaz.$bslash$div<A, scalaz.$bslash$div<B, scalaz.$bslash$div<C, scalaz.$bslash$div<D, scalaz.$bslash$div<E, G>>>>> cozip6(scalaz.$bslash$div<A, scalaz.$bslash$div<B, scalaz.$bslash$div<C, scalaz.$bslash$div<D, scalaz.$bslash$div<E, G>>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #233                // InterfaceMethod scalaz/Cozip.cozip6$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public <A, B, C, D, E, G, H> scalaz.$bslash$div<A, scalaz.$bslash$div<B, scalaz.$bslash$div<C, scalaz.$bslash$div<D, scalaz.$bslash$div<E, scalaz.$bslash$div<G, H>>>>>> cozip7(scalaz.$bslash$div<A, scalaz.$bslash$div<B, scalaz.$bslash$div<C, scalaz.$bslash$div<D, scalaz.$bslash$div<E, scalaz.$bslash$div<G, H>>>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #238                // InterfaceMethod scalaz/Cozip.cozip7$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public <G> scalaz.Align<?> product(scalaz.Align<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #246                // InterfaceMethod scalaz/Align.product$:(Lscalaz/Align;Lscalaz/Align;)Lscalaz/Align;
       5: areturn

  public <A, B> scalaz.$bslash$amp$div<A, B> align(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #256                // InterfaceMethod scalaz/Align.align$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B, C> scala.Function2<A, B, C> padWith(scala.Function2<scala.Option<A>, scala.Option<B>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #264                // InterfaceMethod scalaz/Align.padWith$:(Lscalaz/Align;Lscala/Function2;)Lscala/Function2;
       5: areturn

  public <A, B> scala.Function2<A, B, scala.Tuple2<scala.Option<A>, scala.Option<B>>> pad();
    Code:
       0: aload_0
       1: invokestatic  #272                // InterfaceMethod scalaz/Align.pad$:(Lscalaz/Align;)Lscala/Function2;
       4: areturn

  public <A> A merge(A, A, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #282                // InterfaceMethod scalaz/Align.merge$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public <A, B> scalaz.$bslash$amp$div<B, A> alignSwap(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #288                // InterfaceMethod scalaz/Align.alignSwap$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Option<A> alignA(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #293                // InterfaceMethod scalaz/Align.alignA$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Option<B> alignB(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #298                // InterfaceMethod scalaz/Align.alignB$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Option<A> alignThis(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #302                // InterfaceMethod scalaz/Align.alignThis$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Option<B> alignThat(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #306                // InterfaceMethod scalaz/Align.alignThat$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Option<scala.Tuple2<A, B>> alignBoth(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #311                // InterfaceMethod scalaz/Align.alignBoth$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scalaz.Align<java.lang.Object>.AlignLaw alignLaw();
    Code:
       0: aload_0
       1: invokestatic  #318                // InterfaceMethod scalaz/Align.alignLaw$:(Lscalaz/Align;)Lscalaz/Align$AlignLaw;
       4: areturn

  public <A, B> A firsts(scala.Tuple2<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #325                // InterfaceMethod scalaz/Unzip.firsts$:(Lscalaz/Unzip;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> B seconds(scala.Tuple2<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #330                // InterfaceMethod scalaz/Unzip.seconds$:(Lscalaz/Unzip;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <G> scalaz.Unzip<?> compose(scalaz.Functor<java.lang.Object>, scalaz.Unzip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #338                // InterfaceMethod scalaz/Unzip.compose$:(Lscalaz/Unzip;Lscalaz/Functor;Lscalaz/Unzip;)Lscalaz/Unzip;
       6: areturn

  public <G> scalaz.Unzip<?> product(scalaz.Unzip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #345                // InterfaceMethod scalaz/Unzip.product$:(Lscalaz/Unzip;Lscalaz/Unzip;)Lscalaz/Unzip;
       5: areturn

  public <A, B, C> scala.Tuple3<A, B, C> unzip3(scala.Tuple2<A, scala.Tuple2<B, C>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #352                // InterfaceMethod scalaz/Unzip.unzip3$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple3;
       5: areturn

  public <A, B, C, D> scala.Tuple4<A, B, C, D> unzip4(scala.Tuple2<A, scala.Tuple2<B, scala.Tuple2<C, D>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #359                // InterfaceMethod scalaz/Unzip.unzip4$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple4;
       5: areturn

  public <A, B, C, D, E> scala.Tuple5<A, B, C, D, E> unzip5(scala.Tuple2<A, scala.Tuple2<B, scala.Tuple2<C, scala.Tuple2<D, E>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #366                // InterfaceMethod scalaz/Unzip.unzip5$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple5;
       5: areturn

  public <A, B, C, D, E, G> scala.Tuple6<A, B, C, D, E, G> unzip6(scala.Tuple2<A, scala.Tuple2<B, scala.Tuple2<C, scala.Tuple2<D, scala.Tuple2<E, G>>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #373                // InterfaceMethod scalaz/Unzip.unzip6$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple6;
       5: areturn

  public <A, B, C, D, E, G, H> scala.Tuple7<A, B, C, D, E, G, H> unzip7(scala.Tuple2<A, scala.Tuple2<B, scala.Tuple2<C, scala.Tuple2<D, scala.Tuple2<E, scala.Tuple2<G, H>>>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #380                // InterfaceMethod scalaz/Unzip.unzip7$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple7;
       5: areturn

  public <G> scalaz.Zip<?> compose(scalaz.Functor<java.lang.Object>, scalaz.Zip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #385                // InterfaceMethod scalaz/Zip.compose$:(Lscalaz/Zip;Lscalaz/Functor;Lscalaz/Zip;)Lscalaz/Zip;
       6: areturn

  public <G> scalaz.Zip<?> product(scalaz.Zip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #391                // InterfaceMethod scalaz/Zip.product$:(Lscalaz/Zip;Lscalaz/Zip;)Lscalaz/Zip;
       5: areturn

  public <A, B, C> C zipWith(scala.Function0<A>, scala.Function0<B>, scala.Function2<A, B, C>, scalaz.Functor<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #400                // InterfaceMethod scalaz/Zip.zipWith$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;Lscala/Function2;Lscalaz/Functor;)Ljava/lang/Object;
       9: areturn

  public <A, B> scala.Tuple2<A, B> apzip(scala.Function0<scala.Function1<A, B>>, scala.Function0<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #407                // InterfaceMethod scalaz/Zip.apzip$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Tuple2<A, B> apzipPL(scala.Function0<scalaz.PLensFamily<A, A, B, B>>, scala.Function0<A>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #415                // InterfaceMethod scalaz/Zip.apzipPL$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public scalaz.Apply<java.lang.Object> ap(scalaz.Functor<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #423                // InterfaceMethod scalaz/Zip.ap$:(Lscalaz/Zip;Lscalaz/Functor;)Lscalaz/Apply;
       5: areturn

  public scalaz.Zip<java.lang.Object>.ZipLaw zipLaw();
    Code:
       0: aload_0
       1: invokestatic  #430                // InterfaceMethod scalaz/Zip.zipLaw$:(Lscalaz/Zip;)Lscalaz/Zip$ZipLaw;
       4: areturn

  public <G> scalaz.Distributive<?> compose(scalaz.Distributive<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #435                // InterfaceMethod scalaz/Distributive.compose$:(Lscalaz/Distributive;Lscalaz/Distributive;)Lscalaz/Distributive;
       5: areturn

  public <G> scalaz.Distributive<?> product(scalaz.Distributive<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #438                // InterfaceMethod scalaz/Distributive.product$:(Lscalaz/Distributive;Lscalaz/Distributive;)Lscalaz/Distributive;
       5: areturn

  public <G> scalaz.Distributive<java.lang.Object>.Distribution<G> distribution(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #446                // InterfaceMethod scalaz/Distributive.distribution$:(Lscalaz/Distributive;Lscalaz/Functor;)Lscalaz/Distributive$Distribution;
       5: areturn

  public <G, A, B> G distribute(G, scala.Function1<A, B>, scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #454                // InterfaceMethod scalaz/Distributive.distribute$:(Lscalaz/Distributive;Ljava/lang/Object;Lscala/Function1;Lscalaz/Functor;)Ljava/lang/Object;
       7: areturn

  public <G, A> G cosequence(G, scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #463                // InterfaceMethod scalaz/Distributive.cosequence$:(Lscalaz/Distributive;Ljava/lang/Object;Lscalaz/Functor;)Ljava/lang/Object;
       6: areturn

  public final <A> A copure(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #470                // InterfaceMethod scalaz/Comonad.copure$:(Lscalaz/Comonad;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public scalaz.Comonad<java.lang.Object>.ComonadLaws comonadLaw();
    Code:
       0: aload_0
       1: invokestatic  #477                // InterfaceMethod scalaz/Comonad.comonadLaw$:(Lscalaz/Comonad;)Lscalaz/Comonad$ComonadLaws;
       4: areturn

  public final <A, B> B extend(A, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #484                // InterfaceMethod scalaz/Cobind.extend$:(Lscalaz/Cobind;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public scalaz.Cobind<java.lang.Object>.CobindLaws cobindLaw();
    Code:
       0: aload_0
       1: invokestatic  #491                // InterfaceMethod scalaz/Cobind.cobindLaw$:(Lscalaz/Cobind;)Lscalaz/Cobind$CobindLaws;
       4: areturn

  public <A, B> B forever(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #497                // InterfaceMethod scalaz/BindRec.forever$:(Lscalaz/BindRec;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <G> scalaz.BindRec<?> product(scalaz.BindRec<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #502                // InterfaceMethod scalaz/BindRec.product$:(Lscalaz/BindRec;Lscalaz/BindRec;)Lscalaz/BindRec;
       5: areturn

  public scalaz.BindRec<java.lang.Object>.BindRecLaw bindRecLaw();
    Code:
       0: aload_0
       1: invokestatic  #510                // InterfaceMethod scalaz/BindRec.bindRecLaw$:(Lscalaz/BindRec;)Lscalaz/BindRec$BindRecLaw;
       4: areturn

  public <A, B> B map(A, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #515                // InterfaceMethod scalaz/Monad.map$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G$, A> G$ whileM(boolean, scala.Function0<A>, scalaz.MonadPlus<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #524                // InterfaceMethod scalaz/Monad.whileM$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;Lscalaz/MonadPlus;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object whileM_(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #530                // InterfaceMethod scalaz/Monad.whileM_$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <G$, A> G$ untilM(A, scala.Function0<java.lang.Object>, scalaz.MonadPlus<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #536                // InterfaceMethod scalaz/Monad.untilM$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;Lscalaz/MonadPlus;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object untilM_(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #540                // InterfaceMethod scalaz/Monad.untilM_$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <A> A iterateWhile(A, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #545                // InterfaceMethod scalaz/Monad.iterateWhile$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A> A iterateUntil(A, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #549                // InterfaceMethod scalaz/Monad.iterateUntil$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G$> scalaz.Monad<?> product(scalaz.Monad<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #554                // InterfaceMethod scalaz/Monad.product$:(Lscalaz/Monad;Lscalaz/Monad;)Lscalaz/Monad;
       5: areturn

  public scalaz.Monad<java.lang.Object>.MonadLaw monadLaw();
    Code:
       0: aload_0
       1: invokestatic  #562                // InterfaceMethod scalaz/Monad.monadLaw$:(Lscalaz/Monad;)Lscalaz/Monad$MonadLaw;
       4: areturn

  public <A, B, C> C apply2(scala.Function0<A>, scala.Function0<B>, scala.Function2<A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #569                // InterfaceMethod scalaz/Bind.apply2$:(Lscalaz/Bind;Lscala/Function0;Lscala/Function0;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <B> B ifM(boolean, scala.Function0<B>, scala.Function0<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #578                // InterfaceMethod scalaz/Bind.ifM$:(Lscalaz/Bind;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       7: areturn

  public <A, B> scala.Tuple2<A, B> mproduct(A, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #584                // InterfaceMethod scalaz/Bind.mproduct$:(Lscalaz/Bind;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G$> scalaz.Bind<?> product(scalaz.Bind<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #589                // InterfaceMethod scalaz/Bind.product$:(Lscalaz/Bind;Lscalaz/Bind;)Lscalaz/Bind;
       5: areturn

  public scalaz.Bind<java.lang.Object>.BindLaw bindLaw();
    Code:
       0: aload_0
       1: invokestatic  #597                // InterfaceMethod scalaz/Bind.bindLaw$:(Lscalaz/Bind;)Lscalaz/Bind$BindLaw;
       4: areturn

  public final <A> A pure(scala.Function0<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #604                // InterfaceMethod scalaz/Applicative.pure$:(Lscalaz/Applicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public scalaz.Applicative<?> par();
    Code:
       0: aload_0
       1: invokestatic  #611                // InterfaceMethod scalaz/Applicative.par$:(Lscalaz/Applicative;)Lscalaz/Applicative;
       4: areturn

  public <Z> Z xproduct0(scala.Function0<Z>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #617                // InterfaceMethod scalaz/Applicative.xproduct0$:(Lscalaz/Applicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public <Z, A1> Z xproduct1(scala.Function0<A1>, scala.Function1<A1, Z>, scala.Function1<Z, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #625                // InterfaceMethod scalaz/Applicative.xproduct1$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <Z, A1, A2> Z xproduct2(scala.Function0<A1>, scala.Function0<A2>, scala.Function2<A1, A2, Z>, scala.Function1<Z, scala.Tuple2<A1, A2>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #632                // InterfaceMethod scalaz/Applicative.xproduct2$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscala/Function2;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public <Z, A1, A2, A3> Z xproduct3(scala.Function0<A1>, scala.Function0<A2>, scala.Function0<A3>, scala.Function3<A1, A2, A3, Z>, scala.Function1<Z, scala.Tuple3<A1, A2, A3>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #640                // InterfaceMethod scalaz/Applicative.xproduct3$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function3;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public <Z, A1, A2, A3, A4> Z xproduct4(scala.Function0<A1>, scala.Function0<A2>, scala.Function0<A3>, scala.Function0<A4>, scala.Function4<A1, A2, A3, A4, Z>, scala.Function1<Z, scala.Tuple4<A1, A2, A3, A4>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #649                // InterfaceMethod scalaz/Applicative.xproduct4$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function4;Lscala/Function1;)Ljava/lang/Object;
      13: areturn

  public <A> scalaz.IList<A> replicateM(int, A);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #658                // InterfaceMethod scalaz/Applicative.replicateM$:(Lscalaz/Applicative;ILjava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object replicateM_(int, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #663                // InterfaceMethod scalaz/Applicative.replicateM_$:(Lscalaz/Applicative;ILjava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> scalaz.$eq$eq$greater$greater<A, B> filterM(scalaz.$eq$eq$greater$greater<A, B>, scala.Function1<B, java.lang.Object>, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #671                // InterfaceMethod scalaz/Applicative.filterM$:(Lscalaz/Applicative;Lscalaz/$eq$eq$greater$greater;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public <A> scala.collection.immutable.List<A> filterM(scala.collection.immutable.List<A>, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #679                // InterfaceMethod scalaz/Applicative.filterM$:(Lscalaz/Applicative;Lscala/collection/immutable/List;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A> scalaz.IList<A> filterM(scalaz.IList<A>, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #685                // InterfaceMethod scalaz/Applicative.filterM$:(Lscalaz/Applicative;Lscalaz/IList;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object unlessM(boolean, scala.Function0);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #692                // InterfaceMethod scalaz/Applicative.unlessM$:(Lscalaz/Applicative;ZLscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object whenM(boolean, scala.Function0);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #697                // InterfaceMethod scalaz/Applicative.whenM$:(Lscalaz/Applicative;ZLscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <G$> scalaz.Applicative<?> product(scalaz.Applicative<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #701                // InterfaceMethod scalaz/Applicative.product$:(Lscalaz/Applicative;Lscalaz/Applicative;)Lscalaz/Applicative;
       5: areturn

  public scalaz.Applicative<java.lang.Object> flip();
    Code:
       0: aload_0
       1: invokestatic  #707                // InterfaceMethod scalaz/Applicative.flip$:(Lscalaz/Applicative;)Lscalaz/Applicative;
       4: areturn

  public <A> A plusA(scala.Function0<A>, scala.Function0<A>, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #716                // InterfaceMethod scalaz/Applicative.plusA$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public scalaz.Applicative<java.lang.Object>.ApplicativeLaw applicativeLaw();
    Code:
       0: aload_0
       1: invokestatic  #723                // InterfaceMethod scalaz/Applicative.applicativeLaw$:(Lscalaz/Applicative;)Lscalaz/Applicative$ApplicativeLaw;
       4: areturn

  public final <Z> Z xderiving0(scala.Function0<Z>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #730                // InterfaceMethod scalaz/InvariantApplicative.xderiving0$:(Lscalaz/InvariantApplicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public final <Z, A1> Z xderiving1(scala.Function1<A1, Z>, scala.Function1<Z, A1>, A1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #737                // InterfaceMethod scalaz/InvariantApplicative.xderiving1$:(Lscalaz/InvariantApplicative;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final <Z, A1, A2> Z xderiving2(scala.Function2<A1, A2, Z>, scala.Function1<Z, scala.Tuple2<A1, A2>>, A1, A2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #744                // InterfaceMethod scalaz/InvariantApplicative.xderiving2$:(Lscalaz/InvariantApplicative;Lscala/Function2;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final <Z, A1, A2, A3> Z xderiving3(scala.Function3<A1, A2, A3, Z>, scala.Function1<Z, scala.Tuple3<A1, A2, A3>>, A1, A2, A3);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #751                // InterfaceMethod scalaz/InvariantApplicative.xderiving3$:(Lscalaz/InvariantApplicative;Lscala/Function3;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public final <Z, A1, A2, A3, A4> Z xderiving4(scala.Function4<A1, A2, A3, A4, Z>, scala.Function1<Z, scala.Tuple4<A1, A2, A3, A4>>, A1, A2, A3, A4);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #758                // InterfaceMethod scalaz/InvariantApplicative.xderiving4$:(Lscalaz/InvariantApplicative;Lscala/Function4;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public <A, G$, B> G$ traverse1(G$, scala.Function1<A, B>, scalaz.Traverse1<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #765                // InterfaceMethod scalaz/Apply.traverse1$:(Lscalaz/Apply;Ljava/lang/Object;Lscala/Function1;Lscalaz/Traverse1;)Ljava/lang/Object;
       7: areturn

  public <A, G$> G$ sequence1(G$, scalaz.Traverse1<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #775                // InterfaceMethod scalaz/Apply.sequence1$:(Lscalaz/Apply;Ljava/lang/Object;Lscalaz/Traverse1;)Ljava/lang/Object;
       6: areturn

  public <S$, A, B> scalaz.Maybe<B> unfoldrOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<A, S$>>>, scalaz.Reducer<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #784                // InterfaceMethod scalaz/Apply.unfoldrOpt$:(Lscalaz/Apply;Ljava/lang/Object;Lscala/Function1;Lscalaz/Reducer;)Lscalaz/Maybe;
       7: areturn

  public <G$> scalaz.Apply<?> compose(scalaz.Apply<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #790                // InterfaceMethod scalaz/Apply.compose$:(Lscalaz/Apply;Lscalaz/Apply;)Lscalaz/Apply;
       5: areturn

  public <G$> scalaz.Apply<?> product(scalaz.Apply<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #793                // InterfaceMethod scalaz/Apply.product$:(Lscalaz/Apply;Lscalaz/Apply;)Lscalaz/Apply;
       5: areturn

  public <A, B> scala.Function1<A, B> apF(scala.Function0<scala.Function1<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #800                // InterfaceMethod scalaz/Apply.apF$:(Lscalaz/Apply;Lscala/Function0;)Lscala/Function1;
       5: areturn

  public <A, B, C> C ap2(scala.Function0<A>, scala.Function0<B>, scala.Function2<A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #806                // InterfaceMethod scalaz/Apply.ap2$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public <A, B, C, D> D ap3(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function3<A, B, C, D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #814                // InterfaceMethod scalaz/Apply.ap3$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public <A, B, C, D, E> E ap4(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function4<A, B, C, D, E>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #822                // InterfaceMethod scalaz/Apply.ap4$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public <A, B, C, D, E, R> R ap5(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function5<A, B, C, D, E, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #830                // InterfaceMethod scalaz/Apply.ap5$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public <A, B, C, D, E, FF, R> R ap6(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function6<A, B, C, D, E, FF, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #838                // InterfaceMethod scalaz/Apply.ap6$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      15: areturn

  public <A, B, C, D, E, FF, G$, R> R ap7(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function0<G$>, scala.Function7<A, B, C, D, E, FF, G$, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #846                // InterfaceMethod scalaz/Apply.ap7$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      17: areturn

  public <A, B, C, D, E, FF, G$, H, R> R ap8(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function0<G$>, scala.Function0<H>, scala.Function8<A, B, C, D, E, FF, G$, H, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: invokestatic  #854                // InterfaceMethod scalaz/Apply.ap8$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      19: areturn

  public <A, B, C, D> D apply3(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function3<A, B, C, D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #860                // InterfaceMethod scalaz/Apply.apply3$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function3;)Ljava/lang/Object;
       9: areturn

  public <A, B, C, D, E> E apply4(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function4<A, B, C, D, E>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #866                // InterfaceMethod scalaz/Apply.apply4$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function4;)Ljava/lang/Object;
      11: areturn

  public <A, B, C, D, E, R> R apply5(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function5<A, B, C, D, E, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #872                // InterfaceMethod scalaz/Apply.apply5$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function5;)Ljava/lang/Object;
      13: areturn

  public <A, B, C, D, E, FF, R> R apply6(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function6<A, B, C, D, E, FF, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #879                // InterfaceMethod scalaz/Apply.apply6$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function6;)Ljava/lang/Object;
      15: areturn

  public <A, B, C, D, E, FF, G$, R> R apply7(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function0<G$>, scala.Function7<A, B, C, D, E, FF, G$, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #886                // InterfaceMethod scalaz/Apply.apply7$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function7;)Ljava/lang/Object;
      17: areturn

  public <A, B, C, D, E, FF, G$, H, R> R apply8(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function0<G$>, scala.Function0<H>, scala.Function8<A, B, C, D, E, FF, G$, H, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: invokestatic  #893                // InterfaceMethod scalaz/Apply.apply8$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function8;)Ljava/lang/Object;
      19: areturn

  public <A, B, C, D, E, FF, G$, H, I, R> R apply9(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function0<G$>, scala.Function0<H>, scala.Function0<I>, scala.Function9<A, B, C, D, E, FF, G$, H, I, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: invokestatic  #902                // InterfaceMethod scalaz/Apply.apply9$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function9;)Ljava/lang/Object;
      21: areturn

  public <A, B, C, D, E, FF, G$, H, I, J, R> R apply10(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function0<G$>, scala.Function0<H>, scala.Function0<I>, scala.Function0<J>, scala.Function10<A, B, C, D, E, FF, G$, H, I, J, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: invokestatic  #911                // InterfaceMethod scalaz/Apply.apply10$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function10;)Ljava/lang/Object;
      23: areturn

  public <A, B, C, D, E, FF, G$, H, I, J, K, R> R apply11(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function0<G$>, scala.Function0<H>, scala.Function0<I>, scala.Function0<J>, scala.Function0<K>, scala.Function11<A, B, C, D, E, FF, G$, H, I, J, K, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: aload         12
      22: invokestatic  #920                // InterfaceMethod scalaz/Apply.apply11$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function11;)Ljava/lang/Object;
      25: areturn

  public <A, B, C, D, E, FF, G$, H, I, J, K, L, R> R apply12(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>, scala.Function0<FF>, scala.Function0<G$>, scala.Function0<H>, scala.Function0<I>, scala.Function0<J>, scala.Function0<K>, scala.Function0<L>, scala.Function12<A, B, C, D, E, FF, G$, H, I, J, K, L, R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: aload         12
      22: aload         13
      24: invokestatic  #929                // InterfaceMethod scalaz/Apply.apply12$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function12;)Ljava/lang/Object;
      27: areturn

  public final <Z, A1> Z applying1(scala.Function1<A1, Z>, A1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #937                // InterfaceMethod scalaz/Apply.applying1$:(Lscalaz/Apply;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public final <Z, A1, A2> Z applying2(scala.Function2<A1, A2, Z>, A1, A2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #944                // InterfaceMethod scalaz/Apply.applying2$:(Lscalaz/Apply;Lscala/Function2;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final <Z, A1, A2, A3> Z applying3(scala.Function3<A1, A2, A3, Z>, A1, A2, A3);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #951                // InterfaceMethod scalaz/Apply.applying3$:(Lscalaz/Apply;Lscala/Function3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final <Z, A1, A2, A3, A4> Z applying4(scala.Function4<A1, A2, A3, A4, Z>, A1, A2, A3, A4);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #958                // InterfaceMethod scalaz/Apply.applying4$:(Lscalaz/Apply;Lscala/Function4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public <A, B> scala.Tuple2<A, B> tuple2(scala.Function0<A>, scala.Function0<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #964                // InterfaceMethod scalaz/Apply.tuple2$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <A, B, C> scala.Tuple3<A, B, C> tuple3(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #971                // InterfaceMethod scalaz/Apply.tuple3$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       7: areturn

  public <A, B, C, D> scala.Tuple4<A, B, C, D> tuple4(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #978                // InterfaceMethod scalaz/Apply.tuple4$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       9: areturn

  public <A, B, C, D, E> scala.Tuple5<A, B, C, D, E> tuple5(scala.Function0<A>, scala.Function0<B>, scala.Function0<C>, scala.Function0<D>, scala.Function0<E>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #985                // InterfaceMethod scalaz/Apply.tuple5$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
      11: areturn

  public <A, B, C> scala.Function2<A, B, C> lift2(scala.Function2<A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #991                // InterfaceMethod scalaz/Apply.lift2$:(Lscalaz/Apply;Lscala/Function2;)Lscala/Function2;
       5: areturn

  public <A, B, C, D> scala.Function3<A, B, C, D> lift3(scala.Function3<A, B, C, D>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #998                // InterfaceMethod scalaz/Apply.lift3$:(Lscalaz/Apply;Lscala/Function3;)Lscala/Function3;
       5: areturn

  public <A, B, C, D, E> scala.Function4<A, B, C, D, E> lift4(scala.Function4<A, B, C, D, E>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1005               // InterfaceMethod scalaz/Apply.lift4$:(Lscalaz/Apply;Lscala/Function4;)Lscala/Function4;
       5: areturn

  public <A, B, C, D, E, R$> scala.Function5<A, B, C, D, E, R$> lift5(scala.Function5<A, B, C, D, E, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1012               // InterfaceMethod scalaz/Apply.lift5$:(Lscalaz/Apply;Lscala/Function5;)Lscala/Function5;
       5: areturn

  public <A, B, C, D, E, FF, R$> scala.Function6<A, B, C, D, E, FF, R$> lift6(scala.Function6<A, B, C, D, E, FF, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1019               // InterfaceMethod scalaz/Apply.lift6$:(Lscalaz/Apply;Lscala/Function6;)Lscala/Function6;
       5: areturn

  public <A, B, C, D, E, FF, G$, R$> scala.Function7<A, B, C, D, E, FF, G$, R$> lift7(scala.Function7<A, B, C, D, E, FF, G$, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1026               // InterfaceMethod scalaz/Apply.lift7$:(Lscalaz/Apply;Lscala/Function7;)Lscala/Function7;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, R$> scala.Function8<A, B, C, D, E, FF, G$, H, R$> lift8(scala.Function8<A, B, C, D, E, FF, G$, H, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1033               // InterfaceMethod scalaz/Apply.lift8$:(Lscalaz/Apply;Lscala/Function8;)Lscala/Function8;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, I, R$> scala.Function9<A, B, C, D, E, FF, G$, H, I, R$> lift9(scala.Function9<A, B, C, D, E, FF, G$, H, I, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1040               // InterfaceMethod scalaz/Apply.lift9$:(Lscalaz/Apply;Lscala/Function9;)Lscala/Function9;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, I, J, R$> scala.Function10<A, B, C, D, E, FF, G$, H, I, J, R$> lift10(scala.Function10<A, B, C, D, E, FF, G$, H, I, J, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1047               // InterfaceMethod scalaz/Apply.lift10$:(Lscalaz/Apply;Lscala/Function10;)Lscala/Function10;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, I, J, K, R$> scala.Function11<A, B, C, D, E, FF, G$, H, I, J, K, R$> lift11(scala.Function11<A, B, C, D, E, FF, G$, H, I, J, K, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1054               // InterfaceMethod scalaz/Apply.lift11$:(Lscalaz/Apply;Lscala/Function11;)Lscala/Function11;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, I, J, K, L, R$> scala.Function12<A, B, C, D, E, FF, G$, H, I, J, K, L, R$> lift12(scala.Function12<A, B, C, D, E, FF, G$, H, I, J, K, L, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1061               // InterfaceMethod scalaz/Apply.lift12$:(Lscalaz/Apply;Lscala/Function12;)Lscala/Function12;
       5: areturn

  public <A, B> B discardLeft(scala.Function0<A>, scala.Function0<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1066               // InterfaceMethod scalaz/Apply.discardLeft$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <A, B> A discardRight(scala.Function0<A>, scala.Function0<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1071               // InterfaceMethod scalaz/Apply.discardRight$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public scalaz.Applicative<?> applyApplicative();
    Code:
       0: aload_0
       1: invokestatic  #1076               // InterfaceMethod scalaz/Apply.applyApplicative$:(Lscalaz/Apply;)Lscalaz/Applicative;
       4: areturn

  public <A, B> scalaz.Reducer<A, B> liftReducer(scalaz.Reducer<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1084               // InterfaceMethod scalaz/Apply.liftReducer$:(Lscalaz/Apply;Lscalaz/Reducer;)Lscalaz/Reducer;
       5: areturn

  public scalaz.Apply<java.lang.Object>.ApplyLaw applyLaw();
    Code:
       0: aload_0
       1: invokestatic  #1091               // InterfaceMethod scalaz/Apply.applyLaw$:(Lscalaz/Apply;)Lscalaz/Apply$ApplyLaw;
       4: areturn

  public <G> scalaz.Traverse1<?> product(scalaz.Traverse1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1096               // InterfaceMethod scalaz/Traverse1.product$:(Lscalaz/Traverse1;Lscalaz/Traverse1;)Lscalaz/Traverse1;
       5: areturn

  public <G> scalaz.Traverse1<?> product0(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1103               // InterfaceMethod scalaz/Traverse1.product0$:(Lscalaz/Traverse1;Lscalaz/Traverse;)Lscalaz/Traverse1;
       5: areturn

  public <G> scalaz.Traverse1<?> compose(scalaz.Traverse1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1106               // InterfaceMethod scalaz/Traverse1.compose$:(Lscalaz/Traverse1;Lscalaz/Traverse1;)Lscalaz/Traverse1;
       5: areturn

  public <G, A, B> G traverseImpl(A, scala.Function1<A, G>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1113               // InterfaceMethod scalaz/Traverse1.traverseImpl$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldMap1(A, scala.Function1<A, B>, scalaz.Semigroup<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1120               // InterfaceMethod scalaz/Traverse1.foldMap1$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public <G, A, B> G traverse1(A, scala.Function1<A, G>, scalaz.Apply<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1125               // InterfaceMethod scalaz/Traverse1.traverse1$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Apply;)Ljava/lang/Object;
       7: areturn

  public <A, G, B> G traverse1M(A, scala.Function1<A, G>, scalaz.Apply<G>, scalaz.Bind<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1132               // InterfaceMethod scalaz/Traverse1.traverse1M$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Apply;Lscalaz/Bind;)Ljava/lang/Object;
       9: areturn

  public final <A, GB> java.lang.Object traverse1U(A, scala.Function1<A, GB>, scalaz.Unapply<scalaz.Apply, GB>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1139               // InterfaceMethod scalaz/Traverse1.traverse1U$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public <G, A> G sequence1(G, scalaz.Apply<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1146               // InterfaceMethod scalaz/Traverse1.sequence1$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscalaz/Apply;)Ljava/lang/Object;
       6: areturn

  public <A, G> G sequence1M(G, scalaz.Apply<G>, scalaz.Bind<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1154               // InterfaceMethod scalaz/Traverse1.sequence1M$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscalaz/Apply;Lscalaz/Bind;)Ljava/lang/Object;
       7: areturn

  public final <GA> java.lang.Object sequence1U(GA, scalaz.Unapply<scalaz.Apply, GA>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1161               // InterfaceMethod scalaz/Traverse1.sequence1U$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public scalaz.Traverse1<java.lang.Object>.Traverse1Law traverse1Law();
    Code:
       0: aload_0
       1: invokestatic  #1168               // InterfaceMethod scalaz/Traverse1.traverse1Law$:(Lscalaz/Traverse1;)Lscalaz/Traverse1$Traverse1Law;
       4: areturn

  public <G> scalaz.Foldable1<?> product(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1173               // InterfaceMethod scalaz/Foldable1.product$:(Lscalaz/Foldable1;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public <G> scalaz.Foldable1<?> compose(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1176               // InterfaceMethod scalaz/Foldable1.compose$:(Lscalaz/Foldable1;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public <A, B> scala.Option<B> foldMap1Opt(A, scala.Function1<A, B>, scalaz.Semigroup<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1183               // InterfaceMethod scalaz/Foldable1.foldMap1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Semigroup;)Lscala/Option;
       7: areturn

  public <A, B> B foldMap(A, scala.Function1<A, B>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1190               // InterfaceMethod scalaz/Foldable1.foldMap$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public <A> A foldRight1(A, scala.Function2<A, scala.Function0<A>, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1197               // InterfaceMethod scalaz/Foldable1.foldRight1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <A, B> B foldMapLeft1(A, scala.Function1<A, B>, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1204               // InterfaceMethod scalaz/Foldable1.foldMapLeft1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A> A foldLeft1(A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1209               // InterfaceMethod scalaz/Foldable1.foldLeft1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public final <A> A foldr1(A, scala.Function1<A, scala.Function1<scala.Function0<A>, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1215               // InterfaceMethod scalaz/Foldable1.foldr1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Option<B> foldMapRight1Opt(A, scala.Function1<A, B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1222               // InterfaceMethod scalaz/Foldable1.foldMapRight1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public <A> scala.Option<A> foldr1Opt(A, scala.Function1<A, scala.Function1<scala.Function0<A>, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1229               // InterfaceMethod scalaz/Foldable1.foldr1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final <A> A foldl1(A, scala.Function1<A, scala.Function1<A, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1234               // InterfaceMethod scalaz/Foldable1.foldl1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Option<B> foldMapLeft1Opt(A, scala.Function1<A, B>, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1239               // InterfaceMethod scalaz/Foldable1.foldMapLeft1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public <A> scala.Option<A> foldl1Opt(A, scala.Function1<A, scala.Function1<A, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1244               // InterfaceMethod scalaz/Foldable1.foldl1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public <M> M fold1(M, scalaz.Semigroup<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1252               // InterfaceMethod scalaz/Foldable1.fold1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       6: areturn

  public <G, A, B> G foldLeftM1(A, scala.Function1<A, B>, scala.Function2<B, A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1259               // InterfaceMethod scalaz/Foldable1.foldLeftM1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <G, A, B> G foldRightM1(A, scala.Function1<A, B>, scala.Function2<A, scala.Function0<B>, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1264               // InterfaceMethod scalaz/Foldable1.foldRightM1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <G, A, B> G foldlM1(A, scala.Function1<A, B>, scala.Function1<B, scala.Function1<A, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1271               // InterfaceMethod scalaz/Foldable1.foldlM1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <G, A, B> G foldrM1(A, scala.Function1<A, B>, scala.Function1<A, scala.Function1<scala.Function0<B>, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1276               // InterfaceMethod scalaz/Foldable1.foldrM1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <A> A maximum1(A, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1284               // InterfaceMethod scalaz/Foldable1.maximum1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Ljava/lang/Object;
       6: areturn

  public <A, B> B maximumOf1(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1292               // InterfaceMethod scalaz/Foldable1.maximumOf1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public <A, B> A maximumBy1(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1298               // InterfaceMethod scalaz/Foldable1.maximumBy1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public <A> A minimum1(A, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1303               // InterfaceMethod scalaz/Foldable1.minimum1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Ljava/lang/Object;
       6: areturn

  public <A, B> B minimumOf1(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1308               // InterfaceMethod scalaz/Foldable1.minimumOf1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public <A, B> A minimumBy1(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1313               // InterfaceMethod scalaz/Foldable1.minimumBy1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Option<A> maximum(A, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1321               // InterfaceMethod scalaz/Foldable1.maximum$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public <A, B> scala.Option<B> maximumOf(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1329               // InterfaceMethod scalaz/Foldable1.maximumOf$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A, B> scala.Option<A> maximumBy(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1335               // InterfaceMethod scalaz/Foldable1.maximumBy$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A> scala.Option<A> minimum(A, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1340               // InterfaceMethod scalaz/Foldable1.minimum$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public <A, B> scala.Option<B> minimumOf(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1345               // InterfaceMethod scalaz/Foldable1.minimumOf$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A, B> scala.Option<A> minimumBy(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1350               // InterfaceMethod scalaz/Foldable1.minimumBy$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A> scalaz.NonEmptyList<A> distinct1(A, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1358               // InterfaceMethod scalaz/Foldable1.distinct1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Lscalaz/NonEmptyList;
       6: areturn

  public <A> scalaz.NonEmptyList<A> distinctE1(A, scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1365               // InterfaceMethod scalaz/Foldable1.distinctE1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Equal;)Lscalaz/NonEmptyList;
       6: areturn

  public <A> A sumr1(A, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1371               // InterfaceMethod scalaz/Foldable1.sumr1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       6: areturn

  public <A> A suml1(A, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1375               // InterfaceMethod scalaz/Foldable1.suml1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       6: areturn

  public <G, A> G psum1(G, scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1382               // InterfaceMethod scalaz/Foldable1.psum1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Plus;)Ljava/lang/Object;
       6: areturn

  public <A, B, G> G psumMap1(A, scala.Function1<A, G>, scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1390               // InterfaceMethod scalaz/Foldable1.psumMap1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Plus;)Ljava/lang/Object;
       7: areturn

  public <G, A> G msuml1(G, scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1394               // InterfaceMethod scalaz/Foldable1.msuml1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Plus;)Ljava/lang/Object;
       6: areturn

  public <A> A intercalate1(A, A, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1399               // InterfaceMethod scalaz/Foldable1.intercalate1$:(Lscalaz/Foldable1;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public <A> A intercalate(A, A, scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1407               // InterfaceMethod scalaz/Foldable1.intercalate$:(Lscalaz/Foldable1;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public <M, A, B> M traverse1_(A, scala.Function1<A, M>, scalaz.Apply<M>, scalaz.Semigroup<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1414               // InterfaceMethod scalaz/Foldable1.traverse1_$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Apply;Lscalaz/Semigroup;)Ljava/lang/Object;
       9: areturn

  public <M, A> M sequence1_(M, scalaz.Apply<M>, scalaz.Semigroup<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1421               // InterfaceMethod scalaz/Foldable1.sequence1_$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Apply;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public final <A> boolean empty(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1426               // InterfaceMethod scalaz/Foldable1.empty$:(Lscalaz/Foldable1;Ljava/lang/Object;)Z
       5: ireturn

  public <G> scalaz.Foldable1<?> product0(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1431               // InterfaceMethod scalaz/Foldable1.product0$:(Lscalaz/Foldable1;Lscalaz/Foldable;)Lscalaz/Foldable1;
       5: areturn

  public <A> scalaz.NonEmptyList<A> toNel(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1439               // InterfaceMethod scalaz/Foldable1.toNel$:(Lscalaz/Foldable1;Ljava/lang/Object;)Lscalaz/NonEmptyList;
       5: areturn

  public <A> scalaz.NonEmptyList<A> scanLeft1(A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1446               // InterfaceMethod scalaz/Foldable1.scanLeft1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Lscalaz/NonEmptyList;
       6: areturn

  public <A> scalaz.NonEmptyList<A> scanRight1(A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1450               // InterfaceMethod scalaz/Foldable1.scanRight1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Lscalaz/NonEmptyList;
       6: areturn

  public scalaz.Foldable1<java.lang.Object>.Foldable1Law foldable1Law();
    Code:
       0: aload_0
       1: invokestatic  #1457               // InterfaceMethod scalaz/Foldable1.foldable1Law$:(Lscalaz/Foldable1;)Lscalaz/Foldable1$Foldable1Law;
       4: areturn

  public <G> scalaz.Traverse<?> compose(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1462               // InterfaceMethod scalaz/Traverse.compose$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Bitraverse<?> bicompose(scalaz.Bitraverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1469               // InterfaceMethod scalaz/Traverse.bicompose$:(Lscalaz/Traverse;Lscalaz/Bitraverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G> scalaz.Traverse<?> product(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1472               // InterfaceMethod scalaz/Traverse.product$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Traverse1<?> product0(scalaz.Traverse1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1475               // InterfaceMethod scalaz/Traverse.product0$:(Lscalaz/Traverse;Lscalaz/Traverse1;)Lscalaz/Traverse1;
       5: areturn

  public <G> scalaz.Traverse<java.lang.Object>.Traversal<G> traversal(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1482               // InterfaceMethod scalaz/Traverse.traversal$:(Lscalaz/Traverse;Lscalaz/Applicative;)Lscalaz/Traverse$Traversal;
       5: areturn

  public <S> scalaz.Traverse<java.lang.Object>.Traversal<?> traversalS();
    Code:
       0: aload_0
       1: invokestatic  #1489               // InterfaceMethod scalaz/Traverse.traversalS$:(Lscalaz/Traverse;)Lscalaz/Traverse$Traversal;
       4: areturn

  public <G, A, B> G traverse(A, scala.Function1<A, G>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1494               // InterfaceMethod scalaz/Traverse.traverse$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final <A, GB> java.lang.Object traverseU(A, scala.Function1<A, GB>, scalaz.Unapply<scalaz.Applicative, GB>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1500               // InterfaceMethod scalaz/Traverse.traverseU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public final <A, G, B> G traverseM(A, scala.Function1<A, G>, scalaz.Applicative<G>, scalaz.Bind<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1507               // InterfaceMethod scalaz/Traverse.traverseM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       9: areturn

  public <S, A, B> scalaz.IndexedStateT<S, S, java.lang.Object, B> traverseS(A, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1514               // InterfaceMethod scalaz/Traverse.traverseS$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public <S, A, B> scala.Tuple2<S, B> runTraverseS(A, S, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1522               // InterfaceMethod scalaz/Traverse.runTraverseS$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Lscala/Tuple2;
       7: areturn

  public <S, G, A, B> scalaz.IndexedStateT<S, S, java.lang.Object, G> traverseSTrampoline(A, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, G>>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1529               // InterfaceMethod scalaz/Traverse.traverseSTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/IndexedStateT;
       7: areturn

  public <S, G, A, B> scalaz.Kleisli<G, S, B> traverseKTrampoline(A, scala.Function1<A, scalaz.Kleisli<G, S, B>>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1536               // InterfaceMethod scalaz/Traverse.traverseKTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/Kleisli;
       7: areturn

  public <G, A> G sequence(G, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1543               // InterfaceMethod scalaz/Traverse.sequence$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public <S, A> scalaz.IndexedStateT<S, S, java.lang.Object, A> sequenceS(scalaz.IndexedStateT<S, S, java.lang.Object, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1550               // InterfaceMethod scalaz/Traverse.sequenceS$:(Lscalaz/Traverse;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public final <A> java.lang.Object sequenceU(A, scalaz.Unapply<scalaz.Applicative, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1557               // InterfaceMethod scalaz/Traverse.sequenceU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public <A, G> G sequenceM(G, scalaz.Applicative<G>, scalaz.Bind<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1564               // InterfaceMethod scalaz/Traverse.sequenceM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       7: areturn

  public <A, B> scala.Tuple2<B, scala.runtime.BoxedUnit> foldLShape(A, B, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1571               // InterfaceMethod scalaz/Traverse.foldLShape$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public <A, B> B foldLeft(A, B, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1578               // InterfaceMethod scalaz/Traverse.foldLeft$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A> A reverse(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1583               // InterfaceMethod scalaz/Traverse.reverse$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B, C> scala.Tuple2<scala.collection.immutable.List<B>, C> zipWith(A, B, scala.Function2<A, scala.Option<B>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1586               // InterfaceMethod scalaz/Traverse.zipWith$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public <A, B, C> C zipWithL(A, B, scala.Function2<A, scala.Option<B>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1591               // InterfaceMethod scalaz/Traverse.zipWithL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A, B, C> C zipWithR(A, B, scala.Function2<scala.Option<A>, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1596               // InterfaceMethod scalaz/Traverse.zipWithR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Tuple2<java.lang.Object, A> indexed(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1601               // InterfaceMethod scalaz/Traverse.indexed$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> scala.Tuple2<A, scala.Option<B>> zipL(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1607               // InterfaceMethod scalaz/Traverse.zipL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Tuple2<scala.Option<A>, B> zipR(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1612               // InterfaceMethod scalaz/Traverse.zipR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <S, A, B> scala.Tuple2<S, B> mapAccumL(A, S, scala.Function2<S, A, scala.Tuple2<S, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1617               // InterfaceMethod scalaz/Traverse.mapAccumL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public <S, A, B> scala.Tuple2<S, B> mapAccumR(A, S, scala.Function2<S, A, scala.Tuple2<S, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1621               // InterfaceMethod scalaz/Traverse.mapAccumR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public scalaz.Traverse<java.lang.Object>.TraverseLaw traverseLaw();
    Code:
       0: aload_0
       1: invokestatic  #1628               // InterfaceMethod scalaz/Traverse.traverseLaw$:(Lscalaz/Traverse;)Lscalaz/Traverse$TraverseLaw;
       4: areturn

  public <G> scalaz.Foldable<?> compose(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1633               // InterfaceMethod scalaz/Foldable.compose$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Bifoldable<?> bicompose(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1638               // InterfaceMethod scalaz/Foldable.bicompose$:(Lscalaz/Foldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public <G> scalaz.Foldable<?> product(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1641               // InterfaceMethod scalaz/Foldable.product$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Foldable1<?> product0(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1644               // InterfaceMethod scalaz/Foldable.product0$:(Lscalaz/Foldable;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public <G, A, B> G foldRightM(A, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1651               // InterfaceMethod scalaz/Foldable.foldRightM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <G, A, B> G foldLeftM(A, B, scala.Function2<B, A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1658               // InterfaceMethod scalaz/Foldable.foldLeftM$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <G, A, B> G foldMapM(A, scala.Function1<A, G>, scalaz.Monoid<B>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1666               // InterfaceMethod scalaz/Foldable.foldMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <M> M fold(M, scalaz.Monoid<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1673               // InterfaceMethod scalaz/Foldable.fold$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Option<A> fold1Opt(A, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1680               // InterfaceMethod scalaz/Foldable.fold1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public <M, A, B> M traverse_(A, scala.Function1<A, M>, scalaz.Applicative<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1686               // InterfaceMethod scalaz/Foldable.traverse_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final <A, GB> java.lang.Object traverseU_(A, scala.Function1<A, GB>, scalaz.Unapply<scalaz.Applicative, GB>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1691               // InterfaceMethod scalaz/Foldable.traverseU_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public <S, A, B> scalaz.IndexedStateT<S, S, java.lang.Object, scala.runtime.BoxedUnit> traverseS_(A, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1697               // InterfaceMethod scalaz/Foldable.traverseS_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public <M, A> M sequence_(M, scalaz.Applicative<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1703               // InterfaceMethod scalaz/Foldable.sequence_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public <S, A> scalaz.IndexedStateT<S, S, java.lang.Object, scala.runtime.BoxedUnit> sequenceS_(scalaz.IndexedStateT<S, S, java.lang.Object, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1709               // InterfaceMethod scalaz/Foldable.sequenceS_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public <M, A> scalaz.Free<M, scala.runtime.BoxedUnit> sequenceF_(scalaz.Free<M, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1717               // InterfaceMethod scalaz/Foldable.sequenceF_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/Free;
       5: areturn

  public final <A, B> B foldr(A, scala.Function0<B>, scala.Function1<A, scala.Function1<scala.Function0<B>, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1724               // InterfaceMethod scalaz/Foldable.foldr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Option<A> foldRight1Opt(A, scala.Function2<A, scala.Function0<A>, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1731               // InterfaceMethod scalaz/Foldable.foldRight1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public final <A, B> B foldl(A, B, scala.Function1<B, scala.Function1<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1738               // InterfaceMethod scalaz/Foldable.foldl$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Option<A> foldLeft1Opt(A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1743               // InterfaceMethod scalaz/Foldable.foldLeft1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public final <G, A, B> G foldrM(A, scala.Function0<B>, scala.Function1<A, scala.Function1<scala.Function0<B>, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1750               // InterfaceMethod scalaz/Foldable.foldrM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <G, A, B> G foldlM(A, scala.Function0<B>, scala.Function1<B, scala.Function1<A, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1755               // InterfaceMethod scalaz/Foldable.foldlM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <M, A, B> M findMapM(A, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1762               // InterfaceMethod scalaz/Foldable.findMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Option<A> findLeft(A, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1768               // InterfaceMethod scalaz/Foldable.findLeft$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public <A> scala.Option<A> findRight(A, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1772               // InterfaceMethod scalaz/Foldable.findRight$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final <A> int count(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1779               // InterfaceMethod scalaz/Foldable.count$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public <A> int length(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1783               // InterfaceMethod scalaz/Foldable.length$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public <A> scala.Option<A> index(A, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #1791               // InterfaceMethod scalaz/Foldable.index$:(Lscalaz/Foldable;Ljava/lang/Object;I)Lscala/Option;
       6: areturn

  public <A> A indexOr(A, scala.Function0<A>, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #1799               // InterfaceMethod scalaz/Foldable.indexOr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;I)Ljava/lang/Object;
       7: areturn

  public <A> scala.collection.immutable.List<A> toList(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1806               // InterfaceMethod scalaz/Foldable.toList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/List;
       5: areturn

  public <A> scala.collection.immutable.Vector<A> toVector(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1813               // InterfaceMethod scalaz/Foldable.toVector$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Vector;
       5: areturn

  public <A> scala.collection.immutable.Set<A> toSet(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1820               // InterfaceMethod scalaz/Foldable.toSet$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Set;
       5: areturn

  public <A> scala.collection.immutable.Stream<A> toStream(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1827               // InterfaceMethod scalaz/Foldable.toStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Stream;
       5: areturn

  public <A> scala.collection.immutable.LazyList<A> toLazyList(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1834               // InterfaceMethod scalaz/Foldable.toLazyList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/LazyList;
       5: areturn

  public <A> scalaz.IList<A> toIList(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1841               // InterfaceMethod scalaz/Foldable.toIList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IList;
       5: areturn

  public <A> scalaz.EphemeralStream<A> toEphemeralStream(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1848               // InterfaceMethod scalaz/Foldable.toEphemeralStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/EphemeralStream;
       5: areturn

  public <A> boolean all(A, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1855               // InterfaceMethod scalaz/Foldable.all$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public <G, A> G allM(A, scala.Function1<A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1860               // InterfaceMethod scalaz/Foldable.allM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public <A> boolean any(A, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1864               // InterfaceMethod scalaz/Foldable.any$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public <G, A> G anyM(A, scala.Function1<A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1868               // InterfaceMethod scalaz/Foldable.anyM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public <A> int filterLength(A, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1875               // InterfaceMethod scalaz/Foldable.filterLength$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)I
       6: ireturn

  public <A> scala.Option<scala.Tuple2<A, A>> extrema(A, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1881               // InterfaceMethod scalaz/Foldable.extrema$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public <A, B> scala.Option<scala.Tuple2<B, B>> extremaOf(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1887               // InterfaceMethod scalaz/Foldable.extremaOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A, B> scala.Option<scala.Tuple2<A, A>> extremaBy(A, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1892               // InterfaceMethod scalaz/Foldable.extremaBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A> A sumr(A, scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1897               // InterfaceMethod scalaz/Foldable.sumr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Option<A> sumr1Opt(A, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1901               // InterfaceMethod scalaz/Foldable.sumr1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public <A> A suml(A, scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1905               // InterfaceMethod scalaz/Foldable.suml$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Option<A> suml1Opt(A, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1909               // InterfaceMethod scalaz/Foldable.suml1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public <A, B, G> G psumMap(A, scala.Function1<A, G>, scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1916               // InterfaceMethod scalaz/Foldable.psumMap$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       7: areturn

  public <G, A> G psum(G, scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1924               // InterfaceMethod scalaz/Foldable.psum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public final <G, A> G asum(G, scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1928               // InterfaceMethod scalaz/Foldable.asum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public <A> long longDigits(A, scala.$less$colon$less<A, scalaz.Digit>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1936               // InterfaceMethod scalaz/Foldable.longDigits$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/$less$colon$less;)J
       6: lreturn

  public <A> boolean element(A, A, scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1944               // InterfaceMethod scalaz/Foldable.element$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Equal;)Z
       7: ireturn

  public <A> scala.collection.immutable.List<scalaz.NonEmptyList<A>> splitWith(A, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1951               // InterfaceMethod scalaz/Foldable.splitWith$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public <A, B> scalaz.IList<scala.Tuple2<B, scalaz.NonEmptyList<A>>> splitBy(A, scala.Function1<A, B>, scalaz.Equal<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1958               // InterfaceMethod scalaz/Foldable.splitBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public <A> scalaz.IList<scalaz.NonEmptyList<A>> splitByRelation(A, scala.Function2<A, A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1965               // InterfaceMethod scalaz/Foldable.splitByRelation$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscalaz/IList;
       6: areturn

  public <A> scala.collection.immutable.List<scalaz.NonEmptyList<A>> selectSplit(A, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1969               // InterfaceMethod scalaz/Foldable.selectSplit$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public <A> scalaz.IList<A> distinct(A, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1976               // InterfaceMethod scalaz/Foldable.distinct$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscalaz/IList;
       6: areturn

  public <A> scalaz.IList<A> distinctE(A, scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1983               // InterfaceMethod scalaz/Foldable.distinctE$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Equal;)Lscalaz/IList;
       6: areturn

  public <A, B> scalaz.IList<A> distinctBy(A, scala.Function1<A, B>, scalaz.Equal<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1988               // InterfaceMethod scalaz/Foldable.distinctBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public <X, A> X collapse(A, scalaz.ApplicativePlus<X>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1995               // InterfaceMethod scalaz/Foldable.collapse$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/ApplicativePlus;)Ljava/lang/Object;
       6: areturn

  public scalaz.Foldable<java.lang.Object>.FoldableLaw foldableLaw();
    Code:
       0: aload_0
       1: invokestatic  #2003               // InterfaceMethod scalaz/Foldable.foldableLaw$:(Lscalaz/Foldable;)Lscalaz/Foldable$FoldableLaw;
       4: areturn

  public <A, B> B xmap(A, scala.Function1<A, B>, scala.Function1<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #2010               // InterfaceMethod scalaz/Functor.xmap$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A, B> B apply(A, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2015               // InterfaceMethod scalaz/Functor.apply$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Tuple2<A, B> strengthL(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2021               // InterfaceMethod scalaz/Functor.strengthL$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Tuple2<A, B> strengthR(A, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2025               // InterfaceMethod scalaz/Functor.strengthR$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> B mapply(A, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2029               // InterfaceMethod scalaz/Functor.mapply$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Tuple2<A, A> fpair(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2035               // InterfaceMethod scalaz/Functor.fpair$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> scala.Tuple2<A, B> fproduct(A, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2039               // InterfaceMethod scalaz/Functor.fproduct$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object void(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2043               // InterfaceMethod scalaz/Functor.void$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> scalaz.$bslash$div<A, B> counzip(scalaz.$bslash$div<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2050               // InterfaceMethod scalaz/Functor.counzip$:(Lscalaz/Functor;Lscalaz/$bslash$div;)Ljava/lang/Object;
       5: areturn

  public <G$> scalaz.Functor<?> compose(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2056               // InterfaceMethod scalaz/Functor.compose$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <G$> scalaz.Contravariant<?> icompose(scalaz.Contravariant<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2063               // InterfaceMethod scalaz/Functor.icompose$:(Lscalaz/Functor;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public <G$> scalaz.Bifunctor<?> bicompose(scalaz.Bifunctor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2069               // InterfaceMethod scalaz/Functor.bicompose$:(Lscalaz/Functor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G$> scalaz.Functor<?> product(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2072               // InterfaceMethod scalaz/Functor.product$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <A, B> B widen(A, scalaz.Liskov<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2080               // InterfaceMethod scalaz/Functor.widen$:(Lscalaz/Functor;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public scalaz.Functor<java.lang.Object>.FunctorLaw functorLaw();
    Code:
       0: aload_0
       1: invokestatic  #2088               // InterfaceMethod scalaz/Functor.functorLaw$:(Lscalaz/Functor;)Lscalaz/Functor$FunctorLaw;
       4: areturn

  public <A, B> B xmapb(A, scalaz.BijectionT<?, ?, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2096               // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public <A, B> B xmapi(A, scalaz.Isomorphisms$Iso<scala.Function1, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2105               // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<java.lang.Object>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #2113               // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.OptionalSyntax<java.lang.Object> optionalSyntax();
    Code:
       0: aload_0
       1: getfield      #2117               // Field optionalSyntax:Lscalaz/syntax/OptionalSyntax;
       4: areturn

  public void scalaz$Optional$_setter_$optionalSyntax_$eq(scalaz.syntax.OptionalSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2117               // Field optionalSyntax:Lscalaz/syntax/OptionalSyntax;
       5: return

  public scalaz.syntax.CozipSyntax<java.lang.Object> cozipSyntax();
    Code:
       0: aload_0
       1: getfield      #2125               // Field cozipSyntax:Lscalaz/syntax/CozipSyntax;
       4: areturn

  public void scalaz$Cozip$_setter_$cozipSyntax_$eq(scalaz.syntax.CozipSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2125               // Field cozipSyntax:Lscalaz/syntax/CozipSyntax;
       5: return

  public scalaz.syntax.AlignSyntax<java.lang.Object> alignSyntax();
    Code:
       0: aload_0
       1: getfield      #2132               // Field alignSyntax:Lscalaz/syntax/AlignSyntax;
       4: areturn

  public void scalaz$Align$_setter_$alignSyntax_$eq(scalaz.syntax.AlignSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2132               // Field alignSyntax:Lscalaz/syntax/AlignSyntax;
       5: return

  public scalaz.syntax.UnzipSyntax<java.lang.Object> unzipSyntax();
    Code:
       0: aload_0
       1: getfield      #2139               // Field unzipSyntax:Lscalaz/syntax/UnzipSyntax;
       4: areturn

  public void scalaz$Unzip$_setter_$unzipSyntax_$eq(scalaz.syntax.UnzipSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2139               // Field unzipSyntax:Lscalaz/syntax/UnzipSyntax;
       5: return

  public scalaz.syntax.ZipSyntax<java.lang.Object> zipSyntax();
    Code:
       0: aload_0
       1: getfield      #2146               // Field zipSyntax:Lscalaz/syntax/ZipSyntax;
       4: areturn

  public void scalaz$Zip$_setter_$zipSyntax_$eq(scalaz.syntax.ZipSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2146               // Field zipSyntax:Lscalaz/syntax/ZipSyntax;
       5: return

  public scalaz.syntax.DistributiveSyntax<java.lang.Object> distributiveSyntax();
    Code:
       0: aload_0
       1: getfield      #2153               // Field distributiveSyntax:Lscalaz/syntax/DistributiveSyntax;
       4: areturn

  public void scalaz$Distributive$_setter_$distributiveSyntax_$eq(scalaz.syntax.DistributiveSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2153               // Field distributiveSyntax:Lscalaz/syntax/DistributiveSyntax;
       5: return

  public scalaz.syntax.ComonadSyntax<java.lang.Object> comonadSyntax();
    Code:
       0: aload_0
       1: getfield      #2160               // Field comonadSyntax:Lscalaz/syntax/ComonadSyntax;
       4: areturn

  public void scalaz$Comonad$_setter_$comonadSyntax_$eq(scalaz.syntax.ComonadSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2160               // Field comonadSyntax:Lscalaz/syntax/ComonadSyntax;
       5: return

  public scalaz.syntax.CobindSyntax<java.lang.Object> cobindSyntax();
    Code:
       0: aload_0
       1: getfield      #2167               // Field cobindSyntax:Lscalaz/syntax/CobindSyntax;
       4: areturn

  public void scalaz$Cobind$_setter_$cobindSyntax_$eq(scalaz.syntax.CobindSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2167               // Field cobindSyntax:Lscalaz/syntax/CobindSyntax;
       5: return

  public scalaz.syntax.BindRecSyntax<java.lang.Object> bindRecSyntax();
    Code:
       0: aload_0
       1: getfield      #2174               // Field bindRecSyntax:Lscalaz/syntax/BindRecSyntax;
       4: areturn

  public void scalaz$BindRec$_setter_$bindRecSyntax_$eq(scalaz.syntax.BindRecSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2174               // Field bindRecSyntax:Lscalaz/syntax/BindRecSyntax;
       5: return

  public scalaz.syntax.MonadSyntax<java.lang.Object> monadSyntax();
    Code:
       0: aload_0
       1: getfield      #2181               // Field monadSyntax:Lscalaz/syntax/MonadSyntax;
       4: areturn

  public void scalaz$Monad$_setter_$monadSyntax_$eq(scalaz.syntax.MonadSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2181               // Field monadSyntax:Lscalaz/syntax/MonadSyntax;
       5: return

  public scalaz.syntax.BindSyntax<java.lang.Object> bindSyntax();
    Code:
       0: aload_0
       1: getfield      #2188               // Field bindSyntax:Lscalaz/syntax/BindSyntax;
       4: areturn

  public void scalaz$Bind$_setter_$bindSyntax_$eq(scalaz.syntax.BindSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2188               // Field bindSyntax:Lscalaz/syntax/BindSyntax;
       5: return

  public scalaz.syntax.ApplicativeSyntax<java.lang.Object> applicativeSyntax();
    Code:
       0: aload_0
       1: getfield      #2195               // Field applicativeSyntax:Lscalaz/syntax/ApplicativeSyntax;
       4: areturn

  public void scalaz$Applicative$_setter_$applicativeSyntax_$eq(scalaz.syntax.ApplicativeSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2195               // Field applicativeSyntax:Lscalaz/syntax/ApplicativeSyntax;
       5: return

  public scalaz.syntax.InvariantApplicativeSyntax<java.lang.Object> invariantApplicativeSyntax();
    Code:
       0: aload_0
       1: getfield      #2202               // Field invariantApplicativeSyntax:Lscalaz/syntax/InvariantApplicativeSyntax;
       4: areturn

  public void scalaz$InvariantApplicative$_setter_$invariantApplicativeSyntax_$eq(scalaz.syntax.InvariantApplicativeSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2202               // Field invariantApplicativeSyntax:Lscalaz/syntax/InvariantApplicativeSyntax;
       5: return

  public scalaz.syntax.ApplySyntax<java.lang.Object> applySyntax();
    Code:
       0: aload_0
       1: getfield      #2209               // Field applySyntax:Lscalaz/syntax/ApplySyntax;
       4: areturn

  public void scalaz$Apply$_setter_$applySyntax_$eq(scalaz.syntax.ApplySyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2209               // Field applySyntax:Lscalaz/syntax/ApplySyntax;
       5: return

  public scalaz.syntax.Traverse1Syntax<java.lang.Object> traverse1Syntax();
    Code:
       0: aload_0
       1: getfield      #2216               // Field traverse1Syntax:Lscalaz/syntax/Traverse1Syntax;
       4: areturn

  public void scalaz$Traverse1$_setter_$traverse1Syntax_$eq(scalaz.syntax.Traverse1Syntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2216               // Field traverse1Syntax:Lscalaz/syntax/Traverse1Syntax;
       5: return

  public scalaz.syntax.Foldable1Syntax<java.lang.Object> foldable1Syntax();
    Code:
       0: aload_0
       1: getfield      #2223               // Field foldable1Syntax:Lscalaz/syntax/Foldable1Syntax;
       4: areturn

  public void scalaz$Foldable1$_setter_$foldable1Syntax_$eq(scalaz.syntax.Foldable1Syntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2223               // Field foldable1Syntax:Lscalaz/syntax/Foldable1Syntax;
       5: return

  public scalaz.syntax.TraverseSyntax<java.lang.Object> traverseSyntax();
    Code:
       0: aload_0
       1: getfield      #2230               // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       4: areturn

  public void scalaz$Traverse$_setter_$traverseSyntax_$eq(scalaz.syntax.TraverseSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2230               // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       5: return

  public scalaz.syntax.FoldableSyntax<java.lang.Object> foldableSyntax();
    Code:
       0: aload_0
       1: getfield      #2237               // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       4: areturn

  public void scalaz$Foldable$_setter_$foldableSyntax_$eq(scalaz.syntax.FoldableSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2237               // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       5: return

  public scalaz.syntax.FunctorSyntax<java.lang.Object> functorSyntax();
    Code:
       0: aload_0
       1: getfield      #2244               // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       4: areturn

  public void scalaz$Functor$_setter_$functorSyntax_$eq(scalaz.syntax.FunctorSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2244               // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<java.lang.Object> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #2251               // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2251               // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public <A> A point(scala.Function0<A>);
    Code:
       0: aload_1
       1: invokeinterface #2260,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: areturn

  public <A, B> B bind(A, scala.Function1<A, B>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2265,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public <A, B> B cobind(A, scala.Function1<A, B>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2265,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public <A> A cojoin(A);
    Code:
       0: aload_1
       1: areturn

  public <A> A copoint(A);
    Code:
       0: aload_1
       1: areturn

  public <A, B> scala.Tuple2<A, B> zip(scala.Function0<A>, scala.Function0<B>);
    Code:
       0: new           #2272               // class scala/Tuple2
       3: dup
       4: aload_1
       5: invokeinterface #2260,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      10: aload_2
      11: invokeinterface #2260,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      16: invokespecial #2276               // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      19: areturn

  public <A, B> scala.Tuple2<A, B> unzip(scala.Tuple2<A, B>);
    Code:
       0: new           #2272               // class scala/Tuple2
       3: dup
       4: aload_1
       5: invokevirtual #2282               // Method scala/Tuple2._1:()Ljava/lang/Object;
       8: aload_1
       9: invokevirtual #2285               // Method scala/Tuple2._2:()Ljava/lang/Object;
      12: invokespecial #2276               // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      15: areturn

  public <A, B, C> scala.Function2<A, B, C> alignWith(scala.Function1<scalaz.$bslash$amp$div<A, B>, C>);
    Code:
       0: aload_1
       1: invokedynamic #2305,  0           // InvokeDynamic #0:apply:(Lscala/Function1;)Lscala/Function2;
       6: areturn

  public <A, B> scalaz.$bslash$div<A, B> cozip(scalaz.$bslash$div<A, B>);
    Code:
       0: aload_1
       1: areturn

  public <G, A, B> G traverse1Impl(A, scala.Function1<A, G>, scalaz.Apply<G>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2265,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public <G, A, B> G distributeImpl(G, scala.Function1<A, B>, scalaz.Functor<G>);
    Code:
       0: getstatic     #2315               // Field scalaz/Functor$.MODULE$:Lscalaz/Functor$;
       3: pop
       4: aload_3
       5: aload_1
       6: aload_2
       7: invokeinterface #2317,  3         // InterfaceMethod scalaz/Functor.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      12: areturn

  public <A, B> B foldRight(A, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_3
       1: aload_1
       2: aload_2
       3: invokeinterface #2324,  3         // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public <A, B> B foldMapRight1(A, scala.Function1<A, B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2265,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public <A, B> scala.Function1<A, B> lift(scala.Function1<A, B>);
    Code:
       0: aload_1
       1: areturn

  public <A> A join(A);
    Code:
       0: aload_1
       1: areturn

  public <A, G, B> G traverse(G, scala.Function1<A, B>, scalaz.Traverse<G>);
    Code:
       0: aload_3
       1: aload_1
       2: aload_2
       3: invokeinterface #2333,  3         // InterfaceMethod scalaz/Traverse.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       8: areturn

  public <A, G> G sequence(G, scalaz.Traverse<G>);
    Code:
       0: aload_1
       1: areturn

  public <A, B> B ap(scala.Function0<A>, scala.Function0<scala.Function1<A, B>>);
    Code:
       0: aload_2
       1: invokeinterface #2260,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #2263               // class scala/Function1
       9: aload_1
      10: invokeinterface #2260,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      15: invokeinterface #2265,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      20: areturn

  public <G> scalaz.Applicative<G> compose(scalaz.Applicative<G>);
    Code:
       0: aload_1
       1: areturn

  public <B, A> scalaz.$bslash$div<B, A> pextract(A);
    Code:
       0: getstatic     #2344               // Field scalaz/$bslash$div$minus$.MODULE$:Lscalaz/$bslash$div$minus$;
       3: pop
       4: new           #2346               // class scalaz/$bslash$div$minus
       7: dup
       8: aload_1
       9: invokespecial #2349               // Method scalaz/$bslash$div$minus."<init>":(Ljava/lang/Object;)V
      12: areturn

  public <A> A getOrElse(A, scala.Function0<A>);
    Code:
       0: aload_1
       1: areturn

  public <A> boolean isDefined(A);
    Code:
       0: iconst_1
       1: ireturn

  public <A> scala.Option<A> toOption(A);
    Code:
       0: new           #2356               // class scala/Some
       3: dup
       4: aload_1
       5: invokespecial #2357               // Method scala/Some."<init>":(Ljava/lang/Object;)V
       8: areturn

  public <A> scalaz.Maybe<A> toMaybe(A);
    Code:
       0: new           #97                 // class scalaz/Maybe$Just
       3: dup
       4: aload_1
       5: invokespecial #2361               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
       8: areturn

  public <A, B> B tailrecM(A, scala.Function1<A, scalaz.$bslash$div<A, B>>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2265,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #2365               // class scalaz/$bslash$div
      10: astore_3
      11: aload_3
      12: instanceof    #2367               // class scalaz/$minus$bslash$div
      15: ifeq          31
      18: aload_3
      19: checkcast     #2367               // class scalaz/$minus$bslash$div
      22: invokevirtual #2369               // Method scalaz/$minus$bslash$div.a:()Ljava/lang/Object;
      25: aload_2
      26: astore_2
      27: astore_1
      28: goto          0
      31: aload_3
      32: instanceof    #2346               // class scalaz/$bslash$div$minus
      35: ifeq          46
      38: aload_3
      39: checkcast     #2346               // class scalaz/$bslash$div$minus
      42: invokevirtual #2371               // Method scalaz/$bslash$div$minus.b:()Ljava/lang/Object;
      45: areturn
      46: new           #2373               // class scala/MatchError
      49: dup
      50: aload_3
      51: invokespecial #2374               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      54: athrow

  public scalaz.Apply flip();
    Code:
       0: aload_0
       1: invokevirtual #2377               // Method flip:()Lscalaz/Applicative;
       4: areturn

  public scalaz.$bslash$div cozip(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #2365               // class scalaz/$bslash$div
       5: invokevirtual #2379               // Method cozip:(Lscalaz/$bslash$div;)Lscalaz/$bslash$div;
       8: areturn

  public scala.Tuple2 unzip(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #2272               // class scala/Tuple2
       5: invokevirtual #2382               // Method unzip:(Lscala/Tuple2;)Lscala/Tuple2;
       8: areturn

  public java.lang.Object zip(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #2384               // Method zip:(Lscala/Function0;Lscala/Function0;)Lscala/Tuple2;
       6: areturn

  public static final java.lang.Object $anonfun$alignWith$1(scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: new           #35                 // class scalaz/$bslash$amp$div$Both
       4: dup
       5: aload_1
       6: aload_2
       7: invokespecial #2386               // Method scalaz/$bslash$amp$div$Both."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      10: invokeinterface #2265,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: areturn

  public scalaz.IdInstances$$anon$1(scalaz.IdInstances);
    Code:
       0: aload_0
       1: invokespecial #2391               // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2395               // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
       8: aload_0
       9: invokestatic  #2398               // InterfaceMethod scalaz/Functor.$init$:(Lscalaz/Functor;)V
      12: aload_0
      13: invokestatic  #2401               // InterfaceMethod scalaz/Foldable.$init$:(Lscalaz/Foldable;)V
      16: aload_0
      17: invokestatic  #2404               // InterfaceMethod scalaz/Traverse.$init$:(Lscalaz/Traverse;)V
      20: aload_0
      21: invokestatic  #2407               // InterfaceMethod scalaz/Foldable1.$init$:(Lscalaz/Foldable1;)V
      24: aload_0
      25: invokestatic  #2410               // InterfaceMethod scalaz/Traverse1.$init$:(Lscalaz/Traverse1;)V
      28: aload_0
      29: invokestatic  #2413               // InterfaceMethod scalaz/Apply.$init$:(Lscalaz/Apply;)V
      32: aload_0
      33: invokestatic  #2416               // InterfaceMethod scalaz/InvariantApplicative.$init$:(Lscalaz/InvariantApplicative;)V
      36: aload_0
      37: invokestatic  #2419               // InterfaceMethod scalaz/Applicative.$init$:(Lscalaz/Applicative;)V
      40: aload_0
      41: invokestatic  #2422               // InterfaceMethod scalaz/Bind.$init$:(Lscalaz/Bind;)V
      44: aload_0
      45: invokestatic  #2425               // InterfaceMethod scalaz/Monad.$init$:(Lscalaz/Monad;)V
      48: aload_0
      49: invokestatic  #2428               // InterfaceMethod scalaz/BindRec.$init$:(Lscalaz/BindRec;)V
      52: aload_0
      53: invokestatic  #2431               // InterfaceMethod scalaz/Cobind.$init$:(Lscalaz/Cobind;)V
      56: aload_0
      57: invokestatic  #2434               // InterfaceMethod scalaz/Comonad.$init$:(Lscalaz/Comonad;)V
      60: aload_0
      61: invokestatic  #2437               // InterfaceMethod scalaz/Distributive.$init$:(Lscalaz/Distributive;)V
      64: aload_0
      65: invokestatic  #2440               // InterfaceMethod scalaz/Zip.$init$:(Lscalaz/Zip;)V
      68: aload_0
      69: invokestatic  #2443               // InterfaceMethod scalaz/Unzip.$init$:(Lscalaz/Unzip;)V
      72: aload_0
      73: invokestatic  #2446               // InterfaceMethod scalaz/Align.$init$:(Lscalaz/Align;)V
      76: aload_0
      77: invokestatic  #2449               // InterfaceMethod scalaz/Cozip.$init$:(Lscalaz/Cozip;)V
      80: aload_0
      81: invokestatic  #2452               // InterfaceMethod scalaz/Optional.$init$:(Lscalaz/Optional;)V
      84: invokestatic  #2457               // Method scala/runtime/Statics.releaseFence:()V
      87: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #2470,  0           // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
