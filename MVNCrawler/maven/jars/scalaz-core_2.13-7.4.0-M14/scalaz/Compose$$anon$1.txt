Compiled from "Compose.scala"
public final class scalaz.Compose$$anon$1 implements scalaz.Compose<$eq$greater$colon>.ComposePlus {
  private scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Compose $outer;

  public <A> $eq$greater$colon plus($eq$greater$colon, scala.Function0<$eq$greater$colon>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #32                 // InterfaceMethod scalaz/Compose$ComposePlus.plus$:(Lscalaz/Compose$ComposePlus;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <S$, A> scalaz.Maybe<$eq$greater$colon> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, $eq$greater$colon>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #45                 // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S$, A> scalaz.Maybe<$eq$greater$colon> unfoldrPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<$eq$greater$colon, S$>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #51                 // InterfaceMethod scalaz/Plus.unfoldrPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #57                 // InterfaceMethod scalaz/Plus.compose$:(Lscalaz/Plus;)Lscalaz/Plus;
       4: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #64                 // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<$eq$greater$colon> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #72                 // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #79                 // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #83                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #83                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.Compose scalaz$Compose$ComposePlus$$$outer();
    Code:
       0: aload_0
       1: getfield      #91                 // Field $outer:Lscalaz/Compose;
       4: areturn

  public scalaz.Compose$$anon$1(scalaz.Compose);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #91                 // Field $outer:Lscalaz/Compose;
      11: aload_0
      12: invokespecial #96                 // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #100                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      19: invokestatic  #105                // Method scala/runtime/Statics.releaseFence:()V
      22: return
}
