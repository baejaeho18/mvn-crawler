Compiled from "PlusEmpty.scala"
public final class scalaz.PlusEmpty$$anon$7 implements scalaz.Plus$LiftedPlus<M, N>, scalaz.PlusEmpty<?> {
  private scalaz.syntax.PlusEmptySyntax<?> plusEmptySyntax;

  private scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Applicative M$1;

  private final scalaz.PlusEmpty P$1;

  public <S, A> M unfoldlPsum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, M>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #48                 // InterfaceMethod scalaz/PlusEmpty.unfoldlPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S, A> M unfoldrPsum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<M, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #57                 // InterfaceMethod scalaz/PlusEmpty.unfoldrPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.PlusEmpty<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #64                 // InterfaceMethod scalaz/PlusEmpty.compose$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       4: areturn

  public <G> scalaz.PlusEmpty<?> product(scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #71                 // InterfaceMethod scalaz/PlusEmpty.product$:(Lscalaz/PlusEmpty;Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       5: areturn

  public <A> scalaz.Monoid<M> monoid();
    Code:
       0: aload_0
       1: invokestatic  #78                 // InterfaceMethod scalaz/PlusEmpty.monoid$:(Lscalaz/PlusEmpty;)Lscalaz/Monoid;
       4: areturn

  public scalaz.PlusEmpty<?>.EmptyLaw plusEmptyLaw();
    Code:
       0: aload_0
       1: invokestatic  #85                 // InterfaceMethod scalaz/PlusEmpty.plusEmptyLaw$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty$EmptyLaw;
       4: areturn

  public <A> M plus(M, scala.Function0<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // InterfaceMethod scalaz/Plus$LiftedPlus.plus$:(Lscalaz/Plus$LiftedPlus;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <S, A> scalaz.Maybe<M> unfoldrPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<M, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #102                // InterfaceMethod scalaz/Plus$LiftedPlus.unfoldrPsumOpt$:(Lscalaz/Plus$LiftedPlus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S$, A> scalaz.Maybe<M> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, M>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #108                // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #113                // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<M> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #121                // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #128                // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusEmptySyntax<?> plusEmptySyntax();
    Code:
       0: aload_0
       1: getfield      #132                // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       4: areturn

  public void scalaz$PlusEmpty$_setter_$plusEmptySyntax_$eq(scalaz.syntax.PlusEmptySyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #132                // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       5: return

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #140                // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #140                // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.Applicative<M> G();
    Code:
       0: aload_0
       1: getfield      #148                // Field M$1:Lscalaz/Applicative;
       4: areturn

  public scalaz.PlusEmpty<N> F();
    Code:
       0: aload_0
       1: getfield      #152                // Field P$1:Lscalaz/PlusEmpty;
       4: areturn

  public <A> M empty();
    Code:
       0: aload_0
       1: getfield      #148                // Field M$1:Lscalaz/Applicative;
       4: aload_0
       5: invokedynamic #173,  0            // InvokeDynamic #0:apply:(Lscalaz/PlusEmpty$$anon$7;)Lscala/Function0;
      10: invokeinterface #179,  2          // InterfaceMethod scalaz/Applicative.point:(Lscala/Function0;)Ljava/lang/Object;
      15: areturn

  public scalaz.Plus compose();
    Code:
       0: aload_0
       1: invokevirtual #182                // Method compose:()Lscalaz/PlusEmpty;
       4: areturn

  public scalaz.Plus F();
    Code:
       0: aload_0
       1: invokevirtual #184                // Method F:()Lscalaz/PlusEmpty;
       4: areturn

  public scalaz.Apply G();
    Code:
       0: aload_0
       1: invokevirtual #187                // Method G:()Lscalaz/Applicative;
       4: areturn

  public static final java.lang.Object $anonfun$empty$1(scalaz.PlusEmpty$$anon$7);
    Code:
       0: aload_0
       1: getfield      #152                // Field P$1:Lscalaz/PlusEmpty;
       4: invokeinterface #190,  1          // InterfaceMethod scalaz/PlusEmpty.empty:()Ljava/lang/Object;
       9: areturn

  public scalaz.PlusEmpty$$anon$7(scalaz.Applicative, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #148                // Field M$1:Lscalaz/Applicative;
       5: aload_0
       6: aload_2
       7: putfield      #152                // Field P$1:Lscalaz/PlusEmpty;
      10: aload_0
      11: invokespecial #195                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #199                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      18: aload_0
      19: invokestatic  #202                // InterfaceMethod scalaz/PlusEmpty.$init$:(Lscalaz/PlusEmpty;)V
      22: invokestatic  #207                // Method scala/runtime/Statics.releaseFence:()V
      25: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #219,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
