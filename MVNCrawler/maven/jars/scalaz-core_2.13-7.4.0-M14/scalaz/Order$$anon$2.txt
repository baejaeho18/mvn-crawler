Compiled from "Order.scala"
public final class scalaz.Order$$anon$2 implements scalaz.Order<F> {
  private scalaz.syntax.OrderSyntax<F> orderSyntax;

  private scalaz.syntax.EqualSyntax<F> equalSyntax;

  private final scalaz.Order $outer;

  public scalaz.Ordering apply(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #36                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #46                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #50                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #54                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #58                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public F max(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #65                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public F min(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2<F, F> sort(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #76                 // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, F>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #84                 // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<F> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #92                 // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<F>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #99                 // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public scalaz.Equal<F>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #106                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<F> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #110                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #110                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<F> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #118                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #118                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Ordering order(F, F);
    Code:
       0: aload_0
       1: getfield      #124                // Field $outer:Lscalaz/Order;
       4: aload_2
       5: aload_1
       6: invokeinterface #126,  3          // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      11: areturn

  public boolean equal(F, F);
    Code:
       0: aload_0
       1: getfield      #124                // Field $outer:Lscalaz/Order;
       4: aload_1
       5: aload_2
       6: invokeinterface #129,  3          // InterfaceMethod scalaz/Order.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      11: ireturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: getfield      #124                // Field $outer:Lscalaz/Order;
       4: invokeinterface #133,  1          // InterfaceMethod scalaz/Order.equalIsNatural:()Z
       9: ireturn

  public scalaz.Order<F> reverseOrder();
    Code:
       0: aload_0
       1: getfield      #124                // Field $outer:Lscalaz/Order;
       4: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #137                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scalaz.Order$$anon$2(scalaz.Order);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #124                // Field $outer:Lscalaz/Order;
      11: aload_0
      12: invokespecial #142                // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #146                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      19: aload_0
      20: invokestatic  #148                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      23: invokestatic  #153                // Method scala/runtime/Statics.releaseFence:()V
      26: return
}
