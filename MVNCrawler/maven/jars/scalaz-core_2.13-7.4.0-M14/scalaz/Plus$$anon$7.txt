Compiled from "Plus.scala"
public final class scalaz.Plus$$anon$7 implements scalaz.Plus$LiftedPlus<G, F> {
  private scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Apply G0$2;

  private final scalaz.Plus F0$1;

  public <A> G plus(G, scala.Function0<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #35                 // InterfaceMethod scalaz/Plus$LiftedPlus.plus$:(Lscalaz/Plus$LiftedPlus;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <S, A> scalaz.Maybe<G> unfoldrPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<G, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #48                 // InterfaceMethod scalaz/Plus$LiftedPlus.unfoldrPsumOpt$:(Lscalaz/Plus$LiftedPlus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S$, A> scalaz.Maybe<G> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, G>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #55                 // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #62                 // InterfaceMethod scalaz/Plus.compose$:(Lscalaz/Plus;)Lscalaz/Plus;
       4: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #69                 // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<G> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #76                 // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #83                 // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #87                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #87                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.Apply<G> G();
    Code:
       0: aload_0
       1: getfield      #96                 // Field G0$2:Lscalaz/Apply;
       4: areturn

  public scalaz.Plus<F> F();
    Code:
       0: aload_0
       1: getfield      #100                // Field F0$1:Lscalaz/Plus;
       4: areturn

  public scalaz.Plus$$anon$7(scalaz.Apply, scalaz.Plus);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #96                 // Field G0$2:Lscalaz/Apply;
       5: aload_0
       6: aload_2
       7: putfield      #100                // Field F0$1:Lscalaz/Plus;
      10: aload_0
      11: invokespecial #105                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #109                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      18: invokestatic  #114                // Method scala/runtime/Statics.releaseFence:()V
      21: return
}
