Compiled from "Arrow.scala"
public final class scalaz.Arrow$$anon$3 implements scalaz.IsomorphismArrow<F, G> {
  private scalaz.syntax.ArrowSyntax<F> arrowSyntax;

  private scalaz.syntax.CategorySyntax<F> categorySyntax;

  private scalaz.syntax.StrongSyntax<F> strongSyntax;

  private scalaz.syntax.ProfunctorSyntax<F> profunctorSyntax;

  private scalaz.syntax.SplitSyntax<F> splitSyntax;

  private scalaz.syntax.ComposeSyntax<F> composeSyntax;

  private final scalaz.Arrow E$1;

  private final scalaz.Isomorphisms$Iso3 D$1;

  public <A, B> F arr(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #68                 // InterfaceMethod scalaz/IsomorphismArrow.arr$:(Lscalaz/IsomorphismArrow;Lscala/Function1;)Ljava/lang/Object;
       5: areturn

  public <A> F id();
    Code:
       0: aload_0
       1: invokestatic  #80                 // InterfaceMethod scalaz/IsomorphismCategory.id$:(Lscalaz/IsomorphismCategory;)Ljava/lang/Object;
       4: areturn

  public <A, B, C> F first(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #90                 // InterfaceMethod scalaz/IsomorphismStrong.first$:(Lscalaz/IsomorphismStrong;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B, C> F second(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #95                 // InterfaceMethod scalaz/IsomorphismStrong.second$:(Lscalaz/IsomorphismStrong;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B, C> F mapfst(F, scala.Function1<C, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #105                // InterfaceMethod scalaz/IsomorphismProfunctor.mapfst$:(Lscalaz/IsomorphismProfunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B, C> F mapsnd(F, scala.Function1<B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #110                // InterfaceMethod scalaz/IsomorphismProfunctor.mapsnd$:(Lscalaz/IsomorphismProfunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B, C, D> F split(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #120                // InterfaceMethod scalaz/IsomorphismSplit.split$:(Lscalaz/IsomorphismSplit;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B, C> F compose(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #128                // InterfaceMethod scalaz/IsomorphismCompose.compose$:(Lscalaz/IsomorphismCompose;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <C> scalaz.Applicative<?> covariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #137                // InterfaceMethod scalaz/Arrow.covariantInstance$:(Lscalaz/Arrow;)Lscalaz/Applicative;
       4: areturn

  public final <A, B, C> F $less$less$less(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #143                // InterfaceMethod scalaz/Arrow.$less$less$less$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B, C> F $greater$greater$greater(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #147                // InterfaceMethod scalaz/Arrow.$greater$greater$greater$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <X, Y> F swap();
    Code:
       0: aload_0
       1: invokestatic  #153                // InterfaceMethod scalaz/Arrow.swap$:(Lscalaz/Arrow;)Ljava/lang/Object;
       4: areturn

  public final <A, B, C, D> F splitA(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #158                // InterfaceMethod scalaz/Arrow.splitA$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> F product(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #164                // InterfaceMethod scalaz/Arrow.product$:(Lscalaz/Arrow;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B, C> F combine(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #169                // InterfaceMethod scalaz/Arrow.combine$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scalaz.PlusEmpty<?> empty();
    Code:
       0: aload_0
       1: invokestatic  #176                // InterfaceMethod scalaz/Category.empty$:(Lscalaz/Category;)Lscalaz/PlusEmpty;
       4: areturn

  public <A> scalaz.Monoid<F> monoid();
    Code:
       0: aload_0
       1: invokestatic  #183                // InterfaceMethod scalaz/Category.monoid$:(Lscalaz/Category;)Lscalaz/Monoid;
       4: areturn

  public scalaz.Category<F>.CategoryLaw categoryLaw();
    Code:
       0: aload_0
       1: invokestatic  #190                // InterfaceMethod scalaz/Category.categoryLaw$:(Lscalaz/Category;)Lscalaz/Category$CategoryLaw;
       4: areturn

  public scalaz.Strong<F>.StrongLaws strongLaw();
    Code:
       0: aload_0
       1: invokestatic  #197                // InterfaceMethod scalaz/Strong.strongLaw$:(Lscalaz/Strong;)Lscalaz/Strong$StrongLaws;
       4: areturn

  public <A, B, C, D> F dimap(F, scala.Function1<C, A>, scala.Function1<B, D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #204                // InterfaceMethod scalaz/Profunctor.dimap$:(Lscalaz/Profunctor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scalaz.InvariantFunctor<?> invariantFunctor();
    Code:
       0: aload_0
       1: invokestatic  #211                // InterfaceMethod scalaz/Profunctor.invariantFunctor$:(Lscalaz/Profunctor;)Lscalaz/InvariantFunctor;
       4: areturn

  public <C> scalaz.Contravariant<?> contravariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #218                // InterfaceMethod scalaz/Profunctor.contravariantInstance$:(Lscalaz/Profunctor;)Lscalaz/Contravariant;
       4: areturn

  public scalaz.Profunctor<F>.ProfunctorLaw profunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #225                // InterfaceMethod scalaz/Profunctor.profunctorLaw$:(Lscalaz/Profunctor;)Lscalaz/Profunctor$ProfunctorLaw;
       4: areturn

  public scalaz.Plus<?> plus();
    Code:
       0: aload_0
       1: invokestatic  #232                // InterfaceMethod scalaz/Compose.plus$:(Lscalaz/Compose;)Lscalaz/Plus;
       4: areturn

  public <A> scalaz.Semigroup<F> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #239                // InterfaceMethod scalaz/Compose.semigroup$:(Lscalaz/Compose;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Compose<F>.ComposeLaw composeLaw();
    Code:
       0: aload_0
       1: invokestatic  #246                // InterfaceMethod scalaz/Compose.composeLaw$:(Lscalaz/Compose;)Lscalaz/Compose$ComposeLaw;
       4: areturn

  public scalaz.syntax.ArrowSyntax<F> arrowSyntax();
    Code:
       0: aload_0
       1: getfield      #250                // Field arrowSyntax:Lscalaz/syntax/ArrowSyntax;
       4: areturn

  public void scalaz$Arrow$_setter_$arrowSyntax_$eq(scalaz.syntax.ArrowSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #250                // Field arrowSyntax:Lscalaz/syntax/ArrowSyntax;
       5: return

  public scalaz.syntax.CategorySyntax<F> categorySyntax();
    Code:
       0: aload_0
       1: getfield      #258                // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       4: areturn

  public void scalaz$Category$_setter_$categorySyntax_$eq(scalaz.syntax.CategorySyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #258                // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       5: return

  public scalaz.syntax.StrongSyntax<F> strongSyntax();
    Code:
       0: aload_0
       1: getfield      #265                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       4: areturn

  public void scalaz$Strong$_setter_$strongSyntax_$eq(scalaz.syntax.StrongSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #265                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       5: return

  public scalaz.syntax.ProfunctorSyntax<F> profunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #272                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       4: areturn

  public void scalaz$Profunctor$_setter_$profunctorSyntax_$eq(scalaz.syntax.ProfunctorSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #272                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       5: return

  public scalaz.syntax.SplitSyntax<F> splitSyntax();
    Code:
       0: aload_0
       1: getfield      #279                // Field splitSyntax:Lscalaz/syntax/SplitSyntax;
       4: areturn

  public void scalaz$Split$_setter_$splitSyntax_$eq(scalaz.syntax.SplitSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #279                // Field splitSyntax:Lscalaz/syntax/SplitSyntax;
       5: return

  public scalaz.syntax.ComposeSyntax<F> composeSyntax();
    Code:
       0: aload_0
       1: getfield      #286                // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       4: areturn

  public void scalaz$Compose$_setter_$composeSyntax_$eq(scalaz.syntax.ComposeSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #286                // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       5: return

  public scalaz.Arrow<G> G();
    Code:
       0: aload_0
       1: getfield      #294                // Field E$1:Lscalaz/Arrow;
       4: areturn

  public scalaz.Isomorphisms$Iso3<scalaz.BiNaturalTransformation, F, G> iso();
    Code:
       0: aload_0
       1: getfield      #299                // Field D$1:Lscalaz/Isomorphisms$Iso3;
       4: areturn

  public scalaz.Functor covariantInstance();
    Code:
       0: aload_0
       1: invokevirtual #302                // Method covariantInstance:()Lscalaz/Applicative;
       4: areturn

  public scalaz.Compose G();
    Code:
       0: aload_0
       1: invokevirtual #305                // Method G:()Lscalaz/Arrow;
       4: areturn

  public scalaz.Split G();
    Code:
       0: aload_0
       1: invokevirtual #305                // Method G:()Lscalaz/Arrow;
       4: areturn

  public scalaz.Profunctor G();
    Code:
       0: aload_0
       1: invokevirtual #305                // Method G:()Lscalaz/Arrow;
       4: areturn

  public scalaz.Strong G();
    Code:
       0: aload_0
       1: invokevirtual #305                // Method G:()Lscalaz/Arrow;
       4: areturn

  public scalaz.Category G();
    Code:
       0: aload_0
       1: invokevirtual #305                // Method G:()Lscalaz/Arrow;
       4: areturn

  public scalaz.Arrow$$anon$3(scalaz.Arrow, scalaz.Isomorphisms$Iso3);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #294                // Field E$1:Lscalaz/Arrow;
       5: aload_0
       6: aload_2
       7: putfield      #299                // Field D$1:Lscalaz/Isomorphisms$Iso3;
      10: aload_0
      11: invokespecial #314                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #318                // InterfaceMethod scalaz/Compose.$init$:(Lscalaz/Compose;)V
      18: aload_0
      19: invokestatic  #323                // InterfaceMethod scalaz/Split.$init$:(Lscalaz/Split;)V
      22: aload_0
      23: invokestatic  #326                // InterfaceMethod scalaz/Profunctor.$init$:(Lscalaz/Profunctor;)V
      26: aload_0
      27: invokestatic  #329                // InterfaceMethod scalaz/Strong.$init$:(Lscalaz/Strong;)V
      30: aload_0
      31: invokestatic  #332                // InterfaceMethod scalaz/Category.$init$:(Lscalaz/Category;)V
      34: aload_0
      35: invokestatic  #335                // InterfaceMethod scalaz/Arrow.$init$:(Lscalaz/Arrow;)V
      38: invokestatic  #340                // Method scala/runtime/Statics.releaseFence:()V
      41: return
}
