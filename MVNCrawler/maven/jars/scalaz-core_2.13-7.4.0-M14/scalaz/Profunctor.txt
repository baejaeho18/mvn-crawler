Compiled from "Profunctor.scala"
public interface scalaz.Profunctor<$eq$greater$colon> {
  public static <F, D> scalaz.Functor<?> downStarFunctor();
    Code:
       0: getstatic     #60                 // Field scalaz/Profunctor$.MODULE$:Lscalaz/Profunctor$;
       3: pop
       4: new           #18                 // class scalaz/Profunctor$$anon$10
       7: dup
       8: invokespecial #64                 // Method scalaz/Profunctor$$anon$10."<init>":()V
      11: areturn

  public static <F, D> scalaz.Functor<?> upStarFunctor(scalaz.Functor<F>);
    Code:
       0: getstatic     #60                 // Field scalaz/Profunctor$.MODULE$:Lscalaz/Profunctor$;
       3: pop
       4: new           #34                 // class scalaz/Profunctor$$anon$9
       7: dup
       8: aload_0
       9: invokespecial #71                 // Method scalaz/Profunctor$$anon$9."<init>":(Lscalaz/Functor;)V
      12: areturn

  public static <F> scalaz.Profunctor<?> downStarProfunctor(scalaz.Functor<F>);
    Code:
       0: getstatic     #60                 // Field scalaz/Profunctor$.MODULE$:Lscalaz/Profunctor$;
       3: pop
       4: new           #32                 // class scalaz/Profunctor$$anon$8
       7: dup
       8: aload_0
       9: invokespecial #77                 // Method scalaz/Profunctor$$anon$8."<init>":(Lscalaz/Functor;)V
      12: areturn

  public static <F> scalaz.Profunctor<?> upStarProfunctor(scalaz.Functor<F>);
    Code:
       0: getstatic     #60                 // Field scalaz/Profunctor$.MODULE$:Lscalaz/Profunctor$;
       3: pop
       4: new           #30                 // class scalaz/Profunctor$$anon$7
       7: dup
       8: aload_0
       9: invokespecial #80                 // Method scalaz/Profunctor$$anon$7."<init>":(Lscalaz/Functor;)V
      12: areturn

  public static scalaz.Tag$TagOf<scalaz.Profunctor$DownStarF> DownStar();
    Code:
       0: getstatic     #60                 // Field scalaz/Profunctor$.MODULE$:Lscalaz/Profunctor$;
       3: invokevirtual #85                 // Method scalaz/Profunctor$.DownStar:()Lscalaz/Tag$TagOf;
       6: areturn

  public static scalaz.Tag$TagOf<scalaz.Profunctor$UpStarF> UpStar();
    Code:
       0: getstatic     #60                 // Field scalaz/Profunctor$.MODULE$:Lscalaz/Profunctor$;
       3: invokevirtual #89                 // Method scalaz/Profunctor$.UpStar:()Lscalaz/Tag$TagOf;
       6: areturn

  public static <F, G> scalaz.Profunctor<F> fromIso(scalaz.Isomorphisms$Iso3<scalaz.BiNaturalTransformation, F, G>, scalaz.Profunctor<G>);
    Code:
       0: getstatic     #60                 // Field scalaz/Profunctor$.MODULE$:Lscalaz/Profunctor$;
       3: pop
       4: new           #28                 // class scalaz/Profunctor$$anon$6
       7: dup
       8: aload_1
       9: aload_0
      10: invokespecial #97                 // Method scalaz/Profunctor$$anon$6."<init>":(Lscalaz/Profunctor;Lscalaz/Isomorphisms$Iso3;)V
      13: areturn

  public static <F> scalaz.Profunctor<F> apply(scalaz.Profunctor<F>);
    Code:
       0: getstatic     #60                 // Field scalaz/Profunctor$.MODULE$:Lscalaz/Profunctor$;
       3: pop
       4: aload_0
       5: areturn

  public abstract void scalaz$Profunctor$_setter_$profunctorSyntax_$eq(scalaz.syntax.ProfunctorSyntax<$eq$greater$colon>);

  public abstract <A, B, C> $eq$greater$colon mapfst($eq$greater$colon, scala.Function1<C, A>);

  public abstract <A, B, C> $eq$greater$colon mapsnd($eq$greater$colon, scala.Function1<B, C>);

  public static java.lang.Object dimap$(scalaz.Profunctor, java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #122                // InterfaceMethod dimap:(Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public default <A, B, C, D> $eq$greater$colon dimap($eq$greater$colon, scala.Function1<C, A>, scala.Function1<B, D>);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: aload_2
       4: invokeinterface #127,  3          // InterfaceMethod mapfst:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       9: aload_3
      10: invokeinterface #129,  3          // InterfaceMethod mapsnd:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      15: areturn

  public static scalaz.InvariantFunctor invariantFunctor$(scalaz.Profunctor);
    Code:
       0: aload_0
       1: invokespecial #136                // InterfaceMethod invariantFunctor:()Lscalaz/InvariantFunctor;
       4: areturn

  public default scalaz.InvariantFunctor<?> invariantFunctor();
    Code:
       0: new           #16                 // class scalaz/Profunctor$$anon$1
       3: dup
       4: aload_0
       5: invokespecial #140                // Method scalaz/Profunctor$$anon$1."<init>":(Lscalaz/Profunctor;)V
       8: areturn

  public static scalaz.Functor covariantInstance$(scalaz.Profunctor);
    Code:
       0: aload_0
       1: invokespecial #145                // InterfaceMethod covariantInstance:()Lscalaz/Functor;
       4: areturn

  public default <C> scalaz.Functor<?> covariantInstance();
    Code:
       0: new           #20                 // class scalaz/Profunctor$$anon$2
       3: dup
       4: aload_0
       5: invokespecial #147                // Method scalaz/Profunctor$$anon$2."<init>":(Lscalaz/Profunctor;)V
       8: areturn

  public static scalaz.Contravariant contravariantInstance$(scalaz.Profunctor);
    Code:
       0: aload_0
       1: invokespecial #153                // InterfaceMethod contravariantInstance:()Lscalaz/Contravariant;
       4: areturn

  public default <C> scalaz.Contravariant<?> contravariantInstance();
    Code:
       0: new           #22                 // class scalaz/Profunctor$$anon$3
       3: dup
       4: aload_0
       5: invokespecial #155                // Method scalaz/Profunctor$$anon$3."<init>":(Lscalaz/Profunctor;)V
       8: areturn

  public static scalaz.Profunctor$ProfunctorLaw profunctorLaw$(scalaz.Profunctor);
    Code:
       0: aload_0
       1: invokespecial #161                // InterfaceMethod profunctorLaw:()Lscalaz/Profunctor$ProfunctorLaw;
       4: areturn

  public default scalaz.Profunctor<$eq$greater$colon>.ProfunctorLaw profunctorLaw();
    Code:
       0: new           #24                 // class scalaz/Profunctor$$anon$4
       3: dup
       4: aload_0
       5: invokespecial #163                // Method scalaz/Profunctor$$anon$4."<init>":(Lscalaz/Profunctor;)V
       8: areturn

  public abstract scalaz.syntax.ProfunctorSyntax<$eq$greater$colon> profunctorSyntax();

  public static void $init$(scalaz.Profunctor);
    Code:
       0: aload_0
       1: new           #26                 // class scalaz/Profunctor$$anon$5
       4: dup
       5: aload_0
       6: invokespecial #168                // Method scalaz/Profunctor$$anon$5."<init>":(Lscalaz/Profunctor;)V
       9: invokeinterface #170,  2          // InterfaceMethod scalaz$Profunctor$_setter_$profunctorSyntax_$eq:(Lscalaz/syntax/ProfunctorSyntax;)V
      14: return
}
