Compiled from "Maybe.scala"
public final class scalaz.MaybeInstances$$anon$11 implements scalaz.Traverse<scalaz.Maybe>, scalaz.MonadPlus<scalaz.Maybe>, scalaz.Alt<scalaz.Maybe>, scalaz.BindRec<scalaz.Maybe>, scalaz.Cozip<scalaz.Maybe>, scalaz.Zip<scalaz.Maybe>, scalaz.Unzip<scalaz.Maybe>, scalaz.Align<scalaz.Maybe>, scalaz.IsEmpty<scalaz.Maybe>, scalaz.Cobind<scalaz.Maybe>, scalaz.Optional<scalaz.Maybe> {
  private scalaz.syntax.OptionalSyntax<scalaz.Maybe> optionalSyntax;

  private scalaz.syntax.CobindSyntax<scalaz.Maybe> cobindSyntax;

  private scalaz.syntax.IsEmptySyntax<scalaz.Maybe> isEmptySyntax;

  private scalaz.syntax.AlignSyntax<scalaz.Maybe> alignSyntax;

  private scalaz.syntax.UnzipSyntax<scalaz.Maybe> unzipSyntax;

  private scalaz.syntax.ZipSyntax<scalaz.Maybe> zipSyntax;

  private scalaz.syntax.CozipSyntax<scalaz.Maybe> cozipSyntax;

  private scalaz.syntax.BindRecSyntax<scalaz.Maybe> bindRecSyntax;

  private scalaz.syntax.AltSyntax<scalaz.Maybe> altSyntax;

  private scalaz.syntax.InvariantAltSyntax<scalaz.Maybe> invariantAltSyntax;

  private scalaz.syntax.MonadPlusSyntax<scalaz.Maybe> monadPlusSyntax;

  private scalaz.syntax.ApplicativePlusSyntax<scalaz.Maybe> applicativePlusSyntax;

  private scalaz.syntax.PlusEmptySyntax<scalaz.Maybe> plusEmptySyntax;

  private scalaz.syntax.PlusSyntax<scalaz.Maybe> plusSyntax;

  private scalaz.syntax.MonadSyntax<scalaz.Maybe> monadSyntax;

  private scalaz.syntax.BindSyntax<scalaz.Maybe> bindSyntax;

  private scalaz.syntax.ApplicativeSyntax<scalaz.Maybe> applicativeSyntax;

  private scalaz.syntax.InvariantApplicativeSyntax<scalaz.Maybe> invariantApplicativeSyntax;

  private scalaz.syntax.ApplySyntax<scalaz.Maybe> applySyntax;

  private scalaz.syntax.TraverseSyntax<scalaz.Maybe> traverseSyntax;

  private scalaz.syntax.FoldableSyntax<scalaz.Maybe> foldableSyntax;

  private scalaz.syntax.FunctorSyntax<scalaz.Maybe> functorSyntax;

  private scalaz.syntax.InvariantFunctorSyntax<scalaz.Maybe> invariantFunctorSyntax;

  public java.lang.Object getOrElse(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #214                // InterfaceMethod scalaz/Optional.getOrElse$:(Lscalaz/Optional;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public final boolean nonEmpty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #224                // InterfaceMethod scalaz/Optional.nonEmpty$:(Lscalaz/Optional;Ljava/lang/Object;)Z
       5: ireturn

  public final boolean isEmpty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #228                // InterfaceMethod scalaz/Optional.isEmpty$:(Lscalaz/Optional;Ljava/lang/Object;)Z
       5: ireturn

  public java.lang.Object orElse(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #233                // InterfaceMethod scalaz/Optional.orElse$:(Lscalaz/Optional;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object $qmark(java.lang.Object, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #241                // InterfaceMethod scalaz/Optional.$qmark$:(Lscalaz/Optional;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object extend(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #248                // InterfaceMethod scalaz/Cobind.extend$:(Lscalaz/Cobind;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public scalaz.Cobind<scalaz.Maybe>.CobindLaws cobindLaw();
    Code:
       0: aload_0
       1: invokestatic  #256                // InterfaceMethod scalaz/Cobind.cobindLaw$:(Lscalaz/Cobind;)Lscalaz/Cobind$CobindLaws;
       4: areturn

  public scalaz.IsEmpty<scalaz.Maybe>.IsEmptyLaw isEmptyLaw();
    Code:
       0: aload_0
       1: invokestatic  #263                // InterfaceMethod scalaz/IsEmpty.isEmptyLaw$:(Lscalaz/IsEmpty;)Lscalaz/IsEmpty$IsEmptyLaw;
       4: areturn

  public <G> scalaz.Align<?> product(scalaz.Align<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #271                // InterfaceMethod scalaz/Align.product$:(Lscalaz/Align;Lscalaz/Align;)Lscalaz/Align;
       5: areturn

  public java.lang.Object align(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #280                // InterfaceMethod scalaz/Align.align$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B, C> scala.Function2<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>> padWith(scala.Function2<scala.Option<A>, scala.Option<B>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #287                // InterfaceMethod scalaz/Align.padWith$:(Lscalaz/Align;Lscala/Function2;)Lscala/Function2;
       5: areturn

  public <A, B> scala.Function2<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<scala.Tuple2<scala.Option<A>, scala.Option<B>>>> pad();
    Code:
       0: aload_0
       1: invokestatic  #295                // InterfaceMethod scalaz/Align.pad$:(Lscalaz/Align;)Lscala/Function2;
       4: areturn

  public java.lang.Object merge(java.lang.Object, java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #304                // InterfaceMethod scalaz/Align.merge$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object alignSwap(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #309                // InterfaceMethod scalaz/Align.alignSwap$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignA(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #313                // InterfaceMethod scalaz/Align.alignA$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignB(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #317                // InterfaceMethod scalaz/Align.alignB$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignThis(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #321                // InterfaceMethod scalaz/Align.alignThis$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignThat(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #325                // InterfaceMethod scalaz/Align.alignThat$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignBoth(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #329                // InterfaceMethod scalaz/Align.alignBoth$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scalaz.Align<scalaz.Maybe>.AlignLaw alignLaw();
    Code:
       0: aload_0
       1: invokestatic  #336                // InterfaceMethod scalaz/Align.alignLaw$:(Lscalaz/Align;)Lscalaz/Align$AlignLaw;
       4: areturn

  public java.lang.Object firsts(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #342                // InterfaceMethod scalaz/Unzip.firsts$:(Lscalaz/Unzip;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object seconds(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #346                // InterfaceMethod scalaz/Unzip.seconds$:(Lscalaz/Unzip;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <G> scalaz.Unzip<?> compose(scalaz.Functor<scalaz.Maybe>, scalaz.Unzip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #354                // InterfaceMethod scalaz/Unzip.compose$:(Lscalaz/Unzip;Lscalaz/Functor;Lscalaz/Unzip;)Lscalaz/Unzip;
       6: areturn

  public <G> scalaz.Unzip<?> product(scalaz.Unzip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #361                // InterfaceMethod scalaz/Unzip.product$:(Lscalaz/Unzip;Lscalaz/Unzip;)Lscalaz/Unzip;
       5: areturn

  public scala.Tuple3 unzip3(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #368                // InterfaceMethod scalaz/Unzip.unzip3$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple3;
       5: areturn

  public scala.Tuple4 unzip4(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #374                // InterfaceMethod scalaz/Unzip.unzip4$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple4;
       5: areturn

  public scala.Tuple5 unzip5(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #380                // InterfaceMethod scalaz/Unzip.unzip5$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple5;
       5: areturn

  public scala.Tuple6 unzip6(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #386                // InterfaceMethod scalaz/Unzip.unzip6$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple6;
       5: areturn

  public scala.Tuple7 unzip7(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #392                // InterfaceMethod scalaz/Unzip.unzip7$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple7;
       5: areturn

  public <G> scalaz.Zip<?> compose(scalaz.Functor<scalaz.Maybe>, scalaz.Zip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #397                // InterfaceMethod scalaz/Zip.compose$:(Lscalaz/Zip;Lscalaz/Functor;Lscalaz/Zip;)Lscalaz/Zip;
       6: areturn

  public <G> scalaz.Zip<?> product(scalaz.Zip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #403                // InterfaceMethod scalaz/Zip.product$:(Lscalaz/Zip;Lscalaz/Zip;)Lscalaz/Zip;
       5: areturn

  public java.lang.Object zipWith(scala.Function0, scala.Function0, scala.Function2, scalaz.Functor);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #411                // InterfaceMethod scalaz/Zip.zipWith$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;Lscala/Function2;Lscalaz/Functor;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object apzip(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #417                // InterfaceMethod scalaz/Zip.apzip$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object apzipPL(scala.Function0, scala.Function0, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #424                // InterfaceMethod scalaz/Zip.apzipPL$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public scalaz.Apply<scalaz.Maybe> ap(scalaz.Functor<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #432                // InterfaceMethod scalaz/Zip.ap$:(Lscalaz/Zip;Lscalaz/Functor;)Lscalaz/Apply;
       5: areturn

  public scalaz.Zip<scalaz.Maybe>.ZipLaw zipLaw();
    Code:
       0: aload_0
       1: invokestatic  #439                // InterfaceMethod scalaz/Zip.zipLaw$:(Lscalaz/Zip;)Lscalaz/Zip$ZipLaw;
       4: areturn

  public scalaz.$bslash$div cozip3(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #445                // InterfaceMethod scalaz/Cozip.cozip3$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public scalaz.$bslash$div cozip4(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #449                // InterfaceMethod scalaz/Cozip.cozip4$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public scalaz.$bslash$div cozip5(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #453                // InterfaceMethod scalaz/Cozip.cozip5$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public scalaz.$bslash$div cozip6(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #457                // InterfaceMethod scalaz/Cozip.cozip6$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public scalaz.$bslash$div cozip7(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #461                // InterfaceMethod scalaz/Cozip.cozip7$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public java.lang.Object forever(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #466                // InterfaceMethod scalaz/BindRec.forever$:(Lscalaz/BindRec;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <G> scalaz.BindRec<?> product(scalaz.BindRec<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #471                // InterfaceMethod scalaz/BindRec.product$:(Lscalaz/BindRec;Lscalaz/BindRec;)Lscalaz/BindRec;
       5: areturn

  public scalaz.BindRec<scalaz.Maybe>.BindRecLaw bindRecLaw();
    Code:
       0: aload_0
       1: invokestatic  #479                // InterfaceMethod scalaz/BindRec.bindRecLaw$:(Lscalaz/BindRec;)Lscalaz/BindRec$BindRecLaw;
       4: areturn

  public java.lang.Object optional(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #484                // InterfaceMethod scalaz/Alt.optional$:(Lscalaz/Alt;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object altly1(scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #490                // InterfaceMethod scalaz/Alt.altly1$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object altly3(scala.Function0, scala.Function0, scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #497                // InterfaceMethod scalaz/Alt.altly3$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object altly4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #504                // InterfaceMethod scalaz/Alt.altly4$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object either2(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #509                // InterfaceMethod scalaz/Alt.either2$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object altlying1(scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #515                // InterfaceMethod scalaz/Alt.altlying1$:(Lscalaz/Alt;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object altlying2(scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #521                // InterfaceMethod scalaz/Alt.altlying2$:(Lscalaz/Alt;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object altlying3(scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #527                // InterfaceMethod scalaz/Alt.altlying3$:(Lscalaz/Alt;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object altlying4(scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #533                // InterfaceMethod scalaz/Alt.altlying4$:(Lscalaz/Alt;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object xcoproduct1(scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #540                // InterfaceMethod scalaz/Alt.xcoproduct1$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object xcoproduct2(scala.Function0, scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #546                // InterfaceMethod scalaz/Alt.xcoproduct2$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object xcoproduct3(scala.Function0, scala.Function0, scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #552                // InterfaceMethod scalaz/Alt.xcoproduct3$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object xcoproduct4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #558                // InterfaceMethod scalaz/Alt.xcoproduct4$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
      13: areturn

  public scalaz.Alt<scalaz.Maybe>.AltLaw altLaw();
    Code:
       0: aload_0
       1: invokestatic  #565                // InterfaceMethod scalaz/Alt.altLaw$:(Lscalaz/Alt;)Lscalaz/Alt$AltLaw;
       4: areturn

  public final java.lang.Object xcoderiving1(scala.Function1, scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #573                // InterfaceMethod scalaz/InvariantAlt.xcoderiving1$:(Lscalaz/InvariantAlt;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object xcoderiving2(scala.Function1, scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #579                // InterfaceMethod scalaz/InvariantAlt.xcoderiving2$:(Lscalaz/InvariantAlt;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object xcoderiving3(scala.Function1, scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #585                // InterfaceMethod scalaz/InvariantAlt.xcoderiving3$:(Lscalaz/InvariantAlt;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public final java.lang.Object xcoderiving4(scala.Function1, scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #591                // InterfaceMethod scalaz/InvariantAlt.xcoderiving4$:(Lscalaz/InvariantAlt;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object unite(java.lang.Object, scalaz.Foldable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #599                // InterfaceMethod scalaz/MonadPlus.unite$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Foldable;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object lefts(java.lang.Object, scalaz.Bifoldable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #607                // InterfaceMethod scalaz/MonadPlus.lefts$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Bifoldable;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object rights(java.lang.Object, scalaz.Bifoldable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #612                // InterfaceMethod scalaz/MonadPlus.rights$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Bifoldable;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 separate(java.lang.Object, scalaz.Bifoldable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #618                // InterfaceMethod scalaz/MonadPlus.separate$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Bifoldable;)Lscala/Tuple2;
       6: areturn

  public final java.lang.Object uniteU(java.lang.Object, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #624                // InterfaceMethod scalaz/MonadPlus.uniteU$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.MonadPlus<?> product(scalaz.MonadPlus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #630                // InterfaceMethod scalaz/MonadPlus.product$:(Lscalaz/MonadPlus;Lscalaz/MonadPlus;)Lscalaz/MonadPlus;
       5: areturn

  public scalaz.MonadPlus<scalaz.Maybe>.MonadPlusLaw monadPlusLaw();
    Code:
       0: aload_0
       1: invokestatic  #638                // InterfaceMethod scalaz/MonadPlus.monadPlusLaw$:(Lscalaz/MonadPlus;)Lscalaz/MonadPlus$MonadPlusLaw;
       4: areturn

  public scalaz.MonadPlus<scalaz.Maybe>.StrongMonadPlusLaw strongMonadPlusLaw();
    Code:
       0: aload_0
       1: invokestatic  #645                // InterfaceMethod scalaz/MonadPlus.strongMonadPlusLaw$:(Lscalaz/MonadPlus;)Lscalaz/MonadPlus$StrongMonadPlusLaw;
       4: areturn

  public <G> scalaz.ApplicativePlus<?> compose(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #652                // InterfaceMethod scalaz/ApplicativePlus.compose$:(Lscalaz/ApplicativePlus;Lscalaz/Applicative;)Lscalaz/ApplicativePlus;
       5: areturn

  public <G> scalaz.ApplicativePlus<?> product(scalaz.ApplicativePlus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #658                // InterfaceMethod scalaz/ApplicativePlus.product$:(Lscalaz/ApplicativePlus;Lscalaz/ApplicativePlus;)Lscalaz/ApplicativePlus;
       5: areturn

  public java.lang.Object unfoldlPsum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #665                // InterfaceMethod scalaz/PlusEmpty.unfoldlPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object unfoldrPsum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #669                // InterfaceMethod scalaz/PlusEmpty.unfoldrPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.PlusEmpty<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #674                // InterfaceMethod scalaz/PlusEmpty.compose$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       4: areturn

  public <G> scalaz.PlusEmpty<?> product(scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #678                // InterfaceMethod scalaz/PlusEmpty.product$:(Lscalaz/PlusEmpty;Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       5: areturn

  public <A> scalaz.Monoid<scalaz.Maybe<A>> monoid();
    Code:
       0: aload_0
       1: invokestatic  #686                // InterfaceMethod scalaz/PlusEmpty.monoid$:(Lscalaz/PlusEmpty;)Lscalaz/Monoid;
       4: areturn

  public scalaz.PlusEmpty<scalaz.Maybe>.EmptyLaw plusEmptyLaw();
    Code:
       0: aload_0
       1: invokestatic  #693                // InterfaceMethod scalaz/PlusEmpty.plusEmptyLaw$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty$EmptyLaw;
       4: areturn

  public <S$, A> scalaz.Maybe<scalaz.Maybe<A>> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, scalaz.Maybe<A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #700                // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #705                // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<scalaz.Maybe<A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #713                // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<scalaz.Maybe>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #720                // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public java.lang.Object whileM(java.lang.Object, scala.Function0, scalaz.MonadPlus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #728                // InterfaceMethod scalaz/Monad.whileM$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;Lscalaz/MonadPlus;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object whileM_(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #733                // InterfaceMethod scalaz/Monad.whileM_$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object untilM(java.lang.Object, scala.Function0, scalaz.MonadPlus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #738                // InterfaceMethod scalaz/Monad.untilM$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;Lscalaz/MonadPlus;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object untilM_(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #742                // InterfaceMethod scalaz/Monad.untilM_$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object iterateWhile(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #747                // InterfaceMethod scalaz/Monad.iterateWhile$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object iterateUntil(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #751                // InterfaceMethod scalaz/Monad.iterateUntil$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G$> scalaz.Monad<?> product(scalaz.Monad<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #756                // InterfaceMethod scalaz/Monad.product$:(Lscalaz/Monad;Lscalaz/Monad;)Lscalaz/Monad;
       5: areturn

  public scalaz.Monad<scalaz.Maybe>.MonadLaw monadLaw();
    Code:
       0: aload_0
       1: invokestatic  #764                // InterfaceMethod scalaz/Monad.monadLaw$:(Lscalaz/Monad;)Lscalaz/Monad$MonadLaw;
       4: areturn

  public java.lang.Object join(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #770                // InterfaceMethod scalaz/Bind.join$:(Lscalaz/Bind;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object ifM(java.lang.Object, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #777                // InterfaceMethod scalaz/Bind.ifM$:(Lscalaz/Bind;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object mproduct(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #782                // InterfaceMethod scalaz/Bind.mproduct$:(Lscalaz/Bind;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G$> scalaz.Bind<?> product(scalaz.Bind<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #787                // InterfaceMethod scalaz/Bind.product$:(Lscalaz/Bind;Lscalaz/Bind;)Lscalaz/Bind;
       5: areturn

  public scalaz.Bind<scalaz.Maybe>.BindLaw bindLaw();
    Code:
       0: aload_0
       1: invokestatic  #795                // InterfaceMethod scalaz/Bind.bindLaw$:(Lscalaz/Bind;)Lscalaz/Bind$BindLaw;
       4: areturn

  public final java.lang.Object pure(scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #801                // InterfaceMethod scalaz/Applicative.pure$:(Lscalaz/Applicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object traverse(java.lang.Object, scala.Function1, scalaz.Traverse);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #807                // InterfaceMethod scalaz/Applicative.traverse$:(Lscalaz/Applicative;Ljava/lang/Object;Lscala/Function1;Lscalaz/Traverse;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object sequence(java.lang.Object, scalaz.Traverse);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #816                // InterfaceMethod scalaz/Applicative.sequence$:(Lscalaz/Applicative;Ljava/lang/Object;Lscalaz/Traverse;)Ljava/lang/Object;
       6: areturn

  public scalaz.Applicative<?> par();
    Code:
       0: aload_0
       1: invokestatic  #823                // InterfaceMethod scalaz/Applicative.par$:(Lscalaz/Applicative;)Lscalaz/Applicative;
       4: areturn

  public java.lang.Object xproduct0(scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #828                // InterfaceMethod scalaz/Applicative.xproduct0$:(Lscalaz/Applicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object xproduct1(scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #833                // InterfaceMethod scalaz/Applicative.xproduct1$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object xproduct2(scala.Function0, scala.Function0, scala.Function2, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #839                // InterfaceMethod scalaz/Applicative.xproduct2$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscala/Function2;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object xproduct3(scala.Function0, scala.Function0, scala.Function0, scala.Function3, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #845                // InterfaceMethod scalaz/Applicative.xproduct3$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function3;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object xproduct4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function4, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #852                // InterfaceMethod scalaz/Applicative.xproduct4$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function4;Lscala/Function1;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object replicateM(int, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #860                // InterfaceMethod scalaz/Applicative.replicateM$:(Lscalaz/Applicative;ILjava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object replicateM_(int, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #865                // InterfaceMethod scalaz/Applicative.replicateM_$:(Lscalaz/Applicative;ILjava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object filterM(scalaz.$eq$eq$greater$greater, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #873                // InterfaceMethod scalaz/Applicative.filterM$:(Lscalaz/Applicative;Lscalaz/$eq$eq$greater$greater;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object filterM(scala.collection.immutable.List, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #880                // InterfaceMethod scalaz/Applicative.filterM$:(Lscalaz/Applicative;Lscala/collection/immutable/List;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object filterM(scalaz.IList, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #885                // InterfaceMethod scalaz/Applicative.filterM$:(Lscalaz/Applicative;Lscalaz/IList;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object unlessM(boolean, scala.Function0);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #892                // InterfaceMethod scalaz/Applicative.unlessM$:(Lscalaz/Applicative;ZLscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object whenM(boolean, scala.Function0);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #897                // InterfaceMethod scalaz/Applicative.whenM$:(Lscalaz/Applicative;ZLscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <G$> scalaz.Applicative<?> product(scalaz.Applicative<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #901                // InterfaceMethod scalaz/Applicative.product$:(Lscalaz/Applicative;Lscalaz/Applicative;)Lscalaz/Applicative;
       5: areturn

  public scalaz.Applicative<scalaz.Maybe> flip();
    Code:
       0: aload_0
       1: invokestatic  #906                // InterfaceMethod scalaz/Applicative.flip$:(Lscalaz/Applicative;)Lscalaz/Applicative;
       4: areturn

  public java.lang.Object plusA(scala.Function0, scala.Function0, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #914                // InterfaceMethod scalaz/Applicative.plusA$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public scalaz.Applicative<scalaz.Maybe>.ApplicativeLaw applicativeLaw();
    Code:
       0: aload_0
       1: invokestatic  #921                // InterfaceMethod scalaz/Applicative.applicativeLaw$:(Lscalaz/Applicative;)Lscalaz/Applicative$ApplicativeLaw;
       4: areturn

  public final java.lang.Object xderiving0(scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #928                // InterfaceMethod scalaz/InvariantApplicative.xderiving0$:(Lscalaz/InvariantApplicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public final java.lang.Object xderiving1(scala.Function1, scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #933                // InterfaceMethod scalaz/InvariantApplicative.xderiving1$:(Lscalaz/InvariantApplicative;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object xderiving2(scala.Function2, scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #939                // InterfaceMethod scalaz/InvariantApplicative.xderiving2$:(Lscalaz/InvariantApplicative;Lscala/Function2;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object xderiving3(scala.Function3, scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #945                // InterfaceMethod scalaz/InvariantApplicative.xderiving3$:(Lscalaz/InvariantApplicative;Lscala/Function3;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public final java.lang.Object xderiving4(scala.Function4, scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #951                // InterfaceMethod scalaz/InvariantApplicative.xderiving4$:(Lscalaz/InvariantApplicative;Lscala/Function4;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object traverse1(java.lang.Object, scala.Function1, scalaz.Traverse1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #957                // InterfaceMethod scalaz/Apply.traverse1$:(Lscalaz/Apply;Ljava/lang/Object;Lscala/Function1;Lscalaz/Traverse1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object sequence1(java.lang.Object, scalaz.Traverse1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #964                // InterfaceMethod scalaz/Apply.sequence1$:(Lscalaz/Apply;Ljava/lang/Object;Lscalaz/Traverse1;)Ljava/lang/Object;
       6: areturn

  public <G$> scalaz.Apply<?> compose(scalaz.Apply<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #969                // InterfaceMethod scalaz/Apply.compose$:(Lscalaz/Apply;Lscalaz/Apply;)Lscalaz/Apply;
       5: areturn

  public <G$> scalaz.Apply<?> product(scalaz.Apply<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #972                // InterfaceMethod scalaz/Apply.product$:(Lscalaz/Apply;Lscalaz/Apply;)Lscalaz/Apply;
       5: areturn

  public <A, B> scala.Function1<scalaz.Maybe<A>, scalaz.Maybe<B>> apF(scala.Function0<scalaz.Maybe<scala.Function1<A, B>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #979                // InterfaceMethod scalaz/Apply.apF$:(Lscalaz/Apply;Lscala/Function0;)Lscala/Function1;
       5: areturn

  public java.lang.Object ap2(scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #985                // InterfaceMethod scalaz/Apply.ap2$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object ap3(scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #992                // InterfaceMethod scalaz/Apply.ap3$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object ap4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #999                // InterfaceMethod scalaz/Apply.ap4$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object ap5(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #1006               // InterfaceMethod scalaz/Apply.ap5$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object ap6(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #1013               // InterfaceMethod scalaz/Apply.ap6$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      15: areturn

  public java.lang.Object ap7(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #1020               // InterfaceMethod scalaz/Apply.ap7$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      17: areturn

  public java.lang.Object ap8(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: invokestatic  #1027               // InterfaceMethod scalaz/Apply.ap8$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      19: areturn

  public java.lang.Object apply3(scala.Function0, scala.Function0, scala.Function0, scala.Function3);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1033               // InterfaceMethod scalaz/Apply.apply3$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function3;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object apply4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function4);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #1039               // InterfaceMethod scalaz/Apply.apply4$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function4;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object apply5(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function5);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #1045               // InterfaceMethod scalaz/Apply.apply5$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function5;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object apply6(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function6);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #1052               // InterfaceMethod scalaz/Apply.apply6$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function6;)Ljava/lang/Object;
      15: areturn

  public java.lang.Object apply7(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function7);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #1059               // InterfaceMethod scalaz/Apply.apply7$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function7;)Ljava/lang/Object;
      17: areturn

  public java.lang.Object apply8(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function8);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: invokestatic  #1066               // InterfaceMethod scalaz/Apply.apply8$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function8;)Ljava/lang/Object;
      19: areturn

  public java.lang.Object apply9(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function9);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: invokestatic  #1074               // InterfaceMethod scalaz/Apply.apply9$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function9;)Ljava/lang/Object;
      21: areturn

  public java.lang.Object apply10(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function10);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: invokestatic  #1082               // InterfaceMethod scalaz/Apply.apply10$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function10;)Ljava/lang/Object;
      23: areturn

  public java.lang.Object apply11(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function11);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: aload         12
      22: invokestatic  #1090               // InterfaceMethod scalaz/Apply.apply11$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function11;)Ljava/lang/Object;
      25: areturn

  public java.lang.Object apply12(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function12);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: aload         12
      22: aload         13
      24: invokestatic  #1098               // InterfaceMethod scalaz/Apply.apply12$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function12;)Ljava/lang/Object;
      27: areturn

  public final java.lang.Object applying1(scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1104               // InterfaceMethod scalaz/Apply.applying1$:(Lscalaz/Apply;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object applying2(scala.Function2, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1110               // InterfaceMethod scalaz/Apply.applying2$:(Lscalaz/Apply;Lscala/Function2;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object applying3(scala.Function3, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1116               // InterfaceMethod scalaz/Apply.applying3$:(Lscalaz/Apply;Lscala/Function3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object applying4(scala.Function4, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #1122               // InterfaceMethod scalaz/Apply.applying4$:(Lscalaz/Apply;Lscala/Function4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object tuple2(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1127               // InterfaceMethod scalaz/Apply.tuple2$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object tuple3(scala.Function0, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1133               // InterfaceMethod scalaz/Apply.tuple3$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object tuple4(scala.Function0, scala.Function0, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1139               // InterfaceMethod scalaz/Apply.tuple4$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object tuple5(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #1145               // InterfaceMethod scalaz/Apply.tuple5$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
      11: areturn

  public <A, B, C> scala.Function2<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>> lift2(scala.Function2<A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1151               // InterfaceMethod scalaz/Apply.lift2$:(Lscalaz/Apply;Lscala/Function2;)Lscala/Function2;
       5: areturn

  public <A, B, C, D> scala.Function3<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>> lift3(scala.Function3<A, B, C, D>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1158               // InterfaceMethod scalaz/Apply.lift3$:(Lscalaz/Apply;Lscala/Function3;)Lscala/Function3;
       5: areturn

  public <A, B, C, D, E> scala.Function4<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>> lift4(scala.Function4<A, B, C, D, E>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1165               // InterfaceMethod scalaz/Apply.lift4$:(Lscalaz/Apply;Lscala/Function4;)Lscala/Function4;
       5: areturn

  public <A, B, C, D, E, R$> scala.Function5<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<R$>> lift5(scala.Function5<A, B, C, D, E, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1172               // InterfaceMethod scalaz/Apply.lift5$:(Lscalaz/Apply;Lscala/Function5;)Lscala/Function5;
       5: areturn

  public <A, B, C, D, E, FF, R$> scala.Function6<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<R$>> lift6(scala.Function6<A, B, C, D, E, FF, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1179               // InterfaceMethod scalaz/Apply.lift6$:(Lscalaz/Apply;Lscala/Function6;)Lscala/Function6;
       5: areturn

  public <A, B, C, D, E, FF, G$, R$> scala.Function7<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G$>, scalaz.Maybe<R$>> lift7(scala.Function7<A, B, C, D, E, FF, G$, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1186               // InterfaceMethod scalaz/Apply.lift7$:(Lscalaz/Apply;Lscala/Function7;)Lscala/Function7;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, R$> scala.Function8<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G$>, scalaz.Maybe<H>, scalaz.Maybe<R$>> lift8(scala.Function8<A, B, C, D, E, FF, G$, H, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1193               // InterfaceMethod scalaz/Apply.lift8$:(Lscalaz/Apply;Lscala/Function8;)Lscala/Function8;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, I, R$> scala.Function9<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G$>, scalaz.Maybe<H>, scalaz.Maybe<I>, scalaz.Maybe<R$>> lift9(scala.Function9<A, B, C, D, E, FF, G$, H, I, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1200               // InterfaceMethod scalaz/Apply.lift9$:(Lscalaz/Apply;Lscala/Function9;)Lscala/Function9;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, I, J, R$> scala.Function10<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G$>, scalaz.Maybe<H>, scalaz.Maybe<I>, scalaz.Maybe<J>, scalaz.Maybe<R$>> lift10(scala.Function10<A, B, C, D, E, FF, G$, H, I, J, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1207               // InterfaceMethod scalaz/Apply.lift10$:(Lscalaz/Apply;Lscala/Function10;)Lscala/Function10;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, I, J, K, R$> scala.Function11<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G$>, scalaz.Maybe<H>, scalaz.Maybe<I>, scalaz.Maybe<J>, scalaz.Maybe<K>, scalaz.Maybe<R$>> lift11(scala.Function11<A, B, C, D, E, FF, G$, H, I, J, K, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1214               // InterfaceMethod scalaz/Apply.lift11$:(Lscalaz/Apply;Lscala/Function11;)Lscala/Function11;
       5: areturn

  public <A, B, C, D, E, FF, G$, H, I, J, K, L, R$> scala.Function12<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G$>, scalaz.Maybe<H>, scalaz.Maybe<I>, scalaz.Maybe<J>, scalaz.Maybe<K>, scalaz.Maybe<L>, scalaz.Maybe<R$>> lift12(scala.Function12<A, B, C, D, E, FF, G$, H, I, J, K, L, R$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1221               // InterfaceMethod scalaz/Apply.lift12$:(Lscalaz/Apply;Lscala/Function12;)Lscala/Function12;
       5: areturn

  public java.lang.Object discardLeft(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1225               // InterfaceMethod scalaz/Apply.discardLeft$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object discardRight(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1229               // InterfaceMethod scalaz/Apply.discardRight$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public scalaz.Applicative<?> applyApplicative();
    Code:
       0: aload_0
       1: invokestatic  #1234               // InterfaceMethod scalaz/Apply.applyApplicative$:(Lscalaz/Apply;)Lscalaz/Applicative;
       4: areturn

  public <A, B> scalaz.Reducer<scalaz.Maybe<A>, scalaz.Maybe<B>> liftReducer(scalaz.Reducer<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1242               // InterfaceMethod scalaz/Apply.liftReducer$:(Lscalaz/Apply;Lscalaz/Reducer;)Lscalaz/Reducer;
       5: areturn

  public scalaz.Apply<scalaz.Maybe>.ApplyLaw applyLaw();
    Code:
       0: aload_0
       1: invokestatic  #1250               // InterfaceMethod scalaz/Apply.applyLaw$:(Lscalaz/Apply;)Lscalaz/Apply$ApplyLaw;
       4: areturn

  public <G> scalaz.Traverse<?> compose(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1255               // InterfaceMethod scalaz/Traverse.compose$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Bitraverse<?> bicompose(scalaz.Bitraverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1263               // InterfaceMethod scalaz/Traverse.bicompose$:(Lscalaz/Traverse;Lscalaz/Bitraverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G> scalaz.Traverse<?> product(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1266               // InterfaceMethod scalaz/Traverse.product$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Traverse1<?> product0(scalaz.Traverse1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1273               // InterfaceMethod scalaz/Traverse.product0$:(Lscalaz/Traverse;Lscalaz/Traverse1;)Lscalaz/Traverse1;
       5: areturn

  public <G> scalaz.Traverse<scalaz.Maybe>.Traversal<G> traversal(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1281               // InterfaceMethod scalaz/Traverse.traversal$:(Lscalaz/Traverse;Lscalaz/Applicative;)Lscalaz/Traverse$Traversal;
       5: areturn

  public <S> scalaz.Traverse<scalaz.Maybe>.Traversal<?> traversalS();
    Code:
       0: aload_0
       1: invokestatic  #1288               // InterfaceMethod scalaz/Traverse.traversalS$:(Lscalaz/Traverse;)Lscalaz/Traverse$Traversal;
       4: areturn

  public java.lang.Object traverse(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1293               // InterfaceMethod scalaz/Traverse.traverse$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverseU(java.lang.Object, scala.Function1, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1299               // InterfaceMethod scalaz/Traverse.traverseU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverseM(java.lang.Object, scala.Function1, scalaz.Applicative, scalaz.Bind);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1305               // InterfaceMethod scalaz/Traverse.traverseM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       9: areturn

  public scalaz.IndexedStateT traverseS(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1311               // InterfaceMethod scalaz/Traverse.traverseS$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public scala.Tuple2 runTraverseS(java.lang.Object, java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1318               // InterfaceMethod scalaz/Traverse.runTraverseS$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Lscala/Tuple2;
       7: areturn

  public scalaz.IndexedStateT traverseSTrampoline(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1325               // InterfaceMethod scalaz/Traverse.traverseSTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/IndexedStateT;
       7: areturn

  public scalaz.Kleisli traverseKTrampoline(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1332               // InterfaceMethod scalaz/Traverse.traverseKTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/Kleisli;
       7: areturn

  public java.lang.Object sequence(java.lang.Object, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1338               // InterfaceMethod scalaz/Traverse.sequence$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public scalaz.IndexedStateT sequenceS(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1344               // InterfaceMethod scalaz/Traverse.sequenceS$:(Lscalaz/Traverse;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public final java.lang.Object sequenceU(java.lang.Object, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1350               // InterfaceMethod scalaz/Traverse.sequenceU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object sequenceM(java.lang.Object, scalaz.Applicative, scalaz.Bind);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1357               // InterfaceMethod scalaz/Traverse.sequenceM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       7: areturn

  public scala.Tuple2 foldLShape(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1363               // InterfaceMethod scalaz/Traverse.foldLShape$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public java.lang.Object foldLeft(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1369               // InterfaceMethod scalaz/Traverse.foldLeft$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object foldMap(java.lang.Object, scala.Function1, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1375               // InterfaceMethod scalaz/Traverse.foldMap$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object reverse(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1380               // InterfaceMethod scalaz/Traverse.reverse$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public scala.Tuple2 zipWith(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1382               // InterfaceMethod scalaz/Traverse.zipWith$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public java.lang.Object zipWithL(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1386               // InterfaceMethod scalaz/Traverse.zipWithL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object zipWithR(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1390               // InterfaceMethod scalaz/Traverse.zipWithR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object indexed(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1394               // InterfaceMethod scalaz/Traverse.indexed$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object zipL(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1399               // InterfaceMethod scalaz/Traverse.zipL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object zipR(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1403               // InterfaceMethod scalaz/Traverse.zipR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 mapAccumL(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1407               // InterfaceMethod scalaz/Traverse.mapAccumL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public scala.Tuple2 mapAccumR(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1411               // InterfaceMethod scalaz/Traverse.mapAccumR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public scalaz.Traverse<scalaz.Maybe>.TraverseLaw traverseLaw();
    Code:
       0: aload_0
       1: invokestatic  #1418               // InterfaceMethod scalaz/Traverse.traverseLaw$:(Lscalaz/Traverse;)Lscalaz/Traverse$TraverseLaw;
       4: areturn

  public scala.Option foldMap1Opt(java.lang.Object, scala.Function1, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1424               // InterfaceMethod scalaz/Foldable.foldMap1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Semigroup;)Lscala/Option;
       7: areturn

  public <G> scalaz.Foldable<?> compose(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1429               // InterfaceMethod scalaz/Foldable.compose$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Bifoldable<?> bicompose(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1434               // InterfaceMethod scalaz/Foldable.bicompose$:(Lscalaz/Foldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public <G> scalaz.Foldable<?> product(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1436               // InterfaceMethod scalaz/Foldable.product$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Foldable1<?> product0(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1441               // InterfaceMethod scalaz/Foldable.product0$:(Lscalaz/Foldable;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public java.lang.Object foldRightM(java.lang.Object, scala.Function0, scala.Function2, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1448               // InterfaceMethod scalaz/Foldable.foldRightM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object foldLeftM(java.lang.Object, java.lang.Object, scala.Function2, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1454               // InterfaceMethod scalaz/Foldable.foldLeftM$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object foldMapM(java.lang.Object, scala.Function1, scalaz.Monoid, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1461               // InterfaceMethod scalaz/Foldable.foldMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object fold(java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1468               // InterfaceMethod scalaz/Foldable.fold$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public scala.Option fold1Opt(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1474               // InterfaceMethod scalaz/Foldable.fold1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public java.lang.Object traverse_(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1479               // InterfaceMethod scalaz/Foldable.traverse_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverseU_(java.lang.Object, scala.Function1, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1484               // InterfaceMethod scalaz/Foldable.traverseU_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public scalaz.IndexedStateT traverseS_(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1489               // InterfaceMethod scalaz/Foldable.traverseS_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public java.lang.Object sequence_(java.lang.Object, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1494               // InterfaceMethod scalaz/Foldable.sequence_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public scalaz.IndexedStateT sequenceS_(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1499               // InterfaceMethod scalaz/Foldable.sequenceS_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public scalaz.Free sequenceF_(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1505               // InterfaceMethod scalaz/Foldable.sequenceF_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/Free;
       5: areturn

  public final java.lang.Object foldr(java.lang.Object, scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1511               // InterfaceMethod scalaz/Foldable.foldr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scala.Option foldMapRight1Opt(java.lang.Object, scala.Function1, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1517               // InterfaceMethod scalaz/Foldable.foldMapRight1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public scala.Option foldRight1Opt(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1523               // InterfaceMethod scalaz/Foldable.foldRight1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public scala.Option foldr1Opt(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1529               // InterfaceMethod scalaz/Foldable.foldr1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final java.lang.Object foldl(java.lang.Object, java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1535               // InterfaceMethod scalaz/Foldable.foldl$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scala.Option foldMapLeft1Opt(java.lang.Object, scala.Function1, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1539               // InterfaceMethod scalaz/Foldable.foldMapLeft1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public scala.Option foldLeft1Opt(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1543               // InterfaceMethod scalaz/Foldable.foldLeft1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public scala.Option foldl1Opt(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1547               // InterfaceMethod scalaz/Foldable.foldl1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final java.lang.Object foldrM(java.lang.Object, scala.Function0, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1553               // InterfaceMethod scalaz/Foldable.foldrM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object foldlM(java.lang.Object, scala.Function0, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1557               // InterfaceMethod scalaz/Foldable.foldlM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object findMapM(java.lang.Object, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1563               // InterfaceMethod scalaz/Foldable.findMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public scala.Option findLeft(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1567               // InterfaceMethod scalaz/Foldable.findLeft$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public scala.Option findRight(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1571               // InterfaceMethod scalaz/Foldable.findRight$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final int count(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1577               // InterfaceMethod scalaz/Foldable.count$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public int length(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1581               // InterfaceMethod scalaz/Foldable.length$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public scala.Option index(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #1588               // InterfaceMethod scalaz/Foldable.index$:(Lscalaz/Foldable;Ljava/lang/Object;I)Lscala/Option;
       6: areturn

  public java.lang.Object indexOr(java.lang.Object, scala.Function0, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #1594               // InterfaceMethod scalaz/Foldable.indexOr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;I)Ljava/lang/Object;
       7: areturn

  public scala.collection.immutable.List toList(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1600               // InterfaceMethod scalaz/Foldable.toList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/List;
       5: areturn

  public scala.collection.immutable.Vector toVector(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1606               // InterfaceMethod scalaz/Foldable.toVector$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Vector;
       5: areturn

  public scala.collection.immutable.Set toSet(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1612               // InterfaceMethod scalaz/Foldable.toSet$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Set;
       5: areturn

  public scala.collection.immutable.Stream toStream(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1618               // InterfaceMethod scalaz/Foldable.toStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Stream;
       5: areturn

  public scala.collection.immutable.LazyList toLazyList(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1624               // InterfaceMethod scalaz/Foldable.toLazyList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/LazyList;
       5: areturn

  public scalaz.IList toIList(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1630               // InterfaceMethod scalaz/Foldable.toIList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IList;
       5: areturn

  public scalaz.EphemeralStream toEphemeralStream(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1636               // InterfaceMethod scalaz/Foldable.toEphemeralStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/EphemeralStream;
       5: areturn

  public boolean all(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1642               // InterfaceMethod scalaz/Foldable.all$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public java.lang.Object allM(java.lang.Object, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1646               // InterfaceMethod scalaz/Foldable.allM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public boolean any(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1650               // InterfaceMethod scalaz/Foldable.any$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public java.lang.Object anyM(java.lang.Object, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1654               // InterfaceMethod scalaz/Foldable.anyM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public int filterLength(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1660               // InterfaceMethod scalaz/Foldable.filterLength$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)I
       6: ireturn

  public scala.Option maximum(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1666               // InterfaceMethod scalaz/Foldable.maximum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public scala.Option maximumOf(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1672               // InterfaceMethod scalaz/Foldable.maximumOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option maximumBy(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1676               // InterfaceMethod scalaz/Foldable.maximumBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option minimum(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1681               // InterfaceMethod scalaz/Foldable.minimum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public scala.Option minimumOf(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1686               // InterfaceMethod scalaz/Foldable.minimumOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option minimumBy(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1691               // InterfaceMethod scalaz/Foldable.minimumBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option extrema(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1696               // InterfaceMethod scalaz/Foldable.extrema$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public scala.Option extremaOf(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1701               // InterfaceMethod scalaz/Foldable.extremaOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option extremaBy(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1706               // InterfaceMethod scalaz/Foldable.extremaBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public java.lang.Object sumr(java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1711               // InterfaceMethod scalaz/Foldable.sumr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public scala.Option sumr1Opt(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1715               // InterfaceMethod scalaz/Foldable.sumr1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public java.lang.Object suml(java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1719               // InterfaceMethod scalaz/Foldable.suml$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public scala.Option suml1Opt(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1723               // InterfaceMethod scalaz/Foldable.suml1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public java.lang.Object psumMap(java.lang.Object, scala.Function1, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1729               // InterfaceMethod scalaz/Foldable.psumMap$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object psum(java.lang.Object, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1735               // InterfaceMethod scalaz/Foldable.psum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object asum(java.lang.Object, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1739               // InterfaceMethod scalaz/Foldable.asum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public long longDigits(java.lang.Object, scala.$less$colon$less);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1746               // InterfaceMethod scalaz/Foldable.longDigits$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/$less$colon$less;)J
       6: lreturn

  public boolean empty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1752               // InterfaceMethod scalaz/Foldable.empty$:(Lscalaz/Foldable;Ljava/lang/Object;)Z
       5: ireturn

  public boolean element(java.lang.Object, java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1759               // InterfaceMethod scalaz/Foldable.element$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Equal;)Z
       7: ireturn

  public java.lang.Object intercalate(java.lang.Object, java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1766               // InterfaceMethod scalaz/Foldable.intercalate$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public scala.collection.immutable.List splitWith(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1772               // InterfaceMethod scalaz/Foldable.splitWith$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public scalaz.IList splitBy(java.lang.Object, scala.Function1, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1779               // InterfaceMethod scalaz/Foldable.splitBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public scalaz.IList splitByRelation(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1785               // InterfaceMethod scalaz/Foldable.splitByRelation$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscalaz/IList;
       6: areturn

  public scala.collection.immutable.List selectSplit(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1789               // InterfaceMethod scalaz/Foldable.selectSplit$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public scalaz.IList distinct(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1795               // InterfaceMethod scalaz/Foldable.distinct$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscalaz/IList;
       6: areturn

  public scalaz.IList distinctE(java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1801               // InterfaceMethod scalaz/Foldable.distinctE$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Equal;)Lscalaz/IList;
       6: areturn

  public scalaz.IList distinctBy(java.lang.Object, scala.Function1, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1806               // InterfaceMethod scalaz/Foldable.distinctBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public java.lang.Object collapse(java.lang.Object, scalaz.ApplicativePlus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1812               // InterfaceMethod scalaz/Foldable.collapse$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/ApplicativePlus;)Ljava/lang/Object;
       6: areturn

  public scalaz.Foldable<scalaz.Maybe>.FoldableLaw foldableLaw();
    Code:
       0: aload_0
       1: invokestatic  #1819               // InterfaceMethod scalaz/Foldable.foldableLaw$:(Lscalaz/Foldable;)Lscalaz/Foldable$FoldableLaw;
       4: areturn

  public java.lang.Object xmap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1825               // InterfaceMethod scalaz/Functor.xmap$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object apply(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1830               // InterfaceMethod scalaz/Functor.apply$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Function1<scalaz.Maybe<A>, scalaz.Maybe<B>> lift(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1837               // InterfaceMethod scalaz/Functor.lift$:(Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public java.lang.Object strengthL(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1842               // InterfaceMethod scalaz/Functor.strengthL$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object strengthR(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1846               // InterfaceMethod scalaz/Functor.strengthR$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object mapply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1850               // InterfaceMethod scalaz/Functor.mapply$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object fpair(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1855               // InterfaceMethod scalaz/Functor.fpair$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object fproduct(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1859               // InterfaceMethod scalaz/Functor.fproduct$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object void(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1863               // InterfaceMethod scalaz/Functor.void$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object counzip(scalaz.$bslash$div);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1869               // InterfaceMethod scalaz/Functor.counzip$:(Lscalaz/Functor;Lscalaz/$bslash$div;)Ljava/lang/Object;
       5: areturn

  public <G$> scalaz.Functor<?> compose(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1875               // InterfaceMethod scalaz/Functor.compose$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <G$> scalaz.Contravariant<?> icompose(scalaz.Contravariant<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1882               // InterfaceMethod scalaz/Functor.icompose$:(Lscalaz/Functor;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public <G$> scalaz.Bifunctor<?> bicompose(scalaz.Bifunctor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1888               // InterfaceMethod scalaz/Functor.bicompose$:(Lscalaz/Functor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G$> scalaz.Functor<?> product(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1891               // InterfaceMethod scalaz/Functor.product$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public java.lang.Object widen(java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1898               // InterfaceMethod scalaz/Functor.widen$:(Lscalaz/Functor;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public scalaz.Functor<scalaz.Maybe>.FunctorLaw functorLaw();
    Code:
       0: aload_0
       1: invokestatic  #1906               // InterfaceMethod scalaz/Functor.functorLaw$:(Lscalaz/Functor;)Lscalaz/Functor$FunctorLaw;
       4: areturn

  public java.lang.Object xmapb(java.lang.Object, scalaz.BijectionT);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1913               // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmapi(java.lang.Object, scalaz.Isomorphisms$Iso);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1921               // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<scalaz.Maybe>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #1929               // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.OptionalSyntax<scalaz.Maybe> optionalSyntax();
    Code:
       0: aload_0
       1: getfield      #1933               // Field optionalSyntax:Lscalaz/syntax/OptionalSyntax;
       4: areturn

  public void scalaz$Optional$_setter_$optionalSyntax_$eq(scalaz.syntax.OptionalSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1933               // Field optionalSyntax:Lscalaz/syntax/OptionalSyntax;
       5: return

  public scalaz.syntax.CobindSyntax<scalaz.Maybe> cobindSyntax();
    Code:
       0: aload_0
       1: getfield      #1941               // Field cobindSyntax:Lscalaz/syntax/CobindSyntax;
       4: areturn

  public void scalaz$Cobind$_setter_$cobindSyntax_$eq(scalaz.syntax.CobindSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1941               // Field cobindSyntax:Lscalaz/syntax/CobindSyntax;
       5: return

  public scalaz.syntax.IsEmptySyntax<scalaz.Maybe> isEmptySyntax();
    Code:
       0: aload_0
       1: getfield      #1948               // Field isEmptySyntax:Lscalaz/syntax/IsEmptySyntax;
       4: areturn

  public void scalaz$IsEmpty$_setter_$isEmptySyntax_$eq(scalaz.syntax.IsEmptySyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1948               // Field isEmptySyntax:Lscalaz/syntax/IsEmptySyntax;
       5: return

  public scalaz.syntax.AlignSyntax<scalaz.Maybe> alignSyntax();
    Code:
       0: aload_0
       1: getfield      #1955               // Field alignSyntax:Lscalaz/syntax/AlignSyntax;
       4: areturn

  public void scalaz$Align$_setter_$alignSyntax_$eq(scalaz.syntax.AlignSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1955               // Field alignSyntax:Lscalaz/syntax/AlignSyntax;
       5: return

  public scalaz.syntax.UnzipSyntax<scalaz.Maybe> unzipSyntax();
    Code:
       0: aload_0
       1: getfield      #1962               // Field unzipSyntax:Lscalaz/syntax/UnzipSyntax;
       4: areturn

  public void scalaz$Unzip$_setter_$unzipSyntax_$eq(scalaz.syntax.UnzipSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1962               // Field unzipSyntax:Lscalaz/syntax/UnzipSyntax;
       5: return

  public scalaz.syntax.ZipSyntax<scalaz.Maybe> zipSyntax();
    Code:
       0: aload_0
       1: getfield      #1969               // Field zipSyntax:Lscalaz/syntax/ZipSyntax;
       4: areturn

  public void scalaz$Zip$_setter_$zipSyntax_$eq(scalaz.syntax.ZipSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1969               // Field zipSyntax:Lscalaz/syntax/ZipSyntax;
       5: return

  public scalaz.syntax.CozipSyntax<scalaz.Maybe> cozipSyntax();
    Code:
       0: aload_0
       1: getfield      #1976               // Field cozipSyntax:Lscalaz/syntax/CozipSyntax;
       4: areturn

  public void scalaz$Cozip$_setter_$cozipSyntax_$eq(scalaz.syntax.CozipSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1976               // Field cozipSyntax:Lscalaz/syntax/CozipSyntax;
       5: return

  public scalaz.syntax.BindRecSyntax<scalaz.Maybe> bindRecSyntax();
    Code:
       0: aload_0
       1: getfield      #1983               // Field bindRecSyntax:Lscalaz/syntax/BindRecSyntax;
       4: areturn

  public void scalaz$BindRec$_setter_$bindRecSyntax_$eq(scalaz.syntax.BindRecSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1983               // Field bindRecSyntax:Lscalaz/syntax/BindRecSyntax;
       5: return

  public scalaz.syntax.AltSyntax<scalaz.Maybe> altSyntax();
    Code:
       0: aload_0
       1: getfield      #1990               // Field altSyntax:Lscalaz/syntax/AltSyntax;
       4: areturn

  public void scalaz$Alt$_setter_$altSyntax_$eq(scalaz.syntax.AltSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1990               // Field altSyntax:Lscalaz/syntax/AltSyntax;
       5: return

  public scalaz.syntax.InvariantAltSyntax<scalaz.Maybe> invariantAltSyntax();
    Code:
       0: aload_0
       1: getfield      #1997               // Field invariantAltSyntax:Lscalaz/syntax/InvariantAltSyntax;
       4: areturn

  public void scalaz$InvariantAlt$_setter_$invariantAltSyntax_$eq(scalaz.syntax.InvariantAltSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1997               // Field invariantAltSyntax:Lscalaz/syntax/InvariantAltSyntax;
       5: return

  public scalaz.syntax.MonadPlusSyntax<scalaz.Maybe> monadPlusSyntax();
    Code:
       0: aload_0
       1: getfield      #2004               // Field monadPlusSyntax:Lscalaz/syntax/MonadPlusSyntax;
       4: areturn

  public void scalaz$MonadPlus$_setter_$monadPlusSyntax_$eq(scalaz.syntax.MonadPlusSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2004               // Field monadPlusSyntax:Lscalaz/syntax/MonadPlusSyntax;
       5: return

  public scalaz.syntax.ApplicativePlusSyntax<scalaz.Maybe> applicativePlusSyntax();
    Code:
       0: aload_0
       1: getfield      #2011               // Field applicativePlusSyntax:Lscalaz/syntax/ApplicativePlusSyntax;
       4: areturn

  public void scalaz$ApplicativePlus$_setter_$applicativePlusSyntax_$eq(scalaz.syntax.ApplicativePlusSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2011               // Field applicativePlusSyntax:Lscalaz/syntax/ApplicativePlusSyntax;
       5: return

  public scalaz.syntax.PlusEmptySyntax<scalaz.Maybe> plusEmptySyntax();
    Code:
       0: aload_0
       1: getfield      #2018               // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       4: areturn

  public void scalaz$PlusEmpty$_setter_$plusEmptySyntax_$eq(scalaz.syntax.PlusEmptySyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2018               // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       5: return

  public scalaz.syntax.PlusSyntax<scalaz.Maybe> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #2025               // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2025               // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.syntax.MonadSyntax<scalaz.Maybe> monadSyntax();
    Code:
       0: aload_0
       1: getfield      #2032               // Field monadSyntax:Lscalaz/syntax/MonadSyntax;
       4: areturn

  public void scalaz$Monad$_setter_$monadSyntax_$eq(scalaz.syntax.MonadSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2032               // Field monadSyntax:Lscalaz/syntax/MonadSyntax;
       5: return

  public scalaz.syntax.BindSyntax<scalaz.Maybe> bindSyntax();
    Code:
       0: aload_0
       1: getfield      #2039               // Field bindSyntax:Lscalaz/syntax/BindSyntax;
       4: areturn

  public void scalaz$Bind$_setter_$bindSyntax_$eq(scalaz.syntax.BindSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2039               // Field bindSyntax:Lscalaz/syntax/BindSyntax;
       5: return

  public scalaz.syntax.ApplicativeSyntax<scalaz.Maybe> applicativeSyntax();
    Code:
       0: aload_0
       1: getfield      #2046               // Field applicativeSyntax:Lscalaz/syntax/ApplicativeSyntax;
       4: areturn

  public void scalaz$Applicative$_setter_$applicativeSyntax_$eq(scalaz.syntax.ApplicativeSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2046               // Field applicativeSyntax:Lscalaz/syntax/ApplicativeSyntax;
       5: return

  public scalaz.syntax.InvariantApplicativeSyntax<scalaz.Maybe> invariantApplicativeSyntax();
    Code:
       0: aload_0
       1: getfield      #2053               // Field invariantApplicativeSyntax:Lscalaz/syntax/InvariantApplicativeSyntax;
       4: areturn

  public void scalaz$InvariantApplicative$_setter_$invariantApplicativeSyntax_$eq(scalaz.syntax.InvariantApplicativeSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2053               // Field invariantApplicativeSyntax:Lscalaz/syntax/InvariantApplicativeSyntax;
       5: return

  public scalaz.syntax.ApplySyntax<scalaz.Maybe> applySyntax();
    Code:
       0: aload_0
       1: getfield      #2060               // Field applySyntax:Lscalaz/syntax/ApplySyntax;
       4: areturn

  public void scalaz$Apply$_setter_$applySyntax_$eq(scalaz.syntax.ApplySyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2060               // Field applySyntax:Lscalaz/syntax/ApplySyntax;
       5: return

  public scalaz.syntax.TraverseSyntax<scalaz.Maybe> traverseSyntax();
    Code:
       0: aload_0
       1: getfield      #2067               // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       4: areturn

  public void scalaz$Traverse$_setter_$traverseSyntax_$eq(scalaz.syntax.TraverseSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2067               // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       5: return

  public scalaz.syntax.FoldableSyntax<scalaz.Maybe> foldableSyntax();
    Code:
       0: aload_0
       1: getfield      #2074               // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       4: areturn

  public void scalaz$Foldable$_setter_$foldableSyntax_$eq(scalaz.syntax.FoldableSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2074               // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       5: return

  public scalaz.syntax.FunctorSyntax<scalaz.Maybe> functorSyntax();
    Code:
       0: aload_0
       1: getfield      #2081               // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       4: areturn

  public void scalaz$Functor$_setter_$functorSyntax_$eq(scalaz.syntax.FunctorSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2081               // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<scalaz.Maybe> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #2088               // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2088               // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public <A> scalaz.Maybe<A> point(scala.Function0<A>);
    Code:
       0: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: pop
       4: aload_1
       5: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      10: astore_2
      11: new           #106                // class scalaz/Maybe$Just
      14: dup
      15: aload_2
      16: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      19: areturn

  public <A, B> scalaz.Maybe<B> ap(scala.Function0<scalaz.Maybe<A>>, scala.Function0<scalaz.Maybe<scala.Function1<A, B>>>);
    Code:
       0: aload_2
       1: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #100                // class scalaz/Maybe
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: astore_3
      16: aload_3
      17: instanceof    #106                // class scalaz/Maybe$Just
      20: ifeq          125
      23: aload_3
      24: checkcast     #106                // class scalaz/Maybe$Just
      27: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      30: checkcast     #2118               // class scala/Function1
      33: astore        4
      35: aload_1
      36: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      41: checkcast     #100                // class scalaz/Maybe
      44: aload         4
      46: invokedynamic #2137,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      51: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      56: astore        6
      58: dup
      59: ifnonnull     64
      62: aconst_null
      63: athrow
      64: astore        5
      66: aload         5
      68: instanceof    #106                // class scalaz/Maybe$Just
      71: ifeq          96
      74: aload         5
      76: checkcast     #106                // class scalaz/Maybe$Just
      79: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      82: astore        7
      84: aload         6
      86: aload         7
      88: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      93: goto          121
      96: aload         5
      98: instanceof    #98                 // class scalaz/Maybe$Empty
     101: ifeq          111
     104: aload_0
     105: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
     108: goto          121
     111: new           #2147               // class scala/MatchError
     114: dup
     115: aload         5
     117: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     120: athrow
     121: checkcast     #100                // class scalaz/Maybe
     124: areturn
     125: aload_3
     126: instanceof    #98                 // class scalaz/Maybe$Empty
     129: ifeq          137
     132: aload_0
     133: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
     136: areturn
     137: new           #2147               // class scala/MatchError
     140: dup
     141: aload_3
     142: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     145: athrow

  public <A, B> scalaz.Maybe<B> bind(scalaz.Maybe<A>, scala.Function1<A, scalaz.Maybe<B>>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #106                // class scalaz/Maybe$Just
      10: ifeq          31
      13: aload_1
      14: checkcast     #106                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore_3
      21: aload_2
      22: aload_3
      23: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      28: goto          60
      31: aload_1
      32: instanceof    #98                 // class scalaz/Maybe$Empty
      35: ifeq          51
      38: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      41: pop
      42: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      45: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      48: goto          60
      51: new           #2147               // class scala/MatchError
      54: dup
      55: aload_1
      56: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      59: athrow
      60: checkcast     #100                // class scalaz/Maybe
      63: areturn

  public <A, B> scalaz.Maybe<B> tailrecM(A, scala.Function1<A, scalaz.Maybe<scalaz.$bslash$div<A, B>>>);
    Code:
       0: iconst_0
       1: istore_3
       2: aconst_null
       3: astore        4
       5: aload_2
       6: aload_1
       7: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #100                // class scalaz/Maybe
      15: astore        5
      17: aload         5
      19: instanceof    #98                 // class scalaz/Maybe$Empty
      22: ifeq          32
      25: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      28: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      31: areturn
      32: aload         5
      34: instanceof    #106                // class scalaz/Maybe$Just
      37: ifeq          81
      40: iconst_1
      41: istore_3
      42: aload         5
      44: checkcast     #106                // class scalaz/Maybe$Just
      47: astore        4
      49: aload         4
      51: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      54: checkcast     #2166               // class scalaz/$bslash$div
      57: astore        6
      59: aload         6
      61: instanceof    #2168               // class scalaz/$minus$bslash$div
      64: ifeq          81
      67: aload         6
      69: checkcast     #2168               // class scalaz/$minus$bslash$div
      72: invokevirtual #2170               // Method scalaz/$minus$bslash$div.a:()Ljava/lang/Object;
      75: aload_2
      76: astore_2
      77: astore_1
      78: goto          0
      81: iload_3
      82: ifeq          123
      85: aload         4
      87: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      90: checkcast     #2166               // class scalaz/$bslash$div
      93: astore        7
      95: aload         7
      97: instanceof    #2172               // class scalaz/$bslash$div$minus
     100: ifeq          123
     103: aload         7
     105: checkcast     #2172               // class scalaz/$bslash$div$minus
     108: invokevirtual #2174               // Method scalaz/$bslash$div$minus.b:()Ljava/lang/Object;
     111: astore        8
     113: new           #106                // class scalaz/Maybe$Just
     116: dup
     117: aload         8
     119: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     122: areturn
     123: new           #2147               // class scala/MatchError
     126: dup
     127: aload         5
     129: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     132: athrow

  public <A, B> scalaz.Maybe<B> map(scalaz.Maybe<A>, scala.Function1<A, B>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_2
       7: invokedynamic #2180,  0           // InvokeDynamic #1:apply:()Lscala/Function1;
      12: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      17: astore_3
      18: aload_1
      19: instanceof    #106                // class scalaz/Maybe$Just
      22: ifeq          45
      25: aload_1
      26: checkcast     #106                // class scalaz/Maybe$Just
      29: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      32: astore        4
      34: aload_3
      35: aload         4
      37: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      42: goto          74
      45: aload_1
      46: instanceof    #98                 // class scalaz/Maybe$Empty
      49: ifeq          65
      52: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      55: pop
      56: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      59: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      62: goto          74
      65: new           #2147               // class scala/MatchError
      68: dup
      69: aload_1
      70: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      73: athrow
      74: checkcast     #100                // class scalaz/Maybe
      77: areturn

  public <F, A, B> F traverseImpl(scalaz.Maybe<A>, scala.Function1<A, F>, scalaz.Applicative<F>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #106                // class scalaz/Maybe$Just
      10: ifeq          42
      13: aload_1
      14: checkcast     #106                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        4
      22: aload_3
      23: aload_2
      24: aload         4
      26: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      31: invokedynamic #2190,  0           // InvokeDynamic #2:apply:()Lscala/Function1;
      36: invokeinterface #2192,  3         // InterfaceMethod scalaz/Applicative.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      41: areturn
      42: aload_1
      43: instanceof    #98                 // class scalaz/Maybe$Empty
      46: ifeq          55
      49: aload_0
      50: aload_3
      51: invokestatic  #2196               // Method $anonfun$traverseImpl$3:(Lscalaz/MaybeInstances$$anon$11;Lscalaz/Applicative;)Ljava/lang/Object;
      54: areturn
      55: new           #2147               // class scala/MatchError
      58: dup
      59: aload_1
      60: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      63: athrow

  public <A> scalaz.Maybe<A> empty();
    Code:
       0: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: pop
       4: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
       7: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      10: areturn

  public <A> scalaz.Maybe<A> plus(scalaz.Maybe<A>, scala.Function0<scalaz.Maybe<A>>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #106                // class scalaz/Maybe$Just
      10: ifeq          25
      13: aload_1
      14: checkcast     #106                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: pop
      21: aload_1
      22: goto          50
      25: aload_1
      26: instanceof    #98                 // class scalaz/Maybe$Empty
      29: ifeq          41
      32: aload_2
      33: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      38: goto          50
      41: new           #2147               // class scala/MatchError
      44: dup
      45: aload_1
      46: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      49: athrow
      50: checkcast     #100                // class scalaz/Maybe
      53: areturn

  public <S, A> scalaz.Maybe<scalaz.Maybe<A>> unfoldrPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<scalaz.Maybe<A>, S>>>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #100                // class scalaz/Maybe
      10: aload_0
      11: aload_2
      12: invokedynamic #2213,  0           // InvokeDynamic #3:apply:(Lscalaz/MaybeInstances$$anon$11;Lscala/Function1;)Lscala/Function1;
      17: astore        4
      19: dup
      20: ifnonnull     25
      23: aconst_null
      24: athrow
      25: astore_3
      26: aload         4
      28: invokedynamic #2180,  0           // InvokeDynamic #1:apply:()Lscala/Function1;
      33: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      38: astore        5
      40: aload_3
      41: instanceof    #106                // class scalaz/Maybe$Just
      44: ifeq          68
      47: aload_3
      48: checkcast     #106                // class scalaz/Maybe$Just
      51: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      54: astore        6
      56: aload         5
      58: aload         6
      60: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      65: goto          97
      68: aload_3
      69: instanceof    #98                 // class scalaz/Maybe$Empty
      72: ifeq          88
      75: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      78: pop
      79: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      82: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      85: goto          97
      88: new           #2147               // class scala/MatchError
      91: dup
      92: aload_3
      93: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      96: athrow
      97: checkcast     #100                // class scalaz/Maybe
     100: areturn

  public <S, A, B> scalaz.Maybe<scalaz.Maybe<B>> unfoldrOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<scalaz.Maybe<A>, S>>>, scalaz.Reducer<A, B>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #100                // class scalaz/Maybe
      10: aload_0
      11: aload_3
      12: aload_2
      13: invokedynamic #2226,  0           // InvokeDynamic #4:apply:(Lscalaz/MaybeInstances$$anon$11;Lscalaz/Reducer;Lscala/Function1;)Lscala/Function1;
      18: astore        5
      20: dup
      21: ifnonnull     26
      24: aconst_null
      25: athrow
      26: astore        4
      28: aload         5
      30: invokedynamic #2180,  0           // InvokeDynamic #1:apply:()Lscala/Function1;
      35: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      40: astore        6
      42: aload         4
      44: instanceof    #106                // class scalaz/Maybe$Just
      47: ifeq          72
      50: aload         4
      52: checkcast     #106                // class scalaz/Maybe$Just
      55: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      58: astore        7
      60: aload         6
      62: aload         7
      64: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      69: goto          103
      72: aload         4
      74: instanceof    #98                 // class scalaz/Maybe$Empty
      77: ifeq          93
      80: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      83: pop
      84: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      87: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      90: goto          103
      93: new           #2147               // class scala/MatchError
      96: dup
      97: aload         4
      99: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     102: athrow
     103: checkcast     #100                // class scalaz/Maybe
     106: areturn

  public <A, B> B foldRight(scalaz.Maybe<A>, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #106                // class scalaz/Maybe$Just
      10: ifeq          32
      13: aload_1
      14: checkcast     #106                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        4
      22: aload_3
      23: aload         4
      25: aload_2
      26: invokeinterface #2235,  3         // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      31: areturn
      32: aload_1
      33: instanceof    #98                 // class scalaz/Maybe$Empty
      36: ifeq          46
      39: aload_2
      40: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      45: areturn
      46: new           #2147               // class scala/MatchError
      49: dup
      50: aload_1
      51: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      54: athrow

  public <A, B> scalaz.$bslash$div<scalaz.Maybe<A>, scalaz.Maybe<B>> cozip(scalaz.Maybe<scalaz.$bslash$div<A, B>>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #106                // class scalaz/Maybe$Just
      10: ifeq          27
      13: aload_1
      14: checkcast     #106                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: checkcast     #2166               // class scalaz/$bslash$div
      23: invokestatic  #2242               // Method $anonfun$cozip$1:(Lscalaz/$bslash$div;)Lscalaz/$bslash$div;
      26: areturn
      27: aload_1
      28: instanceof    #98                 // class scalaz/Maybe$Empty
      31: ifeq          39
      34: aload_0
      35: invokestatic  #2246               // Method $anonfun$cozip$4:(Lscalaz/MaybeInstances$$anon$11;)Lscalaz/$bslash$div;
      38: areturn
      39: new           #2147               // class scala/MatchError
      42: dup
      43: aload_1
      44: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      47: athrow

  public <A, B> scalaz.Maybe<scala.Tuple2<A, B>> zip(scala.Function0<scalaz.Maybe<A>>, scala.Function0<scalaz.Maybe<B>>);
    Code:
       0: aload_1
       1: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #100                // class scalaz/Maybe
       9: aload_2
      10: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      15: checkcast     #100                // class scalaz/Maybe
      18: invokevirtual #2251               // Method scalaz/Maybe.zip:(Lscalaz/Maybe;)Lscalaz/Maybe;
      21: areturn

  public <A, B> scala.Tuple2<scalaz.Maybe<A>, scalaz.Maybe<B>> unzip(scalaz.Maybe<scala.Tuple2<A, B>>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #106                // class scalaz/Maybe$Just
      10: ifeq          27
      13: aload_1
      14: checkcast     #106                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: checkcast     #2256               // class scala/Tuple2
      23: invokestatic  #2260               // Method $anonfun$unzip$1:(Lscala/Tuple2;)Lscala/Tuple2;
      26: areturn
      27: aload_1
      28: instanceof    #98                 // class scalaz/Maybe$Empty
      31: ifeq          39
      34: aload_0
      35: invokestatic  #2264               // Method $anonfun$unzip$2:(Lscalaz/MaybeInstances$$anon$11;)Lscala/Tuple2;
      38: areturn
      39: new           #2147               // class scala/MatchError
      42: dup
      43: aload_1
      44: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      47: athrow

  public <A, B, C> scala.Function2<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>> alignWith(scala.Function1<scalaz.$bslash$amp$div<A, B>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #2278,  0           // InvokeDynamic #5:apply:(Lscalaz/MaybeInstances$$anon$11;Lscala/Function1;)Lscala/Function2;
       7: areturn

  public <A, B> scalaz.Maybe<B> cobind(scalaz.Maybe<A>, scala.Function1<scalaz.Maybe<A>, B>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: aload_2
       8: invokedynamic #2288,  0           // InvokeDynamic #6:apply:(Lscalaz/Maybe;Lscala/Function1;)Lscala/Function1;
      13: invokedynamic #2180,  0           // InvokeDynamic #1:apply:()Lscala/Function1;
      18: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      23: astore_3
      24: aload_1
      25: instanceof    #106                // class scalaz/Maybe$Just
      28: ifeq          51
      31: aload_1
      32: checkcast     #106                // class scalaz/Maybe$Just
      35: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      38: astore        4
      40: aload_3
      41: aload         4
      43: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      48: goto          80
      51: aload_1
      52: instanceof    #98                 // class scalaz/Maybe$Empty
      55: ifeq          71
      58: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      61: pop
      62: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      65: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      68: goto          80
      71: new           #2147               // class scala/MatchError
      74: dup
      75: aload_1
      76: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      79: athrow
      80: checkcast     #100                // class scalaz/Maybe
      83: areturn

  public <A> scalaz.Maybe<scalaz.Maybe<A>> cojoin(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: invokevirtual #2294               // Method scalaz/Maybe.cojoin:()Lscalaz/Maybe;
       4: areturn

  public <B, A> scalaz.$bslash$div<scalaz.Maybe<B>, A> pextract(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: getstatic     #2301               // Field scalaz/$bslash$div$.MODULE$:Lscalaz/$bslash$div$;
       4: invokevirtual #2304               // Method scalaz/$bslash$div$.right:()Lscala/Function1;
       7: astore_2
       8: ifnonnull     13
      11: aconst_null
      12: athrow
      13: aload_1
      14: instanceof    #106                // class scalaz/Maybe$Just
      17: ifeq          38
      20: aload_1
      21: checkcast     #106                // class scalaz/Maybe$Just
      24: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      27: astore_3
      28: aload_2
      29: aload_3
      30: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      35: goto          61
      38: aload_1
      39: instanceof    #98                 // class scalaz/Maybe$Empty
      42: ifeq          52
      45: aload_0
      46: invokestatic  #2307               // Method $anonfun$pextract$1:(Lscalaz/MaybeInstances$$anon$11;)Lscalaz/$bslash$div;
      49: goto          61
      52: new           #2147               // class scala/MatchError
      55: dup
      56: aload_1
      57: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      60: athrow
      61: checkcast     #2166               // class scalaz/$bslash$div
      64: areturn

  public <A> boolean isDefined(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: invokevirtual #2315               // Method scalaz/Maybe.isJust:()Z
       4: ireturn

  public <A> scala.Option<A> toOption(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: invokevirtual #2321               // Method scalaz/Maybe.toOption:()Lscala/Option;
       4: areturn

  public <A> scalaz.Maybe<A> toMaybe(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: areturn

  public <A> scalaz.Maybe<A> filter(scalaz.Maybe<A>, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #106                // class scalaz/Maybe$Just
      10: ifeq          47
      13: aload_1
      14: checkcast     #106                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore_3
      21: aload_2
      22: aload_3
      23: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      28: invokestatic  #2330               // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
      31: ifeq          36
      34: aload_1
      35: areturn
      36: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      39: pop
      40: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      43: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      46: areturn
      47: aload_1
      48: instanceof    #98                 // class scalaz/Maybe$Empty
      51: ifeq          65
      54: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      57: pop
      58: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      61: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      64: areturn
      65: new           #2147               // class scala/MatchError
      68: dup
      69: aload_1
      70: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      73: athrow

  public <A> scalaz.Maybe<A> alt(scala.Function0<scalaz.Maybe<A>>, scala.Function0<scalaz.Maybe<A>>);
    Code:
       0: aload_1
       1: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #100                // class scalaz/Maybe
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: astore_3
      16: aload_3
      17: instanceof    #106                // class scalaz/Maybe$Just
      20: ifeq          35
      23: aload_3
      24: checkcast     #106                // class scalaz/Maybe$Just
      27: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      30: pop
      31: aload_3
      32: goto          60
      35: aload_3
      36: instanceof    #98                 // class scalaz/Maybe$Empty
      39: ifeq          51
      42: aload_2
      43: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      48: goto          60
      51: new           #2147               // class scala/MatchError
      54: dup
      55: aload_3
      56: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      59: athrow
      60: checkcast     #100                // class scalaz/Maybe
      63: areturn

  public <Z, A1, A2> scalaz.Maybe<Z> altly2(scala.Function0<scalaz.Maybe<A1>>, scala.Function0<scalaz.Maybe<A2>>, scala.Function1<scalaz.$bslash$div<A1, A2>, Z>);
    Code:
       0: aload_1
       1: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #100                // class scalaz/Maybe
       9: astore        4
      11: aload         4
      13: instanceof    #98                 // class scalaz/Maybe$Empty
      16: ifeq          139
      19: aload_2
      20: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      25: checkcast     #100                // class scalaz/Maybe
      28: astore        5
      30: aload         5
      32: instanceof    #98                 // class scalaz/Maybe$Empty
      35: ifeq          45
      38: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      41: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      44: areturn
      45: aload         5
      47: aload_3
      48: invokedynamic #2343,  0           // InvokeDynamic #7:apply:(Lscala/Function1;)Lscala/Function1;
      53: astore        6
      55: ifnonnull     60
      58: aconst_null
      59: athrow
      60: aload         6
      62: invokedynamic #2180,  0           // InvokeDynamic #1:apply:()Lscala/Function1;
      67: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      72: astore        7
      74: aload         5
      76: instanceof    #106                // class scalaz/Maybe$Just
      79: ifeq          104
      82: aload         5
      84: checkcast     #106                // class scalaz/Maybe$Just
      87: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      90: astore        8
      92: aload         7
      94: aload         8
      96: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     101: goto          135
     104: aload         5
     106: instanceof    #98                 // class scalaz/Maybe$Empty
     109: ifeq          125
     112: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
     115: pop
     116: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     119: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     122: goto          135
     125: new           #2147               // class scala/MatchError
     128: dup
     129: aload         5
     131: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     134: athrow
     135: checkcast     #100                // class scalaz/Maybe
     138: areturn
     139: aload         4
     141: aload_3
     142: invokedynamic #2348,  0           // InvokeDynamic #8:apply:(Lscala/Function1;)Lscala/Function1;
     147: astore        9
     149: ifnonnull     154
     152: aconst_null
     153: athrow
     154: aload         9
     156: invokedynamic #2180,  0           // InvokeDynamic #1:apply:()Lscala/Function1;
     161: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
     166: astore        10
     168: aload         4
     170: instanceof    #106                // class scalaz/Maybe$Just
     173: ifeq          198
     176: aload         4
     178: checkcast     #106                // class scalaz/Maybe$Just
     181: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
     184: astore        11
     186: aload         10
     188: aload         11
     190: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     195: goto          229
     198: aload         4
     200: instanceof    #98                 // class scalaz/Maybe$Empty
     203: ifeq          219
     206: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
     209: pop
     210: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     213: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     216: goto          229
     219: new           #2147               // class scala/MatchError
     222: dup
     223: aload         4
     225: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     228: athrow
     229: checkcast     #100                // class scalaz/Maybe
     232: areturn

  public <A, B, C> scalaz.Maybe<C> apply2(scala.Function0<scalaz.Maybe<A>>, scala.Function0<scalaz.Maybe<B>>, scala.Function2<A, B, C>);
    Code:
       0: aload_1
       1: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #100                // class scalaz/Maybe
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: astore        4
      17: aload         4
      19: instanceof    #106                // class scalaz/Maybe$Just
      22: ifeq          141
      25: aload         4
      27: checkcast     #106                // class scalaz/Maybe$Just
      30: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      33: astore        5
      35: aload_2
      36: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      41: checkcast     #100                // class scalaz/Maybe
      44: aload_3
      45: aload         5
      47: invokedynamic #2358,  0           // InvokeDynamic #9:apply:(Lscala/Function2;Ljava/lang/Object;)Lscala/Function1;
      52: astore        7
      54: dup
      55: ifnonnull     60
      58: aconst_null
      59: athrow
      60: astore        6
      62: aload         7
      64: invokedynamic #2180,  0           // InvokeDynamic #1:apply:()Lscala/Function1;
      69: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      74: astore        8
      76: aload         6
      78: instanceof    #106                // class scalaz/Maybe$Just
      81: ifeq          106
      84: aload         6
      86: checkcast     #106                // class scalaz/Maybe$Just
      89: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      92: astore        9
      94: aload         8
      96: aload         9
      98: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     103: goto          137
     106: aload         6
     108: instanceof    #98                 // class scalaz/Maybe$Empty
     111: ifeq          127
     114: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
     117: pop
     118: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     121: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     124: goto          137
     127: new           #2147               // class scala/MatchError
     130: dup
     131: aload         6
     133: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     136: athrow
     137: checkcast     #100                // class scalaz/Maybe
     140: areturn
     141: aload         4
     143: instanceof    #98                 // class scalaz/Maybe$Empty
     146: ifeq          160
     149: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
     152: pop
     153: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     156: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     159: areturn
     160: new           #2147               // class scala/MatchError
     163: dup
     164: aload         4
     166: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     169: athrow

  public scalaz.Apply flip();
    Code:
       0: aload_0
       1: invokevirtual #2366               // Method flip:()Lscalaz/Applicative;
       4: areturn

  public scalaz.Plus compose();
    Code:
       0: aload_0
       1: invokevirtual #2369               // Method compose:()Lscalaz/PlusEmpty;
       4: areturn

  public scalaz.Applicative compose(scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2371               // Method compose:(Lscalaz/Applicative;)Lscalaz/ApplicativePlus;
       5: areturn

  public java.lang.Object apply2(scala.Function0, scala.Function0, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #2374               // Method apply2:(Lscala/Function0;Lscala/Function0;Lscala/Function2;)Lscalaz/Maybe;
       7: areturn

  public java.lang.Object altly2(scala.Function0, scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #2377               // Method altly2:(Lscala/Function0;Lscala/Function0;Lscala/Function1;)Lscalaz/Maybe;
       7: areturn

  public java.lang.Object alt(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #2379               // Method alt:(Lscala/Function0;Lscala/Function0;)Lscalaz/Maybe;
       6: areturn

  public java.lang.Object filter(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: aload_2
       6: invokevirtual #2381               // Method filter:(Lscalaz/Maybe;Lscala/Function1;)Lscalaz/Maybe;
       9: areturn

  public scalaz.Maybe toMaybe(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: invokevirtual #2383               // Method toMaybe:(Lscalaz/Maybe;)Lscalaz/Maybe;
       8: areturn

  public scala.Option toOption(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: invokevirtual #2386               // Method toOption:(Lscalaz/Maybe;)Lscala/Option;
       8: areturn

  public boolean isDefined(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: invokevirtual #2388               // Method isDefined:(Lscalaz/Maybe;)Z
       8: ireturn

  public scalaz.$bslash$div pextract(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: invokevirtual #2390               // Method pextract:(Lscalaz/Maybe;)Lscalaz/$bslash$div;
       8: areturn

  public java.lang.Object cojoin(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: invokevirtual #2392               // Method cojoin:(Lscalaz/Maybe;)Lscalaz/Maybe;
       8: areturn

  public java.lang.Object cobind(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: aload_2
       6: invokevirtual #2394               // Method cobind:(Lscalaz/Maybe;Lscala/Function1;)Lscalaz/Maybe;
       9: areturn

  public scala.Tuple2 unzip(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: invokevirtual #2397               // Method unzip:(Lscalaz/Maybe;)Lscala/Tuple2;
       8: areturn

  public java.lang.Object zip(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #2399               // Method zip:(Lscala/Function0;Lscala/Function0;)Lscalaz/Maybe;
       6: areturn

  public scalaz.$bslash$div cozip(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: invokevirtual #2401               // Method cozip:(Lscalaz/Maybe;)Lscalaz/$bslash$div;
       8: areturn

  public java.lang.Object foldRight(java.lang.Object, scala.Function0, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: aload_2
       6: aload_3
       7: invokevirtual #2404               // Method foldRight:(Lscalaz/Maybe;Lscala/Function0;Lscala/Function2;)Ljava/lang/Object;
      10: areturn

  public java.lang.Object plus(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: aload_2
       6: invokevirtual #2406               // Method plus:(Lscalaz/Maybe;Lscala/Function0;)Lscalaz/Maybe;
       9: areturn

  public java.lang.Object empty();
    Code:
       0: aload_0
       1: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public java.lang.Object traverseImpl(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: aload_2
       6: aload_3
       7: invokevirtual #2408               // Method traverseImpl:(Lscalaz/Maybe;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
      10: areturn

  public java.lang.Object map(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: aload_2
       6: invokevirtual #2410               // Method map:(Lscalaz/Maybe;Lscala/Function1;)Lscalaz/Maybe;
       9: areturn

  public java.lang.Object tailrecM(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #2412               // Method tailrecM:(Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public java.lang.Object bind(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #100                // class scalaz/Maybe
       5: aload_2
       6: invokevirtual #2414               // Method bind:(Lscalaz/Maybe;Lscala/Function1;)Lscalaz/Maybe;
       9: areturn

  public java.lang.Object ap(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #2416               // Method ap:(Lscala/Function0;Lscala/Function0;)Lscalaz/Maybe;
       6: areturn

  public java.lang.Object point(scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2418               // Method point:(Lscala/Function0;)Lscalaz/Maybe;
       5: areturn

  public static final scalaz.Maybe $anonfun$ap$2(java.lang.Object);
    Code:
       0: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: invokevirtual #2421               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
       7: areturn

  public static final scalaz.Maybe $anonfun$ap$3(scalaz.MaybeInstances$$anon$11);
    Code:
       0: aload_0
       1: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public static final scalaz.Maybe $anonfun$ap$1(scalaz.MaybeInstances$$anon$11, scala.Function0, scala.Function1);
    Code:
       0: aload_1
       1: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #100                // class scalaz/Maybe
       9: aload_2
      10: invokedynamic #2137,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      15: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      20: astore        4
      22: dup
      23: ifnonnull     28
      26: aconst_null
      27: athrow
      28: astore_3
      29: aload_3
      30: instanceof    #106                // class scalaz/Maybe$Just
      33: ifeq          57
      36: aload_3
      37: checkcast     #106                // class scalaz/Maybe$Just
      40: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      43: astore        5
      45: aload         4
      47: aload         5
      49: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      54: goto          80
      57: aload_3
      58: instanceof    #98                 // class scalaz/Maybe$Empty
      61: ifeq          71
      64: aload_0
      65: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
      68: goto          80
      71: new           #2147               // class scala/MatchError
      74: dup
      75: aload_3
      76: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      79: athrow
      80: checkcast     #100                // class scalaz/Maybe
      83: areturn

  public static final scalaz.Maybe $anonfun$ap$4(scalaz.MaybeInstances$$anon$11);
    Code:
       0: aload_0
       1: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public static final scalaz.Maybe $anonfun$traverseImpl$2(java.lang.Object);
    Code:
       0: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: invokevirtual #2421               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
       7: areturn

  public static final java.lang.Object $anonfun$traverseImpl$1(scalaz.Applicative, scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       8: invokedynamic #2190,  0           // InvokeDynamic #2:apply:()Lscala/Function1;
      13: invokeinterface #2192,  3         // InterfaceMethod scalaz/Applicative.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      18: areturn

  public static final scalaz.Maybe $anonfun$traverseImpl$4(scalaz.MaybeInstances$$anon$11);
    Code:
       0: aload_0
       1: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public static final java.lang.Object $anonfun$traverseImpl$3(scalaz.MaybeInstances$$anon$11, scalaz.Applicative);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #2441,  0           // InvokeDynamic #10:apply:(Lscalaz/MaybeInstances$$anon$11;)Lscala/Function0;
       7: invokeinterface #2443,  2         // InterfaceMethod scalaz/Applicative.point:(Lscala/Function0;)Ljava/lang/Object;
      12: areturn

  private final scalaz.Maybe go$1(java.lang.Object, scala.Function1);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #100                // class scalaz/Maybe
      10: astore_3
      11: aload_3
      12: instanceof    #106                // class scalaz/Maybe$Just
      15: ifeq          72
      18: aload_3
      19: checkcast     #106                // class scalaz/Maybe$Just
      22: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      25: checkcast     #2256               // class scala/Tuple2
      28: astore        4
      30: aload         4
      32: ifnull        72
      35: aload         4
      37: invokevirtual #2448               // Method scala/Tuple2._1:()Ljava/lang/Object;
      40: checkcast     #100                // class scalaz/Maybe
      43: astore        5
      45: aload         4
      47: invokevirtual #2451               // Method scala/Tuple2._2:()Ljava/lang/Object;
      50: astore        6
      52: aload         5
      54: instanceof    #106                // class scalaz/Maybe$Just
      57: ifeq          66
      60: aload         5
      62: checkcast     #106                // class scalaz/Maybe$Just
      65: areturn
      66: aload         6
      68: astore_1
      69: goto          0
      72: aload_3
      73: instanceof    #98                 // class scalaz/Maybe$Empty
      76: ifeq          86
      79: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      82: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      85: areturn
      86: new           #2147               // class scala/MatchError
      89: dup
      90: aload_3
      91: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      94: athrow

  public static final scalaz.Maybe $anonfun$unfoldrPsumOpt$1(scalaz.MaybeInstances$$anon$11, scala.Function1, scala.Tuple2);
    Code:
       0: aload_2
       1: ifnull        152
       4: aload_2
       5: invokevirtual #2448               // Method scala/Tuple2._1:()Ljava/lang/Object;
       8: checkcast     #100                // class scalaz/Maybe
      11: astore_3
      12: aload_2
      13: invokevirtual #2451               // Method scala/Tuple2._2:()Ljava/lang/Object;
      16: astore        4
      18: aload_3
      19: instanceof    #106                // class scalaz/Maybe$Just
      22: ifeq          30
      25: aload_3
      26: checkcast     #106                // class scalaz/Maybe$Just
      29: areturn
      30: aload_3
      31: instanceof    #98                 // class scalaz/Maybe$Empty
      34: ifeq          143
      37: aload         4
      39: astore        5
      41: aload_1
      42: aload         5
      44: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      49: checkcast     #100                // class scalaz/Maybe
      52: astore        6
      54: aload         6
      56: instanceof    #106                // class scalaz/Maybe$Just
      59: ifeq          118
      62: aload         6
      64: checkcast     #106                // class scalaz/Maybe$Just
      67: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      70: checkcast     #2256               // class scala/Tuple2
      73: astore        7
      75: aload         7
      77: ifnull        118
      80: aload         7
      82: invokevirtual #2448               // Method scala/Tuple2._1:()Ljava/lang/Object;
      85: checkcast     #100                // class scalaz/Maybe
      88: astore        8
      90: aload         7
      92: invokevirtual #2451               // Method scala/Tuple2._2:()Ljava/lang/Object;
      95: astore        9
      97: aload         8
      99: instanceof    #106                // class scalaz/Maybe$Just
     102: ifeq          111
     105: aload         8
     107: checkcast     #106                // class scalaz/Maybe$Just
     110: areturn
     111: aload         9
     113: astore        5
     115: goto          41
     118: aload         6
     120: instanceof    #98                 // class scalaz/Maybe$Empty
     123: ifeq          133
     126: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     129: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     132: areturn
     133: new           #2147               // class scala/MatchError
     136: dup
     137: aload         6
     139: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     142: athrow
     143: new           #2147               // class scala/MatchError
     146: dup
     147: aload_3
     148: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     151: athrow
     152: new           #2147               // class scala/MatchError
     155: dup
     156: aconst_null
     157: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     160: athrow

  private final scalaz.Maybe go$2(java.lang.Object, java.lang.Object, scala.Function1, scalaz.Reducer);
    Code:
       0: aload_3
       1: aload_2
       2: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #100                // class scalaz/Maybe
      10: astore        5
      12: aload         5
      14: instanceof    #106                // class scalaz/Maybe$Just
      17: ifeq          97
      20: aload         5
      22: checkcast     #106                // class scalaz/Maybe$Just
      25: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      28: checkcast     #2256               // class scala/Tuple2
      31: astore        6
      33: aload         6
      35: ifnull        97
      38: aload         6
      40: invokevirtual #2448               // Method scala/Tuple2._1:()Ljava/lang/Object;
      43: checkcast     #100                // class scalaz/Maybe
      46: astore        7
      48: aload         6
      50: invokevirtual #2451               // Method scala/Tuple2._2:()Ljava/lang/Object;
      53: astore        8
      55: aload         7
      57: instanceof    #106                // class scalaz/Maybe$Just
      60: ifeq          90
      63: aload         7
      65: checkcast     #106                // class scalaz/Maybe$Just
      68: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      71: astore        9
      73: aload         4
      75: aload_1
      76: aload         9
      78: invokeinterface #2463,  3         // InterfaceMethod scalaz/Reducer.snoc:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      83: aload         8
      85: astore_2
      86: astore_1
      87: goto          0
      90: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      93: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      96: areturn
      97: new           #106                // class scalaz/Maybe$Just
     100: dup
     101: aload_1
     102: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     105: areturn

  public static final scalaz.Maybe $anonfun$unfoldrOpt$1(scalaz.MaybeInstances$$anon$11, scalaz.Reducer, scala.Function1, scala.Tuple2);
    Code:
       0: aload_3
       1: ifnull        168
       4: aload_3
       5: invokevirtual #2448               // Method scala/Tuple2._1:()Ljava/lang/Object;
       8: checkcast     #100                // class scalaz/Maybe
      11: astore        4
      13: aload_3
      14: invokevirtual #2451               // Method scala/Tuple2._2:()Ljava/lang/Object;
      17: astore        5
      19: aload         4
      21: instanceof    #106                // class scalaz/Maybe$Just
      24: ifeq          161
      27: aload         4
      29: checkcast     #106                // class scalaz/Maybe$Just
      32: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      35: astore        6
      37: aload_1
      38: aload         6
      40: invokeinterface #2466,  2         // InterfaceMethod scalaz/Reducer.unit:(Ljava/lang/Object;)Ljava/lang/Object;
      45: aload         5
      47: astore        8
      49: astore        7
      51: aload_2
      52: aload         8
      54: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      59: checkcast     #100                // class scalaz/Maybe
      62: astore        9
      64: aload         9
      66: instanceof    #106                // class scalaz/Maybe$Just
      69: ifeq          151
      72: aload         9
      74: checkcast     #106                // class scalaz/Maybe$Just
      77: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      80: checkcast     #2256               // class scala/Tuple2
      83: astore        10
      85: aload         10
      87: ifnull        151
      90: aload         10
      92: invokevirtual #2448               // Method scala/Tuple2._1:()Ljava/lang/Object;
      95: checkcast     #100                // class scalaz/Maybe
      98: astore        11
     100: aload         10
     102: invokevirtual #2451               // Method scala/Tuple2._2:()Ljava/lang/Object;
     105: astore        12
     107: aload         11
     109: instanceof    #106                // class scalaz/Maybe$Just
     112: ifeq          144
     115: aload         11
     117: checkcast     #106                // class scalaz/Maybe$Just
     120: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
     123: astore        13
     125: aload_1
     126: aload         7
     128: aload         13
     130: invokeinterface #2463,  3         // InterfaceMethod scalaz/Reducer.snoc:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     135: aload         12
     137: astore        8
     139: astore        7
     141: goto          51
     144: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     147: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     150: areturn
     151: new           #106                // class scalaz/Maybe$Just
     154: dup
     155: aload         7
     157: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     160: areturn
     161: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     164: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     167: areturn
     168: new           #2147               // class scala/MatchError
     171: dup
     172: aconst_null
     173: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     176: athrow

  public static final java.lang.Object $anonfun$foldRight$1(scala.Function2, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokeinterface #2235,  3         // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public static final scalaz.Maybe $anonfun$cozip$2(java.lang.Object);
    Code:
       0: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: invokevirtual #2421               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
       7: areturn

  public static final scalaz.Maybe $anonfun$cozip$3(java.lang.Object);
    Code:
       0: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: invokevirtual #2421               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
       7: areturn

  public static final scalaz.$bslash$div $anonfun$cozip$1(scalaz.$bslash$div);
    Code:
       0: aload_0
       1: instanceof    #2168               // class scalaz/$minus$bslash$div
       4: ifeq          45
       7: aload_0
       8: checkcast     #2168               // class scalaz/$minus$bslash$div
      11: invokevirtual #2170               // Method scalaz/$minus$bslash$div.a:()Ljava/lang/Object;
      14: astore_1
      15: getstatic     #2483               // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
      18: pop
      19: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      22: pop
      23: new           #106                // class scalaz/Maybe$Just
      26: dup
      27: aload_1
      28: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      31: astore_3
      32: new           #2168               // class scalaz/$minus$bslash$div
      35: dup
      36: aload_3
      37: invokespecial #2484               // Method scalaz/$minus$bslash$div."<init>":(Ljava/lang/Object;)V
      40: aconst_null
      41: astore_3
      42: goto          76
      45: aload_0
      46: instanceof    #2172               // class scalaz/$bslash$div$minus
      49: ifeq          67
      52: aload_0
      53: checkcast     #2172               // class scalaz/$bslash$div$minus
      56: astore_2
      57: aload_2
      58: ifnonnull     63
      61: aconst_null
      62: athrow
      63: aload_2
      64: goto          76
      67: new           #2147               // class scala/MatchError
      70: dup
      71: aload_0
      72: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      75: athrow
      76: aconst_null
      77: astore_1
      78: aconst_null
      79: astore_2
      80: aconst_null
      81: astore_3
      82: astore        4
      84: aload         4
      86: instanceof    #2172               // class scalaz/$bslash$div$minus
      89: ifeq          131
      92: aload         4
      94: checkcast     #2172               // class scalaz/$bslash$div$minus
      97: invokevirtual #2174               // Method scalaz/$bslash$div$minus.b:()Ljava/lang/Object;
     100: astore        5
     102: getstatic     #2489               // Field scalaz/$bslash$div$minus$.MODULE$:Lscalaz/$bslash$div$minus$;
     105: pop
     106: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
     109: pop
     110: new           #106                // class scalaz/Maybe$Just
     113: dup
     114: aload         5
     116: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     119: astore        6
     121: new           #2172               // class scalaz/$bslash$div$minus
     124: dup
     125: aload         6
     127: invokespecial #2490               // Method scalaz/$bslash$div$minus."<init>":(Ljava/lang/Object;)V
     130: areturn
     131: aload         4
     133: instanceof    #2168               // class scalaz/$minus$bslash$div
     136: ifeq          145
     139: aload         4
     141: checkcast     #2168               // class scalaz/$minus$bslash$div
     144: areturn
     145: new           #2147               // class scala/MatchError
     148: dup
     149: aload         4
     151: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     154: athrow

  public static final scalaz.$bslash$div $anonfun$cozip$4(scalaz.MaybeInstances$$anon$11);
    Code:
       0: getstatic     #2483               // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
       3: pop
       4: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       7: pop
       8: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      11: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      14: astore_1
      15: new           #2168               // class scalaz/$minus$bslash$div
      18: dup
      19: aload_1
      20: invokespecial #2484               // Method scalaz/$minus$bslash$div."<init>":(Ljava/lang/Object;)V
      23: areturn

  public static final scala.Tuple2 $anonfun$unzip$1(scala.Tuple2);
    Code:
       0: new           #2256               // class scala/Tuple2
       3: dup
       4: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       7: pop
       8: aload_0
       9: invokevirtual #2448               // Method scala/Tuple2._1:()Ljava/lang/Object;
      12: astore_1
      13: new           #106                // class scalaz/Maybe$Just
      16: dup
      17: aload_1
      18: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      21: aconst_null
      22: astore_1
      23: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      26: pop
      27: aload_0
      28: invokevirtual #2451               // Method scala/Tuple2._2:()Ljava/lang/Object;
      31: astore_2
      32: new           #106                // class scalaz/Maybe$Just
      35: dup
      36: aload_2
      37: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      40: aconst_null
      41: astore_2
      42: invokespecial #2499               // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      45: areturn

  public static final scala.Tuple2 $anonfun$unzip$2(scalaz.MaybeInstances$$anon$11);
    Code:
       0: new           #2256               // class scala/Tuple2
       3: dup
       4: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       7: pop
       8: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      11: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      14: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      17: pop
      18: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      21: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      24: invokespecial #2499               // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      27: areturn

  public static final scalaz.Maybe $anonfun$alignWith$3(scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: pop
       4: aload_0
       5: new           #37                 // class scalaz/$bslash$amp$div$Both
       8: dup
       9: aload_1
      10: aload_2
      11: invokespecial #2504               // Method scalaz/$bslash$amp$div$Both."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      14: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      19: astore_3
      20: new           #106                // class scalaz/Maybe$Just
      23: dup
      24: aload_3
      25: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      28: areturn

  public static final scalaz.Maybe $anonfun$alignWith$4(scala.Function1, java.lang.Object);
    Code:
       0: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: pop
       4: aload_0
       5: new           #45                 // class scalaz/$bslash$amp$div$This
       8: dup
       9: aload_1
      10: invokespecial #2507               // Method scalaz/$bslash$amp$div$This."<init>":(Ljava/lang/Object;)V
      13: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: astore_2
      19: new           #106                // class scalaz/Maybe$Just
      22: dup
      23: aload_2
      24: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      27: areturn

  public static final scalaz.Maybe $anonfun$alignWith$2(scalaz.Maybe, scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: instanceof    #106                // class scalaz/Maybe$Just
       4: ifeq          46
       7: aload_0
       8: checkcast     #106                // class scalaz/Maybe$Just
      11: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      14: astore_3
      15: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      18: pop
      19: aload_1
      20: new           #37                 // class scalaz/$bslash$amp$div$Both
      23: dup
      24: aload_2
      25: aload_3
      26: invokespecial #2504               // Method scalaz/$bslash$amp$div$Both."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      29: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      34: astore        4
      36: new           #106                // class scalaz/Maybe$Just
      39: dup
      40: aload         4
      42: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      45: areturn
      46: aload_0
      47: instanceof    #98                 // class scalaz/Maybe$Empty
      50: ifeq          83
      53: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      56: pop
      57: aload_1
      58: new           #45                 // class scalaz/$bslash$amp$div$This
      61: dup
      62: aload_2
      63: invokespecial #2507               // Method scalaz/$bslash$amp$div$This."<init>":(Ljava/lang/Object;)V
      66: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      71: astore        5
      73: new           #106                // class scalaz/Maybe$Just
      76: dup
      77: aload         5
      79: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      82: areturn
      83: new           #2147               // class scala/MatchError
      86: dup
      87: aload_0
      88: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      91: athrow

  public static final scalaz.Maybe $anonfun$alignWith$6(scala.Function1, java.lang.Object);
    Code:
       0: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: pop
       4: aload_0
       5: new           #42                 // class scalaz/$bslash$amp$div$That
       8: dup
       9: aload_1
      10: invokespecial #2514               // Method scalaz/$bslash$amp$div$That."<init>":(Ljava/lang/Object;)V
      13: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: astore_2
      19: new           #106                // class scalaz/Maybe$Just
      22: dup
      23: aload_2
      24: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      27: areturn

  public static final scalaz.Maybe $anonfun$alignWith$7(scalaz.MaybeInstances$$anon$11);
    Code:
       0: aload_0
       1: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public static final scalaz.Maybe $anonfun$alignWith$5(scalaz.MaybeInstances$$anon$11, scalaz.Maybe, scala.Function1);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #106                // class scalaz/Maybe$Just
      10: ifeq          56
      13: aload_1
      14: checkcast     #106                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore_3
      21: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      24: pop
      25: aload_2
      26: new           #42                 // class scalaz/$bslash$amp$div$That
      29: dup
      30: aload_3
      31: invokespecial #2514               // Method scalaz/$bslash$amp$div$That."<init>":(Ljava/lang/Object;)V
      34: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      39: astore        4
      41: new           #106                // class scalaz/Maybe$Just
      44: dup
      45: aload         4
      47: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      50: aconst_null
      51: astore        4
      53: goto          79
      56: aload_1
      57: instanceof    #98                 // class scalaz/Maybe$Empty
      60: ifeq          70
      63: aload_0
      64: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
      67: goto          79
      70: new           #2147               // class scala/MatchError
      73: dup
      74: aload_1
      75: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      78: athrow
      79: checkcast     #100                // class scalaz/Maybe
      82: areturn

  public static final scalaz.Maybe $anonfun$alignWith$1(scalaz.MaybeInstances$$anon$11, scala.Function1, scalaz.Maybe, scalaz.Maybe);
    Code:
       0: aload_2
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_2
       7: instanceof    #106                // class scalaz/Maybe$Just
      10: ifeq          118
      13: aload_2
      14: checkcast     #106                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        4
      22: aload_3
      23: instanceof    #106                // class scalaz/Maybe$Just
      26: ifeq          71
      29: aload_3
      30: checkcast     #106                // class scalaz/Maybe$Just
      33: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      36: astore        5
      38: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      41: pop
      42: aload_1
      43: new           #37                 // class scalaz/$bslash$amp$div$Both
      46: dup
      47: aload         4
      49: aload         5
      51: invokespecial #2504               // Method scalaz/$bslash$amp$div$Both."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      54: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      59: astore        7
      61: new           #106                // class scalaz/Maybe$Just
      64: dup
      65: aload         7
      67: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
      70: areturn
      71: aload_3
      72: instanceof    #98                 // class scalaz/Maybe$Empty
      75: ifeq          109
      78: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      81: pop
      82: aload_1
      83: new           #45                 // class scalaz/$bslash$amp$div$This
      86: dup
      87: aload         4
      89: invokespecial #2507               // Method scalaz/$bslash$amp$div$This."<init>":(Ljava/lang/Object;)V
      92: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      97: astore        8
      99: new           #106                // class scalaz/Maybe$Just
     102: dup
     103: aload         8
     105: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     108: areturn
     109: new           #2147               // class scala/MatchError
     112: dup
     113: aload_3
     114: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     117: athrow
     118: aload_2
     119: instanceof    #98                 // class scalaz/Maybe$Empty
     122: ifeq          210
     125: aload_3
     126: ifnonnull     131
     129: aconst_null
     130: athrow
     131: aload_3
     132: instanceof    #106                // class scalaz/Maybe$Just
     135: ifeq          183
     138: aload_3
     139: checkcast     #106                // class scalaz/Maybe$Just
     142: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
     145: astore        6
     147: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
     150: pop
     151: aload_1
     152: new           #42                 // class scalaz/$bslash$amp$div$That
     155: dup
     156: aload         6
     158: invokespecial #2514               // Method scalaz/$bslash$amp$div$That."<init>":(Ljava/lang/Object;)V
     161: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     166: astore        9
     168: new           #106                // class scalaz/Maybe$Just
     171: dup
     172: aload         9
     174: invokespecial #2109               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     177: aconst_null
     178: astore        9
     180: goto          206
     183: aload_3
     184: instanceof    #98                 // class scalaz/Maybe$Empty
     187: ifeq          197
     190: aload_0
     191: invokevirtual #2145               // Method empty:()Lscalaz/Maybe;
     194: goto          206
     197: new           #2147               // class scala/MatchError
     200: dup
     201: aload_3
     202: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     205: athrow
     206: checkcast     #100                // class scalaz/Maybe
     209: areturn
     210: new           #2147               // class scala/MatchError
     213: dup
     214: aload_2
     215: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     218: athrow

  public static final scalaz.$bslash$div $anonfun$pextract$1(scalaz.MaybeInstances$$anon$11);
    Code:
       0: getstatic     #2483               // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
       3: pop
       4: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       7: pop
       8: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      11: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      14: astore_1
      15: new           #2168               // class scalaz/$minus$bslash$div
      18: dup
      19: aload_1
      20: invokespecial #2484               // Method scalaz/$minus$bslash$div."<init>":(Ljava/lang/Object;)V
      23: areturn

  public static final java.lang.Object $anonfun$altly2$1(scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: getstatic     #2489               // Field scalaz/$bslash$div$minus$.MODULE$:Lscalaz/$bslash$div$minus$;
       4: pop
       5: new           #2172               // class scalaz/$bslash$div$minus
       8: dup
       9: aload_1
      10: invokespecial #2490               // Method scalaz/$bslash$div$minus."<init>":(Ljava/lang/Object;)V
      13: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: areturn

  public static final java.lang.Object $anonfun$altly2$2(scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: getstatic     #2483               // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
       4: pop
       5: new           #2168               // class scalaz/$minus$bslash$div
       8: dup
       9: aload_1
      10: invokespecial #2484               // Method scalaz/$minus$bslash$div."<init>":(Ljava/lang/Object;)V
      13: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: areturn

  public static final java.lang.Object $anonfun$apply2$2(scala.Function2, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #2235,  3         // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public static final scalaz.Maybe $anonfun$apply2$1(scala.Function0, scala.Function2, java.lang.Object);
    Code:
       0: aload_0
       1: invokeinterface #2105,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #100                // class scalaz/Maybe
       9: aload_1
      10: aload_2
      11: invokedynamic #2358,  0           // InvokeDynamic #9:apply:(Lscala/Function2;Ljava/lang/Object;)Lscala/Function1;
      16: astore        4
      18: dup
      19: ifnonnull     24
      22: aconst_null
      23: athrow
      24: astore_3
      25: aload         4
      27: invokedynamic #2180,  0           // InvokeDynamic #1:apply:()Lscala/Function1;
      32: invokeinterface #2140,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      37: astore        5
      39: aload_3
      40: instanceof    #106                // class scalaz/Maybe$Just
      43: ifeq          67
      46: aload_3
      47: checkcast     #106                // class scalaz/Maybe$Just
      50: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      53: astore        6
      55: aload         5
      57: aload         6
      59: invokeinterface #2142,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      64: goto          96
      67: aload_3
      68: instanceof    #98                 // class scalaz/Maybe$Empty
      71: ifeq          87
      74: getstatic     #2100               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      77: pop
      78: getstatic     #2159               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      81: invokevirtual #2161               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      84: goto          96
      87: new           #2147               // class scala/MatchError
      90: dup
      91: aload_3
      92: invokespecial #2148               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      95: athrow
      96: checkcast     #100                // class scalaz/Maybe
      99: areturn

  public scalaz.MaybeInstances$$anon$11(scalaz.MaybeInstances);
    Code:
       0: aload_0
       1: invokespecial #2531               // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2535               // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
       8: aload_0
       9: invokestatic  #2538               // InterfaceMethod scalaz/Functor.$init$:(Lscalaz/Functor;)V
      12: aload_0
      13: invokestatic  #2541               // InterfaceMethod scalaz/Foldable.$init$:(Lscalaz/Foldable;)V
      16: aload_0
      17: invokestatic  #2544               // InterfaceMethod scalaz/Traverse.$init$:(Lscalaz/Traverse;)V
      20: aload_0
      21: invokestatic  #2547               // InterfaceMethod scalaz/Apply.$init$:(Lscalaz/Apply;)V
      24: aload_0
      25: invokestatic  #2550               // InterfaceMethod scalaz/InvariantApplicative.$init$:(Lscalaz/InvariantApplicative;)V
      28: aload_0
      29: invokestatic  #2553               // InterfaceMethod scalaz/Applicative.$init$:(Lscalaz/Applicative;)V
      32: aload_0
      33: invokestatic  #2556               // InterfaceMethod scalaz/Bind.$init$:(Lscalaz/Bind;)V
      36: aload_0
      37: invokestatic  #2559               // InterfaceMethod scalaz/Monad.$init$:(Lscalaz/Monad;)V
      40: aload_0
      41: invokestatic  #2562               // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      44: aload_0
      45: invokestatic  #2565               // InterfaceMethod scalaz/PlusEmpty.$init$:(Lscalaz/PlusEmpty;)V
      48: aload_0
      49: invokestatic  #2568               // InterfaceMethod scalaz/ApplicativePlus.$init$:(Lscalaz/ApplicativePlus;)V
      52: aload_0
      53: invokestatic  #2571               // InterfaceMethod scalaz/MonadPlus.$init$:(Lscalaz/MonadPlus;)V
      56: aload_0
      57: invokestatic  #2574               // InterfaceMethod scalaz/InvariantAlt.$init$:(Lscalaz/InvariantAlt;)V
      60: aload_0
      61: invokestatic  #2577               // InterfaceMethod scalaz/Alt.$init$:(Lscalaz/Alt;)V
      64: aload_0
      65: invokestatic  #2580               // InterfaceMethod scalaz/BindRec.$init$:(Lscalaz/BindRec;)V
      68: aload_0
      69: invokestatic  #2583               // InterfaceMethod scalaz/Cozip.$init$:(Lscalaz/Cozip;)V
      72: aload_0
      73: invokestatic  #2586               // InterfaceMethod scalaz/Zip.$init$:(Lscalaz/Zip;)V
      76: aload_0
      77: invokestatic  #2589               // InterfaceMethod scalaz/Unzip.$init$:(Lscalaz/Unzip;)V
      80: aload_0
      81: invokestatic  #2592               // InterfaceMethod scalaz/Align.$init$:(Lscalaz/Align;)V
      84: aload_0
      85: invokestatic  #2595               // InterfaceMethod scalaz/IsEmpty.$init$:(Lscalaz/IsEmpty;)V
      88: aload_0
      89: invokestatic  #2598               // InterfaceMethod scalaz/Cobind.$init$:(Lscalaz/Cobind;)V
      92: aload_0
      93: invokestatic  #2601               // InterfaceMethod scalaz/Optional.$init$:(Lscalaz/Optional;)V
      96: invokestatic  #2606               // Method scala/runtime/Statics.releaseFence:()V
      99: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #2619,  0           // InvokeDynamic #11:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
