Compiled from "Divide.scala"
public final class scalaz.Divide$$anon$1 implements scalaz.Divide<F>.DivideLaw {
  private final scalaz.Divide $outer;

  public <A> scala.Function1<A, scala.Tuple2<A, A>> delta();
    Code:
       0: aload_0
       1: invokestatic  #33                 // InterfaceMethod scalaz/Divide$DivideLaw.delta$:(Lscalaz/Divide$DivideLaw;)Lscala/Function1;
       4: areturn

  public <A> boolean composition(F, F, F, scalaz.Equal<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #46                 // InterfaceMethod scalaz/Divide$DivideLaw.composition$:(Lscalaz/Divide$DivideLaw;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Equal;)Z
       9: ireturn

  public <A> boolean identity(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #57                 // InterfaceMethod scalaz/Contravariant$ContravariantLaw.identity$:(Lscalaz/Contravariant$ContravariantLaw;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public <A, B, C> boolean composite(java.lang.Object, scala.Function1<B, A>, scala.Function1<C, B>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #67                 // InterfaceMethod scalaz/Contravariant$ContravariantLaw.composite$:(Lscalaz/Contravariant$ContravariantLaw;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Equal;)Z
       9: ireturn

  public <A> boolean invariantIdentity(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #73                 // InterfaceMethod scalaz/InvariantFunctor$InvariantFunctorLaw.invariantIdentity$:(Lscalaz/InvariantFunctor$InvariantFunctorLaw;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public <A, B, C> boolean invariantComposite(java.lang.Object, scala.Function1<A, B>, scala.Function1<B, A>, scala.Function1<B, C>, scala.Function1<C, B>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #82                 // InterfaceMethod scalaz/InvariantFunctor$InvariantFunctorLaw.invariantComposite$:(Lscalaz/InvariantFunctor$InvariantFunctorLaw;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscala/Function1;Lscala/Function1;Lscalaz/Equal;)Z
      13: ireturn

  public scalaz.Divide scalaz$Divide$DivideLaw$$$outer();
    Code:
       0: aload_0
       1: getfield      #86                 // Field $outer:Lscalaz/Divide;
       4: areturn

  public scalaz.Contravariant scalaz$Contravariant$ContravariantLaw$$$outer();
    Code:
       0: aload_0
       1: getfield      #86                 // Field $outer:Lscalaz/Divide;
       4: areturn

  public scalaz.InvariantFunctor scalaz$InvariantFunctor$InvariantFunctorLaw$$$outer();
    Code:
       0: aload_0
       1: getfield      #86                 // Field $outer:Lscalaz/Divide;
       4: areturn

  public scalaz.Divide$$anon$1(scalaz.Divide);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #86                 // Field $outer:Lscalaz/Divide;
      11: aload_0
      12: invokespecial #95                 // Method java/lang/Object."<init>":()V
      15: return
}
