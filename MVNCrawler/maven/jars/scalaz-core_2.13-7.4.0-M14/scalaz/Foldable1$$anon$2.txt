Compiled from "Foldable1.scala"
public final class scalaz.Foldable1$$anon$2 implements scalaz.CompositionFoldable1<F, G> {
  private scalaz.syntax.Foldable1Syntax<?> foldable1Syntax;

  private scalaz.syntax.FoldableSyntax<?> foldableSyntax;

  private final scalaz.Foldable1 $outer;

  private final scalaz.Foldable1 evidence$1$1;

  public final <A, B> B foldMap1(F, scala.Function1<A, B>, scalaz.Semigroup<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #40                 // InterfaceMethod scalaz/CompositionFoldable1.foldMap1$:(Lscalaz/CompositionFoldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public final <A, B> B foldMapRight1(F, scala.Function1<A, B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #53                 // InterfaceMethod scalaz/CompositionFoldable1.foldMapRight1$:(Lscalaz/CompositionFoldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public final <A, B> B foldMapLeft1(F, scala.Function1<A, B>, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #59                 // InterfaceMethod scalaz/CompositionFoldable1.foldMapLeft1$:(Lscalaz/CompositionFoldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldRight(F, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #68                 // InterfaceMethod scalaz/CompositionFoldable.foldRight$:(Lscalaz/CompositionFoldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldMap(F, scala.Function1<A, B>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #77                 // InterfaceMethod scalaz/CompositionFoldable.foldMap$:(Lscalaz/CompositionFoldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldLeft(F, B, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #85                 // InterfaceMethod scalaz/CompositionFoldable.foldLeft$:(Lscalaz/CompositionFoldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <G> scalaz.Foldable1<?> product(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #92                 // InterfaceMethod scalaz/Foldable1.product$:(Lscalaz/Foldable1;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public <G> scalaz.Foldable1<?> compose(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #96                 // InterfaceMethod scalaz/Foldable1.compose$:(Lscalaz/Foldable1;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public <A, B> scala.Option<B> foldMap1Opt(F, scala.Function1<A, B>, scalaz.Semigroup<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #104                // InterfaceMethod scalaz/Foldable1.foldMap1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Semigroup;)Lscala/Option;
       7: areturn

  public <A> A foldRight1(F, scala.Function2<A, scala.Function0<A>, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #111                // InterfaceMethod scalaz/Foldable1.foldRight1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <A> A foldLeft1(F, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #116                // InterfaceMethod scalaz/Foldable1.foldLeft1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public final <A> A foldr1(F, scala.Function1<A, scala.Function1<scala.Function0<A>, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #123                // InterfaceMethod scalaz/Foldable1.foldr1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Option<B> foldMapRight1Opt(F, scala.Function1<A, B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #130                // InterfaceMethod scalaz/Foldable1.foldMapRight1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public <A> scala.Option<A> foldr1Opt(F, scala.Function1<A, scala.Function1<scala.Function0<A>, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #137                // InterfaceMethod scalaz/Foldable1.foldr1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final <A> A foldl1(F, scala.Function1<A, scala.Function1<A, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #142                // InterfaceMethod scalaz/Foldable1.foldl1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Option<B> foldMapLeft1Opt(F, scala.Function1<A, B>, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #147                // InterfaceMethod scalaz/Foldable1.foldMapLeft1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public <A> scala.Option<A> foldl1Opt(F, scala.Function1<A, scala.Function1<A, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #152                // InterfaceMethod scalaz/Foldable1.foldl1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public <M> M fold1(F, scalaz.Semigroup<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #160                // InterfaceMethod scalaz/Foldable1.fold1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       6: areturn

  public <G, A, B> G foldLeftM1(F, scala.Function1<A, B>, scala.Function2<B, A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #168                // InterfaceMethod scalaz/Foldable1.foldLeftM1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <G, A, B> G foldRightM1(F, scala.Function1<A, B>, scala.Function2<A, scala.Function0<B>, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #174                // InterfaceMethod scalaz/Foldable1.foldRightM1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <G, A, B> G foldlM1(F, scala.Function1<A, B>, scala.Function1<B, scala.Function1<A, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #182                // InterfaceMethod scalaz/Foldable1.foldlM1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <G, A, B> G foldrM1(F, scala.Function1<A, B>, scala.Function1<A, scala.Function1<scala.Function0<B>, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #188                // InterfaceMethod scalaz/Foldable1.foldrM1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <A> A maximum1(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #196                // InterfaceMethod scalaz/Foldable1.maximum1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Ljava/lang/Object;
       6: areturn

  public <A, B> B maximumOf1(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #205                // InterfaceMethod scalaz/Foldable1.maximumOf1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public <A, B> A maximumBy1(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #211                // InterfaceMethod scalaz/Foldable1.maximumBy1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public <A> A minimum1(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #216                // InterfaceMethod scalaz/Foldable1.minimum1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Ljava/lang/Object;
       6: areturn

  public <A, B> B minimumOf1(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #221                // InterfaceMethod scalaz/Foldable1.minimumOf1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public <A, B> A minimumBy1(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #226                // InterfaceMethod scalaz/Foldable1.minimumBy1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Option<A> maximum(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #234                // InterfaceMethod scalaz/Foldable1.maximum$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public <A, B> scala.Option<B> maximumOf(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #242                // InterfaceMethod scalaz/Foldable1.maximumOf$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A, B> scala.Option<A> maximumBy(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #248                // InterfaceMethod scalaz/Foldable1.maximumBy$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A> scala.Option<A> minimum(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #253                // InterfaceMethod scalaz/Foldable1.minimum$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public <A, B> scala.Option<B> minimumOf(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #258                // InterfaceMethod scalaz/Foldable1.minimumOf$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A, B> scala.Option<A> minimumBy(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #263                // InterfaceMethod scalaz/Foldable1.minimumBy$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A> scalaz.NonEmptyList<A> distinct1(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #271                // InterfaceMethod scalaz/Foldable1.distinct1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Lscalaz/NonEmptyList;
       6: areturn

  public <A> scalaz.NonEmptyList<A> distinctE1(F, scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #278                // InterfaceMethod scalaz/Foldable1.distinctE1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Equal;)Lscalaz/NonEmptyList;
       6: areturn

  public <A> A sumr1(F, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #284                // InterfaceMethod scalaz/Foldable1.sumr1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       6: areturn

  public <A> A suml1(F, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #288                // InterfaceMethod scalaz/Foldable1.suml1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       6: areturn

  public <G, A> G psum1(F, scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #295                // InterfaceMethod scalaz/Foldable1.psum1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Plus;)Ljava/lang/Object;
       6: areturn

  public <A, B, G> G psumMap1(F, scala.Function1<A, G>, scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #303                // InterfaceMethod scalaz/Foldable1.psumMap1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Plus;)Ljava/lang/Object;
       7: areturn

  public <G, A> G msuml1(F, scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #307                // InterfaceMethod scalaz/Foldable1.msuml1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Plus;)Ljava/lang/Object;
       6: areturn

  public <A> A intercalate1(F, A, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #315                // InterfaceMethod scalaz/Foldable1.intercalate1$:(Lscalaz/Foldable1;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public <A> A intercalate(F, A, scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #323                // InterfaceMethod scalaz/Foldable1.intercalate$:(Lscalaz/Foldable1;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public <M, A, B> M traverse1_(F, scala.Function1<A, M>, scalaz.Apply<M>, scalaz.Semigroup<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #331                // InterfaceMethod scalaz/Foldable1.traverse1_$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Apply;Lscalaz/Semigroup;)Ljava/lang/Object;
       9: areturn

  public <M, A> M sequence1_(F, scalaz.Apply<M>, scalaz.Semigroup<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #339                // InterfaceMethod scalaz/Foldable1.sequence1_$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Apply;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public final <A> boolean empty(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #346                // InterfaceMethod scalaz/Foldable1.empty$:(Lscalaz/Foldable1;Ljava/lang/Object;)Z
       5: ireturn

  public <G> scalaz.Foldable1<?> product0(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #353                // InterfaceMethod scalaz/Foldable1.product0$:(Lscalaz/Foldable1;Lscalaz/Foldable;)Lscalaz/Foldable1;
       5: areturn

  public <A> scalaz.NonEmptyList<A> toNel(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #361                // InterfaceMethod scalaz/Foldable1.toNel$:(Lscalaz/Foldable1;Ljava/lang/Object;)Lscalaz/NonEmptyList;
       5: areturn

  public <A> scalaz.NonEmptyList<A> scanLeft1(F, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #368                // InterfaceMethod scalaz/Foldable1.scanLeft1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Lscalaz/NonEmptyList;
       6: areturn

  public <A> scalaz.NonEmptyList<A> scanRight1(F, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #372                // InterfaceMethod scalaz/Foldable1.scanRight1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Lscalaz/NonEmptyList;
       6: areturn

  public scalaz.Foldable1<?>.Foldable1Law foldable1Law();
    Code:
       0: aload_0
       1: invokestatic  #379                // InterfaceMethod scalaz/Foldable1.foldable1Law$:(Lscalaz/Foldable1;)Lscalaz/Foldable1$Foldable1Law;
       4: areturn

  public <G> scalaz.Foldable<?> compose(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #384                // InterfaceMethod scalaz/Foldable.compose$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Bifoldable<?> bicompose(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #391                // InterfaceMethod scalaz/Foldable.bicompose$:(Lscalaz/Foldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public <G> scalaz.Foldable<?> product(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #394                // InterfaceMethod scalaz/Foldable.product$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Foldable1<?> product0(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #397                // InterfaceMethod scalaz/Foldable.product0$:(Lscalaz/Foldable;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public <G, A, B> G foldRightM(F, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #404                // InterfaceMethod scalaz/Foldable.foldRightM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <G, A, B> G foldLeftM(F, B, scala.Function2<B, A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #411                // InterfaceMethod scalaz/Foldable.foldLeftM$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <G, A, B> G foldMapM(F, scala.Function1<A, G>, scalaz.Monoid<B>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #419                // InterfaceMethod scalaz/Foldable.foldMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <M> M fold(F, scalaz.Monoid<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #426                // InterfaceMethod scalaz/Foldable.fold$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Option<A> fold1Opt(F, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #433                // InterfaceMethod scalaz/Foldable.fold1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public <M, A, B> M traverse_(F, scala.Function1<A, M>, scalaz.Applicative<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #440                // InterfaceMethod scalaz/Foldable.traverse_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final <A, GB> java.lang.Object traverseU_(F, scala.Function1<A, GB>, scalaz.Unapply<scalaz.Applicative, GB>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #448                // InterfaceMethod scalaz/Foldable.traverseU_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public <S, A, B> scalaz.IndexedStateT<S, S, java.lang.Object, scala.runtime.BoxedUnit> traverseS_(F, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #456                // InterfaceMethod scalaz/Foldable.traverseS_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public <M, A> M sequence_(F, scalaz.Applicative<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #463                // InterfaceMethod scalaz/Foldable.sequence_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public <S, A> scalaz.IndexedStateT<S, S, java.lang.Object, scala.runtime.BoxedUnit> sequenceS_(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #471                // InterfaceMethod scalaz/Foldable.sequenceS_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public <M, A> scalaz.Free<M, scala.runtime.BoxedUnit> sequenceF_(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #479                // InterfaceMethod scalaz/Foldable.sequenceF_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/Free;
       5: areturn

  public final <A, B> B foldr(F, scala.Function0<B>, scala.Function1<A, scala.Function1<scala.Function0<B>, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #486                // InterfaceMethod scalaz/Foldable.foldr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Option<A> foldRight1Opt(F, scala.Function2<A, scala.Function0<A>, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #493                // InterfaceMethod scalaz/Foldable.foldRight1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public final <A, B> B foldl(F, B, scala.Function1<B, scala.Function1<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #500                // InterfaceMethod scalaz/Foldable.foldl$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Option<A> foldLeft1Opt(F, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #505                // InterfaceMethod scalaz/Foldable.foldLeft1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public final <G, A, B> G foldrM(F, scala.Function0<B>, scala.Function1<A, scala.Function1<scala.Function0<B>, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #512                // InterfaceMethod scalaz/Foldable.foldrM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <G, A, B> G foldlM(F, scala.Function0<B>, scala.Function1<B, scala.Function1<A, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #517                // InterfaceMethod scalaz/Foldable.foldlM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <M, A, B> M findMapM(F, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #524                // InterfaceMethod scalaz/Foldable.findMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Option<A> findLeft(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #530                // InterfaceMethod scalaz/Foldable.findLeft$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public <A> scala.Option<A> findRight(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #534                // InterfaceMethod scalaz/Foldable.findRight$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final <A> int count(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #541                // InterfaceMethod scalaz/Foldable.count$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public <A> int length(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #545                // InterfaceMethod scalaz/Foldable.length$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public <A> scala.Option<A> index(F, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #553                // InterfaceMethod scalaz/Foldable.index$:(Lscalaz/Foldable;Ljava/lang/Object;I)Lscala/Option;
       6: areturn

  public <A> A indexOr(F, scala.Function0<A>, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #562                // InterfaceMethod scalaz/Foldable.indexOr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;I)Ljava/lang/Object;
       7: areturn

  public <A> scala.collection.immutable.List<A> toList(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #569                // InterfaceMethod scalaz/Foldable.toList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/List;
       5: areturn

  public <A> scala.collection.immutable.Vector<A> toVector(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #576                // InterfaceMethod scalaz/Foldable.toVector$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Vector;
       5: areturn

  public <A> scala.collection.immutable.Set<A> toSet(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #583                // InterfaceMethod scalaz/Foldable.toSet$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Set;
       5: areturn

  public <A> scala.collection.immutable.Stream<A> toStream(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #590                // InterfaceMethod scalaz/Foldable.toStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Stream;
       5: areturn

  public <A> scala.collection.immutable.LazyList<A> toLazyList(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #597                // InterfaceMethod scalaz/Foldable.toLazyList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/LazyList;
       5: areturn

  public <A> scalaz.IList<A> toIList(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #604                // InterfaceMethod scalaz/Foldable.toIList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IList;
       5: areturn

  public <A> scalaz.EphemeralStream<A> toEphemeralStream(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #611                // InterfaceMethod scalaz/Foldable.toEphemeralStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/EphemeralStream;
       5: areturn

  public <A> boolean all(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #619                // InterfaceMethod scalaz/Foldable.all$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public <G, A> G allM(F, scala.Function1<A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #624                // InterfaceMethod scalaz/Foldable.allM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public <A> boolean any(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #628                // InterfaceMethod scalaz/Foldable.any$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public <G, A> G anyM(F, scala.Function1<A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #632                // InterfaceMethod scalaz/Foldable.anyM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public <A> int filterLength(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #639                // InterfaceMethod scalaz/Foldable.filterLength$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)I
       6: ireturn

  public <A> scala.Option<scala.Tuple2<A, A>> extrema(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #645                // InterfaceMethod scalaz/Foldable.extrema$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public <A, B> scala.Option<scala.Tuple2<B, B>> extremaOf(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #651                // InterfaceMethod scalaz/Foldable.extremaOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A, B> scala.Option<scala.Tuple2<A, A>> extremaBy(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #656                // InterfaceMethod scalaz/Foldable.extremaBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A> A sumr(F, scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #661                // InterfaceMethod scalaz/Foldable.sumr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Option<A> sumr1Opt(F, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #665                // InterfaceMethod scalaz/Foldable.sumr1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public <A> A suml(F, scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #669                // InterfaceMethod scalaz/Foldable.suml$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Option<A> suml1Opt(F, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #673                // InterfaceMethod scalaz/Foldable.suml1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public <A, B, G> G psumMap(F, scala.Function1<A, G>, scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #680                // InterfaceMethod scalaz/Foldable.psumMap$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       7: areturn

  public <G, A> G psum(F, scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #688                // InterfaceMethod scalaz/Foldable.psum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public final <G, A> G asum(F, scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #692                // InterfaceMethod scalaz/Foldable.asum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public <A> long longDigits(F, scala.$less$colon$less<A, scalaz.Digit>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #700                // InterfaceMethod scalaz/Foldable.longDigits$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/$less$colon$less;)J
       6: lreturn

  public <A> boolean element(F, A, scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #708                // InterfaceMethod scalaz/Foldable.element$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Equal;)Z
       7: ireturn

  public <A> scala.collection.immutable.List<scalaz.NonEmptyList<A>> splitWith(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #715                // InterfaceMethod scalaz/Foldable.splitWith$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public <A, B> scalaz.IList<scala.Tuple2<B, scalaz.NonEmptyList<A>>> splitBy(F, scala.Function1<A, B>, scalaz.Equal<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #722                // InterfaceMethod scalaz/Foldable.splitBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public <A> scalaz.IList<scalaz.NonEmptyList<A>> splitByRelation(F, scala.Function2<A, A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #730                // InterfaceMethod scalaz/Foldable.splitByRelation$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscalaz/IList;
       6: areturn

  public <A> scala.collection.immutable.List<scalaz.NonEmptyList<A>> selectSplit(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #734                // InterfaceMethod scalaz/Foldable.selectSplit$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public <A> scalaz.IList<A> distinct(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #741                // InterfaceMethod scalaz/Foldable.distinct$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscalaz/IList;
       6: areturn

  public <A> scalaz.IList<A> distinctE(F, scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #748                // InterfaceMethod scalaz/Foldable.distinctE$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Equal;)Lscalaz/IList;
       6: areturn

  public <A, B> scalaz.IList<A> distinctBy(F, scala.Function1<A, B>, scalaz.Equal<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #753                // InterfaceMethod scalaz/Foldable.distinctBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public <X, A> X collapse(F, scalaz.ApplicativePlus<X>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #760                // InterfaceMethod scalaz/Foldable.collapse$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/ApplicativePlus;)Ljava/lang/Object;
       6: areturn

  public scalaz.Foldable<?>.FoldableLaw foldableLaw();
    Code:
       0: aload_0
       1: invokestatic  #768                // InterfaceMethod scalaz/Foldable.foldableLaw$:(Lscalaz/Foldable;)Lscalaz/Foldable$FoldableLaw;
       4: areturn

  public scalaz.syntax.Foldable1Syntax<?> foldable1Syntax();
    Code:
       0: aload_0
       1: getfield      #772                // Field foldable1Syntax:Lscalaz/syntax/Foldable1Syntax;
       4: areturn

  public void scalaz$Foldable1$_setter_$foldable1Syntax_$eq(scalaz.syntax.Foldable1Syntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #772                // Field foldable1Syntax:Lscalaz/syntax/Foldable1Syntax;
       5: return

  public scalaz.syntax.FoldableSyntax<?> foldableSyntax();
    Code:
       0: aload_0
       1: getfield      #780                // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       4: areturn

  public void scalaz$Foldable$_setter_$foldableSyntax_$eq(scalaz.syntax.FoldableSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #780                // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       5: return

  public scalaz.Foldable1<F> F();
    Code:
       0: aload_0
       1: getfield      #787                // Field $outer:Lscalaz/Foldable1;
       4: areturn

  public scalaz.Foldable1<G> G();
    Code:
       0: getstatic     #794                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #796                // Field evidence$1$1:Lscalaz/Foldable1;
       7: invokevirtual #800                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #10                 // class scalaz/Foldable1
      13: areturn

  public scalaz.Foldable G();
    Code:
       0: aload_0
       1: invokevirtual #803                // Method G:()Lscalaz/Foldable1;
       4: areturn

  public scalaz.Foldable F();
    Code:
       0: aload_0
       1: invokevirtual #805                // Method F:()Lscalaz/Foldable1;
       4: areturn

  public scalaz.Foldable1$$anon$2(scalaz.Foldable1, scalaz.Foldable1);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #787                // Field $outer:Lscalaz/Foldable1;
      11: aload_0
      12: aload_2
      13: putfield      #796                // Field evidence$1$1:Lscalaz/Foldable1;
      16: aload_0
      17: invokespecial #810                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #814                // InterfaceMethod scalaz/Foldable.$init$:(Lscalaz/Foldable;)V
      24: aload_0
      25: invokestatic  #817                // InterfaceMethod scalaz/Foldable1.$init$:(Lscalaz/Foldable1;)V
      28: invokestatic  #822                // Method scala/runtime/Statics.releaseFence:()V
      31: return
}
