Compiled from "Map.scala"
public final class scalaz.std.map$ implements scalaz.std.MapInstances {
  public static final scalaz.std.map$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class scalaz/std/map$
       3: dup
       4: invokespecial #14                 // Method "<init>":()V
       7: putstatic     #16                 // Field MODULE$:Lscalaz/std/map$;
      10: getstatic     #16                 // Field MODULE$:Lscalaz/std/map$;
      13: pop
      14: getstatic     #16                 // Field MODULE$:Lscalaz/std/map$;
      17: pop
      18: getstatic     #16                 // Field MODULE$:Lscalaz/std/map$;
      21: pop
      22: return

  public <K> scalaz.Traverse<?> mapInstance();
    Code:
       0: aload_0
       1: invokestatic  #23                 // InterfaceMethod scalaz/std/MapInstances.mapInstance$:(Lscalaz/std/MapInstances;)Lscalaz/Traverse;
       4: areturn

  public <K, V> scalaz.Monoid<scala.collection.immutable.Map<K, V>> mapMonoid(scalaz.Semigroup<V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #32                 // InterfaceMethod scalaz/std/MapInstances.mapMonoid$:(Lscalaz/std/MapInstances;Lscalaz/Semigroup;)Lscalaz/Monoid;
       5: areturn

  public <K, V> scalaz.Show<scala.collection.immutable.Map<K, V>> mapShow(scalaz.Show<K>, scalaz.Show<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #42                 // InterfaceMethod scalaz/std/MapInstances.mapShow$:(Lscalaz/std/MapInstances;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <K, V> scalaz.Order<scala.collection.immutable.Map<K, V>> mapOrder(scalaz.Order<K>, scalaz.Order<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #52                 // InterfaceMethod scalaz/std/MapInstances.mapOrder$:(Lscalaz/std/MapInstances;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> alter(scala.collection.immutable.Map<K, A>, K, scala.Function1<scala.Option<A>, scala.Option<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #65                 // InterfaceMethod scalaz/std/MapFunctions.alter$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A, B, C> scala.collection.immutable.Map<K, C> intersectWithKey(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, B>, scala.Function3<K, A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #77                 // InterfaceMethod scalaz/std/MapFunctions.intersectWithKey$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function3;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A, B, C> scala.collection.immutable.Map<K, C> intersectWith(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, B>, scala.Function2<A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #85                 // InterfaceMethod scalaz/std/MapFunctions.intersectWith$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function2;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, K2, A> scala.collection.immutable.Map<K2, A> mapKeys(scala.collection.immutable.Map<K, A>, scala.Function1<K, K2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #93                 // InterfaceMethod scalaz/std/MapFunctions.mapKeys$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/Function1;)Lscala/collection/immutable/Map;
       6: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> unionWithKey(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, A>, scala.Function3<K, A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #98                 // InterfaceMethod scalaz/std/MapFunctions.unionWithKey$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function3;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> unionWith(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, A>, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #103                // InterfaceMethod scalaz/std/MapFunctions.unionWith$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function2;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> insertWith(scala.collection.immutable.Map<K, A>, K, A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #111                // InterfaceMethod scalaz/std/MapFunctions.insertWith$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/immutable/Map;
       9: areturn

  public final <F, K, A> F getOrAdd(scala.collection.immutable.Map<K, A>, K, scala.Function0<F>, scalaz.Applicative<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #120                // InterfaceMethod scalaz/std/MapFunctions.getOrAdd$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Ljava/lang/Object;Lscala/Function0;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public <K, V> scalaz.Equal<scala.collection.immutable.Map<K, V>> mapEqual(scalaz.Order<K>, scalaz.Equal<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #133                // InterfaceMethod scalaz/std/MapInstances0.mapEqual$:(Lscalaz/std/MapInstances0;Lscalaz/Order;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public <K> scalaz.Foldable<?> mapFoldable();
    Code:
       0: aload_0
       1: invokestatic  #141                // InterfaceMethod scalaz/std/MapInstances0.mapFoldable$:(Lscalaz/std/MapInstances0;)Lscalaz/Foldable;
       4: areturn

  public <K, V> scalaz.Band<scala.collection.immutable.Map<K, V>> mapBand(scalaz.Band<V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #148                // InterfaceMethod scalaz/std/MapInstances0.mapBand$:(Lscalaz/std/MapInstances0;Lscalaz/Band;)Lscalaz/Band;
       5: areturn

  private scalaz.std.map$();
    Code:
       0: aload_0
       1: invokespecial #150                // Method java/lang/Object."<init>":()V
       4: return
}
