Compiled from "Iterable.scala"
public final class scalaz.std.iterable$ implements scalaz.std.IterableInstances {
  public static final scalaz.std.iterable$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class scalaz/std/iterable$
       3: dup
       4: invokespecial #14                 // Method "<init>":()V
       7: putstatic     #16                 // Field MODULE$:Lscalaz/std/iterable$;
      10: getstatic     #16                 // Field MODULE$:Lscalaz/std/iterable$;
      13: pop
      14: return

  public <CC extends scala.collection.Iterable<java.lang.Object>, A> scalaz.Show<CC> iterableShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // InterfaceMethod scalaz/std/IterableInstances.iterableShow$:(Lscalaz/std/IterableInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<scala.collection.Iterable<A>> iterableOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #34                 // InterfaceMethod scalaz/std/IterableInstances.iterableOrder$:(Lscalaz/std/IterableInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <CC extends scala.collection.Iterable<java.lang.Object>, A> scalaz.Equal<CC> iterableEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #43                 // InterfaceMethod scalaz/std/IterableInstances.iterableEqual$:(Lscalaz/std/IterableInstances;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <I extends scala.collection.Iterable<java.lang.Object>> scalaz.Foldable<I> iterableSubtypeFoldable();
    Code:
       0: aload_0
       1: invokestatic  #51                 // InterfaceMethod scalaz/std/IterableInstances.iterableSubtypeFoldable$:(Lscalaz/std/IterableInstances;)Lscalaz/Foldable;
       4: areturn

  private scalaz.std.iterable$();
    Code:
       0: aload_0
       1: invokespecial #52                 // Method java/lang/Object."<init>":()V
       4: return
}
