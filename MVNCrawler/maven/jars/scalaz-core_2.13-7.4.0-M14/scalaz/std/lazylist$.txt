Compiled from "LazyList.scala"
public final class scalaz.std.lazylist$ implements scalaz.std.LazyListInstances,scalaz.std.LazyListFunctions {
  public static final scalaz.std.lazylist$ MODULE$;

  private static scalaz.Traverse<scala.collection.immutable.LazyList> lazylistInstance;

  private static scalaz.Applicative<?> lazylistZipApplicative;

  public static {};
    Code:
       0: new           #2                  // class scalaz/std/lazylist$
       3: dup
       4: invokespecial #22                 // Method "<init>":()V
       7: putstatic     #24                 // Field MODULE$:Lscalaz/std/lazylist$;
      10: getstatic     #24                 // Field MODULE$:Lscalaz/std/lazylist$;
      13: invokestatic  #28                 // InterfaceMethod scalaz/std/LazyListInstances.$init$:(Lscalaz/std/LazyListInstances;)V
      16: getstatic     #24                 // Field MODULE$:Lscalaz/std/lazylist$;
      19: pop
      20: return

  public final <A> scala.collection.immutable.LazyList<A> interleave(scala.collection.immutable.LazyList<A>, scala.collection.immutable.LazyList<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #37                 // InterfaceMethod scalaz/std/LazyListFunctions.interleave$:(Lscalaz/std/LazyListFunctions;Lscala/collection/immutable/LazyList;Lscala/collection/immutable/LazyList;)Lscala/collection/immutable/LazyList;
       6: areturn

  public final <A> scalaz.Maybe<scalaz.Zipper<A>> toZipper(scala.collection.immutable.LazyList<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #47                 // InterfaceMethod scalaz/std/LazyListFunctions.toZipper$:(Lscalaz/std/LazyListFunctions;Lscala/collection/immutable/LazyList;)Lscalaz/Maybe;
       5: areturn

  public final <A> scalaz.Maybe<scalaz.Zipper<A>> zipperEnd(scala.collection.immutable.LazyList<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #51                 // InterfaceMethod scalaz/std/LazyListFunctions.zipperEnd$:(Lscalaz/std/LazyListFunctions;Lscala/collection/immutable/LazyList;)Lscalaz/Maybe;
       5: areturn

  public final <A> scala.collection.immutable.LazyList<scala.collection.immutable.LazyList<A>> heads(scala.collection.immutable.LazyList<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #58                 // InterfaceMethod scalaz/std/LazyListFunctions.heads$:(Lscalaz/std/LazyListFunctions;Lscala/collection/immutable/LazyList;)Lscala/collection/immutable/LazyList;
       5: areturn

  public final <A> scala.collection.immutable.LazyList<scala.collection.immutable.LazyList<A>> tails(scala.collection.immutable.LazyList<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #62                 // InterfaceMethod scalaz/std/LazyListFunctions.tails$:(Lscalaz/std/LazyListFunctions;Lscala/collection/immutable/LazyList;)Lscala/collection/immutable/LazyList;
       5: areturn

  public final <A, B, C> scala.collection.immutable.LazyList<scala.Function1<B, C>> zapp(scala.collection.immutable.LazyList<A>, scala.collection.immutable.LazyList<scala.Function1<A, scala.Function1<B, C>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/std/LazyListFunctions.zapp$:(Lscalaz/std/LazyListFunctions;Lscala/collection/immutable/LazyList;Lscala/collection/immutable/LazyList;)Lscala/collection/immutable/LazyList;
       6: areturn

  public final <A, B> scala.collection.immutable.LazyList<scalaz.Tree<B>> unfoldForest(scala.collection.immutable.LazyList<A>, scala.Function1<A, scala.Tuple2<B, scala.Function0<scala.collection.immutable.LazyList<A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #76                 // InterfaceMethod scalaz/std/LazyListFunctions.unfoldForest$:(Lscalaz/std/LazyListFunctions;Lscala/collection/immutable/LazyList;Lscala/Function1;)Lscala/collection/immutable/LazyList;
       6: areturn

  public final <A, B, M> M unfoldForestM(scala.collection.immutable.LazyList<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #85                 // InterfaceMethod scalaz/std/LazyListFunctions.unfoldForestM$:(Lscalaz/std/LazyListFunctions;Lscala/collection/immutable/LazyList;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public final <A> scala.collection.immutable.LazyList<A> intersperse(scala.collection.immutable.LazyList<A>, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #93                 // InterfaceMethod scalaz/std/LazyListFunctions.intersperse$:(Lscalaz/std/LazyListFunctions;Lscala/collection/immutable/LazyList;Ljava/lang/Object;)Lscala/collection/immutable/LazyList;
       6: areturn

  public <A, B> scala.collection.immutable.LazyList<B> unfold(A, scala.Function1<A, scala.Option<scala.Tuple2<B, A>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #102                // InterfaceMethod scalaz/std/LazyListFunctions.unfold$:(Lscalaz/std/LazyListFunctions;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/LazyList;
       6: areturn

  public <A, B> scala.collection.immutable.LazyList<B> unfoldm(A, scala.Function1<A, scalaz.Maybe<scala.Tuple2<B, A>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #107                // InterfaceMethod scalaz/std/LazyListFunctions.unfoldm$:(Lscalaz/std/LazyListFunctions;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/LazyList;
       6: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.LazyList<A>> lazylistMonoid();
    Code:
       0: aload_0
       1: invokestatic  #114                // InterfaceMethod scalaz/std/LazyListInstances.lazylistMonoid$:(Lscalaz/std/LazyListInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Equal<scala.collection.immutable.LazyList<A>> lazylistEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #122                // InterfaceMethod scalaz/std/LazyListInstances.lazylistEqual$:(Lscalaz/std/LazyListInstances;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.LazyList<A>> lazylistOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #130                // InterfaceMethod scalaz/std/LazyListInstances.lazylistOrder$:(Lscalaz/std/LazyListInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Show<scala.collection.immutable.LazyList<A>> lazylistShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #138                // InterfaceMethod scalaz/std/LazyListInstances.lazylistShow$:(Lscalaz/std/LazyListInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public scalaz.Traverse<scala.collection.immutable.LazyList> lazylistInstance();
    Code:
       0: getstatic     #143                // Field lazylistInstance:Lscalaz/Traverse;
       3: areturn

  public scalaz.Applicative<?> lazylistZipApplicative();
    Code:
       0: getstatic     #147                // Field lazylistZipApplicative:Lscalaz/Applicative;
       3: areturn

  public void scalaz$std$LazyListInstances$_setter_$lazylistInstance_$eq(scalaz.Traverse<scala.collection.immutable.LazyList>);
    Code:
       0: aload_1
       1: putstatic     #143                // Field lazylistInstance:Lscalaz/Traverse;
       4: return

  public void scalaz$std$LazyListInstances$_setter_$lazylistZipApplicative_$eq(scalaz.Applicative<?>);
    Code:
       0: aload_1
       1: putstatic     #147                // Field lazylistZipApplicative:Lscalaz/Applicative;
       4: return

  private scalaz.std.lazylist$();
    Code:
       0: aload_0
       1: invokespecial #155                // Method java/lang/Object."<init>":()V
       4: return
}
