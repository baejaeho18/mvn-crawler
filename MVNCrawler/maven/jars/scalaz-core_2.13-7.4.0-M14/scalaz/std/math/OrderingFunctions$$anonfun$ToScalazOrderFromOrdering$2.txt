Compiled from "OrderingInstances.scala"
public final class scalaz.std.math.OrderingFunctions$$anonfun$ToScalazOrderFromOrdering$2 implements scalaz.Order<A> {
  private scalaz.syntax.OrderSyntax<A> orderSyntax;

  private scalaz.syntax.EqualSyntax<A> equalSyntax;

  private final scalaz.std.math.OrderingFunctions $outer;

  private final scala.math.Ordering oa$1;

  public scalaz.Ordering apply(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #40                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean equal(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #50                 // InterfaceMethod scalaz/Order.equal$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThan(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #54                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #58                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #62                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #66                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public A max(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #73                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public A min(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2<A, A> sort(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #84                 // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #92                 // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<A> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #100                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<A> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #107                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<A>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #114                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #120                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<A>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #127                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<A> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #131                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<A>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #131                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<A> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #139                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<A>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #139                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public final scalaz.Ordering order(A, A);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: getfield      #145                // Field oa$1:Lscala/math/Ordering;
       6: invokestatic  #149                // InterfaceMethod scalaz/std/math/OrderingFunctions.scalaz$std$math$OrderingFunctions$$$anonfun$ToScalazOrderFromOrdering$1:(Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Ordering;)Lscalaz/Ordering;
       9: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #152                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scalaz.std.math.OrderingFunctions$$anonfun$ToScalazOrderFromOrdering$2(scalaz.std.math.OrderingFunctions, scala.math.Ordering);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #156                // Field $outer:Lscalaz/std/math/OrderingFunctions;
      11: aload_0
      12: aload_2
      13: putfield      #145                // Field oa$1:Lscala/math/Ordering;
      16: aload_0
      17: invokespecial #159                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #163                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      24: aload_0
      25: invokestatic  #166                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      28: invokestatic  #171                // Method scala/runtime/Statics.releaseFence:()V
      31: return
}
