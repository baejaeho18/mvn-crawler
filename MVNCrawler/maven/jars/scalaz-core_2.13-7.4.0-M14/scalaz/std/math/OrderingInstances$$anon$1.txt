Compiled from "OrderingInstances.scala"
public final class scalaz.std.math.OrderingInstances$$anon$1 implements scalaz.Monoid<scala.math.Ordering<A>> {
  private scalaz.syntax.MonoidSyntax<scala.math.Ordering<A>> monoidSyntax;

  private scalaz.syntax.SemigroupSyntax<scala.math.Ordering<A>> semigroupSyntax;

  public java.lang.Object multiply(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #39                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #51                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final java.lang.Object ifEmpty(java.lang.Object, scala.Function0, scala.Function0, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #60                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object onNotEmpty(java.lang.Object, scala.Function0, scalaz.Equal, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #69                 // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object onEmpty(java.lang.Object, scala.Function0, scalaz.Equal, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #74                 // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object unfoldlSum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #81                 // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object unfoldrSum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #86                 // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #93                 // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #100                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<scala.math.Ordering<A>>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #107                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public java.lang.Object multiply1(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #112                // InterfaceMethod scalaz/Semigroup.multiply1$:(Lscalaz/Semigroup;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<scala.math.Ordering<A>> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, scala.math.Ordering<A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #119                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<scala.math.Ordering<A>> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<scala.math.Ordering<A>, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #124                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #131                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #138                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<scala.math.Ordering<A>>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #145                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.MonoidSyntax<scala.math.Ordering<A>> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #149                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<scala.math.Ordering<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #149                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<scala.math.Ordering<A>> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #157                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<scala.math.Ordering<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #157                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public scala.math.Ordering<A> append(scala.math.Ordering<A>, scala.Function0<scala.math.Ordering<A>>);
    Code:
       0: new           #23                 // class scalaz/std/math/OrderingInstances$$anon$1$$anonfun$append$2
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #169                // Method scalaz/std/math/OrderingInstances$$anon$1$$anonfun$append$2."<init>":(Lscalaz/std/math/OrderingInstances$$anon$1;Lscala/math/Ordering;Lscala/Function0;)V
      10: areturn

  public scala.math.Ordering<A> zero();
    Code:
       0: new           #25                 // class scalaz/std/math/OrderingInstances$$anon$1$$anonfun$zero$2
       3: dup
       4: aload_0
       5: invokespecial #176                // Method scalaz/std/math/OrderingInstances$$anon$1$$anonfun$zero$2."<init>":(Lscalaz/std/math/OrderingInstances$$anon$1;)V
       8: areturn

  public java.lang.Object zero();
    Code:
       0: aload_0
       1: invokevirtual #179                // Method zero:()Lscala/math/Ordering;
       4: areturn

  public java.lang.Object append(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #182                // class scala/math/Ordering
       5: aload_2
       6: invokevirtual #184                // Method append:(Lscala/math/Ordering;Lscala/Function0;)Lscala/math/Ordering;
       9: areturn

  public static final int scalaz$std$math$OrderingInstances$$nestedInanon$1$$$anonfun$append$1(java.lang.Object, java.lang.Object, scala.math.Ordering, scala.Function0);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #194,  3          // InterfaceMethod scala/math/Ordering.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
       8: istore        4
      10: iload         4
      12: tableswitch   { // 0 to 0
                     0: 32
               default: 49
          }
      32: aload_3
      33: invokeinterface #198,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      38: checkcast     #182                // class scala/math/Ordering
      41: aload_0
      42: aload_1
      43: invokeinterface #194,  3          // InterfaceMethod scala/math/Ordering.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
      48: ireturn
      49: iload         4
      51: ireturn

  public static final int scalaz$std$math$OrderingInstances$$nestedInanon$1$$$anonfun$zero$1(java.lang.Object, java.lang.Object);
    Code:
       0: iconst_0
       1: ireturn

  public scalaz.std.math.OrderingInstances$$anon$1(scalaz.std.math.OrderingInstances);
    Code:
       0: aload_0
       1: invokespecial #204                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #208                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
       8: aload_0
       9: invokestatic  #211                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      12: invokestatic  #216                // Method scala/runtime/Statics.releaseFence:()V
      15: return
}
