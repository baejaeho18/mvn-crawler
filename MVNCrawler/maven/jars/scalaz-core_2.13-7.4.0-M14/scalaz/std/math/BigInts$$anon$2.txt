Compiled from "BigInt.scala"
public final class scalaz.std.math.BigInts$$anon$2 implements scalaz.Monoid<java.lang.Object>, scalaz.Order<java.lang.Object>, scalaz.Show<java.lang.Object> {
  private scalaz.syntax.ShowSyntax<java.lang.Object> showSyntax;

  private scalaz.syntax.OrderSyntax<java.lang.Object> orderSyntax;

  private scalaz.syntax.EqualSyntax<java.lang.Object> equalSyntax;

  private scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax;

  private scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax;

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #86                 // InterfaceMethod scalaz/Order.equal$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #90                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #98                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #102                // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #108                // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #112                // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2<java.lang.Object, java.lang.Object> sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #119                // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #127                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<java.lang.Object> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #135                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<java.lang.Object> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #142                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<java.lang.Object>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #149                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #155                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<java.lang.Object>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #162                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public java.lang.Object multiply(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #170                // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #180                // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty(java.lang.Object, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #189                // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #199                // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #205                // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <S> java.lang.Object unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #213                // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S> java.lang.Object unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #218                // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #225                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #232                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<java.lang.Object>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #239                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public java.lang.Object multiply1(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #244                // InterfaceMethod scalaz/Semigroup.multiply1$:(Lscalaz/Semigroup;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #251                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #256                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #263                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #268                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<java.lang.Object>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #275                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.ShowSyntax<java.lang.Object> showSyntax();
    Code:
       0: aload_0
       1: getfield      #279                // Field showSyntax:Lscalaz/syntax/ShowSyntax;
       4: areturn

  public void scalaz$Show$_setter_$showSyntax_$eq(scalaz.syntax.ShowSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #279                // Field showSyntax:Lscalaz/syntax/ShowSyntax;
       5: return

  public scalaz.syntax.OrderSyntax<java.lang.Object> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #287                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #287                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<java.lang.Object> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #294                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #294                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #301                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #301                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #308                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #308                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public scalaz.Cord show(java.lang.Object);
    Code:
       0: getstatic     #319                // Field scalaz/Cord$.MODULE$:Lscalaz/Cord$;
       3: pop
       4: aload_1
       5: invokevirtual #323                // Method java/lang/Object.toString:()Ljava/lang/String;
       8: astore_2
       9: getstatic     #326                // Field scalaz/Cord$Leaf$.MODULE$:Lscalaz/Cord$Leaf$;
      12: aload_2
      13: invokevirtual #329                // Method scalaz/Cord$Leaf$.apply:(Ljava/lang/String;)Lscalaz/Cord$Leaf;
      16: areturn

  public java.lang.String shows(java.lang.Object);
    Code:
       0: aload_1
       1: invokevirtual #323                // Method java/lang/Object.toString:()Ljava/lang/String;
       4: areturn

  public java.lang.Object append(java.lang.Object, scala.Function0<java.lang.Object>);
    Code:
       0: getstatic     #343                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #347                // Method scalaz/Tags$.Multiplication:()Lscalaz/Tag$TagOf;
       6: getstatic     #352                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       9: invokevirtual #356                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      12: aload_1
      13: invokevirtual #362                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #364                // class scala/math/BigInt
      19: getstatic     #352                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      22: aload_2
      23: invokeinterface #369,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      28: astore_3
      29: invokevirtual #356                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      32: aload_3
      33: invokevirtual #362                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      36: aconst_null
      37: astore_3
      38: checkcast     #364                // class scala/math/BigInt
      41: invokevirtual #373                // Method scala/math/BigInt.$times:(Lscala/math/BigInt;)Lscala/math/BigInt;
      44: astore        4
      46: ifnonnull     51
      49: aconst_null
      50: athrow
      51: getstatic     #352                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      54: invokevirtual #356                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      57: aload         4
      59: invokevirtual #375                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      62: areturn

  public java.lang.Object zero();
    Code:
       0: getstatic     #343                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #347                // Method scalaz/Tags$.Multiplication:()Lscalaz/Tag$TagOf;
       6: getstatic     #383                // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
       9: iconst_1
      10: invokevirtual #387                // Method scala/math/BigInt$.int2bigInt:(I)Lscala/math/BigInt;
      13: astore_1
      14: ifnonnull     19
      17: aconst_null
      18: athrow
      19: getstatic     #352                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      22: invokevirtual #356                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      25: aload_1
      26: invokevirtual #375                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      29: areturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: getstatic     #352                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: invokevirtual #356                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
       6: aload_1
       7: invokevirtual #362                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #390                // class scala/math/Ordered
      13: getstatic     #352                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      16: invokevirtual #356                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      19: aload_2
      20: invokevirtual #362                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      23: invokeinterface #394,  2          // InterfaceMethod scala/math/Ordered.$less:(Ljava/lang/Object;)Z
      28: ifeq          35
      31: getstatic     #397                // Field scalaz/Ordering$LT$.MODULE$:Lscalaz/Ordering$LT$;
      34: areturn
      35: getstatic     #352                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      38: invokevirtual #356                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      41: aload_1
      42: invokevirtual #362                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      45: getstatic     #352                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      48: invokevirtual #356                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      51: aload_2
      52: invokevirtual #362                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      55: invokestatic  #402                // Method scala/runtime/BoxesRunTime.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      58: ifeq          65
      61: getstatic     #405                // Field scalaz/Ordering$EQ$.MODULE$:Lscalaz/Ordering$EQ$;
      64: areturn
      65: getstatic     #408                // Field scalaz/Ordering$GT$.MODULE$:Lscalaz/Ordering$GT$;
      68: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #411                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scalaz.std.math.BigInts$$anon$2(scalaz.std.math.BigInts);
    Code:
       0: aload_0
       1: invokespecial #417                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #421                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
       8: aload_0
       9: invokestatic  #424                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      12: aload_0
      13: invokestatic  #427                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      16: aload_0
      17: invokestatic  #430                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      20: aload_0
      21: invokestatic  #433                // InterfaceMethod scalaz/Show.$init$:(Lscalaz/Show;)V
      24: invokestatic  #438                // Method scala/runtime/Statics.releaseFence:()V
      27: return
}
