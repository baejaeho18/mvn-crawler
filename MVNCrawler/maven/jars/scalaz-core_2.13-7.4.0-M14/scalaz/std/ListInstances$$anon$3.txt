Compiled from "List.scala"
public final class scalaz.std.ListInstances$$anon$3 implements scalaz.std.ListOrder<A> {
  private scalaz.syntax.OrderSyntax<scala.collection.immutable.List<A>> orderSyntax;

  private scalaz.syntax.EqualSyntax<scala.collection.immutable.List<A>> equalSyntax;

  private final scalaz.Order A0$2;

  public final scalaz.Ordering order(scala.collection.immutable.List<A>, scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #40                 // InterfaceMethod scalaz/std/ListOrder.order$:(Lscalaz/std/ListOrder;Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Lscalaz/Ordering;
       6: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #51                 // InterfaceMethod scalaz/std/ListEqual.equalIsNatural$:(Lscalaz/std/ListEqual;)Z
       4: ireturn

  public boolean equal(scala.collection.immutable.List<A>, scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #58                 // InterfaceMethod scalaz/std/ListEqual.equal$:(Lscalaz/std/ListEqual;Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Z
       6: ireturn

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #66                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #73                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #81                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #85                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #91                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #95                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #101                // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scala.collection.immutable.List<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #109                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scala.collection.immutable.List<A>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #117                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scala.collection.immutable.List<A>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #123                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scala.collection.immutable.List<A>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #130                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public scalaz.Equal<scala.collection.immutable.List<A>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #137                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<scala.collection.immutable.List<A>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #141                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scala.collection.immutable.List<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #141                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scala.collection.immutable.List<A>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #149                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scala.collection.immutable.List<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #149                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Order<A> A();
    Code:
       0: aload_0
       1: getfield      #156                // Field A0$2:Lscalaz/Order;
       4: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #159                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #161                // class scala/collection/immutable/List
       5: aload_2
       6: checkcast     #161                // class scala/collection/immutable/List
       9: invokevirtual #163                // Method equal:(Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #161                // class scala/collection/immutable/List
       5: aload_2
       6: checkcast     #161                // class scala/collection/immutable/List
       9: invokevirtual #165                // Method order:(Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Lscalaz/Ordering;
      12: areturn

  public scalaz.Equal A();
    Code:
       0: aload_0
       1: invokevirtual #168                // Method A:()Lscalaz/Order;
       4: areturn

  public scalaz.std.ListInstances$$anon$3(scalaz.std.ListInstances, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #156                // Field A0$2:Lscalaz/Order;
       5: aload_0
       6: invokespecial #174                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #178                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      13: aload_0
      14: invokestatic  #181                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      17: invokestatic  #186                // Method scala/runtime/Statics.releaseFence:()V
      20: return
}
