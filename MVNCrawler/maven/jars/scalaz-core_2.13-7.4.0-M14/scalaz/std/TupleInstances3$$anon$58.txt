Compiled from "Tuple.scala"
public final class scalaz.std.TupleInstances3$$anon$58 implements scalaz.std.Tuple1Order<A1> {
  private boolean equalIsNatural;

  private scalaz.syntax.OrderSyntax<scala.Tuple1<A1>> orderSyntax;

  private scalaz.syntax.EqualSyntax<scala.Tuple1<A1>> equalSyntax;

  private final scalaz.Order A1$41;

  public scalaz.Ordering order(scala.Tuple1<A1>, scala.Tuple1<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #42                 // InterfaceMethod scalaz/std/Tuple1Order.order$:(Lscalaz/std/Tuple1Order;Lscala/Tuple1;Lscala/Tuple1;)Lscalaz/Ordering;
       6: areturn

  public boolean equal(scala.Tuple1<A1>, scala.Tuple1<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #54                 // InterfaceMethod scalaz/std/Tuple1Equal.equal$:(Lscalaz/std/Tuple1Equal;Lscala/Tuple1;Lscala/Tuple1;)Z
       6: ireturn

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #62                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #73                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #81                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #87                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #91                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #97                 // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scala.Tuple1<A1>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #105                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scala.Tuple1<A1>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #113                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scala.Tuple1<A1>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #119                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scala.Tuple1<A1>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #126                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public scalaz.Equal<scala.Tuple1<A1>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #133                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: getfield      #136                // Field equalIsNatural:Z
       4: ireturn

  public void scalaz$std$Tuple1Equal$_setter_$equalIsNatural_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #136                // Field equalIsNatural:Z
       5: return

  public scalaz.syntax.OrderSyntax<scala.Tuple1<A1>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #143                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scala.Tuple1<A1>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #143                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scala.Tuple1<A1>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #150                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scala.Tuple1<A1>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #150                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Order<A1> _1();
    Code:
       0: aload_0
       1: getfield      #157                // Field A1$41:Lscalaz/Order;
       4: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #160                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #162                // class scala/Tuple1
       5: aload_2
       6: checkcast     #162                // class scala/Tuple1
       9: invokevirtual #164                // Method equal:(Lscala/Tuple1;Lscala/Tuple1;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #162                // class scala/Tuple1
       5: aload_2
       6: checkcast     #162                // class scala/Tuple1
       9: invokevirtual #166                // Method order:(Lscala/Tuple1;Lscala/Tuple1;)Lscalaz/Ordering;
      12: areturn

  public scalaz.Equal _1();
    Code:
       0: aload_0
       1: invokevirtual #169                // Method _1:()Lscalaz/Order;
       4: areturn

  public scalaz.std.TupleInstances3$$anon$58(scalaz.std.TupleInstances3, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #157                // Field A1$41:Lscalaz/Order;
       5: aload_0
       6: invokespecial #175                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #179                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      13: aload_0
      14: invokestatic  #182                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      17: aload_0
      18: invokestatic  #185                // InterfaceMethod scalaz/std/Tuple1Equal.$init$:(Lscalaz/std/Tuple1Equal;)V
      21: invokestatic  #190                // Method scala/runtime/Statics.releaseFence:()V
      24: return
}
