Compiled from "PartialFunction.scala"
public final class scalaz.std.PartialFunctionInstances$$anon$1 implements scalaz.Arrow<scala.PartialFunction>, scalaz.Choice<scala.PartialFunction> {
  public final scala.PartialFunction<java.lang.Object, java.lang.Object> scalaz$std$PartialFunctionInstances$$anon$$fallback_pf;

  private scalaz.syntax.ChoiceSyntax<scala.PartialFunction> choiceSyntax;

  private scalaz.syntax.ArrowSyntax<scala.PartialFunction> arrowSyntax;

  private scalaz.syntax.CategorySyntax<scala.PartialFunction> categorySyntax;

  private scalaz.syntax.StrongSyntax<scala.PartialFunction> strongSyntax;

  private scalaz.syntax.ProfunctorSyntax<scala.PartialFunction> profunctorSyntax;

  private scalaz.syntax.SplitSyntax<scala.PartialFunction> splitSyntax;

  private scalaz.syntax.ComposeSyntax<scala.PartialFunction> composeSyntax;

  public java.lang.Object codiagonal();
    Code:
       0: aload_0
       1: invokestatic  #76                 // InterfaceMethod scalaz/Choice.codiagonal$:(Lscalaz/Choice;)Ljava/lang/Object;
       4: areturn

  public <C> scalaz.Applicative<?> covariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #85                 // InterfaceMethod scalaz/Arrow.covariantInstance$:(Lscalaz/Arrow;)Lscalaz/Applicative;
       4: areturn

  public final java.lang.Object $less$less$less(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #93                 // InterfaceMethod scalaz/Arrow.$less$less$less$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object $greater$greater$greater(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #98                 // InterfaceMethod scalaz/Arrow.$greater$greater$greater$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object swap();
    Code:
       0: aload_0
       1: invokestatic  #103                // InterfaceMethod scalaz/Arrow.swap$:(Lscalaz/Arrow;)Ljava/lang/Object;
       4: areturn

  public java.lang.Object second(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #110                // InterfaceMethod scalaz/Arrow.second$:(Lscalaz/Arrow;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public final java.lang.Object splitA(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #115                // InterfaceMethod scalaz/Arrow.splitA$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object product(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #119                // InterfaceMethod scalaz/Arrow.product$:(Lscalaz/Arrow;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object combine(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #124                // InterfaceMethod scalaz/Arrow.combine$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object mapfst(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #130                // InterfaceMethod scalaz/Arrow.mapfst$:(Lscalaz/Arrow;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object mapsnd(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #135                // InterfaceMethod scalaz/Arrow.mapsnd$:(Lscalaz/Arrow;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public scalaz.PlusEmpty<?> empty();
    Code:
       0: aload_0
       1: invokestatic  #142                // InterfaceMethod scalaz/Category.empty$:(Lscalaz/Category;)Lscalaz/PlusEmpty;
       4: areturn

  public <A> scalaz.Monoid<scala.PartialFunction<A, A>> monoid();
    Code:
       0: aload_0
       1: invokestatic  #149                // InterfaceMethod scalaz/Category.monoid$:(Lscalaz/Category;)Lscalaz/Monoid;
       4: areturn

  public scalaz.Category<scala.PartialFunction>.CategoryLaw categoryLaw();
    Code:
       0: aload_0
       1: invokestatic  #156                // InterfaceMethod scalaz/Category.categoryLaw$:(Lscalaz/Category;)Lscalaz/Category$CategoryLaw;
       4: areturn

  public scalaz.Strong<scala.PartialFunction>.StrongLaws strongLaw();
    Code:
       0: aload_0
       1: invokestatic  #163                // InterfaceMethod scalaz/Strong.strongLaw$:(Lscalaz/Strong;)Lscalaz/Strong$StrongLaws;
       4: areturn

  public java.lang.Object dimap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #170                // InterfaceMethod scalaz/Profunctor.dimap$:(Lscalaz/Profunctor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scalaz.InvariantFunctor<?> invariantFunctor();
    Code:
       0: aload_0
       1: invokestatic  #177                // InterfaceMethod scalaz/Profunctor.invariantFunctor$:(Lscalaz/Profunctor;)Lscalaz/InvariantFunctor;
       4: areturn

  public <C> scalaz.Contravariant<?> contravariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #184                // InterfaceMethod scalaz/Profunctor.contravariantInstance$:(Lscalaz/Profunctor;)Lscalaz/Contravariant;
       4: areturn

  public scalaz.Profunctor<scala.PartialFunction>.ProfunctorLaw profunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #191                // InterfaceMethod scalaz/Profunctor.profunctorLaw$:(Lscalaz/Profunctor;)Lscalaz/Profunctor$ProfunctorLaw;
       4: areturn

  public scalaz.Plus<?> plus();
    Code:
       0: aload_0
       1: invokestatic  #198                // InterfaceMethod scalaz/Compose.plus$:(Lscalaz/Compose;)Lscalaz/Plus;
       4: areturn

  public <A> scalaz.Semigroup<scala.PartialFunction<A, A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #205                // InterfaceMethod scalaz/Compose.semigroup$:(Lscalaz/Compose;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Compose<scala.PartialFunction>.ComposeLaw composeLaw();
    Code:
       0: aload_0
       1: invokestatic  #212                // InterfaceMethod scalaz/Compose.composeLaw$:(Lscalaz/Compose;)Lscalaz/Compose$ComposeLaw;
       4: areturn

  public scalaz.syntax.ChoiceSyntax<scala.PartialFunction> choiceSyntax();
    Code:
       0: aload_0
       1: getfield      #216                // Field choiceSyntax:Lscalaz/syntax/ChoiceSyntax;
       4: areturn

  public void scalaz$Choice$_setter_$choiceSyntax_$eq(scalaz.syntax.ChoiceSyntax<scala.PartialFunction>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #216                // Field choiceSyntax:Lscalaz/syntax/ChoiceSyntax;
       5: return

  public scalaz.syntax.ArrowSyntax<scala.PartialFunction> arrowSyntax();
    Code:
       0: aload_0
       1: getfield      #224                // Field arrowSyntax:Lscalaz/syntax/ArrowSyntax;
       4: areturn

  public void scalaz$Arrow$_setter_$arrowSyntax_$eq(scalaz.syntax.ArrowSyntax<scala.PartialFunction>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #224                // Field arrowSyntax:Lscalaz/syntax/ArrowSyntax;
       5: return

  public scalaz.syntax.CategorySyntax<scala.PartialFunction> categorySyntax();
    Code:
       0: aload_0
       1: getfield      #231                // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       4: areturn

  public void scalaz$Category$_setter_$categorySyntax_$eq(scalaz.syntax.CategorySyntax<scala.PartialFunction>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #231                // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       5: return

  public scalaz.syntax.StrongSyntax<scala.PartialFunction> strongSyntax();
    Code:
       0: aload_0
       1: getfield      #238                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       4: areturn

  public void scalaz$Strong$_setter_$strongSyntax_$eq(scalaz.syntax.StrongSyntax<scala.PartialFunction>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #238                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       5: return

  public scalaz.syntax.ProfunctorSyntax<scala.PartialFunction> profunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #245                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       4: areturn

  public void scalaz$Profunctor$_setter_$profunctorSyntax_$eq(scalaz.syntax.ProfunctorSyntax<scala.PartialFunction>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #245                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       5: return

  public scalaz.syntax.SplitSyntax<scala.PartialFunction> splitSyntax();
    Code:
       0: aload_0
       1: getfield      #252                // Field splitSyntax:Lscalaz/syntax/SplitSyntax;
       4: areturn

  public void scalaz$Split$_setter_$splitSyntax_$eq(scalaz.syntax.SplitSyntax<scala.PartialFunction>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #252                // Field splitSyntax:Lscalaz/syntax/SplitSyntax;
       5: return

  public scalaz.syntax.ComposeSyntax<scala.PartialFunction> composeSyntax();
    Code:
       0: aload_0
       1: getfield      #259                // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       4: areturn

  public void scalaz$Compose$_setter_$composeSyntax_$eq(scalaz.syntax.ComposeSyntax<scala.PartialFunction>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #259                // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       5: return

  public <A, B> scala.PartialFunction<A, B> arr(scala.Function1<A, B>);
    Code:
       0: new           #38                 // class scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$arr$1
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #269                // Method scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$arr$1."<init>":(Lscalaz/std/PartialFunctionInstances$$anon$1;Lscala/Function1;)V
       9: areturn

  public <B> scala.PartialFunction<java.lang.Object, B> scalaz$std$PartialFunctionInstances$$anon$$checkFallback();
    Code:
       0: aload_0
       1: getfield      #274                // Field scalaz$std$PartialFunctionInstances$$anon$$fallback_pf:Lscala/PartialFunction;
       4: areturn

  public <B> boolean scalaz$std$PartialFunctionInstances$$anon$$fallbackOccurred(B);
    Code:
       0: aload_0
       1: getfield      #274                // Field scalaz$std$PartialFunctionInstances$$anon$$fallback_pf:Lscala/PartialFunction;
       4: aload_1
       5: if_acmpne     10
       8: iconst_1
       9: ireturn
      10: iconst_0
      11: ireturn

  public <A, B, C> scala.PartialFunction<A, C> compose(scala.PartialFunction<B, C>, scala.PartialFunction<A, B>);
    Code:
       0: new           #34                 // class scalaz/std/PartialFunctionInstances$$anon$1$$anon$2
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #284                // Method scalaz/std/PartialFunctionInstances$$anon$1$$anon$2."<init>":(Lscalaz/std/PartialFunctionInstances$$anon$1;Lscala/PartialFunction;Lscala/PartialFunction;)V
      10: areturn

  public <A> scala.PartialFunction<A, A> id();
    Code:
       0: new           #44                 // class scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$id$1
       3: dup
       4: aconst_null
       5: invokespecial #289                // Method scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$id$1."<init>":(Lscalaz/std/PartialFunctionInstances$$anon$1;)V
       8: areturn

  public <A, B, C> scala.PartialFunction<scalaz.$bslash$div<A, B>, C> choice(scala.Function0<scala.PartialFunction<A, C>>, scala.Function0<scala.PartialFunction<B, C>>);
    Code:
       0: new           #40                 // class scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$choice$1
       3: dup
       4: aconst_null
       5: aload_1
       6: aload_2
       7: invokespecial #295                // Method scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$choice$1."<init>":(Lscalaz/std/PartialFunctionInstances$$anon$1;Lscala/Function0;Lscala/Function0;)V
      10: areturn

  public <A, B, C, D> scala.PartialFunction<scala.Tuple2<A, C>, scala.Tuple2<B, D>> split(scala.PartialFunction<A, B>, scala.PartialFunction<C, D>);
    Code:
       0: new           #46                 // class scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$split$1
       3: dup
       4: aconst_null
       5: aload_1
       6: aload_2
       7: invokespecial #299                // Method scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$split$1."<init>":(Lscalaz/std/PartialFunctionInstances$$anon$1;Lscala/PartialFunction;Lscala/PartialFunction;)V
      10: areturn

  public <A, B, C> scala.PartialFunction<scala.Tuple2<A, C>, scala.Tuple2<B, C>> first(scala.PartialFunction<A, B>);
    Code:
       0: new           #42                 // class scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$first$1
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #305                // Method scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$first$1."<init>":(Lscalaz/std/PartialFunctionInstances$$anon$1;Lscala/PartialFunction;)V
       9: areturn

  public scalaz.Functor covariantInstance();
    Code:
       0: aload_0
       1: invokevirtual #308                // Method covariantInstance:()Lscalaz/Applicative;
       4: areturn

  public java.lang.Object first(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #311                // class scala/PartialFunction
       5: invokevirtual #313                // Method first:(Lscala/PartialFunction;)Lscala/PartialFunction;
       8: areturn

  public java.lang.Object split(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #311                // class scala/PartialFunction
       5: aload_2
       6: checkcast     #311                // class scala/PartialFunction
       9: invokevirtual #315                // Method split:(Lscala/PartialFunction;Lscala/PartialFunction;)Lscala/PartialFunction;
      12: areturn

  public java.lang.Object choice(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #318                // Method choice:(Lscala/Function0;Lscala/Function0;)Lscala/PartialFunction;
       6: areturn

  public java.lang.Object id();
    Code:
       0: aload_0
       1: invokevirtual #320                // Method id:()Lscala/PartialFunction;
       4: areturn

  public java.lang.Object compose(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #311                // class scala/PartialFunction
       5: aload_2
       6: checkcast     #311                // class scala/PartialFunction
       9: invokevirtual #322                // Method compose:(Lscala/PartialFunction;Lscala/PartialFunction;)Lscala/PartialFunction;
      12: areturn

  public java.lang.Object arr(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #325                // Method arr:(Lscala/Function1;)Lscala/PartialFunction;
       5: areturn

  public scalaz.std.PartialFunctionInstances$$anon$1(scalaz.std.PartialFunctionInstances);
    Code:
       0: aload_0
       1: invokespecial #330                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #334                // InterfaceMethod scalaz/Compose.$init$:(Lscalaz/Compose;)V
       8: aload_0
       9: invokestatic  #339                // InterfaceMethod scalaz/Split.$init$:(Lscalaz/Split;)V
      12: aload_0
      13: invokestatic  #342                // InterfaceMethod scalaz/Profunctor.$init$:(Lscalaz/Profunctor;)V
      16: aload_0
      17: invokestatic  #345                // InterfaceMethod scalaz/Strong.$init$:(Lscalaz/Strong;)V
      20: aload_0
      21: invokestatic  #348                // InterfaceMethod scalaz/Category.$init$:(Lscalaz/Category;)V
      24: aload_0
      25: invokestatic  #351                // InterfaceMethod scalaz/Arrow.$init$:(Lscalaz/Arrow;)V
      28: aload_0
      29: invokestatic  #354                // InterfaceMethod scalaz/Choice.$init$:(Lscalaz/Choice;)V
      32: aload_0
      33: new           #36                 // class scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$1
      36: dup
      37: aload_0
      38: invokespecial #355                // Method scalaz/std/PartialFunctionInstances$$anon$1$$anonfun$1."<init>":(Lscalaz/std/PartialFunctionInstances$$anon$1;)V
      41: putfield      #274                // Field scalaz$std$PartialFunctionInstances$$anon$$fallback_pf:Lscala/PartialFunction;
      44: invokestatic  #360                // Method scala/runtime/Statics.releaseFence:()V
      47: return
}
