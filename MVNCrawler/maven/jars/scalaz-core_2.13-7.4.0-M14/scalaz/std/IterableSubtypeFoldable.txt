Compiled from "Iterable.scala"
public interface scalaz.std.IterableSubtypeFoldable<I extends scala.collection.Iterable<java.lang.Object>> extends scalaz.Foldable<I> {
  public static java.lang.Object foldMap$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable, scala.Function1, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #26                 // InterfaceMethod foldMap:(Lscala/collection/Iterable;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public default <A, B> B foldMap(I, scala.Function1<A, B>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: invokeinterface #37,  1           // InterfaceMethod scalaz/Monoid.zero:()Ljava/lang/Object;
       8: aload_3
       9: aload_2
      10: invokedynamic #56,  0             // InvokeDynamic #0:apply:(Lscalaz/Monoid;Lscala/Function1;)Lscala/Function2;
      15: invokeinterface #60,  4           // InterfaceMethod foldLeft:(Lscala/collection/Iterable;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
      20: areturn

  public static java.lang.Object foldRight$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable, scala.Function0, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #68                 // InterfaceMethod foldRight:(Lscala/collection/Iterable;Lscala/Function0;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public default <A, B> B foldRight(I, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #75,  1           // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       7: aload_3
       8: invokedynamic #83,  0             // InvokeDynamic #1:apply:(Lscala/Function2;)Lscala/Function2;
      13: invokeinterface #88,  3           // InterfaceMethod scala/collection/Iterable.foldRight:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
      18: areturn

  public static java.lang.Object foldLeft$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #60                 // InterfaceMethod foldLeft:(Lscala/collection/Iterable;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public default <A, B> B foldLeft(I, B, scala.Function2<B, A, B>);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokeinterface #94,  3           // InterfaceMethod scala/collection/Iterable.foldLeft:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       8: areturn

  public static int length$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #101                // InterfaceMethod length:(Lscala/collection/Iterable;)I
       5: ireturn

  public default <A> int length(I);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: invokeinterface #106,  1          // InterfaceMethod scala/collection/Iterable.iterator:()Lscala/collection/Iterator;
       8: astore_3
       9: aload_3
      10: invokeinterface #112,  1          // InterfaceMethod scala/collection/Iterator.hasNext:()Z
      15: ifeq          31
      18: iinc          2, 1
      21: aload_3
      22: invokeinterface #115,  1          // InterfaceMethod scala/collection/Iterator.next:()Ljava/lang/Object;
      27: pop
      28: goto          9
      31: iload_2
      32: ireturn

  public static scala.collection.immutable.List toList$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #125                // InterfaceMethod toList:(Lscala/collection/Iterable;)Lscala/collection/immutable/List;
       5: areturn

  public default <A> scala.collection.immutable.List<A> toList(I);
    Code:
       0: aload_1
       1: invokeinterface #129,  1          // InterfaceMethod scala/collection/Iterable.toList:()Lscala/collection/immutable/List;
       6: areturn

  public static scala.collection.immutable.Vector toVector$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #135                // InterfaceMethod toVector:(Lscala/collection/Iterable;)Lscala/collection/immutable/Vector;
       5: areturn

  public default <A> scala.collection.immutable.Vector<A> toVector(I);
    Code:
       0: aload_1
       1: invokeinterface #139,  1          // InterfaceMethod scala/collection/Iterable.toVector:()Lscala/collection/immutable/Vector;
       6: areturn

  public static scala.collection.immutable.Set toSet$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #145                // InterfaceMethod toSet:(Lscala/collection/Iterable;)Lscala/collection/immutable/Set;
       5: areturn

  public default <A> scala.collection.immutable.Set<A> toSet(I);
    Code:
       0: aload_1
       1: invokeinterface #149,  1          // InterfaceMethod scala/collection/Iterable.toSet:()Lscala/collection/immutable/Set;
       6: areturn

  public static scala.collection.immutable.LazyList toLazyList$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #155                // InterfaceMethod toLazyList:(Lscala/collection/Iterable;)Lscala/collection/immutable/LazyList;
       5: areturn

  public default <A> scala.collection.immutable.LazyList<A> toLazyList(I);
    Code:
       0: aload_1
       1: getstatic     #162                // Field scala/collection/IterableFactory$.MODULE$:Lscala/collection/IterableFactory$;
       4: getstatic     #167                // Field scala/package$.MODULE$:Lscala/package$;
       7: invokevirtual #171                // Method scala/package$.LazyList:()Lscala/collection/immutable/LazyList$;
      10: invokevirtual #175                // Method scala/collection/IterableFactory$.toFactory:(Lscala/collection/IterableFactory;)Lscala/collection/Factory;
      13: invokeinterface #179,  2          // InterfaceMethod scala/collection/Iterable.to:(Lscala/collection/Factory;)Ljava/lang/Object;
      18: checkcast     #181                // class scala/collection/immutable/LazyList
      21: areturn

  public static boolean empty$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #187                // InterfaceMethod empty:(Lscala/collection/Iterable;)Z
       5: ireturn

  public default <A> boolean empty(I);
    Code:
       0: aload_1
       1: invokeinterface #191,  1          // InterfaceMethod scala/collection/Iterable.isEmpty:()Z
       6: ireturn

  public static boolean any$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #198                // InterfaceMethod any:(Lscala/collection/Iterable;Lscala/Function1;)Z
       6: ireturn

  public default <A> boolean any(I, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #203,  2          // InterfaceMethod scala/collection/Iterable.exists:(Lscala/Function1;)Z
       7: ireturn

  public static boolean all$(scalaz.std.IterableSubtypeFoldable, scala.collection.Iterable, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #207                // InterfaceMethod all:(Lscala/collection/Iterable;Lscala/Function1;)Z
       6: ireturn

  public default <A> boolean all(I, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #210,  2          // InterfaceMethod scala/collection/Iterable.forall:(Lscala/Function1;)Z
       7: ireturn

  public static java.lang.Object $anonfun$foldMap$2(scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #219,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public static java.lang.Object $anonfun$foldMap$1(scalaz.Monoid, scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: getstatic     #227                // Field scalaz/Monoid$.MODULE$:Lscalaz/Monoid$;
       3: pop
       4: aload_0
       5: aload_2
       6: aload_1
       7: aload_3
       8: invokedynamic #234,  0            // InvokeDynamic #2:apply:(Lscala/Function1;Ljava/lang/Object;)Lscala/Function0;
      13: invokeinterface #238,  3          // InterfaceMethod scalaz/Monoid.append:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      18: areturn

  public static java.lang.Object $anonfun$foldRight$2(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  public static java.lang.Object $anonfun$foldRight$1(scala.Function2, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #249,  0            // InvokeDynamic #3:apply:(Ljava/lang/Object;)Lscala/Function0;
       8: invokeinterface #253,  3          // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public static void $init$(scalaz.std.IterableSubtypeFoldable);
    Code:
       0: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #267,  0            // InvokeDynamic #4:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
