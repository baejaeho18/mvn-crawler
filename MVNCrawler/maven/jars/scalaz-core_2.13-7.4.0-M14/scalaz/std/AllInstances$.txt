Compiled from "AllInstances.scala"
public final class scalaz.std.AllInstances$ implements scalaz.std.AllInstances {
  public static final scalaz.std.AllInstances$ MODULE$;

  private static scalaz.Order<java.time.LocalDateTime> localDateTimeInstance;

  private static scalaz.Order<java.time.OffsetDateTime> offsetDateTimeInstance;

  private static scalaz.Order<java.time.OffsetTime> offsetTimeInstance;

  private static scalaz.Order<java.time.ZonedDateTime> zonedDateTime;

  private static scalaz.Order<java.time.ZoneOffset> zoneOffsetInstance;

  private static scalaz.Enum<java.time.DayOfWeek> dayOfWeekInstance;

  private static scalaz.Order<java.time.Instant> instantInstance;

  private static scalaz.Monoid<java.time.Duration> durationInstance;

  private static scalaz.Monoid<java.time.Period> periodInstance;

  private static scalaz.Enum<java.time.YearMonth> yearMonthInstance;

  private static scalaz.Order<java.time.MonthDay> monthDayInstance;

  private static scalaz.Order<java.time.LocalTime> localTimeInstance;

  private static scalaz.Enum<java.time.Year> yearInstance;

  private static scalaz.Enum<java.time.LocalDate> localDateInstance;

  private static scalaz.Enum<java.time.Month> monthInstance;

  private static scalaz.Monad<java.util.concurrent.Callable> callableMonad;

  private static scalaz.Monoid<java.math.BigInteger> bigIntegerInstance;

  private static scalaz.Monoid<java.lang.Object> bigIntegerMultiplication;

  private static scalaz.Show<java.math.BigDecimal> javaBigDecimalInstance;

  private static scalaz.Bitraverse<java.util.Map$Entry> mapEntryBitraverse;

  private static scalaz.Monoid<scala.math.BigInt> bigIntInstance;

  private static scalaz.Monoid<java.lang.Object> bigIntMultiplication;

  private static scalaz.Monoid<scala.math.BigDecimal> bigDecimalInstance;

  private static scalaz.Monoid<java.lang.Object> BigDecimalMultiplicationNewType;

  private static scalaz.Category<scala.$less$colon$less> $less$colon$less;

  private static scalaz.Category<scala.$eq$colon$eq> $eq$colon$eq;

  private static scalaz.Arrow<scala.PartialFunction> partialFunctionInstance;

  private static scalaz.Bitraverse<scala.util.Either> eitherInstance;

  private static scalaz.Traverse<scala.collection.immutable.Vector> vectorInstance;

  private static scalaz.Cozip<scala.Tuple1> tuple1Cozip;

  private static scalaz.Bitraverse<scala.Tuple2> tuple2Bitraverse;

  private static scalaz.Associative<scala.Tuple2> tuple2Associative;

  private static scalaz.Traverse<scala.Tuple1> tuple1Instance;

  private static scalaz.Traverse<scala.collection.immutable.LazyList> lazylistInstance;

  private static scalaz.Applicative<?> lazylistZipApplicative;

  private static scalaz.Traverse<scala.collection.immutable.Stream> streamInstance;

  private static scalaz.Applicative<?> streamZipApplicative;

  private static scalaz.Monoid<java.lang.String> stringInstance;

  private static scalaz.Foldable<scala.collection.immutable.Set> setInstance;

  private static scalaz.Traverse<scala.Option> optionInstance;

  private static scalaz.Traverse<scala.collection.immutable.List> listInstance;

  private static scalaz.Traverse<scala.Function0> function0Instance;

  private static scalaz.Arrow<scala.Function1> function1Instance;

  private static scalaz.Monoid<scala.runtime.BoxedUnit> unitInstance;

  private static volatile scalaz.std.AnyValInstances$booleanInstance$ booleanInstance$module;

  private static scalaz.Monoid<java.lang.Object> booleanDisjunctionNewTypeInstance;

  private static scalaz.Monoid<java.lang.Object> booleanConjunctionNewTypeInstance;

  private static scalaz.Monoid<java.lang.Object> byteInstance;

  private static scalaz.Monoid<java.lang.Object> byteMultiplicationNewType;

  private static scalaz.Monoid<java.lang.Object> char;

  private static scalaz.Monoid<java.lang.Object> charMultiplicationNewType;

  private static scalaz.Monoid<java.lang.Object> shortInstance;

  private static scalaz.Monoid<java.lang.Object> shortMultiplicationNewType;

  private static scalaz.Monoid<java.lang.Object> intInstance;

  private static scalaz.Monoid<java.lang.Object> intMultiplicationNewType;

  private static scalaz.Monoid<java.lang.Object> longInstance;

  private static scalaz.Monoid<java.lang.Object> longMultiplicationNewType;

  private static scalaz.Order<java.lang.Object> floatInstance;

  private static scalaz.Order<java.lang.Object> doubleInstance;

  public static {};
    Code:
       0: new           #2                  // class scalaz/std/AllInstances$
       3: dup
       4: invokespecial #139                // Method "<init>":()V
       7: putstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      10: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      13: invokestatic  #145                // InterfaceMethod scalaz/std/AnyValInstances.$init$:(Lscalaz/std/AnyValInstances;)V
      16: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      19: pop
      20: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      23: pop
      24: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      27: invokestatic  #150                // InterfaceMethod scalaz/std/FunctionInstances.$init$:(Lscalaz/std/FunctionInstances;)V
      30: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      33: pop
      34: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      37: invokestatic  #155                // InterfaceMethod scalaz/std/ListInstances.$init$:(Lscalaz/std/ListInstances;)V
      40: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      43: pop
      44: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      47: pop
      48: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      51: pop
      52: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      55: pop
      56: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      59: pop
      60: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      63: pop
      64: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      67: pop
      68: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      71: pop
      72: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      75: invokestatic  #160                // InterfaceMethod scalaz/std/OptionInstances.$init$:(Lscalaz/std/OptionInstances;)V
      78: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      81: invokestatic  #165                // InterfaceMethod scalaz/std/SetInstances.$init$:(Lscalaz/std/SetInstances;)V
      84: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      87: invokestatic  #170                // InterfaceMethod scalaz/std/StringInstances.$init$:(Lscalaz/std/StringInstances;)V
      90: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      93: invokestatic  #175                // InterfaceMethod scalaz/std/StreamInstances.$init$:(Lscalaz/std/StreamInstances;)V
      96: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
      99: invokestatic  #180                // InterfaceMethod scalaz/std/LazyListInstances.$init$:(Lscalaz/std/LazyListInstances;)V
     102: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     105: pop
     106: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     109: pop
     110: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     113: invokestatic  #185                // InterfaceMethod scalaz/std/TupleInstances2.$init$:(Lscalaz/std/TupleInstances2;)V
     116: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     119: invokestatic  #190                // InterfaceMethod scalaz/std/TupleInstances3.$init$:(Lscalaz/std/TupleInstances3;)V
     122: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     125: pop
     126: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     129: invokestatic  #195                // InterfaceMethod scalaz/std/VectorInstances.$init$:(Lscalaz/std/VectorInstances;)V
     132: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     135: pop
     136: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     139: pop
     140: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     143: pop
     144: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     147: invokestatic  #200                // InterfaceMethod scalaz/std/EitherInstances.$init$:(Lscalaz/std/EitherInstances;)V
     150: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     153: invokestatic  #205                // InterfaceMethod scalaz/std/PartialFunctionInstances.$init$:(Lscalaz/std/PartialFunctionInstances;)V
     156: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     159: invokestatic  #210                // InterfaceMethod scalaz/std/TypeConstraintInstances.$init$:(Lscalaz/std/TypeConstraintInstances;)V
     162: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     165: invokestatic  #215                // InterfaceMethod scalaz/std/math/BigDecimalInstances.$init$:(Lscalaz/std/math/BigDecimalInstances;)V
     168: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     171: invokestatic  #220                // InterfaceMethod scalaz/std/math/BigInts.$init$:(Lscalaz/std/math/BigInts;)V
     174: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     177: pop
     178: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     181: invokestatic  #225                // InterfaceMethod scalaz/std/java/util/MapInstances.$init$:(Lscalaz/std/java/util/MapInstances;)V
     184: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     187: invokestatic  #230                // InterfaceMethod scalaz/std/java/math/BigDecimalInstances.$init$:(Lscalaz/std/java/math/BigDecimalInstances;)V
     190: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     193: invokestatic  #235                // InterfaceMethod scalaz/std/java/math/BigIntegerInstances.$init$:(Lscalaz/std/java/math/BigIntegerInstances;)V
     196: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     199: pop
     200: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     203: invokestatic  #240                // InterfaceMethod scalaz/std/java/util/concurrent/CallableInstances.$init$:(Lscalaz/std/java/util/concurrent/CallableInstances;)V
     206: getstatic     #141                // Field MODULE$:Lscalaz/std/AllInstances$;
     209: invokestatic  #245                // InterfaceMethod scalaz/std/java/TimeInstances.$init$:(Lscalaz/std/java/TimeInstances;)V
     212: return

  public <A> scalaz.Order<java.util.concurrent.Callable<A>> callableOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #253                // InterfaceMethod scalaz/std/java/util/concurrent/CallableInstances.callableOrder$:(Lscalaz/std/java/util/concurrent/CallableInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <E extends java.lang.Enum<E>> scalaz.Enum<E> enumInstance(scala.reflect.ClassTag<E>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #263                // InterfaceMethod scalaz/std/java/EnumInstances.enumInstance$:(Lscalaz/std/java/EnumInstances;Lscala/reflect/ClassTag;)Lscalaz/Enum;
       5: areturn

  public <A> scalaz.Monoid<scala.math.Ordering<A>> orderingMonoid();
    Code:
       0: aload_0
       1: invokestatic  #273                // InterfaceMethod scalaz/std/math/OrderingInstances.orderingMonoid$:(Lscalaz/std/math/OrderingInstances;)Lscalaz/Monoid;
       4: areturn

  public <L> scalaz.Traverse<?> eitherMonad();
    Code:
       0: aload_0
       1: invokestatic  #280                // InterfaceMethod scalaz/std/EitherInstances.eitherMonad$:(Lscalaz/std/EitherInstances;)Lscalaz/Traverse;
       4: areturn

  public <A, B> scalaz.Order<scala.util.Either<A, B>> eitherOrder(scalaz.Order<A>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #289                // InterfaceMethod scalaz/std/EitherInstances.eitherOrder$:(Lscalaz/std/EitherInstances;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public scalaz.Associative<scala.util.Either> eitherAssociative();
    Code:
       0: aload_0
       1: invokestatic  #296                // InterfaceMethod scalaz/std/EitherInstances.eitherAssociative$:(Lscalaz/std/EitherInstances;)Lscalaz/Associative;
       4: areturn

  public <A, B> scalaz.Show<scala.util.Either<A, B>> eitherShow(scalaz.Show<A>, scalaz.Show<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #305                // InterfaceMethod scalaz/std/EitherInstances.eitherShow$:(Lscalaz/std/EitherInstances;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <A, B> scalaz.Equal<scala.util.Either<A, B>> eitherEqual(scalaz.Equal<A>, scalaz.Equal<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #316                // InterfaceMethod scalaz/std/EitherInstances0.eitherEqual$:(Lscalaz/std/EitherInstances0;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public scalaz.Comonad<scala.concurrent.Future> futureComonad(scala.concurrent.duration.Duration, scala.concurrent.ExecutionContext);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #328                // InterfaceMethod scalaz/std/FutureInstances.futureComonad$:(Lscalaz/std/FutureInstances;Lscala/concurrent/duration/Duration;Lscala/concurrent/ExecutionContext;)Lscalaz/Comonad;
       6: areturn

  public <A> scalaz.Monoid<scala.concurrent.Future<A>> futureMonoid(scalaz.Monoid<A>, scala.concurrent.ExecutionContext);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #339                // InterfaceMethod scalaz/std/FutureInstances.futureMonoid$:(Lscalaz/std/FutureInstances;Lscalaz/Monoid;Lscala/concurrent/ExecutionContext;)Lscalaz/Monoid;
       6: areturn

  public scalaz.Nondeterminism<scala.concurrent.Future> futureInstance(scala.concurrent.ExecutionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #348                // InterfaceMethod scalaz/std/FutureInstances1.futureInstance$:(Lscalaz/std/FutureInstances1;Lscala/concurrent/ExecutionContext;)Lscalaz/Nondeterminism;
       5: areturn

  public <A> scalaz.Semigroup<scala.concurrent.Future<A>> futureSemigroup(scalaz.Semigroup<A>, scala.concurrent.ExecutionContext);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #356                // InterfaceMethod scalaz/std/FutureInstances1.futureSemigroup$:(Lscalaz/std/FutureInstances1;Lscalaz/Semigroup;Lscala/concurrent/ExecutionContext;)Lscalaz/Semigroup;
       6: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.Vector<A>> vectorMonoid();
    Code:
       0: aload_0
       1: invokestatic  #363                // InterfaceMethod scalaz/std/VectorInstances.vectorMonoid$:(Lscalaz/std/VectorInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<scala.collection.immutable.Vector<A>> vectorShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #370                // InterfaceMethod scalaz/std/VectorInstances.vectorShow$:(Lscalaz/std/VectorInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.Vector<A>> vectorOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #376                // InterfaceMethod scalaz/std/VectorInstances.vectorOrder$:(Lscalaz/std/VectorInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Equal<scala.collection.immutable.Vector<A>> vectorEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #385                // InterfaceMethod scalaz/std/VectorInstances0.vectorEqual$:(Lscalaz/std/VectorInstances0;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A1> scalaz.Show<scala.Tuple1<A1>> tuple1Show(scalaz.Show<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #392                // InterfaceMethod scalaz/std/TupleInstances3.tuple1Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A1, A2> scalaz.Show<scala.Tuple2<A1, A2>> tuple2Show(scalaz.Show<A1>, scalaz.Show<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #399                // InterfaceMethod scalaz/std/TupleInstances3.tuple2Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <A1, A2, A3> scalaz.Show<scala.Tuple3<A1, A2, A3>> tuple3Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #407                // InterfaceMethod scalaz/std/TupleInstances3.tuple3Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Show<scala.Tuple4<A1, A2, A3, A4>> tuple4Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #415                // InterfaceMethod scalaz/std/TupleInstances3.tuple4Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Show<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>, scalaz.Show<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #423                // InterfaceMethod scalaz/std/TupleInstances3.tuple5Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Show<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>, scalaz.Show<A5>, scalaz.Show<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #431                // InterfaceMethod scalaz/std/TupleInstances3.tuple6Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Show<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>, scalaz.Show<A5>, scalaz.Show<A6>, scalaz.Show<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #439                // InterfaceMethod scalaz/std/TupleInstances3.tuple7Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Show<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>, scalaz.Show<A5>, scalaz.Show<A6>, scalaz.Show<A7>, scalaz.Show<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #447                // InterfaceMethod scalaz/std/TupleInstances3.tuple8Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
      17: areturn

  public <A1> scalaz.Order<scala.Tuple1<A1>> tuple1Order(scalaz.Order<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #453                // InterfaceMethod scalaz/std/TupleInstances3.tuple1Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A1, A2> scalaz.Order<scala.Tuple2<A1, A2>> tuple2Order(scalaz.Order<A1>, scalaz.Order<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #459                // InterfaceMethod scalaz/std/TupleInstances3.tuple2Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public <A1, A2, A3> scalaz.Order<scala.Tuple3<A1, A2, A3>> tuple3Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #466                // InterfaceMethod scalaz/std/TupleInstances3.tuple3Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Order<scala.Tuple4<A1, A2, A3, A4>> tuple4Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #473                // InterfaceMethod scalaz/std/TupleInstances3.tuple4Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Order<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>, scalaz.Order<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #480                // InterfaceMethod scalaz/std/TupleInstances3.tuple5Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Order<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>, scalaz.Order<A5>, scalaz.Order<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #487                // InterfaceMethod scalaz/std/TupleInstances3.tuple6Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Order<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>, scalaz.Order<A5>, scalaz.Order<A6>, scalaz.Order<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #494                // InterfaceMethod scalaz/std/TupleInstances3.tuple7Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Order<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>, scalaz.Order<A5>, scalaz.Order<A6>, scalaz.Order<A7>, scalaz.Order<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #501                // InterfaceMethod scalaz/std/TupleInstances3.tuple8Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
      17: areturn

  public <A1> scalaz.Cozip<?> tuple2Cozip();
    Code:
       0: aload_0
       1: invokestatic  #508                // InterfaceMethod scalaz/std/TupleInstances3.tuple2Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2> scalaz.Cozip<?> tuple3Cozip();
    Code:
       0: aload_0
       1: invokestatic  #513                // InterfaceMethod scalaz/std/TupleInstances3.tuple3Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3> scalaz.Cozip<?> tuple4Cozip();
    Code:
       0: aload_0
       1: invokestatic  #518                // InterfaceMethod scalaz/std/TupleInstances3.tuple4Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3, A4> scalaz.Cozip<?> tuple5Cozip();
    Code:
       0: aload_0
       1: invokestatic  #523                // InterfaceMethod scalaz/std/TupleInstances3.tuple5Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3, A4, A5> scalaz.Cozip<?> tuple6Cozip();
    Code:
       0: aload_0
       1: invokestatic  #528                // InterfaceMethod scalaz/std/TupleInstances3.tuple6Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Cozip<?> tuple7Cozip();
    Code:
       0: aload_0
       1: invokestatic  #533                // InterfaceMethod scalaz/std/TupleInstances3.tuple7Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Cozip<?> tuple8Cozip();
    Code:
       0: aload_0
       1: invokestatic  #538                // InterfaceMethod scalaz/std/TupleInstances3.tuple8Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1> scalaz.Monad<?> tuple2Monad(scalaz.Monoid<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #545                // InterfaceMethod scalaz/std/TupleInstances3.tuple2Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;)Lscalaz/Monad;
       5: areturn

  public <A1, A2> scalaz.Monad<?> tuple3Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #552                // InterfaceMethod scalaz/std/TupleInstances3.tuple3Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
       6: areturn

  public <A1, A2, A3> scalaz.Monad<?> tuple4Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #559                // InterfaceMethod scalaz/std/TupleInstances3.tuple4Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Monad<?> tuple5Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #566                // InterfaceMethod scalaz/std/TupleInstances3.tuple5Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Monad<?> tuple6Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #573                // InterfaceMethod scalaz/std/TupleInstances3.tuple6Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Monad<?> tuple7Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #580                // InterfaceMethod scalaz/std/TupleInstances3.tuple7Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Monad<?> tuple8Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>, scalaz.Monoid<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #587                // InterfaceMethod scalaz/std/TupleInstances3.tuple8Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
      15: areturn

  public <A1> scalaz.SemiLattice<scala.Tuple1<A1>> tuple1SemiLattice(scalaz.SemiLattice<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #594                // InterfaceMethod scalaz/std/TupleInstances3.tuple1SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       5: areturn

  public <A1, A2> scalaz.SemiLattice<scala.Tuple2<A1, A2>> tuple2SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #602                // InterfaceMethod scalaz/std/TupleInstances3.tuple2SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       6: areturn

  public <A1, A2, A3> scalaz.SemiLattice<scala.Tuple3<A1, A2, A3>> tuple3SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #609                // InterfaceMethod scalaz/std/TupleInstances3.tuple3SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       7: areturn

  public <A1, A2, A3, A4> scalaz.SemiLattice<scala.Tuple4<A1, A2, A3, A4>> tuple4SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #616                // InterfaceMethod scalaz/std/TupleInstances3.tuple4SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.SemiLattice<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>, scalaz.SemiLattice<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #623                // InterfaceMethod scalaz/std/TupleInstances3.tuple5SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.SemiLattice<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>, scalaz.SemiLattice<A5>, scalaz.SemiLattice<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #630                // InterfaceMethod scalaz/std/TupleInstances3.tuple6SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.SemiLattice<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>, scalaz.SemiLattice<A5>, scalaz.SemiLattice<A6>, scalaz.SemiLattice<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #637                // InterfaceMethod scalaz/std/TupleInstances3.tuple7SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.SemiLattice<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>, scalaz.SemiLattice<A5>, scalaz.SemiLattice<A6>, scalaz.SemiLattice<A7>, scalaz.SemiLattice<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #644                // InterfaceMethod scalaz/std/TupleInstances3.tuple8SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
      17: areturn

  public <A1> scalaz.Band<scala.Tuple1<A1>> tuple1Band(scalaz.Band<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #651                // InterfaceMethod scalaz/std/TupleInstances2.tuple1Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;)Lscalaz/Band;
       5: areturn

  public <A1, A2> scalaz.Band<scala.Tuple2<A1, A2>> tuple2Band(scalaz.Band<A1>, scalaz.Band<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #659                // InterfaceMethod scalaz/std/TupleInstances2.tuple2Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
       6: areturn

  public <A1, A2, A3> scalaz.Band<scala.Tuple3<A1, A2, A3>> tuple3Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #666                // InterfaceMethod scalaz/std/TupleInstances2.tuple3Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Band<scala.Tuple4<A1, A2, A3, A4>> tuple4Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #673                // InterfaceMethod scalaz/std/TupleInstances2.tuple4Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Band<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>, scalaz.Band<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #680                // InterfaceMethod scalaz/std/TupleInstances2.tuple5Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Band<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>, scalaz.Band<A5>, scalaz.Band<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #687                // InterfaceMethod scalaz/std/TupleInstances2.tuple6Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Band<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>, scalaz.Band<A5>, scalaz.Band<A6>, scalaz.Band<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #694                // InterfaceMethod scalaz/std/TupleInstances2.tuple7Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Band<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>, scalaz.Band<A5>, scalaz.Band<A6>, scalaz.Band<A7>, scalaz.Band<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #701                // InterfaceMethod scalaz/std/TupleInstances2.tuple8Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
      17: areturn

  public <A1> scalaz.BindRec<?> tuple2BindRec(scalaz.Semigroup<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #709                // InterfaceMethod scalaz/std/TupleInstances2.tuple2BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;)Lscalaz/BindRec;
       5: areturn

  public <A1, A2> scalaz.BindRec<?> tuple3BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #718                // InterfaceMethod scalaz/std/TupleInstances2.tuple3BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
       6: areturn

  public <A1, A2, A3> scalaz.BindRec<?> tuple4BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #728                // InterfaceMethod scalaz/std/TupleInstances2.tuple4BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
       7: areturn

  public <A1, A2, A3, A4> scalaz.BindRec<?> tuple5BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #739                // InterfaceMethod scalaz/std/TupleInstances2.tuple5BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.BindRec<?> tuple6BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #751                // InterfaceMethod scalaz/std/TupleInstances2.tuple6BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.BindRec<?> tuple7BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #764                // InterfaceMethod scalaz/std/TupleInstances2.tuple7BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.BindRec<?> tuple8BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>, scalaz.Semigroup<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #778                // InterfaceMethod scalaz/std/TupleInstances2.tuple8BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
      15: areturn

  public <A1> scalaz.Equal<scala.Tuple1<A1>> tuple1Equal(scalaz.Equal<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #784                // InterfaceMethod scalaz/std/TupleInstances2.tuple1Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A1, A2> scalaz.Equal<scala.Tuple2<A1, A2>> tuple2Equal(scalaz.Equal<A1>, scalaz.Equal<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #790                // InterfaceMethod scalaz/std/TupleInstances2.tuple2Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public <A1, A2, A3> scalaz.Equal<scala.Tuple3<A1, A2, A3>> tuple3Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #797                // InterfaceMethod scalaz/std/TupleInstances2.tuple3Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Equal<scala.Tuple4<A1, A2, A3, A4>> tuple4Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #804                // InterfaceMethod scalaz/std/TupleInstances2.tuple4Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Equal<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>, scalaz.Equal<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #811                // InterfaceMethod scalaz/std/TupleInstances2.tuple5Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Equal<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>, scalaz.Equal<A5>, scalaz.Equal<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #818                // InterfaceMethod scalaz/std/TupleInstances2.tuple6Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Equal<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>, scalaz.Equal<A5>, scalaz.Equal<A6>, scalaz.Equal<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #825                // InterfaceMethod scalaz/std/TupleInstances2.tuple7Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Equal<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>, scalaz.Equal<A5>, scalaz.Equal<A6>, scalaz.Equal<A7>, scalaz.Equal<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #832                // InterfaceMethod scalaz/std/TupleInstances2.tuple8Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      17: areturn

  public <A1> scalaz.Traverse<?> tuple2Instance();
    Code:
       0: aload_0
       1: invokestatic  #840                // InterfaceMethod scalaz/std/TupleInstances1.tuple2Instance$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2> scalaz.Traverse<?> tuple3Functor();
    Code:
       0: aload_0
       1: invokestatic  #845                // InterfaceMethod scalaz/std/TupleInstances1.tuple3Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3> scalaz.Traverse<?> tuple4Functor();
    Code:
       0: aload_0
       1: invokestatic  #850                // InterfaceMethod scalaz/std/TupleInstances1.tuple4Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3, A4> scalaz.Traverse<?> tuple5Functor();
    Code:
       0: aload_0
       1: invokestatic  #855                // InterfaceMethod scalaz/std/TupleInstances1.tuple5Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3, A4, A5> scalaz.Traverse<?> tuple6Functor();
    Code:
       0: aload_0
       1: invokestatic  #860                // InterfaceMethod scalaz/std/TupleInstances1.tuple6Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Traverse<?> tuple7Functor();
    Code:
       0: aload_0
       1: invokestatic  #865                // InterfaceMethod scalaz/std/TupleInstances1.tuple7Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Traverse<?> tuple8Functor();
    Code:
       0: aload_0
       1: invokestatic  #870                // InterfaceMethod scalaz/std/TupleInstances1.tuple8Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1> scalaz.Monoid<scala.Tuple1<A1>> tuple1Monoid(scalaz.Monoid<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #877                // InterfaceMethod scalaz/std/TupleInstances1.tuple1Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;)Lscalaz/Monoid;
       5: areturn

  public <A1, A2> scalaz.Monoid<scala.Tuple2<A1, A2>> tuple2Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #884                // InterfaceMethod scalaz/std/TupleInstances1.tuple2Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
       6: areturn

  public <A1, A2, A3> scalaz.Monoid<scala.Tuple3<A1, A2, A3>> tuple3Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #891                // InterfaceMethod scalaz/std/TupleInstances1.tuple3Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Monoid<scala.Tuple4<A1, A2, A3, A4>> tuple4Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #898                // InterfaceMethod scalaz/std/TupleInstances1.tuple4Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Monoid<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #905                // InterfaceMethod scalaz/std/TupleInstances1.tuple5Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Monoid<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #912                // InterfaceMethod scalaz/std/TupleInstances1.tuple6Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Monoid<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>, scalaz.Monoid<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #919                // InterfaceMethod scalaz/std/TupleInstances1.tuple7Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Monoid<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>, scalaz.Monoid<A7>, scalaz.Monoid<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #926                // InterfaceMethod scalaz/std/TupleInstances1.tuple8Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
      17: areturn

  public <A1> scalaz.Semigroup<scala.Tuple1<A1>> tuple1Semigroup(scalaz.Semigroup<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #935                // InterfaceMethod scalaz/std/TupleInstances0.tuple1Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       5: areturn

  public <A1, A2> scalaz.Semigroup<scala.Tuple2<A1, A2>> tuple2Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #942                // InterfaceMethod scalaz/std/TupleInstances0.tuple2Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       6: areturn

  public <A1, A2, A3> scalaz.Semigroup<scala.Tuple3<A1, A2, A3>> tuple3Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #949                // InterfaceMethod scalaz/std/TupleInstances0.tuple3Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Semigroup<scala.Tuple4<A1, A2, A3, A4>> tuple4Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #956                // InterfaceMethod scalaz/std/TupleInstances0.tuple4Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Semigroup<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #963                // InterfaceMethod scalaz/std/TupleInstances0.tuple5Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Semigroup<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #970                // InterfaceMethod scalaz/std/TupleInstances0.tuple6Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Semigroup<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>, scalaz.Semigroup<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #977                // InterfaceMethod scalaz/std/TupleInstances0.tuple7Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Semigroup<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>, scalaz.Semigroup<A7>, scalaz.Semigroup<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #984                // InterfaceMethod scalaz/std/TupleInstances0.tuple8Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
      17: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.LazyList<A>> lazylistMonoid();
    Code:
       0: aload_0
       1: invokestatic  #990                // InterfaceMethod scalaz/std/LazyListInstances.lazylistMonoid$:(Lscalaz/std/LazyListInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Equal<scala.collection.immutable.LazyList<A>> lazylistEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #996                // InterfaceMethod scalaz/std/LazyListInstances.lazylistEqual$:(Lscalaz/std/LazyListInstances;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.LazyList<A>> lazylistOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1002               // InterfaceMethod scalaz/std/LazyListInstances.lazylistOrder$:(Lscalaz/std/LazyListInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Show<scala.collection.immutable.LazyList<A>> lazylistShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1008               // InterfaceMethod scalaz/std/LazyListInstances.lazylistShow$:(Lscalaz/std/LazyListInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.Stream<A>> streamMonoid();
    Code:
       0: aload_0
       1: invokestatic  #1014               // InterfaceMethod scalaz/std/StreamInstances.streamMonoid$:(Lscalaz/std/StreamInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Equal<scala.collection.immutable.Stream<A>> streamEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1020               // InterfaceMethod scalaz/std/StreamInstances.streamEqual$:(Lscalaz/std/StreamInstances;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.Stream<A>> streamOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1026               // InterfaceMethod scalaz/std/StreamInstances.streamOrder$:(Lscalaz/std/StreamInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Show<scala.collection.immutable.Stream<A>> streamShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1032               // InterfaceMethod scalaz/std/StreamInstances.streamShow$:(Lscalaz/std/StreamInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.Set<A>> setOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1038               // InterfaceMethod scalaz/std/SetInstances.setOrder$:(Lscalaz/std/SetInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.Set<A>> setMonoid();
    Code:
       0: aload_0
       1: invokestatic  #1044               // InterfaceMethod scalaz/std/SetInstances.setMonoid$:(Lscalaz/std/SetInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<scala.collection.immutable.Set<A>> setShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1051               // InterfaceMethod scalaz/std/SetInstances.setShow$:(Lscalaz/std/SetInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Monoid<scala.Option<A>> optionMonoid(scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1058               // InterfaceMethod scalaz/std/OptionInstances.optionMonoid$:(Lscalaz/std/OptionInstances;Lscalaz/Semigroup;)Lscalaz/Monoid;
       5: areturn

  public <A> scalaz.Order<scala.Option<A>> optionOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1064               // InterfaceMethod scalaz/std/OptionInstances.optionOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Show<scala.Option<A>> optionShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1070               // InterfaceMethod scalaz/std/OptionInstances.optionShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Monoid<java.lang.Object> optionFirst();
    Code:
       0: aload_0
       1: invokestatic  #1076               // InterfaceMethod scalaz/std/OptionInstances.optionFirst$:(Lscalaz/std/OptionInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<java.lang.Object> optionFirstShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1081               // InterfaceMethod scalaz/std/OptionInstances.optionFirstShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<java.lang.Object> optionFirstOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1086               // InterfaceMethod scalaz/std/OptionInstances.optionFirstOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public scalaz.Monad<java.lang.Object> optionFirstMonad();
    Code:
       0: aload_0
       1: invokestatic  #1093               // InterfaceMethod scalaz/std/OptionInstances.optionFirstMonad$:(Lscalaz/std/OptionInstances;)Lscalaz/Monad;
       4: areturn

  public <A> scalaz.Monoid<java.lang.Object> optionLast();
    Code:
       0: aload_0
       1: invokestatic  #1097               // InterfaceMethod scalaz/std/OptionInstances.optionLast$:(Lscalaz/std/OptionInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<java.lang.Object> optionLastShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1101               // InterfaceMethod scalaz/std/OptionInstances.optionLastShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<java.lang.Object> optionLastOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1105               // InterfaceMethod scalaz/std/OptionInstances.optionLastOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public scalaz.Monad<java.lang.Object> optionLastMonad();
    Code:
       0: aload_0
       1: invokestatic  #1109               // InterfaceMethod scalaz/std/OptionInstances.optionLastMonad$:(Lscalaz/std/OptionInstances;)Lscalaz/Monad;
       4: areturn

  public <A> scalaz.Monoid<java.lang.Object> optionMin(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1117               // InterfaceMethod scalaz/std/OptionInstances.optionMin$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Monoid;
       5: areturn

  public <A> scalaz.Show<java.lang.Object> optionMinShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1121               // InterfaceMethod scalaz/std/OptionInstances.optionMinShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<java.lang.Object> optionMinOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1125               // InterfaceMethod scalaz/std/OptionInstances.optionMinOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public scalaz.Monad<java.lang.Object> optionMinMonad();
    Code:
       0: aload_0
       1: invokestatic  #1129               // InterfaceMethod scalaz/std/OptionInstances.optionMinMonad$:(Lscalaz/std/OptionInstances;)Lscalaz/Monad;
       4: areturn

  public <A> scalaz.Monoid<java.lang.Object> optionMax(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1133               // InterfaceMethod scalaz/std/OptionInstances.optionMax$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Monoid;
       5: areturn

  public <A> scalaz.Show<java.lang.Object> optionMaxShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1137               // InterfaceMethod scalaz/std/OptionInstances.optionMaxShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<java.lang.Object> optionMaxOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1141               // InterfaceMethod scalaz/std/OptionInstances.optionMaxOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public scalaz.Monad<java.lang.Object> optionMaxMonad();
    Code:
       0: aload_0
       1: invokestatic  #1145               // InterfaceMethod scalaz/std/OptionInstances.optionMaxMonad$:(Lscalaz/std/OptionInstances;)Lscalaz/Monad;
       4: areturn

  public <A> scalaz.Equal<scala.Option<A>> optionEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1153               // InterfaceMethod scalaz/std/OptionInstances0.optionEqual$:(Lscalaz/std/OptionInstances0;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A> scalaz.SemiLattice<scala.Option<A>> optionSemiLattice(scalaz.SemiLattice<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1159               // InterfaceMethod scalaz/std/OptionInstances0.optionSemiLattice$:(Lscalaz/std/OptionInstances0;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       5: areturn

  public <A> scalaz.Band<scala.Option<A>> optionBand(scalaz.Band<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1167               // InterfaceMethod scalaz/std/OptionInstances1.optionBand$:(Lscalaz/std/OptionInstances1;Lscalaz/Band;)Lscalaz/Band;
       5: areturn

  public <K> scalaz.Traverse<?> sortedMapInstance(scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1176               // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapInstance$:(Lscalaz/std/SortedMapInstances;Lscala/math/Ordering;)Lscalaz/Traverse;
       5: areturn

  public <K, V> scalaz.Monoid<scala.collection.immutable.SortedMap<K, V>> sortedMapMonoid(scalaz.Semigroup<V>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1186               // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapMonoid$:(Lscalaz/std/SortedMapInstances;Lscalaz/Semigroup;Lscala/math/Ordering;)Lscalaz/Monoid;
       6: areturn

  public <K, V> scalaz.Show<scala.collection.immutable.SortedMap<K, V>> sortedMapShow(scalaz.Show<K>, scalaz.Show<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1193               // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapShow$:(Lscalaz/std/SortedMapInstances;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <K, V> scalaz.Order<scala.collection.immutable.SortedMap<K, V>> sortedMapOrder(scalaz.Order<K>, scalaz.Order<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1199               // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapOrder$:(Lscalaz/std/SortedMapInstances;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> alter(scala.collection.immutable.SortedMap<K, A>, K, scala.Function1<scala.Option<A>, scala.Option<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1210               // InterfaceMethod scalaz/std/SortedMapFunctions.alter$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/SortedMap;
       7: areturn

  public final <K, A, B, C> scala.collection.immutable.SortedMap<K, C> intersectWithKey(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, B>, scala.Function3<K, A, B, C>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1222               // InterfaceMethod scalaz/std/SortedMapFunctions.intersectWithKey$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function3;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, A, B, C> scala.collection.immutable.SortedMap<K, C> intersectWith(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, B>, scala.Function2<A, B, C>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1230               // InterfaceMethod scalaz/std/SortedMapFunctions.intersectWith$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function2;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, K2, A> scala.collection.immutable.SortedMap<K2, A> mapKeys(scala.collection.immutable.SortedMap<K, A>, scala.Function1<K, K2>, scala.math.Ordering<K2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1238               // InterfaceMethod scalaz/std/SortedMapFunctions.mapKeys$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/Function1;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       7: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> unionWithKey(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, A>, scala.Function3<K, A, A, A>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1243               // InterfaceMethod scalaz/std/SortedMapFunctions.unionWithKey$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function3;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> unionWith(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, A>, scala.Function2<A, A, A>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1248               // InterfaceMethod scalaz/std/SortedMapFunctions.unionWith$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function2;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> insertWith(scala.collection.immutable.SortedMap<K, A>, K, A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1256               // InterfaceMethod scalaz/std/SortedMapFunctions.insertWith$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <F, K, A> F getOrAdd(scala.collection.immutable.SortedMap<K, A>, K, scala.Function0<F>, scalaz.Applicative<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1265               // InterfaceMethod scalaz/std/SortedMapFunctions.getOrAdd$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Lscala/Function0;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public <K, V> scalaz.Equal<scala.collection.immutable.SortedMap<K, V>> sortedMapEqual(scalaz.Order<K>, scalaz.Equal<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1275               // InterfaceMethod scalaz/std/SortedMapInstances0.sortedMapEqual$:(Lscalaz/std/SortedMapInstances0;Lscalaz/Order;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public <K> scalaz.Foldable<?> sortedMapFoldable();
    Code:
       0: aload_0
       1: invokestatic  #1282               // InterfaceMethod scalaz/std/SortedMapInstances0.sortedMapFoldable$:(Lscalaz/std/SortedMapInstances0;)Lscalaz/Foldable;
       4: areturn

  public <K, V> scalaz.Band<scala.collection.immutable.SortedMap<K, V>> sortedMapBand(scalaz.Band<V>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1289               // InterfaceMethod scalaz/std/SortedMapInstances0.sortedMapBand$:(Lscalaz/std/SortedMapInstances0;Lscalaz/Band;Lscala/math/Ordering;)Lscalaz/Band;
       6: areturn

  public <K> scalaz.Traverse<?> mapInstance();
    Code:
       0: aload_0
       1: invokestatic  #1297               // InterfaceMethod scalaz/std/MapInstances.mapInstance$:(Lscalaz/std/MapInstances;)Lscalaz/Traverse;
       4: areturn

  public <K, V> scalaz.Monoid<scala.collection.immutable.Map<K, V>> mapMonoid(scalaz.Semigroup<V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1303               // InterfaceMethod scalaz/std/MapInstances.mapMonoid$:(Lscalaz/std/MapInstances;Lscalaz/Semigroup;)Lscalaz/Monoid;
       5: areturn

  public <K, V> scalaz.Show<scala.collection.immutable.Map<K, V>> mapShow(scalaz.Show<K>, scalaz.Show<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1309               // InterfaceMethod scalaz/std/MapInstances.mapShow$:(Lscalaz/std/MapInstances;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <K, V> scalaz.Order<scala.collection.immutable.Map<K, V>> mapOrder(scalaz.Order<K>, scalaz.Order<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1315               // InterfaceMethod scalaz/std/MapInstances.mapOrder$:(Lscalaz/std/MapInstances;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> alter(scala.collection.immutable.Map<K, A>, K, scala.Function1<scala.Option<A>, scala.Option<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1322               // InterfaceMethod scalaz/std/MapFunctions.alter$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A, B, C> scala.collection.immutable.Map<K, C> intersectWithKey(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, B>, scala.Function3<K, A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1328               // InterfaceMethod scalaz/std/MapFunctions.intersectWithKey$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function3;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A, B, C> scala.collection.immutable.Map<K, C> intersectWith(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, B>, scala.Function2<A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1333               // InterfaceMethod scalaz/std/MapFunctions.intersectWith$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function2;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, K2, A> scala.collection.immutable.Map<K2, A> mapKeys(scala.collection.immutable.Map<K, A>, scala.Function1<K, K2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1338               // InterfaceMethod scalaz/std/MapFunctions.mapKeys$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/Function1;)Lscala/collection/immutable/Map;
       6: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> unionWithKey(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, A>, scala.Function3<K, A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1341               // InterfaceMethod scalaz/std/MapFunctions.unionWithKey$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function3;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> unionWith(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, A>, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1344               // InterfaceMethod scalaz/std/MapFunctions.unionWith$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function2;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> insertWith(scala.collection.immutable.Map<K, A>, K, A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1349               // InterfaceMethod scalaz/std/MapFunctions.insertWith$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/immutable/Map;
       9: areturn

  public final <F, K, A> F getOrAdd(scala.collection.immutable.Map<K, A>, K, scala.Function0<F>, scalaz.Applicative<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1354               // InterfaceMethod scalaz/std/MapFunctions.getOrAdd$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Ljava/lang/Object;Lscala/Function0;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public <K, V> scalaz.Equal<scala.collection.immutable.Map<K, V>> mapEqual(scalaz.Order<K>, scalaz.Equal<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1362               // InterfaceMethod scalaz/std/MapInstances0.mapEqual$:(Lscalaz/std/MapInstances0;Lscalaz/Order;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public <K> scalaz.Foldable<?> mapFoldable();
    Code:
       0: aload_0
       1: invokestatic  #1367               // InterfaceMethod scalaz/std/MapInstances0.mapFoldable$:(Lscalaz/std/MapInstances0;)Lscalaz/Foldable;
       4: areturn

  public <K, V> scalaz.Band<scala.collection.immutable.Map<K, V>> mapBand(scalaz.Band<V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1373               // InterfaceMethod scalaz/std/MapInstances0.mapBand$:(Lscalaz/std/MapInstances0;Lscalaz/Band;)Lscalaz/Band;
       5: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.List<A>> listMonoid();
    Code:
       0: aload_0
       1: invokestatic  #1379               // InterfaceMethod scalaz/std/ListInstances.listMonoid$:(Lscalaz/std/ListInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<scala.collection.immutable.List<A>> listShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1385               // InterfaceMethod scalaz/std/ListInstances.listShow$:(Lscalaz/std/ListInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.List<A>> listOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1391               // InterfaceMethod scalaz/std/ListInstances.listOrder$:(Lscalaz/std/ListInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Equal<scala.collection.immutable.List<A>> listEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1399               // InterfaceMethod scalaz/std/ListInstances0.listEqual$:(Lscalaz/std/ListInstances0;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <R> scalaz.Equal<scala.Function0<R>> function0Equal(scalaz.Equal<R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1405               // InterfaceMethod scalaz/std/FunctionInstances.function0Equal$:(Lscalaz/std/FunctionInstances;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <T> scalaz.Monad<?> function1Covariant();
    Code:
       0: aload_0
       1: invokestatic  #1411               // InterfaceMethod scalaz/std/FunctionInstances.function1Covariant$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <R> scalaz.Contravariant<?> function1Contravariant();
    Code:
       0: aload_0
       1: invokestatic  #1418               // InterfaceMethod scalaz/std/FunctionInstances.function1Contravariant$:(Lscalaz/std/FunctionInstances;)Lscalaz/Contravariant;
       4: areturn

  public <T1, T2> scalaz.Monad<?> function2Instance();
    Code:
       0: aload_0
       1: invokestatic  #1423               // InterfaceMethod scalaz/std/FunctionInstances.function2Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3> scalaz.Monad<?> function3Instance();
    Code:
       0: aload_0
       1: invokestatic  #1428               // InterfaceMethod scalaz/std/FunctionInstances.function3Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4> scalaz.Monad<?> function4Instance();
    Code:
       0: aload_0
       1: invokestatic  #1433               // InterfaceMethod scalaz/std/FunctionInstances.function4Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4, T5> scalaz.Monad<?> function5Instance();
    Code:
       0: aload_0
       1: invokestatic  #1438               // InterfaceMethod scalaz/std/FunctionInstances.function5Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4, T5, T6> scalaz.Monad<?> function6Instance();
    Code:
       0: aload_0
       1: invokestatic  #1443               // InterfaceMethod scalaz/std/FunctionInstances.function6Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4, T5, T6, T7> scalaz.Monad<?> function7Instance();
    Code:
       0: aload_0
       1: invokestatic  #1448               // InterfaceMethod scalaz/std/FunctionInstances.function7Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4, T5, T6, T7, T8> scalaz.Monad<?> function8Instance();
    Code:
       0: aload_0
       1: invokestatic  #1453               // InterfaceMethod scalaz/std/FunctionInstances.function8Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <A, R> scalaz.Monoid<scala.Function1<A, R>> function1Monoid(scalaz.Monoid<R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1462               // InterfaceMethod scalaz/std/FunctionInstances0.function1Monoid$:(Lscalaz/std/FunctionInstances0;Lscalaz/Monoid;)Lscalaz/Monoid;
       5: areturn

  public <A, R> scalaz.Comonad<?> function1Comonad(scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1469               // InterfaceMethod scalaz/std/FunctionInstances0.function1Comonad$:(Lscalaz/std/FunctionInstances0;Lscalaz/Monoid;)Lscalaz/Comonad;
       5: areturn

  public <T> scalaz.Monad<?> function1CovariantByName();
    Code:
       0: aload_0
       1: invokestatic  #1474               // InterfaceMethod scalaz/std/FunctionInstances0.function1CovariantByName$:(Lscalaz/std/FunctionInstances0;)Lscalaz/Monad;
       4: areturn

  public <A, R> scalaz.Semigroup<scala.Function1<A, R>> function1Semigroup(scalaz.Semigroup<R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1482               // InterfaceMethod scalaz/std/FunctionInstances1.function1Semigroup$:(Lscalaz/std/FunctionInstances1;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       5: areturn

  public <A, R> scalaz.Cobind<?> function1Cobind(scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1489               // InterfaceMethod scalaz/std/FunctionInstances1.function1Cobind$:(Lscalaz/std/FunctionInstances1;Lscalaz/Semigroup;)Lscalaz/Cobind;
       5: areturn

  public scalaz.Order<java.time.LocalDateTime> localDateTimeInstance();
    Code:
       0: getstatic     #1493               // Field localDateTimeInstance:Lscalaz/Order;
       3: areturn

  public scalaz.Order<java.time.OffsetDateTime> offsetDateTimeInstance();
    Code:
       0: getstatic     #1496               // Field offsetDateTimeInstance:Lscalaz/Order;
       3: areturn

  public scalaz.Order<java.time.OffsetTime> offsetTimeInstance();
    Code:
       0: getstatic     #1499               // Field offsetTimeInstance:Lscalaz/Order;
       3: areturn

  public scalaz.Order<java.time.ZonedDateTime> zonedDateTime();
    Code:
       0: getstatic     #1502               // Field zonedDateTime:Lscalaz/Order;
       3: areturn

  public scalaz.Order<java.time.ZoneOffset> zoneOffsetInstance();
    Code:
       0: getstatic     #1505               // Field zoneOffsetInstance:Lscalaz/Order;
       3: areturn

  public scalaz.Enum<java.time.DayOfWeek> dayOfWeekInstance();
    Code:
       0: getstatic     #1509               // Field dayOfWeekInstance:Lscalaz/Enum;
       3: areturn

  public scalaz.Order<java.time.Instant> instantInstance();
    Code:
       0: getstatic     #1512               // Field instantInstance:Lscalaz/Order;
       3: areturn

  public scalaz.Monoid<java.time.Duration> durationInstance();
    Code:
       0: getstatic     #1515               // Field durationInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.time.Period> periodInstance();
    Code:
       0: getstatic     #1518               // Field periodInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Enum<java.time.YearMonth> yearMonthInstance();
    Code:
       0: getstatic     #1521               // Field yearMonthInstance:Lscalaz/Enum;
       3: areturn

  public scalaz.Order<java.time.MonthDay> monthDayInstance();
    Code:
       0: getstatic     #1524               // Field monthDayInstance:Lscalaz/Order;
       3: areturn

  public scalaz.Order<java.time.LocalTime> localTimeInstance();
    Code:
       0: getstatic     #1527               // Field localTimeInstance:Lscalaz/Order;
       3: areturn

  public scalaz.Enum<java.time.Year> yearInstance();
    Code:
       0: getstatic     #1530               // Field yearInstance:Lscalaz/Enum;
       3: areturn

  public scalaz.Enum<java.time.LocalDate> localDateInstance();
    Code:
       0: getstatic     #1533               // Field localDateInstance:Lscalaz/Enum;
       3: areturn

  public scalaz.Enum<java.time.Month> monthInstance();
    Code:
       0: getstatic     #1536               // Field monthInstance:Lscalaz/Enum;
       3: areturn

  public void scalaz$std$java$TimeInstances$_setter_$localDateTimeInstance_$eq(scalaz.Order<java.time.LocalDateTime>);
    Code:
       0: aload_1
       1: putstatic     #1493               // Field localDateTimeInstance:Lscalaz/Order;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$offsetDateTimeInstance_$eq(scalaz.Order<java.time.OffsetDateTime>);
    Code:
       0: aload_1
       1: putstatic     #1496               // Field offsetDateTimeInstance:Lscalaz/Order;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$offsetTimeInstance_$eq(scalaz.Order<java.time.OffsetTime>);
    Code:
       0: aload_1
       1: putstatic     #1499               // Field offsetTimeInstance:Lscalaz/Order;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$zonedDateTime_$eq(scalaz.Order<java.time.ZonedDateTime>);
    Code:
       0: aload_1
       1: putstatic     #1502               // Field zonedDateTime:Lscalaz/Order;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$zoneOffsetInstance_$eq(scalaz.Order<java.time.ZoneOffset>);
    Code:
       0: aload_1
       1: putstatic     #1505               // Field zoneOffsetInstance:Lscalaz/Order;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$dayOfWeekInstance_$eq(scalaz.Enum<java.time.DayOfWeek>);
    Code:
       0: aload_1
       1: putstatic     #1509               // Field dayOfWeekInstance:Lscalaz/Enum;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$instantInstance_$eq(scalaz.Order<java.time.Instant>);
    Code:
       0: aload_1
       1: putstatic     #1512               // Field instantInstance:Lscalaz/Order;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$durationInstance_$eq(scalaz.Monoid<java.time.Duration>);
    Code:
       0: aload_1
       1: putstatic     #1515               // Field durationInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$periodInstance_$eq(scalaz.Monoid<java.time.Period>);
    Code:
       0: aload_1
       1: putstatic     #1518               // Field periodInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$yearMonthInstance_$eq(scalaz.Enum<java.time.YearMonth>);
    Code:
       0: aload_1
       1: putstatic     #1521               // Field yearMonthInstance:Lscalaz/Enum;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$monthDayInstance_$eq(scalaz.Order<java.time.MonthDay>);
    Code:
       0: aload_1
       1: putstatic     #1524               // Field monthDayInstance:Lscalaz/Order;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$localTimeInstance_$eq(scalaz.Order<java.time.LocalTime>);
    Code:
       0: aload_1
       1: putstatic     #1527               // Field localTimeInstance:Lscalaz/Order;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$yearInstance_$eq(scalaz.Enum<java.time.Year>);
    Code:
       0: aload_1
       1: putstatic     #1530               // Field yearInstance:Lscalaz/Enum;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$localDateInstance_$eq(scalaz.Enum<java.time.LocalDate>);
    Code:
       0: aload_1
       1: putstatic     #1533               // Field localDateInstance:Lscalaz/Enum;
       4: return

  public void scalaz$std$java$TimeInstances$_setter_$monthInstance_$eq(scalaz.Enum<java.time.Month>);
    Code:
       0: aload_1
       1: putstatic     #1536               // Field monthInstance:Lscalaz/Enum;
       4: return

  public scalaz.Monad<java.util.concurrent.Callable> callableMonad();
    Code:
       0: getstatic     #1573               // Field callableMonad:Lscalaz/Monad;
       3: areturn

  public void scalaz$std$java$util$concurrent$CallableInstances$_setter_$callableMonad_$eq(scalaz.Monad<java.util.concurrent.Callable>);
    Code:
       0: aload_1
       1: putstatic     #1573               // Field callableMonad:Lscalaz/Monad;
       4: return

  public scalaz.Monoid<java.math.BigInteger> bigIntegerInstance();
    Code:
       0: getstatic     #1579               // Field bigIntegerInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> bigIntegerMultiplication();
    Code:
       0: getstatic     #1582               // Field bigIntegerMultiplication:Lscalaz/Monoid;
       3: areturn

  public void scalaz$std$java$math$BigIntegerInstances$_setter_$bigIntegerInstance_$eq(scalaz.Monoid<java.math.BigInteger>);
    Code:
       0: aload_1
       1: putstatic     #1579               // Field bigIntegerInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$java$math$BigIntegerInstances$_setter_$bigIntegerMultiplication_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1582               // Field bigIntegerMultiplication:Lscalaz/Monoid;
       4: return

  public scalaz.Show<java.math.BigDecimal> javaBigDecimalInstance();
    Code:
       0: getstatic     #1590               // Field javaBigDecimalInstance:Lscalaz/Show;
       3: areturn

  public void scalaz$std$java$math$BigDecimalInstances$_setter_$javaBigDecimalInstance_$eq(scalaz.Show<java.math.BigDecimal>);
    Code:
       0: aload_1
       1: putstatic     #1590               // Field javaBigDecimalInstance:Lscalaz/Show;
       4: return

  public scalaz.Bitraverse<java.util.Map$Entry> mapEntryBitraverse();
    Code:
       0: getstatic     #1597               // Field mapEntryBitraverse:Lscalaz/Bitraverse;
       3: areturn

  public void scalaz$std$java$util$MapInstances$_setter_$mapEntryBitraverse_$eq(scalaz.Bitraverse<java.util.Map$Entry>);
    Code:
       0: aload_1
       1: putstatic     #1597               // Field mapEntryBitraverse:Lscalaz/Bitraverse;
       4: return

  public scalaz.Monoid<scala.math.BigInt> bigIntInstance();
    Code:
       0: getstatic     #1603               // Field bigIntInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> bigIntMultiplication();
    Code:
       0: getstatic     #1605               // Field bigIntMultiplication:Lscalaz/Monoid;
       3: areturn

  public void scalaz$std$math$BigInts$_setter_$bigIntInstance_$eq(scalaz.Monoid<scala.math.BigInt>);
    Code:
       0: aload_1
       1: putstatic     #1603               // Field bigIntInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$math$BigInts$_setter_$bigIntMultiplication_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1605               // Field bigIntMultiplication:Lscalaz/Monoid;
       4: return

  public scalaz.Monoid<scala.math.BigDecimal> bigDecimalInstance();
    Code:
       0: getstatic     #1611               // Field bigDecimalInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> BigDecimalMultiplicationNewType();
    Code:
       0: getstatic     #1613               // Field BigDecimalMultiplicationNewType:Lscalaz/Monoid;
       3: areturn

  public void scalaz$std$math$BigDecimalInstances$_setter_$bigDecimalInstance_$eq(scalaz.Monoid<scala.math.BigDecimal>);
    Code:
       0: aload_1
       1: putstatic     #1611               // Field bigDecimalInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$math$BigDecimalInstances$_setter_$BigDecimalMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1613               // Field BigDecimalMultiplicationNewType:Lscalaz/Monoid;
       4: return

  public scalaz.Category<scala.$less$colon$less> $less$colon$less();
    Code:
       0: getstatic     #1620               // Field $less$colon$less:Lscalaz/Category;
       3: areturn

  public scalaz.Category<scala.$eq$colon$eq> $eq$colon$eq();
    Code:
       0: getstatic     #1623               // Field $eq$colon$eq:Lscalaz/Category;
       3: areturn

  public void scalaz$std$TypeConstraintInstances$_setter_$$less$colon$less_$eq(scalaz.Category<scala.$less$colon$less>);
    Code:
       0: aload_1
       1: putstatic     #1620               // Field $less$colon$less:Lscalaz/Category;
       4: return

  public void scalaz$std$TypeConstraintInstances$_setter_$$eq$colon$eq_$eq(scalaz.Category<scala.$eq$colon$eq>);
    Code:
       0: aload_1
       1: putstatic     #1623               // Field $eq$colon$eq:Lscalaz/Category;
       4: return

  public scalaz.Arrow<scala.PartialFunction> partialFunctionInstance();
    Code:
       0: getstatic     #1632               // Field partialFunctionInstance:Lscalaz/Arrow;
       3: areturn

  public void scalaz$std$PartialFunctionInstances$_setter_$partialFunctionInstance_$eq(scalaz.Arrow<scala.PartialFunction>);
    Code:
       0: aload_1
       1: putstatic     #1632               // Field partialFunctionInstance:Lscalaz/Arrow;
       4: return

  public scalaz.Bitraverse<scala.util.Either> eitherInstance();
    Code:
       0: getstatic     #1638               // Field eitherInstance:Lscalaz/Bitraverse;
       3: areturn

  public void scalaz$std$EitherInstances$_setter_$eitherInstance_$eq(scalaz.Bitraverse<scala.util.Either>);
    Code:
       0: aload_1
       1: putstatic     #1638               // Field eitherInstance:Lscalaz/Bitraverse;
       4: return

  public scalaz.Traverse<scala.collection.immutable.Vector> vectorInstance();
    Code:
       0: getstatic     #1643               // Field vectorInstance:Lscalaz/Traverse;
       3: areturn

  public void scalaz$std$VectorInstances$_setter_$vectorInstance_$eq(scalaz.Traverse<scala.collection.immutable.Vector>);
    Code:
       0: aload_1
       1: putstatic     #1643               // Field vectorInstance:Lscalaz/Traverse;
       4: return

  public scalaz.Cozip<scala.Tuple1> tuple1Cozip();
    Code:
       0: getstatic     #1649               // Field tuple1Cozip:Lscalaz/Cozip;
       3: areturn

  public void scalaz$std$TupleInstances3$_setter_$tuple1Cozip_$eq(scalaz.Cozip<scala.Tuple1>);
    Code:
       0: aload_1
       1: putstatic     #1649               // Field tuple1Cozip:Lscalaz/Cozip;
       4: return

  public scalaz.Bitraverse<scala.Tuple2> tuple2Bitraverse();
    Code:
       0: getstatic     #1655               // Field tuple2Bitraverse:Lscalaz/Bitraverse;
       3: areturn

  public scalaz.Associative<scala.Tuple2> tuple2Associative();
    Code:
       0: getstatic     #1658               // Field tuple2Associative:Lscalaz/Associative;
       3: areturn

  public scalaz.Traverse<scala.Tuple1> tuple1Instance();
    Code:
       0: getstatic     #1661               // Field tuple1Instance:Lscalaz/Traverse;
       3: areturn

  public void scalaz$std$TupleInstances2$_setter_$tuple2Bitraverse_$eq(scalaz.Bitraverse<scala.Tuple2>);
    Code:
       0: aload_1
       1: putstatic     #1655               // Field tuple2Bitraverse:Lscalaz/Bitraverse;
       4: return

  public void scalaz$std$TupleInstances2$_setter_$tuple2Associative_$eq(scalaz.Associative<scala.Tuple2>);
    Code:
       0: aload_1
       1: putstatic     #1658               // Field tuple2Associative:Lscalaz/Associative;
       4: return

  public void scalaz$std$TupleInstances2$_setter_$tuple1Instance_$eq(scalaz.Traverse<scala.Tuple1>);
    Code:
       0: aload_1
       1: putstatic     #1661               // Field tuple1Instance:Lscalaz/Traverse;
       4: return

  public scalaz.Traverse<scala.collection.immutable.LazyList> lazylistInstance();
    Code:
       0: getstatic     #1671               // Field lazylistInstance:Lscalaz/Traverse;
       3: areturn

  public scalaz.Applicative<?> lazylistZipApplicative();
    Code:
       0: getstatic     #1675               // Field lazylistZipApplicative:Lscalaz/Applicative;
       3: areturn

  public void scalaz$std$LazyListInstances$_setter_$lazylistInstance_$eq(scalaz.Traverse<scala.collection.immutable.LazyList>);
    Code:
       0: aload_1
       1: putstatic     #1671               // Field lazylistInstance:Lscalaz/Traverse;
       4: return

  public void scalaz$std$LazyListInstances$_setter_$lazylistZipApplicative_$eq(scalaz.Applicative<?>);
    Code:
       0: aload_1
       1: putstatic     #1675               // Field lazylistZipApplicative:Lscalaz/Applicative;
       4: return

  public scalaz.Traverse<scala.collection.immutable.Stream> streamInstance();
    Code:
       0: getstatic     #1683               // Field streamInstance:Lscalaz/Traverse;
       3: areturn

  public scalaz.Applicative<?> streamZipApplicative();
    Code:
       0: getstatic     #1685               // Field streamZipApplicative:Lscalaz/Applicative;
       3: areturn

  public void scalaz$std$StreamInstances$_setter_$streamInstance_$eq(scalaz.Traverse<scala.collection.immutable.Stream>);
    Code:
       0: aload_1
       1: putstatic     #1683               // Field streamInstance:Lscalaz/Traverse;
       4: return

  public void scalaz$std$StreamInstances$_setter_$streamZipApplicative_$eq(scalaz.Applicative<?>);
    Code:
       0: aload_1
       1: putstatic     #1685               // Field streamZipApplicative:Lscalaz/Applicative;
       4: return

  public scalaz.Monoid<java.lang.String> stringInstance();
    Code:
       0: getstatic     #1691               // Field stringInstance:Lscalaz/Monoid;
       3: areturn

  public void scalaz$std$StringInstances$_setter_$stringInstance_$eq(scalaz.Monoid<java.lang.String>);
    Code:
       0: aload_1
       1: putstatic     #1691               // Field stringInstance:Lscalaz/Monoid;
       4: return

  public scalaz.Foldable<scala.collection.immutable.Set> setInstance();
    Code:
       0: getstatic     #1696               // Field setInstance:Lscalaz/Foldable;
       3: areturn

  public void scalaz$std$SetInstances$_setter_$setInstance_$eq(scalaz.Foldable<scala.collection.immutable.Set>);
    Code:
       0: aload_1
       1: putstatic     #1696               // Field setInstance:Lscalaz/Foldable;
       4: return

  public scalaz.Traverse<scala.Option> optionInstance();
    Code:
       0: getstatic     #1702               // Field optionInstance:Lscalaz/Traverse;
       3: areturn

  public void scalaz$std$OptionInstances$_setter_$optionInstance_$eq(scalaz.Traverse<scala.Option>);
    Code:
       0: aload_1
       1: putstatic     #1702               // Field optionInstance:Lscalaz/Traverse;
       4: return

  public scalaz.Traverse<scala.collection.immutable.List> listInstance();
    Code:
       0: getstatic     #1707               // Field listInstance:Lscalaz/Traverse;
       3: areturn

  public void scalaz$std$ListInstances$_setter_$listInstance_$eq(scalaz.Traverse<scala.collection.immutable.List>);
    Code:
       0: aload_1
       1: putstatic     #1707               // Field listInstance:Lscalaz/Traverse;
       4: return

  public scalaz.Traverse<scala.Function0> function0Instance();
    Code:
       0: getstatic     #1712               // Field function0Instance:Lscalaz/Traverse;
       3: areturn

  public scalaz.Arrow<scala.Function1> function1Instance();
    Code:
       0: getstatic     #1715               // Field function1Instance:Lscalaz/Arrow;
       3: areturn

  public void scalaz$std$FunctionInstances$_setter_$function0Instance_$eq(scalaz.Traverse<scala.Function0>);
    Code:
       0: aload_1
       1: putstatic     #1712               // Field function0Instance:Lscalaz/Traverse;
       4: return

  public void scalaz$std$FunctionInstances$_setter_$function1Instance_$eq(scalaz.Arrow<scala.Function1>);
    Code:
       0: aload_1
       1: putstatic     #1715               // Field function1Instance:Lscalaz/Arrow;
       4: return

  public scalaz.Monoid<scala.runtime.BoxedUnit> unitInstance();
    Code:
       0: getstatic     #1722               // Field unitInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.std.AnyValInstances$booleanInstance$ booleanInstance();
    Code:
       0: getstatic     #1726               // Field booleanInstance$module:Lscalaz/std/AnyValInstances$booleanInstance$;
       3: ifnonnull     10
       6: aload_0
       7: invokespecial #1729               // Method booleanInstance$lzycompute$1:()V
      10: getstatic     #1726               // Field booleanInstance$module:Lscalaz/std/AnyValInstances$booleanInstance$;
      13: areturn

  public scalaz.Monoid<java.lang.Object> booleanDisjunctionNewTypeInstance();
    Code:
       0: getstatic     #1731               // Field booleanDisjunctionNewTypeInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> booleanConjunctionNewTypeInstance();
    Code:
       0: getstatic     #1733               // Field booleanConjunctionNewTypeInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> byteInstance();
    Code:
       0: getstatic     #1735               // Field byteInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> byteMultiplicationNewType();
    Code:
       0: getstatic     #1737               // Field byteMultiplicationNewType:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> char();
    Code:
       0: getstatic     #1739               // Field char:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> charMultiplicationNewType();
    Code:
       0: getstatic     #1741               // Field charMultiplicationNewType:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> shortInstance();
    Code:
       0: getstatic     #1743               // Field shortInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> shortMultiplicationNewType();
    Code:
       0: getstatic     #1745               // Field shortMultiplicationNewType:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> intInstance();
    Code:
       0: getstatic     #1747               // Field intInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> intMultiplicationNewType();
    Code:
       0: getstatic     #1749               // Field intMultiplicationNewType:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> longInstance();
    Code:
       0: getstatic     #1751               // Field longInstance:Lscalaz/Monoid;
       3: areturn

  public scalaz.Monoid<java.lang.Object> longMultiplicationNewType();
    Code:
       0: getstatic     #1753               // Field longMultiplicationNewType:Lscalaz/Monoid;
       3: areturn

  public scalaz.Order<java.lang.Object> floatInstance();
    Code:
       0: getstatic     #1756               // Field floatInstance:Lscalaz/Order;
       3: areturn

  public scalaz.Order<java.lang.Object> doubleInstance();
    Code:
       0: getstatic     #1758               // Field doubleInstance:Lscalaz/Order;
       3: areturn

  public void scalaz$std$AnyValInstances$_setter_$unitInstance_$eq(scalaz.Monoid<scala.runtime.BoxedUnit>);
    Code:
       0: aload_1
       1: putstatic     #1722               // Field unitInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$booleanDisjunctionNewTypeInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1731               // Field booleanDisjunctionNewTypeInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$booleanConjunctionNewTypeInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1733               // Field booleanConjunctionNewTypeInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$byteInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1735               // Field byteInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$byteMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1737               // Field byteMultiplicationNewType:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$char_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1739               // Field char:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$charMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1741               // Field charMultiplicationNewType:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$shortInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1743               // Field shortInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$shortMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1745               // Field shortMultiplicationNewType:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$intInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1747               // Field intInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$intMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1749               // Field intMultiplicationNewType:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$longInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1751               // Field longInstance:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$longMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1753               // Field longMultiplicationNewType:Lscalaz/Monoid;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$floatInstance_$eq(scalaz.Order<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1756               // Field floatInstance:Lscalaz/Order;
       4: return

  public void scalaz$std$AnyValInstances$_setter_$doubleInstance_$eq(scalaz.Order<java.lang.Object>);
    Code:
       0: aload_1
       1: putstatic     #1758               // Field doubleInstance:Lscalaz/Order;
       4: return

  private final void booleanInstance$lzycompute$1();
    Code:
       0: aload_0
       1: monitorenter
       2: getstatic     #1726               // Field booleanInstance$module:Lscalaz/std/AnyValInstances$booleanInstance$;
       5: ifnonnull     19
       8: new           #14                 // class scalaz/std/AnyValInstances$booleanInstance$
      11: dup
      12: aload_0
      13: invokespecial #1777               // Method scalaz/std/AnyValInstances$booleanInstance$."<init>":(Lscalaz/std/AnyValInstances;)V
      16: putstatic     #1726               // Field booleanInstance$module:Lscalaz/std/AnyValInstances$booleanInstance$;
      19: aload_0
      20: monitorexit
      21: return
      22: aload_0
      23: monitorexit
      24: athrow
    Exception table:
       from    to  target type
           2    19    22   any

  private scalaz.std.AllInstances$();
    Code:
       0: aload_0
       1: invokespecial #1780               // Method java/lang/Object."<init>":()V
       4: return
}
