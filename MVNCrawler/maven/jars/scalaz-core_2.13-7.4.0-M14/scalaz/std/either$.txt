Compiled from "Either.scala"
public final class scalaz.std.either$ implements scalaz.std.EitherInstances {
  public static final scalaz.std.either$ MODULE$;

  private static scalaz.Bitraverse<scala.util.Either> eitherInstance;

  public static {};
    Code:
       0: new           #2                  // class scalaz/std/either$
       3: dup
       4: invokespecial #17                 // Method "<init>":()V
       7: putstatic     #19                 // Field MODULE$:Lscalaz/std/either$;
      10: getstatic     #19                 // Field MODULE$:Lscalaz/std/either$;
      13: pop
      14: getstatic     #19                 // Field MODULE$:Lscalaz/std/either$;
      17: invokestatic  #23                 // InterfaceMethod scalaz/std/EitherInstances.$init$:(Lscalaz/std/EitherInstances;)V
      20: return

  public <L> scalaz.Traverse<?> eitherMonad();
    Code:
       0: aload_0
       1: invokestatic  #30                 // InterfaceMethod scalaz/std/EitherInstances.eitherMonad$:(Lscalaz/std/EitherInstances;)Lscalaz/Traverse;
       4: areturn

  public <A, B> scalaz.Order<scala.util.Either<A, B>> eitherOrder(scalaz.Order<A>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #40                 // InterfaceMethod scalaz/std/EitherInstances.eitherOrder$:(Lscalaz/std/EitherInstances;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public scalaz.Associative<scala.util.Either> eitherAssociative();
    Code:
       0: aload_0
       1: invokestatic  #48                 // InterfaceMethod scalaz/std/EitherInstances.eitherAssociative$:(Lscalaz/std/EitherInstances;)Lscalaz/Associative;
       4: areturn

  public <A, B> scalaz.Show<scala.util.Either<A, B>> eitherShow(scalaz.Show<A>, scalaz.Show<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #57                 // InterfaceMethod scalaz/std/EitherInstances.eitherShow$:(Lscalaz/std/EitherInstances;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <A, B> scalaz.Equal<scala.util.Either<A, B>> eitherEqual(scalaz.Equal<A>, scalaz.Equal<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/std/EitherInstances0.eitherEqual$:(Lscalaz/std/EitherInstances0;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public scalaz.Bitraverse<scala.util.Either> eitherInstance();
    Code:
       0: getstatic     #74                 // Field eitherInstance:Lscalaz/Bitraverse;
       3: areturn

  public void scalaz$std$EitherInstances$_setter_$eitherInstance_$eq(scalaz.Bitraverse<scala.util.Either>);
    Code:
       0: aload_1
       1: putstatic     #74                 // Field eitherInstance:Lscalaz/Bitraverse;
       4: return

  private scalaz.std.either$();
    Code:
       0: aload_0
       1: invokespecial #79                 // Method java/lang/Object."<init>":()V
       4: return
}
