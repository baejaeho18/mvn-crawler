Compiled from "SortedMap.scala"
public final class scalaz.std.sortedMap$ implements scalaz.std.SortedMapInstances {
  public static final scalaz.std.sortedMap$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class scalaz/std/sortedMap$
       3: dup
       4: invokespecial #14                 // Method "<init>":()V
       7: putstatic     #16                 // Field MODULE$:Lscalaz/std/sortedMap$;
      10: getstatic     #16                 // Field MODULE$:Lscalaz/std/sortedMap$;
      13: pop
      14: getstatic     #16                 // Field MODULE$:Lscalaz/std/sortedMap$;
      17: pop
      18: getstatic     #16                 // Field MODULE$:Lscalaz/std/sortedMap$;
      21: pop
      22: return

  public <K> scalaz.Traverse<?> sortedMapInstance(scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapInstance$:(Lscalaz/std/SortedMapInstances;Lscala/math/Ordering;)Lscalaz/Traverse;
       5: areturn

  public <K, V> scalaz.Monoid<scala.collection.immutable.SortedMap<K, V>> sortedMapMonoid(scalaz.Semigroup<V>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #35                 // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapMonoid$:(Lscalaz/std/SortedMapInstances;Lscalaz/Semigroup;Lscala/math/Ordering;)Lscalaz/Monoid;
       6: areturn

  public <K, V> scalaz.Show<scala.collection.immutable.SortedMap<K, V>> sortedMapShow(scalaz.Show<K>, scalaz.Show<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #44                 // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapShow$:(Lscalaz/std/SortedMapInstances;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <K, V> scalaz.Order<scala.collection.immutable.SortedMap<K, V>> sortedMapOrder(scalaz.Order<K>, scalaz.Order<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #54                 // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapOrder$:(Lscalaz/std/SortedMapInstances;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> alter(scala.collection.immutable.SortedMap<K, A>, K, scala.Function1<scala.Option<A>, scala.Option<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #67                 // InterfaceMethod scalaz/std/SortedMapFunctions.alter$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/SortedMap;
       7: areturn

  public final <K, A, B, C> scala.collection.immutable.SortedMap<K, C> intersectWithKey(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, B>, scala.Function3<K, A, B, C>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #80                 // InterfaceMethod scalaz/std/SortedMapFunctions.intersectWithKey$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function3;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, A, B, C> scala.collection.immutable.SortedMap<K, C> intersectWith(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, B>, scala.Function2<A, B, C>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #89                 // InterfaceMethod scalaz/std/SortedMapFunctions.intersectWith$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function2;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, K2, A> scala.collection.immutable.SortedMap<K2, A> mapKeys(scala.collection.immutable.SortedMap<K, A>, scala.Function1<K, K2>, scala.math.Ordering<K2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #98                 // InterfaceMethod scalaz/std/SortedMapFunctions.mapKeys$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/Function1;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       7: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> unionWithKey(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, A>, scala.Function3<K, A, A, A>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #104                // InterfaceMethod scalaz/std/SortedMapFunctions.unionWithKey$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function3;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> unionWith(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, A>, scala.Function2<A, A, A>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #110                // InterfaceMethod scalaz/std/SortedMapFunctions.unionWith$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function2;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> insertWith(scala.collection.immutable.SortedMap<K, A>, K, A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #118                // InterfaceMethod scalaz/std/SortedMapFunctions.insertWith$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <F, K, A> F getOrAdd(scala.collection.immutable.SortedMap<K, A>, K, scala.Function0<F>, scalaz.Applicative<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #127                // InterfaceMethod scalaz/std/SortedMapFunctions.getOrAdd$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Lscala/Function0;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public <K, V> scalaz.Equal<scala.collection.immutable.SortedMap<K, V>> sortedMapEqual(scalaz.Order<K>, scalaz.Equal<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #140                // InterfaceMethod scalaz/std/SortedMapInstances0.sortedMapEqual$:(Lscalaz/std/SortedMapInstances0;Lscalaz/Order;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public <K> scalaz.Foldable<?> sortedMapFoldable();
    Code:
       0: aload_0
       1: invokestatic  #148                // InterfaceMethod scalaz/std/SortedMapInstances0.sortedMapFoldable$:(Lscalaz/std/SortedMapInstances0;)Lscalaz/Foldable;
       4: areturn

  public <K, V> scalaz.Band<scala.collection.immutable.SortedMap<K, V>> sortedMapBand(scalaz.Band<V>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #155                // InterfaceMethod scalaz/std/SortedMapInstances0.sortedMapBand$:(Lscalaz/std/SortedMapInstances0;Lscalaz/Band;Lscala/math/Ordering;)Lscalaz/Band;
       6: areturn

  private scalaz.std.sortedMap$();
    Code:
       0: aload_0
       1: invokespecial #157                // Method java/lang/Object."<init>":()V
       4: return
}
