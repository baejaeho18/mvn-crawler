Compiled from "Vector.scala"
public final class scalaz.std.vector {
  public static <A> scala.collection.immutable.Vector<scala.Tuple2<A, A>> adjacentPairs(scala.collection.immutable.Vector<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #23                 // Method scalaz/std/vector$.adjacentPairs:(Lscala/collection/immutable/Vector;)Lscala/collection/immutable/Vector;
       7: areturn

  public static <A> scala.collection.immutable.Vector<scala.Tuple2<A, A>> allPairs(scala.collection.immutable.Vector<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #27                 // Method scalaz/std/vector$.allPairs:(Lscala/collection/immutable/Vector;)Lscala/collection/immutable/Vector;
       7: areturn

  public static <A> scala.collection.immutable.Vector<scala.collection.immutable.Vector<A>> initz(scala.collection.immutable.Vector<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #31                 // Method scalaz/std/vector$.initz:(Lscala/collection/immutable/Vector;)Lscala/collection/immutable/Vector;
       7: areturn

  public static <A> scala.collection.immutable.Vector<scala.collection.immutable.Vector<A>> tailz(scala.collection.immutable.Vector<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #34                 // Method scalaz/std/vector$.tailz:(Lscala/collection/immutable/Vector;)Lscala/collection/immutable/Vector;
       7: areturn

  public static <A, B, C> scala.Tuple2<C, scala.collection.immutable.Vector<B>> mapAccumRight(scala.collection.immutable.Vector<A>, C, scala.Function2<C, A, scala.Tuple2<C, B>>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #41                 // Method scalaz/std/vector$.mapAccumRight:(Lscala/collection/immutable/Vector;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       9: areturn

  public static <A, B, C> scala.Tuple2<C, scala.collection.immutable.Vector<B>> mapAccumLeft(scala.collection.immutable.Vector<A>, C, scala.Function2<C, A, scala.Tuple2<C, B>>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #46                 // Method scalaz/std/vector$.mapAccumLeft:(Lscala/collection/immutable/Vector;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       9: areturn

  public static <A> scala.collection.immutable.Vector<scala.collection.immutable.Vector<A>> groupWhen(scala.collection.immutable.Vector<A>, scala.Function2<A, A, java.lang.Object>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: invokevirtual #52                 // Method scalaz/std/vector$.groupWhen:(Lscala/collection/immutable/Vector;Lscala/Function2;)Lscala/collection/immutable/Vector;
       8: areturn

  public static <A, M> M groupWhenM(scala.collection.immutable.Vector<A>, scala.Function2<A, A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #58                 // Method scalaz/std/vector$.groupWhenM:(Lscala/collection/immutable/Vector;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M breakM(scala.collection.immutable.Vector<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #65                 // Method scalaz/std/vector$.breakM:(Lscala/collection/immutable/Vector;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M spanM(scala.collection.immutable.Vector<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #70                 // Method scalaz/std/vector$.spanM:(Lscala/collection/immutable/Vector;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M partitionM(scala.collection.immutable.Vector<A>, scala.Function1<A, M>, scalaz.Applicative<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #76                 // Method scalaz/std/vector$.partitionM:(Lscala/collection/immutable/Vector;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public static <A> scala.collection.immutable.Vector<scala.collection.immutable.Vector<A>> powerset(scala.collection.immutable.Vector<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #80                 // Method scalaz/std/vector$.powerset:(Lscala/collection/immutable/Vector;)Lscala/collection/immutable/Vector;
       7: areturn

  public static <A, M> M findM(scala.collection.immutable.Vector<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #84                 // Method scalaz/std/vector$.findM:(Lscala/collection/immutable/Vector;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M filterM(scala.collection.immutable.Vector<A>, scala.Function1<A, M>, scalaz.Applicative<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #87                 // Method scalaz/std/vector$.filterM:(Lscala/collection/immutable/Vector;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M takeUntilM(scala.collection.immutable.Vector<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #91                 // Method scalaz/std/vector$.takeUntilM:(Lscala/collection/immutable/Vector;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M takeWhileM(scala.collection.immutable.Vector<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #95                 // Method scalaz/std/vector$.takeWhileM:(Lscala/collection/immutable/Vector;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, B> B $less$up$greater(scala.collection.immutable.Vector<A>, scala.Function1<scalaz.NonEmptyList<A>, B>, scalaz.Monoid<B>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #101                // Method scalaz/std/vector$.$less$up$greater:(Lscala/collection/immutable/Vector;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public static <A> scalaz.Maybe<scalaz.Zipper<A>> zipperEnd(scala.collection.immutable.Vector<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #107                // Method scalaz/std/vector$.zipperEnd:(Lscala/collection/immutable/Vector;)Lscalaz/Maybe;
       7: areturn

  public static <A> scalaz.Maybe<scalaz.Zipper<A>> toZipper(scala.collection.immutable.Vector<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #110                // Method scalaz/std/vector$.toZipper:(Lscala/collection/immutable/Vector;)Lscalaz/Maybe;
       7: areturn

  public static <A> scalaz.Maybe<scalaz.NonEmptyList<A>> toNel(scala.collection.immutable.Vector<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #114                // Method scalaz/std/vector$.toNel:(Lscala/collection/immutable/Vector;)Lscalaz/Maybe;
       7: areturn

  public static <A> scala.collection.immutable.Vector<A> intersperse(scala.collection.immutable.Vector<A>, A);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: aload_1
       5: invokevirtual #120                // Method scalaz/std/vector$.intersperse:(Lscala/collection/immutable/Vector;Ljava/lang/Object;)Lscala/collection/immutable/Vector;
       8: areturn

  public static <A> scalaz.Order<scala.collection.immutable.Vector<A>> vectorOrder(scalaz.Order<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #126                // Method scalaz/std/vector$.vectorOrder:(Lscalaz/Order;)Lscalaz/Order;
       7: areturn

  public static <A> scalaz.Show<scala.collection.immutable.Vector<A>> vectorShow(scalaz.Show<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #133                // Method scalaz/std/vector$.vectorShow:(Lscalaz/Show;)Lscalaz/Show;
       7: areturn

  public static <A> scalaz.Monoid<scala.collection.immutable.Vector<A>> vectorMonoid();
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: invokevirtual #139                // Method scalaz/std/vector$.vectorMonoid:()Lscalaz/Monoid;
       6: areturn

  public static scalaz.Traverse<scala.collection.immutable.Vector> vectorInstance();
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: invokevirtual #144                // Method scalaz/std/vector$.vectorInstance:()Lscalaz/Traverse;
       6: areturn

  public static <A> scalaz.Equal<scala.collection.immutable.Vector<A>> vectorEqual(scalaz.Equal<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       3: aload_0
       4: invokevirtual #149                // Method scalaz/std/vector$.vectorEqual:(Lscalaz/Equal;)Lscalaz/Equal;
       7: areturn
}
