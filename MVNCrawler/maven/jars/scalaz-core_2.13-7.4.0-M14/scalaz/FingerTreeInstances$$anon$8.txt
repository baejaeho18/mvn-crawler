Compiled from "FingerTree.scala"
public final class scalaz.FingerTreeInstances$$anon$8 implements scalaz.Equal<scalaz.FingerTree<V, A>> {
  private scalaz.syntax.EqualSyntax<scalaz.FingerTree<V, A>> equalSyntax;

  private final scalaz.Equal evidence$9$1;

  public <G> scalaz.Equal<G> contramap(scala.Function1<G, scalaz.FingerTree<V, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #31                 // InterfaceMethod scalaz/Equal.contramap$:(Lscalaz/Equal;Lscala/Function1;)Lscalaz/Equal;
       5: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #40                 // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<scalaz.FingerTree<V, A>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #47                 // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.EqualSyntax<scalaz.FingerTree<V, A>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #51                 // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scalaz.FingerTree<V, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #51                 // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public boolean equal(scalaz.FingerTree<V, A>, scalaz.FingerTree<V, A>);
    Code:
       0: getstatic     #66                 // Field scalaz/Equal$.MODULE$:Lscalaz/Equal$;
       3: pop
       4: getstatic     #71                 // Field scalaz/std/lazylist$.MODULE$:Lscalaz/std/lazylist$;
       7: pop
       8: aload_0
       9: getfield      #73                 // Field evidence$9$1:Lscalaz/Equal;
      12: astore_3
      13: new           #18                 // class scalaz/std/LazyListInstances$$anon$3
      16: dup
      17: aconst_null
      18: aload_3
      19: invokespecial #77                 // Method scalaz/std/LazyListInstances$$anon$3."<init>":(Lscalaz/std/LazyListInstances;Lscalaz/Equal;)V
      22: aconst_null
      23: astore_3
      24: aload_1
      25: invokevirtual #83                 // Method scalaz/FingerTree.toLazyList:()Lscala/collection/immutable/LazyList;
      28: aload_2
      29: invokevirtual #83                 // Method scalaz/FingerTree.toLazyList:()Lscala/collection/immutable/LazyList;
      32: invokestatic  #89                 // InterfaceMethod scalaz/std/LazyListEqual.equal$:(Lscalaz/std/LazyListEqual;Lscala/collection/immutable/LazyList;Lscala/collection/immutable/LazyList;)Z
      35: ireturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #79                 // class scalaz/FingerTree
       5: aload_2
       6: checkcast     #79                 // class scalaz/FingerTree
       9: invokevirtual #96                 // Method equal:(Lscalaz/FingerTree;Lscalaz/FingerTree;)Z
      12: ireturn

  public scalaz.FingerTreeInstances$$anon$8(scalaz.FingerTreeInstances, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #73                 // Field evidence$9$1:Lscalaz/Equal;
       5: aload_0
       6: invokespecial #102                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #106                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      13: invokestatic  #111                // Method scala/runtime/Statics.releaseFence:()V
      16: return
}
