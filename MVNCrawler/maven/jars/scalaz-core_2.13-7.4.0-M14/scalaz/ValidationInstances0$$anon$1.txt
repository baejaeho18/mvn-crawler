Compiled from "Validation.scala"
public final class scalaz.ValidationInstances0$$anon$1 implements scalaz.Order<scalaz.Validation<E, A>> {
  private scalaz.syntax.OrderSyntax<scalaz.Validation<E, A>> orderSyntax;

  private scalaz.syntax.EqualSyntax<scalaz.Validation<E, A>> equalSyntax;

  private final scalaz.Order evidence$3$1;

  private final scalaz.Order evidence$4$1;

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #38                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #47                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #51                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #55                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #59                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #65                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #75                 // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scalaz.Validation<E, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #83                 // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scalaz.Validation<E, A>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #91                 // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scalaz.Validation<E, A>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #98                 // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scalaz.Validation<E, A>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #105                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #111                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<scalaz.Validation<E, A>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #118                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<scalaz.Validation<E, A>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #122                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scalaz.Validation<E, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #122                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scalaz.Validation<E, A>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #130                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scalaz.Validation<E, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #130                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Ordering order(scalaz.Validation<E, A>, scalaz.Validation<E, A>);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: getfield      #140                // Field evidence$3$1:Lscalaz/Order;
       6: aload_0
       7: getfield      #142                // Field evidence$4$1:Lscalaz/Order;
      10: invokevirtual #148                // Method scalaz/Validation.compare:(Lscalaz/Validation;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Ordering;
      13: areturn

  public boolean equal(scalaz.Validation<E, A>, scalaz.Validation<E, A>);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: getfield      #140                // Field evidence$3$1:Lscalaz/Order;
       6: aload_0
       7: getfield      #142                // Field evidence$4$1:Lscalaz/Order;
      10: invokevirtual #156                // Method scalaz/Validation.$eq$eq$eq:(Lscalaz/Validation;Lscalaz/Equal;Lscalaz/Equal;)Z
      13: ireturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #159                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #144                // class scalaz/Validation
       5: aload_2
       6: checkcast     #144                // class scalaz/Validation
       9: invokevirtual #161                // Method equal:(Lscalaz/Validation;Lscalaz/Validation;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #144                // class scalaz/Validation
       5: aload_2
       6: checkcast     #144                // class scalaz/Validation
       9: invokevirtual #163                // Method order:(Lscalaz/Validation;Lscalaz/Validation;)Lscalaz/Ordering;
      12: areturn

  public scalaz.ValidationInstances0$$anon$1(scalaz.ValidationInstances0, scalaz.Order, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #140                // Field evidence$3$1:Lscalaz/Order;
       5: aload_0
       6: aload_3
       7: putfield      #142                // Field evidence$4$1:Lscalaz/Order;
      10: aload_0
      11: invokespecial #169                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #173                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      18: aload_0
      19: invokestatic  #176                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      22: invokestatic  #181                // Method scala/runtime/Statics.releaseFence:()V
      25: return
}
