Compiled from "IsEmpty.scala"
public final class scalaz.IsEmpty$$anon$3 implements scalaz.IsomorphismIsEmpty<F, G> {
  private scalaz.syntax.IsEmptySyntax<F> isEmptySyntax;

  private scalaz.syntax.PlusEmptySyntax<F> plusEmptySyntax;

  private scalaz.syntax.PlusSyntax<F> plusSyntax;

  private final scalaz.IsEmpty E$1;

  private final scalaz.Isomorphisms$Iso2 D$1;

  public <A> boolean isEmpty(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #54                 // InterfaceMethod scalaz/IsomorphismIsEmpty.isEmpty$:(Lscalaz/IsomorphismIsEmpty;Ljava/lang/Object;)Z
       5: ireturn

  public <A> F empty();
    Code:
       0: aload_0
       1: invokestatic  #66                 // InterfaceMethod scalaz/IsomorphismPlusEmpty.empty$:(Lscalaz/IsomorphismPlusEmpty;)Ljava/lang/Object;
       4: areturn

  public <A> F plus(F, scala.Function0<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/IsomorphismPlus.plus$:(Lscalaz/IsomorphismPlus;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public scalaz.IsEmpty<F>.IsEmptyLaw isEmptyLaw();
    Code:
       0: aload_0
       1: invokestatic  #85                 // InterfaceMethod scalaz/IsEmpty.isEmptyLaw$:(Lscalaz/IsEmpty;)Lscalaz/IsEmpty$IsEmptyLaw;
       4: areturn

  public <S, A> F unfoldlPsum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, F>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // InterfaceMethod scalaz/PlusEmpty.unfoldlPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S, A> F unfoldrPsum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<F, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #100                // InterfaceMethod scalaz/PlusEmpty.unfoldrPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.PlusEmpty<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #107                // InterfaceMethod scalaz/PlusEmpty.compose$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       4: areturn

  public <G> scalaz.PlusEmpty<?> product(scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #114                // InterfaceMethod scalaz/PlusEmpty.product$:(Lscalaz/PlusEmpty;Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       5: areturn

  public <A> scalaz.Monoid<F> monoid();
    Code:
       0: aload_0
       1: invokestatic  #122                // InterfaceMethod scalaz/PlusEmpty.monoid$:(Lscalaz/PlusEmpty;)Lscalaz/Monoid;
       4: areturn

  public scalaz.PlusEmpty<F>.EmptyLaw plusEmptyLaw();
    Code:
       0: aload_0
       1: invokestatic  #129                // InterfaceMethod scalaz/PlusEmpty.plusEmptyLaw$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty$EmptyLaw;
       4: areturn

  public <S$, A> scalaz.Maybe<F> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, F>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #136                // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S$, A> scalaz.Maybe<F> unfoldrPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<F, S$>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #141                // InterfaceMethod scalaz/Plus.unfoldrPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #146                // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<F> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #154                // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<F>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #161                // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.IsEmptySyntax<F> isEmptySyntax();
    Code:
       0: aload_0
       1: getfield      #165                // Field isEmptySyntax:Lscalaz/syntax/IsEmptySyntax;
       4: areturn

  public void scalaz$IsEmpty$_setter_$isEmptySyntax_$eq(scalaz.syntax.IsEmptySyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #165                // Field isEmptySyntax:Lscalaz/syntax/IsEmptySyntax;
       5: return

  public scalaz.syntax.PlusEmptySyntax<F> plusEmptySyntax();
    Code:
       0: aload_0
       1: getfield      #173                // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       4: areturn

  public void scalaz$PlusEmpty$_setter_$plusEmptySyntax_$eq(scalaz.syntax.PlusEmptySyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #173                // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       5: return

  public scalaz.syntax.PlusSyntax<F> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #180                // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #180                // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.IsEmpty<G> G();
    Code:
       0: aload_0
       1: getfield      #188                // Field E$1:Lscalaz/IsEmpty;
       4: areturn

  public scalaz.Isomorphisms$Iso2<scalaz.NaturalTransformation, F, G> iso();
    Code:
       0: aload_0
       1: getfield      #193                // Field D$1:Lscalaz/Isomorphisms$Iso2;
       4: areturn

  public scalaz.Plus compose();
    Code:
       0: aload_0
       1: invokevirtual #196                // Method compose:()Lscalaz/PlusEmpty;
       4: areturn

  public scalaz.Plus G();
    Code:
       0: aload_0
       1: invokevirtual #198                // Method G:()Lscalaz/IsEmpty;
       4: areturn

  public scalaz.PlusEmpty G();
    Code:
       0: aload_0
       1: invokevirtual #198                // Method G:()Lscalaz/IsEmpty;
       4: areturn

  public scalaz.IsEmpty$$anon$3(scalaz.IsEmpty, scalaz.Isomorphisms$Iso2);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #188                // Field E$1:Lscalaz/IsEmpty;
       5: aload_0
       6: aload_2
       7: putfield      #193                // Field D$1:Lscalaz/Isomorphisms$Iso2;
      10: aload_0
      11: invokespecial #203                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #207                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      18: aload_0
      19: invokestatic  #210                // InterfaceMethod scalaz/PlusEmpty.$init$:(Lscalaz/PlusEmpty;)V
      22: aload_0
      23: invokestatic  #213                // InterfaceMethod scalaz/IsEmpty.$init$:(Lscalaz/IsEmpty;)V
      26: invokestatic  #218                // Method scala/runtime/Statics.releaseFence:()V
      29: return
}
