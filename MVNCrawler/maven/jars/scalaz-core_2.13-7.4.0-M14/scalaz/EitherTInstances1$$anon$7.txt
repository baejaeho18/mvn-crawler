Compiled from "EitherT.scala"
public final class scalaz.EitherTInstances1$$anon$7 implements scalaz.EitherTPlus<F, L> {
  private scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Monad F0$5;

  private final scalaz.Semigroup L0$1;

  public <A> scalaz.EitherT<L, F, A> plus(scalaz.EitherT<L, F, A>, scala.Function0<scalaz.EitherT<L, F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #34                 // InterfaceMethod scalaz/EitherTPlus.plus$:(Lscalaz/EitherTPlus;Lscalaz/EitherT;Lscala/Function0;)Lscalaz/EitherT;
       6: areturn

  public <S$, A> scalaz.Maybe<scalaz.EitherT<L, F, A>> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, scalaz.EitherT<L, F, A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #47                 // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S$, A> scalaz.Maybe<scalaz.EitherT<L, F, A>> unfoldrPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<scalaz.EitherT<L, F, A>, S$>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #54                 // InterfaceMethod scalaz/Plus.unfoldrPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #61                 // InterfaceMethod scalaz/Plus.compose$:(Lscalaz/Plus;)Lscalaz/Plus;
       4: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #68                 // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<scalaz.EitherT<L, F, A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #76                 // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #83                 // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #87                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #87                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.Monad<F> F();
    Code:
       0: aload_0
       1: getfield      #96                 // Field F0$5:Lscalaz/Monad;
       4: areturn

  public scalaz.Semigroup<L> G();
    Code:
       0: aload_0
       1: getfield      #100                // Field L0$1:Lscalaz/Semigroup;
       4: areturn

  public java.lang.Object plus(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #103                // class scalaz/EitherT
       5: aload_2
       6: invokevirtual #105                // Method plus:(Lscalaz/EitherT;Lscala/Function0;)Lscalaz/EitherT;
       9: areturn

  public scalaz.EitherTInstances1$$anon$7(scalaz.EitherTInstances1, scalaz.Monad, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #96                 // Field F0$5:Lscalaz/Monad;
       5: aload_0
       6: aload_3
       7: putfield      #100                // Field L0$1:Lscalaz/Semigroup;
      10: aload_0
      11: invokespecial #111                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #115                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      18: invokestatic  #120                // Method scala/runtime/Statics.releaseFence:()V
      21: return
}
