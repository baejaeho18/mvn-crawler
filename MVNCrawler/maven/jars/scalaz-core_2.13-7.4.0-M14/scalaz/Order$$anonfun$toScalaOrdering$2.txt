Compiled from "Order.scala"
public final class scalaz.Order$$anonfun$toScalaOrdering$2 implements scala.math.Ordering<F> {
  private static final long serialVersionUID;

  private final scalaz.Order $outer;

  public scala.Some<java.lang.Object> tryCompare(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #31                 // InterfaceMethod scala/math/Ordering.tryCompare$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
       6: areturn

  public boolean lteq(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #41                 // InterfaceMethod scala/math/Ordering.lteq$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean gteq(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #45                 // InterfaceMethod scala/math/Ordering.gteq$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lt(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #49                 // InterfaceMethod scala/math/Ordering.lt$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean gt(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #53                 // InterfaceMethod scala/math/Ordering.gt$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean equiv(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #57                 // InterfaceMethod scala/math/Ordering.equiv$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public <U extends F> U max(U, U);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #64                 // InterfaceMethod scala/math/Ordering.max$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <U extends F> U min(U, U);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #68                 // InterfaceMethod scala/math/Ordering.min$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.math.Ordering<F> reverse();
    Code:
       0: aload_0
       1: invokestatic  #74                 // InterfaceMethod scala/math/Ordering.reverse$:(Lscala/math/Ordering;)Lscala/math/Ordering;
       4: areturn

  public boolean isReverseOf(scala.math.Ordering<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #82                 // InterfaceMethod scala/math/Ordering.isReverseOf$:(Lscala/math/Ordering;Lscala/math/Ordering;)Z
       5: ireturn

  public <U> scala.math.Ordering<U> on(scala.Function1<U, F>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #91                 // InterfaceMethod scala/math/Ordering.on$:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
       5: areturn

  public scala.math.Ordering<F> orElse(scala.math.Ordering<F>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #98                 // InterfaceMethod scala/math/Ordering.orElse$:(Lscala/math/Ordering;Lscala/math/Ordering;)Lscala/math/Ordering;
       5: areturn

  public <S> scala.math.Ordering<F> orElseBy(scala.Function1<F, S>, scala.math.Ordering<S>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #106                // InterfaceMethod scala/math/Ordering.orElseBy$:(Lscala/math/Ordering;Lscala/Function1;Lscala/math/Ordering;)Lscala/math/Ordering;
       6: areturn

  public scala.math.Ordering<F>.OrderingOps mkOrderingOps(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #114                // InterfaceMethod scala/math/Ordering.mkOrderingOps$:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$OrderingOps;
       5: areturn

  public final int compare(F, F);
    Code:
       0: aload_0
       1: getfield      #119                // Field $outer:Lscalaz/Order;
       4: aload_1
       5: aload_2
       6: invokeinterface #122,  3          // InterfaceMethod scalaz/Order.scalaz$Order$$$anonfun$toScalaOrdering$1:(Ljava/lang/Object;Ljava/lang/Object;)I
      11: ireturn

  public scala.math.PartialOrdering reverse();
    Code:
       0: aload_0
       1: invokevirtual #125                // Method reverse:()Lscala/math/Ordering;
       4: areturn

  public scala.Option tryCompare(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #128                // Method tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
       6: areturn

  public scalaz.Order$$anonfun$toScalaOrdering$2(scalaz.Order);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #119                // Field $outer:Lscalaz/Order;
      11: aload_0
      12: invokespecial #133                // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #139                // InterfaceMethod scala/math/PartialOrdering.$init$:(Lscala/math/PartialOrdering;)V
      19: aload_0
      20: invokestatic  #142                // InterfaceMethod scala/math/Ordering.$init$:(Lscala/math/Ordering;)V
      23: return
}
