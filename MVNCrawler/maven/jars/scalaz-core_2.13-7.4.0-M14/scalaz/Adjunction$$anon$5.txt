Compiled from "Adjunction.scala"
public final class scalaz.Adjunction$$anon$5 implements scalaz.Comonad<?> {
  private scalaz.syntax.ComonadSyntax<?> comonadSyntax;

  private scalaz.syntax.CobindSyntax<?> cobindSyntax;

  private scalaz.syntax.FunctorSyntax<?> functorSyntax;

  private scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax;

  private final scalaz.Adjunction $outer;

  public final <A> A copure(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #60                 // InterfaceMethod scalaz/Comonad.copure$:(Lscalaz/Comonad;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public scalaz.Comonad<?>.ComonadLaws comonadLaw();
    Code:
       0: aload_0
       1: invokestatic  #70                 // InterfaceMethod scalaz/Comonad.comonadLaw$:(Lscalaz/Comonad;)Lscalaz/Comonad$ComonadLaws;
       4: areturn

  public final <A, B> F extend(F, scala.Function1<F, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #79                 // InterfaceMethod scalaz/Cobind.extend$:(Lscalaz/Cobind;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public scalaz.Cobind<?>.CobindLaws cobindLaw();
    Code:
       0: aload_0
       1: invokestatic  #87                 // InterfaceMethod scalaz/Cobind.cobindLaw$:(Lscalaz/Cobind;)Lscalaz/Cobind$CobindLaws;
       4: areturn

  public <A, B> F xmap(F, scala.Function1<A, B>, scala.Function1<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #95                 // InterfaceMethod scalaz/Functor.xmap$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A, B> F apply(F, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #101                // InterfaceMethod scalaz/Functor.apply$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Function1<F, F> lift(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #108                // InterfaceMethod scalaz/Functor.lift$:(Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public <A, B> F strengthL(A, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #116                // InterfaceMethod scalaz/Functor.strengthL$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> F strengthR(F, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #122                // InterfaceMethod scalaz/Functor.strengthR$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> F mapply(A, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #126                // InterfaceMethod scalaz/Functor.mapply$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A> F fpair(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #132                // InterfaceMethod scalaz/Functor.fpair$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> F fproduct(F, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #136                // InterfaceMethod scalaz/Functor.fproduct$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A> F void(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #140                // InterfaceMethod scalaz/Functor.void$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> F counzip(scalaz.$bslash$div<F, F>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #147                // InterfaceMethod scalaz/Functor.counzip$:(Lscalaz/Functor;Lscalaz/$bslash$div;)Ljava/lang/Object;
       5: areturn

  public <G$> scalaz.Functor<?> compose(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #156                // InterfaceMethod scalaz/Functor.compose$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <G$> scalaz.Contravariant<?> icompose(scalaz.Contravariant<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #164                // InterfaceMethod scalaz/Functor.icompose$:(Lscalaz/Functor;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public <G$> scalaz.Bifunctor<?> bicompose(scalaz.Bifunctor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #173                // InterfaceMethod scalaz/Functor.bicompose$:(Lscalaz/Functor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G$> scalaz.Functor<?> product(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #178                // InterfaceMethod scalaz/Functor.product$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <A, B> F widen(F, scalaz.Liskov<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #186                // InterfaceMethod scalaz/Functor.widen$:(Lscalaz/Functor;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public scalaz.Functor<?>.FunctorLaw functorLaw();
    Code:
       0: aload_0
       1: invokestatic  #194                // InterfaceMethod scalaz/Functor.functorLaw$:(Lscalaz/Functor;)Lscalaz/Functor$FunctorLaw;
       4: areturn

  public <A, B> F xmapb(F, scalaz.BijectionT<?, ?, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #202                // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public <A, B> F xmapi(F, scalaz.Isomorphisms$Iso<scala.Function1, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #211                // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<?>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #219                // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.ComonadSyntax<?> comonadSyntax();
    Code:
       0: aload_0
       1: getfield      #223                // Field comonadSyntax:Lscalaz/syntax/ComonadSyntax;
       4: areturn

  public void scalaz$Comonad$_setter_$comonadSyntax_$eq(scalaz.syntax.ComonadSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #223                // Field comonadSyntax:Lscalaz/syntax/ComonadSyntax;
       5: return

  public scalaz.syntax.CobindSyntax<?> cobindSyntax();
    Code:
       0: aload_0
       1: getfield      #231                // Field cobindSyntax:Lscalaz/syntax/CobindSyntax;
       4: areturn

  public void scalaz$Cobind$_setter_$cobindSyntax_$eq(scalaz.syntax.CobindSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #231                // Field cobindSyntax:Lscalaz/syntax/CobindSyntax;
       5: return

  public scalaz.syntax.FunctorSyntax<?> functorSyntax();
    Code:
       0: aload_0
       1: getfield      #238                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       4: areturn

  public void scalaz$Functor$_setter_$functorSyntax_$eq(scalaz.syntax.FunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #238                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #245                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #245                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public <A> A copoint(F);
    Code:
       0: aload_0
       1: getfield      #251                // Field $outer:Lscalaz/Adjunction;
       4: aload_1
       5: invokevirtual #254                // Method scalaz/Adjunction.counit:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public <A, B> F cobind(F, scala.Function1<F, B>);
    Code:
       0: aload_0
       1: getfield      #251                // Field $outer:Lscalaz/Adjunction;
       4: invokevirtual #259                // Method scalaz/Adjunction.F:()Lscalaz/Functor;
       7: aload_1
       8: aload_0
       9: aload_2
      10: invokedynamic #276,  0            // InvokeDynamic #0:apply:(Lscalaz/Adjunction$$anon$5;Lscala/Function1;)Lscala/Function1;
      15: invokeinterface #279,  3          // InterfaceMethod scalaz/Functor.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      20: areturn

  public <A, B> F map(F, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_2
       2: invokedynamic #284,  0            // InvokeDynamic #1:apply:(Lscalaz/Adjunction$$anon$5;Lscala/Function1;)Lscala/Function1;
       7: astore_3
       8: aload_0
       9: getfield      #251                // Field $outer:Lscalaz/Adjunction;
      12: invokevirtual #259                // Method scalaz/Adjunction.F:()Lscalaz/Functor;
      15: aload_1
      16: aload_0
      17: aload_3
      18: invokedynamic #276,  0            // InvokeDynamic #0:apply:(Lscalaz/Adjunction$$anon$5;Lscala/Function1;)Lscala/Function1;
      23: invokeinterface #279,  3          // InterfaceMethod scalaz/Functor.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      28: areturn

  public <A> F cojoin(F);
    Code:
       0: invokedynamic #293,  0            // InvokeDynamic #2:apply:()Lscala/Function1;
       5: astore_2
       6: aload_0
       7: getfield      #251                // Field $outer:Lscalaz/Adjunction;
      10: invokevirtual #259                // Method scalaz/Adjunction.F:()Lscalaz/Functor;
      13: aload_1
      14: aload_0
      15: aload_2
      16: invokedynamic #276,  0            // InvokeDynamic #0:apply:(Lscalaz/Adjunction$$anon$5;Lscala/Function1;)Lscala/Function1;
      21: invokeinterface #279,  3          // InterfaceMethod scalaz/Functor.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      26: areturn

  public static final java.lang.Object $anonfun$cobind$2(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  public static final java.lang.Object $anonfun$cobind$1(scalaz.Adjunction$$anon$5, scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #251                // Field $outer:Lscalaz/Adjunction;
       4: aload_2
       5: invokedynamic #306,  0            // InvokeDynamic #3:apply:(Ljava/lang/Object;)Lscala/Function0;
      10: aload_1
      11: invokevirtual #310                // Method scalaz/Adjunction.leftAdjunct:(Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
      14: areturn

  public static final java.lang.Object $anonfun$map$1(scalaz.Adjunction$$anon$5, scala.Function1, java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #251                // Field $outer:Lscalaz/Adjunction;
       5: aload_2
       6: invokevirtual #254                // Method scalaz/Adjunction.counit:(Ljava/lang/Object;)Ljava/lang/Object;
       9: invokeinterface #316,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  public static final java.lang.Object $anonfun$cojoin$1(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  public scalaz.Adjunction$$anon$5(scalaz.Adjunction);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #251                // Field $outer:Lscalaz/Adjunction;
      11: aload_0
      12: invokespecial #321                // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #325                // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
      19: aload_0
      20: invokestatic  #328                // InterfaceMethod scalaz/Functor.$init$:(Lscalaz/Functor;)V
      23: aload_0
      24: invokestatic  #331                // InterfaceMethod scalaz/Cobind.$init$:(Lscalaz/Cobind;)V
      27: aload_0
      28: invokestatic  #334                // InterfaceMethod scalaz/Comonad.$init$:(Lscalaz/Comonad;)V
      31: invokestatic  #339                // Method scala/runtime/Statics.releaseFence:()V
      34: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #351,  0            // InvokeDynamic #4:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
