Compiled from "Plus.scala"
public final class scalaz.Plus$$anon$2 implements scalaz.ProductPlus<F, G> {
  private scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Plus $outer;

  private final scalaz.Plus G0$1;

  public <A> scala.Tuple2<F, G> plus(scala.Tuple2<F, G>, scala.Function0<scala.Tuple2<F, G>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #31                 // InterfaceMethod scalaz/ProductPlus.plus$:(Lscalaz/ProductPlus;Lscala/Tuple2;Lscala/Function0;)Lscala/Tuple2;
       6: areturn

  public <S$, A> scalaz.Maybe<scala.Tuple2<F, G>> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, scala.Tuple2<F, G>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #44                 // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S$, A> scalaz.Maybe<scala.Tuple2<F, G>> unfoldrPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<scala.Tuple2<F, G>, S$>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #51                 // InterfaceMethod scalaz/Plus.unfoldrPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #57                 // InterfaceMethod scalaz/Plus.compose$:(Lscalaz/Plus;)Lscalaz/Plus;
       4: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #63                 // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<scala.Tuple2<F, G>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #70                 // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #77                 // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #81                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #81                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.Plus<F> F();
    Code:
       0: aload_0
       1: getfield      #89                 // Field $outer:Lscalaz/Plus;
       4: areturn

  public scalaz.Plus<G> G();
    Code:
       0: aload_0
       1: getfield      #93                 // Field G0$1:Lscalaz/Plus;
       4: areturn

  public java.lang.Object plus(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #96                 // class scala/Tuple2
       5: aload_2
       6: invokevirtual #98                 // Method plus:(Lscala/Tuple2;Lscala/Function0;)Lscala/Tuple2;
       9: areturn

  public scalaz.Plus$$anon$2(scalaz.Plus, scalaz.Plus);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #89                 // Field $outer:Lscalaz/Plus;
      11: aload_0
      12: aload_2
      13: putfield      #93                 // Field G0$1:Lscalaz/Plus;
      16: aload_0
      17: invokespecial #103                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #107                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      24: invokestatic  #112                // Method scala/runtime/Statics.releaseFence:()V
      27: return
}
