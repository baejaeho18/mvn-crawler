Compiled from "FreeT.scala"
public final class scalaz.FreeTInstances0$$anon$13 implements scalaz.FreeTPlus<S, M> {
  private scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Applicative evidence$14$1;

  private final scalaz.BindRec evidence$15$1;

  private final scalaz.Plus evidence$16$1;

  public final <A> scalaz.FreeT<S, M, A> plus(scalaz.FreeT<S, M, A>, scala.Function0<scalaz.FreeT<S, M, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #36                 // InterfaceMethod scalaz/FreeTPlus.plus$:(Lscalaz/FreeTPlus;Lscalaz/FreeT;Lscala/Function0;)Lscalaz/FreeT;
       6: areturn

  public <S$, A> scalaz.Maybe<scalaz.FreeT<S, M, A>> unfoldlPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<S$, scalaz.FreeT<S, M, A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #49                 // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S$, A> scalaz.Maybe<scalaz.FreeT<S, M, A>> unfoldrPsumOpt(S$, scala.Function1<S$, scalaz.Maybe<scala.Tuple2<scalaz.FreeT<S, M, A>, S$>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #56                 // InterfaceMethod scalaz/Plus.unfoldrPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #63                 // InterfaceMethod scalaz/Plus.compose$:(Lscalaz/Plus;)Lscalaz/Plus;
       4: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #70                 // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<scalaz.FreeT<S, M, A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #77                 // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #84                 // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #88                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #88                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.Applicative<M> M();
    Code:
       0: getstatic     #101                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #103                // Field evidence$14$1:Lscalaz/Applicative;
       7: invokevirtual #107                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #109                // class scalaz/Applicative
      13: areturn

  public scalaz.BindRec<M> M1();
    Code:
       0: getstatic     #101                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #114                // Field evidence$15$1:Lscalaz/BindRec;
       7: invokevirtual #107                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #116                // class scalaz/BindRec
      13: areturn

  public scalaz.Plus<M> M2();
    Code:
       0: getstatic     #101                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #120                // Field evidence$16$1:Lscalaz/Plus;
       7: invokevirtual #107                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #17                 // class scalaz/Plus
      13: areturn

  public java.lang.Object plus(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #123                // class scalaz/FreeT
       5: aload_2
       6: invokevirtual #125                // Method plus:(Lscalaz/FreeT;Lscala/Function0;)Lscalaz/FreeT;
       9: areturn

  public scalaz.FreeTInstances0$$anon$13(scalaz.FreeTInstances0, scalaz.Applicative, scalaz.BindRec, scalaz.Plus);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #103                // Field evidence$14$1:Lscalaz/Applicative;
       5: aload_0
       6: aload_3
       7: putfield      #114                // Field evidence$15$1:Lscalaz/BindRec;
      10: aload_0
      11: aload         4
      13: putfield      #120                // Field evidence$16$1:Lscalaz/Plus;
      16: aload_0
      17: invokespecial #131                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #135                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      24: invokestatic  #140                // Method scala/runtime/Statics.releaseFence:()V
      27: return
}
