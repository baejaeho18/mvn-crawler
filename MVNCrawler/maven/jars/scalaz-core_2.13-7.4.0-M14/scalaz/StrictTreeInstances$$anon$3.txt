Compiled from "StrictTree.scala"
public final class scalaz.StrictTreeInstances$$anon$3 implements scalaz.Order<scalaz.StrictTree<A>>, scalaz.StrictTreeEqual<A> {
  private volatile scalaz.StrictTreeEqual<A>.EqualStackElem$ EqualStackElem$module;

  private scalaz.syntax.OrderSyntax<scalaz.StrictTree<A>> orderSyntax;

  private scalaz.syntax.EqualSyntax<scalaz.StrictTree<A>> equalSyntax;

  private final scalaz.StrictTreeInstances $outer;

  private final scalaz.Order A0$2;

  public final boolean equal(scalaz.StrictTree<A>, scalaz.StrictTree<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #55                 // InterfaceMethod scalaz/StrictTreeEqual.equal$:(Lscalaz/StrictTreeEqual;Lscalaz/StrictTree;Lscalaz/StrictTree;)Z
       6: ireturn

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #66                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #73                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #81                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #85                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #91                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #95                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #101                // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scalaz.StrictTree<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #109                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scalaz.StrictTree<A>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #117                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scalaz.StrictTree<A>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #123                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scalaz.StrictTree<A>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #130                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #136                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<scalaz.StrictTree<A>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #143                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.StrictTreeEqual<A>.EqualStackElem$ scalaz$StrictTreeEqual$$EqualStackElem();
    Code:
       0: aload_0
       1: getfield      #148                // Field EqualStackElem$module:Lscalaz/StrictTreeEqual$EqualStackElem$;
       4: ifnonnull     11
       7: aload_0
       8: invokespecial #152                // Method scalaz$StrictTreeEqual$$EqualStackElem$lzycompute$2:()V
      11: aload_0
      12: getfield      #148                // Field EqualStackElem$module:Lscalaz/StrictTreeEqual$EqualStackElem$;
      15: areturn

  public scalaz.syntax.OrderSyntax<scalaz.StrictTree<A>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #156                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scalaz.StrictTree<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #156                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scalaz.StrictTree<A>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #164                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scalaz.StrictTree<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #164                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Order<A> A();
    Code:
       0: aload_0
       1: getfield      #171                // Field A0$2:Lscalaz/Order;
       4: areturn

  public scalaz.Ordering order(scalaz.StrictTree<A>, scalaz.StrictTree<A>);
    Code:
       0: aload_0
       1: invokevirtual #176                // Method A:()Lscalaz/Order;
       4: aload_1
       5: invokevirtual #182                // Method scalaz/StrictTree.rootLabel:()Ljava/lang/Object;
       8: aload_2
       9: invokevirtual #182                // Method scalaz/StrictTree.rootLabel:()Ljava/lang/Object;
      12: invokeinterface #184,  3          // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      17: astore_3
      18: getstatic     #188                // Field scalaz/Ordering$EQ$.MODULE$:Lscalaz/Ordering$EQ$;
      21: aload_3
      22: invokevirtual #192                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      25: ifeq          98
      28: getstatic     #197                // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
      31: pop
      32: getstatic     #202                // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
      35: pop
      36: aload_0
      37: getfield      #204                // Field $outer:Lscalaz/StrictTreeInstances;
      40: aload_0
      41: getfield      #171                // Field A0$2:Lscalaz/Order;
      44: astore        6
      46: dup
      47: ifnonnull     52
      50: aconst_null
      51: athrow
      52: astore        5
      54: new           #2                  // class scalaz/StrictTreeInstances$$anon$3
      57: dup
      58: aload         5
      60: aload         6
      62: invokespecial #208                // Method "<init>":(Lscalaz/StrictTreeInstances;Lscalaz/Order;)V
      65: aconst_null
      66: astore        5
      68: aconst_null
      69: astore        6
      71: astore        4
      73: new           #33                 // class scalaz/std/VectorInstances$$anon$3
      76: dup
      77: aconst_null
      78: aload         4
      80: invokespecial #211                // Method scalaz/std/VectorInstances$$anon$3."<init>":(Lscalaz/std/VectorInstances;Lscalaz/Order;)V
      83: aconst_null
      84: astore        4
      86: aload_1
      87: invokevirtual #215                // Method scalaz/StrictTree.subForest:()Lscala/collection/immutable/Vector;
      90: aload_2
      91: invokevirtual #215                // Method scalaz/StrictTree.subForest:()Lscala/collection/immutable/Vector;
      94: invokestatic  #221                // InterfaceMethod scalaz/std/VectorOrder.order$:(Lscalaz/std/VectorOrder;Lscala/collection/immutable/Vector;Lscala/collection/immutable/Vector;)Lscalaz/Ordering;
      97: areturn
      98: aload_3
      99: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #227                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #178                // class scalaz/StrictTree
       5: aload_2
       6: checkcast     #178                // class scalaz/StrictTree
       9: invokevirtual #229                // Method equal:(Lscalaz/StrictTree;Lscalaz/StrictTree;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #178                // class scalaz/StrictTree
       5: aload_2
       6: checkcast     #178                // class scalaz/StrictTree
       9: invokevirtual #231                // Method order:(Lscalaz/StrictTree;Lscalaz/StrictTree;)Lscalaz/Ordering;
      12: areturn

  public scalaz.Equal A();
    Code:
       0: aload_0
       1: invokevirtual #176                // Method A:()Lscalaz/Order;
       4: areturn

  private final void scalaz$StrictTreeEqual$$EqualStackElem$lzycompute$2();
    Code:
       0: aload_0
       1: monitorenter
       2: aload_0
       3: getfield      #148                // Field EqualStackElem$module:Lscalaz/StrictTreeEqual$EqualStackElem$;
       6: ifnonnull     21
       9: aload_0
      10: new           #30                 // class scalaz/StrictTreeEqual$EqualStackElem$
      13: dup
      14: aload_0
      15: invokespecial #235                // Method scalaz/StrictTreeEqual$EqualStackElem$."<init>":(Lscalaz/StrictTreeEqual;)V
      18: putfield      #148                // Field EqualStackElem$module:Lscalaz/StrictTreeEqual$EqualStackElem$;
      21: aload_0
      22: monitorexit
      23: return
      24: aload_0
      25: monitorexit
      26: athrow
    Exception table:
       from    to  target type
           2    21    24   any

  public scalaz.StrictTreeInstances$$anon$3(scalaz.StrictTreeInstances, scalaz.Order);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #204                // Field $outer:Lscalaz/StrictTreeInstances;
      11: aload_0
      12: aload_2
      13: putfield      #171                // Field A0$2:Lscalaz/Order;
      16: aload_0
      17: invokespecial #239                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #243                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      24: aload_0
      25: invokestatic  #246                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      28: invokestatic  #251                // Method scala/runtime/Statics.releaseFence:()V
      31: return
}
