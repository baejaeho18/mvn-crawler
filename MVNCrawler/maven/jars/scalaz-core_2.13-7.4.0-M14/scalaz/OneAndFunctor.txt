Compiled from "OneAnd.scala"
public interface scalaz.OneAndFunctor<F> extends scalaz.Functor<?> {
  public abstract scalaz.Functor<F> F();

  public static scalaz.OneAnd map$(scalaz.OneAndFunctor, scalaz.OneAnd, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #28                 // InterfaceMethod map:(Lscalaz/OneAnd;Lscala/Function1;)Lscalaz/OneAnd;
       6: areturn

  public default <A, B> scalaz.OneAnd<F, B> map(scalaz.OneAnd<F, A>, scala.Function1<A, B>);
    Code:
       0: getstatic     #38                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: pop
       4: aload_2
       5: aload_1
       6: invokevirtual #42                 // Method scalaz/OneAnd.head:()Ljava/lang/Object;
       9: invokeinterface #48,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: aload_0
      15: invokeinterface #50,  1           // InterfaceMethod F:()Lscalaz/Functor;
      20: aload_1
      21: invokevirtual #53                 // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      24: aload_2
      25: invokeinterface #56,  3           // InterfaceMethod scalaz/Functor.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      30: astore        4
      32: astore_3
      33: getstatic     #59                 // Field scalaz/OneAnd$Strict$.MODULE$:Lscalaz/OneAnd$Strict$;
      36: aload_3
      37: aload         4
      39: invokevirtual #62                 // Method scalaz/OneAnd$Strict$.apply:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/OneAnd;
      42: areturn

  public static void $init$(scalaz.OneAndFunctor);
    Code:
       0: return
}
