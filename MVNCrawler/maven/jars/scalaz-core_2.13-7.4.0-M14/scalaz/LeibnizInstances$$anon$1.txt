Compiled from "Leibniz.scala"
public final class scalaz.LeibnizInstances$$anon$1 implements scalaz.Category<scalaz.Leibniz> {
  private scalaz.syntax.CategorySyntax<scalaz.Leibniz> categorySyntax;

  private scalaz.syntax.ComposeSyntax<scalaz.Leibniz> composeSyntax;

  public scalaz.PlusEmpty<?> empty();
    Code:
       0: aload_0
       1: invokestatic  #33                 // InterfaceMethod scalaz/Category.empty$:(Lscalaz/Category;)Lscalaz/PlusEmpty;
       4: areturn

  public <A> scalaz.Monoid<scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, A, A>> monoid();
    Code:
       0: aload_0
       1: invokestatic  #42                 // InterfaceMethod scalaz/Category.monoid$:(Lscalaz/Category;)Lscalaz/Monoid;
       4: areturn

  public scalaz.Category<scalaz.Leibniz>.CategoryLaw categoryLaw();
    Code:
       0: aload_0
       1: invokestatic  #49                 // InterfaceMethod scalaz/Category.categoryLaw$:(Lscalaz/Category;)Lscalaz/Category$CategoryLaw;
       4: areturn

  public scalaz.Plus<?> plus();
    Code:
       0: aload_0
       1: invokestatic  #56                 // InterfaceMethod scalaz/Compose.plus$:(Lscalaz/Compose;)Lscalaz/Plus;
       4: areturn

  public <A> scalaz.Semigroup<scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, A, A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #63                 // InterfaceMethod scalaz/Compose.semigroup$:(Lscalaz/Compose;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Compose<scalaz.Leibniz>.ComposeLaw composeLaw();
    Code:
       0: aload_0
       1: invokestatic  #70                 // InterfaceMethod scalaz/Compose.composeLaw$:(Lscalaz/Compose;)Lscalaz/Compose$ComposeLaw;
       4: areturn

  public scalaz.syntax.CategorySyntax<scalaz.Leibniz> categorySyntax();
    Code:
       0: aload_0
       1: getfield      #74                 // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       4: areturn

  public void scalaz$Category$_setter_$categorySyntax_$eq(scalaz.syntax.CategorySyntax<scalaz.Leibniz>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #74                 // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       5: return

  public scalaz.syntax.ComposeSyntax<scalaz.Leibniz> composeSyntax();
    Code:
       0: aload_0
       1: getfield      #82                 // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       4: areturn

  public void scalaz$Compose$_setter_$composeSyntax_$eq(scalaz.syntax.ComposeSyntax<scalaz.Leibniz>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #82                 // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       5: return

  public <A> scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, A, A> id();
    Code:
       0: getstatic     #94                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       3: pop
       4: new           #20                 // class scalaz/Leibniz$$anon$2
       7: dup
       8: invokespecial #98                 // Method scalaz/Leibniz$$anon$2."<init>":()V
      11: areturn

  public <A, B, C> scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, A, C> compose(scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, B, C>, scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, A, B>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: getstatic     #94                 // Field scalaz/Leibniz$.MODULE$:Lscalaz/Leibniz$;
       9: pop
      10: aload_1
      11: aload_2
      12: invokevirtual #109                // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #105                // class scalaz/Leibniz
      18: areturn

  public java.lang.Object compose(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Leibniz
       5: aload_2
       6: checkcast     #105                // class scalaz/Leibniz
       9: invokevirtual #115                // Method compose:(Lscalaz/Leibniz;Lscalaz/Leibniz;)Lscalaz/Leibniz;
      12: areturn

  public java.lang.Object id();
    Code:
       0: aload_0
       1: invokevirtual #119                // Method id:()Lscalaz/Leibniz;
       4: areturn

  public scalaz.LeibnizInstances$$anon$1(scalaz.LeibnizInstances);
    Code:
       0: aload_0
       1: invokespecial #122                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #126                // InterfaceMethod scalaz/Compose.$init$:(Lscalaz/Compose;)V
       8: aload_0
       9: invokestatic  #129                // InterfaceMethod scalaz/Category.$init$:(Lscalaz/Category;)V
      12: invokestatic  #134                // Method scala/runtime/Statics.releaseFence:()V
      15: return
}
