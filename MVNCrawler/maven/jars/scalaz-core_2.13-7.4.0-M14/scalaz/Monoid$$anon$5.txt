Compiled from "Monoid.scala"
public final class scalaz.Monoid$$anon$5 implements scalaz.IsomorphismMonoid<F, G> {
  private scalaz.syntax.MonoidSyntax<F> monoidSyntax;

  private scalaz.syntax.SemigroupSyntax<F> semigroupSyntax;

  private final scalaz.Monoid M$1;

  private final scalaz.Isomorphisms$Iso D$1;

  public F zero();
    Code:
       0: aload_0
       1: invokestatic  #45                 // InterfaceMethod scalaz/IsomorphismMonoid.zero$:(Lscalaz/IsomorphismMonoid;)Ljava/lang/Object;
       4: areturn

  public F append(F, scala.Function0<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #58                 // InterfaceMethod scalaz/IsomorphismSemigroup.append$:(Lscalaz/IsomorphismSemigroup;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public F multiply(F, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(F, scalaz.Equal<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #79                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty(F, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #89                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty(F, scala.Function0<B>, scalaz.Equal<F>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #98                 // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty(F, scala.Function0<B>, scalaz.Equal<F>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #103                // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <S> F unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, F>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #111                // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S> F unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<F, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #117                // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #124                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #131                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<F>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #138                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public F multiply1(F, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #143                // InterfaceMethod scalaz/Semigroup.multiply1$:(Lscalaz/Semigroup;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<F> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, F>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #150                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<F> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<F, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #155                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #162                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #169                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<F>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #176                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.MonoidSyntax<F> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #180                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #180                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<F> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #188                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #188                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public scalaz.Monoid<G> G();
    Code:
       0: aload_0
       1: getfield      #196                // Field M$1:Lscalaz/Monoid;
       4: areturn

  public scalaz.Isomorphisms$Iso<scala.Function1, F, G> iso();
    Code:
       0: aload_0
       1: getfield      #201                // Field D$1:Lscalaz/Isomorphisms$Iso;
       4: areturn

  public scalaz.Semigroup G();
    Code:
       0: aload_0
       1: invokevirtual #204                // Method G:()Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid$$anon$5(scalaz.Monoid, scalaz.Isomorphisms$Iso);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #196                // Field M$1:Lscalaz/Monoid;
       5: aload_0
       6: aload_2
       7: putfield      #201                // Field D$1:Lscalaz/Isomorphisms$Iso;
      10: aload_0
      11: invokespecial #209                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #213                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
      18: aload_0
      19: invokestatic  #216                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      22: invokestatic  #221                // Method scala/runtime/Statics.releaseFence:()V
      25: return
}
