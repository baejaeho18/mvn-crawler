Compiled from "Coproduct.scala"
public final class scalaz.CoproductInstances2$$anon$5 implements scalaz.CoproductContravariant<F, G> {
  private scalaz.syntax.ContravariantSyntax<?> contravariantSyntax;

  private scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax;

  private final scalaz.Contravariant F0$4;

  private final scalaz.Contravariant G0$4;

  public <A, B> scalaz.Coproduct<F, G, B> contramap(scalaz.Coproduct<F, G, A>, scala.Function1<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #46                 // InterfaceMethod scalaz/CoproductContravariant.contramap$:(Lscalaz/CoproductContravariant;Lscalaz/Coproduct;Lscala/Function1;)Lscalaz/Coproduct;
       6: areturn

  public java.lang.Object narrow(java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #58                 // InterfaceMethod scalaz/Contravariant.narrow$:(Lscalaz/Contravariant;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #67                 // InterfaceMethod scalaz/Contravariant.xmap$:(Lscalaz/Contravariant;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <G> scalaz.Functor<?> compose(scalaz.Contravariant<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #75                 // InterfaceMethod scalaz/Contravariant.compose$:(Lscalaz/Contravariant;Lscalaz/Contravariant;)Lscalaz/Functor;
       5: areturn

  public <G> scalaz.Contravariant<?> icompose(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #82                 // InterfaceMethod scalaz/Contravariant.icompose$:(Lscalaz/Contravariant;Lscalaz/Functor;)Lscalaz/Contravariant;
       5: areturn

  public <G> scalaz.Contravariant<?> product(scalaz.Contravariant<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #89                 // InterfaceMethod scalaz/Contravariant.product$:(Lscalaz/Contravariant;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public scalaz.Contravariant<?>.ContravariantLaw contravariantLaw();
    Code:
       0: aload_0
       1: invokestatic  #96                 // InterfaceMethod scalaz/Contravariant.contravariantLaw$:(Lscalaz/Contravariant;)Lscalaz/Contravariant$ContravariantLaw;
       4: areturn

  public java.lang.Object xmapb(java.lang.Object, scalaz.BijectionT);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #104                // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmapi(java.lang.Object, scalaz.Isomorphisms$Iso);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #112                // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<?>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #120                // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.ContravariantSyntax<?> contravariantSyntax();
    Code:
       0: aload_0
       1: getfield      #124                // Field contravariantSyntax:Lscalaz/syntax/ContravariantSyntax;
       4: areturn

  public void scalaz$Contravariant$_setter_$contravariantSyntax_$eq(scalaz.syntax.ContravariantSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #124                // Field contravariantSyntax:Lscalaz/syntax/ContravariantSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #132                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #132                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public scalaz.Contravariant<F> F();
    Code:
       0: aload_0
       1: getfield      #140                // Field F0$4:Lscalaz/Contravariant;
       4: areturn

  public scalaz.Contravariant<G> G();
    Code:
       0: aload_0
       1: getfield      #144                // Field G0$4:Lscalaz/Contravariant;
       4: areturn

  public java.lang.Object contramap(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #148                // class scalaz/Coproduct
       5: aload_2
       6: invokevirtual #150                // Method contramap:(Lscalaz/Coproduct;Lscala/Function1;)Lscalaz/Coproduct;
       9: areturn

  public scalaz.CoproductInstances2$$anon$5(scalaz.CoproductInstances2, scalaz.Contravariant, scalaz.Contravariant);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #140                // Field F0$4:Lscalaz/Contravariant;
       5: aload_0
       6: aload_3
       7: putfield      #144                // Field G0$4:Lscalaz/Contravariant;
      10: aload_0
      11: invokespecial #156                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #160                // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
      18: aload_0
      19: invokestatic  #163                // InterfaceMethod scalaz/Contravariant.$init$:(Lscalaz/Contravariant;)V
      22: invokestatic  #168                // Method scala/runtime/Statics.releaseFence:()V
      25: return
}
