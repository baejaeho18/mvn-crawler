Compiled from "EitherT.scala"
public abstract class scalaz.EitherTInstances extends scalaz.EitherTInstances0 {
  public <F> scalaz.Bitraverse<?> eitherTBitraverse(scalaz.Traverse<F>);
    Code:
       0: new           #15                 // class scalaz/EitherTInstances$$anon$13
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #27                 // Method scalaz/EitherTInstances$$anon$13."<init>":(Lscalaz/EitherTInstances;Lscalaz/Traverse;)V
       9: areturn

  public <F, L> scalaz.Traverse<?> eitherTTraverse(scalaz.Traverse<F>);
    Code:
       0: new           #17                 // class scalaz/EitherTInstances$$anon$14
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #34                 // Method scalaz/EitherTInstances$$anon$14."<init>":(Lscalaz/EitherTInstances;Lscalaz/Traverse;)V
       9: areturn

  public <A> scalaz.Hoist<?> eitherTHoist();
    Code:
       0: new           #19                 // class scalaz/EitherTInstances$$anon$15
       3: dup
       4: aconst_null
       5: invokespecial #40                 // Method scalaz/EitherTInstances$$anon$15."<init>":(Lscalaz/EitherTInstances;)V
       8: areturn

  public <F, A, B> scalaz.Equal<scalaz.EitherT<A, F, B>> eitherTEqual(scalaz.Equal<F>);
    Code:
       0: aload_1
       1: invokedynamic #64,  0             // InvokeDynamic #0:apply:()Lscala/Function1;
       6: invokeinterface #70,  2           // InterfaceMethod scalaz/Equal.contramap:(Lscala/Function1;)Lscalaz/Equal;
      11: areturn

  public <F, A, B> scalaz.Show<scalaz.EitherT<A, F, B>> eitherTShow(scalaz.Show<F>);
    Code:
       0: getstatic     #80                 // Field scalaz/Contravariant$.MODULE$:Lscalaz/Contravariant$;
       3: pop
       4: getstatic     #85                 // Field scalaz/Show$.MODULE$:Lscalaz/Show$;
       7: invokevirtual #89                 // Method scalaz/Show$.showContravariant:()Lscalaz/Contravariant;
      10: aload_1
      11: invokedynamic #94,  0             // InvokeDynamic #1:apply:()Lscala/Function1;
      16: invokeinterface #99,  3           // InterfaceMethod scalaz/Contravariant.contramap:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      21: checkcast     #101                // class scalaz/Show
      24: areturn

  public static final java.lang.Object $anonfun$eitherTEqual$1(scalaz.EitherT);
    Code:
       0: aload_0
       1: invokevirtual #109                // Method scalaz/EitherT.run:()Ljava/lang/Object;
       4: areturn

  public static final java.lang.Object $anonfun$eitherTShow$1(scalaz.EitherT);
    Code:
       0: aload_0
       1: invokevirtual #109                // Method scalaz/EitherT.run:()Ljava/lang/Object;
       4: areturn

  public scalaz.EitherTInstances();
    Code:
       0: aload_0
       1: invokespecial #114                // Method scalaz/EitherTInstances0."<init>":()V
       4: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #126,  0            // InvokeDynamic #2:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
