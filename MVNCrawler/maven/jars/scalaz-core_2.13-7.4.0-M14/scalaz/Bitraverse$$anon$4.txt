Compiled from "Bitraverse.scala"
public final class scalaz.Bitraverse$$anon$4 implements scalaz.RightTraverse<F, X> {
  private final scalaz.Bitraverse<F> F;

  private scalaz.syntax.TraverseSyntax<?> traverseSyntax;

  private scalaz.syntax.FoldableSyntax<?> foldableSyntax;

  private scalaz.syntax.FunctorSyntax<?> functorSyntax;

  private scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax;

  public <G, A, B> G traverseImpl(F, scala.Function1<A, G>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #66                 // InterfaceMethod scalaz/RightTraverse.traverseImpl$:(Lscalaz/RightTraverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldMap(F, scala.Function1<A, B>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #81                 // InterfaceMethod scalaz/RightFoldable.foldMap$:(Lscalaz/RightFoldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldRight(F, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #90                 // InterfaceMethod scalaz/RightFoldable.foldRight$:(Lscalaz/RightFoldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldLeft(F, B, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #99                 // InterfaceMethod scalaz/RightFoldable.foldLeft$:(Lscalaz/RightFoldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A, C> F map(F, scala.Function1<A, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #109                // InterfaceMethod scalaz/RightFunctor.map$:(Lscalaz/RightFunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.Traverse<?> compose(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #117                // InterfaceMethod scalaz/Traverse.compose$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Bitraverse<?> bicompose(scalaz.Bitraverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #125                // InterfaceMethod scalaz/Traverse.bicompose$:(Lscalaz/Traverse;Lscalaz/Bitraverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G> scalaz.Traverse<?> product(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #129                // InterfaceMethod scalaz/Traverse.product$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Traverse1<?> product0(scalaz.Traverse1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #136                // InterfaceMethod scalaz/Traverse.product0$:(Lscalaz/Traverse;Lscalaz/Traverse1;)Lscalaz/Traverse1;
       5: areturn

  public <G> scalaz.Traverse<?>.Traversal<G> traversal(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #145                // InterfaceMethod scalaz/Traverse.traversal$:(Lscalaz/Traverse;Lscalaz/Applicative;)Lscalaz/Traverse$Traversal;
       5: areturn

  public <S> scalaz.Traverse<?>.Traversal<?> traversalS();
    Code:
       0: aload_0
       1: invokestatic  #152                // InterfaceMethod scalaz/Traverse.traversalS$:(Lscalaz/Traverse;)Lscalaz/Traverse$Traversal;
       4: areturn

  public <G, A, B> G traverse(F, scala.Function1<A, G>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #158                // InterfaceMethod scalaz/Traverse.traverse$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final <A, GB> java.lang.Object traverseU(F, scala.Function1<A, GB>, scalaz.Unapply<scalaz.Applicative, GB>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #166                // InterfaceMethod scalaz/Traverse.traverseU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public final <A, G, B> G traverseM(F, scala.Function1<A, G>, scalaz.Applicative<G>, scalaz.Bind<?>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #174                // InterfaceMethod scalaz/Traverse.traverseM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       9: areturn

  public <S, A, B> scalaz.IndexedStateT<S, S, java.lang.Object, F> traverseS(F, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #182                // InterfaceMethod scalaz/Traverse.traverseS$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public <S, A, B> scala.Tuple2<S, F> runTraverseS(F, S, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #190                // InterfaceMethod scalaz/Traverse.runTraverseS$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Lscala/Tuple2;
       7: areturn

  public <S, G, A, B> scalaz.IndexedStateT<S, S, java.lang.Object, G> traverseSTrampoline(F, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, G>>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #198                // InterfaceMethod scalaz/Traverse.traverseSTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/IndexedStateT;
       7: areturn

  public <S, G, A, B> scalaz.Kleisli<G, S, F> traverseKTrampoline(F, scala.Function1<A, scalaz.Kleisli<G, S, B>>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #206                // InterfaceMethod scalaz/Traverse.traverseKTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/Kleisli;
       7: areturn

  public <G, A> G sequence(F, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #215                // InterfaceMethod scalaz/Traverse.sequence$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public <S, A> scalaz.IndexedStateT<S, S, java.lang.Object, F> sequenceS(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #222                // InterfaceMethod scalaz/Traverse.sequenceS$:(Lscalaz/Traverse;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public final <A> java.lang.Object sequenceU(F, scalaz.Unapply<scalaz.Applicative, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #230                // InterfaceMethod scalaz/Traverse.sequenceU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public <A, G> G sequenceM(F, scalaz.Applicative<G>, scalaz.Bind<?>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #238                // InterfaceMethod scalaz/Traverse.sequenceM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       7: areturn

  public <A, B> scala.Tuple2<B, F> foldLShape(F, B, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #245                // InterfaceMethod scalaz/Traverse.foldLShape$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public <A> F reverse(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #252                // InterfaceMethod scalaz/Traverse.reverse$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B, C> scala.Tuple2<scala.collection.immutable.List<B>, F> zipWith(F, F, scala.Function2<A, scala.Option<B>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #258                // InterfaceMethod scalaz/Traverse.zipWith$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public <A, B, C> F zipWithL(F, F, scala.Function2<A, scala.Option<B>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #264                // InterfaceMethod scalaz/Traverse.zipWithL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A, B, C> F zipWithR(F, F, scala.Function2<scala.Option<A>, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #269                // InterfaceMethod scalaz/Traverse.zipWithR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A> F indexed(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #273                // InterfaceMethod scalaz/Traverse.indexed$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> F zipL(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #280                // InterfaceMethod scalaz/Traverse.zipL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> F zipR(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #284                // InterfaceMethod scalaz/Traverse.zipR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <S, A, B> scala.Tuple2<S, F> mapAccumL(F, S, scala.Function2<S, A, scala.Tuple2<S, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #289                // InterfaceMethod scalaz/Traverse.mapAccumL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public <S, A, B> scala.Tuple2<S, F> mapAccumR(F, S, scala.Function2<S, A, scala.Tuple2<S, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #293                // InterfaceMethod scalaz/Traverse.mapAccumR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public scalaz.Traverse<?>.TraverseLaw traverseLaw();
    Code:
       0: aload_0
       1: invokestatic  #300                // InterfaceMethod scalaz/Traverse.traverseLaw$:(Lscalaz/Traverse;)Lscalaz/Traverse$TraverseLaw;
       4: areturn

  public <A, B> scala.Option<B> foldMap1Opt(F, scala.Function1<A, B>, scalaz.Semigroup<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #307                // InterfaceMethod scalaz/Foldable.foldMap1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Semigroup;)Lscala/Option;
       7: areturn

  public <G> scalaz.Foldable<?> compose(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #313                // InterfaceMethod scalaz/Foldable.compose$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Bifoldable<?> bicompose(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #320                // InterfaceMethod scalaz/Foldable.bicompose$:(Lscalaz/Foldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public <G> scalaz.Foldable<?> product(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #323                // InterfaceMethod scalaz/Foldable.product$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Foldable1<?> product0(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #328                // InterfaceMethod scalaz/Foldable.product0$:(Lscalaz/Foldable;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public <G, A, B> G foldRightM(F, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #337                // InterfaceMethod scalaz/Foldable.foldRightM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <G, A, B> G foldLeftM(F, B, scala.Function2<B, A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #345                // InterfaceMethod scalaz/Foldable.foldLeftM$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <G, A, B> G foldMapM(F, scala.Function1<A, G>, scalaz.Monoid<B>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #352                // InterfaceMethod scalaz/Foldable.foldMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public <M> M fold(F, scalaz.Monoid<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #360                // InterfaceMethod scalaz/Foldable.fold$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Option<A> fold1Opt(F, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #367                // InterfaceMethod scalaz/Foldable.fold1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public <M, A, B> M traverse_(F, scala.Function1<A, M>, scalaz.Applicative<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #374                // InterfaceMethod scalaz/Foldable.traverse_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final <A, GB> java.lang.Object traverseU_(F, scala.Function1<A, GB>, scalaz.Unapply<scalaz.Applicative, GB>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #379                // InterfaceMethod scalaz/Foldable.traverseU_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public <S, A, B> scalaz.IndexedStateT<S, S, java.lang.Object, scala.runtime.BoxedUnit> traverseS_(F, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #385                // InterfaceMethod scalaz/Foldable.traverseS_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public <M, A> M sequence_(F, scalaz.Applicative<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #391                // InterfaceMethod scalaz/Foldable.sequence_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public <S, A> scalaz.IndexedStateT<S, S, java.lang.Object, scala.runtime.BoxedUnit> sequenceS_(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #397                // InterfaceMethod scalaz/Foldable.sequenceS_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public <M, A> scalaz.Free<M, scala.runtime.BoxedUnit> sequenceF_(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #405                // InterfaceMethod scalaz/Foldable.sequenceF_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/Free;
       5: areturn

  public final <A, B> B foldr(F, scala.Function0<B>, scala.Function1<A, scala.Function1<scala.Function0<B>, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #412                // InterfaceMethod scalaz/Foldable.foldr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A, B> scala.Option<B> foldMapRight1Opt(F, scala.Function1<A, B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #419                // InterfaceMethod scalaz/Foldable.foldMapRight1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public <A> scala.Option<A> foldRight1Opt(F, scala.Function2<A, scala.Function0<A>, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #426                // InterfaceMethod scalaz/Foldable.foldRight1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public <A> scala.Option<A> foldr1Opt(F, scala.Function1<A, scala.Function1<scala.Function0<A>, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #433                // InterfaceMethod scalaz/Foldable.foldr1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final <A, B> B foldl(F, B, scala.Function1<B, scala.Function1<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #440                // InterfaceMethod scalaz/Foldable.foldl$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A, B> scala.Option<B> foldMapLeft1Opt(F, scala.Function1<A, B>, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #445                // InterfaceMethod scalaz/Foldable.foldMapLeft1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public <A> scala.Option<A> foldLeft1Opt(F, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #450                // InterfaceMethod scalaz/Foldable.foldLeft1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public <A> scala.Option<A> foldl1Opt(F, scala.Function1<A, scala.Function1<A, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #455                // InterfaceMethod scalaz/Foldable.foldl1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final <G, A, B> G foldrM(F, scala.Function0<B>, scala.Function1<A, scala.Function1<scala.Function0<B>, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #462                // InterfaceMethod scalaz/Foldable.foldrM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <G, A, B> G foldlM(F, scala.Function0<B>, scala.Function1<B, scala.Function1<A, G>>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #467                // InterfaceMethod scalaz/Foldable.foldlM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final <M, A, B> M findMapM(F, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #474                // InterfaceMethod scalaz/Foldable.findMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public <A> scala.Option<A> findLeft(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #479                // InterfaceMethod scalaz/Foldable.findLeft$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public <A> scala.Option<A> findRight(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #483                // InterfaceMethod scalaz/Foldable.findRight$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final <A> int count(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #490                // InterfaceMethod scalaz/Foldable.count$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public <A> int length(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #494                // InterfaceMethod scalaz/Foldable.length$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public <A> scala.Option<A> index(F, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #502                // InterfaceMethod scalaz/Foldable.index$:(Lscalaz/Foldable;Ljava/lang/Object;I)Lscala/Option;
       6: areturn

  public <A> A indexOr(F, scala.Function0<A>, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #511                // InterfaceMethod scalaz/Foldable.indexOr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;I)Ljava/lang/Object;
       7: areturn

  public <A> scala.collection.immutable.List<A> toList(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #518                // InterfaceMethod scalaz/Foldable.toList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/List;
       5: areturn

  public <A> scala.collection.immutable.Vector<A> toVector(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #525                // InterfaceMethod scalaz/Foldable.toVector$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Vector;
       5: areturn

  public <A> scala.collection.immutable.Set<A> toSet(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #532                // InterfaceMethod scalaz/Foldable.toSet$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Set;
       5: areturn

  public <A> scala.collection.immutable.Stream<A> toStream(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #539                // InterfaceMethod scalaz/Foldable.toStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Stream;
       5: areturn

  public <A> scala.collection.immutable.LazyList<A> toLazyList(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #546                // InterfaceMethod scalaz/Foldable.toLazyList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/LazyList;
       5: areturn

  public <A> scalaz.IList<A> toIList(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #553                // InterfaceMethod scalaz/Foldable.toIList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IList;
       5: areturn

  public <A> scalaz.EphemeralStream<A> toEphemeralStream(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #560                // InterfaceMethod scalaz/Foldable.toEphemeralStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/EphemeralStream;
       5: areturn

  public <A> boolean all(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #568                // InterfaceMethod scalaz/Foldable.all$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public <G, A> G allM(F, scala.Function1<A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #573                // InterfaceMethod scalaz/Foldable.allM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public <A> boolean any(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #577                // InterfaceMethod scalaz/Foldable.any$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public <G, A> G anyM(F, scala.Function1<A, G>, scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #581                // InterfaceMethod scalaz/Foldable.anyM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public <A> int filterLength(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #588                // InterfaceMethod scalaz/Foldable.filterLength$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)I
       6: ireturn

  public <A> scala.Option<A> maximum(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #595                // InterfaceMethod scalaz/Foldable.maximum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public <A, B> scala.Option<B> maximumOf(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #603                // InterfaceMethod scalaz/Foldable.maximumOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A, B> scala.Option<A> maximumBy(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #608                // InterfaceMethod scalaz/Foldable.maximumBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A> scala.Option<A> minimum(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #613                // InterfaceMethod scalaz/Foldable.minimum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public <A, B> scala.Option<B> minimumOf(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #618                // InterfaceMethod scalaz/Foldable.minimumOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A, B> scala.Option<A> minimumBy(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #623                // InterfaceMethod scalaz/Foldable.minimumBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A> scala.Option<scala.Tuple2<A, A>> extrema(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #629                // InterfaceMethod scalaz/Foldable.extrema$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public <A, B> scala.Option<scala.Tuple2<B, B>> extremaOf(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #635                // InterfaceMethod scalaz/Foldable.extremaOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A, B> scala.Option<scala.Tuple2<A, A>> extremaBy(F, scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #641                // InterfaceMethod scalaz/Foldable.extremaBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public <A> A sumr(F, scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #647                // InterfaceMethod scalaz/Foldable.sumr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Option<A> sumr1Opt(F, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #651                // InterfaceMethod scalaz/Foldable.sumr1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public <A> A suml(F, scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #655                // InterfaceMethod scalaz/Foldable.suml$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public <A> scala.Option<A> suml1Opt(F, scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #659                // InterfaceMethod scalaz/Foldable.suml1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public <A, B, G> G psumMap(F, scala.Function1<A, G>, scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #666                // InterfaceMethod scalaz/Foldable.psumMap$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       7: areturn

  public <G, A> G psum(F, scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #674                // InterfaceMethod scalaz/Foldable.psum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public final <G, A> G asum(F, scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #678                // InterfaceMethod scalaz/Foldable.asum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public <A> long longDigits(F, scala.$less$colon$less<A, scalaz.Digit>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #686                // InterfaceMethod scalaz/Foldable.longDigits$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/$less$colon$less;)J
       6: lreturn

  public <A> boolean empty(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #694                // InterfaceMethod scalaz/Foldable.empty$:(Lscalaz/Foldable;Ljava/lang/Object;)Z
       5: ireturn

  public <A> boolean element(F, A, scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #702                // InterfaceMethod scalaz/Foldable.element$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Equal;)Z
       7: ireturn

  public <A> A intercalate(F, A, scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #710                // InterfaceMethod scalaz/Foldable.intercalate$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public <A> scala.collection.immutable.List<scalaz.NonEmptyList<A>> splitWith(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #717                // InterfaceMethod scalaz/Foldable.splitWith$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public <A, B> scalaz.IList<scala.Tuple2<B, scalaz.NonEmptyList<A>>> splitBy(F, scala.Function1<A, B>, scalaz.Equal<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #725                // InterfaceMethod scalaz/Foldable.splitBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public <A> scalaz.IList<scalaz.NonEmptyList<A>> splitByRelation(F, scala.Function2<A, A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #733                // InterfaceMethod scalaz/Foldable.splitByRelation$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscalaz/IList;
       6: areturn

  public <A> scala.collection.immutable.List<scalaz.NonEmptyList<A>> selectSplit(F, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #737                // InterfaceMethod scalaz/Foldable.selectSplit$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public <A> scalaz.IList<A> distinct(F, scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #744                // InterfaceMethod scalaz/Foldable.distinct$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscalaz/IList;
       6: areturn

  public <A> scalaz.IList<A> distinctE(F, scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #751                // InterfaceMethod scalaz/Foldable.distinctE$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Equal;)Lscalaz/IList;
       6: areturn

  public <A, B> scalaz.IList<A> distinctBy(F, scala.Function1<A, B>, scalaz.Equal<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #757                // InterfaceMethod scalaz/Foldable.distinctBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public <X, A> X collapse(F, scalaz.ApplicativePlus<X>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #765                // InterfaceMethod scalaz/Foldable.collapse$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/ApplicativePlus;)Ljava/lang/Object;
       6: areturn

  public scalaz.Foldable<?>.FoldableLaw foldableLaw();
    Code:
       0: aload_0
       1: invokestatic  #773                // InterfaceMethod scalaz/Foldable.foldableLaw$:(Lscalaz/Foldable;)Lscalaz/Foldable$FoldableLaw;
       4: areturn

  public <A, B> F xmap(F, scala.Function1<A, B>, scala.Function1<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #781                // InterfaceMethod scalaz/Functor.xmap$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <A, B> F apply(F, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #787                // InterfaceMethod scalaz/Functor.apply$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Function1<F, F> lift(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #794                // InterfaceMethod scalaz/Functor.lift$:(Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public <A, B> F strengthL(A, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #800                // InterfaceMethod scalaz/Functor.strengthL$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> F strengthR(F, B);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #806                // InterfaceMethod scalaz/Functor.strengthR$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B> F mapply(A, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #810                // InterfaceMethod scalaz/Functor.mapply$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A> F fpair(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #815                // InterfaceMethod scalaz/Functor.fpair$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> F fproduct(F, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #819                // InterfaceMethod scalaz/Functor.fproduct$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A> F void(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #823                // InterfaceMethod scalaz/Functor.void$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <A, B> F counzip(scalaz.$bslash$div<F, F>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #830                // InterfaceMethod scalaz/Functor.counzip$:(Lscalaz/Functor;Lscalaz/$bslash$div;)Ljava/lang/Object;
       5: areturn

  public <G$> scalaz.Functor<?> compose(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #836                // InterfaceMethod scalaz/Functor.compose$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <G$> scalaz.Contravariant<?> icompose(scalaz.Contravariant<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #844                // InterfaceMethod scalaz/Functor.icompose$:(Lscalaz/Functor;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public <G$> scalaz.Bifunctor<?> bicompose(scalaz.Bifunctor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #850                // InterfaceMethod scalaz/Functor.bicompose$:(Lscalaz/Functor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G$> scalaz.Functor<?> product(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #853                // InterfaceMethod scalaz/Functor.product$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <A, B> F widen(F, scalaz.Liskov<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #861                // InterfaceMethod scalaz/Functor.widen$:(Lscalaz/Functor;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public scalaz.Functor<?>.FunctorLaw functorLaw();
    Code:
       0: aload_0
       1: invokestatic  #869                // InterfaceMethod scalaz/Functor.functorLaw$:(Lscalaz/Functor;)Lscalaz/Functor$FunctorLaw;
       4: areturn

  public <A, B> F xmapb(F, scalaz.BijectionT<?, ?, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #877                // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public <A, B> F xmapi(F, scalaz.Isomorphisms$Iso<scala.Function1, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #886                // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<?>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #894                // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.TraverseSyntax<?> traverseSyntax();
    Code:
       0: aload_0
       1: getfield      #898                // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       4: areturn

  public void scalaz$Traverse$_setter_$traverseSyntax_$eq(scalaz.syntax.TraverseSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #898                // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       5: return

  public scalaz.syntax.FoldableSyntax<?> foldableSyntax();
    Code:
       0: aload_0
       1: getfield      #906                // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       4: areturn

  public void scalaz$Foldable$_setter_$foldableSyntax_$eq(scalaz.syntax.FoldableSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #906                // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       5: return

  public scalaz.syntax.FunctorSyntax<?> functorSyntax();
    Code:
       0: aload_0
       1: getfield      #913                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       4: areturn

  public void scalaz$Functor$_setter_$functorSyntax_$eq(scalaz.syntax.FunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #913                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #920                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #920                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public scalaz.Bitraverse<F> F();
    Code:
       0: aload_0
       1: getfield      #927                // Field F:Lscalaz/Bitraverse;
       4: areturn

  public scalaz.Bifunctor F();
    Code:
       0: aload_0
       1: invokevirtual #930                // Method F:()Lscalaz/Bitraverse;
       4: areturn

  public scalaz.Bifoldable F();
    Code:
       0: aload_0
       1: invokevirtual #930                // Method F:()Lscalaz/Bitraverse;
       4: areturn

  public scalaz.Bitraverse$$anon$4(scalaz.Bitraverse);
    Code:
       0: aload_0
       1: invokespecial #937                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #941                // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
       8: aload_0
       9: invokestatic  #944                // InterfaceMethod scalaz/Functor.$init$:(Lscalaz/Functor;)V
      12: aload_0
      13: invokestatic  #947                // InterfaceMethod scalaz/Foldable.$init$:(Lscalaz/Foldable;)V
      16: aload_0
      17: invokestatic  #950                // InterfaceMethod scalaz/Traverse.$init$:(Lscalaz/Traverse;)V
      20: aload_0
      21: aload_1
      22: putfield      #927                // Field F:Lscalaz/Bitraverse;
      25: invokestatic  #955                // Method scala/runtime/Statics.releaseFence:()V
      28: return
}
