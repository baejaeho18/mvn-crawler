Compiled from "Maybe.scala"
public final class scalaz.MaybeInstances$$anon$10 implements scalaz.Monoid<java.lang.Object>, scalaz.Band<java.lang.Object> {
  private scalaz.syntax.BandSyntax<java.lang.Object> bandSyntax;

  private scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax;

  private scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax;

  private final scalaz.Order o$2;

  public java.lang.Object multiply1(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #56                 // InterfaceMethod scalaz/Band.multiply1$:(Lscalaz/Band;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public scalaz.Band<java.lang.Object>.BandLaw bandLaw();
    Code:
       0: aload_0
       1: invokestatic  #67                 // InterfaceMethod scalaz/Band.bandLaw$:(Lscalaz/Band;)Lscalaz/Band$BandLaw;
       4: areturn

  public java.lang.Object multiply(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #72                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #81                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty(java.lang.Object, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #91                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #101                // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #107                // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <S> java.lang.Object unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #115                // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S> java.lang.Object unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #121                // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #128                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #135                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<java.lang.Object>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #142                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #149                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #154                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #161                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #168                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<java.lang.Object>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #175                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.BandSyntax<java.lang.Object> bandSyntax();
    Code:
       0: aload_0
       1: getfield      #179                // Field bandSyntax:Lscalaz/syntax/BandSyntax;
       4: areturn

  public void scalaz$Band$_setter_$bandSyntax_$eq(scalaz.syntax.BandSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #179                // Field bandSyntax:Lscalaz/syntax/BandSyntax;
       5: return

  public scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #187                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #187                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #194                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #194                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public java.lang.Object zero();
    Code:
       0: getstatic     #205                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #210                // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       6: pop
       7: getstatic     #213                // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      10: invokevirtual #216                // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      13: astore_1
      14: invokevirtual #220                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      17: aload_1
      18: invokevirtual #225                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      21: areturn

  public java.lang.Object append(java.lang.Object, scala.Function0<java.lang.Object>);
    Code:
       0: getstatic     #205                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: new           #233                // class scala/Tuple2
       6: dup
       7: getstatic     #205                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      10: invokevirtual #220                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      13: aload_1
      14: invokevirtual #236                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      17: getstatic     #205                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      20: aload_2
      21: invokeinterface #240,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      26: astore        15
      28: invokevirtual #220                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      31: aload         15
      33: invokevirtual #236                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      36: aconst_null
      37: astore        15
      39: astore        18
      41: astore        17
      43: aload         17
      45: aload         18
      47: invokespecial #244                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      50: astore_3
      51: aload         17
      53: checkcast     #22                 // class scalaz/Maybe
      56: astore        4
      58: aload         18
      60: checkcast     #22                 // class scalaz/Maybe
      63: astore        5
      65: aload         4
      67: instanceof    #28                 // class scalaz/Maybe$Just
      70: ifeq          128
      73: aload         4
      75: checkcast     #28                 // class scalaz/Maybe$Just
      78: invokevirtual #247                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      81: astore        6
      83: aload         5
      85: instanceof    #28                 // class scalaz/Maybe$Just
      88: ifeq          128
      91: aload         5
      93: checkcast     #28                 // class scalaz/Maybe$Just
      96: invokevirtual #247                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      99: astore        7
     101: new           #28                 // class scalaz/Maybe$Just
     104: dup
     105: getstatic     #252                // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
     108: pop
     109: aload_0
     110: getfield      #254                // Field o$2:Lscalaz/Order;
     113: aload         6
     115: aload         7
     117: invokeinterface #260,  3          // InterfaceMethod scalaz/Order.max:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     122: invokespecial #263                // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     125: goto          256
     128: aload         17
     130: checkcast     #22                 // class scalaz/Maybe
     133: astore        8
     135: aload         18
     137: checkcast     #22                 // class scalaz/Maybe
     140: astore        9
     142: aload         8
     144: instanceof    #28                 // class scalaz/Maybe$Just
     147: ifeq          170
     150: aload         8
     152: checkcast     #28                 // class scalaz/Maybe$Just
     155: astore        10
     157: aload         9
     159: instanceof    #20                 // class scalaz/Maybe$Empty
     162: ifeq          170
     165: aload         10
     167: goto          256
     170: aload         17
     172: checkcast     #22                 // class scalaz/Maybe
     175: astore        11
     177: aload         18
     179: checkcast     #22                 // class scalaz/Maybe
     182: astore        12
     184: aload         11
     186: instanceof    #20                 // class scalaz/Maybe$Empty
     189: ifeq          208
     192: aload         12
     194: instanceof    #28                 // class scalaz/Maybe$Just
     197: ifeq          208
     200: aload         12
     202: checkcast     #28                 // class scalaz/Maybe$Just
     205: goto          256
     208: aload         17
     210: checkcast     #22                 // class scalaz/Maybe
     213: astore        13
     215: aload         18
     217: checkcast     #22                 // class scalaz/Maybe
     220: astore        14
     222: aload         13
     224: instanceof    #20                 // class scalaz/Maybe$Empty
     227: ifeq          247
     230: aload         14
     232: instanceof    #20                 // class scalaz/Maybe$Empty
     235: ifeq          247
     238: getstatic     #213                // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     241: invokevirtual #216                // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     244: goto          256
     247: new           #265                // class scala/MatchError
     250: dup
     251: aload_3
     252: invokespecial #266                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     255: athrow
     256: astore        16
     258: invokevirtual #220                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
     261: aload         16
     263: invokevirtual #225                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     266: areturn

  public scalaz.MaybeInstances$$anon$10(scalaz.MaybeInstances, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #254                // Field o$2:Lscalaz/Order;
       5: aload_0
       6: invokespecial #277                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #281                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
      13: aload_0
      14: invokestatic  #284                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      17: aload_0
      18: invokestatic  #287                // InterfaceMethod scalaz/Band.$init$:(Lscalaz/Band;)V
      21: invokestatic  #292                // Method scala/runtime/Statics.releaseFence:()V
      24: return
}
