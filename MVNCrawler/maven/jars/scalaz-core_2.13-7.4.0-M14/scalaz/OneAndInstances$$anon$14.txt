Compiled from "OneAnd.scala"
public final class scalaz.OneAndInstances$$anon$14 implements scalaz.Order<scalaz.OneAnd<F, A>>, scalaz.OneAndEqual<F, A> {
  private scalaz.syntax.OrderSyntax<scalaz.OneAnd<F, A>> orderSyntax;

  private scalaz.syntax.EqualSyntax<scalaz.OneAnd<F, A>> equalSyntax;

  private final scalaz.Order A$3;

  private final scalaz.Order FA$3;

  public boolean equal(scalaz.OneAnd<F, A>, scalaz.OneAnd<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #46                 // InterfaceMethod scalaz/OneAndEqual.equal$:(Lscalaz/OneAndEqual;Lscalaz/OneAnd;Lscalaz/OneAnd;)Z
       6: ireturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #55                 // InterfaceMethod scalaz/OneAndEqual.equalIsNatural$:(Lscalaz/OneAndEqual;)Z
       4: ireturn

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #63                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #70                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #74                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #78                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #82                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #88                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #92                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #98                 // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scalaz.OneAnd<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #106                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scalaz.OneAnd<F, A>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #114                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scalaz.OneAnd<F, A>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #121                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scalaz.OneAnd<F, A>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #128                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public scalaz.Equal<scalaz.OneAnd<F, A>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #135                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<scalaz.OneAnd<F, A>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #139                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scalaz.OneAnd<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #139                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scalaz.OneAnd<F, A>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #147                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scalaz.OneAnd<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #147                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Order<A> OA();
    Code:
       0: aload_0
       1: getfield      #154                // Field A$3:Lscalaz/Order;
       4: areturn

  public scalaz.Order<F> OFA();
    Code:
       0: aload_0
       1: getfield      #158                // Field FA$3:Lscalaz/Order;
       4: areturn

  public scalaz.Ordering order(scalaz.OneAnd<F, A>, scalaz.OneAnd<F, A>);
    Code:
       0: getstatic     #167                // Field scalaz/Monoid$.MODULE$:Lscalaz/Monoid$;
       3: pop
       4: getstatic     #172                // Field scalaz/Ordering$.MODULE$:Lscalaz/Ordering$;
       7: invokevirtual #176                // Method scalaz/Ordering$.orderingInstance:()Lscalaz/Enum;
      10: checkcast     #178                // class scalaz/Monoid
      13: aload_0
      14: getfield      #154                // Field A$3:Lscalaz/Order;
      17: aload_1
      18: invokevirtual #184                // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      21: aload_2
      22: invokevirtual #184                // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      25: invokeinterface #186,  3          // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      30: aload_0
      31: aload_1
      32: aload_2
      33: invokedynamic #206,  0            // InvokeDynamic #0:apply:(Lscalaz/OneAndInstances$$anon$14;Lscalaz/OneAnd;Lscalaz/OneAnd;)Lscala/Function0;
      38: invokeinterface #210,  3          // InterfaceMethod scalaz/Monoid.append:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      43: checkcast     #212                // class scalaz/Ordering
      46: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #215                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #180                // class scalaz/OneAnd
       5: aload_2
       6: checkcast     #180                // class scalaz/OneAnd
       9: invokevirtual #217                // Method equal:(Lscalaz/OneAnd;Lscalaz/OneAnd;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #180                // class scalaz/OneAnd
       5: aload_2
       6: checkcast     #180                // class scalaz/OneAnd
       9: invokevirtual #219                // Method order:(Lscalaz/OneAnd;Lscalaz/OneAnd;)Lscalaz/Ordering;
      12: areturn

  public scalaz.Equal OFA();
    Code:
       0: aload_0
       1: invokevirtual #222                // Method OFA:()Lscalaz/Order;
       4: areturn

  public scalaz.Equal OA();
    Code:
       0: aload_0
       1: invokevirtual #224                // Method OA:()Lscalaz/Order;
       4: areturn

  public static final scalaz.Ordering $anonfun$order$1(scalaz.OneAndInstances$$anon$14, scalaz.OneAnd, scalaz.OneAnd);
    Code:
       0: aload_0
       1: getfield      #158                // Field FA$3:Lscalaz/Order;
       4: aload_1
       5: invokevirtual #230                // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
       8: aload_2
       9: invokevirtual #230                // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      12: invokeinterface #186,  3          // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      17: areturn

  public scalaz.OneAndInstances$$anon$14(scalaz.OneAndInstances, scalaz.Order, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #154                // Field A$3:Lscalaz/Order;
       5: aload_0
       6: aload_3
       7: putfield      #158                // Field FA$3:Lscalaz/Order;
      10: aload_0
      11: invokespecial #236                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #240                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      18: aload_0
      19: invokestatic  #243                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      22: invokestatic  #248                // Method scala/runtime/Statics.releaseFence:()V
      25: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #261,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
