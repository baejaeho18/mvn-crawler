Compiled from "Kleisli.scala"
public final class scalaz.KleisliInstances11$$anon$5 implements scalaz.KleisliDistributive<F, R> {
  private scalaz.syntax.DistributiveSyntax<?> distributiveSyntax;

  private scalaz.syntax.FunctorSyntax<?> functorSyntax;

  private scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax;

  private final scalaz.Distributive F0$5;

  public <G, A, B> scalaz.Kleisli<F, R, G> distributeImpl(G, scala.Function1<A, scalaz.Kleisli<F, R, B>>, scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #54                 // InterfaceMethod scalaz/KleisliDistributive.distributeImpl$:(Lscalaz/KleisliDistributive;Ljava/lang/Object;Lscala/Function1;Lscalaz/Functor;)Lscalaz/Kleisli;
       7: areturn

  public <A, B> scalaz.Kleisli<F, R, B> map(scalaz.Kleisli<F, R, A>, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/KleisliFunctor.map$:(Lscalaz/KleisliFunctor;Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       6: areturn

  public <G> scalaz.Distributive<?> compose(scalaz.Distributive<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #77                 // InterfaceMethod scalaz/Distributive.compose$:(Lscalaz/Distributive;Lscalaz/Distributive;)Lscalaz/Distributive;
       5: areturn

  public <G> scalaz.Distributive<?> product(scalaz.Distributive<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #81                 // InterfaceMethod scalaz/Distributive.product$:(Lscalaz/Distributive;Lscalaz/Distributive;)Lscalaz/Distributive;
       5: areturn

  public <G> scalaz.Distributive<?>.Distribution<G> distribution(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #89                 // InterfaceMethod scalaz/Distributive.distribution$:(Lscalaz/Distributive;Lscalaz/Functor;)Lscalaz/Distributive$Distribution;
       5: areturn

  public java.lang.Object distribute(java.lang.Object, scala.Function1, scalaz.Functor);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #96                 // InterfaceMethod scalaz/Distributive.distribute$:(Lscalaz/Distributive;Ljava/lang/Object;Lscala/Function1;Lscalaz/Functor;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object cosequence(java.lang.Object, scalaz.Functor);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #103                // InterfaceMethod scalaz/Distributive.cosequence$:(Lscalaz/Distributive;Ljava/lang/Object;Lscalaz/Functor;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #110                // InterfaceMethod scalaz/Functor.xmap$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object apply(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #116                // InterfaceMethod scalaz/Functor.apply$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Function1<scalaz.Kleisli<F, R, A>, scalaz.Kleisli<F, R, B>> lift(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #123                // InterfaceMethod scalaz/Functor.lift$:(Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public java.lang.Object strengthL(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #129                // InterfaceMethod scalaz/Functor.strengthL$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object strengthR(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #134                // InterfaceMethod scalaz/Functor.strengthR$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object mapply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #138                // InterfaceMethod scalaz/Functor.mapply$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object fpair(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #144                // InterfaceMethod scalaz/Functor.fpair$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object fproduct(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #148                // InterfaceMethod scalaz/Functor.fproduct$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object void(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #152                // InterfaceMethod scalaz/Functor.void$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object counzip(scalaz.$bslash$div);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #158                // InterfaceMethod scalaz/Functor.counzip$:(Lscalaz/Functor;Lscalaz/$bslash$div;)Ljava/lang/Object;
       5: areturn

  public <G$> scalaz.Functor<?> compose(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #164                // InterfaceMethod scalaz/Functor.compose$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <G$> scalaz.Contravariant<?> icompose(scalaz.Contravariant<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #171                // InterfaceMethod scalaz/Functor.icompose$:(Lscalaz/Functor;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public <G$> scalaz.Bifunctor<?> bicompose(scalaz.Bifunctor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #180                // InterfaceMethod scalaz/Functor.bicompose$:(Lscalaz/Functor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G$> scalaz.Functor<?> product(scalaz.Functor<G$>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #183                // InterfaceMethod scalaz/Functor.product$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public java.lang.Object widen(java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #190                // InterfaceMethod scalaz/Functor.widen$:(Lscalaz/Functor;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public scalaz.Functor<?>.FunctorLaw functorLaw();
    Code:
       0: aload_0
       1: invokestatic  #198                // InterfaceMethod scalaz/Functor.functorLaw$:(Lscalaz/Functor;)Lscalaz/Functor$FunctorLaw;
       4: areturn

  public java.lang.Object xmapb(java.lang.Object, scalaz.BijectionT);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #205                // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmapi(java.lang.Object, scalaz.Isomorphisms$Iso);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #213                // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<?>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #221                // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.DistributiveSyntax<?> distributiveSyntax();
    Code:
       0: aload_0
       1: getfield      #225                // Field distributiveSyntax:Lscalaz/syntax/DistributiveSyntax;
       4: areturn

  public void scalaz$Distributive$_setter_$distributiveSyntax_$eq(scalaz.syntax.DistributiveSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #225                // Field distributiveSyntax:Lscalaz/syntax/DistributiveSyntax;
       5: return

  public scalaz.syntax.FunctorSyntax<?> functorSyntax();
    Code:
       0: aload_0
       1: getfield      #233                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       4: areturn

  public void scalaz$Functor$_setter_$functorSyntax_$eq(scalaz.syntax.FunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #233                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #240                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #240                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public scalaz.Distributive<F> F();
    Code:
       0: aload_0
       1: getfield      #248                // Field F0$5:Lscalaz/Distributive;
       4: areturn

  public java.lang.Object map(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #250                // class scalaz/Kleisli
       5: aload_2
       6: invokevirtual #252                // Method map:(Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       9: areturn

  public java.lang.Object distributeImpl(java.lang.Object, scala.Function1, scalaz.Functor);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #254                // Method distributeImpl:(Ljava/lang/Object;Lscala/Function1;Lscalaz/Functor;)Lscalaz/Kleisli;
       7: areturn

  public scalaz.Functor F();
    Code:
       0: aload_0
       1: invokevirtual #257                // Method F:()Lscalaz/Distributive;
       4: areturn

  public scalaz.KleisliInstances11$$anon$5(scalaz.KleisliInstances11, scalaz.Distributive);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #248                // Field F0$5:Lscalaz/Distributive;
       5: aload_0
       6: invokespecial #263                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #267                // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
      13: aload_0
      14: invokestatic  #270                // InterfaceMethod scalaz/Functor.$init$:(Lscalaz/Functor;)V
      17: aload_0
      18: invokestatic  #273                // InterfaceMethod scalaz/Distributive.$init$:(Lscalaz/Distributive;)V
      21: invokestatic  #278                // Method scala/runtime/Statics.releaseFence:()V
      24: return
}
