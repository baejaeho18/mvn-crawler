Compiled from "Maybe.scala"
public final class scalaz.MaybeInstances$$anon$8 implements scalaz.Monoid<java.lang.Object>, scalaz.Band<java.lang.Object> {
  private final java.lang.Object zero;

  private scalaz.syntax.BandSyntax<java.lang.Object> bandSyntax;

  private scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax;

  private scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax;

  public java.lang.Object multiply1(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #56                 // InterfaceMethod scalaz/Band.multiply1$:(Lscalaz/Band;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public scalaz.Band<java.lang.Object>.BandLaw bandLaw();
    Code:
       0: aload_0
       1: invokestatic  #66                 // InterfaceMethod scalaz/Band.bandLaw$:(Lscalaz/Band;)Lscalaz/Band$BandLaw;
       4: areturn

  public java.lang.Object multiply(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #71                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #80                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty(java.lang.Object, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #90                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #100                // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #106                // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <S> java.lang.Object unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #114                // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S> java.lang.Object unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #120                // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #127                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #134                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<java.lang.Object>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #141                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #148                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #153                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #160                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #167                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<java.lang.Object>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #174                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.BandSyntax<java.lang.Object> bandSyntax();
    Code:
       0: aload_0
       1: getfield      #178                // Field bandSyntax:Lscalaz/syntax/BandSyntax;
       4: areturn

  public void scalaz$Band$_setter_$bandSyntax_$eq(scalaz.syntax.BandSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #178                // Field bandSyntax:Lscalaz/syntax/BandSyntax;
       5: return

  public scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #186                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #186                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #193                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #193                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public java.lang.Object zero();
    Code:
       0: aload_0
       1: getfield      #199                // Field zero:Ljava/lang/Object;
       4: areturn

  public java.lang.Object append(java.lang.Object, scala.Function0<java.lang.Object>);
    Code:
       0: getstatic     #210                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #210                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       6: aload_2
       7: invokeinterface #214,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      12: astore_3
      13: invokevirtual #218                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      16: aload_3
      17: invokevirtual #224                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      20: aconst_null
      21: astore_3
      22: checkcast     #22                 // class scalaz/Maybe
      25: dup
      26: ifnonnull     31
      29: aconst_null
      30: athrow
      31: astore        5
      33: aload         5
      35: instanceof    #28                 // class scalaz/Maybe$Just
      38: ifeq          55
      41: aload         5
      43: checkcast     #28                 // class scalaz/Maybe$Just
      46: invokevirtual #227                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      49: pop
      50: aload         5
      52: goto          89
      55: aload         5
      57: instanceof    #20                 // class scalaz/Maybe$Empty
      60: ifeq          79
      63: getstatic     #210                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      66: invokevirtual #218                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      69: aload_1
      70: invokevirtual #224                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      73: checkcast     #22                 // class scalaz/Maybe
      76: goto          89
      79: new           #229                // class scala/MatchError
      82: dup
      83: aload         5
      85: invokespecial #233                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      88: athrow
      89: aconst_null
      90: astore        5
      92: astore        4
      94: invokevirtual #218                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      97: aload         4
      99: invokevirtual #235                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     102: areturn

  public static final scalaz.Maybe $anonfun$append$9(java.lang.Object);
    Code:
       0: getstatic     #210                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: aload_0
       4: invokevirtual #243                // Method scalaz/Tag$.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #22                 // class scalaz/Maybe
      10: areturn

  public scalaz.MaybeInstances$$anon$8(scalaz.MaybeInstances);
    Code:
       0: aload_0
       1: invokespecial #248                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #252                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
       8: aload_0
       9: invokestatic  #255                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      12: aload_0
      13: invokestatic  #258                // InterfaceMethod scalaz/Band.$init$:(Lscalaz/Band;)V
      16: aload_0
      17: getstatic     #210                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      20: getstatic     #263                // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      23: pop
      24: getstatic     #266                // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      27: invokevirtual #269                // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      30: astore_2
      31: invokevirtual #218                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      34: aload_2
      35: invokevirtual #235                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      38: aconst_null
      39: astore_2
      40: putfield      #199                // Field zero:Ljava/lang/Object;
      43: invokestatic  #274                // Method scala/runtime/Statics.releaseFence:()V
      46: return
}
