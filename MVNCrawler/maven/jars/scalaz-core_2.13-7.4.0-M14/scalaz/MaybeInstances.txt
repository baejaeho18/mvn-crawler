Compiled from "Maybe.scala"
public abstract class scalaz.MaybeInstances extends scalaz.MaybeInstances0 {
  private final scalaz.Traverse<scalaz.Maybe> maybeInstance;

  public <A> scalaz.Equal<scalaz.Maybe<A>> maybeEqual(scalaz.Equal<A>);
    Code:
       0: new           #46                 // class scalaz/MaybeInstances$$anon$4
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #74                 // Method scalaz/MaybeInstances$$anon$4."<init>":(Lscalaz/MaybeInstances;Lscalaz/Equal;)V
       9: areturn

  public <A> scalaz.Order<scalaz.Maybe<A>> maybeOrder(scalaz.Order<A>);
    Code:
       0: new           #48                 // class scalaz/MaybeInstances$$anon$5
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #84                 // Method scalaz/MaybeInstances$$anon$5."<init>":(Lscalaz/MaybeInstances;Lscalaz/Order;)V
       9: areturn

  public <A> scalaz.Show<scalaz.Maybe<A>> maybeShow(scalaz.Show<A>);
    Code:
       0: getstatic     #95                 // Field scalaz/Show$.MODULE$:Lscalaz/Show$;
       3: pop
       4: aload_1
       5: invokedynamic #117,  0            // InvokeDynamic #0:apply:(Lscalaz/Show;)Lscala/Function1;
      10: astore_2
      11: new           #58                 // class scalaz/Show$$anonfun$show$2
      14: dup
      15: aload_2
      16: invokespecial #120                // Method scalaz/Show$$anonfun$show$2."<init>":(Lscala/Function1;)V
      19: areturn

  public <A> scalaz.Monoid<scalaz.Maybe<A>> maybeMonoid(scalaz.Semigroup<A>);
    Code:
       0: new           #50                 // class scalaz/MaybeInstances$$anon$6
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #130                // Method scalaz/MaybeInstances$$anon$6."<init>":(Lscalaz/MaybeInstances;Lscalaz/Semigroup;)V
       9: areturn

  public <A> scalaz.Monoid<java.lang.Object> maybeFirstMonoid();
    Code:
       0: new           #52                 // class scalaz/MaybeInstances$$anon$7
       3: dup
       4: aconst_null
       5: invokespecial #137                // Method scalaz/MaybeInstances$$anon$7."<init>":(Lscalaz/MaybeInstances;)V
       8: areturn

  public <A> scalaz.Show<java.lang.Object> maybeFirstShow(scalaz.Show<scalaz.Maybe<A>>);
    Code:
       0: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: invokevirtual #148                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
       6: aload_1
       7: invokevirtual #153                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #155                // class scalaz/Show
      13: areturn

  public <A> scalaz.Order<java.lang.Object> maybeFirstOrder(scalaz.Order<scalaz.Maybe<A>>);
    Code:
       0: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: invokevirtual #148                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
       6: aload_1
       7: invokevirtual #153                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #159                // class scalaz/Order
      13: areturn

  public scalaz.Monad<java.lang.Object> maybeFirstMonad();
    Code:
       0: getstatic     #167                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #171                // Method scalaz/Tags$.First:()Lscalaz/Tag$TagOf;
       6: getstatic     #176                // Field scalaz/Monad$.MODULE$:Lscalaz/Monad$;
       9: pop
      10: aload_0
      11: invokevirtual #179                // Method maybeInstance:()Lscalaz/Traverse;
      14: checkcast     #181                // class scalaz/Monad
      17: astore_1
      18: aload_1
      19: aconst_null
      20: astore_1
      21: astore_2
      22: ifnonnull     27
      25: aconst_null
      26: athrow
      27: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      30: aload_2
      31: invokevirtual #184                // Method scalaz/Tag$.subst1:(Ljava/lang/Object;)Ljava/lang/Object;
      34: checkcast     #181                // class scalaz/Monad
      37: areturn

  public <A> scalaz.Monoid<java.lang.Object> maybeLastMonoid();
    Code:
       0: new           #54                 // class scalaz/MaybeInstances$$anon$8
       3: dup
       4: aconst_null
       5: invokespecial #190                // Method scalaz/MaybeInstances$$anon$8."<init>":(Lscalaz/MaybeInstances;)V
       8: areturn

  public <A> scalaz.Show<java.lang.Object> maybeLastShow(scalaz.Show<scalaz.Maybe<A>>);
    Code:
       0: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: invokevirtual #148                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
       6: aload_1
       7: invokevirtual #153                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #155                // class scalaz/Show
      13: areturn

  public <A> scalaz.Order<java.lang.Object> maybeLastOrder(scalaz.Order<scalaz.Maybe<A>>);
    Code:
       0: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: invokevirtual #148                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
       6: aload_1
       7: invokevirtual #153                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #159                // class scalaz/Order
      13: areturn

  public scalaz.Monad<java.lang.Object> maybeLastMonad();
    Code:
       0: getstatic     #167                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #196                // Method scalaz/Tags$.Last:()Lscalaz/Tag$TagOf;
       6: getstatic     #176                // Field scalaz/Monad$.MODULE$:Lscalaz/Monad$;
       9: pop
      10: aload_0
      11: invokevirtual #179                // Method maybeInstance:()Lscalaz/Traverse;
      14: checkcast     #181                // class scalaz/Monad
      17: astore_1
      18: aload_1
      19: aconst_null
      20: astore_1
      21: astore_2
      22: ifnonnull     27
      25: aconst_null
      26: athrow
      27: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      30: aload_2
      31: invokevirtual #184                // Method scalaz/Tag$.subst1:(Ljava/lang/Object;)Ljava/lang/Object;
      34: checkcast     #181                // class scalaz/Monad
      37: areturn

  public <A> scalaz.Monoid<java.lang.Object> maybeMin(scalaz.Order<A>);
    Code:
       0: new           #56                 // class scalaz/MaybeInstances$$anon$9
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #201                // Method scalaz/MaybeInstances$$anon$9."<init>":(Lscalaz/MaybeInstances;Lscalaz/Order;)V
       9: areturn

  public <A> scalaz.Show<java.lang.Object> maybeMinShow(scalaz.Show<A>);
    Code:
       0: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #95                 // Field scalaz/Show$.MODULE$:Lscalaz/Show$;
       6: pop
       7: aload_0
       8: aload_1
       9: invokevirtual #206                // Method maybeShow:(Lscalaz/Show;)Lscalaz/Show;
      12: astore_2
      13: aload_2
      14: aconst_null
      15: astore_2
      16: astore_3
      17: invokevirtual #148                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      20: aload_3
      21: invokevirtual #153                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #155                // class scalaz/Show
      27: areturn

  public <A> scalaz.Order<java.lang.Object> maybeMinOrder(scalaz.Order<A>);
    Code:
       0: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #215                // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       6: pop
       7: new           #48                 // class scalaz/MaybeInstances$$anon$5
      10: dup
      11: aconst_null
      12: aload_1
      13: invokespecial #84                 // Method scalaz/MaybeInstances$$anon$5."<init>":(Lscalaz/MaybeInstances;Lscalaz/Order;)V
      16: astore_2
      17: aload_2
      18: aconst_null
      19: astore_2
      20: astore_3
      21: invokevirtual #148                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      24: aload_3
      25: invokevirtual #153                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #159                // class scalaz/Order
      31: areturn

  public scalaz.Monad<java.lang.Object> maybeMinMonad();
    Code:
       0: getstatic     #167                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #219                // Method scalaz/Tags$.Min:()Lscalaz/Tag$TagOf;
       6: getstatic     #176                // Field scalaz/Monad$.MODULE$:Lscalaz/Monad$;
       9: pop
      10: aload_0
      11: invokevirtual #179                // Method maybeInstance:()Lscalaz/Traverse;
      14: checkcast     #181                // class scalaz/Monad
      17: astore_1
      18: aload_1
      19: aconst_null
      20: astore_1
      21: astore_2
      22: ifnonnull     27
      25: aconst_null
      26: athrow
      27: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      30: aload_2
      31: invokevirtual #184                // Method scalaz/Tag$.subst1:(Ljava/lang/Object;)Ljava/lang/Object;
      34: checkcast     #181                // class scalaz/Monad
      37: areturn

  public <A> scalaz.Monoid<java.lang.Object> maybeMax(scalaz.Order<A>);
    Code:
       0: new           #42                 // class scalaz/MaybeInstances$$anon$10
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #221                // Method scalaz/MaybeInstances$$anon$10."<init>":(Lscalaz/MaybeInstances;Lscalaz/Order;)V
       9: areturn

  public <A> scalaz.Show<java.lang.Object> maybeMaxShow(scalaz.Show<A>);
    Code:
       0: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #95                 // Field scalaz/Show$.MODULE$:Lscalaz/Show$;
       6: pop
       7: aload_0
       8: aload_1
       9: invokevirtual #206                // Method maybeShow:(Lscalaz/Show;)Lscalaz/Show;
      12: astore_2
      13: aload_2
      14: aconst_null
      15: astore_2
      16: astore_3
      17: invokevirtual #148                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      20: aload_3
      21: invokevirtual #153                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #155                // class scalaz/Show
      27: areturn

  public <A> scalaz.Order<java.lang.Object> maybeMaxOrder(scalaz.Order<A>);
    Code:
       0: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #215                // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       6: pop
       7: new           #48                 // class scalaz/MaybeInstances$$anon$5
      10: dup
      11: aconst_null
      12: aload_1
      13: invokespecial #84                 // Method scalaz/MaybeInstances$$anon$5."<init>":(Lscalaz/MaybeInstances;Lscalaz/Order;)V
      16: astore_2
      17: aload_2
      18: aconst_null
      19: astore_2
      20: astore_3
      21: invokevirtual #148                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      24: aload_3
      25: invokevirtual #153                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #159                // class scalaz/Order
      31: areturn

  public scalaz.Monad<java.lang.Object> maybeMaxMonad();
    Code:
       0: getstatic     #167                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #229                // Method scalaz/Tags$.Max:()Lscalaz/Tag$TagOf;
       6: getstatic     #176                // Field scalaz/Monad$.MODULE$:Lscalaz/Monad$;
       9: pop
      10: aload_0
      11: invokevirtual #179                // Method maybeInstance:()Lscalaz/Traverse;
      14: checkcast     #181                // class scalaz/Monad
      17: astore_1
      18: aload_1
      19: aconst_null
      20: astore_1
      21: astore_2
      22: ifnonnull     27
      25: aconst_null
      26: athrow
      27: getstatic     #144                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      30: aload_2
      31: invokevirtual #184                // Method scalaz/Tag$.subst1:(Ljava/lang/Object;)Ljava/lang/Object;
      34: checkcast     #181                // class scalaz/Monad
      37: areturn

  public scalaz.IsCovariant<scalaz.Maybe> maybeIsCovariant();
    Code:
       0: getstatic     #237                // Field scalaz/IsCovariant$.MODULE$:Lscalaz/IsCovariant$;
       3: pop
       4: new           #32                 // class scalaz/IsCovariant$$anon$3
       7: dup
       8: invokespecial #240                // Method scalaz/IsCovariant$$anon$3."<init>":()V
      11: areturn

  public scalaz.Traverse<scalaz.Maybe> maybeInstance();
    Code:
       0: aload_0
       1: getfield      #243                // Field maybeInstance:Lscalaz/Traverse;
       4: areturn

  public static final scalaz.Cord $anonfun$maybeShow$2(scalaz.Show, java.lang.Object);
    Code:
       0: getstatic     #250                // Field scalaz/Cord$CordInterpolator$.MODULE$:Lscalaz/Cord$CordInterpolator$;
       3: getstatic     #255                // Field scalaz/syntax/show$.MODULE$:Lscalaz/syntax/show$;
       6: pop
       7: new           #257                // class scala/StringContext
      10: dup
      11: getstatic     #262                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      14: iconst_2
      15: anewarray     #264                // class java/lang/String
      18: dup
      19: iconst_0
      20: ldc_w         #266                // String Just(
      23: aastore
      24: dup
      25: iconst_1
      26: ldc_w         #268                // String )
      29: aastore
      30: invokevirtual #272                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
      33: invokespecial #275                // Method scala/StringContext."<init>":(Lscala/collection/immutable/Seq;)V
      36: getstatic     #262                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
      39: iconst_1
      40: anewarray     #20                 // class scalaz/Cord$CordInterpolator$Cords
      43: dup
      44: iconst_0
      45: new           #20                 // class scalaz/Cord$CordInterpolator$Cords
      48: dup
      49: getstatic     #278                // Field scalaz/Cord$CordInterpolator$Cords$.MODULE$:Lscalaz/Cord$CordInterpolator$Cords$;
      52: aload_1
      53: aload_0
      54: invokevirtual #282                // Method scalaz/Cord$CordInterpolator$Cords$.mat:(Ljava/lang/Object;Lscalaz/Show;)Lscalaz/Cord;
      57: invokespecial #285                // Method scalaz/Cord$CordInterpolator$Cords."<init>":(Lscalaz/Cord;)V
      60: aastore
      61: invokevirtual #289                // Method scala/runtime/ScalaRunTime$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
      64: invokevirtual #293                // Method scalaz/Cord$CordInterpolator$.cord$extension:(Lscala/StringContext;Lscala/collection/immutable/Seq;)Lscalaz/Cord;
      67: areturn

  public static final scalaz.Cord $anonfun$maybeShow$3();
    Code:
       0: getstatic     #300                // Field scalaz/Cord$.MODULE$:Lscalaz/Cord$;
       3: ldc_w         #301                // String Empty
       6: invokevirtual #304                // Method scalaz/Cord$.apply:(Ljava/lang/String;)Lscalaz/Cord;
       9: areturn

  public static final scalaz.Cord $anonfun$maybeShow$1(scalaz.Show, scalaz.Maybe);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #39                 // class scalaz/Maybe$Just
      10: ifeq          29
      13: aload_1
      14: checkcast     #39                 // class scalaz/Maybe$Just
      17: invokevirtual #309                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore_2
      21: aload_0
      22: aload_2
      23: invokestatic  #311                // Method $anonfun$maybeShow$2:(Lscalaz/Show;Ljava/lang/Object;)Lscalaz/Cord;
      26: goto          65
      29: aload_1
      30: instanceof    #34                 // class scalaz/Maybe$Empty
      33: ifeq          56
      36: getstatic     #300                // Field scalaz/Cord$.MODULE$:Lscalaz/Cord$;
      39: pop
      40: ldc_w         #301                // String Empty
      43: astore_3
      44: getstatic     #314                // Field scalaz/Cord$Leaf$.MODULE$:Lscalaz/Cord$Leaf$;
      47: aload_3
      48: invokevirtual #317                // Method scalaz/Cord$Leaf$.apply:(Ljava/lang/String;)Lscalaz/Cord$Leaf;
      51: aconst_null
      52: astore_3
      53: goto          65
      56: new           #319                // class scala/MatchError
      59: dup
      60: aload_1
      61: invokespecial #322                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      64: athrow
      65: checkcast     #17                 // class scalaz/Cord
      68: areturn

  public scalaz.MaybeInstances();
    Code:
       0: aload_0
       1: invokespecial #327                // Method scalaz/MaybeInstances0."<init>":()V
       4: aload_0
       5: new           #44                 // class scalaz/MaybeInstances$$anon$11
       8: dup
       9: aconst_null
      10: invokespecial #328                // Method scalaz/MaybeInstances$$anon$11."<init>":(Lscalaz/MaybeInstances;)V
      13: putfield      #243                // Field maybeInstance:Lscalaz/Traverse;
      16: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #340,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
