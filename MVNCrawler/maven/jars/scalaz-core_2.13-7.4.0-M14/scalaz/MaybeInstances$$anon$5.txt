Compiled from "Maybe.scala"
public final class scalaz.MaybeInstances$$anon$5 implements scalaz.Order<scalaz.Maybe<A>>, scalaz.MaybeEqual<A> {
  private scalaz.syntax.OrderSyntax<scalaz.Maybe<A>> orderSyntax;

  private scalaz.syntax.EqualSyntax<scalaz.Maybe<A>> equalSyntax;

  private final scalaz.Order evidence$4$1;

  public final boolean equal(scalaz.Maybe<A>, scalaz.Maybe<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #59                 // InterfaceMethod scalaz/MaybeEqual.equal$:(Lscalaz/MaybeEqual;Lscalaz/Maybe;Lscalaz/Maybe;)Z
       6: ireturn

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #70                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #81                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #85                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #89                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #95                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #99                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #105                // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scalaz.Maybe<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #113                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scalaz.Maybe<A>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #121                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scalaz.Maybe<A>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #127                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scalaz.Maybe<A>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #134                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #140                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<scalaz.Maybe<A>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #147                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<scalaz.Maybe<A>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #151                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scalaz.Maybe<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #151                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scalaz.Maybe<A>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #159                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scalaz.Maybe<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #159                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Equal<A> A();
    Code:
       0: getstatic     #171                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #173                // Field evidence$4$1:Lscalaz/Order;
       7: invokevirtual #177                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #19                 // class scalaz/Equal
      13: areturn

  public scalaz.Ordering order(scalaz.Maybe<A>, scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #27                 // class scalaz/Maybe$Just
      10: ifeq          28
      13: aload_1
      14: checkcast     #27                 // class scalaz/Maybe$Just
      17: invokevirtual #184                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore_3
      21: aload_0
      22: aload_2
      23: aload_3
      24: invokestatic  #188                // Method $anonfun$order$1:(Lscalaz/MaybeInstances$$anon$5;Lscalaz/Maybe;Ljava/lang/Object;)Lscalaz/Ordering;
      27: areturn
      28: aload_1
      29: instanceof    #22                 // class scalaz/Maybe$Empty
      32: ifeq          40
      35: aload_2
      36: invokestatic  #192                // Method $anonfun$order$4:(Lscalaz/Maybe;)Lscalaz/Ordering;
      39: areturn
      40: new           #194                // class scala/MatchError
      43: dup
      44: aload_1
      45: invokespecial #198                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      48: athrow

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #202                // Method contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class scalaz/Maybe
       5: aload_2
       6: checkcast     #24                 // class scalaz/Maybe
       9: invokevirtual #204                // Method equal:(Lscalaz/Maybe;Lscalaz/Maybe;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class scalaz/Maybe
       5: aload_2
       6: checkcast     #24                 // class scalaz/Maybe
       9: invokevirtual #206                // Method order:(Lscalaz/Maybe;Lscalaz/Maybe;)Lscalaz/Ordering;
      12: areturn

  public static final scalaz.Ordering $anonfun$order$2(scalaz.MaybeInstances$$anon$5, java.lang.Object, java.lang.Object);
    Code:
       0: getstatic     #216                // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       3: pop
       4: aload_0
       5: getfield      #173                // Field evidence$4$1:Lscalaz/Order;
       8: aload_1
       9: aload_2
      10: invokeinterface #218,  3          // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      15: areturn

  public static final scalaz.Ordering$GT$ $anonfun$order$3();
    Code:
       0: getstatic     #223                // Field scalaz/Ordering$GT$.MODULE$:Lscalaz/Ordering$GT$;
       3: areturn

  public static final scalaz.Ordering $anonfun$order$1(scalaz.MaybeInstances$$anon$5, scalaz.Maybe, java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #27                 // class scalaz/Maybe$Just
      10: ifeq          30
      13: aload_1
      14: checkcast     #27                 // class scalaz/Maybe$Just
      17: invokevirtual #184                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore_3
      21: aload_0
      22: aload_2
      23: aload_3
      24: invokestatic  #227                // Method $anonfun$order$2:(Lscalaz/MaybeInstances$$anon$5;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      27: goto          52
      30: aload_1
      31: instanceof    #22                 // class scalaz/Maybe$Empty
      34: ifeq          43
      37: getstatic     #223                // Field scalaz/Ordering$GT$.MODULE$:Lscalaz/Ordering$GT$;
      40: goto          52
      43: new           #194                // class scala/MatchError
      46: dup
      47: aload_1
      48: invokespecial #198                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      51: athrow
      52: checkcast     #35                 // class scalaz/Ordering
      55: areturn

  public static final scalaz.Ordering$LT$ $anonfun$order$5(java.lang.Object);
    Code:
       0: getstatic     #233                // Field scalaz/Ordering$LT$.MODULE$:Lscalaz/Ordering$LT$;
       3: areturn

  public static final scalaz.Ordering$EQ$ $anonfun$order$6();
    Code:
       0: getstatic     #238                // Field scalaz/Ordering$EQ$.MODULE$:Lscalaz/Ordering$EQ$;
       3: areturn

  public static final scalaz.Ordering $anonfun$order$4(scalaz.Maybe);
    Code:
       0: aload_0
       1: instanceof    #27                 // class scalaz/Maybe$Just
       4: ifeq          21
       7: aload_0
       8: checkcast     #27                 // class scalaz/Maybe$Just
      11: invokevirtual #184                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      14: pop
      15: getstatic     #233                // Field scalaz/Ordering$LT$.MODULE$:Lscalaz/Ordering$LT$;
      18: goto          43
      21: aload_0
      22: instanceof    #22                 // class scalaz/Maybe$Empty
      25: ifeq          34
      28: getstatic     #238                // Field scalaz/Ordering$EQ$.MODULE$:Lscalaz/Ordering$EQ$;
      31: goto          43
      34: new           #194                // class scala/MatchError
      37: dup
      38: aload_0
      39: invokespecial #198                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      42: athrow
      43: checkcast     #35                 // class scalaz/Ordering
      46: areturn

  public scalaz.MaybeInstances$$anon$5(scalaz.MaybeInstances, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #173                // Field evidence$4$1:Lscalaz/Order;
       5: aload_0
       6: invokespecial #243                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #247                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      13: aload_0
      14: invokestatic  #250                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      17: invokestatic  #255                // Method scala/runtime/Statics.releaseFence:()V
      20: return
}
