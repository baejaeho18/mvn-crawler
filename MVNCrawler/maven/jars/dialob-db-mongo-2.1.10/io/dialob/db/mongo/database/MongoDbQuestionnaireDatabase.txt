Compiled from "MongoDbQuestionnaireDatabase.java"
public class io.dialob.db.mongo.database.MongoDbQuestionnaireDatabase extends io.dialob.db.mongo.database.BaseMongoDbDatabase<io.dialob.api.questionnaire.Questionnaire, io.dialob.api.questionnaire.ModifiableQuestionnaire, io.dialob.db.mongo.repository.QuestionnaireRepository> implements io.dialob.questionnaire.service.api.QuestionnaireDatabase {
  private static final org.slf4j.Logger LOGGER;

  private final io.dialob.db.mongo.MongoQuestionnaireIdObfuscator mongoQuestionnaireIdObfuscator;

  public io.dialob.db.mongo.database.MongoDbQuestionnaireDatabase(io.dialob.db.mongo.repository.QuestionnaireRepository, io.dialob.db.mongo.MongoQuestionnaireIdObfuscator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/dialob/db/mongo/database/BaseMongoDbDatabase."<init>":(Lorg/springframework/data/mongodb/repository/MongoRepository;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field mongoQuestionnaireIdObfuscator:Lio/dialob/db/mongo/MongoQuestionnaireIdObfuscator;
      10: return

  protected java.lang.String toPublicId(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field mongoQuestionnaireIdObfuscator:Lio/dialob/db/mongo/MongoQuestionnaireIdObfuscator;
       4: aload_1
       5: invokevirtual #3                  // Method io/dialob/db/mongo/MongoQuestionnaireIdObfuscator.toPublicId:(Ljava/lang/String;)Ljava/lang/String;
       8: areturn

  protected java.lang.String toMongoId(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field mongoQuestionnaireIdObfuscator:Lio/dialob/db/mongo/MongoQuestionnaireIdObfuscator;
       4: aload_1
       5: invokevirtual #4                  // Method io/dialob/db/mongo/MongoQuestionnaireIdObfuscator.toMongoId:(Ljava/lang/String;)Ljava/lang/String;
       8: areturn

  protected io.dialob.api.questionnaire.ModifiableQuestionnaire toMongo(io.dialob.api.questionnaire.Questionnaire);
    Code:
       0: aload_1
       1: invokeinterface #5,  1            // InterfaceMethod io/dialob/api/questionnaire/Questionnaire.getId:()Ljava/lang/String;
       6: astore_2
       7: aconst_null
       8: astore_3
       9: aload_2
      10: invokestatic  #6                  // Method org/apache/commons/lang3/StringUtils.isBlank:(Ljava/lang/CharSequence;)Z
      13: ifeq          18
      16: aconst_null
      17: astore_2
      18: aload_2
      19: ifnull        45
      22: aload_0
      23: aload_2
      24: invokevirtual #7                  // Method toMongoId:(Ljava/lang/String;)Ljava/lang/String;
      27: astore_3
      28: aload_3
      29: ifnonnull     45
      32: getstatic     #8                  // Field LOGGER:Lorg/slf4j/Logger;
      35: ldc           #9                  // String DATA CORRUPT: Cannot convert external Id \'{}\' to mongo.
      37: aload_2
      38: invokeinterface #10,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      43: aconst_null
      44: areturn
      45: invokestatic  #11                 // Method io/dialob/api/questionnaire/ModifiableQuestionnaire.create:()Lio/dialob/api/questionnaire/ModifiableQuestionnaire;
      48: aload_1
      49: invokevirtual #12                 // Method io/dialob/api/questionnaire/ModifiableQuestionnaire.from:(Lio/dialob/api/questionnaire/Questionnaire;)Lio/dialob/api/questionnaire/ModifiableQuestionnaire;
      52: aload_3
      53: invokevirtual #13                 // Method io/dialob/api/questionnaire/ModifiableQuestionnaire.setId:(Ljava/lang/String;)Lio/dialob/api/questionnaire/ModifiableQuestionnaire;
      56: areturn

  protected io.dialob.api.questionnaire.Questionnaire toPublic(io.dialob.api.questionnaire.Questionnaire);
    Code:
       0: aload_1
       1: areturn

  public io.dialob.api.questionnaire.Questionnaire findOne(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: ldc           #14                 // String none
       3: aload_2
       4: invokespecial #15                 // Method io/dialob/db/mongo/database/BaseMongoDbDatabase.findOne:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #16                 // class io/dialob/api/questionnaire/Questionnaire
      10: areturn

  public boolean exists(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: ldc           #14                 // String none
       3: aload_2
       4: invokespecial #17                 // Method io/dialob/db/mongo/database/BaseMongoDbDatabase.exists:(Ljava/lang/String;Ljava/lang/String;)Z
       7: ireturn

  public boolean delete(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: ldc           #14                 // String none
       3: aload_2
       4: invokespecial #18                 // Method io/dialob/db/mongo/database/BaseMongoDbDatabase.delete:(Ljava/lang/String;Ljava/lang/String;)Z
       7: ireturn

  public void findAllMetadata(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, io.dialob.api.questionnaire.Questionnaire$Metadata$Status, java.util.function.Consumer<io.dialob.questionnaire.service.api.QuestionnaireDatabase$MetadataRow>);
    Code:
       0: aload_0
       1: aload_0
       2: aload         7
       4: invokedynamic #19,  0             // InvokeDynamic #0:apply:(Lio/dialob/db/mongo/database/MongoDbQuestionnaireDatabase;Ljava/util/function/Consumer;)Lcom/mongodb/Function;
       9: invokevirtual #20                 // Method doMongo:(Lcom/mongodb/Function;)Ljava/lang/Object;
      12: pop
      13: return

  public java.lang.Object findOne(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #21                 // Method findOne:(Ljava/lang/String;Ljava/lang/String;)Lio/dialob/api/questionnaire/Questionnaire;
       6: areturn

  protected java.lang.Object toMongo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #16                 // class io/dialob/api/questionnaire/Questionnaire
       5: invokevirtual #22                 // Method toMongo:(Lio/dialob/api/questionnaire/Questionnaire;)Lio/dialob/api/questionnaire/ModifiableQuestionnaire;
       8: areturn

  protected java.lang.Object toPublic(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #16                 // class io/dialob/api/questionnaire/Questionnaire
       5: invokevirtual #23                 // Method toPublic:(Lio/dialob/api/questionnaire/Questionnaire;)Lio/dialob/api/questionnaire/Questionnaire;
       8: areturn

  public io.dialob.api.questionnaire.Questionnaire save(java.lang.String, io.dialob.api.questionnaire.Questionnaire);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #24                 // Method io/dialob/db/mongo/database/BaseMongoDbDatabase.save:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
       6: checkcast     #16                 // class io/dialob/api/questionnaire/Questionnaire
       9: areturn

  public io.dialob.api.questionnaire.Questionnaire findOne(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #25                 // Method io/dialob/db/mongo/database/BaseMongoDbDatabase.findOne:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #16                 // class io/dialob/api/questionnaire/Questionnaire
      10: areturn

  private java.lang.Object lambda$findAllMetadata$1(java.util.function.Consumer, io.dialob.db.mongo.repository.QuestionnaireRepository);
    Code:
       0: aload_2
       1: invokeinterface #26,  1           // InterfaceMethod io/dialob/db/mongo/repository/QuestionnaireRepository.findAllMetadata:()Ljava/util/List;
       6: invokeinterface #27,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      11: aload_0
      12: aload_1
      13: invokedynamic #28,  0             // InvokeDynamic #1:accept:(Lio/dialob/db/mongo/database/MongoDbQuestionnaireDatabase;Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
      18: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      23: aconst_null
      24: areturn

  private void lambda$findAllMetadata$0(java.util.function.Consumer, io.dialob.api.questionnaire.Questionnaire);
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: invokeinterface #5,  1            // InterfaceMethod io/dialob/api/questionnaire/Questionnaire.getId:()Ljava/lang/String;
       8: invokevirtual #30                 // Method toPublicId:(Ljava/lang/String;)Ljava/lang/String;
      11: aload_2
      12: invokeinterface #31,  1           // InterfaceMethod io/dialob/api/questionnaire/Questionnaire.getMetadata:()Lio/dialob/api/questionnaire/Questionnaire$Metadata;
      17: invokestatic  #32                 // Method io/dialob/questionnaire/service/api/ImmutableMetadataRow.of:(Ljava/lang/String;Lio/dialob/api/questionnaire/Questionnaire$Metadata;)Lio/dialob/questionnaire/service/api/ImmutableMetadataRow;
      20: invokeinterface #33,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      25: return

  static {};
    Code:
       0: ldc           #34                 // class io/dialob/db/mongo/database/MongoDbQuestionnaireDatabase
       2: invokestatic  #35                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #8                  // Field LOGGER:Lorg/slf4j/Logger;
       8: return
}
