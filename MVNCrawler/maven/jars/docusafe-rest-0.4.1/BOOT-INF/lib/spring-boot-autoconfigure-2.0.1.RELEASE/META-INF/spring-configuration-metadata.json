{
  "hints": [
    {
      "name": "server.servlet.jsp.class-name",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "javax.servlet.http.HttpServlet"
          }
        }
      ]
    },
    {
      "name": "spring.cache.jcache.provider",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "javax.cache.spi.CachingProvider"
          }
        }
      ]
    },
    {
      "name": "spring.data.cassandra.schema-action",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.springframework.data.cassandra.config.SchemaAction"
          }
        }
      ]
    },
    {
      "name": "spring.data.mongodb.field-naming-strategy",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.springframework.data.mapping.model.FieldNamingStrategy"
          }
        }
      ]
    },
    {
      "name": "spring.datasource.data",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "java.util.List<org.springframework.core.io.Resource>"
          }
        }
      ]
    },
    {
      "name": "spring.datasource.driver-class-name",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "java.sql.Driver"
          }
        }
      ]
    },
    {
      "name": "spring.datasource.schema",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "java.util.List<org.springframework.core.io.Resource>"
          }
        }
      ]
    },
    {
      "name": "spring.datasource.xa.data-source-class-name",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "javax.sql.XADataSource"
          }
        }
      ]
    },
    {
      "values": [
        {
          "value": "gson"
        },
        {
          "value": "jackson"
        },
        {
          "value": "jsonb"
        }
      ],
      "name": "spring.http.converters.preferred-json-mapper",
      "providers": [
        {
          "name": "any"
        }
      ]
    },
    {
      "name": "spring.jmx.server",
      "providers": [
        {
          "name": "spring-bean-reference",
          "parameters": {
            "target": "javax.management.MBeanServer"
          }
        }
      ]
    },
    {
      "values": [
        {
          "description": "Disable DDL handling.",
          "value": "none"
        },
        {
          "description": "Validate the schema, make no changes to the database.",
          "value": "validate"
        },
        {
          "description": "Update the schema if necessary.",
          "value": "update"
        },
        {
          "description": "Create the schema and destroy previous data.",
          "value": "create"
        },
        {
          "description": "Create and then destroy the schema at the end of the session.",
          "value": "create-drop"
        }
      ],
      "name": "spring.jpa.hibernate.ddl-auto"
    },
    {
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.hibernate.boot.model.naming.ImplicitNamingStrategy"
          }
        }
      ]
    },
    {
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.hibernate.boot.model.naming.PhysicalNamingStrategy"
          }
        }
      ]
    },
    {
      "values": [
        {
          "description": "Automatically reset the offset to the earliest offset.",
          "value": "earliest"
        },
        {
          "description": "Automatically reset the offset to the latest offset.",
          "value": "latest"
        },
        {
          "description": "Throw exception to the consumer if no previous offset is found for the consumer's group.",
          "value": "none"
        },
        {
          "description": "Throw exception to the consumer.",
          "value": "exception"
        }
      ],
      "name": "spring.kafka.consumer.auto-offset-reset",
      "providers": [
        {
          "name": "any"
        }
      ]
    },
    {
      "name": "spring.kafka.consumer.key-deserializer",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.apache.kafka.common.serialization.Deserializer"
          }
        }
      ]
    },
    {
      "name": "spring.kafka.consumer.value-deserializer",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.apache.kafka.common.serialization.Deserializer"
          }
        }
      ]
    },
    {
      "name": "spring.kafka.producer.key-serializer",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.apache.kafka.common.serialization.Serializer"
          }
        }
      ]
    },
    {
      "name": "spring.kafka.producer.value-serializer",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.apache.kafka.common.serialization.Serializer"
          }
        }
      ]
    },
    {
      "name": "spring.liquibase.change-log",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.springframework.core.io.Resource"
          }
        }
      ]
    }
  ],
  "groups": [
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.compression",
      "sourceMethod": "getCompression()",
      "type": "org.springframework.boot.web.server.Compression"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.error",
      "sourceMethod": "getError()",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "name": "server.error.whitelabel",
      "sourceMethod": "getWhitelabel()",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties$Whitelabel"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.http2",
      "sourceMethod": "getHttp2()",
      "type": "org.springframework.boot.web.server.Http2"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.jetty",
      "sourceMethod": "getJetty()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "name": "server.jetty.accesslog",
      "sourceMethod": "getAccesslog()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.servlet",
      "sourceMethod": "getServlet()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "name": "server.servlet.jsp",
      "sourceMethod": "getJsp()",
      "type": "org.springframework.boot.web.servlet.server.Jsp"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "name": "server.servlet.session",
      "sourceMethod": "getSession()",
      "type": "org.springframework.boot.web.servlet.server.Session"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session",
      "name": "server.servlet.session.cookie",
      "sourceMethod": "getCookie()",
      "type": "org.springframework.boot.web.servlet.server.Session$Cookie"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.web.server.Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.tomcat",
      "sourceMethod": "getTomcat()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.accesslog",
      "sourceMethod": "getAccesslog()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.resource",
      "sourceMethod": "getResource()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.undertow",
      "sourceMethod": "getUndertow()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.accesslog",
      "sourceMethod": "getAccesslog()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.packages",
      "sourceMethod": "getPackages()",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.pool",
      "sourceMethod": "getPool()",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis.embedded",
      "sourceMethod": "getEmbedded()",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "name": "spring.batch",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "name": "spring.batch.job",
      "sourceMethod": "getJob()",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.caffeine",
      "sourceMethod": "getCaffeine()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.couchbase",
      "sourceMethod": "getCouchbase()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.ehcache",
      "sourceMethod": "getEhcache()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.infinispan",
      "sourceMethod": "getInfinispan()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.jcache",
      "sourceMethod": "getJcache()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.redis",
      "sourceMethod": "getRedis()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "name": "spring.couchbase",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "name": "spring.couchbase.bucket",
      "sourceMethod": "getBucket()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "name": "spring.couchbase.env",
      "sourceMethod": "getEnv()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "name": "spring.couchbase.env.endpoints",
      "sourceMethod": "getEndpoints()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "name": "spring.couchbase.env.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "name": "spring.couchbase.env.timeouts",
      "sourceMethod": "getTimeouts()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra",
      "type": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.pool",
      "sourceMethod": "getPool()",
      "type": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "name": "spring.data.couchbase",
      "type": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "name": "spring.data.elasticsearch",
      "type": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb",
      "type": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j.embedded",
      "sourceMethod": "getEmbedded()",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest",
      "type": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "name": "spring.data.solr",
      "type": "org.springframework.boot.autoconfigure.solr.SolrProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties",
      "name": "spring.data.web",
      "type": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties",
      "name": "spring.data.web.pageable",
      "sourceMethod": "getPageable()",
      "type": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties",
      "name": "spring.data.web.sort",
      "sourceMethod": "getSort()",
      "type": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Sort"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp2",
      "name": "spring.datasource.dbcp2",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)",
      "type": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari",
      "name": "spring.datasource.hikari",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)",
      "type": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Tomcat",
      "name": "spring.datasource.tomcat",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)",
      "type": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.xa",
      "sourceMethod": "getXa()",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "name": "spring.elasticsearch.jest",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "name": "spring.elasticsearch.jest.proxy",
      "sourceMethod": "getProxy()",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration",
      "name": "spring.flyway",
      "sourceMethod": "flyway()",
      "type": "org.flywaydb.core.Flyway"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "spring.flyway",
      "type": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "name": "spring.freemarker",
      "type": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "name": "spring.groovy.template",
      "type": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration",
      "name": "spring.groovy.template.configuration",
      "sourceMethod": "groovyMarkupConfigurer()",
      "type": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson",
      "type": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "name": "spring.h2.console",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "name": "spring.h2.console.settings",
      "sourceMethod": "getSettings()",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "name": "spring.hateoas",
      "type": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties",
      "name": "spring.hazelcast",
      "type": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties",
      "name": "spring.http.encoding",
      "type": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties",
      "name": "spring.influx",
      "type": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "name": "spring.info",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "name": "spring.info.build",
      "sourceMethod": "getBuild()",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "name": "spring.info.git",
      "sourceMethod": "getGit()",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.integration.IntegrationProperties",
      "name": "spring.integration",
      "type": "org.springframework.boot.autoconfigure.integration.IntegrationProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.integration.IntegrationProperties",
      "name": "spring.integration.jdbc",
      "sourceMethod": "getJdbc()",
      "type": "org.springframework.boot.autoconfigure.integration.IntegrationProperties$Jdbc"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson",
      "type": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties",
      "name": "spring.jdbc",
      "type": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties",
      "name": "spring.jdbc.template",
      "sourceMethod": "getTemplate()",
      "type": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties$Template"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey.filter",
      "sourceMethod": "getFilter()",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey.servlet",
      "sourceMethod": "getServlet()",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "name": "spring.jms",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "name": "spring.jms.listener",
      "sourceMethod": "getListener()",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "name": "spring.jms.template",
      "sourceMethod": "getTemplate()",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties",
      "name": "spring.jooq",
      "type": "org.springframework.boot.autoconfigure.jooq.JooqProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa.hibernate",
      "sourceMethod": "getHibernate()",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "name": "spring.jpa.hibernate.naming",
      "sourceMethod": "getNaming()",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties",
      "name": "spring.jta",
      "type": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.BitronixJtaConfiguration",
      "name": "spring.jta.bitronix.properties",
      "sourceMethod": "bitronixConfiguration()",
      "type": "bitronix.tm.Configuration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.admin",
      "sourceMethod": "getAdmin()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin",
      "name": "spring.kafka.admin.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.consumer",
      "sourceMethod": "getConsumer()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.jaas",
      "sourceMethod": "getJaas()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.listener",
      "sourceMethod": "getListener()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.producer",
      "sourceMethod": "getProducer()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.template",
      "sourceMethod": "getTemplate()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Template"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap",
      "type": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "name": "spring.ldap.embedded",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "name": "spring.ldap.embedded.credential",
      "sourceMethod": "getCredential()",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "name": "spring.ldap.embedded.validation",
      "sourceMethod": "getValidation()",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "spring.liquibase",
      "type": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail",
      "type": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "name": "spring.messages",
      "sourceMethod": "messageSourceProperties()",
      "type": "org.springframework.boot.autoconfigure.context.MessageSourceProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "name": "spring.mongodb.embedded",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "name": "spring.mongodb.embedded.storage",
      "sourceMethod": "getStorage()",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "name": "spring.mustache",
      "type": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "name": "spring.mvc",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "name": "spring.mvc.async",
      "sourceMethod": "getAsync()",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Async"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "name": "spring.mvc.contentnegotiation",
      "sourceMethod": "getContentnegotiation()",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "name": "spring.mvc.pathmatch",
      "sourceMethod": "getPathmatch()",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Pathmatch"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "name": "spring.mvc.servlet",
      "sourceMethod": "getServlet()",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Servlet"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "name": "spring.mvc.view",
      "sourceMethod": "getView()",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$View"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties",
      "name": "spring.quartz",
      "type": "org.springframework.boot.autoconfigure.quartz.QuartzProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties",
      "name": "spring.quartz.jdbc",
      "sourceMethod": "getJdbc()",
      "type": "org.springframework.boot.autoconfigure.quartz.QuartzProperties$Jdbc"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.cache",
      "sourceMethod": "getCache()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "name": "spring.rabbitmq.cache.channel",
      "sourceMethod": "getChannel()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "name": "spring.rabbitmq.cache.connection",
      "sourceMethod": "getConnection()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.listener",
      "sourceMethod": "getListener()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "name": "spring.rabbitmq.listener.direct",
      "sourceMethod": "getDirect()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "name": "spring.rabbitmq.listener.direct.retry",
      "sourceMethod": "getRetry()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "name": "spring.rabbitmq.listener.simple",
      "sourceMethod": "getSimple()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "name": "spring.rabbitmq.listener.simple.retry",
      "sourceMethod": "getRetry()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.template",
      "sourceMethod": "getTemplate()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "name": "spring.rabbitmq.template.retry",
      "sourceMethod": "getRetry()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties",
      "name": "spring.reactor",
      "type": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties",
      "name": "spring.reactor.stacktrace-mode",
      "sourceMethod": "getStacktraceMode()",
      "type": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties$StacktraceMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.cluster",
      "sourceMethod": "getCluster()",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.jedis",
      "sourceMethod": "getJedis()",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Jedis"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Jedis",
      "name": "spring.redis.jedis.pool",
      "sourceMethod": "getPool()",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.lettuce",
      "sourceMethod": "getLettuce()",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce",
      "name": "spring.redis.lettuce.pool",
      "sourceMethod": "getPool()",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.sentinel",
      "sourceMethod": "getSentinel()",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "name": "spring.resources",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "name": "spring.resources.cache",
      "sourceMethod": "getCache()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache",
      "name": "spring.resources.cache.cachecontrol",
      "sourceMethod": "getCachecontrol()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "name": "spring.resources.chain",
      "sourceMethod": "getChain()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "name": "spring.resources.chain.strategy",
      "sourceMethod": "getStrategy()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "name": "spring.resources.chain.strategy.content",
      "sourceMethod": "getContent()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "name": "spring.resources.chain.strategy.fixed",
      "sourceMethod": "getFixed()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "name": "spring.security",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "name": "spring.security.filter",
      "sourceMethod": "getFilter()",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Filter"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties",
      "name": "spring.security.oauth2.client",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "name": "spring.security.user",
      "sourceMethod": "getUser()",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$User"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "name": "spring.sendgrid",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "name": "spring.sendgrid.proxy",
      "sourceMethod": "getProxy()",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "name": "spring.servlet.multipart",
      "type": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "name": "spring.session",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.HazelcastSessionProperties",
      "name": "spring.session.hazelcast",
      "type": "org.springframework.boot.autoconfigure.session.HazelcastSessionProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "name": "spring.session.jdbc",
      "type": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.MongoSessionProperties",
      "name": "spring.session.mongodb",
      "type": "org.springframework.boot.autoconfigure.session.MongoSessionProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.RedisSessionProperties",
      "name": "spring.session.redis",
      "type": "org.springframework.boot.autoconfigure.session.RedisSessionProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "name": "spring.session.servlet",
      "sourceMethod": "getServlet()",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Servlet"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf",
      "type": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf.reactive",
      "sourceMethod": "getReactive()",
      "type": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf.servlet",
      "sourceMethod": "getServlet()",
      "type": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Servlet"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
      "name": "spring.transaction",
      "type": "org.springframework.boot.autoconfigure.transaction.TransactionProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
      "name": "spring.webflux",
      "type": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "name": "spring.webservices",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "name": "spring.webservices.servlet",
      "sourceMethod": "getServlet()",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet"
    }
  ],
  "properties": [
    {
      "deprecated": true,
      "name": "flyway.baseline-description",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.baseline-description"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.baseline-on-migrate",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.baseline-on-migrate"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.baseline-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.baseline-version"
      }
    },
    {
      "defaultValue": false,
      "deprecated": true,
      "name": "flyway.check-location",
      "description": "Check that migration scripts location exists.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.check-location"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.clean-on-validation-error",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.clean-on-validation-error"
      }
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "flyway.enabled",
      "description": "Whether to enable flyway.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.enabled"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.encoding",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.encoding"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.init-description",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.init-on-migrate",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.init-sqls",
      "description": "SQL statements to execute to initialize a connection immediately after obtaining\n it.",
      "type": "java.util.List<java.lang.String>",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.init-sqls"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.init-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.locations",
      "description": "Locations of migrations scripts. Can contain the special \"{vendor}\" placeholder to\n use vendor-specific locations.",
      "type": "java.util.List<java.lang.String>",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.locations"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.out-of-order",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.out-of-order"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.password",
      "description": "Login password of the database to migrate.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.password"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.placeholder-prefix",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.placeholder-prefix"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.placeholder-replacement",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.placeholder-replacement"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.placeholder-suffix",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.placeholder-suffix"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.placeholders",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.placeholders"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.schemas",
      "type": "java.lang.String[]",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.schemas"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.sql-migration-prefix",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.sql-migration-prefix"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.sql-migration-separator",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.sql-migration-separator"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.sql-migration-suffix",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.sql-migration-suffixes"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.table",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.table"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.target",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.target"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.url",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.url"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.user",
      "description": "Login user of the database to migrate.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.user"
      }
    },
    {
      "deprecated": true,
      "name": "flyway.validate-on-migrate",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.flyway.validate-on-migrate"
      }
    },
    {
      "defaultValue": "classpath:\/db\/changelog\/db.changelog-master.yaml",
      "deprecated": true,
      "name": "liquibase.change-log",
      "description": "Change log configuration path.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.change-log"
      }
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "liquibase.check-change-log-location",
      "description": "Check the change log location exists.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.check-change-log-location"
      }
    },
    {
      "deprecated": true,
      "name": "liquibase.contexts",
      "description": "Comma-separated list of runtime contexts to use.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.contexts"
      }
    },
    {
      "deprecated": true,
      "name": "liquibase.default-schema",
      "description": "Default database schema.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.default-schema"
      }
    },
    {
      "defaultValue": false,
      "deprecated": true,
      "name": "liquibase.drop-first",
      "description": "Drop the database schema first.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.drop-first"
      }
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "liquibase.enabled",
      "description": "Whether to enable liquibase support.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.enabled"
      }
    },
    {
      "deprecated": true,
      "name": "liquibase.labels",
      "description": "Comma-separated list of runtime labels to use.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.labels"
      }
    },
    {
      "deprecated": true,
      "name": "liquibase.parameters",
      "description": "Change log parameters.",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.parameters"
      }
    },
    {
      "deprecated": true,
      "name": "liquibase.password",
      "description": "Login password of the database to migrate.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.password"
      }
    },
    {
      "deprecated": true,
      "name": "liquibase.rollback-file",
      "description": "File to which rollback SQL will be written when an update is performed.",
      "type": "java.io.File",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.rollback-file"
      }
    },
    {
      "deprecated": true,
      "name": "liquibase.url",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.url"
      }
    },
    {
      "deprecated": true,
      "name": "liquibase.user",
      "description": "Login user of the database to migrate.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.liquibase.user"
      }
    },
    {
      "defaultValue": "role",
      "deprecated": true,
      "name": "security.basic.authorize-mode",
      "description": "Security authorize mode to apply.",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "security.basic.enabled",
      "description": "Whether to enable basic authentication.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": [
        "\/**"
      ],
      "deprecated": true,
      "name": "security.basic.path",
      "description": "Comma-separated list of paths to secure.",
      "type": "java.lang.String[]",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": "Spring",
      "deprecated": true,
      "name": "security.basic.realm",
      "description": "HTTP basic realm name.",
      "type": "java.lang.String",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": false,
      "deprecated": true,
      "name": "security.enable-csrf",
      "description": "Whether to enable Cross Site Request Forgery support.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "deprecated": true,
      "name": "security.filter-dispatcher-types",
      "description": "Security filter chain dispatcher types.",
      "type": "java.util.Set<java.lang.String>",
      "deprecation": {
        "level": "error",
        "replacement": "spring.security.filter.dispatcher-types"
      }
    },
    {
      "defaultValue": 0,
      "deprecated": true,
      "name": "security.filter-order",
      "description": "Security filter chain order.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "replacement": "spring.security.filter.order"
      }
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "security.headers.cache",
      "description": "Whether to enable cache control HTTP headers.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "deprecated": true,
      "name": "security.headers.content-security-policy",
      "description": "Value for content security policy header.",
      "type": "java.lang.String",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": "default",
      "deprecated": true,
      "name": "security.headers.content-security-policy-mode",
      "description": "Content security policy mode.",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "security.headers.content-type",
      "description": "Whether to enable \"X-Content-Type-Options\" header.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "security.headers.frame",
      "description": "Whether to enable \"X-Frame-Options\" header.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": "all",
      "deprecated": true,
      "name": "security.headers.hsts",
      "description": "HTTP Strict Transport Security (HSTS) mode (none, domain, all).",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "security.headers.xss",
      "description": "Whether to enable cross site scripting (XSS) protection.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "deprecated": true,
      "name": "security.ignored",
      "description": "Comma-separated list of paths to exclude from the default secured paths.",
      "type": "java.util.List<java.lang.String>",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": false,
      "deprecated": true,
      "name": "security.require-ssl",
      "description": "Whether to enable secure channel for all requests.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": "stateless",
      "deprecated": true,
      "name": "security.sessions",
      "description": "Session creation policy (always, never, if_required, stateless).",
      "type": "org.springframework.security.config.http.SessionCreationPolicy",
      "deprecation": {
        "reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead.",
        "level": "error"
      }
    },
    {
      "defaultValue": "user",
      "deprecated": true,
      "name": "security.user.name",
      "description": "Default user name.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.security.user.name"
      }
    },
    {
      "deprecated": true,
      "name": "security.user.password",
      "description": "Password for the default user name.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.security.user.password"
      }
    },
    {
      "deprecated": true,
      "name": "security.user.role",
      "description": "Granted roles for the default user name.",
      "type": "java.util.List<java.lang.String>",
      "deprecation": {
        "level": "error",
        "replacement": "spring.security.user.roles"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.address",
      "description": "Network address to which the server should bind.",
      "type": "java.net.InetAddress"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Compression",
      "name": "server.compression.enabled",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Compression",
      "name": "server.compression.excluded-user-agents",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Compression",
      "name": "server.compression.mime-types",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Compression",
      "name": "server.compression.min-response-size",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.connection-timeout",
      "description": "Time that connectors wait for another HTTP request before closing the connection.\n When not set, the connector's container-specific default is used. Use a value of -1\n to indicate no (that is, an infinite) timeout.",
      "type": "java.time.Duration"
    },
    {
      "deprecated": true,
      "name": "server.context-parameters",
      "description": "ServletContext parameters.",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.context-parameters"
      }
    },
    {
      "deprecated": true,
      "name": "server.context-path",
      "description": "Context path of the application.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.context-path"
      }
    },
    {
      "defaultValue": "application",
      "deprecated": true,
      "name": "server.display-name",
      "description": "Display name of the application.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.application-display-name"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": false,
      "name": "server.error.include-exception",
      "description": "Include the \"exception\" attribute.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": "never",
      "name": "server.error.include-stacktrace",
      "description": "When to include a \"stacktrace\" attribute.",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": "\/error",
      "name": "server.error.path",
      "description": "Path of the error controller.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties$Whitelabel",
      "defaultValue": true,
      "name": "server.error.whitelabel.enabled",
      "description": "Whether to enable the default error page displayed in browsers in case of a\n server error.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Http2",
      "name": "server.http2.enabled",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "name": "server.jetty.acceptors",
      "description": "Number of acceptor threads to use.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false,
      "name": "server.jetty.accesslog.append",
      "description": "Append to log.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": "dd\/MMM\/yyyy:HH:mm:ss Z",
      "name": "server.jetty.accesslog.date-format",
      "description": "Timestamp format of the request log.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false,
      "name": "server.jetty.accesslog.enabled",
      "description": "Enable access log.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false,
      "name": "server.jetty.accesslog.extended-format",
      "description": "Enable extended NCSA format.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "name": "server.jetty.accesslog.file-date-format",
      "description": "Date format to place in log file name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "name": "server.jetty.accesslog.filename",
      "description": "Log filename. If not specified, logs redirect to \"System.err\".",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "name": "server.jetty.accesslog.locale",
      "description": "Locale of the request log.",
      "type": "java.util.Locale"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false,
      "name": "server.jetty.accesslog.log-cookies",
      "description": "Enable logging of the request cookies.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false,
      "name": "server.jetty.accesslog.log-latency",
      "description": "Enable logging of request processing time.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false,
      "name": "server.jetty.accesslog.log-server",
      "description": "Enable logging of the request hostname.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": 31,
      "name": "server.jetty.accesslog.retention-period",
      "description": "Number of days before rotated log files are deleted.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": "GMT",
      "name": "server.jetty.accesslog.time-zone",
      "description": "Timezone of the request log.",
      "type": "java.util.TimeZone"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "defaultValue": 0,
      "name": "server.jetty.max-http-post-size",
      "description": "Maximum size, in bytes, of the HTTP post or put content.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "name": "server.jetty.selectors",
      "description": "Number of selector threads to use.",
      "type": "java.lang.Integer"
    },
    {
      "deprecated": true,
      "name": "server.jsp-servlet.class-name",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.jsp.class-name"
      }
    },
    {
      "deprecated": true,
      "name": "server.jsp-servlet.init-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.jsp.init-parameters"
      }
    },
    {
      "deprecated": true,
      "name": "server.jsp-servlet.registered",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.jsp.registered"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 0,
      "name": "server.max-http-header-size",
      "description": "Maximum size, in bytes, of the HTTP message header.",
      "type": "java.lang.Integer"
    },
    {
      "defaultValue": 0,
      "deprecated": true,
      "name": "server.max-http-post-size",
      "description": "Maximum size in bytes of the HTTP post content.",
      "type": "java.lang.Integer",
      "deprecation": {
        "reason": "Use dedicated property for each container.",
        "level": "error"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 8080,
      "name": "server.port",
      "description": "Server HTTP port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.server-header",
      "description": "Value to use for the Server response header (if empty, no header is sent).",
      "type": "java.lang.String"
    },
    {
      "defaultValue": "\/",
      "deprecated": true,
      "name": "server.servlet-path",
      "description": "Path of the main dispatcher servlet.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.path"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "defaultValue": "application",
      "name": "server.servlet.application-display-name",
      "description": "Display name of the application.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "name": "server.servlet.context-parameters",
      "description": "Servlet context init parameters.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "name": "server.servlet.context-path",
      "description": "Context path of the application.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Jsp",
      "name": "server.servlet.jsp.class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Jsp",
      "name": "server.servlet.jsp.init-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Jsp",
      "name": "server.servlet.jsp.registered",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "defaultValue": "\/",
      "name": "server.servlet.path",
      "description": "Path of the main dispatcher servlet.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie",
      "name": "server.servlet.session.cookie.comment",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie",
      "name": "server.servlet.session.cookie.domain",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie",
      "name": "server.servlet.session.cookie.http-only",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie",
      "name": "server.servlet.session.cookie.max-age",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie",
      "name": "server.servlet.session.cookie.name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie",
      "name": "server.servlet.session.cookie.path",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie",
      "name": "server.servlet.session.cookie.secure",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session",
      "name": "server.servlet.session.persistent",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session",
      "name": "server.servlet.session.store-dir",
      "type": "java.io.File"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session",
      "name": "server.servlet.session.timeout",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.web.servlet.server.Session",
      "name": "server.servlet.session.tracking-modes",
      "type": "java.util.Set<org.springframework.boot.web.servlet.server.Session.SessionTrackingMode>"
    },
    {
      "deprecated": true,
      "name": "server.session.cookie.comment",
      "description": "Comment for the session cookie.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.cookie.comment"
      }
    },
    {
      "deprecated": true,
      "name": "server.session.cookie.domain",
      "description": "Domain for the session cookie.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.cookie.domain"
      }
    },
    {
      "deprecated": true,
      "name": "server.session.cookie.http-only",
      "description": "\"HttpOnly\" flag for the session cookie.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.cookie.http-only"
      }
    },
    {
      "deprecated": true,
      "name": "server.session.cookie.max-age",
      "description": "Maximum age of the session cookie.",
      "type": "java.time.Duration",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.cookie.max-age"
      }
    },
    {
      "deprecated": true,
      "name": "server.session.cookie.name",
      "description": "Session cookie name.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.cookie.name"
      }
    },
    {
      "deprecated": true,
      "name": "server.session.cookie.path",
      "description": "Path of the session cookie.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.cookie.path"
      }
    },
    {
      "deprecated": true,
      "name": "server.session.cookie.secure",
      "description": "\"Secure\" flag for the session cookie.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.cookie.secure"
      }
    },
    {
      "defaultValue": false,
      "deprecated": true,
      "name": "server.session.persistent",
      "description": "Whether to persist session data between restarts.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.persistent"
      }
    },
    {
      "deprecated": true,
      "name": "server.session.store-dir",
      "description": "Directory used to store session data.",
      "type": "java.io.File",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.store-dir"
      }
    },
    {
      "deprecated": true,
      "name": "server.session.timeout",
      "description": "Session timeout. If a duration suffix is not specified, seconds will be used.",
      "type": "java.time.Duration",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.timeout"
      }
    },
    {
      "deprecated": true,
      "name": "server.session.tracking-modes",
      "description": "Session tracking modes (one or more of the following: \"cookie\", \"url\", \"ssl\").",
      "type": "java.util.Set<org.springframework.boot.web.servlet.server.Session.SessionTrackingMode>",
      "deprecation": {
        "level": "error",
        "replacement": "server.servlet.session.tracking-modes"
      }
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.ciphers",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.client-auth",
      "type": "org.springframework.boot.web.server.Ssl$ClientAuth"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.enabled",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.enabled-protocols",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.key-alias",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.key-password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.key-store",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.key-store-password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.key-store-provider",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.key-store-type",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.protocol",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.trust-store",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.trust-store-password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.trust-store-provider",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.web.server.Ssl",
      "name": "server.ssl.trust-store-type",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0,
      "name": "server.tomcat.accept-count",
      "description": "Maximum queue length for incoming connection requests when all possible request\n processing threads are in use.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": true,
      "name": "server.tomcat.accesslog.buffered",
      "description": "Whether to buffer output such that it is flushed only periodically.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "logs",
      "name": "server.tomcat.accesslog.directory",
      "description": "Directory in which log files are created. Can be absolute or relative to\n the Tomcat base dir.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false,
      "name": "server.tomcat.accesslog.enabled",
      "description": "Enable access log.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": ".yyyy-MM-dd",
      "name": "server.tomcat.accesslog.file-date-format",
      "description": "Date format to place in the log file name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "common",
      "name": "server.tomcat.accesslog.pattern",
      "description": "Format pattern for access logs.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "access_log",
      "name": "server.tomcat.accesslog.prefix",
      "description": "Log file name prefix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false,
      "name": "server.tomcat.accesslog.rename-on-rotate",
      "description": "Whether to defer inclusion of the date stamp in the file name until rotate\n time.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false,
      "name": "server.tomcat.accesslog.request-attributes-enabled",
      "description": "Set request attributes for the IP address, Hostname, protocol, and port\n used for the request.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": true,
      "name": "server.tomcat.accesslog.rotate",
      "description": "Whether to enable access log rotation.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": ".log",
      "name": "server.tomcat.accesslog.suffix",
      "description": "Log file name suffix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.additional-tld-skip-patterns",
      "description": "Comma-separated list of additional patterns that match jars to ignore for TLD\n scanning. The special '?' and '*' characters can be used in the pattern to\n match one and only one character and zero or more characters respectively.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "30s",
      "name": "server.tomcat.background-processor-delay",
      "description": "Delay between the invocation of backgroundProcess methods. If a duration suffix\n is not specified, seconds will be used.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.basedir",
      "description": "Tomcat base directory. If not specified, a temporary directory is used.",
      "type": "java.io.File"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}",
      "name": "server.tomcat.internal-proxies",
      "description": "Regular expression matching trusted IP addresses.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0,
      "name": "server.tomcat.max-connections",
      "description": "Maximum number of connections that the server accepts and processes at any\n given time. Once the limit has been reached, the operating system may still\n accept connections based on the \"acceptCount\" property.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0,
      "name": "server.tomcat.max-http-header-size",
      "description": "Maximum size, in bytes, of the HTTP message header.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0,
      "name": "server.tomcat.max-http-post-size",
      "description": "Maximum size, in bytes, of the HTTP post content.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0,
      "name": "server.tomcat.max-threads",
      "description": "Maximum number of worker threads.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0,
      "name": "server.tomcat.min-spare-threads",
      "description": "Minimum number of worker threads.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "X-Forwarded-Port",
      "name": "server.tomcat.port-header",
      "description": "Name of the HTTP header used to override the original port value.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.protocol-header",
      "description": "Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "https",
      "name": "server.tomcat.protocol-header-https-value",
      "description": "Value of the protocol header indicating whether the incoming request uses SSL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.redirect-context-root",
      "description": "Whether requests to the context root should be redirected by appending a \/ to\n the path.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.remote-ip-header",
      "description": "Name of the HTTP header from which the remote IP is extracted. For instance,\n `X-FORWARDED-FOR`.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Resource",
      "name": "server.tomcat.resource.cache-ttl",
      "description": "Time-to-live of the static resource cache.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.uri-encoding",
      "description": "Character encoding to use to decode the URI.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.use-relative-redirects",
      "description": "Whether HTTP 1.1 and later location headers generated by a call to sendRedirect\n will use relative or absolute redirects.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "name": "server.undertow.accesslog.dir",
      "description": "Undertow access log directory.",
      "type": "java.io.File"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": false,
      "name": "server.undertow.accesslog.enabled",
      "description": "Whether to enable the access log.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "common",
      "name": "server.undertow.accesslog.pattern",
      "description": "Format pattern for access logs.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "access_log.",
      "name": "server.undertow.accesslog.prefix",
      "description": "Log file name prefix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": true,
      "name": "server.undertow.accesslog.rotate",
      "description": "Whether to enable access log rotation.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "log",
      "name": "server.undertow.accesslog.suffix",
      "description": "Log file name suffix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.buffer-size",
      "description": "Size of each buffer, in bytes.",
      "type": "java.lang.Integer"
    },
    {
      "deprecated": true,
      "name": "server.undertow.buffers-per-region",
      "description": "Number of buffer per region.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.direct-buffers",
      "description": "Whether to allocate buffers outside the Java heap.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "defaultValue": true,
      "name": "server.undertow.eager-filter-init",
      "description": "Whether servlet filters should be initialized on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.io-threads",
      "description": "Number of I\/O threads to create for the worker.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "defaultValue": 0,
      "name": "server.undertow.max-http-post-size",
      "description": "Maximum size, in bytes, of the HTTP post content.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.worker-threads",
      "description": "Number of worker threads.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.use-forward-headers",
      "description": "Whether X-Forwarded-* headers should be applied to the HttpRequest.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.broker-url",
      "description": "URL of the ActiveMQ broker. Auto-generated by default.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": "15s",
      "name": "spring.activemq.close-timeout",
      "description": "Time to wait before considering a close complete.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": true,
      "name": "spring.activemq.in-memory",
      "description": "Whether the default broker URL should be in memory. Ignored if an explicit broker\n has been specified.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": false,
      "name": "spring.activemq.non-blocking-redelivery",
      "description": "Whether to stop message delivery before re-delivering messages from a rolled back\n transaction. This implies that message order is not preserved when this is enabled.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages",
      "name": "spring.activemq.packages.trust-all",
      "description": "Whether to trust all packages.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages",
      "name": "spring.activemq.packages.trusted",
      "description": "Comma-separated list of specific packages to trust (when not trusting all\n packages).",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.password",
      "description": "Login password of the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true,
      "name": "spring.activemq.pool.block-if-full",
      "description": "Whether to block when a connection is requested and the pool is full. Set it to\n false to throw a \"JMSException\" instead.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": "-1ms",
      "name": "spring.activemq.pool.block-if-full-timeout",
      "description": "Blocking period before throwing an exception if the pool is still full.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true,
      "name": "spring.activemq.pool.create-connection-on-startup",
      "description": "Whether to create a connection on startup. Can be used to warm up the pool on\n startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": false,
      "name": "spring.activemq.pool.enabled",
      "description": "Whether a PooledConnectionFactory should be created, instead of a regular\n ConnectionFactory.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": "0ms",
      "name": "spring.activemq.pool.expiry-timeout",
      "description": "Connection expiration timeout.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": "30s",
      "name": "spring.activemq.pool.idle-timeout",
      "description": "Connection idle timeout.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 1,
      "name": "spring.activemq.pool.max-connections",
      "description": "Maximum number of pooled connections.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 500,
      "name": "spring.activemq.pool.maximum-active-session-per-connection",
      "description": "Maximum number of active sessions per connection.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true,
      "name": "spring.activemq.pool.reconnect-on-exception",
      "description": "Reset the connection when a \"JMSException\" occurs.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": "-1ms",
      "name": "spring.activemq.pool.time-between-expiration-check",
      "description": "Time to sleep between runs of the idle connection eviction thread. When\n negative, no idle connection eviction thread runs.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true,
      "name": "spring.activemq.pool.use-anonymous-producers",
      "description": "Whether to use only one anonymous \"MessageProducer\" instance. Set it to false\n to create one \"MessageProducer\" every time one is required.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": "0ms",
      "name": "spring.activemq.send-timeout",
      "description": "Time to wait on message sends for a response. Set it to 0 to wait forever.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.user",
      "description": "Login user of the broker.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.aop.auto",
      "description": "Add @EnableAspectJAutoProxy.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.aop.proxy-target-class",
      "description": "Whether subclass-based (CGLIB) proxies are to be created (true), as opposed to standard Java interface-based proxies (false).",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": false,
      "name": "spring.application.admin.enabled",
      "description": "Whether to enable admin features for the application.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": "org.springframework.boot:type=Admin,name=SpringApplication",
      "name": "spring.application.admin.jmx-name",
      "description": "JMX name of the application admin MBean.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "name": "spring.artemis.embedded.cluster-password",
      "description": "Cluster password. Randomly generated on startup by default.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "name": "spring.artemis.embedded.data-directory",
      "description": "Journal file directory. Not necessary if persistence is turned off.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": true,
      "name": "spring.artemis.embedded.enabled",
      "description": "Whether to enable embedded mode if the Artemis server APIs are available.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": false,
      "name": "spring.artemis.embedded.persistent",
      "description": "Whether to enable persistent store.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": [],
      "name": "spring.artemis.embedded.queues",
      "description": "Comma-separated list of queues to create on startup.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": 0,
      "name": "spring.artemis.embedded.server-id",
      "description": "Server ID. By default, an auto-incremented counter is used.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": [],
      "name": "spring.artemis.embedded.topics",
      "description": "Comma-separated list of topics to create on startup.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": "localhost",
      "name": "spring.artemis.host",
      "description": "Artemis broker host.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis.mode",
      "description": "Artemis deployment mode, auto-detected by default.",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis.password",
      "description": "Login password of the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": 61616,
      "name": "spring.artemis.port",
      "description": "Artemis broker port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis.user",
      "description": "Login user of the broker.",
      "type": "java.lang.String"
    },
    {
      "name": "spring.autoconfigure.exclude",
      "description": "Auto-configuration classes to exclude.",
      "type": "java.util.List<java.lang.Class>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "defaultValue": "embedded",
      "name": "spring.batch.initialize-schema",
      "description": "Database schema initialization mode.",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode"
    },
    {
      "deprecated": true,
      "name": "spring.batch.initializer.enabled",
      "description": "Create the required batch tables on startup if necessary. Enabled automatically\n if no custom table prefix is set or if a custom schema is configured.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.batch.initialize-schema"
      }
    },
    {
      "defaultValue": true,
      "name": "spring.batch.job.enabled",
      "description": "Execute all Spring Batch jobs in the context on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job",
      "defaultValue": "",
      "name": "spring.batch.job.names",
      "description": "Comma-separated list of job names to execute on startup (for instance,\n `job1,job2`). By default, all Jobs found in the context are executed.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "defaultValue": "classpath:org\/springframework\/batch\/core\/schema-@@platform@@.sql",
      "name": "spring.batch.schema",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "name": "spring.batch.table-prefix",
      "description": "Table prefix for all the batch meta-data tables.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.cache-names",
      "description": "Comma-separated list of cache names to create if supported by the underlying cache\n manager. Usually, this disables the ability to create additional caches on-the-fly.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine",
      "name": "spring.cache.caffeine.spec",
      "description": "The spec to use to create caches. See CaffeineSpec for more details on the spec\n format.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase",
      "name": "spring.cache.couchbase.expiration",
      "description": "Entry expiration. By default the entries never expire. Note that this value is\n ultimately converted to seconds.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache",
      "name": "spring.cache.ehcache.config",
      "description": "The location of the configuration file to use to initialize EhCache.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan",
      "name": "spring.cache.infinispan.config",
      "description": "The location of the configuration file to use to initialize Infinispan.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache",
      "name": "spring.cache.jcache.config",
      "description": "The location of the configuration file to use to initialize the cache manager.\n The configuration file is dependent of the underlying cache implementation.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache",
      "name": "spring.cache.jcache.provider",
      "description": "Fully qualified name of the CachingProvider implementation to use to retrieve\n the JSR-107 compliant cache manager. Needed only if more than one JSR-107\n implementation is available on the classpath.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis",
      "defaultValue": true,
      "name": "spring.cache.redis.cache-null-values",
      "description": "Allow caching null values.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis",
      "name": "spring.cache.redis.key-prefix",
      "description": "Key prefix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis",
      "name": "spring.cache.redis.time-to-live",
      "description": "Entry expiration. By default the entries never expire.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis",
      "defaultValue": true,
      "name": "spring.cache.redis.use-key-prefix",
      "description": "Whether to use the key prefix when writing to Redis.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.type",
      "description": "Cache type. By default, auto-detected according to the environment.",
      "type": "org.springframework.boot.autoconfigure.cache.CacheType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "name": "spring.couchbase.bootstrap-hosts",
      "description": "Couchbase nodes (host or IP address) to bootstrap from.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": "default",
      "name": "spring.couchbase.bucket.name",
      "description": "Name of the bucket to connect to.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": "",
      "name": "spring.couchbase.bucket.password",
      "description": "Password of the bucket.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1,
      "name": "spring.couchbase.env.endpoints.key-value",
      "description": "Number of sockets per node against the key\/value service.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1,
      "name": "spring.couchbase.env.endpoints.query",
      "description": "Number of sockets per node against the query (N1QL) service.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1,
      "name": "spring.couchbase.env.endpoints.view",
      "description": "Number of sockets per node against the view service.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl",
      "name": "spring.couchbase.env.ssl.enabled",
      "description": "Whether to enable SSL support. Enabled automatically if a \"keyStore\" is\n provided unless specified otherwise.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl",
      "name": "spring.couchbase.env.ssl.key-store",
      "description": "Path to the JVM key store that holds the certificates.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl",
      "name": "spring.couchbase.env.ssl.key-store-password",
      "description": "Password used to access the key store.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "5000ms",
      "name": "spring.couchbase.env.timeouts.connect",
      "description": "Bucket connections timeouts.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "2500ms",
      "name": "spring.couchbase.env.timeouts.key-value",
      "description": "Blocking operations performed on a specific key timeout.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "7500ms",
      "name": "spring.couchbase.env.timeouts.query",
      "description": "N1QL query operations timeout.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "1000ms",
      "name": "spring.couchbase.env.timeouts.socket-connect",
      "description": "Socket connect connections timeout.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "7500ms",
      "name": "spring.couchbase.env.timeouts.view",
      "description": "Regular and geospatial view operations timeout.",
      "type": "java.time.Duration"
    },
    {
      "defaultValue": true,
      "name": "spring.dao.exceptiontranslation.enabled",
      "description": "Whether to enable the PersistenceExceptionTranslationPostProcessor.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.cluster-name",
      "description": "Name of the Cassandra cluster.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "none",
      "name": "spring.data.cassandra.compression",
      "description": "Compression supported by the Cassandra binary protocol.",
      "type": "com.datastax.driver.core.ProtocolOptions$Compression"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.connect-timeout",
      "description": "Socket option: connection time out.",
      "type": "java.time.Duration"
    },
    {
      "deprecated": true,
      "name": "spring.data.cassandra.connect-timeout-millis",
      "description": "Socket option: connection time out.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "replacement": "spring.data.cassandra.connect-timeout"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.consistency-level",
      "description": "Queries consistency level.",
      "type": "com.datastax.driver.core.ConsistencyLevel"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": [
        "localhost"
      ],
      "name": "spring.data.cassandra.contact-points",
      "description": "Cluster node addresses.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.fetch-size",
      "description": "Queries default fetch size.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.keyspace-name",
      "description": "Keyspace name to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.load-balancing-policy",
      "description": "Class name of the load balancing policy.",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.LoadBalancingPolicy>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.password",
      "description": "Login password of the server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool",
      "defaultValue": "30s",
      "name": "spring.data.cassandra.pool.heartbeat-interval",
      "description": "Heartbeat interval after which a message is sent on an idle connection to make\n sure it's still alive. If a duration suffix is not specified, seconds will be\n used.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool",
      "defaultValue": "120s",
      "name": "spring.data.cassandra.pool.idle-timeout",
      "description": "Idle timeout before an idle connection is removed. If a duration suffix is not\n specified, seconds will be used.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool",
      "defaultValue": 256,
      "name": "spring.data.cassandra.pool.max-queue-size",
      "description": "Maximum number of requests that get queued if no connection is available.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool",
      "defaultValue": "5000ms",
      "name": "spring.data.cassandra.pool.pool-timeout",
      "description": "Pool timeout when trying to acquire a connection from a host's pool.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.port",
      "description": "Port of the Cassandra server.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.read-timeout",
      "description": "Socket option: read time out.",
      "type": "java.time.Duration"
    },
    {
      "deprecated": true,
      "name": "spring.data.cassandra.read-timeout-millis",
      "description": "Socket option: read time out.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "replacement": "spring.data.cassandra.read-timeout"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.reconnection-policy",
      "description": "Reconnection policy class.",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.ReconnectionPolicy>"
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "spring.data.cassandra.repositories.enabled",
      "description": "Whether to enable Cassandra repositories.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.data.cassandra.repositories.type"
      }
    },
    {
      "defaultValue": "auto",
      "name": "spring.data.cassandra.repositories.type",
      "description": "Type of Cassandra repositories to enable.",
      "type": "org.springframework.boot.autoconfigure.data.RepositoryType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.retry-policy",
      "description": "Class name of the retry policy.",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.RetryPolicy>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "none",
      "name": "spring.data.cassandra.schema-action",
      "description": "Schema action to take at startup.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.serial-consistency-level",
      "description": "Queries serial consistency level.",
      "type": "com.datastax.driver.core.ConsistencyLevel"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": false,
      "name": "spring.data.cassandra.ssl",
      "description": "Enable SSL support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.username",
      "description": "Login user of the server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "defaultValue": false,
      "name": "spring.data.couchbase.auto-index",
      "description": "Automatically create views and indexes. Use the meta-data provided by\n \"@ViewIndexed\", \"@N1qlPrimaryIndexed\" and \"@N1qlSecondaryIndexed\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "defaultValue": "read-your-own-writes",
      "name": "spring.data.couchbase.consistency",
      "description": "Consistency to apply by default on generated queries.",
      "type": "org.springframework.data.couchbase.core.query.Consistency"
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "spring.data.couchbase.repositories.enabled",
      "description": "Whether to enable Couchbase repositories.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.data.couchbase.repositories.type"
      }
    },
    {
      "defaultValue": "auto",
      "name": "spring.data.couchbase.repositories.type",
      "description": "Type of Couchbase repositories to enable.",
      "type": "org.springframework.boot.autoconfigure.data.RepositoryType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "defaultValue": "elasticsearch",
      "name": "spring.data.elasticsearch.cluster-name",
      "description": "Elasticsearch cluster name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "name": "spring.data.elasticsearch.cluster-nodes",
      "description": "Comma-separated list of cluster node addresses.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "name": "spring.data.elasticsearch.properties",
      "description": "Additional properties used to configure the client.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "defaultValue": true,
      "name": "spring.data.elasticsearch.repositories.enabled",
      "description": "Whether to enable Elasticsearch repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.data.jpa.repositories.enabled",
      "description": "Whether to enable JPA repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.data.ldap.repositories.enabled",
      "description": "Whether to enable LDAP repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.authentication-database",
      "description": "Authentication database name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.database",
      "description": "Database name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.field-naming-strategy",
      "description": "Fully qualified name of the FieldNamingStrategy to use.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.grid-fs-database",
      "description": "GridFS database name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.host",
      "description": "Mongo server host. Cannot be set with URI.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.password",
      "description": "Login password of the mongo server. Cannot be set with URI.",
      "type": "java.lang.Character[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.port",
      "description": "Mongo server port. Cannot be set with URI.",
      "type": "java.lang.Integer"
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "spring.data.mongodb.repositories.enabled",
      "description": "Whether to enable Mongo repositories.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.data.mongodb.repositories.type"
      }
    },
    {
      "defaultValue": "auto",
      "name": "spring.data.mongodb.repositories.type",
      "description": "Type of Mongo repositories to enable.",
      "type": "org.springframework.boot.autoconfigure.data.RepositoryType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "defaultValue": "mongodb:\/\/localhost\/test",
      "name": "spring.data.mongodb.uri",
      "description": "Mongo database URI. Cannot be set with host, port and credentials.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.username",
      "description": "Login user of the mongo server. Cannot be set with URI.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "defaultValue": "none",
      "name": "spring.data.neo4j.auto-index",
      "description": "Auto index mode.",
      "type": "org.neo4j.ogm.config.AutoIndexMode"
    },
    {
      "deprecated": true,
      "name": "spring.data.neo4j.compiler",
      "description": "Compiler to use.",
      "type": "java.lang.String",
      "deprecation": {
        "reason": "Not supported anymore as of Neo4j 3.",
        "level": "error"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded",
      "defaultValue": true,
      "name": "spring.data.neo4j.embedded.enabled",
      "description": "Whether to enable embedded mode if the embedded driver is available.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "defaultValue": true,
      "name": "spring.data.neo4j.open-in-view",
      "description": "Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the\n entire processing of the request.\",",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j.password",
      "description": "Login password of the server.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.data.neo4j.repositories.enabled",
      "description": "Whether to enable Neo4j repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j.uri",
      "description": "URI used by the driver. Auto-detected by default.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j.username",
      "description": "Login user of the server.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.data.redis.repositories.enabled",
      "description": "Whether to enable Redis repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.base-path",
      "description": "Base path to be used by Spring Data REST to expose repository resources.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.default-media-type",
      "description": "Content type to use as a default when none is specified.",
      "type": "org.springframework.http.MediaType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.default-page-size",
      "description": "Default size of pages.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "defaultValue": "default",
      "name": "spring.data.rest.detection-strategy",
      "description": "Strategy to use to determine which repositories get exposed.",
      "type": "org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy$RepositoryDetectionStrategies"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.enable-enum-translation",
      "description": "Whether to enable enum value translation through the Spring Data REST default\n resource bundle.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.limit-param-name",
      "description": "Name of the URL query string parameter that indicates how many results to return at\n once.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.max-page-size",
      "description": "Maximum size of pages.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.page-param-name",
      "description": "Name of the URL query string parameter that indicates what page to return.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.return-body-on-create",
      "description": "Whether to return a response body after creating an entity.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.return-body-on-update",
      "description": "Whether to return a response body after updating an entity.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.sort-param-name",
      "description": "Name of the URL query string parameter that indicates what direction to sort\n results.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "defaultValue": "http:\/\/127.0.0.1:8983\/solr",
      "name": "spring.data.solr.host",
      "description": "Solr host. Ignored if \"zk-host\" is set.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.data.solr.repositories.enabled",
      "description": "Whether to enable Solr repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "name": "spring.data.solr.zk-host",
      "description": "ZooKeeper host address in the form HOST:PORT.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": 20,
      "name": "spring.data.web.pageable.default-page-size",
      "description": "Default page size.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": 2000,
      "name": "spring.data.web.pageable.max-page-size",
      "description": "Maximum page size to be accepted.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": false,
      "name": "spring.data.web.pageable.one-indexed-parameters",
      "description": "Whether to expose and assume 1-based page number indexes. Defaults to \"false\",\n meaning a page number of 0 in the request equals the first page.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": "page",
      "name": "spring.data.web.pageable.page-parameter",
      "description": "Page index parameter name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": "",
      "name": "spring.data.web.pageable.prefix",
      "description": "General prefix to be prepended to the page number and page size parameters.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": "_",
      "name": "spring.data.web.pageable.qualifier-delimiter",
      "description": "Delimiter to be used between the qualifier and the actual page number and size\n properties.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": "size",
      "name": "spring.data.web.pageable.size-parameter",
      "description": "Page size parameter name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Sort",
      "defaultValue": "sort",
      "name": "spring.data.web.sort.sort-parameter",
      "description": "Sort parameter name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": false,
      "name": "spring.datasource.continue-on-error",
      "description": "Whether to stop if an error occurs while initializing the database.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.data",
      "description": "Data (DML) script resource references.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.data-password",
      "description": "Password of the database to execute DML scripts (if different).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.data-username",
      "description": "Username of the database to execute DML scripts (if different).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.abandoned-usage-tracking",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.cache-state",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.connection-init-sqls",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-auto-commit",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-catalog",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-query-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-read-only",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-transaction-isolation",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.disconnection-sql-codes",
      "type": "java.util.Set<java.lang.String>"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.driver",
      "type": "java.sql.Driver"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.driver-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.enable-auto-commit-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.eviction-policy-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.fast-fail-validation",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.initial-size",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.jmx-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.lifo",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.log-abandoned",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.log-expired-connections",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.login-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-conn-lifetime-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-open-prepared-statements",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-total",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-wait-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.min-evictable-idle-time-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.min-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.num-tests-per-eviction-run",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.pool-prepared-statements",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.remove-abandoned-on-borrow",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.remove-abandoned-on-maintenance",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.remove-abandoned-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.rollback-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.soft-min-evictable-idle-time-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.test-on-borrow",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.test-on-create",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.test-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.test-while-idle",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.time-between-eviction-runs-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.url",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.username",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.validation-query",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.validation-query-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.driver-class-name",
      "description": "Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": false,
      "name": "spring.datasource.generate-unique-name",
      "description": "Whether to generate a random datasource name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.allow-pool-suspension",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.auto-commit",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.catalog",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.connection-init-sql",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.connection-test-query",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.connection-timeout",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.data-source-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.data-source-j-n-d-i",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.data-source-properties",
      "type": "java.util.Properties"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.driver-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.health-check-properties",
      "type": "java.util.Properties"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.health-check-registry",
      "type": "java.lang.Object"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.idle-timeout",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "name": "spring.datasource.hikari.initialization-fail-fast",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.initialization-fail-timeout",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.isolate-internal-queries",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.jdbc-url",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "name": "spring.datasource.hikari.jdbc4-connection-test",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.leak-detection-threshold",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.login-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.max-lifetime",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.maximum-pool-size",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.metric-registry",
      "type": "java.lang.Object"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.metrics-tracker-factory",
      "type": "com.zaxxer.hikari.metrics.MetricsTrackerFactory"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.minimum-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.pool-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.read-only",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.register-mbeans",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.scheduled-executor",
      "type": "java.util.concurrent.ScheduledExecutorService"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "name": "spring.datasource.hikari.scheduled-executor-service",
      "type": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "deprecation": {}
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.schema",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.transaction-isolation",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.username",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.validation-timeout",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "embedded",
      "name": "spring.datasource.initialization-mode",
      "description": "Initialize the datasource with available DDL and DML scripts.",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode"
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "spring.datasource.initialize",
      "deprecation": {
        "level": "error",
        "replacement": "spring.datasource.initialization-mode"
      }
    },
    {
      "defaultValue": false,
      "name": "spring.datasource.jmx-enabled",
      "description": "Whether to enable JMX support (if provided by the underlying pool).",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.jndi-name",
      "description": "JNDI location of the datasource. Class, url, username & password are ignored when\n set.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.name",
      "description": "Name of the datasource. Default to \"testdb\" when using an embedded database.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.password",
      "description": "Login password of the database.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "all",
      "name": "spring.datasource.platform",
      "description": "Platform to use in the DDL or DML scripts (such as schema-${platform}.sql or\n data-${platform}.sql).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.schema",
      "description": "Schema (DDL) script resource references.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.schema-password",
      "description": "Password of the database to execute DDL scripts (if different).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.schema-username",
      "description": "Username of the database to execute DDL scripts (if different).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": ";",
      "name": "spring.datasource.separator",
      "description": "Statement separator in SQL initialization scripts.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.sql-script-encoding",
      "description": "SQL scripts encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.abandon-when-percentage-full",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.alternate-username-allowed",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.commit-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.connection-properties",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.data-source",
      "type": "java.lang.Object"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.data-source-j-n-d-i",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.db-properties",
      "type": "java.util.Properties"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.default-auto-commit",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.default-catalog",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.default-read-only",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.default-transaction-isolation",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.driver-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.fair-queue",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.ignore-exception-on-pre-load",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.init-s-q-l",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.initial-size",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.jdbc-interceptors",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.jmx-enabled",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.log-abandoned",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.log-validation-errors",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.login-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.max-active",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.max-age",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.max-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.max-wait",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.min-evictable-idle-time-millis",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.min-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.num-tests-per-eviction-run",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.propagate-interrupt-state",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.remove-abandoned",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.remove-abandoned-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.rollback-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.suspect-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.test-on-borrow",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.test-on-connect",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.test-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.test-while-idle",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.time-between-eviction-runs-millis",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.url",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.use-disposable-connection-facade",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.use-equals",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.use-lock",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.use-statement-facade",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.username",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.validation-interval",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.validation-query",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.validation-query-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.validator-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.type",
      "description": "Fully qualified name of the connection pool implementation to use. By default, it\n is auto-detected from the classpath.",
      "type": "java.lang.Class<? extends javax.sql.DataSource>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.url",
      "description": "JDBC URL of the database.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.username",
      "description": "Login username of the database.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa",
      "name": "spring.datasource.xa.data-source-class-name",
      "description": "XA datasource fully qualified name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa",
      "name": "spring.datasource.xa.properties",
      "description": "Properties to pass to the XA data source.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": "3s",
      "name": "spring.elasticsearch.jest.connection-timeout",
      "description": "Connection timeout.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": true,
      "name": "spring.elasticsearch.jest.multi-threaded",
      "description": "Whether to enable connection requests from multiple execution threads.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "name": "spring.elasticsearch.jest.password",
      "description": "Login password.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy",
      "name": "spring.elasticsearch.jest.proxy.host",
      "description": "Proxy host the HTTP client should use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy",
      "name": "spring.elasticsearch.jest.proxy.port",
      "description": "Proxy port the HTTP client should use.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": "3s",
      "name": "spring.elasticsearch.jest.read-timeout",
      "description": "Read timeout.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": [
        "http:\/\/localhost:9200"
      ],
      "name": "spring.elasticsearch.jest.uris",
      "description": "Comma-separated list of the Elasticsearch instances to use.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "name": "spring.elasticsearch.jest.username",
      "description": "Login username.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.baseline-description",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.baseline-on-migrate",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.baseline-version",
      "type": "org.flywaydb.core.api.MigrationVersion"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": true,
      "name": "spring.flyway.check-location",
      "description": "Whether to check that migration scripts location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.clean-disabled",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.clean-on-validation-error",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.dry-run-output",
      "type": "java.io.OutputStream"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": true,
      "name": "spring.flyway.enabled",
      "description": "Whether to enable flyway.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.encoding",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.error-handlers",
      "type": "org.flywaydb.core.api.errorhandler.ErrorHandler[]"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.group",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.ignore-future-migrations",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.ignore-missing-migrations",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "spring.flyway.init-sqls",
      "description": "SQL statements to execute to initialize a connection immediately after obtaining\n it.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.installed-by",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.locations",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "spring.flyway.locations",
      "description": "The locations of migrations scripts. Can contain the special \"{vendor}\" placeholder\n to use vendor-specific locations.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.mixed",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.out-of-order",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "spring.flyway.password",
      "description": "JDBC password to use if you want Flyway to create its own DataSource.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.placeholder-prefix",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.placeholder-replacement",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.placeholder-suffix",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.placeholders",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.repeatable-sql-migration-prefix",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.schemas",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.skip-default-callbacks",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.skip-default-resolvers",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.sql-migration-prefix",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.sql-migration-separator",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "name": "spring.flyway.sql-migration-suffix",
      "type": "java.lang.String",
      "deprecation": {
        "level": "warning",
        "replacement": "spring.flyway.sql-migration-suffixes"
      }
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.sql-migration-suffixes",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.table",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.target",
      "type": "org.flywaydb.core.api.MigrationVersion"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.undo-sql-migration-prefix",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "spring.flyway.url",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "spring.flyway.user",
      "description": "Login user of the database to migrate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "spring.flyway.validate-on-migrate",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.allow-request-override",
      "description": "Whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.allow-session-override",
      "description": "Whether HttpSession attributes are allowed to override (hide) controller generated\n model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.cache",
      "description": "Whether to enable template caching.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "UTF-8",
      "name": "spring.freemarker.charset",
      "description": "Template encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true,
      "name": "spring.freemarker.check-template-location",
      "description": "Whether to check that the templates location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "text\/html",
      "name": "spring.freemarker.content-type",
      "description": "Content-Type value.",
      "type": "org.springframework.util.MimeType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true,
      "name": "spring.freemarker.enabled",
      "description": "Whether to enable MVC view resolution for this technology.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.expose-request-attributes",
      "description": "Whether all request attributes should be added to the model prior to merging with\n the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.expose-session-attributes",
      "description": "Whether all HttpSession attributes should be added to the model prior to merging\n with the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true,
      "name": "spring.freemarker.expose-spring-macro-helpers",
      "description": "Whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true,
      "name": "spring.freemarker.prefer-file-system-access",
      "description": "Whether to prefer file system access for template loading. File system access\n enables hot detection of template changes.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "",
      "name": "spring.freemarker.prefix",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "name": "spring.freemarker.request-context-attribute",
      "description": "Name of the RequestContext attribute for all views.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "name": "spring.freemarker.settings",
      "description": "Well-known FreeMarker keys which are passed to FreeMarker's Configuration.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": ".ftl",
      "name": "spring.freemarker.suffix",
      "description": "Suffix that gets appended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": [
        "classpath:\/templates\/"
      ],
      "name": "spring.freemarker.template-loader-path",
      "description": "Comma-separated list of template paths.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "name": "spring.freemarker.view-names",
      "description": "White list of view names that can be resolved.",
      "type": "java.lang.String[]"
    },
    {
      "deprecated": true,
      "name": "spring.git.properties",
      "description": "Resource reference to a generated git info properties file.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.info.git.location"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.allow-request-override",
      "description": "Whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.allow-session-override",
      "description": "Whether HttpSession attributes are allowed to override (hide) controller generated\n model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.cache",
      "description": "Whether to enable template caching.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "UTF-8",
      "name": "spring.groovy.template.charset",
      "description": "Template encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true,
      "name": "spring.groovy.template.check-template-location",
      "description": "Whether to check that the templates location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.auto-escape",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.auto-indent",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.auto-indent-string",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.auto-new-line",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.base-template-class",
      "type": "java.lang.Class<? extends groovy.text.markup.BaseTemplate>"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.cache-templates",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.declaration-encoding",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.expand-empty-elements",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.locale",
      "type": "java.util.Locale"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.new-line-string",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.resource-loader-path",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.use-double-quotes",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "text\/html",
      "name": "spring.groovy.template.content-type",
      "description": "Content-Type value.",
      "type": "org.springframework.util.MimeType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true,
      "name": "spring.groovy.template.enabled",
      "description": "Whether to enable MVC view resolution for this technology.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.expose-request-attributes",
      "description": "Whether all request attributes should be added to the model prior to merging with\n the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.expose-session-attributes",
      "description": "Whether all HttpSession attributes should be added to the model prior to merging\n with the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true,
      "name": "spring.groovy.template.expose-spring-macro-helpers",
      "description": "Whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "",
      "name": "spring.groovy.template.prefix",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "name": "spring.groovy.template.request-context-attribute",
      "description": "Name of the RequestContext attribute for all views.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "classpath:\/templates\/",
      "name": "spring.groovy.template.resource-loader-path",
      "description": "Template path.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": ".tpl",
      "name": "spring.groovy.template.suffix",
      "description": "Suffix that gets appended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "name": "spring.groovy.template.view-names",
      "description": "White list of view names that can be resolved.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.date-format",
      "description": "Format to use when serializing Date objects.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.disable-html-escaping",
      "description": "Whether to disable the escaping of HTML characters such as '<', '>', etc.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.disable-inner-class-serialization",
      "description": "Whether to exclude inner classes during serialization.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.enable-complex-map-key-serialization",
      "description": "Whether to enable serialization of complex map keys (i.e. non-primitives).",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.exclude-fields-without-expose-annotation",
      "description": "Whether to exclude all fields from consideration for serialization or\n deserialization that do not have the \"Expose\" annotation.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.field-naming-policy",
      "description": "Naming policy that should be applied to an object's field during serialization and\n deserialization.",
      "type": "com.google.gson.FieldNamingPolicy"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.generate-non-executable-json",
      "description": "Whether to generate non executable JSON by prefixing the output with some special\n text.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.lenient",
      "description": "Whether to be lenient about parsing JSON that doesn't conform to RFC 4627.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.long-serialization-policy",
      "description": "Serialization policy for Long and long types.",
      "type": "com.google.gson.LongSerializationPolicy"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.pretty-printing",
      "description": "Whether to output serialized JSON that fits in a page for pretty printing.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "name": "spring.gson.serialize-nulls",
      "description": "Whether to serialize null fields.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": false,
      "name": "spring.h2.console.enabled",
      "description": "Whether to enable the console.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": "\/h2-console",
      "name": "spring.h2.console.path",
      "description": "Path at which the console is available.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false,
      "name": "spring.h2.console.settings.trace",
      "description": "Whether to enable trace output.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false,
      "name": "spring.h2.console.settings.web-allow-others",
      "description": "Whether to enable remote access.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "defaultValue": true,
      "name": "spring.hateoas.use-hal-as-default-json-media-type",
      "description": "Whether application\/hal+json responses should be sent to requests that accept\n application\/json.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties",
      "name": "spring.hazelcast.config",
      "description": "The location of the configuration file to use to initialize Hazelcast.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "name": "spring.http.converters.preferred-json-mapper",
      "description": "Preferred JSON mapper to use for HTTP message conversion. By default, auto-detected according to the environment.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties",
      "defaultValue": "UTF-8",
      "name": "spring.http.encoding.charset",
      "description": "Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not\n set explicitly.",
      "type": "java.nio.charset.Charset"
    },
    {
      "defaultValue": true,
      "name": "spring.http.encoding.enabled",
      "description": "Whether to enable http encoding support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties",
      "name": "spring.http.encoding.force",
      "description": "Whether to force the encoding to the configured charset on HTTP requests and\n responses.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties",
      "name": "spring.http.encoding.force-request",
      "description": "Whether to force the encoding to the configured charset on HTTP requests. Defaults\n to true when \"force\" has not been specified.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties",
      "name": "spring.http.encoding.force-response",
      "description": "Whether to force the encoding to the configured charset on HTTP responses.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties",
      "name": "spring.http.encoding.mapping",
      "description": "Locale in which to encode mapping.",
      "type": "java.util.Map<java.util.Locale,java.nio.charset.Charset>"
    },
    {
      "defaultValue": true,
      "deprecated": true,
      "name": "spring.http.multipart.enabled",
      "description": "Whether to enable support of multipart uploads.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.servlet.multipart.enabled"
      }
    },
    {
      "defaultValue": "0",
      "deprecated": true,
      "name": "spring.http.multipart.file-size-threshold",
      "description": "Threshold after which files will be written to disk. Values can use the suffixes\n \"MB\" or \"KB\" to indicate megabytes or kilobytes respectively.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.servlet.multipart.file-size-threshold"
      }
    },
    {
      "deprecated": true,
      "name": "spring.http.multipart.location",
      "description": "Intermediate location of uploaded files.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.servlet.multipart.location"
      }
    },
    {
      "defaultValue": "1MB",
      "deprecated": true,
      "name": "spring.http.multipart.max-file-size",
      "description": "Max file size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or\n kilobytes respectively.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.servlet.multipart.max-file-size"
      }
    },
    {
      "defaultValue": "10MB",
      "deprecated": true,
      "name": "spring.http.multipart.max-request-size",
      "description": "Max request size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or\n kilobytes respectively.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.servlet.multipart.max-request-size"
      }
    },
    {
      "defaultValue": false,
      "deprecated": true,
      "name": "spring.http.multipart.resolve-lazily",
      "description": "Whether to resolve the multipart request lazily at the time of file or parameter\n access.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.servlet.multipart.resolve-lazily"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties",
      "name": "spring.influx.password",
      "description": "Login password.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties",
      "name": "spring.influx.url",
      "description": "URL of the InfluxDB instance to which to connect.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties",
      "name": "spring.influx.user",
      "description": "Login user.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build",
      "defaultValue": "classpath:META-INF\/build-info.properties",
      "name": "spring.info.build.location",
      "description": "Location of the generated build-info.properties file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git",
      "defaultValue": "classpath:git.properties",
      "name": "spring.info.git.location",
      "description": "Location of the generated git.properties file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.integration.IntegrationProperties$Jdbc",
      "defaultValue": "embedded",
      "name": "spring.integration.jdbc.initialize-schema",
      "description": "Database schema initialization mode.",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.integration.IntegrationProperties$Jdbc",
      "defaultValue": "classpath:org\/springframework\/integration\/jdbc\/schema-@@platform@@.sql",
      "name": "spring.integration.jdbc.schema",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.date-format",
      "description": "Date format string or a fully-qualified date format class name. For instance,\n `yyyy-MM-dd HH:mm:ss`.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.default-property-inclusion",
      "description": "Controls the inclusion of properties during serialization. Configured with one of\n the values in Jackson's JsonInclude.Include enumeration.",
      "type": "com.fasterxml.jackson.annotation.JsonInclude$Include"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.deserialization",
      "description": "Jackson on\/off features that affect the way Java objects are deserialized.",
      "type": "java.util.Map<com.fasterxml.jackson.databind.DeserializationFeature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.generator",
      "description": "Jackson on\/off features for generators.",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonGenerator.Feature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.joda-date-time-format",
      "description": "Joda date time format string. If not configured, \"date-format\" is used as a\n fallback if it is configured with a format string.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.locale",
      "description": "Locale used for formatting.",
      "type": "java.util.Locale"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.mapper",
      "description": "Jackson general purpose on\/off features.",
      "type": "java.util.Map<com.fasterxml.jackson.databind.MapperFeature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.parser",
      "description": "Jackson on\/off features for parsers.",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonParser.Feature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.property-naming-strategy",
      "description": "One of the constants on Jackson's PropertyNamingStrategy. Can also be a\n fully-qualified class name of a PropertyNamingStrategy subclass.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.serialization",
      "description": "Jackson on\/off features that affect the way Java objects are serialized.",
      "type": "java.util.Map<com.fasterxml.jackson.databind.SerializationFeature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.time-zone",
      "description": "Time zone used when formatting dates. For instance, \"America\/Los_Angeles\" or\n \"GMT+10\".",
      "type": "java.util.TimeZone"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties$Template",
      "defaultValue": -1,
      "name": "spring.jdbc.template.fetch-size",
      "description": "Number of rows that should be fetched from the database when more rows are\n needed. Use -1 to use the JDBC driver's default configuration.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties$Template",
      "defaultValue": -1,
      "name": "spring.jdbc.template.max-rows",
      "description": "Maximum number of rows. Use -1 to use the JDBC driver's default configuration.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties$Template",
      "name": "spring.jdbc.template.query-timeout",
      "description": "Query timeout. Default is to use the JDBC driver's default configuration. If a\n duration suffix is not specified, seconds will be used.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey.application-path",
      "description": "Path that serves as the base URI for the application. If specified, overrides the\n value of \"@ApplicationPath\".",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter",
      "defaultValue": 0,
      "name": "spring.jersey.filter.order",
      "description": "Jersey filter chain order.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey.init",
      "description": "Init parameters to pass to Jersey through the servlet or filter.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet",
      "defaultValue": -1,
      "name": "spring.jersey.servlet.load-on-startup",
      "description": "Load on startup priority of the Jersey servlet.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "defaultValue": "servlet",
      "name": "spring.jersey.type",
      "description": "Jersey integration type.",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Type"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "name": "spring.jms.jndi-name",
      "description": "Connection factory JNDI name. When set, takes precedence to others connection\n factory auto-configurations.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "name": "spring.jms.listener.acknowledge-mode",
      "description": "Acknowledge mode of the container. By default, the listener is transacted with\n automatic acknowledgment.",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$AcknowledgeMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "defaultValue": true,
      "name": "spring.jms.listener.auto-startup",
      "description": "Start the container automatically on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "name": "spring.jms.listener.concurrency",
      "description": "Minimum number of concurrent consumers.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "name": "spring.jms.listener.max-concurrency",
      "description": "Maximum number of concurrent consumers.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "defaultValue": false,
      "name": "spring.jms.pub-sub-domain",
      "description": "Whether the default destination type is topic.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.default-destination",
      "description": "Default destination to use on send and receive operations that do not have a\n destination parameter.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.delivery-delay",
      "description": "Delivery delay to use for send calls.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.delivery-mode",
      "description": "Delivery mode. Enables QoS (Quality of Service) when set.",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$DeliveryMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.priority",
      "description": "Priority of a message when sending. Enables QoS (Quality of Service) when set.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.qos-enabled",
      "description": "Whether to enable explicit QoS (Quality of Service) when sending a message.\n When enabled, the delivery mode, priority and time-to-live properties will be\n used when sending a message. QoS is automatically enabled when at least one of\n those settings is customized.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.receive-timeout",
      "description": "Timeout to use for receive calls.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.time-to-live",
      "description": "Time-to-live of a message when sending. Enables QoS (Quality of Service) when\n set.",
      "type": "java.time.Duration"
    },
    {
      "name": "spring.jmx.default-domain",
      "description": "JMX domain name.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.jmx.enabled",
      "description": "Expose management beans to the JMX domain.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": "mbeanServer",
      "name": "spring.jmx.server",
      "description": "MBeanServer bean name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties",
      "name": "spring.jooq.sql-dialect",
      "description": "SQL dialect to use. Auto-detected by default.",
      "type": "org.jooq.SQLDialect"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa.database",
      "description": "Target database to operate on, auto-detected by default. Can be alternatively set\n using the \"databasePlatform\" property.",
      "type": "org.springframework.orm.jpa.vendor.Database"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa.database-platform",
      "description": "Name of the target database to operate on, auto-detected by default. Can be\n alternatively set using the \"Database\" enum.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false,
      "name": "spring.jpa.generate-ddl",
      "description": "Whether to initialize the schema on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "name": "spring.jpa.hibernate.ddl-auto",
      "description": "DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\"\n property. Defaults to \"create-drop\" when using an embedded database and no\n schema manager was detected. Otherwise, defaults to \"none\".",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming",
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "description": "Fully qualified name of the implicit naming strategy.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming",
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "description": "Fully qualified name of the physical naming strategy.",
      "type": "java.lang.String"
    },
    {
      "deprecated": true,
      "name": "spring.jpa.hibernate.naming.strategy",
      "description": "Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate\n 5.",
      "type": "java.lang.String",
      "deprecation": {
        "reason": "Auto-configuration for Hibernate 4 is no longer provided.",
        "level": "error"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "name": "spring.jpa.hibernate.use-new-id-generator-mappings",
      "description": "Whether to use Hibernate's newer IdentifierGenerator for AUTO, TABLE and\n SEQUENCE. This is actually a shortcut for the\n \"hibernate.id.new_generator_mappings\" property. When not specified will default\n to \"true\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa.mapping-resources",
      "description": "Mapping resources (equivalent to \"mapping-file\" entries in persistence.xml).",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": true,
      "name": "spring.jpa.open-in-view",
      "description": "Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the\n thread for the entire processing of the request.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa.properties",
      "description": "Additional native properties to set on the JPA provider.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false,
      "name": "spring.jpa.show-sql",
      "description": "Whether to enable logging of SQL statements.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.allow-multiple-lrc",
      "description": "Whether to allow multiple LRC resources to be enlisted into the same transaction.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.asynchronous2-pc",
      "description": "Whether to enable asynchronously execution of two phase commit.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 1,
      "deprecated": true,
      "name": "spring.jta.bitronix.properties.background-recovery-interval",
      "description": "Interval in minutes at which to run the recovery process in the background.",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.jta.bitronix.properties.background-recovery-interval-seconds"
      }
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60,
      "name": "spring.jta.bitronix.properties.background-recovery-interval-seconds",
      "description": "Interval in seconds at which to run the recovery process in the background.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true,
      "name": "spring.jta.bitronix.properties.current-node-only-recovery",
      "description": "Whether to recover only the current node. Should be enabled if you run multiple instances of the transaction manager on the same JMS and JDBC resources.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.debug-zero-resource-transaction",
      "description": "Whether to log the creation and commit call stacks of transactions executed without a single enlisted resource.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60,
      "name": "spring.jta.bitronix.properties.default-transaction-timeout",
      "description": "Default transaction timeout, in seconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.disable-jmx",
      "description": "Whether to enable JMX support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.exception-analyzer",
      "description": "Set the fully qualified name of the exception analyzer implementation to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.filter-log-status",
      "description": "Whether to enable filtering of logs so that only mandatory logs are written.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true,
      "name": "spring.jta.bitronix.properties.force-batching-enabled",
      "description": "Whether disk forces are batched.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true,
      "name": "spring.jta.bitronix.properties.forced-write-enabled",
      "description": "Whether logs are forced to disk.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60,
      "name": "spring.jta.bitronix.properties.graceful-shutdown-interval",
      "description": "Maximum amount of seconds the TM waits for transactions to get done before aborting them at shutdown time.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name",
      "description": "JNDI name of the TransactionSynchronizationRegistry.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.jndi-user-transaction-name",
      "description": "JNDI name of the UserTransaction.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "disk",
      "name": "spring.jta.bitronix.properties.journal",
      "description": "Name of the journal. Can be 'disk', 'null', or a class name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm1.tlog",
      "name": "spring.jta.bitronix.properties.log-part1-filename",
      "description": "Name of the first fragment of the journal.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm2.tlog",
      "name": "spring.jta.bitronix.properties.log-part2-filename",
      "description": "Name of the second fragment of the journal.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 2,
      "name": "spring.jta.bitronix.properties.max-log-size-in-mb",
      "description": "Maximum size in megabytes of the journal fragments.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.resource-configuration-filename",
      "description": "ResourceLoader configuration file name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.server-id",
      "description": "ASCII ID that must uniquely identify this TM instance. Defaults to the machine's IP address.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.skip-corrupted-logs",
      "description": "Skip corrupted transactions log entries. Use only at last resort when all you have to recover is a pair of corrupted files.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true,
      "name": "spring.jta.bitronix.properties.warn-about-zero-resource-transaction",
      "description": "Whether to log a warning for transactions executed without a single enlisted resource.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.jta.enabled",
      "description": "Whether to enable JTA support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties",
      "name": "spring.jta.log-dir",
      "description": "Transaction logs directory.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties",
      "name": "spring.jta.transaction-manager-id",
      "description": "Transaction manager unique identifier.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin",
      "name": "spring.kafka.admin.client-id",
      "description": "ID to pass to the server when making requests. Used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin",
      "defaultValue": false,
      "name": "spring.kafka.admin.fail-fast",
      "description": "Whether to fail fast if the broker is not available on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin",
      "name": "spring.kafka.admin.properties",
      "description": "Additional admin-specific properties used to configure the client.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.admin.ssl.key-password",
      "description": "Password of the private key in the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.admin.ssl.keystore-location",
      "description": "Location of the key store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.admin.ssl.keystore-password",
      "description": "Store password for the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.admin.ssl.truststore-location",
      "description": "Location of the trust store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.admin.ssl.truststore-password",
      "description": "Store password for the trust store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.bootstrap-servers",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.client-id",
      "description": "ID to pass to the server when making requests. Used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.auto-commit-interval",
      "description": "Frequency with which the consumer offsets are auto-committed to Kafka if\n 'enable.auto.commit' is set to true.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.auto-offset-reset",
      "description": "What to do when there is no initial offset in Kafka or if the current offset no\n longer exists on the server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.bootstrap-servers",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.client-id",
      "description": "ID to pass to the server when making requests. Used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.enable-auto-commit",
      "description": "Whether the consumer's offset is periodically committed in the background.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.fetch-max-wait",
      "description": "Maximum amount of time the server blocks before answering the fetch request if\n there isn't sufficient data to immediately satisfy the requirement given by\n \"fetch.min.bytes\".",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.fetch-min-size",
      "description": "Minimum amount of data, in bytes, the server should return for a fetch request.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.group-id",
      "description": "Unique string that identifies the consumer group to which this consumer\n belongs.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.heartbeat-interval",
      "description": "Expected time between heartbeats to the consumer coordinator.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.key-deserializer",
      "description": "Deserializer class for keys.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.max-poll-records",
      "description": "Maximum number of records returned in a single call to poll().",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.properties",
      "description": "Additional consumer-specific properties used to configure the client.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.consumer.ssl.key-password",
      "description": "Password of the private key in the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.consumer.ssl.keystore-location",
      "description": "Location of the key store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.consumer.ssl.keystore-password",
      "description": "Store password for the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.consumer.ssl.truststore-location",
      "description": "Location of the trust store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.consumer.ssl.truststore-password",
      "description": "Store password for the trust store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.value-deserializer",
      "description": "Deserializer class for values.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas",
      "defaultValue": "required",
      "name": "spring.kafka.jaas.control-flag",
      "description": "Control flag for login configuration.",
      "type": "org.springframework.kafka.security.jaas.KafkaJaasLoginModuleInitializer$ControlFlag"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas",
      "defaultValue": false,
      "name": "spring.kafka.jaas.enabled",
      "description": "Whether to enable JAAS configuration.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas",
      "defaultValue": "com.sun.security.auth.module.Krb5LoginModule",
      "name": "spring.kafka.jaas.login-module",
      "description": "Login module.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas",
      "name": "spring.kafka.jaas.options",
      "description": "Additional JAAS options.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.ack-count",
      "description": "Number of records between offset commits when ackMode is \"COUNT\" or\n \"COUNT_TIME\".",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.ack-mode",
      "description": "Listener AckMode. See the spring-kafka documentation.",
      "type": "org.springframework.kafka.listener.AbstractMessageListenerContainer$AckMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.ack-time",
      "description": "Time between offset commits when ackMode is \"TIME\" or \"COUNT_TIME\".",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.client-id",
      "description": "Prefix for the listener's consumer client.id property.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.concurrency",
      "description": "Number of threads to run in the listener containers.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.idle-event-interval",
      "description": "Time between publishing idle consumer events (no data received).",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.log-container-config",
      "description": "Whether to log the container configuration during initialization (INFO level).",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.monitor-interval",
      "description": "Time between checks for non-responsive consumers. If a duration suffix is not\n specified, seconds will be used.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.no-poll-threshold",
      "description": "Multiplier applied to \"pollTimeout\" to determine if a consumer is\n non-responsive.",
      "type": "java.lang.Float"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.poll-timeout",
      "description": "Timeout to use when polling the consumer.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "defaultValue": "single",
      "name": "spring.kafka.listener.type",
      "description": "Listener type.",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener$Type"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.acks",
      "description": "Number of acknowledgments the producer requires the leader to have received\n before considering a request complete.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.batch-size",
      "description": "Number of records to batch before sending.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.bootstrap-servers",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.buffer-memory",
      "description": "Total bytes of memory the producer can use to buffer records waiting to be sent\n to the server.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.client-id",
      "description": "ID to pass to the server when making requests. Used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.compression-type",
      "description": "Compression type for all data generated by the producer.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.key-serializer",
      "description": "Serializer class for keys.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.properties",
      "description": "Additional producer-specific properties used to configure the client.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.retries",
      "description": "When greater than zero, enables retrying of failed sends.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.producer.ssl.key-password",
      "description": "Password of the private key in the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.producer.ssl.keystore-location",
      "description": "Location of the key store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.producer.ssl.keystore-password",
      "description": "Store password for the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.producer.ssl.truststore-location",
      "description": "Location of the trust store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.producer.ssl.truststore-password",
      "description": "Store password for the trust store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.transaction-id-prefix",
      "description": "When non empty, enables transaction support for producer.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.value-serializer",
      "description": "Serializer class for values.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.properties",
      "description": "Additional properties, common to producers and consumers, used to configure the\n client.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.key-password",
      "description": "Password of the private key in the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.keystore-location",
      "description": "Location of the key store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.keystore-password",
      "description": "Store password for the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.truststore-location",
      "description": "Location of the trust store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.truststore-password",
      "description": "Store password for the trust store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Template",
      "name": "spring.kafka.template.default-topic",
      "description": "Default topic to which messages are sent.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "defaultValue": false,
      "name": "spring.ldap.anonymous-read-only",
      "description": "Whether read-only operations should use an anonymous environment.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.base",
      "description": "Base suffix from which all operations should originate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.base-environment",
      "description": "LDAP specification settings.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "name": "spring.ldap.embedded.base-dn",
      "description": "List of base DNs.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential",
      "name": "spring.ldap.embedded.credential.password",
      "description": "Embedded LDAP password.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential",
      "name": "spring.ldap.embedded.credential.username",
      "description": "Embedded LDAP username.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "defaultValue": "classpath:schema.ldif",
      "name": "spring.ldap.embedded.ldif",
      "description": "Schema (LDIF) script resource reference.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "defaultValue": 0,
      "name": "spring.ldap.embedded.port",
      "description": "Embedded LDAP port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation",
      "defaultValue": true,
      "name": "spring.ldap.embedded.validation.enabled",
      "description": "Whether to enable LDAP schema validation.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation",
      "name": "spring.ldap.embedded.validation.schema",
      "description": "Path to the custom schema.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.password",
      "description": "Login password of the server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.urls",
      "description": "LDAP URLs of the server.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.username",
      "description": "Login username of the server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": "classpath:\/db\/changelog\/db.changelog-master.yaml",
      "name": "spring.liquibase.change-log",
      "description": "Change log configuration path.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true,
      "name": "spring.liquibase.check-change-log-location",
      "description": "Whether to check that the change log location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "spring.liquibase.contexts",
      "description": "Comma-separated list of runtime contexts to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "spring.liquibase.default-schema",
      "description": "Default database schema.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": false,
      "name": "spring.liquibase.drop-first",
      "description": "Whether to first drop the database schema.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true,
      "name": "spring.liquibase.enabled",
      "description": "Whether to enable Liquibase support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "spring.liquibase.labels",
      "description": "Comma-separated list of runtime labels to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "spring.liquibase.parameters",
      "description": "Change log parameters.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "spring.liquibase.password",
      "description": "Login password of the database to migrate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "spring.liquibase.rollback-file",
      "description": "File to which rollback SQL is written when an update is performed.",
      "type": "java.io.File"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "spring.liquibase.url",
      "description": "JDBC URL of the database to migrate. If not set, the primary configured data source\n is used.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "spring.liquibase.user",
      "description": "Login user of the database to migrate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "UTF-8",
      "name": "spring.mail.default-encoding",
      "description": "Default MimeMessage encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.host",
      "description": "SMTP server host. For instance, `smtp.example.com`.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.jndi-name",
      "description": "Session JNDI name. When set, takes precedence over other mail settings.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.password",
      "description": "Login password of the SMTP server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.port",
      "description": "SMTP server port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.properties",
      "description": "Additional JavaMail session properties.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "smtp",
      "name": "spring.mail.protocol",
      "description": "Protocol used by the SMTP server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": false,
      "name": "spring.mail.test-connection",
      "description": "Whether to test that the mail server is available on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.username",
      "description": "Login user of the SMTP server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": false,
      "name": "spring.messages.always-use-message-format",
      "description": "Whether to always apply the MessageFormat rules, parsing even messages without\n arguments.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": "messages",
      "name": "spring.messages.basename",
      "description": "Comma-separated list of basenames (essentially a fully-qualified classpath\n location), each following the ResourceBundle convention with relaxed support for\n slash based locations. If it doesn't contain a package qualifier (such as\n \"org.mypackage\"), it will be resolved from the classpath root.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "name": "spring.messages.cache-duration",
      "description": "Loaded resource bundle files cache duration. When not set, bundles are cached\n forever. If a duration suffix is not specified, seconds will be used.",
      "type": "java.time.Duration"
    },
    {
      "deprecated": true,
      "name": "spring.messages.cache-seconds",
      "description": "Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "replacement": "spring.messages.cache-duration"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": "UTF-8",
      "name": "spring.messages.encoding",
      "description": "Message bundles encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": true,
      "name": "spring.messages.fallback-to-system-locale",
      "description": "Whether to fall back to the system Locale if no files for a specific Locale have\n been found. if this is turned off, the only fallback will be the default file (e.g.\n \"messages.properties\" for basename \"messages\").",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": false,
      "name": "spring.messages.use-code-as-default-message",
      "description": "Whether to use the message code as the default message instead of throwing a\n \"NoSuchMessageException\". Recommended during development only.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "defaultValue": [
        "sync_delay"
      ],
      "name": "spring.mongodb.embedded.features",
      "description": "Comma-separated list of features to enable.",
      "type": "java.util.Set<de.flapdoodle.embed.mongo.distribution.Feature>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage",
      "name": "spring.mongodb.embedded.storage.database-dir",
      "description": "Directory used for data storage.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage",
      "name": "spring.mongodb.embedded.storage.oplog-size",
      "description": "Maximum size of the oplog, in megabytes.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage",
      "name": "spring.mongodb.embedded.storage.repl-set-name",
      "description": "Name of the replica set.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "defaultValue": "3.2.2",
      "name": "spring.mongodb.embedded.version",
      "description": "Version of Mongo to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.allow-request-override",
      "description": "Whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.allow-session-override",
      "description": "Whether HttpSession attributes are allowed to override (hide) controller generated\n model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.cache",
      "description": "Whether to enable template caching.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "UTF-8",
      "name": "spring.mustache.charset",
      "description": "Template encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true,
      "name": "spring.mustache.check-template-location",
      "description": "Whether to check that the templates location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "text\/html",
      "name": "spring.mustache.content-type",
      "description": "Content-Type value.",
      "type": "org.springframework.util.MimeType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true,
      "name": "spring.mustache.enabled",
      "description": "Whether to enable MVC view resolution for this technology.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.expose-request-attributes",
      "description": "Whether all request attributes should be added to the model prior to merging with\n the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.expose-session-attributes",
      "description": "Whether all HttpSession attributes should be added to the model prior to merging\n with the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true,
      "name": "spring.mustache.expose-spring-macro-helpers",
      "description": "Whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "classpath:\/templates\/",
      "name": "spring.mustache.prefix",
      "description": "Prefix to apply to template names.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "name": "spring.mustache.request-context-attribute",
      "description": "Name of the RequestContext attribute for all views.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": ".mustache",
      "name": "spring.mustache.suffix",
      "description": "Suffix to apply to template names.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "name": "spring.mustache.view-names",
      "description": "White list of view names that can be resolved.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Async",
      "name": "spring.mvc.async.request-timeout",
      "description": "Amount of time before asynchronous request handling times out. If this value is\n not set, the default timeout of the underlying implementation is used, e.g. 10\n seconds on Tomcat with Servlet 3.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation",
      "defaultValue": false,
      "name": "spring.mvc.contentnegotiation.favor-parameter",
      "description": "Whether a request parameter (\"format\" by default) should be used to determine\n the requested media type.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation",
      "defaultValue": false,
      "name": "spring.mvc.contentnegotiation.favor-path-extension",
      "description": "Whether the path extension in the URL path should be used to determine the\n requested media type. If enabled a request \"\/users.pdf\" will be interpreted as\n a request for \"application\/pdf\" regardless of the 'Accept' header.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation",
      "name": "spring.mvc.contentnegotiation.media-types",
      "description": "Map file extensions to media types for content negotiation. For instance, yml\n to text\/yaml.",
      "type": "java.util.Map<java.lang.String,org.springframework.http.MediaType>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation",
      "name": "spring.mvc.contentnegotiation.parameter-name",
      "description": "Query parameter name to use when \"favor-parameter\" is enabled.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "name": "spring.mvc.date-format",
      "description": "Date format to use. For instance, `dd\/MM\/yyyy`.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": true,
      "name": "spring.mvc.dispatch-options-request",
      "description": "Whether to dispatch OPTIONS requests to the FrameworkServlet doService method.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": false,
      "name": "spring.mvc.dispatch-trace-request",
      "description": "Whether to dispatch TRACE requests to the FrameworkServlet doService method.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.mvc.favicon.enabled",
      "description": "Whether to enable resolution of favicon.ico.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.mvc.formcontent.putfilter.enabled",
      "description": "Whether to enable Spring's HttpPutFormContentFilter.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": true,
      "name": "spring.mvc.ignore-default-model-on-redirect",
      "description": "Whether the content of the \"default\" model should be ignored during redirect\n scenarios.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "name": "spring.mvc.locale",
      "description": "Locale to use. By default, this locale is overridden by the \"Accept-Language\"\n header.",
      "type": "java.util.Locale"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": "accept-header",
      "name": "spring.mvc.locale-resolver",
      "description": "Define how the locale should be resolved.",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$LocaleResolver"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": false,
      "name": "spring.mvc.log-resolved-exception",
      "description": "Whether to enable warn logging of exceptions resolved by a\n \"HandlerExceptionResolver\".",
      "type": "java.lang.Boolean"
    },
    {
      "deprecated": true,
      "name": "spring.mvc.media-types",
      "description": "Maps file extensions to media types for content negotiation, e.g. yml to text\/yaml.",
      "type": "java.util.Map<java.lang.String,org.springframework.http.MediaType>",
      "deprecation": {
        "level": "error",
        "replacement": "spring.mvc.contentnegotiation.media-types"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "name": "spring.mvc.message-codes-resolver-format",
      "description": "Formatting strategy for message codes. For instance, `PREFIX_ERROR_CODE`.",
      "type": "org.springframework.validation.DefaultMessageCodesResolver$Format"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Pathmatch",
      "defaultValue": false,
      "name": "spring.mvc.pathmatch.use-registered-suffix-pattern",
      "description": "Whether suffix pattern matching should work only against extensions registered\n with \"spring.mvc.contentnegotiation.media-types.*\". This is generally\n recommended to reduce ambiguity and to avoid issues such as when a \".\" appears\n in the path for other reasons.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Pathmatch",
      "defaultValue": false,
      "name": "spring.mvc.pathmatch.use-suffix-pattern",
      "description": "Whether to use suffix pattern match (\".*\") when matching patterns to requests.\n If enabled a method mapped to \"\/users\" also matches to \"\/users.*\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Servlet",
      "defaultValue": -1,
      "name": "spring.mvc.servlet.load-on-startup",
      "description": "Load on startup priority of the dispatcher servlet.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": "\/**",
      "name": "spring.mvc.static-path-pattern",
      "description": "Path pattern used for static resources.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": false,
      "name": "spring.mvc.throw-exception-if-no-handler-found",
      "description": "Whether a \"NoHandlerFoundException\" should be thrown if no Handler was found to\n process a request.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$View",
      "name": "spring.mvc.view.prefix",
      "description": "Spring MVC view prefix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$View",
      "name": "spring.mvc.view.suffix",
      "description": "Spring MVC view suffix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties$Jdbc",
      "defaultValue": "embedded",
      "name": "spring.quartz.jdbc.initialize-schema",
      "description": "Database schema initialization mode.",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties$Jdbc",
      "defaultValue": "classpath:org\/quartz\/impl\/jdbcjobstore\/tables_@@platform@@.sql",
      "name": "spring.quartz.jdbc.schema",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties",
      "defaultValue": "memory",
      "name": "spring.quartz.job-store-type",
      "description": "Quartz job store type.",
      "type": "org.springframework.boot.autoconfigure.quartz.JobStoreType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties",
      "name": "spring.quartz.properties",
      "description": "Additional Quartz Scheduler properties.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.addresses",
      "description": "Comma-separated list of addresses to which the client should connect.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel",
      "name": "spring.rabbitmq.cache.channel.checkout-timeout",
      "description": "Duration to wait to obtain a channel if the cache size has been reached. If\n 0, always create a new channel.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel",
      "name": "spring.rabbitmq.cache.channel.size",
      "description": "Number of channels to retain in the cache. When \"check-timeout\" > 0, max\n channels per connection.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection",
      "defaultValue": "channel",
      "name": "spring.rabbitmq.cache.connection.mode",
      "description": "Connection factory cache mode.",
      "type": "org.springframework.amqp.rabbit.connection.CachingConnectionFactory$CacheMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection",
      "name": "spring.rabbitmq.cache.connection.size",
      "description": "Number of connections to cache. Only applies when mode is CONNECTION.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.connection-timeout",
      "description": "Connection timeout. Set it to zero to wait forever.",
      "type": "java.time.Duration"
    },
    {
      "defaultValue": true,
      "name": "spring.rabbitmq.dynamic",
      "description": "Whether to create an AmqpAdmin bean.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": "localhost",
      "name": "spring.rabbitmq.host",
      "description": "RabbitMQ host.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "name": "spring.rabbitmq.listener.direct.acknowledge-mode",
      "description": "Acknowledge mode of container.",
      "type": "org.springframework.amqp.core.AcknowledgeMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "defaultValue": true,
      "name": "spring.rabbitmq.listener.direct.auto-startup",
      "description": "Whether to start the container automatically on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "name": "spring.rabbitmq.listener.direct.consumers-per-queue",
      "description": "Number of consumers per queue.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "name": "spring.rabbitmq.listener.direct.default-requeue-rejected",
      "description": "Whether rejected deliveries are re-queued by default.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "name": "spring.rabbitmq.listener.direct.idle-event-interval",
      "description": "How often idle container events should be published.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "name": "spring.rabbitmq.listener.direct.prefetch",
      "description": "Number of messages to be handled in a single request. It should be greater than\n or equal to the transaction size (if used).",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": false,
      "name": "spring.rabbitmq.listener.direct.retry.enabled",
      "description": "Whether publishing retries are enabled.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": "1000ms",
      "name": "spring.rabbitmq.listener.direct.retry.initial-interval",
      "description": "Duration between the first and second attempt to deliver a message.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 3,
      "name": "spring.rabbitmq.listener.direct.retry.max-attempts",
      "description": "Maximum number of attempts to deliver a message.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": "10000ms",
      "name": "spring.rabbitmq.listener.direct.retry.max-interval",
      "description": "Maximum duration between attempts.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1,
      "name": "spring.rabbitmq.listener.direct.retry.multiplier",
      "description": "Multiplier to apply to the previous retry interval.",
      "type": "java.lang.Double"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": true,
      "name": "spring.rabbitmq.listener.direct.retry.stateless",
      "description": "Whether retries are stateless or stateful.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "name": "spring.rabbitmq.listener.simple.acknowledge-mode",
      "description": "Acknowledge mode of container.",
      "type": "org.springframework.amqp.core.AcknowledgeMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "defaultValue": true,
      "name": "spring.rabbitmq.listener.simple.auto-startup",
      "description": "Whether to start the container automatically on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "name": "spring.rabbitmq.listener.simple.concurrency",
      "description": "Minimum number of listener invoker threads.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "name": "spring.rabbitmq.listener.simple.default-requeue-rejected",
      "description": "Whether rejected deliveries are re-queued by default.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "name": "spring.rabbitmq.listener.simple.idle-event-interval",
      "description": "How often idle container events should be published.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "name": "spring.rabbitmq.listener.simple.max-concurrency",
      "description": "Maximum number of listener invoker threads.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "name": "spring.rabbitmq.listener.simple.prefetch",
      "description": "Number of messages to be handled in a single request. It should be greater than\n or equal to the transaction size (if used).",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": false,
      "name": "spring.rabbitmq.listener.simple.retry.enabled",
      "description": "Whether publishing retries are enabled.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": "1000ms",
      "name": "spring.rabbitmq.listener.simple.retry.initial-interval",
      "description": "Duration between the first and second attempt to deliver a message.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 3,
      "name": "spring.rabbitmq.listener.simple.retry.max-attempts",
      "description": "Maximum number of attempts to deliver a message.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": "10000ms",
      "name": "spring.rabbitmq.listener.simple.retry.max-interval",
      "description": "Maximum duration between attempts.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1,
      "name": "spring.rabbitmq.listener.simple.retry.multiplier",
      "description": "Multiplier to apply to the previous retry interval.",
      "type": "java.lang.Double"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": true,
      "name": "spring.rabbitmq.listener.simple.retry.stateless",
      "description": "Whether retries are stateless or stateful.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "name": "spring.rabbitmq.listener.simple.transaction-size",
      "description": "Number of messages to be processed in a transaction. That is, the number of\n messages between acks. For best results, it should be less than or equal to the\n prefetch count.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "defaultValue": "simple",
      "name": "spring.rabbitmq.listener.type",
      "description": "Listener container type.",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ContainerType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": "guest",
      "name": "spring.rabbitmq.password",
      "description": "Login to authenticate against the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": 5672,
      "name": "spring.rabbitmq.port",
      "description": "RabbitMQ port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false,
      "name": "spring.rabbitmq.publisher-confirms",
      "description": "Whether to enable publisher confirms.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false,
      "name": "spring.rabbitmq.publisher-returns",
      "description": "Whether to enable publisher returns.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.requested-heartbeat",
      "description": "Requested heartbeat timeout; zero for none. If a duration suffix is not specified,\n seconds will be used.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.algorithm",
      "description": "SSL algorithm to use. By default, configured by the Rabbit client library.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": false,
      "name": "spring.rabbitmq.ssl.enabled",
      "description": "Whether to enable SSL support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.key-store",
      "description": "Path to the key store that holds the SSL certificate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.key-store-password",
      "description": "Password used to access the key store.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": "PKCS12",
      "name": "spring.rabbitmq.ssl.key-store-type",
      "description": "Key store type.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.trust-store",
      "description": "Trust store that holds SSL certificates.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.trust-store-password",
      "description": "Password used to access the trust store.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": "JKS",
      "name": "spring.rabbitmq.ssl.trust-store-type",
      "description": "Trust store type.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "defaultValue": "",
      "name": "spring.rabbitmq.template.exchange",
      "description": "Name of the default exchange to use for send operations.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "name": "spring.rabbitmq.template.mandatory",
      "description": "Whether to enable mandatory messages.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "name": "spring.rabbitmq.template.receive-timeout",
      "description": "Timeout for `receive()` operations.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "name": "spring.rabbitmq.template.reply-timeout",
      "description": "Timeout for `sendAndReceive()` operations.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": false,
      "name": "spring.rabbitmq.template.retry.enabled",
      "description": "Whether publishing retries are enabled.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": "1000ms",
      "name": "spring.rabbitmq.template.retry.initial-interval",
      "description": "Duration between the first and second attempt to deliver a message.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 3,
      "name": "spring.rabbitmq.template.retry.max-attempts",
      "description": "Maximum number of attempts to deliver a message.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": "10000ms",
      "name": "spring.rabbitmq.template.retry.max-interval",
      "description": "Maximum duration between attempts.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 1,
      "name": "spring.rabbitmq.template.retry.multiplier",
      "description": "Multiplier to apply to the previous retry interval.",
      "type": "java.lang.Double"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "defaultValue": "",
      "name": "spring.rabbitmq.template.routing-key",
      "description": "Value of a default routing key to use for send operations.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": "guest",
      "name": "spring.rabbitmq.username",
      "description": "Login user to authenticate to the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.virtual-host",
      "description": "Virtual host to use when connecting to the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties$StacktraceMode",
      "defaultValue": false,
      "name": "spring.reactor.stacktrace-mode.enabled",
      "description": "Whether Reactor should collect stacktrace information at runtime.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster",
      "name": "spring.redis.cluster.max-redirects",
      "description": "Maximum number of redirects to follow when executing commands across the\n cluster.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster",
      "name": "spring.redis.cluster.nodes",
      "description": "Comma-separated list of \"host:port\" pairs to bootstrap from. This represents an\n \"initial\" list of cluster nodes and is required to have at least one entry.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 0,
      "name": "spring.redis.database",
      "description": "Database index used by the connection factory.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": "localhost",
      "name": "spring.redis.host",
      "description": "Redis server host.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8,
      "name": "spring.redis.jedis.pool.max-active",
      "description": "Maximum number of connections that can be allocated by the pool at a given\n time. Use a negative value for no limit.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8,
      "name": "spring.redis.jedis.pool.max-idle",
      "description": "Maximum number of \"idle\" connections in the pool. Use a negative value to\n indicate an unlimited number of idle connections.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": "-1ms",
      "name": "spring.redis.jedis.pool.max-wait",
      "description": "Maximum amount of time a connection allocation should block before throwing an\n exception when the pool is exhausted. Use a negative value to block\n indefinitely.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 0,
      "name": "spring.redis.jedis.pool.min-idle",
      "description": "Target for the minimum number of idle connections to maintain in the pool. This\n setting only has an effect if it is positive.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8,
      "name": "spring.redis.lettuce.pool.max-active",
      "description": "Maximum number of connections that can be allocated by the pool at a given\n time. Use a negative value for no limit.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8,
      "name": "spring.redis.lettuce.pool.max-idle",
      "description": "Maximum number of \"idle\" connections in the pool. Use a negative value to\n indicate an unlimited number of idle connections.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": "-1ms",
      "name": "spring.redis.lettuce.pool.max-wait",
      "description": "Maximum amount of time a connection allocation should block before throwing an\n exception when the pool is exhausted. Use a negative value to block\n indefinitely.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 0,
      "name": "spring.redis.lettuce.pool.min-idle",
      "description": "Target for the minimum number of idle connections to maintain in the pool. This\n setting only has an effect if it is positive.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce",
      "defaultValue": "100ms",
      "name": "spring.redis.lettuce.shutdown-timeout",
      "description": "Shutdown timeout.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.password",
      "description": "Login password of the redis server.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": 8,
      "deprecated": true,
      "name": "spring.redis.pool.max-active",
      "description": "Max number of connections that can be allocated by the pool at a given time.\n Use a negative value for no limit.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "replacement": "spring.redis.jedis.pool.max-idle"
      }
    },
    {
      "defaultValue": 8,
      "deprecated": true,
      "name": "spring.redis.pool.max-idle",
      "description": "Max number of \"idle\" connections in the pool. Use a negative value to indicate\n an unlimited number of idle connections.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "replacement": "spring.redis.jedis.pool.max-idle"
      }
    },
    {
      "defaultValue": -1,
      "deprecated": true,
      "name": "spring.redis.pool.max-wait",
      "description": "Maximum amount of time (in milliseconds) a connection allocation should block\n before throwing an exception when the pool is exhausted. Use a negative value\n to block indefinitely.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "replacement": "spring.redis.jedis.pool.max-wait"
      }
    },
    {
      "defaultValue": 0,
      "deprecated": true,
      "name": "spring.redis.pool.min-idle",
      "description": "Target for the minimum number of idle connections to maintain in the pool. This\n setting only has an effect if it is positive.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "replacement": "spring.redis.jedis.pool.min-idle"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 6379,
      "name": "spring.redis.port",
      "description": "Redis server port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel",
      "name": "spring.redis.sentinel.master",
      "description": "Name of the Redis server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel",
      "name": "spring.redis.sentinel.nodes",
      "description": "Comma-separated list of \"host:port\" pairs.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": false,
      "name": "spring.redis.ssl",
      "description": "Whether to enable SSL support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.timeout",
      "description": "Connection timeout.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.url",
      "description": "Connection URL. Overrides host, port, and password. User is ignored. Example:\n redis:\/\/user:password@example.com:6379",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "defaultValue": true,
      "name": "spring.resources.add-mappings",
      "description": "Whether to enable default resource handling.",
      "type": "java.lang.Boolean"
    },
    {
      "deprecated": true,
      "name": "spring.resources.cache-period",
      "description": "Cache period for the resources served by the resource handler. If a duration suffix is not specified, seconds will be used.",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error",
        "replacement": "spring.resources.cache.period"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.cache-private",
      "description": "Indicate that the response message is intended for a single user and must\n not be stored by a shared cache.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.cache-public",
      "description": "Indicate that any cache may store the response.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.max-age",
      "description": "Maximum time the response should be cached, in seconds if no duration\n suffix is not specified.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.must-revalidate",
      "description": "Indicate that once it has become stale, a cache must not use the response\n without re-validating it with the server.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.no-cache",
      "description": "Indicate that the cached response can be reused only if re-validated with\n the server.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.no-store",
      "description": "Indicate to not cache the response in any case.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.no-transform",
      "description": "Indicate intermediaries (caches and others) that they should not transform\n the response content.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.proxy-revalidate",
      "description": "Same meaning as the \"must-revalidate\" directive, except that it does not\n apply to private caches.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.s-max-age",
      "description": "Maximum time the response should be cached by shared caches, in seconds if\n no duration suffix is not specified.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.stale-if-error",
      "description": "Maximum time the response may be used when errors are encountered, in\n seconds if no duration suffix is not specified.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "name": "spring.resources.cache.cachecontrol.stale-while-revalidate",
      "description": "Maximum time the response can be served after it becomes stale, in seconds\n if no duration suffix is not specified.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache",
      "name": "spring.resources.cache.period",
      "description": "Cache period for the resources served by the resource handler. If a duration\n suffix is not specified, seconds will be used. Can be overridden by the\n 'spring.resources.cache.cachecontrol' properties.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": true,
      "name": "spring.resources.chain.cache",
      "description": "Whether to enable caching in the Resource chain.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "name": "spring.resources.chain.enabled",
      "description": "Whether to enable the Spring Resource Handling chain. By default, disabled\n unless at least one strategy has been enabled.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false,
      "name": "spring.resources.chain.gzipped",
      "description": "Whether to enable resolution of already gzipped resources. Checks for a\n resource name variant with the \"*.gz\" extension.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false,
      "name": "spring.resources.chain.html-application-cache",
      "description": "Whether to enable HTML5 application cache manifest rewriting.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": false,
      "name": "spring.resources.chain.strategy.content.enabled",
      "description": "Whether to enable the content Version Strategy.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": [
        "\/**"
      ],
      "name": "spring.resources.chain.strategy.content.paths",
      "description": "Comma-separated list of patterns to apply to the content Version Strategy.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": false,
      "name": "spring.resources.chain.strategy.fixed.enabled",
      "description": "Whether to enable the fixed Version Strategy.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": [
        "\/**"
      ],
      "name": "spring.resources.chain.strategy.fixed.paths",
      "description": "Comma-separated list of patterns to apply to the fixed Version Strategy.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "name": "spring.resources.chain.strategy.fixed.version",
      "description": "Version string to use for the fixed Version Strategy.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "defaultValue": [
        "classpath:\/META-INF\/resources\/",
        "classpath:\/resources\/",
        "classpath:\/static\/",
        "classpath:\/public\/"
      ],
      "name": "spring.resources.static-locations",
      "description": "Locations of static resources. Defaults to classpath:[\/META-INF\/resources\/,\n \/resources\/, \/static\/, \/public\/].",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Filter",
      "defaultValue": [
        "async",
        "error",
        "request"
      ],
      "name": "spring.security.filter.dispatcher-types",
      "description": "Security filter chain dispatcher types.",
      "type": "java.util.Set<org.springframework.boot.web.servlet.DispatcherType>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Filter",
      "defaultValue": -100,
      "name": "spring.security.filter.order",
      "description": "Security filter chain order.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties",
      "name": "spring.security.oauth2.client.provider",
      "description": "OAuth provider details.",
      "type": "java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties.Provider>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties",
      "name": "spring.security.oauth2.client.registration",
      "description": "OAuth client registrations.",
      "type": "java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties.Registration>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "defaultValue": "user",
      "name": "spring.security.user.name",
      "description": "Default user name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "name": "spring.security.user.password",
      "description": "Password for the default user name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "name": "spring.security.user.roles",
      "description": "Granted roles for the default user name.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "name": "spring.sendgrid.api-key",
      "description": "SendGrid API key.",
      "type": "java.lang.String"
    },
    {
      "deprecated": true,
      "name": "spring.sendgrid.password",
      "description": "SendGrid password.",
      "type": "java.lang.String",
      "deprecation": {
        "reason": "The use of a username and password is no longer supported (Use spring.sendgrid.api-key instead).",
        "level": "error"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy",
      "name": "spring.sendgrid.proxy.host",
      "description": "SendGrid proxy host.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy",
      "name": "spring.sendgrid.proxy.port",
      "description": "SendGrid proxy port.",
      "type": "java.lang.Integer"
    },
    {
      "deprecated": true,
      "name": "spring.sendgrid.username",
      "description": "SendGrid username. Alternative to api key.",
      "type": "java.lang.String",
      "deprecation": {
        "reason": "The use of a username and password is no longer supported (Use spring.sendgrid.api-key instead).",
        "level": "error"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": true,
      "name": "spring.servlet.multipart.enabled",
      "description": "Whether to enable support of multipart uploads.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": "0",
      "name": "spring.servlet.multipart.file-size-threshold",
      "description": "Threshold after which files are written to disk. Values can use the suffixes \"MB\"\n or \"KB\" to indicate megabytes or kilobytes, respectively.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "name": "spring.servlet.multipart.location",
      "description": "Intermediate location of uploaded files.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": "1MB",
      "name": "spring.servlet.multipart.max-file-size",
      "description": "Max file size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or\n kilobytes, respectively.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": "10MB",
      "name": "spring.servlet.multipart.max-request-size",
      "description": "Max request size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or\n kilobytes, respectively.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": false,
      "name": "spring.servlet.multipart.resolve-lazily",
      "description": "Whether to resolve the multipart request lazily at the time of file or parameter\n access.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.HazelcastSessionProperties",
      "defaultValue": "on-save",
      "name": "spring.session.hazelcast.flush-mode",
      "description": "Sessions flush mode.",
      "type": "org.springframework.session.hazelcast.HazelcastFlushMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.HazelcastSessionProperties",
      "defaultValue": "spring:session:sessions",
      "name": "spring.session.hazelcast.map-name",
      "description": "Name of the map used to store sessions.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "defaultValue": "0 * * * * *",
      "name": "spring.session.jdbc.cleanup-cron",
      "description": "Cron expression for expired session cleanup job.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "defaultValue": "embedded",
      "name": "spring.session.jdbc.initialize-schema",
      "description": "Database schema initialization mode.",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode"
    },
    {
      "deprecated": true,
      "name": "spring.session.jdbc.initializer.enabled",
      "description": "Create the required session tables on startup if necessary. Enabled\n automatically if the default table name is set or a custom schema is\n configured.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error",
        "replacement": "spring.session.jdbc.initialize-schema"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "defaultValue": "classpath:org\/springframework\/session\/jdbc\/schema-@@platform@@.sql",
      "name": "spring.session.jdbc.schema",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "defaultValue": "SPRING_SESSION",
      "name": "spring.session.jdbc.table-name",
      "description": "Name of the database table used to store sessions.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": "sessions",
      "deprecated": true,
      "name": "spring.session.mongo.collection-name",
      "description": "Collection name used to store sessions.",
      "type": "java.lang.String",
      "deprecation": {
        "level": "error",
        "replacement": "spring.session.mongodb.collection-name"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.MongoSessionProperties",
      "defaultValue": "sessions",
      "name": "spring.session.mongodb.collection-name",
      "description": "Collection name used to store sessions.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.RedisSessionProperties",
      "defaultValue": "0 * * * * *",
      "name": "spring.session.redis.cleanup-cron",
      "description": "Cron expression for expired session cleanup job.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.RedisSessionProperties",
      "defaultValue": "on-save",
      "name": "spring.session.redis.flush-mode",
      "description": "Sessions flush mode.",
      "type": "org.springframework.session.data.redis.RedisFlushMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.RedisSessionProperties",
      "defaultValue": "spring:session",
      "name": "spring.session.redis.namespace",
      "description": "Namespace for keys used to store sessions.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Servlet",
      "defaultValue": [
        "async",
        "error",
        "request"
      ],
      "name": "spring.session.servlet.filter-dispatcher-types",
      "description": "Session repository filter dispatcher types.",
      "type": "java.util.Set<org.springframework.boot.web.servlet.DispatcherType>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Servlet",
      "name": "spring.session.servlet.filter-order",
      "description": "Session repository filter order.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "name": "spring.session.store-type",
      "description": "Session store type.",
      "type": "org.springframework.boot.autoconfigure.session.StoreType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true,
      "name": "spring.thymeleaf.cache",
      "description": "Whether to enable template caching.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true,
      "name": "spring.thymeleaf.check-template",
      "description": "Whether to check that the template exists before rendering it.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true,
      "name": "spring.thymeleaf.check-template-location",
      "description": "Whether to check that the templates location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": "text\/html",
      "deprecated": true,
      "name": "spring.thymeleaf.content-type",
      "description": "Content-Type value.",
      "type": "org.springframework.util.MimeType",
      "deprecation": {
        "level": "error",
        "replacement": "spring.thymeleaf.servlet.content-type"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": false,
      "name": "spring.thymeleaf.enable-spring-el-compiler",
      "description": "Enable the SpringEL compiler in SpringEL expressions.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true,
      "name": "spring.thymeleaf.enabled",
      "description": "Whether to enable Thymeleaf view resolution for Web frameworks.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "UTF-8",
      "name": "spring.thymeleaf.encoding",
      "description": "Template files encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf.excluded-view-names",
      "description": "Comma-separated list of view names (patterns allowed) that should be excluded from\n resolution.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "HTML",
      "name": "spring.thymeleaf.mode",
      "description": "Template mode to be applied to templates. See also Thymeleaf's TemplateMode enum.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "classpath:\/templates\/",
      "name": "spring.thymeleaf.prefix",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive",
      "name": "spring.thymeleaf.reactive.chunked-mode-view-names",
      "description": "Comma-separated list of view names (patterns allowed) that should be the only\n ones executed in CHUNKED mode when a max chunk size is set.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive",
      "name": "spring.thymeleaf.reactive.full-mode-view-names",
      "description": "Comma-separated list of view names (patterns allowed) that should be executed\n in FULL mode even if a max chunk size is set.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive",
      "defaultValue": 0,
      "name": "spring.thymeleaf.reactive.max-chunk-size",
      "description": "Maximum size of data buffers used for writing to the response, in bytes.\n Templates will execute in CHUNKED mode by default if this is set.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive",
      "name": "spring.thymeleaf.reactive.media-types",
      "description": "Media types supported by the view technology.",
      "type": "java.util.List<org.springframework.http.MediaType>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Servlet",
      "defaultValue": "text\/html",
      "name": "spring.thymeleaf.servlet.content-type",
      "description": "Content-Type value written to HTTP responses.",
      "type": "org.springframework.util.MimeType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": ".html",
      "name": "spring.thymeleaf.suffix",
      "description": "Suffix that gets appended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf.template-resolver-order",
      "description": "Order of the template resolver in the chain. By default, the template resolver is\n first in the chain. Order start at 1 and should only be set if you have defined\n additional \"TemplateResolver\" beans.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf.view-names",
      "description": "Comma-separated list of view names (patterns allowed) that can be resolved.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
      "name": "spring.transaction.default-timeout",
      "description": "Default transaction timeout. If a duration suffix is not specified, seconds will be\n used.",
      "type": "java.time.Duration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
      "name": "spring.transaction.rollback-on-commit-failure",
      "description": "Whether to roll back on commit failures.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
      "name": "spring.webflux.date-format",
      "description": "Date format to use. For instance, `dd\/MM\/yyyy`.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
      "defaultValue": "\/**",
      "name": "spring.webflux.static-path-pattern",
      "description": "Path pattern used for static resources.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "defaultValue": "\/services",
      "name": "spring.webservices.path",
      "description": "Path that serves as the base URI for the services.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "name": "spring.webservices.servlet.init",
      "description": "Servlet init parameters to pass to Spring Web Services.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "defaultValue": -1,
      "name": "spring.webservices.servlet.load-on-startup",
      "description": "Load on startup priority of the Spring Web Services servlet.",
      "type": "java.lang.Integer"
    },
    {
      "name": "spring.webservices.wsdl-locations",
      "description": "Comma-separated list of locations of WSDLs and accompanying XSDs to be exposed as beans.",
      "type": "java.util.List<java.lang.String>"
    }
  ]
}