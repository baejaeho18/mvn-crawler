Compiled from "JSONParserByteArray.java"
class net.minidev.json.parser.JSONParserByteArray extends net.minidev.json.parser.JSONParserMemory {
  private byte[] in;

  public net.minidev.json.parser.JSONParserByteArray(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method net/minidev/json/parser/JSONParserMemory."<init>":(I)V
       5: return

  public java.lang.Object parse(byte[]) throws net.minidev.json.parser.ParseException;
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #2                  // Field net/minidev/json/parser/ContainerFactory.FACTORY_SIMPLE:Lnet/minidev/json/parser/ContainerFactory;
       5: getstatic     #3                  // Field net/minidev/json/parser/ContentHandlerDumy.HANDLER:Lnet/minidev/json/parser/ContentHandlerDumy;
       8: invokevirtual #4                  // Method parse:([BLnet/minidev/json/parser/ContainerFactory;Lnet/minidev/json/parser/ContentHandler;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object parse(byte[], net.minidev.json.parser.ContainerFactory) throws net.minidev.json.parser.ParseException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #3                  // Field net/minidev/json/parser/ContentHandlerDumy.HANDLER:Lnet/minidev/json/parser/ContentHandlerDumy;
       6: invokevirtual #4                  // Method parse:([BLnet/minidev/json/parser/ContainerFactory;Lnet/minidev/json/parser/ContentHandler;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object parse(byte[], net.minidev.json.parser.ContainerFactory, net.minidev.json.parser.ContentHandler) throws net.minidev.json.parser.ParseException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field in:[B
       5: aload_0
       6: aload_1
       7: arraylength
       8: putfield      #6                  // Field len:I
      11: aload_0
      12: iconst_m1
      13: putfield      #7                  // Field pos:I
      16: aload_0
      17: aload_2
      18: aload_3
      19: invokevirtual #8                  // Method parse:(Lnet/minidev/json/parser/ContainerFactory;Lnet/minidev/json/parser/ContentHandler;)Ljava/lang/Object;
      22: areturn

  public java.lang.Object parse(byte[], int, int, net.minidev.json.parser.ContainerFactory, net.minidev.json.parser.ContentHandler) throws net.minidev.json.parser.ParseException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field in:[B
       5: aload_0
       6: iload_3
       7: putfield      #6                  // Field len:I
      10: aload_0
      11: iload_2
      12: iconst_1
      13: isub
      14: putfield      #7                  // Field pos:I
      17: aload_0
      18: aload         4
      20: aload         5
      22: invokevirtual #8                  // Method parse:(Lnet/minidev/json/parser/ContainerFactory;Lnet/minidev/json/parser/ContentHandler;)Ljava/lang/Object;
      25: areturn

  protected void extractString(int, int);
    Code:
       0: aload_0
       1: new           #9                  // class java/lang/String
       4: dup
       5: aload_0
       6: getfield      #5                  // Field in:[B
       9: iload_1
      10: iload_2
      11: iload_1
      12: isub
      13: invokespecial #10                 // Method java/lang/String."<init>":([BII)V
      16: putfield      #11                 // Field xs:Ljava/lang/String;
      19: return

  protected int indexOf(char, int);
    Code:
       0: iload_2
       1: istore_3
       2: iload_2
       3: aload_0
       4: getfield      #6                  // Field len:I
       7: if_icmpge     29
      10: aload_0
      11: getfield      #5                  // Field in:[B
      14: iload_3
      15: baload
      16: iload_1
      17: i2b
      18: if_icmpne     23
      21: iload_3
      22: ireturn
      23: iinc          3, 1
      26: goto          2
      29: iconst_m1
      30: ireturn

  protected void read();
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field pos:I
       5: iconst_1
       6: iadd
       7: dup_x1
       8: putfield      #7                  // Field pos:I
      11: aload_0
      12: getfield      #6                  // Field len:I
      15: if_icmplt     27
      18: aload_0
      19: bipush        26
      21: putfield      #12                 // Field c:C
      24: goto          41
      27: aload_0
      28: aload_0
      29: getfield      #5                  // Field in:[B
      32: aload_0
      33: getfield      #7                  // Field pos:I
      36: baload
      37: i2c
      38: putfield      #12                 // Field c:C
      41: return

  protected void readS();
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field pos:I
       5: iconst_1
       6: iadd
       7: dup_x1
       8: putfield      #7                  // Field pos:I
      11: aload_0
      12: getfield      #6                  // Field len:I
      15: if_icmplt     27
      18: aload_0
      19: bipush        26
      21: putfield      #12                 // Field c:C
      24: goto          41
      27: aload_0
      28: aload_0
      29: getfield      #5                  // Field in:[B
      32: aload_0
      33: getfield      #7                  // Field pos:I
      36: baload
      37: i2c
      38: putfield      #12                 // Field c:C
      41: return

  protected void readNoEnd() throws net.minidev.json.parser.ParseException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field pos:I
       5: iconst_1
       6: iadd
       7: dup_x1
       8: putfield      #7                  // Field pos:I
      11: aload_0
      12: getfield      #6                  // Field len:I
      15: if_icmplt     41
      18: aload_0
      19: bipush        26
      21: putfield      #12                 // Field c:C
      24: new           #13                 // class net/minidev/json/parser/ParseException
      27: dup
      28: aload_0
      29: getfield      #7                  // Field pos:I
      32: iconst_1
      33: isub
      34: iconst_3
      35: ldc           #14                 // String EOF
      37: invokespecial #15                 // Method net/minidev/json/parser/ParseException."<init>":(IILjava/lang/Object;)V
      40: athrow
      41: aload_0
      42: aload_0
      43: getfield      #5                  // Field in:[B
      46: aload_0
      47: getfield      #7                  // Field pos:I
      50: baload
      51: i2c
      52: putfield      #12                 // Field c:C
      55: return
}
