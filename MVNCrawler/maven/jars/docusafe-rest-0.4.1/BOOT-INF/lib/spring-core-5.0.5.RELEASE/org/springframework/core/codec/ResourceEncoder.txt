Compiled from "ResourceEncoder.java"
public class org.springframework.core.codec.ResourceEncoder extends org.springframework.core.codec.AbstractSingleValueEncoder<org.springframework.core.io.Resource> {
  public static final int DEFAULT_BUFFER_SIZE;

  private final int bufferSize;

  public org.springframework.core.codec.ResourceEncoder();
    Code:
       0: aload_0
       1: sipush        4096
       4: invokespecial #3                  // Method "<init>":(I)V
       7: return

  public org.springframework.core.codec.ResourceEncoder(int);
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #4                  // class org/springframework/util/MimeType
       5: dup
       6: iconst_0
       7: getstatic     #5                  // Field org/springframework/util/MimeTypeUtils.APPLICATION_OCTET_STREAM:Lorg/springframework/util/MimeType;
      10: aastore
      11: dup
      12: iconst_1
      13: getstatic     #6                  // Field org/springframework/util/MimeTypeUtils.ALL:Lorg/springframework/util/MimeType;
      16: aastore
      17: invokespecial #7                  // Method org/springframework/core/codec/AbstractSingleValueEncoder."<init>":([Lorg/springframework/util/MimeType;)V
      20: iload_1
      21: ifle          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ldc           #8                  // String \'bufferSize\' must be larger than 0
      31: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      34: aload_0
      35: iload_1
      36: putfield      #10                 // Field bufferSize:I
      39: return

  public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType);
    Code:
       0: aload_1
       1: ldc           #11                 // class java/lang/Object
       3: invokevirtual #12                 // Method org/springframework/core/ResolvableType.resolve:(Ljava/lang/Class;)Ljava/lang/Class;
       6: astore_3
       7: aload_0
       8: aload_1
       9: aload_2
      10: invokespecial #13                 // Method org/springframework/core/codec/AbstractSingleValueEncoder.canEncode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      13: ifeq          29
      16: ldc           #14                 // class org/springframework/core/io/Resource
      18: aload_3
      19: invokevirtual #15                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      22: ifeq          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  protected reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.springframework.core.io.Resource, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: getfield      #10                 // Field bufferSize:I
       6: invokestatic  #16                 // Method org/springframework/core/io/buffer/DataBufferUtils.read:(Lorg/springframework/core/io/Resource;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
       9: areturn

  public java.lang.Long getContentLength(org.springframework.core.io.Resource, org.springframework.util.MimeType);
    Code:
       0: ldc           #17                 // class org/springframework/core/io/InputStreamResource
       2: aload_1
       3: invokevirtual #18                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       6: if_acmpeq     20
       9: aload_1
      10: invokeinterface #19,  1           // InterfaceMethod org/springframework/core/io/Resource.contentLength:()J
      15: invokestatic  #20                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      18: areturn
      19: astore_3
      20: aconst_null
      21: areturn
    Exception table:
       from    to  target type
           9    18    19   Class java/io/IOException

  protected reactor.core.publisher.Flux encode(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #14                 // class org/springframework/core/io/Resource
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokevirtual #22                 // Method encode:(Lorg/springframework/core/io/Resource;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      14: areturn

  public java.lang.Long getContentLength(java.lang.Object, org.springframework.util.MimeType);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #14                 // class org/springframework/core/io/Resource
       5: aload_2
       6: invokevirtual #23                 // Method getContentLength:(Lorg/springframework/core/io/Resource;Lorg/springframework/util/MimeType;)Ljava/lang/Long;
       9: areturn
}
