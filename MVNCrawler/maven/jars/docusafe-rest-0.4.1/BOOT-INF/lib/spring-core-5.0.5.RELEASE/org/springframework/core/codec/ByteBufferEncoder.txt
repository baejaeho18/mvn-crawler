Compiled from "ByteBufferEncoder.java"
public class org.springframework.core.codec.ByteBufferEncoder extends org.springframework.core.codec.AbstractEncoder<java.nio.ByteBuffer> {
  public org.springframework.core.codec.ByteBufferEncoder();
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #1                  // class org/springframework/util/MimeType
       5: dup
       6: iconst_0
       7: getstatic     #2                  // Field org/springframework/util/MimeTypeUtils.ALL:Lorg/springframework/util/MimeType;
      10: aastore
      11: invokespecial #3                  // Method org/springframework/core/codec/AbstractEncoder."<init>":([Lorg/springframework/util/MimeType;)V
      14: return

  public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType);
    Code:
       0: aload_1
       1: ldc           #4                  // class java/lang/Object
       3: invokevirtual #5                  // Method org/springframework/core/ResolvableType.resolve:(Ljava/lang/Class;)Ljava/lang/Class;
       6: astore_3
       7: aload_0
       8: aload_1
       9: aload_2
      10: invokespecial #6                  // Method org/springframework/core/codec/AbstractEncoder.canEncode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      13: ifeq          29
      16: ldc           #7                  // class java/nio/ByteBuffer
      18: aload_3
      19: invokevirtual #8                  // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      22: ifeq          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends java.nio.ByteBuffer>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: invokestatic  #9                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: aload_2
       5: dup
       6: invokevirtual #10                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: pop
      10: invokedynamic #11,  0             // InvokeDynamic #0:apply:(Lorg/springframework/core/io/buffer/DataBufferFactory;)Ljava/util/function/Function;
      15: invokevirtual #12                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      18: areturn

  public java.lang.Long getContentLength(java.nio.ByteBuffer, org.springframework.util.MimeType);
    Code:
       0: aload_1
       1: invokevirtual #13                 // Method java/nio/ByteBuffer.array:()[B
       4: arraylength
       5: i2l
       6: invokestatic  #14                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       9: areturn

  public java.lang.Long getContentLength(java.lang.Object, org.springframework.util.MimeType);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #7                  // class java/nio/ByteBuffer
       5: aload_2
       6: invokevirtual #15                 // Method getContentLength:(Ljava/nio/ByteBuffer;Lorg/springframework/util/MimeType;)Ljava/lang/Long;
       9: areturn
}
