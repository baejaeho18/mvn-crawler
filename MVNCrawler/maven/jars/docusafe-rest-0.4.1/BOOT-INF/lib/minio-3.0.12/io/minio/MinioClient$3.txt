Compiled from "MinioClient.java"
class io.minio.MinioClient$3 extends okhttp3.RequestBody {
  final java.lang.String val$contentType;

  final java.lang.Object val$data;

  final int val$len;

  final io.minio.MinioClient this$0;

  io.minio.MinioClient$3(io.minio.MinioClient, java.lang.String, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/minio/MinioClient;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$contentType:Ljava/lang/String;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$data:Ljava/lang/Object;
      15: aload_0
      16: iload         4
      18: putfield      #4                  // Field val$len:I
      21: aload_0
      22: invokespecial #5                  // Method okhttp3/RequestBody."<init>":()V
      25: return

  public okhttp3.MediaType contentType();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #2                  // Field val$contentType:Ljava/lang/String;
       6: ifnull        17
       9: aload_0
      10: getfield      #2                  // Field val$contentType:Ljava/lang/String;
      13: invokestatic  #6                  // Method okhttp3/MediaType.parse:(Ljava/lang/String;)Lokhttp3/MediaType;
      16: astore_1
      17: aload_1
      18: ifnonnull     27
      21: ldc           #7                  // String application/octet-stream
      23: invokestatic  #6                  // Method okhttp3/MediaType.parse:(Ljava/lang/String;)Lokhttp3/MediaType;
      26: astore_1
      27: aload_1
      28: areturn

  public long contentLength();
    Code:
       0: aload_0
       1: getfield      #3                  // Field val$data:Ljava/lang/Object;
       4: instanceof    #8                  // class java/io/InputStream
       7: ifne          30
      10: aload_0
      11: getfield      #3                  // Field val$data:Ljava/lang/Object;
      14: instanceof    #9                  // class java/io/RandomAccessFile
      17: ifne          30
      20: aload_0
      21: getfield      #3                  // Field val$data:Ljava/lang/Object;
      24: instanceof    #10                 // class "[B"
      27: ifeq          36
      30: aload_0
      31: getfield      #4                  // Field val$len:I
      34: i2l
      35: lreturn
      36: aload_0
      37: getfield      #4                  // Field val$len:I
      40: ifne          47
      43: ldc2_w        #11                 // long -1l
      46: lreturn
      47: aload_0
      48: getfield      #4                  // Field val$len:I
      51: i2l
      52: lreturn

  public void writeTo(okio.BufferedSink) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field val$data:Ljava/lang/Object;
       4: instanceof    #8                  // class java/io/InputStream
       7: ifeq          37
      10: aload_0
      11: getfield      #3                  // Field val$data:Ljava/lang/Object;
      14: checkcast     #8                  // class java/io/InputStream
      17: astore_2
      18: aload_1
      19: aload_2
      20: invokestatic  #13                 // Method okio/Okio.source:(Ljava/io/InputStream;)Lokio/Source;
      23: aload_0
      24: getfield      #4                  // Field val$len:I
      27: i2l
      28: invokeinterface #14,  4           // InterfaceMethod okio/BufferedSink.write:(Lokio/Source;J)Lokio/BufferedSink;
      33: pop
      34: goto          131
      37: aload_0
      38: getfield      #3                  // Field val$data:Ljava/lang/Object;
      41: instanceof    #9                  // class java/io/RandomAccessFile
      44: ifeq          80
      47: aload_0
      48: getfield      #3                  // Field val$data:Ljava/lang/Object;
      51: checkcast     #9                  // class java/io/RandomAccessFile
      54: astore_2
      55: aload_1
      56: aload_2
      57: invokevirtual #15                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      60: invokestatic  #16                 // Method java/nio/channels/Channels.newInputStream:(Ljava/nio/channels/ReadableByteChannel;)Ljava/io/InputStream;
      63: invokestatic  #13                 // Method okio/Okio.source:(Ljava/io/InputStream;)Lokio/Source;
      66: aload_0
      67: getfield      #4                  // Field val$len:I
      70: i2l
      71: invokeinterface #14,  4           // InterfaceMethod okio/BufferedSink.write:(Lokio/Source;J)Lokio/BufferedSink;
      76: pop
      77: goto          131
      80: aload_0
      81: getfield      #3                  // Field val$data:Ljava/lang/Object;
      84: instanceof    #10                 // class "[B"
      87: ifeq          117
      90: aload_0
      91: getfield      #3                  // Field val$data:Ljava/lang/Object;
      94: checkcast     #10                 // class "[B"
      97: checkcast     #10                 // class "[B"
     100: astore_2
     101: aload_1
     102: aload_2
     103: iconst_0
     104: aload_0
     105: getfield      #4                  // Field val$len:I
     108: invokeinterface #17,  4           // InterfaceMethod okio/BufferedSink.write:([BII)Lokio/BufferedSink;
     113: pop
     114: goto          131
     117: aload_1
     118: aload_0
     119: getfield      #3                  // Field val$data:Ljava/lang/Object;
     122: invokevirtual #18                 // Method java/lang/Object.toString:()Ljava/lang/String;
     125: invokeinterface #19,  2           // InterfaceMethod okio/BufferedSink.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;
     130: pop
     131: return
}
