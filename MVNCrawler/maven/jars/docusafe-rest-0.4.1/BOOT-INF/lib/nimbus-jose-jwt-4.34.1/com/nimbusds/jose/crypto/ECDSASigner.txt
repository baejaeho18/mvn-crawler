Compiled from "ECDSASigner.java"
public class com.nimbusds.jose.crypto.ECDSASigner extends com.nimbusds.jose.crypto.ECDSAProvider implements com.nimbusds.jose.JWSSigner {
  private final java.security.PrivateKey privateKey;

  public com.nimbusds.jose.crypto.ECDSASigner(java.security.interfaces.ECPrivateKey) throws com.nimbusds.jose.JOSEException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #15                 // Method com/nimbusds/jose/crypto/ECDSA.resolveAlgorithm:(Ljava/security/interfaces/ECKey;)Lcom/nimbusds/jose/JWSAlgorithm;
       5: invokespecial #21                 // Method com/nimbusds/jose/crypto/ECDSAProvider."<init>":(Lcom/nimbusds/jose/JWSAlgorithm;)V
       8: aload_0
       9: aload_1
      10: putfield      #24                 // Field privateKey:Ljava/security/PrivateKey;
      13: return

  public com.nimbusds.jose.crypto.ECDSASigner(java.security.PrivateKey, com.nimbusds.jose.jwk.ECKey$Curve) throws com.nimbusds.jose.JOSEException;
    Code:
       0: aload_0
       1: aload_2
       2: invokestatic  #32                 // Method com/nimbusds/jose/crypto/ECDSA.resolveAlgorithm:(Lcom/nimbusds/jose/jwk/ECKey$Curve;)Lcom/nimbusds/jose/JWSAlgorithm;
       5: invokespecial #21                 // Method com/nimbusds/jose/crypto/ECDSAProvider."<init>":(Lcom/nimbusds/jose/JWSAlgorithm;)V
       8: ldc           #35                 // String EC
      10: aload_1
      11: invokeinterface #37,  1           // InterfaceMethod java/security/PrivateKey.getAlgorithm:()Ljava/lang/String;
      16: invokevirtual #43                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      19: ifne          32
      22: new           #49                 // class java/lang/IllegalArgumentException
      25: dup
      26: ldc           #51                 // String The private key algorithm must be EC
      28: invokespecial #53                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: aload_1
      34: putfield      #24                 // Field privateKey:Ljava/security/PrivateKey;
      37: return

  public com.nimbusds.jose.crypto.ECDSASigner(com.nimbusds.jose.jwk.ECKey) throws com.nimbusds.jose.JOSEException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #62                 // Method com/nimbusds/jose/jwk/ECKey.getCurve:()Lcom/nimbusds/jose/jwk/ECKey$Curve;
       5: invokestatic  #32                 // Method com/nimbusds/jose/crypto/ECDSA.resolveAlgorithm:(Lcom/nimbusds/jose/jwk/ECKey$Curve;)Lcom/nimbusds/jose/JWSAlgorithm;
       8: invokespecial #21                 // Method com/nimbusds/jose/crypto/ECDSAProvider."<init>":(Lcom/nimbusds/jose/JWSAlgorithm;)V
      11: aload_1
      12: invokevirtual #68                 // Method com/nimbusds/jose/jwk/ECKey.isPrivate:()Z
      15: ifne          28
      18: new           #12                 // class com/nimbusds/jose/JOSEException
      21: dup
      22: ldc           #72                 // String The EC JWK doesn\'t contain a private part
      24: invokespecial #74                 // Method com/nimbusds/jose/JOSEException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: aload_1
      30: invokevirtual #75                 // Method com/nimbusds/jose/jwk/ECKey.toPrivateKey:()Ljava/security/PrivateKey;
      33: putfield      #24                 // Field privateKey:Ljava/security/PrivateKey;
      36: return

  public java.security.PrivateKey getPrivateKey();
    Code:
       0: aload_0
       1: getfield      #24                 // Field privateKey:Ljava/security/PrivateKey;
       4: areturn

  public com.nimbusds.jose.util.Base64URL sign(com.nimbusds.jose.JWSHeader, byte[]) throws com.nimbusds.jose.JOSEException;
    Code:
       0: aload_1
       1: invokevirtual #84                 // Method com/nimbusds/jose/JWSHeader.getAlgorithm:()Lcom/nimbusds/jose/JWSAlgorithm;
       4: astore_3
       5: aload_0
       6: invokevirtual #89                 // Method supportedJWSAlgorithms:()Ljava/util/Set;
       9: aload_3
      10: invokeinterface #93,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      15: ifne          34
      18: new           #12                 // class com/nimbusds/jose/JOSEException
      21: dup
      22: aload_3
      23: aload_0
      24: invokevirtual #89                 // Method supportedJWSAlgorithms:()Ljava/util/Set;
      27: invokestatic  #99                 // Method com/nimbusds/jose/crypto/AlgorithmSupportMessage.unsupportedJWSAlgorithm:(Lcom/nimbusds/jose/JWSAlgorithm;Ljava/util/Collection;)Ljava/lang/String;
      30: invokespecial #74                 // Method com/nimbusds/jose/JOSEException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_3
      35: aload_0
      36: invokevirtual #105                // Method getJCAContext:()Lcom/nimbusds/jose/jca/JCAContext;
      39: invokevirtual #109                // Method com/nimbusds/jose/jca/JCAContext.getProvider:()Ljava/security/Provider;
      42: invokestatic  #115                // Method com/nimbusds/jose/crypto/ECDSA.getSignerAndVerifier:(Lcom/nimbusds/jose/JWSAlgorithm;Ljava/security/Provider;)Ljava/security/Signature;
      45: astore        5
      47: aload         5
      49: aload_0
      50: getfield      #24                 // Field privateKey:Ljava/security/PrivateKey;
      53: aload_0
      54: invokevirtual #105                // Method getJCAContext:()Lcom/nimbusds/jose/jca/JCAContext;
      57: invokevirtual #119                // Method com/nimbusds/jose/jca/JCAContext.getSecureRandom:()Ljava/security/SecureRandom;
      60: invokevirtual #123                // Method java/security/Signature.initSign:(Ljava/security/PrivateKey;Ljava/security/SecureRandom;)V
      63: aload         5
      65: aload_2
      66: invokevirtual #129                // Method java/security/Signature.update:([B)V
      69: aload         5
      71: invokevirtual #133                // Method java/security/Signature.sign:()[B
      74: astore        4
      76: goto          96
      79: astore        5
      81: new           #12                 // class com/nimbusds/jose/JOSEException
      84: dup
      85: aload         5
      87: invokevirtual #136                // Method java/security/GeneralSecurityException.getMessage:()Ljava/lang/String;
      90: aload         5
      92: invokespecial #141                // Method com/nimbusds/jose/JOSEException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      95: athrow
      96: aload_1
      97: invokevirtual #84                 // Method com/nimbusds/jose/JWSHeader.getAlgorithm:()Lcom/nimbusds/jose/JWSAlgorithm;
     100: invokestatic  #144                // Method com/nimbusds/jose/crypto/ECDSA.getSignatureByteArrayLength:(Lcom/nimbusds/jose/JWSAlgorithm;)I
     103: istore        5
     105: aload         4
     107: iload         5
     109: invokestatic  #148                // Method com/nimbusds/jose/crypto/ECDSA.transcodeSignatureToConcat:([BI)[B
     112: astore        6
     114: aload         6
     116: invokestatic  #152                // Method com/nimbusds/jose/util/Base64URL.encode:([B)Lcom/nimbusds/jose/util/Base64URL;
     119: areturn
    Exception table:
       from    to  target type
          34    76    79   Class java/security/InvalidKeyException
          34    76    79   Class java/security/SignatureException

  public com.nimbusds.jose.jca.JCAContext getJCAContext();
    Code:
       0: aload_0
       1: invokespecial #179                // Method com/nimbusds/jose/crypto/ECDSAProvider.getJCAContext:()Lcom/nimbusds/jose/jca/JCAContext;
       4: areturn

  public java.util.Set supportedJWSAlgorithms();
    Code:
       0: aload_0
       1: invokespecial #180                // Method com/nimbusds/jose/crypto/ECDSAProvider.supportedJWSAlgorithms:()Ljava/util/Set;
       4: areturn
}
