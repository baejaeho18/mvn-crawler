Compiled from "BoundedInputStream.java"
public class com.nimbusds.jose.util.BoundedInputStream extends java.io.InputStream {
  private final java.io.InputStream in;

  private final long max;

  private long pos;

  private long mark;

  private boolean propagateClose;

  public com.nimbusds.jose.util.BoundedInputStream(java.io.InputStream, long);
    Code:
       0: aload_0
       1: invokespecial #16                 // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #19                 // Field pos:J
       9: aload_0
      10: ldc2_w        #21                 // long -1l
      13: putfield      #23                 // Field mark:J
      16: aload_0
      17: iconst_1
      18: putfield      #25                 // Field propagateClose:Z
      21: aload_0
      22: lload_2
      23: putfield      #27                 // Field max:J
      26: aload_0
      27: aload_1
      28: putfield      #29                 // Field in:Ljava/io/InputStream;
      31: return

  public com.nimbusds.jose.util.BoundedInputStream(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: ldc2_w        #21                 // long -1l
       5: invokespecial #37                 // Method "<init>":(Ljava/io/InputStream;J)V
       8: return

  public long getLimitBytes();
    Code:
       0: aload_0
       1: getfield      #27                 // Field max:J
       4: lreturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field max:J
       4: lconst_0
       5: lcmp
       6: iflt          53
       9: aload_0
      10: getfield      #19                 // Field pos:J
      13: aload_0
      14: getfield      #27                 // Field max:J
      17: lcmp
      18: iflt          53
      21: new           #44                 // class java/io/IOException
      24: dup
      25: new           #46                 // class java/lang/StringBuilder
      28: dup
      29: ldc           #48                 // String Exceeded configured input limit of
      31: invokespecial #50                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      34: aload_0
      35: getfield      #27                 // Field max:J
      38: invokevirtual #53                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      41: ldc           #57                 // String  bytes
      43: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #62                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokespecial #66                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_0
      54: getfield      #29                 // Field in:Ljava/io/InputStream;
      57: invokevirtual #67                 // Method java/io/InputStream.read:()I
      60: istore_1
      61: aload_0
      62: dup
      63: getfield      #19                 // Field pos:J
      66: lconst_1
      67: ladd
      68: putfield      #19                 // Field pos:J
      71: iload_1
      72: ireturn

  public int read(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #73                 // Method read:([BII)I
       8: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field max:J
       4: lconst_0
       5: lcmp
       6: iflt          53
       9: aload_0
      10: getfield      #19                 // Field pos:J
      13: aload_0
      14: getfield      #27                 // Field max:J
      17: lcmp
      18: iflt          53
      21: new           #44                 // class java/io/IOException
      24: dup
      25: new           #46                 // class java/lang/StringBuilder
      28: dup
      29: ldc           #48                 // String Exceeded configured input limit of
      31: invokespecial #50                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      34: aload_0
      35: getfield      #27                 // Field max:J
      38: invokevirtual #53                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      41: ldc           #57                 // String  bytes
      43: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #62                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokespecial #66                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_0
      54: getfield      #29                 // Field in:Ljava/io/InputStream;
      57: aload_1
      58: iload_2
      59: iload_3
      60: invokevirtual #78                 // Method java/io/InputStream.read:([BII)I
      63: istore        4
      65: iload         4
      67: iconst_m1
      68: if_icmpne     73
      71: iconst_m1
      72: ireturn
      73: aload_0
      74: dup
      75: getfield      #19                 // Field pos:J
      78: iload         4
      80: i2l
      81: ladd
      82: putfield      #19                 // Field pos:J
      85: aload_0
      86: getfield      #27                 // Field max:J
      89: lconst_0
      90: lcmp
      91: iflt          138
      94: aload_0
      95: getfield      #19                 // Field pos:J
      98: aload_0
      99: getfield      #27                 // Field max:J
     102: lcmp
     103: iflt          138
     106: new           #44                 // class java/io/IOException
     109: dup
     110: new           #46                 // class java/lang/StringBuilder
     113: dup
     114: ldc           #48                 // String Exceeded configured input limit of
     116: invokespecial #50                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
     119: aload_0
     120: getfield      #27                 // Field max:J
     123: invokevirtual #53                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     126: ldc           #57                 // String  bytes
     128: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: invokevirtual #62                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     134: invokespecial #66                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     137: athrow
     138: iload         4
     140: ireturn

  public long skip(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field max:J
       4: lconst_0
       5: lcmp
       6: iflt          25
       9: lload_1
      10: aload_0
      11: getfield      #27                 // Field max:J
      14: aload_0
      15: getfield      #19                 // Field pos:J
      18: lsub
      19: invokestatic  #84                 // Method java/lang/Math.min:(JJ)J
      22: goto          26
      25: lload_1
      26: lstore_3
      27: aload_0
      28: getfield      #29                 // Field in:Ljava/io/InputStream;
      31: lload_3
      32: invokevirtual #90                 // Method java/io/InputStream.skip:(J)J
      35: lstore        5
      37: aload_0
      38: dup
      39: getfield      #19                 // Field pos:J
      42: lload         5
      44: ladd
      45: putfield      #19                 // Field pos:J
      48: lload         5
      50: lreturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field max:J
       4: lconst_0
       5: lcmp
       6: iflt          25
       9: aload_0
      10: getfield      #19                 // Field pos:J
      13: aload_0
      14: getfield      #27                 // Field max:J
      17: lcmp
      18: iflt          25
      21: iconst_0
      22: goto          32
      25: aload_0
      26: getfield      #29                 // Field in:Ljava/io/InputStream;
      29: invokevirtual #96                 // Method java/io/InputStream.available:()I
      32: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #29                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #98                 // Method java/lang/Object.toString:()Ljava/lang/String;
       7: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #25                 // Field propagateClose:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #29                 // Field in:Ljava/io/InputStream;
      11: invokevirtual #102                // Method java/io/InputStream.close:()V
      14: return

  public synchronized void reset() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #29                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #105                // Method java/io/InputStream.reset:()V
       7: aload_0
       8: aload_0
       9: getfield      #23                 // Field mark:J
      12: putfield      #19                 // Field pos:J
      15: return

  public synchronized void mark(int);
    Code:
       0: aload_0
       1: getfield      #29                 // Field in:Ljava/io/InputStream;
       4: iload_1
       5: invokevirtual #108                // Method java/io/InputStream.mark:(I)V
       8: aload_0
       9: aload_0
      10: getfield      #19                 // Field pos:J
      13: putfield      #23                 // Field mark:J
      16: return

  public boolean markSupported();
    Code:
       0: aload_0
       1: getfield      #29                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #113                // Method java/io/InputStream.markSupported:()Z
       7: ireturn

  public boolean isPropagateClose();
    Code:
       0: aload_0
       1: getfield      #25                 // Field propagateClose:Z
       4: ireturn

  public void setPropagateClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #25                 // Field propagateClose:Z
       5: return
}
