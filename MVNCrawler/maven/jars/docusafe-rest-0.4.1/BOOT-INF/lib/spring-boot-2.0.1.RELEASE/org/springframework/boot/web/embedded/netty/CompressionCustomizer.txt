Compiled from "CompressionCustomizer.java"
final class org.springframework.boot.web.embedded.netty.CompressionCustomizer implements org.springframework.boot.web.embedded.netty.NettyServerCustomizer {
  private static final org.springframework.boot.web.embedded.netty.CompressionCustomizer$CompressionPredicate ALWAYS_COMPRESS;

  private final org.springframework.boot.web.server.Compression compression;

  org.springframework.boot.web.embedded.netty.CompressionCustomizer(org.springframework.boot.web.server.Compression);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field compression:Lorg/springframework/boot/web/server/Compression;
       9: return

  public void customize(reactor.ipc.netty.http.server.HttpServerOptions$Builder);
    Code:
       0: aload_0
       1: getfield      #2                  // Field compression:Lorg/springframework/boot/web/server/Compression;
       4: invokevirtual #3                  // Method org/springframework/boot/web/server/Compression.getMinResponseSize:()I
       7: iflt          22
      10: aload_1
      11: aload_0
      12: getfield      #2                  // Field compression:Lorg/springframework/boot/web/server/Compression;
      15: invokevirtual #3                  // Method org/springframework/boot/web/server/Compression.getMinResponseSize:()I
      18: invokevirtual #4                  // Method reactor/ipc/netty/http/server/HttpServerOptions$Builder.compression:(I)Lreactor/ipc/netty/http/server/HttpServerOptions$Builder;
      21: pop
      22: aload_0
      23: aload_0
      24: getfield      #2                  // Field compression:Lorg/springframework/boot/web/server/Compression;
      27: invokevirtual #5                  // Method org/springframework/boot/web/server/Compression.getMimeTypes:()[Ljava/lang/String;
      30: invokespecial #6                  // Method getMimeTypesPredicate:([Ljava/lang/String;)Lorg/springframework/boot/web/embedded/netty/CompressionCustomizer$CompressionPredicate;
      33: astore_2
      34: aload_0
      35: aload_0
      36: getfield      #2                  // Field compression:Lorg/springframework/boot/web/server/Compression;
      39: invokevirtual #7                  // Method org/springframework/boot/web/server/Compression.getExcludedUserAgents:()[Ljava/lang/String;
      42: invokespecial #8                  // Method getExcludedUserAgentsPredicate:([Ljava/lang/String;)Lorg/springframework/boot/web/embedded/netty/CompressionCustomizer$CompressionPredicate;
      45: astore_3
      46: aload_1
      47: aload_2
      48: aload_3
      49: invokeinterface #9,  2            // InterfaceMethod org/springframework/boot/web/embedded/netty/CompressionCustomizer$CompressionPredicate.and:(Ljava/util/function/BiPredicate;)Ljava/util/function/BiPredicate;
      54: invokevirtual #10                 // Method reactor/ipc/netty/http/server/HttpServerOptions$Builder.compression:(Ljava/util/function/BiPredicate;)Lreactor/ipc/netty/http/server/HttpServerOptions$Builder;
      57: pop
      58: return

  private org.springframework.boot.web.embedded.netty.CompressionCustomizer$CompressionPredicate getMimeTypesPredicate(java.lang.String[]);
    Code:
       0: aload_1
       1: invokestatic  #11                 // Method org/springframework/util/ObjectUtils.isEmpty:([Ljava/lang/Object;)Z
       4: ifeq          11
       7: getstatic     #12                 // Field ALWAYS_COMPRESS:Lorg/springframework/boot/web/embedded/netty/CompressionCustomizer$CompressionPredicate;
      10: areturn
      11: aload_1
      12: invokedynamic #13,  0             // InvokeDynamic #0:test:([Ljava/lang/String;)Lorg/springframework/boot/web/embedded/netty/CompressionCustomizer$CompressionPredicate;
      17: areturn

  private org.springframework.boot.web.embedded.netty.CompressionCustomizer$CompressionPredicate getExcludedUserAgentsPredicate(java.lang.String[]);
    Code:
       0: aload_1
       1: invokestatic  #11                 // Method org/springframework/util/ObjectUtils.isEmpty:([Ljava/lang/Object;)Z
       4: ifeq          11
       7: getstatic     #12                 // Field ALWAYS_COMPRESS:Lorg/springframework/boot/web/embedded/netty/CompressionCustomizer$CompressionPredicate;
      10: areturn
      11: aload_1
      12: invokedynamic #14,  0             // InvokeDynamic #1:test:([Ljava/lang/String;)Lorg/springframework/boot/web/embedded/netty/CompressionCustomizer$CompressionPredicate;
      17: areturn

  private static boolean lambda$getExcludedUserAgentsPredicate$4(java.lang.String[], reactor.ipc.netty.http.server.HttpServerRequest, reactor.ipc.netty.http.server.HttpServerResponse);
    Code:
       0: aload_1
       1: invokeinterface #15,  1           // InterfaceMethod reactor/ipc/netty/http/server/HttpServerRequest.requestHeaders:()Lio/netty/handler/codec/http/HttpHeaders;
       6: astore_3
       7: aload_0
       8: invokestatic  #16                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      11: aload_3
      12: invokedynamic #17,  0             // InvokeDynamic #2:test:(Lio/netty/handler/codec/http/HttpHeaders;)Ljava/util/function/Predicate;
      17: invokeinterface #18,  2           // InterfaceMethod java/util/stream/Stream.noneMatch:(Ljava/util/function/Predicate;)Z
      22: ireturn

  private static boolean lambda$null$3(io.netty.handler.codec.http.HttpHeaders, java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #19                 // Field io/netty/handler/codec/http/HttpHeaderNames.USER_AGENT:Lio/netty/util/AsciiString;
       4: aload_1
       5: iconst_1
       6: invokevirtual #20                 // Method io/netty/handler/codec/http/HttpHeaders.contains:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Z)Z
       9: ireturn

  private static boolean lambda$getMimeTypesPredicate$2(java.lang.String[], reactor.ipc.netty.http.server.HttpServerRequest, reactor.ipc.netty.http.server.HttpServerResponse);
    Code:
       0: aload_2
       1: invokeinterface #21,  1           // InterfaceMethod reactor/ipc/netty/http/server/HttpServerResponse.responseHeaders:()Lio/netty/handler/codec/http/HttpHeaders;
       6: getstatic     #22                 // Field io/netty/handler/codec/http/HttpHeaderNames.CONTENT_TYPE:Lio/netty/util/AsciiString;
       9: invokevirtual #23                 // Method io/netty/handler/codec/http/HttpHeaders.get:(Ljava/lang/CharSequence;)Ljava/lang/String;
      12: astore_3
      13: aload_3
      14: invokestatic  #24                 // Method org/springframework/util/StringUtils.isEmpty:(Ljava/lang/Object;)Z
      17: ifeq          22
      20: iconst_0
      21: ireturn
      22: aload_3
      23: invokestatic  #25                 // Method org/springframework/util/MimeTypeUtils.parseMimeType:(Ljava/lang/String;)Lorg/springframework/util/MimeType;
      26: astore        4
      28: aload_0
      29: invokestatic  #16                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      32: invokedynamic #26,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      37: invokeinterface #27,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      42: aload         4
      44: invokedynamic #28,  0             // InvokeDynamic #4:test:(Lorg/springframework/util/MimeType;)Ljava/util/function/Predicate;
      49: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      54: ireturn

  private static boolean lambda$null$1(org.springframework.util.MimeType, org.springframework.util.MimeType);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #30                 // Method org/springframework/util/MimeType.isCompatibleWith:(Lorg/springframework/util/MimeType;)Z
       5: ireturn

  private static boolean lambda$static$0(reactor.ipc.netty.http.server.HttpServerRequest, reactor.ipc.netty.http.server.HttpServerResponse);
    Code:
       0: iconst_1
       1: ireturn

  static {};
    Code:
       0: invokedynamic #31,  0             // InvokeDynamic #5:test:()Lorg/springframework/boot/web/embedded/netty/CompressionCustomizer$CompressionPredicate;
       5: putstatic     #12                 // Field ALWAYS_COMPRESS:Lorg/springframework/boot/web/embedded/netty/CompressionCustomizer$CompressionPredicate;
       8: return
}
