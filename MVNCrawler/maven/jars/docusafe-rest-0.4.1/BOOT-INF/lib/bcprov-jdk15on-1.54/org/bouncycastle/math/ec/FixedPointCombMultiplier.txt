public class org.bouncycastle.math.ec.FixedPointCombMultiplier extends org.bouncycastle.math.ec.AbstractECMultiplier {
  public org.bouncycastle.math.ec.FixedPointCombMultiplier();
    Code:
       0: aload_0
       1: invokespecial #58                 // Method org/bouncycastle/math/ec/AbstractECMultiplier."<init>":()V
       4: return

  protected org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint, java.math.BigInteger);
    Code:
       0: aload_1
       1: invokevirtual #60                 // Method org/bouncycastle/math/ec/ECPoint.getCurve:()Lorg/bouncycastle/math/ec/ECCurve;
       4: astore_3
       5: aload_3
       6: invokestatic  #65                 // Method org/bouncycastle/math/ec/FixedPointUtil.getCombSize:(Lorg/bouncycastle/math/ec/ECCurve;)I
       9: istore        4
      11: aload_2
      12: invokevirtual #56                 // Method java/math/BigInteger.bitLength:()I
      15: iload         4
      17: if_icmple     30
      20: new           #27                 // class java/lang/IllegalStateException
      23: dup
      24: ldc           #1                  // String fixed-point comb doesn\'t support scalars larger than the curve order
      26: invokespecial #55                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: aload_0
      31: iload         4
      33: invokevirtual #62                 // Method getWidthForCombSize:(I)I
      36: istore        5
      38: aload_1
      39: iload         5
      41: invokestatic  #66                 // Method org/bouncycastle/math/ec/FixedPointUtil.precompute:(Lorg/bouncycastle/math/ec/ECPoint;I)Lorg/bouncycastle/math/ec/FixedPointPreCompInfo;
      44: astore        6
      46: aload         6
      48: invokevirtual #64                 // Method org/bouncycastle/math/ec/FixedPointPreCompInfo.getPreComp:()[Lorg/bouncycastle/math/ec/ECPoint;
      51: astore        7
      53: aload         6
      55: invokevirtual #63                 // Method org/bouncycastle/math/ec/FixedPointPreCompInfo.getWidth:()I
      58: istore        8
      60: iload         4
      62: iload         8
      64: iadd
      65: iconst_1
      66: isub
      67: iload         8
      69: idiv
      70: istore        9
      72: aload_3
      73: invokevirtual #59                 // Method org/bouncycastle/math/ec/ECCurve.getInfinity:()Lorg/bouncycastle/math/ec/ECPoint;
      76: astore        10
      78: iload         9
      80: iload         8
      82: imul
      83: iconst_1
      84: isub
      85: istore        11
      87: iconst_0
      88: istore        12
      90: iload         12
      92: iload         9
      94: if_icmpge     161
      97: iconst_0
      98: istore        13
     100: iload         11
     102: iload         12
     104: isub
     105: istore        14
     107: iload         14
     109: iflt          143
     112: iload         13
     114: iconst_1
     115: ishl
     116: istore        13
     118: aload_2
     119: iload         14
     121: invokevirtual #57                 // Method java/math/BigInteger.testBit:(I)Z
     124: ifeq          133
     127: iload         13
     129: iconst_1
     130: ior
     131: istore        13
     133: iload         14
     135: iload         9
     137: isub
     138: istore        14
     140: goto          107
     143: aload         10
     145: aload         7
     147: iload         13
     149: aaload
     150: invokevirtual #61                 // Method org/bouncycastle/math/ec/ECPoint.twicePlus:(Lorg/bouncycastle/math/ec/ECPoint;)Lorg/bouncycastle/math/ec/ECPoint;
     153: astore        10
     155: iinc          12, 1
     158: goto          90
     161: aload         10
     163: areturn

  protected int getWidthForCombSize(int);
    Code:
       0: iload_1
       1: sipush        257
       4: if_icmple     12
       7: bipush        6
       9: goto          13
      12: iconst_5
      13: ireturn
}
