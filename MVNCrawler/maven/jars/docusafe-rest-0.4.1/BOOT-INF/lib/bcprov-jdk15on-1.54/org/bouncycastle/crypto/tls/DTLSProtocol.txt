public abstract class org.bouncycastle.crypto.tls.DTLSProtocol {
  protected final java.security.SecureRandom secureRandom;

  protected org.bouncycastle.crypto.tls.DTLSProtocol(java.security.SecureRandom);
    Code:
       0: aload_0
       1: invokespecial #91                 // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #48                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #1                  // String \'secureRandom\' cannot be null
      14: invokespecial #90                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #86                 // Field secureRandom:Ljava/security/SecureRandom;
      23: return

  protected void processFinished(byte[], byte[]) throws java.io.IOException;
    Code:
       0: new           #45                 // class java/io/ByteArrayInputStream
       3: dup
       4: aload_1
       5: invokespecial #87                 // Method java/io/ByteArrayInputStream."<init>":([B)V
       8: astore_3
       9: aload_2
      10: arraylength
      11: aload_3
      12: invokestatic  #100                // Method org/bouncycastle/crypto/tls/TlsUtils.readFully:(ILjava/io/InputStream;)[B
      15: astore        4
      17: aload_3
      18: invokestatic  #97                 // Method org/bouncycastle/crypto/tls/TlsProtocol.assertEmpty:(Ljava/io/ByteArrayInputStream;)V
      21: aload_2
      22: aload         4
      24: invokestatic  #101                // Method org/bouncycastle/util/Arrays.constantTimeAreEqual:([B[B)Z
      27: ifne          40
      30: new           #55                 // class org/bouncycastle/crypto/tls/TlsFatalAlert
      33: dup
      34: bipush        40
      36: invokespecial #96                 // Method org/bouncycastle/crypto/tls/TlsFatalAlert."<init>":(S)V
      39: athrow
      40: return

  protected static void applyMaxFragmentLengthExtension(org.bouncycastle.crypto.tls.DTLSRecordLayer, short) throws java.io.IOException;
    Code:
       0: iload_1
       1: iflt          33
       4: iload_1
       5: invokestatic  #94                 // Method org/bouncycastle/crypto/tls/MaxFragmentLength.isValid:(S)Z
       8: ifne          21
      11: new           #55                 // class org/bouncycastle/crypto/tls/TlsFatalAlert
      14: dup
      15: bipush        80
      17: invokespecial #96                 // Method org/bouncycastle/crypto/tls/TlsFatalAlert."<init>":(S)V
      20: athrow
      21: iconst_1
      22: bipush        8
      24: iload_1
      25: iadd
      26: ishl
      27: istore_2
      28: aload_0
      29: iload_2
      30: invokevirtual #93                 // Method org/bouncycastle/crypto/tls/DTLSRecordLayer.setPlaintextLimit:(I)V
      33: return

  protected static short evaluateMaxFragmentLengthExtension(boolean, java.util.Hashtable, java.util.Hashtable, short) throws java.io.IOException;
    Code:
       0: aload_2
       1: invokestatic  #95                 // Method org/bouncycastle/crypto/tls/TlsExtensionsUtils.getMaxFragmentLengthExtension:(Ljava/util/Hashtable;)S
       4: istore        4
       6: iload         4
       8: iflt          41
      11: iload         4
      13: invokestatic  #94                 // Method org/bouncycastle/crypto/tls/MaxFragmentLength.isValid:(S)Z
      16: ifeq          32
      19: iload_0
      20: ifne          41
      23: iload         4
      25: aload_1
      26: invokestatic  #95                 // Method org/bouncycastle/crypto/tls/TlsExtensionsUtils.getMaxFragmentLengthExtension:(Ljava/util/Hashtable;)S
      29: if_icmpeq     41
      32: new           #55                 // class org/bouncycastle/crypto/tls/TlsFatalAlert
      35: dup
      36: iload_3
      37: invokespecial #96                 // Method org/bouncycastle/crypto/tls/TlsFatalAlert."<init>":(S)V
      40: athrow
      41: iload         4
      43: ireturn

  protected static byte[] generateCertificate(org.bouncycastle.crypto.tls.Certificate) throws java.io.IOException;
    Code:
       0: new           #46                 // class java/io/ByteArrayOutputStream
       3: dup
       4: invokespecial #88                 // Method java/io/ByteArrayOutputStream."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_1
      10: invokevirtual #92                 // Method org/bouncycastle/crypto/tls/Certificate.encode:(Ljava/io/OutputStream;)V
      13: aload_1
      14: invokevirtual #89                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B
      17: areturn

  protected static byte[] generateSupplementalData(java.util.Vector) throws java.io.IOException;
    Code:
       0: new           #46                 // class java/io/ByteArrayOutputStream
       3: dup
       4: invokespecial #88                 // Method java/io/ByteArrayOutputStream."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokestatic  #98                 // Method org/bouncycastle/crypto/tls/TlsProtocol.writeSupplementalData:(Ljava/io/OutputStream;Ljava/util/Vector;)V
      13: aload_1
      14: invokevirtual #89                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B
      17: areturn

  protected static void validateSelectedCipherSuite(int, short) throws java.io.IOException;
    Code:
       0: iload_0
       1: invokestatic  #99                 // Method org/bouncycastle/crypto/tls/TlsUtils.getEncryptionAlgorithm:(I)I
       4: lookupswitch  { // 2
                     1: 32
                     2: 32
               default: 41
          }
      32: new           #55                 // class org/bouncycastle/crypto/tls/TlsFatalAlert
      35: dup
      36: iload_1
      37: invokespecial #96                 // Method org/bouncycastle/crypto/tls/TlsFatalAlert."<init>":(S)V
      40: athrow
      41: return
}
