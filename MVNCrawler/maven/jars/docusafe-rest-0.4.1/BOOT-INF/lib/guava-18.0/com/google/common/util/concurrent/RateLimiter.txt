Compiled from "RateLimiter.java"
public abstract class com.google.common.util.concurrent.RateLimiter {
  private final com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch;

  private volatile java.lang.Object mutexDoNotUseDirectly;

  public static com.google.common.util.concurrent.RateLimiter create(double);
    Code:
       0: invokestatic  #1                  // Method com/google/common/util/concurrent/RateLimiter$SleepingStopwatch.createFromSystemTimer:()Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;
       3: dload_0
       4: invokestatic  #2                  // Method create:(Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;D)Lcom/google/common/util/concurrent/RateLimiter;
       7: areturn

  static com.google.common.util.concurrent.RateLimiter create(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch, double);
    Code:
       0: new           #3                  // class com/google/common/util/concurrent/SmoothRateLimiter$SmoothBursty
       3: dup
       4: aload_0
       5: dconst_1
       6: invokespecial #4                  // Method com/google/common/util/concurrent/SmoothRateLimiter$SmoothBursty."<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;D)V
       9: astore_3
      10: aload_3
      11: dload_1
      12: invokevirtual #5                  // Method setRate:(D)V
      15: aload_3
      16: areturn

  public static com.google.common.util.concurrent.RateLimiter create(double, long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_2
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ldc           #6                  // String warmupPeriod must not be negative: %s
      13: iconst_1
      14: anewarray     #7                  // class java/lang/Object
      17: dup
      18: iconst_0
      19: lload_2
      20: invokestatic  #8                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      23: aastore
      24: invokestatic  #9                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      27: invokestatic  #1                  // Method com/google/common/util/concurrent/RateLimiter$SleepingStopwatch.createFromSystemTimer:()Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;
      30: dload_0
      31: lload_2
      32: aload         4
      34: invokestatic  #10                 // Method create:(Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;DJLjava/util/concurrent/TimeUnit;)Lcom/google/common/util/concurrent/RateLimiter;
      37: areturn

  static com.google.common.util.concurrent.RateLimiter create(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch, double, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #11                 // class com/google/common/util/concurrent/SmoothRateLimiter$SmoothWarmingUp
       3: dup
       4: aload_0
       5: lload_3
       6: aload         5
       8: invokespecial #12                 // Method com/google/common/util/concurrent/SmoothRateLimiter$SmoothWarmingUp."<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;JLjava/util/concurrent/TimeUnit;)V
      11: astore        6
      13: aload         6
      15: dload_1
      16: invokevirtual #5                  // Method setRate:(D)V
      19: aload         6
      21: areturn

  private java.lang.Object mutex();
    Code:
       0: aload_0
       1: getfield      #13                 // Field mutexDoNotUseDirectly:Ljava/lang/Object;
       4: astore_1
       5: aload_1
       6: ifnonnull     45
       9: aload_0
      10: dup
      11: astore_2
      12: monitorenter
      13: aload_0
      14: getfield      #13                 // Field mutexDoNotUseDirectly:Ljava/lang/Object;
      17: astore_1
      18: aload_1
      19: ifnonnull     35
      22: aload_0
      23: new           #7                  // class java/lang/Object
      26: dup
      27: invokespecial #14                 // Method java/lang/Object."<init>":()V
      30: dup
      31: astore_1
      32: putfield      #13                 // Field mutexDoNotUseDirectly:Ljava/lang/Object;
      35: aload_2
      36: monitorexit
      37: goto          45
      40: astore_3
      41: aload_2
      42: monitorexit
      43: aload_3
      44: athrow
      45: aload_1
      46: areturn
    Exception table:
       from    to  target type
          13    37    40   any
          40    43    40   any

  com.google.common.util.concurrent.RateLimiter(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #16                 // class com/google/common/util/concurrent/RateLimiter$SleepingStopwatch
      12: putfield      #17                 // Field stopwatch:Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;
      15: return

  public final void setRate(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpl
       3: ifle          17
       6: dload_1
       7: invokestatic  #18                 // Method java/lang/Double.isNaN:(D)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ldc           #19                 // String rate must be positive
      20: invokestatic  #20                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      23: aload_0
      24: invokespecial #21                 // Method mutex:()Ljava/lang/Object;
      27: dup
      28: astore_3
      29: monitorenter
      30: aload_0
      31: dload_1
      32: aload_0
      33: getfield      #17                 // Field stopwatch:Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;
      36: invokevirtual #22                 // Method com/google/common/util/concurrent/RateLimiter$SleepingStopwatch.readMicros:()J
      39: invokevirtual #23                 // Method doSetRate:(DJ)V
      42: aload_3
      43: monitorexit
      44: goto          54
      47: astore        4
      49: aload_3
      50: monitorexit
      51: aload         4
      53: athrow
      54: return
    Exception table:
       from    to  target type
          30    44    47   any
          47    51    47   any

  abstract void doSetRate(double, long);

  public final double getRate();
    Code:
       0: aload_0
       1: invokespecial #21                 // Method mutex:()Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: invokevirtual #24                 // Method doGetRate:()D
      11: aload_1
      12: monitorexit
      13: dreturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  abstract double doGetRate();

  public double acquire();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #25                 // Method acquire:(I)D
       5: dreturn

  public double acquire(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #26                 // Method reserve:(I)J
       5: lstore_2
       6: aload_0
       7: getfield      #17                 // Field stopwatch:Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;
      10: lload_2
      11: invokevirtual #27                 // Method com/google/common/util/concurrent/RateLimiter$SleepingStopwatch.sleepMicrosUninterruptibly:(J)V
      14: dconst_1
      15: lload_2
      16: l2d
      17: dmul
      18: getstatic     #28                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      21: lconst_1
      22: invokevirtual #29                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
      25: l2d
      26: ddiv
      27: dreturn

  final long reserve(int);
    Code:
       0: iload_1
       1: invokestatic  #30                 // Method checkPermits:(I)I
       4: pop
       5: aload_0
       6: invokespecial #21                 // Method mutex:()Ljava/lang/Object;
       9: dup
      10: astore_2
      11: monitorenter
      12: aload_0
      13: iload_1
      14: aload_0
      15: getfield      #17                 // Field stopwatch:Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;
      18: invokevirtual #22                 // Method com/google/common/util/concurrent/RateLimiter$SleepingStopwatch.readMicros:()J
      21: invokevirtual #31                 // Method reserveAndGetWaitLength:(IJ)J
      24: aload_2
      25: monitorexit
      26: lreturn
      27: astore_3
      28: aload_2
      29: monitorexit
      30: aload_3
      31: athrow
    Exception table:
       from    to  target type
          12    26    27   any
          27    30    27   any

  public boolean tryAcquire(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: iconst_1
       2: lload_1
       3: aload_3
       4: invokevirtual #32                 // Method tryAcquire:(IJLjava/util/concurrent/TimeUnit;)Z
       7: ireturn

  public boolean tryAcquire(int);
    Code:
       0: aload_0
       1: iload_1
       2: lconst_0
       3: getstatic     #33                 // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
       6: invokevirtual #32                 // Method tryAcquire:(IJLjava/util/concurrent/TimeUnit;)Z
       9: ireturn

  public boolean tryAcquire();
    Code:
       0: aload_0
       1: iconst_1
       2: lconst_0
       3: getstatic     #33                 // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
       6: invokevirtual #32                 // Method tryAcquire:(IJLjava/util/concurrent/TimeUnit;)Z
       9: ireturn

  public boolean tryAcquire(int, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload         4
       2: lload_2
       3: invokevirtual #29                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
       6: lconst_0
       7: invokestatic  #34                 // Method java/lang/Math.max:(JJ)J
      10: lstore        5
      12: iload_1
      13: invokestatic  #30                 // Method checkPermits:(I)I
      16: pop
      17: aload_0
      18: invokespecial #21                 // Method mutex:()Ljava/lang/Object;
      21: dup
      22: astore        9
      24: monitorenter
      25: aload_0
      26: getfield      #17                 // Field stopwatch:Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;
      29: invokevirtual #22                 // Method com/google/common/util/concurrent/RateLimiter$SleepingStopwatch.readMicros:()J
      32: lstore        10
      34: aload_0
      35: lload         10
      37: lload         5
      39: invokespecial #35                 // Method canAcquire:(JJ)Z
      42: ifne          50
      45: iconst_0
      46: aload         9
      48: monitorexit
      49: ireturn
      50: aload_0
      51: iload_1
      52: lload         10
      54: invokevirtual #31                 // Method reserveAndGetWaitLength:(IJ)J
      57: lstore        7
      59: aload         9
      61: monitorexit
      62: goto          73
      65: astore        12
      67: aload         9
      69: monitorexit
      70: aload         12
      72: athrow
      73: aload_0
      74: getfield      #17                 // Field stopwatch:Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;
      77: lload         7
      79: invokevirtual #27                 // Method com/google/common/util/concurrent/RateLimiter$SleepingStopwatch.sleepMicrosUninterruptibly:(J)V
      82: iconst_1
      83: ireturn
    Exception table:
       from    to  target type
          25    49    65   any
          50    62    65   any
          65    70    65   any

  private boolean canAcquire(long, long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #36                 // Method queryEarliestAvailable:(J)J
       5: lload_3
       6: lsub
       7: lload_1
       8: lcmp
       9: ifgt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  final long reserveAndGetWaitLength(int, long);
    Code:
       0: aload_0
       1: iload_1
       2: lload_2
       3: invokevirtual #37                 // Method reserveEarliestAvailable:(IJ)J
       6: lstore        4
       8: lload         4
      10: lload_2
      11: lsub
      12: lconst_0
      13: invokestatic  #34                 // Method java/lang/Math.max:(JJ)J
      16: lreturn

  abstract long queryEarliestAvailable(long);

  abstract long reserveEarliestAvailable(int, long);

  public java.lang.String toString();
    Code:
       0: ldc           #38                 // String RateLimiter[stableRate=%3.1fqps]
       2: iconst_1
       3: anewarray     #7                  // class java/lang/Object
       6: dup
       7: iconst_0
       8: aload_0
       9: invokevirtual #39                 // Method getRate:()D
      12: invokestatic  #40                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      15: aastore
      16: invokestatic  #41                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      19: areturn

  private static int checkPermits(int);
    Code:
       0: iload_0
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #42                 // String Requested permits (%s) must be positive
      11: iconst_1
      12: anewarray     #7                  // class java/lang/Object
      15: dup
      16: iconst_0
      17: iload_0
      18: invokestatic  #43                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      21: aastore
      22: invokestatic  #9                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      25: iload_0
      26: ireturn
}
