Compiled from "CycleDetectingLockFactory.java"
public final class com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException extends com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace {
  private final com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace conflictingStackTrace;

  private com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #2                  // Method com/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace."<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;)V
       6: aload_0
       7: aload_3
       8: putfield      #3                  // Field conflictingStackTrace:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;
      11: aload_0
      12: aload_3
      13: invokevirtual #4                  // Method initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      16: pop
      17: return

  public com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace getConflictingStackTrace();
    Code:
       0: aload_0
       1: getfield      #3                  // Field conflictingStackTrace:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;
       4: areturn

  public java.lang.String getMessage();
    Code:
       0: new           #5                  // class java/lang/StringBuilder
       3: dup
       4: aload_0
       5: invokespecial #6                  // Method com/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace.getMessage:()Ljava/lang/String;
       8: invokespecial #7                  // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      11: astore_1
      12: aload_0
      13: getfield      #3                  // Field conflictingStackTrace:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;
      16: astore_2
      17: aload_2
      18: ifnull        43
      21: aload_1
      22: ldc           #8                  // String ,
      24: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_2
      28: invokevirtual #10                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      31: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: pop
      35: aload_2
      36: invokevirtual #11                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      39: astore_2
      40: goto          17
      43: aload_1
      44: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: areturn

  com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace, com.google.common.util.concurrent.CycleDetectingLockFactory$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method "<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;)V
       7: return
}
