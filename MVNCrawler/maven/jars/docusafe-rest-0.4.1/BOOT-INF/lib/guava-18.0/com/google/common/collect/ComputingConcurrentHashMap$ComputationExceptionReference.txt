Compiled from "ComputingConcurrentHashMap.java"
final class com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference<K, V> implements com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> {
  final java.lang.Throwable t;

  com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field t:Ljava/lang/Throwable;
       9: return

  public V get();
    Code:
       0: aconst_null
       1: areturn

  public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry();
    Code:
       0: aconst_null
       1: areturn

  public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: areturn

  public boolean isComputingReference();
    Code:
       0: iconst_0
       1: ireturn

  public V waitForValue() throws java.util.concurrent.ExecutionException;
    Code:
       0: new           #3                  // class java/util/concurrent/ExecutionException
       3: dup
       4: aload_0
       5: getfield      #2                  // Field t:Ljava/lang/Throwable;
       8: invokespecial #4                  // Method java/util/concurrent/ExecutionException."<init>":(Ljava/lang/Throwable;)V
      11: athrow

  public void clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>);
    Code:
       0: return
}
