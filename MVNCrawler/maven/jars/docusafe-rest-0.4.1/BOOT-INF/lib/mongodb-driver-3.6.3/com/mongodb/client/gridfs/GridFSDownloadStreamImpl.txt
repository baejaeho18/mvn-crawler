Compiled from "GridFSDownloadStreamImpl.java"
class com.mongodb.client.gridfs.GridFSDownloadStreamImpl extends com.mongodb.client.gridfs.GridFSDownloadStream {
  private final com.mongodb.session.ClientSession clientSession;

  private final com.mongodb.client.gridfs.model.GridFSFile fileInfo;

  private final com.mongodb.client.MongoCollection<org.bson.Document> chunksCollection;

  private final org.bson.BsonValue fileId;

  private final long length;

  private final int chunkSizeInBytes;

  private final int numberOfChunks;

  private com.mongodb.client.MongoCursor<org.bson.Document> cursor;

  private int batchSize;

  private int chunkIndex;

  private int bufferOffset;

  private long currentPosition;

  private byte[] buffer;

  private long markPosition;

  private final java.lang.Object closeLock;

  private final java.lang.Object cursorLock;

  private boolean closed;

  com.mongodb.client.gridfs.GridFSDownloadStreamImpl(com.mongodb.session.ClientSession, com.mongodb.client.gridfs.model.GridFSFile, com.mongodb.client.MongoCollection<org.bson.Document>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/mongodb/client/gridfs/GridFSDownloadStream."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field buffer:[B
       9: aload_0
      10: new           #3                  // class java/lang/Object
      13: dup
      14: invokespecial #4                  // Method java/lang/Object."<init>":()V
      17: putfield      #5                  // Field closeLock:Ljava/lang/Object;
      20: aload_0
      21: new           #3                  // class java/lang/Object
      24: dup
      25: invokespecial #4                  // Method java/lang/Object."<init>":()V
      28: putfield      #6                  // Field cursorLock:Ljava/lang/Object;
      31: aload_0
      32: iconst_0
      33: putfield      #7                  // Field closed:Z
      36: aload_0
      37: aload_1
      38: putfield      #8                  // Field clientSession:Lcom/mongodb/session/ClientSession;
      41: aload_0
      42: ldc           #9                  // String file information
      44: aload_2
      45: invokestatic  #10                 // Method com/mongodb/assertions/Assertions.notNull:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      48: checkcast     #11                 // class com/mongodb/client/gridfs/model/GridFSFile
      51: putfield      #12                 // Field fileInfo:Lcom/mongodb/client/gridfs/model/GridFSFile;
      54: aload_0
      55: ldc           #13                 // String chunks collection
      57: aload_3
      58: invokestatic  #10                 // Method com/mongodb/assertions/Assertions.notNull:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      61: checkcast     #14                 // class com/mongodb/client/MongoCollection
      64: putfield      #15                 // Field chunksCollection:Lcom/mongodb/client/MongoCollection;
      67: aload_0
      68: aload_2
      69: invokevirtual #16                 // Method com/mongodb/client/gridfs/model/GridFSFile.getId:()Lorg/bson/BsonValue;
      72: putfield      #17                 // Field fileId:Lorg/bson/BsonValue;
      75: aload_0
      76: aload_2
      77: invokevirtual #18                 // Method com/mongodb/client/gridfs/model/GridFSFile.getLength:()J
      80: putfield      #19                 // Field length:J
      83: aload_0
      84: aload_2
      85: invokevirtual #20                 // Method com/mongodb/client/gridfs/model/GridFSFile.getChunkSize:()I
      88: putfield      #21                 // Field chunkSizeInBytes:I
      91: aload_0
      92: aload_0
      93: getfield      #19                 // Field length:J
      96: l2d
      97: aload_0
      98: getfield      #21                 // Field chunkSizeInBytes:I
     101: i2d
     102: ddiv
     103: invokestatic  #22                 // Method java/lang/Math.ceil:(D)D
     106: d2i
     107: putfield      #23                 // Field numberOfChunks:I
     110: return

  public com.mongodb.client.gridfs.model.GridFSFile getGridFSFile();
    Code:
       0: aload_0
       1: getfield      #12                 // Field fileInfo:Lcom/mongodb/client/gridfs/model/GridFSFile;
       4: areturn

  public com.mongodb.client.gridfs.GridFSDownloadStream batchSize(int);
    Code:
       0: ldc           #24                 // String batchSize cannot be negative
       2: iload_1
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: invokestatic  #25                 // Method com/mongodb/assertions/Assertions.isTrueArgument:(Ljava/lang/String;Z)V
      14: aload_0
      15: iload_1
      16: putfield      #26                 // Field batchSize:I
      19: aload_0
      20: invokespecial #27                 // Method discardCursor:()V
      23: aload_0
      24: areturn

  public int read();
    Code:
       0: iconst_1
       1: newarray       byte
       3: astore_1
       4: aload_0
       5: aload_1
       6: invokevirtual #28                 // Method read:([B)I
       9: istore_2
      10: iload_2
      11: ifge          16
      14: iconst_m1
      15: ireturn
      16: aload_1
      17: iconst_0
      18: baload
      19: sipush        255
      22: iand
      23: ireturn

  public int read(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #29                 // Method read:([BII)I
       8: ireturn

  public int read(byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method checkClosed:()V
       4: aload_0
       5: getfield      #31                 // Field currentPosition:J
       8: aload_0
       9: getfield      #19                 // Field length:J
      12: lcmp
      13: ifne          18
      16: iconst_m1
      17: ireturn
      18: aload_0
      19: getfield      #2                  // Field buffer:[B
      22: ifnonnull     40
      25: aload_0
      26: aload_0
      27: aload_0
      28: getfield      #32                 // Field chunkIndex:I
      31: invokespecial #33                 // Method getBuffer:(I)[B
      34: putfield      #2                  // Field buffer:[B
      37: goto          79
      40: aload_0
      41: getfield      #34                 // Field bufferOffset:I
      44: aload_0
      45: getfield      #2                  // Field buffer:[B
      48: arraylength
      49: if_icmpne     79
      52: aload_0
      53: dup
      54: getfield      #32                 // Field chunkIndex:I
      57: iconst_1
      58: iadd
      59: putfield      #32                 // Field chunkIndex:I
      62: aload_0
      63: aload_0
      64: aload_0
      65: getfield      #32                 // Field chunkIndex:I
      68: invokespecial #33                 // Method getBuffer:(I)[B
      71: putfield      #2                  // Field buffer:[B
      74: aload_0
      75: iconst_0
      76: putfield      #34                 // Field bufferOffset:I
      79: iload_3
      80: aload_0
      81: getfield      #2                  // Field buffer:[B
      84: arraylength
      85: aload_0
      86: getfield      #34                 // Field bufferOffset:I
      89: isub
      90: invokestatic  #35                 // Method java/lang/Math.min:(II)I
      93: istore        4
      95: aload_0
      96: getfield      #2                  // Field buffer:[B
      99: aload_0
     100: getfield      #34                 // Field bufferOffset:I
     103: aload_1
     104: iload_2
     105: iload         4
     107: invokestatic  #36                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     110: aload_0
     111: dup
     112: getfield      #34                 // Field bufferOffset:I
     115: iload         4
     117: iadd
     118: putfield      #34                 // Field bufferOffset:I
     121: aload_0
     122: dup
     123: getfield      #31                 // Field currentPosition:J
     126: iload         4
     128: i2l
     129: ladd
     130: putfield      #31                 // Field currentPosition:J
     133: iload         4
     135: ireturn

  public long skip(long);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method checkClosed:()V
       4: lload_1
       5: lconst_0
       6: lcmp
       7: ifgt          12
      10: lconst_0
      11: lreturn
      12: aload_0
      13: getfield      #31                 // Field currentPosition:J
      16: lload_1
      17: ladd
      18: lstore_3
      19: aload_0
      20: lload_3
      21: aload_0
      22: getfield      #21                 // Field chunkSizeInBytes:I
      25: i2l
      26: lrem
      27: l2i
      28: putfield      #34                 // Field bufferOffset:I
      31: lload_3
      32: aload_0
      33: getfield      #19                 // Field length:J
      36: lcmp
      37: iflt          81
      40: aload_0
      41: getfield      #19                 // Field length:J
      44: aload_0
      45: getfield      #31                 // Field currentPosition:J
      48: lsub
      49: lstore        5
      51: aload_0
      52: aload_0
      53: getfield      #23                 // Field numberOfChunks:I
      56: iconst_1
      57: isub
      58: putfield      #32                 // Field chunkIndex:I
      61: aload_0
      62: aload_0
      63: getfield      #19                 // Field length:J
      66: putfield      #31                 // Field currentPosition:J
      69: aload_0
      70: aconst_null
      71: putfield      #2                  // Field buffer:[B
      74: aload_0
      75: invokespecial #27                 // Method discardCursor:()V
      78: lload         5
      80: lreturn
      81: lload_3
      82: l2d
      83: aload_0
      84: getfield      #21                 // Field chunkSizeInBytes:I
      87: i2d
      88: ddiv
      89: invokestatic  #37                 // Method java/lang/Math.floor:(D)D
      92: d2i
      93: istore        5
      95: aload_0
      96: getfield      #32                 // Field chunkIndex:I
      99: iload         5
     101: if_icmpeq     119
     104: aload_0
     105: iload         5
     107: putfield      #32                 // Field chunkIndex:I
     110: aload_0
     111: aconst_null
     112: putfield      #2                  // Field buffer:[B
     115: aload_0
     116: invokespecial #27                 // Method discardCursor:()V
     119: aload_0
     120: dup
     121: getfield      #31                 // Field currentPosition:J
     124: lload_1
     125: ladd
     126: putfield      #31                 // Field currentPosition:J
     129: lload_1
     130: lreturn

  public int available();
    Code:
       0: aload_0
       1: invokespecial #30                 // Method checkClosed:()V
       4: aload_0
       5: getfield      #2                  // Field buffer:[B
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: getfield      #2                  // Field buffer:[B
      17: arraylength
      18: aload_0
      19: getfield      #34                 // Field bufferOffset:I
      22: isub
      23: ireturn

  public void mark();
    Code:
       0: aload_0
       1: ldc           #39                 // int 2147483647
       3: invokevirtual #40                 // Method mark:(I)V
       6: return

  public synchronized void mark(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #31                 // Field currentPosition:J
       5: putfield      #41                 // Field markPosition:J
       8: return

  public synchronized void reset();
    Code:
       0: aload_0
       1: invokespecial #30                 // Method checkClosed:()V
       4: aload_0
       5: getfield      #31                 // Field currentPosition:J
       8: aload_0
       9: getfield      #41                 // Field markPosition:J
      12: lcmp
      13: ifne          17
      16: return
      17: aload_0
      18: aload_0
      19: getfield      #41                 // Field markPosition:J
      22: aload_0
      23: getfield      #21                 // Field chunkSizeInBytes:I
      26: i2l
      27: lrem
      28: l2i
      29: putfield      #34                 // Field bufferOffset:I
      32: aload_0
      33: aload_0
      34: getfield      #41                 // Field markPosition:J
      37: putfield      #31                 // Field currentPosition:J
      40: aload_0
      41: getfield      #41                 // Field markPosition:J
      44: l2d
      45: aload_0
      46: getfield      #21                 // Field chunkSizeInBytes:I
      49: i2d
      50: ddiv
      51: invokestatic  #37                 // Method java/lang/Math.floor:(D)D
      54: d2i
      55: istore_1
      56: iload_1
      57: aload_0
      58: getfield      #32                 // Field chunkIndex:I
      61: if_icmpeq     79
      64: aload_0
      65: iload_1
      66: putfield      #32                 // Field chunkIndex:I
      69: aload_0
      70: aconst_null
      71: putfield      #2                  // Field buffer:[B
      74: aload_0
      75: aconst_null
      76: putfield      #42                 // Field cursor:Lcom/mongodb/client/MongoCursor;
      79: return

  public boolean markSupported();
    Code:
       0: iconst_1
       1: ireturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #5                  // Field closeLock:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #7                  // Field closed:Z
      11: ifne          19
      14: aload_0
      15: iconst_1
      16: putfield      #7                  // Field closed:Z
      19: aload_0
      20: invokespecial #27                 // Method discardCursor:()V
      23: aload_1
      24: monitorexit
      25: goto          33
      28: astore_2
      29: aload_1
      30: monitorexit
      31: aload_2
      32: athrow
      33: return
    Exception table:
       from    to  target type
           7    25    28   any
          28    31    28   any

  private void checkClosed();
    Code:
       0: aload_0
       1: getfield      #5                  // Field closeLock:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #7                  // Field closed:Z
      11: ifeq          24
      14: new           #43                 // class com/mongodb/MongoGridFSException
      17: dup
      18: ldc           #44                 // String The InputStream has been closed
      20: invokespecial #45                 // Method com/mongodb/MongoGridFSException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_1
      25: monitorexit
      26: goto          34
      29: astore_2
      30: aload_1
      31: monitorexit
      32: aload_2
      33: athrow
      34: return
    Exception table:
       from    to  target type
           7    26    29   any
          29    32    29   any

  private void discardCursor();
    Code:
       0: aload_0
       1: getfield      #6                  // Field cursorLock:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #42                 // Field cursor:Lcom/mongodb/client/MongoCursor;
      11: ifnull        28
      14: aload_0
      15: getfield      #42                 // Field cursor:Lcom/mongodb/client/MongoCursor;
      18: invokeinterface #46,  1           // InterfaceMethod com/mongodb/client/MongoCursor.close:()V
      23: aload_0
      24: aconst_null
      25: putfield      #42                 // Field cursor:Lcom/mongodb/client/MongoCursor;
      28: aload_1
      29: monitorexit
      30: goto          38
      33: astore_2
      34: aload_1
      35: monitorexit
      36: aload_2
      37: athrow
      38: return
    Exception table:
       from    to  target type
           7    30    33   any
          33    36    33   any

  private org.bson.Document getChunk(int);
    Code:
       0: aload_0
       1: getfield      #42                 // Field cursor:Lcom/mongodb/client/MongoCursor;
       4: ifnonnull     16
       7: aload_0
       8: aload_0
       9: iload_1
      10: invokespecial #47                 // Method getCursor:(I)Lcom/mongodb/client/MongoCursor;
      13: putfield      #42                 // Field cursor:Lcom/mongodb/client/MongoCursor;
      16: aconst_null
      17: astore_2
      18: aload_0
      19: getfield      #42                 // Field cursor:Lcom/mongodb/client/MongoCursor;
      22: invokeinterface #48,  1           // InterfaceMethod com/mongodb/client/MongoCursor.hasNext:()Z
      27: ifeq          99
      30: aload_0
      31: getfield      #42                 // Field cursor:Lcom/mongodb/client/MongoCursor;
      34: invokeinterface #49,  1           // InterfaceMethod com/mongodb/client/MongoCursor.next:()Ljava/lang/Object;
      39: checkcast     #50                 // class org/bson/Document
      42: astore_2
      43: aload_0
      44: getfield      #26                 // Field batchSize:I
      47: iconst_1
      48: if_icmpne     55
      51: aload_0
      52: invokespecial #27                 // Method discardCursor:()V
      55: aload_2
      56: ldc           #51                 // String n
      58: invokevirtual #52                 // Method org/bson/Document.getInteger:(Ljava/lang/Object;)Ljava/lang/Integer;
      61: invokevirtual #53                 // Method java/lang/Integer.intValue:()I
      64: iload_1
      65: if_icmpeq     99
      68: new           #43                 // class com/mongodb/MongoGridFSException
      71: dup
      72: ldc           #54                 // String Could not find file chunk for file_id: %s at chunk index %s.
      74: iconst_2
      75: anewarray     #3                  // class java/lang/Object
      78: dup
      79: iconst_0
      80: aload_0
      81: getfield      #17                 // Field fileId:Lorg/bson/BsonValue;
      84: aastore
      85: dup
      86: iconst_1
      87: iload_1
      88: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      91: aastore
      92: invokestatic  #56                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      95: invokespecial #45                 // Method com/mongodb/MongoGridFSException."<init>":(Ljava/lang/String;)V
      98: athrow
      99: aload_2
     100: areturn

  private com.mongodb.client.MongoCursor<org.bson.Document> getCursor(int);
    Code:
       0: new           #50                 // class org/bson/Document
       3: dup
       4: ldc           #57                 // String files_id
       6: aload_0
       7: getfield      #17                 // Field fileId:Lorg/bson/BsonValue;
      10: invokespecial #58                 // Method org/bson/Document."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
      13: ldc           #51                 // String n
      15: new           #50                 // class org/bson/Document
      18: dup
      19: ldc           #59                 // String $gte
      21: iload_1
      22: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      25: invokespecial #58                 // Method org/bson/Document."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
      28: invokevirtual #60                 // Method org/bson/Document.append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/bson/Document;
      31: astore_3
      32: aload_0
      33: getfield      #8                  // Field clientSession:Lcom/mongodb/session/ClientSession;
      36: ifnull        57
      39: aload_0
      40: getfield      #15                 // Field chunksCollection:Lcom/mongodb/client/MongoCollection;
      43: aload_0
      44: getfield      #8                  // Field clientSession:Lcom/mongodb/session/ClientSession;
      47: aload_3
      48: invokeinterface #61,  3           // InterfaceMethod com/mongodb/client/MongoCollection.find:(Lcom/mongodb/session/ClientSession;Lorg/bson/conversions/Bson;)Lcom/mongodb/client/FindIterable;
      53: astore_2
      54: goto          68
      57: aload_0
      58: getfield      #15                 // Field chunksCollection:Lcom/mongodb/client/MongoCollection;
      61: aload_3
      62: invokeinterface #62,  2           // InterfaceMethod com/mongodb/client/MongoCollection.find:(Lorg/bson/conversions/Bson;)Lcom/mongodb/client/FindIterable;
      67: astore_2
      68: aload_2
      69: aload_0
      70: getfield      #26                 // Field batchSize:I
      73: invokeinterface #63,  2           // InterfaceMethod com/mongodb/client/FindIterable.batchSize:(I)Lcom/mongodb/client/FindIterable;
      78: new           #50                 // class org/bson/Document
      81: dup
      82: ldc           #51                 // String n
      84: iconst_1
      85: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      88: invokespecial #58                 // Method org/bson/Document."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
      91: invokeinterface #64,  2           // InterfaceMethod com/mongodb/client/FindIterable.sort:(Lorg/bson/conversions/Bson;)Lcom/mongodb/client/FindIterable;
      96: invokeinterface #65,  1           // InterfaceMethod com/mongodb/client/FindIterable.iterator:()Lcom/mongodb/client/MongoCursor;
     101: areturn

  private byte[] getBufferFromChunk(org.bson.Document, int);
    Code:
       0: aload_1
       1: ifnull        17
       4: aload_1
       5: ldc           #51                 // String n
       7: invokevirtual #52                 // Method org/bson/Document.getInteger:(Ljava/lang/Object;)Ljava/lang/Integer;
      10: invokevirtual #53                 // Method java/lang/Integer.intValue:()I
      13: iload_2
      14: if_icmpeq     48
      17: new           #43                 // class com/mongodb/MongoGridFSException
      20: dup
      21: ldc           #54                 // String Could not find file chunk for file_id: %s at chunk index %s.
      23: iconst_2
      24: anewarray     #3                  // class java/lang/Object
      27: dup
      28: iconst_0
      29: aload_0
      30: getfield      #17                 // Field fileId:Lorg/bson/BsonValue;
      33: aastore
      34: dup
      35: iconst_1
      36: iload_2
      37: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      40: aastore
      41: invokestatic  #56                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      44: invokespecial #45                 // Method com/mongodb/MongoGridFSException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_1
      49: ldc           #66                 // String data
      51: invokevirtual #67                 // Method org/bson/Document.get:(Ljava/lang/Object;)Ljava/lang/Object;
      54: instanceof    #68                 // class org/bson/types/Binary
      57: ifne          70
      60: new           #43                 // class com/mongodb/MongoGridFSException
      63: dup
      64: ldc           #69                 // String Unexpected data format for the chunk
      66: invokespecial #45                 // Method com/mongodb/MongoGridFSException."<init>":(Ljava/lang/String;)V
      69: athrow
      70: aload_1
      71: ldc           #66                 // String data
      73: ldc           #68                 // class org/bson/types/Binary
      75: invokevirtual #70                 // Method org/bson/Document.get:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
      78: checkcast     #68                 // class org/bson/types/Binary
      81: invokevirtual #71                 // Method org/bson/types/Binary.getData:()[B
      84: astore_3
      85: lconst_0
      86: lstore        4
      88: iconst_0
      89: istore        6
      91: iload_2
      92: iconst_1
      93: iadd
      94: aload_0
      95: getfield      #23                 // Field numberOfChunks:I
      98: if_icmple     107
     101: iconst_1
     102: istore        6
     104: goto          142
     107: iload_2
     108: iconst_1
     109: iadd
     110: aload_0
     111: getfield      #23                 // Field numberOfChunks:I
     114: if_icmpne     135
     117: aload_0
     118: getfield      #19                 // Field length:J
     121: iload_2
     122: i2l
     123: aload_0
     124: getfield      #21                 // Field chunkSizeInBytes:I
     127: i2l
     128: lmul
     129: lsub
     130: lstore        4
     132: goto          142
     135: aload_0
     136: getfield      #21                 // Field chunkSizeInBytes:I
     139: i2l
     140: lstore        4
     142: iload         6
     144: ifeq          203
     147: aload_3
     148: arraylength
     149: i2l
     150: lload         4
     152: lcmp
     153: ifle          203
     156: new           #43                 // class com/mongodb/MongoGridFSException
     159: dup
     160: ldc           #72                 // String Extra chunk data for file_id: %s. Unexpected chunk at chunk index %s.The size was %s and it should be %s bytes.
     162: iconst_4
     163: anewarray     #3                  // class java/lang/Object
     166: dup
     167: iconst_0
     168: aload_0
     169: getfield      #17                 // Field fileId:Lorg/bson/BsonValue;
     172: aastore
     173: dup
     174: iconst_1
     175: iload_2
     176: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     179: aastore
     180: dup
     181: iconst_2
     182: aload_3
     183: arraylength
     184: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     187: aastore
     188: dup
     189: iconst_3
     190: lload         4
     192: invokestatic  #73                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     195: aastore
     196: invokestatic  #56                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     199: invokespecial #45                 // Method com/mongodb/MongoGridFSException."<init>":(Ljava/lang/String;)V
     202: athrow
     203: aload_3
     204: arraylength
     205: i2l
     206: lload         4
     208: lcmp
     209: ifeq          259
     212: new           #43                 // class com/mongodb/MongoGridFSException
     215: dup
     216: ldc           #74                 // String Chunk size data length is not the expected size. The size was %s for file_id: %s chunk index %s it should be %s bytes.
     218: iconst_4
     219: anewarray     #3                  // class java/lang/Object
     222: dup
     223: iconst_0
     224: aload_3
     225: arraylength
     226: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     229: aastore
     230: dup
     231: iconst_1
     232: aload_0
     233: getfield      #17                 // Field fileId:Lorg/bson/BsonValue;
     236: aastore
     237: dup
     238: iconst_2
     239: iload_2
     240: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     243: aastore
     244: dup
     245: iconst_3
     246: lload         4
     248: invokestatic  #73                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     251: aastore
     252: invokestatic  #56                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     255: invokespecial #45                 // Method com/mongodb/MongoGridFSException."<init>":(Ljava/lang/String;)V
     258: athrow
     259: aload_3
     260: areturn

  private byte[] getBuffer(int);
    Code:
       0: aload_0
       1: aload_0
       2: iload_1
       3: invokespecial #75                 // Method getChunk:(I)Lorg/bson/Document;
       6: iload_1
       7: invokespecial #76                 // Method getBufferFromChunk:(Lorg/bson/Document;I)[B
      10: areturn
}
