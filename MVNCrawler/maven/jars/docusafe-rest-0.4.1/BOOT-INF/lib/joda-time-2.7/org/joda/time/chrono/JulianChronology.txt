Compiled from "JulianChronology.java"
public final class org.joda.time.chrono.JulianChronology extends org.joda.time.chrono.BasicGJChronology {
  private static final long serialVersionUID;

  private static final long MILLIS_PER_YEAR;

  private static final long MILLIS_PER_MONTH;

  private static final int MIN_YEAR;

  private static final int MAX_YEAR;

  private static final org.joda.time.chrono.JulianChronology INSTANCE_UTC;

  private static final java.util.concurrent.ConcurrentHashMap<org.joda.time.DateTimeZone, org.joda.time.chrono.JulianChronology[]> cCache;

  static int adjustYearForSet(int);
    Code:
       0: iload_0
       1: ifgt          28
       4: iload_0
       5: ifne          25
       8: new           #1                  // class org/joda/time/IllegalFieldValueException
      11: dup
      12: invokestatic  #2                  // Method org/joda/time/DateTimeFieldType.year:()Lorg/joda/time/DateTimeFieldType;
      15: iload_0
      16: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: aconst_null
      20: aconst_null
      21: invokespecial #4                  // Method org/joda/time/IllegalFieldValueException."<init>":(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      24: athrow
      25: iinc          0, 1
      28: iload_0
      29: ireturn

  public static org.joda.time.chrono.JulianChronology getInstanceUTC();
    Code:
       0: getstatic     #5                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/JulianChronology;
       3: areturn

  public static org.joda.time.chrono.JulianChronology getInstance();
    Code:
       0: invokestatic  #6                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       3: iconst_4
       4: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
       7: areturn

  public static org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone);
    Code:
       0: aload_0
       1: iconst_4
       2: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
       5: areturn

  public static org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone, int);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #6                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_0
       8: getstatic     #8                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      11: aload_0
      12: invokevirtual #9                  // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #10                 // class "[Lorg/joda/time/chrono/JulianChronology;"
      18: astore_3
      19: aload_3
      20: ifnonnull     50
      23: bipush        7
      25: anewarray     #11                 // class org/joda/time/chrono/JulianChronology
      28: astore_3
      29: getstatic     #8                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      32: aload_0
      33: aload_3
      34: invokevirtual #12                 // Method java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #10                 // class "[Lorg/joda/time/chrono/JulianChronology;"
      40: astore        4
      42: aload         4
      44: ifnull        50
      47: aload         4
      49: astore_3
      50: aload_3
      51: iload_1
      52: iconst_1
      53: isub
      54: aaload
      55: astore_2
      56: goto          88
      59: astore        4
      61: new           #14                 // class java/lang/IllegalArgumentException
      64: dup
      65: new           #15                 // class java/lang/StringBuilder
      68: dup
      69: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      72: ldc           #17                 // String Invalid min days in first week:
      74: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: iload_1
      78: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      81: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokespecial #21                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      87: athrow
      88: aload_2
      89: ifnonnull     171
      92: aload_3
      93: dup
      94: astore        4
      96: monitorenter
      97: aload_3
      98: iload_1
      99: iconst_1
     100: isub
     101: aaload
     102: astore_2
     103: aload_2
     104: ifnonnull     157
     107: aload_0
     108: getstatic     #22                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
     111: if_acmpne     128
     114: new           #11                 // class org/joda/time/chrono/JulianChronology
     117: dup
     118: aconst_null
     119: aconst_null
     120: iload_1
     121: invokespecial #23                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     124: astore_2
     125: goto          151
     128: getstatic     #22                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
     131: iload_1
     132: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
     135: astore_2
     136: new           #11                 // class org/joda/time/chrono/JulianChronology
     139: dup
     140: aload_2
     141: aload_0
     142: invokestatic  #24                 // Method org/joda/time/chrono/ZonedChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;
     145: aconst_null
     146: iload_1
     147: invokespecial #23                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     150: astore_2
     151: aload_3
     152: iload_1
     153: iconst_1
     154: isub
     155: aload_2
     156: aastore
     157: aload         4
     159: monitorexit
     160: goto          171
     163: astore        5
     165: aload         4
     167: monitorexit
     168: aload         5
     170: athrow
     171: aload_2
     172: areturn
    Exception table:
       from    to  target type
          50    56    59   Class java/lang/ArrayIndexOutOfBoundsException
          97   160   163   any
         163   168   163   any

  org.joda.time.chrono.JulianChronology(org.joda.time.Chronology, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #25                 // Method org/joda/time/chrono/BasicGJChronology."<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
       7: return

  private java.lang.Object readResolve();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getBase:()Lorg/joda/time/Chronology;
       4: astore_1
       5: aload_0
       6: invokevirtual #27                 // Method getMinimumDaysInFirstWeek:()I
       9: istore_2
      10: iload_2
      11: ifne          18
      14: iconst_4
      15: goto          19
      18: iload_2
      19: istore_2
      20: aload_1
      21: ifnonnull     34
      24: getstatic     #22                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      27: iload_2
      28: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
      31: goto          42
      34: aload_1
      35: invokevirtual #28                 // Method org/joda/time/Chronology.getZone:()Lorg/joda/time/DateTimeZone;
      38: iload_2
      39: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
      42: areturn

  public org.joda.time.Chronology withUTC();
    Code:
       0: getstatic     #5                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/JulianChronology;
       3: areturn

  public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #6                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #29                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      13: if_acmpne     18
      16: aload_0
      17: areturn
      18: aload_1
      19: invokestatic  #30                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/JulianChronology;
      22: areturn

  long getDateMidnightMillis(int, int, int) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #31                 // Method adjustYearForSet:(I)I
       5: iload_2
       6: iload_3
       7: invokespecial #32                 // Method org/joda/time/chrono/BasicGJChronology.getDateMidnightMillis:(III)J
      10: lreturn

  boolean isLeapYear(int);
    Code:
       0: iload_1
       1: iconst_3
       2: iand
       3: ifne          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ireturn

  long calculateFirstDayOfYearMillis(int);
    Code:
       0: iload_1
       1: sipush        1968
       4: isub
       5: istore_2
       6: iload_2
       7: ifgt          19
      10: iload_2
      11: iconst_3
      12: iadd
      13: iconst_2
      14: ishr
      15: istore_3
      16: goto          34
      19: iload_2
      20: iconst_2
      21: ishr
      22: istore_3
      23: aload_0
      24: iload_1
      25: invokevirtual #33                 // Method isLeapYear:(I)Z
      28: ifne          34
      31: iinc          3, 1
      34: iload_2
      35: i2l
      36: ldc2_w        #34                 // long 365l
      39: lmul
      40: iload_3
      41: i2l
      42: ladd
      43: ldc2_w        #36                 // long 86400000l
      46: lmul
      47: lstore        4
      49: lload         4
      51: ldc2_w        #38                 // long 62035200000l
      54: lsub
      55: lreturn

  int getMinYear();
    Code:
       0: ldc           #40                 // int -292269054
       2: ireturn

  int getMaxYear();
    Code:
       0: ldc           #41                 // int 292272992
       2: ireturn

  long getAverageMillisPerYear();
    Code:
       0: ldc2_w        #42                 // long 31557600000l
       3: lreturn

  long getAverageMillisPerYearDividedByTwo();
    Code:
       0: ldc2_w        #44                 // long 15778800000l
       3: lreturn

  long getAverageMillisPerMonth();
    Code:
       0: ldc2_w        #46                 // long 2629800000l
       3: lreturn

  long getApproxMillisAtEpochDividedByTwo();
    Code:
       0: ldc2_w        #48                 // long 31083663600000l
       3: lreturn

  protected void assemble(org.joda.time.chrono.AssembledChronology$Fields);
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getBase:()Lorg/joda/time/Chronology;
       4: ifnonnull     44
       7: aload_0
       8: aload_1
       9: invokespecial #50                 // Method org/joda/time/chrono/BasicGJChronology.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V
      12: aload_1
      13: new           #51                 // class org/joda/time/field/SkipDateTimeField
      16: dup
      17: aload_0
      18: aload_1
      19: getfield      #52                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      22: invokespecial #53                 // Method org/joda/time/field/SkipDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      25: putfield      #52                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      28: aload_1
      29: new           #51                 // class org/joda/time/field/SkipDateTimeField
      32: dup
      33: aload_0
      34: aload_1
      35: getfield      #54                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      38: invokespecial #53                 // Method org/joda/time/field/SkipDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      41: putfield      #54                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      44: return

  static {};
    Code:
       0: new           #55                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #56                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #8                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      10: getstatic     #22                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      13: invokestatic  #30                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/JulianChronology;
      16: putstatic     #5                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/JulianChronology;
      19: return
}
