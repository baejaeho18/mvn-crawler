Compiled from "GregorianChronology.java"
public final class org.joda.time.chrono.GregorianChronology extends org.joda.time.chrono.BasicGJChronology {
  private static final long serialVersionUID;

  private static final long MILLIS_PER_YEAR;

  private static final long MILLIS_PER_MONTH;

  private static final int DAYS_0000_TO_1970;

  private static final int MIN_YEAR;

  private static final int MAX_YEAR;

  private static final org.joda.time.chrono.GregorianChronology INSTANCE_UTC;

  private static final java.util.concurrent.ConcurrentHashMap<org.joda.time.DateTimeZone, org.joda.time.chrono.GregorianChronology[]> cCache;

  public static org.joda.time.chrono.GregorianChronology getInstanceUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/GregorianChronology;
       3: areturn

  public static org.joda.time.chrono.GregorianChronology getInstance();
    Code:
       0: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       3: iconst_4
       4: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
       7: areturn

  public static org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone);
    Code:
       0: aload_0
       1: iconst_4
       2: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
       5: areturn

  public static org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone, int);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_0
       8: getstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      11: aload_0
      12: invokevirtual #5                  // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #6                  // class "[Lorg/joda/time/chrono/GregorianChronology;"
      18: astore_3
      19: aload_3
      20: ifnonnull     50
      23: bipush        7
      25: anewarray     #7                  // class org/joda/time/chrono/GregorianChronology
      28: astore_3
      29: getstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      32: aload_0
      33: aload_3
      34: invokevirtual #8                  // Method java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #6                  // class "[Lorg/joda/time/chrono/GregorianChronology;"
      40: astore        4
      42: aload         4
      44: ifnull        50
      47: aload         4
      49: astore_3
      50: aload_3
      51: iload_1
      52: iconst_1
      53: isub
      54: aaload
      55: astore_2
      56: goto          88
      59: astore        4
      61: new           #10                 // class java/lang/IllegalArgumentException
      64: dup
      65: new           #11                 // class java/lang/StringBuilder
      68: dup
      69: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      72: ldc           #13                 // String Invalid min days in first week:
      74: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: iload_1
      78: invokevirtual #15                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      81: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      87: athrow
      88: aload_2
      89: ifnonnull     171
      92: aload_3
      93: dup
      94: astore        4
      96: monitorenter
      97: aload_3
      98: iload_1
      99: iconst_1
     100: isub
     101: aaload
     102: astore_2
     103: aload_2
     104: ifnonnull     157
     107: aload_0
     108: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
     111: if_acmpne     128
     114: new           #7                  // class org/joda/time/chrono/GregorianChronology
     117: dup
     118: aconst_null
     119: aconst_null
     120: iload_1
     121: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     124: astore_2
     125: goto          151
     128: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
     131: iload_1
     132: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
     135: astore_2
     136: new           #7                  // class org/joda/time/chrono/GregorianChronology
     139: dup
     140: aload_2
     141: aload_0
     142: invokestatic  #20                 // Method org/joda/time/chrono/ZonedChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;
     145: aconst_null
     146: iload_1
     147: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     150: astore_2
     151: aload_3
     152: iload_1
     153: iconst_1
     154: isub
     155: aload_2
     156: aastore
     157: aload         4
     159: monitorexit
     160: goto          171
     163: astore        5
     165: aload         4
     167: monitorexit
     168: aload         5
     170: athrow
     171: aload_2
     172: areturn
    Exception table:
       from    to  target type
          50    56    59   Class java/lang/ArrayIndexOutOfBoundsException
          97   160   163   any
         163   168   163   any

  private org.joda.time.chrono.GregorianChronology(org.joda.time.Chronology, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #21                 // Method org/joda/time/chrono/BasicGJChronology."<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
       7: return

  private java.lang.Object readResolve();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getBase:()Lorg/joda/time/Chronology;
       4: astore_1
       5: aload_0
       6: invokevirtual #23                 // Method getMinimumDaysInFirstWeek:()I
       9: istore_2
      10: iload_2
      11: ifne          18
      14: iconst_4
      15: goto          19
      18: iload_2
      19: istore_2
      20: aload_1
      21: ifnonnull     34
      24: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      27: iload_2
      28: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
      31: goto          42
      34: aload_1
      35: invokevirtual #24                 // Method org/joda/time/Chronology.getZone:()Lorg/joda/time/DateTimeZone;
      38: iload_2
      39: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;
      42: areturn

  public org.joda.time.Chronology withUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/GregorianChronology;
       3: areturn

  public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #25                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      13: if_acmpne     18
      16: aload_0
      17: areturn
      18: aload_1
      19: invokestatic  #26                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;
      22: areturn

  protected void assemble(org.joda.time.chrono.AssembledChronology$Fields);
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getBase:()Lorg/joda/time/Chronology;
       4: ifnonnull     12
       7: aload_0
       8: aload_1
       9: invokespecial #27                 // Method org/joda/time/chrono/BasicGJChronology.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V
      12: return

  boolean isLeapYear(int);
    Code:
       0: iload_1
       1: iconst_3
       2: iand
       3: ifne          25
       6: iload_1
       7: bipush        100
       9: irem
      10: ifne          21
      13: iload_1
      14: sipush        400
      17: irem
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  long calculateFirstDayOfYearMillis(int);
    Code:
       0: iload_1
       1: bipush        100
       3: idiv
       4: istore_2
       5: iload_1
       6: ifge          28
       9: iload_1
      10: iconst_3
      11: iadd
      12: iconst_2
      13: ishr
      14: iload_2
      15: isub
      16: iload_2
      17: iconst_3
      18: iadd
      19: iconst_2
      20: ishr
      21: iadd
      22: iconst_1
      23: isub
      24: istore_2
      25: goto          49
      28: iload_1
      29: iconst_2
      30: ishr
      31: iload_2
      32: isub
      33: iload_2
      34: iconst_2
      35: ishr
      36: iadd
      37: istore_2
      38: aload_0
      39: iload_1
      40: invokevirtual #28                 // Method isLeapYear:(I)Z
      43: ifeq          49
      46: iinc          2, -1
      49: iload_1
      50: i2l
      51: ldc2_w        #29                 // long 365l
      54: lmul
      55: iload_2
      56: ldc           #31                 // int 719527
      58: isub
      59: i2l
      60: ladd
      61: ldc2_w        #32                 // long 86400000l
      64: lmul
      65: lreturn

  int getMinYear();
    Code:
       0: ldc           #34                 // int -292275054
       2: ireturn

  int getMaxYear();
    Code:
       0: ldc           #35                 // int 292278993
       2: ireturn

  long getAverageMillisPerYear();
    Code:
       0: ldc2_w        #36                 // long 31556952000l
       3: lreturn

  long getAverageMillisPerYearDividedByTwo();
    Code:
       0: ldc2_w        #38                 // long 15778476000l
       3: lreturn

  long getAverageMillisPerMonth();
    Code:
       0: ldc2_w        #40                 // long 2629746000l
       3: lreturn

  long getApproxMillisAtEpochDividedByTwo();
    Code:
       0: ldc2_w        #42                 // long 31083597720000l
       3: lreturn

  static {};
    Code:
       0: new           #44                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #45                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      10: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      13: invokestatic  #26                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;
      16: putstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/GregorianChronology;
      19: return
}
