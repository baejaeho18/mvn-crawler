Compiled from "ISOChronology.java"
public final class org.joda.time.chrono.ISOChronology extends org.joda.time.chrono.AssembledChronology {
  private static final long serialVersionUID;

  private static final org.joda.time.chrono.ISOChronology INSTANCE_UTC;

  private static final java.util.concurrent.ConcurrentHashMap<org.joda.time.DateTimeZone, org.joda.time.chrono.ISOChronology> cCache;

  public static org.joda.time.chrono.ISOChronology getInstanceUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/ISOChronology;
       3: areturn

  public static org.joda.time.chrono.ISOChronology getInstance();
    Code:
       0: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       3: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;
       6: areturn

  public static org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_0
       8: getstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      11: aload_0
      12: invokevirtual #5                  // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #6                  // class org/joda/time/chrono/ISOChronology
      18: astore_1
      19: aload_1
      20: ifnonnull     56
      23: new           #6                  // class org/joda/time/chrono/ISOChronology
      26: dup
      27: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/ISOChronology;
      30: aload_0
      31: invokestatic  #7                  // Method org/joda/time/chrono/ZonedChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;
      34: invokespecial #8                  // Method "<init>":(Lorg/joda/time/Chronology;)V
      37: astore_1
      38: getstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      41: aload_0
      42: aload_1
      43: invokevirtual #9                  // Method java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      46: checkcast     #6                  // class org/joda/time/chrono/ISOChronology
      49: astore_2
      50: aload_2
      51: ifnull        56
      54: aload_2
      55: astore_1
      56: aload_1
      57: areturn

  private org.joda.time.chrono.ISOChronology(org.joda.time.Chronology);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #10                 // Method org/joda/time/chrono/AssembledChronology."<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;)V
       6: return

  public org.joda.time.Chronology withUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/ISOChronology;
       3: areturn

  public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #11                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      13: if_acmpne     18
      16: aload_0
      17: areturn
      18: aload_1
      19: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;
      22: areturn

  public java.lang.String toString();
    Code:
       0: ldc           #12                 // String ISOChronology
       2: astore_1
       3: aload_0
       4: invokevirtual #11                 // Method getZone:()Lorg/joda/time/DateTimeZone;
       7: astore_2
       8: aload_2
       9: ifnull        44
      12: new           #13                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      19: aload_1
      20: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: bipush        91
      25: invokevirtual #16                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      28: aload_2
      29: invokevirtual #17                 // Method org/joda/time/DateTimeZone.getID:()Ljava/lang/String;
      32: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: bipush        93
      37: invokevirtual #16                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      40: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: astore_1
      44: aload_1
      45: areturn

  protected void assemble(org.joda.time.chrono.AssembledChronology$Fields);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getBase:()Lorg/joda/time/Chronology;
       4: invokevirtual #20                 // Method org/joda/time/Chronology.getZone:()Lorg/joda/time/DateTimeZone;
       7: getstatic     #21                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      10: if_acmpne     89
      13: aload_1
      14: new           #22                 // class org/joda/time/field/DividedDateTimeField
      17: dup
      18: getstatic     #23                 // Field org/joda/time/chrono/ISOYearOfEraDateTimeField.INSTANCE:Lorg/joda/time/DateTimeField;
      21: invokestatic  #24                 // Method org/joda/time/DateTimeFieldType.centuryOfEra:()Lorg/joda/time/DateTimeFieldType;
      24: bipush        100
      26: invokespecial #25                 // Method org/joda/time/field/DividedDateTimeField."<init>":(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V
      29: putfield      #26                 // Field org/joda/time/chrono/AssembledChronology$Fields.centuryOfEra:Lorg/joda/time/DateTimeField;
      32: aload_1
      33: aload_1
      34: getfield      #26                 // Field org/joda/time/chrono/AssembledChronology$Fields.centuryOfEra:Lorg/joda/time/DateTimeField;
      37: invokevirtual #27                 // Method org/joda/time/DateTimeField.getDurationField:()Lorg/joda/time/DurationField;
      40: putfield      #28                 // Field org/joda/time/chrono/AssembledChronology$Fields.centuries:Lorg/joda/time/DurationField;
      43: aload_1
      44: new           #29                 // class org/joda/time/field/RemainderDateTimeField
      47: dup
      48: aload_1
      49: getfield      #26                 // Field org/joda/time/chrono/AssembledChronology$Fields.centuryOfEra:Lorg/joda/time/DateTimeField;
      52: checkcast     #22                 // class org/joda/time/field/DividedDateTimeField
      55: invokestatic  #30                 // Method org/joda/time/DateTimeFieldType.yearOfCentury:()Lorg/joda/time/DateTimeFieldType;
      58: invokespecial #31                 // Method org/joda/time/field/RemainderDateTimeField."<init>":(Lorg/joda/time/field/DividedDateTimeField;Lorg/joda/time/DateTimeFieldType;)V
      61: putfield      #32                 // Field org/joda/time/chrono/AssembledChronology$Fields.yearOfCentury:Lorg/joda/time/DateTimeField;
      64: aload_1
      65: new           #29                 // class org/joda/time/field/RemainderDateTimeField
      68: dup
      69: aload_1
      70: getfield      #26                 // Field org/joda/time/chrono/AssembledChronology$Fields.centuryOfEra:Lorg/joda/time/DateTimeField;
      73: checkcast     #22                 // class org/joda/time/field/DividedDateTimeField
      76: aload_1
      77: getfield      #33                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyears:Lorg/joda/time/DurationField;
      80: invokestatic  #34                 // Method org/joda/time/DateTimeFieldType.weekyearOfCentury:()Lorg/joda/time/DateTimeFieldType;
      83: invokespecial #35                 // Method org/joda/time/field/RemainderDateTimeField."<init>":(Lorg/joda/time/field/DividedDateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeFieldType;)V
      86: putfield      #36                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyearOfCentury:Lorg/joda/time/DateTimeField;
      89: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #6                  // class org/joda/time/chrono/ISOChronology
      11: ifeq          31
      14: aload_1
      15: checkcast     #6                  // class org/joda/time/chrono/ISOChronology
      18: astore_2
      19: aload_0
      20: invokevirtual #11                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      23: aload_2
      24: invokevirtual #11                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      27: invokevirtual #37                 // Method org/joda/time/DateTimeZone.equals:(Ljava/lang/Object;)Z
      30: ireturn
      31: iconst_0
      32: ireturn

  public int hashCode();
    Code:
       0: ldc           #38                 // String ISO
       2: invokevirtual #39                 // Method java/lang/String.hashCode:()I
       5: bipush        11
       7: imul
       8: aload_0
       9: invokevirtual #11                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      12: invokevirtual #40                 // Method org/joda/time/DateTimeZone.hashCode:()I
      15: iadd
      16: ireturn

  private java.lang.Object writeReplace();
    Code:
       0: new           #41                 // class org/joda/time/chrono/ISOChronology$Stub
       3: dup
       4: aload_0
       5: invokevirtual #11                 // Method getZone:()Lorg/joda/time/DateTimeZone;
       8: invokespecial #42                 // Method org/joda/time/chrono/ISOChronology$Stub."<init>":(Lorg/joda/time/DateTimeZone;)V
      11: areturn

  static {};
    Code:
       0: new           #43                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #44                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      10: new           #6                  // class org/joda/time/chrono/ISOChronology
      13: dup
      14: invokestatic  #45                 // Method org/joda/time/chrono/GregorianChronology.getInstanceUTC:()Lorg/joda/time/chrono/GregorianChronology;
      17: invokespecial #8                  // Method "<init>":(Lorg/joda/time/Chronology;)V
      20: putstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/ISOChronology;
      23: getstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      26: getstatic     #21                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      29: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/ISOChronology;
      32: invokevirtual #46                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      35: pop
      36: return
}
