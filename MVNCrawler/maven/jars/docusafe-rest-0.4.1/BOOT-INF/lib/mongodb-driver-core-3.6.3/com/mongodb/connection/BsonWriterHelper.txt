Compiled from "BsonWriterHelper.java"
final class com.mongodb.connection.BsonWriterHelper {
  private static final int DOCUMENT_HEADROOM;

  private static final org.bson.codecs.configuration.CodecRegistry REGISTRY;

  private static final org.bson.codecs.EncoderContext ENCODER_CONTEXT;

  static void writeElements(org.bson.BsonWriter, java.util.List<org.bson.BsonElement>);
    Code:
       0: aload_1
       1: invokeinterface #1,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #2,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          59
      16: aload_2
      17: invokeinterface #3,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #4                  // class org/bson/BsonElement
      25: astore_3
      26: aload_0
      27: aload_3
      28: invokevirtual #5                  // Method org/bson/BsonElement.getName:()Ljava/lang/String;
      31: invokeinterface #6,  2            // InterfaceMethod org/bson/BsonWriter.writeName:(Ljava/lang/String;)V
      36: aload_3
      37: invokevirtual #7                  // Method org/bson/BsonElement.getValue:()Lorg/bson/BsonValue;
      40: invokestatic  #8                  // Method getCodec:(Lorg/bson/BsonValue;)Lorg/bson/codecs/Codec;
      43: aload_0
      44: aload_3
      45: invokevirtual #7                  // Method org/bson/BsonElement.getValue:()Lorg/bson/BsonValue;
      48: getstatic     #9                  // Field ENCODER_CONTEXT:Lorg/bson/codecs/EncoderContext;
      51: invokeinterface #10,  4           // InterfaceMethod org/bson/codecs/Codec.encode:(Lorg/bson/BsonWriter;Ljava/lang/Object;Lorg/bson/codecs/EncoderContext;)V
      56: goto          7
      59: return

  static void writePayloadArray(org.bson.BsonWriter, org.bson.io.BsonOutput, com.mongodb.connection.MessageSettings, int, com.mongodb.connection.SplittablePayload);
    Code:
       0: aload_0
       1: aload         4
       3: invokevirtual #11                 // Method com/mongodb/connection/SplittablePayload.getPayloadName:()Ljava/lang/String;
       6: invokeinterface #12,  2           // InterfaceMethod org/bson/BsonWriter.writeStartArray:(Ljava/lang/String;)V
      11: aload_0
      12: aload_1
      13: aload_2
      14: invokestatic  #13                 // Method getDocumentMessageSettings:(Lcom/mongodb/connection/MessageSettings;)Lcom/mongodb/connection/MessageSettings;
      17: iload_3
      18: aload         4
      20: invokestatic  #14                 // Method writePayload:(Lorg/bson/BsonWriter;Lorg/bson/io/BsonOutput;Lcom/mongodb/connection/MessageSettings;ILcom/mongodb/connection/SplittablePayload;)V
      23: aload_0
      24: invokeinterface #15,  1           // InterfaceMethod org/bson/BsonWriter.writeEndArray:()V
      29: return

  static void writePayload(org.bson.BsonWriter, org.bson.io.BsonOutput, com.mongodb.connection.MessageSettings, int, com.mongodb.connection.SplittablePayload);
    Code:
       0: aload         4
       2: invokevirtual #16                 // Method com/mongodb/connection/SplittablePayload.getPayloadType:()Lcom/mongodb/connection/SplittablePayload$Type;
       5: aload_2
       6: invokestatic  #17                 // Method getPayloadMessageSettings:(Lcom/mongodb/connection/SplittablePayload$Type;Lcom/mongodb/connection/MessageSettings;)Lcom/mongodb/connection/MessageSettings;
       9: astore        5
      11: iconst_0
      12: istore        6
      14: iload         6
      16: aload         4
      18: invokevirtual #18                 // Method com/mongodb/connection/SplittablePayload.getPayload:()Ljava/util/List;
      21: invokeinterface #19,  1           // InterfaceMethod java/util/List.size:()I
      26: if_icmpge     74
      29: aload_0
      30: aload_1
      31: aload         5
      33: aload         4
      35: invokevirtual #18                 // Method com/mongodb/connection/SplittablePayload.getPayload:()Ljava/util/List;
      38: iload         6
      40: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      45: checkcast     #21                 // class org/bson/BsonDocument
      48: iload_3
      49: iload         6
      51: iconst_1
      52: iadd
      53: invokestatic  #22                 // Method writeDocument:(Lorg/bson/BsonWriter;Lorg/bson/io/BsonOutput;Lcom/mongodb/connection/MessageSettings;Lorg/bson/BsonDocument;II)Z
      56: ifeq          74
      59: aload         4
      61: iload         6
      63: iconst_1
      64: iadd
      65: invokevirtual #23                 // Method com/mongodb/connection/SplittablePayload.setPosition:(I)V
      68: iinc          6, 1
      71: goto          14
      74: aload         4
      76: invokevirtual #24                 // Method com/mongodb/connection/SplittablePayload.getPosition:()I
      79: ifne          110
      82: new           #25                 // class org/bson/BsonSerializationException
      85: dup
      86: ldc           #26                 // String Payload document size of is larger than maximum of %d.
      88: iconst_1
      89: anewarray     #27                 // class java/lang/Object
      92: dup
      93: iconst_0
      94: aload         5
      96: invokevirtual #28                 // Method com/mongodb/connection/MessageSettings.getMaxDocumentSize:()I
      99: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     102: aastore
     103: invokestatic  #30                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     106: invokespecial #31                 // Method org/bson/BsonSerializationException."<init>":(Ljava/lang/String;)V
     109: athrow
     110: return

  private static boolean writeDocument(org.bson.BsonWriter, org.bson.io.BsonOutput, com.mongodb.connection.MessageSettings, org.bson.BsonDocument, int, int);
    Code:
       0: aload_1
       1: invokeinterface #32,  1           // InterfaceMethod org/bson/io/BsonOutput.getPosition:()I
       6: istore        6
       8: aload_3
       9: invokestatic  #8                  // Method getCodec:(Lorg/bson/BsonValue;)Lorg/bson/codecs/Codec;
      12: aload_0
      13: aload_3
      14: getstatic     #9                  // Field ENCODER_CONTEXT:Lorg/bson/codecs/EncoderContext;
      17: invokeinterface #10,  4           // InterfaceMethod org/bson/codecs/Codec.encode:(Lorg/bson/BsonWriter;Ljava/lang/Object;Lorg/bson/codecs/EncoderContext;)V
      22: aload_1
      23: invokeinterface #32,  1           // InterfaceMethod org/bson/io/BsonOutput.getPosition:()I
      28: iload         4
      30: isub
      31: istore        7
      33: aload_1
      34: invokeinterface #32,  1           // InterfaceMethod org/bson/io/BsonOutput.getPosition:()I
      39: iload         6
      41: isub
      42: istore        8
      44: aload_2
      45: iload         7
      47: iload         8
      49: iload         5
      51: invokestatic  #33                 // Method exceedsLimits:(Lcom/mongodb/connection/MessageSettings;III)Z
      54: ifeq          67
      57: aload_1
      58: iload         6
      60: invokeinterface #34,  2           // InterfaceMethod org/bson/io/BsonOutput.truncateToPosition:(I)V
      65: iconst_0
      66: ireturn
      67: iconst_1
      68: ireturn

  private static org.bson.codecs.Codec<org.bson.BsonValue> getCodec(org.bson.BsonValue);
    Code:
       0: getstatic     #35                 // Field REGISTRY:Lorg/bson/codecs/configuration/CodecRegistry;
       3: aload_0
       4: invokevirtual #36                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       7: invokeinterface #37,  2           // InterfaceMethod org/bson/codecs/configuration/CodecRegistry.get:(Ljava/lang/Class;)Lorg/bson/codecs/Codec;
      12: areturn

  private static com.mongodb.connection.MessageSettings getPayloadMessageSettings(com.mongodb.connection.SplittablePayload$Type, com.mongodb.connection.MessageSettings);
    Code:
       0: aload_1
       1: astore_2
       2: aload_0
       3: getstatic     #38                 // Field com/mongodb/connection/SplittablePayload$Type.INSERT:Lcom/mongodb/connection/SplittablePayload$Type;
       6: if_acmpeq     28
       9: aload_1
      10: invokestatic  #39                 // Method createMessageSettingsBuilder:(Lcom/mongodb/connection/MessageSettings;)Lcom/mongodb/connection/MessageSettings$Builder;
      13: aload_1
      14: invokevirtual #28                 // Method com/mongodb/connection/MessageSettings.getMaxDocumentSize:()I
      17: sipush        16384
      20: iadd
      21: invokevirtual #41                 // Method com/mongodb/connection/MessageSettings$Builder.maxDocumentSize:(I)Lcom/mongodb/connection/MessageSettings$Builder;
      24: invokevirtual #42                 // Method com/mongodb/connection/MessageSettings$Builder.build:()Lcom/mongodb/connection/MessageSettings;
      27: astore_2
      28: aload_2
      29: areturn

  private static com.mongodb.connection.MessageSettings getDocumentMessageSettings(com.mongodb.connection.MessageSettings);
    Code:
       0: aload_0
       1: invokestatic  #39                 // Method createMessageSettingsBuilder:(Lcom/mongodb/connection/MessageSettings;)Lcom/mongodb/connection/MessageSettings$Builder;
       4: aload_0
       5: invokevirtual #28                 // Method com/mongodb/connection/MessageSettings.getMaxDocumentSize:()I
       8: sipush        16384
      11: iadd
      12: invokevirtual #43                 // Method com/mongodb/connection/MessageSettings$Builder.maxMessageSize:(I)Lcom/mongodb/connection/MessageSettings$Builder;
      15: invokevirtual #42                 // Method com/mongodb/connection/MessageSettings$Builder.build:()Lcom/mongodb/connection/MessageSettings;
      18: areturn

  private static com.mongodb.connection.MessageSettings$Builder createMessageSettingsBuilder(com.mongodb.connection.MessageSettings);
    Code:
       0: invokestatic  #44                 // Method com/mongodb/connection/MessageSettings.builder:()Lcom/mongodb/connection/MessageSettings$Builder;
       3: aload_0
       4: invokevirtual #45                 // Method com/mongodb/connection/MessageSettings.getMaxBatchCount:()I
       7: invokevirtual #46                 // Method com/mongodb/connection/MessageSettings$Builder.maxBatchCount:(I)Lcom/mongodb/connection/MessageSettings$Builder;
      10: aload_0
      11: invokevirtual #47                 // Method com/mongodb/connection/MessageSettings.getMaxMessageSize:()I
      14: invokevirtual #43                 // Method com/mongodb/connection/MessageSettings$Builder.maxMessageSize:(I)Lcom/mongodb/connection/MessageSettings$Builder;
      17: aload_0
      18: invokevirtual #28                 // Method com/mongodb/connection/MessageSettings.getMaxDocumentSize:()I
      21: invokevirtual #41                 // Method com/mongodb/connection/MessageSettings$Builder.maxDocumentSize:(I)Lcom/mongodb/connection/MessageSettings$Builder;
      24: aload_0
      25: invokevirtual #48                 // Method com/mongodb/connection/MessageSettings.getServerVersion:()Lcom/mongodb/connection/ServerVersion;
      28: invokevirtual #49                 // Method com/mongodb/connection/MessageSettings$Builder.serverVersion:(Lcom/mongodb/connection/ServerVersion;)Lcom/mongodb/connection/MessageSettings$Builder;
      31: areturn

  private static boolean exceedsLimits(com.mongodb.connection.MessageSettings, int, int, int);
    Code:
       0: iload_3
       1: aload_0
       2: invokevirtual #45                 // Method com/mongodb/connection/MessageSettings.getMaxBatchCount:()I
       5: if_icmple     10
       8: iconst_1
       9: ireturn
      10: iload_1
      11: aload_0
      12: invokevirtual #47                 // Method com/mongodb/connection/MessageSettings.getMaxMessageSize:()I
      15: if_icmple     20
      18: iconst_1
      19: ireturn
      20: iload_2
      21: aload_0
      22: invokevirtual #28                 // Method com/mongodb/connection/MessageSettings.getMaxDocumentSize:()I
      25: if_icmple     30
      28: iconst_1
      29: ireturn
      30: iconst_0
      31: ireturn

  private com.mongodb.connection.BsonWriterHelper();
    Code:
       0: aload_0
       1: invokespecial #50                 // Method java/lang/Object."<init>":()V
       4: return

  static {};
    Code:
       0: iconst_1
       1: anewarray     #51                 // class org/bson/codecs/configuration/CodecProvider
       4: dup
       5: iconst_0
       6: new           #52                 // class org/bson/codecs/BsonValueCodecProvider
       9: dup
      10: invokespecial #53                 // Method org/bson/codecs/BsonValueCodecProvider."<init>":()V
      13: aastore
      14: invokestatic  #54                 // Method org/bson/codecs/configuration/CodecRegistries.fromProviders:([Lorg/bson/codecs/configuration/CodecProvider;)Lorg/bson/codecs/configuration/CodecRegistry;
      17: putstatic     #35                 // Field REGISTRY:Lorg/bson/codecs/configuration/CodecRegistry;
      20: invokestatic  #55                 // Method org/bson/codecs/EncoderContext.builder:()Lorg/bson/codecs/EncoderContext$Builder;
      23: invokevirtual #56                 // Method org/bson/codecs/EncoderContext$Builder.build:()Lorg/bson/codecs/EncoderContext;
      26: putstatic     #9                  // Field ENCODER_CONTEXT:Lorg/bson/codecs/EncoderContext;
      29: return
}
