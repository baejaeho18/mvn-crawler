Compiled from "ConcurrentPool.java"
public class com.mongodb.internal.connection.ConcurrentPool<T> implements com.mongodb.internal.connection.Pool<T> {
  private final int maxSize;

  private final com.mongodb.internal.connection.ConcurrentPool$ItemFactory<T> itemFactory;

  private final com.mongodb.internal.connection.ConcurrentLinkedDeque<T> available;

  private final java.util.concurrent.Semaphore permits;

  private volatile boolean closed;

  public com.mongodb.internal.connection.ConcurrentPool(int, com.mongodb.internal.connection.ConcurrentPool$ItemFactory<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class com/mongodb/internal/connection/ConcurrentLinkedDeque
       8: dup
       9: invokespecial #3                  // Method com/mongodb/internal/connection/ConcurrentLinkedDeque."<init>":()V
      12: putfield      #4                  // Field available:Lcom/mongodb/internal/connection/ConcurrentLinkedDeque;
      15: aload_0
      16: iload_1
      17: putfield      #5                  // Field maxSize:I
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field itemFactory:Lcom/mongodb/internal/connection/ConcurrentPool$ItemFactory;
      25: aload_0
      26: new           #7                  // class java/util/concurrent/Semaphore
      29: dup
      30: iload_1
      31: iconst_1
      32: invokespecial #8                  // Method java/util/concurrent/Semaphore."<init>":(IZ)V
      35: putfield      #9                  // Field permits:Ljava/util/concurrent/Semaphore;
      38: return

  public void release(T);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #10                 // Method release:(Ljava/lang/Object;Z)V
       6: return

  public void release(T, boolean);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #11                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #12                 // String Can not return a null item to the pool
      10: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #14                 // Field closed:Z
      18: ifeq          27
      21: aload_0
      22: aload_1
      23: invokespecial #15                 // Method close:(Ljava/lang/Object;)V
      26: return
      27: iload_2
      28: ifeq          39
      31: aload_0
      32: aload_1
      33: invokespecial #15                 // Method close:(Ljava/lang/Object;)V
      36: goto          47
      39: aload_0
      40: getfield      #4                  // Field available:Lcom/mongodb/internal/connection/ConcurrentLinkedDeque;
      43: aload_1
      44: invokevirtual #16                 // Method com/mongodb/internal/connection/ConcurrentLinkedDeque.addLast:(Ljava/lang/Object;)V
      47: aload_0
      48: invokevirtual #17                 // Method releasePermit:()V
      51: return

  public T get();
    Code:
       0: aload_0
       1: ldc2_w        #18                 // long -1l
       4: getstatic     #20                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       7: invokevirtual #21                 // Method get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
      10: areturn

  public T get(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #14                 // Field closed:Z
       4: ifeq          17
       7: new           #22                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #23                 // String The pool is closed
      13: invokespecial #24                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: lload_1
      19: aload_3
      20: invokevirtual #25                 // Method acquirePermit:(JLjava/util/concurrent/TimeUnit;)Z
      23: ifne          54
      26: new           #26                 // class com/mongodb/MongoTimeoutException
      29: dup
      30: ldc           #27                 // String Timeout waiting for a pooled item after %d %s
      32: iconst_2
      33: anewarray     #28                 // class java/lang/Object
      36: dup
      37: iconst_0
      38: lload_1
      39: invokestatic  #29                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      42: aastore
      43: dup
      44: iconst_1
      45: aload_3
      46: aastore
      47: invokestatic  #30                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      50: invokespecial #31                 // Method com/mongodb/MongoTimeoutException."<init>":(Ljava/lang/String;)V
      53: athrow
      54: aload_0
      55: getfield      #4                  // Field available:Lcom/mongodb/internal/connection/ConcurrentLinkedDeque;
      58: invokevirtual #32                 // Method com/mongodb/internal/connection/ConcurrentLinkedDeque.pollLast:()Ljava/lang/Object;
      61: astore        4
      63: aload         4
      65: ifnonnull     75
      68: aload_0
      69: iconst_0
      70: invokespecial #33                 // Method createNewAndReleasePermitIfFailure:(Z)Ljava/lang/Object;
      73: astore        4
      75: aload         4
      77: areturn

  public void prune();
    Code:
       0: aload_0
       1: getfield      #4                  // Field available:Lcom/mongodb/internal/connection/ConcurrentLinkedDeque;
       4: invokevirtual #34                 // Method com/mongodb/internal/connection/ConcurrentLinkedDeque.iterator:()Lcom/mongodb/internal/connection/ConcurrentLinkedDeque$RemovalReportingIterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #35,  1           // InterfaceMethod com/mongodb/internal/connection/ConcurrentLinkedDeque$RemovalReportingIterator.hasNext:()Z
      14: ifeq          73
      17: aload_1
      18: invokeinterface #36,  1           // InterfaceMethod com/mongodb/internal/connection/ConcurrentLinkedDeque$RemovalReportingIterator.next:()Ljava/lang/Object;
      23: astore_2
      24: aload_0
      25: getfield      #6                  // Field itemFactory:Lcom/mongodb/internal/connection/ConcurrentPool$ItemFactory;
      28: aload_2
      29: invokeinterface #37,  2           // InterfaceMethod com/mongodb/internal/connection/ConcurrentPool$ItemFactory.shouldPrune:(Ljava/lang/Object;)Lcom/mongodb/internal/connection/ConcurrentPool$Prune;
      34: astore_3
      35: aload_3
      36: getstatic     #38                 // Field com/mongodb/internal/connection/ConcurrentPool$Prune.STOP:Lcom/mongodb/internal/connection/ConcurrentPool$Prune;
      39: if_acmpne     45
      42: goto          73
      45: aload_3
      46: getstatic     #39                 // Field com/mongodb/internal/connection/ConcurrentPool$Prune.YES:Lcom/mongodb/internal/connection/ConcurrentPool$Prune;
      49: if_acmpne     70
      52: aload_1
      53: invokeinterface #40,  1           // InterfaceMethod com/mongodb/internal/connection/ConcurrentLinkedDeque$RemovalReportingIterator.reportingRemove:()Z
      58: istore        4
      60: iload         4
      62: ifeq          70
      65: aload_0
      66: aload_2
      67: invokespecial #15                 // Method close:(Ljava/lang/Object;)V
      70: goto          8
      73: return

  public void ensureMinSize(int, boolean);
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method getCount:()I
       4: iload_1
       5: if_icmpge     36
       8: aload_0
       9: ldc2_w        #42                 // long 10l
      12: getstatic     #20                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      15: invokevirtual #25                 // Method acquirePermit:(JLjava/util/concurrent/TimeUnit;)Z
      18: ifne          24
      21: goto          36
      24: aload_0
      25: aload_0
      26: iload_2
      27: invokespecial #33                 // Method createNewAndReleasePermitIfFailure:(Z)Ljava/lang/Object;
      30: invokevirtual #44                 // Method release:(Ljava/lang/Object;)V
      33: goto          0
      36: return

  private T createNewAndReleasePermitIfFailure(boolean);
    Code:
       0: aload_0
       1: getfield      #6                  // Field itemFactory:Lcom/mongodb/internal/connection/ConcurrentPool$ItemFactory;
       4: iload_1
       5: invokeinterface #45,  2           // InterfaceMethod com/mongodb/internal/connection/ConcurrentPool$ItemFactory.create:(Z)Ljava/lang/Object;
      10: astore_2
      11: aload_2
      12: ifnonnull     25
      15: new           #46                 // class com/mongodb/MongoInternalException
      18: dup
      19: ldc           #47                 // String The factory for the pool created a null item
      21: invokespecial #48                 // Method com/mongodb/MongoInternalException."<init>":(Ljava/lang/String;)V
      24: athrow
      25: aload_2
      26: areturn
      27: astore_2
      28: aload_0
      29: getfield      #9                  // Field permits:Ljava/util/concurrent/Semaphore;
      32: invokevirtual #50                 // Method java/util/concurrent/Semaphore.release:()V
      35: aload_2
      36: athrow
    Exception table:
       from    to  target type
           0    26    27   Class java/lang/RuntimeException

  protected boolean acquirePermit(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #14                 // Field closed:Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: lload_1
      10: lconst_0
      11: lcmp
      12: iflt          25
      15: aload_0
      16: getfield      #9                  // Field permits:Ljava/util/concurrent/Semaphore;
      19: lload_1
      20: aload_3
      21: invokevirtual #51                 // Method java/util/concurrent/Semaphore.tryAcquire:(JLjava/util/concurrent/TimeUnit;)Z
      24: ireturn
      25: aload_0
      26: getfield      #9                  // Field permits:Ljava/util/concurrent/Semaphore;
      29: invokevirtual #52                 // Method java/util/concurrent/Semaphore.acquire:()V
      32: iconst_1
      33: ireturn
      34: astore        4
      36: new           #54                 // class com/mongodb/MongoInterruptedException
      39: dup
      40: ldc           #55                 // String Interrupted acquiring a permit to retrieve an item from the pool
      42: aload         4
      44: invokespecial #56                 // Method com/mongodb/MongoInterruptedException."<init>":(Ljava/lang/String;Ljava/lang/Exception;)V
      47: athrow
    Exception table:
       from    to  target type
           0     8    34   Class java/lang/InterruptedException
           9    24    34   Class java/lang/InterruptedException
          25    33    34   Class java/lang/InterruptedException

  protected void releasePermit();
    Code:
       0: aload_0
       1: getfield      #9                  // Field permits:Ljava/util/concurrent/Semaphore;
       4: invokevirtual #50                 // Method java/util/concurrent/Semaphore.release:()V
       7: return

  public void close();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #14                 // Field closed:Z
       5: aload_0
       6: getfield      #4                  // Field available:Lcom/mongodb/internal/connection/ConcurrentLinkedDeque;
       9: invokevirtual #34                 // Method com/mongodb/internal/connection/ConcurrentLinkedDeque.iterator:()Lcom/mongodb/internal/connection/ConcurrentLinkedDeque$RemovalReportingIterator;
      12: astore_1
      13: aload_1
      14: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          43
      22: aload_1
      23: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: astore_2
      29: aload_0
      30: aload_2
      31: invokespecial #15                 // Method close:(Ljava/lang/Object;)V
      34: aload_1
      35: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.remove:()V
      40: goto          13
      43: return

  public int getMaxSize();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxSize:I
       4: ireturn

  public int getInUseCount();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxSize:I
       4: aload_0
       5: getfield      #9                  // Field permits:Ljava/util/concurrent/Semaphore;
       8: invokevirtual #60                 // Method java/util/concurrent/Semaphore.availablePermits:()I
      11: isub
      12: ireturn

  public int getAvailableCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field available:Lcom/mongodb/internal/connection/ConcurrentLinkedDeque;
       4: invokevirtual #61                 // Method com/mongodb/internal/connection/ConcurrentLinkedDeque.size:()I
       7: ireturn

  public int getCount();
    Code:
       0: aload_0
       1: invokevirtual #62                 // Method getInUseCount:()I
       4: aload_0
       5: invokevirtual #63                 // Method getAvailableCount:()I
       8: iadd
       9: ireturn

  public java.lang.String toString();
    Code:
       0: new           #64                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #66                 // String pool:
      11: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: ldc           #68                 // String  maxSize:
      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_0
      20: getfield      #5                  // Field maxSize:I
      23: invokevirtual #69                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      26: ldc           #70                 // String  availableCount
      28: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_0
      32: invokevirtual #63                 // Method getAvailableCount:()I
      35: invokevirtual #69                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      38: ldc           #71                 // String  inUseCount
      40: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload_0
      44: invokevirtual #62                 // Method getInUseCount:()I
      47: invokevirtual #69                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      50: pop
      51: aload_1
      52: invokevirtual #72                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      55: areturn

  private void close(T);
    Code:
       0: aload_0
       1: getfield      #6                  // Field itemFactory:Lcom/mongodb/internal/connection/ConcurrentPool$ItemFactory;
       4: aload_1
       5: invokeinterface #73,  2           // InterfaceMethod com/mongodb/internal/connection/ConcurrentPool$ItemFactory.close:(Ljava/lang/Object;)V
      10: goto          14
      13: astore_2
      14: return
    Exception table:
       from    to  target type
           0    10    13   Class java/lang/RuntimeException
}
