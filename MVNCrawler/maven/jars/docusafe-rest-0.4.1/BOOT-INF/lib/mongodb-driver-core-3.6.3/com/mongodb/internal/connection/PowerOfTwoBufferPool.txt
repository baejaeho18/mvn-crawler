Compiled from "PowerOfTwoBufferPool.java"
public class com.mongodb.internal.connection.PowerOfTwoBufferPool implements com.mongodb.connection.BufferProvider {
  private final java.util.Map<java.lang.Integer, com.mongodb.internal.connection.ConcurrentPool<java.nio.ByteBuffer>> powerOfTwoToPoolMap;

  public com.mongodb.internal.connection.PowerOfTwoBufferPool();
    Code:
       0: aload_0
       1: bipush        24
       3: invokespecial #3                  // Method "<init>":(I)V
       6: return

  public com.mongodb.internal.connection.PowerOfTwoBufferPool(int);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/util/HashMap
       8: dup
       9: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      12: putfield      #7                  // Field powerOfTwoToPoolMap:Ljava/util/Map;
      15: iconst_1
      16: istore_2
      17: iconst_0
      18: istore_3
      19: iload_3
      20: iload_1
      21: if_icmpgt     70
      24: iload_2
      25: istore        4
      27: aload_0
      28: getfield      #7                  // Field powerOfTwoToPoolMap:Ljava/util/Map;
      31: iload_3
      32: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      35: new           #9                  // class com/mongodb/internal/connection/ConcurrentPool
      38: dup
      39: ldc           #11                 // int 2147483647
      41: new           #12                 // class com/mongodb/internal/connection/PowerOfTwoBufferPool$1
      44: dup
      45: aload_0
      46: iload         4
      48: invokespecial #13                 // Method com/mongodb/internal/connection/PowerOfTwoBufferPool$1."<init>":(Lcom/mongodb/internal/connection/PowerOfTwoBufferPool;I)V
      51: invokespecial #14                 // Method com/mongodb/internal/connection/ConcurrentPool."<init>":(ILcom/mongodb/internal/connection/ConcurrentPool$ItemFactory;)V
      54: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      59: pop
      60: iload_2
      61: iconst_1
      62: ishl
      63: istore_2
      64: iinc          3, 1
      67: goto          19
      70: return

  public org.bson.ByteBuf getBuffer(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field powerOfTwoToPoolMap:Ljava/util/Map;
       4: iload_1
       5: invokestatic  #16                 // Method roundUpToNextHighestPowerOfTwo:(I)I
       8: invokestatic  #17                 // Method log2:(I)I
      11: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: invokeinterface #18,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #9                  // class com/mongodb/internal/connection/ConcurrentPool
      22: astore_2
      23: aload_2
      24: ifnonnull     35
      27: aload_0
      28: iload_1
      29: invokespecial #2                  // Method createNew:(I)Ljava/nio/ByteBuffer;
      32: goto          42
      35: aload_2
      36: invokevirtual #19                 // Method com/mongodb/internal/connection/ConcurrentPool.get:()Ljava/lang/Object;
      39: checkcast     #20                 // class java/nio/ByteBuffer
      42: astore_3
      43: aload_3
      44: invokevirtual #21                 // Method java/nio/Buffer.clear:()Ljava/nio/Buffer;
      47: pop
      48: aload_3
      49: iload_1
      50: invokevirtual #22                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;
      53: pop
      54: new           #23                 // class com/mongodb/internal/connection/PowerOfTwoBufferPool$PooledByteBufNIO
      57: dup
      58: aload_0
      59: aload_3
      60: invokespecial #24                 // Method com/mongodb/internal/connection/PowerOfTwoBufferPool$PooledByteBufNIO."<init>":(Lcom/mongodb/internal/connection/PowerOfTwoBufferPool;Ljava/nio/ByteBuffer;)V
      63: areturn

  private java.nio.ByteBuffer createNew(int);
    Code:
       0: iload_1
       1: invokestatic  #25                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
       4: astore_2
       5: aload_2
       6: getstatic     #26                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
       9: invokevirtual #27                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
      12: pop
      13: aload_2
      14: areturn

  private void release(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #7                  // Field powerOfTwoToPoolMap:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #28                 // Method java/nio/ByteBuffer.capacity:()I
       8: invokestatic  #16                 // Method roundUpToNextHighestPowerOfTwo:(I)I
      11: invokestatic  #17                 // Method log2:(I)I
      14: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      17: invokeinterface #18,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #9                  // class com/mongodb/internal/connection/ConcurrentPool
      25: astore_2
      26: aload_2
      27: ifnull        35
      30: aload_2
      31: aload_1
      32: invokevirtual #29                 // Method com/mongodb/internal/connection/ConcurrentPool.release:(Ljava/lang/Object;)V
      35: return

  static int log2(int);
    Code:
       0: bipush        31
       2: iload_0
       3: invokestatic  #30                 // Method java/lang/Integer.numberOfLeadingZeros:(I)I
       6: isub
       7: ireturn

  static int roundUpToNextHighestPowerOfTwo(int);
    Code:
       0: iload_0
       1: istore_1
       2: iinc          1, -1
       5: iload_1
       6: iload_1
       7: iconst_1
       8: ishr
       9: ior
      10: istore_1
      11: iload_1
      12: iload_1
      13: iconst_2
      14: ishr
      15: ior
      16: istore_1
      17: iload_1
      18: iload_1
      19: iconst_4
      20: ishr
      21: ior
      22: istore_1
      23: iload_1
      24: iload_1
      25: bipush        8
      27: ishr
      28: ior
      29: istore_1
      30: iload_1
      31: iload_1
      32: bipush        16
      34: ishr
      35: ior
      36: istore_1
      37: iinc          1, 1
      40: iload_1
      41: ireturn

  static java.nio.ByteBuffer access$000(com.mongodb.internal.connection.PowerOfTwoBufferPool, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #2                  // Method createNew:(I)Ljava/nio/ByteBuffer;
       5: areturn

  static void access$100(com.mongodb.internal.connection.PowerOfTwoBufferPool, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method release:(Ljava/nio/ByteBuffer;)V
       5: return
}
