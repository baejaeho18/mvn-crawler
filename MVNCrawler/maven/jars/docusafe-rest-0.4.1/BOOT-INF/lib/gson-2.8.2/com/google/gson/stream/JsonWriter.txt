Compiled from "JsonWriter.java"
public class com.google.gson.stream.JsonWriter implements java.io.Closeable,java.io.Flushable {
  private static final java.lang.String[] REPLACEMENT_CHARS;

  private static final java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS;

  private final java.io.Writer out;

  private int[] stack;

  private int stackSize;

  private java.lang.String indent;

  private java.lang.String separator;

  private boolean lenient;

  private boolean htmlSafe;

  private java.lang.String deferredName;

  private boolean serializeNulls;

  public com.google.gson.stream.JsonWriter(java.io.Writer);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        32
       7: newarray       int
       9: putfield      #3                  // Field stack:[I
      12: aload_0
      13: iconst_0
      14: putfield      #4                  // Field stackSize:I
      17: aload_0
      18: bipush        6
      20: invokespecial #5                  // Method push:(I)V
      23: aload_0
      24: ldc           #6                  // String :
      26: putfield      #7                  // Field separator:Ljava/lang/String;
      29: aload_0
      30: iconst_1
      31: putfield      #8                  // Field serializeNulls:Z
      34: aload_1
      35: ifnonnull     48
      38: new           #9                  // class java/lang/NullPointerException
      41: dup
      42: ldc           #10                 // String out == null
      44: invokespecial #11                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_0
      49: aload_1
      50: putfield      #12                 // Field out:Ljava/io/Writer;
      53: return

  public final void setIndent(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #13                 // Method java/lang/String.length:()I
       4: ifne          21
       7: aload_0
       8: aconst_null
       9: putfield      #14                 // Field indent:Ljava/lang/String;
      12: aload_0
      13: ldc           #6                  // String :
      15: putfield      #7                  // Field separator:Ljava/lang/String;
      18: goto          32
      21: aload_0
      22: aload_1
      23: putfield      #14                 // Field indent:Ljava/lang/String;
      26: aload_0
      27: ldc           #15                 // String :
      29: putfield      #7                  // Field separator:Ljava/lang/String;
      32: return

  public final void setLenient(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field lenient:Z
       5: return

  public boolean isLenient();
    Code:
       0: aload_0
       1: getfield      #16                 // Field lenient:Z
       4: ireturn

  public final void setHtmlSafe(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field htmlSafe:Z
       5: return

  public final boolean isHtmlSafe();
    Code:
       0: aload_0
       1: getfield      #17                 // Field htmlSafe:Z
       4: ireturn

  public final void setSerializeNulls(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field serializeNulls:Z
       5: return

  public final boolean getSerializeNulls();
    Code:
       0: aload_0
       1: getfield      #8                  // Field serializeNulls:Z
       4: ireturn

  public com.google.gson.stream.JsonWriter beginArray() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #18                 // Method writeDeferredName:()V
       4: aload_0
       5: iconst_1
       6: ldc           #19                 // String [
       8: invokespecial #20                 // Method open:(ILjava/lang/String;)Lcom/google/gson/stream/JsonWriter;
      11: areturn

  public com.google.gson.stream.JsonWriter endArray() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: iconst_2
       3: ldc           #21                 // String ]
       5: invokespecial #22                 // Method close:(IILjava/lang/String;)Lcom/google/gson/stream/JsonWriter;
       8: areturn

  public com.google.gson.stream.JsonWriter beginObject() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #18                 // Method writeDeferredName:()V
       4: aload_0
       5: iconst_3
       6: ldc           #23                 // String {
       8: invokespecial #20                 // Method open:(ILjava/lang/String;)Lcom/google/gson/stream/JsonWriter;
      11: areturn

  public com.google.gson.stream.JsonWriter endObject() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_3
       2: iconst_5
       3: ldc           #24                 // String }
       5: invokespecial #22                 // Method close:(IILjava/lang/String;)Lcom/google/gson/stream/JsonWriter;
       8: areturn

  private com.google.gson.stream.JsonWriter open(int, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #25                 // Method beforeValue:()V
       4: aload_0
       5: iload_1
       6: invokespecial #5                  // Method push:(I)V
       9: aload_0
      10: getfield      #12                 // Field out:Ljava/io/Writer;
      13: aload_2
      14: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      17: aload_0
      18: areturn

  private com.google.gson.stream.JsonWriter close(int, int, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #27                 // Method peek:()I
       4: istore        4
       6: iload         4
       8: iload_2
       9: if_icmpeq     28
      12: iload         4
      14: iload_1
      15: if_icmpeq     28
      18: new           #28                 // class java/lang/IllegalStateException
      21: dup
      22: ldc           #29                 // String Nesting problem.
      24: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: getfield      #31                 // Field deferredName:Ljava/lang/String;
      32: ifnull        65
      35: new           #28                 // class java/lang/IllegalStateException
      38: dup
      39: new           #32                 // class java/lang/StringBuilder
      42: dup
      43: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      46: ldc           #34                 // String Dangling name:
      48: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: aload_0
      52: getfield      #31                 // Field deferredName:Ljava/lang/String;
      55: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_0
      66: dup
      67: getfield      #4                  // Field stackSize:I
      70: iconst_1
      71: isub
      72: putfield      #4                  // Field stackSize:I
      75: iload         4
      77: iload_2
      78: if_icmpne     85
      81: aload_0
      82: invokespecial #37                 // Method newline:()V
      85: aload_0
      86: getfield      #12                 // Field out:Ljava/io/Writer;
      89: aload_3
      90: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      93: aload_0
      94: areturn

  private void push(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field stackSize:I
       4: aload_0
       5: getfield      #3                  // Field stack:[I
       8: arraylength
       9: if_icmpne     40
      12: aload_0
      13: getfield      #4                  // Field stackSize:I
      16: iconst_2
      17: imul
      18: newarray       int
      20: astore_2
      21: aload_0
      22: getfield      #3                  // Field stack:[I
      25: iconst_0
      26: aload_2
      27: iconst_0
      28: aload_0
      29: getfield      #4                  // Field stackSize:I
      32: invokestatic  #38                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      35: aload_0
      36: aload_2
      37: putfield      #3                  // Field stack:[I
      40: aload_0
      41: getfield      #3                  // Field stack:[I
      44: aload_0
      45: dup
      46: getfield      #4                  // Field stackSize:I
      49: dup_x1
      50: iconst_1
      51: iadd
      52: putfield      #4                  // Field stackSize:I
      55: iload_1
      56: iastore
      57: return

  private int peek();
    Code:
       0: aload_0
       1: getfield      #4                  // Field stackSize:I
       4: ifne          17
       7: new           #28                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #39                 // String JsonWriter is closed.
      13: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #3                  // Field stack:[I
      21: aload_0
      22: getfield      #4                  // Field stackSize:I
      25: iconst_1
      26: isub
      27: iaload
      28: ireturn

  private void replaceTop(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stack:[I
       4: aload_0
       5: getfield      #4                  // Field stackSize:I
       8: iconst_1
       9: isub
      10: iload_1
      11: iastore
      12: return

  public com.google.gson.stream.JsonWriter name(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #9                  // class java/lang/NullPointerException
       7: dup
       8: ldc           #40                 // String name == null
      10: invokespecial #11                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #31                 // Field deferredName:Ljava/lang/String;
      18: ifnull        29
      21: new           #28                 // class java/lang/IllegalStateException
      24: dup
      25: invokespecial #41                 // Method java/lang/IllegalStateException."<init>":()V
      28: athrow
      29: aload_0
      30: getfield      #4                  // Field stackSize:I
      33: ifne          46
      36: new           #28                 // class java/lang/IllegalStateException
      39: dup
      40: ldc           #39                 // String JsonWriter is closed.
      42: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload_0
      47: aload_1
      48: putfield      #31                 // Field deferredName:Ljava/lang/String;
      51: aload_0
      52: areturn

  private void writeDeferredName() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #31                 // Field deferredName:Ljava/lang/String;
       4: ifnull        24
       7: aload_0
       8: invokespecial #42                 // Method beforeName:()V
      11: aload_0
      12: aload_0
      13: getfield      #31                 // Field deferredName:Ljava/lang/String;
      16: invokespecial #43                 // Method string:(Ljava/lang/String;)V
      19: aload_0
      20: aconst_null
      21: putfield      #31                 // Field deferredName:Ljava/lang/String;
      24: return

  public com.google.gson.stream.JsonWriter value(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #44                 // Method nullValue:()Lcom/google/gson/stream/JsonWriter;
       8: areturn
       9: aload_0
      10: invokespecial #18                 // Method writeDeferredName:()V
      13: aload_0
      14: invokespecial #25                 // Method beforeValue:()V
      17: aload_0
      18: aload_1
      19: invokespecial #43                 // Method string:(Ljava/lang/String;)V
      22: aload_0
      23: areturn

  public com.google.gson.stream.JsonWriter jsonValue(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #44                 // Method nullValue:()Lcom/google/gson/stream/JsonWriter;
       8: areturn
       9: aload_0
      10: invokespecial #18                 // Method writeDeferredName:()V
      13: aload_0
      14: invokespecial #25                 // Method beforeValue:()V
      17: aload_0
      18: getfield      #12                 // Field out:Ljava/io/Writer;
      21: aload_1
      22: invokevirtual #45                 // Method java/io/Writer.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
      25: pop
      26: aload_0
      27: areturn

  public com.google.gson.stream.JsonWriter nullValue() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #31                 // Field deferredName:Ljava/lang/String;
       4: ifnull        28
       7: aload_0
       8: getfield      #8                  // Field serializeNulls:Z
      11: ifeq          21
      14: aload_0
      15: invokespecial #18                 // Method writeDeferredName:()V
      18: goto          28
      21: aload_0
      22: aconst_null
      23: putfield      #31                 // Field deferredName:Ljava/lang/String;
      26: aload_0
      27: areturn
      28: aload_0
      29: invokespecial #25                 // Method beforeValue:()V
      32: aload_0
      33: getfield      #12                 // Field out:Ljava/io/Writer;
      36: ldc           #46                 // String null
      38: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      41: aload_0
      42: areturn

  public com.google.gson.stream.JsonWriter value(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #18                 // Method writeDeferredName:()V
       4: aload_0
       5: invokespecial #25                 // Method beforeValue:()V
       8: aload_0
       9: getfield      #12                 // Field out:Ljava/io/Writer;
      12: iload_1
      13: ifeq          21
      16: ldc           #47                 // String true
      18: goto          23
      21: ldc           #48                 // String false
      23: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      26: aload_0
      27: areturn

  public com.google.gson.stream.JsonWriter value(java.lang.Boolean) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #44                 // Method nullValue:()Lcom/google/gson/stream/JsonWriter;
       8: areturn
       9: aload_0
      10: invokespecial #18                 // Method writeDeferredName:()V
      13: aload_0
      14: invokespecial #25                 // Method beforeValue:()V
      17: aload_0
      18: getfield      #12                 // Field out:Ljava/io/Writer;
      21: aload_1
      22: invokevirtual #49                 // Method java/lang/Boolean.booleanValue:()Z
      25: ifeq          33
      28: ldc           #47                 // String true
      30: goto          35
      33: ldc           #48                 // String false
      35: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      38: aload_0
      39: areturn

  public com.google.gson.stream.JsonWriter value(double) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #18                 // Method writeDeferredName:()V
       4: aload_0
       5: getfield      #16                 // Field lenient:Z
       8: ifne          52
      11: dload_1
      12: invokestatic  #50                 // Method java/lang/Double.isNaN:(D)Z
      15: ifne          25
      18: dload_1
      19: invokestatic  #51                 // Method java/lang/Double.isInfinite:(D)Z
      22: ifeq          52
      25: new           #52                 // class java/lang/IllegalArgumentException
      28: dup
      29: new           #32                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #53                 // String Numeric values must be finite, but was
      38: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: dload_1
      42: invokevirtual #54                 // Method java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
      45: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokespecial #55                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: aload_0
      53: invokespecial #25                 // Method beforeValue:()V
      56: aload_0
      57: getfield      #12                 // Field out:Ljava/io/Writer;
      60: dload_1
      61: invokestatic  #56                 // Method java/lang/Double.toString:(D)Ljava/lang/String;
      64: invokevirtual #45                 // Method java/io/Writer.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
      67: pop
      68: aload_0
      69: areturn

  public com.google.gson.stream.JsonWriter value(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #18                 // Method writeDeferredName:()V
       4: aload_0
       5: invokespecial #25                 // Method beforeValue:()V
       8: aload_0
       9: getfield      #12                 // Field out:Ljava/io/Writer;
      12: lload_1
      13: invokestatic  #57                 // Method java/lang/Long.toString:(J)Ljava/lang/String;
      16: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      19: aload_0
      20: areturn

  public com.google.gson.stream.JsonWriter value(java.lang.Number) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #44                 // Method nullValue:()Lcom/google/gson/stream/JsonWriter;
       8: areturn
       9: aload_0
      10: invokespecial #18                 // Method writeDeferredName:()V
      13: aload_1
      14: invokevirtual #58                 // Method java/lang/Object.toString:()Ljava/lang/String;
      17: astore_2
      18: aload_0
      19: getfield      #16                 // Field lenient:Z
      22: ifne          79
      25: aload_2
      26: ldc           #59                 // String -Infinity
      28: invokevirtual #60                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      31: ifne          52
      34: aload_2
      35: ldc           #61                 // String Infinity
      37: invokevirtual #60                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      40: ifne          52
      43: aload_2
      44: ldc           #62                 // String NaN
      46: invokevirtual #60                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      49: ifeq          79
      52: new           #52                 // class java/lang/IllegalArgumentException
      55: dup
      56: new           #32                 // class java/lang/StringBuilder
      59: dup
      60: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      63: ldc           #53                 // String Numeric values must be finite, but was
      65: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: aload_1
      69: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      72: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: invokespecial #55                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      78: athrow
      79: aload_0
      80: invokespecial #25                 // Method beforeValue:()V
      83: aload_0
      84: getfield      #12                 // Field out:Ljava/io/Writer;
      87: aload_2
      88: invokevirtual #45                 // Method java/io/Writer.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
      91: pop
      92: aload_0
      93: areturn

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field stackSize:I
       4: ifne          17
       7: new           #28                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #39                 // String JsonWriter is closed.
      13: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #12                 // Field out:Ljava/io/Writer;
      21: invokevirtual #64                 // Method java/io/Writer.flush:()V
      24: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field out:Ljava/io/Writer;
       4: invokevirtual #65                 // Method java/io/Writer.close:()V
       7: aload_0
       8: getfield      #4                  // Field stackSize:I
      11: istore_1
      12: iload_1
      13: iconst_1
      14: if_icmpgt     35
      17: iload_1
      18: iconst_1
      19: if_icmpne     45
      22: aload_0
      23: getfield      #3                  // Field stack:[I
      26: iload_1
      27: iconst_1
      28: isub
      29: iaload
      30: bipush        7
      32: if_icmpeq     45
      35: new           #66                 // class java/io/IOException
      38: dup
      39: ldc           #67                 // String Incomplete document
      41: invokespecial #68                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      44: athrow
      45: aload_0
      46: iconst_0
      47: putfield      #4                  // Field stackSize:I
      50: return

  private void string(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #17                 // Field htmlSafe:Z
       4: ifeq          13
       7: getstatic     #69                 // Field HTML_SAFE_REPLACEMENT_CHARS:[Ljava/lang/String;
      10: goto          16
      13: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
      16: astore_2
      17: aload_0
      18: getfield      #12                 // Field out:Ljava/io/Writer;
      21: ldc           #71                 // String \"
      23: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      26: iconst_0
      27: istore_3
      28: aload_1
      29: invokevirtual #13                 // Method java/lang/String.length:()I
      32: istore        4
      34: iconst_0
      35: istore        5
      37: iload         5
      39: iload         4
      41: if_icmpge     140
      44: aload_1
      45: iload         5
      47: invokevirtual #72                 // Method java/lang/String.charAt:(I)C
      50: istore        6
      52: iload         6
      54: sipush        128
      57: if_icmpge     74
      60: aload_2
      61: iload         6
      63: aaload
      64: astore        7
      66: aload         7
      68: ifnonnull     101
      71: goto          134
      74: iload         6
      76: sipush        8232
      79: if_icmpne     89
      82: ldc           #73                 // String \\u2028
      84: astore        7
      86: goto          101
      89: iload         6
      91: sipush        8233
      94: if_icmpne     134
      97: ldc           #74                 // String \\u2029
      99: astore        7
     101: iload_3
     102: iload         5
     104: if_icmpge     120
     107: aload_0
     108: getfield      #12                 // Field out:Ljava/io/Writer;
     111: aload_1
     112: iload_3
     113: iload         5
     115: iload_3
     116: isub
     117: invokevirtual #75                 // Method java/io/Writer.write:(Ljava/lang/String;II)V
     120: aload_0
     121: getfield      #12                 // Field out:Ljava/io/Writer;
     124: aload         7
     126: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     129: iload         5
     131: iconst_1
     132: iadd
     133: istore_3
     134: iinc          5, 1
     137: goto          37
     140: iload_3
     141: iload         4
     143: if_icmpge     159
     146: aload_0
     147: getfield      #12                 // Field out:Ljava/io/Writer;
     150: aload_1
     151: iload_3
     152: iload         4
     154: iload_3
     155: isub
     156: invokevirtual #75                 // Method java/io/Writer.write:(Ljava/lang/String;II)V
     159: aload_0
     160: getfield      #12                 // Field out:Ljava/io/Writer;
     163: ldc           #71                 // String \"
     165: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     168: return

  private void newline() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field indent:Ljava/lang/String;
       4: ifnonnull     8
       7: return
       8: aload_0
       9: getfield      #12                 // Field out:Ljava/io/Writer;
      12: ldc           #76                 // String \n
      14: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      17: iconst_1
      18: istore_1
      19: aload_0
      20: getfield      #4                  // Field stackSize:I
      23: istore_2
      24: iload_1
      25: iload_2
      26: if_icmpge     46
      29: aload_0
      30: getfield      #12                 // Field out:Ljava/io/Writer;
      33: aload_0
      34: getfield      #14                 // Field indent:Ljava/lang/String;
      37: invokevirtual #26                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      40: iinc          1, 1
      43: goto          24
      46: return

  private void beforeName() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #27                 // Method peek:()I
       4: istore_1
       5: iload_1
       6: iconst_5
       7: if_icmpne     22
      10: aload_0
      11: getfield      #12                 // Field out:Ljava/io/Writer;
      14: bipush        44
      16: invokevirtual #77                 // Method java/io/Writer.write:(I)V
      19: goto          37
      22: iload_1
      23: iconst_3
      24: if_icmpeq     37
      27: new           #28                 // class java/lang/IllegalStateException
      30: dup
      31: ldc           #29                 // String Nesting problem.
      33: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: invokespecial #37                 // Method newline:()V
      41: aload_0
      42: iconst_4
      43: invokespecial #78                 // Method replaceTop:(I)V
      46: return

  private void beforeValue() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #27                 // Method peek:()I
       4: tableswitch   { // 1 to 7
                     1: 74
                     2: 86
                     3: 123
                     4: 103
                     5: 123
                     6: 65
                     7: 48
               default: 123
          }
      48: aload_0
      49: getfield      #16                 // Field lenient:Z
      52: ifne          65
      55: new           #28                 // class java/lang/IllegalStateException
      58: dup
      59: ldc           #79                 // String JSON must have only one top-level value.
      61: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_0
      66: bipush        7
      68: invokespecial #78                 // Method replaceTop:(I)V
      71: goto          133
      74: aload_0
      75: iconst_2
      76: invokespecial #78                 // Method replaceTop:(I)V
      79: aload_0
      80: invokespecial #37                 // Method newline:()V
      83: goto          133
      86: aload_0
      87: getfield      #12                 // Field out:Ljava/io/Writer;
      90: bipush        44
      92: invokevirtual #80                 // Method java/io/Writer.append:(C)Ljava/io/Writer;
      95: pop
      96: aload_0
      97: invokespecial #37                 // Method newline:()V
     100: goto          133
     103: aload_0
     104: getfield      #12                 // Field out:Ljava/io/Writer;
     107: aload_0
     108: getfield      #7                  // Field separator:Ljava/lang/String;
     111: invokevirtual #45                 // Method java/io/Writer.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
     114: pop
     115: aload_0
     116: iconst_5
     117: invokespecial #78                 // Method replaceTop:(I)V
     120: goto          133
     123: new           #28                 // class java/lang/IllegalStateException
     126: dup
     127: ldc           #29                 // String Nesting problem.
     129: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     132: athrow
     133: return

  static {};
    Code:
       0: sipush        128
       3: anewarray     #81                 // class java/lang/String
       6: putstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
       9: iconst_0
      10: istore_0
      11: iload_0
      12: bipush        31
      14: if_icmpgt     44
      17: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
      20: iload_0
      21: ldc           #82                 // String \\u%04x
      23: iconst_1
      24: anewarray     #83                 // class java/lang/Object
      27: dup
      28: iconst_0
      29: iload_0
      30: invokestatic  #84                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      33: aastore
      34: invokestatic  #85                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      37: aastore
      38: iinc          0, 1
      41: goto          11
      44: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
      47: bipush        34
      49: ldc           #86                 // String \\\"
      51: aastore
      52: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
      55: bipush        92
      57: ldc           #87                 // String \\\\
      59: aastore
      60: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
      63: bipush        9
      65: ldc           #88                 // String \\t
      67: aastore
      68: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
      71: bipush        8
      73: ldc           #89                 // String \\b
      75: aastore
      76: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
      79: bipush        10
      81: ldc           #90                 // String \\n
      83: aastore
      84: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
      87: bipush        13
      89: ldc           #91                 // String \\r
      91: aastore
      92: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
      95: bipush        12
      97: ldc           #92                 // String \\f
      99: aastore
     100: getstatic     #70                 // Field REPLACEMENT_CHARS:[Ljava/lang/String;
     103: invokevirtual #93                 // Method "[Ljava/lang/String;".clone:()Ljava/lang/Object;
     106: checkcast     #94                 // class "[Ljava/lang/String;"
     109: putstatic     #69                 // Field HTML_SAFE_REPLACEMENT_CHARS:[Ljava/lang/String;
     112: getstatic     #69                 // Field HTML_SAFE_REPLACEMENT_CHARS:[Ljava/lang/String;
     115: bipush        60
     117: ldc           #95                 // String \\u003c
     119: aastore
     120: getstatic     #69                 // Field HTML_SAFE_REPLACEMENT_CHARS:[Ljava/lang/String;
     123: bipush        62
     125: ldc           #96                 // String \\u003e
     127: aastore
     128: getstatic     #69                 // Field HTML_SAFE_REPLACEMENT_CHARS:[Ljava/lang/String;
     131: bipush        38
     133: ldc           #97                 // String \\u0026
     135: aastore
     136: getstatic     #69                 // Field HTML_SAFE_REPLACEMENT_CHARS:[Ljava/lang/String;
     139: bipush        61
     141: ldc           #98                 // String \\u003d
     143: aastore
     144: getstatic     #69                 // Field HTML_SAFE_REPLACEMENT_CHARS:[Ljava/lang/String;
     147: bipush        39
     149: ldc           #99                 // String \\u0027
     151: aastore
     152: return
}
