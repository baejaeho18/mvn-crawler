Compiled from "OpenSSLX509Certificate.java"
final class org.apache.tomcat.util.net.openssl.OpenSSLX509Certificate extends java.security.cert.X509Certificate {
  private final byte[] bytes;

  private java.security.cert.X509Certificate wrapped;

  public org.apache.tomcat.util.net.openssl.OpenSSLX509Certificate(byte[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/security/cert/X509Certificate."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field bytes:[B
       9: return

  public void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #4                  // Method java/security/cert/X509Certificate.checkValidity:()V
       7: return

  public void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: aload_1
       5: invokevirtual #5                  // Method java/security/cert/X509Certificate.checkValidity:(Ljava/util/Date;)V
       8: return

  public int getVersion();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #6                  // Method java/security/cert/X509Certificate.getVersion:()I
       7: ireturn

  public java.math.BigInteger getSerialNumber();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #7                  // Method java/security/cert/X509Certificate.getSerialNumber:()Ljava/math/BigInteger;
       7: areturn

  public java.security.Principal getIssuerDN();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #8                  // Method java/security/cert/X509Certificate.getIssuerDN:()Ljava/security/Principal;
       7: areturn

  public java.security.Principal getSubjectDN();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #9                  // Method java/security/cert/X509Certificate.getSubjectDN:()Ljava/security/Principal;
       7: areturn

  public java.util.Date getNotBefore();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #10                 // Method java/security/cert/X509Certificate.getNotBefore:()Ljava/util/Date;
       7: areturn

  public java.util.Date getNotAfter();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #11                 // Method java/security/cert/X509Certificate.getNotAfter:()Ljava/util/Date;
       7: areturn

  public byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #12                 // Method java/security/cert/X509Certificate.getTBSCertificate:()[B
       7: areturn

  public byte[] getSignature();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #13                 // Method java/security/cert/X509Certificate.getSignature:()[B
       7: areturn

  public java.lang.String getSigAlgName();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #14                 // Method java/security/cert/X509Certificate.getSigAlgName:()Ljava/lang/String;
       7: areturn

  public java.lang.String getSigAlgOID();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #15                 // Method java/security/cert/X509Certificate.getSigAlgOID:()Ljava/lang/String;
       7: areturn

  public byte[] getSigAlgParams();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #16                 // Method java/security/cert/X509Certificate.getSigAlgParams:()[B
       7: areturn

  public boolean[] getIssuerUniqueID();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #17                 // Method java/security/cert/X509Certificate.getIssuerUniqueID:()[Z
       7: areturn

  public boolean[] getSubjectUniqueID();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #18                 // Method java/security/cert/X509Certificate.getSubjectUniqueID:()[Z
       7: areturn

  public boolean[] getKeyUsage();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #19                 // Method java/security/cert/X509Certificate.getKeyUsage:()[Z
       7: areturn

  public int getBasicConstraints();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #20                 // Method java/security/cert/X509Certificate.getBasicConstraints:()I
       7: ireturn

  public byte[] getEncoded();
    Code:
       0: aload_0
       1: getfield      #2                  // Field bytes:[B
       4: invokevirtual #21                 // Method "[B".clone:()Ljava/lang/Object;
       7: checkcast     #22                 // class "[B"
      10: areturn

  public void verify(java.security.PublicKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: aload_1
       5: invokevirtual #23                 // Method java/security/cert/X509Certificate.verify:(Ljava/security/PublicKey;)V
       8: return

  public void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: aload_1
       5: aload_2
       6: invokevirtual #24                 // Method java/security/cert/X509Certificate.verify:(Ljava/security/PublicKey;Ljava/lang/String;)V
       9: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #25                 // Method java/security/cert/X509Certificate.toString:()Ljava/lang/String;
       7: areturn

  public java.security.PublicKey getPublicKey();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #26                 // Method java/security/cert/X509Certificate.getPublicKey:()Ljava/security/PublicKey;
       7: areturn

  public boolean hasUnsupportedCriticalExtension();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #27                 // Method java/security/cert/X509Certificate.hasUnsupportedCriticalExtension:()Z
       7: ireturn

  public java.util.Set<java.lang.String> getCriticalExtensionOIDs();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #28                 // Method java/security/cert/X509Certificate.getCriticalExtensionOIDs:()Ljava/util/Set;
       7: areturn

  public java.util.Set<java.lang.String> getNonCriticalExtensionOIDs();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: invokevirtual #29                 // Method java/security/cert/X509Certificate.getNonCriticalExtensionOIDs:()Ljava/util/Set;
       7: areturn

  public byte[] getExtensionValue(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method unwrap:()Ljava/security/cert/X509Certificate;
       4: aload_1
       5: invokevirtual #30                 // Method java/security/cert/X509Certificate.getExtensionValue:(Ljava/lang/String;)[B
       8: areturn

  private java.security.cert.X509Certificate unwrap();
    Code:
       0: aload_0
       1: getfield      #31                 // Field wrapped:Ljava/security/cert/X509Certificate;
       4: astore_1
       5: aload_1
       6: ifnonnull     48
       9: aload_0
      10: getstatic     #32                 // Field org/apache/tomcat/util/net/openssl/OpenSSLContext.X509_CERT_FACTORY:Ljava/security/cert/CertificateFactory;
      13: new           #33                 // class java/io/ByteArrayInputStream
      16: dup
      17: aload_0
      18: getfield      #2                  // Field bytes:[B
      21: invokespecial #34                 // Method java/io/ByteArrayInputStream."<init>":([B)V
      24: invokevirtual #35                 // Method java/security/cert/CertificateFactory.generateCertificate:(Ljava/io/InputStream;)Ljava/security/cert/Certificate;
      27: checkcast     #36                 // class java/security/cert/X509Certificate
      30: dup_x1
      31: putfield      #31                 // Field wrapped:Ljava/security/cert/X509Certificate;
      34: astore_1
      35: goto          48
      38: astore_2
      39: new           #38                 // class java/lang/IllegalStateException
      42: dup
      43: aload_2
      44: invokespecial #39                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
      47: athrow
      48: aload_1
      49: areturn
    Exception table:
       from    to  target type
           9    35    38   Class java/security/cert/CertificateException
}
