Compiled from "ContextAccessController.java"
public class org.apache.naming.ContextAccessController {
  private static final java.util.Hashtable<java.lang.Object, java.lang.Object> readOnlyContexts;

  private static final java.util.Hashtable<java.lang.Object, java.lang.Object> securityTokens;

  public org.apache.naming.ContextAccessController();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void setSecurityToken(java.lang.Object, java.lang.Object);
    Code:
       0: invokestatic  #2                  // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_2
       4: aload_2
       5: ifnull        43
       8: aload_2
       9: new           #3                  // class java/lang/RuntimePermission
      12: dup
      13: new           #4                  // class java/lang/StringBuilder
      16: dup
      17: invokespecial #5                  // Method java/lang/StringBuilder."<init>":()V
      20: ldc_w         #6                  // class org/apache/naming/ContextAccessController
      23: invokevirtual #7                  // Method java/lang/Class.getName:()Ljava/lang/String;
      26: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: ldc           #9                  // String .setSecurityToken
      31: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: invokespecial #11                 // Method java/lang/RuntimePermission."<init>":(Ljava/lang/String;)V
      40: invokevirtual #12                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      43: getstatic     #13                 // Field securityTokens:Ljava/util/Hashtable;
      46: aload_0
      47: invokevirtual #14                 // Method java/util/Hashtable.containsKey:(Ljava/lang/Object;)Z
      50: ifne          66
      53: aload_1
      54: ifnull        66
      57: getstatic     #13                 // Field securityTokens:Ljava/util/Hashtable;
      60: aload_0
      61: aload_1
      62: invokevirtual #15                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      65: pop
      66: return

  public static void unsetSecurityToken(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #16                 // Method checkSecurityToken:(Ljava/lang/Object;Ljava/lang/Object;)Z
       5: ifeq          16
       8: getstatic     #13                 // Field securityTokens:Ljava/util/Hashtable;
      11: aload_0
      12: invokevirtual #17                 // Method java/util/Hashtable.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: return

  public static boolean checkSecurityToken(java.lang.Object, java.lang.Object);
    Code:
       0: getstatic     #13                 // Field securityTokens:Ljava/util/Hashtable;
       3: aload_0
       4: invokevirtual #18                 // Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: astore_2
       8: aload_2
       9: ifnull        20
      12: aload_2
      13: aload_1
      14: invokevirtual #19                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public static void setWritable(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #16                 // Method checkSecurityToken:(Ljava/lang/Object;Ljava/lang/Object;)Z
       5: ifeq          16
       8: getstatic     #20                 // Field readOnlyContexts:Ljava/util/Hashtable;
      11: aload_0
      12: invokevirtual #17                 // Method java/util/Hashtable.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: return

  public static void setReadOnly(java.lang.Object);
    Code:
       0: getstatic     #20                 // Field readOnlyContexts:Ljava/util/Hashtable;
       3: aload_0
       4: aload_0
       5: invokevirtual #15                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: return

  public static boolean isWritable(java.lang.Object);
    Code:
       0: getstatic     #20                 // Field readOnlyContexts:Ljava/util/Hashtable;
       3: aload_0
       4: invokevirtual #14                 // Method java/util/Hashtable.containsKey:(Ljava/lang/Object;)Z
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static {};
    Code:
       0: new           #21                 // class java/util/Hashtable
       3: dup
       4: invokespecial #22                 // Method java/util/Hashtable."<init>":()V
       7: putstatic     #20                 // Field readOnlyContexts:Ljava/util/Hashtable;
      10: new           #21                 // class java/util/Hashtable
      13: dup
      14: invokespecial #22                 // Method java/util/Hashtable."<init>":()V
      17: putstatic     #13                 // Field securityTokens:Ljava/util/Hashtable;
      20: return
}
