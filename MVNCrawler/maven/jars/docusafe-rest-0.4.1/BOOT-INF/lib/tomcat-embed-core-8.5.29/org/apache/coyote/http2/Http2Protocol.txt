Compiled from "Http2Protocol.java"
public class org.apache.coyote.http2.Http2Protocol implements org.apache.coyote.UpgradeProtocol {
  static final long DEFAULT_READ_TIMEOUT;

  static final long DEFAULT_KEEP_ALIVE_TIMEOUT;

  static final long DEFAULT_WRITE_TIMEOUT;

  static final long DEFAULT_MAX_CONCURRENT_STREAMS;

  static final int DEFAULT_MAX_CONCURRENT_STREAM_EXECUTION;

  static final int DEFAULT_INITIAL_WINDOW_SIZE;

  private static final java.lang.String HTTP_UPGRADE_NAME;

  private static final java.lang.String ALPN_NAME;

  private static final byte[] ALPN_IDENTIFIER;

  private long readTimeout;

  private long keepAliveTimeout;

  private long writeTimeout;

  private long maxConcurrentStreams;

  private int maxConcurrentStreamExecution;

  private int initialWindowSize;

  private java.util.Set<java.lang.String> allowedTrailerHeaders;

  private int maxHeaderCount;

  private int maxHeaderSize;

  private int maxTrailerCount;

  private int maxTrailerSize;

  private boolean initiatePingDisabled;

  private final org.apache.coyote.CompressionConfig compressionConfig;

  public org.apache.coyote.http2.Http2Protocol();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long 10000l
       8: putfield      #4                  // Field readTimeout:J
      11: aload_0
      12: ldc2_w        #5                  // long -1l
      15: putfield      #7                  // Field keepAliveTimeout:J
      18: aload_0
      19: ldc2_w        #2                  // long 10000l
      22: putfield      #8                  // Field writeTimeout:J
      25: aload_0
      26: ldc2_w        #9                  // long 200l
      29: putfield      #11                 // Field maxConcurrentStreams:J
      32: aload_0
      33: bipush        20
      35: putfield      #12                 // Field maxConcurrentStreamExecution:I
      38: aload_0
      39: ldc           #13                 // int 65535
      41: putfield      #14                 // Field initialWindowSize:I
      44: aload_0
      45: new           #15                 // class java/util/concurrent/ConcurrentHashMap
      48: dup
      49: invokespecial #16                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      52: invokestatic  #17                 // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
      55: putfield      #18                 // Field allowedTrailerHeaders:Ljava/util/Set;
      58: aload_0
      59: bipush        100
      61: putfield      #19                 // Field maxHeaderCount:I
      64: aload_0
      65: sipush        8192
      68: putfield      #20                 // Field maxHeaderSize:I
      71: aload_0
      72: bipush        100
      74: putfield      #21                 // Field maxTrailerCount:I
      77: aload_0
      78: sipush        8192
      81: putfield      #22                 // Field maxTrailerSize:I
      84: aload_0
      85: iconst_0
      86: putfield      #23                 // Field initiatePingDisabled:Z
      89: aload_0
      90: new           #24                 // class org/apache/coyote/CompressionConfig
      93: dup
      94: invokespecial #25                 // Method org/apache/coyote/CompressionConfig."<init>":()V
      97: putfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
     100: return

  public java.lang.String getHttpUpgradeName(boolean);
    Code:
       0: iload_1
       1: ifeq          6
       4: aconst_null
       5: areturn
       6: ldc           #27                 // String h2c
       8: areturn

  public byte[] getAlpnIdentifier();
    Code:
       0: getstatic     #28                 // Field ALPN_IDENTIFIER:[B
       3: areturn

  public java.lang.String getAlpnName();
    Code:
       0: ldc           #29                 // String h2
       2: areturn

  public org.apache.coyote.Processor getProcessor(org.apache.tomcat.util.net.SocketWrapperBase<?>, org.apache.coyote.Adapter);
    Code:
       0: new           #30                 // class org/apache/coyote/http11/upgrade/UpgradeProcessorInternal
       3: dup
       4: aload_1
       5: new           #31                 // class org/apache/coyote/UpgradeToken
       8: dup
       9: aload_0
      10: aload_2
      11: aconst_null
      12: invokevirtual #32                 // Method getInternalUpgradeHandler:(Lorg/apache/coyote/Adapter;Lorg/apache/coyote/Request;)Lorg/apache/coyote/http11/upgrade/InternalHttpUpgradeHandler;
      15: aconst_null
      16: aconst_null
      17: invokespecial #33                 // Method org/apache/coyote/UpgradeToken."<init>":(Ljavax/servlet/http/HttpUpgradeHandler;Lorg/apache/tomcat/ContextBind;Lorg/apache/tomcat/InstanceManager;)V
      20: invokespecial #34                 // Method org/apache/coyote/http11/upgrade/UpgradeProcessorInternal."<init>":(Lorg/apache/tomcat/util/net/SocketWrapperBase;Lorg/apache/coyote/UpgradeToken;)V
      23: astore_3
      24: aload_3
      25: areturn

  public org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler getInternalUpgradeHandler(org.apache.coyote.Adapter, org.apache.coyote.Request);
    Code:
       0: new           #35                 // class org/apache/coyote/http2/Http2UpgradeHandler
       3: dup
       4: aload_1
       5: aload_2
       6: invokespecial #36                 // Method org/apache/coyote/http2/Http2UpgradeHandler."<init>":(Lorg/apache/coyote/Adapter;Lorg/apache/coyote/Request;)V
       9: astore_3
      10: aload_3
      11: aload_0
      12: invokevirtual #37                 // Method getReadTimeout:()J
      15: invokevirtual #38                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setReadTimeout:(J)V
      18: aload_3
      19: aload_0
      20: invokevirtual #39                 // Method getKeepAliveTimeout:()J
      23: invokevirtual #40                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setKeepAliveTimeout:(J)V
      26: aload_3
      27: aload_0
      28: invokevirtual #41                 // Method getWriteTimeout:()J
      31: invokevirtual #42                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setWriteTimeout:(J)V
      34: aload_3
      35: aload_0
      36: invokevirtual #43                 // Method getMaxConcurrentStreams:()J
      39: invokevirtual #44                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setMaxConcurrentStreams:(J)V
      42: aload_3
      43: aload_0
      44: invokevirtual #45                 // Method getMaxConcurrentStreamExecution:()I
      47: invokevirtual #46                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setMaxConcurrentStreamExecution:(I)V
      50: aload_3
      51: aload_0
      52: invokevirtual #47                 // Method getInitialWindowSize:()I
      55: invokevirtual #48                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setInitialWindowSize:(I)V
      58: aload_3
      59: aload_0
      60: getfield      #18                 // Field allowedTrailerHeaders:Ljava/util/Set;
      63: invokevirtual #49                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setAllowedTrailerHeaders:(Ljava/util/Set;)V
      66: aload_3
      67: aload_0
      68: invokevirtual #50                 // Method getMaxHeaderCount:()I
      71: invokevirtual #51                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setMaxHeaderCount:(I)V
      74: aload_3
      75: aload_0
      76: invokevirtual #52                 // Method getMaxHeaderSize:()I
      79: invokevirtual #53                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setMaxHeaderSize:(I)V
      82: aload_3
      83: aload_0
      84: invokevirtual #54                 // Method getMaxTrailerCount:()I
      87: invokevirtual #55                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setMaxTrailerCount:(I)V
      90: aload_3
      91: aload_0
      92: invokevirtual #56                 // Method getMaxTrailerSize:()I
      95: invokevirtual #57                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setMaxTrailerSize:(I)V
      98: aload_3
      99: aload_0
     100: getfield      #23                 // Field initiatePingDisabled:Z
     103: invokevirtual #58                 // Method org/apache/coyote/http2/Http2UpgradeHandler.setInitiatePingDisabled:(Z)V
     106: aload_3
     107: areturn

  public boolean accept(org.apache.coyote.Request);
    Code:
       0: aload_1
       1: invokevirtual #59                 // Method org/apache/coyote/Request.getMimeHeaders:()Lorg/apache/tomcat/util/http/MimeHeaders;
       4: ldc           #60                 // String HTTP2-Settings
       6: invokevirtual #61                 // Method org/apache/tomcat/util/http/MimeHeaders.values:(Ljava/lang/String;)Ljava/util/Enumeration;
       9: astore_2
      10: iconst_0
      11: istore_3
      12: aload_2
      13: invokeinterface #62,  1           // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
      18: ifeq          34
      21: iinc          3, 1
      24: aload_2
      25: invokeinterface #63,  1           // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
      30: pop
      31: goto          12
      34: iload_3
      35: iconst_1
      36: if_icmpeq     41
      39: iconst_0
      40: ireturn
      41: aload_1
      42: invokevirtual #59                 // Method org/apache/coyote/Request.getMimeHeaders:()Lorg/apache/tomcat/util/http/MimeHeaders;
      45: ldc           #64                 // String Connection
      47: invokevirtual #61                 // Method org/apache/tomcat/util/http/MimeHeaders.values:(Ljava/lang/String;)Ljava/util/Enumeration;
      50: astore        4
      52: iconst_0
      53: istore        5
      55: aload         4
      57: invokeinterface #62,  1           // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
      62: ifeq          90
      65: iload         5
      67: ifne          90
      70: aload         4
      72: invokeinterface #63,  1           // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
      77: checkcast     #65                 // class java/lang/String
      80: ldc           #60                 // String HTTP2-Settings
      82: invokevirtual #66                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      85: istore        5
      87: goto          55
      90: iload         5
      92: ireturn

  public long getReadTimeout();
    Code:
       0: aload_0
       1: getfield      #4                  // Field readTimeout:J
       4: lreturn

  public void setReadTimeout(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #4                  // Field readTimeout:J
       5: return

  public long getKeepAliveTimeout();
    Code:
       0: aload_0
       1: getfield      #7                  // Field keepAliveTimeout:J
       4: lreturn

  public void setKeepAliveTimeout(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #7                  // Field keepAliveTimeout:J
       5: return

  public long getWriteTimeout();
    Code:
       0: aload_0
       1: getfield      #8                  // Field writeTimeout:J
       4: lreturn

  public void setWriteTimeout(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #8                  // Field writeTimeout:J
       5: return

  public long getMaxConcurrentStreams();
    Code:
       0: aload_0
       1: getfield      #11                 // Field maxConcurrentStreams:J
       4: lreturn

  public void setMaxConcurrentStreams(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #11                 // Field maxConcurrentStreams:J
       5: return

  public int getMaxConcurrentStreamExecution();
    Code:
       0: aload_0
       1: getfield      #12                 // Field maxConcurrentStreamExecution:I
       4: ireturn

  public void setMaxConcurrentStreamExecution(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field maxConcurrentStreamExecution:I
       5: return

  public int getInitialWindowSize();
    Code:
       0: aload_0
       1: getfield      #14                 // Field initialWindowSize:I
       4: ireturn

  public void setInitialWindowSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field initialWindowSize:I
       5: return

  public void setAllowedTrailerHeaders(java.lang.String);
    Code:
       0: new           #67                 // class java/util/HashSet
       3: dup
       4: invokespecial #68                 // Method java/util/HashSet."<init>":()V
       7: astore_2
       8: aload_2
       9: aload_0
      10: getfield      #18                 // Field allowedTrailerHeaders:Ljava/util/Set;
      13: invokeinterface #69,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      18: pop
      19: aload_1
      20: ifnull        120
      23: aload_1
      24: ldc           #70                 // String ,
      26: invokevirtual #71                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      29: astore_3
      30: aload_3
      31: astore        4
      33: aload         4
      35: arraylength
      36: istore        5
      38: iconst_0
      39: istore        6
      41: iload         6
      43: iload         5
      45: if_icmpge     109
      48: aload         4
      50: iload         6
      52: aaload
      53: astore        7
      55: aload         7
      57: invokevirtual #72                 // Method java/lang/String.trim:()Ljava/lang/String;
      60: getstatic     #73                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      63: invokevirtual #74                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      66: astore        8
      68: aload_2
      69: aload         8
      71: invokeinterface #75,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      76: ifeq          91
      79: aload_2
      80: aload         8
      82: invokeinterface #76,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      87: pop
      88: goto          103
      91: aload_0
      92: getfield      #18                 // Field allowedTrailerHeaders:Ljava/util/Set;
      95: aload         8
      97: invokeinterface #77,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     102: pop
     103: iinc          6, 1
     106: goto          41
     109: aload_0
     110: getfield      #18                 // Field allowedTrailerHeaders:Ljava/util/Set;
     113: aload_2
     114: invokeinterface #78,  2           // InterfaceMethod java/util/Set.removeAll:(Ljava/util/Collection;)Z
     119: pop
     120: return

  public java.lang.String getAllowedTrailerHeaders();
    Code:
       0: new           #79                 // class java/util/ArrayList
       3: dup
       4: aload_0
       5: getfield      #18                 // Field allowedTrailerHeaders:Ljava/util/Set;
       8: invokeinterface #80,  1           // InterfaceMethod java/util/Set.size:()I
      13: invokespecial #81                 // Method java/util/ArrayList."<init>":(I)V
      16: astore_1
      17: aload_1
      18: aload_0
      19: getfield      #18                 // Field allowedTrailerHeaders:Ljava/util/Set;
      22: invokeinterface #82,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      27: pop
      28: aload_1
      29: invokestatic  #83                 // Method org/apache/tomcat/util/buf/StringUtils.join:(Ljava/util/Collection;)Ljava/lang/String;
      32: areturn

  public void setMaxHeaderCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #19                 // Field maxHeaderCount:I
       5: return

  public int getMaxHeaderCount();
    Code:
       0: aload_0
       1: getfield      #19                 // Field maxHeaderCount:I
       4: ireturn

  public void setMaxHeaderSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #20                 // Field maxHeaderSize:I
       5: return

  public int getMaxHeaderSize();
    Code:
       0: aload_0
       1: getfield      #20                 // Field maxHeaderSize:I
       4: ireturn

  public void setMaxTrailerCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field maxTrailerCount:I
       5: return

  public int getMaxTrailerCount();
    Code:
       0: aload_0
       1: getfield      #21                 // Field maxTrailerCount:I
       4: ireturn

  public void setMaxTrailerSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field maxTrailerSize:I
       5: return

  public int getMaxTrailerSize();
    Code:
       0: aload_0
       1: getfield      #22                 // Field maxTrailerSize:I
       4: ireturn

  public void setInitiatePingDisabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field initiatePingDisabled:Z
       5: return

  public void setCompression(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: aload_1
       5: invokevirtual #84                 // Method org/apache/coyote/CompressionConfig.setCompression:(Ljava/lang/String;)V
       8: return

  public java.lang.String getCompression();
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: invokevirtual #85                 // Method org/apache/coyote/CompressionConfig.getCompression:()Ljava/lang/String;
       7: areturn

  protected int getCompressionLevel();
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: invokevirtual #86                 // Method org/apache/coyote/CompressionConfig.getCompressionLevel:()I
       7: ireturn

  public java.lang.String getNoCompressionUserAgents();
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: invokevirtual #87                 // Method org/apache/coyote/CompressionConfig.getNoCompressionUserAgents:()Ljava/lang/String;
       7: areturn

  protected java.util.regex.Pattern getNoCompressionUserAgentsPattern();
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: invokevirtual #88                 // Method org/apache/coyote/CompressionConfig.getNoCompressionUserAgentsPattern:()Ljava/util/regex/Pattern;
       7: areturn

  public void setNoCompressionUserAgents(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: aload_1
       5: invokevirtual #89                 // Method org/apache/coyote/CompressionConfig.setNoCompressionUserAgents:(Ljava/lang/String;)V
       8: return

  public java.lang.String getCompressibleMimeType();
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: invokevirtual #90                 // Method org/apache/coyote/CompressionConfig.getCompressibleMimeType:()Ljava/lang/String;
       7: areturn

  public void setCompressibleMimeType(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: aload_1
       5: invokevirtual #91                 // Method org/apache/coyote/CompressionConfig.setCompressibleMimeType:(Ljava/lang/String;)V
       8: return

  public java.lang.String[] getCompressibleMimeTypes();
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: invokevirtual #92                 // Method org/apache/coyote/CompressionConfig.getCompressibleMimeTypes:()[Ljava/lang/String;
       7: areturn

  public int getCompressionMinSize();
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: invokevirtual #93                 // Method org/apache/coyote/CompressionConfig.getCompressionMinSize:()I
       7: ireturn

  public void setCompressionMinSize(int);
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: iload_1
       5: invokevirtual #94                 // Method org/apache/coyote/CompressionConfig.setCompressionMinSize:(I)V
       8: return

  public boolean useCompression(org.apache.coyote.Request, org.apache.coyote.Response);
    Code:
       0: aload_0
       1: getfield      #26                 // Field compressionConfig:Lorg/apache/coyote/CompressionConfig;
       4: aload_1
       5: aload_2
       6: invokevirtual #95                 // Method org/apache/coyote/CompressionConfig.useCompression:(Lorg/apache/coyote/Request;Lorg/apache/coyote/Response;)Z
       9: ireturn

  static {};
    Code:
       0: ldc           #29                 // String h2
       2: getstatic     #96                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       5: invokevirtual #97                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
       8: putstatic     #28                 // Field ALPN_IDENTIFIER:[B
      11: return
}
