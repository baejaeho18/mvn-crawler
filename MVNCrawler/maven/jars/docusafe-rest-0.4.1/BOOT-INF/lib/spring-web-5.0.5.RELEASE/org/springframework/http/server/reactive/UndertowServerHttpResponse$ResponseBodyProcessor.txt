Compiled from "UndertowServerHttpResponse.java"
class org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor extends org.springframework.http.server.reactive.AbstractListenerWriteProcessor<org.springframework.core.io.buffer.DataBuffer> {
  private final org.xnio.channels.StreamSinkChannel channel;

  private volatile java.nio.ByteBuffer byteBuffer;

  final org.springframework.http.server.reactive.UndertowServerHttpResponse this$0;

  public org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor(org.springframework.http.server.reactive.UndertowServerHttpResponse, org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       5: aload_0
       6: invokespecial #2                  // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor."<init>":()V
       9: aload_2
      10: ldc           #3                  // String StreamSinkChannel must not be null
      12: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      15: aload_0
      16: aload_2
      17: putfield      #5                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
      20: aload_0
      21: getfield      #5                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
      24: invokeinterface #6,  1            // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      29: aload_0
      30: invokedynamic #7,  0              // InvokeDynamic #0:handleEvent:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor;)Lorg/xnio/ChannelListener;
      35: invokeinterface #8,  2            // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      40: aload_0
      41: getfield      #5                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
      44: invokeinterface #9,  1            // InterfaceMethod org/xnio/channels/StreamSinkChannel.suspendWrites:()V
      49: return

  protected boolean isWritePossible();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       4: invokestatic  #10                 // Method org/springframework/http/server/reactive/UndertowServerHttpResponse.access$100:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Z
       7: ireturn

  protected boolean write(org.springframework.core.io.buffer.DataBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: astore_2
       5: aload_2
       6: ifnonnull     11
       9: iconst_0
      10: ireturn
      11: aload_0
      12: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      15: invokeinterface #13,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      20: ifeq          51
      23: aload_0
      24: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      27: new           #14                 // class java/lang/StringBuilder
      30: dup
      31: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      34: ldc           #16                 // String write:
      36: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_1
      40: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokeinterface #20,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      51: aload_2
      52: invokevirtual #21                 // Method java/nio/ByteBuffer.remaining:()I
      55: istore_3
      56: aload_0
      57: aload_2
      58: invokespecial #22                 // Method writeByteBuffer:(Ljava/nio/ByteBuffer;)I
      61: istore        4
      63: aload_0
      64: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      67: invokeinterface #13,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      72: ifeq          113
      75: aload_0
      76: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      79: new           #14                 // class java/lang/StringBuilder
      82: dup
      83: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      86: ldc           #23                 // String written:
      88: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: iload         4
      93: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      96: ldc           #25                 // String  total:
      98: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: iload_3
     102: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     105: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     108: invokeinterface #20,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
     113: iload         4
     115: iload_3
     116: if_icmpeq     121
     119: iconst_0
     120: ireturn
     121: aload_0
     122: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
     125: invokeinterface #13,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
     130: ifeq          161
     133: aload_0
     134: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
     137: new           #14                 // class java/lang/StringBuilder
     140: dup
     141: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
     144: ldc           #26                 // String releaseData:
     146: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: aload_1
     150: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     153: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     156: invokeinterface #20,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
     161: aload_1
     162: invokestatic  #27                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
     165: pop
     166: aload_0
     167: aconst_null
     168: putfield      #11                 // Field byteBuffer:Ljava/nio/ByteBuffer;
     171: iconst_1
     172: ireturn

  private int writeByteBuffer(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: getfield      #5                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
       6: aload_1
       7: invokeinterface #28,  2           // InterfaceMethod org/xnio/channels/StreamSinkChannel.write:(Ljava/nio/ByteBuffer;)I
      12: istore_2
      13: iload_3
      14: iload_2
      15: iadd
      16: istore_3
      17: aload_1
      18: invokevirtual #29                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      21: ifeq          28
      24: iload_2
      25: ifgt          2
      28: iload_3
      29: ireturn

  protected void dataReceived(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #30                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor.dataReceived:(Ljava/lang/Object;)V
       5: aload_0
       6: aload_1
       7: invokeinterface #31,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
      12: putfield      #11                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      15: return

  protected boolean isDataEmpty(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_1
       1: invokeinterface #32,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  protected void writingPaused();
    Code:
       0: aload_0
       1: getfield      #5                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
       4: invokeinterface #9,  1            // InterfaceMethod org/xnio/channels/StreamSinkChannel.suspendWrites:()V
       9: return

  protected void writingComplete();
    Code:
       0: aload_0
       1: getfield      #5                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
       4: invokeinterface #6,  1            // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
       9: aconst_null
      10: invokeinterface #8,  2            // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      15: aload_0
      16: getfield      #5                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
      19: invokeinterface #33,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      24: return

  protected void writingFailed(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method cancel:()V
       4: aload_0
       5: aload_1
       6: invokevirtual #35                 // Method onError:(Ljava/lang/Throwable;)V
       9: return

  protected boolean write(java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #36                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #37                 // Method write:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
       8: ireturn

  protected void dataReceived(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #36                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #38                 // Method dataReceived:(Lorg/springframework/core/io/buffer/DataBuffer;)V
       8: return

  protected boolean isDataEmpty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #36                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #39                 // Method isDataEmpty:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
       8: ireturn

  private void lambda$new$0(org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method onWritePossible:()V
       4: return
}
