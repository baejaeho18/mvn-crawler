Compiled from "DefaultWebSessionManager.java"
public class org.springframework.web.server.session.DefaultWebSessionManager implements org.springframework.web.server.session.WebSessionManager {
  private org.springframework.web.server.session.WebSessionIdResolver sessionIdResolver;

  private org.springframework.web.server.session.WebSessionStore sessionStore;

  public org.springframework.web.server.session.DefaultWebSessionManager();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/springframework/web/server/session/CookieWebSessionIdResolver
       8: dup
       9: invokespecial #3                  // Method org/springframework/web/server/session/CookieWebSessionIdResolver."<init>":()V
      12: putfield      #4                  // Field sessionIdResolver:Lorg/springframework/web/server/session/WebSessionIdResolver;
      15: aload_0
      16: new           #5                  // class org/springframework/web/server/session/InMemoryWebSessionStore
      19: dup
      20: invokespecial #6                  // Method org/springframework/web/server/session/InMemoryWebSessionStore."<init>":()V
      23: putfield      #7                  // Field sessionStore:Lorg/springframework/web/server/session/WebSessionStore;
      26: return

  public void setSessionIdResolver(org.springframework.web.server.session.WebSessionIdResolver);
    Code:
       0: aload_1
       1: ldc           #8                  // String WebSessionIdResolver is required
       3: invokestatic  #9                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #4                  // Field sessionIdResolver:Lorg/springframework/web/server/session/WebSessionIdResolver;
      11: return

  public org.springframework.web.server.session.WebSessionIdResolver getSessionIdResolver();
    Code:
       0: aload_0
       1: getfield      #4                  // Field sessionIdResolver:Lorg/springframework/web/server/session/WebSessionIdResolver;
       4: areturn

  public void setSessionStore(org.springframework.web.server.session.WebSessionStore);
    Code:
       0: aload_1
       1: ldc           #10                 // String WebSessionStore is required
       3: invokestatic  #9                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #7                  // Field sessionStore:Lorg/springframework/web/server/session/WebSessionStore;
      11: return

  public org.springframework.web.server.session.WebSessionStore getSessionStore();
    Code:
       0: aload_0
       1: getfield      #7                  // Field sessionStore:Lorg/springframework/web/server/session/WebSessionStore;
       4: areturn

  public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> getSession(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #11,  0             // InvokeDynamic #0:get:(Lorg/springframework/web/server/session/DefaultWebSessionManager;Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Supplier;
       7: invokestatic  #12                 // Method reactor/core/publisher/Mono.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      10: areturn

  private reactor.core.publisher.Mono<org.springframework.web.server.WebSession> retrieveSession(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getSessionIdResolver:()Lorg/springframework/web/server/session/WebSessionIdResolver;
       4: aload_1
       5: invokeinterface #14,  2           // InterfaceMethod org/springframework/web/server/session/WebSessionIdResolver.resolveSessionIds:(Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/List;
      10: invokestatic  #15                 // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      13: aload_0
      14: getfield      #7                  // Field sessionStore:Lorg/springframework/web/server/session/WebSessionStore;
      17: dup
      18: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: pop
      22: invokedynamic #17,  0             // InvokeDynamic #1:apply:(Lorg/springframework/web/server/session/WebSessionStore;)Ljava/util/function/Function;
      27: invokevirtual #18                 // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      30: invokevirtual #19                 // Method reactor/core/publisher/Flux.next:()Lreactor/core/publisher/Mono;
      33: areturn

  private reactor.core.publisher.Mono<java.lang.Void> save(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebSession);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getSessionIdResolver:()Lorg/springframework/web/server/session/WebSessionIdResolver;
       4: aload_1
       5: invokeinterface #14,  2           // InterfaceMethod org/springframework/web/server/session/WebSessionIdResolver.resolveSessionIds:(Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/List;
      10: astore_3
      11: aload_2
      12: invokeinterface #20,  1           // InterfaceMethod org/springframework/web/server/WebSession.isStarted:()Z
      17: ifeq          29
      20: aload_2
      21: invokeinterface #21,  1           // InterfaceMethod org/springframework/web/server/WebSession.isExpired:()Z
      26: ifeq          52
      29: aload_3
      30: invokeinterface #22,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      35: ifne          48
      38: aload_0
      39: getfield      #4                  // Field sessionIdResolver:Lorg/springframework/web/server/session/WebSessionIdResolver;
      42: aload_1
      43: invokeinterface #23,  2           // InterfaceMethod org/springframework/web/server/session/WebSessionIdResolver.expireSession:(Lorg/springframework/web/server/ServerWebExchange;)V
      48: invokestatic  #24                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      51: areturn
      52: aload_3
      53: invokeinterface #22,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      58: ifne          80
      61: aload_2
      62: invokeinterface #25,  1           // InterfaceMethod org/springframework/web/server/WebSession.getId:()Ljava/lang/String;
      67: aload_3
      68: iconst_0
      69: invokeinterface #26,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      74: invokevirtual #27                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      77: ifne          96
      80: aload_0
      81: getfield      #4                  // Field sessionIdResolver:Lorg/springframework/web/server/session/WebSessionIdResolver;
      84: aload_1
      85: aload_2
      86: invokeinterface #25,  1           // InterfaceMethod org/springframework/web/server/WebSession.getId:()Ljava/lang/String;
      91: invokeinterface #28,  3           // InterfaceMethod org/springframework/web/server/session/WebSessionIdResolver.setSessionId:(Lorg/springframework/web/server/ServerWebExchange;Ljava/lang/String;)V
      96: aload_2
      97: invokeinterface #29,  1           // InterfaceMethod org/springframework/web/server/WebSession.save:()Lreactor/core/publisher/Mono;
     102: areturn

  private reactor.core.publisher.Mono lambda$getSession$2(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #30                 // Method retrieveSession:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
       5: aload_0
       6: getfield      #7                  // Field sessionStore:Lorg/springframework/web/server/session/WebSessionStore;
       9: invokeinterface #31,  1           // InterfaceMethod org/springframework/web/server/session/WebSessionStore.createWebSession:()Lreactor/core/publisher/Mono;
      14: invokevirtual #32                 // Method reactor/core/publisher/Mono.switchIfEmpty:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      17: aload_0
      18: aload_1
      19: invokedynamic #33,  0             // InvokeDynamic #2:accept:(Lorg/springframework/web/server/session/DefaultWebSessionManager;Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Consumer;
      24: invokevirtual #34                 // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      27: areturn

  private void lambda$null$1(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebSession);
    Code:
       0: aload_1
       1: invokeinterface #35,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getResponse:()Lorg/springframework/http/server/reactive/ServerHttpResponse;
       6: aload_0
       7: aload_1
       8: aload_2
       9: invokedynamic #36,  0             // InvokeDynamic #3:get:(Lorg/springframework/web/server/session/DefaultWebSessionManager;Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/web/server/WebSession;)Ljava/util/function/Supplier;
      14: invokeinterface #37,  2           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.beforeCommit:(Ljava/util/function/Supplier;)V
      19: return

  private reactor.core.publisher.Mono lambda$null$0(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebSession);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #38                 // Method save:(Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/web/server/WebSession;)Lreactor/core/publisher/Mono;
       6: areturn
}
