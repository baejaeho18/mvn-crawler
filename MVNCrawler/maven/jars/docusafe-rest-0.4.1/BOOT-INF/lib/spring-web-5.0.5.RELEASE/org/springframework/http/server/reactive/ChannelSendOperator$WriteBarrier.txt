Compiled from "ChannelSendOperator.java"
class org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier implements reactor.core.CoreSubscriber<T>, org.reactivestreams.Subscription, org.reactivestreams.Publisher<T> {
  private final org.springframework.http.server.reactive.ChannelSendOperator<T>.WriteCompletionBarrier writeCompletionBarrier;

  private org.reactivestreams.Subscription subscription;

  private T item;

  private java.lang.Throwable error;

  private boolean completed;

  private long demandBeforeReadyToWrite;

  private org.springframework.http.server.reactive.ChannelSendOperator$State state;

  private org.reactivestreams.Subscriber<? super T> writeSubscriber;

  final org.springframework.http.server.reactive.ChannelSendOperator this$0;

  org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier(reactor.core.CoreSubscriber<? super java.lang.Void>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/ChannelSendOperator;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field completed:Z
      14: aload_0
      15: getstatic     #4                  // Field org/springframework/http/server/reactive/ChannelSendOperator$State.NEW:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      18: putfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      21: aload_0
      22: new           #6                  // class org/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier
      25: dup
      26: aload_1
      27: aload_2
      28: aload_0
      29: invokespecial #7                  // Method org/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier."<init>":(Lorg/springframework/http/server/reactive/ChannelSendOperator;Lreactor/core/CoreSubscriber;Lorg/springframework/http/server/reactive/ChannelSendOperator$WriteBarrier;)V
      32: putfield      #8                  // Field writeCompletionBarrier:Lorg/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier;
      35: return

  public final void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #10                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          30
      11: aload_0
      12: aload_1
      13: putfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #8                  // Field writeCompletionBarrier:Lorg/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier;
      20: invokevirtual #11                 // Method org/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier.connect:()V
      23: aload_1
      24: lconst_1
      25: invokeinterface #12,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      30: return

  public final void onNext(T);
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
       4: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
       7: if_acmpne     21
      10: aload_0
      11: invokespecial #14                 // Method requiredWriteSubscriber:()Lorg/reactivestreams/Subscriber;
      14: aload_1
      15: invokeinterface #15,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      20: return
      21: aload_0
      22: dup
      23: astore_2
      24: monitorenter
      25: aload_0
      26: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      29: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      32: if_acmpne     48
      35: aload_0
      36: invokespecial #14                 // Method requiredWriteSubscriber:()Lorg/reactivestreams/Subscriber;
      39: aload_1
      40: invokeinterface #15,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      45: goto          130
      48: aload_0
      49: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      52: getstatic     #4                  // Field org/springframework/http/server/reactive/ChannelSendOperator$State.NEW:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      55: if_acmpne     98
      58: aload_0
      59: aload_1
      60: putfield      #16                 // Field item:Ljava/lang/Object;
      63: aload_0
      64: getstatic     #17                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.FIRST_SIGNAL_RECEIVED:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      67: putfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      70: aload_0
      71: getfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/ChannelSendOperator;
      74: invokestatic  #18                 // Method org/springframework/http/server/reactive/ChannelSendOperator.access$000:(Lorg/springframework/http/server/reactive/ChannelSendOperator;)Ljava/util/function/Function;
      77: aload_0
      78: invokeinterface #19,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      83: checkcast     #20                 // class org/reactivestreams/Publisher
      86: aload_0
      87: getfield      #8                  // Field writeCompletionBarrier:Lorg/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier;
      90: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      95: goto          130
      98: aload_0
      99: getfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
     102: ifnull        114
     105: aload_0
     106: getfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
     109: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     114: aload_0
     115: getfield      #8                  // Field writeCompletionBarrier:Lorg/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier;
     118: new           #23                 // class java/lang/IllegalStateException
     121: dup
     122: ldc           #24                 // String Unexpected item.
     124: invokespecial #25                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     127: invokevirtual #26                 // Method org/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier.onError:(Ljava/lang/Throwable;)V
     130: aload_2
     131: monitorexit
     132: goto          140
     135: astore_3
     136: aload_2
     137: monitorexit
     138: aload_3
     139: athrow
     140: return
    Exception table:
       from    to  target type
          25   132   135   any
         135   138   135   any

  private org.reactivestreams.Subscriber<? super T> requiredWriteSubscriber();
    Code:
       0: aload_0
       1: getfield      #27                 // Field writeSubscriber:Lorg/reactivestreams/Subscriber;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #28                 // String No write subscriber
      14: invokestatic  #29                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      17: aload_0
      18: getfield      #27                 // Field writeSubscriber:Lorg/reactivestreams/Subscriber;
      21: areturn

  public final void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
       4: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
       7: if_acmpne     21
      10: aload_0
      11: invokespecial #14                 // Method requiredWriteSubscriber:()Lorg/reactivestreams/Subscriber;
      14: aload_1
      15: invokeinterface #30,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      20: return
      21: aload_0
      22: dup
      23: astore_2
      24: monitorenter
      25: aload_0
      26: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      29: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      32: if_acmpne     48
      35: aload_0
      36: invokespecial #14                 // Method requiredWriteSubscriber:()Lorg/reactivestreams/Subscriber;
      39: aload_1
      40: invokeinterface #30,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      45: goto          81
      48: aload_0
      49: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      52: getstatic     #4                  // Field org/springframework/http/server/reactive/ChannelSendOperator$State.NEW:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      55: if_acmpne     76
      58: aload_0
      59: getstatic     #17                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.FIRST_SIGNAL_RECEIVED:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      62: putfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      65: aload_0
      66: getfield      #8                  // Field writeCompletionBarrier:Lorg/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier;
      69: aload_1
      70: invokevirtual #26                 // Method org/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier.onError:(Ljava/lang/Throwable;)V
      73: goto          81
      76: aload_0
      77: aload_1
      78: putfield      #31                 // Field error:Ljava/lang/Throwable;
      81: aload_2
      82: monitorexit
      83: goto          91
      86: astore_3
      87: aload_2
      88: monitorexit
      89: aload_3
      90: athrow
      91: return
    Exception table:
       from    to  target type
          25    83    86   any
          86    89    86   any

  public final void onComplete();
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
       4: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
       7: if_acmpne     20
      10: aload_0
      11: invokespecial #14                 // Method requiredWriteSubscriber:()Lorg/reactivestreams/Subscriber;
      14: invokeinterface #32,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      19: return
      20: aload_0
      21: dup
      22: astore_1
      23: monitorenter
      24: aload_0
      25: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      28: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      31: if_acmpne     46
      34: aload_0
      35: invokespecial #14                 // Method requiredWriteSubscriber:()Lorg/reactivestreams/Subscriber;
      38: invokeinterface #32,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      43: goto          101
      46: aload_0
      47: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      50: getstatic     #4                  // Field org/springframework/http/server/reactive/ChannelSendOperator$State.NEW:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      53: if_acmpne     96
      56: aload_0
      57: iconst_1
      58: putfield      #3                  // Field completed:Z
      61: aload_0
      62: getstatic     #17                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.FIRST_SIGNAL_RECEIVED:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      65: putfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      68: aload_0
      69: getfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/ChannelSendOperator;
      72: invokestatic  #18                 // Method org/springframework/http/server/reactive/ChannelSendOperator.access$000:(Lorg/springframework/http/server/reactive/ChannelSendOperator;)Ljava/util/function/Function;
      75: aload_0
      76: invokeinterface #19,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      81: checkcast     #20                 // class org/reactivestreams/Publisher
      84: aload_0
      85: getfield      #8                  // Field writeCompletionBarrier:Lorg/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier;
      88: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      93: goto          101
      96: aload_0
      97: iconst_1
      98: putfield      #3                  // Field completed:Z
     101: aload_1
     102: monitorexit
     103: goto          111
     106: astore_2
     107: aload_1
     108: monitorexit
     109: aload_2
     110: athrow
     111: return
    Exception table:
       from    to  target type
          24   103   106   any
         106   109   106   any

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #8                  // Field writeCompletionBarrier:Lorg/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier;
       4: invokevirtual #33                 // Method org/springframework/http/server/reactive/ChannelSendOperator$WriteCompletionBarrier.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: astore_3
       5: aload_3
       6: ifnonnull     10
       9: return
      10: aload_0
      11: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      14: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      17: if_acmpne     28
      20: aload_3
      21: lload_1
      22: invokeinterface #12,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      27: return
      28: aload_0
      29: dup
      30: astore        4
      32: monitorenter
      33: aload_0
      34: getfield      #27                 // Field writeSubscriber:Lorg/reactivestreams/Subscriber;
      37: ifnull        132
      40: aload_0
      41: getfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      44: getstatic     #34                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.EMITTING_CACHED_SIGNALS:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      47: if_acmpne     59
      50: aload_0
      51: lload_1
      52: putfield      #35                 // Field demandBeforeReadyToWrite:J
      55: aload         4
      57: monitorexit
      58: return
      59: aload_0
      60: getstatic     #34                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.EMITTING_CACHED_SIGNALS:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      63: putfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      66: aload_0
      67: invokespecial #36                 // Method emitCachedSignals:()Z
      70: ifeq          84
      73: aload_0
      74: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      77: putfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
      80: aload         4
      82: monitorexit
      83: return
      84: lload_1
      85: aload_0
      86: getfield      #35                 // Field demandBeforeReadyToWrite:J
      89: ladd
      90: lconst_1
      91: lsub
      92: lstore_1
      93: lload_1
      94: lconst_0
      95: lcmp
      96: ifne          110
      99: aload_0
     100: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
     103: putfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
     106: aload         4
     108: monitorexit
     109: return
     110: aload_0
     111: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
     114: putfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
     117: goto          132
     120: astore        5
     122: aload_0
     123: getstatic     #13                 // Field org/springframework/http/server/reactive/ChannelSendOperator$State.READY_TO_WRITE:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
     126: putfield      #5                  // Field state:Lorg/springframework/http/server/reactive/ChannelSendOperator$State;
     129: aload         5
     131: athrow
     132: aload         4
     134: monitorexit
     135: goto          146
     138: astore        6
     140: aload         4
     142: monitorexit
     143: aload         6
     145: athrow
     146: aload_3
     147: lload_1
     148: invokeinterface #12,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     153: return
    Exception table:
       from    to  target type
          59    73   120   any
          84    99   120   any
         120   122   120   any
          33    58   138   any
          59    83   138   any
          84   109   138   any
         110   135   138   any
         138   143   138   any

  private boolean emitCachedSignals();
    Code:
       0: aload_0
       1: getfield      #16                 // Field item:Ljava/lang/Object;
       4: ifnull        20
       7: aload_0
       8: invokespecial #14                 // Method requiredWriteSubscriber:()Lorg/reactivestreams/Subscriber;
      11: aload_0
      12: getfield      #16                 // Field item:Ljava/lang/Object;
      15: invokeinterface #15,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      20: aload_0
      21: getfield      #31                 // Field error:Ljava/lang/Throwable;
      24: ifnull        42
      27: aload_0
      28: invokespecial #14                 // Method requiredWriteSubscriber:()Lorg/reactivestreams/Subscriber;
      31: aload_0
      32: getfield      #31                 // Field error:Ljava/lang/Throwable;
      35: invokeinterface #30,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      40: iconst_1
      41: ireturn
      42: aload_0
      43: getfield      #3                  // Field completed:Z
      46: ifeq          60
      49: aload_0
      50: invokespecial #14                 // Method requiredWriteSubscriber:()Lorg/reactivestreams/Subscriber;
      53: invokeinterface #32,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      58: iconst_1
      59: ireturn
      60: iconst_0
      61: ireturn

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_1
       6: ifnull        20
       9: aload_0
      10: aconst_null
      11: putfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
      14: aload_1
      15: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      20: return

  public void subscribe(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #27                 // Field writeSubscriber:Lorg/reactivestreams/Subscriber;
       8: ifnonnull     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #37                 // String Only one write subscriber supported
      18: invokestatic  #29                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      21: aload_0
      22: aload_1
      23: putfield      #27                 // Field writeSubscriber:Lorg/reactivestreams/Subscriber;
      26: aload_0
      27: getfield      #31                 // Field error:Ljava/lang/Throwable;
      30: ifnonnull     40
      33: aload_0
      34: getfield      #3                  // Field completed:Z
      37: ifeq          60
      40: aload_0
      41: getfield      #27                 // Field writeSubscriber:Lorg/reactivestreams/Subscriber;
      44: invokestatic  #38                 // Method reactor/core/publisher/Operators.emptySubscription:()Lorg/reactivestreams/Subscription;
      47: invokeinterface #39,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      52: aload_0
      53: invokespecial #36                 // Method emitCachedSignals:()Z
      56: pop
      57: goto          70
      60: aload_0
      61: getfield      #27                 // Field writeSubscriber:Lorg/reactivestreams/Subscriber;
      64: aload_0
      65: invokeinterface #39,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      70: aload_2
      71: monitorexit
      72: goto          80
      75: astore_3
      76: aload_2
      77: monitorexit
      78: aload_3
      79: athrow
      80: return
    Exception table:
       from    to  target type
           4    72    75   any
          75    78    75   any
}
