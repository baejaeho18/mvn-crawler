Compiled from "ReactorClientHttpRequest.java"
class org.springframework.http.client.reactive.ReactorClientHttpRequest extends org.springframework.http.client.reactive.AbstractClientHttpRequest implements org.springframework.http.ZeroCopyHttpOutputMessage {
  private final org.springframework.http.HttpMethod httpMethod;

  private final java.net.URI uri;

  private final reactor.ipc.netty.http.client.HttpClientRequest httpRequest;

  private final org.springframework.core.io.buffer.NettyDataBufferFactory bufferFactory;

  public org.springframework.http.client.reactive.ReactorClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI, reactor.ipc.netty.http.client.HttpClientRequest);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/http/client/reactive/AbstractClientHttpRequest."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field httpMethod:Lorg/springframework/http/HttpMethod;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field uri:Ljava/net/URI;
      14: aload_0
      15: aload_3
      16: iconst_0
      17: invokeinterface #4,  2            // InterfaceMethod reactor/ipc/netty/http/client/HttpClientRequest.failOnClientError:(Z)Lreactor/ipc/netty/http/client/HttpClientRequest;
      22: iconst_0
      23: invokeinterface #5,  2            // InterfaceMethod reactor/ipc/netty/http/client/HttpClientRequest.failOnServerError:(Z)Lreactor/ipc/netty/http/client/HttpClientRequest;
      28: putfield      #6                  // Field httpRequest:Lreactor/ipc/netty/http/client/HttpClientRequest;
      31: aload_0
      32: new           #7                  // class org/springframework/core/io/buffer/NettyDataBufferFactory
      35: dup
      36: aload_3
      37: invokeinterface #8,  1            // InterfaceMethod reactor/ipc/netty/http/client/HttpClientRequest.alloc:()Lio/netty/buffer/ByteBufAllocator;
      42: invokespecial #9                  // Method org/springframework/core/io/buffer/NettyDataBufferFactory."<init>":(Lio/netty/buffer/ByteBufAllocator;)V
      45: putfield      #10                 // Field bufferFactory:Lorg/springframework/core/io/buffer/NettyDataBufferFactory;
      48: return

  public org.springframework.core.io.buffer.DataBufferFactory bufferFactory();
    Code:
       0: aload_0
       1: getfield      #10                 // Field bufferFactory:Lorg/springframework/core/io/buffer/NettyDataBufferFactory;
       4: areturn

  public org.springframework.http.HttpMethod getMethod();
    Code:
       0: aload_0
       1: getfield      #2                  // Field httpMethod:Lorg/springframework/http/HttpMethod;
       4: areturn

  public java.net.URI getURI();
    Code:
       0: aload_0
       1: getfield      #3                  // Field uri:Ljava/net/URI;
       4: areturn

  public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #11,  0             // InvokeDynamic #0:get:(Lorg/springframework/http/client/reactive/ReactorClientHttpRequest;Lorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
       8: invokevirtual #12                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);
    Code:
       0: aload_1
       1: invokestatic  #13                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: invokedynamic #14,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
       9: invokevirtual #15                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      12: astore_2
      13: aload_0
      14: aload_0
      15: aload_2
      16: invokedynamic #16,  0             // InvokeDynamic #2:get:(Lorg/springframework/http/client/reactive/ReactorClientHttpRequest;Lorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
      21: invokevirtual #12                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      24: areturn

  private static org.reactivestreams.Publisher<io.netty.buffer.ByteBuf> toByteBufs(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: invokedynamic #17,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
       9: invokevirtual #15                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      12: areturn

  public reactor.core.publisher.Mono<java.lang.Void> writeWith(java.io.File, long, long);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: lload_2
       4: lload         4
       6: invokedynamic #18,  0             // InvokeDynamic #4:get:(Lorg/springframework/http/client/reactive/ReactorClientHttpRequest;Ljava/io/File;JJ)Ljava/util/function/Supplier;
      11: invokevirtual #12                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      14: areturn

  public reactor.core.publisher.Mono<java.lang.Void> setComplete();
    Code:
       0: aload_0
       1: aload_0
       2: invokedynamic #19,  0             // InvokeDynamic #5:get:(Lorg/springframework/http/client/reactive/ReactorClientHttpRequest;)Ljava/util/function/Supplier;
       7: invokevirtual #12                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      10: areturn

  protected void applyHeaders();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #21                 // Method org/springframework/http/HttpHeaders.entrySet:()Ljava/util/Set;
       7: aload_0
       8: invokedynamic #22,  0             // InvokeDynamic #6:accept:(Lorg/springframework/http/client/reactive/ReactorClientHttpRequest;)Ljava/util/function/Consumer;
      13: invokeinterface #23,  2           // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      18: return

  protected void applyCookies();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
       4: invokeinterface #25,  1           // InterfaceMethod org/springframework/util/MultiValueMap.values:()Ljava/util/Collection;
       9: invokeinterface #26,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      14: invokedynamic #27,  0             // InvokeDynamic #7:apply:()Ljava/util/function/Function;
      19: invokeinterface #28,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      24: invokedynamic #29,  0             // InvokeDynamic #8:apply:()Ljava/util/function/Function;
      29: invokeinterface #30,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      34: aload_0
      35: getfield      #6                  // Field httpRequest:Lreactor/ipc/netty/http/client/HttpClientRequest;
      38: dup
      39: invokevirtual #31                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      42: pop
      43: invokedynamic #32,  0             // InvokeDynamic #9:accept:(Lreactor/ipc/netty/http/client/HttpClientRequest;)Ljava/util/function/Consumer;
      48: invokeinterface #33,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      53: return

  private static io.netty.handler.codec.http.cookie.DefaultCookie lambda$applyCookies$5(org.springframework.http.HttpCookie);
    Code:
       0: new           #34                 // class io/netty/handler/codec/http/cookie/DefaultCookie
       3: dup
       4: aload_0
       5: invokevirtual #35                 // Method org/springframework/http/HttpCookie.getName:()Ljava/lang/String;
       8: aload_0
       9: invokevirtual #36                 // Method org/springframework/http/HttpCookie.getValue:()Ljava/lang/String;
      12: invokespecial #37                 // Method io/netty/handler/codec/http/cookie/DefaultCookie."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      15: areturn

  private void lambda$applyHeaders$4(java.util.Map$Entry);
    Code:
       0: aload_0
       1: getfield      #6                  // Field httpRequest:Lreactor/ipc/netty/http/client/HttpClientRequest;
       4: invokeinterface #38,  1           // InterfaceMethod reactor/ipc/netty/http/client/HttpClientRequest.requestHeaders:()Lio/netty/handler/codec/http/HttpHeaders;
       9: aload_1
      10: invokeinterface #39,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      15: checkcast     #40                 // class java/lang/String
      18: aload_1
      19: invokeinterface #41,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      24: checkcast     #42                 // class java/lang/Iterable
      27: invokevirtual #43                 // Method io/netty/handler/codec/http/HttpHeaders.set:(Ljava/lang/String;Ljava/lang/Iterable;)Lio/netty/handler/codec/http/HttpHeaders;
      30: pop
      31: return

  private org.reactivestreams.Publisher lambda$setComplete$3();
    Code:
       0: aload_0
       1: getfield      #6                  // Field httpRequest:Lreactor/ipc/netty/http/client/HttpClientRequest;
       4: invokeinterface #44,  1           // InterfaceMethod reactor/ipc/netty/http/client/HttpClientRequest.sendHeaders:()Lreactor/ipc/netty/NettyOutbound;
       9: invokeinterface #45,  1           // InterfaceMethod reactor/ipc/netty/NettyOutbound.then:()Lreactor/core/publisher/Mono;
      14: areturn

  private org.reactivestreams.Publisher lambda$writeWith$2(java.io.File, long, long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field httpRequest:Lreactor/ipc/netty/http/client/HttpClientRequest;
       4: aload_1
       5: invokevirtual #46                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
       8: lload_2
       9: lload         4
      11: invokeinterface #47,  6           // InterfaceMethod reactor/ipc/netty/http/client/HttpClientRequest.sendFile:(Ljava/nio/file/Path;JJ)Lreactor/ipc/netty/NettyOutbound;
      16: invokeinterface #45,  1           // InterfaceMethod reactor/ipc/netty/NettyOutbound.then:()Lreactor/core/publisher/Mono;
      21: areturn

  private org.reactivestreams.Publisher lambda$writeAndFlushWith$1(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: getfield      #6                  // Field httpRequest:Lreactor/ipc/netty/http/client/HttpClientRequest;
       4: aload_1
       5: invokeinterface #48,  2           // InterfaceMethod reactor/ipc/netty/http/client/HttpClientRequest.sendGroups:(Lorg/reactivestreams/Publisher;)Lreactor/ipc/netty/NettyOutbound;
      10: invokeinterface #45,  1           // InterfaceMethod reactor/ipc/netty/NettyOutbound.then:()Lreactor/core/publisher/Mono;
      15: areturn

  private org.reactivestreams.Publisher lambda$writeWith$0(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: getfield      #6                  // Field httpRequest:Lreactor/ipc/netty/http/client/HttpClientRequest;
       4: aload_1
       5: invokestatic  #13                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokedynamic #17,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      13: invokevirtual #15                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      16: invokeinterface #49,  2           // InterfaceMethod reactor/ipc/netty/http/client/HttpClientRequest.send:(Lorg/reactivestreams/Publisher;)Lreactor/ipc/netty/NettyOutbound;
      21: invokeinterface #45,  1           // InterfaceMethod reactor/ipc/netty/NettyOutbound.then:()Lreactor/core/publisher/Mono;
      26: areturn
}
