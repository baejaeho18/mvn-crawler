Compiled from "MultipartHttpMessageReader.java"
public class org.springframework.http.codec.multipart.MultipartHttpMessageReader implements org.springframework.http.codec.HttpMessageReader<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> {
  private static final org.springframework.core.ResolvableType MULTIPART_VALUE_TYPE;

  private final org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part> partReader;

  public org.springframework.http.codec.multipart.MultipartHttpMessageReader(org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String \'partReader\' is required
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field partReader:Lorg/springframework/http/codec/HttpMessageReader;
      15: return

  public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes();
    Code:
       0: getstatic     #5                  // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
       3: invokestatic  #6                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
       6: areturn

  public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: getstatic     #7                  // Field MULTIPART_VALUE_TYPE:Lorg/springframework/core/ResolvableType;
       3: aload_1
       4: invokevirtual #8                  // Method org/springframework/core/ResolvableType.isAssignableFrom:(Lorg/springframework/core/ResolvableType;)Z
       7: ifeq          28
      10: aload_2
      11: ifnull        24
      14: getstatic     #5                  // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
      17: aload_2
      18: invokevirtual #9                  // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public reactor.core.publisher.Flux<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #10                 // Method readMono:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
       7: invokestatic  #11                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      10: areturn

  public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field partReader:Lorg/springframework/http/codec/HttpMessageReader;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #12,  4           // InterfaceMethod org/springframework/http/codec/HttpMessageReader.read:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      12: invokedynamic #13,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      17: invokevirtual #14                 // Method reactor/core/publisher/Flux.collectMultimap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      20: aload_0
      21: invokedynamic #15,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageReader;)Ljava/util/function/Function;
      26: invokevirtual #16                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      29: areturn

  private org.springframework.util.LinkedMultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part> toMultiValueMap(java.util.Map<java.lang.String, java.util.Collection<org.springframework.http.codec.multipart.Part>>);
    Code:
       0: new           #17                 // class org/springframework/util/LinkedMultiValueMap
       3: dup
       4: aload_1
       5: invokeinterface #18,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      10: invokeinterface #19,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      15: invokedynamic #20,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      20: aload_0
      21: invokedynamic #21,  0             // InvokeDynamic #3:apply:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageReader;)Ljava/util/function/Function;
      26: invokestatic  #22                 // Method java/util/stream/Collectors.toMap:(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;
      29: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      34: checkcast     #24                 // class java/util/Map
      37: invokespecial #25                 // Method org/springframework/util/LinkedMultiValueMap."<init>":(Ljava/util/Map;)V
      40: areturn

  private java.util.List<org.springframework.http.codec.multipart.Part> toList(java.util.Collection<org.springframework.http.codec.multipart.Part>);
    Code:
       0: aload_1
       1: instanceof    #26                 // class java/util/List
       4: ifeq          14
       7: aload_1
       8: checkcast     #26                 // class java/util/List
      11: goto          22
      14: new           #27                 // class java/util/ArrayList
      17: dup
      18: aload_1
      19: invokespecial #28                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      22: areturn

  private java.util.List lambda$toMultiValueMap$0(java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #29,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       7: checkcast     #30                 // class java/util/Collection
      10: invokespecial #31                 // Method toList:(Ljava/util/Collection;)Ljava/util/List;
      13: areturn

  static {};
    Code:
       0: ldc           #32                 // class org/springframework/util/MultiValueMap
       2: iconst_2
       3: anewarray     #33                 // class java/lang/Class
       6: dup
       7: iconst_0
       8: ldc           #34                 // class java/lang/String
      10: aastore
      11: dup
      12: iconst_1
      13: ldc           #35                 // class org/springframework/http/codec/multipart/Part
      15: aastore
      16: invokestatic  #36                 // Method org/springframework/core/ResolvableType.forClassWithGenerics:(Ljava/lang/Class;[Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      19: putstatic     #7                  // Field MULTIPART_VALUE_TYPE:Lorg/springframework/core/ResolvableType;
      22: return
}
