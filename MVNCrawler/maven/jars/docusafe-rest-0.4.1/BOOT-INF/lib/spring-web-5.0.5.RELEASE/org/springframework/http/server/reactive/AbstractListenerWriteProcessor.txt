Compiled from "AbstractListenerWriteProcessor.java"
public abstract class org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T> implements org.reactivestreams.Processor<T, java.lang.Void> {
  protected final org.apache.commons.logging.Log logger;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State> state;

  private org.reactivestreams.Subscription subscription;

  private volatile T currentData;

  private volatile boolean subscriberCompleted;

  private final org.springframework.http.server.reactive.WriteResultPublisher resultPublisher;

  public org.springframework.http.server.reactive.AbstractListenerWriteProcessor();
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #10                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #11                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #13                 // class java/util/concurrent/atomic/AtomicReference
      19: dup
      20: getstatic     #14                 // Field org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.UNSUBSCRIBED:Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;
      23: invokespecial #15                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      26: putfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      29: aload_0
      30: new           #16                 // class org/springframework/http/server/reactive/WriteResultPublisher
      33: dup
      34: invokespecial #17                 // Method org/springframework/http/server/reactive/WriteResultPublisher."<init>":()V
      37: putfield      #2                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
      40: return

  public final void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      10: aload_0
      11: aload_1
      12: invokevirtual #20                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onSubscribe:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;Lorg/reactivestreams/Subscription;)V
      15: return

  public final void onNext(T);
    Code:
       0: aload_0
       1: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #21                 // String Received onNext data item
       6: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      18: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      21: aload_0
      22: aload_1
      23: invokevirtual #23                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onNext:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;Ljava/lang/Object;)V
      26: return

  public final void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
       4: invokeinterface #24,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       9: ifeq          40
      12: aload_0
      13: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      16: new           #25                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #27                 // String Received onError:
      25: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_1
      29: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      32: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      40: aload_0
      41: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      44: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      47: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      50: aload_0
      51: aload_1
      52: invokevirtual #31                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onError:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;Ljava/lang/Throwable;)V
      55: return

  public final void onComplete();
    Code:
       0: aload_0
       1: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #32                 // String Received onComplete
       6: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      18: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      21: aload_0
      22: invokevirtual #33                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onComplete:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;)V
      25: return

  public final void onWritePossible();
    Code:
       0: aload_0
       1: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #34                 // String Received onWritePossible
       6: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      18: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      21: aload_0
      22: invokevirtual #35                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onWritePossible:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;)V
      25: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #36                 // String Received request to cancel
       6: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #7                  // Field subscription:Lorg/reactivestreams/Subscription;
      15: ifnull        27
      18: aload_0
      19: getfield      #7                  // Field subscription:Lorg/reactivestreams/Subscription;
      22: invokeinterface #37,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      27: return

  public final void subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
       4: aload_1
       5: invokevirtual #38                 // Method org/springframework/http/server/reactive/WriteResultPublisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
       8: return

  protected abstract boolean isDataEmpty(T);

  protected void dataReceived(T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentData:Ljava/lang/Object;
       4: ifnull        37
       7: new           #39                 // class java/lang/IllegalStateException
      10: dup
      11: new           #25                 // class java/lang/StringBuilder
      14: dup
      15: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #40                 // String Current data not processed yet:
      20: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_0
      24: getfield      #4                  // Field currentData:Ljava/lang/Object;
      27: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      30: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #41                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: aload_1
      39: putfield      #4                  // Field currentData:Ljava/lang/Object;
      42: return

  protected abstract boolean isWritePossible();

  protected abstract boolean write(T) throws java.io.IOException;

  protected void writingPaused();
    Code:
       0: return

  protected void writingComplete();
    Code:
       0: return

  protected void writingFailed(java.lang.Throwable);
    Code:
       0: return

  private boolean changeState(org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State, org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: aload_2
       6: invokevirtual #42                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: istore_3
      10: iload_3
      11: ifeq          58
      14: aload_0
      15: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      18: invokeinterface #24,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      23: ifeq          58
      26: aload_0
      27: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      30: new           #25                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      37: aload_1
      38: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      41: ldc           #43                 // String  ->
      43: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_2
      47: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      50: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      58: iload_3
      59: ireturn

  private void changeStateToComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #44                 // Field org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.COMPLETED:Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;
       5: invokespecial #8                  // Method changeState:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;)Z
       8: ifeq          25
      11: aload_0
      12: invokevirtual #45                 // Method writingComplete:()V
      15: aload_0
      16: getfield      #2                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
      19: invokevirtual #46                 // Method org/springframework/http/server/reactive/WriteResultPublisher.publishComplete:()V
      22: goto          39
      25: aload_0
      26: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      29: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      32: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      35: aload_0
      36: invokevirtual #33                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onComplete:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;)V
      39: return

  private void writeIfPossible();
    Code:
       0: aload_0
       1: invokevirtual #47                 // Method isWritePossible:()Z
       4: istore_1
       5: aload_0
       6: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
       9: invokeinterface #24,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      14: ifeq          50
      17: aload_0
      18: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      21: new           #25                 // class java/lang/StringBuilder
      24: dup
      25: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      28: ldc           #48                 // String isWritePossible[
      30: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: iload_1
      34: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      37: ldc           #50                 // String ]
      39: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      50: iload_1
      51: ifeq          58
      54: aload_0
      55: invokevirtual #51                 // Method onWritePossible:()V
      58: return

  static boolean access$100(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State, org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #8                  // Method changeState:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;)Z
       6: ireturn

  static org.reactivestreams.Subscription access$202(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #7                  // Field subscription:Lorg/reactivestreams/Subscription;
       6: areturn

  static org.reactivestreams.Subscription access$200(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #7                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: areturn

  static void access$300(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method writeIfPossible:()V
       4: return

  static void access$400(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method changeStateToComplete:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;)V
       5: return

  static java.lang.Object access$500(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentData:Ljava/lang/Object;
       4: areturn

  static java.lang.Object access$502(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #4                  // Field currentData:Ljava/lang/Object;
       6: areturn

  static boolean access$600(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #3                  // Field subscriberCompleted:Z
       4: ireturn

  static boolean access$602(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #3                  // Field subscriberCompleted:Z
       6: ireturn

  static org.springframework.http.server.reactive.WriteResultPublisher access$700(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
       4: areturn

  static java.util.concurrent.atomic.AtomicReference access$800(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn
}
