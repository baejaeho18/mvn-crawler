Compiled from "XmlEventDecoder.java"
public class org.springframework.http.codec.xml.XmlEventDecoder extends org.springframework.core.codec.AbstractDecoder<javax.xml.stream.events.XMLEvent> {
  private static final javax.xml.stream.XMLInputFactory inputFactory;

  private static final boolean aaltoPresent;

  boolean useAalto;

  public org.springframework.http.codec.xml.XmlEventDecoder();
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #1                  // class org/springframework/util/MimeType
       5: dup
       6: iconst_0
       7: getstatic     #2                  // Field org/springframework/util/MimeTypeUtils.APPLICATION_XML:Lorg/springframework/util/MimeType;
      10: aastore
      11: dup
      12: iconst_1
      13: getstatic     #3                  // Field org/springframework/util/MimeTypeUtils.TEXT_XML:Lorg/springframework/util/MimeType;
      16: aastore
      17: invokespecial #4                  // Method org/springframework/core/codec/AbstractDecoder."<init>":([Lorg/springframework/util/MimeType;)V
      20: aload_0
      21: getstatic     #5                  // Field aaltoPresent:Z
      24: putfield      #6                  // Field useAalto:Z
      27: return

  public reactor.core.publisher.Flux<javax.xml.stream.events.XMLEvent> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: invokestatic  #7                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: astore        5
       6: aload_0
       7: getfield      #6                  // Field useAalto:Z
      10: ifeq          41
      13: new           #8                  // class org/springframework/http/codec/xml/XmlEventDecoder$AaltoDataBufferToXmlEvent
      16: dup
      17: aconst_null
      18: invokespecial #9                  // Method org/springframework/http/codec/xml/XmlEventDecoder$AaltoDataBufferToXmlEvent."<init>":(Lorg/springframework/http/codec/xml/XmlEventDecoder$1;)V
      21: astore        6
      23: aload         5
      25: aload         6
      27: invokevirtual #10                 // Method reactor/core/publisher/Flux.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      30: aload         6
      32: invokedynamic #11,  0             // InvokeDynamic #0:accept:(Lorg/springframework/http/codec/xml/XmlEventDecoder$AaltoDataBufferToXmlEvent;)Ljava/util/function/Consumer;
      37: invokevirtual #12                 // Method reactor/core/publisher/Flux.doFinally:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      40: areturn
      41: aload         5
      43: invokestatic  #13                 // Method org/springframework/core/io/buffer/DataBufferUtils.join:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      46: astore        6
      48: aload         6
      50: invokedynamic #14,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      55: invokevirtual #15                 // Method reactor/core/publisher/Mono.flatMapMany:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      58: areturn

  private static org.reactivestreams.Publisher lambda$decode$3(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: invokeinterface #16,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asInputStream:()Ljava/io/InputStream;
       6: astore_1
       7: getstatic     #17                 // Field inputFactory:Ljavax/xml/stream/XMLInputFactory;
      10: aload_1
      11: invokevirtual #18                 // Method javax/xml/stream/XMLInputFactory.createXMLEventReader:(Ljava/io/InputStream;)Ljavax/xml/stream/XMLEventReader;
      14: astore_2
      15: aload_2
      16: invokedynamic #19,  0             // InvokeDynamic #2:iterator:(Ljava/util/Iterator;)Ljava/lang/Iterable;
      21: invokestatic  #20                 // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      24: aload_0
      25: invokedynamic #21,  0             // InvokeDynamic #3:accept:(Lorg/springframework/core/io/buffer/DataBuffer;)Ljava/util/function/Consumer;
      30: invokevirtual #12                 // Method reactor/core/publisher/Flux.doFinally:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      33: areturn
      34: astore_1
      35: aload_1
      36: invokestatic  #23                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      39: areturn
    Exception table:
       from    to  target type
           0    33    34   Class javax/xml/stream/XMLStreamException

  private static void lambda$null$2(org.springframework.core.io.buffer.DataBuffer, reactor.core.publisher.SignalType);
    Code:
       0: aload_0
       1: invokestatic  #24                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
       4: pop
       5: return

  private static java.util.Iterator lambda$null$1(java.util.Iterator);
    Code:
       0: aload_0
       1: areturn

  private static void lambda$decode$0(org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent, reactor.core.publisher.SignalType);
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method org/springframework/http/codec/xml/XmlEventDecoder$AaltoDataBufferToXmlEvent.endOfInput:()V
       4: return

  static {};
    Code:
       0: invokestatic  #26                 // Method org/springframework/util/xml/StaxUtils.createDefensiveInputFactory:()Ljavax/xml/stream/XMLInputFactory;
       3: putstatic     #17                 // Field inputFactory:Ljavax/xml/stream/XMLInputFactory;
       6: ldc           #27                 // String com.fasterxml.aalto.AsyncXMLStreamReader
       8: ldc           #28                 // class org/springframework/http/codec/xml/XmlEventDecoder
      10: invokevirtual #29                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      13: invokestatic  #30                 // Method org/springframework/util/ClassUtils.isPresent:(Ljava/lang/String;Ljava/lang/ClassLoader;)Z
      16: putstatic     #5                  // Field aaltoPresent:Z
      19: return
}
