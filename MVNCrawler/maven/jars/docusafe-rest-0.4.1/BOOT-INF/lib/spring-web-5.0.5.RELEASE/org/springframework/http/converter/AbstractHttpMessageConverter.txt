Compiled from "AbstractHttpMessageConverter.java"
public abstract class org.springframework.http.converter.AbstractHttpMessageConverter<T> implements org.springframework.http.converter.HttpMessageConverter<T> {
  protected final org.apache.commons.logging.Log logger;

  private java.util.List<org.springframework.http.MediaType> supportedMediaTypes;

  private java.nio.charset.Charset defaultCharset;

  protected org.springframework.http.converter.AbstractHttpMessageConverter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: invokestatic  #5                  // Method java/util/Collections.emptyList:()Ljava/util/List;
      19: putfield      #6                  // Field supportedMediaTypes:Ljava/util/List;
      22: return

  protected org.springframework.http.converter.AbstractHttpMessageConverter(org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: invokestatic  #5                  // Method java/util/Collections.emptyList:()Ljava/util/List;
      19: putfield      #6                  // Field supportedMediaTypes:Ljava/util/List;
      22: aload_0
      23: aload_1
      24: invokestatic  #7                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      27: invokevirtual #8                  // Method setSupportedMediaTypes:(Ljava/util/List;)V
      30: return

  protected org.springframework.http.converter.AbstractHttpMessageConverter(org.springframework.http.MediaType...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: invokestatic  #5                  // Method java/util/Collections.emptyList:()Ljava/util/List;
      19: putfield      #6                  // Field supportedMediaTypes:Ljava/util/List;
      22: aload_0
      23: aload_1
      24: invokestatic  #9                  // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      27: invokevirtual #8                  // Method setSupportedMediaTypes:(Ljava/util/List;)V
      30: return

  protected org.springframework.http.converter.AbstractHttpMessageConverter(java.nio.charset.Charset, org.springframework.http.MediaType...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: invokestatic  #5                  // Method java/util/Collections.emptyList:()Ljava/util/List;
      19: putfield      #6                  // Field supportedMediaTypes:Ljava/util/List;
      22: aload_0
      23: aload_1
      24: putfield      #10                 // Field defaultCharset:Ljava/nio/charset/Charset;
      27: aload_0
      28: aload_2
      29: invokestatic  #9                  // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      32: invokevirtual #8                  // Method setSupportedMediaTypes:(Ljava/util/List;)V
      35: return

  public void setSupportedMediaTypes(java.util.List<org.springframework.http.MediaType>);
    Code:
       0: aload_1
       1: ldc           #11                 // String MediaType List must not be empty
       3: invokestatic  #12                 // Method org/springframework/util/Assert.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V
       6: aload_0
       7: new           #13                 // class java/util/ArrayList
      10: dup
      11: aload_1
      12: invokespecial #14                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      15: putfield      #6                  // Field supportedMediaTypes:Ljava/util/List;
      18: return

  public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes();
    Code:
       0: aload_0
       1: getfield      #6                  // Field supportedMediaTypes:Ljava/util/List;
       4: invokestatic  #15                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
       7: areturn

  public void setDefaultCharset(java.nio.charset.Charset);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field defaultCharset:Ljava/nio/charset/Charset;
       5: return

  public java.nio.charset.Charset getDefaultCharset();
    Code:
       0: aload_0
       1: getfield      #10                 // Field defaultCharset:Ljava/nio/charset/Charset;
       4: areturn

  public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method supports:(Ljava/lang/Class;)Z
       5: ifeq          20
       8: aload_0
       9: aload_2
      10: invokevirtual #17                 // Method canRead:(Lorg/springframework/http/MediaType;)Z
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  protected boolean canRead(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_1
       5: ireturn
       6: aload_0
       7: invokevirtual #18                 // Method getSupportedMediaTypes:()Ljava/util/List;
      10: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          48
      25: aload_2
      26: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #22                 // class org/springframework/http/MediaType
      34: astore_3
      35: aload_3
      36: aload_1
      37: invokevirtual #23                 // Method org/springframework/http/MediaType.includes:(Lorg/springframework/http/MediaType;)Z
      40: ifeq          45
      43: iconst_1
      44: ireturn
      45: goto          16
      48: iconst_0
      49: ireturn

  public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method supports:(Ljava/lang/Class;)Z
       5: ifeq          20
       8: aload_0
       9: aload_2
      10: invokevirtual #24                 // Method canWrite:(Lorg/springframework/http/MediaType;)Z
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  protected boolean canWrite(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        14
       4: getstatic     #25                 // Field org/springframework/http/MediaType.ALL:Lorg/springframework/http/MediaType;
       7: aload_1
       8: invokevirtual #26                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      11: ifeq          16
      14: iconst_1
      15: ireturn
      16: aload_0
      17: invokevirtual #18                 // Method getSupportedMediaTypes:()Ljava/util/List;
      20: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      25: astore_2
      26: aload_2
      27: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          58
      35: aload_2
      36: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #22                 // class org/springframework/http/MediaType
      44: astore_3
      45: aload_3
      46: aload_1
      47: invokevirtual #27                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      50: ifeq          55
      53: iconst_1
      54: ireturn
      55: goto          26
      58: iconst_0
      59: ireturn

  public final T read(java.lang.Class<? extends T>, org.springframework.http.HttpInputMessage) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #28                 // Method readInternal:(Ljava/lang/Class;Lorg/springframework/http/HttpInputMessage;)Ljava/lang/Object;
       6: areturn

  public final void write(T, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aload_3
       1: invokeinterface #29,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: astore        4
       8: aload_0
       9: aload         4
      11: aload_1
      12: aload_2
      13: invokevirtual #30                 // Method addDefaultHeaders:(Lorg/springframework/http/HttpHeaders;Ljava/lang/Object;Lorg/springframework/http/MediaType;)V
      16: aload_3
      17: instanceof    #31                 // class org/springframework/http/StreamingHttpOutputMessage
      20: ifeq          48
      23: aload_3
      24: checkcast     #31                 // class org/springframework/http/StreamingHttpOutputMessage
      27: astore        5
      29: aload         5
      31: aload_0
      32: aload_1
      33: aload         4
      35: invokedynamic #32,  0             // InvokeDynamic #0:writeTo:(Lorg/springframework/http/converter/AbstractHttpMessageConverter;Ljava/lang/Object;Lorg/springframework/http/HttpHeaders;)Lorg/springframework/http/StreamingHttpOutputMessage$Body;
      40: invokeinterface #33,  2           // InterfaceMethod org/springframework/http/StreamingHttpOutputMessage.setBody:(Lorg/springframework/http/StreamingHttpOutputMessage$Body;)V
      45: goto          63
      48: aload_0
      49: aload_1
      50: aload_3
      51: invokevirtual #34                 // Method writeInternal:(Ljava/lang/Object;Lorg/springframework/http/HttpOutputMessage;)V
      54: aload_3
      55: invokeinterface #35,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getBody:()Ljava/io/OutputStream;
      60: invokevirtual #36                 // Method java/io/OutputStream.flush:()V
      63: return

  protected void addDefaultHeaders(org.springframework.http.HttpHeaders, T, org.springframework.http.MediaType) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #37                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       4: ifnonnull     112
       7: aload_3
       8: astore        4
      10: aload_3
      11: ifnull        28
      14: aload_3
      15: invokevirtual #38                 // Method org/springframework/http/MediaType.isWildcardType:()Z
      18: ifne          28
      21: aload_3
      22: invokevirtual #39                 // Method org/springframework/http/MediaType.isWildcardSubtype:()Z
      25: ifeq          38
      28: aload_0
      29: aload_2
      30: invokevirtual #40                 // Method getDefaultContentType:(Ljava/lang/Object;)Lorg/springframework/http/MediaType;
      33: astore        4
      35: goto          69
      38: getstatic     #41                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      41: aload_3
      42: invokevirtual #26                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      45: ifeq          69
      48: aload_0
      49: aload_2
      50: invokevirtual #40                 // Method getDefaultContentType:(Ljava/lang/Object;)Lorg/springframework/http/MediaType;
      53: astore        5
      55: aload         5
      57: ifnull        65
      60: aload         5
      62: goto          67
      65: aload         4
      67: astore        4
      69: aload         4
      71: ifnull        112
      74: aload         4
      76: invokevirtual #42                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      79: ifnonnull     106
      82: aload_0
      83: invokevirtual #43                 // Method getDefaultCharset:()Ljava/nio/charset/Charset;
      86: astore        5
      88: aload         5
      90: ifnull        106
      93: new           #22                 // class org/springframework/http/MediaType
      96: dup
      97: aload         4
      99: aload         5
     101: invokespecial #44                 // Method org/springframework/http/MediaType."<init>":(Lorg/springframework/http/MediaType;Ljava/nio/charset/Charset;)V
     104: astore        4
     106: aload_1
     107: aload         4
     109: invokevirtual #45                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
     112: aload_1
     113: invokevirtual #46                 // Method org/springframework/http/HttpHeaders.getContentLength:()J
     116: lconst_0
     117: lcmp
     118: ifge          155
     121: aload_1
     122: ldc           #48                 // String Transfer-Encoding
     124: invokevirtual #49                 // Method org/springframework/http/HttpHeaders.containsKey:(Ljava/lang/Object;)Z
     127: ifne          155
     130: aload_0
     131: aload_2
     132: aload_1
     133: invokevirtual #37                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
     136: invokevirtual #50                 // Method getContentLength:(Ljava/lang/Object;Lorg/springframework/http/MediaType;)Ljava/lang/Long;
     139: astore        4
     141: aload         4
     143: ifnull        155
     146: aload_1
     147: aload         4
     149: invokevirtual #51                 // Method java/lang/Long.longValue:()J
     152: invokevirtual #52                 // Method org/springframework/http/HttpHeaders.setContentLength:(J)V
     155: return

  protected org.springframework.http.MediaType getDefaultContentType(T) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method getSupportedMediaTypes:()Ljava/util/List;
       4: astore_2
       5: aload_2
       6: invokeinterface #53,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      11: ifne          27
      14: aload_2
      15: iconst_0
      16: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      21: checkcast     #22                 // class org/springframework/http/MediaType
      24: goto          28
      27: aconst_null
      28: areturn

  protected java.lang.Long getContentLength(T, org.springframework.http.MediaType) throws java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  protected abstract boolean supports(java.lang.Class<?>);

  protected abstract T readInternal(java.lang.Class<? extends T>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;

  protected abstract void writeInternal(T, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;

  private void lambda$write$0(java.lang.Object, org.springframework.http.HttpHeaders, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: new           #55                 // class org/springframework/http/converter/AbstractHttpMessageConverter$1
       5: dup
       6: aload_0
       7: aload_3
       8: aload_2
       9: invokespecial #56                 // Method org/springframework/http/converter/AbstractHttpMessageConverter$1."<init>":(Lorg/springframework/http/converter/AbstractHttpMessageConverter;Ljava/io/OutputStream;Lorg/springframework/http/HttpHeaders;)V
      12: invokevirtual #34                 // Method writeInternal:(Ljava/lang/Object;Lorg/springframework/http/HttpOutputMessage;)V
      15: return
}
