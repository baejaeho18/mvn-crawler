Compiled from "DecoderHttpMessageReader.java"
public class org.springframework.http.codec.DecoderHttpMessageReader<T> implements org.springframework.http.codec.HttpMessageReader<T> {
  private final org.springframework.core.codec.Decoder<T> decoder;

  private final java.util.List<org.springframework.http.MediaType> mediaTypes;

  public org.springframework.http.codec.DecoderHttpMessageReader(org.springframework.core.codec.Decoder<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String Decoder is required
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      15: aload_0
      16: aload_1
      17: invokeinterface #5,  1            // InterfaceMethod org/springframework/core/codec/Decoder.getDecodableMimeTypes:()Ljava/util/List;
      22: invokestatic  #6                  // Method org/springframework/http/MediaType.asMediaTypes:(Ljava/util/List;)Ljava/util/List;
      25: putfield      #7                  // Field mediaTypes:Ljava/util/List;
      28: return

  public org.springframework.core.codec.Decoder<T> getDecoder();
    Code:
       0: aload_0
       1: getfield      #4                  // Field decoder:Lorg/springframework/core/codec/Decoder;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes();
    Code:
       0: aload_0
       1: getfield      #7                  // Field mediaTypes:Ljava/util/List;
       4: areturn

  public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: getfield      #4                  // Field decoder:Lorg/springframework/core/codec/Decoder;
       4: aload_1
       5: aload_2
       6: invokeinterface #8,  3            // InterfaceMethod org/springframework/core/codec/Decoder.canDecode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      11: ireturn

  public reactor.core.publisher.Flux<T> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #9                  // Method getContentType:(Lorg/springframework/http/HttpMessage;)Lorg/springframework/http/MediaType;
       5: astore        4
       7: aload_0
       8: getfield      #4                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      11: aload_2
      12: invokeinterface #10,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getBody:()Lreactor/core/publisher/Flux;
      17: aload_1
      18: aload         4
      20: aload_3
      21: invokeinterface #11,  5           // InterfaceMethod org/springframework/core/codec/Decoder.decode:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      26: areturn

  public reactor.core.publisher.Mono<T> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #9                  // Method getContentType:(Lorg/springframework/http/HttpMessage;)Lorg/springframework/http/MediaType;
       5: astore        4
       7: aload_0
       8: getfield      #4                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      11: aload_2
      12: invokeinterface #10,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getBody:()Lreactor/core/publisher/Flux;
      17: aload_1
      18: aload         4
      20: aload_3
      21: invokeinterface #12,  5           // InterfaceMethod org/springframework/core/codec/Decoder.decodeToMono:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      26: areturn

  private org.springframework.http.MediaType getContentType(org.springframework.http.HttpMessage);
    Code:
       0: aload_1
       1: invokeinterface #13,  1           // InterfaceMethod org/springframework/http/HttpMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #14                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore_2
      10: aload_2
      11: ifnull        18
      14: aload_2
      15: goto          21
      18: getstatic     #15                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      21: areturn

  public reactor.core.publisher.Flux<T> read(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: new           #16                 // class java/util/HashMap
       3: dup
       4: iconst_4
       5: invokespecial #17                 // Method java/util/HashMap."<init>":(I)V
       8: astore        6
      10: aload         6
      12: aload_0
      13: aload_1
      14: aload_2
      15: aload_3
      16: aload         4
      18: invokevirtual #18                 // Method getReadHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      21: invokeinterface #19,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      26: aload         6
      28: aload         5
      30: invokeinterface #19,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      35: aload_0
      36: aload_2
      37: aload_3
      38: aload         6
      40: invokevirtual #20                 // Method read:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      43: areturn

  public reactor.core.publisher.Mono<T> readMono(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: new           #16                 // class java/util/HashMap
       3: dup
       4: iconst_4
       5: invokespecial #17                 // Method java/util/HashMap."<init>":(I)V
       8: astore        6
      10: aload         6
      12: aload_0
      13: aload_1
      14: aload_2
      15: aload_3
      16: aload         4
      18: invokevirtual #18                 // Method getReadHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      21: invokeinterface #19,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      26: aload         6
      28: aload         5
      30: invokeinterface #19,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      35: aload_0
      36: aload_2
      37: aload_3
      38: aload         6
      40: invokevirtual #21                 // Method readMono:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      43: areturn

  protected java.util.Map<java.lang.String, java.lang.Object> getReadHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #4                  // Field decoder:Lorg/springframework/core/codec/Decoder;
       4: instanceof    #22                 // class org/springframework/http/codec/HttpMessageDecoder
       7: ifeq          32
      10: aload_0
      11: getfield      #4                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      14: checkcast     #22                 // class org/springframework/http/codec/HttpMessageDecoder
      17: astore        5
      19: aload         5
      21: aload_1
      22: aload_2
      23: aload_3
      24: aload         4
      26: invokeinterface #23,  5           // InterfaceMethod org/springframework/http/codec/HttpMessageDecoder.getDecodeHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      31: areturn
      32: invokestatic  #24                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      35: areturn
}
