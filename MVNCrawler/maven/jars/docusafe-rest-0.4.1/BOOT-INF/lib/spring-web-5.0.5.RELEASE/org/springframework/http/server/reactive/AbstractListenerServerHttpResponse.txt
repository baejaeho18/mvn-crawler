Compiled from "AbstractListenerServerHttpResponse.java"
public abstract class org.springframework.http.server.reactive.AbstractListenerServerHttpResponse extends org.springframework.http.server.reactive.AbstractServerHttpResponse {
  private final java.util.concurrent.atomic.AtomicBoolean writeCalled;

  public org.springframework.http.server.reactive.AbstractListenerServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/http/server/reactive/AbstractServerHttpResponse."<init>":(Lorg/springframework/core/io/buffer/DataBufferFactory;)V
       5: aload_0
       6: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       9: dup
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      13: putfield      #4                  // Field writeCalled:Ljava/util/concurrent/atomic/AtomicBoolean;
      16: return

  protected final reactor.core.publisher.Mono<java.lang.Void> writeWithInternal(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #5                  // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       5: invokevirtual #6                  // Method writeAndFlushWithInternal:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       8: areturn

  protected final reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWithInternal(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field writeCalled:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          28
      12: aload_0
      13: invokevirtual #8                  // Method createBodyFlushProcessor:()Lorg/reactivestreams/Processor;
      16: astore_2
      17: aload_1
      18: aload_2
      19: invokedynamic #9,  0              // InvokeDynamic #0:subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Processor;)Lorg/reactivestreams/Publisher;
      24: invokestatic  #10                 // Method reactor/core/publisher/Mono.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      27: areturn
      28: new           #11                 // class java/lang/IllegalStateException
      31: dup
      32: ldc           #12                 // String writeWith() or writeAndFlushWith() has already been called
      34: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      37: invokestatic  #14                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      40: areturn

  protected abstract org.reactivestreams.Processor<? super org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, java.lang.Void> createBodyFlushProcessor();

  private static void lambda$writeAndFlushWithInternal$0(org.reactivestreams.Publisher, org.reactivestreams.Processor, org.reactivestreams.Subscriber);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #15,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
       7: aload_1
       8: aload_2
       9: invokeinterface #16,  2           // InterfaceMethod org/reactivestreams/Processor.subscribe:(Lorg/reactivestreams/Subscriber;)V
      14: return
}
