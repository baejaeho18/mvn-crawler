Compiled from "AbstractListenerReadPublisher.java"
public abstract class org.springframework.http.server.reactive.AbstractListenerReadPublisher<T> implements org.reactivestreams.Publisher<T> {
  protected final org.apache.commons.logging.Log logger;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerReadPublisher$State> state;

  private volatile long demand;

  private static final java.util.concurrent.atomic.AtomicLongFieldUpdater<org.springframework.http.server.reactive.AbstractListenerReadPublisher> DEMAND_FIELD_UPDATER;

  private volatile org.reactivestreams.Subscriber<? super T> subscriber;

  private volatile boolean completionBeforeDemand;

  private volatile java.lang.Throwable errorBeforeDemand;

  public org.springframework.http.server.reactive.AbstractListenerReadPublisher();
    Code:
       0: aload_0
       1: invokespecial #11                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #12                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #13                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #15                 // class java/util/concurrent/atomic/AtomicReference
      19: dup
      20: getstatic     #16                 // Field org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.UNSUBSCRIBED:Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$State;
      23: invokespecial #17                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      26: putfield      #10                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      29: return

  public void subscribe(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerReadPublisher$State
      10: aload_0
      11: aload_1
      12: invokevirtual #20                 // Method org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.subscribe:(Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher;Lorg/reactivestreams/Subscriber;)V
      15: return

  public final void onDataAvailable();
    Code:
       0: aload_0
       1: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #21                 // String I/O event onDataAvailable
       6: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #10                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      18: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerReadPublisher$State
      21: aload_0
      22: invokevirtual #23                 // Method org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.onDataAvailable:(Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher;)V
      25: return

  public void onAllDataRead();
    Code:
       0: aload_0
       1: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #24                 // String I/O event onAllDataRead
       6: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #10                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      18: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerReadPublisher$State
      21: aload_0
      22: invokevirtual #25                 // Method org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.onAllDataRead:(Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher;)V
      25: return

  public final void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
       4: invokeinterface #26,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       9: ifeq          40
      12: aload_0
      13: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
      16: new           #27                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #29                 // String I/O event onError:
      25: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_1
      29: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      32: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      40: aload_0
      41: getfield      #10                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      44: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      47: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerReadPublisher$State
      50: aload_0
      51: aload_1
      52: invokevirtual #33                 // Method org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.onError:(Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher;Ljava/lang/Throwable;)V
      55: return

  protected abstract void checkOnDataAvailable();

  protected abstract T read() throws java.io.IOException;

  protected abstract void readingPaused();

  private boolean readAndPublish() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field demand:J
       4: dup2
       5: lstore_1
       6: lconst_0
       7: lcmp
       8: ifle          141
      11: aload_0
      12: getfield      #10                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      18: checkcast     #19                 // class org/springframework/http/server/reactive/AbstractListenerReadPublisher$State
      21: getstatic     #34                 // Field org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.COMPLETED:Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$State;
      24: invokevirtual #35                 // Method org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.equals:(Ljava/lang/Object;)Z
      27: ifne          141
      30: aload_0
      31: invokevirtual #36                 // Method read:()Ljava/lang/Object;
      34: astore_3
      35: aload_3
      36: ifnull        113
      39: lload_1
      40: ldc2_w        #38                 // long 9223372036854775807l
      43: lcmp
      44: ifeq          58
      47: getstatic     #4                  // Field DEMAND_FIELD_UPDATER:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      50: aload_0
      51: ldc2_w        #40                 // long -1l
      54: invokevirtual #42                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
      57: pop2
      58: aload_0
      59: getfield      #7                  // Field subscriber:Lorg/reactivestreams/Subscriber;
      62: astore        4
      64: aload         4
      66: ifnull        73
      69: iconst_1
      70: goto          74
      73: iconst_0
      74: ldc           #43                 // String No subscriber
      76: invokestatic  #44                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      79: aload_0
      80: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
      83: invokeinterface #26,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      88: ifeq          102
      91: aload_0
      92: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
      95: ldc           #45                 // String Data item read, publishing..
      97: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
     102: aload         4
     104: aload_3
     105: invokeinterface #46,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     110: goto          138
     113: aload_0
     114: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
     117: invokeinterface #26,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
     122: ifeq          136
     125: aload_0
     126: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
     129: ldc           #47                 // String No more data to read
     131: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
     136: iconst_1
     137: ireturn
     138: goto          0
     141: iconst_0
     142: ireturn

  private boolean changeState(org.springframework.http.server.reactive.AbstractListenerReadPublisher$State, org.springframework.http.server.reactive.AbstractListenerReadPublisher$State);
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: aload_2
       6: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: istore_3
      10: iload_3
      11: ifeq          58
      14: aload_0
      15: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
      18: invokeinterface #26,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      23: ifeq          58
      26: aload_0
      27: getfield      #14                 // Field logger:Lorg/apache/commons/logging/Log;
      30: new           #27                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      37: aload_1
      38: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      41: ldc           #49                 // String  ->
      43: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_2
      47: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      50: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      58: iload_3
      59: ireturn

  private void changeToDemandState(org.springframework.http.server.reactive.AbstractListenerReadPublisher$State);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #50                 // Field org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.DEMAND:Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$State;
       5: invokespecial #9                  // Method changeState:(Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$State;Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$State;)Z
       8: ifeq          25
      11: aload_1
      12: getstatic     #51                 // Field org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.READING:Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$State;
      15: invokevirtual #35                 // Method org/springframework/http/server/reactive/AbstractListenerReadPublisher$State.equals:(Ljava/lang/Object;)Z
      18: ifne          25
      21: aload_0
      22: invokevirtual #52                 // Method checkOnDataAvailable:()V
      25: return

  private org.reactivestreams.Subscription createSubscription();
    Code:
       0: new           #53                 // class org/springframework/http/server/reactive/AbstractListenerReadPublisher$ReadSubscription
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #54                 // Method org/springframework/http/server/reactive/AbstractListenerReadPublisher$ReadSubscription."<init>":(Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher;Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$1;)V
       9: areturn

  static java.util.concurrent.atomic.AtomicReference access$100(org.springframework.http.server.reactive.AbstractListenerReadPublisher);
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn

  static boolean access$300(org.springframework.http.server.reactive.AbstractListenerReadPublisher, org.springframework.http.server.reactive.AbstractListenerReadPublisher$State, org.springframework.http.server.reactive.AbstractListenerReadPublisher$State);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #9                  // Method changeState:(Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$State;Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$State;)Z
       6: ireturn

  static org.reactivestreams.Subscription access$400(org.springframework.http.server.reactive.AbstractListenerReadPublisher);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method createSubscription:()Lorg/reactivestreams/Subscription;
       4: areturn

  static org.reactivestreams.Subscriber access$502(org.springframework.http.server.reactive.AbstractListenerReadPublisher, org.reactivestreams.Subscriber);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #7                  // Field subscriber:Lorg/reactivestreams/Subscriber;
       6: areturn

  static boolean access$600(org.springframework.http.server.reactive.AbstractListenerReadPublisher);
    Code:
       0: aload_0
       1: getfield      #6                  // Field completionBeforeDemand:Z
       4: ireturn

  static java.lang.Throwable access$700(org.springframework.http.server.reactive.AbstractListenerReadPublisher);
    Code:
       0: aload_0
       1: getfield      #5                  // Field errorBeforeDemand:Ljava/lang/Throwable;
       4: areturn

  static boolean access$602(org.springframework.http.server.reactive.AbstractListenerReadPublisher, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #6                  // Field completionBeforeDemand:Z
       6: ireturn

  static java.lang.Throwable access$702(org.springframework.http.server.reactive.AbstractListenerReadPublisher, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #5                  // Field errorBeforeDemand:Ljava/lang/Throwable;
       6: areturn

  static java.util.concurrent.atomic.AtomicLongFieldUpdater access$800();
    Code:
       0: getstatic     #4                  // Field DEMAND_FIELD_UPDATER:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: areturn

  static void access$900(org.springframework.http.server.reactive.AbstractListenerReadPublisher, org.springframework.http.server.reactive.AbstractListenerReadPublisher$State);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method changeToDemandState:(Lorg/springframework/http/server/reactive/AbstractListenerReadPublisher$State;)V
       5: return

  static boolean access$1000(org.springframework.http.server.reactive.AbstractListenerReadPublisher) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #2                  // Method readAndPublish:()Z
       4: ireturn

  static long access$1100(org.springframework.http.server.reactive.AbstractListenerReadPublisher);
    Code:
       0: aload_0
       1: getfield      #1                  // Field demand:J
       4: lreturn

  static org.reactivestreams.Subscriber access$500(org.springframework.http.server.reactive.AbstractListenerReadPublisher);
    Code:
       0: aload_0
       1: getfield      #7                  // Field subscriber:Lorg/reactivestreams/Subscriber;
       4: areturn

  static {};
    Code:
       0: ldc           #55                 // class org/springframework/http/server/reactive/AbstractListenerReadPublisher
       2: ldc           #56                 // String demand
       4: invokestatic  #57                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #4                  // Field DEMAND_FIELD_UPDATER:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: return
}
