Compiled from "ServletServerHttpResponse.java"
class org.springframework.http.server.reactive.ServletServerHttpResponse extends org.springframework.http.server.reactive.AbstractListenerServerHttpResponse {
  private final javax.servlet.http.HttpServletResponse response;

  private final javax.servlet.ServletOutputStream outputStream;

  private final int bufferSize;

  private volatile org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyFlushProcessor bodyFlushProcessor;

  private volatile org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor bodyProcessor;

  private volatile boolean flushOnNext;

  public org.springframework.http.server.reactive.ServletServerHttpResponse(javax.servlet.http.HttpServletResponse, javax.servlet.AsyncContext, org.springframework.core.io.buffer.DataBufferFactory, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_3
       2: invokespecial #6                  // Method org/springframework/http/server/reactive/AbstractListenerServerHttpResponse."<init>":(Lorg/springframework/core/io/buffer/DataBufferFactory;)V
       5: aload_1
       6: ldc           #7                  // String HttpServletResponse must not be null
       8: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      11: aload_3
      12: ldc           #9                  // String DataBufferFactory must not be null
      14: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      17: iload         4
      19: ifle          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ldc           #10                 // String Buffer size must be greater than 0
      29: invokestatic  #11                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      32: aload_0
      33: aload_1
      34: putfield      #12                 // Field response:Ljavax/servlet/http/HttpServletResponse;
      37: aload_0
      38: aload_1
      39: invokeinterface #13,  1           // InterfaceMethod javax/servlet/http/HttpServletResponse.getOutputStream:()Ljavax/servlet/ServletOutputStream;
      44: putfield      #14                 // Field outputStream:Ljavax/servlet/ServletOutputStream;
      47: aload_0
      48: iload         4
      50: putfield      #15                 // Field bufferSize:I
      53: aload_2
      54: new           #16                 // class org/springframework/http/server/reactive/ServletServerHttpResponse$ResponseAsyncListener
      57: dup
      58: aload_0
      59: aconst_null
      60: invokespecial #17                 // Method org/springframework/http/server/reactive/ServletServerHttpResponse$ResponseAsyncListener."<init>":(Lorg/springframework/http/server/reactive/ServletServerHttpResponse;Lorg/springframework/http/server/reactive/ServletServerHttpResponse$1;)V
      63: invokeinterface #18,  2           // InterfaceMethod javax/servlet/AsyncContext.addListener:(Ljavax/servlet/AsyncListener;)V
      68: aload_1
      69: invokeinterface #13,  1           // InterfaceMethod javax/servlet/http/HttpServletResponse.getOutputStream:()Ljavax/servlet/ServletOutputStream;
      74: new           #19                 // class org/springframework/http/server/reactive/ServletServerHttpResponse$ResponseBodyWriteListener
      77: dup
      78: aload_0
      79: aconst_null
      80: invokespecial #20                 // Method org/springframework/http/server/reactive/ServletServerHttpResponse$ResponseBodyWriteListener."<init>":(Lorg/springframework/http/server/reactive/ServletServerHttpResponse;Lorg/springframework/http/server/reactive/ServletServerHttpResponse$1;)V
      83: invokevirtual #21                 // Method javax/servlet/ServletOutputStream.setWriteListener:(Ljavax/servlet/WriteListener;)V
      86: return

  public <T> T getNativeResponse();
    Code:
       0: aload_0
       1: getfield      #12                 // Field response:Ljavax/servlet/http/HttpServletResponse;
       4: areturn

  protected void applyStatusCode();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getStatusCodeValue:()Ljava/lang/Integer;
       4: astore_1
       5: aload_1
       6: ifnull        22
       9: aload_0
      10: getfield      #12                 // Field response:Ljavax/servlet/http/HttpServletResponse;
      13: aload_1
      14: invokevirtual #23                 // Method java/lang/Integer.intValue:()I
      17: invokeinterface #24,  2           // InterfaceMethod javax/servlet/http/HttpServletResponse.setStatus:(I)V
      22: return

  protected void applyHeaders();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
       4: aload_0
       5: invokedynamic #26,  0             // InvokeDynamic #0:accept:(Lorg/springframework/http/server/reactive/ServletServerHttpResponse;)Ljava/util/function/BiConsumer;
      10: invokevirtual #27                 // Method org/springframework/http/HttpHeaders.forEach:(Ljava/util/function/BiConsumer;)V
      13: aload_0
      14: invokevirtual #25                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
      17: invokevirtual #28                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      20: astore_1
      21: aload_0
      22: getfield      #12                 // Field response:Ljavax/servlet/http/HttpServletResponse;
      25: invokeinterface #29,  1           // InterfaceMethod javax/servlet/http/HttpServletResponse.getContentType:()Ljava/lang/String;
      30: ifnonnull     50
      33: aload_1
      34: ifnull        50
      37: aload_0
      38: getfield      #12                 // Field response:Ljavax/servlet/http/HttpServletResponse;
      41: aload_1
      42: invokevirtual #30                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
      45: invokeinterface #31,  2           // InterfaceMethod javax/servlet/http/HttpServletResponse.setContentType:(Ljava/lang/String;)V
      50: aload_1
      51: ifnull        61
      54: aload_1
      55: invokevirtual #32                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      58: goto          62
      61: aconst_null
      62: astore_2
      63: aload_0
      64: getfield      #12                 // Field response:Ljavax/servlet/http/HttpServletResponse;
      67: invokeinterface #33,  1           // InterfaceMethod javax/servlet/http/HttpServletResponse.getCharacterEncoding:()Ljava/lang/String;
      72: ifnonnull     92
      75: aload_2
      76: ifnull        92
      79: aload_0
      80: getfield      #12                 // Field response:Ljavax/servlet/http/HttpServletResponse;
      83: aload_2
      84: invokevirtual #34                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      87: invokeinterface #35,  2           // InterfaceMethod javax/servlet/http/HttpServletResponse.setCharacterEncoding:(Ljava/lang/String;)V
      92: return

  protected void applyCookies();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
       4: invokeinterface #37,  1           // InterfaceMethod org/springframework/util/MultiValueMap.keySet:()Ljava/util/Set;
       9: invokeinterface #38,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          186
      24: aload_1
      25: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #41                 // class java/lang/String
      33: astore_2
      34: aload_0
      35: invokevirtual #36                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
      38: aload_2
      39: invokeinterface #42,  2           // InterfaceMethod org/springframework/util/MultiValueMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      44: checkcast     #43                 // class java/util/List
      47: invokeinterface #44,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      52: astore_3
      53: aload_3
      54: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          183
      62: aload_3
      63: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      68: checkcast     #45                 // class org/springframework/http/ResponseCookie
      71: astore        4
      73: new           #46                 // class javax/servlet/http/Cookie
      76: dup
      77: aload_2
      78: aload         4
      80: invokevirtual #47                 // Method org/springframework/http/ResponseCookie.getValue:()Ljava/lang/String;
      83: invokespecial #48                 // Method javax/servlet/http/Cookie."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      86: astore        5
      88: aload         4
      90: invokevirtual #49                 // Method org/springframework/http/ResponseCookie.getMaxAge:()Ljava/time/Duration;
      93: invokevirtual #50                 // Method java/time/Duration.isNegative:()Z
      96: ifne          113
      99: aload         5
     101: aload         4
     103: invokevirtual #49                 // Method org/springframework/http/ResponseCookie.getMaxAge:()Ljava/time/Duration;
     106: invokevirtual #51                 // Method java/time/Duration.getSeconds:()J
     109: l2i
     110: invokevirtual #52                 // Method javax/servlet/http/Cookie.setMaxAge:(I)V
     113: aload         4
     115: invokevirtual #53                 // Method org/springframework/http/ResponseCookie.getDomain:()Ljava/lang/String;
     118: ifnull        131
     121: aload         5
     123: aload         4
     125: invokevirtual #53                 // Method org/springframework/http/ResponseCookie.getDomain:()Ljava/lang/String;
     128: invokevirtual #54                 // Method javax/servlet/http/Cookie.setDomain:(Ljava/lang/String;)V
     131: aload         4
     133: invokevirtual #55                 // Method org/springframework/http/ResponseCookie.getPath:()Ljava/lang/String;
     136: ifnull        149
     139: aload         5
     141: aload         4
     143: invokevirtual #55                 // Method org/springframework/http/ResponseCookie.getPath:()Ljava/lang/String;
     146: invokevirtual #56                 // Method javax/servlet/http/Cookie.setPath:(Ljava/lang/String;)V
     149: aload         5
     151: aload         4
     153: invokevirtual #57                 // Method org/springframework/http/ResponseCookie.isSecure:()Z
     156: invokevirtual #58                 // Method javax/servlet/http/Cookie.setSecure:(Z)V
     159: aload         5
     161: aload         4
     163: invokevirtual #59                 // Method org/springframework/http/ResponseCookie.isHttpOnly:()Z
     166: invokevirtual #60                 // Method javax/servlet/http/Cookie.setHttpOnly:(Z)V
     169: aload_0
     170: getfield      #12                 // Field response:Ljavax/servlet/http/HttpServletResponse;
     173: aload         5
     175: invokeinterface #61,  2           // InterfaceMethod javax/servlet/http/HttpServletResponse.addCookie:(Ljavax/servlet/http/Cookie;)V
     180: goto          53
     183: goto          15
     186: return

  protected org.reactivestreams.Processor<? super org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, java.lang.Void> createBodyFlushProcessor();
    Code:
       0: new           #62                 // class org/springframework/http/server/reactive/ServletServerHttpResponse$ResponseBodyFlushProcessor
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #63                 // Method org/springframework/http/server/reactive/ServletServerHttpResponse$ResponseBodyFlushProcessor."<init>":(Lorg/springframework/http/server/reactive/ServletServerHttpResponse;Lorg/springframework/http/server/reactive/ServletServerHttpResponse$1;)V
       9: astore_1
      10: aload_0
      11: aload_1
      12: putfield      #5                  // Field bodyFlushProcessor:Lorg/springframework/http/server/reactive/ServletServerHttpResponse$ResponseBodyFlushProcessor;
      15: aload_1
      16: areturn

  protected int writeToOutputStream(org.springframework.core.io.buffer.DataBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field outputStream:Ljavax/servlet/ServletOutputStream;
       4: astore_2
       5: aload_1
       6: invokeinterface #64,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asInputStream:()Ljava/io/InputStream;
      11: astore_3
      12: iconst_0
      13: istore        4
      15: aload_0
      16: getfield      #15                 // Field bufferSize:I
      19: newarray       byte
      21: astore        5
      23: aload_2
      24: invokevirtual #65                 // Method javax/servlet/ServletOutputStream.isReady:()Z
      27: ifeq          62
      30: aload_3
      31: aload         5
      33: invokevirtual #66                 // Method java/io/InputStream.read:([B)I
      36: dup
      37: istore        6
      39: iconst_m1
      40: if_icmpeq     62
      43: aload_2
      44: aload         5
      46: iconst_0
      47: iload         6
      49: invokevirtual #67                 // Method javax/servlet/ServletOutputStream.write:([BII)V
      52: iload         4
      54: iload         6
      56: iadd
      57: istore        4
      59: goto          23
      62: iload         4
      64: ireturn

  private void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field outputStream:Ljavax/servlet/ServletOutputStream;
       4: astore_1
       5: aload_1
       6: invokevirtual #65                 // Method javax/servlet/ServletOutputStream.isReady:()Z
       9: ifeq          32
      12: aload_1
      13: invokevirtual #68                 // Method javax/servlet/ServletOutputStream.flush:()V
      16: aload_0
      17: iconst_0
      18: putfield      #1                  // Field flushOnNext:Z
      21: goto          37
      24: astore_2
      25: aload_0
      26: iconst_1
      27: putfield      #1                  // Field flushOnNext:Z
      30: aload_2
      31: athrow
      32: aload_0
      33: iconst_1
      34: putfield      #1                  // Field flushOnNext:Z
      37: return
    Exception table:
       from    to  target type
          12    21    24   Class java/io/IOException

  private boolean isWritePossible();
    Code:
       0: aload_0
       1: getfield      #14                 // Field outputStream:Ljavax/servlet/ServletOutputStream;
       4: invokevirtual #65                 // Method javax/servlet/ServletOutputStream.isReady:()Z
       7: ireturn

  private void lambda$applyHeaders$0(java.lang.String, java.util.List);
    Code:
       0: aload_2
       1: invokeinterface #44,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_3
       7: aload_3
       8: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          42
      16: aload_3
      17: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #41                 // class java/lang/String
      25: astore        4
      27: aload_0
      28: getfield      #12                 // Field response:Ljavax/servlet/http/HttpServletResponse;
      31: aload_1
      32: aload         4
      34: invokeinterface #70,  3           // InterfaceMethod javax/servlet/http/HttpServletResponse.addHeader:(Ljava/lang/String;Ljava/lang/String;)V
      39: goto          7
      42: return

  static org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyFlushProcessor access$300(org.springframework.http.server.reactive.ServletServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #5                  // Field bodyFlushProcessor:Lorg/springframework/http/server/reactive/ServletServerHttpResponse$ResponseBodyFlushProcessor;
       4: areturn

  static org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor access$400(org.springframework.http.server.reactive.ServletServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #4                  // Field bodyProcessor:Lorg/springframework/http/server/reactive/ServletServerHttpResponse$ResponseBodyProcessor;
       4: areturn

  static org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor access$402(org.springframework.http.server.reactive.ServletServerHttpResponse, org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #4                  // Field bodyProcessor:Lorg/springframework/http/server/reactive/ServletServerHttpResponse$ResponseBodyProcessor;
       6: areturn

  static void access$600(org.springframework.http.server.reactive.ServletServerHttpResponse) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method flush:()V
       4: return

  static boolean access$700(org.springframework.http.server.reactive.ServletServerHttpResponse);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method isWritePossible:()Z
       4: ireturn

  static boolean access$800(org.springframework.http.server.reactive.ServletServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #1                  // Field flushOnNext:Z
       4: ireturn
}
