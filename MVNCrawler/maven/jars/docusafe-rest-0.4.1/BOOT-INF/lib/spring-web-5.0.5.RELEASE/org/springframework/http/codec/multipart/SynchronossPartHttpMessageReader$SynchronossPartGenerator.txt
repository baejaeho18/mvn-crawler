Compiled from "SynchronossPartHttpMessageReader.java"
class org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPartGenerator implements java.util.function.Consumer<reactor.core.publisher.FluxSink<org.springframework.http.codec.multipart.Part>> {
  private final org.springframework.http.ReactiveHttpInputMessage inputMessage;

  private final org.springframework.core.io.buffer.DataBufferFactory bufferFactory;

  org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPartGenerator(org.springframework.http.ReactiveHttpInputMessage, org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field inputMessage:Lorg/springframework/http/ReactiveHttpInputMessage;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      14: return

  public void accept(reactor.core.publisher.FluxSink<org.springframework.http.codec.multipart.Part>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field inputMessage:Lorg/springframework/http/ReactiveHttpInputMessage;
       4: invokeinterface #4,  1            // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       9: astore_2
      10: aload_2
      11: invokevirtual #5                  // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      14: astore_3
      15: aload_3
      16: ifnull        23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ldc           #6                  // String No content type set
      26: invokestatic  #7                  // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      29: aload_2
      30: invokevirtual #8                  // Method org/springframework/http/HttpHeaders.getContentLength:()J
      33: invokestatic  #9                  // Method java/lang/Math.toIntExact:(J)I
      36: istore        4
      38: aload_3
      39: invokevirtual #10                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      42: invokestatic  #11                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      45: getstatic     #12                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      48: invokevirtual #13                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      51: checkcast     #14                 // class java/nio/charset/Charset
      54: astore        5
      56: new           #15                 // class org/synchronoss/cloud/nio/multipart/MultipartContext
      59: dup
      60: aload_3
      61: invokevirtual #16                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
      64: iload         4
      66: aload         5
      68: invokevirtual #17                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      71: invokespecial #18                 // Method org/synchronoss/cloud/nio/multipart/MultipartContext."<init>":(Ljava/lang/String;ILjava/lang/String;)V
      74: astore        6
      76: new           #19                 // class org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader$FluxSinkAdapterListener
      79: dup
      80: aload_1
      81: aload_0
      82: getfield      #3                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      85: aload         6
      87: invokespecial #20                 // Method org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader$FluxSinkAdapterListener."<init>":(Lreactor/core/publisher/FluxSink;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/synchronoss/cloud/nio/multipart/MultipartContext;)V
      90: astore        7
      92: aload         6
      94: invokestatic  #21                 // Method org/synchronoss/cloud/nio/multipart/Multipart.multipart:(Lorg/synchronoss/cloud/nio/multipart/MultipartContext;)Lorg/synchronoss/cloud/nio/multipart/Multipart$Builder;
      97: aload         7
      99: invokevirtual #22                 // Method org/synchronoss/cloud/nio/multipart/Multipart$Builder.forNIO:(Lorg/synchronoss/cloud/nio/multipart/NioMultipartParserListener;)Lorg/synchronoss/cloud/nio/multipart/NioMultipartParser;
     102: astore        8
     104: aload_0
     105: getfield      #2                  // Field inputMessage:Lorg/springframework/http/ReactiveHttpInputMessage;
     108: invokeinterface #23,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getBody:()Lreactor/core/publisher/Flux;
     113: aload         8
     115: aload         7
     117: invokedynamic #24,  0             // InvokeDynamic #0:accept:(Lorg/synchronoss/cloud/nio/multipart/NioMultipartParser;Lorg/synchronoss/cloud/nio/multipart/NioMultipartParserListener;)Ljava/util/function/Consumer;
     122: aload         7
     124: aload         8
     126: invokedynamic #25,  0             // InvokeDynamic #1:accept:(Lorg/synchronoss/cloud/nio/multipart/NioMultipartParserListener;Lorg/synchronoss/cloud/nio/multipart/NioMultipartParser;)Ljava/util/function/Consumer;
     131: aload         8
     133: aload         7
     135: invokedynamic #26,  0             // InvokeDynamic #2:run:(Lorg/synchronoss/cloud/nio/multipart/NioMultipartParser;Lorg/synchronoss/cloud/nio/multipart/NioMultipartParserListener;)Ljava/lang/Runnable;
     140: invokevirtual #27                 // Method reactor/core/publisher/Flux.subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
     143: pop
     144: return

  public void accept(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #28                 // class reactor/core/publisher/FluxSink
       5: invokevirtual #29                 // Method accept:(Lreactor/core/publisher/FluxSink;)V
       8: return

  private static void lambda$accept$2(org.synchronoss.cloud.nio.multipart.NioMultipartParser, org.synchronoss.cloud.nio.multipart.NioMultipartParserListener);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method org/synchronoss/cloud/nio/multipart/NioMultipartParser.close:()V
       4: goto          17
       7: astore_2
       8: aload_1
       9: ldc           #32                 // String Exception thrown while closing the parser
      11: aload_2
      12: invokeinterface #33,  3           // InterfaceMethod org/synchronoss/cloud/nio/multipart/NioMultipartParserListener.onError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      17: return
    Exception table:
       from    to  target type
           0     4     7   Class java/io/IOException

  private static void lambda$accept$1(org.synchronoss.cloud.nio.multipart.NioMultipartParserListener, org.synchronoss.cloud.nio.multipart.NioMultipartParser, java.lang.Throwable);
    Code:
       0: aload_0
       1: ldc           #34                 // String Request body input error
       3: aload_2
       4: invokeinterface #33,  3           // InterfaceMethod org/synchronoss/cloud/nio/multipart/NioMultipartParserListener.onError:(Ljava/lang/String;Ljava/lang/Throwable;)V
       9: aload_1
      10: invokevirtual #30                 // Method org/synchronoss/cloud/nio/multipart/NioMultipartParser.close:()V
      13: goto          26
      16: astore_3
      17: aload_0
      18: ldc           #32                 // String Exception thrown while closing the parser
      20: aload_3
      21: invokeinterface #33,  3           // InterfaceMethod org/synchronoss/cloud/nio/multipart/NioMultipartParserListener.onError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      26: return
    Exception table:
       from    to  target type
           0    13    16   Class java/io/IOException

  private static void lambda$accept$0(org.synchronoss.cloud.nio.multipart.NioMultipartParser, org.synchronoss.cloud.nio.multipart.NioMultipartParserListener, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_2
       1: invokeinterface #35,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       6: newarray       byte
       8: astore_3
       9: aload_2
      10: aload_3
      11: invokeinterface #36,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.read:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      16: pop
      17: aload_0
      18: aload_3
      19: invokevirtual #37                 // Method org/synchronoss/cloud/nio/multipart/NioMultipartParser.write:([B)V
      22: aload_2
      23: invokestatic  #38                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      26: pop
      27: goto          60
      30: astore        4
      32: aload_1
      33: ldc           #39                 // String Exception thrown providing input to the parser
      35: aload         4
      37: invokeinterface #33,  3           // InterfaceMethod org/synchronoss/cloud/nio/multipart/NioMultipartParserListener.onError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      42: aload_2
      43: invokestatic  #38                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      46: pop
      47: goto          60
      50: astore        5
      52: aload_2
      53: invokestatic  #38                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      56: pop
      57: aload         5
      59: athrow
      60: return
    Exception table:
       from    to  target type
          17    22    30   Class java/io/IOException
          17    22    50   any
          30    42    50   any
          50    52    50   any
}
