Compiled from "SynchronossPartHttpMessageReader.java"
public class org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader implements org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part> {
  private final org.springframework.core.io.buffer.DataBufferFactory bufferFactory;

  public org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/springframework/core/io/buffer/DefaultDataBufferFactory
       8: dup
       9: invokespecial #3                  // Method org/springframework/core/io/buffer/DefaultDataBufferFactory."<init>":()V
      12: putfield      #4                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      15: return

  public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes();
    Code:
       0: getstatic     #5                  // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
       3: invokestatic  #6                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
       6: areturn

  public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: ldc           #7                  // class org/springframework/http/codec/multipart/Part
       2: aload_1
       3: ldc           #8                  // class java/lang/Object
       5: invokevirtual #9                  // Method org/springframework/core/ResolvableType.resolve:(Ljava/lang/Class;)Ljava/lang/Class;
       8: invokevirtual #10                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      11: ifeq          32
      14: aload_2
      15: ifnull        28
      18: getstatic     #5                  // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
      21: aload_2
      22: invokevirtual #11                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: new           #12                 // class org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader$SynchronossPartGenerator
       3: dup
       4: aload_2
       5: aload_0
       6: getfield      #4                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       9: invokespecial #13                 // Method org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader$SynchronossPartGenerator."<init>":(Lorg/springframework/http/ReactiveHttpInputMessage;Lorg/springframework/core/io/buffer/DataBufferFactory;)V
      12: invokestatic  #14                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      15: areturn

  public reactor.core.publisher.Mono<org.springframework.http.codec.multipart.Part> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: new           #15                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #16                 // String Can\'t read a multipart request body into a single Part.
       6: invokespecial #17                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: invokestatic  #18                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      12: areturn
}
