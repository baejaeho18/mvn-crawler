Compiled from "UndertowServerHttpResponse.java"
class org.springframework.http.server.reactive.UndertowServerHttpResponse extends org.springframework.http.server.reactive.AbstractListenerServerHttpResponse implements org.springframework.http.ZeroCopyHttpOutputMessage {
  private final io.undertow.server.HttpServerExchange exchange;

  private org.xnio.channels.StreamSinkChannel responseChannel;

  public org.springframework.http.server.reactive.UndertowServerHttpResponse(io.undertow.server.HttpServerExchange, org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #4                  // Method org/springframework/http/server/reactive/AbstractListenerServerHttpResponse."<init>":(Lorg/springframework/core/io/buffer/DataBufferFactory;)V
       5: aload_1
       6: ldc           #5                  // String HttpServerExchange must not be null
       8: invokestatic  #6                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      11: aload_0
      12: aload_1
      13: putfield      #7                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      16: return

  public <T> T getNativeResponse();
    Code:
       0: aload_0
       1: getfield      #7                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: areturn

  protected void applyStatusCode();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getStatusCodeValue:()Ljava/lang/Integer;
       4: astore_1
       5: aload_1
       6: ifnull        21
       9: aload_0
      10: getfield      #7                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      13: aload_1
      14: invokevirtual #9                  // Method java/lang/Integer.intValue:()I
      17: invokevirtual #10                 // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
      20: pop
      21: return

  protected void applyHeaders();
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
       4: aload_0
       5: invokedynamic #12,  0             // InvokeDynamic #0:accept:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Ljava/util/function/BiConsumer;
      10: invokevirtual #13                 // Method org/springframework/http/HttpHeaders.forEach:(Ljava/util/function/BiConsumer;)V
      13: return

  protected void applyCookies();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
       4: invokeinterface #15,  1           // InterfaceMethod org/springframework/util/MultiValueMap.keySet:()Ljava/util/Set;
       9: invokeinterface #16,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          209
      24: aload_1
      25: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #19                 // class java/lang/String
      33: astore_2
      34: aload_0
      35: invokevirtual #14                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
      38: aload_2
      39: invokeinterface #20,  2           // InterfaceMethod org/springframework/util/MultiValueMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      44: checkcast     #21                 // class java/util/List
      47: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      52: astore_3
      53: aload_3
      54: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          206
      62: aload_3
      63: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      68: checkcast     #23                 // class org/springframework/http/ResponseCookie
      71: astore        4
      73: new           #24                 // class io/undertow/server/handlers/CookieImpl
      76: dup
      77: aload_2
      78: aload         4
      80: invokevirtual #25                 // Method org/springframework/http/ResponseCookie.getValue:()Ljava/lang/String;
      83: invokespecial #26                 // Method io/undertow/server/handlers/CookieImpl."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      86: astore        5
      88: aload         4
      90: invokevirtual #27                 // Method org/springframework/http/ResponseCookie.getMaxAge:()Ljava/time/Duration;
      93: invokevirtual #28                 // Method java/time/Duration.isNegative:()Z
      96: ifne          119
      99: aload         5
     101: aload         4
     103: invokevirtual #27                 // Method org/springframework/http/ResponseCookie.getMaxAge:()Ljava/time/Duration;
     106: invokevirtual #29                 // Method java/time/Duration.getSeconds:()J
     109: l2i
     110: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     113: invokeinterface #31,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setMaxAge:(Ljava/lang/Integer;)Lio/undertow/server/handlers/Cookie;
     118: pop
     119: aload         4
     121: invokevirtual #32                 // Method org/springframework/http/ResponseCookie.getDomain:()Ljava/lang/String;
     124: ifnull        140
     127: aload         5
     129: aload         4
     131: invokevirtual #32                 // Method org/springframework/http/ResponseCookie.getDomain:()Ljava/lang/String;
     134: invokeinterface #33,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setDomain:(Ljava/lang/String;)Lio/undertow/server/handlers/Cookie;
     139: pop
     140: aload         4
     142: invokevirtual #34                 // Method org/springframework/http/ResponseCookie.getPath:()Ljava/lang/String;
     145: ifnull        161
     148: aload         5
     150: aload         4
     152: invokevirtual #34                 // Method org/springframework/http/ResponseCookie.getPath:()Ljava/lang/String;
     155: invokeinterface #35,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setPath:(Ljava/lang/String;)Lio/undertow/server/handlers/Cookie;
     160: pop
     161: aload         5
     163: aload         4
     165: invokevirtual #36                 // Method org/springframework/http/ResponseCookie.isSecure:()Z
     168: invokeinterface #37,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setSecure:(Z)Lio/undertow/server/handlers/Cookie;
     173: pop
     174: aload         5
     176: aload         4
     178: invokevirtual #38                 // Method org/springframework/http/ResponseCookie.isHttpOnly:()Z
     181: invokeinterface #39,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setHttpOnly:(Z)Lio/undertow/server/handlers/Cookie;
     186: pop
     187: aload_0
     188: getfield      #7                  // Field exchange:Lio/undertow/server/HttpServerExchange;
     191: invokevirtual #40                 // Method io/undertow/server/HttpServerExchange.getResponseCookies:()Ljava/util/Map;
     194: aload_2
     195: aload         5
     197: invokeinterface #41,  3           // InterfaceMethod java/util/Map.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     202: pop
     203: goto          53
     206: goto          15
     209: return

  public reactor.core.publisher.Mono<java.lang.Void> writeWith(java.io.File, long, long);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: lload_2
       4: lload         4
       6: invokedynamic #42,  0             // InvokeDynamic #1:get:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;Ljava/io/File;JJ)Ljava/util/function/Supplier;
      11: invokevirtual #43                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      14: areturn

  protected org.reactivestreams.Processor<? super org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, java.lang.Void> createBodyFlushProcessor();
    Code:
       0: new           #44                 // class org/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyFlushProcessor
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #45                 // Method org/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyFlushProcessor."<init>":(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;Lorg/springframework/http/server/reactive/UndertowServerHttpResponse$1;)V
       9: areturn

  private org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor createBodyProcessor();
    Code:
       0: aload_0
       1: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #7                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      12: invokevirtual #46                 // Method io/undertow/server/HttpServerExchange.getResponseChannel:()Lorg/xnio/channels/StreamSinkChannel;
      15: putfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
      18: new           #47                 // class org/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor
      21: dup
      22: aload_0
      23: aload_0
      24: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
      27: invokespecial #48                 // Method org/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor."<init>":(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;Lorg/xnio/channels/StreamSinkChannel;)V
      30: areturn

  private boolean isWritePossible();
    Code:
       0: aload_0
       1: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #7                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      12: invokevirtual #46                 // Method io/undertow/server/HttpServerExchange.getResponseChannel:()Lorg/xnio/channels/StreamSinkChannel;
      15: putfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
      18: aload_0
      19: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
      22: invokeinterface #49,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.isWriteResumed:()Z
      27: ifne          39
      30: aload_0
      31: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
      34: invokeinterface #50,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      39: aload_0
      40: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
      43: invokeinterface #49,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.isWriteResumed:()Z
      48: ireturn

  private reactor.core.publisher.Mono lambda$writeWith$2(java.io.File, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: lload         4
       5: invokedynamic #51,  0             // InvokeDynamic #2:get:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;Ljava/io/File;JJ)Ljava/util/function/Supplier;
      10: invokestatic  #52                 // Method reactor/core/publisher/Mono.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      13: areturn

  private reactor.core.publisher.Mono lambda$null$1(java.io.File, long, long);
    Code:
       0: aload_1
       1: invokevirtual #53                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
       4: iconst_1
       5: anewarray     #54                 // class java/nio/file/OpenOption
       8: dup
       9: iconst_0
      10: getstatic     #55                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;
      13: aastore
      14: invokestatic  #56                 // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
      17: astore        6
      19: aconst_null
      20: astore        7
      22: aload_0
      23: getfield      #7                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      26: invokevirtual #46                 // Method io/undertow/server/HttpServerExchange.getResponseChannel:()Lorg/xnio/channels/StreamSinkChannel;
      29: astore        8
      31: aload         8
      33: aload         6
      35: lload_2
      36: lload         4
      38: invokestatic  #57                 // Method org/xnio/channels/Channels.transferBlocking:(Lorg/xnio/channels/StreamSinkChannel;Ljava/nio/channels/FileChannel;JJ)V
      41: invokestatic  #58                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      44: astore        9
      46: aload         6
      48: ifnull        81
      51: aload         7
      53: ifnull        76
      56: aload         6
      58: invokevirtual #59                 // Method java/nio/channels/FileChannel.close:()V
      61: goto          81
      64: astore        10
      66: aload         7
      68: aload         10
      70: invokevirtual #61                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      73: goto          81
      76: aload         6
      78: invokevirtual #59                 // Method java/nio/channels/FileChannel.close:()V
      81: aload         9
      83: areturn
      84: astore        8
      86: aload         8
      88: astore        7
      90: aload         8
      92: athrow
      93: astore        11
      95: aload         6
      97: ifnull        130
     100: aload         7
     102: ifnull        125
     105: aload         6
     107: invokevirtual #59                 // Method java/nio/channels/FileChannel.close:()V
     110: goto          130
     113: astore        12
     115: aload         7
     117: aload         12
     119: invokevirtual #61                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     122: goto          130
     125: aload         6
     127: invokevirtual #59                 // Method java/nio/channels/FileChannel.close:()V
     130: aload         11
     132: athrow
     133: astore        6
     135: aload         6
     137: invokestatic  #63                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
     140: areturn
    Exception table:
       from    to  target type
          56    61    64   Class java/lang/Throwable
          22    46    84   Class java/lang/Throwable
          22    46    93   any
         105   110   113   Class java/lang/Throwable
          84    95    93   any
           0    81   133   Class java/io/IOException
          84   133   133   Class java/io/IOException

  private void lambda$applyHeaders$0(java.lang.String, java.util.List);
    Code:
       0: aload_0
       1: getfield      #7                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: invokevirtual #64                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
       7: aload_1
       8: invokestatic  #65                 // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
      11: aload_2
      12: invokevirtual #66                 // Method io/undertow/util/HeaderMap.addAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      15: pop
      16: return

  static boolean access$100(org.springframework.http.server.reactive.UndertowServerHttpResponse);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method isWritePossible:()Z
       4: ireturn

  static org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor access$200(org.springframework.http.server.reactive.UndertowServerHttpResponse);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method createBodyProcessor:()Lorg/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor;
       4: areturn

  static org.xnio.channels.StreamSinkChannel access$300(org.springframework.http.server.reactive.UndertowServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
       4: areturn
}
