Compiled from "AlternateTypeProvider.java"
public class springfox.documentation.spi.schema.AlternateTypeProvider {
  private java.util.List<springfox.documentation.schema.AlternateTypeRule> rules;

  public springfox.documentation.spi.schema.AlternateTypeProvider(java.util.List<springfox.documentation.schema.AlternateTypeRule>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // Method com/google/common/collect/Lists.newArrayList:()Ljava/util/ArrayList;
       8: putfield      #3                  // Field rules:Ljava/util/List;
      11: aload_0
      12: getfield      #3                  // Field rules:Ljava/util/List;
      15: aload_1
      16: invokeinterface #4,  2            // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      21: pop
      22: return

  public com.fasterxml.classmate.ResolvedType alternateFor(com.fasterxml.classmate.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #3                  // Field rules:Ljava/util/List;
       4: invokestatic  #5                  // Method com/google/common/collect/FluentIterable.from:(Ljava/lang/Iterable;)Lcom/google/common/collect/FluentIterable;
       7: aload_0
       8: aload_1
       9: invokespecial #6                  // Method thatAppliesTo:(Lcom/fasterxml/classmate/ResolvedType;)Lcom/google/common/base/Predicate;
      12: invokevirtual #7                  // Method com/google/common/collect/FluentIterable.firstMatch:(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Optional;
      15: astore_2
      16: aload_2
      17: invokevirtual #8                  // Method com/google/common/base/Optional.isPresent:()Z
      20: ifeq          35
      23: aload_2
      24: invokevirtual #9                  // Method com/google/common/base/Optional.get:()Ljava/lang/Object;
      27: checkcast     #10                 // class springfox/documentation/schema/AlternateTypeRule
      30: aload_1
      31: invokevirtual #11                 // Method springfox/documentation/schema/AlternateTypeRule.alternateFor:(Lcom/fasterxml/classmate/ResolvedType;)Lcom/fasterxml/classmate/ResolvedType;
      34: areturn
      35: aload_1
      36: areturn

  public void addRule(springfox.documentation.schema.AlternateTypeRule);
    Code:
       0: aload_0
       1: getfield      #3                  // Field rules:Ljava/util/List;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  private com.google.common.base.Predicate<springfox.documentation.schema.AlternateTypeRule> thatAppliesTo(com.fasterxml.classmate.ResolvedType);
    Code:
       0: new           #13                 // class springfox/documentation/spi/schema/AlternateTypeProvider$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #14                 // Method springfox/documentation/spi/schema/AlternateTypeProvider$1."<init>":(Lspringfox/documentation/spi/schema/AlternateTypeProvider;Lcom/fasterxml/classmate/ResolvedType;)V
       9: areturn
}
