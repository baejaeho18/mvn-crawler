Compiled from "AlternateTypeProvider.java"
class springfox.documentation.spi.schema.AlternateTypeProvider$1 implements com.google.common.base.Predicate<springfox.documentation.schema.AlternateTypeRule> {
  final com.fasterxml.classmate.ResolvedType val$type;

  final springfox.documentation.spi.schema.AlternateTypeProvider this$0;

  springfox.documentation.spi.schema.AlternateTypeProvider$1(springfox.documentation.spi.schema.AlternateTypeProvider, com.fasterxml.classmate.ResolvedType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lspringfox/documentation/spi/schema/AlternateTypeProvider;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$type:Lcom/fasterxml/classmate/ResolvedType;
      10: aload_0
      11: invokespecial #3                  // Method java/lang/Object."<init>":()V
      14: return

  public boolean apply(springfox.documentation.schema.AlternateTypeRule);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field val$type:Lcom/fasterxml/classmate/ResolvedType;
       5: invokevirtual #4                  // Method springfox/documentation/schema/AlternateTypeRule.appliesTo:(Lcom/fasterxml/classmate/ResolvedType;)Z
       8: ireturn

  public boolean apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #5                  // class springfox/documentation/schema/AlternateTypeRule
       5: invokevirtual #6                  // Method apply:(Lspringfox/documentation/schema/AlternateTypeRule;)Z
       8: ireturn
}
