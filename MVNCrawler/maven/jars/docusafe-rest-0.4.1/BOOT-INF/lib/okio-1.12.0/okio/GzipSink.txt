Compiled from "GzipSink.java"
public final class okio.GzipSink implements okio.Sink {
  private final okio.BufferedSink sink;

  private final java.util.zip.Deflater deflater;

  private final okio.DeflaterSink deflaterSink;

  private boolean closed;

  private final java.util.zip.CRC32 crc;

  public okio.GzipSink(okio.Sink);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/zip/CRC32
       8: dup
       9: invokespecial #4                  // Method java/util/zip/CRC32."<init>":()V
      12: putfield      #5                  // Field crc:Ljava/util/zip/CRC32;
      15: aload_1
      16: ifnonnull     29
      19: new           #6                  // class java/lang/IllegalArgumentException
      22: dup
      23: ldc           #7                  // String sink == null
      25: invokespecial #8                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: new           #1                  // class java/util/zip/Deflater
      33: dup
      34: iconst_m1
      35: iconst_1
      36: invokespecial #9                  // Method java/util/zip/Deflater."<init>":(IZ)V
      39: putfield      #10                 // Field deflater:Ljava/util/zip/Deflater;
      42: aload_0
      43: aload_1
      44: invokestatic  #11                 // Method okio/Okio.buffer:(Lokio/Sink;)Lokio/BufferedSink;
      47: putfield      #12                 // Field sink:Lokio/BufferedSink;
      50: aload_0
      51: new           #13                 // class okio/DeflaterSink
      54: dup
      55: aload_0
      56: getfield      #12                 // Field sink:Lokio/BufferedSink;
      59: aload_0
      60: getfield      #10                 // Field deflater:Ljava/util/zip/Deflater;
      63: invokespecial #14                 // Method okio/DeflaterSink."<init>":(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V
      66: putfield      #15                 // Field deflaterSink:Lokio/DeflaterSink;
      69: aload_0
      70: invokespecial #16                 // Method writeHeader:()V
      73: return

  public void write(okio.Buffer, long) throws java.io.IOException;
    Code:
       0: lload_2
       1: lconst_0
       2: lcmp
       3: ifge          33
       6: new           #6                  // class java/lang/IllegalArgumentException
       9: dup
      10: new           #17                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #19                 // String byteCount < 0:
      19: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: lload_2
      23: invokevirtual #21                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      26: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #8                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: lload_2
      34: lconst_0
      35: lcmp
      36: ifne          40
      39: return
      40: aload_0
      41: aload_1
      42: lload_2
      43: invokespecial #23                 // Method updateCrc:(Lokio/Buffer;J)V
      46: aload_0
      47: getfield      #15                 // Field deflaterSink:Lokio/DeflaterSink;
      50: aload_1
      51: lload_2
      52: invokevirtual #24                 // Method okio/DeflaterSink.write:(Lokio/Buffer;J)V
      55: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field deflaterSink:Lokio/DeflaterSink;
       4: invokevirtual #25                 // Method okio/DeflaterSink.flush:()V
       7: return

  public okio.Timeout timeout();
    Code:
       0: aload_0
       1: getfield      #12                 // Field sink:Lokio/BufferedSink;
       4: invokeinterface #26,  1           // InterfaceMethod okio/BufferedSink.timeout:()Lokio/Timeout;
       9: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field closed:Z
       4: ifeq          8
       7: return
       8: aconst_null
       9: astore_1
      10: aload_0
      11: getfield      #15                 // Field deflaterSink:Lokio/DeflaterSink;
      14: invokevirtual #28                 // Method okio/DeflaterSink.finishDeflate:()V
      17: aload_0
      18: invokespecial #29                 // Method writeFooter:()V
      21: goto          27
      24: astore_2
      25: aload_2
      26: astore_1
      27: aload_0
      28: getfield      #10                 // Field deflater:Ljava/util/zip/Deflater;
      31: invokevirtual #31                 // Method java/util/zip/Deflater.end:()V
      34: goto          44
      37: astore_2
      38: aload_1
      39: ifnonnull     44
      42: aload_2
      43: astore_1
      44: aload_0
      45: getfield      #12                 // Field sink:Lokio/BufferedSink;
      48: invokeinterface #32,  1           // InterfaceMethod okio/BufferedSink.close:()V
      53: goto          63
      56: astore_2
      57: aload_1
      58: ifnonnull     63
      61: aload_2
      62: astore_1
      63: aload_0
      64: iconst_1
      65: putfield      #27                 // Field closed:Z
      68: aload_1
      69: ifnull        76
      72: aload_1
      73: invokestatic  #33                 // Method okio/Util.sneakyRethrow:(Ljava/lang/Throwable;)V
      76: return
    Exception table:
       from    to  target type
          10    21    24   Class java/lang/Throwable
          27    34    37   Class java/lang/Throwable
          44    53    56   Class java/lang/Throwable

  public java.util.zip.Deflater deflater();
    Code:
       0: aload_0
       1: getfield      #10                 // Field deflater:Ljava/util/zip/Deflater;
       4: areturn

  private void writeHeader();
    Code:
       0: aload_0
       1: getfield      #12                 // Field sink:Lokio/BufferedSink;
       4: invokeinterface #34,  1           // InterfaceMethod okio/BufferedSink.buffer:()Lokio/Buffer;
       9: astore_1
      10: aload_1
      11: sipush        8075
      14: invokevirtual #35                 // Method okio/Buffer.writeShort:(I)Lokio/Buffer;
      17: pop
      18: aload_1
      19: bipush        8
      21: invokevirtual #36                 // Method okio/Buffer.writeByte:(I)Lokio/Buffer;
      24: pop
      25: aload_1
      26: iconst_0
      27: invokevirtual #36                 // Method okio/Buffer.writeByte:(I)Lokio/Buffer;
      30: pop
      31: aload_1
      32: iconst_0
      33: invokevirtual #37                 // Method okio/Buffer.writeInt:(I)Lokio/Buffer;
      36: pop
      37: aload_1
      38: iconst_0
      39: invokevirtual #36                 // Method okio/Buffer.writeByte:(I)Lokio/Buffer;
      42: pop
      43: aload_1
      44: iconst_0
      45: invokevirtual #36                 // Method okio/Buffer.writeByte:(I)Lokio/Buffer;
      48: pop
      49: return

  private void writeFooter() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field sink:Lokio/BufferedSink;
       4: aload_0
       5: getfield      #5                  // Field crc:Ljava/util/zip/CRC32;
       8: invokevirtual #38                 // Method java/util/zip/CRC32.getValue:()J
      11: l2i
      12: invokeinterface #39,  2           // InterfaceMethod okio/BufferedSink.writeIntLe:(I)Lokio/BufferedSink;
      17: pop
      18: aload_0
      19: getfield      #12                 // Field sink:Lokio/BufferedSink;
      22: aload_0
      23: getfield      #10                 // Field deflater:Ljava/util/zip/Deflater;
      26: invokevirtual #40                 // Method java/util/zip/Deflater.getBytesRead:()J
      29: l2i
      30: invokeinterface #39,  2           // InterfaceMethod okio/BufferedSink.writeIntLe:(I)Lokio/BufferedSink;
      35: pop
      36: return

  private void updateCrc(okio.Buffer, long);
    Code:
       0: aload_1
       1: getfield      #41                 // Field okio/Buffer.head:Lokio/Segment;
       4: astore        4
       6: lload_2
       7: lconst_0
       8: lcmp
       9: ifle          66
      12: lload_2
      13: aload         4
      15: getfield      #42                 // Field okio/Segment.limit:I
      18: aload         4
      20: getfield      #43                 // Field okio/Segment.pos:I
      23: isub
      24: i2l
      25: invokestatic  #44                 // Method java/lang/Math.min:(JJ)J
      28: l2i
      29: istore        5
      31: aload_0
      32: getfield      #5                  // Field crc:Ljava/util/zip/CRC32;
      35: aload         4
      37: getfield      #45                 // Field okio/Segment.data:[B
      40: aload         4
      42: getfield      #43                 // Field okio/Segment.pos:I
      45: iload         5
      47: invokevirtual #46                 // Method java/util/zip/CRC32.update:([BII)V
      50: lload_2
      51: iload         5
      53: i2l
      54: lsub
      55: lstore_2
      56: aload         4
      58: getfield      #47                 // Field okio/Segment.next:Lokio/Segment;
      61: astore        4
      63: goto          6
      66: return
}
