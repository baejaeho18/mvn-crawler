Compiled from "Segment.java"
final class okio.Segment {
  static final int SIZE;

  static final int SHARE_MINIMUM;

  final byte[] data;

  int pos;

  int limit;

  boolean shared;

  boolean owner;

  okio.Segment next;

  okio.Segment prev;

  okio.Segment();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: sipush        8192
       8: newarray       byte
      10: putfield      #3                  // Field data:[B
      13: aload_0
      14: iconst_1
      15: putfield      #4                  // Field owner:Z
      18: aload_0
      19: iconst_0
      20: putfield      #5                  // Field shared:Z
      23: return

  okio.Segment(okio.Segment);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #3                  // Field data:[B
       5: aload_1
       6: getfield      #6                  // Field pos:I
       9: aload_1
      10: getfield      #7                  // Field limit:I
      13: invokespecial #8                  // Method "<init>":([BII)V
      16: aload_1
      17: iconst_1
      18: putfield      #5                  // Field shared:Z
      21: return

  okio.Segment(byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field data:[B
       9: aload_0
      10: iload_2
      11: putfield      #6                  // Field pos:I
      14: aload_0
      15: iload_3
      16: putfield      #7                  // Field limit:I
      19: aload_0
      20: iconst_0
      21: putfield      #4                  // Field owner:Z
      24: aload_0
      25: iconst_1
      26: putfield      #5                  // Field shared:Z
      29: return

  public okio.Segment pop();
    Code:
       0: aload_0
       1: getfield      #9                  // Field next:Lokio/Segment;
       4: aload_0
       5: if_acmpeq     15
       8: aload_0
       9: getfield      #9                  // Field next:Lokio/Segment;
      12: goto          16
      15: aconst_null
      16: astore_1
      17: aload_0
      18: getfield      #10                 // Field prev:Lokio/Segment;
      21: aload_0
      22: getfield      #9                  // Field next:Lokio/Segment;
      25: putfield      #9                  // Field next:Lokio/Segment;
      28: aload_0
      29: getfield      #9                  // Field next:Lokio/Segment;
      32: aload_0
      33: getfield      #10                 // Field prev:Lokio/Segment;
      36: putfield      #10                 // Field prev:Lokio/Segment;
      39: aload_0
      40: aconst_null
      41: putfield      #9                  // Field next:Lokio/Segment;
      44: aload_0
      45: aconst_null
      46: putfield      #10                 // Field prev:Lokio/Segment;
      49: aload_1
      50: areturn

  public okio.Segment push(okio.Segment);
    Code:
       0: aload_1
       1: aload_0
       2: putfield      #10                 // Field prev:Lokio/Segment;
       5: aload_1
       6: aload_0
       7: getfield      #9                  // Field next:Lokio/Segment;
      10: putfield      #9                  // Field next:Lokio/Segment;
      13: aload_0
      14: getfield      #9                  // Field next:Lokio/Segment;
      17: aload_1
      18: putfield      #10                 // Field prev:Lokio/Segment;
      21: aload_0
      22: aload_1
      23: putfield      #9                  // Field next:Lokio/Segment;
      26: aload_1
      27: areturn

  public okio.Segment split(int);
    Code:
       0: iload_1
       1: ifle          17
       4: iload_1
       5: aload_0
       6: getfield      #7                  // Field limit:I
       9: aload_0
      10: getfield      #6                  // Field pos:I
      13: isub
      14: if_icmple     25
      17: new           #11                 // class java/lang/IllegalArgumentException
      20: dup
      21: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":()V
      24: athrow
      25: iload_1
      26: sipush        1024
      29: if_icmplt     44
      32: new           #2                  // class okio/Segment
      35: dup
      36: aload_0
      37: invokespecial #13                 // Method "<init>":(Lokio/Segment;)V
      40: astore_2
      41: goto          65
      44: invokestatic  #14                 // Method okio/SegmentPool.take:()Lokio/Segment;
      47: astore_2
      48: aload_0
      49: getfield      #3                  // Field data:[B
      52: aload_0
      53: getfield      #6                  // Field pos:I
      56: aload_2
      57: getfield      #3                  // Field data:[B
      60: iconst_0
      61: iload_1
      62: invokestatic  #15                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      65: aload_2
      66: aload_2
      67: getfield      #6                  // Field pos:I
      70: iload_1
      71: iadd
      72: putfield      #7                  // Field limit:I
      75: aload_0
      76: dup
      77: getfield      #6                  // Field pos:I
      80: iload_1
      81: iadd
      82: putfield      #6                  // Field pos:I
      85: aload_0
      86: getfield      #10                 // Field prev:Lokio/Segment;
      89: aload_2
      90: invokevirtual #16                 // Method push:(Lokio/Segment;)Lokio/Segment;
      93: pop
      94: aload_2
      95: areturn

  public void compact();
    Code:
       0: aload_0
       1: getfield      #10                 // Field prev:Lokio/Segment;
       4: aload_0
       5: if_acmpne     16
       8: new           #17                 // class java/lang/IllegalStateException
      11: dup
      12: invokespecial #18                 // Method java/lang/IllegalStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #10                 // Field prev:Lokio/Segment;
      20: getfield      #4                  // Field owner:Z
      23: ifne          27
      26: return
      27: aload_0
      28: getfield      #7                  // Field limit:I
      31: aload_0
      32: getfield      #6                  // Field pos:I
      35: isub
      36: istore_1
      37: sipush        8192
      40: aload_0
      41: getfield      #10                 // Field prev:Lokio/Segment;
      44: getfield      #7                  // Field limit:I
      47: isub
      48: aload_0
      49: getfield      #10                 // Field prev:Lokio/Segment;
      52: getfield      #5                  // Field shared:Z
      55: ifeq          62
      58: iconst_0
      59: goto          69
      62: aload_0
      63: getfield      #10                 // Field prev:Lokio/Segment;
      66: getfield      #6                  // Field pos:I
      69: iadd
      70: istore_2
      71: iload_1
      72: iload_2
      73: if_icmple     77
      76: return
      77: aload_0
      78: aload_0
      79: getfield      #10                 // Field prev:Lokio/Segment;
      82: iload_1
      83: invokevirtual #19                 // Method writeTo:(Lokio/Segment;I)V
      86: aload_0
      87: invokevirtual #20                 // Method pop:()Lokio/Segment;
      90: pop
      91: aload_0
      92: invokestatic  #21                 // Method okio/SegmentPool.recycle:(Lokio/Segment;)V
      95: return

  public void writeTo(okio.Segment, int);
    Code:
       0: aload_1
       1: getfield      #4                  // Field owner:Z
       4: ifne          15
       7: new           #11                 // class java/lang/IllegalArgumentException
      10: dup
      11: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":()V
      14: athrow
      15: aload_1
      16: getfield      #7                  // Field limit:I
      19: iload_2
      20: iadd
      21: sipush        8192
      24: if_icmple     110
      27: aload_1
      28: getfield      #5                  // Field shared:Z
      31: ifeq          42
      34: new           #11                 // class java/lang/IllegalArgumentException
      37: dup
      38: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":()V
      41: athrow
      42: aload_1
      43: getfield      #7                  // Field limit:I
      46: iload_2
      47: iadd
      48: aload_1
      49: getfield      #6                  // Field pos:I
      52: isub
      53: sipush        8192
      56: if_icmple     67
      59: new           #11                 // class java/lang/IllegalArgumentException
      62: dup
      63: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":()V
      66: athrow
      67: aload_1
      68: getfield      #3                  // Field data:[B
      71: aload_1
      72: getfield      #6                  // Field pos:I
      75: aload_1
      76: getfield      #3                  // Field data:[B
      79: iconst_0
      80: aload_1
      81: getfield      #7                  // Field limit:I
      84: aload_1
      85: getfield      #6                  // Field pos:I
      88: isub
      89: invokestatic  #15                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      92: aload_1
      93: dup
      94: getfield      #7                  // Field limit:I
      97: aload_1
      98: getfield      #6                  // Field pos:I
     101: isub
     102: putfield      #7                  // Field limit:I
     105: aload_1
     106: iconst_0
     107: putfield      #6                  // Field pos:I
     110: aload_0
     111: getfield      #3                  // Field data:[B
     114: aload_0
     115: getfield      #6                  // Field pos:I
     118: aload_1
     119: getfield      #3                  // Field data:[B
     122: aload_1
     123: getfield      #7                  // Field limit:I
     126: iload_2
     127: invokestatic  #15                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     130: aload_1
     131: dup
     132: getfield      #7                  // Field limit:I
     135: iload_2
     136: iadd
     137: putfield      #7                  // Field limit:I
     140: aload_0
     141: dup
     142: getfield      #6                  // Field pos:I
     145: iload_2
     146: iadd
     147: putfield      #6                  // Field pos:I
     150: return
}
