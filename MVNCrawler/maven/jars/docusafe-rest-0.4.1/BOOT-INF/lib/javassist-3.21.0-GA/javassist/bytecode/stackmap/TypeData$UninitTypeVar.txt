Compiled from "TypeData.java"
public class javassist.bytecode.stackmap.TypeData$UninitTypeVar extends javassist.bytecode.stackmap.TypeData$AbsTypeVar {
  protected javassist.bytecode.stackmap.TypeData type;

  public javassist.bytecode.stackmap.TypeData$UninitTypeVar(javassist.bytecode.stackmap.TypeData$UninitData);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method javassist/bytecode/stackmap/TypeData$AbsTypeVar."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       9: return

  public int getTypeTag();
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: invokevirtual #3                  // Method javassist/bytecode/stackmap/TypeData.getTypeTag:()I
       7: ireturn

  public int getTypeData(javassist.bytecode.ConstPool);
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: aload_1
       5: invokevirtual #4                  // Method javassist/bytecode/stackmap/TypeData.getTypeData:(Ljavassist/bytecode/ConstPool;)I
       8: ireturn

  public javassist.bytecode.stackmap.TypeData$BasicType isBasicType();
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: invokevirtual #5                  // Method javassist/bytecode/stackmap/TypeData.isBasicType:()Ljavassist/bytecode/stackmap/TypeData$BasicType;
       7: areturn

  public boolean is2WordType();
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: invokevirtual #6                  // Method javassist/bytecode/stackmap/TypeData.is2WordType:()Z
       7: ireturn

  public boolean isUninit();
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: invokevirtual #7                  // Method javassist/bytecode/stackmap/TypeData.isUninit:()Z
       7: ireturn

  public boolean eq(javassist.bytecode.stackmap.TypeData);
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: aload_1
       5: invokevirtual #8                  // Method javassist/bytecode/stackmap/TypeData.eq:(Ljavassist/bytecode/stackmap/TypeData;)Z
       8: ireturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: invokevirtual #9                  // Method javassist/bytecode/stackmap/TypeData.getName:()Ljava/lang/String;
       7: areturn

  protected javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int);
    Code:
       0: aconst_null
       1: areturn

  public javassist.bytecode.stackmap.TypeData join();
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: invokevirtual #10                 // Method javassist/bytecode/stackmap/TypeData.join:()Ljavassist/bytecode/stackmap/TypeData;
       7: areturn

  public void setType(java.lang.String, javassist.ClassPool) throws javassist.bytecode.BadBytecode;
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: aload_1
       5: aload_2
       6: invokevirtual #11                 // Method javassist/bytecode/stackmap/TypeData.setType:(Ljava/lang/String;Ljavassist/ClassPool;)V
       9: return

  public void merge(javassist.bytecode.stackmap.TypeData);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       5: invokevirtual #8                  // Method javassist/bytecode/stackmap/TypeData.eq:(Ljavassist/bytecode/stackmap/TypeData;)Z
       8: ifne          18
      11: aload_0
      12: getstatic     #12                 // Field javassist/bytecode/stackmap/TypeTag.TOP:Ljavassist/bytecode/stackmap/TypeData$BasicType;
      15: putfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
      18: return

  public void constructorCalled(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: iload_1
       5: invokevirtual #13                 // Method javassist/bytecode/stackmap/TypeData.constructorCalled:(I)V
       8: return

  public int offset();
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: instanceof    #14                 // class javassist/bytecode/stackmap/TypeData$UninitData
       7: ifeq          21
      10: aload_0
      11: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
      14: checkcast     #14                 // class javassist/bytecode/stackmap/TypeData$UninitData
      17: getfield      #15                 // Field javassist/bytecode/stackmap/TypeData$UninitData.offset:I
      20: ireturn
      21: new           #16                 // class java/lang/RuntimeException
      24: dup
      25: ldc           #17                 // String not available
      27: invokespecial #18                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      30: athrow

  public javassist.bytecode.stackmap.TypeData getArrayType(int) throws javassist.NotFoundException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:Ljavassist/bytecode/stackmap/TypeData;
       4: iload_1
       5: invokevirtual #19                 // Method javassist/bytecode/stackmap/TypeData.getArrayType:(I)Ljavassist/bytecode/stackmap/TypeData;
       8: areturn

  java.lang.String toString2(java.util.HashSet);
    Code:
       0: ldc           #20                 // String
       2: areturn
}
