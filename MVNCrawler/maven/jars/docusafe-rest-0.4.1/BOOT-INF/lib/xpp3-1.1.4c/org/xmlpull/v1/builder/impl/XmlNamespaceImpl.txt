Compiled from "XmlNamespaceImpl.java"
public class org.xmlpull.v1.builder.impl.XmlNamespaceImpl implements org.xmlpull.v1.builder.XmlNamespace {
  private java.lang.String namespaceName;

  private java.lang.String prefix;

  org.xmlpull.v1.builder.impl.XmlNamespaceImpl(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #2                  // class org/xmlpull/v1/builder/XmlBuilderException
      11: dup
      12: ldc           #3                  // String namespace name can not be null
      14: invokespecial #4                  // Method org/xmlpull/v1/builder/XmlBuilderException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #5                  // Field namespaceName:Ljava/lang/String;
      23: return

  org.xmlpull.v1.builder.impl.XmlNamespaceImpl(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #6                  // Field prefix:Ljava/lang/String;
       9: aload_2
      10: ifnonnull     23
      13: new           #2                  // class org/xmlpull/v1/builder/XmlBuilderException
      16: dup
      17: ldc           #3                  // String namespace name can not be null
      19: invokespecial #4                  // Method org/xmlpull/v1/builder/XmlBuilderException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: aload_1
      24: ifnull        78
      27: aload_1
      28: bipush        58
      30: invokevirtual #7                  // Method java/lang/String.indexOf:(I)I
      33: iconst_m1
      34: if_icmpeq     78
      37: new           #2                  // class org/xmlpull/v1/builder/XmlBuilderException
      40: dup
      41: new           #8                  // class java/lang/StringBuffer
      44: dup
      45: invokespecial #9                  // Method java/lang/StringBuffer."<init>":()V
      48: ldc           #10                 // String prefix \'
      50: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      53: aload_1
      54: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      57: ldc           #12                 // String \' for namespace \'
      59: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      62: aload_2
      63: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      66: ldc           #13                 // String \' can not contain colon (:)
      68: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      71: invokevirtual #14                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      74: invokespecial #4                  // Method org/xmlpull/v1/builder/XmlBuilderException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: aload_0
      79: aload_2
      80: putfield      #5                  // Field namespaceName:Ljava/lang/String;
      83: return

  public java.lang.String getPrefix();
    Code:
       0: aload_0
       1: getfield      #6                  // Field prefix:Ljava/lang/String;
       4: areturn

  public java.lang.String getNamespaceName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field namespaceName:Ljava/lang/String;
       4: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: instanceof    #15                 // class org/xmlpull/v1/builder/XmlNamespace
      17: ifne          22
      20: iconst_0
      21: ireturn
      22: aload_1
      23: checkcast     #15                 // class org/xmlpull/v1/builder/XmlNamespace
      26: astore_2
      27: aload_0
      28: invokevirtual #16                 // Method getNamespaceName:()Ljava/lang/String;
      31: aload_2
      32: invokeinterface #17,  1           // InterfaceMethod org/xmlpull/v1/builder/XmlNamespace.getNamespaceName:()Ljava/lang/String;
      37: invokevirtual #18                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      40: ireturn

  public java.lang.String toString();
    Code:
       0: new           #8                  // class java/lang/StringBuffer
       3: dup
       4: invokespecial #9                  // Method java/lang/StringBuffer."<init>":()V
       7: ldc           #19                 // String {prefix=\'
       9: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      12: aload_0
      13: getfield      #6                  // Field prefix:Ljava/lang/String;
      16: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      19: ldc           #20                 // String \',namespaceName=\'
      21: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      24: aload_0
      25: getfield      #5                  // Field namespaceName:Ljava/lang/String;
      28: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      31: ldc           #21                 // String \'}
      33: invokevirtual #11                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      36: invokevirtual #14                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      39: areturn
}
