Compiled from "Http2Codec.java"
public final class okhttp3.internal.http2.Http2Codec implements okhttp3.internal.http.HttpCodec {
  private static final okio.ByteString CONNECTION;

  private static final okio.ByteString HOST;

  private static final okio.ByteString KEEP_ALIVE;

  private static final okio.ByteString PROXY_CONNECTION;

  private static final okio.ByteString TRANSFER_ENCODING;

  private static final okio.ByteString TE;

  private static final okio.ByteString ENCODING;

  private static final okio.ByteString UPGRADE;

  private static final java.util.List<okio.ByteString> HTTP_2_SKIPPED_REQUEST_HEADERS;

  private static final java.util.List<okio.ByteString> HTTP_2_SKIPPED_RESPONSE_HEADERS;

  private final okhttp3.OkHttpClient client;

  final okhttp3.internal.connection.StreamAllocation streamAllocation;

  private final okhttp3.internal.http2.Http2Connection connection;

  private okhttp3.internal.http2.Http2Stream stream;

  public okhttp3.internal.http2.Http2Codec(okhttp3.OkHttpClient, okhttp3.internal.connection.StreamAllocation, okhttp3.internal.http2.Http2Connection);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field client:Lokhttp3/OkHttpClient;
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
      14: aload_0
      15: aload_3
      16: putfield      #5                  // Field connection:Lokhttp3/internal/http2/Http2Connection;
      19: return

  public okio.Sink createRequestBody(okhttp3.Request, long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: invokevirtual #7                  // Method okhttp3/internal/http2/Http2Stream.getSink:()Lokio/Sink;
       7: areturn

  public void writeRequestHeaders(okhttp3.Request) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: ifnull        8
       7: return
       8: aload_1
       9: invokevirtual #8                  // Method okhttp3/Request.body:()Lokhttp3/RequestBody;
      12: ifnull        19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: istore_2
      21: aload_1
      22: invokestatic  #9                  // Method http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;
      25: astore_3
      26: aload_0
      27: aload_0
      28: getfield      #5                  // Field connection:Lokhttp3/internal/http2/Http2Connection;
      31: aload_3
      32: iload_2
      33: invokevirtual #10                 // Method okhttp3/internal/http2/Http2Connection.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;
      36: putfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
      39: aload_0
      40: getfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
      43: invokevirtual #11                 // Method okhttp3/internal/http2/Http2Stream.readTimeout:()Lokio/Timeout;
      46: aload_0
      47: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      50: invokevirtual #12                 // Method okhttp3/OkHttpClient.readTimeoutMillis:()I
      53: i2l
      54: getstatic     #13                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      57: invokevirtual #14                 // Method okio/Timeout.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;
      60: pop
      61: aload_0
      62: getfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
      65: invokevirtual #15                 // Method okhttp3/internal/http2/Http2Stream.writeTimeout:()Lokio/Timeout;
      68: aload_0
      69: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      72: invokevirtual #16                 // Method okhttp3/OkHttpClient.writeTimeoutMillis:()I
      75: i2l
      76: getstatic     #13                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      79: invokevirtual #14                 // Method okio/Timeout.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;
      82: pop
      83: return

  public void flushRequest() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field connection:Lokhttp3/internal/http2/Http2Connection;
       4: invokevirtual #17                 // Method okhttp3/internal/http2/Http2Connection.flush:()V
       7: return

  public void finishRequest() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: invokevirtual #7                  // Method okhttp3/internal/http2/Http2Stream.getSink:()Lokio/Sink;
       7: invokeinterface #18,  1           // InterfaceMethod okio/Sink.close:()V
      12: return

  public okhttp3.Response$Builder readResponseHeaders(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: invokevirtual #19                 // Method okhttp3/internal/http2/Http2Stream.takeResponseHeaders:()Ljava/util/List;
       7: astore_2
       8: aload_2
       9: invokestatic  #20                 // Method readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;
      12: astore_3
      13: iload_1
      14: ifeq          31
      17: getstatic     #21                 // Field okhttp3/internal/Internal.instance:Lokhttp3/internal/Internal;
      20: aload_3
      21: invokevirtual #22                 // Method okhttp3/internal/Internal.code:(Lokhttp3/Response$Builder;)I
      24: bipush        100
      26: if_icmpne     31
      29: aconst_null
      30: areturn
      31: aload_3
      32: areturn

  public static java.util.List<okhttp3.internal.http2.Header> http2HeadersList(okhttp3.Request);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method okhttp3/Request.headers:()Lokhttp3/Headers;
       4: astore_1
       5: new           #24                 // class java/util/ArrayList
       8: dup
       9: aload_1
      10: invokevirtual #25                 // Method okhttp3/Headers.size:()I
      13: iconst_4
      14: iadd
      15: invokespecial #26                 // Method java/util/ArrayList."<init>":(I)V
      18: astore_2
      19: aload_2
      20: new           #27                 // class okhttp3/internal/http2/Header
      23: dup
      24: getstatic     #28                 // Field okhttp3/internal/http2/Header.TARGET_METHOD:Lokio/ByteString;
      27: aload_0
      28: invokevirtual #29                 // Method okhttp3/Request.method:()Ljava/lang/String;
      31: invokespecial #30                 // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Ljava/lang/String;)V
      34: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      39: pop
      40: aload_2
      41: new           #27                 // class okhttp3/internal/http2/Header
      44: dup
      45: getstatic     #32                 // Field okhttp3/internal/http2/Header.TARGET_PATH:Lokio/ByteString;
      48: aload_0
      49: invokevirtual #33                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
      52: invokestatic  #34                 // Method okhttp3/internal/http/RequestLine.requestPath:(Lokhttp3/HttpUrl;)Ljava/lang/String;
      55: invokespecial #30                 // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Ljava/lang/String;)V
      58: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      63: pop
      64: aload_0
      65: ldc           #35                 // String Host
      67: invokevirtual #36                 // Method okhttp3/Request.header:(Ljava/lang/String;)Ljava/lang/String;
      70: astore_3
      71: aload_3
      72: ifnull        93
      75: aload_2
      76: new           #27                 // class okhttp3/internal/http2/Header
      79: dup
      80: getstatic     #37                 // Field okhttp3/internal/http2/Header.TARGET_AUTHORITY:Lokio/ByteString;
      83: aload_3
      84: invokespecial #30                 // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Ljava/lang/String;)V
      87: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      92: pop
      93: aload_2
      94: new           #27                 // class okhttp3/internal/http2/Header
      97: dup
      98: getstatic     #38                 // Field okhttp3/internal/http2/Header.TARGET_SCHEME:Lokio/ByteString;
     101: aload_0
     102: invokevirtual #33                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
     105: invokevirtual #39                 // Method okhttp3/HttpUrl.scheme:()Ljava/lang/String;
     108: invokespecial #30                 // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Ljava/lang/String;)V
     111: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     116: pop
     117: iconst_0
     118: istore        4
     120: aload_1
     121: invokevirtual #25                 // Method okhttp3/Headers.size:()I
     124: istore        5
     126: iload         4
     128: iload         5
     130: if_icmpge     191
     133: aload_1
     134: iload         4
     136: invokevirtual #40                 // Method okhttp3/Headers.name:(I)Ljava/lang/String;
     139: getstatic     #41                 // Field java/util/Locale.US:Ljava/util/Locale;
     142: invokevirtual #42                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
     145: invokestatic  #43                 // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
     148: astore        6
     150: getstatic     #44                 // Field HTTP_2_SKIPPED_REQUEST_HEADERS:Ljava/util/List;
     153: aload         6
     155: invokeinterface #45,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     160: ifne          185
     163: aload_2
     164: new           #27                 // class okhttp3/internal/http2/Header
     167: dup
     168: aload         6
     170: aload_1
     171: iload         4
     173: invokevirtual #46                 // Method okhttp3/Headers.value:(I)Ljava/lang/String;
     176: invokespecial #30                 // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Ljava/lang/String;)V
     179: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     184: pop
     185: iinc          4, 1
     188: goto          126
     191: aload_2
     192: areturn

  public static okhttp3.Response$Builder readHttp2HeadersList(java.util.List<okhttp3.internal.http2.Header>) throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_1
       2: new           #47                 // class okhttp3/Headers$Builder
       5: dup
       6: invokespecial #48                 // Method okhttp3/Headers$Builder."<init>":()V
       9: astore_2
      10: iconst_0
      11: istore_3
      12: aload_0
      13: invokeinterface #49,  1           // InterfaceMethod java/util/List.size:()I
      18: istore        4
      20: iload_3
      21: iload         4
      23: if_icmpge     157
      26: aload_0
      27: iload_3
      28: invokeinterface #50,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      33: checkcast     #27                 // class okhttp3/internal/http2/Header
      36: astore        5
      38: aload         5
      40: ifnonnull     69
      43: aload_1
      44: ifnull        151
      47: aload_1
      48: getfield      #51                 // Field okhttp3/internal/http/StatusLine.code:I
      51: bipush        100
      53: if_icmpne     151
      56: aconst_null
      57: astore_1
      58: new           #47                 // class okhttp3/Headers$Builder
      61: dup
      62: invokespecial #48                 // Method okhttp3/Headers$Builder."<init>":()V
      65: astore_2
      66: goto          151
      69: aload         5
      71: getfield      #52                 // Field okhttp3/internal/http2/Header.name:Lokio/ByteString;
      74: astore        6
      76: aload         5
      78: getfield      #53                 // Field okhttp3/internal/http2/Header.value:Lokio/ByteString;
      81: invokevirtual #54                 // Method okio/ByteString.utf8:()Ljava/lang/String;
      84: astore        7
      86: aload         6
      88: getstatic     #55                 // Field okhttp3/internal/http2/Header.RESPONSE_STATUS:Lokio/ByteString;
      91: invokevirtual #56                 // Method okio/ByteString.equals:(Ljava/lang/Object;)Z
      94: ifeq          124
      97: new           #57                 // class java/lang/StringBuilder
     100: dup
     101: invokespecial #58                 // Method java/lang/StringBuilder."<init>":()V
     104: ldc           #59                 // String HTTP/1.1
     106: invokevirtual #60                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: aload         7
     111: invokevirtual #60                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: invokevirtual #61                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     117: invokestatic  #62                 // Method okhttp3/internal/http/StatusLine.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;
     120: astore_1
     121: goto          151
     124: getstatic     #63                 // Field HTTP_2_SKIPPED_RESPONSE_HEADERS:Ljava/util/List;
     127: aload         6
     129: invokeinterface #45,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     134: ifne          151
     137: getstatic     #21                 // Field okhttp3/internal/Internal.instance:Lokhttp3/internal/Internal;
     140: aload_2
     141: aload         6
     143: invokevirtual #54                 // Method okio/ByteString.utf8:()Ljava/lang/String;
     146: aload         7
     148: invokevirtual #64                 // Method okhttp3/internal/Internal.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V
     151: iinc          3, 1
     154: goto          20
     157: aload_1
     158: ifnonnull     171
     161: new           #65                 // class java/net/ProtocolException
     164: dup
     165: ldc           #66                 // String Expected \':status\' header not present
     167: invokespecial #67                 // Method java/net/ProtocolException."<init>":(Ljava/lang/String;)V
     170: athrow
     171: new           #68                 // class okhttp3/Response$Builder
     174: dup
     175: invokespecial #69                 // Method okhttp3/Response$Builder."<init>":()V
     178: getstatic     #70                 // Field okhttp3/Protocol.HTTP_2:Lokhttp3/Protocol;
     181: invokevirtual #71                 // Method okhttp3/Response$Builder.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;
     184: aload_1
     185: getfield      #51                 // Field okhttp3/internal/http/StatusLine.code:I
     188: invokevirtual #72                 // Method okhttp3/Response$Builder.code:(I)Lokhttp3/Response$Builder;
     191: aload_1
     192: getfield      #73                 // Field okhttp3/internal/http/StatusLine.message:Ljava/lang/String;
     195: invokevirtual #74                 // Method okhttp3/Response$Builder.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;
     198: aload_2
     199: invokevirtual #75                 // Method okhttp3/Headers$Builder.build:()Lokhttp3/Headers;
     202: invokevirtual #76                 // Method okhttp3/Response$Builder.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;
     205: areturn

  public okhttp3.ResponseBody openResponseBody(okhttp3.Response) throws java.io.IOException;
    Code:
       0: new           #77                 // class okhttp3/internal/http2/Http2Codec$StreamFinishingSource
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
       9: invokevirtual #78                 // Method okhttp3/internal/http2/Http2Stream.getSource:()Lokio/Source;
      12: invokespecial #79                 // Method okhttp3/internal/http2/Http2Codec$StreamFinishingSource."<init>":(Lokhttp3/internal/http2/Http2Codec;Lokio/Source;)V
      15: astore_2
      16: new           #80                 // class okhttp3/internal/http/RealResponseBody
      19: dup
      20: aload_1
      21: invokevirtual #81                 // Method okhttp3/Response.headers:()Lokhttp3/Headers;
      24: aload_2
      25: invokestatic  #82                 // Method okio/Okio.buffer:(Lokio/Source;)Lokio/BufferedSource;
      28: invokespecial #83                 // Method okhttp3/internal/http/RealResponseBody."<init>":(Lokhttp3/Headers;Lokio/BufferedSource;)V
      31: areturn

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: ifnull        17
       7: aload_0
       8: getfield      #6                  // Field stream:Lokhttp3/internal/http2/Http2Stream;
      11: getstatic     #84                 // Field okhttp3/internal/http2/ErrorCode.CANCEL:Lokhttp3/internal/http2/ErrorCode;
      14: invokevirtual #85                 // Method okhttp3/internal/http2/Http2Stream.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V
      17: return

  static {};
    Code:
       0: ldc           #86                 // String connection
       2: invokestatic  #43                 // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
       5: putstatic     #87                 // Field CONNECTION:Lokio/ByteString;
       8: ldc           #88                 // String host
      10: invokestatic  #43                 // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      13: putstatic     #89                 // Field HOST:Lokio/ByteString;
      16: ldc           #90                 // String keep-alive
      18: invokestatic  #43                 // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      21: putstatic     #91                 // Field KEEP_ALIVE:Lokio/ByteString;
      24: ldc           #92                 // String proxy-connection
      26: invokestatic  #43                 // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      29: putstatic     #93                 // Field PROXY_CONNECTION:Lokio/ByteString;
      32: ldc           #94                 // String transfer-encoding
      34: invokestatic  #43                 // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      37: putstatic     #95                 // Field TRANSFER_ENCODING:Lokio/ByteString;
      40: ldc           #96                 // String te
      42: invokestatic  #43                 // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      45: putstatic     #97                 // Field TE:Lokio/ByteString;
      48: ldc           #98                 // String encoding
      50: invokestatic  #43                 // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      53: putstatic     #99                 // Field ENCODING:Lokio/ByteString;
      56: ldc           #100                // String upgrade
      58: invokestatic  #43                 // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      61: putstatic     #101                // Field UPGRADE:Lokio/ByteString;
      64: bipush        12
      66: anewarray     #102                // class okio/ByteString
      69: dup
      70: iconst_0
      71: getstatic     #87                 // Field CONNECTION:Lokio/ByteString;
      74: aastore
      75: dup
      76: iconst_1
      77: getstatic     #89                 // Field HOST:Lokio/ByteString;
      80: aastore
      81: dup
      82: iconst_2
      83: getstatic     #91                 // Field KEEP_ALIVE:Lokio/ByteString;
      86: aastore
      87: dup
      88: iconst_3
      89: getstatic     #93                 // Field PROXY_CONNECTION:Lokio/ByteString;
      92: aastore
      93: dup
      94: iconst_4
      95: getstatic     #97                 // Field TE:Lokio/ByteString;
      98: aastore
      99: dup
     100: iconst_5
     101: getstatic     #95                 // Field TRANSFER_ENCODING:Lokio/ByteString;
     104: aastore
     105: dup
     106: bipush        6
     108: getstatic     #99                 // Field ENCODING:Lokio/ByteString;
     111: aastore
     112: dup
     113: bipush        7
     115: getstatic     #101                // Field UPGRADE:Lokio/ByteString;
     118: aastore
     119: dup
     120: bipush        8
     122: getstatic     #28                 // Field okhttp3/internal/http2/Header.TARGET_METHOD:Lokio/ByteString;
     125: aastore
     126: dup
     127: bipush        9
     129: getstatic     #32                 // Field okhttp3/internal/http2/Header.TARGET_PATH:Lokio/ByteString;
     132: aastore
     133: dup
     134: bipush        10
     136: getstatic     #38                 // Field okhttp3/internal/http2/Header.TARGET_SCHEME:Lokio/ByteString;
     139: aastore
     140: dup
     141: bipush        11
     143: getstatic     #37                 // Field okhttp3/internal/http2/Header.TARGET_AUTHORITY:Lokio/ByteString;
     146: aastore
     147: invokestatic  #103                // Method okhttp3/internal/Util.immutableList:([Ljava/lang/Object;)Ljava/util/List;
     150: putstatic     #44                 // Field HTTP_2_SKIPPED_REQUEST_HEADERS:Ljava/util/List;
     153: bipush        8
     155: anewarray     #102                // class okio/ByteString
     158: dup
     159: iconst_0
     160: getstatic     #87                 // Field CONNECTION:Lokio/ByteString;
     163: aastore
     164: dup
     165: iconst_1
     166: getstatic     #89                 // Field HOST:Lokio/ByteString;
     169: aastore
     170: dup
     171: iconst_2
     172: getstatic     #91                 // Field KEEP_ALIVE:Lokio/ByteString;
     175: aastore
     176: dup
     177: iconst_3
     178: getstatic     #93                 // Field PROXY_CONNECTION:Lokio/ByteString;
     181: aastore
     182: dup
     183: iconst_4
     184: getstatic     #97                 // Field TE:Lokio/ByteString;
     187: aastore
     188: dup
     189: iconst_5
     190: getstatic     #95                 // Field TRANSFER_ENCODING:Lokio/ByteString;
     193: aastore
     194: dup
     195: bipush        6
     197: getstatic     #99                 // Field ENCODING:Lokio/ByteString;
     200: aastore
     201: dup
     202: bipush        7
     204: getstatic     #101                // Field UPGRADE:Lokio/ByteString;
     207: aastore
     208: invokestatic  #103                // Method okhttp3/internal/Util.immutableList:([Ljava/lang/Object;)Ljava/util/List;
     211: putstatic     #63                 // Field HTTP_2_SKIPPED_RESPONSE_HEADERS:Ljava/util/List;
     214: return
}
