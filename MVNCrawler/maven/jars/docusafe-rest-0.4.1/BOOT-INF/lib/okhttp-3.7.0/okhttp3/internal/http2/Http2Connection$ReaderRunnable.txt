Compiled from "Http2Connection.java"
class okhttp3.internal.http2.Http2Connection$ReaderRunnable extends okhttp3.internal.NamedRunnable implements okhttp3.internal.http2.Http2Reader$Handler {
  final okhttp3.internal.http2.Http2Reader reader;

  final okhttp3.internal.http2.Http2Connection this$0;

  okhttp3.internal.http2.Http2Connection$ReaderRunnable(okhttp3.internal.http2.Http2Connection, okhttp3.internal.http2.Http2Reader);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       5: aload_0
       6: ldc           #2                  // String OkHttp %s
       8: iconst_1
       9: anewarray     #3                  // class java/lang/Object
      12: dup
      13: iconst_0
      14: aload_1
      15: getfield      #4                  // Field okhttp3/internal/http2/Http2Connection.hostname:Ljava/lang/String;
      18: aastore
      19: invokespecial #5                  // Method okhttp3/internal/NamedRunnable."<init>":(Ljava/lang/String;[Ljava/lang/Object;)V
      22: aload_0
      23: aload_2
      24: putfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      27: return

  protected void execute();
    Code:
       0: getstatic     #7                  // Field okhttp3/internal/http2/ErrorCode.INTERNAL_ERROR:Lokhttp3/internal/http2/ErrorCode;
       3: astore_1
       4: getstatic     #7                  // Field okhttp3/internal/http2/ErrorCode.INTERNAL_ERROR:Lokhttp3/internal/http2/ErrorCode;
       7: astore_2
       8: aload_0
       9: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      12: aload_0
      13: invokevirtual #8                  // Method okhttp3/internal/http2/Http2Reader.readConnectionPreface:(Lokhttp3/internal/http2/Http2Reader$Handler;)V
      16: aload_0
      17: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      20: iconst_0
      21: aload_0
      22: invokevirtual #9                  // Method okhttp3/internal/http2/Http2Reader.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z
      25: ifeq          31
      28: goto          16
      31: getstatic     #10                 // Field okhttp3/internal/http2/ErrorCode.NO_ERROR:Lokhttp3/internal/http2/ErrorCode;
      34: astore_1
      35: getstatic     #11                 // Field okhttp3/internal/http2/ErrorCode.CANCEL:Lokhttp3/internal/http2/ErrorCode;
      38: astore_2
      39: aload_0
      40: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      43: aload_1
      44: aload_2
      45: invokevirtual #12                 // Method okhttp3/internal/http2/Http2Connection.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V
      48: goto          52
      51: astore_3
      52: aload_0
      53: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      56: invokestatic  #14                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
      59: goto          120
      62: astore_3
      63: getstatic     #15                 // Field okhttp3/internal/http2/ErrorCode.PROTOCOL_ERROR:Lokhttp3/internal/http2/ErrorCode;
      66: astore_1
      67: getstatic     #15                 // Field okhttp3/internal/http2/ErrorCode.PROTOCOL_ERROR:Lokhttp3/internal/http2/ErrorCode;
      70: astore_2
      71: aload_0
      72: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      75: aload_1
      76: aload_2
      77: invokevirtual #12                 // Method okhttp3/internal/http2/Http2Connection.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V
      80: goto          84
      83: astore_3
      84: aload_0
      85: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      88: invokestatic  #14                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
      91: goto          120
      94: astore        4
      96: aload_0
      97: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     100: aload_1
     101: aload_2
     102: invokevirtual #12                 // Method okhttp3/internal/http2/Http2Connection.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V
     105: goto          110
     108: astore        5
     110: aload_0
     111: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
     114: invokestatic  #14                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
     117: aload         4
     119: athrow
     120: return
    Exception table:
       from    to  target type
          39    48    51   Class java/io/IOException
           8    39    62   Class java/io/IOException
          71    80    83   Class java/io/IOException
           8    39    94   any
          62    71    94   any
          96   105   108   Class java/io/IOException
          94    96    94   any

  public void data(boolean, int, okio.BufferedSource, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       4: iload_2
       5: invokevirtual #16                 // Method okhttp3/internal/http2/Http2Connection.pushedStream:(I)Z
       8: ifeq          24
      11: aload_0
      12: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      15: iload_2
      16: aload_3
      17: iload         4
      19: iload_1
      20: invokevirtual #17                 // Method okhttp3/internal/http2/Http2Connection.pushDataLater:(ILokio/BufferedSource;IZ)V
      23: return
      24: aload_0
      25: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      28: iload_2
      29: invokevirtual #18                 // Method okhttp3/internal/http2/Http2Connection.getStream:(I)Lokhttp3/internal/http2/Http2Stream;
      32: astore        5
      34: aload         5
      36: ifnonnull     60
      39: aload_0
      40: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      43: iload_2
      44: getstatic     #15                 // Field okhttp3/internal/http2/ErrorCode.PROTOCOL_ERROR:Lokhttp3/internal/http2/ErrorCode;
      47: invokevirtual #19                 // Method okhttp3/internal/http2/Http2Connection.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V
      50: aload_3
      51: iload         4
      53: i2l
      54: invokeinterface #20,  3           // InterfaceMethod okio/BufferedSource.skip:(J)V
      59: return
      60: aload         5
      62: aload_3
      63: iload         4
      65: invokevirtual #21                 // Method okhttp3/internal/http2/Http2Stream.receiveData:(Lokio/BufferedSource;I)V
      68: iload_1
      69: ifeq          77
      72: aload         5
      74: invokevirtual #22                 // Method okhttp3/internal/http2/Http2Stream.receiveFin:()V
      77: return

  public void headers(boolean, int, int, java.util.List<okhttp3.internal.http2.Header>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       4: iload_2
       5: invokevirtual #16                 // Method okhttp3/internal/http2/Http2Connection.pushedStream:(I)Z
       8: ifeq          23
      11: aload_0
      12: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      15: iload_2
      16: aload         4
      18: iload_1
      19: invokevirtual #23                 // Method okhttp3/internal/http2/Http2Connection.pushHeadersLater:(ILjava/util/List;Z)V
      22: return
      23: aload_0
      24: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      27: dup
      28: astore        6
      30: monitorenter
      31: aload_0
      32: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      35: getfield      #24                 // Field okhttp3/internal/http2/Http2Connection.shutdown:Z
      38: ifeq          45
      41: aload         6
      43: monitorexit
      44: return
      45: aload_0
      46: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      49: iload_2
      50: invokevirtual #18                 // Method okhttp3/internal/http2/Http2Connection.getStream:(I)Lokhttp3/internal/http2/Http2Stream;
      53: astore        5
      55: aload         5
      57: ifnonnull     184
      60: iload_2
      61: aload_0
      62: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      65: getfield      #25                 // Field okhttp3/internal/http2/Http2Connection.lastGoodStreamId:I
      68: if_icmpgt     75
      71: aload         6
      73: monitorexit
      74: return
      75: iload_2
      76: iconst_2
      77: irem
      78: aload_0
      79: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      82: getfield      #26                 // Field okhttp3/internal/http2/Http2Connection.nextStreamId:I
      85: iconst_2
      86: irem
      87: if_icmpne     94
      90: aload         6
      92: monitorexit
      93: return
      94: new           #27                 // class okhttp3/internal/http2/Http2Stream
      97: dup
      98: iload_2
      99: aload_0
     100: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     103: iconst_0
     104: iload_1
     105: aload         4
     107: invokespecial #28                 // Method okhttp3/internal/http2/Http2Stream."<init>":(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List;)V
     110: astore        7
     112: aload_0
     113: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     116: iload_2
     117: putfield      #25                 // Field okhttp3/internal/http2/Http2Connection.lastGoodStreamId:I
     120: aload_0
     121: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     124: getfield      #29                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
     127: iload_2
     128: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     131: aload         7
     133: invokeinterface #31,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     138: pop
     139: getstatic     #32                 // Field okhttp3/internal/http2/Http2Connection.executor:Ljava/util/concurrent/ExecutorService;
     142: new           #33                 // class okhttp3/internal/http2/Http2Connection$ReaderRunnable$1
     145: dup
     146: aload_0
     147: ldc           #34                 // String OkHttp %s stream %d
     149: iconst_2
     150: anewarray     #3                  // class java/lang/Object
     153: dup
     154: iconst_0
     155: aload_0
     156: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     159: getfield      #4                  // Field okhttp3/internal/http2/Http2Connection.hostname:Ljava/lang/String;
     162: aastore
     163: dup
     164: iconst_1
     165: iload_2
     166: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     169: aastore
     170: aload         7
     172: invokespecial #35                 // Method okhttp3/internal/http2/Http2Connection$ReaderRunnable$1."<init>":(Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;Ljava/lang/String;[Ljava/lang/Object;Lokhttp3/internal/http2/Http2Stream;)V
     175: invokeinterface #36,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
     180: aload         6
     182: monitorexit
     183: return
     184: aload         6
     186: monitorexit
     187: goto          198
     190: astore        8
     192: aload         6
     194: monitorexit
     195: aload         8
     197: athrow
     198: aload         5
     200: aload         4
     202: invokevirtual #37                 // Method okhttp3/internal/http2/Http2Stream.receiveHeaders:(Ljava/util/List;)V
     205: iload_1
     206: ifeq          214
     209: aload         5
     211: invokevirtual #22                 // Method okhttp3/internal/http2/Http2Stream.receiveFin:()V
     214: return
    Exception table:
       from    to  target type
          31    44   190   any
          45    74   190   any
          75    93   190   any
          94   183   190   any
         184   187   190   any
         190   195   190   any

  public void rstStream(int, okhttp3.internal.http2.ErrorCode);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       4: iload_1
       5: invokevirtual #16                 // Method okhttp3/internal/http2/Http2Connection.pushedStream:(I)Z
       8: ifeq          21
      11: aload_0
      12: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      15: iload_1
      16: aload_2
      17: invokevirtual #38                 // Method okhttp3/internal/http2/Http2Connection.pushResetLater:(ILokhttp3/internal/http2/ErrorCode;)V
      20: return
      21: aload_0
      22: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      25: iload_1
      26: invokevirtual #39                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
      29: astore_3
      30: aload_3
      31: ifnull        39
      34: aload_3
      35: aload_2
      36: invokevirtual #40                 // Method okhttp3/internal/http2/Http2Stream.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V
      39: return

  public void settings(boolean, okhttp3.internal.http2.Settings);
    Code:
       0: lconst_0
       1: lstore_3
       2: aconst_null
       3: astore        5
       5: aload_0
       6: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       9: dup
      10: astore        6
      12: monitorenter
      13: aload_0
      14: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      17: getfield      #41                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      20: invokevirtual #42                 // Method okhttp3/internal/http2/Settings.getInitialWindowSize:()I
      23: istore        7
      25: iload_1
      26: ifeq          39
      29: aload_0
      30: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      33: getfield      #41                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      36: invokevirtual #43                 // Method okhttp3/internal/http2/Settings.clear:()V
      39: aload_0
      40: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      43: getfield      #41                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      46: aload_2
      47: invokevirtual #44                 // Method okhttp3/internal/http2/Settings.merge:(Lokhttp3/internal/http2/Settings;)V
      50: aload_0
      51: aload_2
      52: invokespecial #45                 // Method applyAndAckSettings:(Lokhttp3/internal/http2/Settings;)V
      55: aload_0
      56: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      59: getfield      #41                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      62: invokevirtual #42                 // Method okhttp3/internal/http2/Settings.getInitialWindowSize:()I
      65: istore        8
      67: iload         8
      69: iconst_m1
      70: if_icmpeq     165
      73: iload         8
      75: iload         7
      77: if_icmpeq     165
      80: iload         8
      82: iload         7
      84: isub
      85: i2l
      86: lstore_3
      87: aload_0
      88: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      91: getfield      #46                 // Field okhttp3/internal/http2/Http2Connection.receivedInitialPeerSettings:Z
      94: ifne          113
      97: aload_0
      98: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     101: lload_3
     102: invokevirtual #47                 // Method okhttp3/internal/http2/Http2Connection.addBytesToWriteWindow:(J)V
     105: aload_0
     106: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     109: iconst_1
     110: putfield      #46                 // Field okhttp3/internal/http2/Http2Connection.receivedInitialPeerSettings:Z
     113: aload_0
     114: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     117: getfield      #29                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
     120: invokeinterface #48,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
     125: ifne          165
     128: aload_0
     129: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     132: getfield      #29                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
     135: invokeinterface #49,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     140: aload_0
     141: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     144: getfield      #29                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
     147: invokeinterface #50,  1           // InterfaceMethod java/util/Map.size:()I
     152: anewarray     #27                 // class okhttp3/internal/http2/Http2Stream
     155: invokeinterface #51,  2           // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     160: checkcast     #52                 // class "[Lokhttp3/internal/http2/Http2Stream;"
     163: astore        5
     165: getstatic     #32                 // Field okhttp3/internal/http2/Http2Connection.executor:Ljava/util/concurrent/ExecutorService;
     168: new           #53                 // class okhttp3/internal/http2/Http2Connection$ReaderRunnable$2
     171: dup
     172: aload_0
     173: ldc           #54                 // String OkHttp %s settings
     175: iconst_1
     176: anewarray     #3                  // class java/lang/Object
     179: dup
     180: iconst_0
     181: aload_0
     182: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     185: getfield      #4                  // Field okhttp3/internal/http2/Http2Connection.hostname:Ljava/lang/String;
     188: aastore
     189: invokespecial #55                 // Method okhttp3/internal/http2/Http2Connection$ReaderRunnable$2."<init>":(Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;Ljava/lang/String;[Ljava/lang/Object;)V
     192: invokeinterface #36,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
     197: aload         6
     199: monitorexit
     200: goto          211
     203: astore        9
     205: aload         6
     207: monitorexit
     208: aload         9
     210: athrow
     211: aload         5
     213: ifnull        280
     216: lload_3
     217: lconst_0
     218: lcmp
     219: ifeq          280
     222: aload         5
     224: astore        6
     226: aload         6
     228: arraylength
     229: istore        7
     231: iconst_0
     232: istore        8
     234: iload         8
     236: iload         7
     238: if_icmpge     280
     241: aload         6
     243: iload         8
     245: aaload
     246: astore        9
     248: aload         9
     250: dup
     251: astore        10
     253: monitorenter
     254: aload         9
     256: lload_3
     257: invokevirtual #56                 // Method okhttp3/internal/http2/Http2Stream.addBytesToWriteWindow:(J)V
     260: aload         10
     262: monitorexit
     263: goto          274
     266: astore        11
     268: aload         10
     270: monitorexit
     271: aload         11
     273: athrow
     274: iinc          8, 1
     277: goto          234
     280: return
    Exception table:
       from    to  target type
          13   200   203   any
         203   208   203   any
         254   263   266   any
         266   271   266   any

  private void applyAndAckSettings(okhttp3.internal.http2.Settings);
    Code:
       0: getstatic     #32                 // Field okhttp3/internal/http2/Http2Connection.executor:Ljava/util/concurrent/ExecutorService;
       3: new           #57                 // class okhttp3/internal/http2/Http2Connection$ReaderRunnable$3
       6: dup
       7: aload_0
       8: ldc           #58                 // String OkHttp %s ACK Settings
      10: iconst_1
      11: anewarray     #3                  // class java/lang/Object
      14: dup
      15: iconst_0
      16: aload_0
      17: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      20: getfield      #4                  // Field okhttp3/internal/http2/Http2Connection.hostname:Ljava/lang/String;
      23: aastore
      24: aload_1
      25: invokespecial #59                 // Method okhttp3/internal/http2/Http2Connection$ReaderRunnable$3."<init>":(Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;Ljava/lang/String;[Ljava/lang/Object;Lokhttp3/internal/http2/Settings;)V
      28: invokeinterface #36,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      33: return

  public void ackSettings();
    Code:
       0: return

  public void ping(boolean, int, int);
    Code:
       0: iload_1
       1: ifeq          27
       4: aload_0
       5: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       8: iload_2
       9: invokevirtual #60                 // Method okhttp3/internal/http2/Http2Connection.removePing:(I)Lokhttp3/internal/http2/Ping;
      12: astore        4
      14: aload         4
      16: ifnull        24
      19: aload         4
      21: invokevirtual #61                 // Method okhttp3/internal/http2/Ping.receive:()V
      24: goto          38
      27: aload_0
      28: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      31: iconst_1
      32: iload_2
      33: iload_3
      34: aconst_null
      35: invokevirtual #62                 // Method okhttp3/internal/http2/Http2Connection.writePingLater:(ZIILokhttp3/internal/http2/Ping;)V
      38: return

  public void goAway(int, okhttp3.internal.http2.ErrorCode, okio.ByteString);
    Code:
       0: aload_3
       1: invokevirtual #63                 // Method okio/ByteString.size:()I
       4: ifle          7
       7: aload_0
       8: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      11: dup
      12: astore        5
      14: monitorenter
      15: aload_0
      16: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      19: getfield      #29                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
      22: invokeinterface #49,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      27: aload_0
      28: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      31: getfield      #29                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
      34: invokeinterface #50,  1           // InterfaceMethod java/util/Map.size:()I
      39: anewarray     #27                 // class okhttp3/internal/http2/Http2Stream
      42: invokeinterface #51,  2           // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      47: checkcast     #52                 // class "[Lokhttp3/internal/http2/Http2Stream;"
      50: astore        4
      52: aload_0
      53: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      56: iconst_1
      57: putfield      #24                 // Field okhttp3/internal/http2/Http2Connection.shutdown:Z
      60: aload         5
      62: monitorexit
      63: goto          74
      66: astore        6
      68: aload         5
      70: monitorexit
      71: aload         6
      73: athrow
      74: aload         4
      76: astore        5
      78: aload         5
      80: arraylength
      81: istore        6
      83: iconst_0
      84: istore        7
      86: iload         7
      88: iload         6
      90: if_icmpge     144
      93: aload         5
      95: iload         7
      97: aaload
      98: astore        8
     100: aload         8
     102: invokevirtual #64                 // Method okhttp3/internal/http2/Http2Stream.getId:()I
     105: iload_1
     106: if_icmple     138
     109: aload         8
     111: invokevirtual #65                 // Method okhttp3/internal/http2/Http2Stream.isLocallyInitiated:()Z
     114: ifeq          138
     117: aload         8
     119: getstatic     #66                 // Field okhttp3/internal/http2/ErrorCode.REFUSED_STREAM:Lokhttp3/internal/http2/ErrorCode;
     122: invokevirtual #40                 // Method okhttp3/internal/http2/Http2Stream.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V
     125: aload_0
     126: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     129: aload         8
     131: invokevirtual #64                 // Method okhttp3/internal/http2/Http2Stream.getId:()I
     134: invokevirtual #39                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
     137: pop
     138: iinc          7, 1
     141: goto          86
     144: return
    Exception table:
       from    to  target type
          15    63    66   any
          66    71    66   any

  public void windowUpdate(int, long);
    Code:
       0: iload_1
       1: ifne          49
       4: aload_0
       5: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       8: dup
       9: astore        4
      11: monitorenter
      12: aload_0
      13: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      16: dup
      17: getfield      #67                 // Field okhttp3/internal/http2/Http2Connection.bytesLeftInWriteWindow:J
      20: lload_2
      21: ladd
      22: putfield      #67                 // Field okhttp3/internal/http2/Http2Connection.bytesLeftInWriteWindow:J
      25: aload_0
      26: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      29: invokevirtual #68                 // Method java/lang/Object.notifyAll:()V
      32: aload         4
      34: monitorexit
      35: goto          46
      38: astore        5
      40: aload         4
      42: monitorexit
      43: aload         5
      45: athrow
      46: goto          90
      49: aload_0
      50: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      53: iload_1
      54: invokevirtual #18                 // Method okhttp3/internal/http2/Http2Connection.getStream:(I)Lokhttp3/internal/http2/Http2Stream;
      57: astore        4
      59: aload         4
      61: ifnull        90
      64: aload         4
      66: dup
      67: astore        5
      69: monitorenter
      70: aload         4
      72: lload_2
      73: invokevirtual #56                 // Method okhttp3/internal/http2/Http2Stream.addBytesToWriteWindow:(J)V
      76: aload         5
      78: monitorexit
      79: goto          90
      82: astore        6
      84: aload         5
      86: monitorexit
      87: aload         6
      89: athrow
      90: return
    Exception table:
       from    to  target type
          12    35    38   any
          38    43    38   any
          70    79    82   any
          82    87    82   any

  public void priority(int, int, int, boolean);
    Code:
       0: return

  public void pushPromise(int, int, java.util.List<okhttp3.internal.http2.Header>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       4: iload_2
       5: aload_3
       6: invokevirtual #69                 // Method okhttp3/internal/http2/Http2Connection.pushRequestLater:(ILjava/util/List;)V
       9: return

  public void alternateService(int, java.lang.String, okio.ByteString, java.lang.String, int, long);
    Code:
       0: return
}
