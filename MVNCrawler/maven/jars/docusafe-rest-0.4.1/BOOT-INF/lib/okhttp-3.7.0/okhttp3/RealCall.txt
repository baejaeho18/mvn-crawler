Compiled from "RealCall.java"
final class okhttp3.RealCall implements okhttp3.Call {
  final okhttp3.OkHttpClient client;

  final okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor;

  final okhttp3.EventListener eventListener;

  final okhttp3.Request originalRequest;

  final boolean forWebSocket;

  private boolean executed;

  okhttp3.RealCall(okhttp3.OkHttpClient, okhttp3.Request, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: invokevirtual #2                  // Method okhttp3/OkHttpClient.eventListenerFactory:()Lokhttp3/EventListener$Factory;
       8: astore        4
      10: aload_0
      11: aload_1
      12: putfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      15: aload_0
      16: aload_2
      17: putfield      #4                  // Field originalRequest:Lokhttp3/Request;
      20: aload_0
      21: iload_3
      22: putfield      #5                  // Field forWebSocket:Z
      25: aload_0
      26: new           #6                  // class okhttp3/internal/http/RetryAndFollowUpInterceptor
      29: dup
      30: aload_1
      31: iload_3
      32: invokespecial #7                  // Method okhttp3/internal/http/RetryAndFollowUpInterceptor."<init>":(Lokhttp3/OkHttpClient;Z)V
      35: putfield      #8                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
      38: aload_0
      39: aload         4
      41: aload_0
      42: invokeinterface #9,  2            // InterfaceMethod okhttp3/EventListener$Factory.create:(Lokhttp3/Call;)Lokhttp3/EventListener;
      47: putfield      #10                 // Field eventListener:Lokhttp3/EventListener;
      50: return

  public okhttp3.Request request();
    Code:
       0: aload_0
       1: getfield      #4                  // Field originalRequest:Lokhttp3/Request;
       4: areturn

  public okhttp3.Response execute() throws java.io.IOException;
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #11                 // Field executed:Z
       8: ifeq          21
      11: new           #12                 // class java/lang/IllegalStateException
      14: dup
      15: ldc           #13                 // String Already Executed
      17: invokespecial #14                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #11                 // Field executed:Z
      26: aload_1
      27: monitorexit
      28: goto          36
      31: astore_2
      32: aload_1
      33: monitorexit
      34: aload_2
      35: athrow
      36: aload_0
      37: invokespecial #15                 // Method captureCallStackTrace:()V
      40: aload_0
      41: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      44: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      47: aload_0
      48: invokevirtual #17                 // Method okhttp3/Dispatcher.executed:(Lokhttp3/RealCall;)V
      51: aload_0
      52: invokevirtual #18                 // Method getResponseWithInterceptorChain:()Lokhttp3/Response;
      55: astore_1
      56: aload_1
      57: ifnonnull     70
      60: new           #19                 // class java/io/IOException
      63: dup
      64: ldc           #20                 // String Canceled
      66: invokespecial #21                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      69: athrow
      70: aload_1
      71: astore_2
      72: aload_0
      73: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      76: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      79: aload_0
      80: invokevirtual #22                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall;)V
      83: aload_2
      84: areturn
      85: astore_3
      86: aload_0
      87: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      90: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      93: aload_0
      94: invokevirtual #22                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall;)V
      97: aload_3
      98: athrow
    Exception table:
       from    to  target type
           4    28    31   any
          31    34    31   any
          40    72    85   any

  private void captureCallStackTrace();
    Code:
       0: invokestatic  #23                 // Method okhttp3/internal/platform/Platform.get:()Lokhttp3/internal/platform/Platform;
       3: ldc           #24                 // String response.body().close()
       5: invokevirtual #25                 // Method okhttp3/internal/platform/Platform.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;
       8: astore_1
       9: aload_0
      10: getfield      #8                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
      13: aload_1
      14: invokevirtual #26                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.setCallStackTrace:(Ljava/lang/Object;)V
      17: return

  public void enqueue(okhttp3.Callback);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #11                 // Field executed:Z
       8: ifeq          21
      11: new           #12                 // class java/lang/IllegalStateException
      14: dup
      15: ldc           #13                 // String Already Executed
      17: invokespecial #14                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #11                 // Field executed:Z
      26: aload_2
      27: monitorexit
      28: goto          36
      31: astore_3
      32: aload_2
      33: monitorexit
      34: aload_3
      35: athrow
      36: aload_0
      37: invokespecial #15                 // Method captureCallStackTrace:()V
      40: aload_0
      41: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      44: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      47: new           #27                 // class okhttp3/RealCall$AsyncCall
      50: dup
      51: aload_0
      52: aload_1
      53: invokespecial #28                 // Method okhttp3/RealCall$AsyncCall."<init>":(Lokhttp3/RealCall;Lokhttp3/Callback;)V
      56: invokevirtual #29                 // Method okhttp3/Dispatcher.enqueue:(Lokhttp3/RealCall$AsyncCall;)V
      59: return
    Exception table:
       from    to  target type
           4    28    31   any
          31    34    31   any

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #8                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
       4: invokevirtual #30                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.cancel:()V
       7: return

  public synchronized boolean isExecuted();
    Code:
       0: aload_0
       1: getfield      #11                 // Field executed:Z
       4: ireturn

  public boolean isCanceled();
    Code:
       0: aload_0
       1: getfield      #8                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
       4: invokevirtual #31                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.isCanceled:()Z
       7: ireturn

  public okhttp3.RealCall clone();
    Code:
       0: new           #32                 // class okhttp3/RealCall
       3: dup
       4: aload_0
       5: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
       8: aload_0
       9: getfield      #4                  // Field originalRequest:Lokhttp3/Request;
      12: aload_0
      13: getfield      #5                  // Field forWebSocket:Z
      16: invokespecial #33                 // Method "<init>":(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V
      19: areturn

  okhttp3.internal.connection.StreamAllocation streamAllocation();
    Code:
       0: aload_0
       1: getfield      #8                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
       4: invokevirtual #34                 // Method okhttp3/internal/http/RetryAndFollowUpInterceptor.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;
       7: areturn

  java.lang.String toLoggableString();
    Code:
       0: new           #35                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #37                 // Method isCanceled:()Z
      11: ifeq          19
      14: ldc           #38                 // String canceled
      16: goto          21
      19: ldc           #39                 // String
      21: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #5                  // Field forWebSocket:Z
      28: ifeq          36
      31: ldc           #41                 // String web socket
      33: goto          38
      36: ldc           #42                 // String call
      38: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: ldc           #43                 // String  to
      43: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_0
      47: invokevirtual #44                 // Method redactedUrl:()Ljava/lang/String;
      50: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      56: areturn

  java.lang.String redactedUrl();
    Code:
       0: aload_0
       1: getfield      #4                  // Field originalRequest:Lokhttp3/Request;
       4: invokevirtual #46                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
       7: invokevirtual #47                 // Method okhttp3/HttpUrl.redact:()Ljava/lang/String;
      10: areturn

  okhttp3.Response getResponseWithInterceptorChain() throws java.io.IOException;
    Code:
       0: new           #48                 // class java/util/ArrayList
       3: dup
       4: invokespecial #49                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      13: invokevirtual #50                 // Method okhttp3/OkHttpClient.interceptors:()Ljava/util/List;
      16: invokeinterface #51,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      21: pop
      22: aload_1
      23: aload_0
      24: getfield      #8                  // Field retryAndFollowUpInterceptor:Lokhttp3/internal/http/RetryAndFollowUpInterceptor;
      27: invokeinterface #52,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      32: pop
      33: aload_1
      34: new           #53                 // class okhttp3/internal/http/BridgeInterceptor
      37: dup
      38: aload_0
      39: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      42: invokevirtual #54                 // Method okhttp3/OkHttpClient.cookieJar:()Lokhttp3/CookieJar;
      45: invokespecial #55                 // Method okhttp3/internal/http/BridgeInterceptor."<init>":(Lokhttp3/CookieJar;)V
      48: invokeinterface #52,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      53: pop
      54: aload_1
      55: new           #56                 // class okhttp3/internal/cache/CacheInterceptor
      58: dup
      59: aload_0
      60: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      63: invokevirtual #57                 // Method okhttp3/OkHttpClient.internalCache:()Lokhttp3/internal/cache/InternalCache;
      66: invokespecial #58                 // Method okhttp3/internal/cache/CacheInterceptor."<init>":(Lokhttp3/internal/cache/InternalCache;)V
      69: invokeinterface #52,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      74: pop
      75: aload_1
      76: new           #59                 // class okhttp3/internal/connection/ConnectInterceptor
      79: dup
      80: aload_0
      81: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
      84: invokespecial #60                 // Method okhttp3/internal/connection/ConnectInterceptor."<init>":(Lokhttp3/OkHttpClient;)V
      87: invokeinterface #52,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      92: pop
      93: aload_0
      94: getfield      #5                  // Field forWebSocket:Z
      97: ifne          114
     100: aload_1
     101: aload_0
     102: getfield      #3                  // Field client:Lokhttp3/OkHttpClient;
     105: invokevirtual #61                 // Method okhttp3/OkHttpClient.networkInterceptors:()Ljava/util/List;
     108: invokeinterface #51,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
     113: pop
     114: aload_1
     115: new           #62                 // class okhttp3/internal/http/CallServerInterceptor
     118: dup
     119: aload_0
     120: getfield      #5                  // Field forWebSocket:Z
     123: invokespecial #63                 // Method okhttp3/internal/http/CallServerInterceptor."<init>":(Z)V
     126: invokeinterface #52,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     131: pop
     132: new           #64                 // class okhttp3/internal/http/RealInterceptorChain
     135: dup
     136: aload_1
     137: aconst_null
     138: aconst_null
     139: aconst_null
     140: iconst_0
     141: aload_0
     142: getfield      #4                  // Field originalRequest:Lokhttp3/Request;
     145: invokespecial #65                 // Method okhttp3/internal/http/RealInterceptorChain."<init>":(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;ILokhttp3/Request;)V
     148: astore_2
     149: aload_2
     150: aload_0
     151: getfield      #4                  // Field originalRequest:Lokhttp3/Request;
     154: invokeinterface #66,  2           // InterfaceMethod okhttp3/Interceptor$Chain.proceed:(Lokhttp3/Request;)Lokhttp3/Response;
     159: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #67                 // Method clone:()Lokhttp3/RealCall;
       4: areturn

  public okhttp3.Call clone();
    Code:
       0: aload_0
       1: invokevirtual #67                 // Method clone:()Lokhttp3/RealCall;
       4: areturn
}
