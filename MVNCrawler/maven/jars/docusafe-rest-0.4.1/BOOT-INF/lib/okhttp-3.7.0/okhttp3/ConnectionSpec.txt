Compiled from "ConnectionSpec.java"
public final class okhttp3.ConnectionSpec {
  private static final okhttp3.CipherSuite[] APPROVED_CIPHER_SUITES;

  public static final okhttp3.ConnectionSpec MODERN_TLS;

  public static final okhttp3.ConnectionSpec COMPATIBLE_TLS;

  public static final okhttp3.ConnectionSpec CLEARTEXT;

  final boolean tls;

  final boolean supportsTlsExtensions;

  final java.lang.String[] cipherSuites;

  final java.lang.String[] tlsVersions;

  okhttp3.ConnectionSpec(okhttp3.ConnectionSpec$Builder);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #2                  // Field okhttp3/ConnectionSpec$Builder.tls:Z
       9: putfield      #3                  // Field tls:Z
      12: aload_0
      13: aload_1
      14: getfield      #4                  // Field okhttp3/ConnectionSpec$Builder.cipherSuites:[Ljava/lang/String;
      17: putfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      20: aload_0
      21: aload_1
      22: getfield      #6                  // Field okhttp3/ConnectionSpec$Builder.tlsVersions:[Ljava/lang/String;
      25: putfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      28: aload_0
      29: aload_1
      30: getfield      #8                  // Field okhttp3/ConnectionSpec$Builder.supportsTlsExtensions:Z
      33: putfield      #9                  // Field supportsTlsExtensions:Z
      36: return

  public boolean isTls();
    Code:
       0: aload_0
       1: getfield      #3                  // Field tls:Z
       4: ireturn

  public java.util.List<okhttp3.CipherSuite> cipherSuites();
    Code:
       0: aload_0
       1: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
       4: ifnull        17
       7: aload_0
       8: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      11: invokestatic  #10                 // Method okhttp3/CipherSuite.forJavaNames:([Ljava/lang/String;)Ljava/util/List;
      14: goto          18
      17: aconst_null
      18: areturn

  public java.util.List<okhttp3.TlsVersion> tlsVersions();
    Code:
       0: aload_0
       1: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
       4: ifnull        17
       7: aload_0
       8: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      11: invokestatic  #11                 // Method okhttp3/TlsVersion.forJavaNames:([Ljava/lang/String;)Ljava/util/List;
      14: goto          18
      17: aconst_null
      18: areturn

  public boolean supportsTlsExtensions();
    Code:
       0: aload_0
       1: getfield      #9                  // Field supportsTlsExtensions:Z
       4: ireturn

  void apply(javax.net.ssl.SSLSocket, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #12                 // Method supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;
       6: astore_3
       7: aload_3
       8: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      11: ifnull        22
      14: aload_1
      15: aload_3
      16: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      19: invokevirtual #13                 // Method javax/net/ssl/SSLSocket.setEnabledProtocols:([Ljava/lang/String;)V
      22: aload_3
      23: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      26: ifnull        37
      29: aload_1
      30: aload_3
      31: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      34: invokevirtual #14                 // Method javax/net/ssl/SSLSocket.setEnabledCipherSuites:([Ljava/lang/String;)V
      37: return

  private okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket, boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
       4: ifnull        24
       7: getstatic     #15                 // Field okhttp3/CipherSuite.ORDER_BY_NAME:Ljava/util/Comparator;
      10: aload_1
      11: invokevirtual #16                 // Method javax/net/ssl/SSLSocket.getEnabledCipherSuites:()[Ljava/lang/String;
      14: aload_0
      15: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      18: invokestatic  #17                 // Method okhttp3/internal/Util.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;
      21: goto          28
      24: aload_1
      25: invokevirtual #16                 // Method javax/net/ssl/SSLSocket.getEnabledCipherSuites:()[Ljava/lang/String;
      28: astore_3
      29: aload_0
      30: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      33: ifnull        53
      36: getstatic     #18                 // Field okhttp3/internal/Util.NATURAL_ORDER:Ljava/util/Comparator;
      39: aload_1
      40: invokevirtual #19                 // Method javax/net/ssl/SSLSocket.getEnabledProtocols:()[Ljava/lang/String;
      43: aload_0
      44: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      47: invokestatic  #17                 // Method okhttp3/internal/Util.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;
      50: goto          57
      53: aload_1
      54: invokevirtual #19                 // Method javax/net/ssl/SSLSocket.getEnabledProtocols:()[Ljava/lang/String;
      57: astore        4
      59: aload_1
      60: invokevirtual #20                 // Method javax/net/ssl/SSLSocket.getSupportedCipherSuites:()[Ljava/lang/String;
      63: astore        5
      65: getstatic     #15                 // Field okhttp3/CipherSuite.ORDER_BY_NAME:Ljava/util/Comparator;
      68: aload         5
      70: ldc           #21                 // String TLS_FALLBACK_SCSV
      72: invokestatic  #22                 // Method okhttp3/internal/Util.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I
      75: istore        6
      77: iload_2
      78: ifeq          97
      81: iload         6
      83: iconst_m1
      84: if_icmpeq     97
      87: aload_3
      88: aload         5
      90: iload         6
      92: aaload
      93: invokestatic  #23                 // Method okhttp3/internal/Util.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
      96: astore_3
      97: new           #24                 // class okhttp3/ConnectionSpec$Builder
     100: dup
     101: aload_0
     102: invokespecial #25                 // Method okhttp3/ConnectionSpec$Builder."<init>":(Lokhttp3/ConnectionSpec;)V
     105: aload_3
     106: invokevirtual #26                 // Method okhttp3/ConnectionSpec$Builder.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;
     109: aload         4
     111: invokevirtual #27                 // Method okhttp3/ConnectionSpec$Builder.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;
     114: invokevirtual #28                 // Method okhttp3/ConnectionSpec$Builder.build:()Lokhttp3/ConnectionSpec;
     117: areturn

  public boolean isCompatible(javax.net.ssl.SSLSocket);
    Code:
       0: aload_0
       1: getfield      #3                  // Field tls:Z
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      13: ifnull        35
      16: getstatic     #18                 // Field okhttp3/internal/Util.NATURAL_ORDER:Ljava/util/Comparator;
      19: aload_0
      20: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      23: aload_1
      24: invokevirtual #19                 // Method javax/net/ssl/SSLSocket.getEnabledProtocols:()[Ljava/lang/String;
      27: invokestatic  #29                 // Method okhttp3/internal/Util.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z
      30: ifne          35
      33: iconst_0
      34: ireturn
      35: aload_0
      36: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      39: ifnull        61
      42: getstatic     #15                 // Field okhttp3/CipherSuite.ORDER_BY_NAME:Ljava/util/Comparator;
      45: aload_0
      46: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      49: aload_1
      50: invokevirtual #16                 // Method javax/net/ssl/SSLSocket.getEnabledCipherSuites:()[Ljava/lang/String;
      53: invokestatic  #29                 // Method okhttp3/internal/Util.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z
      56: ifne          61
      59: iconst_0
      60: ireturn
      61: iconst_1
      62: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #30                 // class okhttp3/ConnectionSpec
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: aload_0
      11: if_acmpne     16
      14: iconst_1
      15: ireturn
      16: aload_1
      17: checkcast     #30                 // class okhttp3/ConnectionSpec
      20: astore_2
      21: aload_0
      22: getfield      #3                  // Field tls:Z
      25: aload_2
      26: getfield      #3                  // Field tls:Z
      29: if_icmpeq     34
      32: iconst_0
      33: ireturn
      34: aload_0
      35: getfield      #3                  // Field tls:Z
      38: ifeq          86
      41: aload_0
      42: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      45: aload_2
      46: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      49: invokestatic  #31                 // Method java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z
      52: ifne          57
      55: iconst_0
      56: ireturn
      57: aload_0
      58: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      61: aload_2
      62: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      65: invokestatic  #31                 // Method java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z
      68: ifne          73
      71: iconst_0
      72: ireturn
      73: aload_0
      74: getfield      #9                  // Field supportsTlsExtensions:Z
      77: aload_2
      78: getfield      #9                  // Field supportsTlsExtensions:Z
      81: if_icmpeq     86
      84: iconst_0
      85: ireturn
      86: iconst_1
      87: ireturn

  public int hashCode();
    Code:
       0: bipush        17
       2: istore_1
       3: aload_0
       4: getfield      #3                  // Field tls:Z
       7: ifeq          54
      10: bipush        31
      12: iload_1
      13: imul
      14: aload_0
      15: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      18: invokestatic  #32                 // Method java/util/Arrays.hashCode:([Ljava/lang/Object;)I
      21: iadd
      22: istore_1
      23: bipush        31
      25: iload_1
      26: imul
      27: aload_0
      28: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      31: invokestatic  #32                 // Method java/util/Arrays.hashCode:([Ljava/lang/Object;)I
      34: iadd
      35: istore_1
      36: bipush        31
      38: iload_1
      39: imul
      40: aload_0
      41: getfield      #9                  // Field supportsTlsExtensions:Z
      44: ifeq          51
      47: iconst_0
      48: goto          52
      51: iconst_1
      52: iadd
      53: istore_1
      54: iload_1
      55: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #3                  // Field tls:Z
       4: ifne          10
       7: ldc           #33                 // String ConnectionSpec()
       9: areturn
      10: aload_0
      11: getfield      #5                  // Field cipherSuites:[Ljava/lang/String;
      14: ifnull        27
      17: aload_0
      18: invokevirtual #34                 // Method cipherSuites:()Ljava/util/List;
      21: invokevirtual #35                 // Method java/lang/Object.toString:()Ljava/lang/String;
      24: goto          29
      27: ldc           #36                 // String [all enabled]
      29: astore_1
      30: aload_0
      31: getfield      #7                  // Field tlsVersions:[Ljava/lang/String;
      34: ifnull        47
      37: aload_0
      38: invokevirtual #37                 // Method tlsVersions:()Ljava/util/List;
      41: invokevirtual #35                 // Method java/lang/Object.toString:()Ljava/lang/String;
      44: goto          49
      47: ldc           #36                 // String [all enabled]
      49: astore_2
      50: new           #38                 // class java/lang/StringBuilder
      53: dup
      54: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
      57: ldc           #40                 // String ConnectionSpec(cipherSuites=
      59: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_1
      63: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: ldc           #42                 // String , tlsVersions=
      68: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_2
      72: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      75: ldc           #43                 // String , supportsTlsExtensions=
      77: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: aload_0
      81: getfield      #9                  // Field supportsTlsExtensions:Z
      84: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      87: ldc           #45                 // String )
      89: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: invokevirtual #46                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      95: areturn

  static {};
    Code:
       0: bipush        15
       2: anewarray     #47                 // class okhttp3/CipherSuite
       5: dup
       6: iconst_0
       7: getstatic     #48                 // Field okhttp3/CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:Lokhttp3/CipherSuite;
      10: aastore
      11: dup
      12: iconst_1
      13: getstatic     #49                 // Field okhttp3/CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:Lokhttp3/CipherSuite;
      16: aastore
      17: dup
      18: iconst_2
      19: getstatic     #50                 // Field okhttp3/CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:Lokhttp3/CipherSuite;
      22: aastore
      23: dup
      24: iconst_3
      25: getstatic     #51                 // Field okhttp3/CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:Lokhttp3/CipherSuite;
      28: aastore
      29: dup
      30: iconst_4
      31: getstatic     #52                 // Field okhttp3/CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:Lokhttp3/CipherSuite;
      34: aastore
      35: dup
      36: iconst_5
      37: getstatic     #53                 // Field okhttp3/CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:Lokhttp3/CipherSuite;
      40: aastore
      41: dup
      42: bipush        6
      44: getstatic     #54                 // Field okhttp3/CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:Lokhttp3/CipherSuite;
      47: aastore
      48: dup
      49: bipush        7
      51: getstatic     #55                 // Field okhttp3/CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:Lokhttp3/CipherSuite;
      54: aastore
      55: dup
      56: bipush        8
      58: getstatic     #56                 // Field okhttp3/CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:Lokhttp3/CipherSuite;
      61: aastore
      62: dup
      63: bipush        9
      65: getstatic     #57                 // Field okhttp3/CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:Lokhttp3/CipherSuite;
      68: aastore
      69: dup
      70: bipush        10
      72: getstatic     #58                 // Field okhttp3/CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256:Lokhttp3/CipherSuite;
      75: aastore
      76: dup
      77: bipush        11
      79: getstatic     #59                 // Field okhttp3/CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384:Lokhttp3/CipherSuite;
      82: aastore
      83: dup
      84: bipush        12
      86: getstatic     #60                 // Field okhttp3/CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA:Lokhttp3/CipherSuite;
      89: aastore
      90: dup
      91: bipush        13
      93: getstatic     #61                 // Field okhttp3/CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA:Lokhttp3/CipherSuite;
      96: aastore
      97: dup
      98: bipush        14
     100: getstatic     #62                 // Field okhttp3/CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA:Lokhttp3/CipherSuite;
     103: aastore
     104: putstatic     #63                 // Field APPROVED_CIPHER_SUITES:[Lokhttp3/CipherSuite;
     107: new           #24                 // class okhttp3/ConnectionSpec$Builder
     110: dup
     111: iconst_1
     112: invokespecial #64                 // Method okhttp3/ConnectionSpec$Builder."<init>":(Z)V
     115: getstatic     #63                 // Field APPROVED_CIPHER_SUITES:[Lokhttp3/CipherSuite;
     118: invokevirtual #65                 // Method okhttp3/ConnectionSpec$Builder.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;
     121: iconst_4
     122: anewarray     #66                 // class okhttp3/TlsVersion
     125: dup
     126: iconst_0
     127: getstatic     #67                 // Field okhttp3/TlsVersion.TLS_1_3:Lokhttp3/TlsVersion;
     130: aastore
     131: dup
     132: iconst_1
     133: getstatic     #68                 // Field okhttp3/TlsVersion.TLS_1_2:Lokhttp3/TlsVersion;
     136: aastore
     137: dup
     138: iconst_2
     139: getstatic     #69                 // Field okhttp3/TlsVersion.TLS_1_1:Lokhttp3/TlsVersion;
     142: aastore
     143: dup
     144: iconst_3
     145: getstatic     #70                 // Field okhttp3/TlsVersion.TLS_1_0:Lokhttp3/TlsVersion;
     148: aastore
     149: invokevirtual #71                 // Method okhttp3/ConnectionSpec$Builder.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;
     152: iconst_1
     153: invokevirtual #72                 // Method okhttp3/ConnectionSpec$Builder.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;
     156: invokevirtual #28                 // Method okhttp3/ConnectionSpec$Builder.build:()Lokhttp3/ConnectionSpec;
     159: putstatic     #73                 // Field MODERN_TLS:Lokhttp3/ConnectionSpec;
     162: new           #24                 // class okhttp3/ConnectionSpec$Builder
     165: dup
     166: getstatic     #73                 // Field MODERN_TLS:Lokhttp3/ConnectionSpec;
     169: invokespecial #25                 // Method okhttp3/ConnectionSpec$Builder."<init>":(Lokhttp3/ConnectionSpec;)V
     172: iconst_1
     173: anewarray     #66                 // class okhttp3/TlsVersion
     176: dup
     177: iconst_0
     178: getstatic     #70                 // Field okhttp3/TlsVersion.TLS_1_0:Lokhttp3/TlsVersion;
     181: aastore
     182: invokevirtual #71                 // Method okhttp3/ConnectionSpec$Builder.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;
     185: iconst_1
     186: invokevirtual #72                 // Method okhttp3/ConnectionSpec$Builder.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;
     189: invokevirtual #28                 // Method okhttp3/ConnectionSpec$Builder.build:()Lokhttp3/ConnectionSpec;
     192: putstatic     #74                 // Field COMPATIBLE_TLS:Lokhttp3/ConnectionSpec;
     195: new           #24                 // class okhttp3/ConnectionSpec$Builder
     198: dup
     199: iconst_0
     200: invokespecial #64                 // Method okhttp3/ConnectionSpec$Builder."<init>":(Z)V
     203: invokevirtual #28                 // Method okhttp3/ConnectionSpec$Builder.build:()Lokhttp3/ConnectionSpec;
     206: putstatic     #75                 // Field CLEARTEXT:Lokhttp3/ConnectionSpec;
     209: return
}
