Compiled from "Http2Stream.java"
public final class okhttp3.internal.http2.Http2Stream {
  long unacknowledgedBytesRead;

  long bytesLeftInWriteWindow;

  final int id;

  final okhttp3.internal.http2.Http2Connection connection;

  private final java.util.List<okhttp3.internal.http2.Header> requestHeaders;

  private java.util.List<okhttp3.internal.http2.Header> responseHeaders;

  private boolean hasResponseHeaders;

  private final okhttp3.internal.http2.Http2Stream$FramingSource source;

  final okhttp3.internal.http2.Http2Stream$FramingSink sink;

  final okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout;

  final okhttp3.internal.http2.Http2Stream$StreamTimeout writeTimeout;

  okhttp3.internal.http2.ErrorCode errorCode;

  static final boolean $assertionsDisabled;

  okhttp3.internal.http2.Http2Stream(int, okhttp3.internal.http2.Http2Connection, boolean, boolean, java.util.List<okhttp3.internal.http2.Header>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #2                  // Field unacknowledgedBytesRead:J
       9: aload_0
      10: new           #3                  // class okhttp3/internal/http2/Http2Stream$StreamTimeout
      13: dup
      14: aload_0
      15: invokespecial #4                  // Method okhttp3/internal/http2/Http2Stream$StreamTimeout."<init>":(Lokhttp3/internal/http2/Http2Stream;)V
      18: putfield      #5                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
      21: aload_0
      22: new           #3                  // class okhttp3/internal/http2/Http2Stream$StreamTimeout
      25: dup
      26: aload_0
      27: invokespecial #4                  // Method okhttp3/internal/http2/Http2Stream$StreamTimeout."<init>":(Lokhttp3/internal/http2/Http2Stream;)V
      30: putfield      #6                  // Field writeTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
      33: aload_0
      34: aconst_null
      35: putfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      38: aload_2
      39: ifnonnull     52
      42: new           #8                  // class java/lang/NullPointerException
      45: dup
      46: ldc           #9                  // String connection == null
      48: invokespecial #10                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: aload         5
      54: ifnonnull     67
      57: new           #8                  // class java/lang/NullPointerException
      60: dup
      61: ldc           #11                 // String requestHeaders == null
      63: invokespecial #10                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      66: athrow
      67: aload_0
      68: iload_1
      69: putfield      #12                 // Field id:I
      72: aload_0
      73: aload_2
      74: putfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      77: aload_0
      78: aload_2
      79: getfield      #14                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      82: invokevirtual #15                 // Method okhttp3/internal/http2/Settings.getInitialWindowSize:()I
      85: i2l
      86: putfield      #16                 // Field bytesLeftInWriteWindow:J
      89: aload_0
      90: new           #17                 // class okhttp3/internal/http2/Http2Stream$FramingSource
      93: dup
      94: aload_0
      95: aload_2
      96: getfield      #18                 // Field okhttp3/internal/http2/Http2Connection.okHttpSettings:Lokhttp3/internal/http2/Settings;
      99: invokevirtual #15                 // Method okhttp3/internal/http2/Settings.getInitialWindowSize:()I
     102: i2l
     103: invokespecial #19                 // Method okhttp3/internal/http2/Http2Stream$FramingSource."<init>":(Lokhttp3/internal/http2/Http2Stream;J)V
     106: putfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
     109: aload_0
     110: new           #21                 // class okhttp3/internal/http2/Http2Stream$FramingSink
     113: dup
     114: aload_0
     115: invokespecial #22                 // Method okhttp3/internal/http2/Http2Stream$FramingSink."<init>":(Lokhttp3/internal/http2/Http2Stream;)V
     118: putfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
     121: aload_0
     122: getfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
     125: iload         4
     127: putfield      #24                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
     130: aload_0
     131: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
     134: iload_3
     135: putfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
     138: aload_0
     139: aload         5
     141: putfield      #26                 // Field requestHeaders:Ljava/util/List;
     144: return

  public int getId();
    Code:
       0: aload_0
       1: getfield      #12                 // Field id:I
       4: ireturn

  public synchronized boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
       4: ifnull        9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      13: getfield      #24                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
      16: ifne          29
      19: aload_0
      20: getfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      23: getfield      #27                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.closed:Z
      26: ifeq          58
      29: aload_0
      30: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      33: getfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      36: ifne          49
      39: aload_0
      40: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      43: getfield      #28                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.closed:Z
      46: ifeq          58
      49: aload_0
      50: getfield      #29                 // Field hasResponseHeaders:Z
      53: ifeq          58
      56: iconst_0
      57: ireturn
      58: iconst_1
      59: ireturn

  public boolean isLocallyInitiated();
    Code:
       0: aload_0
       1: getfield      #12                 // Field id:I
       4: iconst_1
       5: iand
       6: iconst_1
       7: if_icmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: istore_1
      16: aload_0
      17: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      20: getfield      #30                 // Field okhttp3/internal/http2/Http2Connection.client:Z
      23: iload_1
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public okhttp3.internal.http2.Http2Connection getConnection();
    Code:
       0: aload_0
       1: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
       4: areturn

  public java.util.List<okhttp3.internal.http2.Header> getRequestHeaders();
    Code:
       0: aload_0
       1: getfield      #26                 // Field requestHeaders:Ljava/util/List;
       4: areturn

  public synchronized java.util.List<okhttp3.internal.http2.Header> takeResponseHeaders() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method isLocallyInitiated:()Z
       4: ifne          17
       7: new           #32                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #33                 // String servers cannot read response headers
      13: invokespecial #34                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #5                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
      21: invokevirtual #35                 // Method okhttp3/internal/http2/Http2Stream$StreamTimeout.enter:()V
      24: aload_0
      25: getfield      #36                 // Field responseHeaders:Ljava/util/List;
      28: ifnonnull     45
      31: aload_0
      32: getfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      35: ifnonnull     45
      38: aload_0
      39: invokevirtual #37                 // Method waitForIo:()V
      42: goto          24
      45: aload_0
      46: getfield      #5                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
      49: invokevirtual #38                 // Method okhttp3/internal/http2/Http2Stream$StreamTimeout.exitAndThrowIfTimedOut:()V
      52: goto          65
      55: astore_1
      56: aload_0
      57: getfield      #5                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
      60: invokevirtual #38                 // Method okhttp3/internal/http2/Http2Stream$StreamTimeout.exitAndThrowIfTimedOut:()V
      63: aload_1
      64: athrow
      65: aload_0
      66: getfield      #36                 // Field responseHeaders:Ljava/util/List;
      69: astore_1
      70: aload_1
      71: ifnull        81
      74: aload_0
      75: aconst_null
      76: putfield      #36                 // Field responseHeaders:Ljava/util/List;
      79: aload_1
      80: areturn
      81: new           #39                 // class okhttp3/internal/http2/StreamResetException
      84: dup
      85: aload_0
      86: getfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      89: invokespecial #40                 // Method okhttp3/internal/http2/StreamResetException."<init>":(Lokhttp3/internal/http2/ErrorCode;)V
      92: athrow
    Exception table:
       from    to  target type
          24    45    55   any

  public synchronized okhttp3.internal.http2.ErrorCode getErrorCode();
    Code:
       0: aload_0
       1: getfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
       4: areturn

  public void sendResponseHeaders(java.util.List<okhttp3.internal.http2.Header>, boolean) throws java.io.IOException;
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #42                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #43                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #44                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_1
      22: ifnonnull     35
      25: new           #8                  // class java/lang/NullPointerException
      28: dup
      29: ldc           #45                 // String responseHeaders == null
      31: invokespecial #10                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: iconst_0
      36: istore_3
      37: aload_0
      38: dup
      39: astore        4
      41: monitorenter
      42: aload_0
      43: iconst_1
      44: putfield      #29                 // Field hasResponseHeaders:Z
      47: iload_2
      48: ifne          61
      51: aload_0
      52: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      55: iconst_1
      56: putfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      59: iconst_1
      60: istore_3
      61: aload         4
      63: monitorexit
      64: goto          75
      67: astore        5
      69: aload         4
      71: monitorexit
      72: aload         5
      74: athrow
      75: aload_0
      76: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      79: aload_0
      80: getfield      #12                 // Field id:I
      83: iload_3
      84: aload_1
      85: invokevirtual #46                 // Method okhttp3/internal/http2/Http2Connection.writeSynReply:(IZLjava/util/List;)V
      88: iload_3
      89: ifeq          99
      92: aload_0
      93: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      96: invokevirtual #47                 // Method okhttp3/internal/http2/Http2Connection.flush:()V
      99: return
    Exception table:
       from    to  target type
          42    64    67   any
          67    72    67   any

  public okio.Timeout readTimeout();
    Code:
       0: aload_0
       1: getfield      #5                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
       4: areturn

  public okio.Timeout writeTimeout();
    Code:
       0: aload_0
       1: getfield      #6                  // Field writeTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
       4: areturn

  public okio.Source getSource();
    Code:
       0: aload_0
       1: getfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
       4: areturn

  public okio.Sink getSink();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #29                 // Field hasResponseHeaders:Z
       8: ifne          28
      11: aload_0
      12: invokevirtual #31                 // Method isLocallyInitiated:()Z
      15: ifne          28
      18: new           #32                 // class java/lang/IllegalStateException
      21: dup
      22: ldc           #48                 // String reply before requesting the sink
      24: invokespecial #34                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_1
      29: monitorexit
      30: goto          38
      33: astore_2
      34: aload_1
      35: monitorexit
      36: aload_2
      37: athrow
      38: aload_0
      39: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      42: areturn
    Exception table:
       from    to  target type
           4    30    33   any
          33    36    33   any

  public void close(okhttp3.internal.http2.ErrorCode) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #49                 // Method closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z
       5: ifne          9
       8: return
       9: aload_0
      10: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      13: aload_0
      14: getfield      #12                 // Field id:I
      17: aload_1
      18: invokevirtual #50                 // Method okhttp3/internal/http2/Http2Connection.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V
      21: return

  public void closeLater(okhttp3.internal.http2.ErrorCode);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #49                 // Method closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z
       5: ifne          9
       8: return
       9: aload_0
      10: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      13: aload_0
      14: getfield      #12                 // Field id:I
      17: aload_1
      18: invokevirtual #51                 // Method okhttp3/internal/http2/Http2Connection.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V
      21: return

  private boolean closeInternal(okhttp3.internal.http2.ErrorCode);
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #42                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #43                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #44                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: dup
      23: astore_2
      24: monitorenter
      25: aload_0
      26: getfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      29: ifnull        36
      32: iconst_0
      33: aload_2
      34: monitorexit
      35: ireturn
      36: aload_0
      37: getfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      40: getfield      #24                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
      43: ifeq          60
      46: aload_0
      47: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      50: getfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      53: ifeq          60
      56: iconst_0
      57: aload_2
      58: monitorexit
      59: ireturn
      60: aload_0
      61: aload_1
      62: putfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      65: aload_0
      66: invokevirtual #52                 // Method java/lang/Object.notifyAll:()V
      69: aload_2
      70: monitorexit
      71: goto          79
      74: astore_3
      75: aload_2
      76: monitorexit
      77: aload_3
      78: athrow
      79: aload_0
      80: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      83: aload_0
      84: getfield      #12                 // Field id:I
      87: invokevirtual #53                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
      90: pop
      91: iconst_1
      92: ireturn
    Exception table:
       from    to  target type
          25    35    74   any
          36    59    74   any
          60    71    74   any
          74    77    74   any

  void receiveHeaders(java.util.List<okhttp3.internal.http2.Header>);
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #42                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #43                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #44                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: iconst_1
      22: istore_2
      23: aload_0
      24: dup
      25: astore_3
      26: monitorenter
      27: aload_0
      28: iconst_1
      29: putfield      #29                 // Field hasResponseHeaders:Z
      32: aload_0
      33: getfield      #36                 // Field responseHeaders:Ljava/util/List;
      36: ifnonnull     56
      39: aload_0
      40: aload_1
      41: putfield      #36                 // Field responseHeaders:Ljava/util/List;
      44: aload_0
      45: invokevirtual #54                 // Method isOpen:()Z
      48: istore_2
      49: aload_0
      50: invokevirtual #52                 // Method java/lang/Object.notifyAll:()V
      53: goto          101
      56: new           #55                 // class java/util/ArrayList
      59: dup
      60: invokespecial #56                 // Method java/util/ArrayList."<init>":()V
      63: astore        4
      65: aload         4
      67: aload_0
      68: getfield      #36                 // Field responseHeaders:Ljava/util/List;
      71: invokeinterface #57,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      76: pop
      77: aload         4
      79: aconst_null
      80: invokeinterface #58,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      85: pop
      86: aload         4
      88: aload_1
      89: invokeinterface #57,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      94: pop
      95: aload_0
      96: aload         4
      98: putfield      #36                 // Field responseHeaders:Ljava/util/List;
     101: aload_3
     102: monitorexit
     103: goto          113
     106: astore        5
     108: aload_3
     109: monitorexit
     110: aload         5
     112: athrow
     113: iload_2
     114: ifne          129
     117: aload_0
     118: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
     121: aload_0
     122: getfield      #12                 // Field id:I
     125: invokevirtual #53                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
     128: pop
     129: return
    Exception table:
       from    to  target type
          27   103   106   any
         106   110   106   any

  void receiveData(okio.BufferedSource, int) throws java.io.IOException;
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #42                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #43                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #44                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      25: aload_1
      26: iload_2
      27: i2l
      28: invokevirtual #59                 // Method okhttp3/internal/http2/Http2Stream$FramingSource.receive:(Lokio/BufferedSource;J)V
      31: return

  void receiveFin();
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #42                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #43                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #44                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: dup
      23: astore_2
      24: monitorenter
      25: aload_0
      26: getfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      29: iconst_1
      30: putfield      #24                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
      33: aload_0
      34: invokevirtual #54                 // Method isOpen:()Z
      37: istore_1
      38: aload_0
      39: invokevirtual #52                 // Method java/lang/Object.notifyAll:()V
      42: aload_2
      43: monitorexit
      44: goto          52
      47: astore_3
      48: aload_2
      49: monitorexit
      50: aload_3
      51: athrow
      52: iload_1
      53: ifne          68
      56: aload_0
      57: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      60: aload_0
      61: getfield      #12                 // Field id:I
      64: invokevirtual #53                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
      67: pop
      68: return
    Exception table:
       from    to  target type
          25    44    47   any
          47    50    47   any

  synchronized void receiveRstStream(okhttp3.internal.http2.ErrorCode);
    Code:
       0: aload_0
       1: getfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
       4: ifnonnull     16
       7: aload_0
       8: aload_1
       9: putfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      12: aload_0
      13: invokevirtual #52                 // Method java/lang/Object.notifyAll:()V
      16: return

  void cancelStreamIfNecessary() throws java.io.IOException;
    Code:
       0: getstatic     #41                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #42                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #43                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #44                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: dup
      23: astore_3
      24: monitorenter
      25: aload_0
      26: getfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      29: getfield      #24                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
      32: ifne          69
      35: aload_0
      36: getfield      #20                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      39: getfield      #27                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.closed:Z
      42: ifeq          69
      45: aload_0
      46: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      49: getfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      52: ifne          65
      55: aload_0
      56: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      59: getfield      #28                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.closed:Z
      62: ifeq          69
      65: iconst_1
      66: goto          70
      69: iconst_0
      70: istore_2
      71: aload_0
      72: invokevirtual #54                 // Method isOpen:()Z
      75: istore_1
      76: aload_3
      77: monitorexit
      78: goto          88
      81: astore        4
      83: aload_3
      84: monitorexit
      85: aload         4
      87: athrow
      88: iload_2
      89: ifeq          102
      92: aload_0
      93: getstatic     #60                 // Field okhttp3/internal/http2/ErrorCode.CANCEL:Lokhttp3/internal/http2/ErrorCode;
      96: invokevirtual #61                 // Method close:(Lokhttp3/internal/http2/ErrorCode;)V
      99: goto          118
     102: iload_1
     103: ifne          118
     106: aload_0
     107: getfield      #13                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
     110: aload_0
     111: getfield      #12                 // Field id:I
     114: invokevirtual #53                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
     117: pop
     118: return
    Exception table:
       from    to  target type
          25    78    81   any
          81    85    81   any

  void addBytesToWriteWindow(long);
    Code:
       0: aload_0
       1: dup
       2: getfield      #16                 // Field bytesLeftInWriteWindow:J
       5: lload_1
       6: ladd
       7: putfield      #16                 // Field bytesLeftInWriteWindow:J
      10: lload_1
      11: lconst_0
      12: lcmp
      13: ifle          20
      16: aload_0
      17: invokevirtual #52                 // Method java/lang/Object.notifyAll:()V
      20: return

  void checkOutNotClosed() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
       4: getfield      #28                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.closed:Z
       7: ifeq          20
      10: new           #62                 // class java/io/IOException
      13: dup
      14: ldc           #63                 // String stream closed
      16: invokespecial #64                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #23                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      24: getfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      27: ifeq          40
      30: new           #62                 // class java/io/IOException
      33: dup
      34: ldc           #65                 // String stream finished
      36: invokespecial #64                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: getfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      44: ifnull        59
      47: new           #39                 // class okhttp3/internal/http2/StreamResetException
      50: dup
      51: aload_0
      52: getfield      #7                  // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      55: invokespecial #40                 // Method okhttp3/internal/http2/StreamResetException."<init>":(Lokhttp3/internal/http2/ErrorCode;)V
      58: athrow
      59: return

  void waitForIo() throws java.io.InterruptedIOException;
    Code:
       0: aload_0
       1: invokevirtual #66                 // Method java/lang/Object.wait:()V
       4: goto          16
       7: astore_1
       8: new           #68                 // class java/io/InterruptedIOException
      11: dup
      12: invokespecial #69                 // Method java/io/InterruptedIOException."<init>":()V
      15: athrow
      16: return
    Exception table:
       from    to  target type
           0     4     7   Class java/lang/InterruptedException

  static {};
    Code:
       0: ldc           #70                 // class okhttp3/internal/http2/Http2Stream
       2: invokevirtual #71                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #41                 // Field $assertionsDisabled:Z
      16: return
}
