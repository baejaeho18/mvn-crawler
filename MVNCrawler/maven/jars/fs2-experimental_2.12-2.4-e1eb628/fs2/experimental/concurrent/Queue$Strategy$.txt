Compiled from "Queue.scala"
public class fs2.experimental.concurrent.Queue$Strategy$ {
  public static fs2.experimental.concurrent.Queue$Strategy$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class fs2/experimental/concurrent/Queue$Strategy$
       3: invokespecial #30                 // Method "<init>":()V
       6: return

  public <A> fs2.experimental.concurrent.PubSub$Strategy<A, fs2.Chunk<A>, fs2.internal.SizedQueue<A>, java.lang.Object> boundedFifo(int);
    Code:
       0: getstatic     #37                 // Field fs2/experimental/concurrent/PubSub$Strategy$.MODULE$:Lfs2/experimental/concurrent/PubSub$Strategy$;
       3: getstatic     #40                 // Field fs2/concurrent/Queue$Strategy$.MODULE$:Lfs2/concurrent/Queue$Strategy$;
       6: iload_1
       7: invokevirtual #43                 // Method fs2/concurrent/Queue$Strategy$.boundedFifo:(I)Lfs2/concurrent/PubSub$Strategy;
      10: invokevirtual #47                 // Method fs2/experimental/concurrent/PubSub$Strategy$.convert:(Lfs2/concurrent/PubSub$Strategy;)Lfs2/experimental/concurrent/PubSub$Strategy;
      13: areturn

  public <A> fs2.experimental.concurrent.PubSub$Strategy<A, fs2.Chunk<A>, fs2.internal.SizedQueue<A>, java.lang.Object> boundedLifo(int);
    Code:
       0: getstatic     #37                 // Field fs2/experimental/concurrent/PubSub$Strategy$.MODULE$:Lfs2/experimental/concurrent/PubSub$Strategy$;
       3: getstatic     #40                 // Field fs2/concurrent/Queue$Strategy$.MODULE$:Lfs2/concurrent/Queue$Strategy$;
       6: iload_1
       7: invokevirtual #52                 // Method fs2/concurrent/Queue$Strategy$.boundedLifo:(I)Lfs2/concurrent/PubSub$Strategy;
      10: invokevirtual #47                 // Method fs2/experimental/concurrent/PubSub$Strategy$.convert:(Lfs2/concurrent/PubSub$Strategy;)Lfs2/experimental/concurrent/PubSub$Strategy;
      13: areturn

  public <A> fs2.experimental.concurrent.PubSub$Strategy<A, fs2.Chunk<A>, fs2.internal.SizedQueue<A>, java.lang.Object> circularBuffer(int);
    Code:
       0: getstatic     #37                 // Field fs2/experimental/concurrent/PubSub$Strategy$.MODULE$:Lfs2/experimental/concurrent/PubSub$Strategy$;
       3: getstatic     #40                 // Field fs2/concurrent/Queue$Strategy$.MODULE$:Lfs2/concurrent/Queue$Strategy$;
       6: iload_1
       7: invokevirtual #55                 // Method fs2/concurrent/Queue$Strategy$.circularBuffer:(I)Lfs2/concurrent/PubSub$Strategy;
      10: invokevirtual #47                 // Method fs2/experimental/concurrent/PubSub$Strategy$.convert:(Lfs2/concurrent/PubSub$Strategy;)Lfs2/experimental/concurrent/PubSub$Strategy;
      13: areturn

  public <A> fs2.experimental.concurrent.PubSub$Strategy<A, fs2.Chunk<A>, fs2.internal.SizedQueue<A>, java.lang.Object> fifo();
    Code:
       0: getstatic     #37                 // Field fs2/experimental/concurrent/PubSub$Strategy$.MODULE$:Lfs2/experimental/concurrent/PubSub$Strategy$;
       3: getstatic     #40                 // Field fs2/concurrent/Queue$Strategy$.MODULE$:Lfs2/concurrent/Queue$Strategy$;
       6: invokevirtual #61                 // Method fs2/concurrent/Queue$Strategy$.fifo:()Lfs2/concurrent/PubSub$Strategy;
       9: invokevirtual #47                 // Method fs2/experimental/concurrent/PubSub$Strategy$.convert:(Lfs2/concurrent/PubSub$Strategy;)Lfs2/experimental/concurrent/PubSub$Strategy;
      12: areturn

  public <A> fs2.experimental.concurrent.PubSub$Strategy<A, fs2.Chunk<A>, fs2.internal.SizedQueue<A>, java.lang.Object> lifo();
    Code:
       0: getstatic     #37                 // Field fs2/experimental/concurrent/PubSub$Strategy$.MODULE$:Lfs2/experimental/concurrent/PubSub$Strategy$;
       3: getstatic     #40                 // Field fs2/concurrent/Queue$Strategy$.MODULE$:Lfs2/concurrent/Queue$Strategy$;
       6: invokevirtual #64                 // Method fs2/concurrent/Queue$Strategy$.lifo:()Lfs2/concurrent/PubSub$Strategy;
       9: invokevirtual #47                 // Method fs2/experimental/concurrent/PubSub$Strategy$.convert:(Lfs2/concurrent/PubSub$Strategy;)Lfs2/experimental/concurrent/PubSub$Strategy;
      12: areturn

  public <A> fs2.experimental.concurrent.PubSub$Strategy<A, fs2.Chunk<A>, scala.Tuple2<java.lang.Object, scala.Option<A>>, java.lang.Object> synchronous();
    Code:
       0: getstatic     #37                 // Field fs2/experimental/concurrent/PubSub$Strategy$.MODULE$:Lfs2/experimental/concurrent/PubSub$Strategy$;
       3: getstatic     #40                 // Field fs2/concurrent/Queue$Strategy$.MODULE$:Lfs2/concurrent/Queue$Strategy$;
       6: invokevirtual #68                 // Method fs2/concurrent/Queue$Strategy$.synchronous:()Lfs2/concurrent/PubSub$Strategy;
       9: invokevirtual #47                 // Method fs2/experimental/concurrent/PubSub$Strategy$.convert:(Lfs2/concurrent/PubSub$Strategy;)Lfs2/experimental/concurrent/PubSub$Strategy;
      12: areturn

  public <A> fs2.experimental.concurrent.PubSub$Strategy<A, fs2.Chunk<A>, fs2.internal.SizedQueue<A>, java.lang.Object> unbounded(scala.Function2<fs2.internal.SizedQueue<A>, A, fs2.internal.SizedQueue<A>>);
    Code:
       0: getstatic     #37                 // Field fs2/experimental/concurrent/PubSub$Strategy$.MODULE$:Lfs2/experimental/concurrent/PubSub$Strategy$;
       3: getstatic     #40                 // Field fs2/concurrent/Queue$Strategy$.MODULE$:Lfs2/concurrent/Queue$Strategy$;
       6: aload_1
       7: invokevirtual #75                 // Method fs2/concurrent/Queue$Strategy$.unbounded:(Lscala/Function2;)Lfs2/concurrent/PubSub$Strategy;
      10: invokevirtual #47                 // Method fs2/experimental/concurrent/PubSub$Strategy$.convert:(Lfs2/concurrent/PubSub$Strategy;)Lfs2/experimental/concurrent/PubSub$Strategy;
      13: areturn

  public fs2.experimental.concurrent.Queue$Strategy$();
    Code:
       0: aload_0
       1: invokespecial #77                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #79                 // Field MODULE$:Lfs2/experimental/concurrent/Queue$Strategy$;
       8: return
}
