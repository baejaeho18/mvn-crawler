Compiled from "PooledByteBuf.java"
abstract class io.netty.buffer.PooledByteBuf<T> extends io.netty.buffer.AbstractReferenceCountedByteBuf {
  private final io.netty.util.Recycler$Handle recyclerHandle;

  protected io.netty.buffer.PoolChunk<T> chunk;

  protected long handle;

  protected T memory;

  protected int offset;

  protected int length;

  int maxLength;

  io.netty.buffer.PoolThreadCache cache;

  private java.nio.ByteBuffer tmpNioBuf;

  static final boolean $assertionsDisabled;

  protected io.netty.buffer.PooledByteBuf(io.netty.util.Recycler$Handle, int);
    Code:
       0: aload_0
       1: iload_2
       2: invokespecial #1                  // Method io/netty/buffer/AbstractReferenceCountedByteBuf."<init>":(I)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field recyclerHandle:Lio/netty/util/Recycler$Handle;
      10: return

  void init(io.netty.buffer.PoolChunk<T>, long, int, int, int, io.netty.buffer.PoolThreadCache);
    Code:
       0: getstatic     #3                  // Field $assertionsDisabled:Z
       3: ifne          20
       6: lload_2
       7: lconst_0
       8: lcmp
       9: ifge          20
      12: new           #4                  // class java/lang/AssertionError
      15: dup
      16: invokespecial #5                  // Method java/lang/AssertionError."<init>":()V
      19: athrow
      20: getstatic     #3                  // Field $assertionsDisabled:Z
      23: ifne          38
      26: aload_1
      27: ifnonnull     38
      30: new           #4                  // class java/lang/AssertionError
      33: dup
      34: invokespecial #5                  // Method java/lang/AssertionError."<init>":()V
      37: athrow
      38: aload_0
      39: aload_1
      40: putfield      #6                  // Field chunk:Lio/netty/buffer/PoolChunk;
      43: aload_0
      44: lload_2
      45: putfield      #7                  // Field handle:J
      48: aload_0
      49: aload_1
      50: getfield      #8                  // Field io/netty/buffer/PoolChunk.memory:Ljava/lang/Object;
      53: putfield      #9                  // Field memory:Ljava/lang/Object;
      56: aload_0
      57: iload         4
      59: putfield      #10                 // Field offset:I
      62: aload_0
      63: iload         5
      65: putfield      #11                 // Field length:I
      68: aload_0
      69: iload         6
      71: putfield      #12                 // Field maxLength:I
      74: aload_0
      75: aconst_null
      76: putfield      #13                 // Field tmpNioBuf:Ljava/nio/ByteBuffer;
      79: aload_0
      80: aload         7
      82: putfield      #14                 // Field cache:Lio/netty/buffer/PoolThreadCache;
      85: return

  void initUnpooled(io.netty.buffer.PoolChunk<T>, int);
    Code:
       0: getstatic     #3                  // Field $assertionsDisabled:Z
       3: ifne          18
       6: aload_1
       7: ifnonnull     18
      10: new           #4                  // class java/lang/AssertionError
      13: dup
      14: invokespecial #5                  // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #6                  // Field chunk:Lio/netty/buffer/PoolChunk;
      23: aload_0
      24: lconst_0
      25: putfield      #7                  // Field handle:J
      28: aload_0
      29: aload_1
      30: getfield      #8                  // Field io/netty/buffer/PoolChunk.memory:Ljava/lang/Object;
      33: putfield      #9                  // Field memory:Ljava/lang/Object;
      36: aload_0
      37: iconst_0
      38: putfield      #10                 // Field offset:I
      41: aload_0
      42: aload_0
      43: iload_2
      44: dup_x1
      45: putfield      #12                 // Field maxLength:I
      48: putfield      #11                 // Field length:I
      51: aload_0
      52: aconst_null
      53: putfield      #13                 // Field tmpNioBuf:Ljava/nio/ByteBuffer;
      56: aload_0
      57: aconst_null
      58: putfield      #14                 // Field cache:Lio/netty/buffer/PoolThreadCache;
      61: return

  final void reuse(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #15                 // Method maxCapacity:(I)V
       5: aload_0
       6: iconst_1
       7: invokevirtual #16                 // Method setRefCnt:(I)V
      10: aload_0
      11: iconst_0
      12: iconst_0
      13: invokevirtual #17                 // Method setIndex0:(II)V
      16: aload_0
      17: invokevirtual #18                 // Method discardMarks:()V
      20: return

  public final int capacity();
    Code:
       0: aload_0
       1: getfield      #11                 // Field length:I
       4: ireturn

  public final io.netty.buffer.ByteBuf capacity(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method ensureAccessible:()V
       4: aload_0
       5: getfield      #6                  // Field chunk:Lio/netty/buffer/PoolChunk;
       8: getfield      #20                 // Field io/netty/buffer/PoolChunk.unpooled:Z
      11: ifeq          24
      14: iload_1
      15: aload_0
      16: getfield      #11                 // Field length:I
      19: if_icmpne     144
      22: aload_0
      23: areturn
      24: iload_1
      25: aload_0
      26: getfield      #11                 // Field length:I
      29: if_icmple     47
      32: iload_1
      33: aload_0
      34: getfield      #12                 // Field maxLength:I
      37: if_icmpgt     144
      40: aload_0
      41: iload_1
      42: putfield      #11                 // Field length:I
      45: aload_0
      46: areturn
      47: iload_1
      48: aload_0
      49: getfield      #11                 // Field length:I
      52: if_icmpge     142
      55: iload_1
      56: aload_0
      57: getfield      #12                 // Field maxLength:I
      60: iconst_1
      61: iushr
      62: if_icmple     144
      65: aload_0
      66: getfield      #12                 // Field maxLength:I
      69: sipush        512
      72: if_icmpgt     114
      75: iload_1
      76: aload_0
      77: getfield      #12                 // Field maxLength:I
      80: bipush        16
      82: isub
      83: if_icmple     144
      86: aload_0
      87: iload_1
      88: putfield      #11                 // Field length:I
      91: aload_0
      92: aload_0
      93: invokevirtual #21                 // Method readerIndex:()I
      96: iload_1
      97: invokestatic  #22                 // Method java/lang/Math.min:(II)I
     100: aload_0
     101: invokevirtual #23                 // Method writerIndex:()I
     104: iload_1
     105: invokestatic  #22                 // Method java/lang/Math.min:(II)I
     108: invokevirtual #24                 // Method setIndex:(II)Lio/netty/buffer/ByteBuf;
     111: pop
     112: aload_0
     113: areturn
     114: aload_0
     115: iload_1
     116: putfield      #11                 // Field length:I
     119: aload_0
     120: aload_0
     121: invokevirtual #21                 // Method readerIndex:()I
     124: iload_1
     125: invokestatic  #22                 // Method java/lang/Math.min:(II)I
     128: aload_0
     129: invokevirtual #23                 // Method writerIndex:()I
     132: iload_1
     133: invokestatic  #22                 // Method java/lang/Math.min:(II)I
     136: invokevirtual #24                 // Method setIndex:(II)Lio/netty/buffer/ByteBuf;
     139: pop
     140: aload_0
     141: areturn
     142: aload_0
     143: areturn
     144: aload_0
     145: getfield      #6                  // Field chunk:Lio/netty/buffer/PoolChunk;
     148: getfield      #25                 // Field io/netty/buffer/PoolChunk.arena:Lio/netty/buffer/PoolArena;
     151: aload_0
     152: iload_1
     153: iconst_1
     154: invokevirtual #26                 // Method io/netty/buffer/PoolArena.reallocate:(Lio/netty/buffer/PooledByteBuf;IZ)V
     157: aload_0
     158: areturn

  public final io.netty.buffer.ByteBufAllocator alloc();
    Code:
       0: aload_0
       1: getfield      #6                  // Field chunk:Lio/netty/buffer/PoolChunk;
       4: getfield      #25                 // Field io/netty/buffer/PoolChunk.arena:Lio/netty/buffer/PoolArena;
       7: getfield      #27                 // Field io/netty/buffer/PoolArena.parent:Lio/netty/buffer/PooledByteBufAllocator;
      10: areturn

  public final java.nio.ByteOrder order();
    Code:
       0: getstatic     #28                 // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
       3: areturn

  public final io.netty.buffer.ByteBuf unwrap();
    Code:
       0: aconst_null
       1: areturn

  protected final java.nio.ByteBuffer internalNioBuffer();
    Code:
       0: aload_0
       1: getfield      #13                 // Field tmpNioBuf:Ljava/nio/ByteBuffer;
       4: astore_1
       5: aload_1
       6: ifnonnull     23
       9: aload_0
      10: aload_0
      11: aload_0
      12: getfield      #9                  // Field memory:Ljava/lang/Object;
      15: invokevirtual #29                 // Method newInternalNioBuffer:(Ljava/lang/Object;)Ljava/nio/ByteBuffer;
      18: dup
      19: astore_1
      20: putfield      #13                 // Field tmpNioBuf:Ljava/nio/ByteBuffer;
      23: aload_1
      24: areturn

  protected abstract java.nio.ByteBuffer newInternalNioBuffer(T);

  protected final void deallocate();
    Code:
       0: aload_0
       1: getfield      #7                  // Field handle:J
       4: lconst_0
       5: lcmp
       6: iflt          53
       9: aload_0
      10: getfield      #7                  // Field handle:J
      13: lstore_1
      14: aload_0
      15: ldc2_w        #30                 // long -1l
      18: putfield      #7                  // Field handle:J
      21: aload_0
      22: aconst_null
      23: putfield      #9                  // Field memory:Ljava/lang/Object;
      26: aload_0
      27: getfield      #6                  // Field chunk:Lio/netty/buffer/PoolChunk;
      30: getfield      #25                 // Field io/netty/buffer/PoolChunk.arena:Lio/netty/buffer/PoolArena;
      33: aload_0
      34: getfield      #6                  // Field chunk:Lio/netty/buffer/PoolChunk;
      37: lload_1
      38: aload_0
      39: getfield      #12                 // Field maxLength:I
      42: aload_0
      43: getfield      #14                 // Field cache:Lio/netty/buffer/PoolThreadCache;
      46: invokevirtual #32                 // Method io/netty/buffer/PoolArena.free:(Lio/netty/buffer/PoolChunk;JILio/netty/buffer/PoolThreadCache;)V
      49: aload_0
      50: invokespecial #33                 // Method recycle:()V
      53: return

  private void recycle();
    Code:
       0: aload_0
       1: getfield      #2                  // Field recyclerHandle:Lio/netty/util/Recycler$Handle;
       4: astore_1
       5: aload_1
       6: ifnull        19
       9: aload_0
      10: invokevirtual #34                 // Method recycler:()Lio/netty/util/Recycler;
      13: aload_0
      14: aload_1
      15: invokevirtual #35                 // Method io/netty/util/Recycler.recycle:(Ljava/lang/Object;Lio/netty/util/Recycler$Handle;)Z
      18: pop
      19: return

  protected abstract io.netty.util.Recycler<?> recycler();

  protected final int idx(int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field offset:I
       4: iload_1
       5: iadd
       6: ireturn

  static {};
    Code:
       0: ldc_w         #36                 // class io/netty/buffer/PooledByteBuf
       3: invokevirtual #37                 // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #3                  // Field $assertionsDisabled:Z
      17: return
}
