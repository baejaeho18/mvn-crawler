Compiled from "ResourceLeakDetector.java"
public final class io.netty.util.ResourceLeakDetector<T> {
  private static final java.lang.String PROP_LEVEL_OLD;

  private static final java.lang.String PROP_LEVEL;

  private static final io.netty.util.ResourceLeakDetector$Level DEFAULT_LEVEL;

  private static final java.lang.String PROP_MAX_RECORDS;

  private static final int DEFAULT_MAX_RECORDS;

  private static final int MAX_RECORDS;

  private static io.netty.util.ResourceLeakDetector$Level level;

  private static final io.netty.util.internal.logging.InternalLogger logger;

  private static final int DEFAULT_SAMPLING_INTERVAL;

  private final io.netty.util.ResourceLeakDetector<T>.DefaultResourceLeak head;

  private final io.netty.util.ResourceLeakDetector<T>.DefaultResourceLeak tail;

  private final java.lang.ref.ReferenceQueue<java.lang.Object> refQueue;

  private final java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.Boolean> reportedLeaks;

  private final java.lang.String resourceType;

  private final int samplingInterval;

  private final long maxActive;

  private long active;

  private final java.util.concurrent.atomic.AtomicBoolean loggedTooManyActive;

  private long leakCheckCnt;

  private static final java.lang.String[] STACK_TRACE_ELEMENT_EXCLUSIONS;

  public static void setEnabled(boolean);
    Code:
       0: iload_0
       1: ifeq          10
       4: getstatic     #5                  // Field io/netty/util/ResourceLeakDetector$Level.SIMPLE:Lio/netty/util/ResourceLeakDetector$Level;
       7: goto          13
      10: getstatic     #6                  // Field io/netty/util/ResourceLeakDetector$Level.DISABLED:Lio/netty/util/ResourceLeakDetector$Level;
      13: invokestatic  #7                  // Method setLevel:(Lio/netty/util/ResourceLeakDetector$Level;)V
      16: return

  public static boolean isEnabled();
    Code:
       0: invokestatic  #8                  // Method getLevel:()Lio/netty/util/ResourceLeakDetector$Level;
       3: invokevirtual #9                  // Method io/netty/util/ResourceLeakDetector$Level.ordinal:()I
       6: getstatic     #6                  // Field io/netty/util/ResourceLeakDetector$Level.DISABLED:Lio/netty/util/ResourceLeakDetector$Level;
       9: invokevirtual #9                  // Method io/netty/util/ResourceLeakDetector$Level.ordinal:()I
      12: if_icmple     19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public static void setLevel(io.netty.util.ResourceLeakDetector$Level);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #10                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #11                 // String level
      10: invokespecial #12                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: putstatic     #13                 // Field level:Lio/netty/util/ResourceLeakDetector$Level;
      18: return

  public static io.netty.util.ResourceLeakDetector$Level getLevel();
    Code:
       0: getstatic     #13                 // Field level:Lio/netty/util/ResourceLeakDetector$Level;
       3: areturn

  public io.netty.util.ResourceLeakDetector(java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #14                 // Method io/netty/util/internal/StringUtil.simpleClassName:(Ljava/lang/Class;)Ljava/lang/String;
       5: invokespecial #15                 // Method "<init>":(Ljava/lang/String;)V
       8: return

  public io.netty.util.ResourceLeakDetector(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        113
       4: ldc2_w        #16                 // long 9223372036854775807l
       7: invokespecial #18                 // Method "<init>":(Ljava/lang/String;IJ)V
      10: return

  public io.netty.util.ResourceLeakDetector(java.lang.Class<?>, int, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #14                 // Method io/netty/util/internal/StringUtil.simpleClassName:(Ljava/lang/Class;)Ljava/lang/String;
       5: iload_2
       6: lload_3
       7: invokespecial #18                 // Method "<init>":(Ljava/lang/String;IJ)V
      10: return

  public io.netty.util.ResourceLeakDetector(java.lang.String, int, long);
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #20                 // class io/netty/util/ResourceLeakDetector$DefaultResourceLeak
       8: dup
       9: aload_0
      10: aconst_null
      11: invokespecial #21                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak."<init>":(Lio/netty/util/ResourceLeakDetector;Ljava/lang/Object;)V
      14: putfield      #3                  // Field head:Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;
      17: aload_0
      18: new           #20                 // class io/netty/util/ResourceLeakDetector$DefaultResourceLeak
      21: dup
      22: aload_0
      23: aconst_null
      24: invokespecial #21                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak."<init>":(Lio/netty/util/ResourceLeakDetector;Ljava/lang/Object;)V
      27: putfield      #22                 // Field tail:Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;
      30: aload_0
      31: new           #23                 // class java/lang/ref/ReferenceQueue
      34: dup
      35: invokespecial #24                 // Method java/lang/ref/ReferenceQueue."<init>":()V
      38: putfield      #4                  // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      41: aload_0
      42: invokestatic  #25                 // Method io/netty/util/internal/PlatformDependent.newConcurrentHashMap:()Ljava/util/concurrent/ConcurrentMap;
      45: putfield      #26                 // Field reportedLeaks:Ljava/util/concurrent/ConcurrentMap;
      48: aload_0
      49: new           #27                 // class java/util/concurrent/atomic/AtomicBoolean
      52: dup
      53: invokespecial #28                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      56: putfield      #29                 // Field loggedTooManyActive:Ljava/util/concurrent/atomic/AtomicBoolean;
      59: aload_1
      60: ifnonnull     73
      63: new           #10                 // class java/lang/NullPointerException
      66: dup
      67: ldc           #30                 // String resourceType
      69: invokespecial #12                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      72: athrow
      73: iload_2
      74: ifgt          109
      77: new           #31                 // class java/lang/IllegalArgumentException
      80: dup
      81: new           #32                 // class java/lang/StringBuilder
      84: dup
      85: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      88: ldc           #34                 // String samplingInterval:
      90: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: iload_2
      94: invokevirtual #36                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      97: ldc           #37                 // String  (expected: 1+)
      99: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     102: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     105: invokespecial #39                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     108: athrow
     109: lload_3
     110: lconst_0
     111: lcmp
     112: ifgt          147
     115: new           #31                 // class java/lang/IllegalArgumentException
     118: dup
     119: new           #32                 // class java/lang/StringBuilder
     122: dup
     123: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
     126: ldc           #40                 // String maxActive:
     128: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: lload_3
     132: invokevirtual #41                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     135: ldc           #37                 // String  (expected: 1+)
     137: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     140: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     143: invokespecial #39                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     146: athrow
     147: aload_0
     148: aload_1
     149: putfield      #42                 // Field resourceType:Ljava/lang/String;
     152: aload_0
     153: iload_2
     154: putfield      #43                 // Field samplingInterval:I
     157: aload_0
     158: lload_3
     159: putfield      #44                 // Field maxActive:J
     162: aload_0
     163: getfield      #3                  // Field head:Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;
     166: aload_0
     167: getfield      #22                 // Field tail:Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;
     170: invokestatic  #45                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak.access$002:(Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;)Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;
     173: pop
     174: aload_0
     175: getfield      #22                 // Field tail:Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;
     178: aload_0
     179: getfield      #3                  // Field head:Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;
     182: invokestatic  #46                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak.access$102:(Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;)Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;
     185: pop
     186: return

  public io.netty.util.ResourceLeak open(T);
    Code:
       0: getstatic     #13                 // Field level:Lio/netty/util/ResourceLeakDetector$Level;
       3: astore_2
       4: aload_2
       5: getstatic     #6                  // Field io/netty/util/ResourceLeakDetector$Level.DISABLED:Lio/netty/util/ResourceLeakDetector$Level;
       8: if_acmpne     13
      11: aconst_null
      12: areturn
      13: aload_2
      14: invokevirtual #9                  // Method io/netty/util/ResourceLeakDetector$Level.ordinal:()I
      17: getstatic     #47                 // Field io/netty/util/ResourceLeakDetector$Level.PARANOID:Lio/netty/util/ResourceLeakDetector$Level;
      20: invokevirtual #9                  // Method io/netty/util/ResourceLeakDetector$Level.ordinal:()I
      23: if_icmpge     65
      26: aload_0
      27: dup
      28: getfield      #48                 // Field leakCheckCnt:J
      31: dup2_x1
      32: lconst_1
      33: ladd
      34: putfield      #48                 // Field leakCheckCnt:J
      37: aload_0
      38: getfield      #43                 // Field samplingInterval:I
      41: i2l
      42: lrem
      43: lconst_0
      44: lcmp
      45: ifne          63
      48: aload_0
      49: aload_2
      50: invokespecial #49                 // Method reportLeak:(Lio/netty/util/ResourceLeakDetector$Level;)V
      53: new           #20                 // class io/netty/util/ResourceLeakDetector$DefaultResourceLeak
      56: dup
      57: aload_0
      58: aload_1
      59: invokespecial #21                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak."<init>":(Lio/netty/util/ResourceLeakDetector;Ljava/lang/Object;)V
      62: areturn
      63: aconst_null
      64: areturn
      65: aload_0
      66: aload_2
      67: invokespecial #49                 // Method reportLeak:(Lio/netty/util/ResourceLeakDetector$Level;)V
      70: new           #20                 // class io/netty/util/ResourceLeakDetector$DefaultResourceLeak
      73: dup
      74: aload_0
      75: aload_1
      76: invokespecial #21                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak."<init>":(Lio/netty/util/ResourceLeakDetector;Ljava/lang/Object;)V
      79: areturn

  private void reportLeak(io.netty.util.ResourceLeakDetector$Level);
    Code:
       0: getstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
       3: invokeinterface #51,  1           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.isErrorEnabled:()Z
       8: ifne          38
      11: aload_0
      12: getfield      #4                  // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      15: invokevirtual #52                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
      18: checkcast     #20                 // class io/netty/util/ResourceLeakDetector$DefaultResourceLeak
      21: astore_2
      22: aload_2
      23: ifnonnull     29
      26: goto          37
      29: aload_2
      30: invokevirtual #53                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak.close:()Z
      33: pop
      34: goto          11
      37: return
      38: aload_1
      39: getstatic     #47                 // Field io/netty/util/ResourceLeakDetector$Level.PARANOID:Lio/netty/util/ResourceLeakDetector$Level;
      42: if_acmpne     49
      45: iconst_1
      46: goto          53
      49: aload_0
      50: getfield      #43                 // Field samplingInterval:I
      53: istore_2
      54: aload_0
      55: getfield      #2                  // Field active:J
      58: iload_2
      59: i2l
      60: lmul
      61: aload_0
      62: getfield      #44                 // Field maxActive:J
      65: lcmp
      66: ifle          133
      69: aload_0
      70: getfield      #29                 // Field loggedTooManyActive:Ljava/util/concurrent/atomic/AtomicBoolean;
      73: iconst_0
      74: iconst_1
      75: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      78: ifeq          133
      81: getstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      84: new           #32                 // class java/lang/StringBuilder
      87: dup
      88: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      91: ldc           #55                 // String LEAK: You are creating too many
      93: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      96: aload_0
      97: getfield      #42                 // Field resourceType:Ljava/lang/String;
     100: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: ldc           #56                 // String  instances.
     105: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     108: aload_0
     109: getfield      #42                 // Field resourceType:Ljava/lang/String;
     112: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: ldc           #57                 // String  is a shared resource that must be reused across the JVM,
     117: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     120: ldc           #58                 // String so that only a few instances are created.
     122: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     125: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     128: invokeinterface #59,  2           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.error:(Ljava/lang/String;)V
     133: aload_0
     134: getfield      #4                  // Field refQueue:Ljava/lang/ref/ReferenceQueue;
     137: invokevirtual #52                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
     140: checkcast     #20                 // class io/netty/util/ResourceLeakDetector$DefaultResourceLeak
     143: astore_3
     144: aload_3
     145: ifnonnull     151
     148: goto          263
     151: aload_3
     152: invokevirtual #60                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak.clear:()V
     155: aload_3
     156: invokevirtual #53                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak.close:()Z
     159: ifne          165
     162: goto          133
     165: aload_3
     166: invokevirtual #61                 // Method io/netty/util/ResourceLeakDetector$DefaultResourceLeak.toString:()Ljava/lang/String;
     169: astore        4
     171: aload_0
     172: getfield      #26                 // Field reportedLeaks:Ljava/util/concurrent/ConcurrentMap;
     175: aload         4
     177: getstatic     #62                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
     180: invokeinterface #63,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     185: ifnonnull     260
     188: aload         4
     190: invokevirtual #64                 // Method java/lang/String.isEmpty:()Z
     193: ifeq          244
     196: getstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
     199: ldc           #65                 // String LEAK: {}.release() was not called before it\'s garbage-collected. Enable advanced leak reporting to find out where the leak occurred. To enable advanced leak reporting, specify the JVM option \'-D{}={}\' or call {}.setLevel() See http://netty.io/wiki/reference-counted-objects.html for more information.
     201: iconst_4
     202: anewarray     #66                 // class java/lang/Object
     205: dup
     206: iconst_0
     207: aload_0
     208: getfield      #42                 // Field resourceType:Ljava/lang/String;
     211: aastore
     212: dup
     213: iconst_1
     214: ldc           #67                 // String io.netty.leakDetection.level
     216: aastore
     217: dup
     218: iconst_2
     219: getstatic     #68                 // Field io/netty/util/ResourceLeakDetector$Level.ADVANCED:Lio/netty/util/ResourceLeakDetector$Level;
     222: invokevirtual #69                 // Method io/netty/util/ResourceLeakDetector$Level.name:()Ljava/lang/String;
     225: invokevirtual #70                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     228: aastore
     229: dup
     230: iconst_3
     231: aload_0
     232: invokestatic  #71                 // Method io/netty/util/internal/StringUtil.simpleClassName:(Ljava/lang/Object;)Ljava/lang/String;
     235: aastore
     236: invokeinterface #72,  3           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
     241: goto          260
     244: getstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
     247: ldc           #73                 // String LEAK: {}.release() was not called before it\'s garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.{}
     249: aload_0
     250: getfield      #42                 // Field resourceType:Ljava/lang/String;
     253: aload         4
     255: invokeinterface #74,  4           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     260: goto          133
     263: return

  static java.lang.String newRecord(int);
    Code:
       0: new           #32                 // class java/lang/StringBuilder
       3: dup
       4: sipush        4096
       7: invokespecial #75                 // Method java/lang/StringBuilder."<init>":(I)V
      10: astore_1
      11: new           #76                 // class java/lang/Throwable
      14: dup
      15: invokespecial #77                 // Method java/lang/Throwable."<init>":()V
      18: invokevirtual #78                 // Method java/lang/Throwable.getStackTrace:()[Ljava/lang/StackTraceElement;
      21: astore_2
      22: aload_2
      23: astore_3
      24: aload_3
      25: arraylength
      26: istore        4
      28: iconst_0
      29: istore        5
      31: iload         5
      33: iload         4
      35: if_icmpge     146
      38: aload_3
      39: iload         5
      41: aaload
      42: astore        6
      44: iload_0
      45: ifle          54
      48: iinc          0, -1
      51: goto          140
      54: aload         6
      56: invokevirtual #79                 // Method java/lang/StackTraceElement.toString:()Ljava/lang/String;
      59: astore        7
      61: iconst_0
      62: istore        8
      64: getstatic     #80                 // Field STACK_TRACE_ELEMENT_EXCLUSIONS:[Ljava/lang/String;
      67: astore        9
      69: aload         9
      71: arraylength
      72: istore        10
      74: iconst_0
      75: istore        11
      77: iload         11
      79: iload         10
      81: if_icmpge     113
      84: aload         9
      86: iload         11
      88: aaload
      89: astore        12
      91: aload         7
      93: aload         12
      95: invokevirtual #81                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      98: ifeq          107
     101: iconst_1
     102: istore        8
     104: goto          113
     107: iinc          11, 1
     110: goto          77
     113: iload         8
     115: ifne          140
     118: aload_1
     119: bipush        9
     121: invokevirtual #82                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     124: pop
     125: aload_1
     126: aload         7
     128: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: pop
     132: aload_1
     133: getstatic     #83                 // Field io/netty/util/internal/StringUtil.NEWLINE:Ljava/lang/String;
     136: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     139: pop
     140: iinc          5, 1
     143: goto          31
     146: aload_1
     147: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     150: areturn

  static java.lang.ref.ReferenceQueue access$200(io.netty.util.ResourceLeakDetector);
    Code:
       0: aload_0
       1: getfield      #4                  // Field refQueue:Ljava/lang/ref/ReferenceQueue;
       4: areturn

  static io.netty.util.ResourceLeakDetector$DefaultResourceLeak access$300(io.netty.util.ResourceLeakDetector);
    Code:
       0: aload_0
       1: getfield      #3                  // Field head:Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;
       4: areturn

  static long access$408(io.netty.util.ResourceLeakDetector);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field active:J
       5: dup2_x1
       6: lconst_1
       7: ladd
       8: putfield      #2                  // Field active:J
      11: lreturn

  static int access$500();
    Code:
       0: getstatic     #1                  // Field MAX_RECORDS:I
       3: ireturn

  static long access$410(io.netty.util.ResourceLeakDetector);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field active:J
       5: dup2_x1
       6: lconst_1
       7: lsub
       8: putfield      #2                  // Field active:J
      11: lreturn

  static {};
    Code:
       0: getstatic     #5                  // Field io/netty/util/ResourceLeakDetector$Level.SIMPLE:Lio/netty/util/ResourceLeakDetector$Level;
       3: putstatic     #84                 // Field DEFAULT_LEVEL:Lio/netty/util/ResourceLeakDetector$Level;
       6: ldc_w         #85                 // class io/netty/util/ResourceLeakDetector
       9: invokestatic  #86                 // Method io/netty/util/internal/logging/InternalLoggerFactory.getInstance:(Ljava/lang/Class;)Lio/netty/util/internal/logging/InternalLogger;
      12: putstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      15: ldc           #87                 // String io.netty.noResourceLeakDetection
      17: invokestatic  #88                 // Method io/netty/util/internal/SystemPropertyUtil.get:(Ljava/lang/String;)Ljava/lang/String;
      20: ifnull        68
      23: ldc           #87                 // String io.netty.noResourceLeakDetection
      25: iconst_0
      26: invokestatic  #89                 // Method io/netty/util/internal/SystemPropertyUtil.getBoolean:(Ljava/lang/String;Z)Z
      29: istore_0
      30: getstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      33: ldc           #90                 // String -Dio.netty.noResourceLeakDetection: {}
      35: iload_0
      36: invokestatic  #91                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      39: invokeinterface #92,  3           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      44: getstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      47: ldc           #93                 // String -Dio.netty.noResourceLeakDetection is deprecated. Use \'-D{}={}\' instead.
      49: ldc           #67                 // String io.netty.leakDetection.level
      51: getstatic     #84                 // Field DEFAULT_LEVEL:Lio/netty/util/ResourceLeakDetector$Level;
      54: invokevirtual #69                 // Method io/netty/util/ResourceLeakDetector$Level.name:()Ljava/lang/String;
      57: invokevirtual #70                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      60: invokeinterface #94,  4           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      65: goto          70
      68: iconst_0
      69: istore_0
      70: iload_0
      71: ifeq          80
      74: getstatic     #6                  // Field io/netty/util/ResourceLeakDetector$Level.DISABLED:Lio/netty/util/ResourceLeakDetector$Level;
      77: goto          83
      80: getstatic     #84                 // Field DEFAULT_LEVEL:Lio/netty/util/ResourceLeakDetector$Level;
      83: astore_1
      84: ldc           #95                 // String io.netty.leakDetectionLevel
      86: aload_1
      87: invokevirtual #69                 // Method io/netty/util/ResourceLeakDetector$Level.name:()Ljava/lang/String;
      90: invokestatic  #96                 // Method io/netty/util/internal/SystemPropertyUtil.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      93: invokevirtual #97                 // Method java/lang/String.trim:()Ljava/lang/String;
      96: invokevirtual #98                 // Method java/lang/String.toUpperCase:()Ljava/lang/String;
      99: astore_2
     100: ldc           #67                 // String io.netty.leakDetection.level
     102: aload_2
     103: invokestatic  #96                 // Method io/netty/util/internal/SystemPropertyUtil.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     106: invokevirtual #97                 // Method java/lang/String.trim:()Ljava/lang/String;
     109: invokevirtual #98                 // Method java/lang/String.toUpperCase:()Ljava/lang/String;
     112: astore_2
     113: getstatic     #84                 // Field DEFAULT_LEVEL:Lio/netty/util/ResourceLeakDetector$Level;
     116: astore_3
     117: ldc_w         #99                 // class io/netty/util/ResourceLeakDetector$Level
     120: invokestatic  #100                // Method java/util/EnumSet.allOf:(Ljava/lang/Class;)Ljava/util/EnumSet;
     123: invokevirtual #101                // Method java/util/EnumSet.iterator:()Ljava/util/Iterator;
     126: astore        4
     128: aload         4
     130: invokeinterface #102,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     135: ifeq          183
     138: aload         4
     140: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     145: checkcast     #99                 // class io/netty/util/ResourceLeakDetector$Level
     148: astore        5
     150: aload_2
     151: aload         5
     153: invokevirtual #69                 // Method io/netty/util/ResourceLeakDetector$Level.name:()Ljava/lang/String;
     156: invokevirtual #104                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     159: ifne          177
     162: aload_2
     163: aload         5
     165: invokevirtual #9                  // Method io/netty/util/ResourceLeakDetector$Level.ordinal:()I
     168: invokestatic  #105                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
     171: invokevirtual #104                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     174: ifeq          180
     177: aload         5
     179: astore_3
     180: goto          128
     183: ldc           #106                // String io.netty.leakDetection.maxRecords
     185: iconst_4
     186: invokestatic  #107                // Method io/netty/util/internal/SystemPropertyUtil.getInt:(Ljava/lang/String;I)I
     189: putstatic     #1                  // Field MAX_RECORDS:I
     192: aload_3
     193: putstatic     #13                 // Field level:Lio/netty/util/ResourceLeakDetector$Level;
     196: getstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
     199: invokeinterface #108,  1          // InterfaceMethod io/netty/util/internal/logging/InternalLogger.isDebugEnabled:()Z
     204: ifeq          244
     207: getstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
     210: ldc           #109                // String -D{}: {}
     212: ldc           #67                 // String io.netty.leakDetection.level
     214: aload_3
     215: invokevirtual #69                 // Method io/netty/util/ResourceLeakDetector$Level.name:()Ljava/lang/String;
     218: invokevirtual #70                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     221: invokeinterface #110,  4          // InterfaceMethod io/netty/util/internal/logging/InternalLogger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     226: getstatic     #50                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
     229: ldc           #109                // String -D{}: {}
     231: ldc           #106                // String io.netty.leakDetection.maxRecords
     233: getstatic     #1                  // Field MAX_RECORDS:I
     236: invokestatic  #111                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     239: invokeinterface #110,  4          // InterfaceMethod io/netty/util/internal/logging/InternalLogger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     244: iconst_2
     245: anewarray     #112                // class java/lang/String
     248: dup
     249: iconst_0
     250: ldc           #113                // String io.netty.buffer.AbstractByteBufAllocator.toLeakAwareBuffer(
     252: aastore
     253: dup
     254: iconst_1
     255: ldc           #114                // String io.netty.buffer.AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation(
     257: aastore
     258: putstatic     #80                 // Field STACK_TRACE_ELEMENT_EXCLUSIONS:[Ljava/lang/String;
     261: return
}
