Compiled from "SimpleChannelPool.java"
public class io.netty.channel.pool.SimpleChannelPool implements io.netty.channel.pool.ChannelPool {
  private static final io.netty.util.AttributeKey<io.netty.channel.pool.SimpleChannelPool> POOL_KEY;

  private static final java.lang.IllegalStateException FULL_EXCEPTION;

  private static final java.lang.IllegalStateException UNHEALTHY_NON_OFFERED_TO_POOL;

  private final java.util.Deque<io.netty.channel.Channel> deque;

  private final io.netty.channel.pool.ChannelPoolHandler handler;

  private final io.netty.channel.pool.ChannelHealthChecker healthCheck;

  private final io.netty.bootstrap.Bootstrap bootstrap;

  private final boolean releaseHealthCheck;

  static final boolean $assertionsDisabled;

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #6                  // Field io/netty/channel/pool/ChannelHealthChecker.ACTIVE:Lio/netty/channel/pool/ChannelHealthChecker;
       6: invokespecial #7                  // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;)V
       9: return

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iconst_1
       5: invokespecial #8                  // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;Z)V
       8: return

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, boolean);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #10                 // Method io/netty/util/internal/PlatformDependent.newConcurrentDeque:()Ljava/util/Deque;
       8: putfield      #11                 // Field deque:Ljava/util/Deque;
      11: aload_0
      12: aload_2
      13: ldc           #12                 // String handler
      15: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      18: checkcast     #14                 // class io/netty/channel/pool/ChannelPoolHandler
      21: putfield      #15                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      24: aload_0
      25: aload_3
      26: ldc           #16                 // String healthCheck
      28: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      31: checkcast     #17                 // class io/netty/channel/pool/ChannelHealthChecker
      34: putfield      #18                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
      37: aload_0
      38: iload         4
      40: putfield      #19                 // Field releaseHealthCheck:Z
      43: aload_0
      44: aload_1
      45: ldc           #20                 // String bootstrap
      47: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      50: checkcast     #21                 // class io/netty/bootstrap/Bootstrap
      53: invokevirtual #22                 // Method io/netty/bootstrap/Bootstrap.clone:()Lio/netty/bootstrap/Bootstrap;
      56: putfield      #23                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
      59: aload_0
      60: getfield      #23                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
      63: new           #24                 // class io/netty/channel/pool/SimpleChannelPool$1
      66: dup
      67: aload_0
      68: aload_2
      69: invokespecial #25                 // Method io/netty/channel/pool/SimpleChannelPool$1."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/pool/ChannelPoolHandler;)V
      72: invokevirtual #26                 // Method io/netty/bootstrap/Bootstrap.handler:(Lio/netty/channel/ChannelHandler;)Lio/netty/bootstrap/AbstractBootstrap;
      75: pop
      76: return

  public final io.netty.util.concurrent.Future<io.netty.channel.Channel> acquire();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #23                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
       5: invokevirtual #27                 // Method io/netty/bootstrap/Bootstrap.group:()Lio/netty/channel/EventLoopGroup;
       8: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/EventLoopGroup.next:()Lio/netty/channel/EventLoop;
      13: invokeinterface #29,  1           // InterfaceMethod io/netty/channel/EventLoop.newPromise:()Lio/netty/util/concurrent/Promise;
      18: invokevirtual #30                 // Method acquire:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      21: areturn

  public io.netty.util.concurrent.Future<io.netty.channel.Channel> acquire(io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_1
       1: ldc           #31                 // String promise
       3: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokespecial #32                 // Method acquireHealthyFromPoolOrNew:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      12: areturn

  private io.netty.util.concurrent.Future<io.netty.channel.Channel> acquireHealthyFromPoolOrNew(io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method pollChannel:()Lio/netty/channel/Channel;
       4: astore_2
       5: aload_2
       6: ifnonnull     71
       9: aload_0
      10: getfield      #23                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
      13: invokevirtual #22                 // Method io/netty/bootstrap/Bootstrap.clone:()Lio/netty/bootstrap/Bootstrap;
      16: astore_3
      17: aload_3
      18: getstatic     #34                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      21: aload_0
      22: invokevirtual #35                 // Method io/netty/bootstrap/Bootstrap.attr:(Lio/netty/util/AttributeKey;Ljava/lang/Object;)Lio/netty/bootstrap/AbstractBootstrap;
      25: pop
      26: aload_0
      27: aload_3
      28: invokevirtual #36                 // Method connectChannel:(Lio/netty/bootstrap/Bootstrap;)Lio/netty/channel/ChannelFuture;
      31: astore        4
      33: aload         4
      35: invokeinterface #37,  1           // InterfaceMethod io/netty/channel/ChannelFuture.isDone:()Z
      40: ifeq          52
      43: aload         4
      45: aload_1
      46: invokestatic  #5                  // Method notifyConnect:(Lio/netty/channel/ChannelFuture;Lio/netty/util/concurrent/Promise;)V
      49: goto          69
      52: aload         4
      54: new           #38                 // class io/netty/channel/pool/SimpleChannelPool$2
      57: dup
      58: aload_0
      59: aload_1
      60: invokespecial #39                 // Method io/netty/channel/pool/SimpleChannelPool$2."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/util/concurrent/Promise;)V
      63: invokeinterface #40,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      68: pop
      69: aload_1
      70: areturn
      71: aload_2
      72: invokeinterface #41,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      77: astore_3
      78: aload_3
      79: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      84: ifeq          96
      87: aload_0
      88: aload_2
      89: aload_1
      90: invokespecial #4                  // Method doHealthCheck:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      93: goto          112
      96: aload_3
      97: new           #43                 // class io/netty/channel/pool/SimpleChannelPool$3
     100: dup
     101: aload_0
     102: aload_2
     103: aload_1
     104: invokespecial #44                 // Method io/netty/channel/pool/SimpleChannelPool$3."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
     107: invokeinterface #45,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
     112: goto          124
     115: astore_2
     116: aload_1
     117: aload_2
     118: invokeinterface #47,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setFailure:(Ljava/lang/Throwable;)Lio/netty/util/concurrent/Promise;
     123: pop
     124: aload_1
     125: areturn
    Exception table:
       from    to  target type
           0    70   115   Class java/lang/Throwable
          71   112   115   Class java/lang/Throwable

  private static void notifyConnect(io.netty.channel.ChannelFuture, io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_0
       1: invokeinterface #48,  1           // InterfaceMethod io/netty/channel/ChannelFuture.isSuccess:()Z
       6: ifeq          25
       9: aload_1
      10: aload_0
      11: invokeinterface #49,  1           // InterfaceMethod io/netty/channel/ChannelFuture.channel:()Lio/netty/channel/Channel;
      16: invokeinterface #50,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      21: pop
      22: goto          38
      25: aload_1
      26: aload_0
      27: invokeinterface #51,  1           // InterfaceMethod io/netty/channel/ChannelFuture.cause:()Ljava/lang/Throwable;
      32: invokeinterface #47,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setFailure:(Ljava/lang/Throwable;)Lio/netty/util/concurrent/Promise;
      37: pop
      38: return

  private void doHealthCheck(io.netty.channel.Channel, io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: getstatic     #52                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_1
       7: invokeinterface #41,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      12: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      17: ifne          28
      20: new           #53                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #54                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_0
      29: getfield      #18                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
      32: aload_1
      33: invokeinterface #55,  2           // InterfaceMethod io/netty/channel/pool/ChannelHealthChecker.isHealthy:(Lio/netty/channel/Channel;)Lio/netty/util/concurrent/Future;
      38: astore_3
      39: aload_3
      40: invokeinterface #56,  1           // InterfaceMethod io/netty/util/concurrent/Future.isDone:()Z
      45: ifeq          58
      48: aload_0
      49: aload_3
      50: aload_1
      51: aload_2
      52: invokespecial #3                  // Method notifyHealthCheck:(Lio/netty/util/concurrent/Future;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      55: goto          75
      58: aload_3
      59: new           #57                 // class io/netty/channel/pool/SimpleChannelPool$4
      62: dup
      63: aload_0
      64: aload_1
      65: aload_2
      66: invokespecial #58                 // Method io/netty/channel/pool/SimpleChannelPool$4."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      69: invokeinterface #59,  2           // InterfaceMethod io/netty/util/concurrent/Future.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Future;
      74: pop
      75: return

  private void notifyHealthCheck(io.netty.util.concurrent.Future<java.lang.Boolean>, io.netty.channel.Channel, io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: getstatic     #52                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_2
       7: invokeinterface #41,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      12: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      17: ifne          28
      20: new           #53                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #54                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_1
      29: invokeinterface #60,  1           // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
      34: ifeq          110
      37: aload_1
      38: invokeinterface #61,  1           // InterfaceMethod io/netty/util/concurrent/Future.getNow:()Ljava/lang/Object;
      43: getstatic     #62                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      46: if_acmpne     97
      49: aload_2
      50: getstatic     #34                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      53: invokeinterface #63,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      58: aload_0
      59: invokeinterface #64,  2           // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
      64: aload_0
      65: getfield      #15                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      68: aload_2
      69: invokeinterface #65,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelAcquired:(Lio/netty/channel/Channel;)V
      74: aload_3
      75: aload_2
      76: invokeinterface #50,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      81: pop
      82: goto          120
      85: astore        4
      87: aload_2
      88: aload         4
      90: aload_3
      91: invokestatic  #66                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      94: goto          120
      97: aload_2
      98: invokestatic  #67                 // Method closeChannel:(Lio/netty/channel/Channel;)V
     101: aload_0
     102: aload_3
     103: invokespecial #32                 // Method acquireHealthyFromPoolOrNew:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
     106: pop
     107: goto          120
     110: aload_2
     111: invokestatic  #67                 // Method closeChannel:(Lio/netty/channel/Channel;)V
     114: aload_0
     115: aload_3
     116: invokespecial #32                 // Method acquireHealthyFromPoolOrNew:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
     119: pop
     120: return
    Exception table:
       from    to  target type
          49    82    85   Class java/lang/Throwable

  protected io.netty.channel.ChannelFuture connectChannel(io.netty.bootstrap.Bootstrap);
    Code:
       0: aload_1
       1: invokevirtual #68                 // Method io/netty/bootstrap/Bootstrap.connect:()Lio/netty/channel/ChannelFuture;
       4: areturn

  public final io.netty.util.concurrent.Future<java.lang.Void> release(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: invokeinterface #41,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
       8: invokeinterface #29,  1           // InterfaceMethod io/netty/channel/EventLoop.newPromise:()Lio/netty/util/concurrent/Promise;
      13: invokevirtual #69                 // Method release:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      16: areturn

  public io.netty.util.concurrent.Future<java.lang.Void> release(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>);
    Code:
       0: aload_1
       1: ldc           #70                 // String channel
       3: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #31                 // String promise
      10: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_1
      15: invokeinterface #41,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      20: astore_3
      21: aload_3
      22: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      27: ifeq          39
      30: aload_0
      31: aload_1
      32: aload_2
      33: invokespecial #2                  // Method doReleaseChannel:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      36: goto          55
      39: aload_3
      40: new           #71                 // class io/netty/channel/pool/SimpleChannelPool$5
      43: dup
      44: aload_0
      45: aload_1
      46: aload_2
      47: invokespecial #72                 // Method io/netty/channel/pool/SimpleChannelPool$5."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      50: invokeinterface #45,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      55: goto          65
      58: astore_3
      59: aload_1
      60: aload_3
      61: aload_2
      62: invokestatic  #66                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      65: aload_2
      66: areturn
    Exception table:
       from    to  target type
          14    55    58   Class java/lang/Throwable

  private void doReleaseChannel(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>);
    Code:
       0: getstatic     #52                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_1
       7: invokeinterface #41,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      12: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      17: ifne          28
      20: new           #53                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #54                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_1
      29: getstatic     #34                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      32: invokeinterface #63,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      37: aconst_null
      38: invokeinterface #73,  2           // InterfaceMethod io/netty/util/Attribute.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      43: aload_0
      44: if_acmpeq     86
      47: aload_1
      48: new           #74                 // class java/lang/IllegalArgumentException
      51: dup
      52: new           #75                 // class java/lang/StringBuilder
      55: dup
      56: invokespecial #76                 // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #77                 // String Channel
      61: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: aload_1
      65: invokevirtual #79                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      68: ldc           #80                 // String  was not acquired from this ChannelPool
      70: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: invokevirtual #81                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      76: invokespecial #82                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      79: aload_2
      80: invokestatic  #66                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      83: goto          118
      86: aload_0
      87: getfield      #19                 // Field releaseHealthCheck:Z
      90: ifeq          102
      93: aload_0
      94: aload_1
      95: aload_2
      96: invokespecial #83                 // Method doHealthCheckOnRelease:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      99: goto          108
     102: aload_0
     103: aload_1
     104: aload_2
     105: invokespecial #84                 // Method releaseAndOffer:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
     108: goto          118
     111: astore_3
     112: aload_1
     113: aload_3
     114: aload_2
     115: invokestatic  #66                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
     118: return
    Exception table:
       from    to  target type
          86   108   111   Class java/lang/Throwable

  private void doHealthCheckOnRelease(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #18                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
       4: aload_1
       5: invokeinterface #55,  2           // InterfaceMethod io/netty/channel/pool/ChannelHealthChecker.isHealthy:(Lio/netty/channel/Channel;)Lio/netty/util/concurrent/Future;
      10: astore_3
      11: aload_3
      12: invokeinterface #56,  1           // InterfaceMethod io/netty/util/concurrent/Future.isDone:()Z
      17: ifeq          30
      20: aload_0
      21: aload_1
      22: aload_2
      23: aload_3
      24: invokespecial #1                  // Method releaseAndOfferIfHealthy:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;Lio/netty/util/concurrent/Future;)V
      27: goto          48
      30: aload_3
      31: new           #85                 // class io/netty/channel/pool/SimpleChannelPool$6
      34: dup
      35: aload_0
      36: aload_1
      37: aload_2
      38: aload_3
      39: invokespecial #86                 // Method io/netty/channel/pool/SimpleChannelPool$6."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;Lio/netty/util/concurrent/Future;)V
      42: invokeinterface #59,  2           // InterfaceMethod io/netty/util/concurrent/Future.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Future;
      47: pop
      48: return

  private void releaseAndOfferIfHealthy(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>, io.netty.util.concurrent.Future<java.lang.Boolean>) throws java.lang.Exception;
    Code:
       0: aload_3
       1: invokeinterface #61,  1           // InterfaceMethod io/netty/util/concurrent/Future.getNow:()Ljava/lang/Object;
       6: checkcast     #87                 // class java/lang/Boolean
       9: invokevirtual #88                 // Method java/lang/Boolean.booleanValue:()Z
      12: ifeq          24
      15: aload_0
      16: aload_1
      17: aload_2
      18: invokespecial #84                 // Method releaseAndOffer:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      21: goto          42
      24: aload_0
      25: getfield      #15                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      28: aload_1
      29: invokeinterface #89,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelReleased:(Lio/netty/channel/Channel;)V
      34: aload_1
      35: getstatic     #90                 // Field UNHEALTHY_NON_OFFERED_TO_POOL:Ljava/lang/IllegalStateException;
      38: aload_2
      39: invokestatic  #66                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      42: return

  private void releaseAndOffer(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #91                 // Method offerChannel:(Lio/netty/channel/Channel;)Z
       5: ifeq          29
       8: aload_0
       9: getfield      #15                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      12: aload_1
      13: invokeinterface #89,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelReleased:(Lio/netty/channel/Channel;)V
      18: aload_2
      19: aconst_null
      20: invokeinterface #50,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      25: pop
      26: goto          37
      29: aload_1
      30: getstatic     #92                 // Field FULL_EXCEPTION:Ljava/lang/IllegalStateException;
      33: aload_2
      34: invokestatic  #66                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      37: return

  private static void closeChannel(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: getstatic     #34                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
       4: invokeinterface #63,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
       9: aconst_null
      10: invokeinterface #73,  2           // InterfaceMethod io/netty/util/Attribute.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: aload_0
      17: invokeinterface #93,  1           // InterfaceMethod io/netty/channel/Channel.close:()Lio/netty/channel/ChannelFuture;
      22: pop
      23: return

  private static void closeAndFail(io.netty.channel.Channel, java.lang.Throwable, io.netty.util.concurrent.Promise<?>);
    Code:
       0: aload_0
       1: invokestatic  #67                 // Method closeChannel:(Lio/netty/channel/Channel;)V
       4: aload_2
       5: aload_1
       6: invokeinterface #47,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setFailure:(Ljava/lang/Throwable;)Lio/netty/util/concurrent/Promise;
      11: pop
      12: return

  protected io.netty.channel.Channel pollChannel();
    Code:
       0: aload_0
       1: getfield      #11                 // Field deque:Ljava/util/Deque;
       4: invokeinterface #94,  1           // InterfaceMethod java/util/Deque.pollLast:()Ljava/lang/Object;
       9: checkcast     #95                 // class io/netty/channel/Channel
      12: areturn

  protected boolean offerChannel(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: getfield      #11                 // Field deque:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #96,  2           // InterfaceMethod java/util/Deque.offer:(Ljava/lang/Object;)Z
      10: ireturn

  public void close();
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method pollChannel:()Lio/netty/channel/Channel;
       4: astore_1
       5: aload_1
       6: ifnonnull     12
       9: goto          22
      12: aload_1
      13: invokeinterface #93,  1           // InterfaceMethod io/netty/channel/Channel.close:()Lio/netty/channel/ChannelFuture;
      18: pop
      19: goto          0
      22: return

  static void access$000(io.netty.channel.ChannelFuture, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #5                  // Method notifyConnect:(Lio/netty/channel/ChannelFuture;Lio/netty/util/concurrent/Promise;)V
       5: return

  static void access$100(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method doHealthCheck:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
       6: return

  static void access$200(io.netty.channel.pool.SimpleChannelPool, io.netty.util.concurrent.Future, io.netty.channel.Channel, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #3                  // Method notifyHealthCheck:(Lio/netty/util/concurrent/Future;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
       7: return

  static void access$300(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #2                  // Method doReleaseChannel:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
       6: return

  static void access$400(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method releaseAndOfferIfHealthy:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;Lio/netty/util/concurrent/Future;)V
       7: return

  static {};
    Code:
       0: ldc_w         #97                 // class io/netty/channel/pool/SimpleChannelPool
       3: invokevirtual #98                 // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #52                 // Field $assertionsDisabled:Z
      17: ldc           #99                 // String channelPool
      19: invokestatic  #100                // Method io/netty/util/AttributeKey.newInstance:(Ljava/lang/String;)Lio/netty/util/AttributeKey;
      22: putstatic     #34                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      25: new           #101                // class java/lang/IllegalStateException
      28: dup
      29: ldc           #102                // String ChannelPool full
      31: invokespecial #103                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      34: putstatic     #92                 // Field FULL_EXCEPTION:Ljava/lang/IllegalStateException;
      37: new           #101                // class java/lang/IllegalStateException
      40: dup
      41: ldc           #104                // String Channel is unhealthy not offering it back to pool
      43: invokespecial #103                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      46: putstatic     #90                 // Field UNHEALTHY_NON_OFFERED_TO_POOL:Ljava/lang/IllegalStateException;
      49: getstatic     #92                 // Field FULL_EXCEPTION:Ljava/lang/IllegalStateException;
      52: getstatic     #105                // Field io/netty/util/internal/EmptyArrays.EMPTY_STACK_TRACE:[Ljava/lang/StackTraceElement;
      55: invokevirtual #106                // Method java/lang/IllegalStateException.setStackTrace:([Ljava/lang/StackTraceElement;)V
      58: getstatic     #90                 // Field UNHEALTHY_NON_OFFERED_TO_POOL:Ljava/lang/IllegalStateException;
      61: getstatic     #105                // Field io/netty/util/internal/EmptyArrays.EMPTY_STACK_TRACE:[Ljava/lang/StackTraceElement;
      64: invokevirtual #106                // Method java/lang/IllegalStateException.setStackTrace:([Ljava/lang/StackTraceElement;)V
      67: return
}
