Compiled from "AbstractNioChannel.java"
public abstract class io.netty.channel.nio.AbstractNioChannel extends io.netty.channel.AbstractChannel {
  private static final io.netty.util.internal.logging.InternalLogger logger;

  private static final java.nio.channels.ClosedChannelException CLOSED_CHANNEL_EXCEPTION;

  private final java.nio.channels.SelectableChannel ch;

  protected final int readInterestOp;

  volatile java.nio.channels.SelectionKey selectionKey;

  private volatile boolean inputShutdown;

  private volatile boolean readPending;

  private io.netty.channel.ChannelPromise connectPromise;

  private java.util.concurrent.ScheduledFuture<?> connectTimeoutFuture;

  private java.net.SocketAddress requestedRemoteAddress;

  static final boolean $assertionsDisabled;

  protected io.netty.channel.nio.AbstractNioChannel(io.netty.channel.Channel, java.nio.channels.SelectableChannel, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method io/netty/channel/AbstractChannel."<init>":(Lio/netty/channel/Channel;)V
       5: aload_0
       6: aload_2
       7: putfield      #5                  // Field ch:Ljava/nio/channels/SelectableChannel;
      10: aload_0
      11: iload_3
      12: putfield      #6                  // Field readInterestOp:I
      15: aload_2
      16: iconst_0
      17: invokevirtual #7                  // Method java/nio/channels/SelectableChannel.configureBlocking:(Z)Ljava/nio/channels/SelectableChannel;
      20: pop
      21: goto          70
      24: astore        4
      26: aload_2
      27: invokevirtual #9                  // Method java/nio/channels/SelectableChannel.close:()V
      30: goto          58
      33: astore        5
      35: getstatic     #10                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      38: invokeinterface #11,  1           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.isWarnEnabled:()Z
      43: ifeq          58
      46: getstatic     #10                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      49: ldc           #12                 // String Failed to close a partially initialized socket.
      51: aload         5
      53: invokeinterface #13,  3           // InterfaceMethod io/netty/util/internal/logging/InternalLogger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      58: new           #14                 // class io/netty/channel/ChannelException
      61: dup
      62: ldc           #15                 // String Failed to enter non-blocking mode.
      64: aload         4
      66: invokespecial #16                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      69: athrow
      70: return
    Exception table:
       from    to  target type
          15    21    24   Class java/io/IOException
          26    30    33   Class java/io/IOException

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #5                  // Field ch:Ljava/nio/channels/SelectableChannel;
       4: invokevirtual #17                 // Method java/nio/channels/SelectableChannel.isOpen:()Z
       7: ireturn

  public io.netty.channel.nio.AbstractNioChannel$NioUnsafe unsafe();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method io/netty/channel/AbstractChannel.unsafe:()Lio/netty/channel/Channel$Unsafe;
       4: checkcast     #19                 // class io/netty/channel/nio/AbstractNioChannel$NioUnsafe
       7: areturn

  protected java.nio.channels.SelectableChannel javaChannel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field ch:Ljava/nio/channels/SelectableChannel;
       4: areturn

  public io.netty.channel.nio.NioEventLoop eventLoop();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method io/netty/channel/AbstractChannel.eventLoop:()Lio/netty/channel/EventLoop;
       4: checkcast     #21                 // class io/netty/channel/nio/NioEventLoop
       7: areturn

  protected java.nio.channels.SelectionKey selectionKey();
    Code:
       0: getstatic     #22                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #23                 // Field selectionKey:Ljava/nio/channels/SelectionKey;
      10: ifnonnull     21
      13: new           #24                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #25                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #23                 // Field selectionKey:Ljava/nio/channels/SelectionKey;
      25: areturn

  protected boolean isReadPending();
    Code:
       0: aload_0
       1: getfield      #26                 // Field readPending:Z
       4: ireturn

  protected void setReadPending(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field readPending:Z
       5: return

  protected boolean isInputShutdown();
    Code:
       0: aload_0
       1: getfield      #27                 // Field inputShutdown:Z
       4: ireturn

  void setInputShutdown();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #27                 // Field inputShutdown:Z
       5: return

  protected boolean isCompatible(io.netty.channel.EventLoop);
    Code:
       0: aload_1
       1: instanceof    #21                 // class io/netty/channel/nio/NioEventLoop
       4: ireturn

  protected void doRegister() throws java.lang.Exception;
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: aload_0
       4: invokevirtual #28                 // Method javaChannel:()Ljava/nio/channels/SelectableChannel;
       7: aload_0
       8: invokevirtual #29                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
      11: getfield      #30                 // Field io/netty/channel/nio/NioEventLoop.selector:Ljava/nio/channels/Selector;
      14: iconst_0
      15: aload_0
      16: invokevirtual #31                 // Method java/nio/channels/SelectableChannel.register:(Ljava/nio/channels/Selector;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey;
      19: putfield      #23                 // Field selectionKey:Ljava/nio/channels/SelectionKey;
      22: return
      23: astore_2
      24: iload_1
      25: ifne          40
      28: aload_0
      29: invokevirtual #29                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
      32: invokevirtual #33                 // Method io/netty/channel/nio/NioEventLoop.selectNow:()V
      35: iconst_1
      36: istore_1
      37: goto          42
      40: aload_2
      41: athrow
      42: goto          2
    Exception table:
       from    to  target type
           2    22    23   Class java/nio/channels/CancelledKeyException

  protected void doDeregister() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
       4: aload_0
       5: invokevirtual #34                 // Method selectionKey:()Ljava/nio/channels/SelectionKey;
       8: invokevirtual #35                 // Method io/netty/channel/nio/NioEventLoop.cancel:(Ljava/nio/channels/SelectionKey;)V
      11: return

  protected void doBeginRead() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #27                 // Field inputShutdown:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #23                 // Field selectionKey:Ljava/nio/channels/SelectionKey;
      12: astore_1
      13: aload_1
      14: invokevirtual #36                 // Method java/nio/channels/SelectionKey.isValid:()Z
      17: ifne          21
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #26                 // Field readPending:Z
      26: aload_1
      27: invokevirtual #37                 // Method java/nio/channels/SelectionKey.interestOps:()I
      30: istore_2
      31: iload_2
      32: aload_0
      33: getfield      #6                  // Field readInterestOp:I
      36: iand
      37: ifne          51
      40: aload_1
      41: iload_2
      42: aload_0
      43: getfield      #6                  // Field readInterestOp:I
      46: ior
      47: invokevirtual #38                 // Method java/nio/channels/SelectionKey.interestOps:(I)Ljava/nio/channels/SelectionKey;
      50: pop
      51: return

  protected abstract boolean doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception;

  protected abstract void doFinishConnect() throws java.lang.Exception;

  protected final io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf);
    Code:
       0: aload_1
       1: invokevirtual #39                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       4: istore_2
       5: iload_2
       6: ifne          17
       9: aload_1
      10: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      13: getstatic     #41                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      16: areturn
      17: aload_0
      18: invokevirtual #42                 // Method alloc:()Lio/netty/buffer/ByteBufAllocator;
      21: astore_3
      22: aload_3
      23: invokeinterface #43,  1           // InterfaceMethod io/netty/buffer/ByteBufAllocator.isDirectBufferPooled:()Z
      28: ifeq          59
      31: aload_3
      32: iload_2
      33: invokeinterface #44,  2           // InterfaceMethod io/netty/buffer/ByteBufAllocator.directBuffer:(I)Lio/netty/buffer/ByteBuf;
      38: astore        4
      40: aload         4
      42: aload_1
      43: aload_1
      44: invokevirtual #45                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      47: iload_2
      48: invokevirtual #46                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      51: pop
      52: aload_1
      53: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      56: aload         4
      58: areturn
      59: invokestatic  #47                 // Method io/netty/buffer/ByteBufUtil.threadLocalDirectBuffer:()Lio/netty/buffer/ByteBuf;
      62: astore        4
      64: aload         4
      66: ifnull        88
      69: aload         4
      71: aload_1
      72: aload_1
      73: invokevirtual #45                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      76: iload_2
      77: invokevirtual #46                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      80: pop
      81: aload_1
      82: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      85: aload         4
      87: areturn
      88: aload_1
      89: areturn

  protected final io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted, io.netty.buffer.ByteBuf);
    Code:
       0: aload_2
       1: invokevirtual #39                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       4: istore_3
       5: iload_3
       6: ifne          17
       9: aload_1
      10: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      13: getstatic     #41                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      16: areturn
      17: aload_0
      18: invokevirtual #42                 // Method alloc:()Lio/netty/buffer/ByteBufAllocator;
      21: astore        4
      23: aload         4
      25: invokeinterface #43,  1           // InterfaceMethod io/netty/buffer/ByteBufAllocator.isDirectBufferPooled:()Z
      30: ifeq          62
      33: aload         4
      35: iload_3
      36: invokeinterface #44,  2           // InterfaceMethod io/netty/buffer/ByteBufAllocator.directBuffer:(I)Lio/netty/buffer/ByteBuf;
      41: astore        5
      43: aload         5
      45: aload_2
      46: aload_2
      47: invokevirtual #45                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      50: iload_3
      51: invokevirtual #46                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      54: pop
      55: aload_1
      56: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      59: aload         5
      61: areturn
      62: invokestatic  #47                 // Method io/netty/buffer/ByteBufUtil.threadLocalDirectBuffer:()Lio/netty/buffer/ByteBuf;
      65: astore        5
      67: aload         5
      69: ifnull        91
      72: aload         5
      74: aload_2
      75: aload_2
      76: invokevirtual #45                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      79: iload_3
      80: invokevirtual #46                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      83: pop
      84: aload_1
      85: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      88: aload         5
      90: areturn
      91: aload_1
      92: aload_2
      93: if_acmpeq     105
      96: aload_2
      97: invokevirtual #48                 // Method io/netty/buffer/ByteBuf.retain:()Lio/netty/buffer/ByteBuf;
     100: pop
     101: aload_1
     102: invokestatic  #40                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
     105: aload_2
     106: areturn

  protected void doClose() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #3                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
       4: astore_1
       5: aload_1
       6: ifnull        24
       9: aload_1
      10: getstatic     #49                 // Field CLOSED_CHANNEL_EXCEPTION:Ljava/nio/channels/ClosedChannelException;
      13: invokeinterface #50,  2           // InterfaceMethod io/netty/channel/ChannelPromise.tryFailure:(Ljava/lang/Throwable;)Z
      18: pop
      19: aload_0
      20: aconst_null
      21: putfield      #3                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
      24: aload_0
      25: getfield      #1                  // Field connectTimeoutFuture:Ljava/util/concurrent/ScheduledFuture;
      28: astore_2
      29: aload_2
      30: ifnull        46
      33: aload_2
      34: iconst_0
      35: invokeinterface #51,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      40: pop
      41: aload_0
      42: aconst_null
      43: putfield      #1                  // Field connectTimeoutFuture:Ljava/util/concurrent/ScheduledFuture;
      46: return

  public io.netty.channel.Channel$Unsafe unsafe();
    Code:
       0: aload_0
       1: invokevirtual #52                 // Method unsafe:()Lio/netty/channel/nio/AbstractNioChannel$NioUnsafe;
       4: areturn

  public io.netty.channel.EventLoop eventLoop();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method eventLoop:()Lio/netty/channel/nio/NioEventLoop;
       4: areturn

  static io.netty.channel.ChannelPromise access$000(io.netty.channel.nio.AbstractNioChannel);
    Code:
       0: aload_0
       1: getfield      #3                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
       4: areturn

  static io.netty.channel.ChannelPromise access$002(io.netty.channel.nio.AbstractNioChannel, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #3                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
       6: areturn

  static java.net.SocketAddress access$102(io.netty.channel.nio.AbstractNioChannel, java.net.SocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field requestedRemoteAddress:Ljava/net/SocketAddress;
       6: areturn

  static java.util.concurrent.ScheduledFuture access$202(io.netty.channel.nio.AbstractNioChannel, java.util.concurrent.ScheduledFuture);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field connectTimeoutFuture:Ljava/util/concurrent/ScheduledFuture;
       6: areturn

  static java.util.concurrent.ScheduledFuture access$200(io.netty.channel.nio.AbstractNioChannel);
    Code:
       0: aload_0
       1: getfield      #1                  // Field connectTimeoutFuture:Ljava/util/concurrent/ScheduledFuture;
       4: areturn

  static java.net.SocketAddress access$100(io.netty.channel.nio.AbstractNioChannel);
    Code:
       0: aload_0
       1: getfield      #2                  // Field requestedRemoteAddress:Ljava/net/SocketAddress;
       4: areturn

  static {};
    Code:
       0: ldc_w         #53                 // class io/netty/channel/nio/AbstractNioChannel
       3: invokevirtual #54                 // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #22                 // Field $assertionsDisabled:Z
      17: ldc_w         #53                 // class io/netty/channel/nio/AbstractNioChannel
      20: invokestatic  #55                 // Method io/netty/util/internal/logging/InternalLoggerFactory.getInstance:(Ljava/lang/Class;)Lio/netty/util/internal/logging/InternalLogger;
      23: putstatic     #10                 // Field logger:Lio/netty/util/internal/logging/InternalLogger;
      26: new           #56                 // class java/nio/channels/ClosedChannelException
      29: dup
      30: invokespecial #57                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      33: putstatic     #49                 // Field CLOSED_CHANNEL_EXCEPTION:Ljava/nio/channels/ClosedChannelException;
      36: getstatic     #49                 // Field CLOSED_CHANNEL_EXCEPTION:Ljava/nio/channels/ClosedChannelException;
      39: getstatic     #58                 // Field io/netty/util/internal/EmptyArrays.EMPTY_STACK_TRACE:[Ljava/lang/StackTraceElement;
      42: invokevirtual #59                 // Method java/nio/channels/ClosedChannelException.setStackTrace:([Ljava/lang/StackTraceElement;)V
      45: return
}
