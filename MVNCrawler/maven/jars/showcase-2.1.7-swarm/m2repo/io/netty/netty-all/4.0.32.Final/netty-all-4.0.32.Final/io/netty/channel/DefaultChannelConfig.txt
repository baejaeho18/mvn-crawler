Compiled from "DefaultChannelConfig.java"
public class io.netty.channel.DefaultChannelConfig implements io.netty.channel.ChannelConfig {
  private static final io.netty.channel.RecvByteBufAllocator DEFAULT_RCVBUF_ALLOCATOR;

  private static final io.netty.channel.MessageSizeEstimator DEFAULT_MSG_SIZE_ESTIMATOR;

  private static final int DEFAULT_CONNECT_TIMEOUT;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.netty.channel.DefaultChannelConfig> AUTOREAD_UPDATER;

  protected final io.netty.channel.Channel channel;

  private volatile io.netty.buffer.ByteBufAllocator allocator;

  private volatile io.netty.channel.RecvByteBufAllocator rcvBufAllocator;

  private volatile io.netty.channel.MessageSizeEstimator msgSizeEstimator;

  private volatile int connectTimeoutMillis;

  private volatile int maxMessagesPerRead;

  private volatile int writeSpinCount;

  private volatile int autoRead;

  private volatile boolean autoClose;

  private volatile int writeBufferHighWaterMark;

  private volatile int writeBufferLowWaterMark;

  public io.netty.channel.DefaultChannelConfig(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field io/netty/buffer/ByteBufAllocator.DEFAULT:Lio/netty/buffer/ByteBufAllocator;
       8: putfield      #3                  // Field allocator:Lio/netty/buffer/ByteBufAllocator;
      11: aload_0
      12: getstatic     #4                  // Field DEFAULT_RCVBUF_ALLOCATOR:Lio/netty/channel/RecvByteBufAllocator;
      15: putfield      #5                  // Field rcvBufAllocator:Lio/netty/channel/RecvByteBufAllocator;
      18: aload_0
      19: getstatic     #6                  // Field DEFAULT_MSG_SIZE_ESTIMATOR:Lio/netty/channel/MessageSizeEstimator;
      22: putfield      #7                  // Field msgSizeEstimator:Lio/netty/channel/MessageSizeEstimator;
      25: aload_0
      26: sipush        30000
      29: putfield      #8                  // Field connectTimeoutMillis:I
      32: aload_0
      33: bipush        16
      35: putfield      #9                  // Field writeSpinCount:I
      38: aload_0
      39: iconst_1
      40: putfield      #10                 // Field autoRead:I
      43: aload_0
      44: iconst_1
      45: putfield      #11                 // Field autoClose:Z
      48: aload_0
      49: ldc           #12                 // int 65536
      51: putfield      #13                 // Field writeBufferHighWaterMark:I
      54: aload_0
      55: ldc           #14                 // int 32768
      57: putfield      #15                 // Field writeBufferLowWaterMark:I
      60: aload_1
      61: ifnonnull     74
      64: new           #16                 // class java/lang/NullPointerException
      67: dup
      68: ldc           #17                 // String channel
      70: invokespecial #18                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      73: athrow
      74: aload_0
      75: aload_1
      76: putfield      #19                 // Field channel:Lio/netty/channel/Channel;
      79: aload_1
      80: instanceof    #20                 // class io/netty/channel/ServerChannel
      83: ifne          93
      86: aload_1
      87: instanceof    #21                 // class io/netty/channel/nio/AbstractNioByteChannel
      90: ifeq          102
      93: aload_0
      94: bipush        16
      96: putfield      #22                 // Field maxMessagesPerRead:I
      99: goto          107
     102: aload_0
     103: iconst_1
     104: putfield      #22                 // Field maxMessagesPerRead:I
     107: return

  public java.util.Map<io.netty.channel.ChannelOption<?>, java.lang.Object> getOptions();
    Code:
       0: aload_0
       1: aconst_null
       2: bipush        10
       4: anewarray     #23                 // class io/netty/channel/ChannelOption
       7: dup
       8: iconst_0
       9: getstatic     #24                 // Field io/netty/channel/ChannelOption.CONNECT_TIMEOUT_MILLIS:Lio/netty/channel/ChannelOption;
      12: aastore
      13: dup
      14: iconst_1
      15: getstatic     #25                 // Field io/netty/channel/ChannelOption.MAX_MESSAGES_PER_READ:Lio/netty/channel/ChannelOption;
      18: aastore
      19: dup
      20: iconst_2
      21: getstatic     #26                 // Field io/netty/channel/ChannelOption.WRITE_SPIN_COUNT:Lio/netty/channel/ChannelOption;
      24: aastore
      25: dup
      26: iconst_3
      27: getstatic     #27                 // Field io/netty/channel/ChannelOption.ALLOCATOR:Lio/netty/channel/ChannelOption;
      30: aastore
      31: dup
      32: iconst_4
      33: getstatic     #28                 // Field io/netty/channel/ChannelOption.AUTO_READ:Lio/netty/channel/ChannelOption;
      36: aastore
      37: dup
      38: iconst_5
      39: getstatic     #29                 // Field io/netty/channel/ChannelOption.AUTO_CLOSE:Lio/netty/channel/ChannelOption;
      42: aastore
      43: dup
      44: bipush        6
      46: getstatic     #30                 // Field io/netty/channel/ChannelOption.RCVBUF_ALLOCATOR:Lio/netty/channel/ChannelOption;
      49: aastore
      50: dup
      51: bipush        7
      53: getstatic     #31                 // Field io/netty/channel/ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK:Lio/netty/channel/ChannelOption;
      56: aastore
      57: dup
      58: bipush        8
      60: getstatic     #32                 // Field io/netty/channel/ChannelOption.WRITE_BUFFER_LOW_WATER_MARK:Lio/netty/channel/ChannelOption;
      63: aastore
      64: dup
      65: bipush        9
      67: getstatic     #33                 // Field io/netty/channel/ChannelOption.MESSAGE_SIZE_ESTIMATOR:Lio/netty/channel/ChannelOption;
      70: aastore
      71: invokevirtual #34                 // Method getOptions:(Ljava/util/Map;[Lio/netty/channel/ChannelOption;)Ljava/util/Map;
      74: areturn

  protected java.util.Map<io.netty.channel.ChannelOption<?>, java.lang.Object> getOptions(java.util.Map<io.netty.channel.ChannelOption<?>, java.lang.Object>, io.netty.channel.ChannelOption<?>...);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #35                 // class java/util/IdentityHashMap
       7: dup
       8: invokespecial #36                 // Method java/util/IdentityHashMap."<init>":()V
      11: astore_1
      12: aload_2
      13: astore_3
      14: aload_3
      15: arraylength
      16: istore        4
      18: iconst_0
      19: istore        5
      21: iload         5
      23: iload         4
      25: if_icmpge     55
      28: aload_3
      29: iload         5
      31: aaload
      32: astore        6
      34: aload_1
      35: aload         6
      37: aload_0
      38: aload         6
      40: invokevirtual #37                 // Method getOption:(Lio/netty/channel/ChannelOption;)Ljava/lang/Object;
      43: invokeinterface #38,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      48: pop
      49: iinc          5, 1
      52: goto          21
      55: aload_1
      56: areturn

  public boolean setOptions(java.util.Map<io.netty.channel.ChannelOption<?>, ?>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #16                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #39                 // String options
      10: invokespecial #18                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: iconst_1
      15: istore_2
      16: aload_1
      17: invokeinterface #40,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      22: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      27: astore_3
      28: aload_3
      29: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          77
      37: aload_3
      38: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #44                 // class java/util/Map$Entry
      46: astore        4
      48: aload_0
      49: aload         4
      51: invokeinterface #45,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      56: checkcast     #23                 // class io/netty/channel/ChannelOption
      59: aload         4
      61: invokeinterface #46,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      66: invokevirtual #47                 // Method setOption:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)Z
      69: ifne          74
      72: iconst_0
      73: istore_2
      74: goto          28
      77: iload_2
      78: ireturn

  public <T> T getOption(io.netty.channel.ChannelOption<T>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #16                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #48                 // String option
      10: invokespecial #18                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: getstatic     #24                 // Field io/netty/channel/ChannelOption.CONNECT_TIMEOUT_MILLIS:Lio/netty/channel/ChannelOption;
      18: if_acmpne     29
      21: aload_0
      22: invokevirtual #49                 // Method getConnectTimeoutMillis:()I
      25: invokestatic  #50                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: areturn
      29: aload_1
      30: getstatic     #25                 // Field io/netty/channel/ChannelOption.MAX_MESSAGES_PER_READ:Lio/netty/channel/ChannelOption;
      33: if_acmpne     44
      36: aload_0
      37: invokevirtual #51                 // Method getMaxMessagesPerRead:()I
      40: invokestatic  #50                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      43: areturn
      44: aload_1
      45: getstatic     #26                 // Field io/netty/channel/ChannelOption.WRITE_SPIN_COUNT:Lio/netty/channel/ChannelOption;
      48: if_acmpne     59
      51: aload_0
      52: invokevirtual #52                 // Method getWriteSpinCount:()I
      55: invokestatic  #50                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      58: areturn
      59: aload_1
      60: getstatic     #27                 // Field io/netty/channel/ChannelOption.ALLOCATOR:Lio/netty/channel/ChannelOption;
      63: if_acmpne     71
      66: aload_0
      67: invokevirtual #53                 // Method getAllocator:()Lio/netty/buffer/ByteBufAllocator;
      70: areturn
      71: aload_1
      72: getstatic     #30                 // Field io/netty/channel/ChannelOption.RCVBUF_ALLOCATOR:Lio/netty/channel/ChannelOption;
      75: if_acmpne     83
      78: aload_0
      79: invokevirtual #54                 // Method getRecvByteBufAllocator:()Lio/netty/channel/RecvByteBufAllocator;
      82: areturn
      83: aload_1
      84: getstatic     #28                 // Field io/netty/channel/ChannelOption.AUTO_READ:Lio/netty/channel/ChannelOption;
      87: if_acmpne     98
      90: aload_0
      91: invokevirtual #55                 // Method isAutoRead:()Z
      94: invokestatic  #56                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      97: areturn
      98: aload_1
      99: getstatic     #29                 // Field io/netty/channel/ChannelOption.AUTO_CLOSE:Lio/netty/channel/ChannelOption;
     102: if_acmpne     113
     105: aload_0
     106: invokevirtual #57                 // Method isAutoClose:()Z
     109: invokestatic  #56                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     112: areturn
     113: aload_1
     114: getstatic     #31                 // Field io/netty/channel/ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK:Lio/netty/channel/ChannelOption;
     117: if_acmpne     128
     120: aload_0
     121: invokevirtual #58                 // Method getWriteBufferHighWaterMark:()I
     124: invokestatic  #50                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     127: areturn
     128: aload_1
     129: getstatic     #32                 // Field io/netty/channel/ChannelOption.WRITE_BUFFER_LOW_WATER_MARK:Lio/netty/channel/ChannelOption;
     132: if_acmpne     143
     135: aload_0
     136: invokevirtual #59                 // Method getWriteBufferLowWaterMark:()I
     139: invokestatic  #50                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     142: areturn
     143: aload_1
     144: getstatic     #33                 // Field io/netty/channel/ChannelOption.MESSAGE_SIZE_ESTIMATOR:Lio/netty/channel/ChannelOption;
     147: if_acmpne     155
     150: aload_0
     151: invokevirtual #60                 // Method getMessageSizeEstimator:()Lio/netty/channel/MessageSizeEstimator;
     154: areturn
     155: aconst_null
     156: areturn

  public <T> boolean setOption(io.netty.channel.ChannelOption<T>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #61                 // Method validate:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)V
       6: aload_1
       7: getstatic     #24                 // Field io/netty/channel/ChannelOption.CONNECT_TIMEOUT_MILLIS:Lio/netty/channel/ChannelOption;
      10: if_acmpne     28
      13: aload_0
      14: aload_2
      15: checkcast     #62                 // class java/lang/Integer
      18: invokevirtual #63                 // Method java/lang/Integer.intValue:()I
      21: invokevirtual #64                 // Method setConnectTimeoutMillis:(I)Lio/netty/channel/ChannelConfig;
      24: pop
      25: goto          219
      28: aload_1
      29: getstatic     #25                 // Field io/netty/channel/ChannelOption.MAX_MESSAGES_PER_READ:Lio/netty/channel/ChannelOption;
      32: if_acmpne     50
      35: aload_0
      36: aload_2
      37: checkcast     #62                 // class java/lang/Integer
      40: invokevirtual #63                 // Method java/lang/Integer.intValue:()I
      43: invokevirtual #65                 // Method setMaxMessagesPerRead:(I)Lio/netty/channel/ChannelConfig;
      46: pop
      47: goto          219
      50: aload_1
      51: getstatic     #26                 // Field io/netty/channel/ChannelOption.WRITE_SPIN_COUNT:Lio/netty/channel/ChannelOption;
      54: if_acmpne     72
      57: aload_0
      58: aload_2
      59: checkcast     #62                 // class java/lang/Integer
      62: invokevirtual #63                 // Method java/lang/Integer.intValue:()I
      65: invokevirtual #66                 // Method setWriteSpinCount:(I)Lio/netty/channel/ChannelConfig;
      68: pop
      69: goto          219
      72: aload_1
      73: getstatic     #27                 // Field io/netty/channel/ChannelOption.ALLOCATOR:Lio/netty/channel/ChannelOption;
      76: if_acmpne     91
      79: aload_0
      80: aload_2
      81: checkcast     #67                 // class io/netty/buffer/ByteBufAllocator
      84: invokevirtual #68                 // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/ChannelConfig;
      87: pop
      88: goto          219
      91: aload_1
      92: getstatic     #30                 // Field io/netty/channel/ChannelOption.RCVBUF_ALLOCATOR:Lio/netty/channel/ChannelOption;
      95: if_acmpne     110
      98: aload_0
      99: aload_2
     100: checkcast     #69                 // class io/netty/channel/RecvByteBufAllocator
     103: invokevirtual #70                 // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/ChannelConfig;
     106: pop
     107: goto          219
     110: aload_1
     111: getstatic     #28                 // Field io/netty/channel/ChannelOption.AUTO_READ:Lio/netty/channel/ChannelOption;
     114: if_acmpne     132
     117: aload_0
     118: aload_2
     119: checkcast     #71                 // class java/lang/Boolean
     122: invokevirtual #72                 // Method java/lang/Boolean.booleanValue:()Z
     125: invokevirtual #73                 // Method setAutoRead:(Z)Lio/netty/channel/ChannelConfig;
     128: pop
     129: goto          219
     132: aload_1
     133: getstatic     #29                 // Field io/netty/channel/ChannelOption.AUTO_CLOSE:Lio/netty/channel/ChannelOption;
     136: if_acmpne     154
     139: aload_0
     140: aload_2
     141: checkcast     #71                 // class java/lang/Boolean
     144: invokevirtual #72                 // Method java/lang/Boolean.booleanValue:()Z
     147: invokevirtual #74                 // Method setAutoClose:(Z)Lio/netty/channel/ChannelConfig;
     150: pop
     151: goto          219
     154: aload_1
     155: getstatic     #31                 // Field io/netty/channel/ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK:Lio/netty/channel/ChannelOption;
     158: if_acmpne     176
     161: aload_0
     162: aload_2
     163: checkcast     #62                 // class java/lang/Integer
     166: invokevirtual #63                 // Method java/lang/Integer.intValue:()I
     169: invokevirtual #75                 // Method setWriteBufferHighWaterMark:(I)Lio/netty/channel/ChannelConfig;
     172: pop
     173: goto          219
     176: aload_1
     177: getstatic     #32                 // Field io/netty/channel/ChannelOption.WRITE_BUFFER_LOW_WATER_MARK:Lio/netty/channel/ChannelOption;
     180: if_acmpne     198
     183: aload_0
     184: aload_2
     185: checkcast     #62                 // class java/lang/Integer
     188: invokevirtual #63                 // Method java/lang/Integer.intValue:()I
     191: invokevirtual #76                 // Method setWriteBufferLowWaterMark:(I)Lio/netty/channel/ChannelConfig;
     194: pop
     195: goto          219
     198: aload_1
     199: getstatic     #33                 // Field io/netty/channel/ChannelOption.MESSAGE_SIZE_ESTIMATOR:Lio/netty/channel/ChannelOption;
     202: if_acmpne     217
     205: aload_0
     206: aload_2
     207: checkcast     #77                 // class io/netty/channel/MessageSizeEstimator
     210: invokevirtual #78                 // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/ChannelConfig;
     213: pop
     214: goto          219
     217: iconst_0
     218: ireturn
     219: iconst_1
     220: ireturn

  protected <T> void validate(io.netty.channel.ChannelOption<T>, T);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #16                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #48                 // String option
      10: invokespecial #18                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: aload_2
      16: invokevirtual #79                 // Method io/netty/channel/ChannelOption.validate:(Ljava/lang/Object;)V
      19: return

  public int getConnectTimeoutMillis();
    Code:
       0: aload_0
       1: getfield      #8                  // Field connectTimeoutMillis:I
       4: ireturn

  public io.netty.channel.ChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: iload_1
       1: ifge          28
       4: new           #80                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #81                 // String connectTimeoutMillis: %d (expected: >= 0)
      10: iconst_1
      11: anewarray     #82                 // class java/lang/Object
      14: dup
      15: iconst_0
      16: iload_1
      17: invokestatic  #50                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: aastore
      21: invokestatic  #83                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      24: invokespecial #84                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: iload_1
      30: putfield      #8                  // Field connectTimeoutMillis:I
      33: aload_0
      34: areturn

  public int getMaxMessagesPerRead();
    Code:
       0: aload_0
       1: getfield      #22                 // Field maxMessagesPerRead:I
       4: ireturn

  public io.netty.channel.ChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: iload_1
       1: ifgt          36
       4: new           #80                 // class java/lang/IllegalArgumentException
       7: dup
       8: new           #85                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #86                 // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #87                 // String maxMessagesPerRead:
      17: invokevirtual #88                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: iload_1
      21: invokevirtual #89                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      24: ldc           #90                 // String  (expected: > 0)
      26: invokevirtual #88                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #91                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokespecial #84                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: aload_0
      37: iload_1
      38: putfield      #22                 // Field maxMessagesPerRead:I
      41: aload_0
      42: areturn

  public int getWriteSpinCount();
    Code:
       0: aload_0
       1: getfield      #9                  // Field writeSpinCount:I
       4: ireturn

  public io.netty.channel.ChannelConfig setWriteSpinCount(int);
    Code:
       0: iload_1
       1: ifgt          14
       4: new           #80                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #92                 // String writeSpinCount must be a positive integer.
      10: invokespecial #84                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: iload_1
      16: putfield      #9                  // Field writeSpinCount:I
      19: aload_0
      20: areturn

  public io.netty.buffer.ByteBufAllocator getAllocator();
    Code:
       0: aload_0
       1: getfield      #3                  // Field allocator:Lio/netty/buffer/ByteBufAllocator;
       4: areturn

  public io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #16                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #93                 // String allocator
      10: invokespecial #18                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: putfield      #3                  // Field allocator:Lio/netty/buffer/ByteBufAllocator;
      19: aload_0
      20: areturn

  public io.netty.channel.RecvByteBufAllocator getRecvByteBufAllocator();
    Code:
       0: aload_0
       1: getfield      #5                  // Field rcvBufAllocator:Lio/netty/channel/RecvByteBufAllocator;
       4: areturn

  public io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #16                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #93                 // String allocator
      10: invokespecial #18                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: putfield      #5                  // Field rcvBufAllocator:Lio/netty/channel/RecvByteBufAllocator;
      19: aload_0
      20: areturn

  public boolean isAutoRead();
    Code:
       0: aload_0
       1: getfield      #10                 // Field autoRead:I
       4: iconst_1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public io.netty.channel.ChannelConfig setAutoRead(boolean);
    Code:
       0: getstatic     #94                 // Field AUTOREAD_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iload_1
       5: ifeq          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: invokevirtual #95                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      16: iconst_1
      17: if_icmpne     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: istore_2
      26: iload_1
      27: ifeq          47
      30: iload_2
      31: ifne          47
      34: aload_0
      35: getfield      #19                 // Field channel:Lio/netty/channel/Channel;
      38: invokeinterface #96,  1           // InterfaceMethod io/netty/channel/Channel.read:()Lio/netty/channel/Channel;
      43: pop
      44: goto          59
      47: iload_1
      48: ifne          59
      51: iload_2
      52: ifeq          59
      55: aload_0
      56: invokevirtual #97                 // Method autoReadCleared:()V
      59: aload_0
      60: areturn

  protected void autoReadCleared();
    Code:
       0: return

  public boolean isAutoClose();
    Code:
       0: aload_0
       1: getfield      #11                 // Field autoClose:Z
       4: ireturn

  public io.netty.channel.ChannelConfig setAutoClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field autoClose:Z
       5: aload_0
       6: areturn

  public int getWriteBufferHighWaterMark();
    Code:
       0: aload_0
       1: getfield      #13                 // Field writeBufferHighWaterMark:I
       4: ireturn

  public io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: iload_1
       1: aload_0
       2: invokevirtual #59                 // Method getWriteBufferLowWaterMark:()I
       5: if_icmpge     47
       8: new           #80                 // class java/lang/IllegalArgumentException
      11: dup
      12: new           #85                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #86                 // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #98                 // String writeBufferHighWaterMark cannot be less than writeBufferLowWaterMark (
      21: invokevirtual #88                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: invokevirtual #59                 // Method getWriteBufferLowWaterMark:()I
      28: invokevirtual #89                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #99                 // String ):
      33: invokevirtual #88                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: iload_1
      37: invokevirtual #89                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      40: invokevirtual #91                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: invokespecial #84                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      46: athrow
      47: iload_1
      48: ifge          61
      51: new           #80                 // class java/lang/IllegalArgumentException
      54: dup
      55: ldc           #100                // String writeBufferHighWaterMark must be >= 0
      57: invokespecial #84                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      60: athrow
      61: aload_0
      62: iload_1
      63: putfield      #13                 // Field writeBufferHighWaterMark:I
      66: aload_0
      67: areturn

  public int getWriteBufferLowWaterMark();
    Code:
       0: aload_0
       1: getfield      #15                 // Field writeBufferLowWaterMark:I
       4: ireturn

  public io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: iload_1
       1: aload_0
       2: invokevirtual #58                 // Method getWriteBufferHighWaterMark:()I
       5: if_icmple     47
       8: new           #80                 // class java/lang/IllegalArgumentException
      11: dup
      12: new           #85                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #86                 // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #101                // String writeBufferLowWaterMark cannot be greater than writeBufferHighWaterMark (
      21: invokevirtual #88                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: invokevirtual #58                 // Method getWriteBufferHighWaterMark:()I
      28: invokevirtual #89                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #99                 // String ):
      33: invokevirtual #88                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: iload_1
      37: invokevirtual #89                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      40: invokevirtual #91                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: invokespecial #84                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      46: athrow
      47: iload_1
      48: ifge          61
      51: new           #80                 // class java/lang/IllegalArgumentException
      54: dup
      55: ldc           #102                // String writeBufferLowWaterMark must be >= 0
      57: invokespecial #84                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      60: athrow
      61: aload_0
      62: iload_1
      63: putfield      #15                 // Field writeBufferLowWaterMark:I
      66: aload_0
      67: areturn

  public io.netty.channel.MessageSizeEstimator getMessageSizeEstimator();
    Code:
       0: aload_0
       1: getfield      #7                  // Field msgSizeEstimator:Lio/netty/channel/MessageSizeEstimator;
       4: areturn

  public io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #16                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #103                // String estimator
      10: invokespecial #18                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: putfield      #7                  // Field msgSizeEstimator:Lio/netty/channel/MessageSizeEstimator;
      19: aload_0
      20: areturn

  static {};
    Code:
       0: getstatic     #104                // Field io/netty/channel/AdaptiveRecvByteBufAllocator.DEFAULT:Lio/netty/channel/AdaptiveRecvByteBufAllocator;
       3: putstatic     #4                  // Field DEFAULT_RCVBUF_ALLOCATOR:Lio/netty/channel/RecvByteBufAllocator;
       6: getstatic     #105                // Field io/netty/channel/DefaultMessageSizeEstimator.DEFAULT:Lio/netty/channel/MessageSizeEstimator;
       9: putstatic     #6                  // Field DEFAULT_MSG_SIZE_ESTIMATOR:Lio/netty/channel/MessageSizeEstimator;
      12: ldc_w         #106                // class io/netty/channel/DefaultChannelConfig
      15: ldc           #107                // String autoRead
      17: invokestatic  #108                // Method io/netty/util/internal/PlatformDependent.newAtomicIntegerFieldUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: astore_0
      21: aload_0
      22: ifnonnull     34
      25: ldc_w         #106                // class io/netty/channel/DefaultChannelConfig
      28: ldc           #107                // String autoRead
      30: invokestatic  #109                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      33: astore_0
      34: aload_0
      35: putstatic     #94                 // Field AUTOREAD_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      38: return
}
