Compiled from "UnsafeAtomicIntegerFieldUpdater.java"
final class io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater<T> extends java.util.concurrent.atomic.AtomicIntegerFieldUpdater<T> {
  private final long offset;

  private final sun.misc.Unsafe unsafe;

  io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater(sun.misc.Unsafe, java.lang.Class<?>, java.lang.String) throws java.lang.NoSuchFieldException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater."<init>":()V
       4: aload_2
       5: aload_3
       6: invokevirtual #2                  // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
       9: astore        4
      11: aload         4
      13: invokevirtual #3                  // Method java/lang/reflect/Field.getModifiers:()I
      16: invokestatic  #4                  // Method java/lang/reflect/Modifier.isVolatile:(I)Z
      19: ifne          32
      22: new           #5                  // class java/lang/IllegalArgumentException
      25: dup
      26: ldc           #6                  // String Must be volatile
      28: invokespecial #7                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: aload_1
      34: putfield      #8                  // Field unsafe:Lsun/misc/Unsafe;
      37: aload_0
      38: aload_1
      39: aload         4
      41: invokevirtual #9                  // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
      44: putfield      #10                 // Field offset:J
      47: return

  public boolean compareAndSet(T, int, int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field unsafe:Lsun/misc/Unsafe;
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field offset:J
       9: iload_2
      10: iload_3
      11: invokevirtual #11                 // Method sun/misc/Unsafe.compareAndSwapInt:(Ljava/lang/Object;JII)Z
      14: ireturn

  public boolean weakCompareAndSet(T, int, int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field unsafe:Lsun/misc/Unsafe;
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field offset:J
       9: iload_2
      10: iload_3
      11: invokevirtual #11                 // Method sun/misc/Unsafe.compareAndSwapInt:(Ljava/lang/Object;JII)Z
      14: ireturn

  public void set(T, int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field unsafe:Lsun/misc/Unsafe;
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field offset:J
       9: iload_2
      10: invokevirtual #12                 // Method sun/misc/Unsafe.putIntVolatile:(Ljava/lang/Object;JI)V
      13: return

  public void lazySet(T, int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field unsafe:Lsun/misc/Unsafe;
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field offset:J
       9: iload_2
      10: invokevirtual #13                 // Method sun/misc/Unsafe.putOrderedInt:(Ljava/lang/Object;JI)V
      13: return

  public int get(T);
    Code:
       0: aload_0
       1: getfield      #8                  // Field unsafe:Lsun/misc/Unsafe;
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field offset:J
       9: invokevirtual #14                 // Method sun/misc/Unsafe.getIntVolatile:(Ljava/lang/Object;J)I
      12: ireturn
}
