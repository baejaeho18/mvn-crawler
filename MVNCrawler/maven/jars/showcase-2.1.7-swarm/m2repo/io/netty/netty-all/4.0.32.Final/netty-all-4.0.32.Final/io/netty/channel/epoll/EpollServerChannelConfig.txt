Compiled from "EpollServerChannelConfig.java"
public class io.netty.channel.epoll.EpollServerChannelConfig extends io.netty.channel.epoll.EpollChannelConfig {
  protected final io.netty.channel.epoll.AbstractEpollChannel channel;

  private volatile int backlog;

  private volatile int pendingFastOpenRequestsThreshold;

  io.netty.channel.epoll.EpollServerChannelConfig(io.netty.channel.epoll.AbstractEpollChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/netty/channel/epoll/EpollChannelConfig."<init>":(Lio/netty/channel/epoll/AbstractEpollChannel;)V
       5: aload_0
       6: getstatic     #2                  // Field io/netty/util/NetUtil.SOMAXCONN:I
       9: putfield      #3                  // Field backlog:I
      12: aload_0
      13: aload_1
      14: putfield      #4                  // Field channel:Lio/netty/channel/epoll/AbstractEpollChannel;
      17: return

  public java.util.Map<io.netty.channel.ChannelOption<?>, java.lang.Object> getOptions();
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #5                  // Method io/netty/channel/epoll/EpollChannelConfig.getOptions:()Ljava/util/Map;
       5: iconst_4
       6: anewarray     #6                  // class io/netty/channel/ChannelOption
       9: dup
      10: iconst_0
      11: getstatic     #7                  // Field io/netty/channel/ChannelOption.SO_RCVBUF:Lio/netty/channel/ChannelOption;
      14: aastore
      15: dup
      16: iconst_1
      17: getstatic     #8                  // Field io/netty/channel/ChannelOption.SO_REUSEADDR:Lio/netty/channel/ChannelOption;
      20: aastore
      21: dup
      22: iconst_2
      23: getstatic     #9                  // Field io/netty/channel/ChannelOption.SO_BACKLOG:Lio/netty/channel/ChannelOption;
      26: aastore
      27: dup
      28: iconst_3
      29: getstatic     #10                 // Field io/netty/channel/epoll/EpollChannelOption.TCP_FASTOPEN:Lio/netty/channel/ChannelOption;
      32: aastore
      33: invokevirtual #11                 // Method getOptions:(Ljava/util/Map;[Lio/netty/channel/ChannelOption;)Ljava/util/Map;
      36: areturn

  public <T> T getOption(io.netty.channel.ChannelOption<T>);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field io/netty/channel/ChannelOption.SO_RCVBUF:Lio/netty/channel/ChannelOption;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #12                 // Method getReceiveBufferSize:()I
      11: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #8                  // Field io/netty/channel/ChannelOption.SO_REUSEADDR:Lio/netty/channel/ChannelOption;
      19: if_acmpne     30
      22: aload_0
      23: invokevirtual #14                 // Method isReuseAddress:()Z
      26: invokestatic  #15                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      29: areturn
      30: aload_1
      31: getstatic     #9                  // Field io/netty/channel/ChannelOption.SO_BACKLOG:Lio/netty/channel/ChannelOption;
      34: if_acmpne     45
      37: aload_0
      38: invokevirtual #16                 // Method getBacklog:()I
      41: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      44: areturn
      45: aload_1
      46: getstatic     #10                 // Field io/netty/channel/epoll/EpollChannelOption.TCP_FASTOPEN:Lio/netty/channel/ChannelOption;
      49: if_acmpne     60
      52: aload_0
      53: invokevirtual #17                 // Method getTcpFastopen:()I
      56: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      59: areturn
      60: aload_0
      61: aload_1
      62: invokespecial #18                 // Method io/netty/channel/epoll/EpollChannelConfig.getOption:(Lio/netty/channel/ChannelOption;)Ljava/lang/Object;
      65: areturn

  public <T> boolean setOption(io.netty.channel.ChannelOption<T>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #19                 // Method validate:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)V
       6: aload_1
       7: getstatic     #7                  // Field io/netty/channel/ChannelOption.SO_RCVBUF:Lio/netty/channel/ChannelOption;
      10: if_acmpne     28
      13: aload_0
      14: aload_2
      15: checkcast     #20                 // class java/lang/Integer
      18: invokevirtual #21                 // Method java/lang/Integer.intValue:()I
      21: invokevirtual #22                 // Method setReceiveBufferSize:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
      24: pop
      25: goto          127
      28: aload_1
      29: getstatic     #8                  // Field io/netty/channel/ChannelOption.SO_REUSEADDR:Lio/netty/channel/ChannelOption;
      32: if_acmpne     50
      35: aload_0
      36: aload_2
      37: checkcast     #23                 // class java/lang/Boolean
      40: invokevirtual #24                 // Method java/lang/Boolean.booleanValue:()Z
      43: invokevirtual #25                 // Method setReuseAddress:(Z)Lio/netty/channel/epoll/EpollServerChannelConfig;
      46: pop
      47: goto          127
      50: aload_1
      51: getstatic     #9                  // Field io/netty/channel/ChannelOption.SO_BACKLOG:Lio/netty/channel/ChannelOption;
      54: if_acmpne     72
      57: aload_0
      58: aload_2
      59: checkcast     #20                 // class java/lang/Integer
      62: invokevirtual #21                 // Method java/lang/Integer.intValue:()I
      65: invokevirtual #26                 // Method setBacklog:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
      68: pop
      69: goto          127
      72: aload_1
      73: getstatic     #27                 // Field io/netty/channel/epoll/EpollChannelOption.TCP_MD5SIG:Lio/netty/channel/ChannelOption;
      76: if_acmpne     98
      79: aload_2
      80: checkcast     #28                 // class java/util/Map
      83: astore_3
      84: aload_0
      85: getfield      #4                  // Field channel:Lio/netty/channel/epoll/AbstractEpollChannel;
      88: checkcast     #29                 // class io/netty/channel/epoll/EpollServerSocketChannel
      91: aload_3
      92: invokevirtual #30                 // Method io/netty/channel/epoll/EpollServerSocketChannel.setTcpMd5Sig:(Ljava/util/Map;)V
      95: goto          127
      98: aload_1
      99: getstatic     #10                 // Field io/netty/channel/epoll/EpollChannelOption.TCP_FASTOPEN:Lio/netty/channel/ChannelOption;
     102: if_acmpne     120
     105: aload_0
     106: aload_2
     107: checkcast     #20                 // class java/lang/Integer
     110: invokevirtual #21                 // Method java/lang/Integer.intValue:()I
     113: invokevirtual #31                 // Method setTcpFastopen:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
     116: pop
     117: goto          127
     120: aload_0
     121: aload_1
     122: aload_2
     123: invokespecial #32                 // Method io/netty/channel/epoll/EpollChannelConfig.setOption:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)Z
     126: ireturn
     127: iconst_1
     128: ireturn

  public boolean isReuseAddress();
    Code:
       0: aload_0
       1: getfield      #4                  // Field channel:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: invokevirtual #33                 // Method io/netty/channel/epoll/AbstractEpollChannel.fd:()Lio/netty/channel/unix/FileDescriptor;
       7: invokevirtual #34                 // Method io/netty/channel/unix/FileDescriptor.intValue:()I
      10: invokestatic  #35                 // Method io/netty/channel/epoll/Native.isReuseAddress:(I)I
      13: iconst_1
      14: if_icmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public io.netty.channel.epoll.EpollServerChannelConfig setReuseAddress(boolean);
    Code:
       0: aload_0
       1: getfield      #4                  // Field channel:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: invokevirtual #33                 // Method io/netty/channel/epoll/AbstractEpollChannel.fd:()Lio/netty/channel/unix/FileDescriptor;
       7: invokevirtual #34                 // Method io/netty/channel/unix/FileDescriptor.intValue:()I
      10: iload_1
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: invokestatic  #36                 // Method io/netty/channel/epoll/Native.setReuseAddress:(II)V
      22: aload_0
      23: areturn

  public int getReceiveBufferSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field channel:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: invokevirtual #33                 // Method io/netty/channel/epoll/AbstractEpollChannel.fd:()Lio/netty/channel/unix/FileDescriptor;
       7: invokevirtual #34                 // Method io/netty/channel/unix/FileDescriptor.intValue:()I
      10: invokestatic  #37                 // Method io/netty/channel/epoll/Native.getReceiveBufferSize:(I)I
      13: ireturn

  public io.netty.channel.epoll.EpollServerChannelConfig setReceiveBufferSize(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field channel:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: invokevirtual #33                 // Method io/netty/channel/epoll/AbstractEpollChannel.fd:()Lio/netty/channel/unix/FileDescriptor;
       7: invokevirtual #34                 // Method io/netty/channel/unix/FileDescriptor.intValue:()I
      10: iload_1
      11: invokestatic  #38                 // Method io/netty/channel/epoll/Native.setReceiveBufferSize:(II)V
      14: aload_0
      15: areturn

  public int getBacklog();
    Code:
       0: aload_0
       1: getfield      #3                  // Field backlog:I
       4: ireturn

  public io.netty.channel.epoll.EpollServerChannelConfig setBacklog(int);
    Code:
       0: iload_1
       1: ifge          31
       4: new           #39                 // class java/lang/IllegalArgumentException
       7: dup
       8: new           #40                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #41                 // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #42                 // String backlog:
      17: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: iload_1
      21: invokevirtual #44                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      24: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: invokespecial #46                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: iload_1
      33: putfield      #3                  // Field backlog:I
      36: aload_0
      37: areturn

  public int getTcpFastopen();
    Code:
       0: aload_0
       1: getfield      #47                 // Field pendingFastOpenRequestsThreshold:I
       4: ireturn

  public io.netty.channel.epoll.EpollServerChannelConfig setTcpFastopen(int);
    Code:
       0: aload_0
       1: getfield      #47                 // Field pendingFastOpenRequestsThreshold:I
       4: ifge          34
       7: new           #39                 // class java/lang/IllegalArgumentException
      10: dup
      11: new           #40                 // class java/lang/StringBuilder
      14: dup
      15: invokespecial #41                 // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #48                 // String pendingFastOpenRequestsThreshold:
      20: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: iload_1
      24: invokevirtual #44                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      27: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: invokespecial #46                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: iload_1
      36: putfield      #47                 // Field pendingFastOpenRequestsThreshold:I
      39: aload_0
      40: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #49                 // Method io/netty/channel/epoll/EpollChannelConfig.setConnectTimeoutMillis:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #50                 // Method io/netty/channel/epoll/EpollChannelConfig.setMaxMessagesPerRead:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #51                 // Method io/netty/channel/epoll/EpollChannelConfig.setWriteSpinCount:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #52                 // Method io/netty/channel/epoll/EpollChannelConfig.setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #53                 // Method io/netty/channel/epoll/EpollChannelConfig.setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #54                 // Method io/netty/channel/epoll/EpollChannelConfig.setAutoRead:(Z)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #55                 // Method io/netty/channel/epoll/EpollChannelConfig.setWriteBufferHighWaterMark:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #56                 // Method io/netty/channel/epoll/EpollChannelConfig.setWriteBufferLowWaterMark:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #57                 // Method io/netty/channel/epoll/EpollChannelConfig.setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollServerChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #58                 // Method io/netty/channel/epoll/EpollChannelConfig.setEpollMode:(Lio/netty/channel/epoll/EpollMode;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #59                 // Method setEpollMode:(Lio/netty/channel/epoll/EpollMode;)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #60                 // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #61                 // Method setWriteBufferLowWaterMark:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #62                 // Method setWriteBufferHighWaterMark:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #63                 // Method setAutoRead:(Z)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #64                 // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #65                 // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #66                 // Method setWriteSpinCount:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #67                 // Method setMaxMessagesPerRead:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #68                 // Method setConnectTimeoutMillis:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #60                 // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #61                 // Method setWriteBufferLowWaterMark:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #62                 // Method setWriteBufferHighWaterMark:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #63                 // Method setAutoRead:(Z)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #64                 // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #65                 // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #66                 // Method setWriteSpinCount:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #67                 // Method setMaxMessagesPerRead:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #68                 // Method setConnectTimeoutMillis:(I)Lio/netty/channel/epoll/EpollServerChannelConfig;
       5: areturn
}
