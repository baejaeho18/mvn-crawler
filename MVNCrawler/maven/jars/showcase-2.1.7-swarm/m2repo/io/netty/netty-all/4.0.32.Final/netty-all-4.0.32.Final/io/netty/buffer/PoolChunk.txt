Compiled from "PoolChunk.java"
final class io.netty.buffer.PoolChunk<T> implements io.netty.buffer.PoolChunkMetric {
  final io.netty.buffer.PoolArena<T> arena;

  final T memory;

  final boolean unpooled;

  private final byte[] memoryMap;

  private final byte[] depthMap;

  private final io.netty.buffer.PoolSubpage<T>[] subpages;

  private final int subpageOverflowMask;

  private final int pageSize;

  private final int pageShifts;

  private final int maxOrder;

  private final int chunkSize;

  private final int log2ChunkSize;

  private final int maxSubpageAllocs;

  private final byte unusable;

  private int freeBytes;

  io.netty.buffer.PoolChunkList<T> parent;

  io.netty.buffer.PoolChunk<T> prev;

  io.netty.buffer.PoolChunk<T> next;

  static final boolean $assertionsDisabled;

  io.netty.buffer.PoolChunk(io.netty.buffer.PoolArena<T>, T, int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field unpooled:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field arena:Lio/netty/buffer/PoolArena;
      14: aload_0
      15: aload_2
      16: putfield      #4                  // Field memory:Ljava/lang/Object;
      19: aload_0
      20: iload_3
      21: putfield      #5                  // Field pageSize:I
      24: aload_0
      25: iload         5
      27: putfield      #6                  // Field pageShifts:I
      30: aload_0
      31: iload         4
      33: putfield      #7                  // Field maxOrder:I
      36: aload_0
      37: iload         6
      39: putfield      #8                  // Field chunkSize:I
      42: aload_0
      43: iload         4
      45: iconst_1
      46: iadd
      47: i2b
      48: putfield      #9                  // Field unusable:B
      51: aload_0
      52: iload         6
      54: invokestatic  #10                 // Method log2:(I)I
      57: putfield      #11                 // Field log2ChunkSize:I
      60: aload_0
      61: iload_3
      62: iconst_1
      63: isub
      64: iconst_m1
      65: ixor
      66: putfield      #12                 // Field subpageOverflowMask:I
      69: aload_0
      70: iload         6
      72: putfield      #13                 // Field freeBytes:I
      75: getstatic     #14                 // Field $assertionsDisabled:Z
      78: ifne          116
      81: iload         4
      83: bipush        30
      85: if_icmplt     116
      88: new           #15                 // class java/lang/AssertionError
      91: dup
      92: new           #16                 // class java/lang/StringBuilder
      95: dup
      96: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
      99: ldc           #18                 // String maxOrder should be < 30, but is:
     101: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: iload         4
     106: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     109: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     112: invokespecial #22                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     115: athrow
     116: aload_0
     117: iconst_1
     118: iload         4
     120: ishl
     121: putfield      #23                 // Field maxSubpageAllocs:I
     124: aload_0
     125: aload_0
     126: getfield      #23                 // Field maxSubpageAllocs:I
     129: iconst_1
     130: ishl
     131: newarray       byte
     133: putfield      #24                 // Field memoryMap:[B
     136: aload_0
     137: aload_0
     138: getfield      #24                 // Field memoryMap:[B
     141: arraylength
     142: newarray       byte
     144: putfield      #25                 // Field depthMap:[B
     147: iconst_1
     148: istore        7
     150: iconst_0
     151: istore        8
     153: iload         8
     155: iload         4
     157: if_icmpgt     211
     160: iconst_1
     161: iload         8
     163: ishl
     164: istore        9
     166: iconst_0
     167: istore        10
     169: iload         10
     171: iload         9
     173: if_icmpge     205
     176: aload_0
     177: getfield      #24                 // Field memoryMap:[B
     180: iload         7
     182: iload         8
     184: i2b
     185: bastore
     186: aload_0
     187: getfield      #25                 // Field depthMap:[B
     190: iload         7
     192: iload         8
     194: i2b
     195: bastore
     196: iinc          7, 1
     199: iinc          10, 1
     202: goto          169
     205: iinc          8, 1
     208: goto          153
     211: aload_0
     212: aload_0
     213: aload_0
     214: getfield      #23                 // Field maxSubpageAllocs:I
     217: invokespecial #26                 // Method newSubpageArray:(I)[Lio/netty/buffer/PoolSubpage;
     220: putfield      #27                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
     223: return

  io.netty.buffer.PoolChunk(io.netty.buffer.PoolArena<T>, T, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field unpooled:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field arena:Lio/netty/buffer/PoolArena;
      14: aload_0
      15: aload_2
      16: putfield      #4                  // Field memory:Ljava/lang/Object;
      19: aload_0
      20: aconst_null
      21: putfield      #24                 // Field memoryMap:[B
      24: aload_0
      25: aconst_null
      26: putfield      #25                 // Field depthMap:[B
      29: aload_0
      30: aconst_null
      31: putfield      #27                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      34: aload_0
      35: iconst_0
      36: putfield      #12                 // Field subpageOverflowMask:I
      39: aload_0
      40: iconst_0
      41: putfield      #5                  // Field pageSize:I
      44: aload_0
      45: iconst_0
      46: putfield      #6                  // Field pageShifts:I
      49: aload_0
      50: iconst_0
      51: putfield      #7                  // Field maxOrder:I
      54: aload_0
      55: aload_0
      56: getfield      #7                  // Field maxOrder:I
      59: iconst_1
      60: iadd
      61: i2b
      62: putfield      #9                  // Field unusable:B
      65: aload_0
      66: iload_3
      67: putfield      #8                  // Field chunkSize:I
      70: aload_0
      71: aload_0
      72: getfield      #8                  // Field chunkSize:I
      75: invokestatic  #10                 // Method log2:(I)I
      78: putfield      #11                 // Field log2ChunkSize:I
      81: aload_0
      82: iconst_0
      83: putfield      #23                 // Field maxSubpageAllocs:I
      86: return

  private io.netty.buffer.PoolSubpage<T>[] newSubpageArray(int);
    Code:
       0: iload_1
       1: anewarray     #28                 // class io/netty/buffer/PoolSubpage
       4: areturn

  public int usage();
    Code:
       0: aload_0
       1: getfield      #13                 // Field freeBytes:I
       4: istore_1
       5: iload_1
       6: ifne          12
       9: bipush        100
      11: ireturn
      12: iload_1
      13: i2l
      14: ldc2_w        #29                 // long 100l
      17: lmul
      18: aload_0
      19: getfield      #8                  // Field chunkSize:I
      22: i2l
      23: ldiv
      24: l2i
      25: istore_2
      26: iload_2
      27: ifne          33
      30: bipush        99
      32: ireturn
      33: bipush        100
      35: iload_2
      36: isub
      37: ireturn

  long allocate(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #12                 // Field subpageOverflowMask:I
       5: iand
       6: ifeq          15
       9: aload_0
      10: iload_1
      11: invokespecial #31                 // Method allocateRun:(I)J
      14: lreturn
      15: aload_0
      16: iload_1
      17: invokespecial #32                 // Method allocateSubpage:(I)J
      20: lreturn

  private void updateParentsAlloc(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmple     50
       5: iload_1
       6: iconst_1
       7: iushr
       8: istore_2
       9: aload_0
      10: iload_1
      11: invokespecial #33                 // Method value:(I)B
      14: istore_3
      15: aload_0
      16: iload_1
      17: iconst_1
      18: ixor
      19: invokespecial #33                 // Method value:(I)B
      22: istore        4
      24: iload_3
      25: iload         4
      27: if_icmpge     34
      30: iload_3
      31: goto          36
      34: iload         4
      36: istore        5
      38: aload_0
      39: iload_2
      40: iload         5
      42: invokespecial #34                 // Method setValue:(IB)V
      45: iload_2
      46: istore_1
      47: goto          0
      50: return

  private void updateParentsFree(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #35                 // Method depth:(I)B
       5: iconst_1
       6: iadd
       7: istore_2
       8: iload_1
       9: iconst_1
      10: if_icmple     88
      13: iload_1
      14: iconst_1
      15: iushr
      16: istore_3
      17: aload_0
      18: iload_1
      19: invokespecial #33                 // Method value:(I)B
      22: istore        4
      24: aload_0
      25: iload_1
      26: iconst_1
      27: ixor
      28: invokespecial #33                 // Method value:(I)B
      31: istore        5
      33: iinc          2, -1
      36: iload         4
      38: iload_2
      39: if_icmpne     60
      42: iload         5
      44: iload_2
      45: if_icmpne     60
      48: aload_0
      49: iload_3
      50: iload_2
      51: iconst_1
      52: isub
      53: i2b
      54: invokespecial #34                 // Method setValue:(IB)V
      57: goto          83
      60: iload         4
      62: iload         5
      64: if_icmpge     72
      67: iload         4
      69: goto          74
      72: iload         5
      74: istore        6
      76: aload_0
      77: iload_3
      78: iload         6
      80: invokespecial #34                 // Method setValue:(IB)V
      83: iload_3
      84: istore_1
      85: goto          8
      88: return

  private int allocateNode(int);
    Code:
       0: iconst_1
       1: istore_2
       2: iconst_1
       3: iload_1
       4: ishl
       5: ineg
       6: istore_3
       7: aload_0
       8: iload_2
       9: invokespecial #33                 // Method value:(I)B
      12: istore        4
      14: iload         4
      16: iload_1
      17: if_icmple     22
      20: iconst_m1
      21: ireturn
      22: iload         4
      24: iload_1
      25: if_icmplt     34
      28: iload_2
      29: iload_3
      30: iand
      31: ifne          65
      34: iload_2
      35: iconst_1
      36: ishl
      37: istore_2
      38: aload_0
      39: iload_2
      40: invokespecial #33                 // Method value:(I)B
      43: istore        4
      45: iload         4
      47: iload_1
      48: if_icmple     22
      51: iload_2
      52: iconst_1
      53: ixor
      54: istore_2
      55: aload_0
      56: iload_2
      57: invokespecial #33                 // Method value:(I)B
      60: istore        4
      62: goto          22
      65: aload_0
      66: iload_2
      67: invokespecial #33                 // Method value:(I)B
      70: istore        5
      72: getstatic     #14                 // Field $assertionsDisabled:Z
      75: ifne          134
      78: iload         5
      80: iload_1
      81: if_icmpne     93
      84: iload_2
      85: iload_3
      86: iand
      87: iconst_1
      88: iload_1
      89: ishl
      90: if_icmpeq     134
      93: new           #15                 // class java/lang/AssertionError
      96: dup
      97: ldc           #36                 // String val = %d, id & initial = %d, d = %d
      99: iconst_3
     100: anewarray     #37                 // class java/lang/Object
     103: dup
     104: iconst_0
     105: iload         5
     107: invokestatic  #38                 // Method java/lang/Byte.valueOf:(B)Ljava/lang/Byte;
     110: aastore
     111: dup
     112: iconst_1
     113: iload_2
     114: iload_3
     115: iand
     116: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     119: aastore
     120: dup
     121: iconst_2
     122: iload_1
     123: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     126: aastore
     127: invokestatic  #40                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     130: invokespecial #22                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     133: athrow
     134: aload_0
     135: iload_2
     136: aload_0
     137: getfield      #9                  // Field unusable:B
     140: invokespecial #34                 // Method setValue:(IB)V
     143: aload_0
     144: iload_2
     145: invokespecial #41                 // Method updateParentsAlloc:(I)V
     148: iload_2
     149: ireturn

  private long allocateRun(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxOrder:I
       4: iload_1
       5: invokestatic  #10                 // Method log2:(I)I
       8: aload_0
       9: getfield      #6                  // Field pageShifts:I
      12: isub
      13: isub
      14: istore_2
      15: aload_0
      16: iload_2
      17: invokespecial #42                 // Method allocateNode:(I)I
      20: istore_3
      21: iload_3
      22: ifge          28
      25: iload_3
      26: i2l
      27: lreturn
      28: aload_0
      29: dup
      30: getfield      #13                 // Field freeBytes:I
      33: aload_0
      34: iload_3
      35: invokespecial #43                 // Method runLength:(I)I
      38: isub
      39: putfield      #13                 // Field freeBytes:I
      42: iload_3
      43: i2l
      44: lreturn

  private long allocateSubpage(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxOrder:I
       4: istore_2
       5: aload_0
       6: iload_2
       7: invokespecial #42                 // Method allocateNode:(I)I
      10: istore_3
      11: iload_3
      12: ifge          18
      15: iload_3
      16: i2l
      17: lreturn
      18: aload_0
      19: getfield      #27                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      22: astore        4
      24: aload_0
      25: getfield      #5                  // Field pageSize:I
      28: istore        5
      30: aload_0
      31: dup
      32: getfield      #13                 // Field freeBytes:I
      35: iload         5
      37: isub
      38: putfield      #13                 // Field freeBytes:I
      41: aload_0
      42: iload_3
      43: invokespecial #44                 // Method subpageIdx:(I)I
      46: istore        6
      48: aload         4
      50: iload         6
      52: aaload
      53: astore        7
      55: aload         7
      57: ifnonnull     89
      60: new           #28                 // class io/netty/buffer/PoolSubpage
      63: dup
      64: aload_0
      65: iload_3
      66: aload_0
      67: iload_3
      68: invokespecial #45                 // Method runOffset:(I)I
      71: iload         5
      73: iload_1
      74: invokespecial #46                 // Method io/netty/buffer/PoolSubpage."<init>":(Lio/netty/buffer/PoolChunk;IIII)V
      77: astore        7
      79: aload         4
      81: iload         6
      83: aload         7
      85: aastore
      86: goto          95
      89: aload         7
      91: iload_1
      92: invokevirtual #47                 // Method io/netty/buffer/PoolSubpage.init:(I)V
      95: aload         7
      97: invokevirtual #48                 // Method io/netty/buffer/PoolSubpage.allocate:()J
     100: lreturn

  void free(long);
    Code:
       0: lload_1
       1: l2i
       2: istore_3
       3: lload_1
       4: bipush        32
       6: lushr
       7: l2i
       8: istore        4
      10: iload         4
      12: ifeq          68
      15: aload_0
      16: getfield      #27                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      19: aload_0
      20: iload_3
      21: invokespecial #44                 // Method subpageIdx:(I)I
      24: aaload
      25: astore        5
      27: getstatic     #14                 // Field $assertionsDisabled:Z
      30: ifne          54
      33: aload         5
      35: ifnull        46
      38: aload         5
      40: getfield      #49                 // Field io/netty/buffer/PoolSubpage.doNotDestroy:Z
      43: ifne          54
      46: new           #15                 // class java/lang/AssertionError
      49: dup
      50: invokespecial #50                 // Method java/lang/AssertionError."<init>":()V
      53: athrow
      54: aload         5
      56: iload         4
      58: ldc           #51                 // int 1073741823
      60: iand
      61: invokevirtual #52                 // Method io/netty/buffer/PoolSubpage.free:(I)Z
      64: ifeq          68
      67: return
      68: aload_0
      69: dup
      70: getfield      #13                 // Field freeBytes:I
      73: aload_0
      74: iload_3
      75: invokespecial #43                 // Method runLength:(I)I
      78: iadd
      79: putfield      #13                 // Field freeBytes:I
      82: aload_0
      83: iload_3
      84: aload_0
      85: iload_3
      86: invokespecial #35                 // Method depth:(I)B
      89: invokespecial #34                 // Method setValue:(IB)V
      92: aload_0
      93: iload_3
      94: invokespecial #53                 // Method updateParentsFree:(I)V
      97: return

  void initBuf(io.netty.buffer.PooledByteBuf<T>, long, int);
    Code:
       0: lload_2
       1: l2i
       2: istore        5
       4: lload_2
       5: bipush        32
       7: lushr
       8: l2i
       9: istore        6
      11: iload         6
      13: ifne          85
      16: aload_0
      17: iload         5
      19: invokespecial #33                 // Method value:(I)B
      22: istore        7
      24: getstatic     #14                 // Field $assertionsDisabled:Z
      27: ifne          52
      30: iload         7
      32: aload_0
      33: getfield      #9                  // Field unusable:B
      36: if_icmpeq     52
      39: new           #15                 // class java/lang/AssertionError
      42: dup
      43: iload         7
      45: invokestatic  #54                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;
      48: invokespecial #22                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      51: athrow
      52: aload_1
      53: aload_0
      54: lload_2
      55: aload_0
      56: iload         5
      58: invokespecial #45                 // Method runOffset:(I)I
      61: iload         4
      63: aload_0
      64: iload         5
      66: invokespecial #43                 // Method runLength:(I)I
      69: aload_0
      70: getfield      #3                  // Field arena:Lio/netty/buffer/PoolArena;
      73: getfield      #55                 // Field io/netty/buffer/PoolArena.parent:Lio/netty/buffer/PooledByteBufAllocator;
      76: invokevirtual #56                 // Method io/netty/buffer/PooledByteBufAllocator.threadCache:()Lio/netty/buffer/PoolThreadCache;
      79: invokevirtual #57                 // Method io/netty/buffer/PooledByteBuf.init:(Lio/netty/buffer/PoolChunk;JIIILio/netty/buffer/PoolThreadCache;)V
      82: goto          95
      85: aload_0
      86: aload_1
      87: lload_2
      88: iload         6
      90: iload         4
      92: invokespecial #58                 // Method initBufWithSubpage:(Lio/netty/buffer/PooledByteBuf;JII)V
      95: return

  void initBufWithSubpage(io.netty.buffer.PooledByteBuf<T>, long, int);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: lload_2
       4: bipush        32
       6: lushr
       7: l2i
       8: iload         4
      10: invokespecial #58                 // Method initBufWithSubpage:(Lio/netty/buffer/PooledByteBuf;JII)V
      13: return

  private void initBufWithSubpage(io.netty.buffer.PooledByteBuf<T>, long, int, int);
    Code:
       0: getstatic     #14                 // Field $assertionsDisabled:Z
       3: ifne          19
       6: iload         4
       8: ifne          19
      11: new           #15                 // class java/lang/AssertionError
      14: dup
      15: invokespecial #50                 // Method java/lang/AssertionError."<init>":()V
      18: athrow
      19: lload_2
      20: l2i
      21: istore        6
      23: aload_0
      24: getfield      #27                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      27: aload_0
      28: iload         6
      30: invokespecial #44                 // Method subpageIdx:(I)I
      33: aaload
      34: astore        7
      36: getstatic     #14                 // Field $assertionsDisabled:Z
      39: ifne          58
      42: aload         7
      44: getfield      #49                 // Field io/netty/buffer/PoolSubpage.doNotDestroy:Z
      47: ifne          58
      50: new           #15                 // class java/lang/AssertionError
      53: dup
      54: invokespecial #50                 // Method java/lang/AssertionError."<init>":()V
      57: athrow
      58: getstatic     #14                 // Field $assertionsDisabled:Z
      61: ifne          82
      64: iload         5
      66: aload         7
      68: getfield      #59                 // Field io/netty/buffer/PoolSubpage.elemSize:I
      71: if_icmple     82
      74: new           #15                 // class java/lang/AssertionError
      77: dup
      78: invokespecial #50                 // Method java/lang/AssertionError."<init>":()V
      81: athrow
      82: aload_1
      83: aload_0
      84: lload_2
      85: aload_0
      86: iload         6
      88: invokespecial #45                 // Method runOffset:(I)I
      91: iload         4
      93: ldc           #51                 // int 1073741823
      95: iand
      96: aload         7
      98: getfield      #59                 // Field io/netty/buffer/PoolSubpage.elemSize:I
     101: imul
     102: iadd
     103: iload         5
     105: aload         7
     107: getfield      #59                 // Field io/netty/buffer/PoolSubpage.elemSize:I
     110: aload_0
     111: getfield      #3                  // Field arena:Lio/netty/buffer/PoolArena;
     114: getfield      #55                 // Field io/netty/buffer/PoolArena.parent:Lio/netty/buffer/PooledByteBufAllocator;
     117: invokevirtual #56                 // Method io/netty/buffer/PooledByteBufAllocator.threadCache:()Lio/netty/buffer/PoolThreadCache;
     120: invokevirtual #57                 // Method io/netty/buffer/PooledByteBuf.init:(Lio/netty/buffer/PoolChunk;JIIILio/netty/buffer/PoolThreadCache;)V
     123: return

  private byte value(int);
    Code:
       0: aload_0
       1: getfield      #24                 // Field memoryMap:[B
       4: iload_1
       5: baload
       6: ireturn

  private void setValue(int, byte);
    Code:
       0: aload_0
       1: getfield      #24                 // Field memoryMap:[B
       4: iload_1
       5: iload_2
       6: bastore
       7: return

  private byte depth(int);
    Code:
       0: aload_0
       1: getfield      #25                 // Field depthMap:[B
       4: iload_1
       5: baload
       6: ireturn

  private static int log2(int);
    Code:
       0: bipush        31
       2: iload_0
       3: invokestatic  #60                 // Method java/lang/Integer.numberOfLeadingZeros:(I)I
       6: isub
       7: ireturn

  private int runLength(int);
    Code:
       0: iconst_1
       1: aload_0
       2: getfield      #11                 // Field log2ChunkSize:I
       5: aload_0
       6: iload_1
       7: invokespecial #35                 // Method depth:(I)B
      10: isub
      11: ishl
      12: ireturn

  private int runOffset(int);
    Code:
       0: iload_1
       1: iconst_1
       2: aload_0
       3: iload_1
       4: invokespecial #35                 // Method depth:(I)B
       7: ishl
       8: ixor
       9: istore_2
      10: iload_2
      11: aload_0
      12: iload_1
      13: invokespecial #43                 // Method runLength:(I)I
      16: imul
      17: ireturn

  private int subpageIdx(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #23                 // Field maxSubpageAllocs:I
       5: ixor
       6: ireturn

  public int chunkSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field chunkSize:I
       4: ireturn

  public int freeBytes();
    Code:
       0: aload_0
       1: getfield      #13                 // Field freeBytes:I
       4: ireturn

  public java.lang.String toString();
    Code:
       0: new           #16                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #61                 // String Chunk(
       9: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokestatic  #62                 // Method java/lang/System.identityHashCode:(Ljava/lang/Object;)I
      16: invokestatic  #63                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      19: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #64                 // String :
      24: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: invokevirtual #65                 // Method usage:()I
      31: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      34: ldc           #66                 // String %,
      36: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_0
      40: getfield      #8                  // Field chunkSize:I
      43: aload_0
      44: getfield      #13                 // Field freeBytes:I
      47: isub
      48: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      51: bipush        47
      53: invokevirtual #67                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      56: aload_0
      57: getfield      #8                  // Field chunkSize:I
      60: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      63: bipush        41
      65: invokevirtual #67                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      68: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      71: areturn

  static {};
    Code:
       0: ldc_w         #68                 // class io/netty/buffer/PoolChunk
       3: invokevirtual #69                 // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #14                 // Field $assertionsDisabled:Z
      17: return
}
