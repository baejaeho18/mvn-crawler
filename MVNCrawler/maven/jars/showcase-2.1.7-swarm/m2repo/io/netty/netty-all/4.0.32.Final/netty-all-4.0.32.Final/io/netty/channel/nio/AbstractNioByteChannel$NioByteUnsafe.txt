Compiled from "AbstractNioByteChannel.java"
public class io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe extends io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe {
  private io.netty.channel.RecvByteBufAllocator$Handle allocHandle;

  final io.netty.channel.nio.AbstractNioByteChannel this$0;

  protected io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe(io.netty.channel.nio.AbstractNioByteChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
       5: aload_0
       6: aload_1
       7: invokespecial #2                  // Method io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe."<init>":(Lio/netty/channel/nio/AbstractNioChannel;)V
      10: return

  private void closeOnRead(io.netty.channel.ChannelPipeline);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
       4: invokevirtual #3                  // Method io/netty/channel/nio/AbstractNioByteChannel.selectionKey:()Ljava/nio/channels/SelectionKey;
       7: astore_2
       8: aload_0
       9: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
      12: invokevirtual #4                  // Method io/netty/channel/nio/AbstractNioByteChannel.setInputShutdown:()V
      15: aload_0
      16: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
      19: invokevirtual #5                  // Method io/netty/channel/nio/AbstractNioByteChannel.isOpen:()Z
      22: ifeq          89
      25: getstatic     #6                  // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      28: aload_0
      29: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
      32: invokevirtual #7                  // Method io/netty/channel/nio/AbstractNioByteChannel.config:()Lio/netty/channel/ChannelConfig;
      35: getstatic     #8                  // Field io/netty/channel/ChannelOption.ALLOW_HALF_CLOSURE:Lio/netty/channel/ChannelOption;
      38: invokeinterface #9,  2            // InterfaceMethod io/netty/channel/ChannelConfig.getOption:(Lio/netty/channel/ChannelOption;)Ljava/lang/Object;
      43: invokevirtual #10                 // Method java/lang/Boolean.equals:(Ljava/lang/Object;)Z
      46: ifeq          81
      49: aload_2
      50: aload_2
      51: invokevirtual #11                 // Method java/nio/channels/SelectionKey.interestOps:()I
      54: aload_0
      55: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
      58: getfield      #12                 // Field io/netty/channel/nio/AbstractNioByteChannel.readInterestOp:I
      61: iconst_m1
      62: ixor
      63: iand
      64: invokevirtual #13                 // Method java/nio/channels/SelectionKey.interestOps:(I)Ljava/nio/channels/SelectionKey;
      67: pop
      68: aload_1
      69: getstatic     #14                 // Field io/netty/channel/socket/ChannelInputShutdownEvent.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownEvent;
      72: invokeinterface #15,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
      77: pop
      78: goto          89
      81: aload_0
      82: aload_0
      83: invokevirtual #16                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      86: invokevirtual #17                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      89: return

  private void handleReadException(io.netty.channel.ChannelPipeline, io.netty.buffer.ByteBuf, java.lang.Throwable, boolean);
    Code:
       0: aload_2
       1: ifnull        35
       4: aload_2
       5: invokevirtual #18                 // Method io/netty/buffer/ByteBuf.isReadable:()Z
       8: ifeq          30
      11: aload_0
      12: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
      15: iconst_0
      16: invokevirtual #19                 // Method io/netty/channel/nio/AbstractNioByteChannel.setReadPending:(Z)V
      19: aload_1
      20: aload_2
      21: invokeinterface #20,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireChannelRead:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
      26: pop
      27: goto          35
      30: aload_2
      31: invokevirtual #21                 // Method io/netty/buffer/ByteBuf.release:()Z
      34: pop
      35: aload_1
      36: invokeinterface #22,  1           // InterfaceMethod io/netty/channel/ChannelPipeline.fireChannelReadComplete:()Lio/netty/channel/ChannelPipeline;
      41: pop
      42: aload_1
      43: aload_3
      44: invokeinterface #23,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireExceptionCaught:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPipeline;
      49: pop
      50: iload         4
      52: ifne          62
      55: aload_3
      56: instanceof    #24                 // class java/io/IOException
      59: ifeq          67
      62: aload_0
      63: aload_1
      64: invokespecial #25                 // Method closeOnRead:(Lio/netty/channel/ChannelPipeline;)V
      67: return

  public final void read();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
       4: invokevirtual #7                  // Method io/netty/channel/nio/AbstractNioByteChannel.config:()Lio/netty/channel/ChannelConfig;
       7: astore_1
       8: aload_1
       9: invokeinterface #26,  1           // InterfaceMethod io/netty/channel/ChannelConfig.isAutoRead:()Z
      14: ifne          32
      17: aload_0
      18: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
      21: invokevirtual #27                 // Method io/netty/channel/nio/AbstractNioByteChannel.isReadPending:()Z
      24: ifne          32
      27: aload_0
      28: invokevirtual #28                 // Method removeReadOp:()V
      31: return
      32: aload_0
      33: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
      36: invokevirtual #29                 // Method io/netty/channel/nio/AbstractNioByteChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      39: astore_2
      40: aload_1
      41: invokeinterface #30,  1           // InterfaceMethod io/netty/channel/ChannelConfig.getAllocator:()Lio/netty/buffer/ByteBufAllocator;
      46: astore_3
      47: aload_1
      48: invokeinterface #31,  1           // InterfaceMethod io/netty/channel/ChannelConfig.getMaxMessagesPerRead:()I
      53: istore        4
      55: aload_0
      56: getfield      #32                 // Field allocHandle:Lio/netty/channel/RecvByteBufAllocator$Handle;
      59: astore        5
      61: aload         5
      63: ifnonnull     84
      66: aload_0
      67: aload_1
      68: invokeinterface #33,  1           // InterfaceMethod io/netty/channel/ChannelConfig.getRecvByteBufAllocator:()Lio/netty/channel/RecvByteBufAllocator;
      73: invokeinterface #34,  1           // InterfaceMethod io/netty/channel/RecvByteBufAllocator.newHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
      78: dup
      79: astore        5
      81: putfield      #32                 // Field allocHandle:Lio/netty/channel/RecvByteBufAllocator$Handle;
      84: aconst_null
      85: astore        6
      87: iconst_0
      88: istore        7
      90: iconst_0
      91: istore        8
      93: iconst_0
      94: istore        9
      96: iconst_0
      97: istore        10
      99: aload         5
     101: aload_3
     102: invokeinterface #35,  2           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.allocate:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/buffer/ByteBuf;
     107: astore        6
     109: aload         6
     111: invokevirtual #36                 // Method io/netty/buffer/ByteBuf.writableBytes:()I
     114: istore        11
     116: aload_0
     117: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
     120: aload         6
     122: invokevirtual #37                 // Method io/netty/channel/nio/AbstractNioByteChannel.doReadBytes:(Lio/netty/buffer/ByteBuf;)I
     125: istore        12
     127: iload         12
     129: ifgt          156
     132: aload         6
     134: invokevirtual #21                 // Method io/netty/buffer/ByteBuf.release:()Z
     137: pop
     138: aconst_null
     139: astore        6
     141: iload         12
     143: ifge          150
     146: iconst_1
     147: goto          151
     150: iconst_0
     151: istore        8
     153: goto          240
     156: iload         10
     158: ifne          172
     161: iconst_1
     162: istore        10
     164: aload_0
     165: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
     168: iconst_0
     169: invokevirtual #19                 // Method io/netty/channel/nio/AbstractNioByteChannel.setReadPending:(Z)V
     172: aload_2
     173: aload         6
     175: invokeinterface #20,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireChannelRead:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
     180: pop
     181: aconst_null
     182: astore        6
     184: iload         9
     186: ldc           #38                 // int 2147483647
     188: iload         12
     190: isub
     191: if_icmplt     201
     194: ldc           #38                 // int 2147483647
     196: istore        9
     198: goto          240
     201: iload         9
     203: iload         12
     205: iadd
     206: istore        9
     208: aload_1
     209: invokeinterface #26,  1           // InterfaceMethod io/netty/channel/ChannelConfig.isAutoRead:()Z
     214: ifne          220
     217: goto          240
     220: iload         12
     222: iload         11
     224: if_icmpge     230
     227: goto          240
     230: iinc          7, 1
     233: iload         7
     235: iload         4
     237: if_icmplt     99
     240: aload_2
     241: invokeinterface #22,  1           // InterfaceMethod io/netty/channel/ChannelPipeline.fireChannelReadComplete:()Lio/netty/channel/ChannelPipeline;
     246: pop
     247: aload         5
     249: iload         9
     251: invokeinterface #39,  2           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.record:(I)V
     256: iload         8
     258: ifeq          269
     261: aload_0
     262: aload_2
     263: invokespecial #25                 // Method closeOnRead:(Lio/netty/channel/ChannelPipeline;)V
     266: iconst_0
     267: istore        8
     269: aload_1
     270: invokeinterface #26,  1           // InterfaceMethod io/netty/channel/ChannelConfig.isAutoRead:()Z
     275: ifne          362
     278: aload_0
     279: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
     282: invokevirtual #27                 // Method io/netty/channel/nio/AbstractNioByteChannel.isReadPending:()Z
     285: ifne          362
     288: aload_0
     289: invokevirtual #28                 // Method removeReadOp:()V
     292: goto          362
     295: astore        9
     297: aload_0
     298: aload_2
     299: aload         6
     301: aload         9
     303: iload         8
     305: invokespecial #41                 // Method handleReadException:(Lio/netty/channel/ChannelPipeline;Lio/netty/buffer/ByteBuf;Ljava/lang/Throwable;Z)V
     308: aload_1
     309: invokeinterface #26,  1           // InterfaceMethod io/netty/channel/ChannelConfig.isAutoRead:()Z
     314: ifne          362
     317: aload_0
     318: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
     321: invokevirtual #27                 // Method io/netty/channel/nio/AbstractNioByteChannel.isReadPending:()Z
     324: ifne          362
     327: aload_0
     328: invokevirtual #28                 // Method removeReadOp:()V
     331: goto          362
     334: astore        13
     336: aload_1
     337: invokeinterface #26,  1           // InterfaceMethod io/netty/channel/ChannelConfig.isAutoRead:()Z
     342: ifne          359
     345: aload_0
     346: getfield      #1                  // Field this$0:Lio/netty/channel/nio/AbstractNioByteChannel;
     349: invokevirtual #27                 // Method io/netty/channel/nio/AbstractNioByteChannel.isReadPending:()Z
     352: ifne          359
     355: aload_0
     356: invokevirtual #28                 // Method removeReadOp:()V
     359: aload         13
     361: athrow
     362: return
    Exception table:
       from    to  target type
          93   269   295   Class java/lang/Throwable
          93   269   334   any
         295   308   334   any
         334   336   334   any
}
