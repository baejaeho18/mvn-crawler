Compiled from "AbstractChannel.java"
public abstract class io.netty.channel.AbstractChannel extends io.netty.util.DefaultAttributeMap implements io.netty.channel.Channel {
  private static final io.netty.util.internal.logging.InternalLogger logger;

  static final java.nio.channels.ClosedChannelException CLOSED_CHANNEL_EXCEPTION;

  static final java.nio.channels.NotYetConnectedException NOT_YET_CONNECTED_EXCEPTION;

  private io.netty.channel.MessageSizeEstimator$Handle estimatorHandle;

  private final io.netty.channel.Channel parent;

  private final long hashCode;

  private final io.netty.channel.Channel$Unsafe unsafe;

  private final io.netty.channel.DefaultChannelPipeline pipeline;

  private final io.netty.channel.ChannelFuture succeededFuture;

  private final io.netty.channel.VoidChannelPromise voidPromise;

  private final io.netty.channel.VoidChannelPromise unsafeVoidPromise;

  private final io.netty.channel.AbstractChannel$CloseFuture closeFuture;

  private volatile java.net.SocketAddress localAddress;

  private volatile java.net.SocketAddress remoteAddress;

  private volatile io.netty.channel.EventLoop eventLoop;

  private volatile boolean registered;

  private boolean strValActive;

  private java.lang.String strVal;

  protected io.netty.channel.AbstractChannel(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method io/netty/util/DefaultAttributeMap."<init>":()V
       4: aload_0
       5: invokestatic  #8                  // Method io/netty/util/internal/ThreadLocalRandom.current:()Lio/netty/util/internal/ThreadLocalRandom;
       8: invokevirtual #9                  // Method io/netty/util/internal/ThreadLocalRandom.nextLong:()J
      11: putfield      #10                 // Field hashCode:J
      14: aload_0
      15: new           #11                 // class io/netty/channel/SucceededChannelFuture
      18: dup
      19: aload_0
      20: aconst_null
      21: invokespecial #12                 // Method io/netty/channel/SucceededChannelFuture."<init>":(Lio/netty/channel/Channel;Lio/netty/util/concurrent/EventExecutor;)V
      24: putfield      #13                 // Field succeededFuture:Lio/netty/channel/ChannelFuture;
      27: aload_0
      28: new           #14                 // class io/netty/channel/VoidChannelPromise
      31: dup
      32: aload_0
      33: iconst_1
      34: invokespecial #15                 // Method io/netty/channel/VoidChannelPromise."<init>":(Lio/netty/channel/Channel;Z)V
      37: putfield      #16                 // Field voidPromise:Lio/netty/channel/VoidChannelPromise;
      40: aload_0
      41: new           #14                 // class io/netty/channel/VoidChannelPromise
      44: dup
      45: aload_0
      46: iconst_0
      47: invokespecial #15                 // Method io/netty/channel/VoidChannelPromise."<init>":(Lio/netty/channel/Channel;Z)V
      50: putfield      #1                  // Field unsafeVoidPromise:Lio/netty/channel/VoidChannelPromise;
      53: aload_0
      54: new           #17                 // class io/netty/channel/AbstractChannel$CloseFuture
      57: dup
      58: aload_0
      59: invokespecial #18                 // Method io/netty/channel/AbstractChannel$CloseFuture."<init>":(Lio/netty/channel/AbstractChannel;)V
      62: putfield      #4                  // Field closeFuture:Lio/netty/channel/AbstractChannel$CloseFuture;
      65: aload_0
      66: aload_1
      67: putfield      #19                 // Field parent:Lio/netty/channel/Channel;
      70: aload_0
      71: aload_0
      72: invokevirtual #20                 // Method newUnsafe:()Lio/netty/channel/AbstractChannel$AbstractUnsafe;
      75: putfield      #21                 // Field unsafe:Lio/netty/channel/Channel$Unsafe;
      78: aload_0
      79: new           #22                 // class io/netty/channel/DefaultChannelPipeline
      82: dup
      83: aload_0
      84: invokespecial #23                 // Method io/netty/channel/DefaultChannelPipeline."<init>":(Lio/netty/channel/AbstractChannel;)V
      87: putfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
      90: return

  public boolean isWritable();
    Code:
       0: aload_0
       1: getfield      #21                 // Field unsafe:Lio/netty/channel/Channel$Unsafe;
       4: invokeinterface #24,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.outboundBuffer:()Lio/netty/channel/ChannelOutboundBuffer;
       9: astore_1
      10: aload_1
      11: ifnull        25
      14: aload_1
      15: invokevirtual #25                 // Method io/netty/channel/ChannelOutboundBuffer.isWritable:()Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public io.netty.channel.Channel parent();
    Code:
       0: aload_0
       1: getfield      #19                 // Field parent:Lio/netty/channel/Channel;
       4: areturn

  public io.netty.channel.ChannelPipeline pipeline();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: areturn

  public io.netty.buffer.ByteBufAllocator alloc();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method config:()Lio/netty/channel/ChannelConfig;
       4: invokeinterface #27,  1           // InterfaceMethod io/netty/channel/ChannelConfig.getAllocator:()Lio/netty/buffer/ByteBufAllocator;
       9: areturn

  public io.netty.channel.EventLoop eventLoop();
    Code:
       0: aload_0
       1: getfield      #6                  // Field eventLoop:Lio/netty/channel/EventLoop;
       4: astore_1
       5: aload_1
       6: ifnonnull     19
       9: new           #28                 // class java/lang/IllegalStateException
      12: dup
      13: ldc           #29                 // String channel not registered to an event loop
      15: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_1
      20: areturn

  public java.net.SocketAddress localAddress();
    Code:
       0: aload_0
       1: getfield      #31                 // Field localAddress:Ljava/net/SocketAddress;
       4: astore_1
       5: aload_1
       6: ifnonnull     30
       9: aload_0
      10: aload_0
      11: invokevirtual #32                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
      14: invokeinterface #33,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.localAddress:()Ljava/net/SocketAddress;
      19: dup
      20: astore_1
      21: putfield      #31                 // Field localAddress:Ljava/net/SocketAddress;
      24: goto          30
      27: astore_2
      28: aconst_null
      29: areturn
      30: aload_1
      31: areturn
    Exception table:
       from    to  target type
           9    24    27   Class java/lang/Throwable

  protected void invalidateLocalAddress();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #31                 // Field localAddress:Ljava/net/SocketAddress;
       5: return

  public java.net.SocketAddress remoteAddress();
    Code:
       0: aload_0
       1: getfield      #35                 // Field remoteAddress:Ljava/net/SocketAddress;
       4: astore_1
       5: aload_1
       6: ifnonnull     30
       9: aload_0
      10: aload_0
      11: invokevirtual #32                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
      14: invokeinterface #36,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.remoteAddress:()Ljava/net/SocketAddress;
      19: dup
      20: astore_1
      21: putfield      #35                 // Field remoteAddress:Ljava/net/SocketAddress;
      24: goto          30
      27: astore_2
      28: aconst_null
      29: areturn
      30: aload_1
      31: areturn
    Exception table:
       from    to  target type
           9    24    27   Class java/lang/Throwable

  protected void invalidateRemoteAddress();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #35                 // Field remoteAddress:Ljava/net/SocketAddress;
       5: return

  public boolean isRegistered();
    Code:
       0: aload_0
       1: getfield      #3                  // Field registered:Z
       4: ireturn

  public io.netty.channel.ChannelFuture bind(java.net.SocketAddress);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: invokevirtual #37                 // Method io/netty/channel/DefaultChannelPipeline.bind:(Ljava/net/SocketAddress;)Lio/netty/channel/ChannelFuture;
       8: areturn

  public io.netty.channel.ChannelFuture connect(java.net.SocketAddress);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: invokevirtual #38                 // Method io/netty/channel/DefaultChannelPipeline.connect:(Ljava/net/SocketAddress;)Lio/netty/channel/ChannelFuture;
       8: areturn

  public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: aload_2
       6: invokevirtual #39                 // Method io/netty/channel/DefaultChannelPipeline.connect:(Ljava/net/SocketAddress;Ljava/net/SocketAddress;)Lio/netty/channel/ChannelFuture;
       9: areturn

  public io.netty.channel.ChannelFuture disconnect();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: invokevirtual #40                 // Method io/netty/channel/DefaultChannelPipeline.disconnect:()Lio/netty/channel/ChannelFuture;
       7: areturn

  public io.netty.channel.ChannelFuture close();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: invokevirtual #41                 // Method io/netty/channel/DefaultChannelPipeline.close:()Lio/netty/channel/ChannelFuture;
       7: areturn

  public io.netty.channel.ChannelFuture deregister();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: invokevirtual #42                 // Method io/netty/channel/DefaultChannelPipeline.deregister:()Lio/netty/channel/ChannelFuture;
       7: areturn

  public io.netty.channel.Channel flush();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: invokevirtual #43                 // Method io/netty/channel/DefaultChannelPipeline.flush:()Lio/netty/channel/ChannelPipeline;
       7: pop
       8: aload_0
       9: areturn

  public io.netty.channel.ChannelFuture bind(java.net.SocketAddress, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: aload_2
       6: invokevirtual #44                 // Method io/netty/channel/DefaultChannelPipeline.bind:(Ljava/net/SocketAddress;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
       9: areturn

  public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: aload_2
       6: invokevirtual #45                 // Method io/netty/channel/DefaultChannelPipeline.connect:(Ljava/net/SocketAddress;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
       9: areturn

  public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #46                 // Method io/netty/channel/DefaultChannelPipeline.connect:(Ljava/net/SocketAddress;Ljava/net/SocketAddress;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      10: areturn

  public io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: invokevirtual #47                 // Method io/netty/channel/DefaultChannelPipeline.disconnect:(Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
       8: areturn

  public io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: invokevirtual #48                 // Method io/netty/channel/DefaultChannelPipeline.close:(Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
       8: areturn

  public io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: invokevirtual #49                 // Method io/netty/channel/DefaultChannelPipeline.deregister:(Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
       8: areturn

  public io.netty.channel.Channel read();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: invokevirtual #50                 // Method io/netty/channel/DefaultChannelPipeline.read:()Lio/netty/channel/ChannelPipeline;
       7: pop
       8: aload_0
       9: areturn

  public io.netty.channel.ChannelFuture write(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: invokevirtual #51                 // Method io/netty/channel/DefaultChannelPipeline.write:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
       8: areturn

  public io.netty.channel.ChannelFuture write(java.lang.Object, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: aload_2
       6: invokevirtual #52                 // Method io/netty/channel/DefaultChannelPipeline.write:(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
       9: areturn

  public io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: invokevirtual #53                 // Method io/netty/channel/DefaultChannelPipeline.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
       8: areturn

  public io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: aload_1
       5: aload_2
       6: invokevirtual #54                 // Method io/netty/channel/DefaultChannelPipeline.writeAndFlush:(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
       9: areturn

  public io.netty.channel.ChannelPromise newPromise();
    Code:
       0: new           #55                 // class io/netty/channel/DefaultChannelPromise
       3: dup
       4: aload_0
       5: invokespecial #56                 // Method io/netty/channel/DefaultChannelPromise."<init>":(Lio/netty/channel/Channel;)V
       8: areturn

  public io.netty.channel.ChannelProgressivePromise newProgressivePromise();
    Code:
       0: new           #57                 // class io/netty/channel/DefaultChannelProgressivePromise
       3: dup
       4: aload_0
       5: invokespecial #58                 // Method io/netty/channel/DefaultChannelProgressivePromise."<init>":(Lio/netty/channel/Channel;)V
       8: areturn

  public io.netty.channel.ChannelFuture newSucceededFuture();
    Code:
       0: aload_0
       1: getfield      #13                 // Field succeededFuture:Lio/netty/channel/ChannelFuture;
       4: areturn

  public io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable);
    Code:
       0: new           #59                 // class io/netty/channel/FailedChannelFuture
       3: dup
       4: aload_0
       5: aconst_null
       6: aload_1
       7: invokespecial #60                 // Method io/netty/channel/FailedChannelFuture."<init>":(Lio/netty/channel/Channel;Lio/netty/util/concurrent/EventExecutor;Ljava/lang/Throwable;)V
      10: areturn

  public io.netty.channel.ChannelFuture closeFuture();
    Code:
       0: aload_0
       1: getfield      #4                  // Field closeFuture:Lio/netty/channel/AbstractChannel$CloseFuture;
       4: areturn

  public io.netty.channel.Channel$Unsafe unsafe();
    Code:
       0: aload_0
       1: getfield      #21                 // Field unsafe:Lio/netty/channel/Channel$Unsafe;
       4: areturn

  protected abstract io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe();

  public final int hashCode();
    Code:
       0: aload_0
       1: getfield      #10                 // Field hashCode:J
       4: l2i
       5: ireturn

  public final boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ireturn

  public final int compareTo(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_0
       6: ireturn
       7: aload_0
       8: getfield      #10                 // Field hashCode:J
      11: aload_1
      12: invokevirtual #61                 // Method java/lang/Object.hashCode:()I
      15: i2l
      16: lsub
      17: lstore_2
      18: lload_2
      19: lconst_0
      20: lcmp
      21: ifle          26
      24: iconst_1
      25: ireturn
      26: lload_2
      27: lconst_0
      28: lcmp
      29: ifge          34
      32: iconst_m1
      33: ireturn
      34: aload_0
      35: invokestatic  #62                 // Method java/lang/System.identityHashCode:(Ljava/lang/Object;)I
      38: aload_1
      39: invokestatic  #62                 // Method java/lang/System.identityHashCode:(Ljava/lang/Object;)I
      42: isub
      43: i2l
      44: lstore_2
      45: lload_2
      46: lconst_0
      47: lcmp
      48: ifeq          54
      51: lload_2
      52: l2i
      53: ireturn
      54: new           #63                 // class java/lang/Error
      57: dup
      58: invokespecial #64                 // Method java/lang/Error."<init>":()V
      61: athrow

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method isActive:()Z
       4: istore_1
       5: aload_0
       6: getfield      #66                 // Field strValActive:Z
       9: iload_1
      10: if_icmpne     25
      13: aload_0
      14: getfield      #67                 // Field strVal:Ljava/lang/String;
      17: ifnull        25
      20: aload_0
      21: getfield      #67                 // Field strVal:Ljava/lang/String;
      24: areturn
      25: aload_0
      26: invokevirtual #68                 // Method remoteAddress:()Ljava/net/SocketAddress;
      29: astore_2
      30: aload_0
      31: invokevirtual #69                 // Method localAddress:()Ljava/net/SocketAddress;
      34: astore_3
      35: aload_2
      36: ifnull        112
      39: aload_0
      40: getfield      #19                 // Field parent:Lio/netty/channel/Channel;
      43: ifnonnull     55
      46: aload_3
      47: astore        4
      49: aload_2
      50: astore        5
      52: goto          61
      55: aload_2
      56: astore        4
      58: aload_3
      59: astore        5
      61: aload_0
      62: ldc           #70                 // String [id: 0x%08x, %s %s %s]
      64: iconst_4
      65: anewarray     #71                 // class java/lang/Object
      68: dup
      69: iconst_0
      70: aload_0
      71: getfield      #10                 // Field hashCode:J
      74: l2i
      75: invokestatic  #72                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      78: aastore
      79: dup
      80: iconst_1
      81: aload         4
      83: aastore
      84: dup
      85: iconst_2
      86: iload_1
      87: ifeq          95
      90: ldc           #73                 // String =>
      92: goto          97
      95: ldc           #74                 // String :>
      97: aastore
      98: dup
      99: iconst_3
     100: aload         5
     102: aastore
     103: invokestatic  #75                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     106: putfield      #67                 // Field strVal:Ljava/lang/String;
     109: goto          171
     112: aload_3
     113: ifnull        147
     116: aload_0
     117: ldc           #76                 // String [id: 0x%08x, %s]
     119: iconst_2
     120: anewarray     #71                 // class java/lang/Object
     123: dup
     124: iconst_0
     125: aload_0
     126: getfield      #10                 // Field hashCode:J
     129: l2i
     130: invokestatic  #72                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     133: aastore
     134: dup
     135: iconst_1
     136: aload_3
     137: aastore
     138: invokestatic  #75                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     141: putfield      #67                 // Field strVal:Ljava/lang/String;
     144: goto          171
     147: aload_0
     148: ldc           #77                 // String [id: 0x%08x]
     150: iconst_1
     151: anewarray     #71                 // class java/lang/Object
     154: dup
     155: iconst_0
     156: aload_0
     157: getfield      #10                 // Field hashCode:J
     160: l2i
     161: invokestatic  #72                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     164: aastore
     165: invokestatic  #75                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     168: putfield      #67                 // Field strVal:Ljava/lang/String;
     171: aload_0
     172: iload_1
     173: putfield      #66                 // Field strValActive:Z
     176: aload_0
     177: getfield      #67                 // Field strVal:Ljava/lang/String;
     180: areturn

  public final io.netty.channel.ChannelPromise voidPromise();
    Code:
       0: aload_0
       1: getfield      #16                 // Field voidPromise:Lio/netty/channel/VoidChannelPromise;
       4: areturn

  final io.netty.channel.MessageSizeEstimator$Handle estimatorHandle();
    Code:
       0: aload_0
       1: getfield      #78                 // Field estimatorHandle:Lio/netty/channel/MessageSizeEstimator$Handle;
       4: ifnonnull     25
       7: aload_0
       8: aload_0
       9: invokevirtual #26                 // Method config:()Lio/netty/channel/ChannelConfig;
      12: invokeinterface #79,  1           // InterfaceMethod io/netty/channel/ChannelConfig.getMessageSizeEstimator:()Lio/netty/channel/MessageSizeEstimator;
      17: invokeinterface #80,  1           // InterfaceMethod io/netty/channel/MessageSizeEstimator.newHandle:()Lio/netty/channel/MessageSizeEstimator$Handle;
      22: putfield      #78                 // Field estimatorHandle:Lio/netty/channel/MessageSizeEstimator$Handle;
      25: aload_0
      26: getfield      #78                 // Field estimatorHandle:Lio/netty/channel/MessageSizeEstimator$Handle;
      29: areturn

  protected abstract boolean isCompatible(io.netty.channel.EventLoop);

  protected abstract java.net.SocketAddress localAddress0();

  protected abstract java.net.SocketAddress remoteAddress0();

  protected void doRegister() throws java.lang.Exception;
    Code:
       0: return

  protected abstract void doBind(java.net.SocketAddress) throws java.lang.Exception;

  protected abstract void doDisconnect() throws java.lang.Exception;

  protected abstract void doClose() throws java.lang.Exception;

  protected void doDeregister() throws java.lang.Exception;
    Code:
       0: return

  protected abstract void doBeginRead() throws java.lang.Exception;

  protected abstract void doWrite(io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception;

  protected java.lang.Object filterOutboundMessage(java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_1
       1: areturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #81                 // class io/netty/channel/Channel
       5: invokevirtual #82                 // Method compareTo:(Lio/netty/channel/Channel;)I
       8: ireturn

  static io.netty.channel.EventLoop access$002(io.netty.channel.AbstractChannel, io.netty.channel.EventLoop);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #6                  // Field eventLoop:Lio/netty/channel/EventLoop;
       6: areturn

  static io.netty.util.internal.logging.InternalLogger access$200();
    Code:
       0: getstatic     #5                  // Field logger:Lio/netty/util/internal/logging/InternalLogger;
       3: areturn

  static io.netty.channel.AbstractChannel$CloseFuture access$300(io.netty.channel.AbstractChannel);
    Code:
       0: aload_0
       1: getfield      #4                  // Field closeFuture:Lio/netty/channel/AbstractChannel$CloseFuture;
       4: areturn

  static boolean access$402(io.netty.channel.AbstractChannel, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #3                  // Field registered:Z
       6: ireturn

  static io.netty.channel.DefaultChannelPipeline access$500(io.netty.channel.AbstractChannel);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pipeline:Lio/netty/channel/DefaultChannelPipeline;
       4: areturn

  static boolean access$400(io.netty.channel.AbstractChannel);
    Code:
       0: aload_0
       1: getfield      #3                  // Field registered:Z
       4: ireturn

  static io.netty.channel.VoidChannelPromise access$900(io.netty.channel.AbstractChannel);
    Code:
       0: aload_0
       1: getfield      #1                  // Field unsafeVoidPromise:Lio/netty/channel/VoidChannelPromise;
       4: areturn

  static {};
    Code:
       0: ldc_w         #83                 // class io/netty/channel/AbstractChannel
       3: invokestatic  #84                 // Method io/netty/util/internal/logging/InternalLoggerFactory.getInstance:(Ljava/lang/Class;)Lio/netty/util/internal/logging/InternalLogger;
       6: putstatic     #5                  // Field logger:Lio/netty/util/internal/logging/InternalLogger;
       9: new           #85                 // class java/nio/channels/ClosedChannelException
      12: dup
      13: invokespecial #86                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      16: putstatic     #87                 // Field CLOSED_CHANNEL_EXCEPTION:Ljava/nio/channels/ClosedChannelException;
      19: new           #88                 // class java/nio/channels/NotYetConnectedException
      22: dup
      23: invokespecial #89                 // Method java/nio/channels/NotYetConnectedException."<init>":()V
      26: putstatic     #90                 // Field NOT_YET_CONNECTED_EXCEPTION:Ljava/nio/channels/NotYetConnectedException;
      29: getstatic     #87                 // Field CLOSED_CHANNEL_EXCEPTION:Ljava/nio/channels/ClosedChannelException;
      32: getstatic     #91                 // Field io/netty/util/internal/EmptyArrays.EMPTY_STACK_TRACE:[Ljava/lang/StackTraceElement;
      35: invokevirtual #92                 // Method java/nio/channels/ClosedChannelException.setStackTrace:([Ljava/lang/StackTraceElement;)V
      38: getstatic     #90                 // Field NOT_YET_CONNECTED_EXCEPTION:Ljava/nio/channels/NotYetConnectedException;
      41: getstatic     #91                 // Field io/netty/util/internal/EmptyArrays.EMPTY_STACK_TRACE:[Ljava/lang/StackTraceElement;
      44: invokevirtual #93                 // Method java/nio/channels/NotYetConnectedException.setStackTrace:([Ljava/lang/StackTraceElement;)V
      47: return
}
