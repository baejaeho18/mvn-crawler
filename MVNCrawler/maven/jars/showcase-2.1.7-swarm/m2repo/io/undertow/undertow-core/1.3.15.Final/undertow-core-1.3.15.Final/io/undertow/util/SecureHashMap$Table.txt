Compiled from "SecureHashMap.java"
final class io.undertow.util.SecureHashMap$Table<K, V> {
  final java.util.concurrent.atomic.AtomicReferenceArray<io.undertow.util.SecureHashMap$Item<K, V>[]> array;

  final int threshold;

  volatile int size;

  volatile io.undertow.util.SecureHashMap$Table<K, V> resizeView;

  private io.undertow.util.SecureHashMap$Table(int, float);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/atomic/AtomicReferenceArray
       8: dup
       9: iload_1
      10: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicReferenceArray."<init>":(I)V
      13: putfield      #6                  // Field array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      16: aload_0
      17: iload_1
      18: ldc           #7                  // int 1073741824
      20: if_icmpne     28
      23: ldc           #9                  // int 2147483647
      25: goto          33
      28: iload_1
      29: i2f
      30: fload_2
      31: fmul
      32: f2i
      33: putfield      #10                 // Field threshold:I
      36: return

  io.undertow.util.SecureHashMap$Table(int, float, io.undertow.util.SecureHashMap$1);
    Code:
       0: aload_0
       1: iload_1
       2: fload_2
       3: invokespecial #2                  // Method "<init>":(IF)V
       6: return
}
