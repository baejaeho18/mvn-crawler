Compiled from "Http2HeaderBlockParser.java"
abstract class io.undertow.protocols.http2.Http2HeaderBlockParser extends io.undertow.protocols.http2.Http2PushBackParser implements io.undertow.protocols.http2.HpackDecoder$HeaderEmitter {
  private final io.undertow.util.HeaderMap headerMap;

  private boolean beforeHeadersHandled;

  private final io.undertow.protocols.http2.HpackDecoder decoder;

  private int frameRemaining;

  private boolean invalid;

  public io.undertow.protocols.http2.Http2HeaderBlockParser(int, io.undertow.protocols.http2.HpackDecoder);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method io/undertow/protocols/http2/Http2PushBackParser."<init>":(I)V
       5: aload_0
       6: new           #2                  // class io/undertow/util/HeaderMap
       9: dup
      10: invokespecial #3                  // Method io/undertow/util/HeaderMap."<init>":()V
      13: putfield      #4                  // Field headerMap:Lio/undertow/util/HeaderMap;
      16: aload_0
      17: iconst_0
      18: putfield      #5                  // Field beforeHeadersHandled:Z
      21: aload_0
      22: iconst_m1
      23: putfield      #6                  // Field frameRemaining:I
      26: aload_0
      27: iconst_0
      28: putfield      #7                  // Field invalid:Z
      31: aload_0
      32: aload_2
      33: putfield      #8                  // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
      36: return

  protected void handleData(java.nio.ByteBuffer, io.undertow.protocols.http2.Http2FrameHeaderParser) throws java.io.IOException;
    Code:
       0: aload_2
       1: getfield      #9                  // Field io/undertow/protocols/http2/Http2FrameHeaderParser.flags:I
       4: iconst_4
       5: invokestatic  #11                 // Method org/xnio/Bits.anyAreClear:(II)Z
       8: istore_3
       9: aload_0
      10: getfield      #6                  // Field frameRemaining:I
      13: iconst_m1
      14: if_icmpne     25
      17: aload_0
      18: aload_2
      19: getfield      #12                 // Field io/undertow/protocols/http2/Http2FrameHeaderParser.length:I
      22: putfield      #6                  // Field frameRemaining:I
      25: aload_1
      26: invokevirtual #13                 // Method java/nio/ByteBuffer.remaining:()I
      29: aload_0
      30: getfield      #6                  // Field frameRemaining:I
      33: if_icmpge     40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: istore        4
      43: aload_1
      44: invokevirtual #14                 // Method java/nio/ByteBuffer.position:()I
      47: istore        5
      49: aload_0
      50: getfield      #5                  // Field beforeHeadersHandled:Z
      53: ifne          86
      56: aload_0
      57: aload_1
      58: aload_2
      59: invokevirtual #15                 // Method handleBeforeHeader:(Ljava/nio/ByteBuffer;Lio/undertow/protocols/http2/Http2FrameHeaderParser;)Z
      62: ifne          86
      65: aload_1
      66: invokevirtual #14                 // Method java/nio/ByteBuffer.position:()I
      69: iload         5
      71: isub
      72: istore        6
      74: aload_0
      75: dup
      76: getfield      #6                  // Field frameRemaining:I
      79: iload         6
      81: isub
      82: putfield      #6                  // Field frameRemaining:I
      85: return
      86: aload_0
      87: iconst_1
      88: putfield      #5                  // Field beforeHeadersHandled:Z
      91: aload_0
      92: getfield      #8                  // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
      95: aload_0
      96: invokevirtual #16                 // Method io/undertow/protocols/http2/HpackDecoder.setHeaderEmitter:(Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;)V
      99: aload_0
     100: getfield      #8                  // Field decoder:Lio/undertow/protocols/http2/HpackDecoder;
     103: aload_1
     104: iload         4
     106: invokevirtual #17                 // Method io/undertow/protocols/http2/HpackDecoder.decode:(Ljava/nio/ByteBuffer;Z)V
     109: goto          126
     112: astore        6
     114: new           #19                 // class io/undertow/protocols/http2/ConnectionErrorException
     117: dup
     118: bipush        9
     120: aload         6
     122: invokespecial #20                 // Method io/undertow/protocols/http2/ConnectionErrorException."<init>":(ILjava/lang/Throwable;)V
     125: athrow
     126: aload_1
     127: invokevirtual #14                 // Method java/nio/ByteBuffer.position:()I
     130: iload         5
     132: isub
     133: istore        6
     135: aload_0
     136: dup
     137: getfield      #6                  // Field frameRemaining:I
     140: iload         6
     142: isub
     143: putfield      #6                  // Field frameRemaining:I
     146: goto          174
     149: astore        7
     151: aload_1
     152: invokevirtual #14                 // Method java/nio/ByteBuffer.position:()I
     155: iload         5
     157: isub
     158: istore        8
     160: aload_0
     161: dup
     162: getfield      #6                  // Field frameRemaining:I
     165: iload         8
     167: isub
     168: putfield      #6                  // Field frameRemaining:I
     171: aload         7
     173: athrow
     174: return
    Exception table:
       from    to  target type
          99   109   112   Class io/undertow/protocols/http2/HpackException
          49    65   149   any
          86   126   149   any
         149   151   149   any

  protected abstract boolean handleBeforeHeader(java.nio.ByteBuffer, io.undertow.protocols.http2.Http2FrameHeaderParser);

  io.undertow.util.HeaderMap getHeaderMap();
    Code:
       0: aload_0
       1: getfield      #4                  // Field headerMap:Lio/undertow/util/HeaderMap;
       4: areturn

  public void emitHeader(io.undertow.util.HttpString, java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #4                  // Field headerMap:Lio/undertow/util/HeaderMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #21                 // Method io/undertow/util/HeaderMap.add:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
       9: pop
      10: iconst_0
      11: istore        4
      13: iload         4
      15: aload_1
      16: invokevirtual #22                 // Method io/undertow/util/HttpString.length:()I
      19: if_icmpge     66
      22: aload_1
      23: iload         4
      25: invokevirtual #23                 // Method io/undertow/util/HttpString.byteAt:(I)B
      28: istore        5
      30: iload         5
      32: bipush        65
      34: if_icmplt     60
      37: iload         5
      39: bipush        90
      41: if_icmpgt     60
      44: aload_0
      45: iconst_1
      46: putfield      #7                  // Field invalid:Z
      49: getstatic     #24                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      52: ldc           #25                 // String Malformed request, header %s contains uppercase characters
      54: aload_1
      55: invokeinterface #26,  3           // InterfaceMethod io/undertow/UndertowLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
      60: iinc          4, 1
      63: goto          13
      66: return

  protected void moreData(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #27                 // Method io/undertow/protocols/http2/Http2PushBackParser.moreData:(I)V
       5: aload_0
       6: dup
       7: getfield      #6                  // Field frameRemaining:I
      10: iload_1
      11: iadd
      12: putfield      #6                  // Field frameRemaining:I
      15: return

  public boolean isInvalid();
    Code:
       0: aload_0
       1: getfield      #7                  // Field invalid:Z
       4: ireturn
}
