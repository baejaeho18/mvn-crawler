Compiled from "ModClusterProxyClient.java"
class io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient implements io.undertow.server.handlers.proxy.ProxyClient {
  private final io.undertow.util.AttachmentKey<io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$ExclusiveConnectionHolder> exclusiveConnectionKey;

  private final io.undertow.server.handlers.proxy.ExclusivityChecker exclusivityChecker;

  private final io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer container;

  protected io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient(io.undertow.server.handlers.proxy.ExclusivityChecker, io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #3                  // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient$ExclusiveConnectionHolder
       7: invokestatic  #4                  // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
      10: putfield      #1                  // Field exclusiveConnectionKey:Lio/undertow/util/AttachmentKey;
      13: aload_0
      14: aload_1
      15: putfield      #5                  // Field exclusivityChecker:Lio/undertow/server/handlers/proxy/ExclusivityChecker;
      18: aload_0
      19: aload_2
      20: putfield      #6                  // Field container:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;
      23: return

  public io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget findTarget(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: getfield      #6                  // Field container:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;
       4: aload_1
       5: invokevirtual #7                  // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer.findTarget:(Lio/undertow/server/HttpServerExchange;)Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget;
       8: areturn

  public void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget, io.undertow.server.HttpServerExchange, io.undertow.server.handlers.proxy.ProxyCallback<io.undertow.server.handlers.proxy.ProxyConnection>, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_2
       1: invokevirtual #8                  // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
       4: aload_0
       5: getfield      #1                  // Field exclusiveConnectionKey:Lio/undertow/util/AttachmentKey;
       8: invokevirtual #9                  // Method io/undertow/server/ServerConnection.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
      11: checkcast     #3                  // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient$ExclusiveConnectionHolder
      14: astore        7
      16: aload         7
      18: ifnull        50
      21: aload         7
      23: invokestatic  #10                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient$ExclusiveConnectionHolder.access$000:(Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient$ExclusiveConnectionHolder;)Lio/undertow/server/handlers/proxy/ProxyConnection;
      26: invokevirtual #11                 // Method io/undertow/server/handlers/proxy/ProxyConnection.getConnection:()Lio/undertow/client/ClientConnection;
      29: invokeinterface #12,  1           // InterfaceMethod io/undertow/client/ClientConnection.isOpen:()Z
      34: ifeq          50
      37: aload_3
      38: aload_2
      39: aload         7
      41: invokestatic  #10                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient$ExclusiveConnectionHolder.access$000:(Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient$ExclusiveConnectionHolder;)Lio/undertow/server/handlers/proxy/ProxyConnection;
      44: invokeinterface #13,  3           // InterfaceMethod io/undertow/server/handlers/proxy/ProxyCallback.completed:(Lio/undertow/server/HttpServerExchange;Ljava/lang/Object;)V
      49: return
      50: aload_1
      51: instanceof    #14                 // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget
      54: ifne          65
      57: aload_3
      58: aload_2
      59: invokeinterface #15,  2           // InterfaceMethod io/undertow/server/handlers/proxy/ProxyCallback.couldNotResolveBackend:(Lio/undertow/server/HttpServerExchange;)V
      64: return
      65: aload_1
      66: checkcast     #14                 // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget
      69: astore        8
      71: aload         8
      73: aload_2
      74: invokeinterface #16,  2           // InterfaceMethod io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget.resolveContext:(Lio/undertow/server/HttpServerExchange;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
      79: astore        9
      81: aload         9
      83: ifnonnull     96
      86: aload_3
      87: aload_2
      88: invokeinterface #15,  2           // InterfaceMethod io/undertow/server/handlers/proxy/ProxyCallback.couldNotResolveBackend:(Lio/undertow/server/HttpServerExchange;)V
      93: goto          166
      96: aload         7
      98: ifnonnull     121
     101: aload_0
     102: getfield      #5                  // Field exclusivityChecker:Lio/undertow/server/handlers/proxy/ExclusivityChecker;
     105: ifnull        152
     108: aload_0
     109: getfield      #5                  // Field exclusivityChecker:Lio/undertow/server/handlers/proxy/ExclusivityChecker;
     112: aload_2
     113: invokeinterface #17,  2           // InterfaceMethod io/undertow/server/handlers/proxy/ExclusivityChecker.isExclusivityRequired:(Lio/undertow/server/HttpServerExchange;)Z
     118: ifeq          152
     121: new           #18                 // class io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient$1
     124: dup
     125: aload_0
     126: aload         7
     128: aload_3
     129: invokespecial #19                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient$1."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient;Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyClient$ExclusiveConnectionHolder;Lio/undertow/server/handlers/proxy/ProxyCallback;)V
     132: astore        10
     134: aload         9
     136: aload         8
     138: aload_2
     139: aload         10
     141: lload         4
     143: aload         6
     145: iconst_1
     146: invokevirtual #20                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.handleRequest:(Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget;Lio/undertow/server/HttpServerExchange;Lio/undertow/server/handlers/proxy/ProxyCallback;JLjava/util/concurrent/TimeUnit;Z)V
     149: goto          166
     152: aload         9
     154: aload         8
     156: aload_2
     157: aload_3
     158: lload         4
     160: aload         6
     162: iconst_0
     163: invokevirtual #20                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.handleRequest:(Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterProxyTarget;Lio/undertow/server/HttpServerExchange;Lio/undertow/server/handlers/proxy/ProxyCallback;JLjava/util/concurrent/TimeUnit;Z)V
     166: return

  static io.undertow.util.AttachmentKey access$200(io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient);
    Code:
       0: aload_0
       1: getfield      #1                  // Field exclusiveConnectionKey:Lio/undertow/util/AttachmentKey;
       4: areturn
}
