Compiled from "Http2ClientProvider.java"
final class io.undertow.client.http2.Http2ClientProvider$4 implements org.xnio.ChannelListener<org.xnio.channels.StreamSourceChannel> {
  final io.undertow.client.http2.Http2ClientProvider$Http2SelectionProvider val$http2SelectionProvider;

  final org.xnio.ssl.SslConnection val$sslConnection;

  final org.xnio.ChannelListener val$http2FailedListener;

  final io.undertow.client.ClientCallback val$listener;

  final org.xnio.StreamConnection val$connection;

  final io.undertow.connector.ByteBufferPool val$bufferPool;

  final org.xnio.OptionMap val$options;

  final java.net.URI val$uri;

  final javax.net.ssl.SSLEngine val$sslEngine;

  io.undertow.client.http2.Http2ClientProvider$4(io.undertow.client.http2.Http2ClientProvider$Http2SelectionProvider, org.xnio.ssl.SslConnection, org.xnio.ChannelListener, io.undertow.client.ClientCallback, org.xnio.StreamConnection, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap, java.net.URI, javax.net.ssl.SSLEngine);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
       5: aload_0
       6: aload_2
       7: putfield      #3                  // Field val$sslConnection:Lorg/xnio/ssl/SslConnection;
      10: aload_0
      11: aload_3
      12: putfield      #4                  // Field val$http2FailedListener:Lorg/xnio/ChannelListener;
      15: aload_0
      16: aload         4
      18: putfield      #5                  // Field val$listener:Lio/undertow/client/ClientCallback;
      21: aload_0
      22: aload         5
      24: putfield      #6                  // Field val$connection:Lorg/xnio/StreamConnection;
      27: aload_0
      28: aload         6
      30: putfield      #7                  // Field val$bufferPool:Lio/undertow/connector/ByteBufferPool;
      33: aload_0
      34: aload         7
      36: putfield      #8                  // Field val$options:Lorg/xnio/OptionMap;
      39: aload_0
      40: aload         8
      42: putfield      #9                  // Field val$uri:Ljava/net/URI;
      45: aload_0
      46: aload         9
      48: putfield      #10                 // Field val$sslEngine:Ljavax/net/ssl/SSLEngine;
      51: aload_0
      52: invokespecial #11                 // Method java/lang/Object."<init>":()V
      55: return

  public void handleEvent(org.xnio.channels.StreamSourceChannel);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
       4: invokestatic  #12                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider.access$200:(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;)Ljava/lang/String;
       7: ifnull        98
      10: aload_0
      11: getfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
      14: invokestatic  #12                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider.access$200:(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;)Ljava/lang/String;
      17: ldc           #13                 // String http/1.1
      19: invokevirtual #14                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      22: ifeq          49
      25: aload_0
      26: getfield      #3                  // Field val$sslConnection:Lorg/xnio/ssl/SslConnection;
      29: invokevirtual #15                 // Method org/xnio/ssl/SslConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      32: invokevirtual #16                 // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
      35: aload_0
      36: getfield      #4                  // Field val$http2FailedListener:Lorg/xnio/ChannelListener;
      39: aload_0
      40: getfield      #3                  // Field val$sslConnection:Lorg/xnio/ssl/SslConnection;
      43: invokeinterface #17,  2           // InterfaceMethod org/xnio/ChannelListener.handleEvent:(Ljava/nio/channels/Channel;)V
      48: return
      49: aload_0
      50: getfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
      53: invokestatic  #12                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider.access$200:(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;)Ljava/lang/String;
      56: ldc           #18                 // String h2
      58: invokevirtual #14                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      61: ifeq          324
      64: aload_0
      65: getfield      #5                  // Field val$listener:Lio/undertow/client/ClientCallback;
      68: aload_0
      69: getfield      #6                  // Field val$connection:Lorg/xnio/StreamConnection;
      72: aload_0
      73: getfield      #7                  // Field val$bufferPool:Lio/undertow/connector/ByteBufferPool;
      76: aload_0
      77: getfield      #8                  // Field val$options:Lorg/xnio/OptionMap;
      80: aload_0
      81: getfield      #9                  // Field val$uri:Ljava/net/URI;
      84: invokevirtual #19                 // Method java/net/URI.getHost:()Ljava/lang/String;
      87: invokestatic  #20                 // Method io/undertow/client/http2/Http2ClientProvider.access$300:(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;Ljava/lang/String;)Lio/undertow/client/http2/Http2ClientConnection;
      90: invokeinterface #21,  2           // InterfaceMethod io/undertow/client/ClientCallback.completed:(Ljava/lang/Object;)V
      95: goto          324
      98: bipush        100
     100: invokestatic  #22                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
     103: astore_2
     104: aload_1
     105: aload_2
     106: invokeinterface #23,  2           // InterfaceMethod org/xnio/channels/StreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
     111: istore_3
     112: iload_3
     113: ifle          165
     116: aload_2
     117: invokevirtual #24                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     120: pop
     121: new           #25                 // class org/xnio/conduits/PushBackStreamSourceConduit
     124: dup
     125: aload_0
     126: getfield      #6                  // Field val$connection:Lorg/xnio/StreamConnection;
     129: invokevirtual #26                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     132: invokevirtual #27                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     135: invokespecial #28                 // Method org/xnio/conduits/PushBackStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;)V
     138: astore        4
     140: aload         4
     142: new           #29                 // class io/undertow/util/ImmediatePooled
     145: dup
     146: aload_2
     147: invokespecial #30                 // Method io/undertow/util/ImmediatePooled."<init>":(Ljava/lang/Object;)V
     150: invokevirtual #31                 // Method org/xnio/conduits/PushBackStreamSourceConduit.pushBack:(Lorg/xnio/Pooled;)V
     153: aload_0
     154: getfield      #6                  // Field val$connection:Lorg/xnio/StreamConnection;
     157: invokevirtual #26                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     160: aload         4
     162: invokevirtual #32                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     165: aload_0
     166: getfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
     169: invokestatic  #12                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider.access$200:(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;)Ljava/lang/String;
     172: ifnonnull     201
     175: aload_0
     176: getfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
     179: aload_0
     180: getfield      #10                 // Field val$sslEngine:Ljavax/net/ssl/SSLEngine;
     183: invokevirtual #33                 // Method javax/net/ssl/SSLEngine.getSession:()Ljavax/net/ssl/SSLSession;
     186: invokestatic  #34                 // Method io/undertow/client/http2/Http2ClientProvider.access$400:()Ljava/lang/String;
     189: invokeinterface #35,  2           // InterfaceMethod javax/net/ssl/SSLSession.getValue:(Ljava/lang/String;)Ljava/lang/Object;
     194: checkcast     #36                 // class java/lang/String
     197: invokestatic  #37                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider.access$202:(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;Ljava/lang/String;)Ljava/lang/String;
     200: pop
     201: aload_0
     202: getfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
     205: invokestatic  #12                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider.access$200:(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;)Ljava/lang/String;
     208: ifnonnull     215
     211: iload_3
     212: ifgt          230
     215: ldc           #13                 // String http/1.1
     217: aload_0
     218: getfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
     221: invokestatic  #12                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider.access$200:(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;)Ljava/lang/String;
     224: invokevirtual #14                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     227: ifeq          254
     230: aload_0
     231: getfield      #3                  // Field val$sslConnection:Lorg/xnio/ssl/SslConnection;
     234: invokevirtual #15                 // Method org/xnio/ssl/SslConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     237: invokevirtual #16                 // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
     240: aload_0
     241: getfield      #4                  // Field val$http2FailedListener:Lorg/xnio/ChannelListener;
     244: aload_0
     245: getfield      #3                  // Field val$sslConnection:Lorg/xnio/ssl/SslConnection;
     248: invokeinterface #17,  2           // InterfaceMethod org/xnio/ChannelListener.handleEvent:(Ljava/nio/channels/Channel;)V
     253: return
     254: aload_0
     255: getfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
     258: invokestatic  #12                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider.access$200:(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;)Ljava/lang/String;
     261: ifnull        310
     264: aload_0
     265: getfield      #2                  // Field val$http2SelectionProvider:Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;
     268: invokestatic  #12                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider.access$200:(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;)Ljava/lang/String;
     271: ldc           #18                 // String h2
     273: invokevirtual #14                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     276: ifeq          310
     279: aload_0
     280: getfield      #5                  // Field val$listener:Lio/undertow/client/ClientCallback;
     283: aload_0
     284: getfield      #6                  // Field val$connection:Lorg/xnio/StreamConnection;
     287: aload_0
     288: getfield      #7                  // Field val$bufferPool:Lio/undertow/connector/ByteBufferPool;
     291: aload_0
     292: getfield      #8                  // Field val$options:Lorg/xnio/OptionMap;
     295: aload_0
     296: getfield      #9                  // Field val$uri:Ljava/net/URI;
     299: invokevirtual #19                 // Method java/net/URI.getHost:()Ljava/lang/String;
     302: invokestatic  #20                 // Method io/undertow/client/http2/Http2ClientProvider.access$300:(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;Ljava/lang/String;)Lio/undertow/client/http2/Http2ClientConnection;
     305: invokeinterface #21,  2           // InterfaceMethod io/undertow/client/ClientCallback.completed:(Ljava/lang/Object;)V
     310: goto          324
     313: astore_3
     314: aload_0
     315: getfield      #5                  // Field val$listener:Lio/undertow/client/ClientCallback;
     318: aload_3
     319: invokeinterface #39,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
     324: return
    Exception table:
       from    to  target type
         104   253   313   Class java/io/IOException
         254   310   313   Class java/io/IOException

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #40                 // class org/xnio/channels/StreamSourceChannel
       5: invokevirtual #41                 // Method handleEvent:(Lorg/xnio/channels/StreamSourceChannel;)V
       8: return
}
