Compiled from "Http2PushBackParser.java"
public abstract class io.undertow.protocols.http2.Http2PushBackParser {
  private byte[] pushedBackData;

  private boolean finished;

  private int remainingData;

  public io.undertow.protocols.http2.Http2PushBackParser(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field remainingData:I
       9: return

  public void parse(java.nio.ByteBuffer, io.undertow.protocols.http2.Http2FrameHeaderParser) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: aload_1
       3: astore        4
       5: aload_1
       6: invokevirtual #3                  // Method java/nio/ByteBuffer.limit:()I
       9: istore        5
      11: aload_0
      12: getfield      #4                  // Field pushedBackData:[B
      15: ifnull        87
      18: aload_0
      19: getfield      #2                  // Field remainingData:I
      22: aload_0
      23: getfield      #4                  // Field pushedBackData:[B
      26: arraylength
      27: isub
      28: aload_1
      29: invokevirtual #5                  // Method java/nio/ByteBuffer.remaining:()I
      32: invokestatic  #6                  // Method java/lang/Math.min:(II)I
      35: istore        6
      37: aload_0
      38: getfield      #4                  // Field pushedBackData:[B
      41: arraylength
      42: iload         6
      44: iadd
      45: newarray       byte
      47: invokestatic  #7                  // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      50: astore        4
      52: aload         4
      54: aload_0
      55: getfield      #4                  // Field pushedBackData:[B
      58: invokevirtual #8                  // Method java/nio/ByteBuffer.put:([B)Ljava/nio/ByteBuffer;
      61: pop
      62: aload_1
      63: aload_1
      64: invokevirtual #9                  // Method java/nio/ByteBuffer.position:()I
      67: iload         6
      69: iadd
      70: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      73: pop
      74: aload         4
      76: aload_1
      77: invokevirtual #11                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      80: pop
      81: aload         4
      83: invokevirtual #12                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      86: pop
      87: aload         4
      89: invokevirtual #5                  // Method java/nio/ByteBuffer.remaining:()I
      92: aload_0
      93: getfield      #2                  // Field remainingData:I
      96: if_icmple     115
      99: aload         4
     101: aload         4
     103: invokevirtual #9                  // Method java/nio/ByteBuffer.position:()I
     106: aload_0
     107: getfield      #2                  // Field remainingData:I
     110: iadd
     111: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     114: pop
     115: aload         4
     117: invokevirtual #5                  // Method java/nio/ByteBuffer.remaining:()I
     120: istore        6
     122: aload_0
     123: aload         4
     125: aload_2
     126: invokevirtual #13                 // Method handleData:(Ljava/nio/ByteBuffer;Lio/undertow/protocols/http2/Http2FrameHeaderParser;)V
     129: iload         6
     131: aload         4
     133: invokevirtual #5                  // Method java/nio/ByteBuffer.remaining:()I
     136: isub
     137: istore_3
     138: aload_0
     139: invokevirtual #14                 // Method isFinished:()Z
     142: ifne          177
     145: aload_0
     146: getfield      #2                  // Field remainingData:I
     149: ifle          177
     152: iload_3
     153: ifne          177
     156: aload         4
     158: invokevirtual #5                  // Method java/nio/ByteBuffer.remaining:()I
     161: aload_0
     162: getfield      #2                  // Field remainingData:I
     165: if_icmplt     177
     168: getstatic     #15                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     171: invokeinterface #16,  1           // InterfaceMethod io/undertow/UndertowMessages.parserDidNotMakeProgress:()Ljava/io/IOException;
     176: athrow
     177: aload_0
     178: getfield      #17                 // Field finished:Z
     181: ifeq          192
     184: aload_1
     185: iload         5
     187: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     190: pop
     191: return
     192: aload         4
     194: invokevirtual #5                  // Method java/nio/ByteBuffer.remaining:()I
     197: istore        6
     199: iload         6
     201: ifle          225
     204: aload_0
     205: iload         6
     207: newarray       byte
     209: putfield      #4                  // Field pushedBackData:[B
     212: aload         4
     214: aload_0
     215: getfield      #4                  // Field pushedBackData:[B
     218: invokevirtual #18                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
     221: pop
     222: goto          230
     225: aload_0
     226: aconst_null
     227: putfield      #4                  // Field pushedBackData:[B
     230: aload_1
     231: iload         5
     233: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     236: pop
     237: aload_0
     238: dup
     239: getfield      #2                  // Field remainingData:I
     242: iload_3
     243: isub
     244: putfield      #2                  // Field remainingData:I
     247: aload_0
     248: getfield      #2                  // Field remainingData:I
     251: ifne          259
     254: aload_0
     255: iconst_1
     256: putfield      #17                 // Field finished:Z
     259: goto          349
     262: astore        7
     264: aload_0
     265: getfield      #17                 // Field finished:Z
     268: ifeq          279
     271: aload_1
     272: iload         5
     274: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     277: pop
     278: return
     279: aload         4
     281: invokevirtual #5                  // Method java/nio/ByteBuffer.remaining:()I
     284: istore        8
     286: iload         8
     288: ifle          312
     291: aload_0
     292: iload         8
     294: newarray       byte
     296: putfield      #4                  // Field pushedBackData:[B
     299: aload         4
     301: aload_0
     302: getfield      #4                  // Field pushedBackData:[B
     305: invokevirtual #18                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
     308: pop
     309: goto          317
     312: aload_0
     313: aconst_null
     314: putfield      #4                  // Field pushedBackData:[B
     317: aload_1
     318: iload         5
     320: invokevirtual #10                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     323: pop
     324: aload_0
     325: dup
     326: getfield      #2                  // Field remainingData:I
     329: iload_3
     330: isub
     331: putfield      #2                  // Field remainingData:I
     334: aload_0
     335: getfield      #2                  // Field remainingData:I
     338: ifne          346
     341: aload_0
     342: iconst_1
     343: putfield      #17                 // Field finished:Z
     346: aload         7
     348: athrow
     349: return
    Exception table:
       from    to  target type
          11   177   262   any
         262   264   262   any

  protected abstract void handleData(java.nio.ByteBuffer, io.undertow.protocols.http2.Http2FrameHeaderParser) throws java.io.IOException;

  public boolean isFinished();
    Code:
       0: aload_0
       1: getfield      #17                 // Field finished:Z
       4: ireturn

  protected void finish();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #17                 // Field finished:Z
       5: return

  protected void moreData(int);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #17                 // Field finished:Z
       5: aload_0
       6: dup
       7: getfield      #2                  // Field remainingData:I
      10: iload_1
      11: iadd
      12: putfield      #2                  // Field remainingData:I
      15: return
}
