Compiled from "AjpReadListener.java"
final class io.undertow.server.protocol.ajp.AjpReadListener implements org.xnio.ChannelListener<org.xnio.channels.StreamSourceChannel> {
  private static final byte[] CPONG;

  private final io.undertow.server.protocol.ajp.AjpServerConnection connection;

  private final java.lang.String scheme;

  private final boolean recordRequestStartTime;

  private io.undertow.server.protocol.ajp.AjpRequestParseState state;

  private io.undertow.server.HttpServerExchange httpServerExchange;

  private volatile int read;

  private final int maxRequestSize;

  private final long maxEntitySize;

  private final io.undertow.server.protocol.ajp.AjpRequestParser parser;

  private final io.undertow.server.ConnectorStatisticsImpl connectorStatistics;

  private org.xnio.conduits.WriteReadyHandler$ChannelListenerHandler<org.xnio.conduits.ConduitStreamSinkChannel> writeReadyHandler;

  private io.undertow.server.protocol.ParseTimeoutUpdater parseTimeoutUpdater;

  io.undertow.server.protocol.ajp.AjpReadListener(io.undertow.server.protocol.ajp.AjpServerConnection, java.lang.String, io.undertow.server.protocol.ajp.AjpRequestParser, io.undertow.server.ConnectorStatisticsImpl);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class io/undertow/server/protocol/ajp/AjpRequestParseState
       8: dup
       9: invokespecial #4                  // Method io/undertow/server/protocol/ajp/AjpRequestParseState."<init>":()V
      12: putfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
      15: aload_0
      16: iconst_0
      17: putfield      #6                  // Field read:I
      20: aload_0
      21: aload_1
      22: putfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
      25: aload_0
      26: aload_2
      27: putfield      #7                  // Field scheme:Ljava/lang/String;
      30: aload_0
      31: aload_3
      32: putfield      #8                  // Field parser:Lio/undertow/server/protocol/ajp/AjpRequestParser;
      35: aload_0
      36: aload         4
      38: putfield      #9                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      41: aload_0
      42: aload_1
      43: invokevirtual #10                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      46: getstatic     #11                 // Field io/undertow/UndertowOptions.MAX_HEADER_SIZE:Lorg/xnio/Option;
      49: ldc           #13                 // int 1048576
      51: invokevirtual #14                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
      54: putfield      #15                 // Field maxRequestSize:I
      57: aload_0
      58: aload_1
      59: invokevirtual #10                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      62: getstatic     #16                 // Field io/undertow/UndertowOptions.MAX_ENTITY_SIZE:Lorg/xnio/Option;
      65: ldc2_w        #17                 // long -1l
      68: invokevirtual #19                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;J)J
      71: putfield      #20                 // Field maxEntitySize:J
      74: aload_0
      75: new           #21                 // class org/xnio/conduits/WriteReadyHandler$ChannelListenerHandler
      78: dup
      79: aload_1
      80: invokevirtual #22                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
      83: invokevirtual #23                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      86: invokespecial #24                 // Method org/xnio/conduits/WriteReadyHandler$ChannelListenerHandler."<init>":(Lorg/xnio/channels/SuspendableWriteChannel;)V
      89: putfield      #25                 // Field writeReadyHandler:Lorg/xnio/conduits/WriteReadyHandler$ChannelListenerHandler;
      92: aload_0
      93: aload_1
      94: invokevirtual #10                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
      97: getstatic     #26                 // Field io/undertow/UndertowOptions.RECORD_REQUEST_START_TIME:Lorg/xnio/Option;
     100: iconst_0
     101: invokevirtual #27                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     104: putfield      #28                 // Field recordRequestStartTime:Z
     107: aload_1
     108: invokevirtual #10                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
     111: getstatic     #29                 // Field io/undertow/UndertowOptions.REQUEST_PARSE_TIMEOUT:Lorg/xnio/Option;
     114: iconst_m1
     115: invokevirtual #14                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     118: istore        5
     120: aload_1
     121: invokevirtual #10                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getUndertowOptions:()Lorg/xnio/OptionMap;
     124: getstatic     #30                 // Field io/undertow/UndertowOptions.NO_REQUEST_TIMEOUT:Lorg/xnio/Option;
     127: iconst_m1
     128: invokevirtual #14                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;I)I
     131: istore        6
     133: iload         6
     135: ifge          151
     138: iload         5
     140: ifge          151
     143: aload_0
     144: aconst_null
     145: putfield      #31                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     148: goto          177
     151: aload_0
     152: new           #32                 // class io/undertow/server/protocol/ParseTimeoutUpdater
     155: dup
     156: aload_1
     157: iload         5
     159: i2l
     160: iload         6
     162: i2l
     163: invokespecial #33                 // Method io/undertow/server/protocol/ParseTimeoutUpdater."<init>":(Lio/undertow/server/ServerConnection;JJ)V
     166: putfield      #31                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     169: aload_1
     170: aload_0
     171: getfield      #31                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     174: invokevirtual #34                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.addCloseListener:(Lio/undertow/server/ServerConnection$CloseListener;)V
     177: return

  public void startRequest();
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
       4: invokevirtual #35                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.resetChannel:()Lio/undertow/server/AbstractServerConnection$ConduitState;
       7: pop
       8: aload_0
       9: new           #3                  // class io/undertow/server/protocol/ajp/AjpRequestParseState
      12: dup
      13: invokespecial #4                  // Method io/undertow/server/protocol/ajp/AjpRequestParseState."<init>":()V
      16: putfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
      19: aload_0
      20: iconst_0
      21: putfield      #6                  // Field read:I
      24: aload_0
      25: getfield      #31                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
      28: ifnull        38
      31: aload_0
      32: getfield      #31                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
      35: invokevirtual #36                 // Method io/undertow/server/protocol/ParseTimeoutUpdater.connectionIdle:()V
      38: aload_0
      39: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
      42: aconst_null
      43: invokevirtual #37                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.setCurrentExchange:(Lio/undertow/server/HttpServerExchange;)V
      46: return

  public void handleEvent(org.xnio.channels.StreamSourceChannel);
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
       4: invokevirtual #38                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getOriginalSinkConduit:()Lorg/xnio/conduits/StreamSinkConduit;
       7: invokeinterface #39,  1           // InterfaceMethod org/xnio/conduits/StreamSinkConduit.isWriteShutdown:()Z
      12: ifne          30
      15: aload_0
      16: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
      19: invokevirtual #40                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getOriginalSourceConduit:()Lorg/xnio/conduits/StreamSourceConduit;
      22: invokeinterface #41,  1           // InterfaceMethod org/xnio/conduits/StreamSourceConduit.isReadShutdown:()Z
      27: ifeq          44
      30: aload_0
      31: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
      34: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      37: aload_1
      38: invokeinterface #43,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.suspendReads:()V
      43: return
      44: aload_0
      45: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
      48: invokevirtual #44                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getExtraBytes:()Lio/undertow/connector/PooledByteBuffer;
      51: astore_2
      52: aload_2
      53: ifnonnull     71
      56: aload_0
      57: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
      60: invokevirtual #45                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      63: invokeinterface #46,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      68: goto          72
      71: aload_2
      72: astore_3
      73: aload_3
      74: invokeinterface #47,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      79: astore        4
      81: iconst_1
      82: istore        5
      84: iconst_0
      85: istore        6
      87: aload_2
      88: ifnonnull     141
      91: aload         4
      93: invokevirtual #48                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      96: pop
      97: aload_1
      98: aload         4
     100: invokeinterface #49,  2           // InterfaceMethod org/xnio/channels/StreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
     105: istore        7
     107: goto          148
     110: astore        8
     112: getstatic     #51                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     115: aload         8
     117: invokeinterface #52,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     122: aload_0
     123: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     126: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     129: iload         5
     131: ifeq          140
     134: aload_3
     135: invokeinterface #53,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     140: return
     141: aload         4
     143: invokevirtual #54                 // Method java/nio/ByteBuffer.remaining:()I
     146: istore        7
     148: iload         7
     150: ifne          211
     153: iload         6
     155: ifeq          172
     158: aload_0
     159: getfield      #31                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     162: ifnull        172
     165: aload_0
     166: getfield      #31                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     169: invokevirtual #55                 // Method io/undertow/server/protocol/ParseTimeoutUpdater.failedParse:()V
     172: aload_1
     173: invokeinterface #56,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.isReadResumed:()Z
     178: ifne          199
     181: aload_1
     182: invokeinterface #57,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
     187: aload_0
     188: invokeinterface #58,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     193: aload_1
     194: invokeinterface #59,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.resumeReads:()V
     199: iload         5
     201: ifeq          210
     204: aload_3
     205: invokeinterface #53,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     210: return
     211: iload         7
     213: iconst_m1
     214: if_icmpne     295
     217: aload_1
     218: invokeinterface #60,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.shutdownReads:()V
     223: aload_0
     224: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     227: invokevirtual #22                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     230: invokevirtual #23                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     233: astore        8
     235: aload         8
     237: invokeinterface #61,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.shutdownWrites:()V
     242: aload_0
     243: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     246: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     249: goto          283
     252: astore        8
     254: getstatic     #51                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
     257: aload         8
     259: invokeinterface #52,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     264: aload_0
     265: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     268: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     271: iload         5
     273: ifeq          282
     276: aload_3
     277: invokeinterface #53,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     282: return
     283: iload         5
     285: ifeq          294
     288: aload_3
     289: invokeinterface #53,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     294: return
     295: iconst_1
     296: istore        6
     298: aload_2
     299: ifnull        315
     302: aconst_null
     303: astore_2
     304: aload_0
     305: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     308: aconst_null
     309: invokevirtual #62                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.setExtraBytes:(Lio/undertow/connector/PooledByteBuffer;)V
     312: goto          321
     315: aload         4
     317: invokevirtual #63                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     320: pop
     321: aload         4
     323: invokevirtual #54                 // Method java/nio/ByteBuffer.remaining:()I
     326: istore        8
     328: aload_0
     329: getfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     332: ifnonnull     354
     335: aload_0
     336: new           #65                 // class io/undertow/server/HttpServerExchange
     339: dup
     340: aload_0
     341: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     344: aload_0
     345: getfield      #20                 // Field maxEntitySize:J
     348: invokespecial #66                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;J)V
     351: putfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     354: aload_0
     355: getfield      #8                  // Field parser:Lio/undertow/server/protocol/ajp/AjpRequestParser;
     358: aload         4
     360: aload_0
     361: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     364: aload_0
     365: getfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     368: invokevirtual #67                 // Method io/undertow/server/protocol/ajp/AjpRequestParser.parse:(Ljava/nio/ByteBuffer;Lio/undertow/server/protocol/ajp/AjpRequestParseState;Lio/undertow/server/HttpServerExchange;)V
     371: aload_0
     372: dup
     373: getfield      #6                  // Field read:I
     376: iload         8
     378: aload         4
     380: invokevirtual #54                 // Method java/nio/ByteBuffer.remaining:()I
     383: isub
     384: iadd
     385: putfield      #6                  // Field read:I
     388: aload         4
     390: invokevirtual #68                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     393: ifeq          407
     396: iconst_0
     397: istore        5
     399: aload_0
     400: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     403: aload_3
     404: invokevirtual #62                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.setExtraBytes:(Lio/undertow/connector/PooledByteBuffer;)V
     407: aload_0
     408: getfield      #6                  // Field read:I
     411: aload_0
     412: getfield      #15                 // Field maxRequestSize:I
     415: if_icmple     456
     418: getstatic     #69                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     421: aload_0
     422: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     425: invokevirtual #70                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getPeerAddress:()Ljava/net/SocketAddress;
     428: aload_0
     429: getfield      #15                 // Field maxRequestSize:I
     432: invokeinterface #71,  3           // InterfaceMethod io/undertow/UndertowLogger.requestHeaderWasTooLarge:(Ljava/net/SocketAddress;I)V
     437: aload_0
     438: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     441: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     444: iload         5
     446: ifeq          455
     449: aload_3
     450: invokeinterface #53,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     455: return
     456: aload_0
     457: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     460: invokevirtual #72                 // Method io/undertow/server/protocol/ajp/AjpRequestParseState.isComplete:()Z
     463: ifeq          87
     466: aload_0
     467: getfield      #31                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     470: ifnull        480
     473: aload_0
     474: getfield      #31                 // Field parseTimeoutUpdater:Lio/undertow/server/protocol/ParseTimeoutUpdater;
     477: invokevirtual #73                 // Method io/undertow/server/protocol/ParseTimeoutUpdater.requestStarted:()V
     480: aload_0
     481: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     484: getfield      #74                 // Field io/undertow/server/protocol/ajp/AjpRequestParseState.prefix:B
     487: iconst_2
     488: if_icmpeq     608
     491: aload_0
     492: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     495: getfield      #74                 // Field io/undertow/server/protocol/ajp/AjpRequestParseState.prefix:B
     498: bipush        10
     500: if_icmpne     520
     503: getstatic     #69                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     506: ldc           #76                 // String Received CPING, sending CPONG
     508: invokeinterface #77,  2           // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
     513: aload_0
     514: invokespecial #78                 // Method handleCPing:()V
     517: goto          596
     520: aload_0
     521: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     524: getfield      #74                 // Field io/undertow/server/protocol/ajp/AjpRequestParseState.prefix:B
     527: bipush        9
     529: if_icmpne     574
     532: getstatic     #69                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     535: ldc           #79                 // String Received CPONG, starting next request
     537: invokeinterface #77,  2           // InterfaceMethod io/undertow/UndertowLogger.debug:(Ljava/lang/Object;)V
     542: aload_0
     543: new           #3                  // class io/undertow/server/protocol/ajp/AjpRequestParseState
     546: dup
     547: invokespecial #4                  // Method io/undertow/server/protocol/ajp/AjpRequestParseState."<init>":()V
     550: putfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     553: aload_1
     554: invokeinterface #57,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
     559: aload_0
     560: invokeinterface #58,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     565: aload_1
     566: invokeinterface #59,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.resumeReads:()V
     571: goto          596
     574: getstatic     #69                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     577: aload_0
     578: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     581: getfield      #74                 // Field io/undertow/server/protocol/ajp/AjpRequestParseState.prefix:B
     584: invokeinterface #80,  2           // InterfaceMethod io/undertow/UndertowLogger.ignoringAjpRequestWithPrefixCode:(B)V
     589: aload_0
     590: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     593: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     596: iload         5
     598: ifeq          607
     601: aload_3
     602: invokeinterface #53,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     607: return
     608: aload_1
     609: invokeinterface #57,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
     614: aconst_null
     615: invokeinterface #58,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     620: aload_1
     621: invokeinterface #43,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.suspendReads:()V
     626: aload_0
     627: getfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     630: astore        8
     632: new           #81                 // class io/undertow/server/protocol/ajp/AjpServerResponseConduit
     635: dup
     636: aload_0
     637: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     640: invokevirtual #22                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     643: invokevirtual #23                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     646: invokevirtual #82                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
     649: aload_0
     650: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     653: invokevirtual #45                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
     656: aload         8
     658: new           #83                 // class io/undertow/server/protocol/ajp/AjpReadListener$1
     661: dup
     662: aload_0
     663: aload         8
     665: invokespecial #84                 // Method io/undertow/server/protocol/ajp/AjpReadListener$1."<init>":(Lio/undertow/server/protocol/ajp/AjpReadListener;Lio/undertow/server/HttpServerExchange;)V
     668: aload         8
     670: invokevirtual #85                 // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
     673: getstatic     #86                 // Field io/undertow/util/Methods.HEAD:Lio/undertow/util/HttpString;
     676: invokevirtual #87                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
     679: invokespecial #88                 // Method io/undertow/server/protocol/ajp/AjpServerResponseConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/connector/ByteBufferPool;Lio/undertow/server/HttpServerExchange;Lio/undertow/conduits/ConduitListener;Z)V
     682: astore        9
     684: aload_0
     685: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     688: invokevirtual #22                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     691: invokevirtual #23                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     694: aload         9
     696: invokevirtual #89                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
     699: aload_0
     700: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     703: invokevirtual #22                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     706: invokevirtual #90                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     709: aload_0
     710: aload_0
     711: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     714: invokevirtual #22                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
     717: invokevirtual #90                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     720: invokevirtual #91                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     723: aload         9
     725: aload         8
     727: invokespecial #92                 // Method createSourceConduit:(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/server/protocol/ajp/AjpServerResponseConduit;Lio/undertow/server/HttpServerExchange;)Lorg/xnio/conduits/StreamSourceConduit;
     730: invokevirtual #93                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     733: aload         9
     735: aload_0
     736: getfield      #25                 // Field writeReadyHandler:Lorg/xnio/conduits/WriteReadyHandler$ChannelListenerHandler;
     739: invokevirtual #94                 // Method io/undertow/server/protocol/ajp/AjpServerResponseConduit.setWriteReadyHandler:(Lorg/xnio/conduits/WriteReadyHandler;)V
     742: aload_0
     743: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     746: aload_0
     747: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     750: invokevirtual #95                 // Method io/undertow/server/protocol/ajp/AjpRequestParseState.createSslSessionInfo:()Lio/undertow/server/BasicSSLSessionInfo;
     753: invokevirtual #96                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.setSSLSessionInfo:(Lio/undertow/server/BasicSSLSessionInfo;)V
     756: aload         8
     758: aload_0
     759: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     762: invokevirtual #97                 // Method io/undertow/server/protocol/ajp/AjpRequestParseState.createPeerAddress:()Ljava/net/InetSocketAddress;
     765: invokevirtual #98                 // Method io/undertow/server/HttpServerExchange.setSourceAddress:(Ljava/net/InetSocketAddress;)Lio/undertow/server/HttpServerExchange;
     768: pop
     769: aload         8
     771: aload_0
     772: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     775: invokevirtual #99                 // Method io/undertow/server/protocol/ajp/AjpRequestParseState.createDestinationAddress:()Ljava/net/InetSocketAddress;
     778: invokevirtual #100                // Method io/undertow/server/HttpServerExchange.setDestinationAddress:(Ljava/net/InetSocketAddress;)Lio/undertow/server/HttpServerExchange;
     781: pop
     782: aload_0
     783: getfield      #7                  // Field scheme:Ljava/lang/String;
     786: ifnull        799
     789: aload         8
     791: aload_0
     792: getfield      #7                  // Field scheme:Ljava/lang/String;
     795: invokevirtual #101                // Method io/undertow/server/HttpServerExchange.setRequestScheme:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     798: pop
     799: aload_0
     800: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     803: getfield      #102                // Field io/undertow/server/protocol/ajp/AjpRequestParseState.attributes:Ljava/util/Map;
     806: ifnull        825
     809: aload         8
     811: getstatic     #103                // Field io/undertow/server/HttpServerExchange.REQUEST_ATTRIBUTES:Lio/undertow/util/AttachmentKey;
     814: aload_0
     815: getfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     818: getfield      #102                // Field io/undertow/server/protocol/ajp/AjpRequestParseState.attributes:Ljava/util/Map;
     821: invokevirtual #104                // Method io/undertow/server/HttpServerExchange.putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)Ljava/lang/Object;
     824: pop
     825: aload_0
     826: aconst_null
     827: putfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
     830: aload_0
     831: aconst_null
     832: putfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     835: aload         8
     837: iconst_1
     838: invokevirtual #105                // Method io/undertow/server/HttpServerExchange.setPersistent:(Z)Lio/undertow/server/HttpServerExchange;
     841: pop
     842: aload_0
     843: getfield      #28                 // Field recordRequestStartTime:Z
     846: ifeq          854
     849: aload         8
     851: invokestatic  #106                // Method io/undertow/server/Connectors.setRequestStartTime:(Lio/undertow/server/HttpServerExchange;)V
     854: aload_0
     855: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     858: aload         8
     860: invokevirtual #37                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.setCurrentExchange:(Lio/undertow/server/HttpServerExchange;)V
     863: aload_0
     864: getfield      #9                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     867: ifnull        879
     870: aload_0
     871: getfield      #9                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     874: aload         8
     876: invokevirtual #107                // Method io/undertow/server/ConnectorStatisticsImpl.setup:(Lio/undertow/server/HttpServerExchange;)V
     879: aload_0
     880: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     883: invokevirtual #108                // Method io/undertow/server/protocol/ajp/AjpServerConnection.getRootHandler:()Lio/undertow/server/HttpHandler;
     886: aload         8
     888: invokestatic  #109                // Method io/undertow/server/Connectors.executeRootHandler:(Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     891: goto          913
     894: astore        10
     896: getstatic     #69                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     899: aload         10
     901: invokeinterface #111,  2          // InterfaceMethod io/undertow/UndertowLogger.exceptionProcessingRequest:(Ljava/lang/Throwable;)V
     906: aload_0
     907: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     910: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     913: iload         5
     915: ifeq          976
     918: aload_3
     919: invokeinterface #53,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     924: goto          976
     927: astore        7
     929: getstatic     #69                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     932: aload         7
     934: invokeinterface #111,  2          // InterfaceMethod io/undertow/UndertowLogger.exceptionProcessingRequest:(Ljava/lang/Throwable;)V
     939: aload_0
     940: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     943: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     946: iload         5
     948: ifeq          976
     951: aload_3
     952: invokeinterface #53,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     957: goto          976
     960: astore        11
     962: iload         5
     964: ifeq          973
     967: aload_3
     968: invokeinterface #53,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     973: aload         11
     975: athrow
     976: return
    Exception table:
       from    to  target type
          97   107   110   Class java/io/IOException
         217   249   252   Class java/io/IOException
         742   891   894   Class java/lang/Throwable
          87   129   927   Class java/lang/Exception
         141   199   927   Class java/lang/Exception
         211   271   927   Class java/lang/Exception
         295   444   927   Class java/lang/Exception
         456   596   927   Class java/lang/Exception
         608   913   927   Class java/lang/Exception
          87   129   960   any
         141   199   960   any
         211   271   960   any
         295   444   960   any
         456   596   960   any
         608   913   960   any
         927   946   960   any
         960   962   960   any

  private void handleCPing();
    Code:
       0: aload_0
       1: new           #3                  // class io/undertow/server/protocol/ajp/AjpRequestParseState
       4: dup
       5: invokespecial #4                  // Method io/undertow/server/protocol/ajp/AjpRequestParseState."<init>":()V
       8: putfield      #5                  // Field state:Lio/undertow/server/protocol/ajp/AjpRequestParseState;
      11: aload_0
      12: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
      15: invokevirtual #22                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
      18: astore_1
      19: aload_1
      20: invokevirtual #90                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      23: invokevirtual #113                // Method org/xnio/conduits/ConduitStreamSourceChannel.suspendReads:()V
      26: getstatic     #114                // Field CPONG:[B
      29: invokestatic  #115                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      32: astore_2
      33: aload_1
      34: invokevirtual #23                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      37: aload_2
      38: invokevirtual #116                // Method org/xnio/conduits/ConduitStreamSinkChannel.write:(Ljava/nio/ByteBuffer;)I
      41: istore_3
      42: iload_3
      43: ifne          71
      46: aload_1
      47: invokevirtual #23                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      50: new           #117                // class io/undertow/server/protocol/ajp/AjpReadListener$2
      53: dup
      54: aload_0
      55: aload_2
      56: aload_1
      57: invokespecial #118                // Method io/undertow/server/protocol/ajp/AjpReadListener$2."<init>":(Lio/undertow/server/protocol/ajp/AjpReadListener;Ljava/nio/ByteBuffer;Lorg/xnio/StreamConnection;)V
      60: invokevirtual #119                // Method org/xnio/conduits/ConduitStreamSinkChannel.setWriteListener:(Lorg/xnio/ChannelListener;)V
      63: aload_1
      64: invokevirtual #23                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      67: invokevirtual #120                // Method org/xnio/conduits/ConduitStreamSinkChannel.resumeWrites:()V
      70: return
      71: aload_2
      72: invokevirtual #68                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      75: ifne          33
      78: aload_0
      79: aload_1
      80: invokevirtual #90                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      83: invokevirtual #121                // Method handleEvent:(Lorg/xnio/channels/StreamSourceChannel;)V
      86: goto          108
      89: astore        4
      91: getstatic     #51                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      94: aload         4
      96: invokeinterface #52,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
     101: aload_0
     102: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
     105: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
     108: return
    Exception table:
       from    to  target type
          33    70    89   Class java/io/IOException
          71    86    89   Class java/io/IOException

  public void exchangeComplete(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: invokevirtual #122                // Method io/undertow/server/HttpServerExchange.isUpgrade:()Z
       4: ifne          49
       7: aload_1
       8: invokevirtual #123                // Method io/undertow/server/HttpServerExchange.isPersistent:()Z
      11: ifeq          49
      14: aload_0
      15: invokevirtual #124                // Method startRequest:()V
      18: aload_1
      19: invokevirtual #125                // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      22: checkcast     #126                // class io/undertow/server/protocol/ajp/AjpServerConnection
      25: invokevirtual #22                 // Method io/undertow/server/protocol/ajp/AjpServerConnection.getChannel:()Lorg/xnio/StreamConnection;
      28: invokevirtual #90                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      31: astore_2
      32: aload_2
      33: invokevirtual #127                // Method org/xnio/conduits/ConduitStreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
      36: aload_0
      37: invokeinterface #58,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      42: aload_2
      43: invokevirtual #128                // Method org/xnio/conduits/ConduitStreamSourceChannel.wakeupReads:()V
      46: goto          63
      49: aload_1
      50: invokevirtual #123                // Method io/undertow/server/HttpServerExchange.isPersistent:()Z
      53: ifne          63
      56: aload_1
      57: invokevirtual #125                // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      60: invokestatic  #42                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      63: return

  private org.xnio.conduits.StreamSourceConduit createSourceConduit(org.xnio.conduits.StreamSourceConduit, io.undertow.server.protocol.ajp.AjpServerResponseConduit, io.undertow.server.HttpServerExchange);
    Code:
       0: new           #129                // class io/undertow/conduits/ReadDataStreamSourceConduit
       3: dup
       4: aload_1
       5: aload_3
       6: invokevirtual #125                // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
       9: checkcast     #130                // class io/undertow/server/AbstractServerConnection
      12: invokespecial #131                // Method io/undertow/conduits/ReadDataStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/server/AbstractServerConnection;)V
      15: astore        4
      17: aload_3
      18: invokevirtual #132                // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      21: astore        5
      23: getstatic     #133                // Field io/undertow/util/Headers.IDENTITY:Lio/undertow/util/HttpString;
      26: astore        6
      28: aload         5
      30: getstatic     #134                // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
      33: invokevirtual #135                // Method io/undertow/util/HeaderMap.getLast:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      36: astore        8
      38: aload         8
      40: ifnull        47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: istore        9
      50: iload         9
      52: ifeq          66
      55: new           #136                // class io/undertow/util/HttpString
      58: dup
      59: aload         8
      61: invokespecial #137                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      64: astore        6
      66: aload         5
      68: getstatic     #138                // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
      71: invokevirtual #139                // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      74: astore        10
      76: iload         9
      78: ifeq          98
      81: aload         6
      83: getstatic     #133                // Field io/undertow/util/Headers.IDENTITY:Lio/undertow/util/HttpString;
      86: invokevirtual #87                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      89: ifne          98
      92: aconst_null
      93: astore        7
      95: goto          184
      98: aload         10
     100: ifnull        157
     103: aload         10
     105: invokestatic  #140                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     108: lstore        11
     110: lload         11
     112: lconst_0
     113: lcmp
     114: ifne          147
     117: getstatic     #69                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     120: ldc           #141                // String No content, starting next request
     122: invokeinterface #142,  2          // InterfaceMethod io/undertow/UndertowLogger.trace:(Ljava/lang/Object;)V
     127: aload_0
     128: getfield      #64                 // Field httpServerExchange:Lio/undertow/server/HttpServerExchange;
     131: invokestatic  #143                // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     134: new           #144                // class io/undertow/conduits/EmptyStreamSourceConduit
     137: dup
     138: aload         4
     140: invokevirtual #145                // Method io/undertow/conduits/ReadDataStreamSourceConduit.getReadThread:()Lorg/xnio/XnioIoThread;
     143: invokespecial #146                // Method io/undertow/conduits/EmptyStreamSourceConduit."<init>":(Lorg/xnio/XnioIoThread;)V
     146: areturn
     147: lload         11
     149: invokestatic  #147                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     152: astore        7
     154: goto          184
     157: getstatic     #69                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
     160: ldc           #148                // String No content length or transfer coding, starting next request
     162: invokeinterface #142,  2          // InterfaceMethod io/undertow/UndertowLogger.trace:(Ljava/lang/Object;)V
     167: aload_3
     168: invokestatic  #143                // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     171: new           #144                // class io/undertow/conduits/EmptyStreamSourceConduit
     174: dup
     175: aload         4
     177: invokevirtual #145                // Method io/undertow/conduits/ReadDataStreamSourceConduit.getReadThread:()Lorg/xnio/XnioIoThread;
     180: invokespecial #146                // Method io/undertow/conduits/EmptyStreamSourceConduit."<init>":(Lorg/xnio/XnioIoThread;)V
     183: areturn
     184: new           #149                // class io/undertow/server/protocol/ajp/AjpServerRequestConduit
     187: dup
     188: aload         4
     190: aload_3
     191: aload_2
     192: aload         7
     194: new           #150                // class io/undertow/server/protocol/ajp/AjpReadListener$3
     197: dup
     198: aload_0
     199: aload_3
     200: invokespecial #151                // Method io/undertow/server/protocol/ajp/AjpReadListener$3."<init>":(Lio/undertow/server/protocol/ajp/AjpReadListener;Lio/undertow/server/HttpServerExchange;)V
     203: invokespecial #152                // Method io/undertow/server/protocol/ajp/AjpServerRequestConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/server/HttpServerExchange;Lio/undertow/server/protocol/ajp/AjpServerResponseConduit;Ljava/lang/Long;Lio/undertow/conduits/ConduitListener;)V
     206: areturn

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #153                // class org/xnio/channels/StreamSourceChannel
       5: invokevirtual #121                // Method handleEvent:(Lorg/xnio/channels/StreamSourceChannel;)V
       8: return

  static io.undertow.server.protocol.ajp.AjpServerConnection access$000(io.undertow.server.protocol.ajp.AjpReadListener);
    Code:
       0: aload_0
       1: getfield      #1                  // Field connection:Lio/undertow/server/protocol/ajp/AjpServerConnection;
       4: areturn

  static {};
    Code:
       0: iconst_5
       1: newarray       byte
       3: dup
       4: iconst_0
       5: bipush        65
       7: bastore
       8: dup
       9: iconst_1
      10: bipush        66
      12: bastore
      13: dup
      14: iconst_2
      15: iconst_0
      16: bastore
      17: dup
      18: iconst_3
      19: iconst_1
      20: bastore
      21: dup
      22: iconst_4
      23: bipush        9
      25: bastore
      26: putstatic     #114                // Field CPONG:[B
      29: return
}
