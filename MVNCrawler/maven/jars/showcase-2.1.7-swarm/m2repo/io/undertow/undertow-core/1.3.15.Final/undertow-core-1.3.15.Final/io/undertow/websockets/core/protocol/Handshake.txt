Compiled from "Handshake.java"
public abstract class io.undertow.websockets.core.protocol.Handshake {
  private final io.undertow.websockets.core.WebSocketVersion version;

  private final java.lang.String hashAlgorithm;

  private final java.lang.String magicNumber;

  protected final java.util.Set<java.lang.String> subprotocols;

  private static final byte[] EMPTY;

  private static final java.util.regex.Pattern PATTERN;

  protected java.util.Set<io.undertow.websockets.extensions.ExtensionHandshake> availableExtensions;

  protected boolean allowExtensions;

  protected io.undertow.websockets.core.protocol.Handshake(io.undertow.websockets.core.WebSocketVersion, java.lang.String, java.lang.String, java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashSet
       8: dup
       9: invokespecial #3                  // Method java/util/HashSet."<init>":()V
      12: putfield      #4                  // Field availableExtensions:Ljava/util/Set;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field version:Lio/undertow/websockets/core/WebSocketVersion;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field hashAlgorithm:Ljava/lang/String;
      25: aload_0
      26: aload_3
      27: putfield      #7                  // Field magicNumber:Ljava/lang/String;
      30: aload_0
      31: aload         4
      33: putfield      #8                  // Field subprotocols:Ljava/util/Set;
      36: return

  public io.undertow.websockets.core.WebSocketVersion getVersion();
    Code:
       0: aload_0
       1: getfield      #5                  // Field version:Lio/undertow/websockets/core/WebSocketVersion;
       4: areturn

  public java.lang.String getHashAlgorithm();
    Code:
       0: aload_0
       1: getfield      #6                  // Field hashAlgorithm:Ljava/lang/String;
       4: areturn

  public java.lang.String getMagicNumber();
    Code:
       0: aload_0
       1: getfield      #7                  // Field magicNumber:Ljava/lang/String;
       4: areturn

  protected static java.lang.String getWebSocketLocation(io.undertow.websockets.spi.WebSocketHttpExchange);
    Code:
       0: ldc           #9                  // String https
       2: aload_0
       3: invokeinterface #10,  1           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.getRequestScheme:()Ljava/lang/String;
       8: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      11: ifeq          20
      14: ldc           #12                 // String wss
      16: astore_1
      17: goto          23
      20: ldc           #13                 // String ws
      22: astore_1
      23: new           #14                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      30: aload_1
      31: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: ldc           #17                 // String ://
      36: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_0
      40: ldc           #19                 // String Host
      42: invokeinterface #20,  2           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.getRequestHeader:(Ljava/lang/String;)Ljava/lang/String;
      47: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: aload_0
      51: invokeinterface #21,  1           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.getRequestURI:()Ljava/lang/String;
      56: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: areturn

  public final void handshake(io.undertow.websockets.spi.WebSocketHttpExchange);
    Code:
       0: aload_1
       1: getstatic     #23                 // Field io/undertow/websockets/core/WebSocketVersion.ATTACHMENT_KEY:Lio/undertow/util/AttachmentKey;
       4: aload_0
       5: getfield      #5                  // Field version:Lio/undertow/websockets/core/WebSocketVersion;
       8: invokeinterface #24,  3           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.putAttachment:(Lio/undertow/util/AttachmentKey;Ljava/lang/Object;)V
      13: aload_0
      14: aload_1
      15: invokevirtual #25                 // Method handshakeInternal:(Lio/undertow/websockets/spi/WebSocketHttpExchange;)V
      18: return

  protected abstract void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange);

  public abstract boolean matches(io.undertow.websockets.spi.WebSocketHttpExchange);

  public abstract io.undertow.websockets.core.WebSocketChannel createChannel(io.undertow.websockets.spi.WebSocketHttpExchange, org.xnio.StreamConnection, io.undertow.connector.ByteBufferPool);

  protected final void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange, byte[]);
    Code:
       0: aload_1
       1: ldc           #26                 // String Content-Length
       3: aload_2
       4: arraylength
       5: invokestatic  #27                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;
       8: invokeinterface #28,  3           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.setResponseHeader:(Ljava/lang/String;Ljava/lang/String;)V
      13: aload_1
      14: ldc           #29                 // String Upgrade
      16: ldc           #30                 // String WebSocket
      18: invokeinterface #28,  3           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.setResponseHeader:(Ljava/lang/String;Ljava/lang/String;)V
      23: aload_1
      24: ldc           #31                 // String Connection
      26: ldc           #29                 // String Upgrade
      28: invokeinterface #28,  3           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.setResponseHeader:(Ljava/lang/String;Ljava/lang/String;)V
      33: aload_0
      34: aload_1
      35: aload_2
      36: invokevirtual #32                 // Method upgradeChannel:(Lio/undertow/websockets/spi/WebSocketHttpExchange;[B)V
      39: return

  protected void upgradeChannel(io.undertow.websockets.spi.WebSocketHttpExchange, byte[]);
    Code:
       0: aload_2
       1: arraylength
       2: ifle          16
       5: aload_1
       6: aload_2
       7: invokestatic  #33                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      10: invokestatic  #34                 // Method writePayload:(Lio/undertow/websockets/spi/WebSocketHttpExchange;Ljava/nio/ByteBuffer;)V
      13: goto          22
      16: aload_1
      17: invokeinterface #35,  1           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.endExchange:()V
      22: return

  private static void writePayload(io.undertow.websockets.spi.WebSocketHttpExchange, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #36,  2           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.sendData:(Ljava/nio/ByteBuffer;)Lorg/xnio/IoFuture;
       7: new           #37                 // class io/undertow/websockets/core/protocol/Handshake$1
      10: dup
      11: aload_0
      12: invokespecial #38                 // Method io/undertow/websockets/core/protocol/Handshake$1."<init>":(Lio/undertow/websockets/spi/WebSocketHttpExchange;)V
      15: aconst_null
      16: invokeinterface #39,  3           // InterfaceMethod org/xnio/IoFuture.addNotifier:(Lorg/xnio/IoFuture$Notifier;Ljava/lang/Object;)Lorg/xnio/IoFuture;
      21: pop
      22: return

  protected final void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #40                 // Field EMPTY:[B
       5: invokevirtual #41                 // Method performUpgrade:(Lio/undertow/websockets/spi/WebSocketHttpExchange;[B)V
       8: return

  protected final void selectSubprotocol(io.undertow.websockets.spi.WebSocketHttpExchange);
    Code:
       0: aload_1
       1: ldc           #42                 // String Sec-WebSocket-Protocol
       3: invokeinterface #20,  2           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.getRequestHeader:(Ljava/lang/String;)Ljava/lang/String;
       8: astore_2
       9: aload_2
      10: ifnonnull     14
      13: return
      14: getstatic     #43                 // Field PATTERN:Ljava/util/regex/Pattern;
      17: aload_2
      18: invokevirtual #44                 // Method java/util/regex/Pattern.split:(Ljava/lang/CharSequence;)[Ljava/lang/String;
      21: astore_3
      22: aload_0
      23: aload_3
      24: invokevirtual #45                 // Method supportedSubprotols:([Ljava/lang/String;)Ljava/lang/String;
      27: astore        4
      29: aload         4
      31: ifnull        52
      34: aload         4
      36: invokevirtual #46                 // Method java/lang/String.isEmpty:()Z
      39: ifne          52
      42: aload_1
      43: ldc           #42                 // String Sec-WebSocket-Protocol
      45: aload         4
      47: invokeinterface #28,  3           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.setResponseHeader:(Ljava/lang/String;Ljava/lang/String;)V
      52: return

  protected final void selectExtensions(io.undertow.websockets.spi.WebSocketHttpExchange);
    Code:
       0: aload_1
       1: ldc           #47                 // String Sec-WebSocket-Extensions
       3: invokeinterface #20,  2           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.getRequestHeader:(Ljava/lang/String;)Ljava/lang/String;
       8: invokestatic  #48                 // Method io/undertow/websockets/WebSocketExtension.parse:(Ljava/lang/String;)Ljava/util/List;
      11: astore_2
      12: aload_0
      13: aload_2
      14: invokevirtual #49                 // Method selectedExtension:(Ljava/util/List;)Ljava/util/List;
      17: astore_3
      18: aload_3
      19: ifnull        43
      22: aload_3
      23: invokeinterface #50,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      28: ifne          43
      31: aload_1
      32: ldc           #47                 // String Sec-WebSocket-Extensions
      34: aload_3
      35: invokestatic  #51                 // Method io/undertow/websockets/WebSocketExtension.toExtensionHeader:(Ljava/util/List;)Ljava/lang/String;
      38: invokeinterface #28,  3           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.setResponseHeader:(Ljava/lang/String;Ljava/lang/String;)V
      43: return

  protected java.lang.String supportedSubprotols(java.lang.String[]);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     82
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload         5
      22: invokevirtual #52                 // Method java/lang/String.trim:()Ljava/lang/String;
      25: astore        6
      27: aload_0
      28: getfield      #8                  // Field subprotocols:Ljava/util/Set;
      31: invokeinterface #53,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      36: astore        7
      38: aload         7
      40: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      45: ifeq          76
      48: aload         7
      50: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      55: checkcast     #56                 // class java/lang/String
      58: astore        8
      60: aload         6
      62: aload         8
      64: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      67: ifeq          73
      70: aload         8
      72: areturn
      73: goto          38
      76: iinc          4, 1
      79: goto          8
      82: aconst_null
      83: areturn

  protected java.util.List<io.undertow.websockets.WebSocketExtension> selectedExtension(java.util.List<io.undertow.websockets.WebSocketExtension>);
    Code:
       0: new           #57                 // class java/util/ArrayList
       3: dup
       4: invokespecial #58                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: new           #57                 // class java/util/ArrayList
      11: dup
      12: invokespecial #58                 // Method java/util/ArrayList."<init>":()V
      15: astore_3
      16: aload_1
      17: invokeinterface #59,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      22: astore        4
      24: aload         4
      26: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          130
      34: aload         4
      36: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #60                 // class io/undertow/websockets/WebSocketExtension
      44: astore        5
      46: aload_0
      47: getfield      #4                  // Field availableExtensions:Ljava/util/Set;
      50: invokeinterface #53,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      55: astore        6
      57: aload         6
      59: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      64: ifeq          127
      67: aload         6
      69: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      74: checkcast     #61                 // class io/undertow/websockets/extensions/ExtensionHandshake
      77: astore        7
      79: aload         7
      81: aload         5
      83: invokeinterface #62,  2           // InterfaceMethod io/undertow/websockets/extensions/ExtensionHandshake.accept:(Lio/undertow/websockets/WebSocketExtension;)Lio/undertow/websockets/WebSocketExtension;
      88: astore        8
      90: aload         5
      92: ifnull        124
      95: aload         7
      97: aload_3
      98: invokeinterface #63,  2           // InterfaceMethod io/undertow/websockets/extensions/ExtensionHandshake.isIncompatible:(Ljava/util/List;)Z
     103: ifne          124
     106: aload_2
     107: aload         8
     109: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     114: pop
     115: aload_3
     116: aload         7
     118: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     123: pop
     124: goto          57
     127: goto          24
     130: aload_2
     131: areturn

  public final void addExtension(io.undertow.websockets.extensions.ExtensionHandshake);
    Code:
       0: aload_0
       1: getfield      #4                  // Field availableExtensions:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #65,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: iconst_1
      13: putfield      #66                 // Field allowExtensions:Z
      16: return

  protected final io.undertow.websockets.extensions.ExtensionFunction initExtensions(io.undertow.websockets.spi.WebSocketHttpExchange);
    Code:
       0: aload_1
       1: invokeinterface #67,  1           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.getResponseHeaders:()Ljava/util/Map;
       6: ldc           #47                 // String Sec-WebSocket-Extensions
       8: invokeinterface #68,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: ifnull        44
      16: aload_1
      17: invokeinterface #67,  1           // InterfaceMethod io/undertow/websockets/spi/WebSocketHttpExchange.getResponseHeaders:()Ljava/util/Map;
      22: ldc           #47                 // String Sec-WebSocket-Extensions
      24: invokeinterface #68,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #69                 // class java/util/List
      32: iconst_0
      33: invokeinterface #70,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      38: checkcast     #56                 // class java/lang/String
      41: goto          45
      44: aconst_null
      45: astore_2
      46: new           #57                 // class java/util/ArrayList
      49: dup
      50: invokespecial #58                 // Method java/util/ArrayList."<init>":()V
      53: astore_3
      54: aload_2
      55: ifnull        181
      58: aload_2
      59: invokestatic  #48                 // Method io/undertow/websockets/WebSocketExtension.parse:(Ljava/lang/String;)Ljava/util/List;
      62: astore        4
      64: aload         4
      66: ifnull        181
      69: aload         4
      71: invokeinterface #50,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      76: ifne          181
      79: aload         4
      81: invokeinterface #59,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      86: astore        5
      88: aload         5
      90: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      95: ifeq          181
      98: aload         5
     100: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     105: checkcast     #60                 // class io/undertow/websockets/WebSocketExtension
     108: astore        6
     110: aload_0
     111: getfield      #4                  // Field availableExtensions:Ljava/util/Set;
     114: invokeinterface #53,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     119: astore        7
     121: aload         7
     123: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     128: ifeq          178
     131: aload         7
     133: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     138: checkcast     #61                 // class io/undertow/websockets/extensions/ExtensionHandshake
     141: astore        8
     143: aload         8
     145: invokeinterface #71,  1           // InterfaceMethod io/undertow/websockets/extensions/ExtensionHandshake.getName:()Ljava/lang/String;
     150: aload         6
     152: invokevirtual #72                 // Method io/undertow/websockets/WebSocketExtension.getName:()Ljava/lang/String;
     155: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     158: ifeq          175
     161: aload_3
     162: aload         8
     164: invokeinterface #73,  1           // InterfaceMethod io/undertow/websockets/extensions/ExtensionHandshake.create:()Lio/undertow/websockets/extensions/ExtensionFunction;
     169: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     174: pop
     175: goto          121
     178: goto          88
     181: aload_3
     182: invokestatic  #74                 // Method io/undertow/websockets/extensions/CompositeExtensionFunction.compose:(Ljava/util/List;)Lio/undertow/websockets/extensions/ExtensionFunction;
     185: areturn

  static {};
    Code:
       0: iconst_0
       1: newarray       byte
       3: putstatic     #40                 // Field EMPTY:[B
       6: ldc           #75                 // String \\s*,\\s*
       8: invokestatic  #76                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      11: putstatic     #43                 // Field PATTERN:Ljava/util/regex/Pattern;
      14: return
}
