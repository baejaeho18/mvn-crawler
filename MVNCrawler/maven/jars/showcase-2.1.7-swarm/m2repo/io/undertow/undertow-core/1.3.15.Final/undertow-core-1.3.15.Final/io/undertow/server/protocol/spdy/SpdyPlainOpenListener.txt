Compiled from "SpdyPlainOpenListener.java"
public final class io.undertow.server.protocol.spdy.SpdyPlainOpenListener implements org.xnio.ChannelListener<org.xnio.StreamConnection>, io.undertow.server.OpenListener {
  private final io.undertow.connector.ByteBufferPool bufferPool;

  private final io.undertow.connector.ByteBufferPool heapBufferPool;

  private final int bufferSize;

  private volatile io.undertow.server.HttpHandler rootHandler;

  private volatile org.xnio.OptionMap undertowOptions;

  private volatile boolean statisticsEnabled;

  private final io.undertow.server.ConnectorStatisticsImpl connectorStatistics;

  public io.undertow.server.protocol.spdy.SpdyPlainOpenListener(io.undertow.connector.ByteBufferPool, io.undertow.connector.ByteBufferPool);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #1                  // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       6: invokespecial #2                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
       9: return

  public io.undertow.server.protocol.spdy.SpdyPlainOpenListener(io.undertow.connector.ByteBufferPool, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_3
       6: putfield      #4                  // Field undertowOptions:Lorg/xnio/OptionMap;
       9: aload_0
      10: aload_1
      11: putfield      #5                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      14: aload_1
      15: invokeinterface #6,  1            // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      20: astore        4
      22: aload_0
      23: aload         4
      25: invokeinterface #7,  1            // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      30: invokevirtual #8                  // Method java/nio/ByteBuffer.remaining:()I
      33: putfield      #9                  // Field bufferSize:I
      36: aload         4
      38: invokeinterface #10,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      43: aload_0
      44: aload_2
      45: putfield      #11                 // Field heapBufferPool:Lio/undertow/connector/ByteBufferPool;
      48: aload_2
      49: invokeinterface #6,  1            // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      54: astore        5
      56: aload         5
      58: invokeinterface #7,  1            // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      63: invokevirtual #12                 // Method java/nio/ByteBuffer.hasArray:()Z
      66: ifne          78
      69: getstatic     #13                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      72: invokeinterface #14,  1           // InterfaceMethod io/undertow/UndertowMessages.mustProvideHeapBuffer:()Ljava/lang/IllegalArgumentException;
      77: athrow
      78: aload         5
      80: invokeinterface #10,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      85: goto          100
      88: astore        6
      90: aload         5
      92: invokeinterface #10,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      97: aload         6
      99: athrow
     100: aload_0
     101: new           #15                 // class io/undertow/server/ConnectorStatisticsImpl
     104: dup
     105: invokespecial #16                 // Method io/undertow/server/ConnectorStatisticsImpl."<init>":()V
     108: putfield      #17                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     111: aload_0
     112: aload_3
     113: getstatic     #18                 // Field io/undertow/UndertowOptions.ENABLE_CONNECTOR_STATISTICS:Lorg/xnio/Option;
     116: iconst_0
     117: invokevirtual #19                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     120: putfield      #20                 // Field statisticsEnabled:Z
     123: return
    Exception table:
       from    to  target type
          56    78    88   any
          88    90    88   any

  public void handleEvent(org.xnio.StreamConnection);
    Code:
       0: getstatic     #21                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
       3: invokeinterface #22,  1           // InterfaceMethod io/undertow/UndertowLogger.isTraceEnabled:()Z
       8: ifeq          25
      11: getstatic     #21                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      14: ldc           #23                 // String Opened connection with %s
      16: aload_1
      17: invokevirtual #24                 // Method org/xnio/StreamConnection.getPeerAddress:()Ljava/net/SocketAddress;
      20: invokeinterface #25,  3           // InterfaceMethod io/undertow/UndertowLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      25: new           #26                 // class io/undertow/protocols/spdy/SpdyChannel
      28: dup
      29: aload_1
      30: aload_0
      31: getfield      #5                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      34: aconst_null
      35: aload_0
      36: getfield      #11                 // Field heapBufferPool:Lio/undertow/connector/ByteBufferPool;
      39: iconst_0
      40: aload_0
      41: getfield      #4                  // Field undertowOptions:Lorg/xnio/OptionMap;
      44: invokespecial #27                 // Method io/undertow/protocols/spdy/SpdyChannel."<init>":(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/PooledByteBuffer;Lio/undertow/connector/ByteBufferPool;ZLorg/xnio/OptionMap;)V
      47: astore_2
      48: aload_0
      49: getfield      #4                  // Field undertowOptions:Lorg/xnio/OptionMap;
      52: getstatic     #28                 // Field io/undertow/UndertowOptions.IDLE_TIMEOUT:Lorg/xnio/Option;
      55: invokevirtual #29                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;)Ljava/lang/Object;
      58: checkcast     #30                 // class java/lang/Integer
      61: astore_3
      62: aload_3
      63: ifnull        82
      66: aload_3
      67: invokevirtual #31                 // Method java/lang/Integer.intValue:()I
      70: ifle          82
      73: aload_2
      74: aload_3
      75: invokevirtual #31                 // Method java/lang/Integer.intValue:()I
      78: i2l
      79: invokevirtual #32                 // Method io/undertow/protocols/spdy/SpdyChannel.setIdleTimeout:(J)V
      82: aload_0
      83: getfield      #20                 // Field statisticsEnabled:Z
      86: ifeq          145
      89: aload_1
      90: invokevirtual #33                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      93: new           #34                 // class io/undertow/conduits/BytesSentStreamSinkConduit
      96: dup
      97: aload_1
      98: invokevirtual #33                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
     101: invokevirtual #35                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
     104: aload_0
     105: getfield      #17                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     108: invokevirtual #36                 // Method io/undertow/server/ConnectorStatisticsImpl.sentAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
     111: invokespecial #37                 // Method io/undertow/conduits/BytesSentStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/conduits/ByteActivityCallback;)V
     114: invokevirtual #38                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
     117: aload_1
     118: invokevirtual #39                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     121: new           #40                 // class io/undertow/conduits/BytesReceivedStreamSourceConduit
     124: dup
     125: aload_1
     126: invokevirtual #39                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     129: invokevirtual #41                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     132: aload_0
     133: getfield      #17                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     136: invokevirtual #42                 // Method io/undertow/server/ConnectorStatisticsImpl.receivedAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
     139: invokespecial #43                 // Method io/undertow/conduits/BytesReceivedStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/conduits/ByteActivityCallback;)V
     142: invokevirtual #44                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     145: aload_2
     146: invokevirtual #45                 // Method io/undertow/protocols/spdy/SpdyChannel.getReceiveSetter:()Lorg/xnio/ChannelListener$Setter;
     149: new           #46                 // class io/undertow/server/protocol/spdy/SpdyReceiveListener
     152: dup
     153: aload_0
     154: getfield      #47                 // Field rootHandler:Lio/undertow/server/HttpHandler;
     157: aload_0
     158: invokevirtual #48                 // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     161: aload_0
     162: getfield      #9                  // Field bufferSize:I
     165: aload_0
     166: getfield      #20                 // Field statisticsEnabled:Z
     169: ifeq          179
     172: aload_0
     173: getfield      #17                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     176: goto          180
     179: aconst_null
     180: invokespecial #49                 // Method io/undertow/server/protocol/spdy/SpdyReceiveListener."<init>":(Lio/undertow/server/HttpHandler;Lorg/xnio/OptionMap;ILio/undertow/server/ConnectorStatisticsImpl;)V
     183: invokeinterface #50,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     188: aload_2
     189: invokevirtual #51                 // Method io/undertow/protocols/spdy/SpdyChannel.resumeReceives:()V
     192: return

  public io.undertow.server.ConnectorStatistics getConnectorStatistics();
    Code:
       0: aload_0
       1: getfield      #20                 // Field statisticsEnabled:Z
       4: ifeq          12
       7: aload_0
       8: getfield      #17                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      11: areturn
      12: aconst_null
      13: areturn

  public io.undertow.server.HttpHandler getRootHandler();
    Code:
       0: aload_0
       1: getfield      #47                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       4: areturn

  public void setRootHandler(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #47                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       5: return

  public org.xnio.OptionMap getUndertowOptions();
    Code:
       0: aload_0
       1: getfield      #4                  // Field undertowOptions:Lorg/xnio/OptionMap;
       4: areturn

  public void setUndertowOptions(org.xnio.OptionMap);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #13                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #52                 // String undertowOptions
       9: invokeinterface #53,  2           // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: aload_1
      17: putfield      #4                  // Field undertowOptions:Lorg/xnio/OptionMap;
      20: aload_0
      21: aload_1
      22: getstatic     #18                 // Field io/undertow/UndertowOptions.ENABLE_CONNECTOR_STATISTICS:Lorg/xnio/Option;
      25: iconst_0
      26: invokevirtual #19                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      29: putfield      #20                 // Field statisticsEnabled:Z
      32: return

  public io.undertow.connector.ByteBufferPool getBufferPool();
    Code:
       0: aload_0
       1: getfield      #5                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
       4: areturn

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #54                 // class org/xnio/StreamConnection
       5: invokevirtual #55                 // Method handleEvent:(Lorg/xnio/StreamConnection;)V
       8: return
}
