Compiled from "Node.java"
class io.undertow.server.handlers.proxy.mod_cluster.Node {
  private final int id;

  private final java.lang.String jvmRoute;

  private final io.undertow.server.handlers.proxy.ConnectionPoolManager connectionPoolManager;

  private final io.undertow.server.handlers.proxy.mod_cluster.NodeConfig nodeConfig;

  private final io.undertow.server.handlers.proxy.mod_cluster.Balancer balancerConfig;

  private final io.undertow.server.handlers.proxy.ProxyConnectionPool connectionPool;

  private final io.undertow.server.handlers.proxy.mod_cluster.NodeLbStatus lbStatus;

  private final io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer container;

  private final java.util.List<io.undertow.server.handlers.proxy.mod_cluster.Node$VHostMapping> vHosts;

  private final java.util.List<io.undertow.server.handlers.proxy.mod_cluster.Context> contexts;

  private final org.xnio.XnioIoThread ioThread;

  private final io.undertow.connector.ByteBufferPool bufferPool;

  private volatile int state;

  private static final int ERROR;

  private static final int REMOVED;

  private static final int HOT_STANDBY;

  private static final int ACTIVE_PING;

  private static final int ERROR_MASK;

  private static final java.util.concurrent.atomic.AtomicInteger idGen;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.handlers.proxy.mod_cluster.Node> stateUpdater;

  static final java.util.concurrent.atomic.AtomicInteger vHostIdGen;

  protected io.undertow.server.handlers.proxy.mod_cluster.Node(io.undertow.server.handlers.proxy.mod_cluster.NodeConfig, io.undertow.server.handlers.proxy.mod_cluster.Balancer, org.xnio.XnioIoThread, io.undertow.connector.ByteBufferPool, io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #8                  // class io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus
       8: dup
       9: invokespecial #9                  // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus."<init>":()V
      12: putfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
      15: aload_0
      16: new           #11                 // class java/util/concurrent/CopyOnWriteArrayList
      19: dup
      20: invokespecial #12                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      23: putfield      #13                 // Field vHosts:Ljava/util/List;
      26: aload_0
      27: new           #11                 // class java/util/concurrent/CopyOnWriteArrayList
      30: dup
      31: invokespecial #12                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      34: putfield      #14                 // Field contexts:Ljava/util/List;
      37: aload_0
      38: ldc           #16                 // int -2147483648
      40: putfield      #2                  // Field state:I
      43: aload_0
      44: getstatic     #17                 // Field idGen:Ljava/util/concurrent/atomic/AtomicInteger;
      47: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      50: putfield      #19                 // Field id:I
      53: aload_0
      54: aload_1
      55: invokevirtual #20                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getJvmRoute:()Ljava/lang/String;
      58: putfield      #21                 // Field jvmRoute:Ljava/lang/String;
      61: aload_0
      62: aload_1
      63: putfield      #1                  // Field nodeConfig:Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
      66: aload_0
      67: aload_3
      68: putfield      #3                  // Field ioThread:Lorg/xnio/XnioIoThread;
      71: aload_0
      72: aload         4
      74: putfield      #22                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      77: aload_0
      78: aload_2
      79: putfield      #23                 // Field balancerConfig:Lio/undertow/server/handlers/proxy/mod_cluster/Balancer;
      82: aload_0
      83: aload         5
      85: putfield      #4                  // Field container:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;
      88: aload_0
      89: new           #24                 // class io/undertow/server/handlers/proxy/mod_cluster/Node$NodeConnectionPoolManager
      92: dup
      93: aload_0
      94: aconst_null
      95: invokespecial #25                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node$NodeConnectionPoolManager."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/Node;Lio/undertow/server/handlers/proxy/mod_cluster/Node$1;)V
      98: putfield      #26                 // Field connectionPoolManager:Lio/undertow/server/handlers/proxy/ConnectionPoolManager;
     101: aload_0
     102: new           #27                 // class io/undertow/server/handlers/proxy/ProxyConnectionPool
     105: dup
     106: aload_0
     107: getfield      #26                 // Field connectionPoolManager:Lio/undertow/server/handlers/proxy/ConnectionPoolManager;
     110: aload_1
     111: invokevirtual #28                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.getConnectionURI:()Ljava/net/URI;
     114: aload         5
     116: invokevirtual #29                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer.getXnioSsl:()Lorg/xnio/ssl/XnioSsl;
     119: aload         5
     121: invokevirtual #30                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer.getClient:()Lio/undertow/client/UndertowClient;
     124: aload         5
     126: invokevirtual #31                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer.getClientOptions:()Lorg/xnio/OptionMap;
     129: invokespecial #32                 // Method io/undertow/server/handlers/proxy/ProxyConnectionPool."<init>":(Lio/undertow/server/handlers/proxy/ConnectionPoolManager;Ljava/net/URI;Lorg/xnio/ssl/XnioSsl;Lio/undertow/client/UndertowClient;Lorg/xnio/OptionMap;)V
     132: putfield      #33                 // Field connectionPool:Lio/undertow/server/handlers/proxy/ProxyConnectionPool;
     135: return

  public int getId();
    Code:
       0: aload_0
       1: getfield      #19                 // Field id:I
       4: ireturn

  public java.lang.String getJvmRoute();
    Code:
       0: aload_0
       1: getfield      #21                 // Field jvmRoute:Ljava/lang/String;
       4: areturn

  public io.undertow.server.handlers.proxy.mod_cluster.Balancer getBalancer();
    Code:
       0: aload_0
       1: getfield      #23                 // Field balancerConfig:Lio/undertow/server/handlers/proxy/mod_cluster/Balancer;
       4: areturn

  public io.undertow.server.handlers.proxy.mod_cluster.NodeConfig getNodeConfig();
    Code:
       0: aload_0
       1: getfield      #1                  // Field nodeConfig:Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
       4: areturn

  public io.undertow.server.handlers.proxy.ProxyConnectionPool getConnectionPool();
    Code:
       0: aload_0
       1: getfield      #33                 // Field connectionPool:Lio/undertow/server/handlers/proxy/ProxyConnectionPool;
       4: areturn

  org.xnio.XnioIoThread getIoThread();
    Code:
       0: aload_0
       1: getfield      #3                  // Field ioThread:Lorg/xnio/XnioIoThread;
       4: areturn

  public io.undertow.server.handlers.proxy.mod_cluster.NodeStatus getStatus();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: ldc           #16                 // int -2147483648
       8: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      11: ifeq          18
      14: getstatic     #35                 // Field io/undertow/server/handlers/proxy/mod_cluster/NodeStatus.NODE_DOWN:Lio/undertow/server/handlers/proxy/mod_cluster/NodeStatus;
      17: areturn
      18: iload_1
      19: ldc           #36                 // int 536870912
      21: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      24: ifeq          31
      27: getstatic     #37                 // Field io/undertow/server/handlers/proxy/mod_cluster/NodeStatus.NODE_HOT_STANDBY:Lio/undertow/server/handlers/proxy/mod_cluster/NodeStatus;
      30: areturn
      31: getstatic     #38                 // Field io/undertow/server/handlers/proxy/mod_cluster/NodeStatus.NODE_UP:Lio/undertow/server/handlers/proxy/mod_cluster/NodeStatus;
      34: areturn

  public int getElected();
    Code:
       0: aload_0
       1: getfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
       4: invokevirtual #39                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus.getElected:()I
       7: ireturn

  int getElectedDiff();
    Code:
       0: aload_0
       1: getfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
       4: invokevirtual #40                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus.getElectedDiff:()I
       7: ireturn

  public int getLoad();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: ldc           #16                 // int -2147483648
       8: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      11: ifeq          16
      14: iconst_m1
      15: ireturn
      16: iload_1
      17: ldc           #36                 // int 536870912
      19: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      22: ifeq          27
      25: iconst_0
      26: ireturn
      27: aload_0
      28: getfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
      31: invokevirtual #41                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus.getLbFactor:()I
      34: ireturn

  public int getLoadStatus();
    Code:
       0: aload_0
       1: getfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
       4: invokevirtual #42                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus.getLbStatus:()I
       7: ireturn

  void elected();
    Code:
       0: aload_0
       1: getfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
       4: invokevirtual #43                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus.elected:()V
       7: return

  java.util.List<io.undertow.server.handlers.proxy.mod_cluster.Node$VHostMapping> getVHosts();
    Code:
       0: aload_0
       1: getfield      #13                 // Field vHosts:Ljava/util/List;
       4: invokestatic  #44                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
       7: areturn

  java.util.Collection<io.undertow.server.handlers.proxy.mod_cluster.Context> getContexts();
    Code:
       0: aload_0
       1: getfield      #14                 // Field contexts:Ljava/util/List;
       4: invokestatic  #45                 // Method java/util/Collections.unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/Collection;
       7: areturn

  void resetLbStatus();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: ldc           #16                 // int -2147483648
       6: invokestatic  #46                 // Method org/xnio/Bits.allAreClear:(II)Z
       9: ifeq          23
      12: aload_0
      13: getfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
      16: invokevirtual #47                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus.update:()Z
      19: ifeq          23
      22: return
      23: return

  protected void checkHealth(long, io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker);
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore        4
       6: iload         4
       8: ldc           #48                 // int 1342177280
      10: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
      13: ifeq          17
      16: return
      17: aload_0
      18: lload_1
      19: aload_3
      20: invokevirtual #49                 // Method healthCheckPing:(JLio/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker;)V
      23: return

  void healthCheckPing(long, io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker);
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore        4
       6: iload         4
       8: ldc           #50                 // int 268435456
      10: iand
      11: ifeq          15
      14: return
      15: iload         4
      17: ldc           #50                 // int 268435456
      19: ior
      20: istore        5
      22: getstatic     #51                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      25: aload_0
      26: iload         4
      28: iload         5
      30: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      33: ifeq          0
      36: goto          39
      39: aload_0
      40: new           #53                 // class io/undertow/server/handlers/proxy/mod_cluster/Node$1
      43: dup
      44: aload_0
      45: lload_1
      46: invokespecial #54                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node$1."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/Node;J)V
      49: aload_3
      50: aload_0
      51: getfield      #3                  // Field ioThread:Lorg/xnio/XnioIoThread;
      54: aload_0
      55: getfield      #22                 // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      58: aload_0
      59: getfield      #4                  // Field container:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;
      62: invokevirtual #30                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer.getClient:()Lio/undertow/client/UndertowClient;
      65: aload_0
      66: getfield      #4                  // Field container:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;
      69: invokevirtual #29                 // Method io/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer.getXnioSsl:()Lorg/xnio/ssl/XnioSsl;
      72: getstatic     #55                 // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
      75: invokestatic  #56                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil.internalPingNode:(Lio/undertow/server/handlers/proxy/mod_cluster/Node;Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$PingCallback;Lio/undertow/server/handlers/proxy/mod_cluster/NodeHealthChecker;Lorg/xnio/XnioIoThread;Lio/undertow/connector/ByteBufferPool;Lio/undertow/client/UndertowClient;Lorg/xnio/ssl/XnioSsl;Lorg/xnio/OptionMap;)V
      78: return

  void ping(io.undertow.server.HttpServerExchange, io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #57                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodePingUtil.pingNode:(Lio/undertow/server/handlers/proxy/mod_cluster/Node;Lio/undertow/server/HttpServerExchange;Lio/undertow/server/handlers/proxy/mod_cluster/NodePingUtil$PingCallback;)V
       6: return

  io.undertow.server.handlers.proxy.mod_cluster.Context registerContext(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aconst_null
       1: astore_3
       2: aload_0
       3: getfield      #13                 // Field vHosts:Ljava/util/List;
       6: invokeinterface #58,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      11: astore        4
      13: aload         4
      15: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          58
      23: aload         4
      25: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #61                 // class io/undertow/server/handlers/proxy/mod_cluster/Node$VHostMapping
      33: astore        5
      35: aload_2
      36: aload         5
      38: invokevirtual #62                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node$VHostMapping.getAliases:()Ljava/util/List;
      41: invokeinterface #63,  2           // InterfaceMethod java/util/List.equals:(Ljava/lang/Object;)Z
      46: ifeq          55
      49: aload         5
      51: astore_3
      52: goto          58
      55: goto          13
      58: aload_3
      59: ifnonnull     83
      62: new           #61                 // class io/undertow/server/handlers/proxy/mod_cluster/Node$VHostMapping
      65: dup
      66: aload_0
      67: aload_2
      68: invokespecial #64                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node$VHostMapping."<init>":(Lio/undertow/server/handlers/proxy/mod_cluster/Node;Ljava/util/List;)V
      71: astore_3
      72: aload_0
      73: getfield      #13                 // Field vHosts:Ljava/util/List;
      76: aload_3
      77: invokeinterface #65,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      82: pop
      83: new           #66                 // class io/undertow/server/handlers/proxy/mod_cluster/Context
      86: dup
      87: aload_1
      88: aload_3
      89: aload_0
      90: invokespecial #67                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context."<init>":(Ljava/lang/String;Lio/undertow/server/handlers/proxy/mod_cluster/Node$VHostMapping;Lio/undertow/server/handlers/proxy/mod_cluster/Node;)V
      93: astore        4
      95: aload_0
      96: getfield      #14                 // Field contexts:Ljava/util/List;
      99: aload         4
     101: invokeinterface #65,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     106: pop
     107: aload         4
     109: areturn

  io.undertow.server.handlers.proxy.mod_cluster.Context getContext(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aconst_null
       1: astore_3
       2: aload_0
       3: getfield      #13                 // Field vHosts:Ljava/util/List;
       6: invokeinterface #58,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      11: astore        4
      13: aload         4
      15: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          58
      23: aload         4
      25: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #61                 // class io/undertow/server/handlers/proxy/mod_cluster/Node$VHostMapping
      33: astore        5
      35: aload_2
      36: aload         5
      38: invokevirtual #62                 // Method io/undertow/server/handlers/proxy/mod_cluster/Node$VHostMapping.getAliases:()Ljava/util/List;
      41: invokeinterface #63,  2           // InterfaceMethod java/util/List.equals:(Ljava/lang/Object;)Z
      46: ifeq          55
      49: aload         5
      51: astore_3
      52: goto          58
      55: goto          13
      58: aload_3
      59: ifnonnull     64
      62: aconst_null
      63: areturn
      64: aload_0
      65: getfield      #14                 // Field contexts:Ljava/util/List;
      68: invokeinterface #58,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      73: astore        4
      75: aload         4
      77: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      82: ifeq          124
      85: aload         4
      87: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      92: checkcast     #66                 // class io/undertow/server/handlers/proxy/mod_cluster/Context
      95: astore        5
      97: aload         5
      99: invokevirtual #68                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.getPath:()Ljava/lang/String;
     102: aload_1
     103: invokevirtual #69                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     106: ifeq          121
     109: aload         5
     111: invokevirtual #70                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.getVhost:()Lio/undertow/server/handlers/proxy/mod_cluster/Node$VHostMapping;
     114: aload_3
     115: if_acmpne     121
     118: aload         5
     120: areturn
     121: goto          75
     124: aconst_null
     125: areturn

  boolean disableContext(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #71                 // Method getContext:(Ljava/lang/String;Ljava/util/List;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
       6: astore_3
       7: aload_3
       8: ifnull        17
      11: aload_3
      12: invokevirtual #72                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.disable:()V
      15: iconst_1
      16: ireturn
      17: iconst_0
      18: ireturn

  int stopContext(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #71                 // Method getContext:(Ljava/lang/String;Ljava/util/List;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
       6: astore_3
       7: aload_3
       8: ifnull        20
      11: aload_3
      12: invokevirtual #73                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.stop:()V
      15: aload_3
      16: invokevirtual #74                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.getActiveRequests:()I
      19: ireturn
      20: iconst_m1
      21: ireturn

  io.undertow.server.handlers.proxy.mod_cluster.Context removeContext(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #71                 // Method getContext:(Ljava/lang/String;Ljava/util/List;)Lio/undertow/server/handlers/proxy/mod_cluster/Context;
       6: astore_3
       7: aload_3
       8: ifnull        28
      11: aload_3
      12: invokevirtual #73                 // Method io/undertow/server/handlers/proxy/mod_cluster/Context.stop:()V
      15: aload_0
      16: getfield      #14                 // Field contexts:Ljava/util/List;
      19: aload_3
      20: invokeinterface #75,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      25: pop
      26: aload_3
      27: areturn
      28: aconst_null
      29: areturn

  protected void updateLoad(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_2
       5: iload_2
       6: ldc           #76                 // int 1610611712
       8: iand
       9: istore_3
      10: getstatic     #51                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      13: aload_0
      14: iload_2
      15: iload_3
      16: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      19: ifeq          0
      22: aload_0
      23: getfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
      26: iload_1
      27: invokevirtual #77                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus.updateLoad:(I)V
      30: return

  protected void hotStandby();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: ldc           #36                 // int 536870912
       8: ior
       9: istore_2
      10: getstatic     #51                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      13: aload_0
      14: iload_1
      15: iload_2
      16: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      19: ifeq          0
      22: aload_0
      23: getfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
      26: iconst_0
      27: invokevirtual #77                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus.updateLoad:(I)V
      30: return

  protected void markRemoved();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: ldc           #78                 // int 1073741824
       8: ior
       9: istore_2
      10: getstatic     #51                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      13: aload_0
      14: iload_1
      15: iload_2
      16: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      19: ifeq          0
      22: aload_0
      23: getfield      #33                 // Field connectionPool:Lio/undertow/server/handlers/proxy/ProxyConnectionPool;
      26: invokevirtual #79                 // Method io/undertow/server/handlers/proxy/ProxyConnectionPool.close:()V
      29: return

  protected void markInError();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: ldc           #16                 // int -2147483648
       8: ior
       9: istore_2
      10: getstatic     #51                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      13: aload_0
      14: iload_1
      15: iload_2
      16: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      19: ifeq          0
      22: getstatic     #80                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
      25: aload_0
      26: getfield      #21                 // Field jvmRoute:Ljava/lang/String;
      29: invokeinterface #81,  2           // InterfaceMethod io/undertow/UndertowLogger.nodeIsInError:(Ljava/lang/String;)V
      34: return

  private void clearActivePing();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: ldc           #82                 // int -268435457
       8: iand
       9: istore_2
      10: getstatic     #51                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      13: aload_0
      14: iload_1
      15: iload_2
      16: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      19: ifeq          0
      22: return

  private int healthCheckFailed();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: istore_1
       5: iload_1
       6: ldc           #16                 // int -2147483648
       8: iand
       9: ldc           #16                 // int -2147483648
      11: if_icmpeq     34
      14: iload_1
      15: ldc           #16                 // int -2147483648
      17: ior
      18: istore_2
      19: getstatic     #80                 // Field io/undertow/UndertowLogger.ROOT_LOGGER:Lio/undertow/UndertowLogger;
      22: aload_0
      23: getfield      #21                 // Field jvmRoute:Ljava/lang/String;
      26: invokeinterface #81,  2           // InterfaceMethod io/undertow/UndertowLogger.nodeIsInError:(Ljava/lang/String;)V
      31: goto          53
      34: iload_1
      35: sipush        1023
      38: iand
      39: sipush        1023
      42: if_icmpne     49
      45: sipush        1023
      48: ireturn
      49: iload_1
      50: iconst_1
      51: iadd
      52: istore_2
      53: getstatic     #51                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      56: aload_0
      57: iload_1
      58: iload_2
      59: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      62: ifeq          0
      65: iload_2
      66: sipush        1023
      69: iand
      70: ireturn

  protected void resetState();
    Code:
       0: aload_0
       1: ldc           #16                 // int -2147483648
       3: putfield      #2                  // Field state:I
       6: aload_0
       7: getfield      #10                 // Field lbStatus:Lio/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus;
      10: iconst_0
      11: invokevirtual #77                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeLbStatus.updateLoad:(I)V
      14: return

  protected boolean isInErrorState();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: ldc           #16                 // int -2147483648
       6: iand
       7: ldc           #16                 // int -2147483648
       9: if_icmpne     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  boolean isHotStandby();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: ldc           #36                 // int 536870912
       6: invokestatic  #34                 // Method org/xnio/Bits.anyAreSet:(II)Z
       9: ireturn

  protected boolean checkAvailable(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: ldc           #83                 // int -1073741824
       6: invokestatic  #46                 // Method org/xnio/Bits.allAreClear:(II)Z
       9: ifeq          58
      12: aload_0
      13: getfield      #33                 // Field connectionPool:Lio/undertow/server/handlers/proxy/ProxyConnectionPool;
      16: invokevirtual #84                 // Method io/undertow/server/handlers/proxy/ProxyConnectionPool.available:()Lio/undertow/server/handlers/proxy/ProxyConnectionPool$AvailabilityType;
      19: astore_2
      20: aload_2
      21: getstatic     #85                 // Field io/undertow/server/handlers/proxy/ProxyConnectionPool$AvailabilityType.AVAILABLE:Lio/undertow/server/handlers/proxy/ProxyConnectionPool$AvailabilityType;
      24: if_acmpne     29
      27: iconst_1
      28: ireturn
      29: aload_2
      30: getstatic     #86                 // Field io/undertow/server/handlers/proxy/ProxyConnectionPool$AvailabilityType.FULL:Lio/undertow/server/handlers/proxy/ProxyConnectionPool$AvailabilityType;
      33: if_acmpne     58
      36: iload_1
      37: ifeq          42
      40: iconst_1
      41: ireturn
      42: iload_1
      43: ifne          58
      46: aload_0
      47: getfield      #1                  // Field nodeConfig:Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
      50: invokevirtual #87                 // Method io/undertow/server/handlers/proxy/mod_cluster/NodeConfig.isQueueNewRequests:()Z
      53: ifeq          58
      56: iconst_1
      57: ireturn
      58: iconst_0
      59: ireturn

  static void access$100(io.undertow.server.handlers.proxy.mod_cluster.Node);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method clearActivePing:()V
       4: return

  static int access$200(io.undertow.server.handlers.proxy.mod_cluster.Node);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method healthCheckFailed:()I
       4: ireturn

  static io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer access$300(io.undertow.server.handlers.proxy.mod_cluster.Node);
    Code:
       0: aload_0
       1: getfield      #4                  // Field container:Lio/undertow/server/handlers/proxy/mod_cluster/ModClusterContainer;
       4: areturn

  static org.xnio.XnioIoThread access$400(io.undertow.server.handlers.proxy.mod_cluster.Node);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ioThread:Lorg/xnio/XnioIoThread;
       4: areturn

  static int access$500(io.undertow.server.handlers.proxy.mod_cluster.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: ireturn

  static io.undertow.server.handlers.proxy.mod_cluster.NodeConfig access$600(io.undertow.server.handlers.proxy.mod_cluster.Node);
    Code:
       0: aload_0
       1: getfield      #1                  // Field nodeConfig:Lio/undertow/server/handlers/proxy/mod_cluster/NodeConfig;
       4: areturn

  static {};
    Code:
       0: new           #88                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: invokespecial #89                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       7: putstatic     #17                 // Field idGen:Ljava/util/concurrent/atomic/AtomicInteger;
      10: ldc           #15                 // class io/undertow/server/handlers/proxy/mod_cluster/Node
      12: ldc           #90                 // String state
      14: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #51                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: new           #88                 // class java/util/concurrent/atomic/AtomicInteger
      23: dup
      24: invokespecial #89                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      27: putstatic     #92                 // Field vHostIdGen:Ljava/util/concurrent/atomic/AtomicInteger;
      30: return
}
