Compiled from "StringWriteChannelListener.java"
public class io.undertow.util.StringWriteChannelListener implements org.xnio.ChannelListener<org.xnio.channels.StreamSinkChannel> {
  private final java.nio.ByteBuffer buffer;

  public io.undertow.util.StringWriteChannelListener(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
       5: invokespecial #2                  // Method "<init>":(Ljava/lang/String;Ljava/nio/charset/Charset;)V
       8: return

  public io.undertow.util.StringWriteChannelListener(java.lang.String, java.nio.charset.Charset);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #4                  // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      10: invokestatic  #5                  // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      13: putfield      #6                  // Field buffer:Ljava/nio/ByteBuffer;
      16: return

  public void setup(org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #6                  // Field buffer:Ljava/nio/ByteBuffer;
       5: invokeinterface #7,  2            // InterfaceMethod org/xnio/channels/StreamSinkChannel.write:(Ljava/nio/ByteBuffer;)I
      10: istore_2
      11: aload_0
      12: getfield      #6                  // Field buffer:Ljava/nio/ByteBuffer;
      15: invokevirtual #8                  // Method java/nio/ByteBuffer.hasRemaining:()Z
      18: ifeq          25
      21: iload_2
      22: ifgt          0
      25: aload_0
      26: getfield      #6                  // Field buffer:Ljava/nio/ByteBuffer;
      29: invokevirtual #8                  // Method java/nio/ByteBuffer.hasRemaining:()Z
      32: ifeq          56
      35: aload_1
      36: invokeinterface #9,  1            // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      41: aload_0
      42: invokeinterface #10,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      47: aload_1
      48: invokeinterface #11,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      53: goto          61
      56: aload_0
      57: aload_1
      58: invokevirtual #12                 // Method writeDone:(Lorg/xnio/channels/StreamSinkChannel;)V
      61: goto          71
      64: astore_2
      65: aload_0
      66: aload_1
      67: aload_2
      68: invokevirtual #14                 // Method handleError:(Lorg/xnio/channels/StreamSinkChannel;Ljava/io/IOException;)V
      71: return
    Exception table:
       from    to  target type
           0    61    64   Class java/io/IOException

  protected void handleError(org.xnio.channels.StreamSinkChannel, java.io.IOException);
    Code:
       0: getstatic     #15                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
       3: aload_2
       4: invokeinterface #16,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
       9: aload_1
      10: invokestatic  #17                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      13: return

  public void handleEvent(org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #6                  // Field buffer:Ljava/nio/ByteBuffer;
       5: invokeinterface #7,  2            // InterfaceMethod org/xnio/channels/StreamSinkChannel.write:(Ljava/nio/ByteBuffer;)I
      10: istore_2
      11: aload_0
      12: getfield      #6                  // Field buffer:Ljava/nio/ByteBuffer;
      15: invokevirtual #8                  // Method java/nio/ByteBuffer.hasRemaining:()Z
      18: ifeq          25
      21: iload_2
      22: ifgt          0
      25: aload_0
      26: getfield      #6                  // Field buffer:Ljava/nio/ByteBuffer;
      29: invokevirtual #8                  // Method java/nio/ByteBuffer.hasRemaining:()Z
      32: ifeq          42
      35: aload_1
      36: invokeinterface #11,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      41: return
      42: aload_0
      43: aload_1
      44: invokevirtual #12                 // Method writeDone:(Lorg/xnio/channels/StreamSinkChannel;)V
      47: goto          57
      50: astore_2
      51: aload_0
      52: aload_1
      53: aload_2
      54: invokevirtual #14                 // Method handleError:(Lorg/xnio/channels/StreamSinkChannel;Ljava/io/IOException;)V
      57: return
    Exception table:
       from    to  target type
           0    41    50   Class java/io/IOException
          42    47    50   Class java/io/IOException

  public boolean hasRemaining();
    Code:
       0: aload_0
       1: getfield      #6                  // Field buffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #8                  // Method java/nio/ByteBuffer.hasRemaining:()Z
       7: ireturn

  protected void writeDone(org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_1
       1: invokeinterface #18,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.shutdownWrites:()V
       6: aload_1
       7: invokeinterface #19,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.flush:()Z
      12: ifne          47
      15: aload_1
      16: invokeinterface #9,  1            // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      21: new           #20                 // class io/undertow/util/StringWriteChannelListener$1
      24: dup
      25: aload_0
      26: aload_1
      27: invokespecial #21                 // Method io/undertow/util/StringWriteChannelListener$1."<init>":(Lio/undertow/util/StringWriteChannelListener;Lorg/xnio/channels/StreamSinkChannel;)V
      30: invokestatic  #22                 // Method org/xnio/ChannelListeners.closingChannelExceptionHandler:()Lorg/xnio/ChannelExceptionHandler;
      33: invokestatic  #23                 // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
      36: invokeinterface #10,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      41: aload_1
      42: invokeinterface #11,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      47: goto          57
      50: astore_2
      51: aload_0
      52: aload_1
      53: aload_2
      54: invokevirtual #14                 // Method handleError:(Lorg/xnio/channels/StreamSinkChannel;Ljava/io/IOException;)V
      57: return
    Exception table:
       from    to  target type
           0    47    50   Class java/io/IOException

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class org/xnio/channels/StreamSinkChannel
       5: invokevirtual #25                 // Method handleEvent:(Lorg/xnio/channels/StreamSinkChannel;)V
       8: return
}
