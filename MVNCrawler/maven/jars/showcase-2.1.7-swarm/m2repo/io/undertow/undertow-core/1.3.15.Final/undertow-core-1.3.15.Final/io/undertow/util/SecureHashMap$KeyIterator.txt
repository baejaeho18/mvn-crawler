Compiled from "SecureHashMap.java"
final class io.undertow.util.SecureHashMap$KeyIterator implements java.util.Iterator<K> {
  private final io.undertow.util.SecureHashMap$Table<K, V> table;

  private io.undertow.util.SecureHashMap<K, V>.TableIterator tableIterator;

  private io.undertow.util.SecureHashMap<K, V>.TableIterator removeIterator;

  private int tableIdx;

  private io.undertow.util.SecureHashMap$Item<K, V> next;

  final io.undertow.util.SecureHashMap this$0;

  io.undertow.util.SecureHashMap$KeyIterator(io.undertow.util.SecureHashMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/util/SecureHashMap;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_0
      11: getfield      #1                  // Field this$0:Lio/undertow/util/SecureHashMap;
      14: invokestatic  #3                  // Method io/undertow/util/SecureHashMap.access$300:(Lio/undertow/util/SecureHashMap;)Lio/undertow/util/SecureHashMap$Table;
      17: putfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      20: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
       4: ifnonnull     120
       7: aload_0
       8: getfield      #6                  // Field tableIdx:I
      11: aload_0
      12: getfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      15: getfield      #7                  // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      18: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      21: if_icmpne     33
      24: aload_0
      25: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      28: ifnonnull     33
      31: iconst_0
      32: ireturn
      33: aload_0
      34: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      37: ifnonnull     82
      40: aload_0
      41: dup
      42: getfield      #6                  // Field tableIdx:I
      45: dup_x1
      46: iconst_1
      47: iadd
      48: putfield      #6                  // Field tableIdx:I
      51: istore_1
      52: aload_0
      53: getfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      56: getfield      #7                  // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      59: iload_1
      60: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      63: ifnull        82
      66: aload_0
      67: aload_0
      68: getfield      #1                  // Field this$0:Lio/undertow/util/SecureHashMap;
      71: aload_0
      72: getfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      75: iload_1
      76: invokestatic  #11                 // Method io/undertow/util/SecureHashMap.access$1200:(Lio/undertow/util/SecureHashMap;Lio/undertow/util/SecureHashMap$Table;I)Lio/undertow/util/SecureHashMap$TableIterator;
      79: putfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      82: aload_0
      83: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      86: ifnull        0
      89: aload_0
      90: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      93: invokevirtual #12                 // Method io/undertow/util/SecureHashMap$TableIterator.hasNext:()Z
      96: ifeq          112
      99: aload_0
     100: aload_0
     101: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
     104: invokevirtual #13                 // Method io/undertow/util/SecureHashMap$TableIterator.next:()Lio/undertow/util/SecureHashMap$Item;
     107: putfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
     110: iconst_1
     111: ireturn
     112: aload_0
     113: aconst_null
     114: putfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
     117: goto          0
     120: iconst_1
     121: ireturn

  public K next();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method hasNext:()Z
       4: ifeq          46
       7: aload_0
       8: getfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
      11: invokestatic  #15                 // Method io/undertow/util/SecureHashMap$Item.access$100:(Lio/undertow/util/SecureHashMap$Item;)Ljava/lang/Object;
      14: astore_1
      15: aload_0
      16: aload_0
      17: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      20: putfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      23: aload_0
      24: aconst_null
      25: putfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
      28: aload_1
      29: areturn
      30: astore_2
      31: aload_0
      32: aload_0
      33: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      36: putfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      39: aload_0
      40: aconst_null
      41: putfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
      44: aload_2
      45: athrow
      46: new           #17                 // class java/util/NoSuchElementException
      49: dup
      50: invokespecial #18                 // Method java/util/NoSuchElementException."<init>":()V
      53: athrow
    Exception table:
       from    to  target type
           7    15    30   any

  public void remove();
    Code:
       0: aload_0
       1: getfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
       4: astore_1
       5: aload_1
       6: ifnonnull     17
       9: new           #19                 // class java/lang/IllegalStateException
      12: dup
      13: invokespecial #20                 // Method java/lang/IllegalStateException."<init>":()V
      16: athrow
      17: aload_1
      18: invokevirtual #21                 // Method io/undertow/util/SecureHashMap$TableIterator.remove:()V
      21: aload_0
      22: aconst_null
      23: putfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      26: goto          37
      29: astore_2
      30: aload_0
      31: aconst_null
      32: putfield      #16                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      35: aload_2
      36: athrow
      37: return
    Exception table:
       from    to  target type
          17    21    29   any
}
