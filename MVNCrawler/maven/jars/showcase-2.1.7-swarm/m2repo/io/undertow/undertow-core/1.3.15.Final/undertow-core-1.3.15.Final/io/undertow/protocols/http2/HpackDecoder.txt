Compiled from "HpackDecoder.java"
public class io.undertow.protocols.http2.HpackDecoder {
  private static final int DEFAULT_RING_BUFFER_SIZE;

  private io.undertow.protocols.http2.HpackDecoder$HeaderEmitter headerEmitter;

  private io.undertow.protocols.http2.Hpack$HeaderField[] headerTable;

  private int firstSlotPosition;

  private int filledTableSlots;

  private int currentMemorySize;

  private int maxMemorySize;

  private final java.lang.StringBuilder stringBuilder;

  public io.undertow.protocols.http2.HpackDecoder(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field firstSlotPosition:I
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field filledTableSlots:I
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field currentMemorySize:I
      19: aload_0
      20: new           #5                  // class java/lang/StringBuilder
      23: dup
      24: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
      27: putfield      #7                  // Field stringBuilder:Ljava/lang/StringBuilder;
      30: aload_0
      31: iload_1
      32: putfield      #8                  // Field maxMemorySize:I
      35: aload_0
      36: bipush        10
      38: anewarray     #10                 // class io/undertow/protocols/http2/Hpack$HeaderField
      41: putfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      44: return

  public io.undertow.protocols.http2.HpackDecoder();
    Code:
       0: aload_0
       1: sipush        4096
       4: invokespecial #13                 // Method "<init>":(I)V
       7: return

  public void decode(java.nio.ByteBuffer, boolean) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_1
       1: invokevirtual #14                 // Method java/nio/ByteBuffer.hasRemaining:()Z
       4: ifeq          406
       7: aload_1
       8: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
      11: istore_3
      12: aload_1
      13: invokevirtual #16                 // Method java/nio/ByteBuffer.get:()B
      16: istore        4
      18: iload         4
      20: sipush        128
      23: iand
      24: ifeq          95
      27: aload_1
      28: aload_1
      29: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
      32: iconst_1
      33: isub
      34: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      37: pop
      38: aload_1
      39: bipush        7
      41: invokestatic  #18                 // Method io/undertow/protocols/http2/Hpack.decodeInteger:(Ljava/nio/ByteBuffer;I)I
      44: istore        5
      46: iload         5
      48: iconst_m1
      49: if_icmpne     72
      52: iload_2
      53: ifne          65
      56: getstatic     #19                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      59: invokeinterface #20,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
      64: athrow
      65: aload_1
      66: iload_3
      67: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      70: pop
      71: return
      72: iload         5
      74: ifne          86
      77: getstatic     #19                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      80: invokeinterface #21,  1           // InterfaceMethod io/undertow/UndertowMessages.zeroNotValidHeaderTableIndex:()Lio/undertow/protocols/http2/HpackException;
      85: athrow
      86: aload_0
      87: iload         5
      89: invokespecial #22                 // Method handleIndex:(I)V
      92: goto          403
      95: iload         4
      97: bipush        64
      99: iand
     100: ifeq          201
     103: aload_0
     104: aload_1
     105: bipush        6
     107: invokespecial #23                 // Method readHeaderName:(Ljava/nio/ByteBuffer;I)Lio/undertow/util/HttpString;
     110: astore        5
     112: aload         5
     114: ifnonnull     137
     117: iload_2
     118: ifne          130
     121: getstatic     #19                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     124: invokeinterface #20,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     129: athrow
     130: aload_1
     131: iload_3
     132: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     135: pop
     136: return
     137: aload_0
     138: aload_1
     139: invokespecial #24                 // Method readHpackString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;
     142: astore        6
     144: aload         6
     146: ifnonnull     169
     149: iload_2
     150: ifne          162
     153: getstatic     #19                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     156: invokeinterface #20,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     161: athrow
     162: aload_1
     163: iload_3
     164: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     167: pop
     168: return
     169: aload_0
     170: getfield      #25                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
     173: aload         5
     175: aload         6
     177: iconst_0
     178: invokeinterface #26,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
     183: aload_0
     184: new           #10                 // class io/undertow/protocols/http2/Hpack$HeaderField
     187: dup
     188: aload         5
     190: aload         6
     192: invokespecial #27                 // Method io/undertow/protocols/http2/Hpack$HeaderField."<init>":(Lio/undertow/util/HttpString;Ljava/lang/String;)V
     195: invokespecial #28                 // Method addEntryToHeaderTable:(Lio/undertow/protocols/http2/Hpack$HeaderField;)V
     198: goto          403
     201: iload         4
     203: sipush        240
     206: iand
     207: ifne          292
     210: aload_0
     211: aload_1
     212: iconst_4
     213: invokespecial #23                 // Method readHeaderName:(Ljava/nio/ByteBuffer;I)Lio/undertow/util/HttpString;
     216: astore        5
     218: aload         5
     220: ifnonnull     243
     223: iload_2
     224: ifne          236
     227: getstatic     #19                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     230: invokeinterface #20,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     235: athrow
     236: aload_1
     237: iload_3
     238: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     241: pop
     242: return
     243: aload_0
     244: aload_1
     245: invokespecial #24                 // Method readHpackString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;
     248: astore        6
     250: aload         6
     252: ifnonnull     275
     255: iload_2
     256: ifne          268
     259: getstatic     #19                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     262: invokeinterface #20,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     267: athrow
     268: aload_1
     269: iload_3
     270: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     273: pop
     274: return
     275: aload_0
     276: getfield      #25                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
     279: aload         5
     281: aload         6
     283: iconst_0
     284: invokeinterface #26,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
     289: goto          403
     292: iload         4
     294: sipush        240
     297: iand
     298: bipush        16
     300: if_icmpne     372
     303: aload_0
     304: aload_1
     305: iconst_4
     306: invokespecial #23                 // Method readHeaderName:(Ljava/nio/ByteBuffer;I)Lio/undertow/util/HttpString;
     309: astore        5
     311: aload         5
     313: ifnonnull     323
     316: aload_1
     317: iload_3
     318: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     321: pop
     322: return
     323: aload_0
     324: aload_1
     325: invokespecial #24                 // Method readHpackString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;
     328: astore        6
     330: aload         6
     332: ifnonnull     355
     335: iload_2
     336: ifne          348
     339: getstatic     #19                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
     342: invokeinterface #20,  1           // InterfaceMethod io/undertow/UndertowMessages.hpackFailed:()Lio/undertow/protocols/http2/HpackException;
     347: athrow
     348: aload_1
     349: iload_3
     350: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     353: pop
     354: return
     355: aload_0
     356: getfield      #25                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
     359: aload         5
     361: aload         6
     363: iconst_1
     364: invokeinterface #26,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
     369: goto          403
     372: iload         4
     374: sipush        224
     377: iand
     378: bipush        32
     380: if_icmpne     393
     383: aload_0
     384: aload_1
     385: iload_3
     386: invokespecial #29                 // Method handleMaxMemorySizeChange:(Ljava/nio/ByteBuffer;I)Z
     389: ifne          403
     392: return
     393: new           #30                 // class java/lang/RuntimeException
     396: dup
     397: ldc           #31                 // String Not yet implemented
     399: invokespecial #32                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
     402: athrow
     403: goto          0
     406: return

  private boolean handleMaxMemorySizeChange(java.nio.ByteBuffer, int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_1
       1: aload_1
       2: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
       5: iconst_1
       6: isub
       7: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      10: pop
      11: aload_1
      12: iconst_5
      13: invokestatic  #18                 // Method io/undertow/protocols/http2/Hpack.decodeInteger:(Ljava/nio/ByteBuffer;I)I
      16: istore_3
      17: iload_3
      18: iconst_m1
      19: if_icmpne     30
      22: aload_1
      23: iload_2
      24: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      27: pop
      28: iconst_0
      29: ireturn
      30: aload_0
      31: iload_3
      32: putfield      #8                  // Field maxMemorySize:I
      35: aload_0
      36: getfield      #4                  // Field currentMemorySize:I
      39: aload_0
      40: getfield      #8                  // Field maxMemorySize:I
      43: if_icmple     149
      46: aload_0
      47: getfield      #3                  // Field filledTableSlots:I
      50: istore        4
      52: aload_0
      53: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      56: arraylength
      57: istore        5
      59: aload_0
      60: getfield      #4                  // Field currentMemorySize:I
      63: istore        6
      65: iload         6
      67: aload_0
      68: getfield      #8                  // Field maxMemorySize:I
      71: if_icmple     137
      74: aload_0
      75: getfield      #2                  // Field firstSlotPosition:I
      78: istore        7
      80: aload_0
      81: dup
      82: getfield      #2                  // Field firstSlotPosition:I
      85: iconst_1
      86: iadd
      87: putfield      #2                  // Field firstSlotPosition:I
      90: aload_0
      91: getfield      #2                  // Field firstSlotPosition:I
      94: iload         5
      96: if_icmpne     104
      99: aload_0
     100: iconst_0
     101: putfield      #2                  // Field firstSlotPosition:I
     104: aload_0
     105: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     108: iload         7
     110: aaload
     111: astore        8
     113: aload_0
     114: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     117: iload         7
     119: aconst_null
     120: aastore
     121: iload         6
     123: aload         8
     125: getfield      #33                 // Field io/undertow/protocols/http2/Hpack$HeaderField.size:I
     128: isub
     129: istore        6
     131: iinc          4, -1
     134: goto          65
     137: aload_0
     138: iload         4
     140: putfield      #3                  // Field filledTableSlots:I
     143: aload_0
     144: iload         6
     146: putfield      #4                  // Field currentMemorySize:I
     149: iconst_1
     150: ireturn

  private io.undertow.util.HttpString readHeaderName(java.nio.ByteBuffer, int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_1
       1: aload_1
       2: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
       5: iconst_1
       6: isub
       7: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      10: pop
      11: aload_1
      12: iload_2
      13: invokestatic  #18                 // Method io/undertow/protocols/http2/Hpack.decodeInteger:(Ljava/nio/ByteBuffer;I)I
      16: istore_3
      17: iload_3
      18: iconst_m1
      19: if_icmpne     24
      22: aconst_null
      23: areturn
      24: iload_3
      25: ifeq          34
      28: aload_0
      29: iload_3
      30: invokespecial #34                 // Method handleIndexedHeaderName:(I)Lio/undertow/util/HttpString;
      33: areturn
      34: aload_0
      35: aload_1
      36: invokespecial #24                 // Method readHpackString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;
      39: astore        4
      41: aload         4
      43: ifnonnull     48
      46: aconst_null
      47: areturn
      48: new           #35                 // class io/undertow/util/HttpString
      51: dup
      52: aload         4
      54: invokespecial #36                 // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      57: areturn

  private java.lang.String readHpackString(java.nio.ByteBuffer) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_1
       1: invokevirtual #14                 // Method java/nio/ByteBuffer.hasRemaining:()Z
       4: ifne          9
       7: aconst_null
       8: areturn
       9: aload_1
      10: aload_1
      11: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
      14: invokevirtual #37                 // Method java/nio/ByteBuffer.get:(I)B
      17: istore_2
      18: aload_1
      19: bipush        7
      21: invokestatic  #18                 // Method io/undertow/protocols/http2/Hpack.decodeInteger:(Ljava/nio/ByteBuffer;I)I
      24: istore_3
      25: aload_1
      26: invokevirtual #38                 // Method java/nio/ByteBuffer.remaining:()I
      29: iload_3
      30: if_icmpge     35
      33: aconst_null
      34: areturn
      35: iload_2
      36: sipush        128
      39: iand
      40: ifeq          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: istore        4
      50: iload         4
      52: ifeq          62
      55: aload_0
      56: iload_3
      57: aload_1
      58: invokespecial #39                 // Method readHuffmanString:(ILjava/nio/ByteBuffer;)Ljava/lang/String;
      61: areturn
      62: iconst_0
      63: istore        5
      65: iload         5
      67: iload_3
      68: if_icmpge     90
      71: aload_0
      72: getfield      #7                  // Field stringBuilder:Ljava/lang/StringBuilder;
      75: aload_1
      76: invokevirtual #16                 // Method java/nio/ByteBuffer.get:()B
      79: i2c
      80: invokevirtual #40                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      83: pop
      84: iinc          5, 1
      87: goto          65
      90: aload_0
      91: getfield      #7                  // Field stringBuilder:Ljava/lang/StringBuilder;
      94: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      97: astore        5
      99: aload_0
     100: getfield      #7                  // Field stringBuilder:Ljava/lang/StringBuilder;
     103: iconst_0
     104: invokevirtual #42                 // Method java/lang/StringBuilder.setLength:(I)V
     107: aload         5
     109: areturn

  private java.lang.String readHuffmanString(int, java.nio.ByteBuffer) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: aload_2
       1: iload_1
       2: aload_0
       3: getfield      #7                  // Field stringBuilder:Ljava/lang/StringBuilder;
       6: invokestatic  #43                 // Method io/undertow/protocols/http2/HPackHuffman.decode:(Ljava/nio/ByteBuffer;ILjava/lang/StringBuilder;)V
       9: aload_0
      10: getfield      #7                  // Field stringBuilder:Ljava/lang/StringBuilder;
      13: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      16: astore_3
      17: aload_0
      18: getfield      #7                  // Field stringBuilder:Ljava/lang/StringBuilder;
      21: iconst_0
      22: invokevirtual #42                 // Method java/lang/StringBuilder.setLength:(I)V
      25: aload_3
      26: areturn

  private io.undertow.util.HttpString handleIndexedHeaderName(int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: iload_1
       1: getstatic     #44                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
       4: if_icmpgt     16
       7: getstatic     #45                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      10: iload_1
      11: aaload
      12: getfield      #46                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      15: areturn
      16: iload_1
      17: getstatic     #44                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
      20: aload_0
      21: getfield      #3                  // Field filledTableSlots:I
      24: iadd
      25: if_icmplt     36
      28: new           #47                 // class io/undertow/protocols/http2/HpackException
      31: dup
      32: invokespecial #48                 // Method io/undertow/protocols/http2/HpackException."<init>":()V
      35: athrow
      36: aload_0
      37: iload_1
      38: getstatic     #44                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
      41: isub
      42: invokevirtual #49                 // Method getRealIndex:(I)I
      45: istore_2
      46: aload_0
      47: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      50: iload_2
      51: aaload
      52: astore_3
      53: aload_3
      54: ifnonnull     65
      57: new           #47                 // class io/undertow/protocols/http2/HpackException
      60: dup
      61: invokespecial #48                 // Method io/undertow/protocols/http2/HpackException."<init>":()V
      64: athrow
      65: aload_3
      66: getfield      #46                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      69: areturn

  private void handleIndex(int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: iload_1
       1: getstatic     #44                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
       4: if_icmpgt     15
       7: aload_0
       8: iload_1
       9: invokespecial #50                 // Method addStaticTableEntry:(I)V
      12: goto          50
      15: aload_0
      16: iload_1
      17: getstatic     #44                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE_LENGTH:I
      20: isub
      21: invokevirtual #49                 // Method getRealIndex:(I)I
      24: istore_2
      25: aload_0
      26: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      29: iload_2
      30: aaload
      31: astore_3
      32: aload_0
      33: getfield      #25                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
      36: aload_3
      37: getfield      #46                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      40: aload_3
      41: getfield      #51                 // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
      44: iconst_0
      45: invokeinterface #26,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
      50: return

  int getRealIndex(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field firstSlotPosition:I
       4: aload_0
       5: getfield      #3                  // Field filledTableSlots:I
       8: iload_1
       9: isub
      10: iadd
      11: aload_0
      12: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      15: arraylength
      16: irem
      17: ireturn

  private void addStaticTableEntry(int) throws io.undertow.protocols.http2.HpackException;
    Code:
       0: getstatic     #45                 // Field io/undertow/protocols/http2/Hpack.STATIC_TABLE:[Lio/undertow/protocols/http2/Hpack$HeaderField;
       3: iload_1
       4: aaload
       5: astore_2
       6: aload_2
       7: getfield      #51                 // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
      10: ifnonnull     21
      13: new           #47                 // class io/undertow/protocols/http2/HpackException
      16: dup
      17: invokespecial #48                 // Method io/undertow/protocols/http2/HpackException."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #25                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
      25: aload_2
      26: getfield      #46                 // Field io/undertow/protocols/http2/Hpack$HeaderField.name:Lio/undertow/util/HttpString;
      29: aload_2
      30: getfield      #51                 // Field io/undertow/protocols/http2/Hpack$HeaderField.value:Ljava/lang/String;
      33: iconst_0
      34: invokeinterface #26,  4           // InterfaceMethod io/undertow/protocols/http2/HpackDecoder$HeaderEmitter.emitHeader:(Lio/undertow/util/HttpString;Ljava/lang/String;Z)V
      39: return

  private void addEntryToHeaderTable(io.undertow.protocols.http2.Hpack$HeaderField);
    Code:
       0: aload_1
       1: getfield      #33                 // Field io/undertow/protocols/http2/Hpack$HeaderField.size:I
       4: aload_0
       5: getfield      #8                  // Field maxMemorySize:I
       8: if_icmple     74
      11: aload_0
      12: getfield      #3                  // Field filledTableSlots:I
      15: ifle          68
      18: aload_0
      19: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      22: aload_0
      23: getfield      #2                  // Field firstSlotPosition:I
      26: aconst_null
      27: aastore
      28: aload_0
      29: dup
      30: getfield      #2                  // Field firstSlotPosition:I
      33: iconst_1
      34: iadd
      35: putfield      #2                  // Field firstSlotPosition:I
      38: aload_0
      39: getfield      #2                  // Field firstSlotPosition:I
      42: aload_0
      43: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      46: arraylength
      47: if_icmpne     55
      50: aload_0
      51: iconst_0
      52: putfield      #2                  // Field firstSlotPosition:I
      55: aload_0
      56: dup
      57: getfield      #3                  // Field filledTableSlots:I
      60: iconst_1
      61: isub
      62: putfield      #3                  // Field filledTableSlots:I
      65: goto          11
      68: aload_0
      69: iconst_0
      70: putfield      #4                  // Field currentMemorySize:I
      73: return
      74: aload_0
      75: invokespecial #52                 // Method resizeIfRequired:()V
      78: aload_0
      79: getfield      #3                  // Field filledTableSlots:I
      82: iconst_1
      83: iadd
      84: istore_2
      85: aload_0
      86: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      89: arraylength
      90: istore_3
      91: aload_0
      92: getfield      #2                  // Field firstSlotPosition:I
      95: aload_0
      96: getfield      #3                  // Field filledTableSlots:I
      99: iadd
     100: iload_3
     101: irem
     102: istore        4
     104: aload_0
     105: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     108: iload         4
     110: aload_1
     111: aastore
     112: aload_0
     113: getfield      #4                  // Field currentMemorySize:I
     116: aload_1
     117: getfield      #33                 // Field io/undertow/protocols/http2/Hpack$HeaderField.size:I
     120: iadd
     121: istore        5
     123: iload         5
     125: aload_0
     126: getfield      #8                  // Field maxMemorySize:I
     129: if_icmple     194
     132: aload_0
     133: getfield      #2                  // Field firstSlotPosition:I
     136: istore        6
     138: aload_0
     139: dup
     140: getfield      #2                  // Field firstSlotPosition:I
     143: iconst_1
     144: iadd
     145: putfield      #2                  // Field firstSlotPosition:I
     148: aload_0
     149: getfield      #2                  // Field firstSlotPosition:I
     152: iload_3
     153: if_icmpne     161
     156: aload_0
     157: iconst_0
     158: putfield      #2                  // Field firstSlotPosition:I
     161: aload_0
     162: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     165: iload         6
     167: aaload
     168: astore        7
     170: aload_0
     171: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
     174: iload         6
     176: aconst_null
     177: aastore
     178: iload         5
     180: aload         7
     182: getfield      #33                 // Field io/undertow/protocols/http2/Hpack$HeaderField.size:I
     185: isub
     186: istore        5
     188: iinc          2, -1
     191: goto          123
     194: aload_0
     195: iload_2
     196: putfield      #3                  // Field filledTableSlots:I
     199: aload_0
     200: iload         5
     202: putfield      #4                  // Field currentMemorySize:I
     205: return

  private void resizeIfRequired();
    Code:
       0: aload_0
       1: getfield      #3                  // Field filledTableSlots:I
       4: aload_0
       5: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
       8: arraylength
       9: if_icmpne     71
      12: aload_0
      13: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      16: arraylength
      17: bipush        10
      19: iadd
      20: anewarray     #10                 // class io/undertow/protocols/http2/Hpack$HeaderField
      23: astore_1
      24: iconst_0
      25: istore_2
      26: iload_2
      27: aload_0
      28: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      31: arraylength
      32: if_icmpge     61
      35: aload_1
      36: iload_2
      37: aload_0
      38: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      41: aload_0
      42: getfield      #2                  // Field firstSlotPosition:I
      45: iload_2
      46: iadd
      47: aload_0
      48: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      51: arraylength
      52: irem
      53: aaload
      54: aastore
      55: iinc          2, 1
      58: goto          26
      61: aload_0
      62: iconst_0
      63: putfield      #2                  // Field firstSlotPosition:I
      66: aload_0
      67: aload_1
      68: putfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
      71: return

  public io.undertow.protocols.http2.HpackDecoder$HeaderEmitter getHeaderEmitter();
    Code:
       0: aload_0
       1: getfield      #25                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
       4: areturn

  public void setHeaderEmitter(io.undertow.protocols.http2.HpackDecoder$HeaderEmitter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field headerEmitter:Lio/undertow/protocols/http2/HpackDecoder$HeaderEmitter;
       5: return

  int getFirstSlotPosition();
    Code:
       0: aload_0
       1: getfield      #2                  // Field firstSlotPosition:I
       4: ireturn

  io.undertow.protocols.http2.Hpack$HeaderField[] getHeaderTable();
    Code:
       0: aload_0
       1: getfield      #11                 // Field headerTable:[Lio/undertow/protocols/http2/Hpack$HeaderField;
       4: areturn

  int getFilledTableSlots();
    Code:
       0: aload_0
       1: getfield      #3                  // Field filledTableSlots:I
       4: ireturn

  int getCurrentMemorySize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentMemorySize:I
       4: ireturn

  int getMaxMemorySize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxMemorySize:I
       4: ireturn
}
