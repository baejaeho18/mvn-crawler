Compiled from "PortableConcurrentDirectDeque.java"
public class io.undertow.util.PortableConcurrentDirectDeque<E> extends io.undertow.util.ConcurrentDirectDeque<E> implements java.util.Deque<E>, java.io.Serializable {
  private static final long serialVersionUID;

  private volatile transient io.undertow.util.PortableConcurrentDirectDeque$Node<E> head;

  private volatile transient io.undertow.util.PortableConcurrentDirectDeque$Node<E> tail;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<io.undertow.util.PortableConcurrentDirectDeque, io.undertow.util.PortableConcurrentDirectDeque$Node> headUpdater;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<io.undertow.util.PortableConcurrentDirectDeque, io.undertow.util.PortableConcurrentDirectDeque$Node> tailUpdater;

  private static final io.undertow.util.PortableConcurrentDirectDeque$Node<java.lang.Object> PREV_TERMINATOR;

  private static final io.undertow.util.PortableConcurrentDirectDeque$Node<java.lang.Object> NEXT_TERMINATOR;

  private static final int HOPS;

  io.undertow.util.PortableConcurrentDirectDeque$Node<E> prevTerminator();
    Code:
       0: getstatic     #1                  // Field PREV_TERMINATOR:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       3: areturn

  io.undertow.util.PortableConcurrentDirectDeque$Node<E> nextTerminator();
    Code:
       0: getstatic     #2                  // Field NEXT_TERMINATOR:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       3: areturn

  private io.undertow.util.PortableConcurrentDirectDeque$Node linkFirst(E);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method checkNotNull:(Ljava/lang/Object;)V
       4: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
       7: dup
       8: aload_1
       9: invokespecial #5                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":(Ljava/lang/Object;)V
      12: astore_2
      13: aload_0
      14: getfield      #6                  // Field head:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      17: astore_3
      18: aload_3
      19: astore        4
      21: aload         4
      23: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      26: dup
      27: astore        5
      29: ifnull        67
      32: aload         5
      34: dup
      35: astore        4
      37: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      40: dup
      41: astore        5
      43: ifnull        67
      46: aload_3
      47: aload_0
      48: getfield      #6                  // Field head:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      51: dup
      52: astore_3
      53: if_acmpeq     60
      56: aload_3
      57: goto          62
      60: aload         5
      62: astore        4
      64: goto          21
      67: aload         4
      69: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      72: aload         4
      74: if_acmpne     80
      77: goto          13
      80: aload_2
      81: aload         4
      83: invokevirtual #9                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      86: aload         4
      88: aconst_null
      89: aload_2
      90: invokevirtual #10                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      93: ifeq          21
      96: aload         4
      98: aload_3
      99: if_acmpeq     109
     102: aload_0
     103: aload_3
     104: aload_2
     105: invokespecial #11                 // Method casHead:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
     108: pop
     109: aload_2
     110: areturn

  private io.undertow.util.PortableConcurrentDirectDeque$Node linkLast(E);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method checkNotNull:(Ljava/lang/Object;)V
       4: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
       7: dup
       8: aload_1
       9: invokespecial #5                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":(Ljava/lang/Object;)V
      12: astore_2
      13: aload_0
      14: getfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      17: astore_3
      18: aload_3
      19: astore        4
      21: aload         4
      23: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      26: dup
      27: astore        5
      29: ifnull        67
      32: aload         5
      34: dup
      35: astore        4
      37: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      40: dup
      41: astore        5
      43: ifnull        67
      46: aload_3
      47: aload_0
      48: getfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      51: dup
      52: astore_3
      53: if_acmpeq     60
      56: aload_3
      57: goto          62
      60: aload         5
      62: astore        4
      64: goto          21
      67: aload         4
      69: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      72: aload         4
      74: if_acmpne     80
      77: goto          13
      80: aload_2
      81: aload         4
      83: invokevirtual #13                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      86: aload         4
      88: aconst_null
      89: aload_2
      90: invokevirtual #14                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      93: ifeq          21
      96: aload         4
      98: aload_3
      99: if_acmpeq     109
     102: aload_0
     103: aload_3
     104: aload_2
     105: invokespecial #15                 // Method casTail:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
     108: pop
     109: aload_2
     110: areturn

  void unlink(io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_1
       1: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_2
       5: aload_1
       6: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       9: astore_3
      10: aload_2
      11: ifnonnull     23
      14: aload_0
      15: aload_1
      16: aload_3
      17: invokespecial #16                 // Method unlinkFirst:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      20: goto          328
      23: aload_3
      24: ifnonnull     36
      27: aload_0
      28: aload_1
      29: aload_2
      30: invokespecial #17                 // Method unlinkLast:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      33: goto          328
      36: iconst_1
      37: istore        8
      39: aload_2
      40: astore        9
      42: aload         9
      44: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      47: ifnull        60
      50: aload         9
      52: astore        4
      54: iconst_0
      55: istore        6
      57: goto          111
      60: aload         9
      62: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      65: astore        10
      67: aload         10
      69: ifnonnull     93
      72: aload         9
      74: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      77: aload         9
      79: if_acmpne     83
      82: return
      83: aload         9
      85: astore        4
      87: iconst_1
      88: istore        6
      90: goto          111
      93: aload         9
      95: aload         10
      97: if_acmpne     101
     100: return
     101: aload         10
     103: astore        9
     105: iinc          8, 1
     108: goto          42
     111: aload_3
     112: astore        9
     114: aload         9
     116: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
     119: ifnull        132
     122: aload         9
     124: astore        5
     126: iconst_0
     127: istore        7
     129: goto          183
     132: aload         9
     134: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     137: astore        10
     139: aload         10
     141: ifnonnull     165
     144: aload         9
     146: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     149: aload         9
     151: if_acmpne     155
     154: return
     155: aload         9
     157: astore        5
     159: iconst_1
     160: istore        7
     162: goto          183
     165: aload         9
     167: aload         10
     169: if_acmpne     173
     172: return
     173: aload         10
     175: astore        9
     177: iinc          8, 1
     180: goto          114
     183: iload         8
     185: iconst_2
     186: if_icmpge     198
     189: iload         6
     191: iload         7
     193: ior
     194: ifeq          198
     197: return
     198: aload_0
     199: aload         4
     201: invokespecial #20                 // Method skipDeletedSuccessors:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
     204: aload_0
     205: aload         5
     207: invokespecial #21                 // Method skipDeletedPredecessors:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
     210: iload         6
     212: iload         7
     214: ior
     215: ifeq          328
     218: aload         4
     220: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     223: aload         5
     225: if_acmpne     328
     228: aload         5
     230: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     233: aload         4
     235: if_acmpne     328
     238: iload         6
     240: ifeq          254
     243: aload         4
     245: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     248: ifnonnull     328
     251: goto          262
     254: aload         4
     256: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
     259: ifnull        328
     262: iload         7
     264: ifeq          278
     267: aload         5
     269: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     272: ifnonnull     328
     275: goto          286
     278: aload         5
     280: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
     283: ifnull        328
     286: aload_0
     287: invokespecial #22                 // Method updateHead:()V
     290: aload_0
     291: invokespecial #23                 // Method updateTail:()V
     294: aload_1
     295: iload         6
     297: ifeq          307
     300: aload_0
     301: invokevirtual #24                 // Method prevTerminator:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     304: goto          308
     307: aload_1
     308: invokevirtual #13                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
     311: aload_1
     312: iload         7
     314: ifeq          324
     317: aload_0
     318: invokevirtual #25                 // Method nextTerminator:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     321: goto          325
     324: aload_1
     325: invokevirtual #9                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
     328: return

  private void unlinkFirst(io.undertow.util.PortableConcurrentDirectDeque$Node<E>, io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aconst_null
       1: astore_3
       2: aload_2
       3: astore        4
       5: aload         4
       7: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      10: ifnonnull     24
      13: aload         4
      15: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      18: dup
      19: astore        5
      21: ifnonnull     108
      24: aload_3
      25: ifnull        107
      28: aload         4
      30: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      33: aload         4
      35: if_acmpeq     107
      38: aload_1
      39: aload_2
      40: aload         4
      42: invokevirtual #14                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      45: ifeq          107
      48: aload_0
      49: aload         4
      51: invokespecial #21                 // Method skipDeletedPredecessors:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      54: aload_1
      55: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      58: ifnonnull     107
      61: aload         4
      63: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      66: ifnull        77
      69: aload         4
      71: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      74: ifnull        107
      77: aload         4
      79: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      82: aload_1
      83: if_acmpne     107
      86: aload_0
      87: invokespecial #22                 // Method updateHead:()V
      90: aload_0
      91: invokespecial #23                 // Method updateTail:()V
      94: aload_3
      95: aload_3
      96: invokevirtual #9                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      99: aload_3
     100: aload_0
     101: invokevirtual #24                 // Method prevTerminator:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     104: invokevirtual #13                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
     107: return
     108: aload         4
     110: aload         5
     112: if_acmpne     116
     115: return
     116: aload         4
     118: astore_3
     119: aload         5
     121: astore        4
     123: goto          5

  private void unlinkLast(io.undertow.util.PortableConcurrentDirectDeque$Node<E>, io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aconst_null
       1: astore_3
       2: aload_2
       3: astore        4
       5: aload         4
       7: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      10: ifnonnull     24
      13: aload         4
      15: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      18: dup
      19: astore        5
      21: ifnonnull     108
      24: aload_3
      25: ifnull        107
      28: aload         4
      30: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      33: aload         4
      35: if_acmpeq     107
      38: aload_1
      39: aload_2
      40: aload         4
      42: invokevirtual #10                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      45: ifeq          107
      48: aload_0
      49: aload         4
      51: invokespecial #20                 // Method skipDeletedSuccessors:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      54: aload_1
      55: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      58: ifnonnull     107
      61: aload         4
      63: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      66: ifnull        77
      69: aload         4
      71: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      74: ifnull        107
      77: aload         4
      79: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      82: aload_1
      83: if_acmpne     107
      86: aload_0
      87: invokespecial #22                 // Method updateHead:()V
      90: aload_0
      91: invokespecial #23                 // Method updateTail:()V
      94: aload_3
      95: aload_3
      96: invokevirtual #13                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      99: aload_3
     100: aload_0
     101: invokevirtual #25                 // Method nextTerminator:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     104: invokevirtual #9                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
     107: return
     108: aload         4
     110: aload         5
     112: if_acmpne     116
     115: return
     116: aload         4
     118: astore_3
     119: aload         5
     121: astore        4
     123: goto          5

  private void updateHead();
    Code:
       0: aload_0
       1: getfield      #6                  // Field head:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: dup
       5: astore_1
       6: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
       9: ifnonnull     67
      12: aload_1
      13: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      16: dup
      17: astore_2
      18: ifnull        67
      21: aload_2
      22: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      25: dup
      26: astore_3
      27: ifnull        41
      30: aload_3
      31: dup
      32: astore_2
      33: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      36: dup
      37: astore_3
      38: ifnonnull     51
      41: aload_0
      42: aload_1
      43: aload_2
      44: invokespecial #11                 // Method casHead:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      47: ifeq          0
      50: return
      51: aload_1
      52: aload_0
      53: getfield      #6                  // Field head:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      56: if_acmpeq     62
      59: goto          0
      62: aload_3
      63: astore_2
      64: goto          21
      67: return

  private void updateTail();
    Code:
       0: aload_0
       1: getfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: dup
       5: astore_1
       6: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
       9: ifnonnull     67
      12: aload_1
      13: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      16: dup
      17: astore_2
      18: ifnull        67
      21: aload_2
      22: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      25: dup
      26: astore_3
      27: ifnull        41
      30: aload_3
      31: dup
      32: astore_2
      33: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      36: dup
      37: astore_3
      38: ifnonnull     51
      41: aload_0
      42: aload_1
      43: aload_2
      44: invokespecial #15                 // Method casTail:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      47: ifeq          0
      50: return
      51: aload_1
      52: aload_0
      53: getfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      56: if_acmpeq     62
      59: goto          0
      62: aload_3
      63: astore_2
      64: goto          21
      67: return

  private void skipDeletedPredecessors(io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_1
       1: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_2
       5: aload_2
       6: astore_3
       7: aload_3
       8: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      11: ifnull        17
      14: goto          54
      17: aload_3
      18: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      21: astore        4
      23: aload         4
      25: ifnonnull     39
      28: aload_3
      29: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      32: aload_3
      33: if_acmpne     54
      36: goto          69
      39: aload_3
      40: aload         4
      42: if_acmpne     48
      45: goto          69
      48: aload         4
      50: astore_3
      51: goto          7
      54: aload_2
      55: aload_3
      56: if_acmpeq     68
      59: aload_1
      60: aload_2
      61: aload_3
      62: invokevirtual #10                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      65: ifeq          69
      68: return
      69: aload_1
      70: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      73: ifnonnull     0
      76: aload_1
      77: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      80: ifnull        0
      83: return

  private void skipDeletedSuccessors(io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_1
       1: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_2
       5: aload_2
       6: astore_3
       7: aload_3
       8: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      11: ifnull        17
      14: goto          54
      17: aload_3
      18: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      21: astore        4
      23: aload         4
      25: ifnonnull     39
      28: aload_3
      29: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      32: aload_3
      33: if_acmpne     54
      36: goto          69
      39: aload_3
      40: aload         4
      42: if_acmpne     48
      45: goto          69
      48: aload         4
      50: astore_3
      51: goto          7
      54: aload_2
      55: aload_3
      56: if_acmpeq     68
      59: aload_1
      60: aload_2
      61: aload_3
      62: invokevirtual #14                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      65: ifeq          69
      68: return
      69: aload_1
      70: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      73: ifnonnull     0
      76: aload_1
      77: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      80: ifnull        0
      83: return

  final io.undertow.util.PortableConcurrentDirectDeque$Node<E> succ(io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_1
       1: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_2
       5: aload_1
       6: aload_2
       7: if_acmpne     17
      10: aload_0
      11: invokevirtual #26                 // Method first:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      14: goto          18
      17: aload_2
      18: areturn

  final io.undertow.util.PortableConcurrentDirectDeque$Node<E> pred(io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_1
       1: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_2
       5: aload_1
       6: aload_2
       7: if_acmpne     17
      10: aload_0
      11: invokevirtual #27                 // Method last:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      14: goto          18
      17: aload_2
      18: areturn

  io.undertow.util.PortableConcurrentDirectDeque$Node<E> first();
    Code:
       0: aload_0
       1: getfield      #6                  // Field head:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_1
       5: aload_1
       6: astore_2
       7: aload_2
       8: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      11: dup
      12: astore_3
      13: ifnull        46
      16: aload_3
      17: dup
      18: astore_2
      19: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      22: dup
      23: astore_3
      24: ifnull        46
      27: aload_1
      28: aload_0
      29: getfield      #6                  // Field head:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      32: dup
      33: astore_1
      34: if_acmpeq     41
      37: aload_1
      38: goto          42
      41: aload_3
      42: astore_2
      43: goto          7
      46: aload_2
      47: aload_1
      48: if_acmpeq     60
      51: aload_0
      52: aload_1
      53: aload_2
      54: invokespecial #11                 // Method casHead:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      57: ifeq          0
      60: aload_2
      61: areturn

  io.undertow.util.PortableConcurrentDirectDeque$Node<E> last();
    Code:
       0: aload_0
       1: getfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_1
       5: aload_1
       6: astore_2
       7: aload_2
       8: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      11: dup
      12: astore_3
      13: ifnull        46
      16: aload_3
      17: dup
      18: astore_2
      19: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      22: dup
      23: astore_3
      24: ifnull        46
      27: aload_1
      28: aload_0
      29: getfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      32: dup
      33: astore_1
      34: if_acmpeq     41
      37: aload_1
      38: goto          42
      41: aload_3
      42: astore_2
      43: goto          7
      46: aload_2
      47: aload_1
      48: if_acmpeq     60
      51: aload_0
      52: aload_1
      53: aload_2
      54: invokespecial #15                 // Method casTail:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
      57: ifeq          0
      60: aload_2
      61: areturn

  private static void checkNotNull(java.lang.Object);
    Code:
       0: aload_0
       1: ifnonnull     12
       4: new           #28                 // class java/lang/NullPointerException
       7: dup
       8: invokespecial #29                 // Method java/lang/NullPointerException."<init>":()V
      11: athrow
      12: return

  private E screenNullResult(E);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #30                 // class java/util/NoSuchElementException
       7: dup
       8: invokespecial #31                 // Method java/util/NoSuchElementException."<init>":()V
      11: athrow
      12: aload_1
      13: areturn

  private java.util.ArrayList<E> toArrayList();
    Code:
       0: new           #32                 // class java/util/ArrayList
       3: dup
       4: invokespecial #33                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #26                 // Method first:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      12: astore_2
      13: aload_2
      14: ifnull        41
      17: aload_2
      18: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      21: astore_3
      22: aload_3
      23: ifnull        32
      26: aload_1
      27: aload_3
      28: invokevirtual #34                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      31: pop
      32: aload_0
      33: aload_2
      34: invokevirtual #35                 // Method succ:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      37: astore_2
      38: goto          13
      41: aload_1
      42: areturn

  public io.undertow.util.PortableConcurrentDirectDeque();
    Code:
       0: aload_0
       1: invokespecial #36                 // Method io/undertow/util/ConcurrentDirectDeque."<init>":()V
       4: aload_0
       5: aload_0
       6: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
       9: dup
      10: aconst_null
      11: invokespecial #5                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":(Ljava/lang/Object;)V
      14: dup_x1
      15: putfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      18: putfield      #6                  // Field head:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      21: return

  public io.undertow.util.PortableConcurrentDirectDeque(java.util.Collection<? extends E>);
    Code:
       0: aload_0
       1: invokespecial #36                 // Method io/undertow/util/ConcurrentDirectDeque."<init>":()V
       4: aconst_null
       5: astore_2
       6: aconst_null
       7: astore_3
       8: aload_1
       9: invokeinterface #37,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore        4
      16: aload         4
      18: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          81
      26: aload         4
      28: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: astore        5
      35: aload         5
      37: invokestatic  #3                  // Method checkNotNull:(Ljava/lang/Object;)V
      40: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      43: dup
      44: aload         5
      46: invokespecial #5                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":(Ljava/lang/Object;)V
      49: astore        6
      51: aload_2
      52: ifnonnull     63
      55: aload         6
      57: dup
      58: astore_3
      59: astore_2
      60: goto          78
      63: aload_3
      64: aload         6
      66: invokevirtual #9                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      69: aload         6
      71: aload_3
      72: invokevirtual #13                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      75: aload         6
      77: astore_3
      78: goto          16
      81: aload_0
      82: aload_2
      83: aload_3
      84: invokespecial #40                 // Method initHeadTail:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      87: return

  private void initHeadTail(io.undertow.util.PortableConcurrentDirectDeque$Node<E>, io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_1
       1: aload_2
       2: if_acmpne     44
       5: aload_1
       6: ifnonnull     23
       9: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      12: dup
      13: aconst_null
      14: invokespecial #5                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":(Ljava/lang/Object;)V
      17: dup
      18: astore_2
      19: astore_1
      20: goto          44
      23: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      26: dup
      27: aconst_null
      28: invokespecial #5                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":(Ljava/lang/Object;)V
      31: astore_3
      32: aload_2
      33: aload_3
      34: invokevirtual #9                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      37: aload_3
      38: aload_2
      39: invokevirtual #13                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      42: aload_3
      43: astore_2
      44: aload_0
      45: aload_1
      46: putfield      #6                  // Field head:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      49: aload_0
      50: aload_2
      51: putfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      54: return

  public void addFirst(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #41                 // Method linkFirst:(Ljava/lang/Object;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       5: pop
       6: return

  public void addLast(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #42                 // Method linkLast:(Ljava/lang/Object;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       5: pop
       6: return

  public boolean offerFirst(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #41                 // Method linkFirst:(Ljava/lang/Object;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       5: pop
       6: iconst_1
       7: ireturn

  public java.lang.Object offerFirstAndReturnToken(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #41                 // Method linkFirst:(Ljava/lang/Object;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       5: areturn

  public java.lang.Object offerLastAndReturnToken(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #42                 // Method linkLast:(Ljava/lang/Object;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       5: areturn

  public void removeToken(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
       4: ifne          15
       7: new           #43                 // class java/lang/IllegalArgumentException
      10: dup
      11: invokespecial #44                 // Method java/lang/IllegalArgumentException."<init>":()V
      14: athrow
      15: aload_1
      16: checkcast     #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      19: checkcast     #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      22: astore_2
      23: aload_2
      24: aload_2
      25: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      28: aconst_null
      29: invokevirtual #45                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casItem:(Ljava/lang/Object;Ljava/lang/Object;)Z
      32: ifne          38
      35: goto          23
      38: aload_0
      39: aload_2
      40: invokevirtual #46                 // Method unlink:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      43: return

  public boolean offerLast(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #42                 // Method linkLast:(Ljava/lang/Object;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       5: pop
       6: iconst_1
       7: ireturn

  public E peekFirst();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method first:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_1
       5: aload_1
       6: ifnull        29
       9: aload_1
      10: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      13: astore_2
      14: aload_2
      15: ifnull        20
      18: aload_2
      19: areturn
      20: aload_0
      21: aload_1
      22: invokevirtual #35                 // Method succ:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      25: astore_1
      26: goto          5
      29: aconst_null
      30: areturn

  public E peekLast();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method last:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_1
       5: aload_1
       6: ifnull        29
       9: aload_1
      10: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      13: astore_2
      14: aload_2
      15: ifnull        20
      18: aload_2
      19: areturn
      20: aload_0
      21: aload_1
      22: invokevirtual #47                 // Method pred:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      25: astore_1
      26: goto          5
      29: aconst_null
      30: areturn

  public E getFirst();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #48                 // Method peekFirst:()Ljava/lang/Object;
       5: invokespecial #49                 // Method screenNullResult:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public E getLast();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #50                 // Method peekLast:()Ljava/lang/Object;
       5: invokespecial #49                 // Method screenNullResult:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public E pollFirst();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method first:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_1
       5: aload_1
       6: ifnull        43
       9: aload_1
      10: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      13: astore_2
      14: aload_2
      15: ifnull        34
      18: aload_1
      19: aload_2
      20: aconst_null
      21: invokevirtual #45                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casItem:(Ljava/lang/Object;Ljava/lang/Object;)Z
      24: ifeq          34
      27: aload_0
      28: aload_1
      29: invokevirtual #46                 // Method unlink:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      32: aload_2
      33: areturn
      34: aload_0
      35: aload_1
      36: invokevirtual #35                 // Method succ:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      39: astore_1
      40: goto          5
      43: aconst_null
      44: areturn

  public E pollLast();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method last:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       4: astore_1
       5: aload_1
       6: ifnull        43
       9: aload_1
      10: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      13: astore_2
      14: aload_2
      15: ifnull        34
      18: aload_1
      19: aload_2
      20: aconst_null
      21: invokevirtual #45                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casItem:(Ljava/lang/Object;Ljava/lang/Object;)Z
      24: ifeq          34
      27: aload_0
      28: aload_1
      29: invokevirtual #46                 // Method unlink:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      32: aload_2
      33: areturn
      34: aload_0
      35: aload_1
      36: invokevirtual #47                 // Method pred:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      39: astore_1
      40: goto          5
      43: aconst_null
      44: areturn

  public E removeFirst();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #51                 // Method pollFirst:()Ljava/lang/Object;
       5: invokespecial #49                 // Method screenNullResult:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public E removeLast();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #52                 // Method pollLast:()Ljava/lang/Object;
       5: invokespecial #49                 // Method screenNullResult:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public boolean offer(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #53                 // Method offerLast:(Ljava/lang/Object;)Z
       5: ireturn

  public boolean add(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #53                 // Method offerLast:(Ljava/lang/Object;)Z
       5: ireturn

  public E poll();
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method pollFirst:()Ljava/lang/Object;
       4: areturn

  public E remove();
    Code:
       0: aload_0
       1: invokevirtual #54                 // Method removeFirst:()Ljava/lang/Object;
       4: areturn

  public E peek();
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method peekFirst:()Ljava/lang/Object;
       4: areturn

  public E element();
    Code:
       0: aload_0
       1: invokevirtual #55                 // Method getFirst:()Ljava/lang/Object;
       4: areturn

  public void push(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #56                 // Method addFirst:(Ljava/lang/Object;)V
       5: return

  public E pop();
    Code:
       0: aload_0
       1: invokevirtual #54                 // Method removeFirst:()Ljava/lang/Object;
       4: areturn

  public boolean removeFirstOccurrence(java.lang.Object);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method checkNotNull:(Ljava/lang/Object;)V
       4: aload_0
       5: invokevirtual #26                 // Method first:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       8: astore_2
       9: aload_2
      10: ifnull        55
      13: aload_2
      14: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      17: astore_3
      18: aload_3
      19: ifnull        46
      22: aload_1
      23: aload_3
      24: invokevirtual #57                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      27: ifeq          46
      30: aload_2
      31: aload_3
      32: aconst_null
      33: invokevirtual #45                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casItem:(Ljava/lang/Object;Ljava/lang/Object;)Z
      36: ifeq          46
      39: aload_0
      40: aload_2
      41: invokevirtual #46                 // Method unlink:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      44: iconst_1
      45: ireturn
      46: aload_0
      47: aload_2
      48: invokevirtual #35                 // Method succ:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      51: astore_2
      52: goto          9
      55: iconst_0
      56: ireturn

  public boolean removeLastOccurrence(java.lang.Object);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method checkNotNull:(Ljava/lang/Object;)V
       4: aload_0
       5: invokevirtual #27                 // Method last:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       8: astore_2
       9: aload_2
      10: ifnull        55
      13: aload_2
      14: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      17: astore_3
      18: aload_3
      19: ifnull        46
      22: aload_1
      23: aload_3
      24: invokevirtual #57                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      27: ifeq          46
      30: aload_2
      31: aload_3
      32: aconst_null
      33: invokevirtual #45                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casItem:(Ljava/lang/Object;Ljava/lang/Object;)Z
      36: ifeq          46
      39: aload_0
      40: aload_2
      41: invokevirtual #46                 // Method unlink:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      44: iconst_1
      45: ireturn
      46: aload_0
      47: aload_2
      48: invokevirtual #47                 // Method pred:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      51: astore_2
      52: goto          9
      55: iconst_0
      56: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: invokevirtual #26                 // Method first:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      10: astore_2
      11: aload_2
      12: ifnull        43
      15: aload_2
      16: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      19: astore_3
      20: aload_3
      21: ifnull        34
      24: aload_1
      25: aload_3
      26: invokevirtual #57                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      29: ifeq          34
      32: iconst_1
      33: ireturn
      34: aload_0
      35: aload_2
      36: invokevirtual #35                 // Method succ:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      39: astore_2
      40: goto          11
      43: iconst_0
      44: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method peekFirst:()Ljava/lang/Object;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int size();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: invokevirtual #26                 // Method first:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       6: astore_2
       7: aload_2
       8: ifnull        39
      11: aload_2
      12: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      15: ifnull        30
      18: iinc          1, 1
      21: iload_1
      22: ldc           #59                 // int 2147483647
      24: if_icmpne     30
      27: goto          39
      30: aload_0
      31: aload_2
      32: invokevirtual #35                 // Method succ:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      35: astore_2
      36: goto          7
      39: iload_1
      40: ireturn

  public boolean remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #60                 // Method removeFirstOccurrence:(Ljava/lang/Object;)Z
       5: ireturn

  public boolean addAll(java.util.Collection<? extends E>);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     13
       5: new           #43                 // class java/lang/IllegalArgumentException
       8: dup
       9: invokespecial #44                 // Method java/lang/IllegalArgumentException."<init>":()V
      12: athrow
      13: aconst_null
      14: astore_2
      15: aconst_null
      16: astore_3
      17: aload_1
      18: invokeinterface #37,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      23: astore        4
      25: aload         4
      27: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          90
      35: aload         4
      37: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: astore        5
      44: aload         5
      46: invokestatic  #3                  // Method checkNotNull:(Ljava/lang/Object;)V
      49: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      52: dup
      53: aload         5
      55: invokespecial #5                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":(Ljava/lang/Object;)V
      58: astore        6
      60: aload_2
      61: ifnonnull     72
      64: aload         6
      66: dup
      67: astore_3
      68: astore_2
      69: goto          87
      72: aload_3
      73: aload         6
      75: invokevirtual #9                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      78: aload         6
      80: aload_3
      81: invokevirtual #13                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      84: aload         6
      86: astore_3
      87: goto          25
      90: aload_2
      91: ifnonnull     96
      94: iconst_0
      95: ireturn
      96: aload_0
      97: getfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     100: astore        4
     102: aload         4
     104: astore        5
     106: aload         5
     108: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     111: dup
     112: astore        6
     114: ifnull        155
     117: aload         6
     119: dup
     120: astore        5
     122: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     125: dup
     126: astore        6
     128: ifnull        155
     131: aload         4
     133: aload_0
     134: getfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     137: dup
     138: astore        4
     140: if_acmpeq     148
     143: aload         4
     145: goto          150
     148: aload         6
     150: astore        5
     152: goto          106
     155: aload         5
     157: getfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     160: aload         5
     162: if_acmpne     168
     165: goto          96
     168: aload_2
     169: aload         5
     171: invokevirtual #13                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
     174: aload         5
     176: aconst_null
     177: aload_2
     178: invokevirtual #14                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.casNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
     181: ifeq          106
     184: aload_0
     185: aload         4
     187: aload_3
     188: invokespecial #15                 // Method casTail:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
     191: ifne          215
     194: aload_0
     195: getfield      #12                 // Field tail:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     198: astore        4
     200: aload_3
     201: getfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
     204: ifnonnull     215
     207: aload_0
     208: aload         4
     210: aload_3
     211: invokespecial #15                 // Method casTail:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Z
     214: pop
     215: iconst_1
     216: ireturn

  public void clear();
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method pollFirst:()Ljava/lang/Object;
       4: ifnull        10
       7: goto          0
      10: return

  public java.lang.Object[] toArray();
    Code:
       0: aload_0
       1: invokespecial #61                 // Method toArrayList:()Ljava/util/ArrayList;
       4: invokevirtual #62                 // Method java/util/ArrayList.toArray:()[Ljava/lang/Object;
       7: areturn

  public <T> T[] toArray(T[]);
    Code:
       0: aload_0
       1: invokespecial #61                 // Method toArrayList:()Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #63                 // Method java/util/ArrayList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
       8: areturn

  public java.util.Iterator<E> iterator();
    Code:
       0: new           #64                 // class io/undertow/util/PortableConcurrentDirectDeque$Itr
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #65                 // Method io/undertow/util/PortableConcurrentDirectDeque$Itr."<init>":(Lio/undertow/util/PortableConcurrentDirectDeque;Lio/undertow/util/PortableConcurrentDirectDeque$1;)V
       9: areturn

  public java.util.Iterator<E> descendingIterator();
    Code:
       0: new           #66                 // class io/undertow/util/PortableConcurrentDirectDeque$DescendingItr
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #67                 // Method io/undertow/util/PortableConcurrentDirectDeque$DescendingItr."<init>":(Lio/undertow/util/PortableConcurrentDirectDeque;Lio/undertow/util/PortableConcurrentDirectDeque$1;)V
       9: areturn

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #68                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
       4: aload_0
       5: invokevirtual #26                 // Method first:()Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       8: astore_2
       9: aload_2
      10: ifnull        36
      13: aload_2
      14: getfield      #18                 // Field io/undertow/util/PortableConcurrentDirectDeque$Node.item:Ljava/lang/Object;
      17: astore_3
      18: aload_3
      19: ifnull        27
      22: aload_1
      23: aload_3
      24: invokevirtual #69                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
      27: aload_0
      28: aload_2
      29: invokevirtual #35                 // Method succ:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      32: astore_2
      33: goto          9
      36: aload_1
      37: aconst_null
      38: invokevirtual #69                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
      41: return

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #70                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aconst_null
       5: astore_2
       6: aconst_null
       7: astore_3
       8: aload_1
       9: invokevirtual #71                 // Method java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
      12: dup
      13: astore        4
      15: ifnull        59
      18: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      21: dup
      22: aload         4
      24: invokespecial #5                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":(Ljava/lang/Object;)V
      27: astore        5
      29: aload_2
      30: ifnonnull     41
      33: aload         5
      35: dup
      36: astore_3
      37: astore_2
      38: goto          56
      41: aload_3
      42: aload         5
      44: invokevirtual #9                  // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetNext:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      47: aload         5
      49: aload_3
      50: invokevirtual #13                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node.lazySetPrev:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      53: aload         5
      55: astore_3
      56: goto          8
      59: aload_0
      60: aload_2
      61: aload_3
      62: invokespecial #40                 // Method initHeadTail:(Lio/undertow/util/PortableConcurrentDirectDeque$Node;Lio/undertow/util/PortableConcurrentDirectDeque$Node;)V
      65: return

  private boolean casHead(io.undertow.util.PortableConcurrentDirectDeque$Node<E>, io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: getstatic     #72                 // Field headUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  private boolean casTail(io.undertow.util.PortableConcurrentDirectDeque$Node<E>, io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: getstatic     #74                 // Field tailUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  static {};
    Code:
       0: ldc           #19                 // class io/undertow/util/PortableConcurrentDirectDeque
       2: ldc           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
       4: ldc           #75                 // String head
       6: invokestatic  #76                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #72                 // Field headUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #19                 // class io/undertow/util/PortableConcurrentDirectDeque
      14: ldc           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      16: ldc           #77                 // String tail
      18: invokestatic  #76                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: putstatic     #74                 // Field tailUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      27: dup
      28: invokespecial #78                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":()V
      31: putstatic     #1                  // Field PREV_TERMINATOR:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      34: getstatic     #1                  // Field PREV_TERMINATOR:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      37: getstatic     #1                  // Field PREV_TERMINATOR:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      40: putfield      #8                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      43: new           #4                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      46: dup
      47: invokespecial #78                 // Method io/undertow/util/PortableConcurrentDirectDeque$Node."<init>":()V
      50: putstatic     #2                  // Field NEXT_TERMINATOR:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      53: getstatic     #2                  // Field NEXT_TERMINATOR:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      56: getstatic     #2                  // Field NEXT_TERMINATOR:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      59: putfield      #7                  // Field io/undertow/util/PortableConcurrentDirectDeque$Node.prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
      62: return
}
