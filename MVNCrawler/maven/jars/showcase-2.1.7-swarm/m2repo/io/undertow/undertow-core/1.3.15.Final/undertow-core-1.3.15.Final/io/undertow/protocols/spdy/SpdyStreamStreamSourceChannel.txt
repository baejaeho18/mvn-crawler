Compiled from "SpdyStreamStreamSourceChannel.java"
public class io.undertow.protocols.spdy.SpdyStreamStreamSourceChannel extends io.undertow.protocols.spdy.SpdyStreamSourceChannel {
  private boolean rst;

  private final io.undertow.util.HeaderMap headers;

  private final int streamId;

  private io.undertow.util.HeaderMap newHeaders;

  private int flowControlWindow;

  private org.xnio.ChannelListener<io.undertow.protocols.spdy.SpdyStreamStreamSourceChannel> completionListener;

  io.undertow.protocols.spdy.SpdyStreamStreamSourceChannel(io.undertow.protocols.spdy.SpdyChannel, io.undertow.connector.PooledByteBuffer, long, io.undertow.util.HeaderMap, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lload_3
       4: invokespecial #1                  // Method io/undertow/protocols/spdy/SpdyStreamSourceChannel."<init>":(Lio/undertow/protocols/spdy/SpdyChannel;Lio/undertow/connector/PooledByteBuffer;J)V
       7: aload_0
       8: iconst_0
       9: putfield      #2                  // Field rst:Z
      12: aload_0
      13: aconst_null
      14: putfield      #3                  // Field newHeaders:Lio/undertow/util/HeaderMap;
      17: aload_0
      18: aload         5
      20: putfield      #4                  // Field headers:Lio/undertow/util/HeaderMap;
      23: aload_0
      24: iload         6
      26: putfield      #5                  // Field streamId:I
      29: aload_0
      30: aload_1
      31: invokevirtual #6                  // Method io/undertow/protocols/spdy/SpdyChannel.getInitialWindowSize:()I
      34: putfield      #7                  // Field flowControlWindow:I
      37: return

  public int read(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #8                  // Method handleNewHeaders:()V
       4: aload_0
       5: aload_1
       6: invokespecial #9                  // Method io/undertow/protocols/spdy/SpdyStreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
       9: istore_2
      10: aload_0
      11: iload_2
      12: invokespecial #10                 // Method updateFlowControlWindow:(I)V
      15: iload_2
      16: ireturn

  public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #8                  // Method handleNewHeaders:()V
       4: aload_0
       5: aload_1
       6: iload_2
       7: iload_3
       8: invokespecial #11                 // Method io/undertow/protocols/spdy/SpdyStreamSourceChannel.read:([Ljava/nio/ByteBuffer;II)J
      11: lstore        4
      13: aload_0
      14: lload         4
      16: l2i
      17: invokespecial #10                 // Method updateFlowControlWindow:(I)V
      20: lload         4
      22: lreturn

  public long read(java.nio.ByteBuffer[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #8                  // Method handleNewHeaders:()V
       4: aload_0
       5: aload_1
       6: invokespecial #12                 // Method io/undertow/protocols/spdy/SpdyStreamSourceChannel.read:([Ljava/nio/ByteBuffer;)J
       9: lstore_2
      10: aload_0
      11: lload_2
      12: l2i
      13: invokespecial #10                 // Method updateFlowControlWindow:(I)V
      16: lload_2
      17: lreturn

  public long transferTo(long, java.nio.ByteBuffer, org.xnio.channels.StreamSinkChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #8                  // Method handleNewHeaders:()V
       4: aload_0
       5: lload_1
       6: aload_3
       7: aload         4
       9: invokespecial #13                 // Method io/undertow/protocols/spdy/SpdyStreamSourceChannel.transferTo:(JLjava/nio/ByteBuffer;Lorg/xnio/channels/StreamSinkChannel;)J
      12: lstore        5
      14: aload_0
      15: lload         5
      17: l2i
      18: aload_3
      19: invokevirtual #14                 // Method java/nio/ByteBuffer.remaining:()I
      22: iadd
      23: invokespecial #10                 // Method updateFlowControlWindow:(I)V
      26: lload         5
      28: lreturn

  public long transferTo(long, long, java.nio.channels.FileChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #8                  // Method handleNewHeaders:()V
       4: aload_0
       5: lload_1
       6: lload_3
       7: aload         5
       9: invokespecial #15                 // Method io/undertow/protocols/spdy/SpdyStreamSourceChannel.transferTo:(JJLjava/nio/channels/FileChannel;)J
      12: lstore        6
      14: aload_0
      15: lload         6
      17: l2i
      18: invokespecial #10                 // Method updateFlowControlWindow:(I)V
      21: lload         6
      23: lreturn

  protected void handleHeaderData(io.undertow.server.protocol.framed.FrameHeaderData);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #16                 // Method io/undertow/protocols/spdy/SpdyStreamSourceChannel.handleHeaderData:(Lio/undertow/server/protocol/framed/FrameHeaderData;)V
       5: aload_1
       6: checkcast     #17                 // class io/undertow/protocols/spdy/SpdyChannel$SpdyFrameParser
       9: astore_2
      10: aload_2
      11: getfield      #18                 // Field io/undertow/protocols/spdy/SpdyChannel$SpdyFrameParser.parser:Lio/undertow/protocols/spdy/SpdyPushBackParser;
      14: instanceof    #19                 // class io/undertow/protocols/spdy/SpdyHeadersParser
      17: ifeq          34
      20: aload_0
      21: aload_2
      22: getfield      #18                 // Field io/undertow/protocols/spdy/SpdyChannel$SpdyFrameParser.parser:Lio/undertow/protocols/spdy/SpdyPushBackParser;
      25: checkcast     #19                 // class io/undertow/protocols/spdy/SpdyHeadersParser
      28: invokevirtual #20                 // Method io/undertow/protocols/spdy/SpdyHeadersParser.getHeaderMap:()Lio/undertow/util/HeaderMap;
      31: invokevirtual #21                 // Method addNewHeaders:(Lio/undertow/util/HeaderMap;)V
      34: return

  private synchronized void handleNewHeaders();
    Code:
       0: aload_0
       1: getfield      #3                  // Field newHeaders:Lio/undertow/util/HeaderMap;
       4: ifnull        55
       7: aload_0
       8: getfield      #3                  // Field newHeaders:Lio/undertow/util/HeaderMap;
      11: invokevirtual #22                 // Method io/undertow/util/HeaderMap.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          50
      24: aload_1
      25: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #25                 // class io/undertow/util/HeaderValues
      33: astore_2
      34: aload_0
      35: getfield      #4                  // Field headers:Lio/undertow/util/HeaderMap;
      38: aload_2
      39: invokevirtual #26                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
      42: aload_2
      43: invokevirtual #27                 // Method io/undertow/util/HeaderMap.addAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      46: pop
      47: goto          15
      50: aload_0
      51: aconst_null
      52: putfield      #3                  // Field newHeaders:Lio/undertow/util/HeaderMap;
      55: return

  synchronized void addNewHeaders(io.undertow.util.HeaderMap);
    Code:
       0: aload_0
       1: getfield      #3                  // Field newHeaders:Lio/undertow/util/HeaderMap;
       4: ifnull        15
       7: aload_0
       8: aload_1
       9: putfield      #3                  // Field newHeaders:Lio/undertow/util/HeaderMap;
      12: goto          55
      15: aload_1
      16: invokevirtual #22                 // Method io/undertow/util/HeaderMap.iterator:()Ljava/util/Iterator;
      19: astore_2
      20: aload_2
      21: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      26: ifeq          55
      29: aload_2
      30: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      35: checkcast     #25                 // class io/undertow/util/HeaderValues
      38: astore_3
      39: aload_0
      40: getfield      #3                  // Field newHeaders:Lio/undertow/util/HeaderMap;
      43: aload_3
      44: invokevirtual #26                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
      47: aload_3
      48: invokevirtual #27                 // Method io/undertow/util/HeaderMap.addAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      51: pop
      52: goto          20
      55: return

  private void updateFlowControlWindow(int);
    Code:
       0: iload_1
       1: ifgt          5
       4: return
       5: aload_0
       6: dup
       7: getfield      #7                  // Field flowControlWindow:I
      10: iload_1
      11: isub
      12: putfield      #7                  // Field flowControlWindow:I
      15: aload_0
      16: invokevirtual #28                 // Method getSpdyChannel:()Lio/undertow/protocols/spdy/SpdyChannel;
      19: astore_2
      20: aload_2
      21: iload_1
      22: invokevirtual #29                 // Method io/undertow/protocols/spdy/SpdyChannel.updateReceiveFlowControlWindow:(I)V
      25: aload_2
      26: invokevirtual #6                  // Method io/undertow/protocols/spdy/SpdyChannel.getInitialWindowSize:()I
      29: istore_3
      30: aload_0
      31: getfield      #7                  // Field flowControlWindow:I
      34: iload_3
      35: iconst_2
      36: idiv
      37: if_icmpge     69
      40: iload_3
      41: aload_0
      42: getfield      #7                  // Field flowControlWindow:I
      45: isub
      46: istore        4
      48: aload_0
      49: dup
      50: getfield      #7                  // Field flowControlWindow:I
      53: iload         4
      55: iadd
      56: putfield      #7                  // Field flowControlWindow:I
      59: aload_2
      60: aload_0
      61: getfield      #5                  // Field streamId:I
      64: iload         4
      66: invokevirtual #30                 // Method io/undertow/protocols/spdy/SpdyChannel.sendUpdateWindowSize:(II)V
      69: return

  protected void complete() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #31                 // Method io/undertow/protocols/spdy/SpdyStreamSourceChannel.complete:()V
       4: aload_0
       5: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
       8: ifnull        20
      11: aload_0
      12: aload_0
      13: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
      16: invokestatic  #33                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
      19: pop
      20: return

  public io.undertow.util.HeaderMap getHeaders();
    Code:
       0: aload_0
       1: getfield      #4                  // Field headers:Lio/undertow/util/HeaderMap;
       4: areturn

  public org.xnio.ChannelListener<io.undertow.protocols.spdy.SpdyStreamStreamSourceChannel> getCompletionListener();
    Code:
       0: aload_0
       1: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
       4: areturn

  public void setCompletionListener(org.xnio.ChannelListener<io.undertow.protocols.spdy.SpdyStreamStreamSourceChannel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
       5: return

  void rstStream();
    Code:
       0: aload_0
       1: getfield      #2                  // Field rst:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #2                  // Field rst:Z
      13: aload_0
      14: invokevirtual #34                 // Method markStreamBroken:()V
      17: aload_0
      18: invokevirtual #28                 // Method getSpdyChannel:()Lio/undertow/protocols/spdy/SpdyChannel;
      21: aload_0
      22: getfield      #5                  // Field streamId:I
      25: iconst_5
      26: invokevirtual #36                 // Method io/undertow/protocols/spdy/SpdyChannel.sendRstStream:(II)V
      29: return

  protected void channelForciblyClosed();
    Code:
       0: aload_0
       1: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
       4: ifnull        17
       7: aload_0
       8: getfield      #32                 // Field completionListener:Lorg/xnio/ChannelListener;
      11: aload_0
      12: invokeinterface #37,  2           // InterfaceMethod org/xnio/ChannelListener.handleEvent:(Ljava/nio/channels/Channel;)V
      17: aload_0
      18: invokevirtual #38                 // Method rstStream:()V
      21: return

  public int getStreamId();
    Code:
       0: aload_0
       1: getfield      #5                  // Field streamId:I
       4: ireturn
}
