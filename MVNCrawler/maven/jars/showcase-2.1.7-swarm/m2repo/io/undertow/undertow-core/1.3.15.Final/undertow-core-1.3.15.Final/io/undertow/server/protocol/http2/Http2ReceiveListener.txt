Compiled from "Http2ReceiveListener.java"
public class io.undertow.server.protocol.http2.Http2ReceiveListener implements org.xnio.ChannelListener<io.undertow.protocols.http2.Http2Channel> {
  static final io.undertow.util.HttpString METHOD;

  static final io.undertow.util.HttpString PATH;

  static final io.undertow.util.HttpString SCHEME;

  static final io.undertow.util.HttpString AUTHORITY;

  private final io.undertow.server.HttpHandler rootHandler;

  private final long maxEntitySize;

  private final org.xnio.OptionMap undertowOptions;

  private final java.lang.String encoding;

  private final boolean decode;

  private final java.lang.StringBuilder decodeBuffer;

  private final boolean allowEncodingSlash;

  private final int bufferSize;

  private final io.undertow.server.ConnectorStatisticsImpl connectorStatistics;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.protocol.http2.Http2ReceiveListener> concurrentRequestsUpdater;

  private volatile int concurrentRequests;

  public io.undertow.server.protocol.http2.Http2ReceiveListener(io.undertow.server.HttpHandler, org.xnio.OptionMap, int, io.undertow.server.ConnectorStatisticsImpl);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/lang/StringBuilder
       8: dup
       9: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
      12: putfield      #4                  // Field decodeBuffer:Ljava/lang/StringBuilder;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field undertowOptions:Lorg/xnio/OptionMap;
      25: aload_0
      26: iload_3
      27: putfield      #7                  // Field bufferSize:I
      30: aload_0
      31: aload         4
      33: putfield      #8                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      36: aload_0
      37: aload_2
      38: getstatic     #9                  // Field io/undertow/UndertowOptions.MAX_ENTITY_SIZE:Lorg/xnio/Option;
      41: ldc2_w        #11                 // long -1l
      44: invokevirtual #13                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;J)J
      47: putfield      #14                 // Field maxEntitySize:J
      50: aload_0
      51: aload_2
      52: getstatic     #15                 // Field io/undertow/UndertowOptions.ALLOW_ENCODED_SLASH:Lorg/xnio/Option;
      55: iconst_0
      56: invokevirtual #16                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      59: putfield      #17                 // Field allowEncodingSlash:Z
      62: aload_0
      63: aload_2
      64: getstatic     #18                 // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
      67: iconst_1
      68: invokevirtual #16                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      71: putfield      #19                 // Field decode:Z
      74: aload_2
      75: getstatic     #18                 // Field io/undertow/UndertowOptions.DECODE_URL:Lorg/xnio/Option;
      78: iconst_1
      79: invokevirtual #16                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      82: ifeq          108
      85: aload_0
      86: aload_2
      87: getstatic     #20                 // Field io/undertow/UndertowOptions.URL_CHARSET:Lorg/xnio/Option;
      90: getstatic     #21                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      93: invokevirtual #22                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      96: invokevirtual #23                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Ljava/lang/Object;)Ljava/lang/Object;
      99: checkcast     #24                 // class java/lang/String
     102: putfield      #25                 // Field encoding:Ljava/lang/String;
     105: goto          113
     108: aload_0
     109: aconst_null
     110: putfield      #25                 // Field encoding:Ljava/lang/String;
     113: return

  public void handleEvent(io.undertow.protocols.http2.Http2Channel);
    Code:
       0: aload_1
       1: invokevirtual #26                 // Method io/undertow/protocols/http2/Http2Channel.receive:()Lio/undertow/server/protocol/framed/AbstractFramedStreamSourceChannel;
       4: checkcast     #27                 // class io/undertow/protocols/http2/AbstractHttp2StreamSourceChannel
       7: astore_2
       8: aload_2
       9: ifnonnull     13
      12: return
      13: aload_2
      14: instanceof    #28                 // class io/undertow/protocols/http2/Http2StreamSourceChannel
      17: ifeq          29
      20: aload_0
      21: aload_1
      22: aload_2
      23: checkcast     #28                 // class io/undertow/protocols/http2/Http2StreamSourceChannel
      26: invokespecial #29                 // Method handleRequests:(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2StreamSourceChannel;)V
      29: goto          46
      32: astore_2
      33: getstatic     #31                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      36: aload_2
      37: invokeinterface #32,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
      42: aload_1
      43: invokestatic  #33                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      46: return
    Exception table:
       from    to  target type
           0    12    32   Class java/io/IOException
          13    29    32   Class java/io/IOException

  private void handleRequests(io.undertow.protocols.http2.Http2Channel, io.undertow.protocols.http2.Http2StreamSourceChannel);
    Code:
       0: aload_2
       1: astore_3
       2: new           #34                 // class io/undertow/server/protocol/http2/Http2ServerConnection
       5: dup
       6: aload_1
       7: aload_3
       8: aload_0
       9: getfield      #6                  // Field undertowOptions:Lorg/xnio/OptionMap;
      12: aload_0
      13: getfield      #7                  // Field bufferSize:I
      16: aload_0
      17: getfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      20: invokespecial #35                 // Method io/undertow/server/protocol/http2/Http2ServerConnection."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2StreamSourceChannel;Lorg/xnio/OptionMap;ILio/undertow/server/HttpHandler;)V
      23: astore        4
      25: aload_3
      26: invokevirtual #36                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      29: getstatic     #37                 // Field SCHEME:Lio/undertow/util/HttpString;
      32: invokevirtual #38                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      35: ifeq          77
      38: aload_3
      39: invokevirtual #36                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      42: getstatic     #39                 // Field METHOD:Lio/undertow/util/HttpString;
      45: invokevirtual #38                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      48: ifeq          77
      51: aload_3
      52: invokevirtual #36                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      55: getstatic     #40                 // Field AUTHORITY:Lio/undertow/util/HttpString;
      58: invokevirtual #38                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      61: ifeq          77
      64: aload_3
      65: invokevirtual #36                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      68: getstatic     #41                 // Field PATH:Lio/undertow/util/HttpString;
      71: invokevirtual #38                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      74: ifne          100
      77: aload_1
      78: aload_2
      79: invokevirtual #42                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getStreamId:()I
      82: iconst_1
      83: invokevirtual #44                 // Method io/undertow/protocols/http2/Http2Channel.sendRstStream:(II)V
      86: aload_2
      87: ldc2_w        #46                 // long 9223372036854775807l
      90: invokestatic  #48                 // Method org/xnio/channels/Channels.drain:(Lorg/xnio/channels/StreamSourceChannel;J)J
      93: pop2
      94: goto          99
      97: astore        5
      99: return
     100: new           #49                 // class io/undertow/server/HttpServerExchange
     103: dup
     104: aload         4
     106: aload_3
     107: invokevirtual #36                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getHeaders:()Lio/undertow/util/HeaderMap;
     110: aload_3
     111: invokevirtual #50                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getResponseChannel:()Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
     114: invokevirtual #51                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getHeaders:()Lio/undertow/util/HeaderMap;
     117: aload_0
     118: getfield      #14                 // Field maxEntitySize:J
     121: invokespecial #52                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;Lio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;J)V
     124: astore        5
     126: aload         4
     128: aload         5
     130: invokevirtual #53                 // Method io/undertow/server/protocol/http2/Http2ServerConnection.setExchange:(Lio/undertow/server/HttpServerExchange;)V
     133: aload_3
     134: aload_0
     135: getfield      #14                 // Field maxEntitySize:J
     138: invokevirtual #54                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.setMaxStreamSize:(J)V
     141: aload         5
     143: aload         5
     145: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     148: getstatic     #37                 // Field SCHEME:Lio/undertow/util/HttpString;
     151: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     154: invokevirtual #57                 // Method io/undertow/server/HttpServerExchange.setRequestScheme:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     157: pop
     158: aload         5
     160: getstatic     #58                 // Field io/undertow/util/Protocols.HTTP_1_1:Lio/undertow/util/HttpString;
     163: invokevirtual #59                 // Method io/undertow/server/HttpServerExchange.setProtocol:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     166: pop
     167: aload         5
     169: aload         5
     171: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     174: getstatic     #39                 // Field METHOD:Lio/undertow/util/HttpString;
     177: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     180: invokestatic  #60                 // Method io/undertow/util/Methods.fromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
     183: invokevirtual #61                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     186: pop
     187: aload         5
     189: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     192: getstatic     #62                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
     195: aload         5
     197: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     200: getstatic     #40                 // Field AUTHORITY:Lio/undertow/util/HttpString;
     203: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     206: invokevirtual #63                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     209: pop
     210: aload         5
     212: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     215: getstatic     #41                 // Field PATH:Lio/undertow/util/HttpString;
     218: invokevirtual #56                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     221: astore        6
     223: aload         5
     225: aload         6
     227: aload_0
     228: getfield      #25                 // Field encoding:Ljava/lang/String;
     231: aload_0
     232: getfield      #19                 // Field decode:Z
     235: aload_0
     236: getfield      #17                 // Field allowEncodingSlash:Z
     239: aload_0
     240: getfield      #4                  // Field decodeBuffer:Ljava/lang/StringBuilder;
     243: invokestatic  #64                 // Method io/undertow/server/Connectors.setExchangeRequestPath:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)V
     246: aload_1
     247: invokevirtual #65                 // Method io/undertow/protocols/http2/Http2Channel.getSslSession:()Ljavax/net/ssl/SSLSession;
     250: astore        7
     252: aload         7
     254: ifnull        270
     257: aload         4
     259: new           #66                 // class io/undertow/server/protocol/http2/Http2SslSessionInfo
     262: dup
     263: aload_1
     264: invokespecial #67                 // Method io/undertow/server/protocol/http2/Http2SslSessionInfo."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
     267: invokevirtual #68                 // Method io/undertow/server/protocol/http2/Http2ServerConnection.setSslSessionInfo:(Lio/undertow/server/SSLSessionInfo;)V
     270: aload_3
     271: invokevirtual #50                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.getResponseChannel:()Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
     274: new           #69                 // class io/undertow/server/protocol/http2/Http2ReceiveListener$1
     277: dup
     278: aload_0
     279: aload         5
     281: invokespecial #70                 // Method io/undertow/server/protocol/http2/Http2ReceiveListener$1."<init>":(Lio/undertow/server/protocol/http2/Http2ReceiveListener;Lio/undertow/server/HttpServerExchange;)V
     284: invokevirtual #71                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.setCompletionListener:(Lorg/xnio/ChannelListener;)V
     287: aload_3
     288: invokevirtual #72                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.isOpen:()Z
     291: ifne          302
     294: aload         5
     296: invokestatic  #73                 // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     299: goto          316
     302: aload_3
     303: new           #74                 // class io/undertow/server/protocol/http2/Http2ReceiveListener$2
     306: dup
     307: aload_0
     308: aload         5
     310: invokespecial #75                 // Method io/undertow/server/protocol/http2/Http2ReceiveListener$2."<init>":(Lio/undertow/server/protocol/http2/Http2ReceiveListener;Lio/undertow/server/HttpServerExchange;)V
     313: invokevirtual #76                 // Method io/undertow/protocols/http2/Http2StreamSourceChannel.setCompletionListener:(Lorg/xnio/ChannelListener;)V
     316: aload_0
     317: getfield      #8                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     320: ifnull        332
     323: aload_0
     324: getfield      #8                  // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     327: aload         5
     329: invokevirtual #77                 // Method io/undertow/server/ConnectorStatisticsImpl.setup:(Lio/undertow/server/HttpServerExchange;)V
     332: aload         5
     334: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     337: getstatic     #40                 // Field AUTHORITY:Lio/undertow/util/HttpString;
     340: invokevirtual #78                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     343: pop
     344: aload         5
     346: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     349: getstatic     #41                 // Field PATH:Lio/undertow/util/HttpString;
     352: invokevirtual #78                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     355: pop
     356: aload         5
     358: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     361: getstatic     #37                 // Field SCHEME:Lio/undertow/util/HttpString;
     364: invokevirtual #78                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     367: pop
     368: aload         5
     370: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     373: getstatic     #39                 // Field METHOD:Lio/undertow/util/HttpString;
     376: invokevirtual #78                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     379: pop
     380: aload_0
     381: getfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
     384: aload         5
     386: invokestatic  #79                 // Method io/undertow/server/Connectors.executeRootHandler:(Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     389: return
    Exception table:
       from    to  target type
          86    94    97   Class java/io/IOException

  void handleInitialRequest(io.undertow.server.HttpServerExchange, io.undertow.protocols.http2.Http2Channel);
    Code:
       0: aload_2
       1: invokevirtual #80                 // Method io/undertow/protocols/http2/Http2Channel.createInitialUpgradeResponseStream:()Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
       4: astore_3
       5: new           #34                 // class io/undertow/server/protocol/http2/Http2ServerConnection
       8: dup
       9: aload_2
      10: aload_3
      11: aload_0
      12: getfield      #6                  // Field undertowOptions:Lorg/xnio/OptionMap;
      15: aload_0
      16: getfield      #7                  // Field bufferSize:I
      19: aload_0
      20: getfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
      23: invokespecial #81                 // Method io/undertow/server/protocol/http2/Http2ServerConnection."<init>":(Lio/undertow/protocols/http2/Http2Channel;Lio/undertow/protocols/http2/Http2DataStreamSinkChannel;Lorg/xnio/OptionMap;ILio/undertow/server/HttpHandler;)V
      26: astore        4
      28: new           #82                 // class io/undertow/util/HeaderMap
      31: dup
      32: invokespecial #83                 // Method io/undertow/util/HeaderMap."<init>":()V
      35: astore        5
      37: aload_1
      38: invokevirtual #55                 // Method io/undertow/server/HttpServerExchange.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      41: invokevirtual #84                 // Method io/undertow/util/HeaderMap.iterator:()Ljava/util/Iterator;
      44: astore        6
      46: aload         6
      48: invokeinterface #85,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      53: ifeq          84
      56: aload         6
      58: invokeinterface #86,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      63: checkcast     #87                 // class io/undertow/util/HeaderValues
      66: astore        7
      68: aload         5
      70: aload         7
      72: invokevirtual #88                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
      75: aload         7
      77: invokevirtual #89                 // Method io/undertow/util/HeaderMap.putAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      80: pop
      81: goto          46
      84: new           #49                 // class io/undertow/server/HttpServerExchange
      87: dup
      88: aload         4
      90: aload         5
      92: aload_3
      93: invokevirtual #51                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getHeaders:()Lio/undertow/util/HeaderMap;
      96: aload_0
      97: getfield      #14                 // Field maxEntitySize:J
     100: invokespecial #52                 // Method io/undertow/server/HttpServerExchange."<init>":(Lio/undertow/server/ServerConnection;Lio/undertow/util/HeaderMap;Lio/undertow/util/HeaderMap;J)V
     103: astore        6
     105: aload         4
     107: aload         6
     109: invokevirtual #53                 // Method io/undertow/server/protocol/http2/Http2ServerConnection.setExchange:(Lio/undertow/server/HttpServerExchange;)V
     112: aload         6
     114: aload_1
     115: invokevirtual #90                 // Method io/undertow/server/HttpServerExchange.getRequestScheme:()Ljava/lang/String;
     118: invokevirtual #57                 // Method io/undertow/server/HttpServerExchange.setRequestScheme:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     121: pop
     122: aload         6
     124: aload_1
     125: invokevirtual #91                 // Method io/undertow/server/HttpServerExchange.getProtocol:()Lio/undertow/util/HttpString;
     128: invokevirtual #59                 // Method io/undertow/server/HttpServerExchange.setProtocol:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     131: pop
     132: aload         6
     134: aload_1
     135: invokevirtual #92                 // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
     138: invokevirtual #61                 // Method io/undertow/server/HttpServerExchange.setRequestMethod:(Lio/undertow/util/HttpString;)Lio/undertow/server/HttpServerExchange;
     141: pop
     142: aload         6
     144: aload_1
     145: invokevirtual #93                 // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
     148: invokevirtual #94                 // Method io/undertow/server/HttpServerExchange.setQueryString:(Ljava/lang/String;)Lio/undertow/server/HttpServerExchange;
     151: pop
     152: aload         6
     154: invokevirtual #93                 // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
     157: invokevirtual #95                 // Method java/lang/String.isEmpty:()Z
     160: ifeq          170
     163: aload_1
     164: invokevirtual #96                 // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
     167: goto          200
     170: new           #2                  // class java/lang/StringBuilder
     173: dup
     174: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
     177: aload_1
     178: invokevirtual #96                 // Method io/undertow/server/HttpServerExchange.getRequestURI:()Ljava/lang/String;
     181: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     184: bipush        63
     186: invokevirtual #98                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     189: aload         6
     191: invokevirtual #93                 // Method io/undertow/server/HttpServerExchange.getQueryString:()Ljava/lang/String;
     194: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     197: invokevirtual #99                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     200: astore        7
     202: aload         6
     204: aload         7
     206: aload_0
     207: getfield      #25                 // Field encoding:Ljava/lang/String;
     210: aload_0
     211: getfield      #19                 // Field decode:Z
     214: aload_0
     215: getfield      #17                 // Field allowEncodingSlash:Z
     218: aload_0
     219: getfield      #4                  // Field decodeBuffer:Ljava/lang/StringBuilder;
     222: invokestatic  #64                 // Method io/undertow/server/Connectors.setExchangeRequestPath:(Lio/undertow/server/HttpServerExchange;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/StringBuilder;)V
     225: aload_2
     226: invokevirtual #65                 // Method io/undertow/protocols/http2/Http2Channel.getSslSession:()Ljavax/net/ssl/SSLSession;
     229: astore        8
     231: aload         8
     233: ifnull        249
     236: aload         4
     238: new           #66                 // class io/undertow/server/protocol/http2/Http2SslSessionInfo
     241: dup
     242: aload_2
     243: invokespecial #67                 // Method io/undertow/server/protocol/http2/Http2SslSessionInfo."<init>":(Lio/undertow/protocols/http2/Http2Channel;)V
     246: invokevirtual #68                 // Method io/undertow/server/protocol/http2/Http2ServerConnection.setSslSessionInfo:(Lio/undertow/server/SSLSessionInfo;)V
     249: aload         6
     251: invokestatic  #73                 // Method io/undertow/server/Connectors.terminateRequest:(Lio/undertow/server/HttpServerExchange;)V
     254: aload_3
     255: new           #100                // class io/undertow/server/protocol/http2/Http2ReceiveListener$3
     258: dup
     259: aload_0
     260: aload         6
     262: invokespecial #101                // Method io/undertow/server/protocol/http2/Http2ReceiveListener$3."<init>":(Lio/undertow/server/protocol/http2/Http2ReceiveListener;Lio/undertow/server/HttpServerExchange;)V
     265: invokevirtual #71                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.setCompletionListener:(Lorg/xnio/ChannelListener;)V
     268: aload_0
     269: getfield      #5                  // Field rootHandler:Lio/undertow/server/HttpHandler;
     272: aload         6
     274: invokestatic  #79                 // Method io/undertow/server/Connectors.executeRootHandler:(Lio/undertow/server/HttpHandler;Lio/undertow/server/HttpServerExchange;)V
     277: return

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #43                 // class io/undertow/protocols/http2/Http2Channel
       5: invokevirtual #102                // Method handleEvent:(Lio/undertow/protocols/http2/Http2Channel;)V
       8: return

  static {};
    Code:
       0: new           #103                // class io/undertow/util/HttpString
       3: dup
       4: ldc           #104                // String :method
       6: invokespecial #105                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
       9: putstatic     #39                 // Field METHOD:Lio/undertow/util/HttpString;
      12: new           #103                // class io/undertow/util/HttpString
      15: dup
      16: ldc           #106                // String :path
      18: invokespecial #105                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      21: putstatic     #41                 // Field PATH:Lio/undertow/util/HttpString;
      24: new           #103                // class io/undertow/util/HttpString
      27: dup
      28: ldc           #107                // String :scheme
      30: invokespecial #105                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      33: putstatic     #37                 // Field SCHEME:Lio/undertow/util/HttpString;
      36: new           #103                // class io/undertow/util/HttpString
      39: dup
      40: ldc           #108                // String :authority
      42: invokespecial #105                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      45: putstatic     #40                 // Field AUTHORITY:Lio/undertow/util/HttpString;
      48: ldc           #109                // class io/undertow/server/protocol/http2/Http2ReceiveListener
      50: ldc           #110                // String concurrentRequests
      52: invokestatic  #111                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      55: putstatic     #112                // Field concurrentRequestsUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      58: return
}
