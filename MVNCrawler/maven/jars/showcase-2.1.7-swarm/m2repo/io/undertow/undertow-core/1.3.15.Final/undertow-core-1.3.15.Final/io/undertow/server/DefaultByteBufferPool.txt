Compiled from "DefaultByteBufferPool.java"
public class io.undertow.server.DefaultByteBufferPool implements io.undertow.connector.ByteBufferPool {
  private final java.lang.ThreadLocal<io.undertow.server.DefaultByteBufferPool$ThreadLocalData> threadLocalCache;

  private final java.util.List<io.undertow.server.DefaultByteBufferPool$ThreadLocalData> threadLocalDataList;

  private final java.util.concurrent.ConcurrentLinkedQueue<java.nio.ByteBuffer> queue;

  private final boolean direct;

  private final int bufferSize;

  private final int maximumPoolSize;

  private final int threadLocalCacheSize;

  private final int leakDectionPercent;

  private int count;

  private volatile int currentQueueLength;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.undertow.server.DefaultByteBufferPool> currentQueueLengthUpdater;

  private volatile boolean closed;

  public io.undertow.server.DefaultByteBufferPool(boolean, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_m1
       4: bipush        12
       6: iconst_0
       7: invokespecial #3                  // Method "<init>":(ZIIII)V
      10: return

  public io.undertow.server.DefaultByteBufferPool(boolean, int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/lang/ThreadLocal
       8: dup
       9: invokespecial #6                  // Method java/lang/ThreadLocal."<init>":()V
      12: putfield      #7                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      15: aload_0
      16: new           #8                  // class java/util/ArrayList
      19: dup
      20: invokespecial #9                  // Method java/util/ArrayList."<init>":()V
      23: invokestatic  #10                 // Method java/util/Collections.synchronizedList:(Ljava/util/List;)Ljava/util/List;
      26: putfield      #11                 // Field threadLocalDataList:Ljava/util/List;
      29: aload_0
      30: new           #12                 // class java/util/concurrent/ConcurrentLinkedQueue
      33: dup
      34: invokespecial #13                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      37: putfield      #14                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      40: aload_0
      41: iconst_0
      42: putfield      #15                 // Field currentQueueLength:I
      45: aload_0
      46: iload_1
      47: putfield      #16                 // Field direct:Z
      50: aload_0
      51: iload_2
      52: putfield      #17                 // Field bufferSize:I
      55: aload_0
      56: iload_3
      57: putfield      #18                 // Field maximumPoolSize:I
      60: aload_0
      61: iload         4
      63: putfield      #1                  // Field threadLocalCacheSize:I
      66: aload_0
      67: iload         5
      69: putfield      #19                 // Field leakDectionPercent:I
      72: return

  public io.undertow.server.DefaultByteBufferPool(boolean, int, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iconst_0
       7: invokespecial #3                  // Method "<init>":(ZIIII)V
      10: return

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #17                 // Field bufferSize:I
       4: ireturn

  public io.undertow.connector.PooledByteBuffer allocate();
    Code:
       0: aload_0
       1: getfield      #20                 // Field closed:Z
       4: ifeq          16
       7: getstatic     #21                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #22,  1           // InterfaceMethod io/undertow/UndertowMessages.poolIsClosed:()Ljava/lang/IllegalStateException;
      15: athrow
      16: aconst_null
      17: astore_1
      18: aconst_null
      19: astore_2
      20: aload_0
      21: getfield      #1                  // Field threadLocalCacheSize:I
      24: ifle          97
      27: aload_0
      28: getfield      #7                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      31: invokevirtual #23                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      34: checkcast     #24                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      37: astore_2
      38: aload_2
      39: ifnull        68
      42: aload_2
      43: getfield      #25                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      46: invokevirtual #26                 // Method java/util/ArrayDeque.poll:()Ljava/lang/Object;
      49: checkcast     #27                 // class java/nio/ByteBuffer
      52: astore_1
      53: aload_1
      54: ifnull        97
      57: getstatic     #28                 // Field currentQueueLengthUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      60: aload_0
      61: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      64: pop
      65: goto          97
      68: new           #24                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      71: dup
      72: aload_0
      73: aconst_null
      74: invokespecial #30                 // Method io/undertow/server/DefaultByteBufferPool$ThreadLocalData."<init>":(Lio/undertow/server/DefaultByteBufferPool;Lio/undertow/server/DefaultByteBufferPool$1;)V
      77: astore_2
      78: aload_0
      79: getfield      #7                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      82: aload_2
      83: invokevirtual #31                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
      86: aload_0
      87: getfield      #11                 // Field threadLocalDataList:Ljava/util/List;
      90: aload_2
      91: invokeinterface #32,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      96: pop
      97: aload_1
      98: ifnonnull     112
     101: aload_0
     102: getfield      #14                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
     105: invokevirtual #33                 // Method java/util/concurrent/ConcurrentLinkedQueue.poll:()Ljava/lang/Object;
     108: checkcast     #27                 // class java/nio/ByteBuffer
     111: astore_1
     112: aload_1
     113: ifnonnull     142
     116: aload_0
     117: getfield      #16                 // Field direct:Z
     120: ifeq          134
     123: aload_0
     124: getfield      #17                 // Field bufferSize:I
     127: invokestatic  #34                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
     130: astore_1
     131: goto          142
     134: aload_0
     135: getfield      #17                 // Field bufferSize:I
     138: invokestatic  #35                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
     141: astore_1
     142: aload_2
     143: ifnull        156
     146: aload_2
     147: dup
     148: getfield      #36                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
     151: iconst_1
     152: iadd
     153: putfield      #36                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
     156: aload_1
     157: invokevirtual #37                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     160: pop
     161: new           #38                 // class io/undertow/server/DefaultByteBufferPool$DefaultPooledBuffer
     164: dup
     165: aload_0
     166: aload_1
     167: aload_0
     168: getfield      #19                 // Field leakDectionPercent:I
     171: ifne          178
     174: iconst_0
     175: goto          204
     178: aload_0
     179: dup
     180: getfield      #39                 // Field count:I
     183: iconst_1
     184: iadd
     185: dup_x1
     186: putfield      #39                 // Field count:I
     189: bipush        100
     191: irem
     192: aload_0
     193: getfield      #19                 // Field leakDectionPercent:I
     196: if_icmple     203
     199: iconst_1
     200: goto          204
     203: iconst_0
     204: invokespecial #40                 // Method io/undertow/server/DefaultByteBufferPool$DefaultPooledBuffer."<init>":(Lio/undertow/server/DefaultByteBufferPool;Ljava/nio/ByteBuffer;Z)V
     207: areturn

  private void freeInternal(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #20                 // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #7                  // Field threadLocalCache:Ljava/lang/ThreadLocal;
      12: invokevirtual #23                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      15: checkcast     #24                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      18: astore_2
      19: aload_2
      20: ifnull        64
      23: aload_2
      24: getfield      #36                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
      27: ifle          64
      30: aload_2
      31: dup
      32: getfield      #36                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
      35: iconst_1
      36: isub
      37: putfield      #36                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.allocationDepth:I
      40: aload_2
      41: getfield      #25                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      44: invokevirtual #41                 // Method java/util/ArrayDeque.size:()I
      47: aload_0
      48: getfield      #1                  // Field threadLocalCacheSize:I
      51: if_icmpge     64
      54: aload_2
      55: getfield      #25                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      58: aload_1
      59: invokevirtual #42                 // Method java/util/ArrayDeque.add:(Ljava/lang/Object;)Z
      62: pop
      63: return
      64: aload_0
      65: getfield      #15                 // Field currentQueueLength:I
      68: istore_3
      69: iload_3
      70: aload_0
      71: getfield      #18                 // Field maximumPoolSize:I
      74: if_icmple     78
      77: return
      78: getstatic     #28                 // Field currentQueueLengthUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      81: aload_0
      82: iload_3
      83: aload_0
      84: getfield      #15                 // Field currentQueueLength:I
      87: iconst_1
      88: iadd
      89: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      92: ifeq          64
      95: aload_0
      96: getfield      #14                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      99: aload_1
     100: invokevirtual #44                 // Method java/util/concurrent/ConcurrentLinkedQueue.add:(Ljava/lang/Object;)Z
     103: pop
     104: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #20                 // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #20                 // Field closed:Z
      13: aload_0
      14: getfield      #14                 // Field queue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      17: invokevirtual #45                 // Method java/util/concurrent/ConcurrentLinkedQueue.clear:()V
      20: aload_0
      21: getfield      #11                 // Field threadLocalDataList:Ljava/util/List;
      24: invokeinterface #46,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      29: astore_1
      30: aload_1
      31: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          59
      39: aload_1
      40: invokeinterface #48,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: checkcast     #24                 // class io/undertow/server/DefaultByteBufferPool$ThreadLocalData
      48: astore_2
      49: aload_2
      50: getfield      #25                 // Field io/undertow/server/DefaultByteBufferPool$ThreadLocalData.buffers:Ljava/util/ArrayDeque;
      53: invokevirtual #49                 // Method java/util/ArrayDeque.clear:()V
      56: goto          30
      59: return

  protected void finalize() throws java.lang.Throwable;
    Code:
       0: aload_0
       1: invokespecial #50                 // Method java/lang/Object.finalize:()V
       4: aload_0
       5: invokevirtual #51                 // Method close:()V
       8: return

  static void access$200(io.undertow.server.DefaultByteBufferPool, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method freeInternal:(Ljava/nio/ByteBuffer;)V
       5: return

  static int access$300(io.undertow.server.DefaultByteBufferPool);
    Code:
       0: aload_0
       1: getfield      #1                  // Field threadLocalCacheSize:I
       4: ireturn

  static {};
    Code:
       0: ldc           #52                 // class io/undertow/server/DefaultByteBufferPool
       2: ldc           #53                 // String currentQueueLength
       4: invokestatic  #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #28                 // Field currentQueueLengthUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
