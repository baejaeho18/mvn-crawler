Compiled from "RequestLimitingHandler.java"
public final class io.undertow.server.handlers.RequestLimitingHandler implements io.undertow.server.HttpHandler {
  private final io.undertow.server.HttpHandler nextHandler;

  private final io.undertow.server.handlers.RequestLimit requestLimit;

  public io.undertow.server.handlers.RequestLimitingHandler(int, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_m1
       3: aload_2
       4: invokespecial #1                  // Method "<init>":(IILio/undertow/server/HttpHandler;)V
       7: return

  public io.undertow.server.handlers.RequestLimitingHandler(int, int, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_3
       5: ifnonnull     18
       8: new           #3                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #4                  // String nextHandler is null
      14: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: iload_1
      19: iconst_1
      20: if_icmpge     33
      23: new           #3                  // class java/lang/IllegalArgumentException
      26: dup
      27: ldc           #6                  // String Maximum concurrent requests must be at least 1
      29: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: aload_0
      34: new           #7                  // class io/undertow/server/handlers/RequestLimit
      37: dup
      38: iload_1
      39: iload_2
      40: invokespecial #8                  // Method io/undertow/server/handlers/RequestLimit."<init>":(II)V
      43: putfield      #9                  // Field requestLimit:Lio/undertow/server/handlers/RequestLimit;
      46: aload_0
      47: aload_3
      48: putfield      #10                 // Field nextHandler:Lio/undertow/server/HttpHandler;
      51: return

  public io.undertow.server.handlers.RequestLimitingHandler(io.undertow.server.handlers.RequestLimit, io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_2
       5: ifnonnull     18
       8: new           #3                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #4                  // String nextHandler is null
      14: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #9                  // Field requestLimit:Lio/undertow/server/handlers/RequestLimit;
      23: aload_0
      24: aload_2
      25: putfield      #10                 // Field nextHandler:Lio/undertow/server/HttpHandler;
      28: return

  public void handleRequest(io.undertow.server.HttpServerExchange) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #9                  // Field requestLimit:Lio/undertow/server/handlers/RequestLimit;
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field nextHandler:Lio/undertow/server/HttpHandler;
       9: invokevirtual #11                 // Method io/undertow/server/handlers/RequestLimit.handleRequest:(Lio/undertow/server/HttpServerExchange;Lio/undertow/server/HttpHandler;)V
      12: return

  public io.undertow.server.handlers.RequestLimit getRequestLimit();
    Code:
       0: aload_0
       1: getfield      #9                  // Field requestLimit:Lio/undertow/server/handlers/RequestLimit;
       4: areturn
}
