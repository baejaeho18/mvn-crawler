Compiled from "Http2ClientProvider.java"
public class io.undertow.client.http2.Http2ClientProvider implements io.undertow.client.ClientProvider {
  private static final java.lang.String PROTOCOL_KEY;

  private static final java.lang.String HTTP2;

  private static final java.lang.String HTTP_1_1;

  private static final java.util.List<java.lang.String> PROTOCOLS;

  private static final java.lang.reflect.Method ALPN_PUT_METHOD;

  public io.undertow.client.http2.Http2ClientProvider();
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: return

  public void connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: aload_3
       5: aload         4
       7: aload         5
       9: aload         6
      11: invokevirtual #6                  // Method connect:(Lio/undertow/client/ClientCallback;Ljava/net/InetSocketAddress;Ljava/net/URI;Lorg/xnio/XnioWorker;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
      14: return

  public void connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: aload_3
       5: aload         4
       7: aload         5
       9: aload         6
      11: invokevirtual #7                  // Method connect:(Lio/undertow/client/ClientCallback;Ljava/net/InetSocketAddress;Ljava/net/URI;Lorg/xnio/XnioIoThread;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
      14: return

  public java.util.Set<java.lang.String> handlesSchemes();
    Code:
       0: new           #8                  // class java/util/HashSet
       3: dup
       4: iconst_1
       5: anewarray     #9                  // class java/lang/String
       8: dup
       9: iconst_0
      10: ldc           #10                 // String h2
      12: aastore
      13: invokestatic  #11                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      16: invokespecial #12                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      19: areturn

  public void connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: getstatic     #13                 // Field ALPN_PUT_METHOD:Ljava/lang/reflect/Method;
       3: ifnonnull     21
       6: aload_1
       7: getstatic     #14                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #15,  1           // InterfaceMethod io/undertow/UndertowMessages.jettyNPNNotAvailable:()Ljava/io/IOException;
      15: invokeinterface #16,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
      20: return
      21: aload         5
      23: ifnonnull     41
      26: aload_1
      27: getstatic     #14                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      30: invokeinterface #17,  1           // InterfaceMethod io/undertow/UndertowMessages.sslWasNull:()Ljava/io/IOException;
      35: invokeinterface #16,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
      40: return
      41: invokestatic  #18                 // Method org/xnio/OptionMap.builder:()Lorg/xnio/OptionMap$Builder;
      44: aload         7
      46: invokevirtual #19                 // Method org/xnio/OptionMap$Builder.addAll:(Lorg/xnio/OptionMap;)Lorg/xnio/OptionMap$Builder;
      49: getstatic     #20                 // Field org/xnio/Options.SSL_STARTTLS:Lorg/xnio/Option;
      52: iconst_1
      53: invokevirtual #21                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;Z)Lorg/xnio/OptionMap$Builder;
      56: invokevirtual #22                 // Method org/xnio/OptionMap$Builder.getMap:()Lorg/xnio/OptionMap;
      59: astore        8
      61: aload_2
      62: ifnonnull     130
      65: aload         5
      67: aload         4
      69: new           #23                 // class java/net/InetSocketAddress
      72: dup
      73: aload_3
      74: invokevirtual #24                 // Method java/net/URI.getHost:()Ljava/lang/String;
      77: aload_3
      78: invokevirtual #25                 // Method java/net/URI.getPort:()I
      81: iconst_m1
      82: if_icmpne     91
      85: sipush        443
      88: goto          95
      91: aload_3
      92: invokevirtual #25                 // Method java/net/URI.getPort:()I
      95: invokespecial #26                 // Method java/net/InetSocketAddress."<init>":(Ljava/lang/String;I)V
      98: aload_0
      99: aload_1
     100: aload_3
     101: aload         5
     103: aload         6
     105: aload         8
     107: invokespecial #27                 // Method createOpenListener:(Lio/undertow/client/ClientCallback;Ljava/net/URI;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)Lorg/xnio/ChannelListener;
     110: aload         8
     112: invokevirtual #28                 // Method org/xnio/ssl/XnioSsl.openSslConnection:(Lorg/xnio/XnioWorker;Ljava/net/InetSocketAddress;Lorg/xnio/ChannelListener;Lorg/xnio/OptionMap;)Lorg/xnio/IoFuture;
     115: aload_0
     116: aload_1
     117: invokespecial #29                 // Method createNotifier:(Lio/undertow/client/ClientCallback;)Lorg/xnio/IoFuture$Notifier;
     120: aconst_null
     121: invokeinterface #30,  3           // InterfaceMethod org/xnio/IoFuture.addNotifier:(Lorg/xnio/IoFuture$Notifier;Ljava/lang/Object;)Lorg/xnio/IoFuture;
     126: pop
     127: goto          193
     130: aload         5
     132: aload         4
     134: aload_2
     135: new           #23                 // class java/net/InetSocketAddress
     138: dup
     139: aload_3
     140: invokevirtual #24                 // Method java/net/URI.getHost:()Ljava/lang/String;
     143: aload_3
     144: invokevirtual #25                 // Method java/net/URI.getPort:()I
     147: iconst_m1
     148: if_icmpne     157
     151: sipush        443
     154: goto          161
     157: aload_3
     158: invokevirtual #25                 // Method java/net/URI.getPort:()I
     161: invokespecial #26                 // Method java/net/InetSocketAddress."<init>":(Ljava/lang/String;I)V
     164: aload_0
     165: aload_1
     166: aload_3
     167: aload         5
     169: aload         6
     171: aload         8
     173: invokespecial #27                 // Method createOpenListener:(Lio/undertow/client/ClientCallback;Ljava/net/URI;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)Lorg/xnio/ChannelListener;
     176: aload         8
     178: invokevirtual #31                 // Method org/xnio/ssl/XnioSsl.openSslConnection:(Lorg/xnio/XnioWorker;Ljava/net/InetSocketAddress;Ljava/net/InetSocketAddress;Lorg/xnio/ChannelListener;Lorg/xnio/OptionMap;)Lorg/xnio/IoFuture;
     181: aload_0
     182: aload_1
     183: invokespecial #29                 // Method createNotifier:(Lio/undertow/client/ClientCallback;)Lorg/xnio/IoFuture$Notifier;
     186: aconst_null
     187: invokeinterface #30,  3           // InterfaceMethod org/xnio/IoFuture.addNotifier:(Lorg/xnio/IoFuture$Notifier;Ljava/lang/Object;)Lorg/xnio/IoFuture;
     192: pop
     193: return

  public void connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: getstatic     #13                 // Field ALPN_PUT_METHOD:Ljava/lang/reflect/Method;
       3: ifnonnull     21
       6: aload_1
       7: getstatic     #14                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      10: invokeinterface #15,  1           // InterfaceMethod io/undertow/UndertowMessages.jettyNPNNotAvailable:()Ljava/io/IOException;
      15: invokeinterface #16,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
      20: return
      21: aload         5
      23: ifnonnull     41
      26: aload_1
      27: getstatic     #14                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      30: invokeinterface #17,  1           // InterfaceMethod io/undertow/UndertowMessages.sslWasNull:()Ljava/io/IOException;
      35: invokeinterface #16,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
      40: return
      41: aload_2
      42: ifnonnull     130
      45: invokestatic  #18                 // Method org/xnio/OptionMap.builder:()Lorg/xnio/OptionMap$Builder;
      48: aload         7
      50: invokevirtual #19                 // Method org/xnio/OptionMap$Builder.addAll:(Lorg/xnio/OptionMap;)Lorg/xnio/OptionMap$Builder;
      53: getstatic     #20                 // Field org/xnio/Options.SSL_STARTTLS:Lorg/xnio/Option;
      56: iconst_1
      57: invokevirtual #21                 // Method org/xnio/OptionMap$Builder.set:(Lorg/xnio/Option;Z)Lorg/xnio/OptionMap$Builder;
      60: invokevirtual #22                 // Method org/xnio/OptionMap$Builder.getMap:()Lorg/xnio/OptionMap;
      63: astore        8
      65: aload         5
      67: aload         4
      69: new           #23                 // class java/net/InetSocketAddress
      72: dup
      73: aload_3
      74: invokevirtual #24                 // Method java/net/URI.getHost:()Ljava/lang/String;
      77: aload_3
      78: invokevirtual #25                 // Method java/net/URI.getPort:()I
      81: iconst_m1
      82: if_icmpne     91
      85: sipush        443
      88: goto          95
      91: aload_3
      92: invokevirtual #25                 // Method java/net/URI.getPort:()I
      95: invokespecial #26                 // Method java/net/InetSocketAddress."<init>":(Ljava/lang/String;I)V
      98: aload_0
      99: aload_1
     100: aload_3
     101: aload         5
     103: aload         6
     105: aload         8
     107: invokespecial #27                 // Method createOpenListener:(Lio/undertow/client/ClientCallback;Ljava/net/URI;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)Lorg/xnio/ChannelListener;
     110: aload         7
     112: invokevirtual #32                 // Method org/xnio/ssl/XnioSsl.openSslConnection:(Lorg/xnio/XnioIoThread;Ljava/net/InetSocketAddress;Lorg/xnio/ChannelListener;Lorg/xnio/OptionMap;)Lorg/xnio/IoFuture;
     115: aload_0
     116: aload_1
     117: invokespecial #29                 // Method createNotifier:(Lio/undertow/client/ClientCallback;)Lorg/xnio/IoFuture$Notifier;
     120: aconst_null
     121: invokeinterface #30,  3           // InterfaceMethod org/xnio/IoFuture.addNotifier:(Lorg/xnio/IoFuture$Notifier;Ljava/lang/Object;)Lorg/xnio/IoFuture;
     126: pop
     127: goto          193
     130: aload         5
     132: aload         4
     134: aload_2
     135: new           #23                 // class java/net/InetSocketAddress
     138: dup
     139: aload_3
     140: invokevirtual #24                 // Method java/net/URI.getHost:()Ljava/lang/String;
     143: aload_3
     144: invokevirtual #25                 // Method java/net/URI.getPort:()I
     147: iconst_m1
     148: if_icmpne     157
     151: sipush        443
     154: goto          161
     157: aload_3
     158: invokevirtual #25                 // Method java/net/URI.getPort:()I
     161: invokespecial #26                 // Method java/net/InetSocketAddress."<init>":(Ljava/lang/String;I)V
     164: aload_0
     165: aload_1
     166: aload_3
     167: aload         5
     169: aload         6
     171: aload         7
     173: invokespecial #27                 // Method createOpenListener:(Lio/undertow/client/ClientCallback;Ljava/net/URI;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)Lorg/xnio/ChannelListener;
     176: aload         7
     178: invokevirtual #33                 // Method org/xnio/ssl/XnioSsl.openSslConnection:(Lorg/xnio/XnioIoThread;Ljava/net/InetSocketAddress;Ljava/net/InetSocketAddress;Lorg/xnio/ChannelListener;Lorg/xnio/OptionMap;)Lorg/xnio/IoFuture;
     181: aload_0
     182: aload_1
     183: invokespecial #29                 // Method createNotifier:(Lio/undertow/client/ClientCallback;)Lorg/xnio/IoFuture$Notifier;
     186: aconst_null
     187: invokeinterface #30,  3           // InterfaceMethod org/xnio/IoFuture.addNotifier:(Lorg/xnio/IoFuture$Notifier;Ljava/lang/Object;)Lorg/xnio/IoFuture;
     192: pop
     193: return

  private org.xnio.IoFuture$Notifier<org.xnio.StreamConnection, java.lang.Object> createNotifier(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>);
    Code:
       0: new           #34                 // class io/undertow/client/http2/Http2ClientProvider$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #35                 // Method io/undertow/client/http2/Http2ClientProvider$1."<init>":(Lio/undertow/client/http2/Http2ClientProvider;Lio/undertow/client/ClientCallback;)V
       9: areturn

  private org.xnio.ChannelListener<org.xnio.StreamConnection> createOpenListener(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: new           #36                 // class io/undertow/client/http2/Http2ClientProvider$2
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: aload         4
      10: aload         5
      12: invokespecial #37                 // Method io/undertow/client/http2/Http2ClientProvider$2."<init>":(Lio/undertow/client/http2/Http2ClientProvider;Lio/undertow/client/ClientCallback;Ljava/net/URI;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
      15: areturn

  private void handleConnected(org.xnio.StreamConnection, io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_1
       1: aload_2
       2: aload         5
       4: aload         6
       6: new           #38                 // class io/undertow/client/http2/Http2ClientProvider$3
       9: dup
      10: aload_0
      11: aload_2
      12: invokespecial #39                 // Method io/undertow/client/http2/Http2ClientProvider$3."<init>":(Lio/undertow/client/http2/Http2ClientProvider;Lio/undertow/client/ClientCallback;)V
      15: aload_3
      16: invokestatic  #40                 // Method handlePotentialHttp2Connection:(Lorg/xnio/StreamConnection;Lio/undertow/client/ClientCallback;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;Lorg/xnio/ChannelListener;Ljava/net/URI;)V
      19: return

  public static boolean isEnabled();
    Code:
       0: getstatic     #13                 // Field ALPN_PUT_METHOD:Ljava/lang/reflect/Method;
       3: ifnull        10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ireturn

  public static void handlePotentialHttp2Connection(org.xnio.StreamConnection, io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap, org.xnio.ChannelListener<org.xnio.ssl.SslConnection>, java.net.URI);
    Code:
       0: aload_0
       1: checkcast     #41                 // class org/xnio/ssl/SslConnection
       4: astore        6
       6: aload         6
       8: invokestatic  #42                 // Method io/undertow/protocols/ssl/UndertowXnioSsl.getSslEngine:(Lorg/xnio/ssl/SslConnection;)Ljavax/net/ssl/SSLEngine;
      11: astore        7
      13: new           #43                 // class io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider
      16: dup
      17: aload         7
      19: aconst_null
      20: invokespecial #44                 // Method io/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider."<init>":(Ljavax/net/ssl/SSLEngine;Lio/undertow/client/http2/Http2ClientProvider$1;)V
      23: astore        8
      25: getstatic     #13                 // Field ALPN_PUT_METHOD:Ljava/lang/reflect/Method;
      28: aconst_null
      29: iconst_2
      30: anewarray     #45                 // class java/lang/Object
      33: dup
      34: iconst_0
      35: aload         7
      37: aastore
      38: dup
      39: iconst_1
      40: aload         8
      42: aastore
      43: invokevirtual #46                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      46: pop
      47: goto          62
      50: astore        9
      52: aload         4
      54: aload         6
      56: invokeinterface #48,  2           // InterfaceMethod org/xnio/ChannelListener.handleEvent:(Ljava/nio/channels/Channel;)V
      61: return
      62: aload         6
      64: invokevirtual #49                 // Method org/xnio/ssl/SslConnection.startHandshake:()V
      67: aload         6
      69: invokevirtual #50                 // Method org/xnio/ssl/SslConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      72: invokevirtual #51                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
      75: new           #52                 // class io/undertow/client/http2/Http2ClientProvider$4
      78: dup
      79: aload         8
      81: aload         6
      83: aload         4
      85: aload_1
      86: aload_0
      87: aload_2
      88: aload_3
      89: aload         5
      91: aload         7
      93: invokespecial #53                 // Method io/undertow/client/http2/Http2ClientProvider$4."<init>":(Lio/undertow/client/http2/Http2ClientProvider$Http2SelectionProvider;Lorg/xnio/ssl/SslConnection;Lorg/xnio/ChannelListener;Lio/undertow/client/ClientCallback;Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;Ljava/net/URI;Ljavax/net/ssl/SSLEngine;)V
      96: invokeinterface #54,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     101: aload         6
     103: invokevirtual #50                 // Method org/xnio/ssl/SslConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     106: invokevirtual #55                 // Method org/xnio/conduits/ConduitStreamSourceChannel.resumeReads:()V
     109: goto          142
     112: astore        9
     114: aload_1
     115: aload         9
     117: invokeinterface #16,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
     122: goto          142
     125: astore        9
     127: aload_1
     128: new           #56                 // class java/io/IOException
     131: dup
     132: aload         9
     134: invokespecial #58                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     137: invokeinterface #16,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
     142: return
    Exception table:
       from    to  target type
          25    47    50   Class java/lang/Exception
          62   109   112   Class java/io/IOException
          62   109   125   Class java/lang/Throwable

  private static io.undertow.client.http2.Http2ClientConnection createHttp2Channel(org.xnio.StreamConnection, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap, java.lang.String);
    Code:
       0: aload_2
       1: getstatic     #59                 // Field io/undertow/UndertowOptions.ENABLE_STATISTICS:Lorg/xnio/Option;
       4: iconst_0
       5: invokevirtual #60                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
       8: ifeq          84
      11: new           #61                 // class io/undertow/client/http2/Http2ClientProvider$ClientStatisticsImpl
      14: dup
      15: aconst_null
      16: invokespecial #62                 // Method io/undertow/client/http2/Http2ClientProvider$ClientStatisticsImpl."<init>":(Lio/undertow/client/http2/Http2ClientProvider$1;)V
      19: astore        4
      21: aload_0
      22: invokevirtual #63                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      25: new           #64                 // class io/undertow/conduits/BytesSentStreamSinkConduit
      28: dup
      29: aload_0
      30: invokevirtual #63                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      33: invokevirtual #65                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      36: new           #66                 // class io/undertow/client/http2/Http2ClientProvider$5
      39: dup
      40: aload         4
      42: invokespecial #67                 // Method io/undertow/client/http2/Http2ClientProvider$5."<init>":(Lio/undertow/client/http2/Http2ClientProvider$ClientStatisticsImpl;)V
      45: invokespecial #68                 // Method io/undertow/conduits/BytesSentStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/conduits/ByteActivityCallback;)V
      48: invokevirtual #69                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
      51: aload_0
      52: invokevirtual #70                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      55: new           #71                 // class io/undertow/conduits/BytesReceivedStreamSourceConduit
      58: dup
      59: aload_0
      60: invokevirtual #70                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
      63: invokevirtual #72                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
      66: new           #73                 // class io/undertow/client/http2/Http2ClientProvider$6
      69: dup
      70: aload         4
      72: invokespecial #74                 // Method io/undertow/client/http2/Http2ClientProvider$6."<init>":(Lio/undertow/client/http2/Http2ClientProvider$ClientStatisticsImpl;)V
      75: invokespecial #75                 // Method io/undertow/conduits/BytesReceivedStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/conduits/ByteActivityCallback;)V
      78: invokevirtual #76                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
      81: goto          87
      84: aconst_null
      85: astore        4
      87: new           #77                 // class io/undertow/protocols/http2/Http2Channel
      90: dup
      91: aload_0
      92: aconst_null
      93: aload_1
      94: aconst_null
      95: iconst_1
      96: iconst_0
      97: aload_2
      98: invokespecial #78                 // Method io/undertow/protocols/http2/Http2Channel."<init>":(Lorg/xnio/StreamConnection;Ljava/lang/String;Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/PooledByteBuffer;ZZLorg/xnio/OptionMap;)V
     101: astore        5
     103: new           #79                 // class io/undertow/client/http2/Http2ClientConnection
     106: dup
     107: aload         5
     109: iconst_0
     110: aload_3
     111: aload         4
     113: invokespecial #80                 // Method io/undertow/client/http2/Http2ClientConnection."<init>":(Lio/undertow/protocols/http2/Http2Channel;ZLjava/lang/String;Lio/undertow/client/ClientStatistics;)V
     116: areturn

  static void access$000(io.undertow.client.http2.Http2ClientProvider, org.xnio.StreamConnection, io.undertow.client.ClientCallback, java.net.URI, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokespecial #4                  // Method handleConnected:(Lorg/xnio/StreamConnection;Lio/undertow/client/ClientCallback;Ljava/net/URI;Lorg/xnio/ssl/XnioSsl;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
      13: return

  static io.undertow.client.http2.Http2ClientConnection access$300(org.xnio.StreamConnection, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #3                  // Method createHttp2Channel:(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;Ljava/lang/String;)Lio/undertow/client/http2/Http2ClientConnection;
       7: areturn

  static java.lang.String access$400();
    Code:
       0: getstatic     #2                  // Field PROTOCOL_KEY:Ljava/lang/String;
       3: areturn

  static java.util.List access$800();
    Code:
       0: getstatic     #1                  // Field PROTOCOLS:Ljava/util/List;
       3: areturn

  static {};
    Code:
       0: new           #81                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #83                 // class io/undertow/client/http2/Http2ClientProvider
       9: invokevirtual #84                 // Method java/lang/Class.getName:()Ljava/lang/String;
      12: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: ldc           #86                 // String .protocol
      17: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: invokevirtual #87                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      23: putstatic     #2                  // Field PROTOCOL_KEY:Ljava/lang/String;
      26: iconst_2
      27: anewarray     #9                  // class java/lang/String
      30: dup
      31: iconst_0
      32: ldc           #10                 // String h2
      34: aastore
      35: dup
      36: iconst_1
      37: ldc           #88                 // String http/1.1
      39: aastore
      40: invokestatic  #11                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      43: invokestatic  #89                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      46: putstatic     #1                  // Field PROTOCOLS:Ljava/util/List;
      49: ldc           #90                 // String org.eclipse.jetty.alpn.ALPN
      51: iconst_0
      52: ldc           #83                 // class io/undertow/client/http2/Http2ClientProvider
      54: invokevirtual #91                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      57: invokestatic  #92                 // Method java/lang/Class.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;
      60: astore_1
      61: aload_1
      62: ldc           #93                 // String put
      64: iconst_2
      65: anewarray     #94                 // class java/lang/Class
      68: dup
      69: iconst_0
      70: ldc           #95                 // class javax/net/ssl/SSLEngine
      72: aastore
      73: dup
      74: iconst_1
      75: ldc           #96                 // String org.eclipse.jetty.alpn.ALPN$Provider
      77: iconst_0
      78: ldc           #83                 // class io/undertow/client/http2/Http2ClientProvider
      80: invokevirtual #91                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      83: invokestatic  #92                 // Method java/lang/Class.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;
      86: aastore
      87: invokevirtual #97                 // Method java/lang/Class.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      90: astore_0
      91: goto          107
      94: astore_1
      95: getstatic     #98                 // Field io/undertow/UndertowLogger.CLIENT_LOGGER:Lio/undertow/UndertowLogger;
      98: ldc           #99                 // String HTTP2
     100: invokeinterface #100,  2          // InterfaceMethod io/undertow/UndertowLogger.jettyALPNNotFound:(Ljava/lang/String;)V
     105: aconst_null
     106: astore_0
     107: aload_0
     108: putstatic     #13                 // Field ALPN_PUT_METHOD:Ljava/lang/reflect/Method;
     111: return
    Exception table:
       from    to  target type
          49    91    94   Class java/lang/Exception
}
