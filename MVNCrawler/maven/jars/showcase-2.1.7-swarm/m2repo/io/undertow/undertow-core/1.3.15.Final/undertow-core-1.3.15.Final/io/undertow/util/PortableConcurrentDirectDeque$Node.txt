Compiled from "PortableConcurrentDirectDeque.java"
final class io.undertow.util.PortableConcurrentDirectDeque$Node<E> {
  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<io.undertow.util.PortableConcurrentDirectDeque$Node, io.undertow.util.PortableConcurrentDirectDeque$Node> prevUpdater;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<io.undertow.util.PortableConcurrentDirectDeque$Node, io.undertow.util.PortableConcurrentDirectDeque$Node> nextUpdater;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<io.undertow.util.PortableConcurrentDirectDeque$Node, java.lang.Object> itemUpdater;

  volatile io.undertow.util.PortableConcurrentDirectDeque$Node<E> prev;

  volatile E item;

  volatile io.undertow.util.PortableConcurrentDirectDeque$Node<E> next;

  io.undertow.util.PortableConcurrentDirectDeque$Node();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  io.undertow.util.PortableConcurrentDirectDeque$Node(E);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field item:Ljava/lang/Object;
       9: return

  boolean casItem(E, E);
    Code:
       0: getstatic     #3                  // Field itemUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  void lazySetNext(io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field next:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       5: return

  boolean casNext(io.undertow.util.PortableConcurrentDirectDeque$Node<E>, io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: getstatic     #6                  // Field nextUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  void lazySetPrev(io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field prev:Lio/undertow/util/PortableConcurrentDirectDeque$Node;
       5: return

  boolean casPrev(io.undertow.util.PortableConcurrentDirectDeque$Node<E>, io.undertow.util.PortableConcurrentDirectDeque$Node<E>);
    Code:
       0: getstatic     #8                  // Field prevUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  static {};
    Code:
       0: ldc           #9                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
       2: ldc           #9                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
       4: ldc           #10                 // String prev
       6: invokestatic  #11                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #8                  // Field prevUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #9                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      14: ldc           #9                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      16: ldc           #12                 // String next
      18: invokestatic  #11                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: putstatic     #6                  // Field nextUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: ldc           #9                  // class io/undertow/util/PortableConcurrentDirectDeque$Node
      26: ldc           #13                 // class java/lang/Object
      28: ldc           #14                 // String item
      30: invokestatic  #11                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      33: putstatic     #3                  // Field itemUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      36: return
}
