Compiled from "SecureHashMap.java"
final class io.undertow.util.SecureHashMap$EntryIterator implements java.util.Iterator<java.util.Map$Entry<K, V>> {
  private final io.undertow.util.SecureHashMap$Table<K, V> table;

  private io.undertow.util.SecureHashMap<K, V>.TableIterator tableIterator;

  private io.undertow.util.SecureHashMap<K, V>.TableIterator removeIterator;

  private int tableIdx;

  private io.undertow.util.SecureHashMap$Item<K, V> next;

  final io.undertow.util.SecureHashMap this$0;

  io.undertow.util.SecureHashMap$EntryIterator(io.undertow.util.SecureHashMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/undertow/util/SecureHashMap;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_0
      11: getfield      #1                  // Field this$0:Lio/undertow/util/SecureHashMap;
      14: invokestatic  #3                  // Method io/undertow/util/SecureHashMap.access$300:(Lio/undertow/util/SecureHashMap;)Lio/undertow/util/SecureHashMap$Table;
      17: putfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      20: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
       4: ifnonnull     113
       7: aload_0
       8: getfield      #6                  // Field tableIdx:I
      11: aload_0
      12: getfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      15: getfield      #7                  // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      18: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      21: if_icmpne     26
      24: iconst_0
      25: ireturn
      26: aload_0
      27: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      30: ifnonnull     75
      33: aload_0
      34: dup
      35: getfield      #6                  // Field tableIdx:I
      38: dup_x1
      39: iconst_1
      40: iadd
      41: putfield      #6                  // Field tableIdx:I
      44: istore_1
      45: aload_0
      46: getfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      49: getfield      #7                  // Field io/undertow/util/SecureHashMap$Table.array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      52: iload_1
      53: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      56: ifnull        75
      59: aload_0
      60: aload_0
      61: getfield      #1                  // Field this$0:Lio/undertow/util/SecureHashMap;
      64: aload_0
      65: getfield      #4                  // Field table:Lio/undertow/util/SecureHashMap$Table;
      68: iload_1
      69: invokestatic  #11                 // Method io/undertow/util/SecureHashMap.access$1200:(Lio/undertow/util/SecureHashMap;Lio/undertow/util/SecureHashMap$Table;I)Lio/undertow/util/SecureHashMap$TableIterator;
      72: putfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      75: aload_0
      76: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      79: ifnull        0
      82: aload_0
      83: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      86: invokevirtual #12                 // Method io/undertow/util/SecureHashMap$TableIterator.hasNext:()Z
      89: ifeq          105
      92: aload_0
      93: aload_0
      94: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      97: invokevirtual #13                 // Method io/undertow/util/SecureHashMap$TableIterator.next:()Lio/undertow/util/SecureHashMap$Item;
     100: putfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
     103: iconst_1
     104: ireturn
     105: aload_0
     106: aconst_null
     107: putfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
     110: goto          0
     113: iconst_1
     114: ireturn

  public java.util.Map$Entry<K, V> next();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method hasNext:()Z
       4: ifeq          43
       7: aload_0
       8: getfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
      11: astore_1
      12: aload_0
      13: aload_0
      14: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      17: putfield      #15                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      20: aload_0
      21: aconst_null
      22: putfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
      25: aload_1
      26: areturn
      27: astore_2
      28: aload_0
      29: aload_0
      30: getfield      #9                  // Field tableIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      33: putfield      #15                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      36: aload_0
      37: aconst_null
      38: putfield      #5                  // Field next:Lio/undertow/util/SecureHashMap$Item;
      41: aload_2
      42: athrow
      43: new           #16                 // class java/util/NoSuchElementException
      46: dup
      47: invokespecial #17                 // Method java/util/NoSuchElementException."<init>":()V
      50: athrow
    Exception table:
       from    to  target type
           7    12    27   any

  public void remove();
    Code:
       0: aload_0
       1: getfield      #15                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
       4: astore_1
       5: aload_1
       6: ifnonnull     17
       9: new           #18                 // class java/lang/IllegalStateException
      12: dup
      13: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":()V
      16: athrow
      17: aload_1
      18: invokevirtual #20                 // Method io/undertow/util/SecureHashMap$TableIterator.remove:()V
      21: aload_0
      22: aconst_null
      23: putfield      #15                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      26: goto          37
      29: astore_2
      30: aload_0
      31: aconst_null
      32: putfield      #15                 // Field removeIterator:Lio/undertow/util/SecureHashMap$TableIterator;
      35: aload_2
      36: athrow
      37: return
    Exception table:
       from    to  target type
          17    21    29   any

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method next:()Ljava/util/Map$Entry;
       4: areturn
}
