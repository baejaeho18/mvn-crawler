Compiled from "Http2ClientConnection.java"
public class io.undertow.client.http2.Http2ClientConnection implements io.undertow.client.ClientConnection {
  static final io.undertow.util.HttpString METHOD;

  static final io.undertow.util.HttpString PATH;

  static final io.undertow.util.HttpString SCHEME;

  static final io.undertow.util.HttpString AUTHORITY;

  static final io.undertow.util.HttpString STATUS;

  private final io.undertow.protocols.http2.Http2Channel http2Channel;

  private final org.xnio.ChannelListener$SimpleSetter<io.undertow.client.ClientConnection> closeSetter;

  private final java.util.Map<java.lang.Integer, io.undertow.client.http2.Http2ClientExchange> currentExchanges;

  private boolean initialUpgradeRequest;

  private final java.lang.String defaultHost;

  private final io.undertow.client.ClientStatistics clientStatistics;

  public io.undertow.client.http2.Http2ClientConnection(io.undertow.protocols.http2.Http2Channel, boolean, java.lang.String, io.undertow.client.ClientStatistics);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class org/xnio/ChannelListener$SimpleSetter
       8: dup
       9: invokespecial #7                  // Method org/xnio/ChannelListener$SimpleSetter."<init>":()V
      12: putfield      #4                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
      15: aload_0
      16: new           #8                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #2                  // Field currentExchanges:Ljava/util/Map;
      26: aload_0
      27: aload_1
      28: putfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
      31: aload_0
      32: aload_3
      33: putfield      #11                 // Field defaultHost:Ljava/lang/String;
      36: aload_0
      37: aload         4
      39: putfield      #12                 // Field clientStatistics:Lio/undertow/client/ClientStatistics;
      42: aload_1
      43: invokevirtual #13                 // Method io/undertow/protocols/http2/Http2Channel.getReceiveSetter:()Lorg/xnio/ChannelListener$Setter;
      46: new           #14                 // class io/undertow/client/http2/Http2ClientConnection$Http2ReceiveListener
      49: dup
      50: aload_0
      51: aconst_null
      52: invokespecial #15                 // Method io/undertow/client/http2/Http2ClientConnection$Http2ReceiveListener."<init>":(Lio/undertow/client/http2/Http2ClientConnection;Lio/undertow/client/http2/Http2ClientConnection$1;)V
      55: invokeinterface #16,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      60: aload_1
      61: invokevirtual #17                 // Method io/undertow/protocols/http2/Http2Channel.resumeReceives:()V
      64: aload_1
      65: new           #18                 // class io/undertow/client/http2/Http2ClientConnection$1
      68: dup
      69: aload_0
      70: invokespecial #19                 // Method io/undertow/client/http2/Http2ClientConnection$1."<init>":(Lio/undertow/client/http2/Http2ClientConnection;)V
      73: invokevirtual #20                 // Method io/undertow/protocols/http2/Http2Channel.addCloseTask:(Lorg/xnio/ChannelListener;)V
      76: aload_0
      77: iload_2
      78: putfield      #1                  // Field initialUpgradeRequest:Z
      81: return

  public io.undertow.client.http2.Http2ClientConnection(io.undertow.protocols.http2.Http2Channel, io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>, io.undertow.client.ClientRequest, java.lang.String, io.undertow.client.ClientStatistics);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class org/xnio/ChannelListener$SimpleSetter
       8: dup
       9: invokespecial #7                  // Method org/xnio/ChannelListener$SimpleSetter."<init>":()V
      12: putfield      #4                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
      15: aload_0
      16: new           #8                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #2                  // Field currentExchanges:Ljava/util/Map;
      26: aload_0
      27: aload_1
      28: putfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
      31: aload_0
      32: aload         4
      34: putfield      #11                 // Field defaultHost:Ljava/lang/String;
      37: aload_0
      38: aload         5
      40: putfield      #12                 // Field clientStatistics:Lio/undertow/client/ClientStatistics;
      43: aload_1
      44: invokevirtual #13                 // Method io/undertow/protocols/http2/Http2Channel.getReceiveSetter:()Lorg/xnio/ChannelListener$Setter;
      47: new           #14                 // class io/undertow/client/http2/Http2ClientConnection$Http2ReceiveListener
      50: dup
      51: aload_0
      52: aconst_null
      53: invokespecial #15                 // Method io/undertow/client/http2/Http2ClientConnection$Http2ReceiveListener."<init>":(Lio/undertow/client/http2/Http2ClientConnection;Lio/undertow/client/http2/Http2ClientConnection$1;)V
      56: invokeinterface #16,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      61: aload_1
      62: invokevirtual #17                 // Method io/undertow/protocols/http2/Http2Channel.resumeReceives:()V
      65: aload_1
      66: new           #21                 // class io/undertow/client/http2/Http2ClientConnection$2
      69: dup
      70: aload_0
      71: invokespecial #22                 // Method io/undertow/client/http2/Http2ClientConnection$2."<init>":(Lio/undertow/client/http2/Http2ClientConnection;)V
      74: invokevirtual #20                 // Method io/undertow/protocols/http2/Http2Channel.addCloseTask:(Lorg/xnio/ChannelListener;)V
      77: aload_0
      78: iconst_0
      79: putfield      #1                  // Field initialUpgradeRequest:Z
      82: new           #23                 // class io/undertow/client/http2/Http2ClientExchange
      85: dup
      86: aload_0
      87: aconst_null
      88: aload_3
      89: invokespecial #24                 // Method io/undertow/client/http2/Http2ClientExchange."<init>":(Lio/undertow/client/ClientConnection;Lio/undertow/protocols/http2/Http2StreamSinkChannel;Lio/undertow/client/ClientRequest;)V
      92: astore        6
      94: aload         6
      96: aload_2
      97: invokevirtual #25                 // Method io/undertow/client/http2/Http2ClientExchange.setResponseListener:(Lio/undertow/client/ClientCallback;)V
     100: aload_0
     101: getfield      #2                  // Field currentExchanges:Ljava/util/Map;
     104: iconst_1
     105: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     108: aload         6
     110: invokeinterface #27,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     115: pop
     116: return

  public void sendRequest(io.undertow.client.ClientRequest, io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>);
    Code:
       0: aload_1
       1: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
       4: getstatic     #29                 // Field PATH:Lio/undertow/util/HttpString;
       7: aload_1
       8: invokevirtual #30                 // Method io/undertow/client/ClientRequest.getPath:()Ljava/lang/String;
      11: invokevirtual #31                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      14: pop
      15: aload_1
      16: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      19: getstatic     #32                 // Field SCHEME:Lio/undertow/util/HttpString;
      22: ldc           #33                 // String https
      24: invokevirtual #31                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      27: pop
      28: aload_1
      29: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      32: getstatic     #34                 // Field METHOD:Lio/undertow/util/HttpString;
      35: aload_1
      36: invokevirtual #35                 // Method io/undertow/client/ClientRequest.getMethod:()Lio/undertow/util/HttpString;
      39: invokevirtual #36                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      42: invokevirtual #31                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      45: pop
      46: aload_1
      47: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      50: getstatic     #37                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
      53: invokevirtual #38                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
      56: astore_3
      57: aload_3
      58: ifnull        76
      61: aload_1
      62: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      65: getstatic     #39                 // Field AUTHORITY:Lio/undertow/util/HttpString;
      68: aload_3
      69: invokevirtual #31                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      72: pop
      73: goto          91
      76: aload_1
      77: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      80: getstatic     #39                 // Field AUTHORITY:Lio/undertow/util/HttpString;
      83: aload_0
      84: getfield      #11                 // Field defaultHost:Ljava/lang/String;
      87: invokevirtual #31                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      90: pop
      91: aload_1
      92: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
      95: getstatic     #37                 // Field io/undertow/util/Headers.HOST:Lio/undertow/util/HttpString;
      98: invokevirtual #40                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     101: pop
     102: iconst_1
     103: istore        4
     105: aload_1
     106: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     109: getstatic     #41                 // Field io/undertow/util/Headers.CONTENT_LENGTH:Lio/undertow/util/HttpString;
     112: invokevirtual #38                 // Method io/undertow/util/HeaderMap.getFirst:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     115: astore        5
     117: aload_1
     118: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     121: getstatic     #42                 // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
     124: invokevirtual #43                 // Method io/undertow/util/HeaderMap.getLast:(Lio/undertow/util/HttpString;)Ljava/lang/String;
     127: astore        6
     129: aload         5
     131: ifnull        174
     134: aload         5
     136: invokestatic  #44                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     139: lstore        7
     141: lload         7
     143: lconst_0
     144: lcmp
     145: ifeq          152
     148: iconst_1
     149: goto          153
     152: iconst_0
     153: istore        4
     155: goto          182
     158: astore        7
     160: aload_0
     161: new           #46                 // class java/io/IOException
     164: dup
     165: aload         7
     167: invokespecial #47                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     170: invokespecial #3                  // Method handleError:(Ljava/io/IOException;)V
     173: return
     174: aload         6
     176: ifnonnull     182
     179: iconst_0
     180: istore        4
     182: aload_1
     183: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     186: getstatic     #48                 // Field io/undertow/util/Headers.CONNECTION:Lio/undertow/util/HttpString;
     189: invokevirtual #40                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     192: pop
     193: aload_1
     194: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     197: getstatic     #49                 // Field io/undertow/util/Headers.KEEP_ALIVE:Lio/undertow/util/HttpString;
     200: invokevirtual #40                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     203: pop
     204: aload_1
     205: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     208: getstatic     #42                 // Field io/undertow/util/Headers.TRANSFER_ENCODING:Lio/undertow/util/HttpString;
     211: invokevirtual #40                 // Method io/undertow/util/HeaderMap.remove:(Lio/undertow/util/HttpString;)Ljava/util/Collection;
     214: pop
     215: aload_1
     216: getstatic     #50                 // Field io/undertow/client/ProxiedRequestAttachments.REMOTE_HOST:Lio/undertow/util/AttachmentKey;
     219: invokevirtual #51                 // Method io/undertow/client/ClientRequest.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
     222: checkcast     #52                 // class java/lang/String
     225: astore        7
     227: aload         7
     229: ifnull        245
     232: aload_1
     233: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     236: getstatic     #53                 // Field io/undertow/util/Headers.X_FORWARDED_FOR:Lio/undertow/util/HttpString;
     239: aload         7
     241: invokevirtual #31                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     244: pop
     245: aload_1
     246: getstatic     #54                 // Field io/undertow/client/ProxiedRequestAttachments.IS_SSL:Lio/undertow/util/AttachmentKey;
     249: invokevirtual #51                 // Method io/undertow/client/ClientRequest.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
     252: checkcast     #55                 // class java/lang/Boolean
     255: astore        8
     257: aload         8
     259: ifnull        270
     262: aload         8
     264: invokevirtual #56                 // Method java/lang/Boolean.booleanValue:()Z
     267: ifne          286
     270: aload_1
     271: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     274: getstatic     #57                 // Field io/undertow/util/Headers.X_FORWARDED_PROTO:Lio/undertow/util/HttpString;
     277: ldc           #58                 // String http
     279: invokevirtual #31                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     282: pop
     283: goto          299
     286: aload_1
     287: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     290: getstatic     #57                 // Field io/undertow/util/Headers.X_FORWARDED_PROTO:Lio/undertow/util/HttpString;
     293: ldc           #33                 // String https
     295: invokevirtual #31                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     298: pop
     299: aload_1
     300: getstatic     #59                 // Field io/undertow/client/ProxiedRequestAttachments.SERVER_NAME:Lio/undertow/util/AttachmentKey;
     303: invokevirtual #51                 // Method io/undertow/client/ClientRequest.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
     306: checkcast     #52                 // class java/lang/String
     309: astore        9
     311: aload         9
     313: ifnull        329
     316: aload_1
     317: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     320: getstatic     #60                 // Field io/undertow/util/Headers.X_FORWARDED_HOST:Lio/undertow/util/HttpString;
     323: aload         9
     325: invokevirtual #31                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
     328: pop
     329: aload_1
     330: getstatic     #61                 // Field io/undertow/client/ProxiedRequestAttachments.SERVER_PORT:Lio/undertow/util/AttachmentKey;
     333: invokevirtual #51                 // Method io/undertow/client/ClientRequest.getAttachment:(Lio/undertow/util/AttachmentKey;)Ljava/lang/Object;
     336: checkcast     #62                 // class java/lang/Integer
     339: astore        10
     341: aload         10
     343: ifnull        363
     346: aload_1
     347: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     350: getstatic     #63                 // Field io/undertow/util/Headers.X_FORWARDED_PORT:Lio/undertow/util/HttpString;
     353: aload         10
     355: invokevirtual #64                 // Method java/lang/Integer.intValue:()I
     358: i2l
     359: invokevirtual #65                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;J)Lio/undertow/util/HeaderMap;
     362: pop
     363: aload_0
     364: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
     367: aload_1
     368: invokevirtual #28                 // Method io/undertow/client/ClientRequest.getRequestHeaders:()Lio/undertow/util/HeaderMap;
     371: invokevirtual #66                 // Method io/undertow/protocols/http2/Http2Channel.createStream:(Lio/undertow/util/HeaderMap;)Lio/undertow/protocols/http2/Http2HeadersStreamSinkChannel;
     374: astore        11
     376: goto          390
     379: astore        12
     381: aload_2
     382: aload         12
     384: invokeinterface #67,  2           // InterfaceMethod io/undertow/client/ClientCallback.failed:(Ljava/io/IOException;)V
     389: return
     390: new           #23                 // class io/undertow/client/http2/Http2ClientExchange
     393: dup
     394: aload_0
     395: aload         11
     397: aload_1
     398: invokespecial #24                 // Method io/undertow/client/http2/Http2ClientExchange."<init>":(Lio/undertow/client/ClientConnection;Lio/undertow/protocols/http2/Http2StreamSinkChannel;Lio/undertow/client/ClientRequest;)V
     401: astore        12
     403: aload_0
     404: getfield      #2                  // Field currentExchanges:Ljava/util/Map;
     407: aload         11
     409: invokevirtual #68                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getStreamId:()I
     412: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     415: aload         12
     417: invokeinterface #27,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     422: pop
     423: aload_2
     424: ifnull        435
     427: aload_2
     428: aload         12
     430: invokeinterface #69,  2           // InterfaceMethod io/undertow/client/ClientCallback.completed:(Ljava/lang/Object;)V
     435: iload         4
     437: ifne          494
     440: aload         11
     442: invokevirtual #70                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.shutdownWrites:()V
     445: aload         11
     447: invokevirtual #71                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.flush:()Z
     450: ifne          480
     453: aload         11
     455: invokevirtual #72                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
     458: aconst_null
     459: new           #73                 // class io/undertow/client/http2/Http2ClientConnection$3
     462: dup
     463: aload_0
     464: invokespecial #74                 // Method io/undertow/client/http2/Http2ClientConnection$3."<init>":(Lio/undertow/client/http2/Http2ClientConnection;)V
     467: invokestatic  #75                 // Method org/xnio/ChannelListeners.flushingChannelListener:(Lorg/xnio/ChannelListener;Lorg/xnio/ChannelExceptionHandler;)Lorg/xnio/ChannelListener;
     470: invokeinterface #16,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     475: aload         11
     477: invokevirtual #76                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.resumeWrites:()V
     480: goto          544
     483: astore        13
     485: aload_0
     486: aload         13
     488: invokespecial #3                  // Method handleError:(Ljava/io/IOException;)V
     491: goto          544
     494: aload         11
     496: invokevirtual #77                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.isWriteResumed:()Z
     499: ifne          544
     502: aload         11
     504: invokevirtual #71                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.flush:()Z
     507: ifne          533
     510: aload         11
     512: invokevirtual #72                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
     515: new           #78                 // class io/undertow/client/http2/Http2ClientConnection$4
     518: dup
     519: aload_0
     520: invokespecial #79                 // Method io/undertow/client/http2/Http2ClientConnection$4."<init>":(Lio/undertow/client/http2/Http2ClientConnection;)V
     523: invokeinterface #16,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     528: aload         11
     530: invokevirtual #76                 // Method io/undertow/protocols/http2/Http2HeadersStreamSinkChannel.resumeWrites:()V
     533: goto          544
     536: astore        13
     538: aload_0
     539: aload         13
     541: invokespecial #3                  // Method handleError:(Ljava/io/IOException;)V
     544: return
    Exception table:
       from    to  target type
         134   155   158   Class java/lang/NumberFormatException
         363   376   379   Class java/io/IOException
         440   480   483   Class java/io/IOException
         502   533   536   Class java/io/IOException

  private void handleError(java.io.IOException);
    Code:
       0: getstatic     #80                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
       3: aload_1
       4: invokeinterface #81,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
       9: aload_0
      10: invokestatic  #82                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      13: aload_0
      14: getfield      #2                  // Field currentExchanges:Ljava/util/Map;
      17: invokeinterface #83,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      22: invokeinterface #84,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      27: astore_2
      28: aload_2
      29: invokeinterface #85,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          85
      37: aload_2
      38: invokeinterface #86,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #87                 // class java/util/Map$Entry
      46: astore_3
      47: aload_3
      48: invokeinterface #88,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      53: checkcast     #23                 // class io/undertow/client/http2/Http2ClientExchange
      56: aload_1
      57: invokevirtual #89                 // Method io/undertow/client/http2/Http2ClientExchange.failed:(Ljava/io/IOException;)V
      60: goto          82
      63: astore        4
      65: getstatic     #80                 // Field io/undertow/UndertowLogger.REQUEST_IO_LOGGER:Lio/undertow/UndertowLogger;
      68: new           #46                 // class java/io/IOException
      71: dup
      72: aload         4
      74: invokespecial #47                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
      77: invokeinterface #81,  2           // InterfaceMethod io/undertow/UndertowLogger.ioException:(Ljava/io/IOException;)V
      82: goto          28
      85: return
    Exception table:
       from    to  target type
          47    60    63   Class java/lang/Exception

  public org.xnio.StreamConnection performUpgrade() throws java.io.IOException;
    Code:
       0: getstatic     #91                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #92,  1           // InterfaceMethod io/undertow/UndertowMessages.upgradeNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  public io.undertow.connector.ByteBufferPool getBufferPool();
    Code:
       0: aload_0
       1: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #93                 // Method io/undertow/protocols/http2/Http2Channel.getBufferPool:()Lio/undertow/connector/ByteBufferPool;
       7: areturn

  public java.net.SocketAddress getPeerAddress();
    Code:
       0: aload_0
       1: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #94                 // Method io/undertow/protocols/http2/Http2Channel.getPeerAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getPeerAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #95                 // Method io/undertow/protocols/http2/Http2Channel.getPeerAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.ChannelListener$Setter<? extends io.undertow.client.ClientConnection> getCloseSetter();
    Code:
       0: aload_0
       1: getfield      #4                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
       4: areturn

  public java.net.SocketAddress getLocalAddress();
    Code:
       0: aload_0
       1: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #96                 // Method io/undertow/protocols/http2/Http2Channel.getLocalAddress:()Ljava/net/SocketAddress;
       7: areturn

  public <A extends java.net.SocketAddress> A getLocalAddress(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: aload_1
       5: invokevirtual #97                 // Method io/undertow/protocols/http2/Http2Channel.getLocalAddress:(Ljava/lang/Class;)Ljava/net/SocketAddress;
       8: areturn

  public org.xnio.XnioWorker getWorker();
    Code:
       0: aload_0
       1: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #98                 // Method io/undertow/protocols/http2/Http2Channel.getWorker:()Lorg/xnio/XnioWorker;
       7: areturn

  public org.xnio.XnioIoThread getIoThread();
    Code:
       0: aload_0
       1: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #99                 // Method io/undertow/protocols/http2/Http2Channel.getIoThread:()Lorg/xnio/XnioIoThread;
       7: areturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: invokevirtual #100                // Method io/undertow/protocols/http2/Http2Channel.isOpen:()Z
       7: ifeq          34
      10: aload_0
      11: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
      14: invokevirtual #101                // Method io/undertow/protocols/http2/Http2Channel.isPeerGoneAway:()Z
      17: ifne          34
      20: aload_0
      21: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
      24: invokevirtual #102                // Method io/undertow/protocols/http2/Http2Channel.isThisGoneAway:()Z
      27: ifne          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field http2Channel:Lio/undertow/protocols/http2/Http2Channel;
       4: iconst_0
       5: invokevirtual #103                // Method io/undertow/protocols/http2/Http2Channel.sendGoAway:(I)V
       8: return

  public boolean supportsOption(org.xnio.Option<?>);
    Code:
       0: iconst_0
       1: ireturn

  public <T> T getOption(org.xnio.Option<T>) throws java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public <T> T setOption(org.xnio.Option<T>, T) throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public boolean isUpgraded();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isPushSupported();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isMultiplexingSupported();
    Code:
       0: iconst_1
       1: ireturn

  public io.undertow.client.ClientStatistics getStatistics();
    Code:
       0: aload_0
       1: getfield      #12                 // Field clientStatistics:Lio/undertow/client/ClientStatistics;
       4: areturn

  public boolean isUpgradeSupported();
    Code:
       0: iconst_0
       1: ireturn

  static org.xnio.ChannelListener$SimpleSetter access$100(io.undertow.client.http2.Http2ClientConnection);
    Code:
       0: aload_0
       1: getfield      #4                  // Field closeSetter:Lorg/xnio/ChannelListener$SimpleSetter;
       4: areturn

  static void access$200(io.undertow.client.http2.Http2ClientConnection, java.io.IOException);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method handleError:(Ljava/io/IOException;)V
       5: return

  static java.util.Map access$300(io.undertow.client.http2.Http2ClientConnection);
    Code:
       0: aload_0
       1: getfield      #2                  // Field currentExchanges:Ljava/util/Map;
       4: areturn

  static boolean access$400(io.undertow.client.http2.Http2ClientConnection);
    Code:
       0: aload_0
       1: getfield      #1                  // Field initialUpgradeRequest:Z
       4: ireturn

  static boolean access$402(io.undertow.client.http2.Http2ClientConnection, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #1                  // Field initialUpgradeRequest:Z
       6: ireturn

  static {};
    Code:
       0: new           #104                // class io/undertow/util/HttpString
       3: dup
       4: ldc           #105                // String :method
       6: invokespecial #106                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
       9: putstatic     #34                 // Field METHOD:Lio/undertow/util/HttpString;
      12: new           #104                // class io/undertow/util/HttpString
      15: dup
      16: ldc           #107                // String :path
      18: invokespecial #106                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      21: putstatic     #29                 // Field PATH:Lio/undertow/util/HttpString;
      24: new           #104                // class io/undertow/util/HttpString
      27: dup
      28: ldc           #108                // String :scheme
      30: invokespecial #106                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      33: putstatic     #32                 // Field SCHEME:Lio/undertow/util/HttpString;
      36: new           #104                // class io/undertow/util/HttpString
      39: dup
      40: ldc           #109                // String :authority
      42: invokespecial #106                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      45: putstatic     #39                 // Field AUTHORITY:Lio/undertow/util/HttpString;
      48: new           #104                // class io/undertow/util/HttpString
      51: dup
      52: ldc           #110                // String :status
      54: invokespecial #106                // Method io/undertow/util/HttpString."<init>":(Ljava/lang/String;)V
      57: putstatic     #111                // Field STATUS:Lio/undertow/util/HttpString;
      60: return
}
