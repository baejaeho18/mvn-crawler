Compiled from "FlexBase64.java"
public class io.undertow.util.FlexBase64$DecoderOutputStream extends java.io.OutputStream {
  private final java.io.OutputStream output;

  private final byte[] buffer;

  private final io.undertow.util.FlexBase64$Decoder decoder;

  private int pos;

  private byte[] one;

  private io.undertow.util.FlexBase64$DecoderOutputStream(java.io.OutputStream);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        8192
       5: invokespecial #2                  // Method "<init>":(Ljava/io/OutputStream;I)V
       8: return

  private io.undertow.util.FlexBase64$DecoderOutputStream(java.io.OutputStream, int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #4                  // Field pos:I
       9: aload_0
      10: aload_1
      11: putfield      #5                  // Field output:Ljava/io/OutputStream;
      14: aload_0
      15: iload_2
      16: newarray       byte
      18: putfield      #6                  // Field buffer:[B
      21: aload_0
      22: invokestatic  #7                  // Method io/undertow/util/FlexBase64.createDecoder:()Lio/undertow/util/FlexBase64$Decoder;
      25: putfield      #8                  // Field decoder:Lio/undertow/util/FlexBase64$Decoder;
      28: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field buffer:[B
       4: astore        4
       6: aload_0
       7: getfield      #8                  // Field decoder:Lio/undertow/util/FlexBase64$Decoder;
      10: astore        5
      12: aload_0
      13: getfield      #4                  // Field pos:I
      16: istore        6
      18: iload_2
      19: iload_3
      20: iadd
      21: istore        7
      23: iload_2
      24: istore        8
      26: iload         8
      28: iload         7
      30: if_icmpge     96
      33: aload         5
      35: aload_1
      36: iload         8
      38: iload         7
      40: aload         4
      42: iload         6
      44: aload         4
      46: arraylength
      47: invokevirtual #9                  // Method io/undertow/util/FlexBase64$Decoder.decode:([BII[BII)I
      50: istore        6
      52: aload         5
      54: invokevirtual #10                 // Method io/undertow/util/FlexBase64$Decoder.getLastInputPosition:()I
      57: istore        9
      59: iload         9
      61: iload         8
      63: if_icmpeq     74
      66: iload         6
      68: aload         4
      70: arraylength
      71: if_icmplt     89
      74: aload_0
      75: getfield      #5                  // Field output:Ljava/io/OutputStream;
      78: aload         4
      80: iconst_0
      81: iload         6
      83: invokevirtual #11                 // Method java/io/OutputStream.write:([BII)V
      86: iconst_0
      87: istore        6
      89: iload         9
      91: istore        8
      93: goto          26
      96: aload_0
      97: iload         6
      99: putfield      #4                  // Field pos:I
     102: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field one:[B
       4: astore_2
       5: aload_2
       6: ifnonnull     18
       9: aload_0
      10: iconst_1
      11: newarray       byte
      13: dup
      14: astore_2
      15: putfield      #12                 // Field one:[B
      18: aload_2
      19: iconst_0
      20: iload_1
      21: i2b
      22: bastore
      23: aload_0
      24: aload_2
      25: iconst_0
      26: iconst_1
      27: invokevirtual #13                 // Method write:([BII)V
      30: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field output:Ljava/io/OutputStream;
       4: astore_1
       5: aload_1
       6: aload_0
       7: getfield      #6                  // Field buffer:[B
      10: iconst_0
      11: aload_0
      12: getfield      #4                  // Field pos:I
      15: invokevirtual #11                 // Method java/io/OutputStream.write:([BII)V
      18: aload_1
      19: invokevirtual #14                 // Method java/io/OutputStream.flush:()V
      22: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method flush:()V
       4: goto          8
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field output:Ljava/io/OutputStream;
      12: invokevirtual #14                 // Method java/io/OutputStream.flush:()V
      15: goto          19
      18: astore_1
      19: aload_0
      20: getfield      #5                  // Field output:Ljava/io/OutputStream;
      23: invokevirtual #17                 // Method java/io/OutputStream.close:()V
      26: return
    Exception table:
       from    to  target type
           0     4     7   Class java/io/IOException
           8    15    18   Class java/io/IOException

  io.undertow.util.FlexBase64$DecoderOutputStream(java.io.OutputStream, int, io.undertow.util.FlexBase64$1);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #2                  // Method "<init>":(Ljava/io/OutputStream;I)V
       6: return

  io.undertow.util.FlexBase64$DecoderOutputStream(java.io.OutputStream, io.undertow.util.FlexBase64$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljava/io/OutputStream;)V
       5: return
}
