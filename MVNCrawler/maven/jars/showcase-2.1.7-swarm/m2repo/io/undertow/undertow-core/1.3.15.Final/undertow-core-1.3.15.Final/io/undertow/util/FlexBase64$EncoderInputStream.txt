Compiled from "FlexBase64.java"
public class io.undertow.util.FlexBase64$EncoderInputStream extends java.io.InputStream {
  private final java.io.InputStream input;

  private final byte[] buffer;

  private final byte[] overflow;

  private int overflowPos;

  private int overflowLimit;

  private final io.undertow.util.FlexBase64$Encoder encoder;

  private int pos;

  private int limit;

  private byte[] one;

  private boolean complete;

  private io.undertow.util.FlexBase64$EncoderInputStream(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        8192
       5: iconst_1
       6: iconst_0
       7: invokespecial #2                  // Method "<init>":(Ljava/io/InputStream;IZZ)V
      10: return

  private io.undertow.util.FlexBase64$EncoderInputStream(java.io.InputStream, int, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: bipush        6
       7: newarray       byte
       9: putfield      #4                  // Field overflow:[B
      12: aload_0
      13: iconst_0
      14: putfield      #5                  // Field pos:I
      17: aload_0
      18: iconst_0
      19: putfield      #6                  // Field limit:I
      22: aload_0
      23: aload_1
      24: putfield      #7                  // Field input:Ljava/io/InputStream;
      27: aload_0
      28: iload_2
      29: newarray       byte
      31: putfield      #8                  // Field buffer:[B
      34: aload_0
      35: new           #9                  // class io/undertow/util/FlexBase64$Encoder
      38: dup
      39: iload_3
      40: iload         4
      42: aconst_null
      43: invokespecial #10                 // Method io/undertow/util/FlexBase64$Encoder."<init>":(ZZLio/undertow/util/FlexBase64$1;)V
      46: putfield      #11                 // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
      49: return

  private int fill() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field buffer:[B
       4: astore_1
       5: aload_0
       6: getfield      #7                  // Field input:Ljava/io/InputStream;
       9: aload_1
      10: iconst_0
      11: aload_1
      12: arraylength
      13: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
      16: istore_2
      17: aload_0
      18: iconst_0
      19: putfield      #5                  // Field pos:I
      22: aload_0
      23: iload_2
      24: putfield      #6                  // Field limit:I
      27: iload_2
      28: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field one:[B
       4: astore_1
       5: aload_1
       6: ifnonnull     18
       9: aload_0
      10: iconst_1
      11: newarray       byte
      13: dup_x1
      14: putfield      #13                 // Field one:[B
      17: astore_1
      18: aload_0
      19: aload_1
      20: iconst_0
      21: iconst_1
      22: invokevirtual #14                 // Method read:([BII)I
      25: istore_2
      26: iload_2
      27: ifle          40
      30: aload_1
      31: iconst_0
      32: baload
      33: sipush        255
      36: iand
      37: goto          41
      40: iconst_m1
      41: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field buffer:[B
       4: astore        4
       6: aload_0
       7: getfield      #4                  // Field overflow:[B
      10: astore        5
      12: aload_0
      13: getfield      #15                 // Field overflowPos:I
      16: istore        6
      18: aload_0
      19: getfield      #16                 // Field overflowLimit:I
      22: istore        7
      24: aload_0
      25: getfield      #17                 // Field complete:Z
      28: istore        8
      30: aload_0
      31: getfield      #11                 // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
      34: invokestatic  #18                 // Method io/undertow/util/FlexBase64$Encoder.access$2100:(Lio/undertow/util/FlexBase64$Encoder;)Z
      37: istore        9
      39: iconst_0
      40: istore        10
      42: iload         6
      44: iload         7
      46: if_icmpge     91
      49: aload_0
      50: aload_1
      51: iload_2
      52: iload_3
      53: aload         5
      55: iload         6
      57: iload         7
      59: invokespecial #19                 // Method copyOverflow:([BII[BII)I
      62: istore        10
      64: iload_3
      65: iload         10
      67: if_icmple     75
      70: iload         8
      72: ifeq          78
      75: iload         10
      77: ireturn
      78: iload_3
      79: iload         10
      81: isub
      82: istore_3
      83: iload_2
      84: iload         10
      86: iadd
      87: istore_2
      88: goto          98
      91: iload         8
      93: ifeq          98
      96: iconst_m1
      97: ireturn
      98: aload         4
     100: astore        11
     102: aload_0
     103: getfield      #5                  // Field pos:I
     106: istore        12
     108: aload_0
     109: getfield      #6                  // Field limit:I
     112: istore        13
     114: iconst_1
     115: istore        14
     117: iload         12
     119: iload         13
     121: if_icmplt     296
     124: iload_3
     125: aload         11
     127: arraylength
     128: if_icmple     188
     131: iload_3
     132: iconst_4
     133: idiv
     134: iconst_3
     135: imul
     136: iconst_3
     137: isub
     138: istore        15
     140: iload         9
     142: ifeq          159
     145: iload         15
     147: iload         15
     149: bipush        76
     151: idiv
     152: iconst_2
     153: imul
     154: iconst_2
     155: iadd
     156: isub
     157: istore        15
     159: iload         15
     161: newarray       byte
     163: astore        11
     165: aload_0
     166: getfield      #7                  // Field input:Ljava/io/InputStream;
     169: aload         11
     171: iconst_0
     172: iload         15
     174: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
     177: istore        13
     179: iconst_0
     180: istore        12
     182: iconst_0
     183: istore        14
     185: goto          197
     188: aload_0
     189: invokespecial #20                 // Method fill:()I
     192: istore        13
     194: iconst_0
     195: istore        12
     197: iload         13
     199: ifgt          296
     202: aload_0
     203: iconst_1
     204: putfield      #17                 // Field complete:Z
     207: iload_3
     208: iload         9
     210: ifeq          217
     213: iconst_4
     214: goto          218
     217: iconst_2
     218: if_icmpge     268
     221: aload_0
     222: getfield      #11                 // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
     225: aload         5
     227: iconst_0
     228: invokevirtual #21                 // Method io/undertow/util/FlexBase64$Encoder.complete:([BI)I
     231: istore        7
     233: aload_0
     234: iload         7
     236: putfield      #16                 // Field overflowLimit:I
     239: aload_0
     240: aload_1
     241: iload_2
     242: iload_3
     243: aload         5
     245: iconst_0
     246: iload         7
     248: invokespecial #19                 // Method copyOverflow:([BII[BII)I
     251: iload         10
     253: iadd
     254: istore        15
     256: iload         15
     258: ifne          265
     261: iconst_m1
     262: goto          267
     265: iload         15
     267: ireturn
     268: aload_0
     269: getfield      #11                 // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
     272: aload_1
     273: iload_2
     274: invokevirtual #21                 // Method io/undertow/util/FlexBase64$Encoder.complete:([BI)I
     277: iload_2
     278: isub
     279: iload         10
     281: iadd
     282: istore        15
     284: iload         15
     286: ifne          293
     289: iconst_m1
     290: goto          295
     293: iload         15
     295: ireturn
     296: iload_3
     297: iload         9
     299: ifeq          307
     302: bipush        6
     304: goto          308
     307: iconst_4
     308: if_icmpge     365
     311: aload_0
     312: getfield      #11                 // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
     315: aload         11
     317: iload         12
     319: iload         13
     321: aload         5
     323: iconst_0
     324: aload         5
     326: arraylength
     327: invokevirtual #22                 // Method io/undertow/util/FlexBase64$Encoder.encode:([BII[BII)I
     330: istore        7
     332: aload_0
     333: iload         7
     335: putfield      #16                 // Field overflowLimit:I
     338: aload_0
     339: aload_0
     340: getfield      #11                 // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
     343: invokevirtual #23                 // Method io/undertow/util/FlexBase64$Encoder.getLastInputPosition:()I
     346: putfield      #5                  // Field pos:I
     349: aload_0
     350: aload_1
     351: iload_2
     352: iload_3
     353: aload         5
     355: iconst_0
     356: iload         7
     358: invokespecial #19                 // Method copyOverflow:([BII[BII)I
     361: iload         10
     363: iadd
     364: ireturn
     365: aload_0
     366: getfield      #11                 // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
     369: aload         11
     371: iload         12
     373: iload         13
     375: aload_1
     376: iload_2
     377: iload_2
     378: iload_3
     379: iadd
     380: invokevirtual #22                 // Method io/undertow/util/FlexBase64$Encoder.encode:([BII[BII)I
     383: iload_2
     384: isub
     385: istore        15
     387: iload         14
     389: ifeq          403
     392: aload_0
     393: aload_0
     394: getfield      #11                 // Field encoder:Lio/undertow/util/FlexBase64$Encoder;
     397: invokevirtual #23                 // Method io/undertow/util/FlexBase64$Encoder.getLastInputPosition:()I
     400: putfield      #5                  // Field pos:I
     403: iload         15
     405: ifle          414
     408: iload         15
     410: iload         10
     412: iadd
     413: ireturn
     414: goto          98

  private int copyOverflow(byte[], int, int, byte[], int, int);
    Code:
       0: iload         6
       2: iload         5
       4: isub
       5: istore        6
       7: iload         6
       9: iload_3
      10: if_icmpgt     18
      13: iload         6
      15: goto          19
      18: iload_3
      19: istore_3
      20: aload         4
      22: iload         5
      24: aload_1
      25: iload_2
      26: iload_3
      27: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      30: aload_0
      31: iload         5
      33: iload_3
      34: iadd
      35: putfield      #15                 // Field overflowPos:I
      38: iload_3
      39: ireturn

  io.undertow.util.FlexBase64$EncoderInputStream(java.io.InputStream, int, boolean, boolean, io.undertow.util.FlexBase64$1);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokespecial #2                  // Method "<init>":(Ljava/io/InputStream;IZZ)V
       9: return

  io.undertow.util.FlexBase64$EncoderInputStream(java.io.InputStream, io.undertow.util.FlexBase64$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljava/io/InputStream;)V
       5: return
}
