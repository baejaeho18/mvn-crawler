Compiled from "AllowedContentEncodings.java"
public class io.undertow.server.handlers.encoding.AllowedContentEncodings implements io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit> {
  public static final io.undertow.util.AttachmentKey<io.undertow.server.handlers.encoding.AllowedContentEncodings> ATTACHMENT_KEY;

  private final io.undertow.server.HttpServerExchange exchange;

  private final java.util.List<io.undertow.server.handlers.encoding.EncodingMapping> encodings;

  public io.undertow.server.handlers.encoding.AllowedContentEncodings(io.undertow.server.HttpServerExchange, java.util.List<io.undertow.server.handlers.encoding.EncodingMapping>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field encodings:Ljava/util/List;
      14: return

  public java.lang.String getCurrentContentEncoding();
    Code:
       0: aload_0
       1: getfield      #3                  // Field encodings:Ljava/util/List;
       4: invokeinterface #4,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          60
      19: aload_1
      20: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #7                  // class io/undertow/server/handlers/encoding/EncodingMapping
      28: astore_2
      29: aload_2
      30: invokevirtual #8                  // Method io/undertow/server/handlers/encoding/EncodingMapping.getAllowed:()Lio/undertow/predicate/Predicate;
      33: ifnull        52
      36: aload_2
      37: invokevirtual #8                  // Method io/undertow/server/handlers/encoding/EncodingMapping.getAllowed:()Lio/undertow/predicate/Predicate;
      40: aload_0
      41: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      44: invokeinterface #9,  2            // InterfaceMethod io/undertow/predicate/Predicate.resolve:(Lio/undertow/server/HttpServerExchange;)Z
      49: ifeq          57
      52: aload_2
      53: invokevirtual #10                 // Method io/undertow/server/handlers/encoding/EncodingMapping.getName:()Ljava/lang/String;
      56: areturn
      57: goto          10
      60: getstatic     #11                 // Field io/undertow/util/Headers.IDENTITY:Lio/undertow/util/HttpString;
      63: invokevirtual #12                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      66: areturn

  public io.undertow.server.handlers.encoding.EncodingMapping getEncoding();
    Code:
       0: aload_0
       1: getfield      #3                  // Field encodings:Ljava/util/List;
       4: invokeinterface #4,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          57
      19: aload_1
      20: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #7                  // class io/undertow/server/handlers/encoding/EncodingMapping
      28: astore_2
      29: aload_2
      30: invokevirtual #8                  // Method io/undertow/server/handlers/encoding/EncodingMapping.getAllowed:()Lio/undertow/predicate/Predicate;
      33: ifnull        52
      36: aload_2
      37: invokevirtual #8                  // Method io/undertow/server/handlers/encoding/EncodingMapping.getAllowed:()Lio/undertow/predicate/Predicate;
      40: aload_0
      41: getfield      #2                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      44: invokeinterface #9,  2            // InterfaceMethod io/undertow/predicate/Predicate.resolve:(Lio/undertow/server/HttpServerExchange;)Z
      49: ifeq          54
      52: aload_2
      53: areturn
      54: goto          10
      57: aconst_null
      58: areturn

  public boolean isIdentity();
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getCurrentContentEncoding:()Ljava/lang/String;
       4: getstatic     #11                 // Field io/undertow/util/Headers.IDENTITY:Lio/undertow/util/HttpString;
       7: invokevirtual #12                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
      10: invokevirtual #14                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      13: ireturn

  public boolean isNoEncodingsAllowed();
    Code:
       0: aload_0
       1: getfield      #3                  // Field encodings:Ljava/util/List;
       4: invokeinterface #15,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       9: ireturn

  public org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory<org.xnio.conduits.StreamSinkConduit>, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_2
       1: invokevirtual #16                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
       4: getstatic     #17                 // Field io/undertow/util/Headers.CONTENT_ENCODING:Lio/undertow/util/HttpString;
       7: invokevirtual #18                 // Method io/undertow/util/HeaderMap.contains:(Lio/undertow/util/HttpString;)Z
      10: ifeq          23
      13: aload_1
      14: invokeinterface #19,  1           // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
      19: checkcast     #20                 // class org/xnio/conduits/StreamSinkConduit
      22: areturn
      23: aload_2
      24: invokevirtual #21                 // Method io/undertow/server/HttpServerExchange.getResponseContentLength:()J
      27: lconst_0
      28: lcmp
      29: ifeq          119
      32: aload_2
      33: invokevirtual #22                 // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
      36: sipush        204
      39: if_icmpeq     119
      42: aload_2
      43: invokevirtual #22                 // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
      46: sipush        304
      49: if_icmpeq     119
      52: aload_0
      53: invokevirtual #24                 // Method getEncoding:()Lio/undertow/server/handlers/encoding/EncodingMapping;
      56: astore_3
      57: aload_3
      58: ifnull        119
      61: aload_2
      62: invokevirtual #16                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
      65: getstatic     #17                 // Field io/undertow/util/Headers.CONTENT_ENCODING:Lio/undertow/util/HttpString;
      68: aload_3
      69: invokevirtual #10                 // Method io/undertow/server/handlers/encoding/EncodingMapping.getName:()Ljava/lang/String;
      72: invokevirtual #25                 // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      75: pop
      76: aload_2
      77: invokevirtual #26                 // Method io/undertow/server/HttpServerExchange.getRequestMethod:()Lio/undertow/util/HttpString;
      80: getstatic     #27                 // Field io/undertow/util/Methods.HEAD:Lio/undertow/util/HttpString;
      83: invokevirtual #28                 // Method io/undertow/util/HttpString.equals:(Lio/undertow/util/HttpString;)Z
      86: ifeq          99
      89: aload_1
      90: invokeinterface #19,  1           // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
      95: checkcast     #20                 // class org/xnio/conduits/StreamSinkConduit
      98: areturn
      99: aload_3
     100: invokevirtual #29                 // Method io/undertow/server/handlers/encoding/EncodingMapping.getEncoding:()Lio/undertow/server/handlers/encoding/ContentEncodingProvider;
     103: invokeinterface #30,  1           // InterfaceMethod io/undertow/server/handlers/encoding/ContentEncodingProvider.getResponseWrapper:()Lio/undertow/server/ConduitWrapper;
     108: aload_1
     109: aload_2
     110: invokeinterface #31,  3           // InterfaceMethod io/undertow/server/ConduitWrapper.wrap:(Lio/undertow/util/ConduitFactory;Lio/undertow/server/HttpServerExchange;)Lorg/xnio/conduits/Conduit;
     115: checkcast     #20                 // class org/xnio/conduits/StreamSinkConduit
     118: areturn
     119: aload_1
     120: invokeinterface #19,  1           // InterfaceMethod io/undertow/util/ConduitFactory.create:()Lorg/xnio/conduits/Conduit;
     125: checkcast     #20                 // class org/xnio/conduits/StreamSinkConduit
     128: areturn

  public org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #32                 // Method wrap:(Lio/undertow/util/ConduitFactory;Lio/undertow/server/HttpServerExchange;)Lorg/xnio/conduits/StreamSinkConduit;
       6: areturn

  static {};
    Code:
       0: ldc           #33                 // class io/undertow/server/handlers/encoding/AllowedContentEncodings
       2: invokestatic  #34                 // Method io/undertow/util/AttachmentKey.create:(Ljava/lang/Class;)Lio/undertow/util/AttachmentKey;
       5: putstatic     #35                 // Field ATTACHMENT_KEY:Lio/undertow/util/AttachmentKey;
       8: return
}
