Compiled from "RateLimitingStreamSinkConduit.java"
public class io.undertow.conduits.RateLimitingStreamSinkConduit extends org.xnio.conduits.AbstractStreamSinkConduit<org.xnio.conduits.StreamSinkConduit> {
  private final long time;

  private final int bytes;

  private boolean writesResumed;

  private int byteCount;

  private long startTime;

  private long nextSendTime;

  private boolean scheduled;

  public io.undertow.conduits.RateLimitingStreamSinkConduit(org.xnio.conduits.StreamSinkConduit, int, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method org/xnio/conduits/AbstractStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;)V
       5: aload_0
       6: iconst_0
       7: putfield      #2                  // Field writesResumed:Z
      10: aload_0
      11: iconst_0
      12: putfield      #5                  // Field byteCount:I
      15: aload_0
      16: lconst_0
      17: putfield      #6                  // Field startTime:J
      20: aload_0
      21: lconst_0
      22: putfield      #7                  // Field nextSendTime:J
      25: aload_0
      26: iconst_0
      27: putfield      #3                  // Field scheduled:Z
      30: aload_0
      31: aload_1
      32: invokeinterface #8,  1            // InterfaceMethod org/xnio/conduits/StreamSinkConduit.isWriteResumed:()Z
      37: putfield      #2                  // Field writesResumed:Z
      40: aload_0
      41: aload         5
      43: lload_3
      44: invokevirtual #9                  // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      47: putfield      #10                 // Field time:J
      50: aload_0
      51: iload_2
      52: putfield      #11                 // Field bytes:I
      55: return

  public int write(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #12                 // Method canSend:()Z
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #11                 // Field bytes:I
      13: aload_0
      14: getfield      #5                  // Field byteCount:I
      17: isub
      18: istore_2
      19: aload_1
      20: invokevirtual #13                 // Method java/nio/ByteBuffer.limit:()I
      23: istore_3
      24: aload_1
      25: invokevirtual #14                 // Method java/nio/ByteBuffer.remaining:()I
      28: iload_2
      29: if_icmple     43
      32: aload_1
      33: aload_1
      34: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
      37: iload_2
      38: iadd
      39: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      42: pop
      43: aload_0
      44: aload_1
      45: invokespecial #17                 // Method org/xnio/conduits/AbstractStreamSinkConduit.write:(Ljava/nio/ByteBuffer;)I
      48: istore        4
      50: aload_0
      51: iload         4
      53: i2l
      54: invokespecial #18                 // Method handleWritten:(J)V
      57: iload         4
      59: istore        5
      61: aload_1
      62: iload_3
      63: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      66: pop
      67: iload         5
      69: ireturn
      70: astore        6
      72: aload_1
      73: iload_3
      74: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      77: pop
      78: aload         6
      80: athrow
    Exception table:
       from    to  target type
          43    61    70   any
          70    72    70   any

  public long transferFrom(java.nio.channels.FileChannel, long, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #12                 // Method canSend:()Z
       4: ifne          9
       7: lconst_0
       8: lreturn
       9: aload_0
      10: getfield      #11                 // Field bytes:I
      13: aload_0
      14: getfield      #5                  // Field byteCount:I
      17: isub
      18: istore        6
      20: aload_0
      21: aload_1
      22: lload_2
      23: lload         4
      25: iload         6
      27: i2l
      28: invokestatic  #19                 // Method java/lang/Math.min:(JJ)J
      31: invokespecial #20                 // Method org/xnio/conduits/AbstractStreamSinkConduit.transferFrom:(Ljava/nio/channels/FileChannel;JJ)J
      34: lstore        7
      36: aload_0
      37: lload         7
      39: invokespecial #18                 // Method handleWritten:(J)V
      42: lload         7
      44: lreturn

  public long transferFrom(org.xnio.channels.StreamSourceChannel, long, java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #12                 // Method canSend:()Z
       4: ifne          9
       7: lconst_0
       8: lreturn
       9: aload_0
      10: getfield      #11                 // Field bytes:I
      13: aload_0
      14: getfield      #5                  // Field byteCount:I
      17: isub
      18: istore        5
      20: aload_0
      21: aload_1
      22: lload_2
      23: iload         5
      25: i2l
      26: invokestatic  #19                 // Method java/lang/Math.min:(JJ)J
      29: aload         4
      31: invokespecial #21                 // Method org/xnio/conduits/AbstractStreamSinkConduit.transferFrom:(Lorg/xnio/channels/StreamSourceChannel;JLjava/nio/ByteBuffer;)J
      34: lstore        6
      36: aload_0
      37: lload         6
      39: invokespecial #18                 // Method handleWritten:(J)V
      42: lload         6
      44: lreturn

  public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #12                 // Method canSend:()Z
       4: ifne          9
       7: lconst_0
       8: lreturn
       9: iconst_0
      10: istore        4
      12: iconst_m1
      13: istore        5
      15: aload_0
      16: getfield      #11                 // Field bytes:I
      19: aload_0
      20: getfield      #5                  // Field byteCount:I
      23: isub
      24: i2l
      25: lstore        6
      27: iload_2
      28: istore        8
      30: iload         8
      32: iload_2
      33: iload_3
      34: iadd
      35: if_icmpge     98
      38: aload_1
      39: iload         8
      41: aaload
      42: astore        9
      44: lload         6
      46: aload         9
      48: invokevirtual #14                 // Method java/nio/ByteBuffer.remaining:()I
      51: i2l
      52: lsub
      53: lstore        6
      55: lload         6
      57: lconst_0
      58: lcmp
      59: ifge          92
      62: iload         8
      64: istore        5
      66: aload         9
      68: invokevirtual #13                 // Method java/nio/ByteBuffer.limit:()I
      71: istore        4
      73: aload         9
      75: aload         9
      77: invokevirtual #13                 // Method java/nio/ByteBuffer.limit:()I
      80: i2l
      81: lload         6
      83: ladd
      84: l2i
      85: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      88: pop
      89: goto          98
      92: iinc          8, 1
      95: goto          30
      98: iload         5
     100: iconst_m1
     101: if_icmpne     116
     104: aload_0
     105: aload_1
     106: iload_2
     107: iload_3
     108: invokespecial #22                 // Method org/xnio/conduits/AbstractStreamSinkConduit.write:([Ljava/nio/ByteBuffer;II)J
     111: lstore        8
     113: goto          130
     116: aload_0
     117: aload_1
     118: iload_2
     119: iload         5
     121: iload_2
     122: isub
     123: iconst_1
     124: iadd
     125: invokespecial #22                 // Method org/xnio/conduits/AbstractStreamSinkConduit.write:([Ljava/nio/ByteBuffer;II)J
     128: lstore        8
     130: aload_0
     131: lload         8
     133: invokespecial #18                 // Method handleWritten:(J)V
     136: lload         8
     138: lstore        10
     140: iload         5
     142: iconst_m1
     143: if_icmpeq     160
     146: aload_1
     147: iload         5
     149: aaload
     150: astore        12
     152: aload         12
     154: iload         4
     156: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     159: pop
     160: lload         10
     162: lreturn
     163: astore        13
     165: iload         5
     167: iconst_m1
     168: if_icmpeq     185
     171: aload_1
     172: iload         5
     174: aaload
     175: astore        14
     177: aload         14
     179: iload         4
     181: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     184: pop
     185: aload         13
     187: athrow
    Exception table:
       from    to  target type
          98   140   163   any
         163   165   163   any

  public int writeFinal(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #12                 // Method canSend:()Z
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #11                 // Field bytes:I
      13: aload_0
      14: getfield      #5                  // Field byteCount:I
      17: isub
      18: istore_2
      19: aload_1
      20: invokevirtual #13                 // Method java/nio/ByteBuffer.limit:()I
      23: istore_3
      24: aload_1
      25: invokevirtual #14                 // Method java/nio/ByteBuffer.remaining:()I
      28: iload_2
      29: if_icmple     43
      32: aload_1
      33: aload_1
      34: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
      37: iload_2
      38: iadd
      39: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      42: pop
      43: aload_0
      44: aload_1
      45: invokespecial #23                 // Method org/xnio/conduits/AbstractStreamSinkConduit.writeFinal:(Ljava/nio/ByteBuffer;)I
      48: istore        4
      50: aload_0
      51: iload         4
      53: i2l
      54: invokespecial #18                 // Method handleWritten:(J)V
      57: iload         4
      59: istore        5
      61: aload_1
      62: iload_3
      63: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      66: pop
      67: iload         5
      69: ireturn
      70: astore        6
      72: aload_1
      73: iload_3
      74: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      77: pop
      78: aload         6
      80: athrow
    Exception table:
       from    to  target type
          43    61    70   any
          70    72    70   any

  public long writeFinal(java.nio.ByteBuffer[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #12                 // Method canSend:()Z
       4: ifne          9
       7: lconst_0
       8: lreturn
       9: iconst_0
      10: istore        4
      12: iconst_m1
      13: istore        5
      15: aload_0
      16: getfield      #11                 // Field bytes:I
      19: aload_0
      20: getfield      #5                  // Field byteCount:I
      23: isub
      24: i2l
      25: lstore        6
      27: iload_2
      28: istore        8
      30: iload         8
      32: iload_2
      33: iload_3
      34: iadd
      35: if_icmpge     98
      38: aload_1
      39: iload         8
      41: aaload
      42: astore        9
      44: lload         6
      46: aload         9
      48: invokevirtual #14                 // Method java/nio/ByteBuffer.remaining:()I
      51: i2l
      52: lsub
      53: lstore        6
      55: lload         6
      57: lconst_0
      58: lcmp
      59: ifge          92
      62: iload         8
      64: istore        5
      66: aload         9
      68: invokevirtual #13                 // Method java/nio/ByteBuffer.limit:()I
      71: istore        4
      73: aload         9
      75: aload         9
      77: invokevirtual #13                 // Method java/nio/ByteBuffer.limit:()I
      80: i2l
      81: lload         6
      83: ladd
      84: l2i
      85: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      88: pop
      89: goto          98
      92: iinc          8, 1
      95: goto          30
      98: iload         5
     100: iconst_m1
     101: if_icmpne     116
     104: aload_0
     105: aload_1
     106: iload_2
     107: iload_3
     108: invokespecial #24                 // Method org/xnio/conduits/AbstractStreamSinkConduit.writeFinal:([Ljava/nio/ByteBuffer;II)J
     111: lstore        8
     113: goto          130
     116: aload_0
     117: aload_1
     118: iload_2
     119: iload         5
     121: iload_2
     122: isub
     123: iconst_1
     124: iadd
     125: invokespecial #24                 // Method org/xnio/conduits/AbstractStreamSinkConduit.writeFinal:([Ljava/nio/ByteBuffer;II)J
     128: lstore        8
     130: aload_0
     131: lload         8
     133: invokespecial #18                 // Method handleWritten:(J)V
     136: lload         8
     138: lstore        10
     140: iload         5
     142: iconst_m1
     143: if_icmpeq     160
     146: aload_1
     147: iload         5
     149: aaload
     150: astore        12
     152: aload         12
     154: iload         4
     156: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     159: pop
     160: lload         10
     162: lreturn
     163: astore        13
     165: iload         5
     167: iconst_m1
     168: if_icmpeq     185
     171: aload_1
     172: iload         5
     174: aaload
     175: astore        14
     177: aload         14
     179: iload         4
     181: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     184: pop
     185: aload         13
     187: athrow
    Exception table:
       from    to  target type
          98   140   163   any
         163   165   163   any

  public void resumeWrites();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field writesResumed:Z
       5: aload_0
       6: invokespecial #12                 // Method canSend:()Z
       9: ifeq          16
      12: aload_0
      13: invokespecial #25                 // Method org/xnio/conduits/AbstractStreamSinkConduit.resumeWrites:()V
      16: return

  public void suspendWrites();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #2                  // Field writesResumed:Z
       5: aload_0
       6: invokespecial #26                 // Method org/xnio/conduits/AbstractStreamSinkConduit.suspendWrites:()V
       9: return

  public void wakeupWrites();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field writesResumed:Z
       5: aload_0
       6: invokespecial #12                 // Method canSend:()Z
       9: ifeq          16
      12: aload_0
      13: invokespecial #27                 // Method org/xnio/conduits/AbstractStreamSinkConduit.wakeupWrites:()V
      16: return

  public boolean isWriteResumed();
    Code:
       0: aload_0
       1: getfield      #2                  // Field writesResumed:Z
       4: ireturn

  public void awaitWritable() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field nextSendTime:J
       4: invokestatic  #28                 // Method java/lang/System.currentTimeMillis:()J
       7: lsub
       8: lstore_1
       9: lload_1
      10: lconst_0
      11: lcmp
      12: ifle          31
      15: lload_1
      16: invokestatic  #29                 // Method java/lang/Thread.sleep:(J)V
      19: goto          31
      22: astore_3
      23: new           #31                 // class java/io/InterruptedIOException
      26: dup
      27: invokespecial #32                 // Method java/io/InterruptedIOException."<init>":()V
      30: athrow
      31: aload_0
      32: invokespecial #33                 // Method org/xnio/conduits/AbstractStreamSinkConduit.awaitWritable:()V
      35: return
    Exception table:
       from    to  target type
          15    19    22   Class java/lang/InterruptedException

  public void awaitWritable(long, java.util.concurrent.TimeUnit) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field nextSendTime:J
       4: invokestatic  #28                 // Method java/lang/System.currentTimeMillis:()J
       7: lsub
       8: lstore        4
      10: lload         4
      12: lconst_0
      13: lcmp
      14: ifle          44
      17: lload         4
      19: aload_3
      20: lload_1
      21: invokevirtual #9                  // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      24: invokestatic  #19                 // Method java/lang/Math.min:(JJ)J
      27: invokestatic  #29                 // Method java/lang/Thread.sleep:(J)V
      30: goto          43
      33: astore        6
      35: new           #31                 // class java/io/InterruptedIOException
      38: dup
      39: invokespecial #32                 // Method java/io/InterruptedIOException."<init>":()V
      42: athrow
      43: return
      44: aload_0
      45: lload_1
      46: aload_3
      47: invokespecial #34                 // Method org/xnio/conduits/AbstractStreamSinkConduit.awaitWritable:(JLjava/util/concurrent/TimeUnit;)V
      50: return
    Exception table:
       from    to  target type
          17    30    33   Class java/lang/InterruptedException

  private boolean canSend();
    Code:
       0: aload_0
       1: getfield      #5                  // Field byteCount:I
       4: aload_0
       5: getfield      #11                 // Field bytes:I
       8: if_icmpge     13
      11: iconst_1
      12: ireturn
      13: invokestatic  #28                 // Method java/lang/System.currentTimeMillis:()J
      16: aload_0
      17: getfield      #7                  // Field nextSendTime:J
      20: lcmp
      21: ifle          41
      24: aload_0
      25: iconst_0
      26: putfield      #5                  // Field byteCount:I
      29: aload_0
      30: lconst_0
      31: putfield      #6                  // Field startTime:J
      34: aload_0
      35: lconst_0
      36: putfield      #7                  // Field nextSendTime:J
      39: iconst_1
      40: ireturn
      41: aload_0
      42: getfield      #2                  // Field writesResumed:Z
      45: ifeq          52
      48: aload_0
      49: invokespecial #35                 // Method handleWritesResumedWhenBlocked:()V
      52: iconst_0
      53: ireturn

  private void handleWritten(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifne          7
       6: return
       7: aload_0
       8: dup
       9: getfield      #5                  // Field byteCount:I
      12: i2l
      13: lload_1
      14: ladd
      15: l2i
      16: putfield      #5                  // Field byteCount:I
      19: aload_0
      20: getfield      #5                  // Field byteCount:I
      23: aload_0
      24: getfield      #11                 // Field bytes:I
      27: if_icmpge     61
      30: aload_0
      31: getfield      #6                  // Field startTime:J
      34: lconst_0
      35: lcmp
      36: ifne          101
      39: aload_0
      40: invokestatic  #28                 // Method java/lang/System.currentTimeMillis:()J
      43: putfield      #6                  // Field startTime:J
      46: aload_0
      47: invokestatic  #28                 // Method java/lang/System.currentTimeMillis:()J
      50: aload_0
      51: getfield      #10                 // Field time:J
      54: ladd
      55: putfield      #7                  // Field nextSendTime:J
      58: goto          101
      61: aload_0
      62: getfield      #6                  // Field startTime:J
      65: lconst_0
      66: lcmp
      67: ifne          77
      70: aload_0
      71: invokestatic  #28                 // Method java/lang/System.currentTimeMillis:()J
      74: putfield      #6                  // Field startTime:J
      77: aload_0
      78: aload_0
      79: getfield      #6                  // Field startTime:J
      82: aload_0
      83: getfield      #10                 // Field time:J
      86: ladd
      87: putfield      #7                  // Field nextSendTime:J
      90: aload_0
      91: getfield      #2                  // Field writesResumed:Z
      94: ifeq          101
      97: aload_0
      98: invokespecial #35                 // Method handleWritesResumedWhenBlocked:()V
     101: return

  private void handleWritesResumedWhenBlocked();
    Code:
       0: aload_0
       1: getfield      #3                  // Field scheduled:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #3                  // Field scheduled:Z
      13: aload_0
      14: getfield      #1                  // Field next:Lorg/xnio/conduits/Conduit;
      17: checkcast     #36                 // class org/xnio/conduits/StreamSinkConduit
      20: invokeinterface #37,  1           // InterfaceMethod org/xnio/conduits/StreamSinkConduit.suspendWrites:()V
      25: aload_0
      26: getfield      #7                  // Field nextSendTime:J
      29: invokestatic  #28                 // Method java/lang/System.currentTimeMillis:()J
      32: lsub
      33: lstore_1
      34: aload_0
      35: invokevirtual #38                 // Method getWriteThread:()Lorg/xnio/XnioIoThread;
      38: new           #39                 // class io/undertow/conduits/RateLimitingStreamSinkConduit$1
      41: dup
      42: aload_0
      43: invokespecial #40                 // Method io/undertow/conduits/RateLimitingStreamSinkConduit$1."<init>":(Lio/undertow/conduits/RateLimitingStreamSinkConduit;)V
      46: lload_1
      47: getstatic     #41                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      50: invokevirtual #42                 // Method org/xnio/XnioIoThread.executeAfter:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
      53: pop
      54: return

  static boolean access$002(io.undertow.conduits.RateLimitingStreamSinkConduit, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #3                  // Field scheduled:Z
       6: ireturn

  static boolean access$100(io.undertow.conduits.RateLimitingStreamSinkConduit);
    Code:
       0: aload_0
       1: getfield      #2                  // Field writesResumed:Z
       4: ireturn

  static org.xnio.conduits.Conduit access$200(io.undertow.conduits.RateLimitingStreamSinkConduit);
    Code:
       0: aload_0
       1: getfield      #1                  // Field next:Lorg/xnio/conduits/Conduit;
       4: areturn
}
