Compiled from "ParseTimeoutUpdater.java"
public final class io.undertow.server.protocol.ParseTimeoutUpdater implements java.lang.Runnable,io.undertow.server.ServerConnection$CloseListener {
  private final io.undertow.server.ServerConnection connection;

  private final long requestParseTimeout;

  private final long requestIdleTimeout;

  private volatile org.xnio.XnioExecutor$Key handle;

  private volatile long expireTime;

  private boolean parsing;

  private static final int FUZZ_FACTOR;

  public io.undertow.server.protocol.ParseTimeoutUpdater(io.undertow.server.ServerConnection, long, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long -1l
       8: putfield      #4                  // Field expireTime:J
      11: aload_0
      12: iconst_0
      13: putfield      #5                  // Field parsing:Z
      16: aload_0
      17: aload_1
      18: putfield      #6                  // Field connection:Lio/undertow/server/ServerConnection;
      21: aload_0
      22: lload_2
      23: putfield      #7                  // Field requestParseTimeout:J
      26: aload_0
      27: lload         4
      29: putfield      #8                  // Field requestIdleTimeout:J
      32: return

  public void connectionIdle();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #5                  // Field parsing:Z
       5: aload_0
       6: aload_0
       7: getfield      #8                  // Field requestIdleTimeout:J
      10: invokespecial #9                  // Method handleSchedule:(J)V
      13: return

  private void handleSchedule(long);
    Code:
       0: lload_1
       1: ldc2_w        #2                  // long -1l
       4: lcmp
       5: ifne          16
       8: aload_0
       9: ldc2_w        #2                  // long -1l
      12: putfield      #4                  // Field expireTime:J
      15: return
      16: invokestatic  #10                 // Method java/lang/System.currentTimeMillis:()J
      19: lload_1
      20: ladd
      21: lstore_3
      22: aload_0
      23: getfield      #4                  // Field expireTime:J
      26: lstore        5
      28: aload_0
      29: lload_3
      30: putfield      #4                  // Field expireTime:J
      33: lload_3
      34: lload         5
      36: lcmp
      37: ifge          62
      40: aload_0
      41: getfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
      44: ifnull        62
      47: aload_0
      48: getfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
      51: invokeinterface #12,  1           // InterfaceMethod org/xnio/XnioExecutor$Key.remove:()Z
      56: pop
      57: aload_0
      58: aconst_null
      59: putfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
      62: aload_0
      63: getfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
      66: ifnonnull     92
      69: aload_0
      70: aload_0
      71: getfield      #6                  // Field connection:Lio/undertow/server/ServerConnection;
      74: invokevirtual #13                 // Method io/undertow/server/ServerConnection.getIoThread:()Lorg/xnio/XnioIoThread;
      77: aload_0
      78: lload_1
      79: ldc2_w        #15                 // long 50l
      82: ladd
      83: getstatic     #17                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      86: invokevirtual #18                 // Method org/xnio/XnioIoThread.executeAfter:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
      89: putfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
      92: return

  public void failedParse();
    Code:
       0: aload_0
       1: getfield      #5                  // Field parsing:Z
       4: ifne          20
       7: aload_0
       8: iconst_1
       9: putfield      #5                  // Field parsing:Z
      12: aload_0
      13: aload_0
      14: getfield      #7                  // Field requestParseTimeout:J
      17: invokespecial #9                  // Method handleSchedule:(J)V
      20: return

  public void requestStarted();
    Code:
       0: aload_0
       1: ldc2_w        #2                  // long -1l
       4: putfield      #4                  // Field expireTime:J
       7: aload_0
       8: iconst_0
       9: putfield      #5                  // Field parsing:Z
      12: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #6                  // Field connection:Lio/undertow/server/ServerConnection;
       4: invokevirtual #19                 // Method io/undertow/server/ServerConnection.isOpen:()Z
       7: ifne          11
      10: return
      11: aload_0
      12: aconst_null
      13: putfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
      16: aload_0
      17: getfield      #4                  // Field expireTime:J
      20: lconst_0
      21: lcmp
      22: ifle          91
      25: invokestatic  #10                 // Method java/lang/System.currentTimeMillis:()J
      28: lstore_1
      29: aload_0
      30: getfield      #4                  // Field expireTime:J
      33: lload_1
      34: lcmp
      35: ifle          69
      38: aload_0
      39: aload_0
      40: getfield      #6                  // Field connection:Lio/undertow/server/ServerConnection;
      43: invokevirtual #13                 // Method io/undertow/server/ServerConnection.getIoThread:()Lorg/xnio/XnioIoThread;
      46: aload_0
      47: aload_0
      48: getfield      #4                  // Field expireTime:J
      51: lload_1
      52: lsub
      53: ldc2_w        #15                 // long 50l
      56: ladd
      57: getstatic     #17                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      60: invokevirtual #18                 // Method org/xnio/XnioIoThread.executeAfter:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lorg/xnio/XnioExecutor$Key;
      63: putfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
      66: goto          91
      69: getstatic     #20                 // Field io/undertow/UndertowLogger.REQUEST_LOGGER:Lio/undertow/UndertowLogger;
      72: aload_0
      73: getfield      #6                  // Field connection:Lio/undertow/server/ServerConnection;
      76: invokevirtual #21                 // Method io/undertow/server/ServerConnection.getPeerAddress:()Ljava/net/SocketAddress;
      79: invokeinterface #22,  2           // InterfaceMethod io/undertow/UndertowLogger.parseRequestTimedOut:(Ljava/net/SocketAddress;)V
      84: aload_0
      85: getfield      #6                  // Field connection:Lio/undertow/server/ServerConnection;
      88: invokestatic  #23                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
      91: return

  public void closed(io.undertow.server.ServerConnection);
    Code:
       0: aload_0
       1: getfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
       4: ifnull        22
       7: aload_0
       8: getfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
      11: invokeinterface #12,  1           // InterfaceMethod org/xnio/XnioExecutor$Key.remove:()Z
      16: pop
      17: aload_0
      18: aconst_null
      19: putfield      #11                 // Field handle:Lorg/xnio/XnioExecutor$Key;
      22: return
}
