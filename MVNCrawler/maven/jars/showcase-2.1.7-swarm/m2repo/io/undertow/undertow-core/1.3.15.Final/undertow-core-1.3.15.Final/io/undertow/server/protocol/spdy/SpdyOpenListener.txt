Compiled from "SpdyOpenListener.java"
public final class io.undertow.server.protocol.spdy.SpdyOpenListener implements org.xnio.ChannelListener<org.xnio.StreamConnection>, io.undertow.server.DelegateOpenListener {
  public static final java.lang.String SPDY_3_1;

  private final io.undertow.connector.ByteBufferPool bufferPool;

  private final io.undertow.connector.ByteBufferPool heapBufferPool;

  private final int bufferSize;

  private volatile io.undertow.server.HttpHandler rootHandler;

  private volatile org.xnio.OptionMap undertowOptions;

  private volatile boolean statisticsEnabled;

  private final io.undertow.server.ConnectorStatisticsImpl connectorStatistics;

  public io.undertow.server.protocol.spdy.SpdyOpenListener(org.xnio.Pool<java.nio.ByteBuffer>, org.xnio.Pool<java.nio.ByteBuffer>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #1                  // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       6: invokespecial #2                  // Method "<init>":(Lorg/xnio/Pool;Lorg/xnio/Pool;Lorg/xnio/OptionMap;)V
       9: return

  public io.undertow.server.protocol.spdy.SpdyOpenListener(org.xnio.Pool<java.nio.ByteBuffer>, org.xnio.Pool<java.nio.ByteBuffer>, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: new           #3                  // class io/undertow/server/XnioByteBufferPool
       4: dup
       5: aload_1
       6: invokespecial #4                  // Method io/undertow/server/XnioByteBufferPool."<init>":(Lorg/xnio/Pool;)V
       9: new           #3                  // class io/undertow/server/XnioByteBufferPool
      12: dup
      13: aload_2
      14: invokespecial #4                  // Method io/undertow/server/XnioByteBufferPool."<init>":(Lorg/xnio/Pool;)V
      17: aload_3
      18: invokespecial #5                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
      21: return

  public io.undertow.server.protocol.spdy.SpdyOpenListener(io.undertow.connector.ByteBufferPool, io.undertow.connector.ByteBufferPool);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #1                  // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       6: invokespecial #5                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/ByteBufferPool;Lorg/xnio/OptionMap;)V
       9: return

  public io.undertow.server.protocol.spdy.SpdyOpenListener(io.undertow.connector.ByteBufferPool, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_3
       6: putfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
       9: aload_0
      10: aload_1
      11: putfield      #8                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
      14: aload_1
      15: invokeinterface #9,  1            // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      20: astore        4
      22: aload_0
      23: aload         4
      25: invokeinterface #10,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      30: invokevirtual #11                 // Method java/nio/ByteBuffer.remaining:()I
      33: putfield      #12                 // Field bufferSize:I
      36: aload         4
      38: invokeinterface #13,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      43: aload_0
      44: aload_2
      45: putfield      #14                 // Field heapBufferPool:Lio/undertow/connector/ByteBufferPool;
      48: aload_2
      49: invokeinterface #9,  1            // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
      54: astore        5
      56: aload         5
      58: invokeinterface #10,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      63: invokevirtual #15                 // Method java/nio/ByteBuffer.hasArray:()Z
      66: ifne          78
      69: getstatic     #16                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
      72: invokeinterface #17,  1           // InterfaceMethod io/undertow/UndertowMessages.mustProvideHeapBuffer:()Ljava/lang/IllegalArgumentException;
      77: athrow
      78: aload         5
      80: invokeinterface #13,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      85: goto          100
      88: astore        6
      90: aload         5
      92: invokeinterface #13,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
      97: aload         6
      99: athrow
     100: aload_0
     101: new           #18                 // class io/undertow/server/ConnectorStatisticsImpl
     104: dup
     105: invokespecial #19                 // Method io/undertow/server/ConnectorStatisticsImpl."<init>":()V
     108: putfield      #20                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     111: aload_0
     112: aload_3
     113: getstatic     #21                 // Field io/undertow/UndertowOptions.ENABLE_CONNECTOR_STATISTICS:Lorg/xnio/Option;
     116: iconst_0
     117: invokevirtual #22                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
     120: putfield      #23                 // Field statisticsEnabled:Z
     123: return
    Exception table:
       from    to  target type
          56    78    88   any
          88    90    88   any

  public void handleEvent(org.xnio.StreamConnection);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #24                 // Method handleEvent:(Lorg/xnio/StreamConnection;Lio/undertow/connector/PooledByteBuffer;)V
       6: return

  public void handleEvent(org.xnio.StreamConnection, io.undertow.connector.PooledByteBuffer);
    Code:
       0: new           #25                 // class io/undertow/protocols/spdy/SpdyChannel
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #8                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
       9: aload_2
      10: aload_0
      11: getfield      #14                 // Field heapBufferPool:Lio/undertow/connector/ByteBufferPool;
      14: iconst_0
      15: aload_0
      16: getfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
      19: invokespecial #26                 // Method io/undertow/protocols/spdy/SpdyChannel."<init>":(Lorg/xnio/StreamConnection;Lio/undertow/connector/ByteBufferPool;Lio/undertow/connector/PooledByteBuffer;Lio/undertow/connector/ByteBufferPool;ZLorg/xnio/OptionMap;)V
      22: astore_3
      23: aload_0
      24: getfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
      27: getstatic     #27                 // Field io/undertow/UndertowOptions.IDLE_TIMEOUT:Lorg/xnio/Option;
      30: invokevirtual #28                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;)Ljava/lang/Object;
      33: checkcast     #29                 // class java/lang/Integer
      36: astore        4
      38: aload         4
      40: ifnull        61
      43: aload         4
      45: invokevirtual #30                 // Method java/lang/Integer.intValue:()I
      48: ifle          61
      51: aload_3
      52: aload         4
      54: invokevirtual #30                 // Method java/lang/Integer.intValue:()I
      57: i2l
      58: invokevirtual #31                 // Method io/undertow/protocols/spdy/SpdyChannel.setIdleTimeout:(J)V
      61: aload_0
      62: getfield      #23                 // Field statisticsEnabled:Z
      65: ifeq          124
      68: aload_1
      69: invokevirtual #32                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      72: new           #33                 // class io/undertow/conduits/BytesSentStreamSinkConduit
      75: dup
      76: aload_1
      77: invokevirtual #32                 // Method org/xnio/StreamConnection.getSinkChannel:()Lorg/xnio/conduits/ConduitStreamSinkChannel;
      80: invokevirtual #34                 // Method org/xnio/conduits/ConduitStreamSinkChannel.getConduit:()Lorg/xnio/conduits/StreamSinkConduit;
      83: aload_0
      84: getfield      #20                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      87: invokevirtual #35                 // Method io/undertow/server/ConnectorStatisticsImpl.sentAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
      90: invokespecial #36                 // Method io/undertow/conduits/BytesSentStreamSinkConduit."<init>":(Lorg/xnio/conduits/StreamSinkConduit;Lio/undertow/conduits/ByteActivityCallback;)V
      93: invokevirtual #37                 // Method org/xnio/conduits/ConduitStreamSinkChannel.setConduit:(Lorg/xnio/conduits/StreamSinkConduit;)V
      96: aload_1
      97: invokevirtual #38                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     100: new           #39                 // class io/undertow/conduits/BytesReceivedStreamSourceConduit
     103: dup
     104: aload_1
     105: invokevirtual #38                 // Method org/xnio/StreamConnection.getSourceChannel:()Lorg/xnio/conduits/ConduitStreamSourceChannel;
     108: invokevirtual #40                 // Method org/xnio/conduits/ConduitStreamSourceChannel.getConduit:()Lorg/xnio/conduits/StreamSourceConduit;
     111: aload_0
     112: getfield      #20                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     115: invokevirtual #41                 // Method io/undertow/server/ConnectorStatisticsImpl.receivedAccumulator:()Lio/undertow/conduits/ByteActivityCallback;
     118: invokespecial #42                 // Method io/undertow/conduits/BytesReceivedStreamSourceConduit."<init>":(Lorg/xnio/conduits/StreamSourceConduit;Lio/undertow/conduits/ByteActivityCallback;)V
     121: invokevirtual #43                 // Method org/xnio/conduits/ConduitStreamSourceChannel.setConduit:(Lorg/xnio/conduits/StreamSourceConduit;)V
     124: aload_3
     125: invokevirtual #44                 // Method io/undertow/protocols/spdy/SpdyChannel.getReceiveSetter:()Lorg/xnio/ChannelListener$Setter;
     128: new           #45                 // class io/undertow/server/protocol/spdy/SpdyReceiveListener
     131: dup
     132: aload_0
     133: getfield      #46                 // Field rootHandler:Lio/undertow/server/HttpHandler;
     136: aload_0
     137: invokevirtual #47                 // Method getUndertowOptions:()Lorg/xnio/OptionMap;
     140: aload_0
     141: getfield      #12                 // Field bufferSize:I
     144: aload_0
     145: getfield      #20                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
     148: invokespecial #48                 // Method io/undertow/server/protocol/spdy/SpdyReceiveListener."<init>":(Lio/undertow/server/HttpHandler;Lorg/xnio/OptionMap;ILio/undertow/server/ConnectorStatisticsImpl;)V
     151: invokeinterface #49,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
     156: aload_3
     157: invokevirtual #50                 // Method io/undertow/protocols/spdy/SpdyChannel.resumeReceives:()V
     160: return

  public io.undertow.server.HttpHandler getRootHandler();
    Code:
       0: aload_0
       1: getfield      #46                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       4: areturn

  public void setRootHandler(io.undertow.server.HttpHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field rootHandler:Lio/undertow/server/HttpHandler;
       5: return

  public org.xnio.OptionMap getUndertowOptions();
    Code:
       0: aload_0
       1: getfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
       4: areturn

  public void setUndertowOptions(org.xnio.OptionMap);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: getstatic     #16                 // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       7: ldc           #51                 // String undertowOptions
       9: invokeinterface #52,  2           // InterfaceMethod io/undertow/UndertowMessages.argumentCannotBeNull:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: aload_1
      17: putfield      #7                  // Field undertowOptions:Lorg/xnio/OptionMap;
      20: aload_0
      21: aload_1
      22: getstatic     #21                 // Field io/undertow/UndertowOptions.ENABLE_CONNECTOR_STATISTICS:Lorg/xnio/Option;
      25: iconst_0
      26: invokevirtual #22                 // Method org/xnio/OptionMap.get:(Lorg/xnio/Option;Z)Z
      29: putfield      #23                 // Field statisticsEnabled:Z
      32: return

  public io.undertow.connector.ByteBufferPool getBufferPool();
    Code:
       0: aload_0
       1: getfield      #8                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
       4: areturn

  public io.undertow.server.ConnectorStatistics getConnectorStatistics();
    Code:
       0: aload_0
       1: getfield      #23                 // Field statisticsEnabled:Z
       4: ifeq          12
       7: aload_0
       8: getfield      #20                 // Field connectorStatistics:Lio/undertow/server/ConnectorStatisticsImpl;
      11: areturn
      12: aconst_null
      13: areturn

  public void handleEvent(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #53                 // class org/xnio/StreamConnection
       5: invokevirtual #54                 // Method handleEvent:(Lorg/xnio/StreamConnection;)V
       8: return
}
