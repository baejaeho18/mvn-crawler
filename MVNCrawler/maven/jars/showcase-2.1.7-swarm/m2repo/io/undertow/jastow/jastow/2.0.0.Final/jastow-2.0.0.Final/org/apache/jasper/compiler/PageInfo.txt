Compiled from "PageInfo.java"
class org.apache.jasper.compiler.PageInfo {
  private final java.util.Vector<java.lang.String> imports;

  private final java.util.Map<java.lang.String, java.lang.Long> dependants;

  private final org.apache.jasper.compiler.BeanRepository beanRepository;

  private final java.util.Set<java.lang.String> varInfoNames;

  private final java.util.HashMap<java.lang.String, javax.servlet.jsp.tagext.TagLibraryInfo> taglibsMap;

  private final java.util.HashMap<java.lang.String, java.lang.String> jspPrefixMapper;

  private final java.util.HashMap<java.lang.String, java.util.LinkedList<java.lang.String>> xmlPrefixMapper;

  private final java.util.HashMap<java.lang.String, org.apache.jasper.compiler.Mark> nonCustomTagPrefixMap;

  private final java.lang.String jspFile;

  private final java.lang.String defaultLanguage;

  private java.lang.String language;

  private final java.lang.String defaultExtends;

  private java.lang.String xtends;

  private java.lang.String contentType;

  private java.lang.String session;

  private boolean isSession;

  private java.lang.String bufferValue;

  private int buffer;

  private java.lang.String autoFlush;

  private boolean isAutoFlush;

  private java.lang.String isThreadSafeValue;

  private boolean isThreadSafe;

  private java.lang.String isErrorPageValue;

  private boolean isErrorPage;

  private java.lang.String errorPage;

  private java.lang.String info;

  private boolean scriptless;

  private boolean scriptingInvalid;

  private java.lang.String isELIgnoredValue;

  private boolean isELIgnored;

  private java.lang.String deferredSyntaxAllowedAsLiteralValue;

  private boolean deferredSyntaxAllowedAsLiteral;

  private final javax.el.ExpressionFactory expressionFactory;

  private java.lang.String trimDirectiveWhitespacesValue;

  private boolean trimDirectiveWhitespaces;

  private java.lang.String omitXmlDecl;

  private java.lang.String doctypeName;

  private java.lang.String doctypePublic;

  private java.lang.String doctypeSystem;

  private boolean isJspPrefixHijacked;

  private final java.util.HashSet<java.lang.String> prefixes;

  private boolean hasJspRoot;

  private java.util.Collection<java.lang.String> includePrelude;

  private java.util.Collection<java.lang.String> includeCoda;

  private final java.util.Vector<java.lang.String> pluginDcls;

  private boolean errorOnUndeclaredNamepsace;

  private final boolean isTagFile;

  org.apache.jasper.compiler.PageInfo(org.apache.jasper.compiler.BeanRepository, java.lang.String, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #2                  // String java
       7: putfield      #3                  // Field defaultLanguage:Ljava/lang/String;
      10: aload_0
      11: getstatic     #4                  // Field org/apache/jasper/Constants.JSP_SERVLET_BASE:Ljava/lang/String;
      14: putfield      #5                  // Field defaultExtends:Ljava/lang/String;
      17: aload_0
      18: aconst_null
      19: putfield      #6                  // Field contentType:Ljava/lang/String;
      22: aload_0
      23: iconst_1
      24: putfield      #7                  // Field isSession:Z
      27: aload_0
      28: sipush        8192
      31: putfield      #8                  // Field buffer:I
      34: aload_0
      35: iconst_1
      36: putfield      #9                  // Field isAutoFlush:Z
      39: aload_0
      40: iconst_1
      41: putfield      #10                 // Field isThreadSafe:Z
      44: aload_0
      45: iconst_0
      46: putfield      #11                 // Field isErrorPage:Z
      49: aload_0
      50: aconst_null
      51: putfield      #12                 // Field errorPage:Ljava/lang/String;
      54: aload_0
      55: iconst_0
      56: putfield      #13                 // Field scriptless:Z
      59: aload_0
      60: iconst_0
      61: putfield      #14                 // Field scriptingInvalid:Z
      64: aload_0
      65: iconst_0
      66: putfield      #15                 // Field isELIgnored:Z
      69: aload_0
      70: iconst_0
      71: putfield      #16                 // Field deferredSyntaxAllowedAsLiteral:Z
      74: aload_0
      75: invokestatic  #17                 // Method javax/el/ELManager.getExpressionFactory:()Ljavax/el/ExpressionFactory;
      78: putfield      #18                 // Field expressionFactory:Ljavax/el/ExpressionFactory;
      81: aload_0
      82: iconst_0
      83: putfield      #19                 // Field trimDirectiveWhitespaces:Z
      86: aload_0
      87: aconst_null
      88: putfield      #20                 // Field omitXmlDecl:Ljava/lang/String;
      91: aload_0
      92: aconst_null
      93: putfield      #21                 // Field doctypeName:Ljava/lang/String;
      96: aload_0
      97: aconst_null
      98: putfield      #22                 // Field doctypePublic:Ljava/lang/String;
     101: aload_0
     102: aconst_null
     103: putfield      #23                 // Field doctypeSystem:Ljava/lang/String;
     106: aload_0
     107: iconst_0
     108: putfield      #24                 // Field hasJspRoot:Z
     111: aload_0
     112: iconst_0
     113: putfield      #25                 // Field errorOnUndeclaredNamepsace:Z
     116: aload_0
     117: iload_3
     118: putfield      #26                 // Field isTagFile:Z
     121: aload_0
     122: aload_2
     123: putfield      #27                 // Field jspFile:Ljava/lang/String;
     126: aload_0
     127: aload_1
     128: putfield      #28                 // Field beanRepository:Lorg/apache/jasper/compiler/BeanRepository;
     131: aload_0
     132: new           #29                 // class java/util/HashSet
     135: dup
     136: invokespecial #30                 // Method java/util/HashSet."<init>":()V
     139: putfield      #31                 // Field varInfoNames:Ljava/util/Set;
     142: aload_0
     143: new           #32                 // class java/util/HashMap
     146: dup
     147: invokespecial #33                 // Method java/util/HashMap."<init>":()V
     150: putfield      #34                 // Field taglibsMap:Ljava/util/HashMap;
     153: aload_0
     154: new           #32                 // class java/util/HashMap
     157: dup
     158: invokespecial #33                 // Method java/util/HashMap."<init>":()V
     161: putfield      #35                 // Field jspPrefixMapper:Ljava/util/HashMap;
     164: aload_0
     165: new           #32                 // class java/util/HashMap
     168: dup
     169: invokespecial #33                 // Method java/util/HashMap."<init>":()V
     172: putfield      #36                 // Field xmlPrefixMapper:Ljava/util/HashMap;
     175: aload_0
     176: new           #32                 // class java/util/HashMap
     179: dup
     180: invokespecial #33                 // Method java/util/HashMap."<init>":()V
     183: putfield      #37                 // Field nonCustomTagPrefixMap:Ljava/util/HashMap;
     186: aload_0
     187: new           #38                 // class java/util/Vector
     190: dup
     191: invokespecial #39                 // Method java/util/Vector."<init>":()V
     194: putfield      #40                 // Field imports:Ljava/util/Vector;
     197: aload_0
     198: new           #32                 // class java/util/HashMap
     201: dup
     202: invokespecial #33                 // Method java/util/HashMap."<init>":()V
     205: putfield      #41                 // Field dependants:Ljava/util/Map;
     208: aload_0
     209: new           #38                 // class java/util/Vector
     212: dup
     213: invokespecial #39                 // Method java/util/Vector."<init>":()V
     216: putfield      #42                 // Field includePrelude:Ljava/util/Collection;
     219: aload_0
     220: new           #38                 // class java/util/Vector
     223: dup
     224: invokespecial #39                 // Method java/util/Vector."<init>":()V
     227: putfield      #43                 // Field includeCoda:Ljava/util/Collection;
     230: aload_0
     231: new           #38                 // class java/util/Vector
     234: dup
     235: invokespecial #39                 // Method java/util/Vector."<init>":()V
     238: putfield      #44                 // Field pluginDcls:Ljava/util/Vector;
     241: aload_0
     242: new           #29                 // class java/util/HashSet
     245: dup
     246: invokespecial #30                 // Method java/util/HashSet."<init>":()V
     249: putfield      #45                 // Field prefixes:Ljava/util/HashSet;
     252: aload_0
     253: getfield      #40                 // Field imports:Ljava/util/Vector;
     256: getstatic     #46                 // Field org/apache/jasper/Constants.STANDARD_IMPORTS:Ljava/util/List;
     259: invokevirtual #47                 // Method java/util/Vector.addAll:(Ljava/util/Collection;)Z
     262: pop
     263: return

  public boolean isTagFile();
    Code:
       0: aload_0
       1: getfield      #26                 // Field isTagFile:Z
       4: ireturn

  public boolean isPluginDeclared(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #44                 // Field pluginDcls:Ljava/util/Vector;
       4: aload_1
       5: invokevirtual #48                 // Method java/util/Vector.contains:(Ljava/lang/Object;)Z
       8: ifeq          13
      11: iconst_1
      12: ireturn
      13: aload_0
      14: getfield      #44                 // Field pluginDcls:Ljava/util/Vector;
      17: aload_1
      18: invokevirtual #49                 // Method java/util/Vector.add:(Ljava/lang/Object;)Z
      21: pop
      22: iconst_0
      23: ireturn

  public void addImports(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #40                 // Field imports:Ljava/util/Vector;
       4: aload_1
       5: invokevirtual #47                 // Method java/util/Vector.addAll:(Ljava/util/Collection;)Z
       8: pop
       9: return

  public void addImport(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #40                 // Field imports:Ljava/util/Vector;
       4: aload_1
       5: invokevirtual #49                 // Method java/util/Vector.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public java.util.List<java.lang.String> getImports();
    Code:
       0: aload_0
       1: getfield      #40                 // Field imports:Ljava/util/Vector;
       4: areturn

  public java.lang.String getJspFile();
    Code:
       0: aload_0
       1: getfield      #27                 // Field jspFile:Ljava/lang/String;
       4: areturn

  public void addDependant(java.lang.String, java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #41                 // Field dependants:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #50,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ifne          36
      13: aload_0
      14: getfield      #27                 // Field jspFile:Ljava/lang/String;
      17: aload_1
      18: invokevirtual #51                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      21: ifne          36
      24: aload_0
      25: getfield      #41                 // Field dependants:Ljava/util/Map;
      28: aload_1
      29: aload_2
      30: invokeinterface #52,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      35: pop
      36: return

  public java.util.Map<java.lang.String, java.lang.Long> getDependants();
    Code:
       0: aload_0
       1: getfield      #41                 // Field dependants:Ljava/util/Map;
       4: areturn

  public org.apache.jasper.compiler.BeanRepository getBeanRepository();
    Code:
       0: aload_0
       1: getfield      #28                 // Field beanRepository:Lorg/apache/jasper/compiler/BeanRepository;
       4: areturn

  public void setScriptless(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field scriptless:Z
       5: return

  public boolean isScriptless();
    Code:
       0: aload_0
       1: getfield      #13                 // Field scriptless:Z
       4: ireturn

  public void setScriptingInvalid(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field scriptingInvalid:Z
       5: return

  public boolean isScriptingInvalid();
    Code:
       0: aload_0
       1: getfield      #14                 // Field scriptingInvalid:Z
       4: ireturn

  public java.util.Collection<java.lang.String> getIncludePrelude();
    Code:
       0: aload_0
       1: getfield      #42                 // Field includePrelude:Ljava/util/Collection;
       4: areturn

  public void setIncludePrelude(java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #42                 // Field includePrelude:Ljava/util/Collection;
       5: return

  public java.util.Collection<java.lang.String> getIncludeCoda();
    Code:
       0: aload_0
       1: getfield      #43                 // Field includeCoda:Ljava/util/Collection;
       4: areturn

  public void setIncludeCoda(java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #43                 // Field includeCoda:Ljava/util/Collection;
       5: return

  public void setHasJspRoot(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field hasJspRoot:Z
       5: return

  public boolean hasJspRoot();
    Code:
       0: aload_0
       1: getfield      #24                 // Field hasJspRoot:Z
       4: ireturn

  public java.lang.String getOmitXmlDecl();
    Code:
       0: aload_0
       1: getfield      #20                 // Field omitXmlDecl:Ljava/lang/String;
       4: areturn

  public void setOmitXmlDecl(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field omitXmlDecl:Ljava/lang/String;
       5: return

  public java.lang.String getDoctypeName();
    Code:
       0: aload_0
       1: getfield      #21                 // Field doctypeName:Ljava/lang/String;
       4: areturn

  public void setDoctypeName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field doctypeName:Ljava/lang/String;
       5: return

  public java.lang.String getDoctypeSystem();
    Code:
       0: aload_0
       1: getfield      #23                 // Field doctypeSystem:Ljava/lang/String;
       4: areturn

  public void setDoctypeSystem(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field doctypeSystem:Ljava/lang/String;
       5: return

  public java.lang.String getDoctypePublic();
    Code:
       0: aload_0
       1: getfield      #22                 // Field doctypePublic:Ljava/lang/String;
       4: areturn

  public void setDoctypePublic(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field doctypePublic:Ljava/lang/String;
       5: return

  public void setIsJspPrefixHijacked(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #53                 // Field isJspPrefixHijacked:Z
       5: return

  public boolean isJspPrefixHijacked();
    Code:
       0: aload_0
       1: getfield      #53                 // Field isJspPrefixHijacked:Z
       4: ireturn

  public void addPrefix(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #45                 // Field prefixes:Ljava/util/HashSet;
       4: aload_1
       5: invokevirtual #54                 // Method java/util/HashSet.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public boolean containsPrefix(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #45                 // Field prefixes:Ljava/util/HashSet;
       4: aload_1
       5: invokevirtual #55                 // Method java/util/HashSet.contains:(Ljava/lang/Object;)Z
       8: ireturn

  public void addTaglib(java.lang.String, javax.servlet.jsp.tagext.TagLibraryInfo);
    Code:
       0: aload_0
       1: getfield      #34                 // Field taglibsMap:Ljava/util/HashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #56                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: return

  public javax.servlet.jsp.tagext.TagLibraryInfo getTaglib(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #34                 // Field taglibsMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #57                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #58                 // class javax/servlet/jsp/tagext/TagLibraryInfo
      11: areturn

  public java.util.Collection<javax.servlet.jsp.tagext.TagLibraryInfo> getTaglibs();
    Code:
       0: aload_0
       1: getfield      #34                 // Field taglibsMap:Ljava/util/HashMap;
       4: invokevirtual #59                 // Method java/util/HashMap.values:()Ljava/util/Collection;
       7: areturn

  public boolean hasTaglib(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #34                 // Field taglibsMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #60                 // Method java/util/HashMap.containsKey:(Ljava/lang/Object;)Z
       8: ireturn

  public void addPrefixMapping(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #35                 // Field jspPrefixMapper:Ljava/util/HashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #56                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: return

  public void pushPrefixMapping(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #36                 // Field xmlPrefixMapper:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #57                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #61                 // class java/util/LinkedList
      11: astore_3
      12: aload_3
      13: ifnonnull     34
      16: new           #61                 // class java/util/LinkedList
      19: dup
      20: invokespecial #62                 // Method java/util/LinkedList."<init>":()V
      23: astore_3
      24: aload_0
      25: getfield      #36                 // Field xmlPrefixMapper:Ljava/util/HashMap;
      28: aload_1
      29: aload_3
      30: invokevirtual #56                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      33: pop
      34: aload_3
      35: aload_2
      36: invokevirtual #63                 // Method java/util/LinkedList.addFirst:(Ljava/lang/Object;)V
      39: return

  public void popPrefixMapping(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #36                 // Field xmlPrefixMapper:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #57                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #61                 // class java/util/LinkedList
      11: astore_2
      12: aload_2
      13: invokevirtual #64                 // Method java/util/LinkedList.removeFirst:()Ljava/lang/Object;
      16: pop
      17: return

  public java.lang.String getURI(java.lang.String);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: getfield      #36                 // Field xmlPrefixMapper:Ljava/util/HashMap;
       6: aload_1
       7: invokevirtual #57                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #61                 // class java/util/LinkedList
      13: astore_3
      14: aload_3
      15: ifnull        25
      18: aload_3
      19: invokevirtual #65                 // Method java/util/LinkedList.size:()I
      22: ifne          40
      25: aload_0
      26: getfield      #35                 // Field jspPrefixMapper:Ljava/util/HashMap;
      29: aload_1
      30: invokevirtual #57                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #66                 // class java/lang/String
      36: astore_2
      37: goto          48
      40: aload_3
      41: invokevirtual #67                 // Method java/util/LinkedList.getFirst:()Ljava/lang/Object;
      44: checkcast     #66                 // class java/lang/String
      47: astore_2
      48: aload_2
      49: areturn

  public void setLanguage(java.lang.String, org.apache.jasper.compiler.Node, org.apache.jasper.compiler.ErrorDispatcher, boolean) throws org.apache.jasper.JasperException;
    Code:
       0: ldc           #2                  // String java
       2: aload_1
       3: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifne          51
       9: iload         4
      11: ifeq          34
      14: aload_3
      15: aload_2
      16: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      19: invokeinterface #70,  1           // InterfaceMethod org/apache/jasper/JasperMessages.unsupportedPageDirectiveLanguage:()Ljava/lang/String;
      24: iconst_0
      25: anewarray     #66                 // class java/lang/String
      28: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      31: goto          51
      34: aload_3
      35: aload_2
      36: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      39: invokeinterface #72,  1           // InterfaceMethod org/apache/jasper/JasperMessages.unsupportedTagDirectiveLanguage:()Ljava/lang/String;
      44: iconst_0
      45: anewarray     #66                 // class java/lang/String
      48: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      51: aload_0
      52: aload_1
      53: putfield      #73                 // Field language:Ljava/lang/String;
      56: return

  public java.lang.String getLanguage(boolean);
    Code:
       0: aload_0
       1: getfield      #73                 // Field language:Ljava/lang/String;
       4: ifnonnull     16
       7: iload_1
       8: ifeq          16
      11: ldc           #2                  // String java
      13: goto          20
      16: aload_0
      17: getfield      #73                 // Field language:Ljava/lang/String;
      20: areturn

  public void setExtends(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #75                 // Field xtends:Ljava/lang/String;
       5: return

  public java.lang.String getExtends(boolean);
    Code:
       0: aload_0
       1: getfield      #75                 // Field xtends:Ljava/lang/String;
       4: ifnonnull     18
       7: iload_1
       8: ifeq          18
      11: aload_0
      12: getfield      #5                  // Field defaultExtends:Ljava/lang/String;
      15: goto          22
      18: aload_0
      19: getfield      #75                 // Field xtends:Ljava/lang/String;
      22: areturn

  public java.lang.String getExtends();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #76                 // Method getExtends:(Z)Ljava/lang/String;
       5: areturn

  public void setContentType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field contentType:Ljava/lang/String;
       5: return

  public java.lang.String getContentType();
    Code:
       0: aload_0
       1: getfield      #6                  // Field contentType:Ljava/lang/String;
       4: areturn

  public void setBufferValue(java.lang.String, org.apache.jasper.compiler.Node, org.apache.jasper.compiler.ErrorDispatcher) throws org.apache.jasper.JasperException;
    Code:
       0: ldc           #77                 // String none
       2: aload_1
       3: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          17
       9: aload_0
      10: iconst_0
      11: putfield      #8                  // Field buffer:I
      14: goto          148
      17: aload_1
      18: ifnull        30
      21: aload_1
      22: ldc           #78                 // String kb
      24: invokevirtual #79                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      27: ifne          70
      30: aload_2
      31: ifnonnull     53
      34: aload_3
      35: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      38: invokeinterface #80,  1           // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveBufferSize:()Ljava/lang/String;
      43: iconst_0
      44: anewarray     #66                 // class java/lang/String
      47: invokevirtual #81                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Ljava/lang/String;[Ljava/lang/String;)V
      50: goto          70
      53: aload_3
      54: aload_2
      55: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      58: invokeinterface #80,  1           // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveBufferSize:()Ljava/lang/String;
      63: iconst_0
      64: anewarray     #66                 // class java/lang/String
      67: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      70: new           #82                 // class java/lang/Integer
      73: dup
      74: aload_1
      75: iconst_0
      76: aload_1
      77: invokevirtual #83                 // Method java/lang/String.length:()I
      80: iconst_2
      81: isub
      82: invokevirtual #84                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      85: invokespecial #85                 // Method java/lang/Integer."<init>":(Ljava/lang/String;)V
      88: astore        4
      90: aload_0
      91: aload         4
      93: invokevirtual #86                 // Method java/lang/Integer.intValue:()I
      96: sipush        1024
      99: imul
     100: putfield      #8                  // Field buffer:I
     103: goto          148
     106: astore        4
     108: aload_2
     109: ifnonnull     131
     112: aload_3
     113: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
     116: invokeinterface #80,  1           // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveBufferSize:()Ljava/lang/String;
     121: iconst_0
     122: anewarray     #66                 // class java/lang/String
     125: invokevirtual #81                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Ljava/lang/String;[Ljava/lang/String;)V
     128: goto          148
     131: aload_3
     132: aload_2
     133: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
     136: invokeinterface #80,  1           // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveBufferSize:()Ljava/lang/String;
     141: iconst_0
     142: anewarray     #66                 // class java/lang/String
     145: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
     148: aload_0
     149: aload_1
     150: putfield      #88                 // Field bufferValue:Ljava/lang/String;
     153: return
    Exception table:
       from    to  target type
          70   103   106   Class java/lang/NumberFormatException

  public java.lang.String getBufferValue();
    Code:
       0: aload_0
       1: getfield      #88                 // Field bufferValue:Ljava/lang/String;
       4: areturn

  public int getBuffer();
    Code:
       0: aload_0
       1: getfield      #8                  // Field buffer:I
       4: ireturn

  public void setSession(java.lang.String, org.apache.jasper.compiler.Node, org.apache.jasper.compiler.ErrorDispatcher) throws org.apache.jasper.JasperException;
    Code:
       0: ldc           #89                 // String true
       2: aload_1
       3: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          17
       9: aload_0
      10: iconst_1
      11: putfield      #7                  // Field isSession:Z
      14: goto          51
      17: ldc           #90                 // String false
      19: aload_1
      20: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      23: ifeq          34
      26: aload_0
      27: iconst_0
      28: putfield      #7                  // Field isSession:Z
      31: goto          51
      34: aload_3
      35: aload_2
      36: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      39: invokeinterface #91,  1           // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveSession:()Ljava/lang/String;
      44: iconst_0
      45: anewarray     #66                 // class java/lang/String
      48: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      51: aload_0
      52: aload_1
      53: putfield      #92                 // Field session:Ljava/lang/String;
      56: return

  public java.lang.String getSession();
    Code:
       0: aload_0
       1: getfield      #92                 // Field session:Ljava/lang/String;
       4: areturn

  public boolean isSession();
    Code:
       0: aload_0
       1: getfield      #7                  // Field isSession:Z
       4: ireturn

  public void setAutoFlush(java.lang.String, org.apache.jasper.compiler.Node, org.apache.jasper.compiler.ErrorDispatcher) throws org.apache.jasper.JasperException;
    Code:
       0: ldc           #89                 // String true
       2: aload_1
       3: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          17
       9: aload_0
      10: iconst_1
      11: putfield      #9                  // Field isAutoFlush:Z
      14: goto          51
      17: ldc           #90                 // String false
      19: aload_1
      20: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      23: ifeq          34
      26: aload_0
      27: iconst_0
      28: putfield      #9                  // Field isAutoFlush:Z
      31: goto          51
      34: aload_3
      35: aload_2
      36: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      39: invokeinterface #93,  1           // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveAutoFlush:()Ljava/lang/String;
      44: iconst_0
      45: anewarray     #66                 // class java/lang/String
      48: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      51: aload_0
      52: aload_1
      53: putfield      #94                 // Field autoFlush:Ljava/lang/String;
      56: return

  public java.lang.String getAutoFlush();
    Code:
       0: aload_0
       1: getfield      #94                 // Field autoFlush:Ljava/lang/String;
       4: areturn

  public boolean isAutoFlush();
    Code:
       0: aload_0
       1: getfield      #9                  // Field isAutoFlush:Z
       4: ireturn

  public void setIsThreadSafe(java.lang.String, org.apache.jasper.compiler.Node, org.apache.jasper.compiler.ErrorDispatcher) throws org.apache.jasper.JasperException;
    Code:
       0: ldc           #89                 // String true
       2: aload_1
       3: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          17
       9: aload_0
      10: iconst_1
      11: putfield      #10                 // Field isThreadSafe:Z
      14: goto          51
      17: ldc           #90                 // String false
      19: aload_1
      20: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      23: ifeq          34
      26: aload_0
      27: iconst_0
      28: putfield      #10                 // Field isThreadSafe:Z
      31: goto          51
      34: aload_3
      35: aload_2
      36: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      39: invokeinterface #95,  1           // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveIsThreadSafe:()Ljava/lang/String;
      44: iconst_0
      45: anewarray     #66                 // class java/lang/String
      48: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      51: aload_0
      52: aload_1
      53: putfield      #96                 // Field isThreadSafeValue:Ljava/lang/String;
      56: return

  public java.lang.String getIsThreadSafe();
    Code:
       0: aload_0
       1: getfield      #96                 // Field isThreadSafeValue:Ljava/lang/String;
       4: areturn

  public boolean isThreadSafe();
    Code:
       0: aload_0
       1: getfield      #10                 // Field isThreadSafe:Z
       4: ireturn

  public void setInfo(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #97                 // Field info:Ljava/lang/String;
       5: return

  public java.lang.String getInfo();
    Code:
       0: aload_0
       1: getfield      #97                 // Field info:Ljava/lang/String;
       4: areturn

  public void setErrorPage(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field errorPage:Ljava/lang/String;
       5: return

  public java.lang.String getErrorPage();
    Code:
       0: aload_0
       1: getfield      #12                 // Field errorPage:Ljava/lang/String;
       4: areturn

  public void setIsErrorPage(java.lang.String, org.apache.jasper.compiler.Node, org.apache.jasper.compiler.ErrorDispatcher) throws org.apache.jasper.JasperException;
    Code:
       0: ldc           #89                 // String true
       2: aload_1
       3: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          17
       9: aload_0
      10: iconst_1
      11: putfield      #11                 // Field isErrorPage:Z
      14: goto          51
      17: ldc           #90                 // String false
      19: aload_1
      20: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      23: ifeq          34
      26: aload_0
      27: iconst_0
      28: putfield      #11                 // Field isErrorPage:Z
      31: goto          51
      34: aload_3
      35: aload_2
      36: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      39: invokeinterface #98,  1           // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveIsErrorPage:()Ljava/lang/String;
      44: iconst_0
      45: anewarray     #66                 // class java/lang/String
      48: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      51: aload_0
      52: aload_1
      53: putfield      #99                 // Field isErrorPageValue:Ljava/lang/String;
      56: return

  public java.lang.String getIsErrorPage();
    Code:
       0: aload_0
       1: getfield      #99                 // Field isErrorPageValue:Ljava/lang/String;
       4: areturn

  public boolean isErrorPage();
    Code:
       0: aload_0
       1: getfield      #11                 // Field isErrorPage:Z
       4: ireturn

  public void setIsELIgnored(java.lang.String, org.apache.jasper.compiler.Node, org.apache.jasper.compiler.ErrorDispatcher, boolean) throws org.apache.jasper.JasperException;
    Code:
       0: ldc           #89                 // String true
       2: aload_1
       3: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          17
       9: aload_0
      10: iconst_1
      11: putfield      #15                 // Field isELIgnored:Z
      14: goto          76
      17: ldc           #90                 // String false
      19: aload_1
      20: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      23: ifeq          34
      26: aload_0
      27: iconst_0
      28: putfield      #15                 // Field isELIgnored:Z
      31: goto          76
      34: iload         4
      36: ifeq          59
      39: aload_3
      40: aload_2
      41: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      44: invokeinterface #100,  1          // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveIsElIgnored:()Ljava/lang/String;
      49: iconst_0
      50: anewarray     #66                 // class java/lang/String
      53: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      56: goto          76
      59: aload_3
      60: aload_2
      61: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      64: invokeinterface #101,  1          // InterfaceMethod org/apache/jasper/JasperMessages.invalidTagDirectiveIsElIgnored:()Ljava/lang/String;
      69: iconst_0
      70: anewarray     #66                 // class java/lang/String
      73: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      76: aload_0
      77: aload_1
      78: putfield      #102                // Field isELIgnoredValue:Ljava/lang/String;
      81: return

  public void setDeferredSyntaxAllowedAsLiteral(java.lang.String, org.apache.jasper.compiler.Node, org.apache.jasper.compiler.ErrorDispatcher, boolean) throws org.apache.jasper.JasperException;
    Code:
       0: ldc           #89                 // String true
       2: aload_1
       3: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          17
       9: aload_0
      10: iconst_1
      11: putfield      #16                 // Field deferredSyntaxAllowedAsLiteral:Z
      14: goto          76
      17: ldc           #90                 // String false
      19: aload_1
      20: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      23: ifeq          34
      26: aload_0
      27: iconst_0
      28: putfield      #16                 // Field deferredSyntaxAllowedAsLiteral:Z
      31: goto          76
      34: iload         4
      36: ifeq          59
      39: aload_3
      40: aload_2
      41: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      44: invokeinterface #103,  1          // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveDeferredSyntaxAllowedAsLiteral:()Ljava/lang/String;
      49: iconst_0
      50: anewarray     #66                 // class java/lang/String
      53: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      56: goto          76
      59: aload_3
      60: aload_2
      61: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      64: invokeinterface #104,  1          // InterfaceMethod org/apache/jasper/JasperMessages.invalidTagDirectiveDeferredSyntaxAllowedAsLiteral:()Ljava/lang/String;
      69: iconst_0
      70: anewarray     #66                 // class java/lang/String
      73: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      76: aload_0
      77: aload_1
      78: putfield      #105                // Field deferredSyntaxAllowedAsLiteralValue:Ljava/lang/String;
      81: return

  public void setTrimDirectiveWhitespaces(java.lang.String, org.apache.jasper.compiler.Node, org.apache.jasper.compiler.ErrorDispatcher, boolean) throws org.apache.jasper.JasperException;
    Code:
       0: ldc           #89                 // String true
       2: aload_1
       3: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          17
       9: aload_0
      10: iconst_1
      11: putfield      #19                 // Field trimDirectiveWhitespaces:Z
      14: goto          76
      17: ldc           #90                 // String false
      19: aload_1
      20: invokevirtual #68                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      23: ifeq          34
      26: aload_0
      27: iconst_0
      28: putfield      #19                 // Field trimDirectiveWhitespaces:Z
      31: goto          76
      34: iload         4
      36: ifeq          59
      39: aload_3
      40: aload_2
      41: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      44: invokeinterface #106,  1          // InterfaceMethod org/apache/jasper/JasperMessages.invalidPageDirectiveTrimDirectiveWhitespaces:()Ljava/lang/String;
      49: iconst_0
      50: anewarray     #66                 // class java/lang/String
      53: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      56: goto          76
      59: aload_3
      60: aload_2
      61: getstatic     #69                 // Field org/apache/jasper/JasperMessages.MESSAGES:Lorg/apache/jasper/JasperMessages;
      64: invokeinterface #107,  1          // InterfaceMethod org/apache/jasper/JasperMessages.invalidTagDirectiveTrimDirectiveWhitespaces:()Ljava/lang/String;
      69: iconst_0
      70: anewarray     #66                 // class java/lang/String
      73: invokevirtual #71                 // Method org/apache/jasper/compiler/ErrorDispatcher.jspError:(Lorg/apache/jasper/compiler/Node;Ljava/lang/String;[Ljava/lang/String;)V
      76: aload_0
      77: aload_1
      78: putfield      #108                // Field trimDirectiveWhitespacesValue:Ljava/lang/String;
      81: return

  public void setELIgnored(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field isELIgnored:Z
       5: return

  public java.lang.String getIsELIgnored();
    Code:
       0: aload_0
       1: getfield      #102                // Field isELIgnoredValue:Ljava/lang/String;
       4: areturn

  public boolean isELIgnored();
    Code:
       0: aload_0
       1: getfield      #15                 // Field isELIgnored:Z
       4: ireturn

  public void putNonCustomTagPrefix(java.lang.String, org.apache.jasper.compiler.Mark);
    Code:
       0: aload_0
       1: getfield      #37                 // Field nonCustomTagPrefixMap:Ljava/util/HashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #56                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: return

  public org.apache.jasper.compiler.Mark getNonCustomTagPrefix(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #37                 // Field nonCustomTagPrefixMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #57                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #109                // class org/apache/jasper/compiler/Mark
      11: areturn

  public java.lang.String getDeferredSyntaxAllowedAsLiteral();
    Code:
       0: aload_0
       1: getfield      #105                // Field deferredSyntaxAllowedAsLiteralValue:Ljava/lang/String;
       4: areturn

  public boolean isDeferredSyntaxAllowedAsLiteral();
    Code:
       0: aload_0
       1: getfield      #16                 // Field deferredSyntaxAllowedAsLiteral:Z
       4: ireturn

  public void setDeferredSyntaxAllowedAsLiteral(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field deferredSyntaxAllowedAsLiteral:Z
       5: return

  public javax.el.ExpressionFactory getExpressionFactory();
    Code:
       0: aload_0
       1: getfield      #18                 // Field expressionFactory:Ljavax/el/ExpressionFactory;
       4: areturn

  public java.lang.String getTrimDirectiveWhitespaces();
    Code:
       0: aload_0
       1: getfield      #108                // Field trimDirectiveWhitespacesValue:Ljava/lang/String;
       4: areturn

  public boolean isTrimDirectiveWhitespaces();
    Code:
       0: aload_0
       1: getfield      #19                 // Field trimDirectiveWhitespaces:Z
       4: ireturn

  public void setTrimDirectiveWhitespaces(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #19                 // Field trimDirectiveWhitespaces:Z
       5: return

  public java.util.Set<java.lang.String> getVarInfoNames();
    Code:
       0: aload_0
       1: getfield      #31                 // Field varInfoNames:Ljava/util/Set;
       4: areturn

  public boolean isErrorOnUndeclaredNamespace();
    Code:
       0: aload_0
       1: getfield      #25                 // Field errorOnUndeclaredNamepsace:Z
       4: ireturn

  public void setErrorOnUndeclaredNamespace(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #25                 // Field errorOnUndeclaredNamepsace:Z
       5: return
}
