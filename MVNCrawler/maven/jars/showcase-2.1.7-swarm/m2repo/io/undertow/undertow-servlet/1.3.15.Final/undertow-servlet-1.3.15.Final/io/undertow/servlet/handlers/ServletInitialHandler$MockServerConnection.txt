Compiled from "ServletInitialHandler.java"
class io.undertow.servlet.handlers.ServletInitialHandler$MockServerConnection extends io.undertow.server.ServerConnection {
  private final io.undertow.connector.ByteBufferPool bufferPool;

  private io.undertow.server.SSLSessionInfo sslSessionInfo;

  private io.undertow.server.XnioBufferPoolAdaptor poolAdaptor;

  private io.undertow.servlet.handlers.ServletInitialHandler$MockServerConnection(io.undertow.connector.ByteBufferPool);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method io/undertow/server/ServerConnection."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
       9: return

  public org.xnio.Pool<java.nio.ByteBuffer> getBufferPool();
    Code:
       0: aload_0
       1: getfield      #4                  // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
       4: ifnonnull     22
       7: aload_0
       8: new           #5                  // class io/undertow/server/XnioBufferPoolAdaptor
      11: dup
      12: aload_0
      13: invokevirtual #6                  // Method getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      16: invokespecial #7                  // Method io/undertow/server/XnioBufferPoolAdaptor."<init>":(Lio/undertow/connector/ByteBufferPool;)V
      19: putfield      #4                  // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
      22: aload_0
      23: getfield      #4                  // Field poolAdaptor:Lio/undertow/server/XnioBufferPoolAdaptor;
      26: areturn

  public io.undertow.connector.ByteBufferPool getByteBufferPool();
    Code:
       0: aload_0
       1: getfield      #3                  // Field bufferPool:Lio/undertow/connector/ByteBufferPool;
       4: areturn

  public org.xnio.XnioWorker getWorker();
    Code:
       0: aconst_null
       1: areturn

  public org.xnio.XnioIoThread getIoThread();
    Code:
       0: aconst_null
       1: areturn

  public io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange);
    Code:
       0: getstatic     #8                  // Field io/undertow/UndertowMessages.MESSAGES:Lio/undertow/UndertowMessages;
       3: invokeinterface #9,  1            // InterfaceMethod io/undertow/UndertowMessages.outOfBandResponseNotSupported:()Ljava/lang/IllegalStateException;
       8: athrow

  public boolean isContinueResponseSupported();
    Code:
       0: iconst_0
       1: ireturn

  public void terminateRequestChannel(io.undertow.server.HttpServerExchange);
    Code:
       0: return

  public boolean isOpen();
    Code:
       0: iconst_1
       1: ireturn

  public boolean supportsOption(org.xnio.Option<?>);
    Code:
       0: iconst_0
       1: ireturn

  public <T> T getOption(org.xnio.Option<T>) throws java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public <T> T setOption(org.xnio.Option<T>, T) throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public void close() throws java.io.IOException;
    Code:
       0: return

  public java.net.SocketAddress getPeerAddress();
    Code:
       0: aconst_null
       1: areturn

  public <A extends java.net.SocketAddress> A getPeerAddress(java.lang.Class<A>);
    Code:
       0: aconst_null
       1: areturn

  public org.xnio.ChannelListener$Setter<? extends org.xnio.channels.ConnectedChannel> getCloseSetter();
    Code:
       0: aconst_null
       1: areturn

  public java.net.SocketAddress getLocalAddress();
    Code:
       0: aconst_null
       1: areturn

  public <A extends java.net.SocketAddress> A getLocalAddress(java.lang.Class<A>);
    Code:
       0: aconst_null
       1: areturn

  public org.xnio.OptionMap getUndertowOptions();
    Code:
       0: getstatic     #10                 // Field org/xnio/OptionMap.EMPTY:Lorg/xnio/OptionMap;
       3: areturn

  public int getBufferSize();
    Code:
       0: sipush        1024
       3: ireturn

  public io.undertow.server.SSLSessionInfo getSslSessionInfo();
    Code:
       0: aload_0
       1: getfield      #11                 // Field sslSessionInfo:Lio/undertow/server/SSLSessionInfo;
       4: areturn

  public void setSslSessionInfo(io.undertow.server.SSLSessionInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field sslSessionInfo:Lio/undertow/server/SSLSessionInfo;
       5: return

  public void addCloseListener(io.undertow.server.ServerConnection$CloseListener);
    Code:
       0: return

  public org.xnio.StreamConnection upgradeChannel();
    Code:
       0: aconst_null
       1: areturn

  public org.xnio.conduits.ConduitStreamSinkChannel getSinkChannel();
    Code:
       0: aconst_null
       1: areturn

  public org.xnio.conduits.ConduitStreamSourceChannel getSourceChannel();
    Code:
       0: new           #12                 // class org/xnio/conduits/ConduitStreamSourceChannel
       3: dup
       4: aconst_null
       5: aconst_null
       6: invokespecial #13                 // Method org/xnio/conduits/ConduitStreamSourceChannel."<init>":(Lorg/xnio/channels/Configurable;Lorg/xnio/conduits/StreamSourceConduit;)V
       9: areturn

  protected org.xnio.conduits.StreamSinkConduit getSinkConduit(io.undertow.server.HttpServerExchange, org.xnio.conduits.StreamSinkConduit);
    Code:
       0: aload_2
       1: areturn

  protected boolean isUpgradeSupported();
    Code:
       0: iconst_0
       1: ireturn

  protected boolean isConnectSupported();
    Code:
       0: iconst_0
       1: ireturn

  protected void exchangeComplete(io.undertow.server.HttpServerExchange);
    Code:
       0: return

  protected void setUpgradeListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: return

  protected void setConnectListener(io.undertow.server.HttpUpgradeListener);
    Code:
       0: return

  protected void maxEntitySizeUpdated(io.undertow.server.HttpServerExchange);
    Code:
       0: return

  public java.lang.String getTransportProtocol();
    Code:
       0: ldc           #14                 // String mock
       2: areturn

  io.undertow.servlet.handlers.ServletInitialHandler$MockServerConnection(io.undertow.connector.ByteBufferPool, io.undertow.servlet.handlers.ServletInitialHandler$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lio/undertow/connector/ByteBufferPool;)V
       5: return
}
