Compiled from "Stylesheet.java"
public class org.apache.xalan.templates.Stylesheet extends org.apache.xalan.templates.ElemTemplateElement implements java.io.Serializable {
  static final long serialVersionUID;

  public static final java.lang.String STYLESHEET_EXT;

  private java.lang.String m_XmlnsXsl;

  private org.apache.xml.utils.StringVector m_ExtensionElementURIs;

  private org.apache.xml.utils.StringVector m_ExcludeResultPrefixs;

  private java.lang.String m_Id;

  private java.lang.String m_Version;

  private boolean m_isCompatibleMode;

  private java.util.Vector m_imports;

  private java.util.Vector m_includes;

  java.util.Stack m_DecimalFormatDeclarations;

  private java.util.Vector m_whitespaceStrippingElements;

  private java.util.Vector m_whitespacePreservingElements;

  private java.util.Vector m_output;

  private java.util.Vector m_keyDeclarations;

  private java.util.Vector m_attributeSets;

  private java.util.Vector m_topLevelVariables;

  private java.util.Vector m_templates;

  private java.util.Vector m_prefix_aliases;

  private java.util.Hashtable m_NonXslTopLevel;

  private java.lang.String m_href;

  private java.lang.String m_publicId;

  private java.lang.String m_systemId;

  private org.apache.xalan.templates.StylesheetRoot m_stylesheetRoot;

  private org.apache.xalan.templates.Stylesheet m_stylesheetParent;

  public org.apache.xalan.templates.Stylesheet(org.apache.xalan.templates.Stylesheet);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/xalan/templates/ElemTemplateElement."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field m_isCompatibleMode:Z
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field m_href:Ljava/lang/String;
      14: aconst_null
      15: aload_1
      16: if_acmpeq     32
      19: aload_0
      20: aload_1
      21: putfield      #4                  // Field m_stylesheetParent:Lorg/apache/xalan/templates/Stylesheet;
      24: aload_0
      25: aload_1
      26: invokevirtual #5                  // Method getStylesheetRoot:()Lorg/apache/xalan/templates/StylesheetRoot;
      29: putfield      #6                  // Field m_stylesheetRoot:Lorg/apache/xalan/templates/StylesheetRoot;
      32: return

  public org.apache.xalan.templates.Stylesheet getStylesheet();
    Code:
       0: aload_0
       1: areturn

  public boolean isAggregatedType();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isRoot();
    Code:
       0: iconst_0
       1: ireturn

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, javax.xml.transform.TransformerException;
    Code:
       0: aload_1
       1: invokevirtual #7                  // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: goto          17
       7: astore_2
       8: new           #9                  // class javax/xml/transform/TransformerException
      11: dup
      12: aload_2
      13: invokespecial #10                 // Method javax/xml/transform/TransformerException."<init>":(Ljava/lang/Throwable;)V
      16: athrow
      17: return
    Exception table:
       from    to  target type
           0     4     7   Class java/lang/ClassNotFoundException

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #11                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
       4: return

  public void setXmlnsXsl(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field m_XmlnsXsl:Ljava/lang/String;
       5: return

  public java.lang.String getXmlnsXsl();
    Code:
       0: aload_0
       1: getfield      #12                 // Field m_XmlnsXsl:Ljava/lang/String;
       4: areturn

  public void setExtensionElementPrefixes(org.apache.xml.utils.StringVector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
       5: return

  public java.lang.String getExtensionElementPrefix(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
      20: iload_1
      21: invokevirtual #16                 // Method org/apache/xml/utils/StringVector.elementAt:(I)Ljava/lang/String;
      24: areturn

  public int getExtensionElementPrefixCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
      12: invokevirtual #17                 // Method org/apache/xml/utils/StringVector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean containsExtensionElementURI(java.lang.String);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpne     10
       8: iconst_0
       9: ireturn
      10: aload_0
      11: getfield      #13                 // Field m_ExtensionElementURIs:Lorg/apache/xml/utils/StringVector;
      14: aload_1
      15: invokevirtual #18                 // Method org/apache/xml/utils/StringVector.contains:(Ljava/lang/String;)Z
      18: ireturn

  public void setExcludeResultPrefixes(org.apache.xml.utils.StringVector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
       5: return

  public java.lang.String getExcludeResultPrefix(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
      20: iload_1
      21: invokevirtual #16                 // Method org/apache/xml/utils/StringVector.elementAt:(I)Ljava/lang/String;
      24: areturn

  public int getExcludeResultPrefixCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
      12: invokevirtual #17                 // Method org/apache/xml/utils/StringVector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean containsExcludeResultPrefix(java.lang.String, java.lang.String);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
       5: if_acmpeq     12
       8: aload_2
       9: ifnonnull     14
      12: iconst_0
      13: ireturn
      14: iconst_0
      15: istore_3
      16: iload_3
      17: aload_0
      18: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
      21: invokevirtual #17                 // Method org/apache/xml/utils/StringVector.size:()I
      24: if_icmpge     54
      27: aload_2
      28: aload_0
      29: aload_0
      30: getfield      #19                 // Field m_ExcludeResultPrefixs:Lorg/apache/xml/utils/StringVector;
      33: iload_3
      34: invokevirtual #16                 // Method org/apache/xml/utils/StringVector.elementAt:(I)Ljava/lang/String;
      37: invokevirtual #20                 // Method getNamespaceForPrefix:(Ljava/lang/String;)Ljava/lang/String;
      40: invokevirtual #21                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      43: ifeq          48
      46: iconst_1
      47: ireturn
      48: iinc          3, 1
      51: goto          16
      54: iconst_0
      55: ireturn

  public void setId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field m_Id:Ljava/lang/String;
       5: return

  public java.lang.String getId();
    Code:
       0: aload_0
       1: getfield      #22                 // Field m_Id:Ljava/lang/String;
       4: areturn

  public void setVersion(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field m_Version:Ljava/lang/String;
       5: aload_0
       6: aload_1
       7: invokestatic  #24                 // Method java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;
      10: invokevirtual #25                 // Method java/lang/Double.doubleValue:()D
      13: dconst_1
      14: dcmpl
      15: ifle          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: putfield      #2                  // Field m_isCompatibleMode:Z
      26: return

  public boolean getCompatibleMode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field m_isCompatibleMode:Z
       4: ireturn

  public java.lang.String getVersion();
    Code:
       0: aload_0
       1: getfield      #23                 // Field m_Version:Ljava/lang/String;
       4: areturn

  public void setImport(org.apache.xalan.templates.StylesheetComposed);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #26                 // Field m_imports:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #26                 // Field m_imports:Ljava/util/Vector;
      19: aload_0
      20: getfield      #26                 // Field m_imports:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.StylesheetComposed getImport(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #26                 // Field m_imports:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #26                 // Field m_imports:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #31                 // class org/apache/xalan/templates/StylesheetComposed
      27: areturn

  public int getImportCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #26                 // Field m_imports:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #26                 // Field m_imports:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setInclude(org.apache.xalan.templates.Stylesheet);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #33                 // Field m_includes:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #33                 // Field m_includes:Ljava/util/Vector;
      19: aload_0
      20: getfield      #33                 // Field m_includes:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.Stylesheet getInclude(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #33                 // Field m_includes:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #33                 // Field m_includes:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #34                 // class org/apache/xalan/templates/Stylesheet
      27: areturn

  public int getIncludeCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #33                 // Field m_includes:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #33                 // Field m_includes:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setDecimalFormat(org.apache.xalan.templates.DecimalFormatProperties);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
       5: if_acmpne     19
       8: aload_0
       9: new           #36                 // class java/util/Stack
      12: dup
      13: invokespecial #37                 // Method java/util/Stack."<init>":()V
      16: putfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
      19: aload_0
      20: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
      23: aload_1
      24: invokevirtual #38                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      27: pop
      28: return

  public org.apache.xalan.templates.DecimalFormatProperties getDecimalFormat(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
       5: if_acmpne     10
       8: aconst_null
       9: areturn
      10: aload_0
      11: invokevirtual #39                 // Method getDecimalFormatCount:()I
      14: istore_2
      15: iload_2
      16: iconst_1
      17: isub
      18: istore_3
      19: iload_3
      20: iflt          51
      23: aload_0
      24: iload_3
      25: invokevirtual #40                 // Method getDecimalFormat:(I)Lorg/apache/xalan/templates/DecimalFormatProperties;
      28: astore        4
      30: aload         4
      32: invokevirtual #41                 // Method org/apache/xalan/templates/DecimalFormatProperties.getName:()Lorg/apache/xml/utils/QName;
      35: aload_1
      36: invokevirtual #42                 // Method org/apache/xml/utils/QName.equals:(Ljava/lang/Object;)Z
      39: ifeq          45
      42: aload         4
      44: areturn
      45: iinc          3, 1
      48: goto          19
      51: aconst_null
      52: areturn

  public org.apache.xalan.templates.DecimalFormatProperties getDecimalFormat(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
      20: iload_1
      21: invokevirtual #43                 // Method java/util/Stack.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #44                 // class org/apache/xalan/templates/DecimalFormatProperties
      27: areturn

  public int getDecimalFormatCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #35                 // Field m_DecimalFormatDeclarations:Ljava/util/Stack;
      12: invokevirtual #45                 // Method java/util/Stack.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setStripSpaces(org.apache.xalan.templates.WhiteSpaceInfo);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #46                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #46                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
      19: aload_0
      20: getfield      #46                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.WhiteSpaceInfo getStripSpace(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #46                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #46                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #47                 // class org/apache/xalan/templates/WhiteSpaceInfo
      27: areturn

  public int getStripSpaceCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #46                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #46                 // Field m_whitespaceStrippingElements:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setPreserveSpaces(org.apache.xalan.templates.WhiteSpaceInfo);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #48                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #48                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
      19: aload_0
      20: getfield      #48                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.WhiteSpaceInfo getPreserveSpace(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #48                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #48                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #47                 // class org/apache/xalan/templates/WhiteSpaceInfo
      27: areturn

  public int getPreserveSpaceCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #48                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #48                 // Field m_whitespacePreservingElements:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setOutput(org.apache.xalan.templates.OutputProperties);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #49                 // Field m_output:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #49                 // Field m_output:Ljava/util/Vector;
      19: aload_0
      20: getfield      #49                 // Field m_output:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.OutputProperties getOutput(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #49                 // Field m_output:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #49                 // Field m_output:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #50                 // class org/apache/xalan/templates/OutputProperties
      27: areturn

  public int getOutputCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #49                 // Field m_output:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #49                 // Field m_output:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setKey(org.apache.xalan.templates.KeyDeclaration);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #51                 // Field m_keyDeclarations:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #51                 // Field m_keyDeclarations:Ljava/util/Vector;
      19: aload_0
      20: getfield      #51                 // Field m_keyDeclarations:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.KeyDeclaration getKey(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #51                 // Field m_keyDeclarations:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #51                 // Field m_keyDeclarations:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #52                 // class org/apache/xalan/templates/KeyDeclaration
      27: areturn

  public int getKeyCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #51                 // Field m_keyDeclarations:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #51                 // Field m_keyDeclarations:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setAttributeSet(org.apache.xalan.templates.ElemAttributeSet);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #53                 // Field m_attributeSets:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #53                 // Field m_attributeSets:Ljava/util/Vector;
      19: aload_0
      20: getfield      #53                 // Field m_attributeSets:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.ElemAttributeSet getAttributeSet(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #53                 // Field m_attributeSets:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #53                 // Field m_attributeSets:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #54                 // class org/apache/xalan/templates/ElemAttributeSet
      27: areturn

  public int getAttributeSetCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #53                 // Field m_attributeSets:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #53                 // Field m_attributeSets:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setVariable(org.apache.xalan.templates.ElemVariable);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
      19: aload_0
      20: getfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: return

  public org.apache.xalan.templates.ElemVariable getVariableOrParam(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpeq     48
       8: aload_0
       9: invokevirtual #56                 // Method getVariableOrParamCount:()I
      12: istore_2
      13: iconst_0
      14: istore_3
      15: iload_3
      16: iload_2
      17: if_icmpge     48
      20: aload_0
      21: iload_3
      22: invokevirtual #57                 // Method getVariableOrParam:(I)Lorg/apache/xalan/templates/ElemVariable;
      25: astore        4
      27: aload         4
      29: invokevirtual #58                 // Method org/apache/xalan/templates/ElemVariable.getName:()Lorg/apache/xml/utils/QName;
      32: aload_1
      33: invokevirtual #42                 // Method org/apache/xml/utils/QName.equals:(Ljava/lang/Object;)Z
      36: ifeq          42
      39: aload         4
      41: areturn
      42: iinc          3, 1
      45: goto          15
      48: aconst_null
      49: areturn

  public org.apache.xalan.templates.ElemVariable getVariable(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpeq     58
       8: aload_0
       9: invokevirtual #56                 // Method getVariableOrParamCount:()I
      12: istore_2
      13: iconst_0
      14: istore_3
      15: iload_3
      16: iload_2
      17: if_icmpge     58
      20: aload_0
      21: iload_3
      22: invokevirtual #57                 // Method getVariableOrParam:(I)Lorg/apache/xalan/templates/ElemVariable;
      25: astore        4
      27: aload         4
      29: invokevirtual #59                 // Method org/apache/xalan/templates/ElemVariable.getXSLToken:()I
      32: bipush        73
      34: if_icmpne     52
      37: aload         4
      39: invokevirtual #58                 // Method org/apache/xalan/templates/ElemVariable.getName:()Lorg/apache/xml/utils/QName;
      42: aload_1
      43: invokevirtual #42                 // Method org/apache/xml/utils/QName.equals:(Ljava/lang/Object;)Z
      46: ifeq          52
      49: aload         4
      51: areturn
      52: iinc          3, 1
      55: goto          15
      58: aconst_null
      59: areturn

  public org.apache.xalan.templates.ElemVariable getVariableOrParam(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #60                 // class org/apache/xalan/templates/ElemVariable
      27: areturn

  public int getVariableOrParamCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setParam(org.apache.xalan.templates.ElemParam);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #61                 // Method setVariable:(Lorg/apache/xalan/templates/ElemVariable;)V
       5: return

  public org.apache.xalan.templates.ElemParam getParam(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #55                 // Field m_topLevelVariables:Ljava/util/Vector;
       5: if_acmpeq     61
       8: aload_0
       9: invokevirtual #56                 // Method getVariableOrParamCount:()I
      12: istore_2
      13: iconst_0
      14: istore_3
      15: iload_3
      16: iload_2
      17: if_icmpge     61
      20: aload_0
      21: iload_3
      22: invokevirtual #57                 // Method getVariableOrParam:(I)Lorg/apache/xalan/templates/ElemVariable;
      25: astore        4
      27: aload         4
      29: invokevirtual #59                 // Method org/apache/xalan/templates/ElemVariable.getXSLToken:()I
      32: bipush        41
      34: if_icmpne     55
      37: aload         4
      39: invokevirtual #58                 // Method org/apache/xalan/templates/ElemVariable.getName:()Lorg/apache/xml/utils/QName;
      42: aload_1
      43: invokevirtual #42                 // Method org/apache/xml/utils/QName.equals:(Ljava/lang/Object;)Z
      46: ifeq          55
      49: aload         4
      51: checkcast     #62                 // class org/apache/xalan/templates/ElemParam
      54: areturn
      55: iinc          3, 1
      58: goto          15
      61: aconst_null
      62: areturn

  public void setTemplate(org.apache.xalan.templates.ElemTemplate);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #63                 // Field m_templates:Ljava/util/Vector;
       5: if_acmpne     19
       8: aload_0
       9: new           #27                 // class java/util/Vector
      12: dup
      13: invokespecial #28                 // Method java/util/Vector."<init>":()V
      16: putfield      #63                 // Field m_templates:Ljava/util/Vector;
      19: aload_0
      20: getfield      #63                 // Field m_templates:Ljava/util/Vector;
      23: aload_1
      24: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      27: aload_1
      28: aload_0
      29: invokevirtual #64                 // Method org/apache/xalan/templates/ElemTemplate.setStylesheet:(Lorg/apache/xalan/templates/Stylesheet;)V
      32: return

  public org.apache.xalan.templates.ElemTemplate getTemplate(int) throws javax.xml.transform.TransformerException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #63                 // Field m_templates:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #63                 // Field m_templates:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #65                 // class org/apache/xalan/templates/ElemTemplate
      27: areturn

  public int getTemplateCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #63                 // Field m_templates:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #63                 // Field m_templates:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setNamespaceAlias(org.apache.xalan.templates.NamespaceAlias);
    Code:
       0: aload_0
       1: getfield      #66                 // Field m_prefix_aliases:Ljava/util/Vector;
       4: ifnonnull     18
       7: aload_0
       8: new           #27                 // class java/util/Vector
      11: dup
      12: invokespecial #28                 // Method java/util/Vector."<init>":()V
      15: putfield      #66                 // Field m_prefix_aliases:Ljava/util/Vector;
      18: aload_0
      19: getfield      #66                 // Field m_prefix_aliases:Ljava/util/Vector;
      22: aload_1
      23: invokevirtual #29                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      26: return

  public org.apache.xalan.templates.NamespaceAlias getNamespaceAlias(int) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #66                 // Field m_prefix_aliases:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #66                 // Field m_prefix_aliases:Ljava/util/Vector;
      20: iload_1
      21: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      24: checkcast     #67                 // class org/apache/xalan/templates/NamespaceAlias
      27: areturn

  public int getNamespaceAliasCount();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #66                 // Field m_prefix_aliases:Ljava/util/Vector;
       5: if_acmpeq     18
       8: aload_0
       9: getfield      #66                 // Field m_prefix_aliases:Ljava/util/Vector;
      12: invokevirtual #32                 // Method java/util/Vector.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setNonXslTopLevel(org.apache.xml.utils.QName, java.lang.Object);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #68                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
       5: if_acmpne     19
       8: aload_0
       9: new           #69                 // class java/util/Hashtable
      12: dup
      13: invokespecial #70                 // Method java/util/Hashtable."<init>":()V
      16: putfield      #68                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
      19: aload_0
      20: getfield      #68                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
      23: aload_1
      24: aload_2
      25: invokevirtual #71                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      28: pop
      29: return

  public java.lang.Object getNonXslTopLevel(org.apache.xml.utils.QName);
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #68                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
       5: if_acmpeq     19
       8: aload_0
       9: getfield      #68                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
      12: aload_1
      13: invokevirtual #72                 // Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: goto          20
      19: aconst_null
      20: areturn

  public java.lang.String getHref();
    Code:
       0: aload_0
       1: getfield      #3                  // Field m_href:Ljava/lang/String;
       4: areturn

  public void setHref(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field m_href:Ljava/lang/String;
       5: return

  public void setLocaterInfo(javax.xml.transform.SourceLocator);
    Code:
       0: aconst_null
       1: aload_1
       2: if_acmpeq     54
       5: aload_0
       6: aload_1
       7: invokeinterface #73,  1           // InterfaceMethod javax/xml/transform/SourceLocator.getPublicId:()Ljava/lang/String;
      12: putfield      #74                 // Field m_publicId:Ljava/lang/String;
      15: aload_0
      16: aload_1
      17: invokeinterface #75,  1           // InterfaceMethod javax/xml/transform/SourceLocator.getSystemId:()Ljava/lang/String;
      22: putfield      #76                 // Field m_systemId:Ljava/lang/String;
      25: aconst_null
      26: aload_0
      27: getfield      #76                 // Field m_systemId:Ljava/lang/String;
      30: if_acmpeq     49
      33: aload_0
      34: aload_0
      35: getfield      #76                 // Field m_systemId:Ljava/lang/String;
      38: aconst_null
      39: invokestatic  #77                 // Method org/apache/xml/utils/SystemIDResolver.getAbsoluteURI:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      42: putfield      #3                  // Field m_href:Ljava/lang/String;
      45: goto          49
      48: astore_2
      49: aload_0
      50: aload_1
      51: invokespecial #78                 // Method org/apache/xalan/templates/ElemTemplateElement.setLocaterInfo:(Ljavax/xml/transform/SourceLocator;)V
      54: return
    Exception table:
       from    to  target type
          33    45    48   Class javax/xml/transform/TransformerException

  public org.apache.xalan.templates.StylesheetRoot getStylesheetRoot();
    Code:
       0: aload_0
       1: getfield      #6                  // Field m_stylesheetRoot:Lorg/apache/xalan/templates/StylesheetRoot;
       4: areturn

  public void setStylesheetRoot(org.apache.xalan.templates.StylesheetRoot);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field m_stylesheetRoot:Lorg/apache/xalan/templates/StylesheetRoot;
       5: return

  public org.apache.xalan.templates.Stylesheet getStylesheetParent();
    Code:
       0: aload_0
       1: getfield      #4                  // Field m_stylesheetParent:Lorg/apache/xalan/templates/Stylesheet;
       4: areturn

  public void setStylesheetParent(org.apache.xalan.templates.Stylesheet);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field m_stylesheetParent:Lorg/apache/xalan/templates/Stylesheet;
       5: return

  public org.apache.xalan.templates.StylesheetComposed getStylesheetComposed();
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: invokevirtual #79                 // Method isAggregatedType:()Z
       6: ifne          17
       9: aload_1
      10: invokevirtual #80                 // Method getStylesheetParent:()Lorg/apache/xalan/templates/Stylesheet;
      13: astore_1
      14: goto          2
      17: aload_1
      18: checkcast     #31                 // class org/apache/xalan/templates/StylesheetComposed
      21: areturn

  public short getNodeType();
    Code:
       0: bipush        9
       2: ireturn

  public int getXSLToken();
    Code:
       0: bipush        25
       2: ireturn

  public java.lang.String getNodeName();
    Code:
       0: ldc           #81                 // String stylesheet
       2: areturn

  public void replaceTemplate(org.apache.xalan.templates.ElemTemplate, int) throws javax.xml.transform.TransformerException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #63                 // Field m_templates:Ljava/util/Vector;
       5: if_acmpne     16
       8: new           #14                 // class java/lang/ArrayIndexOutOfBoundsException
      11: dup
      12: invokespecial #15                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      15: athrow
      16: aload_0
      17: aload_1
      18: aload_0
      19: getfield      #63                 // Field m_templates:Ljava/util/Vector;
      22: iload_2
      23: invokevirtual #30                 // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      26: checkcast     #82                 // class org/apache/xalan/templates/ElemTemplateElement
      29: invokevirtual #83                 // Method replaceChild:(Lorg/apache/xalan/templates/ElemTemplateElement;Lorg/apache/xalan/templates/ElemTemplateElement;)Lorg/apache/xalan/templates/ElemTemplateElement;
      32: pop
      33: aload_0
      34: getfield      #63                 // Field m_templates:Ljava/util/Vector;
      37: aload_1
      38: iload_2
      39: invokevirtual #84                 // Method java/util/Vector.setElementAt:(Ljava/lang/Object;I)V
      42: aload_1
      43: aload_0
      44: invokevirtual #64                 // Method org/apache/xalan/templates/ElemTemplate.setStylesheet:(Lorg/apache/xalan/templates/Stylesheet;)V
      47: return

  protected void callChildVisitors(org.apache.xalan.templates.XSLTVisitor, boolean);
    Code:
       0: aload_0
       1: invokevirtual #85                 // Method getImportCount:()I
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     30
      14: aload_0
      15: iload         4
      17: invokevirtual #86                 // Method getImport:(I)Lorg/apache/xalan/templates/StylesheetComposed;
      20: aload_1
      21: invokevirtual #87                 // Method org/apache/xalan/templates/StylesheetComposed.callVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
      24: iinc          4, 1
      27: goto          8
      30: aload_0
      31: invokevirtual #88                 // Method getIncludeCount:()I
      34: istore_3
      35: iconst_0
      36: istore        4
      38: iload         4
      40: iload_3
      41: if_icmpge     60
      44: aload_0
      45: iload         4
      47: invokevirtual #89                 // Method getInclude:(I)Lorg/apache/xalan/templates/Stylesheet;
      50: aload_1
      51: invokevirtual #90                 // Method callVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
      54: iinc          4, 1
      57: goto          38
      60: aload_0
      61: invokevirtual #91                 // Method getOutputCount:()I
      64: istore_3
      65: iconst_0
      66: istore        4
      68: iload         4
      70: iload_3
      71: if_icmpge     91
      74: aload_1
      75: aload_0
      76: iload         4
      78: invokevirtual #92                 // Method getOutput:(I)Lorg/apache/xalan/templates/OutputProperties;
      81: invokevirtual #93                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
      84: pop
      85: iinc          4, 1
      88: goto          68
      91: aload_0
      92: invokevirtual #94                 // Method getAttributeSetCount:()I
      95: istore_3
      96: iconst_0
      97: istore        4
      99: iload         4
     101: iload_3
     102: if_icmpge     134
     105: aload_0
     106: iload         4
     108: invokevirtual #95                 // Method getAttributeSet:(I)Lorg/apache/xalan/templates/ElemAttributeSet;
     111: astore        5
     113: aload_1
     114: aload         5
     116: invokevirtual #93                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     119: ifeq          128
     122: aload         5
     124: aload_1
     125: invokevirtual #96                 // Method org/apache/xalan/templates/ElemAttributeSet.callChildVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
     128: iinc          4, 1
     131: goto          99
     134: aload_0
     135: invokevirtual #39                 // Method getDecimalFormatCount:()I
     138: istore_3
     139: iconst_0
     140: istore        4
     142: iload         4
     144: iload_3
     145: if_icmpge     165
     148: aload_1
     149: aload_0
     150: iload         4
     152: invokevirtual #40                 // Method getDecimalFormat:(I)Lorg/apache/xalan/templates/DecimalFormatProperties;
     155: invokevirtual #93                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     158: pop
     159: iinc          4, 1
     162: goto          142
     165: aload_0
     166: invokevirtual #97                 // Method getKeyCount:()I
     169: istore_3
     170: iconst_0
     171: istore        4
     173: iload         4
     175: iload_3
     176: if_icmpge     196
     179: aload_1
     180: aload_0
     181: iload         4
     183: invokevirtual #98                 // Method getKey:(I)Lorg/apache/xalan/templates/KeyDeclaration;
     186: invokevirtual #93                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     189: pop
     190: iinc          4, 1
     193: goto          173
     196: aload_0
     197: invokevirtual #99                 // Method getNamespaceAliasCount:()I
     200: istore_3
     201: iconst_0
     202: istore        4
     204: iload         4
     206: iload_3
     207: if_icmpge     227
     210: aload_1
     211: aload_0
     212: iload         4
     214: invokevirtual #100                // Method getNamespaceAlias:(I)Lorg/apache/xalan/templates/NamespaceAlias;
     217: invokevirtual #93                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     220: pop
     221: iinc          4, 1
     224: goto          204
     227: aload_0
     228: invokevirtual #101                // Method getTemplateCount:()I
     231: istore_3
     232: iconst_0
     233: istore        4
     235: iload         4
     237: iload_3
     238: if_icmpge     285
     241: aload_0
     242: iload         4
     244: invokevirtual #102                // Method getTemplate:(I)Lorg/apache/xalan/templates/ElemTemplate;
     247: astore        5
     249: aload_1
     250: aload         5
     252: invokevirtual #93                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     255: ifeq          264
     258: aload         5
     260: aload_1
     261: invokevirtual #103                // Method org/apache/xalan/templates/ElemTemplate.callChildVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
     264: goto          279
     267: astore        5
     269: new           #104                // class org/apache/xml/utils/WrappedRuntimeException
     272: dup
     273: aload         5
     275: invokespecial #105                // Method org/apache/xml/utils/WrappedRuntimeException."<init>":(Ljava/lang/Exception;)V
     278: athrow
     279: iinc          4, 1
     282: goto          235
     285: aload_0
     286: invokevirtual #56                 // Method getVariableOrParamCount:()I
     289: istore_3
     290: iconst_0
     291: istore        4
     293: iload         4
     295: iload_3
     296: if_icmpge     328
     299: aload_0
     300: iload         4
     302: invokevirtual #57                 // Method getVariableOrParam:(I)Lorg/apache/xalan/templates/ElemVariable;
     305: astore        5
     307: aload_1
     308: aload         5
     310: invokevirtual #106                // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelVariableOrParamDecl:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     313: ifeq          322
     316: aload         5
     318: aload_1
     319: invokevirtual #107                // Method org/apache/xalan/templates/ElemVariable.callChildVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
     322: iinc          4, 1
     325: goto          293
     328: aload_0
     329: invokevirtual #108                // Method getStripSpaceCount:()I
     332: istore_3
     333: iconst_0
     334: istore        4
     336: iload         4
     338: iload_3
     339: if_icmpge     359
     342: aload_1
     343: aload_0
     344: iload         4
     346: invokevirtual #109                // Method getStripSpace:(I)Lorg/apache/xalan/templates/WhiteSpaceInfo;
     349: invokevirtual #93                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     352: pop
     353: iinc          4, 1
     356: goto          336
     359: aload_0
     360: invokevirtual #110                // Method getPreserveSpaceCount:()I
     363: istore_3
     364: iconst_0
     365: istore        4
     367: iload         4
     369: iload_3
     370: if_icmpge     390
     373: aload_1
     374: aload_0
     375: iload         4
     377: invokevirtual #111                // Method getPreserveSpace:(I)Lorg/apache/xalan/templates/WhiteSpaceInfo;
     380: invokevirtual #93                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     383: pop
     384: iinc          4, 1
     387: goto          367
     390: aconst_null
     391: aload_0
     392: getfield      #68                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
     395: if_acmpeq     447
     398: aload_0
     399: getfield      #68                 // Field m_NonXslTopLevel:Ljava/util/Hashtable;
     402: invokevirtual #112                // Method java/util/Hashtable.elements:()Ljava/util/Enumeration;
     405: astore        4
     407: aload         4
     409: invokeinterface #113,  1          // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
     414: ifeq          447
     417: aload         4
     419: invokeinterface #114,  1          // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
     424: checkcast     #82                 // class org/apache/xalan/templates/ElemTemplateElement
     427: astore        5
     429: aload_1
     430: aload         5
     432: invokevirtual #93                 // Method org/apache/xalan/templates/XSLTVisitor.visitTopLevelInstruction:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
     435: ifeq          444
     438: aload         5
     440: aload_1
     441: invokevirtual #115                // Method org/apache/xalan/templates/ElemTemplateElement.callChildVisitors:(Lorg/apache/xalan/templates/XSLTVisitor;)V
     444: goto          407
     447: return
    Exception table:
       from    to  target type
         241   264   267   Class javax/xml/transform/TransformerException

  protected boolean accept(org.apache.xalan.templates.XSLTVisitor);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #116                // Method org/apache/xalan/templates/XSLTVisitor.visitStylesheet:(Lorg/apache/xalan/templates/ElemTemplateElement;)Z
       5: ireturn
}
