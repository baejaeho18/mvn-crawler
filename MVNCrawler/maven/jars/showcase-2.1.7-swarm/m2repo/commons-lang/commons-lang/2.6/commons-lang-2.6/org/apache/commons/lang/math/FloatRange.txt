Compiled from "FloatRange.java"
public final class org.apache.commons.lang.math.FloatRange extends org.apache.commons.lang.math.Range implements java.io.Serializable {
  private static final long serialVersionUID;

  private final float min;

  private final float max;

  private transient java.lang.Float minObject;

  private transient java.lang.Float maxObject;

  private transient int hashCode;

  private transient java.lang.String toString;

  public org.apache.commons.lang.math.FloatRange(float);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/lang/math/Range."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field minObject:Ljava/lang/Float;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field maxObject:Ljava/lang/Float;
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field hashCode:I
      19: aload_0
      20: aconst_null
      21: putfield      #5                  // Field toString:Ljava/lang/String;
      24: fload_1
      25: invokestatic  #6                  // Method java/lang/Float.isNaN:(F)Z
      28: ifeq          41
      31: new           #7                  // class java/lang/IllegalArgumentException
      34: dup
      35: ldc           #8                  // String The number must not be NaN
      37: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_0
      42: fload_1
      43: putfield      #10                 // Field min:F
      46: aload_0
      47: fload_1
      48: putfield      #11                 // Field max:F
      51: return

  public org.apache.commons.lang.math.FloatRange(java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/lang/math/Range."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field minObject:Ljava/lang/Float;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field maxObject:Ljava/lang/Float;
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field hashCode:I
      19: aload_0
      20: aconst_null
      21: putfield      #5                  // Field toString:Ljava/lang/String;
      24: aload_1
      25: ifnonnull     38
      28: new           #7                  // class java/lang/IllegalArgumentException
      31: dup
      32: ldc           #12                 // String The number must not be null
      34: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: aload_1
      40: invokevirtual #13                 // Method java/lang/Number.floatValue:()F
      43: putfield      #10                 // Field min:F
      46: aload_0
      47: aload_1
      48: invokevirtual #13                 // Method java/lang/Number.floatValue:()F
      51: putfield      #11                 // Field max:F
      54: aload_0
      55: getfield      #10                 // Field min:F
      58: invokestatic  #6                  // Method java/lang/Float.isNaN:(F)Z
      61: ifne          74
      64: aload_0
      65: getfield      #11                 // Field max:F
      68: invokestatic  #6                  // Method java/lang/Float.isNaN:(F)Z
      71: ifeq          84
      74: new           #7                  // class java/lang/IllegalArgumentException
      77: dup
      78: ldc           #8                  // String The number must not be NaN
      80: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: aload_1
      85: instanceof    #14                 // class java/lang/Float
      88: ifeq          107
      91: aload_0
      92: aload_1
      93: checkcast     #14                 // class java/lang/Float
      96: putfield      #2                  // Field minObject:Ljava/lang/Float;
      99: aload_0
     100: aload_1
     101: checkcast     #14                 // class java/lang/Float
     104: putfield      #3                  // Field maxObject:Ljava/lang/Float;
     107: return

  public org.apache.commons.lang.math.FloatRange(float, float);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/lang/math/Range."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field minObject:Ljava/lang/Float;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field maxObject:Ljava/lang/Float;
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field hashCode:I
      19: aload_0
      20: aconst_null
      21: putfield      #5                  // Field toString:Ljava/lang/String;
      24: fload_1
      25: invokestatic  #6                  // Method java/lang/Float.isNaN:(F)Z
      28: ifne          38
      31: fload_2
      32: invokestatic  #6                  // Method java/lang/Float.isNaN:(F)Z
      35: ifeq          48
      38: new           #7                  // class java/lang/IllegalArgumentException
      41: dup
      42: ldc           #15                 // String The numbers must not be NaN
      44: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: fload_2
      49: fload_1
      50: fcmpg
      51: ifge          67
      54: aload_0
      55: fload_2
      56: putfield      #10                 // Field min:F
      59: aload_0
      60: fload_1
      61: putfield      #11                 // Field max:F
      64: goto          77
      67: aload_0
      68: fload_1
      69: putfield      #10                 // Field min:F
      72: aload_0
      73: fload_2
      74: putfield      #11                 // Field max:F
      77: return

  public org.apache.commons.lang.math.FloatRange(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/lang/math/Range."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field minObject:Ljava/lang/Float;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field maxObject:Ljava/lang/Float;
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field hashCode:I
      19: aload_0
      20: aconst_null
      21: putfield      #5                  // Field toString:Ljava/lang/String;
      24: aload_1
      25: ifnull        32
      28: aload_2
      29: ifnonnull     42
      32: new           #7                  // class java/lang/IllegalArgumentException
      35: dup
      36: ldc           #16                 // String The numbers must not be null
      38: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_1
      43: invokevirtual #13                 // Method java/lang/Number.floatValue:()F
      46: fstore_3
      47: aload_2
      48: invokevirtual #13                 // Method java/lang/Number.floatValue:()F
      51: fstore        4
      53: fload_3
      54: invokestatic  #6                  // Method java/lang/Float.isNaN:(F)Z
      57: ifne          68
      60: fload         4
      62: invokestatic  #6                  // Method java/lang/Float.isNaN:(F)Z
      65: ifeq          78
      68: new           #7                  // class java/lang/IllegalArgumentException
      71: dup
      72: ldc           #15                 // String The numbers must not be NaN
      74: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: fload         4
      80: fload_3
      81: fcmpg
      82: ifge          129
      85: aload_0
      86: fload         4
      88: putfield      #10                 // Field min:F
      91: aload_0
      92: fload_3
      93: putfield      #11                 // Field max:F
      96: aload_2
      97: instanceof    #14                 // class java/lang/Float
     100: ifeq          111
     103: aload_0
     104: aload_2
     105: checkcast     #14                 // class java/lang/Float
     108: putfield      #2                  // Field minObject:Ljava/lang/Float;
     111: aload_1
     112: instanceof    #14                 // class java/lang/Float
     115: ifeq          170
     118: aload_0
     119: aload_1
     120: checkcast     #14                 // class java/lang/Float
     123: putfield      #3                  // Field maxObject:Ljava/lang/Float;
     126: goto          170
     129: aload_0
     130: fload_3
     131: putfield      #10                 // Field min:F
     134: aload_0
     135: fload         4
     137: putfield      #11                 // Field max:F
     140: aload_1
     141: instanceof    #14                 // class java/lang/Float
     144: ifeq          155
     147: aload_0
     148: aload_1
     149: checkcast     #14                 // class java/lang/Float
     152: putfield      #2                  // Field minObject:Ljava/lang/Float;
     155: aload_2
     156: instanceof    #14                 // class java/lang/Float
     159: ifeq          170
     162: aload_0
     163: aload_2
     164: checkcast     #14                 // class java/lang/Float
     167: putfield      #3                  // Field maxObject:Ljava/lang/Float;
     170: return

  public java.lang.Number getMinimumNumber();
    Code:
       0: aload_0
       1: getfield      #2                  // Field minObject:Ljava/lang/Float;
       4: ifnonnull     22
       7: aload_0
       8: new           #14                 // class java/lang/Float
      11: dup
      12: aload_0
      13: getfield      #10                 // Field min:F
      16: invokespecial #17                 // Method java/lang/Float."<init>":(F)V
      19: putfield      #2                  // Field minObject:Ljava/lang/Float;
      22: aload_0
      23: getfield      #2                  // Field minObject:Ljava/lang/Float;
      26: areturn

  public long getMinimumLong();
    Code:
       0: aload_0
       1: getfield      #10                 // Field min:F
       4: f2l
       5: lreturn

  public int getMinimumInteger();
    Code:
       0: aload_0
       1: getfield      #10                 // Field min:F
       4: f2i
       5: ireturn

  public double getMinimumDouble();
    Code:
       0: aload_0
       1: getfield      #10                 // Field min:F
       4: f2d
       5: dreturn

  public float getMinimumFloat();
    Code:
       0: aload_0
       1: getfield      #10                 // Field min:F
       4: freturn

  public java.lang.Number getMaximumNumber();
    Code:
       0: aload_0
       1: getfield      #3                  // Field maxObject:Ljava/lang/Float;
       4: ifnonnull     22
       7: aload_0
       8: new           #14                 // class java/lang/Float
      11: dup
      12: aload_0
      13: getfield      #11                 // Field max:F
      16: invokespecial #17                 // Method java/lang/Float."<init>":(F)V
      19: putfield      #3                  // Field maxObject:Ljava/lang/Float;
      22: aload_0
      23: getfield      #3                  // Field maxObject:Ljava/lang/Float;
      26: areturn

  public long getMaximumLong();
    Code:
       0: aload_0
       1: getfield      #11                 // Field max:F
       4: f2l
       5: lreturn

  public int getMaximumInteger();
    Code:
       0: aload_0
       1: getfield      #11                 // Field max:F
       4: f2i
       5: ireturn

  public double getMaximumDouble();
    Code:
       0: aload_0
       1: getfield      #11                 // Field max:F
       4: f2d
       5: dreturn

  public float getMaximumFloat();
    Code:
       0: aload_0
       1: getfield      #11                 // Field max:F
       4: freturn

  public boolean containsNumber(java.lang.Number);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: aload_1
       8: invokevirtual #13                 // Method java/lang/Number.floatValue:()F
      11: invokevirtual #18                 // Method containsFloat:(F)Z
      14: ireturn

  public boolean containsFloat(float);
    Code:
       0: fload_1
       1: aload_0
       2: getfield      #10                 // Field min:F
       5: fcmpl
       6: iflt          22
       9: fload_1
      10: aload_0
      11: getfield      #11                 // Field max:F
      14: fcmpg
      15: ifgt          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public boolean containsRange(org.apache.commons.lang.math.Range);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: aload_1
       8: invokevirtual #19                 // Method org/apache/commons/lang/math/Range.getMinimumFloat:()F
      11: invokevirtual #18                 // Method containsFloat:(F)Z
      14: ifeq          32
      17: aload_0
      18: aload_1
      19: invokevirtual #20                 // Method org/apache/commons/lang/math/Range.getMaximumFloat:()F
      22: invokevirtual #18                 // Method containsFloat:(F)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public boolean overlapsRange(org.apache.commons.lang.math.Range);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_1
       7: aload_0
       8: getfield      #10                 // Field min:F
      11: invokevirtual #21                 // Method org/apache/commons/lang/math/Range.containsFloat:(F)Z
      14: ifne          39
      17: aload_1
      18: aload_0
      19: getfield      #11                 // Field max:F
      22: invokevirtual #21                 // Method org/apache/commons/lang/math/Range.containsFloat:(F)Z
      25: ifne          39
      28: aload_0
      29: aload_1
      30: invokevirtual #19                 // Method org/apache/commons/lang/math/Range.getMinimumFloat:()F
      33: invokevirtual #18                 // Method containsFloat:(F)Z
      36: ifeq          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #22                 // class org/apache/commons/lang/math/FloatRange
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #22                 // class org/apache/commons/lang/math/FloatRange
      20: astore_2
      21: aload_0
      22: getfield      #10                 // Field min:F
      25: invokestatic  #23                 // Method java/lang/Float.floatToIntBits:(F)I
      28: aload_2
      29: getfield      #10                 // Field min:F
      32: invokestatic  #23                 // Method java/lang/Float.floatToIntBits:(F)I
      35: if_icmpne     59
      38: aload_0
      39: getfield      #11                 // Field max:F
      42: invokestatic  #23                 // Method java/lang/Float.floatToIntBits:(F)I
      45: aload_2
      46: getfield      #11                 // Field max:F
      49: invokestatic  #23                 // Method java/lang/Float.floatToIntBits:(F)I
      52: if_icmpne     59
      55: iconst_1
      56: goto          60
      59: iconst_0
      60: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #4                  // Field hashCode:I
       4: ifne          70
       7: aload_0
       8: bipush        17
      10: putfield      #4                  // Field hashCode:I
      13: aload_0
      14: bipush        37
      16: aload_0
      17: getfield      #4                  // Field hashCode:I
      20: imul
      21: aload_0
      22: invokevirtual #24                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      25: invokevirtual #25                 // Method java/lang/Object.hashCode:()I
      28: iadd
      29: putfield      #4                  // Field hashCode:I
      32: aload_0
      33: bipush        37
      35: aload_0
      36: getfield      #4                  // Field hashCode:I
      39: imul
      40: aload_0
      41: getfield      #10                 // Field min:F
      44: invokestatic  #23                 // Method java/lang/Float.floatToIntBits:(F)I
      47: iadd
      48: putfield      #4                  // Field hashCode:I
      51: aload_0
      52: bipush        37
      54: aload_0
      55: getfield      #4                  // Field hashCode:I
      58: imul
      59: aload_0
      60: getfield      #11                 // Field max:F
      63: invokestatic  #23                 // Method java/lang/Float.floatToIntBits:(F)I
      66: iadd
      67: putfield      #4                  // Field hashCode:I
      70: aload_0
      71: getfield      #4                  // Field hashCode:I
      74: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #5                  // Field toString:Ljava/lang/String;
       4: ifnonnull     64
       7: new           #26                 // class java/lang/StringBuffer
      10: dup
      11: bipush        32
      13: invokespecial #27                 // Method java/lang/StringBuffer."<init>":(I)V
      16: astore_1
      17: aload_1
      18: ldc           #28                 // String Range[
      20: invokevirtual #29                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      23: pop
      24: aload_1
      25: aload_0
      26: getfield      #10                 // Field min:F
      29: invokevirtual #30                 // Method java/lang/StringBuffer.append:(F)Ljava/lang/StringBuffer;
      32: pop
      33: aload_1
      34: bipush        44
      36: invokevirtual #31                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      39: pop
      40: aload_1
      41: aload_0
      42: getfield      #11                 // Field max:F
      45: invokevirtual #30                 // Method java/lang/StringBuffer.append:(F)Ljava/lang/StringBuffer;
      48: pop
      49: aload_1
      50: bipush        93
      52: invokevirtual #31                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      55: pop
      56: aload_0
      57: aload_1
      58: invokevirtual #32                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      61: putfield      #5                  // Field toString:Ljava/lang/String;
      64: aload_0
      65: getfield      #5                  // Field toString:Ljava/lang/String;
      68: areturn
}
