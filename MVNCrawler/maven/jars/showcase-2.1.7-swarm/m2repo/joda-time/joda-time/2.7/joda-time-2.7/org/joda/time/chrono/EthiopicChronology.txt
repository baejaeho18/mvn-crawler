Compiled from "EthiopicChronology.java"
public final class org.joda.time.chrono.EthiopicChronology extends org.joda.time.chrono.BasicFixedMonthChronology {
  private static final long serialVersionUID;

  public static final int EE;

  private static final org.joda.time.DateTimeField ERA_FIELD;

  private static final int MIN_YEAR;

  private static final int MAX_YEAR;

  private static final java.util.concurrent.ConcurrentHashMap<org.joda.time.DateTimeZone, org.joda.time.chrono.EthiopicChronology[]> cCache;

  private static final org.joda.time.chrono.EthiopicChronology INSTANCE_UTC;

  public static org.joda.time.chrono.EthiopicChronology getInstanceUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/EthiopicChronology;
       3: areturn

  public static org.joda.time.chrono.EthiopicChronology getInstance();
    Code:
       0: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       3: iconst_4
       4: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;
       7: areturn

  public static org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone);
    Code:
       0: aload_0
       1: iconst_4
       2: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;
       5: areturn

  public static org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone, int);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_0
       8: getstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      11: aload_0
      12: invokevirtual #5                  // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #6                  // class "[Lorg/joda/time/chrono/EthiopicChronology;"
      18: astore_3
      19: aload_3
      20: ifnonnull     50
      23: bipush        7
      25: anewarray     #7                  // class org/joda/time/chrono/EthiopicChronology
      28: astore_3
      29: getstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      32: aload_0
      33: aload_3
      34: invokevirtual #8                  // Method java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #6                  // class "[Lorg/joda/time/chrono/EthiopicChronology;"
      40: astore        4
      42: aload         4
      44: ifnull        50
      47: aload         4
      49: astore_3
      50: aload_3
      51: iload_1
      52: iconst_1
      53: isub
      54: aaload
      55: astore_2
      56: goto          88
      59: astore        4
      61: new           #10                 // class java/lang/IllegalArgumentException
      64: dup
      65: new           #11                 // class java/lang/StringBuilder
      68: dup
      69: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      72: ldc           #13                 // String Invalid min days in first week:
      74: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: iload_1
      78: invokevirtual #15                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      81: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      87: athrow
      88: aload_2
      89: ifnonnull     205
      92: aload_3
      93: dup
      94: astore        4
      96: monitorenter
      97: aload_3
      98: iload_1
      99: iconst_1
     100: isub
     101: aaload
     102: astore_2
     103: aload_2
     104: ifnonnull     191
     107: aload_0
     108: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
     111: if_acmpne     162
     114: new           #7                  // class org/joda/time/chrono/EthiopicChronology
     117: dup
     118: aconst_null
     119: aconst_null
     120: iload_1
     121: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     124: astore_2
     125: new           #20                 // class org/joda/time/DateTime
     128: dup
     129: iconst_1
     130: iconst_1
     131: iconst_1
     132: iconst_0
     133: iconst_0
     134: iconst_0
     135: iconst_0
     136: aload_2
     137: invokespecial #21                 // Method org/joda/time/DateTime."<init>":(IIIIIIILorg/joda/time/Chronology;)V
     140: astore        5
     142: new           #7                  // class org/joda/time/chrono/EthiopicChronology
     145: dup
     146: aload_2
     147: aload         5
     149: aconst_null
     150: invokestatic  #22                 // Method org/joda/time/chrono/LimitChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/ReadableDateTime;Lorg/joda/time/ReadableDateTime;)Lorg/joda/time/chrono/LimitChronology;
     153: aconst_null
     154: iload_1
     155: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     158: astore_2
     159: goto          185
     162: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
     165: iload_1
     166: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;
     169: astore_2
     170: new           #7                  // class org/joda/time/chrono/EthiopicChronology
     173: dup
     174: aload_2
     175: aload_0
     176: invokestatic  #23                 // Method org/joda/time/chrono/ZonedChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;
     179: aconst_null
     180: iload_1
     181: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     184: astore_2
     185: aload_3
     186: iload_1
     187: iconst_1
     188: isub
     189: aload_2
     190: aastore
     191: aload         4
     193: monitorexit
     194: goto          205
     197: astore        6
     199: aload         4
     201: monitorexit
     202: aload         6
     204: athrow
     205: aload_2
     206: areturn
    Exception table:
       from    to  target type
          50    56    59   Class java/lang/ArrayIndexOutOfBoundsException
          97   194   197   any
         197   202   197   any

  org.joda.time.chrono.EthiopicChronology(org.joda.time.Chronology, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #24                 // Method org/joda/time/chrono/BasicFixedMonthChronology."<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
       7: return

  private java.lang.Object readResolve();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getBase:()Lorg/joda/time/Chronology;
       4: astore_1
       5: aload_1
       6: ifnonnull     22
       9: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      12: aload_0
      13: invokevirtual #26                 // Method getMinimumDaysInFirstWeek:()I
      16: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;
      19: goto          33
      22: aload_1
      23: invokevirtual #27                 // Method org/joda/time/Chronology.getZone:()Lorg/joda/time/DateTimeZone;
      26: aload_0
      27: invokevirtual #26                 // Method getMinimumDaysInFirstWeek:()I
      30: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;
      33: areturn

  public org.joda.time.Chronology withUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/EthiopicChronology;
       3: areturn

  public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #28                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      13: if_acmpne     18
      16: aload_0
      17: areturn
      18: aload_1
      19: invokestatic  #29                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/EthiopicChronology;
      22: areturn

  boolean isLeapDay(long);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method dayOfMonth:()Lorg/joda/time/DateTimeField;
       4: lload_1
       5: invokevirtual #31                 // Method org/joda/time/DateTimeField.get:(J)I
       8: bipush        6
      10: if_icmpne     28
      13: aload_0
      14: invokevirtual #32                 // Method monthOfYear:()Lorg/joda/time/DateTimeField;
      17: lload_1
      18: invokevirtual #33                 // Method org/joda/time/DateTimeField.isLeap:(J)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  long calculateFirstDayOfYearMillis(int);
    Code:
       0: iload_1
       1: sipush        1963
       4: isub
       5: istore_2
       6: iload_2
       7: ifgt          19
      10: iload_2
      11: iconst_3
      12: iadd
      13: iconst_2
      14: ishr
      15: istore_3
      16: goto          34
      19: iload_2
      20: iconst_2
      21: ishr
      22: istore_3
      23: aload_0
      24: iload_1
      25: invokevirtual #34                 // Method isLeapYear:(I)Z
      28: ifne          34
      31: iinc          3, 1
      34: iload_2
      35: i2l
      36: ldc2_w        #35                 // long 365l
      39: lmul
      40: iload_3
      41: i2l
      42: ladd
      43: ldc2_w        #37                 // long 86400000l
      46: lmul
      47: lstore        4
      49: lload         4
      51: ldc2_w        #39                 // long 21859200000l
      54: ladd
      55: lreturn

  int getMinYear();
    Code:
       0: ldc           #41                 // int -292269337
       2: ireturn

  int getMaxYear();
    Code:
       0: ldc           #42                 // int 292272984
       2: ireturn

  long getApproxMillisAtEpochDividedByTwo();
    Code:
       0: ldc2_w        #43                 // long 30962844000000l
       3: lreturn

  protected void assemble(org.joda.time.chrono.AssembledChronology$Fields);
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getBase:()Lorg/joda/time/Chronology;
       4: ifnonnull     76
       7: aload_0
       8: aload_1
       9: invokespecial #45                 // Method org/joda/time/chrono/BasicFixedMonthChronology.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V
      12: aload_1
      13: new           #46                 // class org/joda/time/field/SkipDateTimeField
      16: dup
      17: aload_0
      18: aload_1
      19: getfield      #47                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      22: invokespecial #48                 // Method org/joda/time/field/SkipDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      25: putfield      #47                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      28: aload_1
      29: new           #46                 // class org/joda/time/field/SkipDateTimeField
      32: dup
      33: aload_0
      34: aload_1
      35: getfield      #49                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      38: invokespecial #48                 // Method org/joda/time/field/SkipDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      41: putfield      #49                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      44: aload_1
      45: getstatic     #50                 // Field ERA_FIELD:Lorg/joda/time/DateTimeField;
      48: putfield      #51                 // Field org/joda/time/chrono/AssembledChronology$Fields.era:Lorg/joda/time/DateTimeField;
      51: aload_1
      52: new           #52                 // class org/joda/time/chrono/BasicMonthOfYearDateTimeField
      55: dup
      56: aload_0
      57: bipush        13
      59: invokespecial #53                 // Method org/joda/time/chrono/BasicMonthOfYearDateTimeField."<init>":(Lorg/joda/time/chrono/BasicChronology;I)V
      62: putfield      #54                 // Field org/joda/time/chrono/AssembledChronology$Fields.monthOfYear:Lorg/joda/time/DateTimeField;
      65: aload_1
      66: aload_1
      67: getfield      #54                 // Field org/joda/time/chrono/AssembledChronology$Fields.monthOfYear:Lorg/joda/time/DateTimeField;
      70: invokevirtual #55                 // Method org/joda/time/DateTimeField.getDurationField:()Lorg/joda/time/DurationField;
      73: putfield      #56                 // Field org/joda/time/chrono/AssembledChronology$Fields.months:Lorg/joda/time/DurationField;
      76: return

  static {};
    Code:
       0: new           #57                 // class org/joda/time/chrono/BasicSingleEraDateTimeField
       3: dup
       4: ldc           #58                 // String EE
       6: invokespecial #59                 // Method org/joda/time/chrono/BasicSingleEraDateTimeField."<init>":(Ljava/lang/String;)V
       9: putstatic     #50                 // Field ERA_FIELD:Lorg/joda/time/DateTimeField;
      12: new           #60                 // class java/util/concurrent/ConcurrentHashMap
      15: dup
      16: invokespecial #61                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      19: putstatic     #4                  // Field cCache:Ljava/util/concurrent/ConcurrentHashMap;
      22: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      25: invokestatic  #29                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/EthiopicChronology;
      28: putstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/EthiopicChronology;
      31: return
}
