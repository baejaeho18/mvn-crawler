Compiled from "DateTimeZone.java"
public abstract class org.joda.time.DateTimeZone implements java.io.Serializable {
  private static final long serialVersionUID;

  public static final org.joda.time.DateTimeZone UTC;

  private static final int MAX_MILLIS;

  private static final java.util.concurrent.atomic.AtomicReference<org.joda.time.tz.Provider> cProvider;

  private static final java.util.concurrent.atomic.AtomicReference<org.joda.time.tz.NameProvider> cNameProvider;

  private static final java.util.concurrent.atomic.AtomicReference<org.joda.time.DateTimeZone> cDefault;

  private final java.lang.String iID;

  public static org.joda.time.DateTimeZone getDefault();
    Code:
       0: getstatic     #1                  // Field cDefault:Ljava/util/concurrent/atomic/AtomicReference;
       3: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       6: checkcast     #3                  // class org/joda/time/DateTimeZone
       9: astore_0
      10: aload_0
      11: ifnonnull     77
      14: ldc           #4                  // String user.timezone
      16: invokestatic  #5                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      19: astore_1
      20: aload_1
      21: ifnull        29
      24: aload_1
      25: invokestatic  #6                  // Method forID:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;
      28: astore_0
      29: goto          33
      32: astore_1
      33: aload_0
      34: ifnonnull     44
      37: invokestatic  #8                  // Method java/util/TimeZone.getDefault:()Ljava/util/TimeZone;
      40: invokestatic  #9                  // Method forTimeZone:(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;
      43: astore_0
      44: goto          48
      47: astore_1
      48: aload_0
      49: ifnonnull     56
      52: getstatic     #11                 // Field UTC:Lorg/joda/time/DateTimeZone;
      55: astore_0
      56: getstatic     #1                  // Field cDefault:Ljava/util/concurrent/atomic/AtomicReference;
      59: aconst_null
      60: aload_0
      61: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      64: ifne          77
      67: getstatic     #1                  // Field cDefault:Ljava/util/concurrent/atomic/AtomicReference;
      70: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      73: checkcast     #3                  // class org/joda/time/DateTimeZone
      76: astore_0
      77: aload_0
      78: areturn
    Exception table:
       from    to  target type
          14    29    32   Class java/lang/RuntimeException
          14    44    47   Class java/lang/IllegalArgumentException

  public static void setDefault(org.joda.time.DateTimeZone) throws java.lang.SecurityException;
    Code:
       0: invokestatic  #13                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_1
       4: aload_1
       5: ifnull        21
       8: aload_1
       9: new           #14                 // class org/joda/time/JodaTimePermission
      12: dup
      13: ldc           #15                 // String DateTimeZone.setDefault
      15: invokespecial #16                 // Method org/joda/time/JodaTimePermission."<init>":(Ljava/lang/String;)V
      18: invokevirtual #17                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      21: aload_0
      22: ifnonnull     35
      25: new           #10                 // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #18                 // String The datetime zone must not be null
      31: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: getstatic     #1                  // Field cDefault:Ljava/util/concurrent/atomic/AtomicReference;
      38: aload_0
      39: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      42: return

  public static org.joda.time.DateTimeZone forID(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #21                 // Method getDefault:()Lorg/joda/time/DateTimeZone;
       7: areturn
       8: aload_0
       9: ldc           #22                 // String UTC
      11: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      14: ifeq          21
      17: getstatic     #11                 // Field UTC:Lorg/joda/time/DateTimeZone;
      20: areturn
      21: invokestatic  #24                 // Method getProvider:()Lorg/joda/time/tz/Provider;
      24: aload_0
      25: invokeinterface #25,  2           // InterfaceMethod org/joda/time/tz/Provider.getZone:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;
      30: astore_1
      31: aload_1
      32: ifnull        37
      35: aload_1
      36: areturn
      37: aload_0
      38: ldc           #26                 // String +
      40: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      43: ifne          55
      46: aload_0
      47: ldc           #28                 // String -
      49: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      52: ifeq          82
      55: aload_0
      56: invokestatic  #29                 // Method parseOffset:(Ljava/lang/String;)I
      59: istore_2
      60: iload_2
      61: i2l
      62: lconst_0
      63: lcmp
      64: ifne          71
      67: getstatic     #11                 // Field UTC:Lorg/joda/time/DateTimeZone;
      70: areturn
      71: iload_2
      72: invokestatic  #30                 // Method printOffset:(I)Ljava/lang/String;
      75: astore_0
      76: aload_0
      77: iload_2
      78: invokestatic  #31                 // Method fixedOffsetZone:(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;
      81: areturn
      82: new           #10                 // class java/lang/IllegalArgumentException
      85: dup
      86: new           #32                 // class java/lang/StringBuilder
      89: dup
      90: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      93: ldc           #34                 // String The datetime zone id \'
      95: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: aload_0
      99: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     102: ldc           #36                 // String \' is not recognised
     104: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     110: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     113: athrow

  public static org.joda.time.DateTimeZone forOffsetHours(int) throws java.lang.IllegalArgumentException;
    Code:
       0: iload_0
       1: iconst_0
       2: invokestatic  #38                 // Method forOffsetHoursMinutes:(II)Lorg/joda/time/DateTimeZone;
       5: areturn

  public static org.joda.time.DateTimeZone forOffsetHoursMinutes(int, int) throws java.lang.IllegalArgumentException;
    Code:
       0: iload_0
       1: ifne          12
       4: iload_1
       5: ifne          12
       8: getstatic     #11                 // Field UTC:Lorg/joda/time/DateTimeZone;
      11: areturn
      12: iload_0
      13: bipush        -23
      15: if_icmplt     24
      18: iload_0
      19: bipush        23
      21: if_icmple     51
      24: new           #10                 // class java/lang/IllegalArgumentException
      27: dup
      28: new           #32                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #39                 // String Hours out of range:
      37: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: iload_0
      41: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      44: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: iload_1
      52: bipush        -59
      54: if_icmplt     63
      57: iload_1
      58: bipush        59
      60: if_icmple     90
      63: new           #10                 // class java/lang/IllegalArgumentException
      66: dup
      67: new           #32                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      74: ldc           #41                 // String Minutes out of range:
      76: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: iload_1
      80: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      83: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      89: athrow
      90: iload_0
      91: ifle          125
      94: iload_1
      95: ifge          125
      98: new           #10                 // class java/lang/IllegalArgumentException
     101: dup
     102: new           #32                 // class java/lang/StringBuilder
     105: dup
     106: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
     109: ldc           #42                 // String Positive hours must not have negative minutes:
     111: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: iload_1
     115: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     118: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     121: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     124: athrow
     125: iconst_0
     126: istore_2
     127: iload_0
     128: bipush        60
     130: imul
     131: istore_3
     132: iload_3
     133: ifge          146
     136: iload_3
     137: iload_1
     138: invokestatic  #43                 // Method java/lang/Math.abs:(I)I
     141: isub
     142: istore_1
     143: goto          150
     146: iload_3
     147: iload_1
     148: iadd
     149: istore_1
     150: iload_1
     151: ldc           #44                 // int 60000
     153: invokestatic  #45                 // Method org/joda/time/field/FieldUtils.safeMultiply:(II)I
     156: istore_2
     157: goto          171
     160: astore_3
     161: new           #10                 // class java/lang/IllegalArgumentException
     164: dup
     165: ldc           #47                 // String Offset is too large
     167: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     170: athrow
     171: iload_2
     172: invokestatic  #48                 // Method forOffsetMillis:(I)Lorg/joda/time/DateTimeZone;
     175: areturn
    Exception table:
       from    to  target type
         127   157   160   Class java/lang/ArithmeticException

  public static org.joda.time.DateTimeZone forOffsetMillis(int);
    Code:
       0: iload_0
       1: ldc           #49                 // int -86399999
       3: if_icmplt     12
       6: iload_0
       7: ldc           #50                 // int 86399999
       9: if_icmple     39
      12: new           #10                 // class java/lang/IllegalArgumentException
      15: dup
      16: new           #32                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #51                 // String Millis out of range:
      25: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: iload_0
      29: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: iload_0
      40: invokestatic  #30                 // Method printOffset:(I)Ljava/lang/String;
      43: astore_1
      44: aload_1
      45: iload_0
      46: invokestatic  #31                 // Method fixedOffsetZone:(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;
      49: areturn

  public static org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #21                 // Method getDefault:()Lorg/joda/time/DateTimeZone;
       7: areturn
       8: aload_0
       9: invokevirtual #52                 // Method java/util/TimeZone.getID:()Ljava/lang/String;
      12: astore_1
      13: aload_1
      14: ifnonnull     27
      17: new           #10                 // class java/lang/IllegalArgumentException
      20: dup
      21: ldc           #53                 // String The TimeZone id must not be null
      23: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: aload_1
      28: ldc           #22                 // String UTC
      30: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      33: ifeq          40
      36: getstatic     #11                 // Field UTC:Lorg/joda/time/DateTimeZone;
      39: areturn
      40: aconst_null
      41: astore_2
      42: aload_1
      43: invokestatic  #54                 // Method getConvertedId:(Ljava/lang/String;)Ljava/lang/String;
      46: astore_3
      47: invokestatic  #24                 // Method getProvider:()Lorg/joda/time/tz/Provider;
      50: astore        4
      52: aload_3
      53: ifnull        65
      56: aload         4
      58: aload_3
      59: invokeinterface #25,  2           // InterfaceMethod org/joda/time/tz/Provider.getZone:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;
      64: astore_2
      65: aload_2
      66: ifnonnull     78
      69: aload         4
      71: aload_1
      72: invokeinterface #25,  2           // InterfaceMethod org/joda/time/tz/Provider.getZone:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;
      77: astore_2
      78: aload_2
      79: ifnull        84
      82: aload_2
      83: areturn
      84: aload_3
      85: ifnonnull     145
      88: aload_1
      89: astore_3
      90: aload_3
      91: ldc           #55                 // String GMT+
      93: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      96: ifne          108
      99: aload_3
     100: ldc           #56                 // String GMT-
     102: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     105: ifeq          145
     108: aload_3
     109: iconst_3
     110: invokevirtual #57                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     113: astore_3
     114: aload_3
     115: invokestatic  #29                 // Method parseOffset:(Ljava/lang/String;)I
     118: istore        5
     120: iload         5
     122: i2l
     123: lconst_0
     124: lcmp
     125: ifne          132
     128: getstatic     #11                 // Field UTC:Lorg/joda/time/DateTimeZone;
     131: areturn
     132: iload         5
     134: invokestatic  #30                 // Method printOffset:(I)Ljava/lang/String;
     137: astore_3
     138: aload_3
     139: iload         5
     141: invokestatic  #31                 // Method fixedOffsetZone:(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;
     144: areturn
     145: new           #10                 // class java/lang/IllegalArgumentException
     148: dup
     149: new           #32                 // class java/lang/StringBuilder
     152: dup
     153: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
     156: ldc           #34                 // String The datetime zone id \'
     158: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     161: aload_1
     162: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     165: ldc           #36                 // String \' is not recognised
     167: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     170: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     173: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     176: athrow

  private static org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String, int);
    Code:
       0: iload_1
       1: ifne          8
       4: getstatic     #11                 // Field UTC:Lorg/joda/time/DateTimeZone;
       7: areturn
       8: new           #58                 // class org/joda/time/tz/FixedDateTimeZone
      11: dup
      12: aload_0
      13: aconst_null
      14: iload_1
      15: iload_1
      16: invokespecial #59                 // Method org/joda/time/tz/FixedDateTimeZone."<init>":(Ljava/lang/String;Ljava/lang/String;II)V
      19: areturn

  public static java.util.Set<java.lang.String> getAvailableIDs();
    Code:
       0: invokestatic  #24                 // Method getProvider:()Lorg/joda/time/tz/Provider;
       3: invokeinterface #60,  1           // InterfaceMethod org/joda/time/tz/Provider.getAvailableIDs:()Ljava/util/Set;
       8: areturn

  public static org.joda.time.tz.Provider getProvider();
    Code:
       0: getstatic     #61                 // Field cProvider:Ljava/util/concurrent/atomic/AtomicReference;
       3: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       6: checkcast     #62                 // class org/joda/time/tz/Provider
       9: astore_0
      10: aload_0
      11: ifnonnull     39
      14: invokestatic  #63                 // Method getDefaultProvider:()Lorg/joda/time/tz/Provider;
      17: astore_0
      18: getstatic     #61                 // Field cProvider:Ljava/util/concurrent/atomic/AtomicReference;
      21: aconst_null
      22: aload_0
      23: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          39
      29: getstatic     #61                 // Field cProvider:Ljava/util/concurrent/atomic/AtomicReference;
      32: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      35: checkcast     #62                 // class org/joda/time/tz/Provider
      38: astore_0
      39: aload_0
      40: areturn

  public static void setProvider(org.joda.time.tz.Provider) throws java.lang.SecurityException;
    Code:
       0: invokestatic  #13                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_1
       4: aload_1
       5: ifnull        21
       8: aload_1
       9: new           #14                 // class org/joda/time/JodaTimePermission
      12: dup
      13: ldc           #64                 // String DateTimeZone.setProvider
      15: invokespecial #16                 // Method org/joda/time/JodaTimePermission."<init>":(Ljava/lang/String;)V
      18: invokevirtual #17                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      21: aload_0
      22: ifnonnull     32
      25: invokestatic  #63                 // Method getDefaultProvider:()Lorg/joda/time/tz/Provider;
      28: astore_0
      29: goto          37
      32: aload_0
      33: invokestatic  #65                 // Method validateProvider:(Lorg/joda/time/tz/Provider;)Lorg/joda/time/tz/Provider;
      36: pop
      37: getstatic     #61                 // Field cProvider:Ljava/util/concurrent/atomic/AtomicReference;
      40: aload_0
      41: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      44: return

  private static org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider);
    Code:
       0: aload_0
       1: invokeinterface #60,  1           // InterfaceMethod org/joda/time/tz/Provider.getAvailableIDs:()Ljava/util/Set;
       6: astore_1
       7: aload_1
       8: ifnull        20
      11: aload_1
      12: invokeinterface #66,  1           // InterfaceMethod java/util/Set.size:()I
      17: ifne          30
      20: new           #10                 // class java/lang/IllegalArgumentException
      23: dup
      24: ldc           #67                 // String The provider doesn\'t have any available ids
      26: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: aload_1
      31: ldc           #22                 // String UTC
      33: invokeinterface #68,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      38: ifne          51
      41: new           #10                 // class java/lang/IllegalArgumentException
      44: dup
      45: ldc           #69                 // String The provider doesn\'t support UTC
      47: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: getstatic     #11                 // Field UTC:Lorg/joda/time/DateTimeZone;
      54: aload_0
      55: ldc           #22                 // String UTC
      57: invokeinterface #25,  2           // InterfaceMethod org/joda/time/tz/Provider.getZone:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;
      62: invokevirtual #70                 // Method equals:(Ljava/lang/Object;)Z
      65: ifne          78
      68: new           #10                 // class java/lang/IllegalArgumentException
      71: dup
      72: ldc           #71                 // String Invalid UTC zone provided
      74: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: aload_0
      79: areturn

  private static org.joda.time.tz.Provider getDefaultProvider();
    Code:
       0: ldc           #72                 // String org.joda.time.DateTimeZone.Provider
       2: invokestatic  #5                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_0
       6: aload_0
       7: ifnull        36
      10: aload_0
      11: invokestatic  #73                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
      14: invokevirtual #74                 // Method java/lang/Class.newInstance:()Ljava/lang/Object;
      17: checkcast     #62                 // class org/joda/time/tz/Provider
      20: astore_1
      21: aload_1
      22: invokestatic  #65                 // Method validateProvider:(Lorg/joda/time/tz/Provider;)Lorg/joda/time/tz/Provider;
      25: areturn
      26: astore_1
      27: new           #7                  // class java/lang/RuntimeException
      30: dup
      31: aload_1
      32: invokespecial #76                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      35: athrow
      36: goto          40
      39: astore_0
      40: ldc           #78                 // String org.joda.time.DateTimeZone.Folder
      42: invokestatic  #5                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      45: astore_0
      46: aload_0
      47: ifnull        81
      50: new           #79                 // class org/joda/time/tz/ZoneInfoProvider
      53: dup
      54: new           #80                 // class java/io/File
      57: dup
      58: aload_0
      59: invokespecial #81                 // Method java/io/File."<init>":(Ljava/lang/String;)V
      62: invokespecial #82                 // Method org/joda/time/tz/ZoneInfoProvider."<init>":(Ljava/io/File;)V
      65: astore_1
      66: aload_1
      67: invokestatic  #65                 // Method validateProvider:(Lorg/joda/time/tz/Provider;)Lorg/joda/time/tz/Provider;
      70: areturn
      71: astore_1
      72: new           #7                  // class java/lang/RuntimeException
      75: dup
      76: aload_1
      77: invokespecial #76                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      80: athrow
      81: goto          85
      84: astore_0
      85: new           #79                 // class org/joda/time/tz/ZoneInfoProvider
      88: dup
      89: ldc           #83                 // String org/joda/time/tz/data
      91: invokespecial #84                 // Method org/joda/time/tz/ZoneInfoProvider."<init>":(Ljava/lang/String;)V
      94: astore_0
      95: aload_0
      96: invokestatic  #65                 // Method validateProvider:(Lorg/joda/time/tz/Provider;)Lorg/joda/time/tz/Provider;
      99: areturn
     100: astore_0
     101: aload_0
     102: invokevirtual #85                 // Method java/lang/Exception.printStackTrace:()V
     105: new           #86                 // class org/joda/time/tz/UTCProvider
     108: dup
     109: invokespecial #87                 // Method org/joda/time/tz/UTCProvider."<init>":()V
     112: areturn
    Exception table:
       from    to  target type
          10    25    26   Class java/lang/Exception
           0    25    39   Class java/lang/SecurityException
          26    36    39   Class java/lang/SecurityException
          50    70    71   Class java/lang/Exception
          40    70    84   Class java/lang/SecurityException
          71    81    84   Class java/lang/SecurityException
          85    99   100   Class java/lang/Exception

  public static org.joda.time.tz.NameProvider getNameProvider();
    Code:
       0: getstatic     #88                 // Field cNameProvider:Ljava/util/concurrent/atomic/AtomicReference;
       3: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       6: checkcast     #89                 // class org/joda/time/tz/NameProvider
       9: astore_0
      10: aload_0
      11: ifnonnull     39
      14: invokestatic  #90                 // Method getDefaultNameProvider:()Lorg/joda/time/tz/NameProvider;
      17: astore_0
      18: getstatic     #88                 // Field cNameProvider:Ljava/util/concurrent/atomic/AtomicReference;
      21: aconst_null
      22: aload_0
      23: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          39
      29: getstatic     #88                 // Field cNameProvider:Ljava/util/concurrent/atomic/AtomicReference;
      32: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      35: checkcast     #89                 // class org/joda/time/tz/NameProvider
      38: astore_0
      39: aload_0
      40: areturn

  public static void setNameProvider(org.joda.time.tz.NameProvider) throws java.lang.SecurityException;
    Code:
       0: invokestatic  #13                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_1
       4: aload_1
       5: ifnull        21
       8: aload_1
       9: new           #14                 // class org/joda/time/JodaTimePermission
      12: dup
      13: ldc           #91                 // String DateTimeZone.setNameProvider
      15: invokespecial #16                 // Method org/joda/time/JodaTimePermission."<init>":(Ljava/lang/String;)V
      18: invokevirtual #17                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      21: aload_0
      22: ifnonnull     29
      25: invokestatic  #90                 // Method getDefaultNameProvider:()Lorg/joda/time/tz/NameProvider;
      28: astore_0
      29: getstatic     #88                 // Field cNameProvider:Ljava/util/concurrent/atomic/AtomicReference;
      32: aload_0
      33: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      36: return

  private static org.joda.time.tz.NameProvider getDefaultNameProvider();
    Code:
       0: aconst_null
       1: astore_0
       2: ldc           #92                 // String org.joda.time.DateTimeZone.NameProvider
       4: invokestatic  #5                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       7: astore_1
       8: aload_1
       9: ifnull        36
      12: aload_1
      13: invokestatic  #73                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
      16: invokevirtual #74                 // Method java/lang/Class.newInstance:()Ljava/lang/Object;
      19: checkcast     #89                 // class org/joda/time/tz/NameProvider
      22: astore_0
      23: goto          36
      26: astore_2
      27: new           #7                  // class java/lang/RuntimeException
      30: dup
      31: aload_2
      32: invokespecial #76                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      35: athrow
      36: goto          40
      39: astore_1
      40: aload_0
      41: ifnonnull     52
      44: new           #93                 // class org/joda/time/tz/DefaultNameProvider
      47: dup
      48: invokespecial #94                 // Method org/joda/time/tz/DefaultNameProvider."<init>":()V
      51: astore_0
      52: aload_0
      53: areturn
    Exception table:
       from    to  target type
          12    23    26   Class java/lang/Exception
           2    36    39   Class java/lang/SecurityException

  private static java.lang.String getConvertedId(java.lang.String);
    Code:
       0: getstatic     #95                 // Field org/joda/time/DateTimeZone$LazyInit.CONVERSION_MAP:Ljava/util/Map;
       3: aload_0
       4: invokeinterface #96,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #97                 // class java/lang/String
      12: areturn

  private static int parseOffset(java.lang.String);
    Code:
       0: getstatic     #98                 // Field org/joda/time/DateTimeZone$LazyInit.OFFSET_FORMATTER:Lorg/joda/time/format/DateTimeFormatter;
       3: aload_0
       4: invokevirtual #99                 // Method org/joda/time/format/DateTimeFormatter.parseMillis:(Ljava/lang/String;)J
       7: l2i
       8: ineg
       9: ireturn

  private static java.lang.String printOffset(int);
    Code:
       0: new           #100                // class java/lang/StringBuffer
       3: dup
       4: invokespecial #101                // Method java/lang/StringBuffer."<init>":()V
       7: astore_1
       8: iload_0
       9: iflt          22
      12: aload_1
      13: bipush        43
      15: invokevirtual #102                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      18: pop
      19: goto          32
      22: aload_1
      23: bipush        45
      25: invokevirtual #102                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      28: pop
      29: iload_0
      30: ineg
      31: istore_0
      32: iload_0
      33: ldc           #103                // int 3600000
      35: idiv
      36: istore_2
      37: aload_1
      38: iload_2
      39: iconst_2
      40: invokestatic  #104                // Method org/joda/time/format/FormatUtils.appendPaddedInteger:(Ljava/lang/StringBuffer;II)V
      43: iload_0
      44: iload_2
      45: ldc           #103                // int 3600000
      47: imul
      48: isub
      49: istore_0
      50: iload_0
      51: ldc           #44                 // int 60000
      53: idiv
      54: istore_3
      55: aload_1
      56: bipush        58
      58: invokevirtual #102                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      61: pop
      62: aload_1
      63: iload_3
      64: iconst_2
      65: invokestatic  #104                // Method org/joda/time/format/FormatUtils.appendPaddedInteger:(Ljava/lang/StringBuffer;II)V
      68: iload_0
      69: iload_3
      70: ldc           #44                 // int 60000
      72: imul
      73: isub
      74: istore_0
      75: iload_0
      76: ifne          84
      79: aload_1
      80: invokevirtual #105                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      83: areturn
      84: iload_0
      85: sipush        1000
      88: idiv
      89: istore        4
      91: aload_1
      92: bipush        58
      94: invokevirtual #102                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      97: pop
      98: aload_1
      99: iload         4
     101: iconst_2
     102: invokestatic  #104                // Method org/joda/time/format/FormatUtils.appendPaddedInteger:(Ljava/lang/StringBuffer;II)V
     105: iload_0
     106: iload         4
     108: sipush        1000
     111: imul
     112: isub
     113: istore_0
     114: iload_0
     115: ifne          123
     118: aload_1
     119: invokevirtual #105                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     122: areturn
     123: aload_1
     124: bipush        46
     126: invokevirtual #102                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
     129: pop
     130: aload_1
     131: iload_0
     132: iconst_3
     133: invokestatic  #104                // Method org/joda/time/format/FormatUtils.appendPaddedInteger:(Ljava/lang/StringBuffer;II)V
     136: aload_1
     137: invokevirtual #105                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     140: areturn

  protected org.joda.time.DateTimeZone(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #106                // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #10                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #107                // String Id must not be null
      14: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #108                // Field iID:Ljava/lang/String;
      23: return

  public final java.lang.String getID();
    Code:
       0: aload_0
       1: getfield      #108                // Field iID:Ljava/lang/String;
       4: areturn

  public abstract java.lang.String getNameKey(long);

  public final java.lang.String getShortName(long);
    Code:
       0: aload_0
       1: lload_1
       2: aconst_null
       3: invokevirtual #109                // Method getShortName:(JLjava/util/Locale;)Ljava/lang/String;
       6: areturn

  public java.lang.String getShortName(long, java.util.Locale);
    Code:
       0: aload_3
       1: ifnonnull     8
       4: invokestatic  #110                // Method java/util/Locale.getDefault:()Ljava/util/Locale;
       7: astore_3
       8: aload_0
       9: lload_1
      10: invokevirtual #111                // Method getNameKey:(J)Ljava/lang/String;
      13: astore        4
      15: aload         4
      17: ifnonnull     25
      20: aload_0
      21: getfield      #108                // Field iID:Ljava/lang/String;
      24: areturn
      25: invokestatic  #112                // Method getNameProvider:()Lorg/joda/time/tz/NameProvider;
      28: astore        6
      30: aload         6
      32: instanceof    #93                 // class org/joda/time/tz/DefaultNameProvider
      35: ifeq          63
      38: aload         6
      40: checkcast     #93                 // class org/joda/time/tz/DefaultNameProvider
      43: aload_3
      44: aload_0
      45: getfield      #108                // Field iID:Ljava/lang/String;
      48: aload         4
      50: aload_0
      51: lload_1
      52: invokevirtual #113                // Method isStandardOffset:(J)Z
      55: invokevirtual #114                // Method org/joda/time/tz/DefaultNameProvider.getShortName:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;
      58: astore        5
      60: goto          79
      63: aload         6
      65: aload_3
      66: aload_0
      67: getfield      #108                // Field iID:Ljava/lang/String;
      70: aload         4
      72: invokeinterface #115,  4          // InterfaceMethod org/joda/time/tz/NameProvider.getShortName:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      77: astore        5
      79: aload         5
      81: ifnull        87
      84: aload         5
      86: areturn
      87: aload_0
      88: lload_1
      89: invokevirtual #116                // Method getOffset:(J)I
      92: invokestatic  #30                 // Method printOffset:(I)Ljava/lang/String;
      95: areturn

  public final java.lang.String getName(long);
    Code:
       0: aload_0
       1: lload_1
       2: aconst_null
       3: invokevirtual #117                // Method getName:(JLjava/util/Locale;)Ljava/lang/String;
       6: areturn

  public java.lang.String getName(long, java.util.Locale);
    Code:
       0: aload_3
       1: ifnonnull     8
       4: invokestatic  #110                // Method java/util/Locale.getDefault:()Ljava/util/Locale;
       7: astore_3
       8: aload_0
       9: lload_1
      10: invokevirtual #111                // Method getNameKey:(J)Ljava/lang/String;
      13: astore        4
      15: aload         4
      17: ifnonnull     25
      20: aload_0
      21: getfield      #108                // Field iID:Ljava/lang/String;
      24: areturn
      25: invokestatic  #112                // Method getNameProvider:()Lorg/joda/time/tz/NameProvider;
      28: astore        6
      30: aload         6
      32: instanceof    #93                 // class org/joda/time/tz/DefaultNameProvider
      35: ifeq          63
      38: aload         6
      40: checkcast     #93                 // class org/joda/time/tz/DefaultNameProvider
      43: aload_3
      44: aload_0
      45: getfield      #108                // Field iID:Ljava/lang/String;
      48: aload         4
      50: aload_0
      51: lload_1
      52: invokevirtual #113                // Method isStandardOffset:(J)Z
      55: invokevirtual #118                // Method org/joda/time/tz/DefaultNameProvider.getName:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;
      58: astore        5
      60: goto          79
      63: aload         6
      65: aload_3
      66: aload_0
      67: getfield      #108                // Field iID:Ljava/lang/String;
      70: aload         4
      72: invokeinterface #119,  4          // InterfaceMethod org/joda/time/tz/NameProvider.getName:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      77: astore        5
      79: aload         5
      81: ifnull        87
      84: aload         5
      86: areturn
      87: aload_0
      88: lload_1
      89: invokevirtual #116                // Method getOffset:(J)I
      92: invokestatic  #30                 // Method printOffset:(I)Ljava/lang/String;
      95: areturn

  public abstract int getOffset(long);

  public final int getOffset(org.joda.time.ReadableInstant);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: invokestatic  #120                // Method org/joda/time/DateTimeUtils.currentTimeMillis:()J
       8: invokevirtual #116                // Method getOffset:(J)I
      11: ireturn
      12: aload_0
      13: aload_1
      14: invokeinterface #121,  1          // InterfaceMethod org/joda/time/ReadableInstant.getMillis:()J
      19: invokevirtual #116                // Method getOffset:(J)I
      22: ireturn

  public abstract int getStandardOffset(long);

  public boolean isStandardOffset(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #116                // Method getOffset:(J)I
       5: aload_0
       6: lload_1
       7: invokevirtual #122                // Method getStandardOffset:(J)I
      10: if_icmpne     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public int getOffsetFromLocal(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #116                // Method getOffset:(J)I
       5: istore_3
       6: lload_1
       7: iload_3
       8: i2l
       9: lsub
      10: lstore        4
      12: aload_0
      13: lload         4
      15: invokevirtual #116                // Method getOffset:(J)I
      18: istore        6
      20: iload_3
      21: iload         6
      23: if_icmpeq     96
      26: iload_3
      27: iload         6
      29: isub
      30: ifge          145
      33: aload_0
      34: lload         4
      36: invokevirtual #123                // Method nextTransition:(J)J
      39: lstore        7
      41: lload         7
      43: lload_1
      44: iload_3
      45: i2l
      46: lsub
      47: lcmp
      48: ifne          56
      51: ldc2_w        #124                // long 9223372036854775807l
      54: lstore        7
      56: aload_0
      57: lload_1
      58: iload         6
      60: i2l
      61: lsub
      62: invokevirtual #123                // Method nextTransition:(J)J
      65: lstore        9
      67: lload         9
      69: lload_1
      70: iload         6
      72: i2l
      73: lsub
      74: lcmp
      75: ifne          83
      78: ldc2_w        #124                // long 9223372036854775807l
      81: lstore        9
      83: lload         7
      85: lload         9
      87: lcmp
      88: ifeq          93
      91: iload_3
      92: ireturn
      93: goto          145
      96: iload_3
      97: iflt          145
     100: aload_0
     101: lload         4
     103: invokevirtual #126                // Method previousTransition:(J)J
     106: lstore        7
     108: lload         7
     110: lload         4
     112: lcmp
     113: ifge          145
     116: aload_0
     117: lload         7
     119: invokevirtual #116                // Method getOffset:(J)I
     122: istore        9
     124: iload         9
     126: iload_3
     127: isub
     128: istore        10
     130: lload         4
     132: lload         7
     134: lsub
     135: iload         10
     137: i2l
     138: lcmp
     139: ifgt          145
     142: iload         9
     144: ireturn
     145: iload         6
     147: ireturn

  public long convertUTCToLocal(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #116                // Method getOffset:(J)I
       5: istore_3
       6: lload_1
       7: iload_3
       8: i2l
       9: ladd
      10: lstore        4
      12: lload_1
      13: lload         4
      15: lxor
      16: lconst_0
      17: lcmp
      18: ifge          40
      21: lload_1
      22: iload_3
      23: i2l
      24: lxor
      25: lconst_0
      26: lcmp
      27: iflt          40
      30: new           #46                 // class java/lang/ArithmeticException
      33: dup
      34: ldc           #127                // String Adding time zone offset caused overflow
      36: invokespecial #128                // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: lload         4
      42: lreturn

  public long convertLocalToUTC(long, boolean, long);
    Code:
       0: aload_0
       1: lload         4
       3: invokevirtual #116                // Method getOffset:(J)I
       6: istore        6
       8: lload_1
       9: iload         6
      11: i2l
      12: lsub
      13: lstore        7
      15: aload_0
      16: lload         7
      18: invokevirtual #116                // Method getOffset:(J)I
      21: istore        9
      23: iload         9
      25: iload         6
      27: if_icmpne     33
      30: lload         7
      32: lreturn
      33: aload_0
      34: lload_1
      35: iload_3
      36: invokevirtual #129                // Method convertLocalToUTC:(JZ)J
      39: lreturn

  public long convertLocalToUTC(long, boolean);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #116                // Method getOffset:(J)I
       5: istore        4
       7: aload_0
       8: lload_1
       9: iload         4
      11: i2l
      12: lsub
      13: invokevirtual #116                // Method getOffset:(J)I
      16: istore        5
      18: iload         4
      20: iload         5
      22: if_icmpeq     117
      25: iload_3
      26: ifne          34
      29: iload         4
      31: ifge          117
      34: aload_0
      35: lload_1
      36: iload         4
      38: i2l
      39: lsub
      40: invokevirtual #123                // Method nextTransition:(J)J
      43: lstore        6
      45: lload         6
      47: lload_1
      48: iload         4
      50: i2l
      51: lsub
      52: lcmp
      53: ifne          61
      56: ldc2_w        #124                // long 9223372036854775807l
      59: lstore        6
      61: aload_0
      62: lload_1
      63: iload         5
      65: i2l
      66: lsub
      67: invokevirtual #123                // Method nextTransition:(J)J
      70: lstore        8
      72: lload         8
      74: lload_1
      75: iload         5
      77: i2l
      78: lsub
      79: lcmp
      80: ifne          88
      83: ldc2_w        #124                // long 9223372036854775807l
      86: lstore        8
      88: lload         6
      90: lload         8
      92: lcmp
      93: ifeq          117
      96: iload_3
      97: ifeq          113
     100: new           #130                // class org/joda/time/IllegalInstantException
     103: dup
     104: lload_1
     105: aload_0
     106: invokevirtual #131                // Method getID:()Ljava/lang/String;
     109: invokespecial #132                // Method org/joda/time/IllegalInstantException."<init>":(JLjava/lang/String;)V
     112: athrow
     113: iload         4
     115: istore        5
     117: lload_1
     118: iload         5
     120: i2l
     121: lsub
     122: lstore        6
     124: lload_1
     125: lload         6
     127: lxor
     128: lconst_0
     129: lcmp
     130: ifge          153
     133: lload_1
     134: iload         5
     136: i2l
     137: lxor
     138: lconst_0
     139: lcmp
     140: ifge          153
     143: new           #46                 // class java/lang/ArithmeticException
     146: dup
     147: ldc           #133                // String Subtracting time zone offset caused overflow
     149: invokespecial #128                // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
     152: athrow
     153: lload         6
     155: lreturn

  public long getMillisKeepLocal(org.joda.time.DateTimeZone, long);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #21                 // Method getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_1
       8: aload_1
       9: aload_0
      10: if_acmpne     15
      13: lload_2
      14: lreturn
      15: aload_0
      16: lload_2
      17: invokevirtual #134                // Method convertUTCToLocal:(J)J
      20: lstore        4
      22: aload_1
      23: lload         4
      25: iconst_0
      26: lload_2
      27: invokevirtual #135                // Method convertLocalToUTC:(JZJ)J
      30: lreturn

  public boolean isLocalDateTimeGap(org.joda.time.LocalDateTime);
    Code:
       0: aload_0
       1: invokevirtual #136                // Method isFixed:()Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: aload_0
      11: invokevirtual #137                // Method org/joda/time/LocalDateTime.toDateTime:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTime;
      14: pop
      15: iconst_0
      16: ireturn
      17: astore_2
      18: iconst_1
      19: ireturn
    Exception table:
       from    to  target type
           9    16    17   Class org/joda/time/IllegalInstantException

  public long adjustOffset(long, boolean);
    Code:
       0: lload_1
       1: ldc2_w        #138                // long 10800000l
       4: lsub
       5: lstore        4
       7: lload_1
       8: ldc2_w        #138                // long 10800000l
      11: ladd
      12: lstore        6
      14: aload_0
      15: lload         4
      17: invokevirtual #116                // Method getOffset:(J)I
      20: i2l
      21: lstore        8
      23: aload_0
      24: lload         6
      26: invokevirtual #116                // Method getOffset:(J)I
      29: i2l
      30: lstore        10
      32: lload         8
      34: lload         10
      36: lcmp
      37: ifgt          42
      40: lload_1
      41: lreturn
      42: lload         8
      44: lload         10
      46: lsub
      47: lstore        12
      49: aload_0
      50: lload         4
      52: invokevirtual #123                // Method nextTransition:(J)J
      55: lstore        14
      57: lload         14
      59: lload         12
      61: lsub
      62: lstore        16
      64: lload         14
      66: lload         12
      68: ladd
      69: lstore        18
      71: lload_1
      72: lload         16
      74: lcmp
      75: iflt          85
      78: lload_1
      79: lload         18
      81: lcmp
      82: iflt          87
      85: lload_1
      86: lreturn
      87: lload_1
      88: lload         16
      90: lsub
      91: lstore        20
      93: lload         20
      95: lload         12
      97: lcmp
      98: iflt          114
     101: iload_3
     102: ifeq          109
     105: lload_1
     106: goto          113
     109: lload_1
     110: lload         12
     112: lsub
     113: lreturn
     114: iload_3
     115: ifeq          125
     118: lload_1
     119: lload         12
     121: ladd
     122: goto          126
     125: lload_1
     126: lreturn

  public abstract boolean isFixed();

  public abstract long nextTransition(long);

  public abstract long previousTransition(long);

  public java.util.TimeZone toTimeZone();
    Code:
       0: aload_0
       1: getfield      #108                // Field iID:Ljava/lang/String;
       4: invokestatic  #140                // Method java/util/TimeZone.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;
       7: areturn

  public abstract boolean equals(java.lang.Object);

  public int hashCode();
    Code:
       0: bipush        57
       2: aload_0
       3: invokevirtual #131                // Method getID:()Ljava/lang/String;
       6: invokevirtual #141                // Method java/lang/String.hashCode:()I
       9: iadd
      10: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #131                // Method getID:()Ljava/lang/String;
       4: areturn

  protected java.lang.Object writeReplace() throws java.io.ObjectStreamException;
    Code:
       0: new           #142                // class org/joda/time/DateTimeZone$Stub
       3: dup
       4: aload_0
       5: getfield      #108                // Field iID:Ljava/lang/String;
       8: invokespecial #143                // Method org/joda/time/DateTimeZone$Stub."<init>":(Ljava/lang/String;)V
      11: areturn

  static {};
    Code:
       0: getstatic     #144                // Field org/joda/time/UTCDateTimeZone.INSTANCE:Lorg/joda/time/DateTimeZone;
       3: putstatic     #11                 // Field UTC:Lorg/joda/time/DateTimeZone;
       6: new           #145                // class java/util/concurrent/atomic/AtomicReference
       9: dup
      10: invokespecial #146                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      13: putstatic     #61                 // Field cProvider:Ljava/util/concurrent/atomic/AtomicReference;
      16: new           #145                // class java/util/concurrent/atomic/AtomicReference
      19: dup
      20: invokespecial #146                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      23: putstatic     #88                 // Field cNameProvider:Ljava/util/concurrent/atomic/AtomicReference;
      26: new           #145                // class java/util/concurrent/atomic/AtomicReference
      29: dup
      30: invokespecial #146                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      33: putstatic     #1                  // Field cDefault:Ljava/util/concurrent/atomic/AtomicReference;
      36: return
}
