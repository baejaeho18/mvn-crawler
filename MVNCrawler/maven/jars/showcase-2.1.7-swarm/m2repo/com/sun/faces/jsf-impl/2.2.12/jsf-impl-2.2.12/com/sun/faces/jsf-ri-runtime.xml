<?xml version="1.0" encoding="UTF-8"?>

<faces-config xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"
    version="2.2">
            
<factory>
<application-factory>
      com.sun.faces.application.ApplicationFactoryImpl
    </application-factory>
<exception-handler-factory>
      com.sun.faces.context.ExceptionHandlerFactoryImpl
    </exception-handler-factory>
<visit-context-factory>
      com.sun.faces.component.visit.VisitContextFactoryImpl
    </visit-context-factory>
<faces-context-factory>
      com.sun.faces.context.FacesContextFactoryImpl
    </faces-context-factory>
<client-window-factory>
      com.sun.faces.lifecycle.ClientWindowFactoryImpl
    </client-window-factory>
<flash-factory>
      com.sun.faces.context.flash.FlashFactoryImpl
    </flash-factory>
<partial-view-context-factory>
      com.sun.faces.context.PartialViewContextFactoryImpl
    </partial-view-context-factory>
<lifecycle-factory>
      com.sun.faces.lifecycle.LifecycleFactoryImpl
    </lifecycle-factory>
<render-kit-factory>
      com.sun.faces.renderkit.RenderKitFactoryImpl
    </render-kit-factory>
<view-declaration-language-factory>
      com.sun.faces.application.view.ViewDeclarationLanguageFactoryImpl
    </view-declaration-language-factory>
<tag-handler-delegate-factory>
      com.sun.faces.facelets.tag.jsf.TagHandlerDelegateFactoryImpl
    </tag-handler-delegate-factory>
<external-context-factory>
      com.sun.faces.context.ExternalContextFactoryImpl
    </external-context-factory>
<facelet-cache-factory>
      com.sun.faces.facelets.impl.FaceletCacheFactoryImpl
    </facelet-cache-factory>
<flow-handler-factory>
      com.sun.faces.flow.FlowHandlerFactoryImpl
    </flow-handler-factory>
</factory>
<application>
<action-listener>
      com.sun.faces.application.ActionListenerImpl
    </action-listener>
<navigation-handler>
      com.sun.faces.application.NavigationHandlerImpl
    </navigation-handler>
<state-manager>
      com.sun.faces.application.StateManagerImpl
    </state-manager>
<view-handler>
        com.sun.faces.application.view.MultiViewHandler
    </view-handler>
<resource-handler>
      com.sun.faces.application.resource.ResourceHandlerImpl
    </resource-handler>
<system-event-listener>
<system-event-listener-class>com.sun.faces.application.view.ViewScopeEventListener</system-event-listener-class>
<system-event-class>javax.faces.event.PostConstructViewMapEvent</system-event-class>
<source-class>javax.faces.component.UIViewRoot</source-class>
</system-event-listener>
<system-event-listener>
<system-event-listener-class>com.sun.faces.application.view.ViewScopeEventListener</system-event-listener-class>
<system-event-class>javax.faces.event.PreDestroyViewMapEvent</system-event-class>
<source-class>javax.faces.component.UIViewRoot</source-class>
</system-event-listener>
</application>
<converter>
<converter-id>javax.faces.BigDecimal</converter-id>
<converter-class>javax.faces.convert.BigDecimalConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.BigInteger</converter-id>
<converter-class>javax.faces.convert.BigIntegerConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.Boolean</converter-id>
<converter-class>javax.faces.convert.BooleanConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.Byte</converter-id>
<converter-class>javax.faces.convert.ByteConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.Character</converter-id>
<converter-class>javax.faces.convert.CharacterConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.DateTime</converter-id>
<converter-class>javax.faces.convert.DateTimeConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.Double</converter-id>
<converter-class>javax.faces.convert.DoubleConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.Float</converter-id>
<converter-class>javax.faces.convert.FloatConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.Integer</converter-id>
<converter-class>javax.faces.convert.IntegerConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.Long</converter-id>
<converter-class>javax.faces.convert.LongConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.Number</converter-id>
<converter-class>javax.faces.convert.NumberConverter</converter-class>
</converter>
<converter>
<converter-id>javax.faces.Short</converter-id>
<converter-class>javax.faces.convert.ShortConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.math.BigDecimal</converter-for-class>
<converter-class>javax.faces.convert.BigDecimalConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.math.BigInteger</converter-for-class>
<converter-class>javax.faces.convert.BigIntegerConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.lang.Boolean</converter-for-class>
<converter-class>javax.faces.convert.BooleanConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.lang.Byte</converter-for-class>
<converter-class>javax.faces.convert.ByteConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.lang.Character</converter-for-class>
<converter-class>javax.faces.convert.CharacterConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.lang.Double</converter-for-class>
<converter-class>javax.faces.convert.DoubleConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.lang.Float</converter-for-class>
<converter-class>javax.faces.convert.FloatConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.lang.Integer</converter-for-class>
<converter-class>javax.faces.convert.IntegerConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.lang.Long</converter-for-class>
<converter-class>javax.faces.convert.LongConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.lang.Short</converter-for-class>
<converter-class>javax.faces.convert.ShortConverter</converter-class>
</converter>
<converter>
<converter-for-class>java.lang.Enum</converter-for-class>
<converter-class>javax.faces.convert.EnumConverter</converter-class>
</converter>
<lifecycle>
<phase-listener>com.sun.faces.lifecycle.ELResolverInitPhaseListener</phase-listener>
</lifecycle>
<behavior>
<behavior-id>javax.faces.behavior.Ajax</behavior-id>
<behavior-class>javax.faces.component.behavior.AjaxBehavior</behavior-class>
</behavior>
<validator>
<validator-id>javax.faces.Bean</validator-id>
<validator-class>javax.faces.validator.BeanValidator</validator-class>
</validator>
<validator>
<validator-id>javax.faces.DoubleRange</validator-id>
<validator-class>
      javax.faces.validator.DoubleRangeValidator
  </validator-class>
</validator>
<validator>
<validator-id>javax.faces.Length</validator-id>
<validator-class>javax.faces.validator.LengthValidator</validator-class>
</validator>
<validator>
<validator-id>javax.faces.LongRange</validator-id>
<validator-class>javax.faces.validator.LongRangeValidator</validator-class>
</validator>
<validator>
<validator-id>javax.faces.RegularExpression</validator-id>
<validator-class>javax.faces.validator.RegexValidator</validator-class>
</validator>
<validator>
<validator-id>javax.faces.Required</validator-id>
<validator-class>javax.faces.validator.RequiredValidator</validator-class>
</validator>
<validator>
<validator-id>com.sun.faces.ext.validator.CreditCardValidator</validator-id>
<validator-class>com.sun.faces.ext.validator.CreditCardValidator</validator-class>
</validator>
<component>
<component-type>com.sun.faces.ext.focus</component-type>
<component-class>com.sun.faces.ext.component.UIFocus</component-class>
</component>
<component>
<component-type>facelets.ui.Repeat</component-type>
<component-class>com.sun.faces.facelets.component.UIRepeat</component-class>
</component>
<component>
<component-type>facelets.ui.ComponentRef</component-type>
<component-class>com.sun.faces.facelets.tag.ui.ComponentRef</component-class>
</component>
<component>
<component-type>facelets.ui.Debug</component-type>
<component-class>com.sun.faces.facelets.tag.ui.UIDebug</component-class>
</component>
<component>
<component-type>javax.faces.Composite</component-type>
<component-class>com.sun.faces.facelets.tag.jsf.CompositeComponentImpl
        </component-class>
</component>
<component>
<component-type>javax.faces.ComponentResourceContainer</component-type>
<component-class>com.sun.faces.component.ComponentResourceContainer</component-class>
</component>
<render-kit>
<render-kit-id>HTML_BASIC</render-kit-id>
<renderer>
<component-family>FocusFamily</component-family>
<renderer-type>com.sun.faces.ext.render.FocusHTMLRenderer</renderer-type>
<renderer-class>com.sun.faces.ext.render.FocusHTMLRenderer</renderer-class>
</renderer>
<renderer>
<component-family>facelets</component-family>
<renderer-type>facelets.ui.Repeat</renderer-type>
<renderer-class>com.sun.faces.facelets.component.RepeatRenderer</renderer-class>
</renderer>
<client-behavior-renderer>
<client-behavior-renderer-type>javax.faces.behavior.Ajax</client-behavior-renderer-type>
<client-behavior-renderer-class>com.sun.faces.renderkit.html_basic.AjaxBehaviorRenderer</client-behavior-renderer-class>
</client-behavior-renderer>
</render-kit>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Column</component-type>
<component-class>javax.faces.component.UIColumn</component-class>
<facet>
<facet-name>header</facet-name>
</facet>
<facet>
<facet-name>footer</facet-name>
</facet>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Column</component-family>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Command</component-type>
<component-class>javax.faces.component.UICommand</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing the application action to invoke
          when this component is activated by the user.  The expression
          must evaluate to a public method that takes no parameters, and
          returns an Object (the toString() of which is called to derive
          the logical outcome) which is passed to the NavigationHandler
          for this application.
        </description>
<display-name>Application Action</display-name>
<icon/>
<property-name>action</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                java.lang.Object action()
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing an action listener method that
          will be notified when this component is activated by the user.
          The expression must evaluate to a public method that takes an
          ActionEvent parameter, with a return type of void, &lt;span
          class="changed_added_2_0"&gt;or to a public method that takes no
          arguments with a return type of void.  In the latter case, the
          method has no way of easily knowing where the event came from,
          but this can be useful in cases where a notification is needed
          that "some action happened".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Action Listener</display-name>
<icon/>
<property-name>actionListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void actionListener(javax.faces.event.ActionEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Command</component-family>
<renderer-type>javax.faces.Button</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Data</component-type>
<component-class>javax.faces.component.UIData</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Zero-relative row number of the first row to be displayed.  If this
          property is set to zero, rendering will begin with the first row of
          the underlying data.
        </description>
<display-name>First Row Index</display-name>
<icon/>
<property-name>first</property-name>
<property-class>int</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether there is model data available for the row
          selected by the current value of the "rowIndex" property.
        </description>
<display-name>Row Available Flag</display-name>
<icon/>
<property-name>rowAvailable</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>&lt;span class="changed_added_2_1"&gt;Boolean flag directing how the per-row component state should be handled.&lt;/span&gt;</description>
<display-name>Preserve Row Component State</display-name>
<icon/>
<property-name>rowStatePreserved</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The number of rows of model data that are available for processing
          by this component.  If the number of rows is unknown, this property
          will be set to -1.
        </description>
<display-name>Row Count</display-name>
<icon/>
<property-name>rowCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          An object representing the model data for the row selected by the
          current value of the "rowIndex" property.
        </description>
<display-name>Row Data</display-name>
<icon/>
<property-name>rowData</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Zero-relative index of the currently selected row from the underlying
          model data.  No error will occur if this property is set to point at
          a row for which no model data exists.  To ensure data availability,
          check the state of the "rowAvailable" property after modifying this
          property.
        </description>
<display-name>Row Index</display-name>
<icon/>
<property-name>rowIndex</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The number of rows to display, starting with the one identified by the
          "first" property.  If this value is set to zero, all available rows in
          the underlying data model will be displayed.
        </description>
<display-name>Rows To Display</display-name>
<icon/>
<property-name>rows</property-name>
<property-class>int</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Name of a request-scope attribute under which the model data for the
          row selected by the current value of the "rowIndex" property (i.e.
          also the current value of the "rowData" property) will be exposed.
        </description>
<display-name>Row Data Attribute</display-name>
<icon/>
<property-name>var</property-name>
<property-class>java.lang.String</property-class>
</property>
<component-extension>
<component-family>javax.faces.Data</component-family>
<renderer-type>javax.faces.Table</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Form</component-type>
<component-class>javax.faces.component.UIForm</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this form was the one submitted by
          the user.  If this flag is not set, child input components are not
          processed.
        </description>
<display-name>Submitted Flag</display-name>
<icon/>
<property-name>submitted</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this form should prepend its id
          to its descendent's id during the clientId generation process.
          If this flag is not set, the default value is true.
        </description>
<display-name>Prepend Id During getClientId()</display-name>
<icon/>
<property-name>prependId</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>true</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Form</component-family>
<renderer-type>javax.faces.Form</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Graphic</component-type>
<component-class>javax.faces.component.UIGraphic</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Context-relative URL to retrieve the resource associated with
          this component.  This is an alias for the "value" property.
        </description>
<display-name>Source URL</display-name>
<icon/>
<property-name>url</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Graphic</component-family>
<renderer-type>javax.faces.Image</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Input</component-type>
<component-class>javax.faces.component.UIInput</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Input</component-family>
<renderer-type>javax.faces.Text</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Message</component-type>
<component-class>javax.faces.component.UIMessage</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Client identifier of the component for which to display messages.
        </description>
<display-name>Associated Client Id</display-name>
<icon/>
<property-name>for</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<required>true</required>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the detail portion of displayed messages
          should be included.  Default value is "true".
        </description>
<display-name>Show Detail</display-name>
<icon/>
<property-name>showDetail</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>true</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the summary portion of displayed messages
          should be included.  Default value is "false".
        </description>
<display-name>Show Summary</display-name>
<icon/>
<property-name>showSummary</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>false</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Message</component-family>
<renderer-type>javax.faces.Message</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Messages</component-type>
<component-class>javax.faces.component.UIMessages</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating that only global messages (that is, messages not
          associated with any client identifier) are to be displayed.
          Default value is "false".
        </description>
<display-name>Global Only</display-name>
<icon/>
<property-name>globalOnly</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>false</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Client identifier of the component for which to display messages. This
          attribute is mutually exclusive with globalOnly and take precedence
          if used.
        </description>
<display-name>Associated Client Id</display-name>
<icon/>
<property-name>for</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<required>false</required>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the detail portion of displayed messages
          should be included.  Default value is "false".
        </description>
<display-name>Show Detail</display-name>
<icon/>
<property-name>showDetail</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>false</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the summary portion of displayed messages
          should be included.  Default value is "true".
        </description>
<display-name>Show Summary</display-name>
<icon/>
<property-name>showSummary</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>true</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Messages</component-family>
<renderer-type>javax.faces.Messages</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.NamingContainer</component-type>
<component-class>javax.faces.component.UINamingContainer</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.NamingContainer</component-family>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Output</component-type>
<component-class>javax.faces.component.UIOutput</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.Text</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.OutcomeTarget</component-type>
<component-class>javax.faces.component.UIOutcomeTarget</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The logical outcome used to resolve a navigation case.
        </description>
<display-name>Outcome</display-name>
<icon/>
<property-name>outcome</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Whether to include page parameters in the target URI.
        </description>
<display-name>Include Page Parameters</display-name>
<icon/>
<property-name>includeViewParams</property-name>
<property-class>java.lang.Boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Return the URI fragment, as specified in RFC 2396.
        </description>
<display-name>HTML Fragment</display-name>
<icon/>
<property-name>fragment</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.OutcomeTarget</component-family>
<renderer-type>javax.faces.Link</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Panel</component-type>
<component-class>javax.faces.component.UIPanel</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Panel</component-family>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.ViewParameter</component-type>
<component-class>javax.faces.component.UIViewParameter</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Name of the parameter associated with this component.
        </description>
<display-name>Property Name</display-name>
<icon/>
<property-name>name</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Value of the parameter associated with this component.
        </description>
<display-name>Property Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.ViewParameter</component-family>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.ViewAction</component-type>
<component-class>javax.faces.component.UIViewAction</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing the application action to invoke
          when this component is activated by the user.  The expression
          must evaluate to a public method that takes no parameters, and
          returns an Object (the toString() of which is called to derive
          the logical outcome) which is passed to the NavigationHandler
          for this application.
        </description>
<display-name>Application Action</display-name>
<icon/>
<property-name>action</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                java.lang.Object action()
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing an action listener method that
          will be notified when this component is activated by the user.
          The expression must evaluate to a public method that takes an
          ActionEvent parameter, with a return type of void, &lt;span
          class="changed_added_2_0"&gt;or to a public method that takes no
          arguments with a return type of void.  In the latter case, the
          method has no way of easily knowing where the event came from,
          but this can be useful in cases where a notification is needed
          that "some action happened".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Action Listener</display-name>
<icon/>
<property-name>actionListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void actionListener(javax.faces.event.ActionEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing the application action to invoke
          when this component is activated by the user.  The expression
          must evaluate to a public method that takes no parameters, and
          returns an Object (the toString() of which is called to derive
          the logical outcome) which is passed to the NavigationHandler
          for this application.
        </description>
<display-name>Application Action</display-name>
<icon/>
<property-name>actionExpression</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                java.lang.Object action()
            </method-signature>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
                By default, a view action is not executed on
                postback. If your application is decidedly stateless,
                you may need the view action to execute on any type of
                request. The default value is false.
            </description>
<property-name>onPostback</property-name>
<property-class>boolean</property-class>
<property-extension>
<required>false</required>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
                You may only want the view action to be invoked under certain conditions. 
                For that, you can use this property, which accepts an EL value expression
                that must evaluate to a boolean value.
            </description>
<property-name>if</property-name>
<property-class>boolean</property-class>
<property-extension>
<required>false</required>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
                Specifies the phase in which the action invocation should occur 
                using the name of the phase constant in the PhaseId class (the case does 
                not matter). The default is INVOKE_APPLICATION.
            </description>
<property-name>phase</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<required>false</required>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.ViewAction</component-family>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.Parameter</component-type>
<component-class>javax.faces.component.UIParameter</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Name of the parameter associated with this component.
        </description>
<display-name>Property Name</display-name>
<icon/>
<property-name>name</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Value of the parameter associated with this component.
        </description>
<display-name>Property Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.Parameter</component-family>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.SelectBoolean</component-type>
<component-class>javax.faces.component.UISelectBoolean</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
            Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
            For output components, this is the same as the "value" property.
            For input components, this is the most recently user-entered
            value, which will be pushed to the application data model during
            Update Model Values phase, if a value binding is present for the
            "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
            The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
            Flag indicating whether the user has selected this component.
            This is an alias for the "value" property.
        </description>
<display-name>Selected Flag</display-name>
<icon/>
<property-name>selected</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.SelectBoolean</component-family>
<renderer-type>javax.faces.Checkbox</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.SelectItem</component-type>
<component-class>javax.faces.component.UISelectItem</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Description of the selection item represented by this component.
          This property may be used by tools.
        </description>
<display-name>Item Description</display-name>
<icon/>
<property-name>itemDescription</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Flag indicating that the selection item represented by this component
          must be rendered as disabled.
        </description>
<display-name>Item Disabled</display-name>
<icon/>
<property-name>itemDisabled</property-name>
<property-class>boolean</property-class>
</property>
<property>
<description>
          Label of the selection item represented by this component.  This
          property is displayed to the user when the containing input
          component is rendered.
        </description>
<display-name>Item Label</display-name>
<icon/>
<property-name>itemLabel</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The value returned to the server when a user chooses the selection
          item represented by this component.
        </description>
<display-name>Item Value</display-name>
<icon/>
<property-name>itemValue</property-name>
<property-class>java.lang.Object</property-class>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.SelectItem</component-family>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.SelectItems</component-type>
<component-class>javax.faces.component.UISelectItems</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.SelectItems</component-family>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.SelectMany</component-type>
<component-class>javax.faces.component.UISelectMany</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Array containing the selected values for this component.
          This is an alias for the "value" property.
        </description>
<display-name>Selected Values</display-name>
<icon/>
<property-name>selectedValues</property-name>
<property-class>java.lang.Object[]</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.SelectMany</component-family>
<renderer-type>javax.faces.Listbox</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.SelectOne</component-type>
<component-class>javax.faces.component.UISelectOne</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.SelectOne</component-family>
<renderer-type>javax.faces.Menu</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<component-type>javax.faces.ViewRoot</component-type>
<component-class>javax.faces.component.UIViewRoot</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Locale to be used in localizing the rendered output of this view.
        </description>
<display-name>Locale</display-name>
<icon/>
<property-name>locale</property-name>
<property-class>java.util.Locale</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Identifier of the RenderKit being used to display this view.
        </description>
<display-name>Render Kit Id</display-name>
<icon/>
<property-name>renderKitId</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Identifier of the view represented by this component tree.
        </description>
<display-name>View Id</display-name>
<icon/>
<property-name>viewId</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<component-extension>
<component-family>javax.faces.ViewRoot</component-family>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents a column that will be rendered 
      in an HTML &lt;code&gt;table&lt;/code&gt; element.&lt;/p&gt;</description>
<display-name>Column</display-name>
<component-type>javax.faces.HtmlColumn</component-type>
<component-class>javax.faces.component.html.HtmlColumn</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any header generated for this column.
        </description>
<display-name>Header CSS Classes</display-name>
<icon/>
<property-name>headerClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any footer generated for this column.
        </description>
<display-name>Footer CSS Classes</display-name>
<icon/>
<property-name>footerClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Flag indicating that this column is a row header column and
          therefore cells in this column should be rendered with "th"
          instead of "td" and must have the 'scope="row"' attribute.
        </description>
<display-name>Column is Row Header</display-name>
<icon/>
<property-name>rowHeader</property-name>
<property-class>boolean</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.Column</base-component-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;input&lt;/code&gt; element
      for a button of type &lt;code&gt;submit&lt;/code&gt; or &lt;code&gt;reset&lt;/code&gt;.
      The label text is specified by the component value.&lt;/p&gt;</description>
<display-name>Command Button</display-name>
<component-type>javax.faces.HtmlCommandButton</component-type>
<component-class>javax.faces.component.html.HtmlCommandButton</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing the application action to invoke
          when this component is activated by the user.  The expression
          must evaluate to a public method that takes no parameters, and
          returns an Object (the toString() of which is called to derive
          the logical outcome) which is passed to the NavigationHandler
          for this application.
        </description>
<display-name>Application Action</display-name>
<icon/>
<property-name>action</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                java.lang.Object action()
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing an action listener method that
          will be notified when this component is activated by the user.
          The expression must evaluate to a public method that takes an
          ActionEvent parameter, with a return type of void, &lt;span
          class="changed_added_2_0"&gt;or to a public method that takes no
          arguments with a return type of void.  In the latter case, the
          method has no way of easily knowing where the event came from,
          but this can be useful in cases where a notification is needed
          that "some action happened".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Action Listener</display-name>
<icon/>
<property-name>actionListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void actionListener(javax.faces.event.ActionEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
        Alternate textual description of the
        element rendered by this component.
      </description>
<display-name>Alternate Text</display-name>
<icon/>
<property-name>alt</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>&lt;p&gt;
        Absolute or relative URL of the
        image to be displayed for this
        button.  If specified, this
        "input" element will be of type
        "image".  Otherwise, it will be
        of the type specified by the
        "type" property with a label
        specified by the "value"
        property.  &lt;span
        class="changed_added_2_0"&gt;Note
        that if the value of this
        attribute starts with "/", the
        rendered value for this
        attribute will be prefixed with
        the context-root for this
        application.&lt;/span&gt;
      &lt;/p&gt;</description>
<display-name>Image URL</display-name>
<icon/>
<property-name>image</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>action</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
         Type of button to create.  Valid values are "submit", "button",
         and "reset".  If not specified, or not a valid value, the default
         value is "submit".
      </description>
<display-name>Button Type</display-name>
<icon/>
<property-name>type</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<default-value>"submit"</default-value>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Command</base-component-type>
<renderer-type>javax.faces.Button</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;a&lt;/code&gt; element for a hyperlink that acts
      like a submit button.  This component must be placed inside
      a form, and requires JavaScript to be enabled in the client.&lt;/p&gt;</description>
<display-name>Command Hyperlink</display-name>
<component-type>javax.faces.HtmlCommandLink</component-type>
<component-class>javax.faces.component.html.HtmlCommandLink</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing the application action to invoke
          when this component is activated by the user.  The expression
          must evaluate to a public method that takes no parameters, and
          returns an Object (the toString() of which is called to derive
          the logical outcome) which is passed to the NavigationHandler
          for this application.
        </description>
<display-name>Application Action</display-name>
<icon/>
<property-name>action</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                java.lang.Object action()
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing an action listener method that
          will be notified when this component is activated by the user.
          The expression must evaluate to a public method that takes an
          ActionEvent parameter, with a return type of void, &lt;span
          class="changed_added_2_0"&gt;or to a public method that takes no
          arguments with a return type of void.  In the latter case, the
          method has no way of easily knowing where the event came from,
          but this can be useful in cases where a notification is needed
          that "some action happened".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Action Listener</display-name>
<icon/>
<property-name>actionListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void actionListener(javax.faces.event.ActionEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The character encoding of the resource designated
          by this hyperlink.
        </description>
<display-name>Character Set</display-name>
<icon/>
<property-name>charset</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The position and shape of the hot spot on the screen
          (for use in client-side image maps).
        </description>
<display-name>Coordinates</display-name>
<icon/>
<property-name>coords</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The language code of the resource designated
          by this hyperlink.
        </description>
<display-name>Language</display-name>
<icon/>
<property-name>hreflang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The relationship from the current document
          to the anchor specified by this hyperlink.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Relationship</display-name>
<icon/>
<property-name>rel</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A reverse link from the anchor specified
          by this hyperlink to the current document.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Reverse Link</display-name>
<icon/>
<property-name>rev</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The shape of the hot spot on the screen
          (for use in client-side image maps).  Valid
          values are:  default (entire region); rect
          (rectangular region); circle (circular region);
          and poly (polygonal region).
        </description>
<display-name>Shape</display-name>
<icon/>
<property-name>shape</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Name of a frame where the resource
          retrieved via this hyperlink is to
          be displayed.
        </description>
<display-name>Target Frame</display-name>
<icon/>
<property-name>target</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The content type of the resource designated
          by this hyperlink.
        </description>
<display-name>Content Type</display-name>
<icon/>
<property-name>type</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never
          receive focus or be included in a subsequent
          submit.
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>action</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Command</base-component-type>
<renderer-type>javax.faces.Link</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents a set of repeating data (segregated into
      columns by child UIColumn components) that will
      be rendered in an HTML &lt;code&gt;table&lt;/code&gt; element.&lt;/p&gt;</description>
<display-name>Data Table</display-name>
<component-type>javax.faces.HtmlDataTable</component-type>
<component-class>javax.faces.component.html.HtmlDataTable</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Zero-relative row number of the first row to be displayed.  If this
          property is set to zero, rendering will begin with the first row of
          the underlying data.
        </description>
<display-name>First Row Index</display-name>
<icon/>
<property-name>first</property-name>
<property-class>int</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether there is model data available for the row
          selected by the current value of the "rowIndex" property.
        </description>
<display-name>Row Available Flag</display-name>
<icon/>
<property-name>rowAvailable</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>&lt;span class="changed_added_2_1"&gt;Boolean flag directing how the per-row component state should be handled.&lt;/span&gt;</description>
<display-name>Preserve Row Component State</display-name>
<icon/>
<property-name>rowStatePreserved</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The number of rows of model data that are available for processing
          by this component.  If the number of rows is unknown, this property
          will be set to -1.
        </description>
<display-name>Row Count</display-name>
<icon/>
<property-name>rowCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          An object representing the model data for the row selected by the
          current value of the "rowIndex" property.
        </description>
<display-name>Row Data</display-name>
<icon/>
<property-name>rowData</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Zero-relative index of the currently selected row from the underlying
          model data.  No error will occur if this property is set to point at
          a row for which no model data exists.  To ensure data availability,
          check the state of the "rowAvailable" property after modifying this
          property.
        </description>
<display-name>Row Index</display-name>
<icon/>
<property-name>rowIndex</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The number of rows to display, starting with the one identified by the
          "first" property.  If this value is set to zero, all available rows in
          the underlying data model will be displayed.
        </description>
<display-name>Rows To Display</display-name>
<icon/>
<property-name>rows</property-name>
<property-class>int</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Name of a request-scope attribute under which the model data for the
          row selected by the current value of the "rowIndex" property (i.e.
          also the current value of the "rowData" property) will be exposed.
        </description>
<display-name>Row Data Attribute</display-name>
<icon/>
<property-name>var</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Name or code of the background color for this table.
        </description>
<display-name>Background Color</display-name>
<icon/>
<property-name>bgcolor</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Width (in pixels) of the border to be drawn
          around this table.
        </description>
<display-name>Table Border</display-name>
<icon/>
<property-name>border</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Definition of how much space the user agent should
          leave between the border of each cell and its contents.
        </description>
<display-name>Cell Padding</display-name>
<icon/>
<property-name>cellpadding</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Definition of how much space the user agent should
          leave between the left side of the table and the
          leftmost column, the top of the table and the top of
          the top side of the topmost row, and so on for the
          right and bottom of the table.  It also specifies
          the amount of space to leave between cells.
        </description>
<display-name>Cell Spacing</display-name>
<icon/>
<property-name>cellspacing</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Comma-delimited list of CSS style classes that will be applied
          to the columns of this table.  A space separated list of
          classes may also be specified for any individual column.  If
          the number of elements in this list is less than the number of
          actual column children of the UIData, no "class"
          attribute is output for each column greater than the number of
          elements in the list.  If the number of elements in the list
          is greater than the number of actual column children of the
          UIData, the elements at the posisiton in the list
          after the last column are ignored.
        </description>
<display-name>Column CSS Classes</display-name>
<icon/>
<property-name>columnClasses</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any footer generated for this table.
        </description>
<display-name>Footer CSS Classes</display-name>
<icon/>
<property-name>footerClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Code specifying which sides of the frame surrounding
          this table will be visible.  Valid values are:
          none (no sides, default value); above (top side only);
          below (bottom side only); hsides (top and bottom sides
          only); vsides (right and left sides only); lhs (left
          hand side only); rhs (right hand side only); box
          (all four sides); and border (all four sides).
        </description>
<display-name>Table Frame</display-name>
<icon/>
<property-name>frame</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any caption generated for this table.
        </description>
<display-name>Caption CSS Classes</display-name>
<icon/>
<property-name>captionClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to be applied when this caption is rendered.
        </description>
<display-name>Caption CSS Styles</display-name>
<icon/>
<property-name>captionStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any header generated for this table.
        </description>
<display-name>Header CSS Classes</display-name>
<icon/>
<property-name>headerClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Comma-delimited list of CSS style classes that will be applied
          to the rows of this table.  A space separated list of classes
          may also be specified for any individual row.  Thes styles are
          applied, in turn, to each row in the table.  For example, if
          the list has two elements, the first style class in the list
          is applied to the first row, the second to the second row, the
          first to the third row, the second to the fourth row, etc.  In
          other words, we keep iterating through the list until we reach
          the end, and then we start at the beginning again.
        </description>
<display-name>Row CSS Classes</display-name>
<icon/>
<property-name>rowClasses</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Code specifying which rules will appear between cells
          within this table.  Valid values are:  none (no rules,
          default value); groups (between row groups); rows
          (between rows only); cols (between columns only); and
          all (between all rows and columns).
        </description>
<display-name>Table Rules</display-name>
<icon/>
<property-name>rules</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Summary of this table's purpose and structure, for
          user agents rendering to non-visual media such as
          speech and Braille.
        </description>
<display-name>Table Summary</display-name>
<icon/>
<property-name>summary</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Width of the entire table, for visual user agents.
        </description>
<display-name>Table Width</display-name>
<icon/>
<property-name>width</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Comma separated list of row indices for which a new
          "tbody" element should be started (and any
          previously opened one should be ended).
        </description>
<display-name>Body Rows</display-name>
<icon/>
<property-name>bodyrows</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>&lt;span class="changed_added_2_1"&gt;Boolean flag directing how the per-row component state should be handled.&lt;/span&gt;</description>
<display-name>Preserve Row Component State</display-name>
<icon/>
<property-name>rowStatePreserved</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Data</base-component-type>
<renderer-type>javax.faces.Table</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;form&lt;/code&gt; element.  Child input components
      will be submitted unless they have been disabled.&lt;/p&gt;</description>
<display-name>Form</display-name>
<component-type>javax.faces.HtmlForm</component-type>
<component-class>javax.faces.component.html.HtmlForm</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this form was the one submitted by
          the user.  If this flag is not set, child input components are not
          processed.
        </description>
<display-name>Submitted Flag</display-name>
<icon/>
<property-name>submitted</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this form should prepend its id
          to its descendent's id during the clientId generation process.
          If this flag is not set, the default value is true.
        </description>
<display-name>Prepend Id During getClientId()</display-name>
<icon/>
<property-name>prependId</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>true</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        List of content types that a server processing this form
        will handle correctly
        </description>
<display-name>Content Type</display-name>
<icon/>
<property-name>accept</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        List of character encodings for input data
        that are accepted by the server processing
        this form.
        </description>
<display-name>Character Set</display-name>
<icon/>
<property-name>acceptcharset</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
        Content type used to submit the form to the server.  If not
        specified, the default value is
        "application/x-www-form-urlencoded".
        </description>
<display-name>Encoding Type</display-name>
<icon/>
<property-name>enctype</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<default-value>"application/x-www-form-urlencoded"</default-value>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Javascript code executed when this form is reset.
        </description>
<display-name>Form Reset Script</display-name>
<icon/>
<property-name>onreset</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Javascript code executed when this form is submitted.
        </description>
<display-name>Form Submit Script</display-name>
<icon/>
<property-name>onsubmit</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Name of a frame where the response
        retrieved after this form submit is to
        be displayed.
        </description>
<display-name>Target Frame</display-name>
<icon/>
<property-name>target</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Form</base-component-type>
<renderer-type>javax.faces.Form</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;img&lt;/code&gt; element, used to retrieve
      and render a graphical image.&lt;/p&gt;</description>
<display-name>Graphic Image</display-name>
<component-type>javax.faces.HtmlGraphicImage</component-type>
<component-class>javax.faces.component.html.HtmlGraphicImage</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Context-relative URL to retrieve the resource associated with
          this component.  This is an alias for the "value" property.
        </description>
<display-name>Source URL</display-name>
<icon/>
<property-name>url</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Alternate textual description of the
        element rendered by this component.
        </description>
<display-name>Alternate Text</display-name>
<icon/>
<property-name>alt</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Override for the height of this image.
        </description>
<display-name>Image Height</display-name>
<icon/>
<property-name>height</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Flag indicating that this image is to be used as a server side
        image map.  Such an image must be enclosed within a hyperlink
        ("a").  A value of false causes no attribute to be rendered, 
        while a value of true causes the attribute to be rendered as
        ismap="ismap".
        </description>
<display-name>Image Map Flag</display-name>
<icon/>
<property-name>ismap</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        URI to a long description of the image
        represented by this element.
        </description>
<display-name>Long Description</display-name>
<icon/>
<property-name>longdesc</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        The name of a client side image map (an HTML "map"
        element) for which this element provides the image.
        </description>
<display-name>Use Image Map</display-name>
<icon/>
<property-name>usemap</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Override for the width of this image.
        </description>
<display-name>Image Width</display-name>
<icon/>
<property-name>width</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Graphic</base-component-type>
<renderer-type>javax.faces.Image</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;input&lt;/code&gt; element
      of type &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;</description>
<display-name>Input File</display-name>
<component-type>javax.faces.HtmlInputFile</component-type>
<component-class>javax.faces.component.html.HtmlInputFile</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
          Alternate textual description of the
          element rendered by this component.
        </description>
<display-name>Alternate Text</display-name>
<icon/>
<property-name>alt</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        If the value of this attribute is "off", render "off" as the value
        of the attribute. This indicates that the  browser should
        disable its autocomplete feature for this component.  This is
        useful for components that perform autocompletion and do not
        want the browser interfering.  If this attribute is not set or the value 
        is "on", render nothing.
        </description>
<display-name>Enable or disable browser autocompletion.</display-name>
<icon/>
<property-name>autocomplete</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The maximum number of characters that may
          be entered in this field.
        </description>
<display-name>Maximum Length</display-name>
<icon/>
<property-name>maxlength</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The number of characters used to determine
          the width of this field.
        </description>
<display-name>Field Width</display-name>
<icon/>
<property-name>size</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<component-extension>
<ignore>true</ignore>
<base-component-type>javax.faces.Input</base-component-type>
<renderer-type>javax.faces.File</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;input&lt;/code&gt; element
      of type &lt;code&gt;hidden&lt;/code&gt;.&lt;/p&gt;</description>
<display-name>Input Hidden</display-name>
<component-type>javax.faces.HtmlInputHidden</component-type>
<component-class>javax.faces.component.html.HtmlInputHidden</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Input</base-component-type>
<renderer-type>javax.faces.Hidden</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;input&lt;/code&gt; element
      of type &lt;code&gt;password&lt;/code&gt;.  On a redisplay,
      any previously entered value will &lt;em&gt;not&lt;/em&gt;
      be rendered (for security reasons) unless the
      &lt;code&gt;redisplay&lt;/code&gt; property is set to
      &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;</description>
<display-name>Input Secret</display-name>
<component-type>javax.faces.HtmlInputSecret</component-type>
<component-class>javax.faces.component.html.HtmlInputSecret</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
          Alternate textual description of the
          element rendered by this component.
        </description>
<display-name>Alternate Text</display-name>
<icon/>
<property-name>alt</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        If the value of this attribute is "off", render "off" as the value
        of the attribute. This indicates that the  browser should
        disable its autocomplete feature for this component.  This is
        useful for components that perform autocompletion and do not
        want the browser interfering.  If this attribute is not set or the value 
        is "on", render nothing.
        </description>
<display-name>Enable or disable browser autocompletion.</display-name>
<icon/>
<property-name>autocomplete</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The maximum number of characters that may
          be entered in this field.
        </description>
<display-name>Maximum Length</display-name>
<icon/>
<property-name>maxlength</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The number of characters used to determine
          the width of this field.
        </description>
<display-name>Field Width</display-name>
<icon/>
<property-name>size</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Flag indicating that any existing value
        in this field should be rendered when the
        form is created.  Because this is a potential
        security risk, password values are not
        displayed by default.
        </description>
<display-name>Redisplay Flag</display-name>
<icon/>
<property-name>redisplay</property-name>
<property-class>boolean</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.Input</base-component-type>
<renderer-type>javax.faces.Secret</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;input&lt;/code&gt; element
      of type &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;</description>
<display-name>Input Text</display-name>
<component-type>javax.faces.HtmlInputText</component-type>
<component-class>javax.faces.component.html.HtmlInputText</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
          Alternate textual description of the
          element rendered by this component.
        </description>
<display-name>Alternate Text</display-name>
<icon/>
<property-name>alt</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        If the value of this attribute is "off", render "off" as the value
        of the attribute. This indicates that the  browser should
        disable its autocomplete feature for this component.  This is
        useful for components that perform autocompletion and do not
        want the browser interfering.  If this attribute is not set or the value 
        is "on", render nothing.
        </description>
<display-name>Enable or disable browser autocompletion.</display-name>
<icon/>
<property-name>autocomplete</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The maximum number of characters that may
          be entered in this field.
        </description>
<display-name>Maximum Length</display-name>
<icon/>
<property-name>maxlength</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The number of characters used to determine
          the width of this field.
        </description>
<display-name>Field Width</display-name>
<icon/>
<property-name>size</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Input</base-component-type>
<renderer-type>javax.faces.Text</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;textarea&lt;/code&gt; element.&lt;/p&gt;</description>
<display-name>Input Textarea</display-name>
<component-type>javax.faces.HtmlInputTextarea</component-type>
<component-class>javax.faces.component.html.HtmlInputTextarea</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
        The number of columns to be displayed.
        </description>
<display-name>Columns</display-name>
<icon/>
<property-name>cols</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        The number of rows to be displayed.
        </description>
<display-name>Rows</display-name>
<icon/>
<property-name>rows</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Input</base-component-type>
<renderer-type>javax.faces.Textarea</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<display-name>Message</display-name>
<component-type>javax.faces.HtmlMessage</component-type>
<component-class>javax.faces.component.html.HtmlMessage</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Client identifier of the component for which to display messages.
        </description>
<display-name>Associated Client Id</display-name>
<icon/>
<property-name>for</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<required>true</required>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the detail portion of displayed messages
          should be included.  Default value is "true".
        </description>
<display-name>Show Detail</display-name>
<icon/>
<property-name>showDetail</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>true</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the summary portion of displayed messages
          should be included.  Default value is "false".
        </description>
<display-name>Show Summary</display-name>
<icon/>
<property-name>showSummary</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>false</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          CSS style class to apply to any message
          with a severity class of "ERROR".
        </description>
<display-name>Error Class</display-name>
<icon/>
<property-name>errorClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to apply to any message
          with a severity class of "ERROR".
        </description>
<display-name>Error Styles</display-name>
<icon/>
<property-name>errorStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style class to apply to any message
          with a severity class of "FATAL".
        </description>
<display-name>Fatal Class</display-name>
<icon/>
<property-name>fatalClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to apply to any message
          with a severity class of "FATAL".
        </description>
<display-name>Fatal Styles</display-name>
<icon/>
<property-name>fatalStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style class to apply to any message
          with a severity class of "INFO".
        </description>
<display-name>Info Class</display-name>
<icon/>
<property-name>infoClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to apply to any message
          with a severity class of "INFO".
        </description>
<display-name>Info Styles</display-name>
<icon/>
<property-name>infoStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Flag indicating whether the detail portion of the
          message should be displayed as a tooltip.
        </description>
<display-name>Tooltip</display-name>
<icon/>
<property-name>tooltip</property-name>
<property-class>boolean</property-class>
</property>
<property>
<description>
          CSS style class to apply to any message
          with a severity class of "WARN".
        </description>
<display-name>Warning Class</display-name>
<icon/>
<property-name>warnClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to apply to any message
          with a severity class of "WARN".
        </description>
<display-name>Warning Styles</display-name>
<icon/>
<property-name>warnStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Message</base-component-type>
<renderer-type>javax.faces.Message</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<display-name>Messages</display-name>
<component-type>javax.faces.HtmlMessages</component-type>
<component-class>javax.faces.component.html.HtmlMessages</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating that only global messages (that is, messages not
          associated with any client identifier) are to be displayed.
          Default value is "false".
        </description>
<display-name>Global Only</display-name>
<icon/>
<property-name>globalOnly</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>false</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Client identifier of the component for which to display messages. This
          attribute is mutually exclusive with globalOnly and take precedence
          if used.
        </description>
<display-name>Associated Client Id</display-name>
<icon/>
<property-name>for</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<required>false</required>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the detail portion of displayed messages
          should be included.  Default value is "false".
        </description>
<display-name>Show Detail</display-name>
<icon/>
<property-name>showDetail</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>false</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the summary portion of displayed messages
          should be included.  Default value is "true".
        </description>
<display-name>Show Summary</display-name>
<icon/>
<property-name>showSummary</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>true</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          CSS style class to apply to any message
          with a severity class of "ERROR".
        </description>
<display-name>Error Class</display-name>
<icon/>
<property-name>errorClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to apply to any message
          with a severity class of "ERROR".
        </description>
<display-name>Error Styles</display-name>
<icon/>
<property-name>errorStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style class to apply to any message
          with a severity class of "FATAL".
        </description>
<display-name>Fatal Class</display-name>
<icon/>
<property-name>fatalClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to apply to any message
          with a severity class of "FATAL".
        </description>
<display-name>Fatal Styles</display-name>
<icon/>
<property-name>fatalStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style class to apply to any message
          with a severity class of "INFO".
        </description>
<display-name>Info Class</display-name>
<icon/>
<property-name>infoClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to apply to any message
          with a severity class of "INFO".
        </description>
<display-name>Info Styles</display-name>
<icon/>
<property-name>infoStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The type of layout markup to use when rendering
          error messages.  Valid values are "table" (an HTML
          table) and "list" (an HTML list).  If not specified,
          the default value is "list".
        </description>
<display-name>Layout</display-name>
<icon/>
<property-name>layout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<default-value>"list"</default-value>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the detail portion of the
          message should be displayed as a tooltip.
        </description>
<display-name>Tooltip</display-name>
<icon/>
<property-name>tooltip</property-name>
<property-class>boolean</property-class>
</property>
<property>
<description>
          CSS style class to apply to any message
          with a severity class of "WARN".
        </description>
<display-name>Warning Class</display-name>
<icon/>
<property-name>warnClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to apply to any message
          with a severity class of "WARN".
        </description>
<display-name>Warning Styles</display-name>
<icon/>
<property-name>warnStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Messages</base-component-type>
<renderer-type>javax.faces.Messages</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents a component that looks up a localized message in a
      resource bundle, optionally uses it as a
      &lt;code&gt;MessageFormat&lt;/code&gt; pattern string and substitutes in
      parameter values from nested &lt;em&gt;UIParameter&lt;/em&gt; components, and
      renders the result.  If the "dir" or "lang" attributes are
      present, render a &lt;code&gt;span&lt;/code&gt; element and pass them through
      as attributes on the span.&lt;/p&gt;</description>
<display-name>Output Format</display-name>
<component-type>javax.faces.HtmlOutputFormat</component-type>
<component-class>javax.faces.component.html.HtmlOutputFormat</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Flag indicating that characters that are sensitive
        in HTML and XML markup must be escaped.  This flag
        is set to "true" by default.
        </description>
<display-name>Escape Characters</display-name>
<icon/>
<property-name>escape</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>true</default-value>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Output</base-component-type>
<renderer-type>javax.faces.Format</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;label&lt;/code&gt; element, used to define
      an accessible label for a corresponding input element.&lt;/p&gt;</description>
<display-name>Output Label</display-name>
<component-type>javax.faces.HtmlOutputLabel</component-type>
<component-class>javax.faces.component.html.HtmlOutputLabel</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Client identifier of the component for which this element
        is a label.
        </description>
<display-name>Label For Identifier</display-name>
<icon/>
<property-name>for</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<required>false</required>
</property-extension>
</property>
<property>
<description>
        Flag indicating that characters that are sensitive
        in HTML and XML markup must be escaped.  If omitted, this
        flag is assumed to be "true".
        </description>
<display-name>Escape Characters</display-name>
<icon/>
<property-name>escape</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>true</default-value>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Output</base-component-type>
<renderer-type>javax.faces.Label</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;a&lt;/code&gt; (hyperlink) element that may be
      used to link to an arbitrary URL defined by the &lt;code&gt;value&lt;/code&gt;
      property.&lt;/p&gt;</description>
<display-name>Output Hyperlink</display-name>
<component-type>javax.faces.HtmlOutputLink</component-type>
<component-class>javax.faces.component.html.HtmlOutputLink</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The character encoding of the resource designated
          by this hyperlink.
        </description>
<display-name>Character Set</display-name>
<icon/>
<property-name>charset</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The position and shape of the hot spot on the screen
          (for use in client-side image maps).
        </description>
<display-name>Coordinates</display-name>
<icon/>
<property-name>coords</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The language code of the resource designated
          by this hyperlink.
        </description>
<display-name>Language</display-name>
<icon/>
<property-name>hreflang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The relationship from the current document
          to the anchor specified by this hyperlink.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Relationship</display-name>
<icon/>
<property-name>rel</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A reverse link from the anchor specified
          by this hyperlink to the current document.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Reverse Link</display-name>
<icon/>
<property-name>rev</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The shape of the hot spot on the screen
          (for use in client-side image maps).  Valid
          values are:  default (entire region); rect
          (rectangular region); circle (circular region);
          and poly (polygonal region).
        </description>
<display-name>Shape</display-name>
<icon/>
<property-name>shape</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Name of a frame where the resource
          retrieved via this hyperlink is to
          be displayed.
        </description>
<display-name>Target Frame</display-name>
<icon/>
<property-name>target</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The content type of the resource designated
          by this hyperlink.
        </description>
<display-name>Content Type</display-name>
<icon/>
<property-name>type</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never
          receive focus or be included in a subsequent
          submit.
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>action</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          The identifier of the page fragment which should
          be brought into focus when the target page is
          rendered. The value of this attribute is appended
          to the end of target URL following a hash (#) mark.
          This notation is part of the standard URL syntax.
        </description>
<display-name>Fragment Identifier</display-name>
<icon/>
<property-name>fragment</property-name>
<property-class>java.lang.String</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.Output</base-component-type>
<renderer-type>javax.faces.Link</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;a&lt;/code&gt; (hyperlink) element that may be
      used to link to a URL handled by the Faces Servlet resolved preemptively using the logical
      outcome defined by the &lt;code&gt;outcome&lt;/code&gt; property.</description>
<display-name>Outcome Target Hyperlink</display-name>
<component-type>javax.faces.HtmlOutcomeTargetLink</component-type>
<component-class>javax.faces.component.html.HtmlOutcomeTargetLink</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The logical outcome used to resolve a navigation case.
        </description>
<display-name>Outcome</display-name>
<icon/>
<property-name>outcome</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Whether to include page parameters in the target URI.
        </description>
<display-name>Include Page Parameters</display-name>
<icon/>
<property-name>includeViewParams</property-name>
<property-class>java.lang.Boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Return the URI fragment, as specified in RFC 2396.
        </description>
<display-name>HTML Fragment</display-name>
<icon/>
<property-name>fragment</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The character encoding of the resource designated
          by this hyperlink.
        </description>
<display-name>Character Set</display-name>
<icon/>
<property-name>charset</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The position and shape of the hot spot on the screen
          (for use in client-side image maps).
        </description>
<display-name>Coordinates</display-name>
<icon/>
<property-name>coords</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The language code of the resource designated
          by this hyperlink.
        </description>
<display-name>Language</display-name>
<icon/>
<property-name>hreflang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The relationship from the current document
          to the anchor specified by this hyperlink.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Relationship</display-name>
<icon/>
<property-name>rel</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A reverse link from the anchor specified
          by this hyperlink to the current document.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Reverse Link</display-name>
<icon/>
<property-name>rev</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The shape of the hot spot on the screen
          (for use in client-side image maps).  Valid
          values are:  default (entire region); rect
          (rectangular region); circle (circular region);
          and poly (polygonal region).
        </description>
<display-name>Shape</display-name>
<icon/>
<property-name>shape</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Name of a frame where the resource
          retrieved via this hyperlink is to
          be displayed.
        </description>
<display-name>Target Frame</display-name>
<icon/>
<property-name>target</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The content type of the resource designated
          by this hyperlink.
        </description>
<display-name>Content Type</display-name>
<icon/>
<property-name>type</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never
          receive focus or be included in a subsequent
          submit.
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>action</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          The identifier of the page fragment which should
          be brought into focus when the target page is
          rendered. The value of this attribute is appended
          to the end of target URL following a hash (#) mark.
          This notation is part of the standard URL syntax.
        </description>
<display-name>Fragment Identifier</display-name>
<icon/>
<property-name>fragment</property-name>
<property-class>java.lang.String</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.OutcomeTarget</base-component-type>
<renderer-type>javax.faces.Link</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents an HTML &lt;code&gt;input&lt;/code&gt; element of type "button" or image that
            may be used to link to a URL handled by the Faces Servlet resolved preemptively using
            the logical outcome defined by the &lt;code&gt;outcome&lt;/code&gt; property. The button behaves like
            a link, so the current form is not submitted when it is activated (the transitive of how
            the UICommandLink behaves like a submit button).</description>
<display-name>Outcome Target Button</display-name>
<component-type>javax.faces.HtmlOutcomeTargetButton</component-type>
<component-class>javax.faces.component.html.HtmlOutcomeTargetButton</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The logical outcome used to resolve a navigation case.
        </description>
<display-name>Outcome</display-name>
<icon/>
<property-name>outcome</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Whether to include page parameters in the target URI.
        </description>
<display-name>Include Page Parameters</display-name>
<icon/>
<property-name>includeViewParams</property-name>
<property-class>java.lang.Boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Return the URI fragment, as specified in RFC 2396.
        </description>
<display-name>HTML Fragment</display-name>
<icon/>
<property-name>fragment</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
        Alternate textual description of the
        element rendered by this component.
      </description>
<display-name>Alternate Text</display-name>
<icon/>
<property-name>alt</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>&lt;p&gt;
        Absolute or relative URL of the
        image to be displayed for this
        button.  If specified, this
        "input" element will be of type
        "image".  Otherwise, it will be
        of the type specified by the
        "type" property with a label
        specified by the "value"
        property.  &lt;span
        class="changed_added_2_0"&gt;Note
        that if the value of this
        attribute starts with "/", the
        rendered value for this
        attribute will be prefixed with
        the context-root for this
        application.&lt;/span&gt;
      &lt;/p&gt;</description>
<display-name>Image URL</display-name>
<icon/>
<property-name>image</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The identifier of the page fragment which should
          be brought into focus when the target page is
          rendered. The value of this attribute is appended
          to the end of target URL following a hash (#) mark.
          This notation is part of the standard URL syntax.
        </description>
<display-name>Fragment Identifier</display-name>
<icon/>
<property-name>fragment</property-name>
<property-class>java.lang.String</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.OutcomeTarget</base-component-type>
<renderer-type>javax.faces.Button</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Renders the component value as text, optionally wrapping in a
      &lt;code&gt;span&lt;/code&gt; element if I18N attributes, CSS styles or style
      classes are specified.&lt;/p&gt;</description>
<display-name>Output Text</display-name>
<component-type>javax.faces.HtmlOutputText</component-type>
<component-class>javax.faces.component.html.HtmlOutputText</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
        Flag indicating that characters that are sensitive
        in HTML and XML markup must be escaped.  This flag
        is set to "true" by default.
        </description>
<display-name>Escape Characters</display-name>
<icon/>
<property-name>escape</property-name>
<property-class>boolean</property-class>
<property-extension>
<default-value>true</default-value>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Output</base-component-type>
<renderer-type>javax.faces.Text</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Renders child components in a table, starting a new
      row after the specified number of columns.&lt;/p&gt;</description>
<display-name>Panel Grid</display-name>
<component-type>javax.faces.HtmlPanelGrid</component-type>
<component-class>javax.faces.component.html.HtmlPanelGrid</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Name or code of the background color for this table.
        </description>
<display-name>Background Color</display-name>
<icon/>
<property-name>bgcolor</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Width (in pixels) of the border to be drawn
          around this table.
        </description>
<display-name>Table Border</display-name>
<icon/>
<property-name>border</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Definition of how much space the user agent should
          leave between the border of each cell and its contents.
        </description>
<display-name>Cell Padding</display-name>
<icon/>
<property-name>cellpadding</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Definition of how much space the user agent should
          leave between the left side of the table and the
          leftmost column, the top of the table and the top of
          the top side of the topmost row, and so on for the
          right and bottom of the table.  It also specifies
          the amount of space to leave between cells.
        </description>
<display-name>Cell Spacing</display-name>
<icon/>
<property-name>cellspacing</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Comma-delimited list of CSS style classes that will be applied
          to the columns of this table.  A space separated list of
          classes may also be specified for any individual column.  If
          the number of elements in this list is less than the number of
          actual column children of the UIData, no "class"
          attribute is output for each column greater than the number of
          elements in the list.  If the number of elements in the list
          is greater than the number of actual column children of the
          UIData, the elements at the posisiton in the list
          after the last column are ignored.
        </description>
<display-name>Column CSS Classes</display-name>
<icon/>
<property-name>columnClasses</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any footer generated for this table.
        </description>
<display-name>Footer CSS Classes</display-name>
<icon/>
<property-name>footerClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Code specifying which sides of the frame surrounding
          this table will be visible.  Valid values are:
          none (no sides, default value); above (top side only);
          below (bottom side only); hsides (top and bottom sides
          only); vsides (right and left sides only); lhs (left
          hand side only); rhs (right hand side only); box
          (all four sides); and border (all four sides).
        </description>
<display-name>Table Frame</display-name>
<icon/>
<property-name>frame</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any caption generated for this table.
        </description>
<display-name>Caption CSS Classes</display-name>
<icon/>
<property-name>captionClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style(s) to be applied when this caption is rendered.
        </description>
<display-name>Caption CSS Styles</display-name>
<icon/>
<property-name>captionStyle</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any header generated for this table.
        </description>
<display-name>Header CSS Classes</display-name>
<icon/>
<property-name>headerClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Comma-delimited list of CSS style classes that will be applied
          to the rows of this table.  A space separated list of classes
          may also be specified for any individual row.  Thes styles are
          applied, in turn, to each row in the table.  For example, if
          the list has two elements, the first style class in the list
          is applied to the first row, the second to the second row, the
          first to the third row, the second to the fourth row, etc.  In
          other words, we keep iterating through the list until we reach
          the end, and then we start at the beginning again.
        </description>
<display-name>Row CSS Classes</display-name>
<icon/>
<property-name>rowClasses</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Code specifying which rules will appear between cells
          within this table.  Valid values are:  none (no rules,
          default value); groups (between row groups); rows
          (between rows only); cols (between columns only); and
          all (between all rows and columns).
        </description>
<display-name>Table Rules</display-name>
<icon/>
<property-name>rules</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Summary of this table's purpose and structure, for
          user agents rendering to non-visual media such as
          speech and Braille.
        </description>
<display-name>Table Summary</display-name>
<icon/>
<property-name>summary</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Width of the entire table, for visual user agents.
        </description>
<display-name>Table Width</display-name>
<icon/>
<property-name>width</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Comma separated list of row indices for which a new
          "tbody" element should be started (and any
          previously opened one should be ended).
        </description>
<display-name>Body Rows</display-name>
<icon/>
<property-name>bodyrows</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
        The number of columns to render before
        starting a new row.
        </description>
<display-name>Columns</display-name>
<icon/>
<property-name>columns</property-name>
<property-class>int</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.Panel</base-component-type>
<renderer-type>javax.faces.Grid</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Causes all child components of this component
      to be rendered.  This is useful in scenarios
      where a parent component is expecting a single
      component to be present, but the application
      wishes to render more than one.&lt;/p&gt;</description>
<display-name>Panel Group</display-name>
<component-type>javax.faces.HtmlPanelGroup</component-type>
<component-class>javax.faces.component.html.HtmlPanelGroup</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" property on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          The type of layout markup to use when rendering this group.
          If the value is "block" the renderer must produce an HTML
          "div" element.  Otherwise HTML "span" element must
          be produced.
        </description>
<display-name>Layout</display-name>
<icon/>
<property-name>layout</property-name>
<property-class>java.lang.String</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.Panel</base-component-type>
<renderer-type>javax.faces.Group</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;&lt;span
            class="changed_modified_2_0_rev_a"&gt;Represents&lt;/span&gt; an HTML
            &lt;code&gt;input&lt;/code&gt; element of type &lt;code&gt;checkbox&lt;/code&gt;.
            The checkbox will be rendered as checked, or not, based on
            the value of the &lt;code&gt;value&lt;/code&gt; property.&lt;/p&gt;</description>
<display-name>Checkbox</display-name>
<component-type>javax.faces.HtmlSelectBooleanCheckbox</component-type>
<component-class>javax.faces.component.html.HtmlSelectBooleanCheckbox</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
            Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
            For output components, this is the same as the "value" property.
            For input components, this is the most recently user-entered
            value, which will be pushed to the application data model during
            Update Model Values phase, if a value binding is present for the
            "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
            The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
            Flag indicating whether the user has selected this component.
            This is an alias for the "value" property.
        </description>
<display-name>Selected Flag</display-name>
<icon/>
<property-name>selected</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.SelectBoolean</base-component-type>
<renderer-type>javax.faces.Checkbox</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;&lt;span
            class="changed_modified_2_0_rev_a"&gt;Represents&lt;/span&gt; a
            multiple-selection component that is rendered as a set of
            HTML &lt;code&gt;input&lt;/code&gt; elements of type
            &lt;code&gt;checkbox&lt;/code&gt;.&lt;/p&gt;</description>
<display-name>Multi-Select Checkbox</display-name>
<component-type>javax.faces.HtmlSelectManyCheckbox</component-type>
<component-class>javax.faces.component.html.HtmlSelectManyCheckbox</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Array containing the selected values for this component.
          This is an alias for the "value" property.
        </description>
<display-name>Selected Values</display-name>
<icon/>
<property-name>selectedValues</property-name>
<property-class>java.lang.Object[]</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Width (in pixels) of the border to be drawn
          around the table containing the options list.
        </description>
<display-name>Table Border</display-name>
<icon/>
<property-name>border</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          CSS style class to apply to the rendered label
          on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<property-name>disabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style class to apply to the rendered label
          on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<property-name>enabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style class to apply to the rendered label
          on selected options.
        </description>
<display-name>Selected Label Class</display-name>
<icon/>
<property-name>selectedClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style class to apply to the rendered label
          on unselected options.
        </description>
<display-name>Unselected Label Class</display-name>
<icon/>
<property-name>unselectedClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Orientation of the options list to be created.
          Valid values are "pageDirection" (list is laid
          out vertically), or "lineDirection" (list is
          laid out horizontally).  If not specified, the
          default value is "lineDirection".
        </description>
<display-name>Layout</display-name>
<icon/>
<property-name>layout</property-name>
<property-class>java.lang.String</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.SelectMany</base-component-type>
<renderer-type>javax.faces.Checkbox</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents a multiple-selection component that is rendered
      as an HTML &lt;code&gt;select&lt;/code&gt; element, showing either all
      available options or the specified number of options.&lt;/p&gt;</description>
<display-name>Multi-Select Listbox</display-name>
<component-type>javax.faces.HtmlSelectManyListbox</component-type>
<component-class>javax.faces.component.html.HtmlSelectManyListbox</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Array containing the selected values for this component.
          This is an alias for the "value" property.
        </description>
<display-name>Selected Values</display-name>
<icon/>
<property-name>selectedValues</property-name>
<property-class>java.lang.Object[]</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
         CSS style class to apply to the rendered label
         on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<property-name>disabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
         CSS style class to apply to the rendered label
         on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<property-name>enabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
        Number of available options to be shown at all times.
        If not specified, all available options are shown.
        </description>
<display-name>Size</display-name>
<icon/>
<property-name>size</property-name>
<property-class>int</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.SelectMany</base-component-type>
<renderer-type>javax.faces.Listbox</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents a multiple-selection component that is rendered
      as an HTML &lt;code&gt;select&lt;/code&gt; element, showing a single
      available option at a time.&lt;/p&gt;</description>
<display-name>Multi-Select Menu</display-name>
<component-type>javax.faces.HtmlSelectManyMenu</component-type>
<component-class>javax.faces.component.html.HtmlSelectManyMenu</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Array containing the selected values for this component.
          This is an alias for the "value" property.
        </description>
<display-name>Selected Values</display-name>
<icon/>
<property-name>selectedValues</property-name>
<property-class>java.lang.Object[]</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
         CSS style class to apply to the rendered label
         on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<property-name>disabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
         CSS style class to apply to the rendered label
         on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<property-name>enabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.SelectMany</base-component-type>
<renderer-type>javax.faces.Menu</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents a single-selection component that is rendered
      as an HTML &lt;code&gt;select&lt;/code&gt; element, showing either all
      available options or the specified number of options.&lt;/p&gt;</description>
<display-name>Listbox</display-name>
<component-type>javax.faces.HtmlSelectOneListbox</component-type>
<component-class>javax.faces.component.html.HtmlSelectOneListbox</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
         CSS style class to apply to the rendered label
         on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<property-name>disabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
         CSS style class to apply to the rendered label
         on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<property-name>enabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
        Number of available options to be shown at all times.
        If not specified, all available options are shown.
        </description>
<display-name>Size</display-name>
<icon/>
<property-name>size</property-name>
<property-class>int</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.SelectOne</base-component-type>
<renderer-type>javax.faces.Listbox</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;Represents a single-selection component that is rendered
      as an HTML &lt;code&gt;select&lt;/code&gt; element, showing a single
      available option at a time.&lt;/p&gt;</description>
<display-name>Menu</display-name>
<component-type>javax.faces.HtmlSelectOneMenu</component-type>
<component-class>javax.faces.component.html.HtmlSelectOneMenu</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
         CSS style class to apply to the rendered label
         on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<property-name>disabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
         CSS style class to apply to the rendered label
         on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<property-name>enabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.SelectOne</base-component-type>
<renderer-type>javax.faces.Menu</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>&lt;p&gt;&lt;span
            class="changed_modified_2_0_rev_a"&gt;Represents&lt;/span&gt; a
            single-selection component that is rendered as a set of HTML
            &lt;code&gt;input&lt;/code&gt; elements of type
            &lt;code&gt;radio&lt;/code&gt;.&lt;/p&gt;</description>
<display-name>Radio</display-name>
<component-type>javax.faces.HtmlSelectOneRadio</component-type>
<component-class>javax.faces.component.html.HtmlSelectOneRadio</component-class>
<property>
<description>
          A mutable Map of the attributes associated with
          this component, keyed by attribute name.
        </description>
<display-name>Attributes Map</display-name>
<icon/>
<property-name>attributes</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The number of child components associated with
          this component.
        </description>
<display-name>Child Component Count</display-name>
<icon/>
<property-name>childCount</property-name>
<property-class>int</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable List of the child components associated with
          this component.
        </description>
<display-name>Child Component List</display-name>
<icon/>
<property-name>children</property-name>
<property-class>java.util.List</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          A mutable Map of the facets associated with
          this component, keyed by facet name.
        </description>
<display-name>Facets Map</display-name>
<icon/>
<property-name>facets</property-name>
<property-class>java.util.Map</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component family to which this component belongs.  This property
          is used to select an appropriate Renderer.
        </description>
<display-name>Component Family</display-name>
<icon/>
<property-name>family</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
        </description>
<display-name>Component Identifier</display-name>
<icon/>
<property-name>id</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          The parent component for this component.  On the root component
          in the component tree (which must be of type UIViewRoot), this
          property is null.
        </description>
<display-name>Parent Component</display-name>
<icon/>
<property-name>parent</property-name>
<property-class>javax.faces.component.UIComponent</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.  The default value for this property is true.
        </description>
<display-name>Rendered Flag</display-name>
<icon/>
<property-name>rendered</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Identifier used (in conjunction with the "family" property) to
          select an appropriate Renderer to encode and decode this component.
        </description>
<display-name>Renderer Type</display-name>
<icon/>
<property-name>rendererType</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not this component takes responsibility
          for rendering its own children.  This decision is normally delegated
          to the associated Renderer, if there is one.
        </description>
<display-name>Renders Children</display-name>
<icon/>
<property-name>rendersChildren</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
<read-only>true</read-only>
</property-extension>
</property>
<property>
<description>
          Converter instance registered with this component.
        </description>
<display-name>Converter</display-name>
<icon/>
<property-name>converter</property-name>
<property-class>javax.faces.convert.Converter</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          For output components, this is the same as the "value" property.
          For input components, this is the most recently user-entered
          value, which will be pushed to the application data model during
          Update Model Values phase, if a value binding is present for the
          "value" property.
        </description>
<display-name>Local Value</display-name>
<icon/>
<property-name>localValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          The current value of this component.
        </description>
<display-name>Value</display-name>
<icon/>
<property-name>value</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
<display-name>Local Value Set</display-name>
<icon/>
<property-name>localValueSet</property-name>
<property-class>boolean</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
<display-name>Required Flag</display-name>
<icon/>
<property-name>required</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
<display-name>Required Message</display-name>
<icon/>
<property-name>requiredMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
<display-name>Converter Message</display-name>
<icon/>
<property-name>converterMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
<display-name>Validator Message</display-name>
<icon/>
<property-name>validatorMessage</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
<display-name>Submitted Value</display-name>
<icon/>
<property-name>submittedValue</property-name>
<property-class>java.lang.Object</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
<display-name>Validator</display-name>
<icon/>
<property-name>validator</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
</property-extension>
</property>
<property>
<description>&lt;p&gt;

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter,
          with a return type of void, &lt;span class="changed_added_2_0"&gt;or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".&lt;/span&gt;

&lt;/p&gt;</description>
<display-name>Value Change Listener</display-name>
<icon/>
<property-name>valueChangeListener</property-name>
<property-class>javax.el.MethodExpression</property-class>
<property-extension>
<method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
<display-name>Immediate Action</display-name>
<icon/>
<property-name>immediate</property-name>
<property-class>boolean</property-class>
<property-extension>
<value-expression-enabled>true</value-expression-enabled>
</property-extension>
</property>
<property>
<description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
<display-name>Valid Flag</display-name>
<icon/>
<property-name>valid</property-name>
<property-class>valid</property-class>
<property-extension>
<tag-attribute>false</tag-attribute>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<property-name>accesskey</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<property-name>onblur</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<property-name>onfocus</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<property-name>tabindex</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<property-name>disabled</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<property-name>onselect</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<property-name>readonly</property-name>
<property-class>boolean</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<property-name>label</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<property-name>onchange</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</property-extension>
</property>
<property>
<description>
          Width (in pixels) of the border to be drawn
          around the table containing the options list.
        </description>
<display-name>Table Border</display-name>
<icon/>
<property-name>border</property-name>
<property-class>int</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          CSS style class to apply to the rendered label
          on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<property-name>disabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          CSS style class to apply to the rendered label
          on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<property-name>enabledClass</property-name>
<property-class>java.lang.String</property-class>
</property>
<property>
<description>
          Orientation of the options list to be created.
          Valid values are "pageDirection" (list is laid
          out vertically), or "lineDirection" (list is
          laid out horizontally).  If not specified, the
          default value is "lineDirection".
        </description>
<display-name>Layout</display-name>
<icon/>
<property-name>layout</property-name>
<property-class>java.lang.String</property-class>
</property>
<component-extension>
<base-component-type>javax.faces.SelectOne</base-component-type>
<renderer-type>javax.faces.Radio</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>NONE</description>
<display-name>doctype</display-name>
<component-type>javax.faces.OutputDoctype</component-type>
<component-class>javax.faces.component.html.HtmlDoctype</component-class>
<property>
<description>&lt;div class="changed_added_2_1"&gt;
           The root XML element
           &lt;/div&gt;</description>
<display-name>Root XML element</display-name>
<icon/>
<property-name>rootElement</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<required>true</required>
</property-extension>
</property>
<property>
<description>&lt;div class="changed_added_2_1"&gt;
           Will be output as the public part of the DOCTYPE
           &lt;/div&gt;</description>
<display-name>The public part of the DOCTYPE</display-name>
<icon/>
<property-name>public</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<required>false</required>
</property-extension>
</property>
<property>
<description>&lt;div class="changed_added_2_1"&gt;
           Will be output as the system part of the DOCTYPE
           &lt;/div&gt;</description>
<display-name>The system part of the DOCTYPE</display-name>
<icon/>
<property-name>system</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<required>false</required>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Output</base-component-type>
<renderer-type>javax.faces.Doctype</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>NONE</description>
<display-name>head</display-name>
<component-type>javax.faces.OutputHead</component-type>
<component-class>javax.faces.component.html.HtmlHead</component-class>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>&lt;div class="changed_added_2_1"&gt;
           An XML Namespace to be passed through to the rendered element
           &lt;/div&gt;</description>
<display-name>XML Namespace</display-name>
<icon/>
<property-name>xmlns</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Output</base-component-type>
<renderer-type>javax.faces.Head</renderer-type>
</component-extension>
</component>
<component  xmlns:xi="http://www.w3.org/2001/XInclude">
<description>NONE</description>
<display-name>body</display-name>
<component-type>javax.faces.OutputBody</component-type>
<component-class>javax.faces.component.html.HtmlBody</component-class>
<property>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<property-name>dir</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<property-name>lang</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>&lt;div class="changed_added_2_1"&gt;
           An XML Namespace to be passed through to the rendered element
           &lt;/div&gt;</description>
<display-name>XML Namespace</display-name>
<icon/>
<property-name>xmlns</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<property-name>style</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<property-name>styleClass</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<property-name>title</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<property-name>role</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<property-name>onclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<property-name>ondblclick</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<property-name>onmousedown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<property-name>onmouseup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<property-name>onmouseover</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<property-name>onmousemove</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<property-name>onmouseout</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<property-name>onkeypress</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<property-name>onkeydown</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<property-name>onkeyup</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description/>
<display-name/>
<icon/>
<property-name>onload</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<property>
<description/>
<display-name/>
<icon/>
<property-name>onunload</property-name>
<property-class>java.lang.String</property-class>
<property-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</property-extension>
</property>
<component-extension>
<base-component-type>javax.faces.Output</base-component-type>
<renderer-type>javax.faces.Body</renderer-type>
</component-extension>
</component>
<render-kit  xmlns:xi="http://www.w3.org/2001/XInclude">
<description> &lt;span class="changed_modified_2_2"&gt;The&lt;/span&gt;
            standard HTML RenderKit.  Please see the spec for additional
            details for the standard render-kit.

     &lt;div class="changed_added_2_0"&gt;
     &lt;p&gt;The following new renderers have been
     added in this release of the specification.  The default
     implementation of the spec must not expose these renderers to JSP
     based views.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;javax.faces.Output&lt;/dt&gt;

&lt;dd&gt;javax.faces.Body
&lt;/dd&gt;

&lt;dd&gt;javax.faces.Head
&lt;/dd&gt;

&lt;dd&gt;javax.faces.resource.Script
&lt;/dd&gt;

&lt;dd&gt;javax.faces.resource.Stylesheet
&lt;/dd&gt;

&lt;dd&gt;javax.faces.Composite
&lt;/dd&gt;


&lt;/dl&gt;

     &lt;/div&gt;

     &lt;p&gt;&lt;a name="general_decoding"&gt;General&lt;/a&gt; notes on decoding&lt;/p&gt;

     &lt;ul&gt;

     &lt;p&gt;Only Renderers for components which cause data to sent to the
     server on a page submit need to implement decode behavior.  In
     practical terms, this means Renderers for components that implement
     from &lt;code&gt;javax.faces.component.EditableValueHolder&lt;/code&gt; or
     &lt;code&gt;javax.faces.component.ActionSource&lt;/code&gt; or Renderers for
     &lt;code&gt;javax.faces.component.UIForm&lt;/code&gt; components.  Renderers
     for components that do not send data to the server on page submit
     may choose to accept the no-op decode behavior of the
     &lt;code&gt;javax.faces.render.Renderer&lt;/code&gt; abstract class.  In the
     Renderer descriptions that follow, the omission of a Decode
     Behavior section indicates that this Renderer does no decoding.&lt;/p&gt;

     &lt;p&gt;If a Renderer chooses to implement decode behavior, it must
     consult the "disabled" and "readonly" attributes of the component
     to be rendered, if the value of either attribute is equal to,
     ignoring case, the string "true" (without the quotes) the decode
     method must take no action and return immediately.&lt;/p&gt;

     &lt;div class="changed_added_2_0"&gt;
     &lt;p&gt;If the component associated with the Renderer implements the
     &lt;code&gt;javax.faces.component.behavior.ClientBehaviorHolder&lt;/code&gt; interface,
     process &lt;code&gt;javax.faces.component.behavior.ClientBehavior&lt;/code&gt;s as follows:
      &lt;ul&gt;
      &lt;li&gt;Determine if there are &lt;code&gt;javax.faces.component.behavior.ClientBehavior&lt;/code&gt;s
      associated with this component by calling the implementation of
      &lt;code&gt;javax.faces.component.behavior.ClientBehaviorHolder.getClientBehaviors&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;If there are &lt;code&gt;client behaviors&lt;/code&gt;, determine the
      client behavior event name from the request parameter:
      &lt;code&gt;javax.faces.behavior.event&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;If that request parameter exists, get the &lt;code&gt;List&lt;/code&gt; of
      &lt;code&gt;javax.faces.component.behavior.ClientBehavior&lt;/code&gt;s for the
      behavior event name from the &lt;code&gt;Map&lt;/code&gt; returned from
      &lt;code&gt;javax.faces.component.behavior.ClientBehaviorHolder.getClientBehaviors&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;If there are &lt;code&gt;client behaviors&lt;/code&gt; for the &lt;code&gt;behavior event name&lt;/code&gt;,
      determine the behavior source name from the request parameter:
      &lt;code&gt;javax.faces.source&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;If the request parameter exists, and its value is the same as this
      component's &lt;code&gt;clientId&lt;/code&gt;, iterate over the &lt;code&gt;List&lt;/code&gt; of
      &lt;code&gt;javax.faces.component.behavior.ClientBehavior&lt;/code&gt;s and call the
      &lt;code&gt;decode()&lt;/code&gt; method for each one.&lt;/li&gt;
      &lt;/ul&gt;
      Behavior decoding is applicable to components that are "readonly", but it is
      not applicable to components that are "disabled".&lt;/p&gt;
      &lt;/div&gt;

     &lt;p&gt;

     &lt;/ul&gt;

     &lt;p&gt;&lt;a name="general_encoding"&gt;General&lt;/a&gt; notes on encoding&lt;/p&gt;

     &lt;ul&gt;

     &lt;p&gt;If the value of the component's "rendered" property is false,
     the component, and its children must not be rendered.&lt;/p&gt;

     &lt;p class="changed_added_2_2"&gt;For all renderers that are responsible
     for rendering their own children, the renderer will decide if the
     end tag is required or not based on the presence or absence of
     children for the component.&lt;/p&gt;

     &lt;p&gt;General notes regarding the &lt;code&gt;id&lt;/code&gt; attribute&lt;/p&gt;

     &lt;ul&gt;

     &lt;p&gt;All components, and therefore all tags for those components
     support the &lt;code&gt;id&lt;/code&gt; attribute.  This attribute is optional.
     If not present its value is autogenerated by the implementation and
     used for internal purposes only.  If present, an &lt;code&gt;id&lt;/code&gt;
     attribute must not start with the &lt;code&gt;String&lt;/code&gt; listed as the
     value of the constant &lt;code&gt;UIViewRoot.UNIQUE_ID_PREFIX&lt;/code&gt;, and
     it must be unique within the scope of the nearest component that is
     a &lt;code&gt;NamingContainer&lt;/code&gt;.  &lt;/p&gt;

     &lt;p&gt;All renderers must take the following action regarding the
     &lt;code&gt;id&lt;/code&gt; attribute: If the value returned from
     &lt;code&gt;component.getId()&lt;/code&gt; is non-&lt;code&gt;null&lt;/code&gt; and does
     not start with &lt;code&gt;UIViewRoot.UNIQUE_ID_PREFIX&lt;/code&gt;, call
     &lt;code&gt;component.getClientId()&lt;/code&gt; and render the result as the
     value of the &lt;code&gt;id&lt;/code&gt; attribute in the markup for the
     component.  See the javadoc for
     &lt;code&gt;component.getClientId()&lt;/code&gt; for details, particularly note
     that the Renderer has a chance to modify the client id before it is
     rendered. If the component doesn't generate any markup elements,
     include the &lt;code&gt;id&lt;/code&gt; attribte on a "span" element that
     encloses the content for the component.&lt;/p&gt;

    &lt;p&gt;In addition to any action already specified in the renderers, all
    renderers for &lt;code&gt;UIInput&lt;/code&gt; components must take the
    following action regarding the &lt;code&gt;id&lt;/code&gt; attribute: Call
    &lt;code&gt;component.getClientId()&lt;/code&gt; and render the result as the
    value of the &lt;code&gt;name&lt;/code&gt; attribute.  This may cause some
    renderers to have "id" and "name" attributes that have exactly the
    same value.&lt;/p&gt;

    &lt;/ul&gt;

     &lt;p&gt;General notes regarding the rendering of JavaScript in the
     standard components.&lt;/p&gt;

     &lt;ul&gt;

       &lt;p&gt;The intent of the standard renderkit is to specify the minimal
       Renderers a JSF implementation must provide.  As such, it is the
       baseline for building JSF applications that are maximally
       portable across JSF implementations and user agents.  Therefore,
       the use of JavaScript must be minimized as not all browsers
       support JavaScript, nor do all users enable JavaScript support in
       their user agents.&lt;/p&gt;

       &lt;p&gt;Compliant implementations must only generate JavaScript in the
       &lt;a href="javax.faces.Commandjavax.faces.Link.html"&gt;
       &lt;code&gt;javax.faces.Link&lt;/code&gt;&lt;/a&gt; and &lt;a
       href="javax.faces.Commandjavax.faces.Button.html"&gt;&lt;code&gt;javax.faces.Button&lt;/code&gt;&lt;/a&gt;
       Renderers for the &lt;code&gt;javax.faces.Command&lt;/code&gt;&lt;/a&gt; component.
       The generation of JavaScript in any other Renderer in the
       HTML_BASIC renderkit is not permitted.  However, any JavaScript
       code provided by the user as the value of an &lt;code&gt;ignored-by-renderer&lt;/code&gt; 
       attribute, such as "onmouseover", is excluded from this restriction.&lt;/p&gt;

     &lt;/ul&gt;

     &lt;div class="changed_added_2_0"&gt;
     &lt;p&gt;&lt;a name="general_behavior_encoding"&gt;General&lt;/a&gt; notes regarding the rendering of component &lt;code&gt;Client Behaviors&lt;/code&gt;.&lt;/p&gt;

     &lt;ul&gt;

       &lt;p&gt;Components that implement the &lt;code&gt;javax.faces.component.behavior.ClientBehaviorHolder&lt;/code&gt;
       interface are eligable to have &lt;code&gt;ClientBehavior&lt;/code&gt; instances attached to them. The standard
       renderers are responsible for inserting the scripts produced by client behaviors into the component's
       rendered content.  Components may obtain script from multiple sources.  Event handler scripts may be specified 
       by page authors, scripts may be produced by client behaviors and renderers may produce ther own scripts.
       When multiple scripts are present, the scripts must be chained together in this order:
       &lt;ul&gt;
       &lt;li&gt;User specified event handler scripts&lt;/li&gt;
       &lt;li&gt;client behavior scripts&lt;/li&gt;
       &lt;li&gt;renderer specific scripts&lt;/li&gt;
       &lt;/ul&gt;
       If any of the scripts in the chain returns &lt;code&gt;false&lt;/code&gt;, subsequent script must not be executed.
       The specification provides a utility function &lt;code&gt;jsf.util.chain&lt;/code&gt; to handle this capability.  If there
       are &lt;code&gt;UIParameter&lt;/code&gt; children the parameter names and values must be passed into the client behavior
       getScript method via the &lt;code&gt;ClientBehaviorContext&lt;/code&gt;.&lt;/p&gt; 
         
     &lt;/ul&gt;
     &lt;/div&gt;

     &lt;div class="changed_added_2_2"&gt;
     &lt;p&gt;&lt;a name="general_behavior_encoding"&gt;Rendering&lt;/a&gt; Pass Through Attributes.&lt;/p&gt;

     &lt;ul&gt;

       &lt;p&gt;The set of attributes written for a component is determined by
       its &lt;code&gt;Renderer&lt;/code&gt; and collectively are known as
       &lt;em&gt;renderer specific attributes&lt;/em&gt;.  In addition to
       &lt;em&gt;renderer specific attributes&lt;/em&gt;, &lt;em&gt;pass through
       attributes&lt;/em&gt; are also possible.  &lt;em&gt;Pass through
       attributes&lt;/em&gt; are declared as markup attributes on components
       in the VDL view and are stored in the &lt;code&gt;Map&lt;/code&gt; returned
       by &lt;code&gt;UIComponent.getPassThroughAttributes()&lt;/code&gt;.  When
       rendering a &lt;code&gt;UIComponent&lt;/code&gt; instance,
       &lt;code&gt;Renderer&lt;/code&gt;s call
       &lt;code&gt;ResponseWriter.startElement()&lt;/code&gt;, passing in the
       &lt;code&gt;UIComponent&lt;/code&gt; instance.  The
       &lt;code&gt;ResponseWriter&lt;/code&gt; must ensure that any &lt;em&gt;pass through
       attributes&lt;/em&gt; are rendered on the outer-most markup element for
       the component.  If there is a &lt;em&gt;pass through attribute&lt;/em&gt;
       with the same name as a &lt;em&gt;renderer specific attribute&lt;/em&gt;, the
       &lt;em&gt;pass through attribute&lt;/em&gt; takes precedence.  &lt;em&gt;Pass
       through attributes&lt;/em&gt; are rendered as if they were passed to
       &lt;code&gt;ResponseWriter.writeURIAttribute()&lt;/code&gt;.&lt;/p&gt;


     &lt;/ul&gt;
     &lt;/div&gt;


&lt;/ul&gt;</description>
<renderer>
<description>&lt;p&gt;&lt;span class="changed_modified_2_0
            changed_modified_2_0_rev_a
            changed_modified_2_2"&gt;Renders&lt;/span&gt; an HTML "input"
            element.&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the "requestParameterMap"
      property of the &lt;code&gt;ExternalContext&lt;/code&gt;.  If the value in the
      &lt;code&gt;Map&lt;/code&gt; for the value of the "clientId" property of the
      component is &lt;code&gt;null&lt;/code&gt;, create a String by concatenating
      the value of the "clientId" property of the component with the
      String ".x" (without the quotes).  Create another String in the
      same manner, but concatenate ".y" (without the quotes).  If
      &lt;code&gt;null&lt;/code&gt; is the value in the &lt;code&gt;Map&lt;/code&gt; for both
      Strings, return from &lt;code&gt;decode()&lt;/code&gt;.  If the value in the
      &lt;code&gt;Map&lt;/code&gt; for the value of the "clientId" property of the
      component is not &lt;code&gt;null&lt;/code&gt;, get the value of the "type"
      attribute, and convert it to lower case.  If the result is equal
      to the String "reset" (without the quotes), return from
      &lt;code&gt;decode()&lt;/code&gt;.  Otherwise, create a
      &lt;code&gt;javax.faces.event.ActionEvent&lt;/code&gt; around the component,
      and pass it to the &lt;code&gt;queueEvent()&lt;/code&gt; method of the
      component, which must be an instance of
      &lt;code&gt;UICommand&lt;/code&gt;.&lt;/p&gt;

      &lt;/ul&gt;



      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Render the clientId of the component as the value of the "name"
      attribute.  Render the current value of the component as the value
      of the "value" attribute. If "image" attribute is specified render
      it as the value of the "src" attribute after passing it to the
      &lt;code&gt;getResourceURL()&lt;/code&gt; method of the
      &lt;code&gt;ViewHandler&lt;/code&gt; for this application, and passing the
      result through the &lt;code&gt;encodeResourceURL()&lt;/code&gt; method of the
      &lt;code&gt;ExternalContext&lt;/code&gt;.  &lt;span
      class="changed_added_2_0"&gt;Note that calling
      &lt;code&gt;getResourceURL()&lt;/code&gt; will prefix the context-root of the
      current application if the value of the "src" attribute starts
      with "/".&lt;/span&gt; When handling the "image" attribute, the value
      must not be escaped.  For example, &lt;code&gt;&amp;&lt;/code&gt; must not be
      turned into &lt;code&gt;&amp;amp;amp;&lt;/code&gt;.  If the "styleClass" attribute
      is specified, render its value as the value of the "class"
      attribute.  If the user has specified an "onclick" attribute,
      append that JavaScript to any existing JavaScript &lt;span
      class="changed_modified_2_0_rev_a"&gt;already being output by the
      implementation before rendering.&lt;/span&gt;&lt;/p&gt;

      &lt;p class="changed_added_2_0"&gt;If the component being rendered by
      this renderer has any &lt;code&gt;UIParameter&lt;/code&gt; children, each one
      of them must be rendered using the renderer for component-family:
      "javax.faces.Input" and renderer-type: "javax.faces.Hidden".  For
      discussion, this is called the hiddenRenderer.  A component with
      component-type "javax.faces.Input" must be created for local use
      in rendering each &lt;code&gt;UIParameter&lt;/code&gt; child.  The "id"
      property of the temporary component must be set to the "name" of
      the &lt;code&gt;UIParameter&lt;/code&gt;.  The "value" property of the
      temporary component must be set to the "value" of the
      &lt;code&gt;UIParameter&lt;/code&gt;.  For each &lt;code&gt;UIParameter&lt;/code&gt;
      child, the hiddenRenderer must have its
      &lt;code&gt;encodeBegin()&lt;/code&gt;, &lt;code&gt;encodeChildren()&lt;/code&gt;, and
      &lt;code&gt;encodeEnd()&lt;/code&gt; methods called, in order, passing the
      temporary component as the second argument.&lt;/p&gt;

      &lt;div class="changed_added_2_2"&gt;

        &lt;p&gt;Because this renderer is responsible for rendering its own
        children, the renderer will decide if the end tag is required or
        not based on the presence or absence of children for the
        component.&lt;/p&gt;

        &lt;p&gt;To support entering flows that are defined by both a defining
        document id and a flow id, add a component attribute to this
        component whose name is given by the value of the symbolic
        constant
        &lt;code&gt;javax.faces.event.ActionListener.TO_FLOW_DOCUMENT_ID_ATTR_NAME&lt;/code&gt;,
        and whose value is the defining document id.  For example, when
        using this component in a facelet page, the following markup
        would cause such an attribute to be added.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h:commandButton id="start_a" value="enter flow-a" action="flow-a"&amp;gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;f:attribute name="to-flow-document-id" value="unique"/&amp;gt;&lt;br /&gt;
&amp;lt;/h:commandButton&amp;gt;&lt;br /&gt;
&lt;/code&gt;&lt;/pre&gt;

      &lt;/div&gt;

      &lt;/ul&gt;
            </description>
<component-family>javax.faces.Command</component-family>
<renderer-type>javax.faces.Button</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.ButtonRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
        Alternate textual description of the
        element rendered by this component.
      </description>
<display-name>Alternate Text</display-name>
<icon/>
<attribute-name>alt</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;p&gt;
        Absolute or relative URL of the
        image to be displayed for this
        button.  If specified, this
        "input" element will be of type
        "image".  Otherwise, it will be
        of the type specified by the
        "type" property with a label
        specified by the "value"
        property.  &lt;span
        class="changed_added_2_0"&gt;Note
        that if the value of this
        attribute starts with "/", the
        rendered value for this
        attribute will be prefixed with
        the context-root for this
        application.&lt;/span&gt;
      &lt;/p&gt;</description>
<display-name>Image URL</display-name>
<icon/>
<attribute-name>image</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>action</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
         Type of button to create.  Valid values are "submit", "button",
         and "reset".  If not specified, or not a valid value, the default
         value is "submit".
      </description>
<display-name>Button Type</display-name>
<icon/>
<attribute-name>type</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<default-value>"submit"</default-value>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;&lt;span class="changed_modified_2_0
            changed_modified_2_0_rev_a changed_modified_2_2"&gt;Render&lt;/span&gt; an HTML "a" anchor
            element that acts like a form submit button when
            clicked.&lt;/p&gt;

      &lt;p&gt;General Behaviour&lt;/p&gt;

      &lt;p&gt;Both the encode and decode behavior require the ability to get
      the id/name for a hidden field, &lt;span
      class="changed_added_2_0"&gt;which may be rendered in markup or which
      may be programmatically added via client DOM manipulation&lt;/span&gt;,
      whose value is set by the JavaScript form submit.  This name must
      be constructed as follows:&lt;/p&gt;

      &lt;ul&gt;

      &lt;li&gt;&lt;p&gt;Get the clientId for the form of which this component is a
      child.&lt;/p&gt;&lt;/li&gt;

      &lt;li&gt;&lt;p&gt;Append
      &lt;code&gt;NamingContainer.SEPARATOR_CHAR&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

      &lt;li&gt;&lt;p&gt;Append a constant string that is the same for all command
      link components in the tree.&lt;/p&gt;&lt;/li&gt;

      &lt;/ul&gt;

      &lt;p&gt;In the following text, this String is called
      hiddenFieldName.&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Obtain the "clientId" property of the component.  Obtain the
      &lt;code&gt;Map&lt;/code&gt; from the "requestParameterMap" property of the
      &lt;code&gt;ExternalContext&lt;/code&gt;.  Derive hiddenFieldName as above.
      Get the entry in the &lt;code&gt;Map&lt;/code&gt; under the key that is the
      hiddenFieldName.  If the there is no entry, or the entry is the
      empty String, or the entry is not equal to the value of the
      "clientId" property, return immediately.  If there is an entry,
      and its value is equal to the value of the "clientId" property,
      create a new &lt;code&gt;javax.faces.event.ActionEvent&lt;/code&gt; instance
      around the component and call &lt;code&gt;queueActionEvent()&lt;/code&gt; on
      the component, passing the event.&lt;/p&gt;

      &lt;/ul&gt;


      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;If the value of the &lt;code&gt;disabled&lt;/code&gt; attribute is
      &lt;code&gt;true&lt;/code&gt;, render a span element.  Render all the
      ignored-by-renderer attributes and the &lt;code&gt;target&lt;/code&gt;
      attribute as ignored-by-renderer attributes on the span, even
      though the &lt;code&gt;target&lt;/code&gt; attribute will have no effect on a
      span.  Render the current value of the component as the content of
      the span.  Return.&lt;/p&gt;

      &lt;p&gt;If the &lt;code&gt;disabled&lt;/code&gt; attribute is not present, or its
      value is &lt;code&gt;false&lt;/code&gt;, render an HTML &lt;code&gt;a&lt;/code&gt;
      element.  Render "#" as the value of the "href" attribute. Render
      the current value of the component as the link text if it is
      specified. Render JavaScript that is functionally equivalent to
      the following as the value of the "onclick" attribute:&lt;/p&gt;

      &lt;p&gt;&lt;code&gt;document.forms['CLIENT_ID']['hiddenFieldName'].value='CLIENT_ID';
      document.forms['CLIENT_ID']['PARAM1_NAME'].value='PARAM1_VALUE';
      document.forms['CLIENT_ID']['PARAM2_NAME'].value='PARAM2_VALUE';
      document.forms['CLIENT_ID'].submit(); return false;&lt;/code&gt;&lt;/p&gt;

      &lt;p&gt;where hiddenFieldName is as described above, CLIENT_ID is the
      clientId of the UICommand component, PARAM*_NAME and PARAM*_VALUE
      are the names and values, respectively, of any nested UIParameter
      children.  The name and the value must be URLEncoded.  &lt;span
      class="changed_modified_2_0_rev_a"&gt;Note that the required url
      encoding is handled by
      &lt;code&gt;ResponseWrter.writeAttribute()&lt;/code&gt;.&lt;/span&gt; If an
      "onclick" attribute was specified by the user, render this
      JavaScript in a function, and render the user's JavaScript in a
      function.  Render both functions in a choice function as
      follows:&lt;/p&gt;

      &lt;p&gt;&lt;code&gt;var a=function(){#USER_FUNCTION#};
      var b=function(){#JSF_FUNCTION#};
      return (a()==false) ? false : b();&lt;/code&gt;&lt;/p&gt;
      
      &lt;p&gt;where #USER_FUNCTION# is the user's JavaScript and
      #JSF_FUNCTION# is the JavaScript rendered by JSF.  The choice
      function should operate such that if the user's JavaScript returns
      true, then the rendered JavaScript will also execute.&lt;/p&gt;
 
      &lt;p&gt;If the "styleClass" attribute is specified, render its value as
      the value of the "class" attribute.  Render any non-UIParameter
      output children as normal inside of the "a" element.  These will
      appear as the link text.  Allow the form renderer to output a
      single "input" element (for the entire page, regardless of how
      many command link components are in the page) of "type" "hidden"
      whose "name" is the value of hiddenFieldName, and which must not
      have a "value" attribute.  Multiple occurrences of command link
      components in the tree should not cause multiple hiddenFieldName
      hidden fields.  Allow the form renderer to output an "input"
      element of "type" "hidden" for each of the nested UIParameter
      children, taking the name property (but not the value) from each
      one in turn.  If the "disabled" attribute is specified, do not
      render the HTML "a" anchor element or its "href" attribute.
      Instead, render a "span" element.  If the "styleClass" attribute
      is specified, render its value as the value of the "class"
      attribute on the "span".  Render any ignored-by-renderer attributes on
      the "span".  The content of the span element comes from the value
      of the component or its children as specified above.&lt;/p&gt;

      &lt;p&gt;If the user specified a &lt;code&gt;target&lt;/code&gt; attribute, its
      value must be set using javascript since the &lt;code&gt;onclick&lt;/code&gt;
      handler will prevent the target attribute from being generated.
      This must be accomplished using JavaScript that is equivalent to
      the following.&lt;/p&gt;

      &lt;p&gt;&lt;code&gt;document.forms['CLIENT_ID'].target='TARGET';&lt;/code&gt;&lt;/p&gt;

      &lt;p&gt;Where TARGET is the value of the target attribute on the JSP
      tag.&lt;/p&gt;

      &lt;/ul&gt;

&lt;div class="changed_added_2_2"&gt;

        &lt;p&gt;To support entering flows that are defined by both a defining
        document id and a flow id, add a component attribute to this
        component whose name is given by the value of the symbolic
        constant
        &lt;code&gt;javax.faces.event.ActionListener.TO_FLOW_DOCUMENT_ID_ATTR_NAME&lt;/code&gt;,
        and whose value is the defining document id.  For example, when
        using this component in a facelet page, the following markup
        would cause such an attribute to be added.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h:commandLink id="start_a" value="enter flow-a" action="flow-a"&amp;gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;f:attribute name="to-flow-document-id" value="unique"/&amp;gt;&lt;br /&gt;
&amp;lt;/h:commandLink&amp;gt;&lt;br /&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
<component-family>javax.faces.Command</component-family>
<renderer-type>javax.faces.Link</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.CommandLinkRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The character encoding of the resource designated
          by this hyperlink.
        </description>
<display-name>Character Set</display-name>
<icon/>
<attribute-name>charset</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The position and shape of the hot spot on the screen
          (for use in client-side image maps).
        </description>
<display-name>Coordinates</display-name>
<icon/>
<attribute-name>coords</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The language code of the resource designated
          by this hyperlink.
        </description>
<display-name>Language</display-name>
<icon/>
<attribute-name>hreflang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The relationship from the current document
          to the anchor specified by this hyperlink.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Relationship</display-name>
<icon/>
<attribute-name>rel</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A reverse link from the anchor specified
          by this hyperlink to the current document.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Reverse Link</display-name>
<icon/>
<attribute-name>rev</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The shape of the hot spot on the screen
          (for use in client-side image maps).  Valid
          values are:  default (entire region); rect
          (rectangular region); circle (circular region);
          and poly (polygonal region).
        </description>
<display-name>Shape</display-name>
<icon/>
<attribute-name>shape</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Name of a frame where the resource
          retrieved via this hyperlink is to
          be displayed.
        </description>
<display-name>Target Frame</display-name>
<icon/>
<attribute-name>target</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The content type of the resource designated
          by this hyperlink.
        </description>
<display-name>Content Type</display-name>
<icon/>
<attribute-name>type</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never
          receive focus or be included in a subsequent
          submit.
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>action</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
<body-tag>true</body-tag>
</renderer-extension>
</renderer>
<renderer>
<description>

      &lt;p&gt;&lt;span class="changed_modified_2_0_rev_a"&gt;Renders&lt;/span&gt; an HTML
      "table" element compliant with the HTML 401 specification.  Render
      the "caption" facet, if present, inside a "caption" element
      immediately below the "table" element.  If the "captionClass"
      attribute is specified, render its value as the value of the
      "class" attribute on the "caption" element.  If the "captionStyle"
      attribute is specified, render its value as the value of the
      "style" attribute on the "caption" element.&lt;/p&gt; &lt;p&gt;Please consult
      the javadoc for &lt;code&gt;UIData&lt;/code&gt; to supplement this
      specification.  If the "styleClass" attribute is specified, render
      its value as the value of the "class" attribute on the "table"
      element.  Any ignored-by-renderer attributes are also rendered on the
      "table" element.  &lt;/p&gt;

     &lt;p&gt;Column Groups&lt;/p&gt;

     &lt;ul&gt;

       &lt;p&gt;If the &lt;code&gt;UIData&lt;/code&gt; component has a "colgroups" facet,
       render its contents.  Consistent with the rules of facets in
       general, this facet must have only one child.  In general, this
       will be a &lt;code&gt;panel group&lt;/code&gt; component that will contain
       &lt;code&gt;colgroup&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt; elements per the HTML
       Table specification.  Use of column grouping can improve
       accessibility.  This facet must be rendered before the table
       header and footer.&lt;/p&gt;

     &lt;/ul&gt;

     &lt;p&gt;Rendering the header&lt;/p&gt;

     &lt;ul&gt;

      &lt;p&gt;If the &lt;code&gt;UIData&lt;/code&gt; component has a "header" facet, or
      any of the child &lt;code&gt;UIColumn&lt;/code&gt; components has a "header"
      facet, render a "thead" element.  If the &lt;code&gt;UIData&lt;/code&gt;
      component has a "header" facet, encode its contents inside of "tr"
      and "th" elements, respectively.  Output the value of the
      "headerClass" attribute of the &lt;code&gt;UIData&lt;/code&gt; component, if
      present, as the value of the "class" attribute on the "th".
      Output the number of child &lt;code&gt;UIColumn&lt;/code&gt; components of the
      &lt;code&gt;UIData&lt;/code&gt; component as the value of the "colspan"
      attribute on the "th".  Output "colgroup" as the value of the
      "scope" attribute on the "th" element. &lt;/p&gt;

      &lt;p&gt;If any of the child &lt;code&gt;UIColumn&lt;/code&gt; components has a
      "header" facet render a "tr" element.  For each
      &lt;code&gt;UIColumn&lt;/code&gt; that actually has a "header" facet, render
      it inside of a "th" element.  Columns that don't have a "header"
      facet cause an empty "th" element to be rendered.  Output the 
      value of the "headerClass" attribute of the &lt;code&gt;UIColumn&lt;/code&gt;
      component, if present, as the value of the "class" attribute on
      the "th".  If the "headerClass" attribute of the &lt;code&gt;UIColumn&lt;/code&gt;
      component is not present, output the value of the "headerClass" 
      attribute of the &lt;code&gt;UIData&lt;/code&gt; component, if present, as
      the value of the "class" attribute on the "th".  Output "col" as
      the value of the "scope" attribute on the "th" element.
      &lt;/p&gt;

      &lt;p&gt;Close out the "thead" element.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Rendering the footer&lt;/p&gt;

      &lt;ul&gt;

      &lt;div class="changed_modified_2_0_rev_a"&gt;
      &lt;p&gt;If the &lt;code&gt;UIData&lt;/code&gt; component has a "footer" facet, or
      any of the child &lt;code&gt;UIColumn&lt;/code&gt; components has a "footer"
      facet, render a "tfoot" element.  If the &lt;code&gt;UIData&lt;/code&gt;
      component has "footer" facets, encode the contents inside of a "tr"
      element. &lt;/p&gt;

      &lt;p&gt;If any of the child &lt;code&gt;UIColumn&lt;/code&gt; components has a
      "footer" facet render a "td" element.  For each 
      &lt;code&gt;UIColumn&lt;/code&gt; that actually has a "footer" facet, render
      it inside of a "td" element.  Columns that don't have a "footer"
      facet cause an empty "td" element to be rendered.  Output the
      value of the "footerClass" attribute of the &lt;code&gt;UIColumn&lt;/code&gt;
      component, if present, as the value of the "class" attribute on
      the "td".  If the "footerClass" attribute of the &lt;code&gt;UIColumn&lt;/code&gt;
      component is not present, output the value of the "footerClass"
      attribute of the &lt;code&gt;UIData&lt;/code&gt; component, if present, as
      the value of the "class" attribute on the "td".&lt;/p&gt;

      &lt;p&gt;If the &lt;code&gt;UIData&lt;/code&gt; component has a "footer" facet,
      encode its contents inside of "tr" and "td" elements, respectively.
      Output the value of the "footerClass" attribute of the 
      &lt;code&gt;UIData&lt;/code&gt; component, if present, as the value of the 
      "class" attribute on the "td".  Output the number of child 
      &lt;code&gt;UIColumn&lt;/code&gt; components of the &lt;code&gt;UIData&lt;/code&gt; 
      component as the value of the "colspan" attribute on the "td". &lt;/p&gt;

      &lt;p&gt;Close out the "tfoot" element.&lt;/p&gt;
      &lt;/div&gt;

      &lt;/ul&gt;

      &lt;p&gt;Rendering the table body&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Look at the value of the "bodyrows" attribute.  If present,
      this must be a comma separated list of integers.  Each entry in
      this list is the row index of the row before which a "tbody"
      element should be rendered.&lt;/p&gt;

      &lt;p&gt;If there was no "bodyrows" attribute, or it was empty, render a
      "tbody" element.  Keep track of the result of the "rows" property
      on the &lt;code&gt;UIData&lt;/code&gt; component.  Keep track of the number of
      rows we have rendered so far.  Iterate through the rows.  Set the
      "rowIndex" property of the &lt;code&gt;UIData&lt;/code&gt; component to be
      correct as we iterate through the rows.  Stop rendering children
      and close out the "tbody" element if the "rowAvailable" property
      of the &lt;code&gt;UIData&lt;/code&gt; returned false.  If the current row
      index is contained in the "bodyrows" attribute, check if a "tbody"
      start element was rendered that needs to be closed, and if so,
      close the "tbody" element.  Then render a "tbody" element start.
      Otherwise, do not render a "tbody" element.&lt;/p&gt;

      &lt;p&gt;Output a "tr" element.  Output the value of the "rowClasses"
      per the attribute description below.  For each
      &lt;code&gt;UIColumn&lt;/code&gt; child, if the column component has a
      "rowHeader" attribute with a value of "true", output a "th"
      element with a "scope" attribute with the value of "row".
      Otherwise, if the column component has no "rowHeader" attribute,
      or its value is false, output a "td" element.  In either case
      attach the value of the "columnClasses" attribute of the
      &lt;code&gt;UIData&lt;/code&gt; component per the attribute description below.
      Recursively encode each child of each &lt;code&gt;UIColumn&lt;/code&gt; child.
      Close out the "td" or "th" element.  When done with the row, close
      out the "tr" element.  When done with all the rows, close out the
      "tbody" element.&lt;/p&gt;

      &lt;/ul&gt;

     &lt;p&gt;When done rendering all the rows, set the "rowIndex" property of
     the &lt;code&gt;UIData&lt;/code&gt; to -1, and close out the "table"
     element.&lt;/p&gt;
            </description>
<component-family>javax.faces.Data</component-family>
<renderer-type>javax.faces.Table</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.TableRenderer
    </renderer-class>
<facet>
<facet-name>caption</facet-name>
</facet>
<facet>
<facet-name>header</facet-name>
</facet>
<facet>
<facet-name>footer</facet-name>
</facet>
<facet>
<facet-name>colgroups</facet-name>
</facet>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Name or code of the background color for this table.
        </description>
<display-name>Background Color</display-name>
<icon/>
<attribute-name>bgcolor</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Width (in pixels) of the border to be drawn
          around this table.
        </description>
<display-name>Table Border</display-name>
<icon/>
<attribute-name>border</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Definition of how much space the user agent should
          leave between the border of each cell and its contents.
        </description>
<display-name>Cell Padding</display-name>
<icon/>
<attribute-name>cellpadding</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Definition of how much space the user agent should
          leave between the left side of the table and the
          leftmost column, the top of the table and the top of
          the top side of the topmost row, and so on for the
          right and bottom of the table.  It also specifies
          the amount of space to leave between cells.
        </description>
<display-name>Cell Spacing</display-name>
<icon/>
<attribute-name>cellspacing</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Comma-delimited list of CSS style classes that will be applied
          to the columns of this table.  A space separated list of
          classes may also be specified for any individual column.  If
          the number of elements in this list is less than the number of
          actual column children of the UIData, no "class"
          attribute is output for each column greater than the number of
          elements in the list.  If the number of elements in the list
          is greater than the number of actual column children of the
          UIData, the elements at the posisiton in the list
          after the last column are ignored.
        </description>
<display-name>Column CSS Classes</display-name>
<icon/>
<attribute-name>columnClasses</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any footer generated for this table.
        </description>
<display-name>Footer CSS Classes</display-name>
<icon/>
<attribute-name>footerClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Code specifying which sides of the frame surrounding
          this table will be visible.  Valid values are:
          none (no sides, default value); above (top side only);
          below (bottom side only); hsides (top and bottom sides
          only); vsides (right and left sides only); lhs (left
          hand side only); rhs (right hand side only); box
          (all four sides); and border (all four sides).
        </description>
<display-name>Table Frame</display-name>
<icon/>
<attribute-name>frame</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any caption generated for this table.
        </description>
<display-name>Caption CSS Classes</display-name>
<icon/>
<attribute-name>captionClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to be applied when this caption is rendered.
        </description>
<display-name>Caption CSS Styles</display-name>
<icon/>
<attribute-name>captionStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any header generated for this table.
        </description>
<display-name>Header CSS Classes</display-name>
<icon/>
<attribute-name>headerClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Comma-delimited list of CSS style classes that will be applied
          to the rows of this table.  A space separated list of classes
          may also be specified for any individual row.  Thes styles are
          applied, in turn, to each row in the table.  For example, if
          the list has two elements, the first style class in the list
          is applied to the first row, the second to the second row, the
          first to the third row, the second to the fourth row, etc.  In
          other words, we keep iterating through the list until we reach
          the end, and then we start at the beginning again.
        </description>
<display-name>Row CSS Classes</display-name>
<icon/>
<attribute-name>rowClasses</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Code specifying which rules will appear between cells
          within this table.  Valid values are:  none (no rules,
          default value); groups (between row groups); rows
          (between rows only); cols (between columns only); and
          all (between all rows and columns).
        </description>
<display-name>Table Rules</display-name>
<icon/>
<attribute-name>rules</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Summary of this table's purpose and structure, for
          user agents rendering to non-visual media such as
          speech and Braille.
        </description>
<display-name>Table Summary</display-name>
<icon/>
<attribute-name>summary</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Width of the entire table, for visual user agents.
        </description>
<display-name>Table Width</display-name>
<icon/>
<attribute-name>width</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Comma separated list of row indices for which a new
          "tbody" element should be started (and any
          previously opened one should be ended).
        </description>
<display-name>Body Rows</display-name>
<icon/>
<attribute-name>bodyrows</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>&lt;span class="changed_added_2_1"&gt;Boolean flag directing how the per-row component state should be handled.&lt;/span&gt;</description>
<display-name>Preserve Row Component State</display-name>
<icon/>
<attribute-name>rowStatePreserved</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<tag-attribute>false</tag-attribute>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>

&lt;p&gt;&lt;span class="changed_modified_2_0"&gt;Renders&lt;/span&gt; an HTML "form" element.&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the "requestParameterMap"
      property of the &lt;code&gt;ExternalContext&lt;/code&gt;.  If the map contains
      an entry for the "clientId" of this &lt;code&gt;UIForm&lt;/code&gt; component,
      call &lt;code&gt;setSubmitted(true)&lt;/code&gt; on the form, otherwise call
      &lt;code&gt;setSubmitted(false)&lt;/code&gt; on the form.&lt;/p&gt;

      &lt;/ul&gt;



      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;The value of the "method" attribute must be "post".  The value
      of the "action" attribute must be the result of passing the view
      identifier of the current view to the &lt;code&gt;getActionURL()&lt;/code&gt;
      method of the &lt;code&gt;ViewHandler&lt;/code&gt; for this application, then
      passing that String to the &lt;code&gt;encodeActionURL()&lt;/code&gt; method
      on the &lt;code&gt;ExternalContext&lt;/code&gt;.  The value of the acceptcharset
      attribute must be rendered as the value of "accept-charset".
      If the "styleClass" attribute is specified, render its value as the 
      value of the "class" attribute.  Render a "name"
      attribute with a value the same as the "id" attribute as described
      in "&lt;a href="renderkit-summary.html#general_encoding"&gt;General Notes on
      Encoding&lt;/a&gt;" regarding the "id" attribute for UIInput
      components.  &lt;p class="changed_added_2_0"&gt;Obtain the &lt;code&gt;UIViewRoot view identifier&lt;/code&gt; and
      use it to obtain an &lt;code&gt;action URL&lt;/code&gt; by calling &lt;code&gt;ViewHandler.getActionURL&lt;/code&gt;.
      Use the &lt;code&gt;action URL&lt;/code&gt; to obtain an &lt;code&gt;encoded action URL&lt;/code&gt; by calling 
      &lt;code&gt;ExternalContext.encodeActionURL&lt;/code&gt;.  Obtain an 
      &lt;code&gt;encoded partial action URL&lt;/code&gt; by calling
      &lt;code&gt;ExternalContext.encodePartialActionURL&lt;/code&gt; using &lt;code&gt;action URL&lt;/code&gt; as the argument.
      Compare the result from &lt;code&gt;ExternalContext.encodePartialActionURL&lt;/code&gt; with the
      value from &lt;code&gt;ExternalContext.encodeActionURL()&lt;/code&gt;.  If they are different, 
      render a hidden field with the name &lt;code&gt;javax.faces.encodedURL&lt;/code&gt; and the value
      of this hidden field as the value from &lt;code&gt;ExternalContext.encodePartialActionURL&lt;/code&gt;.&lt;/p&gt;
      Call &lt;code&gt;ViewHandler.writeState()&lt;/code&gt;
      before the the close of the "form" element. 
      Render all the necessary hidden fields 
      for all commandLink instances in the page just before the close of the "form" element.  
      &lt;div class="changed_modified_2_0"&gt;
      Just before rendering the closing &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt; element tag, render 
      any resources that have been targeted for this form:
      &lt;ul&gt;
      &lt;li&gt;Obtain a &lt;code&gt;UIViewRoot&lt;/code&gt; instance.&lt;/li&gt;
      &lt;li&gt;Obtain a &lt;code&gt;List&lt;/code&gt; of component resources targeted for
      this form with a call to &lt;code&gt;UIViewRoot.getComponentResources()&lt;/code&gt;
      with the &lt;code&gt;String "form"&lt;/code&gt; as the argument.&lt;/li&gt;
      &lt;li&gt;Iterate over the returned &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;UIComponent&lt;/code&gt; instances         
      and call &lt;code&gt;encodeAll&lt;/code&gt; on each &lt;code&gt;UIComponent&lt;/code&gt; instance.
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/p&gt;
      &lt;/ul&gt;
      </description>
<component-family>javax.faces.Form</component-family>
<renderer-type>javax.faces.Form</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.FormRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        List of content types that a server processing this form
        will handle correctly
        </description>
<display-name>Content Type</display-name>
<icon/>
<attribute-name>accept</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        List of character encodings for input data
        that are accepted by the server processing
        this form.
        </description>
<display-name>Character Set</display-name>
<icon/>
<attribute-name>acceptcharset</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
        Content type used to submit the form to the server.  If not
        specified, the default value is
        "application/x-www-form-urlencoded".
        </description>
<display-name>Encoding Type</display-name>
<icon/>
<attribute-name>enctype</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<default-value>"application/x-www-form-urlencoded"</default-value>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Javascript code executed when this form is reset.
        </description>
<display-name>Form Reset Script</display-name>
<icon/>
<attribute-name>onreset</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Javascript code executed when this form is submitted.
        </description>
<display-name>Form Submit Script</display-name>
<icon/>
<attribute-name>onsubmit</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Name of a frame where the response
        retrieved after this form submit is to
        be displayed.
        </description>
<display-name>Target Frame</display-name>
<icon/>
<attribute-name>target</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
<tag-name>form</tag-name>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;&lt;span
            class="changed_modified_2_0"&gt;Renders&lt;/span&gt; an HTML "img"
            element.  Render the clientId as the value of the "id"
            attribute.&lt;/p&gt;

&lt;div class="changed_modified_2_0"&gt;

&lt;p&gt;Handling the Value&lt;/p&gt;

  &lt;ul&gt;

    &lt;p&gt;If the "name" attribute is present, execute algorithm &lt;a
    href="javax.faces.Outputjavax.faces.resource.Script.html#ResourceCommonGetResource"&gt;Common Algorithm for Obtaining A Resource to Render&lt;/a&gt; to obtain a &lt;code&gt;Resource&lt;/code&gt; instance.  Call
    &lt;code&gt;Resource.getRequestPath()&lt;/code&gt; and output the result as the
    value of the "src" attribute on the rendered markup.&lt;/p&gt;

    &lt;p&gt;Otherwise, if the "url" attribute is present, treat its value as
    if it was the value of the "value" attribute.  Otherwise, if the
    "value" attribute is present, render the value of the component as
    the value of the "src" attribute, after passing it to the
    &lt;code&gt;getResourceURL()&lt;/code&gt; method of the &lt;code&gt;ViewHandler&lt;/code&gt;
    for this application, and passing the result through the
    &lt;code&gt;encodeResourceURL()&lt;/code&gt; method of the
    &lt;code&gt;ExternalContext&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;When handling the "src" attribute,
    the value must not be escaped.  For example, &lt;code&gt;&amp;&lt;/code&gt; must not
    be turned into &lt;code&gt;&amp;amp;amp;&lt;/code&gt;.  If the "styleClass"
    attribute is specified, render its value as the value of the "class"
    attribute.&lt;/p&gt;

  &lt;/ul&gt;

&lt;/div&gt;</description>
<component-family>javax.faces.Graphic</component-family>
<renderer-type>javax.faces.Image</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.ImageRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Alternate textual description of the
        element rendered by this component.
        </description>
<display-name>Alternate Text</display-name>
<icon/>
<attribute-name>alt</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Override for the height of this image.
        </description>
<display-name>Image Height</display-name>
<icon/>
<attribute-name>height</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Flag indicating that this image is to be used as a server side
        image map.  Such an image must be enclosed within a hyperlink
        ("a").  A value of false causes no attribute to be rendered, 
        while a value of true causes the attribute to be rendered as
        ismap="ismap".
        </description>
<display-name>Image Map Flag</display-name>
<icon/>
<attribute-name>ismap</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        URI to a long description of the image
        represented by this element.
        </description>
<display-name>Long Description</display-name>
<icon/>
<attribute-name>longdesc</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        The name of a client side image map (an HTML "map"
        element) for which this element provides the image.
        </description>
<display-name>Use Image Map</display-name>
<icon/>
<attribute-name>usemap</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Override for the width of this image.
        </description>
<display-name>Image Width</display-name>
<icon/>
<attribute-name>width</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_0"&gt;&lt;p&gt;The &lt;em&gt;libraryName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;</description>
<display-name>Library Name</display-name>
<icon/>
<attribute-name>library</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
<tag-attribute>true</tag-attribute>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_0"&gt;&lt;p&gt;The 
                &lt;em&gt;resourceName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;</description>
<display-name>Resource Name</display-name>
<icon/>
<attribute-name>name</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
<tag-attribute>true</tag-attribute>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p class="changed_added_2_2"&gt;This
            renderer is intended to be used with an arbitrary markup
            element whose decoding needs can be entirely described by
            the section "General notes on decoding" in the RenderKit
            overview.&lt;/p&gt;

            &lt;div class="changed_added_2_2"&gt;
            &lt;p&gt;The local name of the rendered element must first be
             determined for encoding. Look in the components's pass through
             attribute map for a value under the key given by the value of the
            symbolic constant
            &lt;code&gt;Renderer.PASSTHROUGH_RENDERER_LOCALNAME_KEY&lt;/code&gt;. If not found,
            throw a &lt;code&gt;FacesException&lt;/code&gt;.  If found, let this value be
            &lt;strong&gt;localName&lt;/strong&gt;.&lt;/p&gt;


            &lt;p&gt;&lt;a name="decode"&gt;Encode Behavior&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;If the component has a manually declared, not auto-generated
  clientId, or if the component has behaviors attached to it, render the
  clientId as the value of the "id" attribute.&lt;/p&gt;

            &lt;/div&gt;


</description>
<component-family>javax.faces.Panel</component-family>
<renderer-type>javax.faces.passthrough.Element</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.PassthroughRenderer
    </renderer-class>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>false</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p class="changed_added_2_2"&gt;&lt;span&gt;Renders&lt;/span&gt;
            an HTML "input" element of "type" "file". The standard HTML_BASIC
            RenderKit specifies behavior that assumes Servlet 3.0 or later.  
            Portlet implementations must override this implementation with a 
            semantically equivalent one that functions under the constraints 
            of the Portlet specification.&lt;/p&gt;

      &lt;div class="changed_added_2_2"&gt;

      &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the "requestParameterMap"
      property of the &lt;code&gt;ExternalContext&lt;/code&gt;.  If the
      &lt;code&gt;Map&lt;/code&gt; contains an entry for the "clientId" of the
      component, pass the value of the entry to the
      &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the component, which
      must be an instance of &lt;code&gt;EditableValueHolder&lt;/code&gt;, and
      return.  Otherwise, obtain the "request" property from the
      &lt;code&gt;ExternalContext&lt;/code&gt; and cast it to
      &lt;code&gt;javax.servlet.http.HttpServletRequest&lt;/code&gt;.  Call
      &lt;code&gt;getParts()&lt;/code&gt; on the httpServletRequest. Iterate over
      the parts.  If the "name" property of the current part is equal to
      the "clientId", pass the current part to the
      &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the component.  If an
      exception is thrown during the iteration, log the exception and
      continue.&lt;/p&gt;

      &lt;p&gt;The standard implementation must override the 
      &lt;code&gt;getConvertedValue()&lt;/code&gt; so that it simply returns the
      &lt;code&gt;submittedValue&lt;/code&gt; argument.&lt;/p&gt;

      &lt;p&gt;Any exception thrown when interacting with the underlying
      multi-part API must be wrapped in a &lt;code&gt;FacesException&lt;/code&gt;
      and allowed to reach the &lt;code&gt;ExceptionHandler&lt;/code&gt;.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt; Render the clientId of the component as the value of the
      "name" attribute.  Do not render the "value" attribute.  If the
      "styleClass" attribute is specified, render its value as the value
      of the "class" attribute.  &lt;/p&gt;

      &lt;p&gt;If &lt;code&gt;ProjectStage&lt;/code&gt; is not
      &lt;code&gt;ProjectStage.Production&lt;/code&gt;, verify that the enclosing
      form has an &lt;code&gt;enctype&lt;/code&gt; attribute whose value is
      &lt;code&gt;multipart/form-data&lt;/code&gt;.  If not, add a
      &lt;code&gt;FacesMessage&lt;/code&gt; for this component's clientId to the
      &lt;code&gt;FacesContext&lt;/code&gt; stating that file upload requires a form
      with &lt;code&gt;enctype&lt;/code&gt; equal to
      &lt;code&gt;multipart/form-data&lt;/code&gt;.  If &lt;code&gt;ProjectStage&lt;/code&gt;
      &lt;strong&gt;is&lt;/strong&gt; &lt;code&gt;ProjectStage.Production&lt;/code&gt;, do not
      do this verification.&lt;/p&gt;

      &lt;/ul&gt;

&lt;/div&gt; </description>
<component-family>javax.faces.Input</component-family>
<renderer-type>javax.faces.File</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.FileRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
          Alternate textual description of the
          element rendered by this component.
        </description>
<display-name>Alternate Text</display-name>
<icon/>
<attribute-name>alt</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        If the value of this attribute is "off", render "off" as the value
        of the attribute. This indicates that the  browser should
        disable its autocomplete feature for this component.  This is
        useful for components that perform autocompletion and do not
        want the browser interfering.  If this attribute is not set or the value 
        is "on", render nothing.
        </description>
<display-name>Enable or disable browser autocompletion.</display-name>
<icon/>
<attribute-name>autocomplete</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          The maximum number of characters that may
          be entered in this field.
        </description>
<display-name>Maximum Length</display-name>
<icon/>
<attribute-name>maxlength</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The number of characters used to determine
          the width of this field.
        </description>
<display-name>Field Width</display-name>
<icon/>
<attribute-name>size</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>false</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;Renders an HTML "input" element of type
      "hidden".&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;See the decode description for the &lt;a
      href="javax.faces.Inputjavax.faces.Text.html#encode"&gt;Input
      Text&lt;/a&gt; renderer.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Render the clientId of the component as the value of the
      "name" attribute.  Render the current value of the component as
      the value of the "value" attribute.&lt;/p&gt;

      &lt;/ul&gt;</description>
<component-family>javax.faces.Input</component-family>
<renderer-type>javax.faces.Hidden</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.HiddenRenderer
    </renderer-class>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;Renders an HTML "input" element of "type" "password".&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;See the decode description for the &lt;a
      href="javax.faces.Inputjavax.faces.Text.html#encode"&gt;Input
      Text&lt;/a&gt; renderer.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;
      Render the clientId of the component as the value of the "name"
      attribute.  Render the current value of the component as the value
      of the "value" attribute, if and only if the "redisplay" component
      attribute is the string "true".  If the "styleClass" attribute is
      specified, render its value as the value of the "class"
      attribute.&lt;/p&gt;

      &lt;/ul&gt;</description>
<component-family>javax.faces.Input</component-family>
<renderer-type>javax.faces.Secret</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.SecretRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
          Alternate textual description of the
          element rendered by this component.
        </description>
<display-name>Alternate Text</display-name>
<icon/>
<attribute-name>alt</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        If the value of this attribute is "off", render "off" as the value
        of the attribute. This indicates that the  browser should
        disable its autocomplete feature for this component.  This is
        useful for components that perform autocompletion and do not
        want the browser interfering.  If this attribute is not set or the value 
        is "on", render nothing.
        </description>
<display-name>Enable or disable browser autocompletion.</display-name>
<icon/>
<attribute-name>autocomplete</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          The maximum number of characters that may
          be entered in this field.
        </description>
<display-name>Maximum Length</display-name>
<icon/>
<attribute-name>maxlength</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The number of characters used to determine
          the width of this field.
        </description>
<display-name>Field Width</display-name>
<icon/>
<attribute-name>size</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Flag indicating that any existing value
        in this field should be rendered when the
        form is created.  Because this is a potential
        security risk, password values are not
        displayed by default.
        </description>
<display-name>Redisplay Flag</display-name>
<icon/>
<attribute-name>redisplay</attribute-name>
<attribute-class>boolean</attribute-class>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;&lt;span class="changed_modified_2_2"&gt;Renders&lt;/span&gt;
            an HTML "input" element of "type" "text".&lt;/p&gt;

      &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the "requestParameterMap"
      property of the &lt;code&gt;ExternalContext&lt;/code&gt;.  If the
      &lt;code&gt;Map&lt;/code&gt; contains an entry for the "clientId" of the
      component, pass the value of the entry to the
      &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the component, which
      must be an instance of &lt;code&gt;EditableValueHolder&lt;/code&gt;.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;  Render the clientId of the component as
      the value of the "name" attribute.  Render the current value of
      the component as the value of the "value" attribute.  If the
      "styleClass" attribute is specified, render its value as the value
      of the "class" attribute.
      &lt;/p&gt;

      &lt;p class="changed_added_2_2"&gt;If this element has children, they
      must be ignored by default.  Implementions may provide a
      configuration option that allows this element to render its
      children.&lt;/p&gt;

      &lt;/ul&gt;</description>
<component-family>javax.faces.Input</component-family>
<renderer-type>javax.faces.Text</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.TextRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
          Alternate textual description of the
          element rendered by this component.
        </description>
<display-name>Alternate Text</display-name>
<icon/>
<attribute-name>alt</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        If the value of this attribute is "off", render "off" as the value
        of the attribute. This indicates that the  browser should
        disable its autocomplete feature for this component.  This is
        useful for components that perform autocompletion and do not
        want the browser interfering.  If this attribute is not set or the value 
        is "on", render nothing.
        </description>
<display-name>Enable or disable browser autocompletion.</display-name>
<icon/>
<attribute-name>autocomplete</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          The maximum number of characters that may
          be entered in this field.
        </description>
<display-name>Maximum Length</display-name>
<icon/>
<attribute-name>maxlength</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The number of characters used to determine
          the width of this field.
        </description>
<display-name>Field Width</display-name>
<icon/>
<attribute-name>size</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>false</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;Renders an HTML "textarea" element.&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;See the encode description for the &lt;a
      href="javax.faces.Inputjavax.faces.Text.html#encode"&gt;Input
      Text&lt;/a&gt; renderer.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;  Render the
      clientId as the value of the "name" attribute.  Render the current
      valu eof the component inside the "textarea"
      element.&lt;/p&gt; &lt;/ul&gt;</description>
<component-family>javax.faces.Input</component-family>
<renderer-type>javax.faces.Textarea</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.TextareaRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
        The number of columns to be displayed.
        </description>
<display-name>Columns</display-name>
<icon/>
<attribute-name>cols</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        The number of rows to be displayed.
        </description>
<display-name>Rows</display-name>
<icon/>
<attribute-name>rows</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<value-expression-enabled>true</value-expression-enabled>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;&lt;span class="changed_modified_2_2"&gt;Render&lt;/span&gt; a single message for a specific component.&lt;/p&gt;

      &lt;p&gt;Set-up for Rendering&lt;/p&gt;

      &lt;ul&gt;

        &lt;p&gt;Obtain the "summary" and "detail" properties from
        &lt;code&gt;UIMessage&lt;/code&gt; component.  If not present, keep the
        empty string as the value, respectively.  Obtain the first
        &lt;code&gt;FacesMessage&lt;/code&gt; to render from the component, using
        the "for" property of the &lt;code&gt;UIMessage&lt;/code&gt;.  This will be
        the only message we render.  Obtain the severity style for this
        message.  If the severity of the message is
        &lt;code&gt;FacesMessage.SEVERITY_INFO&lt;/code&gt;, the severity style
        comes from the value of the "infoStyle" attribute.  If the
        severity of the message is
        &lt;code&gt;FacesMessage.SEVERITY_WARN&lt;/code&gt;, the severity style
        comes from the value of the "warnStyle" attribute, and so on for
        each of the severities, &lt;code&gt;INFO, WARN, ERROR&lt;/code&gt; and
        &lt;code&gt;FATAL&lt;/code&gt;.  The same rules apply for obtaining the
        severity style class, but instead of "infoStyle, warnStyle", etc
        use "infoClass, warnClass", etc.  Obtain the "style",
        "styleClass" and "layout" attributes from the
        &lt;code&gt;UIMessage&lt;/code&gt; component.  If we have a "style"
        attribute and a severity style attribute, use the severity style
        attribute as the value of the "style" attribute.  If we have no
        "style" attribute, but do have a severity style, use the
        severity style as the value of the "style" attribute.  The same
        precedence rules apply for the style class.  Obtain the value of
        the &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;lang&lt;/code&gt; attributes.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Rendering&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;For the message renderer, we only render one row, for the first
      message.  For the messages renderer, we render as many rows as we
      have messages.  If any of the "dir", "lang", "style" or
      "styleClass" attributes has a non-null value (as determined
      above), render a "span" element, outputting the value of the
      "style" attribute as the the value of the "style" attribute, and
      outputting the value of the "styleClass" attribute as the value of
      the "class" attribute on the "span" element.  Output the "dir" and
      "lang" attributes as well, if they are present.  &lt;span class="changed_modified_2_2"&gt;If the
      &lt;code&gt;UIMessage&lt;/code&gt; has a "tooltip" attribute with the value of
      "true",  and we haven't already written out the "span" and the "title" attribute for
      the "span", output the "detail" as the value of the "title" attribute on the 
      "span".  If we haven't already written out a "title" attribute, and there is 
      no detail, output the "summary" as the value of the "title" attribute.&lt;/span&gt;  
      Close out the span if necessary.&lt;/p&gt;

      &lt;/ul&gt;</description>
<component-family>javax.faces.Message</component-family>
<renderer-type>javax.faces.Message</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.MessageRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          CSS style class to apply to any message
          with a severity class of "ERROR".
        </description>
<display-name>Error Class</display-name>
<icon/>
<attribute-name>errorClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to apply to any message
          with a severity class of "ERROR".
        </description>
<display-name>Error Styles</display-name>
<icon/>
<attribute-name>errorStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to any message
          with a severity class of "FATAL".
        </description>
<display-name>Fatal Class</display-name>
<icon/>
<attribute-name>fatalClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to apply to any message
          with a severity class of "FATAL".
        </description>
<display-name>Fatal Styles</display-name>
<icon/>
<attribute-name>fatalStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to any message
          with a severity class of "INFO".
        </description>
<display-name>Info Class</display-name>
<icon/>
<attribute-name>infoClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to apply to any message
          with a severity class of "INFO".
        </description>
<display-name>Info Styles</display-name>
<icon/>
<attribute-name>infoStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Flag indicating whether the detail portion of the
          message should be displayed as a tooltip.
        </description>
<display-name>Tooltip</display-name>
<icon/>
<attribute-name>tooltip</attribute-name>
<attribute-class>boolean</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to any message
          with a severity class of "WARN".
        </description>
<display-name>Warning Class</display-name>
<icon/>
<attribute-name>warnClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to apply to any message
          with a severity class of "WARN".
        </description>
<display-name>Warning Styles</display-name>
<icon/>
<attribute-name>warnStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>

     &lt;p&gt;&lt;span class="changed_modified_2_0"&gt;The&lt;/span&gt; same as for the
     Message renderer, but output all the messages.  &lt;span
     class="changed_added_2_0"&gt;If an "id" attribute has been specified,
     it must be rendered on the outermost markup corresponding to this
     component.&lt;/span&gt; If the value of the "layout" attribute is
     "table", render nested "table", "tr", and "td" elements, in that
     order.  If the value of the "layout" attribute is "list", or the
     "layout" attribute is not specified, render nested "ul", "li"
     elements, in that order.  Output the value of the "style" attribute
     as the value of the "style" attribute, output the value of the
     "styleClass" attribute as the value of the "class" attribute, and
     output the dir and lang attributes.  Output these values on the
     "table" element or the "ul" element.  Output the values of the
     "errorStyle", "fatalStyle", "infoStyle", "warnStyle" attributes as
     the value of the "style" attribute on either the "tr" element or
     the "li" element.  Output the values of the "errorClass",
     "fatalClass", "infoClass", "warnClass" attributes as the value of
     the "class" attribute on either the "tr" element or the "li"
     element.  The component is a &lt;code&gt;UIMessages&lt;/code&gt;, and there is
     no "for" attribute.  Therefore, use either &lt;code&gt;null&lt;/code&gt; to
     obtain the messages from the &lt;code&gt;FacesContext&lt;/code&gt; or the empty
     string if the components "globalOnly" property is
     &lt;code&gt;true&lt;/code&gt;.  If the layout was "table" close out the table
     elements, otherwise, close out the list elements.&lt;/p&gt;

            </description>
<component-family>javax.faces.Messages</component-family>
<renderer-type>javax.faces.Messages</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.MessagesRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          CSS style class to apply to any message
          with a severity class of "ERROR".
        </description>
<display-name>Error Class</display-name>
<icon/>
<attribute-name>errorClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to apply to any message
          with a severity class of "ERROR".
        </description>
<display-name>Error Styles</display-name>
<icon/>
<attribute-name>errorStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to any message
          with a severity class of "FATAL".
        </description>
<display-name>Fatal Class</display-name>
<icon/>
<attribute-name>fatalClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to apply to any message
          with a severity class of "FATAL".
        </description>
<display-name>Fatal Styles</display-name>
<icon/>
<attribute-name>fatalStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to any message
          with a severity class of "INFO".
        </description>
<display-name>Info Class</display-name>
<icon/>
<attribute-name>infoClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to apply to any message
          with a severity class of "INFO".
        </description>
<display-name>Info Styles</display-name>
<icon/>
<attribute-name>infoStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          The type of layout markup to use when rendering
          error messages.  Valid values are "table" (an HTML
          table) and "list" (an HTML list).  If not specified,
          the default value is "list".
        </description>
<display-name>Layout</display-name>
<icon/>
<attribute-name>layout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<default-value>"list"</default-value>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating whether the detail portion of the
          message should be displayed as a tooltip.
        </description>
<display-name>Tooltip</display-name>
<icon/>
<attribute-name>tooltip</attribute-name>
<attribute-class>boolean</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to any message
          with a severity class of "WARN".
        </description>
<display-name>Warning Class</display-name>
<icon/>
<attribute-name>warnClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to apply to any message
          with a severity class of "WARN".
        </description>
<display-name>Warning Styles</display-name>
<icon/>
<attribute-name>warnStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;Render parameterized text.  Obtain the
      &lt;code&gt;style&lt;/code&gt;, &lt;code&gt;styleClass&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt;, and
      &lt;code&gt;lang&lt;/code&gt; attributees from this component.  If any are
      present, render a "span" element.  Output the
      &lt;code&gt;styleClass&lt;/code&gt; attribute (if present) as the value of the
      &lt;code&gt;class&lt;/code&gt; attribute.  Output the &lt;code&gt;style&lt;/code&gt;
      attribute as the value of the &lt;code&gt;style&lt;/code&gt; attribute.
      Output the &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;lang&lt;/code&gt; attributes as
      ignored-by-renderer attributes.  Accrue a list of the values of all child
      &lt;code&gt;UIParameter&lt;/code&gt; components of this component.  If there
      are one or more accumulated parameter values, convert the list of
      parameter values to an &lt;code&gt;Object&lt;/code&gt; array, call
      &lt;code&gt;MessageFormat.format()&lt;/code&gt;, passing the
      &lt;code&gt;value&lt;/code&gt; of this component as the first argument, and
      the array of parameter values as the second argument, and render
      the result.  Otherwise, render the &lt;code&gt;value&lt;/code&gt; of this
      component unmodified.&lt;/p&gt;</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.Format</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.OutputMessageRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Flag indicating that characters that are sensitive
        in HTML and XML markup must be escaped.  This flag
        is set to "true" by default.
        </description>
<display-name>Escape Characters</display-name>
<icon/>
<attribute-name>escape</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<default-value>true</default-value>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>Renders an HTML "label" element.  Render the current value
      of the component as label text if it is specified. If a "for" attribute is
      specified, find the component specified by the value of the "for"
      attribute, and render its client id as the value of the "for" attribute.
      If "styleClass" attribute is specified, render its value as the value
      of the "class" attribute.</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.Label</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.LabelRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Client identifier of the component for which this element
        is a label.
        </description>
<display-name>Label For Identifier</display-name>
<icon/>
<attribute-name>for</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
</attribute-extension>
</attribute>
<attribute>
<description>
        Flag indicating that characters that are sensitive
        in HTML and XML markup must be escaped.  If omitted, this
        flag is assumed to be "true".
        </description>
<display-name>Escape Characters</display-name>
<icon/>
<attribute-name>escape</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<default-value>true</default-value>
<value-expression-enabled>true</value-expression-enabled>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>

            &lt;p&gt;&lt;span class="changed_modified_2_0_rev_a
            changed_modified_2_2"&gt;Render&lt;/span&gt; an HTML "a" anchor
            element.  The value of the component is rendered as the
            value of the "href" attribute.  Any child UIParameter
            components &lt;span class="changed_modified_2_0_rev_a"&gt;whose
            &lt;code&gt;disable&lt;/code&gt; property is &lt;code&gt;false&lt;/code&gt;&lt;/span&gt;
            are appended to the String to be output as the value of the
            "href" attribute as query parameters before rendering.  The
            entire "href" string must be processed by a call to the
            &lt;code&gt;encodeResourceURL()&lt;/code&gt; method of the
            &lt;code&gt;ExternalContext&lt;/code&gt;.  The name of the UIParameter
            goes on the left hand side, and the value of the UIParameter
            on the right hand side.  The name and the value must be
            URLEncoded.  &lt;span class="changed_modified_2_0_rev_a
            changed_modified_2_2"&gt;Note that the required url encoding is
            handled by
            &lt;code&gt;ResponseWrter.writeURIAttribute()&lt;/code&gt;.&lt;/span&gt; Each
            UIParameter instance is separeted by an ampersand, as
            dictated in the URL spec.  If the "styleClass" attribute is
            specified, render its value as the value of the "class"
            attribute.  If the "id" attribute is specified, follow the
            same steps as mentioned in the "&lt;a
            href="renderkit-summary.html#general_encoding"&gt;General Notes
            on Encoding&lt;/a&gt;" regarding the "id" attribute for UIInput
            components.  If the "disabled" attribute is specified, do
            not render the HTML "a" anchor element or the "href"
            element.  Instead, render a "span" element.  If the
            "styleClass" attribute is specified, render its value as the
            value of the "class" attribute on the "span".  Render any
            ignored-by-renderer attributes on the "span".

            &lt;/p&gt;</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.Link</renderer-type>
<renderer-class>
       com.sun.faces.renderkit.html_basic.OutputLinkRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The character encoding of the resource designated
          by this hyperlink.
        </description>
<display-name>Character Set</display-name>
<icon/>
<attribute-name>charset</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The position and shape of the hot spot on the screen
          (for use in client-side image maps).
        </description>
<display-name>Coordinates</display-name>
<icon/>
<attribute-name>coords</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The language code of the resource designated
          by this hyperlink.
        </description>
<display-name>Language</display-name>
<icon/>
<attribute-name>hreflang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The relationship from the current document
          to the anchor specified by this hyperlink.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Relationship</display-name>
<icon/>
<attribute-name>rel</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A reverse link from the anchor specified
          by this hyperlink to the current document.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Reverse Link</display-name>
<icon/>
<attribute-name>rev</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The shape of the hot spot on the screen
          (for use in client-side image maps).  Valid
          values are:  default (entire region); rect
          (rectangular region); circle (circular region);
          and poly (polygonal region).
        </description>
<display-name>Shape</display-name>
<icon/>
<attribute-name>shape</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Name of a frame where the resource
          retrieved via this hyperlink is to
          be displayed.
        </description>
<display-name>Target Frame</display-name>
<icon/>
<attribute-name>target</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The content type of the resource designated
          by this hyperlink.
        </description>
<display-name>Content Type</display-name>
<icon/>
<attribute-name>type</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never
          receive focus or be included in a subsequent
          submit.
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>action</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
<body-tag>true</body-tag>
</renderer-extension>
</renderer>
<renderer>
<description>

&lt;p&gt;&lt;span class="changed_added_2_0 changed_modified_2_0_rev_a
changed_modified_2_1 changed_modified_2_2"&gt;Render&lt;/span&gt; &lt;span class="changed_added_2_0
changed_modified_2_1"&gt;an HTML "a" anchor element.  The value of the
component is rendered as the anchor text and the outcome of the
component is used to determine the target URL rendered in the "href"
attribute.  Execute the &lt;a
href="javax.faces.OutcomeTargetjavax.faces.Button.html#UIOutcomeTargetGetEncodedTargetUrl"&gt;Algorithm
to obtain the URL to which the user-agent should issue a GET request
when clicked&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p class="changed_added_2_0"&gt;Any child &lt;code&gt;UIParameter&lt;/code&gt; components
&lt;span class="changed_modified_2_0_rev_a"&gt;whose &lt;code&gt;disable&lt;/code&gt;
property is &lt;code&gt;false&lt;/code&gt;&lt;/span&gt; are appended to the String to be
output as the value of the "href" attribute as query parameters before
rendering.  The entire "href" string must be processed by a call to
the &lt;code&gt;encodeResourceURL()&lt;/code&gt; method of the
&lt;code&gt;ExternalContext&lt;/code&gt;.  The name of the &lt;code&gt;UIParameter&lt;/code&gt;
goes on the left hand side, and the value of the
&lt;code&gt;UIParameter&lt;/code&gt; on the right hand side.  The name and the value
must be URLEncoded.  &lt;span class="changed_modified_2_0_rev_a"&gt;Note that
the required url encoding is handled by
&lt;code&gt;ResponseWrter.writeAttribute()&lt;/code&gt;.&lt;/span&gt; Each
&lt;code&gt;UIParameter&lt;/code&gt; instance is separated by an ampersand, as
dictated in the URL spec.  If the "fragment" attribute is specified, the
value will be included at the end of the resulting URL preceded by a
hash mark.  If the "styleClass" attribute is specified, render its value
as the value of the "class" attribute.&lt;/p&gt;

&lt;p class="changed_added_2_0"&gt;If the "id" attribute is specified, follow
the same steps as mentioned in the "&lt;a
href="renderkit-summary.html#general_encoding"&gt;General Notes on
Encoding&lt;/a&gt;" regarding the "id" attribute for UIInput components.  If
the "disabled" attribute is specified, do not render the HTML "a" anchor
element or the "href" element.  Instead, render a "span" element.  If
the "styleClass" attribute is specified, render its value as the value
of the "class" attribute on the "span".  Render any ignored-by-renderer
attributes on the "span".&lt;/p&gt;

&lt;div class="changed_added_2_2"&gt;

        &lt;p&gt;To support entering flows that are defined by both a defining
        document id and a flow id, add a component attribute to this
        component whose name is given by the value of the symbolic
        constant
        &lt;code&gt;javax.faces.event.ActionListener.TO_FLOW_DOCUMENT_ID_ATTR_NAME&lt;/code&gt;,
        and whose value is the defining document id.  For example, when
        using this component in a facelet page, the following markup
        would cause such an attribute to be added.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h:link id="start_a" value="enter flow-a" outcome="flow-a"&amp;gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;f:attribute name="to-flow-document-id" value="unique"/&amp;gt;&lt;br /&gt;
&amp;lt;/h:link&amp;gt;&lt;br /&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
<component-family>javax.faces.OutcomeTarget</component-family>
<renderer-type>javax.faces.Link</renderer-type>
<renderer-class>
       com.sun.faces.renderkit.html_basic.OutcomeTargetLinkRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The character encoding of the resource designated
          by this hyperlink.
        </description>
<display-name>Character Set</display-name>
<icon/>
<attribute-name>charset</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The position and shape of the hot spot on the screen
          (for use in client-side image maps).
        </description>
<display-name>Coordinates</display-name>
<icon/>
<attribute-name>coords</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The language code of the resource designated
          by this hyperlink.
        </description>
<display-name>Language</display-name>
<icon/>
<attribute-name>hreflang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The relationship from the current document
          to the anchor specified by this hyperlink.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Relationship</display-name>
<icon/>
<attribute-name>rel</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A reverse link from the anchor specified
          by this hyperlink to the current document.
          The value of this attribute is a space-separated
          list of link types.
        </description>
<display-name>Reverse Link</display-name>
<icon/>
<attribute-name>rev</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The shape of the hot spot on the screen
          (for use in client-side image maps).  Valid
          values are:  default (entire region); rect
          (rectangular region); circle (circular region);
          and poly (polygonal region).
        </description>
<display-name>Shape</display-name>
<icon/>
<attribute-name>shape</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Name of a frame where the resource
          retrieved via this hyperlink is to
          be displayed.
        </description>
<display-name>Target Frame</display-name>
<icon/>
<attribute-name>target</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The content type of the resource designated
          by this hyperlink.
        </description>
<display-name>Content Type</display-name>
<icon/>
<attribute-name>type</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never
          receive focus or be included in a subsequent
          submit.
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>action</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          The identifier of the page fragment which should
          be brought into focus when the target page is
          rendered. The value of this attribute is appended
          to the end of target URL following a hash (#) mark.
          This notation is part of the standard URL syntax.
        </description>
<display-name>Fragment Identifier</display-name>
<icon/>
<attribute-name>fragment</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>&lt;p class="changed_added_2_2"&gt;Disable appending the &lt;code&gt;ClientWindow&lt;/code&gt; on the rendering of this element.&lt;/p&gt;
        </description>
<display-name>Disable ClientWindow on rendered OutcomeTarget</display-name>
<icon/>
<attribute-name>disableClientWindow</attribute-name>
<attribute-class>java.lang.Boolean</attribute-class>
<attribute-extension>
<default-value>false</default-value>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
<body-tag>true</body-tag>
<jsp-ignore>true</jsp-ignore>
<tag-name>link</tag-name>
</renderer-extension>
</renderer>
<renderer>
<description>

&lt;p&gt;&lt;span class="changed_modified_2_1"&gt;&lt;span class="changed_modified_2_2"&gt;Render&lt;/span&gt; a button that does not
cause an HTTP POST.&lt;/span&gt;&lt;/p&gt;

&lt;div class="changed_added_2_0"&gt;&lt;div class="changed_modified_2_1"&gt;
 
      &lt;p&gt;Encode Behavior&lt;/p&gt;

&lt;p&gt;Render an HTML "input" element of type "button".  The value of the
component is rendered as the button text and the outcome of the
component is used to determine the target URL which is activated by
onclick.  If "image" attribute is specified, render it as the value of
the "src" attribute after passing it to the
&lt;code&gt;getResourceURL()&lt;/code&gt; method of the &lt;code&gt;ViewHandler&lt;/code&gt; for
this application, and passing the result through the
&lt;code&gt;encodeResourceURL()&lt;/code&gt; method of the
&lt;code&gt;ExternalContext&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the component is not disabled, take the following actions.&lt;/p&gt;

  &lt;p&gt;&lt;a name="UIOutcomeTargetGetEncodedTargetUrl"&gt;Algorithm to obtain the url to which the user-agent should issue a GET request when clicked&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;Obtain the &lt;code&gt;NavigationCase&lt;/code&gt; that corresponds to the
  component instance for this &lt;code&gt;Renderer&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;Obtain an instance of
  &lt;code&gt;javax.faces.application.ConfigurableNavigationHandler&lt;/code&gt;
  from the &lt;code&gt;ViewHandler&lt;/code&gt;.  If no such instance can be
  obtained, write the "disabled" attribute on the button.  Otherwise,
  let &lt;em&gt;outcome&lt;/em&gt; be the result of calling
  &lt;code&gt;getOutcome()&lt;/code&gt; on the argument component, which must be an
  instance of &lt;code&gt;UIOutcomeTarget&lt;/code&gt;.  If this result is
  &lt;code&gt;null&lt;/code&gt;, let &lt;em&gt;outcome&lt;/em&gt; be the viewId of the current
  &lt;code&gt;UIViewRoot&lt;/code&gt;.  &lt;span class="changed_modified_2_2"&gt;Obtain a
  reference to the &lt;code&gt;NavigationCase&lt;/code&gt;, called &lt;em&gt;navCase&lt;/em&gt;
  for discussion.  If the component has a non-&lt;code&gt;null&lt;/code&gt;
  attribute named by the value of the symbolic constant
  &lt;code&gt;javax.faces.event.ActionListener.TO_FLOW_DOCUMENT_ID_ATTR_NAME&lt;/code&gt;,
  let &lt;em&gt;navCase&lt;/em&gt; be the return from calling
  &lt;code&gt;getNavigationCase()&lt;/code&gt; on the
  &lt;code&gt;ConfigurableNavigationHandler&lt;/code&gt;, passing the current
  &lt;code&gt;FacesContext&lt;/code&gt; as the first argument, &lt;code&gt;null&lt;/code&gt;, as
  the second argument, &lt;em&gt;outcome&lt;/em&gt; as the third argument, and the
  value of the &lt;code&gt;TO_FLOW_DOCUMENT_ID_ATTR_NAME&lt;/code&gt; attribute as
  the fourth argument.  Otherwise, let &lt;em&gt;navCase&lt;/em&gt; be the return
  from calling &lt;code&gt;getNavigationCase()&lt;/code&gt; on the
  &lt;code&gt;ConfigurableNavigationHandler&lt;/code&gt;, passing the current
  &lt;code&gt;FacesContext&lt;/code&gt; as the first argument, &lt;code&gt;null&lt;/code&gt;, as
  the second argument, and &lt;em&gt;outcome&lt;/em&gt; as the third
  argument.&lt;/span&gt; If this returns &lt;code&gt;null&lt;/code&gt;, log an informative
  error which includes the component id, and write the "disabled"
  attribute on the component markup, with the value of
  &lt;code&gt;true&lt;/code&gt;.  Otherwise obtain the encoded target URL using the
  following algorithm.&lt;/p&gt;

  &lt;p&gt;Algorithm to obtain the encoded target URL&lt;/p&gt;

  &lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;Let &lt;em&gt;params&lt;/em&gt; be the &lt;code&gt;Map&amp;lt;String,
	  List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; to be passed to
	  &lt;code&gt;ViewHandler.getBookmarkableURL()&lt;/code&gt;.  Build this map up first
	  from any child &lt;code&gt;UIParameter&lt;/code&gt; components.  These children must
	  be processed in the order in which they appear as children.  If multiple
	  children with the same name are encountered, their values must appear in
	  the &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; in the &lt;code&gt;Map&lt;/code&gt; entry with
	  the same name, and appear in the list in the same order as their child
	  order.&lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Obtain any parameters included within the
	  navigation case.  Call &lt;code&gt;getParameters()&lt;/code&gt; on
	  &lt;em&gt;navCase&lt;/em&gt;.  The result will be a &lt;code&gt;Map&amp;lt;String,
	  List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt;.  If the result is
	  non-&lt;code&gt;null&lt;/code&gt; and non-empty, iterate over the entries
	  from the result &lt;code&gt;Map&lt;/code&gt; and, if no entry with the
	  same name exists in &lt;em&gt;params&lt;/em&gt;, set the value from the
	  current entry as the value in the &lt;em&gt;params&lt;/em&gt;
	  &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

          &lt;li class="changed_added_2_2"&gt;&lt;p&gt;If the navigation case has a
          non-null &lt;code&gt;toFlowDocumentId&lt;/code&gt; property, add two
          parameters as shown in this table.&lt;/p&gt;

          &lt;table border="1"&gt;
            &lt;tr&gt;
              &lt;th&gt;parameter name&lt;/th&gt;
              &lt;th&gt;parameter value&lt;/th&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
               &lt;td&gt;value of &lt;code&gt;FlowHandler.TO_FLOW_DOCUMENT_ID_REQUEST_PARAM_NAME&lt;/code&gt;&lt;/td&gt;

               &lt;td&gt;value of the &lt;code&gt;toFlowDocumentId&lt;/code&gt; property
               of the navigation case&lt;/td&gt;
            &lt;/tr&gt;
            
            &lt;tr&gt;
               &lt;td&gt;value of &lt;code&gt;FlowHandler.FLOW_ID_REQUEST_PARAM_NAME&lt;/code&gt;&lt;/td&gt;

               &lt;td&gt;value of the &lt;code&gt;fromOutcome&lt;/code&gt; property
               of the navigation case&lt;/td&gt;
            &lt;/tr&gt;
            
          &lt;/table&gt;


          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Let &lt;em&gt;includeViewParams&lt;/em&gt; be the result of a
	  logical OR of the results from calling
	  &lt;code&gt;isIncludeViewParams()&lt;/code&gt; on the argument
	  &lt;code&gt;UIOutcomeTarget&lt;/code&gt; component and calling
	  &lt;code&gt;isIncludeViewParams&lt;/code&gt; on &lt;em&gt;navCase&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;


	  &lt;li&gt;&lt;p&gt;Call &lt;code&gt;getBookmarkableURL()&lt;/code&gt; on the
	  &lt;code&gt;ViewHandler&lt;/code&gt;, passing the current
	  &lt;code&gt;FacesContext&lt;/code&gt; as the first argument, the return
	  from calling &lt;code&gt;getToViewId()&lt;/code&gt; as the second
	  argument, &lt;em&gt;params&lt;/em&gt; as the third argument, and
	  &lt;em&gt;includeViewParams&lt;/em&gt; as the last argument.&lt;/p&gt;&lt;/li&gt;

  &lt;/ul&gt;

  &lt;p&gt;The entire target URL string must be processed by a call to
  the &lt;code&gt;encodeResourceURL()&lt;/code&gt; method of the
  &lt;code&gt;ExternalContext&lt;/code&gt;.  The name of the
  &lt;code&gt;UIParameter&lt;/code&gt; goes on the left hand side, and the value of
  the &lt;code&gt;UIParameter&lt;/code&gt; on the right hand side.  The name and the
  value must be URLEncoded.  Each &lt;code&gt;UIParameter&lt;/code&gt; instance is
  separeted by an ampersand, as dictated in the URL spec.  The final
  encoded result will be written out to the onclick attribute of the
  button as "window.location.href = '&lt;encoded HREF value&gt;'".  If the
  developer has specified a custom onlclick the window.location.href
  name/value pair will be appended at the end of the developer specified
  script.  If the "fragment" attribute is specified, the value will be
  included at the end of the resulting URL preceded by a hash mark.  If
  the "styleClass" attribute is specified, render its value as the value
  of the "class" attribute.  If the "id" attribute is specified, follow
  the same steps as mentioned in the "&lt;a
  href="renderkit-summary.html#general_encoding"&gt;General
  Notes on Encoding&lt;/a&gt;" regarding the "id" attribute for UIInput
  components.  If the "disabled" attribute is specified, do not render
  the "onclick" element and assign the "disabled" attribute a value of
  true.&lt;/p&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;div class="changed_added_2_2"&gt;

  &lt;p&gt;Because this renderer is responsible for rendering its own
  children, the renderer will decide if the end tag is required or
  not based on the presence or absence of children for the
  component.&lt;/p&gt;

        &lt;p&gt;To support entering flows that are defined by both a defining
        document id and a flow id, add a component attribute to this
        component whose name is given by the value of the symbolic
        constant
        &lt;code&gt;javax.faces.event.ActionListener.TO_FLOW_DOCUMENT_ID_ATTR_NAME&lt;/code&gt;,
        and whose value is the defining document id.  For example, when
        using this component in a facelet page, the following markup
        would cause such an attribute to be added.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h:button id="start_a" value="enter flow-a" outcome="flow-a"&amp;gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;f:attribute name="to-flow-document-id" value="unique"/&amp;gt;&lt;br /&gt;
&amp;lt;/h:button&amp;gt;&lt;br /&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;/div&gt;

</description>
<component-family>javax.faces.OutcomeTarget</component-family>
<renderer-type>javax.faces.Button</renderer-type>
<renderer-class>
       com.sun.faces.renderkit.html_basic.OutcomeTargetButtonRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
        Alternate textual description of the
        element rendered by this component.
      </description>
<display-name>Alternate Text</display-name>
<icon/>
<attribute-name>alt</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;p&gt;
        Absolute or relative URL of the
        image to be displayed for this
        button.  If specified, this
        "input" element will be of type
        "image".  Otherwise, it will be
        of the type specified by the
        "type" property with a label
        specified by the "value"
        property.  &lt;span
        class="changed_added_2_0"&gt;Note
        that if the value of this
        attribute starts with "/", the
        rendered value for this
        attribute will be prefixed with
        the context-root for this
        application.&lt;/span&gt;
      &lt;/p&gt;</description>
<display-name>Image URL</display-name>
<icon/>
<attribute-name>image</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          The identifier of the page fragment which should
          be brought into focus when the target page is
          rendered. The value of this attribute is appended
          to the end of target URL following a hash (#) mark.
          This notation is part of the standard URL syntax.
        </description>
<display-name>Fragment Identifier</display-name>
<icon/>
<attribute-name>fragment</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>&lt;p class="changed_added_2_2"&gt;Disable appending the &lt;code&gt;ClientWindow&lt;/code&gt; on the rendering of this element.&lt;/p&gt;
        </description>
<display-name>Disable ClientWindow on rendered OutcomeTarget</display-name>
<icon/>
<attribute-name>disableClientWindow</attribute-name>
<attribute-class>java.lang.Boolean</attribute-class>
<attribute-extension>
<default-value>false</default-value>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
<body-tag>true</body-tag>
<jsp-ignore>true</jsp-ignore>
<tag-name>button</tag-name>
</renderer-extension>
</renderer>
<renderer>
<description>
      &lt;p&gt;&lt;span class="changed_modified_2_2"&gt;If&lt;/span&gt; the
      "styleClass", "style", "dir" or "lang" attributes are present,
      render a "span" element.  If the "styleClass" attribute is
      present, render its value as the value of the "class" attribute.
      If the "style" attribute is present, convey it unmodified.  If the
      "escape" attribute is not present, or it is present and its value
      is "true" all angle brackets should be converted to the ampersand
      xx semicolon syntax when rendering the value of the "value"
      attribute as the value of the component.  If the "escape"
      attribute is present and is "false" the value of the component
      should be rendered as text without escaping.&lt;/p&gt;

      &lt;p class="changed_added_2_2"&gt;If this element has children,
      they must be ignored by default.  Implementions may provide a
      configuration option that allows this element to render its
      children.&lt;/p&gt;</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.Text</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.TextRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
        Flag indicating that characters that are sensitive
        in HTML and XML markup must be escaped.  This flag
        is set to "true" by default.
        </description>
<display-name>Escape Characters</display-name>
<icon/>
<attribute-name>escape</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<default-value>true</default-value>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>false</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>Renders an HTML "table" element, conforming to the
      rules in the HTML 401 specification.  Render the "caption" facet, 
      if present, inside a "caption" element immediately below the "table" element.  
      If the "captionClass" attribute is specified, render its value as the value 
      of the "class" attribute on the "caption" element.  If the "captionStyle" attribute
      is specified, render its value as the value of the "style" attribute
      on the "caption" element.  If the "styleClass" attribute is specified, render 
      its value as the value of the "class" attribute.  Render the ignored-by-renderer 
      attributes in the table below.  Render the "header" facet, if present, inside of
      "thead", "tr", and "th" elements, nested in that order.  If the
      "headerClass" attribute is specifed, render its value as the value
      of the "class" attribute on the "th" element.  Render "colgroup"
      as the value of the "scope" attribute.  Render the value of the
      "columns" attribute as the value of the "colspan" attribute on the
      "th" element.  Render the "footer" facet if present, using similar
      logic to the rendering of the "header", but replacing "thead" with
      "tfoot", "th" with "td", and "headerClass" with "footerClass".
      Render the children of the &lt;code&gt;UIPanel&lt;/code&gt; component inside
      of a "tbody" element.  Render the children based on the value of
      the "columns" attribute, creating a new row each time a "columns"
      worth of children have been rendered.  For the start of each row,
      render a "tr" element.  Output the value of the "rowClasses" per
      the attribute description below.  For each child, output a "td" 
      element, attaching the value of the "columnClasses" attribute per
      the attribute description below.  Recursively encode each child.
      Close out the "td" element.  When done with the row, close out the 
      "tr" element.  If a child has "rendered==false" it is not rendered, 
      and the column counter must not be incremented.</description>
<component-family>javax.faces.Panel</component-family>
<renderer-type>javax.faces.Grid</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.GridRenderer
    </renderer-class>
<facet>
<facet-name>header</facet-name>
</facet>
<facet>
<facet-name>footer</facet-name>
</facet>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Name or code of the background color for this table.
        </description>
<display-name>Background Color</display-name>
<icon/>
<attribute-name>bgcolor</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Width (in pixels) of the border to be drawn
          around this table.
        </description>
<display-name>Table Border</display-name>
<icon/>
<attribute-name>border</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Definition of how much space the user agent should
          leave between the border of each cell and its contents.
        </description>
<display-name>Cell Padding</display-name>
<icon/>
<attribute-name>cellpadding</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Definition of how much space the user agent should
          leave between the left side of the table and the
          leftmost column, the top of the table and the top of
          the top side of the topmost row, and so on for the
          right and bottom of the table.  It also specifies
          the amount of space to leave between cells.
        </description>
<display-name>Cell Spacing</display-name>
<icon/>
<attribute-name>cellspacing</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Comma-delimited list of CSS style classes that will be applied
          to the columns of this table.  A space separated list of
          classes may also be specified for any individual column.  If
          the number of elements in this list is less than the number of
          actual column children of the UIData, no "class"
          attribute is output for each column greater than the number of
          elements in the list.  If the number of elements in the list
          is greater than the number of actual column children of the
          UIData, the elements at the posisiton in the list
          after the last column are ignored.
        </description>
<display-name>Column CSS Classes</display-name>
<icon/>
<attribute-name>columnClasses</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any footer generated for this table.
        </description>
<display-name>Footer CSS Classes</display-name>
<icon/>
<attribute-name>footerClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Code specifying which sides of the frame surrounding
          this table will be visible.  Valid values are:
          none (no sides, default value); above (top side only);
          below (bottom side only); hsides (top and bottom sides
          only); vsides (right and left sides only); lhs (left
          hand side only); rhs (right hand side only); box
          (all four sides); and border (all four sides).
        </description>
<display-name>Table Frame</display-name>
<icon/>
<attribute-name>frame</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any caption generated for this table.
        </description>
<display-name>Caption CSS Classes</display-name>
<icon/>
<attribute-name>captionClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to be applied when this caption is rendered.
        </description>
<display-name>Caption CSS Styles</display-name>
<icon/>
<attribute-name>captionStyle</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) that will be
          applied to any header generated for this table.
        </description>
<display-name>Header CSS Classes</display-name>
<icon/>
<attribute-name>headerClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Comma-delimited list of CSS style classes that will be applied
          to the rows of this table.  A space separated list of classes
          may also be specified for any individual row.  Thes styles are
          applied, in turn, to each row in the table.  For example, if
          the list has two elements, the first style class in the list
          is applied to the first row, the second to the second row, the
          first to the third row, the second to the fourth row, etc.  In
          other words, we keep iterating through the list until we reach
          the end, and then we start at the beginning again.
        </description>
<display-name>Row CSS Classes</display-name>
<icon/>
<attribute-name>rowClasses</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Code specifying which rules will appear between cells
          within this table.  Valid values are:  none (no rules,
          default value); groups (between row groups); rows
          (between rows only); cols (between columns only); and
          all (between all rows and columns).
        </description>
<display-name>Table Rules</display-name>
<icon/>
<attribute-name>rules</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Summary of this table's purpose and structure, for
          user agents rendering to non-visual media such as
          speech and Braille.
        </description>
<display-name>Table Summary</display-name>
<icon/>
<attribute-name>summary</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Width of the entire table, for visual user agents.
        </description>
<display-name>Table Width</display-name>
<icon/>
<attribute-name>width</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Comma separated list of row indices for which a new
          "tbody" element should be started (and any
          previously opened one should be ended).
        </description>
<display-name>Body Rows</display-name>
<icon/>
<attribute-name>bodyrows</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
        The number of columns to render before
        starting a new row.
        </description>
<display-name>Columns</display-name>
<icon/>
<attribute-name>columns</attribute-name>
<attribute-class>int</attribute-class>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>Intended for use in situations when only one
      UIComponent child can be nested, such as in the case of facets.
      If the "style" or "styleClass" attributes are present, and the "layout"
      attribute is present with a value of "block", render a "div" element,
      outputting the value of the "style" attribute as the value of the 
      "style" attribute and the value of the "styleClass" attribute as the
      value of the "class" attribute.  Otherwise, if the "layout" attribute
      is not present, or the "layout" attribute contains a value other than
      "block", render a "span" element, outputting the value of the 
      "style" attribute as the value of the "style" attribute, and the value 
      of the "styleClass" attribute as the value of the "class"
      attribute. </description>
<component-family>javax.faces.Panel</component-family>
<renderer-type>javax.faces.Group</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.GroupRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" property on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          The type of layout markup to use when rendering this group.
          If the value is "block" the renderer must produce an HTML
          "div" element.  Otherwise HTML "span" element must
          be produced.
        </description>
<display-name>Layout</display-name>
<icon/>
<attribute-name>layout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;Renders an HTML "input" element of type "checkbox".&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the "requestParameterMap"
      property of the &lt;code&gt;ExternalContext&lt;/code&gt;.  If there is no
      entry in the &lt;code&gt;Map&lt;/code&gt; for the "clientId" of this
      component, pass "false" to the &lt;code&gt;setSubmittedValue()&lt;/code&gt;
      method of the component, which must be an instance of
      &lt;code&gt;EditableValueHolder&lt;/code&gt;.  If there is an entry, and its
      value is equal, ignoring case and without quotes, to any of the
      Strings: "on", "yes" or "true" pass true to the
      &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the component.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;
      Render the clientId of the component as the value of the "name"
      attribute.  If the current value of the component is "true",
      output the "checked" attribute (must be rendered as checked="checked").  
      If the "styleClass" attribute is specified, render its value as the value 
      of the "class" attribute.&lt;/p&gt; &lt;/ul&gt;</description>
<component-family>javax.faces.SelectBoolean</component-family>
<renderer-type>javax.faces.Checkbox</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.CheckboxRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;&lt;span class="changed_modified_2_0
            changed_modified_2_0_rev_a"&gt;Render&lt;/span&gt; an HTML checkbox
            list.&lt;/p&gt;

      &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;See the &lt;a
      href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Decode
      Behavior for UISelectMany Components"&lt;/a&gt; section.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;
      &lt;p&gt;Render a "table" element.  If the "styleClass" is specified,
      render the value of the "styleClass" attribute as the value of the
      "class" attribute on the "table" element. If the "style", or
      "border" attributes are specified, convey them &lt;span
      class="changed_added_2_0"&gt;and render their values as the "style"
      and "border" attributes on the "table", respectively.&lt;/span&gt; If
      the "layout" attribute is specified, and its value is
      "pageDirection", render the children elements vertically,
      otherwise horizontally, in the table.  If any of the children are
      an instance of SelectItemGroup, render them as a nested table.
      Each of the children are ultimately rendererd as follows.  Render
      an "input" element of "type" "checkbox" for each child component.
      Render the "name" attribute on the "input" element with the value
      of the &lt;code&gt;clientId&lt;/code&gt; of the component.  Render an "id"
      attribute on the "input" element.  Each "id" value must be unique.
      If the current SelectItem.isDisabled() returns true, render
      "disabled" as the value of the "disabled" attribute.  Close out
      the "input" element.  Render a "label" element.  Render the "for"
      attribute of the "label" element whose value is the corresponding
      "input" element's "id" value.  
      &lt;span
      class="changed_added_2_0"&gt;If the current checkbox would be
      rendered as being checked, and there is a "selectedClass"
      attribute, append a space, followed by the value of the
      "selectedClass" attribute to any existing "class" attribute value
      on the label element.  Otherwise, render the value of the
      "selectedClass" attribute as the value of the "class" attribute on
      the label element.  If the current checkbox would be rendered as
      being not checked, and there is a "unselectedClass" attribute,
      append a space, followed by the value of the "unselectedClass"
      attribute to any existing "class" attribute value on the label
      element.  Otherwise, render the value of the "unselectedClass"
      attribute as the value of the "class" attribute on the label
      element.&lt;/span&gt;  &lt;span class="changed_modified_2_0_rev_a"&gt;If the 
      current checkbox would be rendered as being disabled, and there is a 
      "disabledClass" attribute, append a space, followed by the value 
      of the "disabledClass" attribute to any existing "class" attribute 
      value on the label element.  Otherwise, render the value of the 
      "disabledClass" attribute as the value of the "class" attribute on 
      the label element.  If the current checkbox would be rendered as 
      being enabled, and there is an "enabledClass" attribute, append a 
      space, followed by the value of the "enabledClass" attribute to any 
      existing "class" attribute value on the label element.  Otherwise, 
      render the value of the "enabledClass" attribute as the value of 
      the "class" attribute on the label element.&lt;/span&gt; Close out the starting 
      "label" element and render the label value from SelectItem.getLabel().  
      Close out the "label" element.  As an exception to the general rules about 
      how to handle the "id" attribute, render it as an attribute on the outer "table"
      element, the value of which is the &lt;code&gt;clientId&lt;/code&gt; of the
      component per the rules at the beginning of this specification.
      The value of the current SelectItem is rendered as the value of
      the "value" attribute.  Coerce the value of the currently rendered
      child to the type of the parent UISelectMany value following the
      Expression Language coercion rules, before comparing the values.
      If the value of the enclosing UISelectMany matches the current
      value, render "checked" as the value of the "checked" attribute.
      See the &lt;a href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Rendering the option
      elements" &lt;/a&gt; specification for &lt;code&gt;ListboxRenderer&lt;/code&gt; for
      more detail on how to render the "option" elements in this
      renderer.  &lt;span class="changed_modified_2_0_rev_a"&gt;Note that this
      renderer does not support &lt;code&gt;SelectItemGroup&lt;/code&gt; elements,
      so the text that describes the rendering of
      &lt;code&gt;SelectItemGroup&lt;/code&gt; does not apply to this
      renderer.&lt;/span&gt;&lt;/p&gt;

      &lt;/ul&gt;</description>
<component-family>javax.faces.SelectMany</component-family>
<renderer-type>javax.faces.Checkbox</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.SelectManyCheckboxListRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
          Width (in pixels) of the border to be drawn
          around the table containing the options list.
        </description>
<display-name>Table Border</display-name>
<icon/>
<attribute-name>border</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          CSS style class to apply to the rendered label
          on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<attribute-name>disabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to the rendered label
          on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<attribute-name>enabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to the rendered label
          on selected options.
        </description>
<display-name>Selected Label Class</display-name>
<icon/>
<attribute-name>selectedClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to the rendered label
          on unselected options.
        </description>
<display-name>Unselected Label Class</display-name>
<icon/>
<attribute-name>unselectedClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Orientation of the options list to be created.
          Valid values are "pageDirection" (list is laid
          out vertically), or "lineDirection" (list is
          laid out horizontally).  If not specified, the
          default value is "lineDirection".
        </description>
<display-name>Layout</display-name>
<icon/>
<attribute-name>layout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>&lt;p class="changed_modified_2_0"&gt; Optional
        attribute that is a literal string that is the fully qualified
        class name of a concrete class that implements
        &lt;code&gt;java.util.Collection&lt;/code&gt;, or an EL expression that
        evaluates to either 1. such a String, or 2. the
        &lt;code&gt;Class&lt;/code&gt; object itself. &lt;/p&gt;</description>
<display-name>Collection Type</display-name>
<icon/>
<attribute-name>collectionType</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;p class="changed_modified_2_0"&gt;
          Flag indicating that, if this component is activated by the user,
          The "no selection option", if any, must be hidden.&lt;/p&gt;</description>
<display-name>Hide "No Selection" Option</display-name>
<icon/>
<attribute-name>hideNoSelectionOption</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<value-expression-enabled>true</value-expression-enabled>
<jsp-ignore>true</jsp-ignore>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;&lt;span class="changed_modified_2_0
            changed_modified_2_0_rev_a
            changed_modified_2_2"&gt;Render&lt;/span&gt; an HTML option list.&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;p&gt;This section documents the decode behavior for all renderers
      that handle &lt;code&gt;UISelectMany&lt;/code&gt; or &lt;code&gt;UISelectOne&lt;/code&gt;
      components.&lt;/p&gt;

      &lt;div class="changed_added_2_2"&gt;

      &lt;p&gt;If the collection type of the collection that provides the
      value of this component is not one of the types handled by a
      converter in the package &lt;code&gt;javax.faces.convert&lt;/code&gt;, a
      converter must explicitly be specified using the appropriate code
      in the VDL.  For example, use &lt;code&gt;&amp;lt;f:converter&amp;gt;&lt;/code&gt; in
      JSP or Facelet pages.&lt;/p&gt;

      &lt;/div&gt;
      

      &lt;ul&gt;

      &lt;p&gt;&lt;a name="decodeMany"&gt;Decode Behavior for
      &lt;code&gt;UISelectMany&lt;/code&gt; components&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

        &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the
        "requestParameterValuesMap" property of the
        &lt;code&gt;ExternalContext&lt;/code&gt;.  If the &lt;code&gt;Map&lt;/code&gt; contains
        an entry for the "clientId" of the component, pass the value of
        the entry, cast to a &lt;code&gt;String []&lt;/code&gt;, to the
        &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the component, which
        must be an &lt;code&gt;EditableValueHolder&lt;/code&gt;.  If the
        &lt;code&gt;Map&lt;/code&gt; does not contain an entry, create an empty
        &lt;code&gt;String&lt;/code&gt; array and call
        &lt;code&gt;setSubmittedValue()&lt;/code&gt; with it.&lt;/p&gt;

        &lt;p class="changed_modified_2_0"&gt;Please check the javadoc for &lt;a
        href="../../javadocs/javax/faces/component/UISelectMany.html#getConvertedvalue"&gt;UISelectMany.getConvertedValue()&lt;/a&gt;
        for additional requirements for renderers that render this kind
        of component.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;&lt;a name="decodeOne"&gt;Decode Behavior for
      &lt;code&gt;UISelectOne&lt;/code&gt; components&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the "requestParameterMap"
      property of the &lt;code&gt;ExternalContext&lt;/code&gt;.  If there is a
      &lt;code&gt;Map&lt;/code&gt; entry for the "clientId" property of the
      component, pass it to the &lt;code&gt;setSubmittedValue()&lt;/code&gt; method
      of the component. &lt;span class="changed_added_2_0"&gt;If the
      &lt;code&gt;Map&lt;/code&gt; does not contain an entry, call
      &lt;code&gt;setSubmittedValue()&lt;/code&gt; passing an empty
      &lt;code&gt;String&lt;/code&gt; as the argument.&lt;/span&gt; &lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Render an HTML "select" element. Render the clientId of
      the component as the value of the "name" attribute.  If the "styleClass"
      attribute is specified, render its value as the value of the "class"
      attribute on the "select" element.  If the component is a
      &lt;code&gt;UISelectMany&lt;/code&gt; instance, render "multiple" as the value of the
      "multiple" attribute.  If the "size" attribute is specified, render its
      value as the value of the "size" attribute.  Otherwise use the number of
      items as the value of the "size" attribute.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;&lt;a name="option"&gt;Rendering the "option" elements&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;The only valid children of this component are
      &lt;code&gt;UISelectItem&lt;/code&gt; or &lt;code&gt;UISelectItems&lt;/code&gt;
      instances. Iterate over the children of this component, and accrue
      a list of &lt;code&gt;javax.faces.model.SelectItem&lt;/code&gt; instances.
      &lt;span class="changed_added_2_0"&gt;If the current child is a
      &lt;code&gt;SelectItem&lt;/code&gt; whose &lt;code&gt;noSelctionProperty&lt;/code&gt; is
      &lt;code&gt;true&lt;/code&gt;, &lt;b&gt;and&lt;/b&gt; the &lt;code&gt;UISelectOne&lt;/code&gt; or
      &lt;code&gt;UISelectMany&lt;/code&gt; parent of this option has one or more
      selected values that &lt;b&gt;are not&lt;/b&gt; the "no selection"
      &lt;code&gt;SelectItem&lt;/code&gt;, &lt;b&gt;and&lt;/b&gt; the component has a
      "hideNoSelectionLabel" attribute whose value is &lt;code&gt;true&lt;/code&gt;,
      then the current option, which is the "no selection" option, must
      not be rendered.&lt;/span&gt; If the current child is a
      &lt;code&gt;UISelectItem&lt;/code&gt; create a &lt;code&gt;SelectItem&lt;/code&gt;instance
      from its &lt;code&gt;itemValue, itemLabel&lt;/code&gt;, &lt;code
      class="changed_added_2_0_rev_a"&gt;itemEscaped&lt;/code&gt;, and
      &lt;code&gt;itemDescription&lt;/code&gt; properties, add it to the list.  If
      the current child is a &lt;code&gt;UISelectItems&lt;/code&gt; instance, call
      its &lt;code&gt;getValue()&lt;/code&gt; method.  If the result is a
      &lt;code&gt;SelectItem&lt;/code&gt; bean, add it to the list.  If the result
      is an array of &lt;code&gt;SelectItem&lt;/code&gt; beans, add each one to the
      list.  If the result is a &lt;code&gt;Collection&lt;/code&gt; of
      &lt;code&gt;SelectItem&lt;/code&gt; beans, add each one to the list.  If the
      result is a &lt;code&gt;Map&lt;/code&gt;, create a &lt;code&gt;SelectItem&lt;/code&gt;
      bean for each entry in the &lt;code&gt;Map&lt;/code&gt; using the key as the
      label, the value as the value, and &lt;code&gt;null&lt;/code&gt; as the
      description.&lt;/p&gt;

      &lt;p&gt;&lt;span class="changed_modified_2_0_rev_a"&gt;Iterate over the list
      of &lt;code&gt;SelectItem&lt;/code&gt; beans.  If the current element is a
      &lt;code&gt;SelectItemGroup&lt;/code&gt;, render an "optgroup" element with a
      "label" attribute, the value of which is the "label" property from
      the current element, then call &lt;code&gt;getSelectItems()&lt;/code&gt; and
      render each element as below.  If the current element is not a
      &lt;code&gt;SelectItemGroup&lt;/code&gt;, render an "option" element.  &lt;span
      class="changed_modified_2_2"&gt;In both the case of the "option"
      element or the "optgroup" element, the implementation must pass
      the &lt;code&gt;UISelectItem&lt;/code&gt; or &lt;code&gt;UISelectItems&lt;/code&gt;
      corresponding to the &lt;code&gt;SelectItem&lt;/code&gt; bean to the call to
      &lt;code&gt;ResponseWriter.startElement()&lt;/code&gt;&lt;/span&gt;.  Follow the
      conversion rules in the spec to obtain a renderable
      &lt;code&gt;String&lt;/code&gt; from the "value" property of the current
      element, render that as the value of the "value" atribute.  Now it
      is time to see if the current element is the selected value.  Call
      its &lt;code&gt;getSubmittedValue()&lt;/code&gt; method, casting the result to
      an &lt;code&gt;Object []&lt;/code&gt;, otherwise the component must be a
      &lt;code&gt;UISelectOne&lt;/code&gt; instance, call its
      &lt;code&gt;getSubmittedValue()&lt;/code&gt; method and create an &lt;code&gt;Object
      []&lt;/code&gt; around the result.  Determine the type of the resultant
      array, if the resultant array is non-null, otherwise the type is
      &lt;code&gt;String&lt;/code&gt;.  Coerce the current item value to this type
      following the Expression Language coercion rules.  If the
      resultant array is non-null, we look in the array for a
      value&lt;/span&gt; that, when we pass the renderable value to its
      &lt;code&gt;equals()&lt;/code&gt; method, it returns &lt;code&gt;true&lt;/code&gt;,
      meaning the current element is selected.  If the resultant array
      is &lt;code&gt;null&lt;/code&gt;, if the component is a
      &lt;code&gt;UISelectMany&lt;/code&gt;, call its &lt;code&gt;getValue()&lt;/code&gt;
      method.  If the result is a &lt;code&gt;List&lt;/code&gt; obtain the values in
      the list as an array.  Otherwise, the component must be a
      &lt;code&gt;UISelectOne&lt;/code&gt; instance.  Call its
      &lt;code&gt;getValue()&lt;/code&gt; method, which must be an Object array.
      Look for an element in the resultant array that, 1. when we pass
      the renderable value to its &lt;code&gt;equals()&lt;/code&gt; method, it
      returns &lt;code&gt;true&lt;/code&gt; , or 2. if the renderable value is null,
      and there is a null element in the array, also conclude that the
      current element is selected.  Otherwise the current element is not
      selected.  Now, if the current value is selected, write out an
      HTML boolean property "selected".  If the current
      SelectItem.isDisabled() returns true, render "disabled" as the
      value of the "disabled" attribute.  &lt;span
      class="changed_added_2_0_rev_a"&gt;If the value of the
      &lt;code&gt;escape&lt;/code&gt; property is true, use the
      &lt;code&gt;writeText()&lt;/code&gt; method of &lt;code&gt;ResponseWriter&lt;/code&gt; to
      write out the value of the &lt;code&gt;label&lt;/code&gt; property.
      Otherwise, use the &lt;code&gt;write()&lt;/code&gt; method of the
      &lt;code&gt;ResponseWriter&lt;/code&gt; to do so.&lt;/span&gt;&lt;/p&gt;

      &lt;/ul&gt;

&lt;/ul&gt;</description>
<component-family>javax.faces.SelectMany</component-family>
<renderer-type>javax.faces.Listbox</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.ListboxRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
         CSS style class to apply to the rendered label
         on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<attribute-name>disabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
         CSS style class to apply to the rendered label
         on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<attribute-name>enabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
        Number of available options to be shown at all times.
        If not specified, all available options are shown.
        </description>
<display-name>Size</display-name>
<icon/>
<attribute-name>size</attribute-name>
<attribute-class>int</attribute-class>
</attribute>
<attribute>
<description>&lt;p class="changed_modified_2_0"&gt; Optional
        attribute that is a literal string that is the fully qualified
        class name of a concrete class that implements
        &lt;code&gt;java.util.Collection&lt;/code&gt;, or an EL expression that
        evaluates to either 1. such a String, or 2. the
        &lt;code&gt;Class&lt;/code&gt; object itself. &lt;/p&gt;</description>
<display-name>Collection Type</display-name>
<icon/>
<attribute-name>collectionType</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;p class="changed_modified_2_0"&gt;
          Flag indicating that, if this component is activated by the user,
          The "no selection option", if any, must be hidden.&lt;/p&gt;</description>
<display-name>Hide "No Selection" Option</display-name>
<icon/>
<attribute-name>hideNoSelectionOption</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<value-expression-enabled>true</value-expression-enabled>
<jsp-ignore>true</jsp-ignore>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;&lt;span
            class="changed_modified_2_0"&gt;Render&lt;/span&gt; an HTML option
            list.&lt;/p&gt;

      &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;See the &lt;a
      href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Decode
      Behavior for UISelectMany Components"&lt;/a&gt; section.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Render an HTML "select" element.  Render the clientId of
      the component as the value of the "name" attribute.  If the "styleClass"
      attribute is specified, render its value as the value of the "class"
      attribute on the "select" element. If the component
      to be rendered is a UISelectMany, render "multiple" as the value of
      the "multiple" attribute.  Render "1" as the value of the "size"
      attribute.  See the &lt;a
      href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Rendering the option
      elements" &lt;/a&gt; specification for &lt;code&gt;ListboxRenderer&lt;/code&gt; for
      more detail on how to render the "option" elements in this
      renderer.&lt;/p&gt;

      &lt;/ul&gt;</description>
<component-family>javax.faces.SelectMany</component-family>
<renderer-type>javax.faces.Menu</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.MenuRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
         CSS style class to apply to the rendered label
         on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<attribute-name>disabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
         CSS style class to apply to the rendered label
         on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<attribute-name>enabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>&lt;p class="changed_modified_2_0"&gt; Optional
        attribute that is a literal string that is the fully qualified
        class name of a concrete class that implements
        &lt;code&gt;java.util.Collection&lt;/code&gt;, or an EL expression that
        evaluates to either 1. such a String, or 2. the
        &lt;code&gt;Class&lt;/code&gt; object itself. &lt;/p&gt;</description>
<display-name>Collection Type</display-name>
<icon/>
<attribute-name>collectionType</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;p class="changed_modified_2_0"&gt;
          Flag indicating that, if this component is activated by the user,
          The "no selection option", if any, must be hidden.&lt;/p&gt;</description>
<display-name>Hide "No Selection" Option</display-name>
<icon/>
<attribute-name>hideNoSelectionOption</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<value-expression-enabled>true</value-expression-enabled>
<jsp-ignore>true</jsp-ignore>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;Render an HTML option list.&lt;/p&gt;

      &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;See the &lt;a
      href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Decode
      Behavior for UISelectOne Components"&lt;/a&gt; section.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;
      &lt;p&gt;Render an HTML "select" element.  Render the clientId of
      the component as the value of the "name" attribute.  If the "styleClass"
      attribute is specified, render its value as the value of the "class"
      attribute on the "select" element. If the component
      to be rendered is a UISelectMany, render "multiple" as the value of
      the "multiple" attribute.  If the "size" attribute is specified,
      render its value as the value of the "size" attribute.  Otherwise
      use the number of items as the value of the "size" attribute.  See
      the &lt;a href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Rendering the option
      elements" &lt;/a&gt; specification for &lt;code&gt;ListboxRenderer&lt;/code&gt; for
      more detail on how to render the "option" elements in this
      renderer.&lt;/p&gt;

      &lt;/ul&gt;</description>
<component-family>javax.faces.SelectOne</component-family>
<renderer-type>javax.faces.Listbox</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.ListboxRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
         CSS style class to apply to the rendered label
         on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<attribute-name>disabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
         CSS style class to apply to the rendered label
         on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<attribute-name>enabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
        Number of available options to be shown at all times.
        If not specified, all available options are shown.
        </description>
<display-name>Size</display-name>
<icon/>
<attribute-name>size</attribute-name>
<attribute-class>int</attribute-class>
</attribute>
<attribute>
<description>&lt;p class="changed_modified_2_0"&gt;
          Flag indicating that, if this component is activated by the user,
          The "no selection option", if any, must be hidden.&lt;/p&gt;</description>
<display-name>Hide "No Selection" Option</display-name>
<icon/>
<attribute-name>hideNoSelectionOption</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<value-expression-enabled>true</value-expression-enabled>
<jsp-ignore>true</jsp-ignore>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;Render an HTML option list.&lt;/p&gt;

      &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;See the &lt;a
      href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Decode
      Behavior for UISelectOne Components"&lt;/a&gt; section.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Render an HTML "select" element.  Render the clientId of the
      component as the value of the "name" attribute.  If the
      "styleClass" attribute is specified, render its value as the value
      of the "class" attribute on the "select" element. If the component
      to be rendered is a UISelectMany, render "true" as the value of
      the "multiple" attribute.  Use the number of items as the value of
      the "size" attribute.  See the &lt;a
      href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Rendering
      the option elements" &lt;/a&gt; specification for
      &lt;code&gt;ListboxRenderer&lt;/code&gt; for more detail on how to render the
      "option" elements in this renderer.&lt;/p&gt;

      &lt;/ul&gt;</description>
<component-family>javax.faces.SelectOne</component-family>
<renderer-type>javax.faces.Menu</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.MenuRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
         CSS style class to apply to the rendered label
         on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<attribute-name>disabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
         CSS style class to apply to the rendered label
         on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<attribute-name>enabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>&lt;p class="changed_modified_2_0"&gt;
          Flag indicating that, if this component is activated by the user,
          The "no selection option", if any, must be hidden.&lt;/p&gt;</description>
<display-name>Hide "No Selection" Option</display-name>
<icon/>
<attribute-name>hideNoSelectionOption</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<value-expression-enabled>true</value-expression-enabled>
<jsp-ignore>true</jsp-ignore>
</attribute-extension>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;p&gt;&lt;span
            class="changed_modified_2_0 changed_modified_2_0_rev_a"&gt;Render&lt;/span&gt; a set of html
            "input" elements of type "radio".&lt;/p&gt;

      &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;See the &lt;a
      href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Decode
      Behavior for UISelectOne Components"&lt;/a&gt; section.&lt;/p&gt;

      &lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

      &lt;p&gt;Render a "table" element. If the "styleClass" is specified,
      render the value of the "styleClass" attribute as the value of the
      "class" attribute on the "table" element. If the "style", "border"
      attributes are specified, convey them &lt;span
      class="changed_added_2_0"&gt;and render their values as the "style"
      and "border" attributes on the "table", respectively.&lt;/span&gt;. If
      the "layout" attribute is specified, and its value is
      "pageDirection", render the children elements vertically,
      otherwise horizontally, in the table.  If any of the children are
      an instance of SelectItemGroup, render them as a nested table.
      Each of the children are ultimately rendered as follows.  Render
      an "input" element of "type" "radio" for each child component.
      Render the "name" attribute on the "input" element with the value
      of the &lt;code&gt;clientId&lt;/code&gt; of the component.  Render an "id"
      attribute on the "input" element.  Each "id" value must be unique.
      If the current SelectItem.isDisabled() returns true, render
      "disabled" as the value of the "disabled" attribute.  Close out
      the "input" element.  Render a "label" element.  Render the "for"
      attribute of the "label" element whose value is the corresponding
      "input" element's "id" value.  Render any "style" as the "class"
      attribute on the "label" element.  Close out the starting "label"
      element and render the label value from SelectItem.getLabel().
      Close out the "label" element.  As an exception to the general
      rules about how to handle the "id" attribute, render it as an
      attribute on the outer "table" element, the value of which is the
      &lt;code&gt;clientId&lt;/code&gt; of the component per the rules at the
      beginning of this specification.  Coerce the value of the
      currently rendered child to the type of the parent UISelectOne
      value using the Expression Language coercion rules before
      comparing the values.  If the value of the currently rendered
      child is equal to the value of the parent UISelectOne, render an
      appropriate HTML boolean value indicating "checked" for the
      enclosing "input".  See the &lt;a
      href="javax.faces.SelectManyjavax.faces.Listbox.html"&gt;"Rendering the option elements" &lt;/a&gt;
      specification for &lt;code&gt;ListboxRenderer&lt;/code&gt; for more detail on
      how to render the "option" elements in this renderer.  &lt;span
      class="changed_modified_2_0_rev_a"&gt;Note that this renderer does
      not support &lt;code&gt;SelectItemGroup&lt;/code&gt; elements, so the text
      that describes the rendering of &lt;code&gt;SelectItemGroup&lt;/code&gt; does
      not apply to this renderer.&lt;/span&gt;&lt;/p&gt;

      &lt;/ul&gt;</description>
<component-family>javax.faces.SelectOne</component-family>
<renderer-type>javax.faces.Radio</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.RadioRenderer
    </renderer-class>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Access key that, when pressed, transfers focus
          to this element.
        </description>
<display-name>Access Key</display-name>
<icon/>
<attribute-name>accesskey</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus.
        </description>
<display-name>Focus Off Script</display-name>
<icon/>
<attribute-name>onblur</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element receives focus.
        </description>
<display-name>Focus On Script</display-name>
<icon/>
<attribute-name>onfocus</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
        </description>
<display-name>Tab Index</display-name>
<icon/>
<attribute-name>tabindex</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this element must never receive focus or
          be included in a subsequent submit.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as disabled="disabled".            
        </description>
<display-name>Disabled Flag</display-name>
<icon/>
<attribute-name>disabled</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when this element loses focus
          and its value has been modified since gaining focus.
        </description>
<display-name>Input Change Script</display-name>
<icon/>
<attribute-name>onchange</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
<behavior/>
<behavior>valueChange</behavior>
<default-behavior>true</default-behavior>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when text within this
          element is selected by the user.
        </description>
<display-name>Text Select Script</display-name>
<icon/>
<attribute-name>onselect</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Flag indicating that this component will prohibit changes by
          the user.  The element may receive focus unless it has also
          been disabled.  A value of false causes
          no attribute to be rendered, while a value of true causes the
          attribute to be rendered as readonly="readonly".
        </description>
<display-name>Read Only Flag</display-name>
<icon/>
<attribute-name>readonly</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          A localized user presentable name for this component.
        </description>
<display-name>Label</display-name>
<icon/>
<attribute-name>label</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<renderer-attribute-ignore>true</renderer-attribute-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;p class="changed_modified_2_0"&gt;
          Flag indicating that, if this component is activated by the user,
          The "no selection option", if any, must be hidden.&lt;/p&gt;</description>
<display-name>Hide "No Selection" Option</display-name>
<icon/>
<attribute-name>hideNoSelectionOption</attribute-name>
<attribute-class>boolean</attribute-class>
<attribute-extension>
<value-expression-enabled>true</value-expression-enabled>
<jsp-ignore>true</jsp-ignore>
</attribute-extension>
</attribute>
<attribute>
<description>
          Width (in pixels) of the border to be drawn
          around the table containing the options list.
        </description>
<display-name>Table Border</display-name>
<icon/>
<attribute-name>border</attribute-name>
<attribute-class>int</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          CSS style class to apply to the rendered label
          on disabled options.
        </description>
<display-name>Disabled Label Class</display-name>
<icon/>
<attribute-name>disabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style class to apply to the rendered label
          on enabled options.
        </description>
<display-name>Enabled Label Class</display-name>
<icon/>
<attribute-name>enabledClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Orientation of the options list to be created.
          Valid values are "pageDirection" (list is laid
          out vertically), or "lineDirection" (list is
          laid out horizontally).  If not specified, the
          default value is "lineDirection".
        </description>
<display-name>Layout</display-name>
<icon/>
<attribute-name>layout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<renderer-extension>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;div class="changed_added_2_0"&gt;

&lt;p&gt;Renders a composite component.&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

&lt;p&gt;No action is required during decode for this renderer.&lt;/p&gt;

&lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

	&lt;ul&gt;

           &lt;p&gt;Ask the argument &lt;code&gt;UIComponent&lt;/code&gt; for its facet
           under the key &lt;code&gt;UIComponent.COMPOSITE_FACET_NAME&lt;/code&gt;.
           Such a facet must exist.  Call the &lt;code&gt;encodeAll()&lt;/code&gt;
           method on this facet.&lt;/p&gt;

	&lt;/ul&gt;



&lt;/div&gt;</description>
<component-family>javax.faces.NamingContainer</component-family>
<renderer-type>javax.faces.Composite</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.CompositeRenderer
    </renderer-class>
<renderer-extension>
<ignore-all>true</ignore-all>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;div class="changed_added_2_0"&gt;

&lt;p&gt;&lt;span class="changed_modified_2_0_rev_a"&gt;Renders&lt;/span&gt; a facet at
this particular point in the composite component VDL page.&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

&lt;p&gt;No action is required during decode for this renderer.&lt;/p&gt;

&lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

&lt;p&gt;&lt;code&gt;encodeBegin()&lt;/code&gt; and &lt;code&gt;encodeEnd()&lt;/code&gt; must take no
action for this renderer.  Due to the specification of the
&lt;code&gt;&amp;lt;composite:insertChildren&amp;gt;&lt;/code&gt; tag handler, the component
passed to the &lt;code&gt;encodeChildern()&lt;/code&gt; method of this renderer will
be the component with &lt;code&gt;component-family&lt;/code&gt;
&lt;code&gt;javax.faces.Output&lt;/code&gt; and &lt;code&gt;renderer-type&lt;/code&gt; equal to
the one for this renderer.  The implementation of
&lt;code&gt;&lt;span class="changed_modified_2_0_rev_a"&gt;encodeChildren()&lt;/span&gt;&lt;/code&gt;, must obtain the component attribute value
under the key given by the value of the symbolic constant
&lt;code&gt;UIComponent.FACETS_KEY&lt;/code&gt; from the attributes map of the
argument component.  If not found, throw &lt;code&gt;IOException&lt;/code&gt;.  This
value is referred to as "facetName" for discission.  Find the closest
ancestor composite component in which the argument component is nested.
If no such component can be found, thow &lt;code&gt;IOException&lt;/code&gt;.
Otherwise, get the facet whose name is "facetName".  If found call
&lt;code&gt;encodeAll()&lt;/code&gt; on the facet.&lt;/p&gt;



&lt;/div&gt;</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.CompositeFacet</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.CompositeFacetRenderer
    </renderer-class>
<renderer-extension>
<ignore-all>true</ignore-all>
</renderer-extension>
</renderer>
<renderer>
<description> 

            &lt;p class="changed_modified_2_0"&gt;&lt;span
            class="changed_modified_2_0_rev_a
            changed_modified_2_1"&gt;Render&lt;/span&gt; the markup for a
            &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element that renders the script
            &lt;code&gt;Resource&lt;/code&gt; specified by the optional
            &lt;code&gt;name&lt;/code&gt; attribute and &lt;code&gt;library&lt;/code&gt;
            attributes.&lt;/p&gt;

&lt;p class="changed_modified_2_0"&gt;The implementation of this renderer must
have a &lt;a target="_"
href="../../javadocs/javax/faces/event/ListenerFor.html"&gt;&lt;code&gt;@ListenerFor&lt;/code&gt;&lt;/a&gt;
annotation attached to it, at the class level, declaring &lt;a target="_"
href="../../javadocs/javax/faces/event/PostAddToViewEvent.html"&gt;&lt;code&gt;PostAddToViewEvent.class&lt;/code&gt;&lt;/a&gt;
as the value of the &lt;code&gt;systemEventClass&lt;/code&gt; attribute.  The
presence of this annotation on a renderer implies the renderer
implements &lt;a target="_"
href="../../javadocs/javax/faces/event/ComponentSystemEventListener.html"&gt;&lt;code&gt;ComponentSystemEventListener&lt;/code&gt;&lt;/a&gt;,
which this renderer must do.  The implementation of
&lt;code&gt;processEvent()&lt;/code&gt; must extract the &lt;code&gt;UIComponent&lt;/code&gt;
from the argument event and look for the presence of the key
"&lt;code&gt;target&lt;/code&gt;" in the component's attribute &lt;code&gt;Map&lt;/code&gt;.  If
and only if such a key is present, the implementation of
&lt;code&gt;processEvent()&lt;/code&gt; must pass the component to &lt;a target="_"
href="../../javadocs/javax/faces/component/UIViewRoot.html#addComponentResource(javax.faces.context.FacesContext,%20javax.faces.component.UIComponent)"&gt;&lt;code&gt;UIViewRoot.addComponentResource()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

      &lt;p class="changed_modified_2_0"&gt;Decode Behavior&lt;/p&gt;

      &lt;ul class="changed_modified_2_0"&gt;

&lt;p&gt;No action is required during decode for this renderer.&lt;/p&gt;

&lt;/ul&gt;

      &lt;p class="changed_modified_2_0"&gt;Encode Behavior&lt;/p&gt;

      &lt;ul class="changed_modified_2_0"&gt;

        &lt;p&gt;&lt;a name="ResourceCommonGetResource"&gt;Common Algorithm for Obtaining A Resource to Render&lt;/a&gt;&lt;/p&gt;

        &lt;ul&gt;

          &lt;p&gt;This algorithm is used by all resource renderers to obtain
          a &lt;code&gt;Resource&lt;/code&gt; instance which is then rendered in a
          specific way depending on what kind of renderer is doing the
          encoding.&lt;/p&gt;

          &lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;Look in the component attribute &lt;code&gt;Map&lt;/code&gt; for a
	  value under the key &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Look in the component attribute &lt;code&gt;Map&lt;/code&gt; for a
	  value under the key &lt;em&gt;library&lt;/em&gt;.  This attribute is
	  optional, therefore, &lt;em&gt;library&lt;/em&gt; may be
	  &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Create the resource by calling
	  &lt;code&gt;Application.getResourceHandler.createResource(&lt;em&gt;name&lt;/em&gt;,
	  &lt;em&gt;library&lt;/em&gt;);&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

	  &lt;/p&gt;&lt;/li&gt;

          &lt;/ul&gt;

        &lt;/ul&gt;

        &lt;p&gt;&lt;a name="ResourceCommonEncode"&gt;Common Encode Behavior&lt;/a&gt;&lt;/p&gt;

      &lt;ul&gt;

       &lt;p&gt;This algorithm is used by all resource renderers to render the
       resource.&lt;/p&gt;

        &lt;p&gt;&lt;code&gt;encodeBegin()&lt;/code&gt; must take no action.&lt;/p&gt;

        &lt;p&gt;Because this renderer returns &lt;code&gt;true&lt;/code&gt; from
        &lt;code&gt;getRendersChildren()&lt;/code&gt;, the &lt;code&gt;encodeChildren()
        method must take the following action.&lt;/code&gt;&lt;/p&gt;

        	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;If there is no &lt;em&gt;name&lt;/em&gt; attribute, and the
	  argument &lt;code&gt;component&lt;/code&gt; has no children, and
	  &lt;code&gt;ProjectStage&lt;/code&gt; is not
	  &lt;code&gt;ProjectStage.Production&lt;/code&gt;, add a
	  &lt;code&gt;FacesMessage&lt;/code&gt; for this component's clientId to the
	  &lt;code&gt;FacesContext&lt;/code&gt; stating that if no name attribute is
	  present, and no body content is present either, then the user
	  should take action to correct this problem.  In this case,
	  &lt;code&gt;encodeChildren()&lt;/code&gt; must take no further
	  action.&lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;If there is no &lt;em&gt;name&lt;/em&gt; attribute and the argument
	  &lt;code&gt;component&lt;/code&gt; &lt;b&gt;does&lt;/b&gt; have children, the renderer
	  must ensure that those children are encoded as usual.&lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;If there &lt;b&gt;is&lt;/b&gt; a &lt;em&gt;name&lt;/em&gt; attribute and the
	  argument &lt;code&gt;component&lt;/code&gt; &lt;b&gt;does&lt;/b&gt; have children, the
	  renderer must log a descriptive localized message stating that
	  the child content will be ignored.  The resource referenced by
	  the &lt;em&gt;name&lt;/em&gt; attribute will be rendered in
	  &lt;code&gt;encodeEnd()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;If there &lt;b&gt;is&lt;/b&gt; a &lt;em&gt;name attribute&lt;/em&gt; and the
	  argument &lt;code&gt;component&lt;/code&gt; &lt;b&gt;does not&lt;/b&gt; have children,
	  &lt;code&gt;encodeChildren()&lt;/code&gt; must take no action.&lt;/p&gt;&lt;/li&gt;

	&lt;/ul&gt;

       &lt;p&gt;&lt;code&gt;encodeEnd()&lt;/code&gt; must take specific action based on
       the specific kind of resource being rendered.&lt;/p&gt;

      &lt;/ul&gt;

       &lt;p&gt;Use the algorithm &lt;em&gt;Common Encode Behavior&lt;/em&gt; for
       &lt;code&gt;encodeBegin()&lt;/code&gt;, &lt;code&gt;encodeChildren()&lt;/code&gt; and
       &lt;code&gt;getRendersChildren()&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;For &lt;code&gt;encodeEnd()&lt;/code&gt;, use the algorithm &lt;em&gt;Common
        Algorithm for Obtaining A Resource to Render&lt;/em&gt; above to
        obtain a reference to the &lt;code&gt;Resource&lt;/code&gt; to be
        encoded.&lt;/p&gt;

        &lt;p&gt;If this is NOT the first time this &lt;code&gt;Resource&lt;/code&gt; has
        been referenced on this request take no action and return.&lt;/p&gt;

        &lt;p&gt;Render a script element.  &lt;span
        class="changed_modified_2_1"&gt;Call
        &lt;code&gt;resource.getRequestPath()&lt;/code&gt;.  If the result contains
        a query string, take care to handle it correctly.  Pass the
        request path to a call to &lt;code&gt;encodeResourceURL()&lt;/code&gt; on
        the &lt;code&gt;ExternalContext&lt;/code&gt;.  Use the result as the value
        of the "src" attribute.  Use the result from calling
        &lt;code&gt;resource.getContentType()&lt;/code&gt; as the value of the
        "type" attribute.&lt;/span&gt;&lt;/p&gt;

       &lt;/ul&gt;


</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.resource.Script</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.ScriptRenderer
    </renderer-class>
<attribute>
<description>&lt;div class="changed_added_2_0"&gt;&lt;p&gt;The &lt;em&gt;libraryName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;</description>
<display-name>Library Name</display-name>
<icon/>
<attribute-name>library</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
<tag-attribute>true</tag-attribute>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_0"&gt;&lt;p&gt;The
                &lt;em&gt;resourceName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;&lt;div class="changed_modified_2_0_rev_a"&gt;
                &lt;p&gt;This attribute is required&lt;/p&gt;&lt;/div&gt;</description>
<display-name>Resource Name</display-name>
<icon/>
<attribute-name>name</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>true</required>
<tag-attribute>true</tag-attribute>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_0"&gt;&lt;p&gt;The
                    &lt;em&gt;target&lt;/em&gt; area for which this resource will be
                    rendered.  For example, &lt;em&gt;target="head"&lt;/em&gt; would
                    cause the resource to be rendered within the
                    &lt;em&gt;head&lt;/em&gt; element.  &lt;span
                    class="changed_modified_2_0_rev_a"&gt;If no value is
                    specififed, the script element is rendered at the
                    same point in the view where the tag is
                    located.&lt;/span&gt; &lt;span
                    class="changed_modified_2_0_rev_a"&gt;Currently
                    supported values for this attribute are "head",
                    "body", and "form".&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</description>
<display-name>Target</display-name>
<icon/>
<attribute-name>target</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
<tag-attribute>true</tag-attribute>
</attribute-extension>
</attribute>
<renderer-extension>
<jsp-ignore>true</jsp-ignore>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>

&lt;p&gt;&lt;span class="changed_modified_2_0 changed_modified_2_0_rev_a
changed_modified_2_1 changed_modified_2_2"&gt;Render&lt;/span&gt; the markup for a
&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element that renders the style
&lt;code&gt;Resource&lt;/code&gt; specified by the optional &lt;code&gt;name&lt;/code&gt; and
&lt;code&gt;library&lt;/code&gt; attributes.&lt;/p&gt;

      &lt;p class="changed_modified_2_0"&gt;Decode Behavior&lt;/p&gt;

      &lt;ul class="changed_modified_2_0"&gt;

&lt;p&gt;No action is required during decode for this renderer.&lt;/p&gt;

&lt;/ul&gt;

      &lt;p class="changed_modified_2_0"&gt;Encode Behavior&lt;/p&gt;

      &lt;ul class="changed_modified_2_0"&gt;

       &lt;p&gt;Use the algorithm &lt;em&gt;Common Encode Behavior&lt;/em&gt; for
       &lt;code&gt;encodeBegin()&lt;/code&gt;, &lt;code&gt;encodeChildren()&lt;/code&gt; and
       &lt;code&gt;getRendersChildren()&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;For &lt;code&gt;encodeEnd()&lt;/code&gt;, use the algorithm &lt;a
        href="javax.faces.Outputjavax.faces.resource.Script.html#ResourceCommonGetResource"&gt;Common
        Algorithm for Obtaining A Resource to Render&lt;/a&gt; to obtain a
        reference to the &lt;code&gt;Resource&lt;/code&gt; to be encoded.&lt;/p&gt;

&lt;p&gt;Output a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element.  Use the result from
calling &lt;code&gt;resource.getRequestPath()&lt;/code&gt; as the value of the
"href" attribute, the result from calling
&lt;code&gt;resource.getContentType()&lt;/code&gt; as the value of the "type"
attribute, and the literal string "stylesheet" as the value of the "rel"
attribute.  &lt;span class="changed_modified_2_2"&gt;If this tag has a "media"
attribute, use its value as the value of the "media" attribute.
Otherwise, do not render a media attribute.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;The implementation of this renderer must have a &lt;a target="_"
href="../../javadocs/javax/faces/event/ListenerFor.html"&gt;&lt;code&gt;@ListenerFor&lt;/code&gt;&lt;/a&gt;
annotation attached to it, at the class level, declaring &lt;a target="_"
href="../../javadocs/javax/faces/event/PostAddToViewEvent.html"&gt;&lt;code&gt;PostAddToViewEvent.class&lt;/code&gt;&lt;/a&gt;
as the value of the &lt;code&gt;systemEventClass&lt;/code&gt; attribute.  The presence of
this annotation on a renderer implies the renderer implements &lt;a target="_"
href="../../javadocs/javax/faces/event/ComponentSystemEventListener.html"&gt;&lt;code&gt;ComponentSystemEventListener&lt;/code&gt;&lt;/a&gt;,
which this renderer must do.  The implementation of
&lt;code&gt;processEvent()&lt;/code&gt; must extract the &lt;code&gt;UIComponent&lt;/code&gt;
from the argument event pass it to &lt;a target="_"
href="../../javadocs/javax/faces/component/UIViewRoot.html#addComponentResource(javax.faces.context.FacesContext,%20javax.faces.component.UIComponent,%20java.lang.String)"&gt;&lt;code&gt;UIViewRoot.addComponentResource()&lt;/code&gt;&lt;/a&gt;, specifying
the literal string "&lt;code&gt;head&lt;/code&gt;" as the last argument.&lt;/p&gt;

&lt;p&gt;The stylsheet renderer must ensure that any stylesheets are included in the &amp;lt;head&amp;gt; of the document. 
&lt;/p&gt;

&lt;/ul&gt;

</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.resource.Stylesheet</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.StylesheetRenderer
    </renderer-class>
<attribute>
<description>&lt;div class="changed_added_2_0"&gt;&lt;p&gt;The &lt;em&gt;libraryName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;</description>
<display-name>Library Name</display-name>
<icon/>
<attribute-name>library</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
<tag-attribute>true</tag-attribute>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_0"&gt;&lt;p&gt;The
                &lt;em&gt;resourceName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;&lt;div class="changed_modified_2_1"&gt;
                &lt;p&gt;This attribute is required&lt;/p&gt;&lt;/div&gt;</description>
<display-name>Resource Name</display-name>
<icon/>
<attribute-name>name</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>true</required>
<tag-attribute>true</tag-attribute>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_1"&gt;&lt;p&gt;The
                    &lt;em&gt;media&lt;/em&gt; type for this stylesheet.  For
                    example, &lt;em&gt;media="screen"&lt;/em&gt; would cause the
                    resource to be rendered with the &lt;em&gt;media&lt;/em&gt;
                    attribute of the &lt;em&gt;link&lt;/em&gt; set to
                    &lt;em&gt;screen&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;</description>
<display-name>Media</display-name>
<icon/>
<attribute-name>media</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<required>false</required>
<tag-attribute>true</tag-attribute>
</attribute-extension>
</attribute>
<renderer-extension>
<jsp-ignore>true</jsp-ignore>
<renders-children>true</renders-children>
</renderer-extension>
</renderer>
<renderer>
<description>&lt;div class="changed_added_2_1"&gt;

&lt;p&gt;&lt;span class="changed_added_2_1 changed_modified_2_2"&gt;Render&lt;/span&gt; the markup for
a &lt;code&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt; declaration.&lt;/p&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

&lt;p&gt;No action is required during decode for this renderer.&lt;/p&gt;

&lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

&lt;p&gt;Output an XML Doctype using the provided attributes.  Output the
literal text &lt;code&gt;&amp;lt;!DOCTYPE&lt;/code&gt;. The "rootElement" attribute is
required and must be rendered next.  If the "public" attribute is
defined, render the literal text &lt;code&gt;PUBLIC&lt;/code&gt; then render the
value of the attribute inside double quotes.  If the "system" attribute
is defined, render it next, inside double quotes.  Close the doctype
declaration with the literal text &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class="changed_added_2_2"&gt;

&lt;p&gt;No relocation occurs with the output of this component. It is
rendered at whatever position in the view hierarchy it happens to be
encountered when traversing the view to render. Therefore, this
component must be located in the view hierarchy at the correct location
so that the final rendered markup has it in the proper place with
respect to the user agent that consumes the rendered markup. In practice
this means in front of the &amp;lt;html&amp;gt; or &amp;lt;h:html&amp;gt; element.
Furthermore, if multiple &amp;lt;h:doctype&amp;gt; components exist,
&lt;strong&gt;all&lt;/strong&gt; of them will be rendered.&lt;/p&gt;

&lt;p&gt;If this component is present in a view, any DOCTYPE that would
otherwise have been rendered by virtue of being present in the VDL page
must be ignored.&lt;/p&gt;

&lt;/div&gt;


&lt;/div&gt;</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.Doctype</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.DoctypeRenderer
    </renderer-class>
<attribute>
<description>&lt;div class="changed_added_2_1"&gt;
           The root XML element
           &lt;/div&gt;</description>
<display-name>Root XML element</display-name>
<icon/>
<attribute-name>rootElement</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<required>true</required>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_1"&gt;
           Will be output as the public part of the DOCTYPE
           &lt;/div&gt;</description>
<display-name>The public part of the DOCTYPE</display-name>
<icon/>
<attribute-name>public</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<required>false</required>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_1"&gt;
           Will be output as the system part of the DOCTYPE
           &lt;/div&gt;</description>
<display-name>The system part of the DOCTYPE</display-name>
<icon/>
<attribute-name>system</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<required>false</required>
</attribute-extension>
</attribute>
<renderer-extension>
<jsp-ignore>true</jsp-ignore>
<tag-name>doctype</tag-name>
</renderer-extension>
</renderer>
<renderer>
<description>

&lt;p&gt;&lt;span class="changed_modified_2_0_rev_a
changed_modified_2_1 changed_modified_2_2"&gt;Render&lt;/span&gt; the markup for a
&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;div class="changed_added_2_0"&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

&lt;p&gt;No action is required during decode for this renderer.&lt;/p&gt;

&lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

&lt;p&gt;Render the starting &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element tag.  Any
attributes declared on the element must be conveyed unmodified to
the rendered output.  &lt;span class="changed_modified_2_0_rev_a"&gt;At some
point before rendering the closing &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; element
tag&lt;/span&gt;, render any resources that have been targeted for this "head"
element:
      &lt;ul&gt;
      &lt;li&gt;Obtain a &lt;code&gt;UIViewRoot&lt;/code&gt; instance.&lt;/li&gt;
      &lt;li&gt;Obtain a &lt;code&gt;List&lt;/code&gt; of component resources targeted for
      this "head" element with a call to &lt;code&gt;UIViewRoot.getComponentResources()&lt;/code&gt;
      with the &lt;code&gt;String "head"&lt;/code&gt; as the argument.&lt;/li&gt;
      &lt;li&gt;Iterate over the returned &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;UIComponent&lt;/code&gt; instances
      and call &lt;code&gt;encodeAll&lt;/code&gt; on each &lt;code&gt;UIComponent&lt;/code&gt; instance. 

&lt;p&gt;Any attributes declared on the element must be conveyed
unmodified to the rendered output.&lt;/p&gt;

      &lt;/ul&gt;

&lt;div class="changed_modified_2_0_rev_a"&gt;

      &lt;p&gt;Note that due to the cascading nature of CSS files, the order
      in which these files have been added to the view must be preserved
      when rendering the references to the files within the
      &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element.  Also, the end result of the
      rendered &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section must be that any CSS
      files referenced due to previous calls to
      &lt;code&gt;addComponentResource()&lt;/code&gt; do not adversely interfere
      with any CSS files manually placed in this section by the page
      author.&lt;/p&gt;

      &lt;p&gt;Render the ending &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; element tag.&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.Head</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.HeadRenderer
    </renderer-class>
<attribute>
<description> &lt;p class="changed_added_2_2"&gt;The
        component identifier for this component.  This value must be
        unique within the closest parent component that is a naming
        container.&lt;/p&gt; </description>
<display-name>Component Identifier</display-name>
<icon/>
<attribute-name>id</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_1"&gt;
           An XML Namespace to be passed through to the rendered element
           &lt;/div&gt;</description>
<display-name>XML Namespace</display-name>
<icon/>
<attribute-name>xmlns</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<renderer-extension>
<jsp-ignore>true</jsp-ignore>
<tag-name>head</tag-name>
</renderer-extension>
</renderer>
<renderer>
<description>

&lt;p&gt;&lt;span class="changed_modified_2_1 changed_added_2_0"&gt;Render&lt;/span&gt; the markup for a
&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;div class="changed_added_2_0"&gt;

      &lt;p&gt;Decode Behavior&lt;/p&gt;

      &lt;ul&gt;

&lt;p&gt;No action is required during decode for this renderer.&lt;/p&gt;

&lt;/ul&gt;

      &lt;p&gt;Encode Behavior&lt;/p&gt;

      &lt;ul&gt;

&lt;p&gt;Render the starting &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element tag. Just before rendering the
      closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; element tag, render any resources that have been targeted
      for this "body" element:
      &lt;ul&gt;
      &lt;li&gt;Obtain a &lt;code&gt;UIViewRoot&lt;/code&gt; instance.&lt;/li&gt;

      &lt;li&gt;Obtain a &lt;code&gt;List&lt;/code&gt; of component resources targeted for
      this "body" element with a call to
      &lt;code&gt;UIViewRoot.getComponentResources()&lt;/code&gt; with the
      &lt;code&gt;String "body"&lt;/code&gt; as the argument.  Render the ending
      &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; element tag.&lt;/li&gt;

      &lt;li&gt;Iterate over the returned &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;UIComponent&lt;/code&gt; instances
      and call &lt;code&gt;encodeAll&lt;/code&gt; on each &lt;code&gt;UIComponent&lt;/code&gt; instance.
      &lt;/ul&gt;

&lt;p&gt;Any attributes declared on the element must be conveyed
unmodified to the rendered output.&lt;/p&gt;

&lt;/div&gt;</description>
<component-family>javax.faces.Output</component-family>
<renderer-type>javax.faces.Body</renderer-type>
<renderer-class>
        com.sun.faces.renderkit.html_basic.BodyRenderer
    </renderer-class>
<attribute>
<description> &lt;p class="changed_added_2_2"&gt;The
        component identifier for this component.  This value must be
        unique within the closest parent component that is a naming
        container.&lt;/p&gt; </description>
<display-name>Component Identifier</display-name>
<icon/>
<attribute-name>id</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute>
<attribute>
<description>
          CSS style(s) to be applied when this component is rendered.
        </description>
<display-name>CSS Styles</display-name>
<icon/>
<attribute-name>style</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
<display-name>CSS Style Classes</display-name>
<icon/>
<attribute-name>styleClass</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>false</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Advisory title information about markup elements generated
          for this component.
        </description>
<display-name>Advisory Title</display-name>
<icon/>
<attribute-name>title</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          &lt;p class="changed_added_2_2"&gt;Per the WAI-ARIA spec and its
          relationship to HTML5 (Section title ARIA Role Attriubute),
          every HTML element may have a "role" attribute whose value
          must be passed through unmodified on the element on which it
          is declared in the final rendered markup.  The attribute, if
          specified, must have a value that is a string literal that is,
          or an EL Expression that evaluates to, a set of
          space-separated tokens representing the various WAI-ARIA roles
          that the element belongs to.
          &lt;/p&gt;

          &lt;p class="changed_added_2_2"&gt;It is the page author's
          responsibility to ensure that the user agent is capable of
          correctly interpreting the value of this attribute.&lt;/p&gt;</description>
<display-name>ARIA role</display-name>
<icon/>
<attribute-name>role</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>&lt;div class="changed_added_2_1"&gt;
           An XML Namespace to be passed through to the rendered element
           &lt;/div&gt;</description>
<display-name>XML Namespace</display-name>
<icon/>
<attribute-name>xmlns</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
          These attributes are case sensitive when rendering to XHTML, so
          care must be taken to have the correct case.
        </description>
<display-name>Direction</display-name>
<icon/>
<attribute-name>dir</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Code describing the language used in the generated markup
          for this component.
        </description>
<display-name>Language Code</display-name>
<icon/>
<attribute-name>lang</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          clicked over this element.
        </description>
<display-name>Button Click Script</display-name>
<icon/>
<attribute-name>onclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          double clicked over this element.
        </description>
<display-name>Double Click Script</display-name>
<icon/>
<attribute-name>ondblclick</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          pressed down over this element.
        </description>
<display-name>Mouse Down Script</display-name>
<icon/>
<attribute-name>onmousedown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          released over this element.
        </description>
<display-name>Mouse Up Script</display-name>
<icon/>
<attribute-name>onmouseup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved onto this element.
        </description>
<display-name>Mouse Over Script</display-name>
<icon/>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved within this element.
        </description>
<display-name>Mouse Move Script</display-name>
<icon/>
<attribute-name>onmousemove</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a pointer button is
          moved away from this element.
        </description>
<display-name>Mouse Out Script</display-name>
<icon/>
<attribute-name>onmouseout</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed and released over this element.
        </description>
<display-name>Key Press Script</display-name>
<icon/>
<attribute-name>onkeypress</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          pressed down over this element.
        </description>
<display-name>Key Down Script</display-name>
<icon/>
<attribute-name>onkeydown</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
          Javascript code executed when a key is
          released over this element.
        </description>
<display-name>Key Up Script</display-name>
<icon/>
<attribute-name>onkeyup</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
                   Javascript code executed when the user agent finishes loading
                   a window or all frames within a frameset.
               </description>
<display-name>Body Onload Script</display-name>
<icon/>
<attribute-name>onload</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<attribute>
<description>
                   Javascript code executed when the user agent removes 
                   a document from a window or frame. 
               </description>
<display-name>Body Onunload Script</display-name>
<icon/>
<attribute-name>onunload</attribute-name>
<attribute-class>java.lang.String</attribute-class>
<attribute-extension>
<ignored-by-renderer>true</ignored-by-renderer>
<behavior/>
</attribute-extension>
</attribute>
<renderer-extension>
<jsp-ignore>true</jsp-ignore>
<tag-name>body</tag-name>
</renderer-extension>
</renderer>
</render-kit>
</faces-config>
