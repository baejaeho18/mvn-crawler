Compiled from "StateWriter.java"
final class com.sun.faces.facelets.StateWriter extends java.io.Writer {
  private int initialSize;

  private java.io.Writer out;

  private com.sun.faces.facelets.util.FastWriter fast;

  private boolean writtenState;

  private static final java.lang.ThreadLocal CURRENT_WRITER;

  public static com.sun.faces.facelets.StateWriter getCurrentInstance();
    Code:
       0: getstatic     #1                  // Field CURRENT_WRITER:Ljava/lang/ThreadLocal;
       3: invokevirtual #2                  // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
       6: checkcast     #3                  // class com/sun/faces/facelets/StateWriter
       9: areturn

  public com.sun.faces.facelets.StateWriter(java.io.Writer, int);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/io/Writer."<init>":()V
       4: iload_2
       5: ifge          18
       8: new           #5                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #6                  // String Initial Size cannot be less than 0
      14: invokespecial #7                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: iload_2
      20: putfield      #8                  // Field initialSize:I
      23: aload_0
      24: aload_1
      25: putfield      #9                  // Field out:Ljava/io/Writer;
      28: getstatic     #1                  // Field CURRENT_WRITER:Ljava/lang/ThreadLocal;
      31: aload_0
      32: invokevirtual #10                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
      35: return

  public void writingState();
    Code:
       0: aload_0
       1: getfield      #11                 // Field writtenState:Z
       4: ifne          32
       7: aload_0
       8: iconst_1
       9: putfield      #11                 // Field writtenState:Z
      12: aload_0
      13: aload_0
      14: new           #12                 // class com/sun/faces/facelets/util/FastWriter
      17: dup
      18: aload_0
      19: getfield      #8                  // Field initialSize:I
      22: invokespecial #13                 // Method com/sun/faces/facelets/util/FastWriter."<init>":(I)V
      25: dup_x1
      26: putfield      #14                 // Field fast:Lcom/sun/faces/facelets/util/FastWriter;
      29: putfield      #9                  // Field out:Ljava/io/Writer;
      32: return

  public boolean isStateWritten();
    Code:
       0: aload_0
       1: getfield      #11                 // Field writtenState:Z
       4: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: return

  public void flush() throws java.io.IOException;
    Code:
       0: return

  public void write(char[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field out:Ljava/io/Writer;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #15                 // Method java/io/Writer.write:([CII)V
      10: return

  public void write(char[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field out:Ljava/io/Writer;
       4: aload_1
       5: invokevirtual #16                 // Method java/io/Writer.write:([C)V
       8: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field out:Ljava/io/Writer;
       4: iload_1
       5: invokevirtual #17                 // Method java/io/Writer.write:(I)V
       8: return

  public void write(java.lang.String, int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field out:Ljava/io/Writer;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #18                 // Method java/io/Writer.write:(Ljava/lang/String;II)V
      10: return

  public void write(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field out:Ljava/io/Writer;
       4: aload_1
       5: invokevirtual #19                 // Method java/io/Writer.write:(Ljava/lang/String;)V
       8: return

  public java.lang.String getAndResetBuffer();
    Code:
       0: aload_0
       1: getfield      #11                 // Field writtenState:Z
       4: ifne          17
       7: new           #20                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #21                 // String Did not write state;  no buffer is available
      13: invokespecial #22                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #14                 // Field fast:Lcom/sun/faces/facelets/util/FastWriter;
      21: invokevirtual #23                 // Method com/sun/faces/facelets/util/FastWriter.toString:()Ljava/lang/String;
      24: astore_1
      25: aload_0
      26: getfield      #14                 // Field fast:Lcom/sun/faces/facelets/util/FastWriter;
      29: invokevirtual #24                 // Method com/sun/faces/facelets/util/FastWriter.reset:()V
      32: aload_1
      33: areturn

  public void release();
    Code:
       0: getstatic     #1                  // Field CURRENT_WRITER:Ljava/lang/ThreadLocal;
       3: aconst_null
       4: invokevirtual #10                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
       7: return

  static {};
    Code:
       0: new           #25                 // class java/lang/ThreadLocal
       3: dup
       4: invokespecial #26                 // Method java/lang/ThreadLocal."<init>":()V
       7: putstatic     #1                  // Field CURRENT_WRITER:Ljava/lang/ThreadLocal;
      10: return
}
