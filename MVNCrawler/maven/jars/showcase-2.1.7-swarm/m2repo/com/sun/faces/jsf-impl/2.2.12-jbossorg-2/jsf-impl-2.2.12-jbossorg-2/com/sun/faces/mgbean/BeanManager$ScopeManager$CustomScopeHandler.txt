Compiled from "BeanManager.java"
class com.sun.faces.mgbean.BeanManager$ScopeManager$CustomScopeHandler implements com.sun.faces.mgbean.BeanManager$ScopeManager$ScopeHandler {
  private javax.el.ValueExpression scope;

  com.sun.faces.mgbean.BeanManager$ScopeManager$CustomScopeHandler(javax.el.ValueExpression);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field scope:Ljavax/el/ValueExpression;
       9: return

  public void handle(java.lang.String, java.lang.Object, javax.faces.context.FacesContext);
    Code:
       0: aload_0
       1: getfield      #2                  // Field scope:Ljavax/el/ValueExpression;
       4: aload_0
       5: aload_3
       6: invokespecial #3                  // Method getELContext:(Ljavax/faces/context/FacesContext;)Ljavax/el/ELContext;
       9: invokevirtual #4                  // Method javax/el/ValueExpression.getValue:(Ljavax/el/ELContext;)Ljava/lang/Object;
      12: checkcast     #5                  // class java/util/Map
      15: astore        4
      17: aload         4
      19: ifnull        54
      22: aload_0
      23: dup
      24: astore        5
      26: monitorenter
      27: aload         4
      29: aload_1
      30: aload_2
      31: invokeinterface #6,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      36: pop
      37: aload         5
      39: monitorexit
      40: goto          51
      43: astore        6
      45: aload         5
      47: monitorexit
      48: aload         6
      50: athrow
      51: goto          91
      54: invokestatic  #7                  // Method com/sun/faces/mgbean/BeanManager.access$500:()Ljava/util/logging/Logger;
      57: getstatic     #8                  // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      60: invokevirtual #9                  // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      63: ifeq          91
      66: invokestatic  #7                  // Method com/sun/faces/mgbean/BeanManager.access$500:()Ljava/util/logging/Logger;
      69: getstatic     #8                  // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      72: ldc           #10                 // String jsf.managed.bean.custom.scope.eval.null
      74: iconst_1
      75: anewarray     #11                 // class java/lang/Object
      78: dup
      79: iconst_0
      80: aload_0
      81: getfield      #2                  // Field scope:Ljavax/el/ValueExpression;
      84: invokevirtual #12                 // Method javax/el/ValueExpression.getExpressionString:()Ljava/lang/String;
      87: aastore
      88: invokevirtual #13                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V
      91: return
    Exception table:
       from    to  target type
          27    40    43   any
          43    48    43   any

  public boolean isInScope(java.lang.String, javax.faces.context.FacesContext);
    Code:
       0: aload_0
       1: getfield      #2                  // Field scope:Ljavax/el/ValueExpression;
       4: aload_0
       5: aload_2
       6: invokespecial #3                  // Method getELContext:(Ljavax/faces/context/FacesContext;)Ljavax/el/ELContext;
       9: invokevirtual #4                  // Method javax/el/ValueExpression.getValue:(Ljavax/el/ELContext;)Ljava/lang/Object;
      12: checkcast     #5                  // class java/util/Map
      15: astore_3
      16: aload_3
      17: ifnull        28
      20: aload_3
      21: aload_1
      22: invokeinterface #14,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      27: ireturn
      28: invokestatic  #7                  // Method com/sun/faces/mgbean/BeanManager.access$500:()Ljava/util/logging/Logger;
      31: getstatic     #8                  // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      34: invokevirtual #9                  // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      37: ifeq          65
      40: invokestatic  #7                  // Method com/sun/faces/mgbean/BeanManager.access$500:()Ljava/util/logging/Logger;
      43: getstatic     #8                  // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      46: ldc           #15                 // String jsf.managed.bean.custom.scope.eval.null.existence
      48: iconst_1
      49: anewarray     #11                 // class java/lang/Object
      52: dup
      53: iconst_0
      54: aload_0
      55: getfield      #2                  // Field scope:Ljavax/el/ValueExpression;
      58: invokevirtual #12                 // Method javax/el/ValueExpression.getExpressionString:()Ljava/lang/String;
      61: aastore
      62: invokevirtual #13                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V
      65: iconst_1
      66: ireturn

  public java.lang.Object getFromScope(java.lang.String, javax.faces.context.FacesContext);
    Code:
       0: aload_0
       1: getfield      #2                  // Field scope:Ljavax/el/ValueExpression;
       4: aload_0
       5: aload_2
       6: invokespecial #3                  // Method getELContext:(Ljavax/faces/context/FacesContext;)Ljavax/el/ELContext;
       9: invokevirtual #4                  // Method javax/el/ValueExpression.getValue:(Ljavax/el/ELContext;)Ljava/lang/Object;
      12: checkcast     #5                  // class java/util/Map
      15: astore_3
      16: aload_3
      17: ifnull        28
      20: aload_3
      21: aload_1
      22: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      27: areturn
      28: invokestatic  #7                  // Method com/sun/faces/mgbean/BeanManager.access$500:()Ljava/util/logging/Logger;
      31: getstatic     #8                  // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      34: invokevirtual #9                  // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      37: ifeq          65
      40: invokestatic  #7                  // Method com/sun/faces/mgbean/BeanManager.access$500:()Ljava/util/logging/Logger;
      43: getstatic     #8                  // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      46: ldc           #15                 // String jsf.managed.bean.custom.scope.eval.null.existence
      48: iconst_1
      49: anewarray     #11                 // class java/lang/Object
      52: dup
      53: iconst_0
      54: aload_0
      55: getfield      #2                  // Field scope:Ljavax/el/ValueExpression;
      58: invokevirtual #12                 // Method javax/el/ValueExpression.getExpressionString:()Ljava/lang/String;
      61: aastore
      62: invokevirtual #13                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V
      65: aconst_null
      66: areturn

  private javax.el.ELContext getELContext(javax.faces.context.FacesContext);
    Code:
       0: new           #17                 // class com/sun/faces/mgbean/BeanManager$ScopeManager$CustomScopeHandler$CustomScopeELContext
       3: dup
       4: aload_1
       5: invokevirtual #18                 // Method javax/faces/context/FacesContext.getELContext:()Ljavax/el/ELContext;
       8: invokespecial #19                 // Method com/sun/faces/mgbean/BeanManager$ScopeManager$CustomScopeHandler$CustomScopeELContext."<init>":(Ljavax/el/ELContext;)V
      11: areturn
}
