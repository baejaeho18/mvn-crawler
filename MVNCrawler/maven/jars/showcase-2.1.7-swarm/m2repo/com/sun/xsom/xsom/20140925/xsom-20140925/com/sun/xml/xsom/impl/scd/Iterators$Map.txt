Compiled from "Iterators.java"
public abstract class com.sun.xml.xsom.impl.scd.Iterators$Map<T, U> extends com.sun.xml.xsom.impl.scd.Iterators$ReadOnly<T> {
  private final java.util.Iterator<? extends U> core;

  private java.util.Iterator<? extends T> current;

  protected com.sun.xml.xsom.impl.scd.Iterators$Map(java.util.Iterator<? extends U>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/sun/xml/xsom/impl/scd/Iterators$ReadOnly."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field core:Ljava/util/Iterator;
       9: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #3                  // Field current:Ljava/util/Iterator;
       4: ifnull        19
       7: aload_0
       8: getfield      #3                  // Field current:Ljava/util/Iterator;
      11: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifne          53
      19: aload_0
      20: getfield      #2                  // Field core:Ljava/util/Iterator;
      23: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifne          33
      31: iconst_0
      32: ireturn
      33: aload_0
      34: aload_0
      35: aload_0
      36: getfield      #2                  // Field core:Ljava/util/Iterator;
      39: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: invokevirtual #6                  // Method apply:(Ljava/lang/Object;)Ljava/util/Iterator;
      47: putfield      #3                  // Field current:Ljava/util/Iterator;
      50: goto          0
      53: iconst_1
      54: ireturn

  public T next();
    Code:
       0: aload_0
       1: getfield      #3                  // Field current:Ljava/util/Iterator;
       4: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
       9: areturn

  protected abstract java.util.Iterator<? extends T> apply(U);
}
