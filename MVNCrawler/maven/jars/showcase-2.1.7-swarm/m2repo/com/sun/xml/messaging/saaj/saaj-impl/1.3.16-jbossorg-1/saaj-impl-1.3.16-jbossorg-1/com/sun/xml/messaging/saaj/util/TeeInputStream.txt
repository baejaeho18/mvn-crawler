Compiled from "TeeInputStream.java"
public class com.sun.xml.messaging.saaj.util.TeeInputStream extends java.io.InputStream {
  protected java.io.InputStream source;

  protected java.io.OutputStream copySink;

  public com.sun.xml.messaging.saaj.util.TeeInputStream(java.io.InputStream, java.io.OutputStream);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #2                  // Field copySink:Ljava/io/OutputStream;
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field source:Ljava/io/InputStream;
      14: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Ljava/io/InputStream;
       4: invokevirtual #4                  // Method java/io/InputStream.read:()I
       7: istore_1
       8: aload_0
       9: getfield      #2                  // Field copySink:Ljava/io/OutputStream;
      12: iload_1
      13: invokevirtual #5                  // Method java/io/OutputStream.write:(I)V
      16: iload_1
      17: ireturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Ljava/io/InputStream;
       4: invokevirtual #6                  // Method java/io/InputStream.available:()I
       7: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Ljava/io/InputStream;
       4: invokevirtual #7                  // Method java/io/InputStream.close:()V
       7: return

  public synchronized void mark(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Ljava/io/InputStream;
       4: iload_1
       5: invokevirtual #8                  // Method java/io/InputStream.mark:(I)V
       8: return

  public boolean markSupported();
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Ljava/io/InputStream;
       4: invokevirtual #9                  // Method java/io/InputStream.markSupported:()Z
       7: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Ljava/io/InputStream;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #10                 // Method java/io/InputStream.read:([BII)I
      10: istore        4
      12: aload_0
      13: getfield      #2                  // Field copySink:Ljava/io/OutputStream;
      16: aload_1
      17: iload_2
      18: iload_3
      19: invokevirtual #11                 // Method java/io/OutputStream.write:([BII)V
      22: iload         4
      24: ireturn

  public int read(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Ljava/io/InputStream;
       4: aload_1
       5: invokevirtual #12                 // Method java/io/InputStream.read:([B)I
       8: istore_2
       9: aload_0
      10: getfield      #2                  // Field copySink:Ljava/io/OutputStream;
      13: aload_1
      14: invokevirtual #13                 // Method java/io/OutputStream.write:([B)V
      17: iload_2
      18: ireturn

  public synchronized void reset() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Ljava/io/InputStream;
       4: invokevirtual #14                 // Method java/io/InputStream.reset:()V
       7: return

  public long skip(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Ljava/io/InputStream;
       4: lload_1
       5: invokevirtual #15                 // Method java/io/InputStream.skip:(J)J
       8: lreturn
}
