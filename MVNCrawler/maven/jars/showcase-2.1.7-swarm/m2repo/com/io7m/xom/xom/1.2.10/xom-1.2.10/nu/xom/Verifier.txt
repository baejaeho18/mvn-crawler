final class nu.xom.Verifier {
  private static final byte XML_CHARACTER;

  private static final byte NAME_CHARACTER;

  private static final byte NAME_START_CHARACTER;

  private static final byte NCNAME_CHARACTER;

  private static byte[] flags;

  private static boolean[] C0Table;

  private static nu.xom.Verifier$URICache cache;

  private static org.xml.sax.XMLReader parser;

  static java.lang.Class class$nu$xom$Verifier;

  private nu.xom.Verifier();
    Code:
       0: aload_0
       1: invokespecial #40                 // Method java/lang/Object."<init>":()V
       4: return

  private static void loadFlags(java.lang.ClassLoader);
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: ldc           #46                 // String nu/xom/characters.dat
       5: invokevirtual #52                 // Method java/lang/ClassLoader.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
       8: astore_2
       9: aload_2
      10: ifnonnull     23
      13: new           #54                 // class java/lang/RuntimeException
      16: dup
      17: ldc           #56                 // String Broken XOM installation: could not load nu/xom/characters.dat
      19: invokespecial #59                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: new           #61                 // class java/io/DataInputStream
      26: dup
      27: aload_2
      28: invokespecial #64                 // Method java/io/DataInputStream."<init>":(Ljava/io/InputStream;)V
      31: astore_1
      32: ldc           #65                 // int 65536
      34: newarray       byte
      36: putstatic     #67                 // Field flags:[B
      39: aload_1
      40: getstatic     #67                 // Field flags:[B
      43: invokevirtual #71                 // Method java/io/DataInputStream.readFully:([B)V
      46: aload_1
      47: ifnull        54
      50: aload_1
      51: invokevirtual #74                 // Method java/io/DataInputStream.close:()V
      54: goto          88
      57: astore_2
      58: goto          88
      61: astore_2
      62: new           #54                 // class java/lang/RuntimeException
      65: dup
      66: ldc           #56                 // String Broken XOM installation: could not load nu/xom/characters.dat
      68: invokespecial #59                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      71: athrow
      72: astore_3
      73: aload_1
      74: ifnull        81
      77: aload_1
      78: invokevirtual #74                 // Method java/io/DataInputStream.close:()V
      81: goto          86
      84: astore        4
      86: aload_3
      87: athrow
      88: return
    Exception table:
       from    to  target type
          46    54    57   Class java/io/IOException
           2    46    61   Class java/io/IOException
           2    46    72   any
          73    81    84   Class java/io/IOException
          61    73    72   any

  static void checkNCName(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     10
       4: aload_0
       5: ldc           #77                 // String NCNames cannot be null
       7: invokestatic  #81                 // Method throwIllegalNameException:(Ljava/lang/String;Ljava/lang/String;)V
      10: aload_0
      11: invokevirtual #87                 // Method java/lang/String.length:()I
      14: istore_1
      15: iload_1
      16: ifne          25
      19: aload_0
      20: ldc           #89                 // String NCNames cannot be empty
      22: invokestatic  #81                 // Method throwIllegalNameException:(Ljava/lang/String;Ljava/lang/String;)V
      25: aload_0
      26: iconst_0
      27: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      30: istore_2
      31: getstatic     #67                 // Field flags:[B
      34: iload_2
      35: baload
      36: iconst_4
      37: iand
      38: ifne          67
      41: aload_0
      42: new           #95                 // class java/lang/StringBuffer
      45: dup
      46: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      49: ldc           #98                 // String NCNames cannot start with the character
      51: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      54: iload_2
      55: invokestatic  #108                // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      58: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      61: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      64: invokestatic  #81                 // Method throwIllegalNameException:(Ljava/lang/String;Ljava/lang/String;)V
      67: iconst_1
      68: istore_3
      69: iload_3
      70: iload_1
      71: if_icmpge     147
      74: aload_0
      75: iload_3
      76: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      79: istore        4
      81: getstatic     #67                 // Field flags:[B
      84: iload         4
      86: baload
      87: bipush        8
      89: iand
      90: ifne          141
      93: iload         4
      95: bipush        58
      97: if_icmpne     109
     100: aload_0
     101: ldc           #114                // String NCNames cannot contain colons
     103: invokestatic  #81                 // Method throwIllegalNameException:(Ljava/lang/String;Ljava/lang/String;)V
     106: goto          141
     109: aload_0
     110: new           #95                 // class java/lang/StringBuffer
     113: dup
     114: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     117: ldc           #116                // String 0x
     119: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     122: iload         4
     124: invokestatic  #108                // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
     127: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     130: ldc           #118                // String  is not a legal NCName character
     132: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     135: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     138: invokestatic  #81                 // Method throwIllegalNameException:(Ljava/lang/String;Ljava/lang/String;)V
     141: iinc          3, 1
     144: goto          69
     147: return

  private static void throwIllegalNameException(java.lang.String, java.lang.String);
    Code:
       0: new           #120                // class nu/xom/IllegalNameException
       3: dup
       4: aload_1
       5: invokespecial #121                // Method nu/xom/IllegalNameException."<init>":(Ljava/lang/String;)V
       8: astore_2
       9: aload_2
      10: aload_0
      11: invokevirtual #124                // Method nu/xom/IllegalNameException.setData:(Ljava/lang/String;)V
      14: aload_2
      15: athrow

  private static void throwIllegalCharacterDataException(java.lang.String, java.lang.String);
    Code:
       0: new           #127                // class nu/xom/IllegalCharacterDataException
       3: dup
       4: aload_1
       5: invokespecial #128                // Method nu/xom/IllegalCharacterDataException."<init>":(Ljava/lang/String;)V
       8: astore_2
       9: aload_2
      10: aload_0
      11: invokevirtual #131                // Method nu/xom/IllegalDataException.setData:(Ljava/lang/String;)V
      14: aload_2
      15: athrow

  private static void throwMalformedURIException(java.lang.String, java.lang.String);
    Code:
       0: new           #134                // class nu/xom/MalformedURIException
       3: dup
       4: aload_1
       5: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
       8: astore_2
       9: aload_2
      10: aload_0
      11: invokevirtual #136                // Method nu/xom/MalformedURIException.setData:(Ljava/lang/String;)V
      14: aload_2
      15: athrow

  static void checkPCDATA(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #127                // class nu/xom/IllegalCharacterDataException
       7: dup
       8: ldc           #141                // String Null text
      10: invokespecial #128                // Method nu/xom/IllegalCharacterDataException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: invokevirtual #145                // Method java/lang/String.toCharArray:()[C
      18: astore_1
      19: iconst_0
      20: istore_2
      21: aload_1
      22: arraylength
      23: istore_3
      24: iload_2
      25: iload_3
      26: if_icmpge     168
      29: aload_1
      30: iload_2
      31: caload
      32: istore        4
      34: iload         4
      36: ldc           #146                // int 55296
      38: if_icmplt     119
      41: iload         4
      43: ldc           #147                // int 56319
      45: if_icmpgt     119
      48: aload_1
      49: iload_2
      50: iconst_1
      51: iadd
      52: caload
      53: istore        5
      55: iload         5
      57: ldc           #148                // int 56320
      59: if_icmplt     69
      62: iload         5
      64: ldc           #149                // int 57343
      66: if_icmple     89
      69: new           #127                // class nu/xom/IllegalCharacterDataException
      72: dup
      73: ldc           #151                // String Bad surrogate pair
      75: invokespecial #128                // Method nu/xom/IllegalCharacterDataException."<init>":(Ljava/lang/String;)V
      78: astore        6
      80: aload         6
      82: aload_0
      83: invokevirtual #152                // Method nu/xom/IllegalCharacterDataException.setData:(Ljava/lang/String;)V
      86: aload         6
      88: athrow
      89: iinc          2, 1
      92: goto          162
      95: astore        5
      97: new           #127                // class nu/xom/IllegalCharacterDataException
     100: dup
     101: ldc           #154                // String Bad Surrogate Pair
     103: aload         5
     105: invokespecial #157                // Method nu/xom/IllegalCharacterDataException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     108: astore        6
     110: aload         6
     112: aload_0
     113: invokevirtual #152                // Method nu/xom/IllegalCharacterDataException.setData:(Ljava/lang/String;)V
     116: aload         6
     118: athrow
     119: getstatic     #67                 // Field flags:[B
     122: iload         4
     124: baload
     125: iconst_1
     126: iand
     127: ifne          162
     130: aload_0
     131: new           #95                 // class java/lang/StringBuffer
     134: dup
     135: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     138: ldc           #116                // String 0x
     140: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     143: iload         4
     145: invokestatic  #108                // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
     148: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     151: ldc           #159                // String  is not allowed in XML content
     153: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     156: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     159: invokestatic  #161                // Method throwIllegalCharacterDataException:(Ljava/lang/String;Ljava/lang/String;)V
     162: iinc          2, 1
     165: goto          24
     168: return
    Exception table:
       from    to  target type
          48    92    95   Class java/lang/ArrayIndexOutOfBoundsException

  static void checkURIReference(java.lang.String);
    Code:
       0: aload_0
       1: ifnull        11
       4: aload_0
       5: invokevirtual #87                 // Method java/lang/String.length:()I
       8: ifne          12
      11: return
      12: new           #12                 // class nu/xom/URIUtil$ParsedURI
      15: dup
      16: aload_0
      17: invokespecial #163                // Method nu/xom/URIUtil$ParsedURI."<init>":(Ljava/lang/String;)V
      20: astore_1
      21: aload_1
      22: getfield      #167                // Field nu/xom/URIUtil$ParsedURI.scheme:Ljava/lang/String;
      25: ifnull        35
      28: aload_1
      29: getfield      #167                // Field nu/xom/URIUtil$ParsedURI.scheme:Ljava/lang/String;
      32: invokestatic  #170                // Method checkScheme:(Ljava/lang/String;)V
      35: aload_1
      36: getfield      #173                // Field nu/xom/URIUtil$ParsedURI.authority:Ljava/lang/String;
      39: ifnull        49
      42: aload_1
      43: getfield      #173                // Field nu/xom/URIUtil$ParsedURI.authority:Ljava/lang/String;
      46: invokestatic  #176                // Method checkAuthority:(Ljava/lang/String;)V
      49: aload_1
      50: getfield      #179                // Field nu/xom/URIUtil$ParsedURI.path:Ljava/lang/String;
      53: invokestatic  #182                // Method checkPath:(Ljava/lang/String;)V
      56: aload_1
      57: getfield      #185                // Field nu/xom/URIUtil$ParsedURI.fragment:Ljava/lang/String;
      60: ifnull        70
      63: aload_1
      64: getfield      #185                // Field nu/xom/URIUtil$ParsedURI.fragment:Ljava/lang/String;
      67: invokestatic  #188                // Method checkFragment:(Ljava/lang/String;)V
      70: aload_1
      71: getfield      #191                // Field nu/xom/URIUtil$ParsedURI.query:Ljava/lang/String;
      74: ifnull        84
      77: aload_1
      78: getfield      #191                // Field nu/xom/URIUtil$ParsedURI.query:Ljava/lang/String;
      81: invokestatic  #194                // Method checkQuery:(Ljava/lang/String;)V
      84: goto          95
      87: astore_2
      88: aload_2
      89: aload_0
      90: invokevirtual #136                // Method nu/xom/MalformedURIException.setData:(Ljava/lang/String;)V
      93: aload_2
      94: athrow
      95: return
    Exception table:
       from    to  target type
          21    84    87   Class nu/xom/MalformedURIException

  private static void checkQuery(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method java/lang/String.length:()I
       4: istore_1
       5: iconst_0
       6: istore_2
       7: iload_2
       8: iload_1
       9: if_icmpge     113
      12: aload_0
      13: iload_2
      14: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      17: istore_3
      18: iload_3
      19: bipush        37
      21: if_icmpne     73
      24: aload_0
      25: iload_2
      26: iconst_1
      27: iadd
      28: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      31: invokestatic  #200                // Method isHexDigit:(C)Z
      34: ifeq          50
      37: aload_0
      38: iload_2
      39: iconst_2
      40: iadd
      41: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      44: invokestatic  #200                // Method isHexDigit:(C)Z
      47: ifne          56
      50: aload_0
      51: ldc           #202                // String Bad percent escape sequence
      53: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
      56: goto          67
      59: astore        4
      61: aload_0
      62: ldc           #202                // String Bad percent escape sequence
      64: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
      67: iinc          2, 2
      70: goto          107
      73: iload_3
      74: invokestatic  #207                // Method isQueryCharacter:(C)Z
      77: ifne          107
      80: new           #134                // class nu/xom/MalformedURIException
      83: dup
      84: new           #95                 // class java/lang/StringBuffer
      87: dup
      88: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      91: ldc           #209                // String Illegal query character
      93: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      96: iload_3
      97: invokevirtual #212                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
     100: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     103: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
     106: athrow
     107: iinc          2, 1
     110: goto          7
     113: return
    Exception table:
       from    to  target type
          24    56    59   Class java/lang/StringIndexOutOfBoundsException

  private static boolean isQueryCharacter(char);
    Code:
       0: iload_0
       1: tableswitch   { // 33 to 126
                    33: 392
                    34: 394
                    35: 396
                    36: 398
                    37: 400
                    38: 402
                    39: 404
                    40: 406
                    41: 408
                    42: 410
                    43: 412
                    44: 414
                    45: 416
                    46: 418
                    47: 420
                    48: 422
                    49: 424
                    50: 426
                    51: 428
                    52: 430
                    53: 432
                    54: 434
                    55: 436
                    56: 438
                    57: 440
                    58: 442
                    59: 444
                    60: 446
                    61: 448
                    62: 450
                    63: 452
                    64: 454
                    65: 456
                    66: 458
                    67: 460
                    68: 462
                    69: 464
                    70: 466
                    71: 468
                    72: 470
                    73: 472
                    74: 474
                    75: 476
                    76: 478
                    77: 480
                    78: 482
                    79: 484
                    80: 486
                    81: 488
                    82: 490
                    83: 492
                    84: 494
                    85: 496
                    86: 498
                    87: 500
                    88: 502
                    89: 504
                    90: 506
                    91: 508
                    92: 510
                    93: 512
                    94: 514
                    95: 516
                    96: 518
                    97: 520
                    98: 522
                    99: 524
                   100: 526
                   101: 528
                   102: 530
                   103: 532
                   104: 534
                   105: 536
                   106: 538
                   107: 540
                   108: 542
                   109: 544
                   110: 546
                   111: 548
                   112: 550
                   113: 552
                   114: 554
                   115: 556
                   116: 558
                   117: 560
                   118: 562
                   119: 564
                   120: 566
                   121: 568
                   122: 570
                   123: 572
                   124: 574
                   125: 576
                   126: 578
               default: 580
          }
     392: iconst_1
     393: ireturn
     394: iconst_0
     395: ireturn
     396: iconst_0
     397: ireturn
     398: iconst_1
     399: ireturn
     400: iconst_0
     401: ireturn
     402: iconst_1
     403: ireturn
     404: iconst_1
     405: ireturn
     406: iconst_1
     407: ireturn
     408: iconst_1
     409: ireturn
     410: iconst_1
     411: ireturn
     412: iconst_1
     413: ireturn
     414: iconst_1
     415: ireturn
     416: iconst_1
     417: ireturn
     418: iconst_1
     419: ireturn
     420: iconst_1
     421: ireturn
     422: iconst_1
     423: ireturn
     424: iconst_1
     425: ireturn
     426: iconst_1
     427: ireturn
     428: iconst_1
     429: ireturn
     430: iconst_1
     431: ireturn
     432: iconst_1
     433: ireturn
     434: iconst_1
     435: ireturn
     436: iconst_1
     437: ireturn
     438: iconst_1
     439: ireturn
     440: iconst_1
     441: ireturn
     442: iconst_1
     443: ireturn
     444: iconst_1
     445: ireturn
     446: iconst_0
     447: ireturn
     448: iconst_1
     449: ireturn
     450: iconst_0
     451: ireturn
     452: iconst_1
     453: ireturn
     454: iconst_1
     455: ireturn
     456: iconst_1
     457: ireturn
     458: iconst_1
     459: ireturn
     460: iconst_1
     461: ireturn
     462: iconst_1
     463: ireturn
     464: iconst_1
     465: ireturn
     466: iconst_1
     467: ireturn
     468: iconst_1
     469: ireturn
     470: iconst_1
     471: ireturn
     472: iconst_1
     473: ireturn
     474: iconst_1
     475: ireturn
     476: iconst_1
     477: ireturn
     478: iconst_1
     479: ireturn
     480: iconst_1
     481: ireturn
     482: iconst_1
     483: ireturn
     484: iconst_1
     485: ireturn
     486: iconst_1
     487: ireturn
     488: iconst_1
     489: ireturn
     490: iconst_1
     491: ireturn
     492: iconst_1
     493: ireturn
     494: iconst_1
     495: ireturn
     496: iconst_1
     497: ireturn
     498: iconst_1
     499: ireturn
     500: iconst_1
     501: ireturn
     502: iconst_1
     503: ireturn
     504: iconst_1
     505: ireturn
     506: iconst_1
     507: ireturn
     508: iconst_0
     509: ireturn
     510: iconst_0
     511: ireturn
     512: iconst_0
     513: ireturn
     514: iconst_0
     515: ireturn
     516: iconst_1
     517: ireturn
     518: iconst_0
     519: ireturn
     520: iconst_1
     521: ireturn
     522: iconst_1
     523: ireturn
     524: iconst_1
     525: ireturn
     526: iconst_1
     527: ireturn
     528: iconst_1
     529: ireturn
     530: iconst_1
     531: ireturn
     532: iconst_1
     533: ireturn
     534: iconst_1
     535: ireturn
     536: iconst_1
     537: ireturn
     538: iconst_1
     539: ireturn
     540: iconst_1
     541: ireturn
     542: iconst_1
     543: ireturn
     544: iconst_1
     545: ireturn
     546: iconst_1
     547: ireturn
     548: iconst_1
     549: ireturn
     550: iconst_1
     551: ireturn
     552: iconst_1
     553: ireturn
     554: iconst_1
     555: ireturn
     556: iconst_1
     557: ireturn
     558: iconst_1
     559: ireturn
     560: iconst_1
     561: ireturn
     562: iconst_1
     563: ireturn
     564: iconst_1
     565: ireturn
     566: iconst_1
     567: ireturn
     568: iconst_1
     569: ireturn
     570: iconst_1
     571: ireturn
     572: iconst_0
     573: ireturn
     574: iconst_0
     575: ireturn
     576: iconst_0
     577: ireturn
     578: iconst_1
     579: ireturn
     580: iconst_0
     581: ireturn

  private static void checkFragment(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #194                // Method checkQuery:(Ljava/lang/String;)V
       4: return

  private static void checkPath(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method java/lang/String.length:()I
       4: istore_1
       5: aload_0
       6: invokevirtual #145                // Method java/lang/String.toCharArray:()[C
       9: astore_2
      10: iconst_0
      11: istore_3
      12: iload_3
      13: iload_1
      14: if_icmpge     145
      17: aload_2
      18: iload_3
      19: caload
      20: istore        4
      22: iload         4
      24: bipush        47
      26: if_icmpne     55
      29: iload_3
      30: iload_1
      31: iconst_1
      32: isub
      33: if_icmpge     139
      36: aload_2
      37: iload_3
      38: iconst_1
      39: iadd
      40: caload
      41: bipush        47
      43: if_icmpne     139
      46: aload_0
      47: ldc           #214                // String Double slash (//) in path
      49: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
      52: goto          139
      55: iload         4
      57: bipush        37
      59: if_icmpne     107
      62: aload_2
      63: iload_3
      64: iconst_1
      65: iadd
      66: caload
      67: invokestatic  #200                // Method isHexDigit:(C)Z
      70: ifeq          84
      73: aload_2
      74: iload_3
      75: iconst_2
      76: iadd
      77: caload
      78: invokestatic  #200                // Method isHexDigit:(C)Z
      81: ifne          90
      84: aload_0
      85: ldc           #202                // String Bad percent escape sequence
      87: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
      90: goto          101
      93: astore        5
      95: aload_0
      96: ldc           #202                // String Bad percent escape sequence
      98: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
     101: iinc          3, 2
     104: goto          139
     107: iload         4
     109: invokestatic  #217                // Method isPathCharacter:(C)Z
     112: ifne          139
     115: aload_0
     116: new           #95                 // class java/lang/StringBuffer
     119: dup
     120: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     123: ldc           #219                // String Illegal path character
     125: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     128: iload         4
     130: invokevirtual #212                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
     133: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     136: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
     139: iinc          3, 1
     142: goto          12
     145: return
    Exception table:
       from    to  target type
          62    90    93   Class java/lang/ArrayIndexOutOfBoundsException

  private static void checkAuthority(java.lang.String);
    Code:
       0: aconst_null
       1: astore_1
       2: aconst_null
       3: astore_2
       4: aconst_null
       5: astore_3
       6: aload_0
       7: bipush        64
       9: invokevirtual #223                // Method java/lang/String.indexOf:(I)I
      12: istore        4
      14: iload         4
      16: iconst_m1
      17: if_icmpeq     37
      20: aload_0
      21: iconst_0
      22: iload         4
      24: invokevirtual #227                // Method java/lang/String.substring:(II)Ljava/lang/String;
      27: astore_1
      28: aload_0
      29: iload         4
      31: iconst_1
      32: iadd
      33: invokevirtual #229                // Method java/lang/String.substring:(I)Ljava/lang/String;
      36: astore_0
      37: aload_0
      38: ldc           #231                // String [
      40: invokevirtual #235                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      43: ifeq          69
      46: aload_0
      47: ldc           #237                // String ]:
      49: invokevirtual #240                // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      52: istore        5
      54: iload         5
      56: iconst_m1
      57: if_icmpeq     77
      60: iload         5
      62: iconst_1
      63: iadd
      64: istore        5
      66: goto          77
      69: aload_0
      70: bipush        58
      72: invokevirtual #223                // Method java/lang/String.indexOf:(I)I
      75: istore        5
      77: iload         5
      79: iconst_m1
      80: if_icmpeq     103
      83: aload_0
      84: iconst_0
      85: iload         5
      87: invokevirtual #227                // Method java/lang/String.substring:(II)Ljava/lang/String;
      90: astore_2
      91: aload_0
      92: iload         5
      94: iconst_1
      95: iadd
      96: invokevirtual #229                // Method java/lang/String.substring:(I)Ljava/lang/String;
      99: astore_3
     100: goto          105
     103: aload_0
     104: astore_2
     105: aload_1
     106: ifnull        113
     109: aload_1
     110: invokestatic  #243                // Method checkUserInfo:(Ljava/lang/String;)V
     113: aload_3
     114: ifnull        121
     117: aload_3
     118: invokestatic  #246                // Method checkPort:(Ljava/lang/String;)V
     121: aload_2
     122: invokestatic  #249                // Method checkHost:(Ljava/lang/String;)V
     125: return

  private static void checkHost(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method java/lang/String.length:()I
       4: istore_1
       5: iload_1
       6: ifne          10
       9: return
      10: aload_0
      11: invokevirtual #145                // Method java/lang/String.toCharArray:()[C
      14: astore_2
      15: aload_2
      16: iconst_0
      17: caload
      18: bipush        91
      20: if_icmpne     57
      23: aload_2
      24: iload_1
      25: iconst_1
      26: isub
      27: caload
      28: bipush        93
      30: if_icmpeq     43
      33: new           #134                // class nu/xom/MalformedURIException
      36: dup
      37: ldc           #251                // String Missing closing ]
      39: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_0
      44: iconst_1
      45: iload_1
      46: iconst_1
      47: isub
      48: invokevirtual #227                // Method java/lang/String.substring:(II)Ljava/lang/String;
      51: invokestatic  #254                // Method checkIP6Address:(Ljava/lang/String;)V
      54: goto          195
      57: iload_1
      58: sipush        255
      61: if_icmple     92
      64: new           #134                // class nu/xom/MalformedURIException
      67: dup
      68: new           #95                 // class java/lang/StringBuffer
      71: dup
      72: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      75: ldc_w         #256                // String Host name too long:
      78: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      81: aload_0
      82: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      85: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      88: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
      91: athrow
      92: iconst_0
      93: istore_3
      94: iload_3
      95: iload_1
      96: if_icmpge     195
      99: aload_2
     100: iload_3
     101: caload
     102: istore        4
     104: iload         4
     106: bipush        37
     108: if_icmpne     156
     111: aload_2
     112: iload_3
     113: iconst_1
     114: iadd
     115: caload
     116: invokestatic  #200                // Method isHexDigit:(C)Z
     119: ifeq          133
     122: aload_2
     123: iload_3
     124: iconst_2
     125: iadd
     126: caload
     127: invokestatic  #200                // Method isHexDigit:(C)Z
     130: ifne          139
     133: aload_0
     134: ldc           #202                // String Bad percent escape sequence
     136: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
     139: goto          150
     142: astore        5
     144: aload_0
     145: ldc           #202                // String Bad percent escape sequence
     147: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
     150: iinc          3, 2
     153: goto          189
     156: iload         4
     158: invokestatic  #259                // Method isRegNameCharacter:(C)Z
     161: ifne          189
     164: aload_0
     165: new           #95                 // class java/lang/StringBuffer
     168: dup
     169: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     172: ldc_w         #261                // String Illegal host character
     175: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     178: iload         4
     180: invokevirtual #212                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
     183: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     186: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
     189: iinc          3, 1
     192: goto          94
     195: return
    Exception table:
       from    to  target type
         111   139   142   Class java/lang/ArrayIndexOutOfBoundsException

  private static boolean isRegNameCharacter(char);
    Code:
       0: iload_0
       1: tableswitch   { // 33 to 126
                    33: 392
                    34: 394
                    35: 396
                    36: 398
                    37: 400
                    38: 402
                    39: 404
                    40: 406
                    41: 408
                    42: 410
                    43: 412
                    44: 414
                    45: 416
                    46: 418
                    47: 420
                    48: 422
                    49: 424
                    50: 426
                    51: 428
                    52: 430
                    53: 432
                    54: 434
                    55: 436
                    56: 438
                    57: 440
                    58: 442
                    59: 444
                    60: 446
                    61: 448
                    62: 450
                    63: 452
                    64: 454
                    65: 456
                    66: 458
                    67: 460
                    68: 462
                    69: 464
                    70: 466
                    71: 468
                    72: 470
                    73: 472
                    74: 474
                    75: 476
                    76: 478
                    77: 480
                    78: 482
                    79: 484
                    80: 486
                    81: 488
                    82: 490
                    83: 492
                    84: 494
                    85: 496
                    86: 498
                    87: 500
                    88: 502
                    89: 504
                    90: 506
                    91: 508
                    92: 510
                    93: 512
                    94: 514
                    95: 516
                    96: 518
                    97: 520
                    98: 522
                    99: 524
                   100: 526
                   101: 528
                   102: 530
                   103: 532
                   104: 534
                   105: 536
                   106: 538
                   107: 540
                   108: 542
                   109: 544
                   110: 546
                   111: 548
                   112: 550
                   113: 552
                   114: 554
                   115: 556
                   116: 558
                   117: 560
                   118: 562
                   119: 564
                   120: 566
                   121: 568
                   122: 570
                   123: 572
                   124: 574
                   125: 576
                   126: 578
               default: 580
          }
     392: iconst_1
     393: ireturn
     394: iconst_0
     395: ireturn
     396: iconst_0
     397: ireturn
     398: iconst_1
     399: ireturn
     400: iconst_0
     401: ireturn
     402: iconst_1
     403: ireturn
     404: iconst_1
     405: ireturn
     406: iconst_1
     407: ireturn
     408: iconst_1
     409: ireturn
     410: iconst_1
     411: ireturn
     412: iconst_1
     413: ireturn
     414: iconst_1
     415: ireturn
     416: iconst_1
     417: ireturn
     418: iconst_1
     419: ireturn
     420: iconst_0
     421: ireturn
     422: iconst_1
     423: ireturn
     424: iconst_1
     425: ireturn
     426: iconst_1
     427: ireturn
     428: iconst_1
     429: ireturn
     430: iconst_1
     431: ireturn
     432: iconst_1
     433: ireturn
     434: iconst_1
     435: ireturn
     436: iconst_1
     437: ireturn
     438: iconst_1
     439: ireturn
     440: iconst_1
     441: ireturn
     442: iconst_0
     443: ireturn
     444: iconst_1
     445: ireturn
     446: iconst_0
     447: ireturn
     448: iconst_1
     449: ireturn
     450: iconst_0
     451: ireturn
     452: iconst_0
     453: ireturn
     454: iconst_0
     455: ireturn
     456: iconst_1
     457: ireturn
     458: iconst_1
     459: ireturn
     460: iconst_1
     461: ireturn
     462: iconst_1
     463: ireturn
     464: iconst_1
     465: ireturn
     466: iconst_1
     467: ireturn
     468: iconst_1
     469: ireturn
     470: iconst_1
     471: ireturn
     472: iconst_1
     473: ireturn
     474: iconst_1
     475: ireturn
     476: iconst_1
     477: ireturn
     478: iconst_1
     479: ireturn
     480: iconst_1
     481: ireturn
     482: iconst_1
     483: ireturn
     484: iconst_1
     485: ireturn
     486: iconst_1
     487: ireturn
     488: iconst_1
     489: ireturn
     490: iconst_1
     491: ireturn
     492: iconst_1
     493: ireturn
     494: iconst_1
     495: ireturn
     496: iconst_1
     497: ireturn
     498: iconst_1
     499: ireturn
     500: iconst_1
     501: ireturn
     502: iconst_1
     503: ireturn
     504: iconst_1
     505: ireturn
     506: iconst_1
     507: ireturn
     508: iconst_0
     509: ireturn
     510: iconst_0
     511: ireturn
     512: iconst_0
     513: ireturn
     514: iconst_0
     515: ireturn
     516: iconst_1
     517: ireturn
     518: iconst_0
     519: ireturn
     520: iconst_1
     521: ireturn
     522: iconst_1
     523: ireturn
     524: iconst_1
     525: ireturn
     526: iconst_1
     527: ireturn
     528: iconst_1
     529: ireturn
     530: iconst_1
     531: ireturn
     532: iconst_1
     533: ireturn
     534: iconst_1
     535: ireturn
     536: iconst_1
     537: ireturn
     538: iconst_1
     539: ireturn
     540: iconst_1
     541: ireturn
     542: iconst_1
     543: ireturn
     544: iconst_1
     545: ireturn
     546: iconst_1
     547: ireturn
     548: iconst_1
     549: ireturn
     550: iconst_1
     551: ireturn
     552: iconst_1
     553: ireturn
     554: iconst_1
     555: ireturn
     556: iconst_1
     557: ireturn
     558: iconst_1
     559: ireturn
     560: iconst_1
     561: ireturn
     562: iconst_1
     563: ireturn
     564: iconst_1
     565: ireturn
     566: iconst_1
     567: ireturn
     568: iconst_1
     569: ireturn
     570: iconst_1
     571: ireturn
     572: iconst_0
     573: ireturn
     574: iconst_0
     575: ireturn
     576: iconst_0
     577: ireturn
     578: iconst_1
     579: ireturn
     580: iconst_0
     581: ireturn

  private static void checkPort(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method java/lang/String.length:()I
       4: iconst_1
       5: isub
       6: istore_1
       7: iload_1
       8: iflt          63
      11: aload_0
      12: iload_1
      13: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      16: istore_2
      17: iload_2
      18: bipush        48
      20: if_icmplt     29
      23: iload_2
      24: bipush        57
      26: if_icmple     57
      29: new           #134                // class nu/xom/MalformedURIException
      32: dup
      33: new           #95                 // class java/lang/StringBuffer
      36: dup
      37: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      40: ldc_w         #263                // String Bad port:
      43: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      46: aload_0
      47: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      50: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      53: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
      56: athrow
      57: iinc          1, -1
      60: goto          7
      63: return

  private static void checkUserInfo(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method java/lang/String.length:()I
       4: istore_1
       5: iconst_0
       6: istore_2
       7: iload_2
       8: iload_1
       9: if_icmpge     114
      12: aload_0
      13: iload_2
      14: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      17: istore_3
      18: iload_3
      19: bipush        37
      21: if_icmpne     73
      24: aload_0
      25: iload_2
      26: iconst_1
      27: iadd
      28: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      31: invokestatic  #200                // Method isHexDigit:(C)Z
      34: ifeq          50
      37: aload_0
      38: iload_2
      39: iconst_2
      40: iadd
      41: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      44: invokestatic  #200                // Method isHexDigit:(C)Z
      47: ifne          56
      50: aload_0
      51: ldc           #202                // String Bad percent escape sequence
      53: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
      56: goto          67
      59: astore        4
      61: aload_0
      62: ldc           #202                // String Bad percent escape sequence
      64: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
      67: iinc          2, 2
      70: goto          108
      73: iload_3
      74: invokestatic  #266                // Method isUserInfoCharacter:(C)Z
      77: ifne          108
      80: new           #134                // class nu/xom/MalformedURIException
      83: dup
      84: new           #95                 // class java/lang/StringBuffer
      87: dup
      88: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      91: ldc_w         #268                // String Bad user info:
      94: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      97: aload_0
      98: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     101: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     104: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
     107: athrow
     108: iinc          2, 1
     111: goto          7
     114: return
    Exception table:
       from    to  target type
          24    56    59   Class java/lang/StringIndexOutOfBoundsException

  private static void checkScheme(java.lang.String);
    Code:
       0: ldc_w         #270                // String http
       3: aload_0
       4: invokevirtual #274                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       7: ifeq          11
      10: return
      11: aload_0
      12: invokevirtual #87                 // Method java/lang/String.length:()I
      15: ifne          29
      18: new           #134                // class nu/xom/MalformedURIException
      21: dup
      22: ldc_w         #276                // String URIs cannot begin with a colon
      25: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: iconst_0
      31: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      34: istore_1
      35: iload_1
      36: invokestatic  #279                // Method isAlpha:(C)Z
      39: ifne          70
      42: new           #134                // class nu/xom/MalformedURIException
      45: dup
      46: new           #95                 // class java/lang/StringBuffer
      49: dup
      50: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      53: ldc_w         #281                // String Illegal initial scheme character
      56: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      59: iload_1
      60: invokevirtual #212                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      63: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      66: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
      69: athrow
      70: aload_0
      71: invokevirtual #87                 // Method java/lang/String.length:()I
      74: iconst_1
      75: isub
      76: istore_2
      77: iload_2
      78: iconst_1
      79: if_icmplt     129
      82: aload_0
      83: iload_2
      84: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      87: istore_1
      88: iload_1
      89: invokestatic  #284                // Method isSchemeCharacter:(C)Z
      92: ifne          123
      95: new           #134                // class nu/xom/MalformedURIException
      98: dup
      99: new           #95                 // class java/lang/StringBuffer
     102: dup
     103: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     106: ldc_w         #286                // String Illegal scheme character
     109: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     112: iload_1
     113: invokevirtual #212                // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
     116: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     119: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
     122: athrow
     123: iinc          2, -1
     126: goto          77
     129: return

  private static void checkIP6Address(java.lang.String);
    Code:
       0: new           #290                // class java/util/StringTokenizer
       3: dup
       4: aload_0
       5: ldc_w         #292                // String :
       8: iconst_1
       9: invokespecial #295                // Method java/util/StringTokenizer."<init>":(Ljava/lang/String;Ljava/lang/String;Z)V
      12: astore_1
      13: aload_1
      14: invokevirtual #298                // Method java/util/StringTokenizer.countTokens:()I
      17: istore_2
      18: iload_2
      19: bipush        15
      21: if_icmpgt     29
      24: iload_2
      25: iconst_2
      26: if_icmpge     57
      29: new           #134                // class nu/xom/MalformedURIException
      32: dup
      33: new           #95                 // class java/lang/StringBuffer
      36: dup
      37: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      40: ldc_w         #300                // String Illegal IP6 host address:
      43: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      46: aload_0
      47: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      50: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      53: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
      56: athrow
      57: iconst_0
      58: istore_3
      59: iload_3
      60: iload_2
      61: if_icmpge     177
      64: aload_1
      65: invokevirtual #303                // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
      68: astore        4
      70: ldc_w         #292                // String :
      73: aload         4
      75: invokevirtual #274                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      78: ifeq          84
      81: goto          171
      84: aload         4
      86: bipush        16
      88: invokestatic  #307                // Method java/lang/Integer.parseInt:(Ljava/lang/String;I)I
      91: istore        5
      93: iload         5
      95: ifge          126
      98: new           #134                // class nu/xom/MalformedURIException
     101: dup
     102: new           #95                 // class java/lang/StringBuffer
     105: dup
     106: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     109: ldc_w         #300                // String Illegal IP6 host address:
     112: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     115: aload_0
     116: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     119: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     122: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
     125: athrow
     126: goto          171
     129: astore        5
     131: iload_3
     132: iload_2
     133: iconst_1
     134: isub
     135: if_icmpne     147
     138: aload         4
     140: aload_0
     141: invokestatic  #310                // Method checkIP4Address:(Ljava/lang/String;Ljava/lang/String;)V
     144: goto          171
     147: aload_0
     148: new           #95                 // class java/lang/StringBuffer
     151: dup
     152: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     155: ldc_w         #300                // String Illegal IP6 host address:
     158: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     161: aload_0
     162: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     165: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     168: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
     171: iinc          3, 1
     174: goto          59
     177: aload_0
     178: ldc_w         #312                // String ::
     181: invokevirtual #240                // Method java/lang/String.indexOf:(Ljava/lang/String;)I
     184: aload_0
     185: ldc_w         #312                // String ::
     188: invokevirtual #315                // Method java/lang/String.lastIndexOf:(Ljava/lang/String;)I
     191: if_icmpeq     222
     194: new           #134                // class nu/xom/MalformedURIException
     197: dup
     198: new           #95                 // class java/lang/StringBuffer
     201: dup
     202: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     205: ldc_w         #300                // String Illegal IP6 host address:
     208: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     211: aload_0
     212: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     215: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     218: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
     221: athrow
     222: return
    Exception table:
       from    to  target type
          84   126   129   Class java/lang/NumberFormatException

  private static void checkIP4Address(java.lang.String, java.lang.String);
    Code:
       0: new           #290                // class java/util/StringTokenizer
       3: dup
       4: aload_0
       5: ldc_w         #317                // String .
       8: invokespecial #319                // Method java/util/StringTokenizer."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      11: astore_2
      12: aload_2
      13: invokevirtual #298                // Method java/util/StringTokenizer.countTokens:()I
      16: istore_3
      17: iload_3
      18: iconst_4
      19: if_icmpeq     50
      22: new           #134                // class nu/xom/MalformedURIException
      25: dup
      26: new           #95                 // class java/lang/StringBuffer
      29: dup
      30: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      33: ldc_w         #300                // String Illegal IP6 host address:
      36: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      39: aload_1
      40: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      43: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      46: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: iconst_0
      51: istore        4
      53: iload         4
      55: iconst_4
      56: if_icmpge     152
      59: aload_2
      60: invokevirtual #303                // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
      63: astore        5
      65: aload         5
      67: invokestatic  #321                // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      70: istore        6
      72: iload         6
      74: sipush        255
      77: if_icmpgt     85
      80: iload         6
      82: ifge          113
      85: new           #134                // class nu/xom/MalformedURIException
      88: dup
      89: new           #95                 // class java/lang/StringBuffer
      92: dup
      93: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      96: ldc_w         #300                // String Illegal IP6 host address:
      99: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     102: aload_1
     103: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     106: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     109: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
     112: athrow
     113: goto          146
     116: astore        6
     118: new           #134                // class nu/xom/MalformedURIException
     121: dup
     122: new           #95                 // class java/lang/StringBuffer
     125: dup
     126: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     129: ldc_w         #300                // String Illegal IP6 host address:
     132: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     135: aload_1
     136: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     139: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     142: invokespecial #135                // Method nu/xom/MalformedURIException."<init>":(Ljava/lang/String;)V
     145: athrow
     146: iinc          4, 1
     149: goto          53
     152: return
    Exception table:
       from    to  target type
          65   113   116   Class java/lang/NumberFormatException

  static void checkXMLName(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     11
       4: aload_0
       5: ldc_w         #324                // String XML names cannot be null
       8: invokestatic  #81                 // Method throwIllegalNameException:(Ljava/lang/String;Ljava/lang/String;)V
      11: aload_0
      12: invokevirtual #87                 // Method java/lang/String.length:()I
      15: istore_1
      16: iload_1
      17: ifne          27
      20: aload_0
      21: ldc_w         #326                // String XML names cannot be empty
      24: invokestatic  #81                 // Method throwIllegalNameException:(Ljava/lang/String;Ljava/lang/String;)V
      27: aload_0
      28: iconst_0
      29: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      32: istore_2
      33: getstatic     #67                 // Field flags:[B
      36: iload_2
      37: baload
      38: iconst_4
      39: iand
      40: ifne          70
      43: aload_0
      44: new           #95                 // class java/lang/StringBuffer
      47: dup
      48: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      51: ldc_w         #328                // String XML names cannot start with the character
      54: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      57: iload_2
      58: invokestatic  #108                // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      61: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      64: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      67: invokestatic  #81                 // Method throwIllegalNameException:(Ljava/lang/String;Ljava/lang/String;)V
      70: iconst_1
      71: istore_3
      72: iload_3
      73: iload_1
      74: if_icmpge     134
      77: aload_0
      78: iload_3
      79: invokevirtual #93                 // Method java/lang/String.charAt:(I)C
      82: istore        4
      84: getstatic     #67                 // Field flags:[B
      87: iload         4
      89: baload
      90: iconst_2
      91: iand
      92: ifne          128
      95: aload_0
      96: new           #95                 // class java/lang/StringBuffer
      99: dup
     100: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     103: ldc           #116                // String 0x
     105: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     108: iload         4
     110: invokestatic  #108                // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
     113: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     116: ldc_w         #330                // String  is not a legal name character
     119: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     122: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     125: invokestatic  #81                 // Method throwIllegalNameException:(Ljava/lang/String;Ljava/lang/String;)V
     128: iinc          3, 1
     131: goto          72
     134: return

  static boolean isXMLSpaceCharacter(char);
    Code:
       0: iload_0
       1: bipush        32
       3: if_icmple     8
       6: iconst_0
       7: ireturn
       8: getstatic     #333                // Field C0Table:[Z
      11: iload_0
      12: baload
      13: ireturn

  private static boolean isHexDigit(char);
    Code:
       0: iload_0
       1: tableswitch   { // 48 to 102
                    48: 236
                    49: 238
                    50: 240
                    51: 242
                    52: 244
                    53: 246
                    54: 248
                    55: 250
                    56: 252
                    57: 254
                    58: 256
                    59: 258
                    60: 260
                    61: 262
                    62: 264
                    63: 266
                    64: 268
                    65: 270
                    66: 272
                    67: 274
                    68: 276
                    69: 278
                    70: 280
                    71: 282
                    72: 284
                    73: 286
                    74: 288
                    75: 290
                    76: 292
                    77: 294
                    78: 296
                    79: 298
                    80: 300
                    81: 302
                    82: 304
                    83: 306
                    84: 308
                    85: 310
                    86: 312
                    87: 314
                    88: 316
                    89: 318
                    90: 320
                    91: 322
                    92: 324
                    93: 326
                    94: 328
                    95: 330
                    96: 332
                    97: 334
                    98: 336
                    99: 338
                   100: 340
                   101: 342
                   102: 344
               default: 346
          }
     236: iconst_1
     237: ireturn
     238: iconst_1
     239: ireturn
     240: iconst_1
     241: ireturn
     242: iconst_1
     243: ireturn
     244: iconst_1
     245: ireturn
     246: iconst_1
     247: ireturn
     248: iconst_1
     249: ireturn
     250: iconst_1
     251: ireturn
     252: iconst_1
     253: ireturn
     254: iconst_1
     255: ireturn
     256: iconst_0
     257: ireturn
     258: iconst_0
     259: ireturn
     260: iconst_0
     261: ireturn
     262: iconst_0
     263: ireturn
     264: iconst_0
     265: ireturn
     266: iconst_0
     267: ireturn
     268: iconst_0
     269: ireturn
     270: iconst_1
     271: ireturn
     272: iconst_1
     273: ireturn
     274: iconst_1
     275: ireturn
     276: iconst_1
     277: ireturn
     278: iconst_1
     279: ireturn
     280: iconst_1
     281: ireturn
     282: iconst_0
     283: ireturn
     284: iconst_0
     285: ireturn
     286: iconst_0
     287: ireturn
     288: iconst_0
     289: ireturn
     290: iconst_0
     291: ireturn
     292: iconst_0
     293: ireturn
     294: iconst_0
     295: ireturn
     296: iconst_0
     297: ireturn
     298: iconst_0
     299: ireturn
     300: iconst_0
     301: ireturn
     302: iconst_0
     303: ireturn
     304: iconst_0
     305: ireturn
     306: iconst_0
     307: ireturn
     308: iconst_0
     309: ireturn
     310: iconst_0
     311: ireturn
     312: iconst_0
     313: ireturn
     314: iconst_0
     315: ireturn
     316: iconst_0
     317: ireturn
     318: iconst_0
     319: ireturn
     320: iconst_0
     321: ireturn
     322: iconst_0
     323: ireturn
     324: iconst_0
     325: ireturn
     326: iconst_0
     327: ireturn
     328: iconst_0
     329: ireturn
     330: iconst_0
     331: ireturn
     332: iconst_0
     333: ireturn
     334: iconst_1
     335: ireturn
     336: iconst_1
     337: ireturn
     338: iconst_1
     339: ireturn
     340: iconst_1
     341: ireturn
     342: iconst_1
     343: ireturn
     344: iconst_1
     345: ireturn
     346: iconst_0
     347: ireturn

  static void checkAbsoluteURIReference(java.lang.String);
    Code:
       0: getstatic     #336                // Field cache:Lnu/xom/Verifier$URICache;
       3: aload_0
       4: invokevirtual #339                // Method nu/xom/Verifier$URICache.contains:(Ljava/lang/String;)Z
       7: ifeq          11
      10: return
      11: new           #12                 // class nu/xom/URIUtil$ParsedURI
      14: dup
      15: aload_0
      16: invokespecial #163                // Method nu/xom/URIUtil$ParsedURI."<init>":(Ljava/lang/String;)V
      19: astore_1
      20: aload_1
      21: getfield      #167                // Field nu/xom/URIUtil$ParsedURI.scheme:Ljava/lang/String;
      24: ifnonnull     34
      27: aload_0
      28: ldc_w         #341                // String Missing scheme in absolute URI reference
      31: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
      34: aload_1
      35: getfield      #167                // Field nu/xom/URIUtil$ParsedURI.scheme:Ljava/lang/String;
      38: invokestatic  #170                // Method checkScheme:(Ljava/lang/String;)V
      41: aload_1
      42: getfield      #173                // Field nu/xom/URIUtil$ParsedURI.authority:Ljava/lang/String;
      45: ifnull        55
      48: aload_1
      49: getfield      #173                // Field nu/xom/URIUtil$ParsedURI.authority:Ljava/lang/String;
      52: invokestatic  #176                // Method checkAuthority:(Ljava/lang/String;)V
      55: aload_1
      56: getfield      #179                // Field nu/xom/URIUtil$ParsedURI.path:Ljava/lang/String;
      59: invokestatic  #182                // Method checkPath:(Ljava/lang/String;)V
      62: aload_1
      63: getfield      #185                // Field nu/xom/URIUtil$ParsedURI.fragment:Ljava/lang/String;
      66: ifnull        76
      69: aload_1
      70: getfield      #185                // Field nu/xom/URIUtil$ParsedURI.fragment:Ljava/lang/String;
      73: invokestatic  #188                // Method checkFragment:(Ljava/lang/String;)V
      76: aload_1
      77: getfield      #191                // Field nu/xom/URIUtil$ParsedURI.query:Ljava/lang/String;
      80: ifnull        90
      83: aload_1
      84: getfield      #191                // Field nu/xom/URIUtil$ParsedURI.query:Ljava/lang/String;
      87: invokestatic  #194                // Method checkQuery:(Ljava/lang/String;)V
      90: getstatic     #336                // Field cache:Lnu/xom/Verifier$URICache;
      93: aload_0
      94: invokevirtual #344                // Method nu/xom/Verifier$URICache.put:(Ljava/lang/String;)V
      97: goto          108
     100: astore_2
     101: aload_2
     102: aload_0
     103: invokevirtual #136                // Method nu/xom/MalformedURIException.setData:(Ljava/lang/String;)V
     106: aload_2
     107: athrow
     108: return
    Exception table:
       from    to  target type
          20    97   100   Class nu/xom/MalformedURIException

  static boolean isAlpha(char);
    Code:
       0: iload_0
       1: tableswitch   { // 65 to 122
                    65: 248
                    66: 250
                    67: 252
                    68: 254
                    69: 256
                    70: 258
                    71: 260
                    72: 262
                    73: 264
                    74: 266
                    75: 268
                    76: 270
                    77: 272
                    78: 274
                    79: 276
                    80: 278
                    81: 280
                    82: 282
                    83: 284
                    84: 286
                    85: 288
                    86: 290
                    87: 292
                    88: 294
                    89: 296
                    90: 298
                    91: 300
                    92: 302
                    93: 304
                    94: 306
                    95: 308
                    96: 310
                    97: 312
                    98: 314
                    99: 316
                   100: 318
                   101: 320
                   102: 322
                   103: 324
                   104: 326
                   105: 328
                   106: 330
                   107: 332
                   108: 334
                   109: 336
                   110: 338
                   111: 340
                   112: 342
                   113: 344
                   114: 346
                   115: 348
                   116: 350
                   117: 352
                   118: 354
                   119: 356
                   120: 358
                   121: 360
                   122: 362
               default: 364
          }
     248: iconst_1
     249: ireturn
     250: iconst_1
     251: ireturn
     252: iconst_1
     253: ireturn
     254: iconst_1
     255: ireturn
     256: iconst_1
     257: ireturn
     258: iconst_1
     259: ireturn
     260: iconst_1
     261: ireturn
     262: iconst_1
     263: ireturn
     264: iconst_1
     265: ireturn
     266: iconst_1
     267: ireturn
     268: iconst_1
     269: ireturn
     270: iconst_1
     271: ireturn
     272: iconst_1
     273: ireturn
     274: iconst_1
     275: ireturn
     276: iconst_1
     277: ireturn
     278: iconst_1
     279: ireturn
     280: iconst_1
     281: ireturn
     282: iconst_1
     283: ireturn
     284: iconst_1
     285: ireturn
     286: iconst_1
     287: ireturn
     288: iconst_1
     289: ireturn
     290: iconst_1
     291: ireturn
     292: iconst_1
     293: ireturn
     294: iconst_1
     295: ireturn
     296: iconst_1
     297: ireturn
     298: iconst_1
     299: ireturn
     300: iconst_0
     301: ireturn
     302: iconst_0
     303: ireturn
     304: iconst_0
     305: ireturn
     306: iconst_0
     307: ireturn
     308: iconst_0
     309: ireturn
     310: iconst_0
     311: ireturn
     312: iconst_1
     313: ireturn
     314: iconst_1
     315: ireturn
     316: iconst_1
     317: ireturn
     318: iconst_1
     319: ireturn
     320: iconst_1
     321: ireturn
     322: iconst_1
     323: ireturn
     324: iconst_1
     325: ireturn
     326: iconst_1
     327: ireturn
     328: iconst_1
     329: ireturn
     330: iconst_1
     331: ireturn
     332: iconst_1
     333: ireturn
     334: iconst_1
     335: ireturn
     336: iconst_1
     337: ireturn
     338: iconst_1
     339: ireturn
     340: iconst_1
     341: ireturn
     342: iconst_1
     343: ireturn
     344: iconst_1
     345: ireturn
     346: iconst_1
     347: ireturn
     348: iconst_1
     349: ireturn
     350: iconst_1
     351: ireturn
     352: iconst_1
     353: ireturn
     354: iconst_1
     355: ireturn
     356: iconst_1
     357: ireturn
     358: iconst_1
     359: ireturn
     360: iconst_1
     361: ireturn
     362: iconst_1
     363: ireturn
     364: iconst_0
     365: ireturn

  static boolean isSchemeCharacter(char);
    Code:
       0: iload_0
       1: tableswitch   { // 43 to 122
                    43: 336
                    44: 338
                    45: 340
                    46: 342
                    47: 344
                    48: 346
                    49: 348
                    50: 350
                    51: 352
                    52: 354
                    53: 356
                    54: 358
                    55: 360
                    56: 362
                    57: 364
                    58: 366
                    59: 368
                    60: 370
                    61: 372
                    62: 374
                    63: 376
                    64: 378
                    65: 380
                    66: 382
                    67: 384
                    68: 386
                    69: 388
                    70: 390
                    71: 392
                    72: 394
                    73: 396
                    74: 398
                    75: 400
                    76: 402
                    77: 404
                    78: 406
                    79: 408
                    80: 410
                    81: 412
                    82: 414
                    83: 416
                    84: 418
                    85: 420
                    86: 422
                    87: 424
                    88: 426
                    89: 428
                    90: 430
                    91: 432
                    92: 434
                    93: 436
                    94: 438
                    95: 440
                    96: 442
                    97: 444
                    98: 446
                    99: 448
                   100: 450
                   101: 452
                   102: 454
                   103: 456
                   104: 458
                   105: 460
                   106: 462
                   107: 464
                   108: 466
                   109: 468
                   110: 470
                   111: 472
                   112: 474
                   113: 476
                   114: 478
                   115: 480
                   116: 482
                   117: 484
                   118: 486
                   119: 488
                   120: 490
                   121: 492
                   122: 494
               default: 496
          }
     336: iconst_1
     337: ireturn
     338: iconst_0
     339: ireturn
     340: iconst_1
     341: ireturn
     342: iconst_1
     343: ireturn
     344: iconst_0
     345: ireturn
     346: iconst_1
     347: ireturn
     348: iconst_1
     349: ireturn
     350: iconst_1
     351: ireturn
     352: iconst_1
     353: ireturn
     354: iconst_1
     355: ireturn
     356: iconst_1
     357: ireturn
     358: iconst_1
     359: ireturn
     360: iconst_1
     361: ireturn
     362: iconst_1
     363: ireturn
     364: iconst_1
     365: ireturn
     366: iconst_0
     367: ireturn
     368: iconst_0
     369: ireturn
     370: iconst_0
     371: ireturn
     372: iconst_0
     373: ireturn
     374: iconst_0
     375: ireturn
     376: iconst_0
     377: ireturn
     378: iconst_0
     379: ireturn
     380: iconst_1
     381: ireturn
     382: iconst_1
     383: ireturn
     384: iconst_1
     385: ireturn
     386: iconst_1
     387: ireturn
     388: iconst_1
     389: ireturn
     390: iconst_1
     391: ireturn
     392: iconst_1
     393: ireturn
     394: iconst_1
     395: ireturn
     396: iconst_1
     397: ireturn
     398: iconst_1
     399: ireturn
     400: iconst_1
     401: ireturn
     402: iconst_1
     403: ireturn
     404: iconst_1
     405: ireturn
     406: iconst_1
     407: ireturn
     408: iconst_1
     409: ireturn
     410: iconst_1
     411: ireturn
     412: iconst_1
     413: ireturn
     414: iconst_1
     415: ireturn
     416: iconst_1
     417: ireturn
     418: iconst_1
     419: ireturn
     420: iconst_1
     421: ireturn
     422: iconst_1
     423: ireturn
     424: iconst_1
     425: ireturn
     426: iconst_1
     427: ireturn
     428: iconst_1
     429: ireturn
     430: iconst_1
     431: ireturn
     432: iconst_0
     433: ireturn
     434: iconst_0
     435: ireturn
     436: iconst_0
     437: ireturn
     438: iconst_0
     439: ireturn
     440: iconst_0
     441: ireturn
     442: iconst_0
     443: ireturn
     444: iconst_1
     445: ireturn
     446: iconst_1
     447: ireturn
     448: iconst_1
     449: ireturn
     450: iconst_1
     451: ireturn
     452: iconst_1
     453: ireturn
     454: iconst_1
     455: ireturn
     456: iconst_1
     457: ireturn
     458: iconst_1
     459: ireturn
     460: iconst_1
     461: ireturn
     462: iconst_1
     463: ireturn
     464: iconst_1
     465: ireturn
     466: iconst_1
     467: ireturn
     468: iconst_1
     469: ireturn
     470: iconst_1
     471: ireturn
     472: iconst_1
     473: ireturn
     474: iconst_1
     475: ireturn
     476: iconst_1
     477: ireturn
     478: iconst_1
     479: ireturn
     480: iconst_1
     481: ireturn
     482: iconst_1
     483: ireturn
     484: iconst_1
     485: ireturn
     486: iconst_1
     487: ireturn
     488: iconst_1
     489: ireturn
     490: iconst_1
     491: ireturn
     492: iconst_1
     493: ireturn
     494: iconst_1
     495: ireturn
     496: iconst_0
     497: ireturn

  private static boolean isPathCharacter(char);
    Code:
       0: iload_0
       1: tableswitch   { // 33 to 126
                    33: 392
                    34: 394
                    35: 396
                    36: 398
                    37: 400
                    38: 402
                    39: 404
                    40: 406
                    41: 408
                    42: 410
                    43: 412
                    44: 414
                    45: 416
                    46: 418
                    47: 420
                    48: 422
                    49: 424
                    50: 426
                    51: 428
                    52: 430
                    53: 432
                    54: 434
                    55: 436
                    56: 438
                    57: 440
                    58: 442
                    59: 444
                    60: 446
                    61: 448
                    62: 450
                    63: 452
                    64: 454
                    65: 456
                    66: 458
                    67: 460
                    68: 462
                    69: 464
                    70: 466
                    71: 468
                    72: 470
                    73: 472
                    74: 474
                    75: 476
                    76: 478
                    77: 480
                    78: 482
                    79: 484
                    80: 486
                    81: 488
                    82: 490
                    83: 492
                    84: 494
                    85: 496
                    86: 498
                    87: 500
                    88: 502
                    89: 504
                    90: 506
                    91: 508
                    92: 510
                    93: 512
                    94: 514
                    95: 516
                    96: 518
                    97: 520
                    98: 522
                    99: 524
                   100: 526
                   101: 528
                   102: 530
                   103: 532
                   104: 534
                   105: 536
                   106: 538
                   107: 540
                   108: 542
                   109: 544
                   110: 546
                   111: 548
                   112: 550
                   113: 552
                   114: 554
                   115: 556
                   116: 558
                   117: 560
                   118: 562
                   119: 564
                   120: 566
                   121: 568
                   122: 570
                   123: 572
                   124: 574
                   125: 576
                   126: 578
               default: 580
          }
     392: iconst_1
     393: ireturn
     394: iconst_0
     395: ireturn
     396: iconst_0
     397: ireturn
     398: iconst_1
     399: ireturn
     400: iconst_0
     401: ireturn
     402: iconst_1
     403: ireturn
     404: iconst_1
     405: ireturn
     406: iconst_1
     407: ireturn
     408: iconst_1
     409: ireturn
     410: iconst_1
     411: ireturn
     412: iconst_1
     413: ireturn
     414: iconst_1
     415: ireturn
     416: iconst_1
     417: ireturn
     418: iconst_1
     419: ireturn
     420: iconst_0
     421: ireturn
     422: iconst_1
     423: ireturn
     424: iconst_1
     425: ireturn
     426: iconst_1
     427: ireturn
     428: iconst_1
     429: ireturn
     430: iconst_1
     431: ireturn
     432: iconst_1
     433: ireturn
     434: iconst_1
     435: ireturn
     436: iconst_1
     437: ireturn
     438: iconst_1
     439: ireturn
     440: iconst_1
     441: ireturn
     442: iconst_1
     443: ireturn
     444: iconst_1
     445: ireturn
     446: iconst_0
     447: ireturn
     448: iconst_1
     449: ireturn
     450: iconst_0
     451: ireturn
     452: iconst_0
     453: ireturn
     454: iconst_1
     455: ireturn
     456: iconst_1
     457: ireturn
     458: iconst_1
     459: ireturn
     460: iconst_1
     461: ireturn
     462: iconst_1
     463: ireturn
     464: iconst_1
     465: ireturn
     466: iconst_1
     467: ireturn
     468: iconst_1
     469: ireturn
     470: iconst_1
     471: ireturn
     472: iconst_1
     473: ireturn
     474: iconst_1
     475: ireturn
     476: iconst_1
     477: ireturn
     478: iconst_1
     479: ireturn
     480: iconst_1
     481: ireturn
     482: iconst_1
     483: ireturn
     484: iconst_1
     485: ireturn
     486: iconst_1
     487: ireturn
     488: iconst_1
     489: ireturn
     490: iconst_1
     491: ireturn
     492: iconst_1
     493: ireturn
     494: iconst_1
     495: ireturn
     496: iconst_1
     497: ireturn
     498: iconst_1
     499: ireturn
     500: iconst_1
     501: ireturn
     502: iconst_1
     503: ireturn
     504: iconst_1
     505: ireturn
     506: iconst_1
     507: ireturn
     508: iconst_0
     509: ireturn
     510: iconst_0
     511: ireturn
     512: iconst_0
     513: ireturn
     514: iconst_0
     515: ireturn
     516: iconst_1
     517: ireturn
     518: iconst_0
     519: ireturn
     520: iconst_1
     521: ireturn
     522: iconst_1
     523: ireturn
     524: iconst_1
     525: ireturn
     526: iconst_1
     527: ireturn
     528: iconst_1
     529: ireturn
     530: iconst_1
     531: ireturn
     532: iconst_1
     533: ireturn
     534: iconst_1
     535: ireturn
     536: iconst_1
     537: ireturn
     538: iconst_1
     539: ireturn
     540: iconst_1
     541: ireturn
     542: iconst_1
     543: ireturn
     544: iconst_1
     545: ireturn
     546: iconst_1
     547: ireturn
     548: iconst_1
     549: ireturn
     550: iconst_1
     551: ireturn
     552: iconst_1
     553: ireturn
     554: iconst_1
     555: ireturn
     556: iconst_1
     557: ireturn
     558: iconst_1
     559: ireturn
     560: iconst_1
     561: ireturn
     562: iconst_1
     563: ireturn
     564: iconst_1
     565: ireturn
     566: iconst_1
     567: ireturn
     568: iconst_1
     569: ireturn
     570: iconst_1
     571: ireturn
     572: iconst_0
     573: ireturn
     574: iconst_0
     575: ireturn
     576: iconst_0
     577: ireturn
     578: iconst_1
     579: ireturn
     580: iconst_0
     581: ireturn

  private static boolean isUserInfoCharacter(char);
    Code:
       0: iload_0
       1: tableswitch   { // 33 to 126
                    33: 392
                    34: 394
                    35: 396
                    36: 398
                    37: 400
                    38: 402
                    39: 404
                    40: 406
                    41: 408
                    42: 410
                    43: 412
                    44: 414
                    45: 416
                    46: 418
                    47: 420
                    48: 422
                    49: 424
                    50: 426
                    51: 428
                    52: 430
                    53: 432
                    54: 434
                    55: 436
                    56: 438
                    57: 440
                    58: 442
                    59: 444
                    60: 446
                    61: 448
                    62: 450
                    63: 452
                    64: 454
                    65: 456
                    66: 458
                    67: 460
                    68: 462
                    69: 464
                    70: 466
                    71: 468
                    72: 470
                    73: 472
                    74: 474
                    75: 476
                    76: 478
                    77: 480
                    78: 482
                    79: 484
                    80: 486
                    81: 488
                    82: 490
                    83: 492
                    84: 494
                    85: 496
                    86: 498
                    87: 500
                    88: 502
                    89: 504
                    90: 506
                    91: 508
                    92: 510
                    93: 512
                    94: 514
                    95: 516
                    96: 518
                    97: 520
                    98: 522
                    99: 524
                   100: 526
                   101: 528
                   102: 530
                   103: 532
                   104: 534
                   105: 536
                   106: 538
                   107: 540
                   108: 542
                   109: 544
                   110: 546
                   111: 548
                   112: 550
                   113: 552
                   114: 554
                   115: 556
                   116: 558
                   117: 560
                   118: 562
                   119: 564
                   120: 566
                   121: 568
                   122: 570
                   123: 572
                   124: 574
                   125: 576
                   126: 578
               default: 580
          }
     392: iconst_1
     393: ireturn
     394: iconst_0
     395: ireturn
     396: iconst_0
     397: ireturn
     398: iconst_1
     399: ireturn
     400: iconst_0
     401: ireturn
     402: iconst_1
     403: ireturn
     404: iconst_1
     405: ireturn
     406: iconst_1
     407: ireturn
     408: iconst_1
     409: ireturn
     410: iconst_1
     411: ireturn
     412: iconst_1
     413: ireturn
     414: iconst_1
     415: ireturn
     416: iconst_1
     417: ireturn
     418: iconst_1
     419: ireturn
     420: iconst_1
     421: ireturn
     422: iconst_1
     423: ireturn
     424: iconst_1
     425: ireturn
     426: iconst_1
     427: ireturn
     428: iconst_1
     429: ireturn
     430: iconst_1
     431: ireturn
     432: iconst_1
     433: ireturn
     434: iconst_1
     435: ireturn
     436: iconst_1
     437: ireturn
     438: iconst_1
     439: ireturn
     440: iconst_1
     441: ireturn
     442: iconst_1
     443: ireturn
     444: iconst_1
     445: ireturn
     446: iconst_0
     447: ireturn
     448: iconst_1
     449: ireturn
     450: iconst_0
     451: ireturn
     452: iconst_0
     453: ireturn
     454: iconst_0
     455: ireturn
     456: iconst_1
     457: ireturn
     458: iconst_1
     459: ireturn
     460: iconst_1
     461: ireturn
     462: iconst_1
     463: ireturn
     464: iconst_1
     465: ireturn
     466: iconst_1
     467: ireturn
     468: iconst_1
     469: ireturn
     470: iconst_1
     471: ireturn
     472: iconst_1
     473: ireturn
     474: iconst_1
     475: ireturn
     476: iconst_1
     477: ireturn
     478: iconst_1
     479: ireturn
     480: iconst_1
     481: ireturn
     482: iconst_1
     483: ireturn
     484: iconst_1
     485: ireturn
     486: iconst_1
     487: ireturn
     488: iconst_1
     489: ireturn
     490: iconst_1
     491: ireturn
     492: iconst_1
     493: ireturn
     494: iconst_1
     495: ireturn
     496: iconst_1
     497: ireturn
     498: iconst_1
     499: ireturn
     500: iconst_1
     501: ireturn
     502: iconst_1
     503: ireturn
     504: iconst_1
     505: ireturn
     506: iconst_1
     507: ireturn
     508: iconst_0
     509: ireturn
     510: iconst_0
     511: ireturn
     512: iconst_0
     513: ireturn
     514: iconst_0
     515: ireturn
     516: iconst_1
     517: ireturn
     518: iconst_0
     519: ireturn
     520: iconst_1
     521: ireturn
     522: iconst_1
     523: ireturn
     524: iconst_1
     525: ireturn
     526: iconst_1
     527: ireturn
     528: iconst_1
     529: ireturn
     530: iconst_1
     531: ireturn
     532: iconst_1
     533: ireturn
     534: iconst_1
     535: ireturn
     536: iconst_1
     537: ireturn
     538: iconst_1
     539: ireturn
     540: iconst_1
     541: ireturn
     542: iconst_1
     543: ireturn
     544: iconst_1
     545: ireturn
     546: iconst_1
     547: ireturn
     548: iconst_1
     549: ireturn
     550: iconst_1
     551: ireturn
     552: iconst_1
     553: ireturn
     554: iconst_1
     555: ireturn
     556: iconst_1
     557: ireturn
     558: iconst_1
     559: ireturn
     560: iconst_1
     561: ireturn
     562: iconst_1
     563: ireturn
     564: iconst_1
     565: ireturn
     566: iconst_1
     567: ireturn
     568: iconst_1
     569: ireturn
     570: iconst_1
     571: ireturn
     572: iconst_0
     573: ireturn
     574: iconst_0
     575: ireturn
     576: iconst_0
     577: ireturn
     578: iconst_1
     579: ireturn
     580: iconst_0
     581: ireturn

  static void checkAbsoluteURI(java.lang.String);
    Code:
       0: new           #12                 // class nu/xom/URIUtil$ParsedURI
       3: dup
       4: aload_0
       5: invokespecial #163                // Method nu/xom/URIUtil$ParsedURI."<init>":(Ljava/lang/String;)V
       8: astore_1
       9: aload_1
      10: getfield      #167                // Field nu/xom/URIUtil$ParsedURI.scheme:Ljava/lang/String;
      13: ifnonnull     23
      16: aload_0
      17: ldc_w         #347                // String Missing scheme in absolute URI
      20: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
      23: aload_1
      24: getfield      #167                // Field nu/xom/URIUtil$ParsedURI.scheme:Ljava/lang/String;
      27: invokestatic  #170                // Method checkScheme:(Ljava/lang/String;)V
      30: aload_1
      31: getfield      #173                // Field nu/xom/URIUtil$ParsedURI.authority:Ljava/lang/String;
      34: ifnull        44
      37: aload_1
      38: getfield      #173                // Field nu/xom/URIUtil$ParsedURI.authority:Ljava/lang/String;
      41: invokestatic  #176                // Method checkAuthority:(Ljava/lang/String;)V
      44: aload_1
      45: getfield      #179                // Field nu/xom/URIUtil$ParsedURI.path:Ljava/lang/String;
      48: invokestatic  #182                // Method checkPath:(Ljava/lang/String;)V
      51: aload_1
      52: getfield      #185                // Field nu/xom/URIUtil$ParsedURI.fragment:Ljava/lang/String;
      55: ifnull        65
      58: aload_0
      59: ldc_w         #349                // String URIs cannot have fragment identifiers
      62: invokestatic  #204                // Method throwMalformedURIException:(Ljava/lang/String;Ljava/lang/String;)V
      65: aload_1
      66: getfield      #191                // Field nu/xom/URIUtil$ParsedURI.query:Ljava/lang/String;
      69: ifnull        79
      72: aload_1
      73: getfield      #191                // Field nu/xom/URIUtil$ParsedURI.query:Ljava/lang/String;
      76: invokestatic  #194                // Method checkQuery:(Ljava/lang/String;)V
      79: goto          90
      82: astore_2
      83: aload_2
      84: aload_0
      85: invokevirtual #136                // Method nu/xom/MalformedURIException.setData:(Ljava/lang/String;)V
      88: aload_2
      89: athrow
      90: return
    Exception table:
       from    to  target type
           9    79    82   Class nu/xom/MalformedURIException

  static synchronized void checkInternalDTDSubset(java.lang.String);
    Code:
       0: getstatic     #354                // Field parser:Lorg/xml/sax/XMLReader;
       3: ifnonnull     45
       6: new           #356                // class org/xml/sax/InputSource
       9: dup
      10: new           #6                  // class nu/xom/Verifier$EmptyReader
      13: dup
      14: aconst_null
      15: invokespecial #359                // Method nu/xom/Verifier$EmptyReader."<init>":(Lnu/xom/Verifier$1;)V
      18: invokespecial #362                // Method org/xml/sax/InputSource."<init>":(Ljava/io/Reader;)V
      21: astore_1
      22: iconst_0
      23: invokestatic  #368                // Method nu/xom/Builder.findParser:(Z)Lorg/xml/sax/XMLReader;
      26: putstatic     #354                // Field parser:Lorg/xml/sax/XMLReader;
      29: getstatic     #354                // Field parser:Lorg/xml/sax/XMLReader;
      32: new           #17                 // class nu/xom/Verifier$1
      35: dup
      36: aload_1
      37: invokespecial #371                // Method nu/xom/Verifier$1."<init>":(Lorg/xml/sax/InputSource;)V
      40: invokeinterface #377,  2          // InterfaceMethod org/xml/sax/XMLReader.setEntityResolver:(Lorg/xml/sax/EntityResolver;)V
      45: new           #95                 // class java/lang/StringBuffer
      48: dup
      49: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
      52: ldc_w         #379                // String <!DOCTYPE a [
      55: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      58: aload_0
      59: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      62: ldc_w         #381                // String ]><a/>
      65: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      68: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      71: astore_1
      72: new           #356                // class org/xml/sax/InputSource
      75: dup
      76: new           #383                // class java/io/StringReader
      79: dup
      80: aload_1
      81: invokespecial #384                // Method java/io/StringReader."<init>":(Ljava/lang/String;)V
      84: invokespecial #362                // Method org/xml/sax/InputSource."<init>":(Ljava/io/Reader;)V
      87: astore_2
      88: aload_2
      89: ldc_w         #386                // String http://www.example.org/
      92: invokevirtual #389                // Method org/xml/sax/InputSource.setSystemId:(Ljava/lang/String;)V
      95: getstatic     #354                // Field parser:Lorg/xml/sax/XMLReader;
      98: aload_2
      99: invokeinterface #392,  2          // InterfaceMethod org/xml/sax/XMLReader.parse:(Lorg/xml/sax/InputSource;)V
     104: goto          159
     107: astore_2
     108: new           #130                // class nu/xom/IllegalDataException
     111: dup
     112: new           #95                 // class java/lang/StringBuffer
     115: dup
     116: invokespecial #96                 // Method java/lang/StringBuffer."<init>":()V
     119: ldc_w         #394                // String Malformed internal DTD subset:
     122: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     125: aload_2
     126: invokevirtual #397                // Method org/xml/sax/SAXException.getMessage:()Ljava/lang/String;
     129: invokevirtual #102                // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     132: invokevirtual #112                // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     135: aload_2
     136: invokespecial #398                // Method nu/xom/IllegalDataException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     139: astore_3
     140: aload_3
     141: aload_0
     142: invokevirtual #131                // Method nu/xom/IllegalDataException.setData:(Ljava/lang/String;)V
     145: aload_3
     146: athrow
     147: astore_2
     148: new           #54                 // class java/lang/RuntimeException
     151: dup
     152: ldc_w         #400                // String BUG: I don\'t think this can happen
     155: invokespecial #59                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
     158: athrow
     159: return
    Exception table:
       from    to  target type
          72   104   107   Class org/xml/sax/SAXException
          72   104   147   Class java/io/IOException

  static java.lang.Class class$(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #409                // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       4: areturn
       5: astore_1
       6: new           #411                // class java/lang/NoClassDefFoundError
       9: dup
      10: aload_1
      11: invokevirtual #412                // Method java/lang/ClassNotFoundException.getMessage:()Ljava/lang/String;
      14: invokespecial #413                // Method java/lang/NoClassDefFoundError."<init>":(Ljava/lang/String;)V
      17: athrow
    Exception table:
       from    to  target type
           0     4     5   Class java/lang/ClassNotFoundException

  static {};
    Code:
       0: aconst_null
       1: putstatic     #67                 // Field flags:[B
       4: getstatic     #416                // Field class$nu$xom$Verifier:Ljava/lang/Class;
       7: ifnonnull     23
      10: ldc_w         #418                // String nu.xom.Verifier
      13: invokestatic  #420                // Method class$:(Ljava/lang/String;)Ljava/lang/Class;
      16: dup
      17: putstatic     #416                // Field class$nu$xom$Verifier:Ljava/lang/Class;
      20: goto          26
      23: getstatic     #416                // Field class$nu$xom$Verifier:Ljava/lang/Class;
      26: invokevirtual #424                // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      29: astore_0
      30: aload_0
      31: ifnull        38
      34: aload_0
      35: invokestatic  #426                // Method loadFlags:(Ljava/lang/ClassLoader;)V
      38: getstatic     #67                 // Field flags:[B
      41: ifnonnull     55
      44: invokestatic  #432                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      47: invokevirtual #435                // Method java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;
      50: astore_0
      51: aload_0
      52: invokestatic  #426                // Method loadFlags:(Ljava/lang/ClassLoader;)V
      55: bipush        33
      57: newarray       boolean
      59: putstatic     #333                // Field C0Table:[Z
      62: getstatic     #333                // Field C0Table:[Z
      65: bipush        10
      67: iconst_1
      68: bastore
      69: getstatic     #333                // Field C0Table:[Z
      72: bipush        13
      74: iconst_1
      75: bastore
      76: getstatic     #333                // Field C0Table:[Z
      79: bipush        9
      81: iconst_1
      82: bastore
      83: getstatic     #333                // Field C0Table:[Z
      86: bipush        32
      88: iconst_1
      89: bastore
      90: new           #9                  // class nu/xom/Verifier$URICache
      93: dup
      94: aconst_null
      95: invokespecial #436                // Method nu/xom/Verifier$URICache."<init>":(Lnu/xom/Verifier$1;)V
      98: putstatic     #336                // Field cache:Lnu/xom/Verifier$URICache;
     101: return
}
