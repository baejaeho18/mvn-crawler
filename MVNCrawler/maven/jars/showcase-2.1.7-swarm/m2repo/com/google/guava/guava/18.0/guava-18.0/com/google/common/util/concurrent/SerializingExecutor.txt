Compiled from "SerializingExecutor.java"
final class com.google.common.util.concurrent.SerializingExecutor implements java.util.concurrent.Executor {
  private static final java.util.logging.Logger log;

  private final java.util.concurrent.Executor executor;

  private final java.util.Queue<java.lang.Runnable> waitQueue;

  private boolean isThreadScheduled;

  private final com.google.common.util.concurrent.SerializingExecutor$TaskRunner taskRunner;

  private final java.lang.Object internalLock;

  public com.google.common.util.concurrent.SerializingExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/ArrayDeque
       8: dup
       9: invokespecial #7                  // Method java/util/ArrayDeque."<init>":()V
      12: putfield      #2                  // Field waitQueue:Ljava/util/Queue;
      15: aload_0
      16: iconst_0
      17: putfield      #4                  // Field isThreadScheduled:Z
      20: aload_0
      21: new           #8                  // class com/google/common/util/concurrent/SerializingExecutor$TaskRunner
      24: dup
      25: aload_0
      26: aconst_null
      27: invokespecial #9                  // Method com/google/common/util/concurrent/SerializingExecutor$TaskRunner."<init>":(Lcom/google/common/util/concurrent/SerializingExecutor;Lcom/google/common/util/concurrent/SerializingExecutor$1;)V
      30: putfield      #10                 // Field taskRunner:Lcom/google/common/util/concurrent/SerializingExecutor$TaskRunner;
      33: aload_0
      34: new           #11                 // class com/google/common/util/concurrent/SerializingExecutor$1
      37: dup
      38: aload_0
      39: invokespecial #12                 // Method com/google/common/util/concurrent/SerializingExecutor$1."<init>":(Lcom/google/common/util/concurrent/SerializingExecutor;)V
      42: putfield      #3                  // Field internalLock:Ljava/lang/Object;
      45: aload_1
      46: ldc           #13                 // String \'executor\' must not be null.
      48: invokestatic  #14                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      51: pop
      52: aload_0
      53: aload_1
      54: putfield      #15                 // Field executor:Ljava/util/concurrent/Executor;
      57: return

  public void execute(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #16                 // String \'r\' must not be null.
       3: invokestatic  #14                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: iconst_0
       8: istore_2
       9: aload_0
      10: getfield      #3                  // Field internalLock:Ljava/lang/Object;
      13: dup
      14: astore_3
      15: monitorenter
      16: aload_0
      17: getfield      #2                  // Field waitQueue:Ljava/util/Queue;
      20: aload_1
      21: invokeinterface #17,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      26: pop
      27: aload_0
      28: getfield      #4                  // Field isThreadScheduled:Z
      31: ifne          41
      34: aload_0
      35: iconst_1
      36: putfield      #4                  // Field isThreadScheduled:Z
      39: iconst_1
      40: istore_2
      41: aload_3
      42: monitorexit
      43: goto          53
      46: astore        4
      48: aload_3
      49: monitorexit
      50: aload         4
      52: athrow
      53: iload_2
      54: ifeq          144
      57: iconst_1
      58: istore_3
      59: aload_0
      60: getfield      #15                 // Field executor:Ljava/util/concurrent/Executor;
      63: aload_0
      64: getfield      #10                 // Field taskRunner:Lcom/google/common/util/concurrent/SerializingExecutor$TaskRunner;
      67: invokeinterface #18,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      72: iconst_0
      73: istore_3
      74: iload_3
      75: ifeq          144
      78: aload_0
      79: getfield      #3                  // Field internalLock:Ljava/lang/Object;
      82: dup
      83: astore        4
      85: monitorenter
      86: aload_0
      87: iconst_0
      88: putfield      #4                  // Field isThreadScheduled:Z
      91: aload         4
      93: monitorexit
      94: goto          105
      97: astore        5
      99: aload         4
     101: monitorexit
     102: aload         5
     104: athrow
     105: goto          144
     108: astore        6
     110: iload_3
     111: ifeq          141
     114: aload_0
     115: getfield      #3                  // Field internalLock:Ljava/lang/Object;
     118: dup
     119: astore        7
     121: monitorenter
     122: aload_0
     123: iconst_0
     124: putfield      #4                  // Field isThreadScheduled:Z
     127: aload         7
     129: monitorexit
     130: goto          141
     133: astore        8
     135: aload         7
     137: monitorexit
     138: aload         8
     140: athrow
     141: aload         6
     143: athrow
     144: return
    Exception table:
       from    to  target type
          16    43    46   any
          46    50    46   any
          86    94    97   any
          97   102    97   any
          59    74   108   any
         122   130   133   any
         133   138   133   any
         108   110   108   any

  static boolean access$100(com.google.common.util.concurrent.SerializingExecutor);
    Code:
       0: aload_0
       1: getfield      #4                  // Field isThreadScheduled:Z
       4: ireturn

  static java.lang.Object access$200(com.google.common.util.concurrent.SerializingExecutor);
    Code:
       0: aload_0
       1: getfield      #3                  // Field internalLock:Ljava/lang/Object;
       4: areturn

  static java.util.Queue access$300(com.google.common.util.concurrent.SerializingExecutor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field waitQueue:Ljava/util/Queue;
       4: areturn

  static boolean access$102(com.google.common.util.concurrent.SerializingExecutor, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #4                  // Field isThreadScheduled:Z
       6: ireturn

  static java.util.logging.Logger access$400();
    Code:
       0: getstatic     #1                  // Field log:Ljava/util/logging/Logger;
       3: areturn

  static {};
    Code:
       0: ldc_w         #19                 // class com/google/common/util/concurrent/SerializingExecutor
       3: invokevirtual #20                 // Method java/lang/Class.getName:()Ljava/lang/String;
       6: invokestatic  #21                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       9: putstatic     #1                  // Field log:Ljava/util/logging/Logger;
      12: return
}
