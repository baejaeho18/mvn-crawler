Compiled from "AtomicHashMapProxy.java"
public class org.infinispan.atomic.impl.AtomicHashMapProxy<K, V> extends org.infinispan.batch.AutoBatchSupport implements org.infinispan.atomic.AtomicMap<K, V> {
  protected final java.lang.Object deltaMapKey;

  protected final org.infinispan.AdvancedCache<java.lang.Object, org.infinispan.atomic.AtomicMap<K, V>> cache;

  protected final org.infinispan.AdvancedCache<java.lang.Object, org.infinispan.atomic.AtomicMap<K, V>> cacheForWriting;

  protected volatile boolean startedReadingMap;

  protected org.infinispan.transaction.impl.TransactionTable transactionTable;

  protected javax.transaction.TransactionManager transactionManager;

  org.infinispan.atomic.impl.AtomicHashMapProxy(org.infinispan.AdvancedCache<?, ?>, java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/batch/AutoBatchSupport."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field startedReadingMap:Z
       9: aload_1
      10: invokeinterface #3,  1            // InterfaceMethod org/infinispan/AdvancedCache.getCacheConfiguration:()Lorg/infinispan/configuration/cache/Configuration;
      15: astore_3
      16: aload_3
      17: invokevirtual #4                  // Method org/infinispan/configuration/cache/Configuration.transaction:()Lorg/infinispan/configuration/cache/TransactionConfiguration;
      20: invokevirtual #5                  // Method org/infinispan/configuration/cache/TransactionConfiguration.transactionMode:()Lorg/infinispan/transaction/TransactionMode;
      23: getstatic     #6                  // Field org/infinispan/transaction/TransactionMode.NON_TRANSACTIONAL:Lorg/infinispan/transaction/TransactionMode;
      26: if_acmpne     39
      29: new           #7                  // class java/lang/IllegalStateException
      32: dup
      33: ldc           #8                  // String AtomicMap needs a transactional cache.
      35: invokespecial #9                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: aload_1
      41: putfield      #10                 // Field cache:Lorg/infinispan/AdvancedCache;
      44: aload_0
      45: aload_1
      46: invokeinterface #11,  1           // InterfaceMethod org/infinispan/AdvancedCache.getAdvancedCache:()Lorg/infinispan/AdvancedCache;
      51: iconst_1
      52: anewarray     #12                 // class org/infinispan/context/Flag
      55: dup
      56: iconst_0
      57: getstatic     #13                 // Field org/infinispan/context/Flag.DELTA_WRITE:Lorg/infinispan/context/Flag;
      60: aastore
      61: invokeinterface #14,  2           // InterfaceMethod org/infinispan/AdvancedCache.withFlags:([Lorg/infinispan/context/Flag;)Lorg/infinispan/AdvancedCache;
      66: putfield      #15                 // Field cacheForWriting:Lorg/infinispan/AdvancedCache;
      69: aload_0
      70: aload_2
      71: putfield      #16                 // Field deltaMapKey:Ljava/lang/Object;
      74: aload_0
      75: aload_1
      76: invokeinterface #17,  1           // InterfaceMethod org/infinispan/AdvancedCache.getBatchContainer:()Lorg/infinispan/batch/BatchContainer;
      81: putfield      #18                 // Field batchContainer:Lorg/infinispan/batch/BatchContainer;
      84: aload_0
      85: aload_1
      86: invokeinterface #19,  1           // InterfaceMethod org/infinispan/AdvancedCache.getComponentRegistry:()Lorg/infinispan/factories/ComponentRegistry;
      91: ldc           #20                 // class org/infinispan/transaction/impl/TransactionTable
      93: invokevirtual #21                 // Method org/infinispan/factories/ComponentRegistry.getComponent:(Ljava/lang/Class;)Ljava/lang/Object;
      96: checkcast     #20                 // class org/infinispan/transaction/impl/TransactionTable
      99: putfield      #22                 // Field transactionTable:Lorg/infinispan/transaction/impl/TransactionTable;
     102: aload_0
     103: aload_1
     104: invokeinterface #23,  1           // InterfaceMethod org/infinispan/AdvancedCache.getTransactionManager:()Ljavax/transaction/TransactionManager;
     109: putfield      #24                 // Field transactionManager:Ljavax/transaction/TransactionManager;
     112: return

  protected org.infinispan.atomic.impl.AtomicHashMap<K, V> toMap(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #25                 // class org/infinispan/marshall/core/MarshalledValue
       4: ifeq          17
       7: aload_1
       8: checkcast     #25                 // class org/infinispan/marshall/core/MarshalledValue
      11: invokevirtual #26                 // Method org/infinispan/marshall/core/MarshalledValue.get:()Ljava/lang/Object;
      14: goto          18
      17: aload_1
      18: astore_2
      19: aload_2
      20: checkcast     #27                 // class org/infinispan/atomic/impl/AtomicHashMap
      23: areturn

  protected org.infinispan.atomic.impl.AtomicHashMap<K, V> getDeltaMapForRead();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field cache:Lorg/infinispan/AdvancedCache;
       5: aload_0
       6: getfield      #16                 // Field deltaMapKey:Ljava/lang/Object;
       9: invokeinterface #28,  2           // InterfaceMethod org/infinispan/AdvancedCache.get:(Ljava/lang/Object;)Ljava/lang/Object;
      14: invokevirtual #29                 // Method toMap:(Ljava/lang/Object;)Lorg/infinispan/atomic/impl/AtomicHashMap;
      17: astore_1
      18: aload_1
      19: ifnull        34
      22: aload_0
      23: getfield      #2                  // Field startedReadingMap:Z
      26: ifne          34
      29: aload_0
      30: iconst_1
      31: putfield      #2                  // Field startedReadingMap:Z
      34: aload_0
      35: aload_1
      36: invokevirtual #30                 // Method assertValid:(Lorg/infinispan/atomic/impl/AtomicHashMap;)V
      39: aload_1
      40: areturn

  protected org.infinispan.container.entries.CacheEntry lookupEntryFromCurrentTransaction();
    Code:
       0: aload_0
       1: getfield      #24                 // Field transactionManager:Ljavax/transaction/TransactionManager;
       4: invokeinterface #31,  1           // InterfaceMethod javax/transaction/TransactionManager.getTransaction:()Ljavax/transaction/Transaction;
       9: astore_1
      10: aload_1
      11: ifnonnull     18
      14: aconst_null
      15: goto          26
      18: aload_0
      19: getfield      #22                 // Field transactionTable:Lorg/infinispan/transaction/impl/TransactionTable;
      22: aload_1
      23: invokevirtual #32                 // Method org/infinispan/transaction/impl/TransactionTable.getLocalTransaction:(Ljavax/transaction/Transaction;)Lorg/infinispan/transaction/impl/LocalTransaction;
      26: astore_2
      27: aload_2
      28: ifnonnull     35
      31: aconst_null
      32: goto          43
      35: aload_2
      36: aload_0
      37: getfield      #16                 // Field deltaMapKey:Ljava/lang/Object;
      40: invokevirtual #33                 // Method org/infinispan/transaction/impl/LocalTransaction.lookupEntry:(Ljava/lang/Object;)Lorg/infinispan/container/entries/CacheEntry;
      43: areturn
      44: astore_1
      45: aconst_null
      46: areturn
    Exception table:
       from    to  target type
           0    43    44   Class javax/transaction/SystemException

  protected org.infinispan.atomic.impl.AtomicHashMap<K, V> getDeltaMapForWrite();
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method lookupEntryFromCurrentTransaction:()Lorg/infinispan/container/entries/CacheEntry;
       4: astore_1
       5: aload_1
       6: ifnull        38
       9: aload_1
      10: invokeinterface #36,  1           // InterfaceMethod org/infinispan/container/entries/CacheEntry.isChanged:()Z
      15: ifeq          38
      18: aload_0
      19: aload_1
      20: invokeinterface #37,  1           // InterfaceMethod org/infinispan/container/entries/CacheEntry.getValue:()Ljava/lang/Object;
      25: invokevirtual #29                 // Method toMap:(Ljava/lang/Object;)Lorg/infinispan/atomic/impl/AtomicHashMap;
      28: getfield      #38                 // Field org/infinispan/atomic/impl/AtomicHashMap.copied:Z
      31: ifeq          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: istore_2
      40: iload_2
      41: ifeq          49
      44: aload_0
      45: invokevirtual #39                 // Method getDeltaMapForRead:()Lorg/infinispan/atomic/impl/AtomicHashMap;
      48: areturn
      49: aload_0
      50: getfield      #10                 // Field cache:Lorg/infinispan/AdvancedCache;
      53: astore_3
      54: aload_0
      55: getfield      #10                 // Field cache:Lorg/infinispan/AdvancedCache;
      58: invokeinterface #3,  1            // InterfaceMethod org/infinispan/AdvancedCache.getCacheConfiguration:()Lorg/infinispan/configuration/cache/Configuration;
      63: invokevirtual #4                  // Method org/infinispan/configuration/cache/Configuration.transaction:()Lorg/infinispan/configuration/cache/TransactionConfiguration;
      66: invokevirtual #40                 // Method org/infinispan/configuration/cache/TransactionConfiguration.lockingMode:()Lorg/infinispan/transaction/LockingMode;
      69: getstatic     #41                 // Field org/infinispan/transaction/LockingMode.PESSIMISTIC:Lorg/infinispan/transaction/LockingMode;
      72: if_acmpne     95
      75: aload_0
      76: getfield      #10                 // Field cache:Lorg/infinispan/AdvancedCache;
      79: iconst_1
      80: anewarray     #12                 // class org/infinispan/context/Flag
      83: dup
      84: iconst_0
      85: getstatic     #42                 // Field org/infinispan/context/Flag.FORCE_WRITE_LOCK:Lorg/infinispan/context/Flag;
      88: aastore
      89: invokeinterface #14,  2           // InterfaceMethod org/infinispan/AdvancedCache.withFlags:([Lorg/infinispan/context/Flag;)Lorg/infinispan/AdvancedCache;
      94: astore_3
      95: aload_0
      96: aload_3
      97: aload_0
      98: getfield      #16                 // Field deltaMapKey:Ljava/lang/Object;
     101: invokeinterface #28,  2           // InterfaceMethod org/infinispan/AdvancedCache.get:(Ljava/lang/Object;)Ljava/lang/Object;
     106: invokevirtual #29                 // Method toMap:(Ljava/lang/Object;)Lorg/infinispan/atomic/impl/AtomicHashMap;
     109: astore        4
     111: aload         4
     113: ifnull        128
     116: aload_0
     117: getfield      #2                  // Field startedReadingMap:Z
     120: ifne          128
     123: aload_0
     124: iconst_1
     125: putfield      #2                  // Field startedReadingMap:Z
     128: aload_0
     129: aload         4
     131: invokevirtual #30                 // Method assertValid:(Lorg/infinispan/atomic/impl/AtomicHashMap;)V
     134: aload         4
     136: ifnonnull     150
     139: new           #27                 // class org/infinispan/atomic/impl/AtomicHashMap
     142: dup
     143: iconst_1
     144: invokespecial #43                 // Method org/infinispan/atomic/impl/AtomicHashMap."<init>":(Z)V
     147: goto          155
     150: aload         4
     152: invokevirtual #44                 // Method org/infinispan/atomic/impl/AtomicHashMap.copy:()Lorg/infinispan/atomic/impl/AtomicHashMap;
     155: astore        5
     157: aload         5
     159: invokevirtual #45                 // Method org/infinispan/atomic/impl/AtomicHashMap.initForWriting:()V
     162: aload_0
     163: getfield      #15                 // Field cacheForWriting:Lorg/infinispan/AdvancedCache;
     166: aload_0
     167: getfield      #16                 // Field deltaMapKey:Ljava/lang/Object;
     170: aload         5
     172: invokeinterface #46,  3           // InterfaceMethod org/infinispan/AdvancedCache.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     177: pop
     178: aload         5
     180: areturn

  protected void assertValid(org.infinispan.atomic.impl.AtomicHashMap<?, ?>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field startedReadingMap:Z
       4: ifeq          53
       7: aload_1
       8: ifnull        18
      11: aload_1
      12: getfield      #47                 // Field org/infinispan/atomic/impl/AtomicHashMap.removed:Z
      15: ifeq          53
      18: new           #7                  // class java/lang/IllegalStateException
      21: dup
      22: new           #48                 // class java/lang/StringBuilder
      25: dup
      26: invokespecial #49                 // Method java/lang/StringBuilder."<init>":()V
      29: ldc           #50                 // String AtomicMap stored under key
      31: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_0
      35: getfield      #16                 // Field deltaMapKey:Ljava/lang/Object;
      38: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      41: ldc           #53                 // String  has been concurrently removed!
      43: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokespecial #9                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: return

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getDeltaMapForRead:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       4: astore_1
       5: aload_1
       6: ifnonnull     15
       9: invokestatic  #55                 // Method org/infinispan/commons/util/InfinispanCollections.emptySet:()Ljava/util/Set;
      12: goto          19
      15: aload_1
      16: invokevirtual #56                 // Method org/infinispan/atomic/impl/AtomicHashMap.keySet:()Ljava/util/Set;
      19: areturn

  public java.util.Collection<V> values();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getDeltaMapForRead:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       4: astore_1
       5: aload_1
       6: ifnonnull     15
       9: invokestatic  #55                 // Method org/infinispan/commons/util/InfinispanCollections.emptySet:()Ljava/util/Set;
      12: goto          19
      15: aload_1
      16: invokevirtual #57                 // Method org/infinispan/atomic/impl/AtomicHashMap.values:()Ljava/util/Collection;
      19: areturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getDeltaMapForRead:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       4: astore_1
       5: aload_1
       6: ifnonnull     15
       9: invokestatic  #55                 // Method org/infinispan/commons/util/InfinispanCollections.emptySet:()Ljava/util/Set;
      12: goto          19
      15: aload_1
      16: invokevirtual #58                 // Method org/infinispan/atomic/impl/AtomicHashMap.entrySet:()Ljava/util/Set;
      19: areturn

  public int size();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getDeltaMapForRead:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       4: astore_1
       5: aload_1
       6: ifnonnull     13
       9: iconst_0
      10: goto          17
      13: aload_1
      14: invokevirtual #59                 // Method org/infinispan/atomic/impl/AtomicHashMap.size:()I
      17: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getDeltaMapForRead:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       4: astore_1
       5: aload_1
       6: ifnull        16
       9: aload_1
      10: invokevirtual #60                 // Method org/infinispan/atomic/impl/AtomicHashMap.isEmpty:()Z
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getDeltaMapForRead:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       4: astore_2
       5: aload_2
       6: ifnull        21
       9: aload_2
      10: aload_1
      11: invokevirtual #61                 // Method org/infinispan/atomic/impl/AtomicHashMap.containsKey:(Ljava/lang/Object;)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getDeltaMapForRead:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       4: astore_2
       5: aload_2
       6: ifnull        21
       9: aload_2
      10: aload_1
      11: invokevirtual #62                 // Method org/infinispan/atomic/impl/AtomicHashMap.containsValue:(Ljava/lang/Object;)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getDeltaMapForRead:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       4: astore_2
       5: aload_2
       6: ifnonnull     13
       9: aconst_null
      10: goto          18
      13: aload_2
      14: aload_1
      15: invokevirtual #63                 // Method org/infinispan/atomic/impl/AtomicHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      18: areturn

  public V put(K, V);
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method startAtomic:()V
       4: aload_0
       5: invokevirtual #65                 // Method getDeltaMapForWrite:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       8: astore_3
       9: aload_3
      10: aload_1
      11: aload_2
      12: invokevirtual #66                 // Method org/infinispan/atomic/impl/AtomicHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      15: astore        4
      17: aload_0
      18: invokevirtual #67                 // Method endAtomic:()V
      21: aload         4
      23: areturn
      24: astore        5
      26: aload_0
      27: invokevirtual #67                 // Method endAtomic:()V
      30: aload         5
      32: athrow
    Exception table:
       from    to  target type
           0    17    24   any
          24    26    24   any

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method startAtomic:()V
       4: aload_0
       5: invokevirtual #65                 // Method getDeltaMapForWrite:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       8: astore_2
       9: aload_2
      10: aload_1
      11: invokevirtual #68                 // Method org/infinispan/atomic/impl/AtomicHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      14: astore_3
      15: aload_0
      16: invokevirtual #67                 // Method endAtomic:()V
      19: aload_3
      20: areturn
      21: astore        4
      23: aload_0
      24: invokevirtual #67                 // Method endAtomic:()V
      27: aload         4
      29: athrow
    Exception table:
       from    to  target type
           0    15    21   any
          21    23    21   any

  public void putAll(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method startAtomic:()V
       4: aload_0
       5: invokevirtual #65                 // Method getDeltaMapForWrite:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       8: astore_2
       9: aload_2
      10: aload_1
      11: invokevirtual #69                 // Method org/infinispan/atomic/impl/AtomicHashMap.putAll:(Ljava/util/Map;)V
      14: aload_0
      15: invokevirtual #67                 // Method endAtomic:()V
      18: goto          28
      21: astore_3
      22: aload_0
      23: invokevirtual #67                 // Method endAtomic:()V
      26: aload_3
      27: athrow
      28: return
    Exception table:
       from    to  target type
           0    14    21   any

  public void clear();
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method startAtomic:()V
       4: aload_0
       5: invokevirtual #65                 // Method getDeltaMapForWrite:()Lorg/infinispan/atomic/impl/AtomicHashMap;
       8: astore_1
       9: aload_1
      10: invokevirtual #70                 // Method org/infinispan/atomic/impl/AtomicHashMap.clear:()V
      13: aload_0
      14: invokevirtual #67                 // Method endAtomic:()V
      17: goto          27
      20: astore_2
      21: aload_0
      22: invokevirtual #67                 // Method endAtomic:()V
      25: aload_2
      26: athrow
      27: return
    Exception table:
       from    to  target type
           0    13    20   any

  public java.lang.String toString();
    Code:
       0: new           #48                 // class java/lang/StringBuilder
       3: dup
       4: ldc           #71                 // String AtomicHashMapProxy{deltaMapKey=
       6: invokespecial #72                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: astore_1
      10: aload_1
      11: aload_0
      12: getfield      #16                 // Field deltaMapKey:Ljava/lang/Object;
      15: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      18: pop
      19: aload_1
      20: ldc           #73                 // String }
      22: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: pop
      26: aload_1
      27: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: areturn
}
