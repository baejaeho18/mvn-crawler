Compiled from "AdvancedCache.java"
public interface org.infinispan.AdvancedCache<K, V> extends org.infinispan.Cache<K, V> {
  public abstract org.infinispan.AdvancedCache<K, V> withFlags(org.infinispan.context.Flag...);

  public abstract void addInterceptor(org.infinispan.interceptors.base.CommandInterceptor, int);

  public abstract boolean addInterceptorAfter(org.infinispan.interceptors.base.CommandInterceptor, java.lang.Class<? extends org.infinispan.interceptors.base.CommandInterceptor>);

  public abstract boolean addInterceptorBefore(org.infinispan.interceptors.base.CommandInterceptor, java.lang.Class<? extends org.infinispan.interceptors.base.CommandInterceptor>);

  public abstract void removeInterceptor(int);

  public abstract void removeInterceptor(java.lang.Class<? extends org.infinispan.interceptors.base.CommandInterceptor>);

  public abstract java.util.List<org.infinispan.interceptors.base.CommandInterceptor> getInterceptorChain();

  public abstract org.infinispan.eviction.EvictionManager getEvictionManager();

  public abstract org.infinispan.expiration.ExpirationManager<K, V> getExpirationManager();

  public abstract org.infinispan.factories.ComponentRegistry getComponentRegistry();

  public abstract org.infinispan.distribution.DistributionManager getDistributionManager();

  public abstract org.infinispan.security.AuthorizationManager getAuthorizationManager();

  public abstract boolean lock(K...);

  public abstract boolean lock(java.util.Collection<? extends K>);

  public abstract void applyDelta(K, org.infinispan.atomic.Delta, java.lang.Object...);

  public abstract org.infinispan.remoting.rpc.RpcManager getRpcManager();

  public abstract org.infinispan.batch.BatchContainer getBatchContainer();

  public abstract org.infinispan.context.InvocationContextContainer getInvocationContextContainer();

  public abstract org.infinispan.container.DataContainer<K, V> getDataContainer();

  public abstract javax.transaction.TransactionManager getTransactionManager();

  public abstract org.infinispan.util.concurrent.locks.LockManager getLockManager();

  public abstract org.infinispan.stats.Stats getStats();

  public abstract javax.transaction.xa.XAResource getXAResource();

  public abstract java.lang.ClassLoader getClassLoader();

  public abstract org.infinispan.AdvancedCache<K, V> with(java.lang.ClassLoader);

  public abstract V put(K, V, org.infinispan.metadata.Metadata);

  public abstract void putAll(java.util.Map<? extends K, ? extends V>, org.infinispan.metadata.Metadata);

  public abstract V replace(K, V, org.infinispan.metadata.Metadata);

  public abstract boolean replace(K, V, V, org.infinispan.metadata.Metadata);

  public abstract V putIfAbsent(K, V, org.infinispan.metadata.Metadata);

  public abstract void putForExternalRead(K, V, org.infinispan.metadata.Metadata);

  public abstract org.infinispan.commons.util.concurrent.NotifyingFuture<V> putAsync(K, V, org.infinispan.metadata.Metadata);

  public abstract java.util.Map<K, V> getAll(java.util.Set<?>);

  public abstract org.infinispan.container.entries.CacheEntry<K, V> getCacheEntry(java.lang.Object);

  public abstract java.util.Map<K, org.infinispan.container.entries.CacheEntry<K, V>> getAllCacheEntries(java.util.Set<?>);

  public abstract org.infinispan.iteration.EntryIterable<K, V> filterEntries(org.infinispan.filter.KeyValueFilter<? super K, ? super V>);

  public abstract java.util.Map<K, V> getGroup(java.lang.String);

  public abstract void removeGroup(java.lang.String);

  public abstract org.infinispan.partitionhandling.AvailabilityMode getAvailability();

  public abstract void setAvailability(org.infinispan.partitionhandling.AvailabilityMode);

  public abstract org.infinispan.CacheSet<org.infinispan.container.entries.CacheEntry<K, V>> cacheEntrySet();

  public abstract void removeExpired(K, V, java.lang.Long);
}
