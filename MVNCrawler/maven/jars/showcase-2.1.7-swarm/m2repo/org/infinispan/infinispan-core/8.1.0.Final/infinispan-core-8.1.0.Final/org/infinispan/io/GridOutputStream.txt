Compiled from "GridOutputStream.java"
public class org.infinispan.io.GridOutputStream extends java.io.OutputStream {
  private int index;

  private int localIndex;

  private final byte[] currentBuffer;

  private int numberOfChunksWhenOpened;

  private final org.infinispan.io.FileChunkMapper fileChunkMapper;

  private final int chunkSize;

  private org.infinispan.io.GridFile file;

  private boolean streamClosed;

  org.infinispan.io.GridOutputStream(org.infinispan.io.GridFile, boolean, org.infinispan.Cache<java.lang.String, byte[]>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: new           #2                  // class org/infinispan/io/FileChunkMapper
       8: dup
       9: aload_1
      10: aload_3
      11: invokespecial #3                  // Method org/infinispan/io/FileChunkMapper."<init>":(Lorg/infinispan/io/GridFile;Lorg/infinispan/Cache;)V
      14: putfield      #4                  // Field fileChunkMapper:Lorg/infinispan/io/FileChunkMapper;
      17: aload_0
      18: aload_0
      19: getfield      #4                  // Field fileChunkMapper:Lorg/infinispan/io/FileChunkMapper;
      22: invokevirtual #5                  // Method org/infinispan/io/FileChunkMapper.getChunkSize:()I
      25: putfield      #6                  // Field chunkSize:I
      28: aload_0
      29: aload_1
      30: putfield      #7                  // Field file:Lorg/infinispan/io/GridFile;
      33: aload_0
      34: iload_2
      35: ifeq          46
      38: aload_1
      39: invokevirtual #8                  // Method org/infinispan/io/GridFile.length:()J
      42: l2i
      43: goto          47
      46: iconst_0
      47: putfield      #9                  // Field index:I
      50: aload_0
      51: iload_2
      52: ifeq          69
      55: aload_0
      56: invokespecial #10                 // Method isLastChunkFull:()Z
      59: ifeq          69
      62: aload_0
      63: getfield      #6                  // Field chunkSize:I
      66: goto          80
      69: aload_0
      70: getfield      #9                  // Field index:I
      73: aload_0
      74: getfield      #6                  // Field chunkSize:I
      77: invokestatic  #11                 // Method org/infinispan/io/ModularArithmetic.mod:(II)I
      80: putfield      #12                 // Field localIndex:I
      83: aload_0
      84: iload_2
      85: ifeq          95
      88: aload_0
      89: invokespecial #13                 // Method fetchLastChunk:()[B
      92: goto          99
      95: aload_0
      96: invokespecial #14                 // Method createEmptyChunk:()[B
      99: putfield      #15                 // Field currentBuffer:[B
     102: aload_0
     103: aload_0
     104: invokespecial #16                 // Method getLastChunkNumber:()I
     107: iconst_1
     108: iadd
     109: putfield      #17                 // Field numberOfChunksWhenOpened:I
     112: return

  private byte[] createEmptyChunk();
    Code:
       0: aload_0
       1: getfield      #6                  // Field chunkSize:I
       4: newarray       byte
       6: areturn

  private boolean isLastChunkFull();
    Code:
       0: aload_0
       1: getfield      #7                  // Field file:Lorg/infinispan/io/GridFile;
       4: invokevirtual #8                  // Method org/infinispan/io/GridFile.length:()J
       7: aload_0
       8: getfield      #6                  // Field chunkSize:I
      11: invokestatic  #18                 // Method org/infinispan/io/ModularArithmetic.mod:(JI)J
      14: lstore_1
      15: lload_1
      16: lconst_0
      17: lcmp
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  private byte[] fetchLastChunk();
    Code:
       0: aload_0
       1: getfield      #4                  // Field fileChunkMapper:Lorg/infinispan/io/FileChunkMapper;
       4: aload_0
       5: invokespecial #16                 // Method getLastChunkNumber:()I
       8: invokevirtual #19                 // Method org/infinispan/io/FileChunkMapper.fetchChunk:(I)[B
      11: astore_1
      12: aload_0
      13: aload_1
      14: invokespecial #20                 // Method createFullSizeCopy:([B)[B
      17: areturn

  private byte[] createFullSizeCopy(byte[]);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method createEmptyChunk:()[B
       4: astore_2
       5: aload_1
       6: ifnull        18
       9: aload_1
      10: iconst_0
      11: aload_2
      12: iconst_0
      13: aload_1
      14: arraylength
      15: invokestatic  #21                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      18: aload_2
      19: areturn

  private int getLastChunkNumber();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #7                  // Field file:Lorg/infinispan/io/GridFile;
       5: invokevirtual #8                  // Method org/infinispan/io/GridFile.length:()J
       8: l2i
       9: iconst_1
      10: isub
      11: invokespecial #22                 // Method getChunkNumber:(I)I
      14: ireturn

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #23                 // Method assertOpen:()V
       4: aload_0
       5: invokespecial #24                 // Method getBytesRemainingInChunk:()I
       8: istore_2
       9: iload_2
      10: ifne          22
      13: aload_0
      14: invokevirtual #25                 // Method flush:()V
      17: aload_0
      18: iconst_0
      19: putfield      #12                 // Field localIndex:I
      22: aload_0
      23: getfield      #15                 // Field currentBuffer:[B
      26: aload_0
      27: getfield      #12                 // Field localIndex:I
      30: iload_1
      31: i2b
      32: bastore
      33: aload_0
      34: dup
      35: getfield      #12                 // Field localIndex:I
      38: iconst_1
      39: iadd
      40: putfield      #12                 // Field localIndex:I
      43: aload_0
      44: dup
      45: getfield      #9                  // Field index:I
      48: iconst_1
      49: iadd
      50: putfield      #9                  // Field index:I
      53: return

  private void assertOpen() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #26                 // Field streamClosed:Z
       4: ifeq          17
       7: new           #27                 // class java/io/IOException
      10: dup
      11: ldc           #28                 // String Stream is closed
      13: invokespecial #29                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  public void write(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #23                 // Method assertOpen:()V
       4: aload_1
       5: ifnull        16
       8: aload_0
       9: aload_1
      10: iconst_0
      11: aload_1
      12: arraylength
      13: invokevirtual #30                 // Method write:([BII)V
      16: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #23                 // Method assertOpen:()V
       4: iload_3
       5: ifle          30
       8: aload_0
       9: aload_1
      10: iload_2
      11: iload_3
      12: invokespecial #31                 // Method writeToChunk:([BII)I
      15: istore        4
      17: iload_2
      18: iload         4
      20: iadd
      21: istore_2
      22: iload_3
      23: iload         4
      25: isub
      26: istore_3
      27: goto          4
      30: return

  private int writeToChunk(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #24                 // Method getBytesRemainingInChunk:()I
       4: istore        4
       6: iload         4
       8: ifne          26
      11: aload_0
      12: invokevirtual #25                 // Method flush:()V
      15: aload_0
      16: iconst_0
      17: putfield      #12                 // Field localIndex:I
      20: aload_0
      21: getfield      #6                  // Field chunkSize:I
      24: istore        4
      26: iload         4
      28: iload_3
      29: invokestatic  #32                 // Method java/lang/Math.min:(II)I
      32: istore        5
      34: aload_1
      35: iload_2
      36: aload_0
      37: getfield      #15                 // Field currentBuffer:[B
      40: aload_0
      41: getfield      #12                 // Field localIndex:I
      44: iload         5
      46: invokestatic  #21                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      49: aload_0
      50: dup
      51: getfield      #12                 // Field localIndex:I
      54: iload         5
      56: iadd
      57: putfield      #12                 // Field localIndex:I
      60: aload_0
      61: dup
      62: getfield      #9                  // Field index:I
      65: iload         5
      67: iadd
      68: putfield      #9                  // Field index:I
      71: iload         5
      73: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #26                 // Field streamClosed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: invokevirtual #25                 // Method flush:()V
      12: aload_0
      13: invokespecial #33                 // Method removeExcessChunks:()V
      16: aload_0
      17: invokespecial #34                 // Method reset:()V
      20: aload_0
      21: iconst_1
      22: putfield      #26                 // Field streamClosed:Z
      25: return

  private void removeExcessChunks();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method getLastChunkNumber:()I
       4: iconst_1
       5: iadd
       6: istore_1
       7: iload_1
       8: aload_0
       9: getfield      #17                 // Field numberOfChunksWhenOpened:I
      12: if_icmpge     29
      15: aload_0
      16: getfield      #4                  // Field fileChunkMapper:Lorg/infinispan/io/FileChunkMapper;
      19: iload_1
      20: invokevirtual #35                 // Method org/infinispan/io/FileChunkMapper.removeChunk:(I)V
      23: iinc          1, 1
      26: goto          7
      29: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method storeChunk:()V
       4: aload_0
       5: getfield      #7                  // Field file:Lorg/infinispan/io/GridFile;
       8: aload_0
       9: getfield      #9                  // Field index:I
      12: invokevirtual #37                 // Method org/infinispan/io/GridFile.setLength:(I)V
      15: return

  private void storeChunk();
    Code:
       0: aload_0
       1: getfield      #4                  // Field fileChunkMapper:Lorg/infinispan/io/FileChunkMapper;
       4: aload_0
       5: aload_0
       6: getfield      #9                  // Field index:I
       9: iconst_1
      10: isub
      11: invokespecial #22                 // Method getChunkNumber:(I)I
      14: aload_0
      15: getfield      #15                 // Field currentBuffer:[B
      18: aload_0
      19: getfield      #12                 // Field localIndex:I
      22: invokevirtual #38                 // Method org/infinispan/io/FileChunkMapper.storeChunk:(I[BI)V
      25: return

  private int getBytesRemainingInChunk();
    Code:
       0: aload_0
       1: getfield      #6                  // Field chunkSize:I
       4: aload_0
       5: getfield      #12                 // Field localIndex:I
       8: isub
       9: ireturn

  private int getChunkNumber(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #6                  // Field chunkSize:I
       5: idiv
       6: ireturn

  private void reset();
    Code:
       0: aload_0
       1: aload_0
       2: iconst_0
       3: dup_x1
       4: putfield      #12                 // Field localIndex:I
       7: putfield      #9                  // Field index:I
      10: return
}
