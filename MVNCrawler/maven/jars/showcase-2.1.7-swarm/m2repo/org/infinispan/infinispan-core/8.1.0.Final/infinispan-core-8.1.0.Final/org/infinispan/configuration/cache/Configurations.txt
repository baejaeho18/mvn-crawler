Compiled from "Configurations.java"
public class org.infinispan.configuration.cache.Configurations {
  private org.infinispan.configuration.cache.Configurations();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static boolean isSecondPhaseAsync(org.infinispan.configuration.cache.Configuration);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method org/infinispan/configuration/cache/Configuration.clustering:()Lorg/infinispan/configuration/cache/ClusteringConfiguration;
       4: astore_1
       5: aload_0
       6: invokevirtual #3                  // Method org/infinispan/configuration/cache/Configuration.transaction:()Lorg/infinispan/configuration/cache/TransactionConfiguration;
       9: invokevirtual #4                  // Method org/infinispan/configuration/cache/TransactionConfiguration.syncCommitPhase:()Z
      12: ifeq          35
      15: aload_1
      16: invokevirtual #5                  // Method org/infinispan/configuration/cache/ClusteringConfiguration.async:()Lorg/infinispan/configuration/cache/AsyncConfiguration;
      19: invokevirtual #6                  // Method org/infinispan/configuration/cache/AsyncConfiguration.useReplQueue:()Z
      22: ifne          35
      25: aload_1
      26: invokevirtual #7                  // Method org/infinispan/configuration/cache/ClusteringConfiguration.cacheMode:()Lorg/infinispan/configuration/cache/CacheMode;
      29: invokevirtual #8                  // Method org/infinispan/configuration/cache/CacheMode.isSynchronous:()Z
      32: ifne          39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ireturn

  public static boolean isOnePhaseCommit(org.infinispan.configuration.cache.Configuration);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method org/infinispan/configuration/cache/Configuration.clustering:()Lorg/infinispan/configuration/cache/ClusteringConfiguration;
       4: invokevirtual #7                  // Method org/infinispan/configuration/cache/ClusteringConfiguration.cacheMode:()Lorg/infinispan/configuration/cache/CacheMode;
       7: invokevirtual #8                  // Method org/infinispan/configuration/cache/CacheMode.isSynchronous:()Z
      10: ifeq          26
      13: aload_0
      14: invokevirtual #3                  // Method org/infinispan/configuration/cache/Configuration.transaction:()Lorg/infinispan/configuration/cache/TransactionConfiguration;
      17: invokevirtual #9                  // Method org/infinispan/configuration/cache/TransactionConfiguration.lockingMode:()Lorg/infinispan/transaction/LockingMode;
      20: getstatic     #10                 // Field org/infinispan/transaction/LockingMode.PESSIMISTIC:Lorg/infinispan/transaction/LockingMode;
      23: if_acmpne     30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public static boolean isOnePhaseTotalOrderCommit(org.infinispan.configuration.cache.Configuration);
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method org/infinispan/configuration/cache/Configuration.transaction:()Lorg/infinispan/configuration/cache/TransactionConfiguration;
       4: invokevirtual #11                 // Method org/infinispan/configuration/cache/TransactionConfiguration.transactionProtocol:()Lorg/infinispan/transaction/TransactionProtocol;
       7: invokevirtual #12                 // Method org/infinispan/transaction/TransactionProtocol.isTotalOrder:()Z
      10: ifeq          24
      13: aload_0
      14: invokestatic  #13                 // Method isVersioningEnabled:(Lorg/infinispan/configuration/cache/Configuration;)Z
      17: ifne          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public static boolean isVersioningEnabled(org.infinispan.configuration.cache.Configuration);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method org/infinispan/configuration/cache/Configuration.locking:()Lorg/infinispan/configuration/cache/LockingConfiguration;
       4: invokevirtual #15                 // Method org/infinispan/configuration/cache/LockingConfiguration.writeSkewCheck:()Z
       7: ifeq          37
      10: aload_0
      11: invokevirtual #3                  // Method org/infinispan/configuration/cache/Configuration.transaction:()Lorg/infinispan/configuration/cache/TransactionConfiguration;
      14: invokevirtual #9                  // Method org/infinispan/configuration/cache/TransactionConfiguration.lockingMode:()Lorg/infinispan/transaction/LockingMode;
      17: getstatic     #16                 // Field org/infinispan/transaction/LockingMode.OPTIMISTIC:Lorg/infinispan/transaction/LockingMode;
      20: if_acmpne     37
      23: aload_0
      24: invokevirtual #17                 // Method org/infinispan/configuration/cache/Configuration.versioning:()Lorg/infinispan/configuration/cache/VersioningConfiguration;
      27: invokevirtual #18                 // Method org/infinispan/configuration/cache/VersioningConfiguration.enabled:()Z
      30: ifeq          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  public static boolean noDataLossOnJoiner(org.infinispan.configuration.cache.Configuration);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method org/infinispan/configuration/cache/Configuration.clustering:()Lorg/infinispan/configuration/cache/ClusteringConfiguration;
       4: invokevirtual #7                  // Method org/infinispan/configuration/cache/ClusteringConfiguration.cacheMode:()Lorg/infinispan/configuration/cache/CacheMode;
       7: invokevirtual #19                 // Method org/infinispan/configuration/cache/CacheMode.isClustered:()Z
      10: ifne          15
      13: iconst_1
      14: ireturn
      15: aload_0
      16: invokestatic  #20                 // Method hasSharedCacheLoaderOrWriter:(Lorg/infinispan/configuration/cache/Configuration;)Z
      19: ifeq          24
      22: iconst_1
      23: ireturn
      24: aload_0
      25: invokevirtual #21                 // Method org/infinispan/configuration/cache/Configuration.persistence:()Lorg/infinispan/configuration/cache/PersistenceConfiguration;
      28: invokevirtual #22                 // Method org/infinispan/configuration/cache/PersistenceConfiguration.usingStores:()Z
      31: istore_1
      32: aload_0
      33: invokevirtual #21                 // Method org/infinispan/configuration/cache/Configuration.persistence:()Lorg/infinispan/configuration/cache/PersistenceConfiguration;
      36: invokevirtual #23                 // Method org/infinispan/configuration/cache/PersistenceConfiguration.passivation:()Z
      39: istore_2
      40: aload_0
      41: invokevirtual #2                  // Method org/infinispan/configuration/cache/Configuration.clustering:()Lorg/infinispan/configuration/cache/ClusteringConfiguration;
      44: invokevirtual #24                 // Method org/infinispan/configuration/cache/ClusteringConfiguration.stateTransfer:()Lorg/infinispan/configuration/cache/StateTransferConfiguration;
      47: invokevirtual #25                 // Method org/infinispan/configuration/cache/StateTransferConfiguration.fetchInMemoryState:()Z
      50: istore_3
      51: aload_0
      52: invokevirtual #21                 // Method org/infinispan/configuration/cache/Configuration.persistence:()Lorg/infinispan/configuration/cache/PersistenceConfiguration;
      55: invokevirtual #26                 // Method org/infinispan/configuration/cache/PersistenceConfiguration.fetchPersistentState:()Ljava/lang/Boolean;
      58: invokevirtual #27                 // Method java/lang/Boolean.booleanValue:()Z
      61: istore        4
      63: iload_1
      64: ifeq          80
      67: iload_2
      68: ifne          80
      71: iload_3
      72: ifne          105
      75: iload         4
      77: ifne          105
      80: iload_1
      81: ifeq          97
      84: iload_2
      85: ifeq          97
      88: iload_3
      89: ifeq          97
      92: iload         4
      94: ifne          105
      97: iload_1
      98: ifne          109
     101: iload_3
     102: ifeq          109
     105: iconst_1
     106: goto          110
     109: iconst_0
     110: ireturn

  public static boolean hasSharedCacheLoaderOrWriter(org.infinispan.configuration.cache.Configuration);
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method org/infinispan/configuration/cache/Configuration.persistence:()Lorg/infinispan/configuration/cache/PersistenceConfiguration;
       4: invokevirtual #28                 // Method org/infinispan/configuration/cache/PersistenceConfiguration.stores:()Ljava/util/List;
       7: invokeinterface #29,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: astore_1
      13: aload_1
      14: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          46
      22: aload_1
      23: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #32                 // class org/infinispan/configuration/cache/StoreConfiguration
      31: astore_2
      32: aload_2
      33: invokeinterface #33,  1           // InterfaceMethod org/infinispan/configuration/cache/StoreConfiguration.shared:()Z
      38: ifeq          43
      41: iconst_1
      42: ireturn
      43: goto          13
      46: iconst_0
      47: ireturn
}
