Compiled from "ClusteredRepeatableReadEntry.java"
public class org.infinispan.container.entries.ClusteredRepeatableReadEntry extends org.infinispan.container.entries.RepeatableReadEntry implements org.infinispan.container.entries.versioned.Versioned {
  private static final org.infinispan.util.logging.Log log;

  private static final boolean trace;

  private static final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ignored;

  public org.infinispan.container.entries.ClusteredRepeatableReadEntry(java.lang.Object, java.lang.Object, org.infinispan.metadata.Metadata);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method org/infinispan/container/entries/RepeatableReadEntry."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lorg/infinispan/metadata/Metadata;)V
       7: return

  public boolean performWriteSkewCheck(org.infinispan.container.DataContainer, org.infinispan.persistence.manager.PersistenceManager, org.infinispan.context.impl.TxInvocationContext, org.infinispan.container.versioning.EntryVersion, org.infinispan.container.versioning.VersionGenerator, org.infinispan.util.TimeService);
    Code:
       0: aload         4
       2: ifnonnull     27
       5: getstatic     #2                  // Field trace:Z
       8: ifeq          25
      11: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      14: ldc           #4                  // String Perform write skew check for key %s but the key was not read. Skipping check!
      16: aload_0
      17: getfield      #5                  // Field key:Ljava/lang/Object;
      20: invokeinterface #6,  3            // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      25: iconst_1
      26: ireturn
      27: aload_1
      28: aload_2
      29: aload_0
      30: invokevirtual #7                  // Method getKey:()Ljava/lang/Object;
      33: aload_3
      34: aload         6
      36: getstatic     #8                  // Field ignored:Ljava/util/concurrent/atomic/AtomicReference;
      39: invokestatic  #9                  // Method org/infinispan/persistence/PersistenceUtil.loadAndStoreInDataContainer:(Lorg/infinispan/container/DataContainer;Lorg/infinispan/persistence/manager/PersistenceManager;Ljava/lang/Object;Lorg/infinispan/context/InvocationContext;Lorg/infinispan/util/TimeService;Ljava/util/concurrent/atomic/AtomicReference;)Lorg/infinispan/container/entries/InternalCacheEntry;
      42: astore        8
      44: aload         8
      46: ifnonnull     135
      49: getstatic     #2                  // Field trace:Z
      52: ifeq          69
      55: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      58: ldc           #10                 // String No entry for key %s found in data container
      60: aload_0
      61: getfield      #5                  // Field key:Ljava/lang/Object;
      64: invokeinterface #6,  3            // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      69: aload_3
      70: invokeinterface #11,  1           // InterfaceMethod org/infinispan/context/impl/TxInvocationContext.getCacheTransaction:()Lorg/infinispan/transaction/impl/AbstractCacheTransaction;
      75: aload_0
      76: getfield      #5                  // Field key:Ljava/lang/Object;
      79: invokevirtual #12                 // Method org/infinispan/transaction/impl/AbstractCacheTransaction.getLookedUpRemoteVersion:(Ljava/lang/Object;)Lorg/infinispan/container/versioning/EntryVersion;
      82: astore        7
      84: aload         7
      86: ifnonnull     164
      89: getstatic     #2                  // Field trace:Z
      92: ifeq          109
      95: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      98: ldc           #13                 // String No looked up remote version for key %s found in context
     100: aload_0
     101: getfield      #5                  // Field key:Ljava/lang/Object;
     104: invokeinterface #6,  3            // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
     109: aload         5
     111: invokeinterface #14,  1           // InterfaceMethod org/infinispan/container/versioning/VersionGenerator.nonExistingVersion:()Lorg/infinispan/container/versioning/IncrementableEntryVersion;
     116: aload         4
     118: invokeinterface #15,  2           // InterfaceMethod org/infinispan/container/versioning/IncrementableEntryVersion.compareTo:(Lorg/infinispan/container/versioning/EntryVersion;)Lorg/infinispan/container/versioning/InequalVersionComparisonResult;
     123: getstatic     #16                 // Field org/infinispan/container/versioning/InequalVersionComparisonResult.EQUAL:Lorg/infinispan/container/versioning/InequalVersionComparisonResult;
     126: if_acmpne     133
     129: iconst_1
     130: goto          134
     133: iconst_0
     134: ireturn
     135: aload         8
     137: invokeinterface #17,  1           // InterfaceMethod org/infinispan/container/entries/InternalCacheEntry.getMetadata:()Lorg/infinispan/metadata/Metadata;
     142: invokeinterface #18,  1           // InterfaceMethod org/infinispan/metadata/Metadata.version:()Lorg/infinispan/container/versioning/EntryVersion;
     147: astore        7
     149: aload         7
     151: ifnonnull     164
     154: new           #19                 // class java/lang/IllegalStateException
     157: dup
     158: ldc           #20                 // String Entries cannot have null versions!
     160: invokespecial #21                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     163: athrow
     164: getstatic     #2                  // Field trace:Z
     167: ifeq          188
     170: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
     173: ldc           #22                 // String Is going to compare versions %s and %s for key %s.
     175: aload         7
     177: aload         4
     179: aload_0
     180: getfield      #5                  // Field key:Ljava/lang/Object;
     183: invokeinterface #23,  5           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
     188: aload         7
     190: aload         4
     192: invokeinterface #24,  2           // InterfaceMethod org/infinispan/container/versioning/EntryVersion.compareTo:(Lorg/infinispan/container/versioning/EntryVersion;)Lorg/infinispan/container/versioning/InequalVersionComparisonResult;
     197: astore        9
     199: getstatic     #2                  // Field trace:Z
     202: ifeq          241
     205: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
     208: ldc           #25                 // String Comparing versions %s and %s for key %s: %s
     210: iconst_4
     211: anewarray     #26                 // class java/lang/Object
     214: dup
     215: iconst_0
     216: aload         7
     218: aastore
     219: dup
     220: iconst_1
     221: aload         4
     223: aastore
     224: dup
     225: iconst_2
     226: aload_0
     227: getfield      #5                  // Field key:Ljava/lang/Object;
     230: aastore
     231: dup
     232: iconst_3
     233: aload         9
     235: aastore
     236: invokeinterface #27,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;[Ljava/lang/Object;)V
     241: getstatic     #28                 // Field org/infinispan/container/versioning/InequalVersionComparisonResult.AFTER:Lorg/infinispan/container/versioning/InequalVersionComparisonResult;
     244: aload         9
     246: if_acmpeq     253
     249: iconst_1
     250: goto          254
     253: iconst_0
     254: ireturn

  public org.infinispan.container.versioning.EntryVersion getVersion();
    Code:
       0: aload_0
       1: getfield      #29                 // Field metadata:Lorg/infinispan/metadata/Metadata;
       4: invokeinterface #18,  1           // InterfaceMethod org/infinispan/metadata/Metadata.version:()Lorg/infinispan/container/versioning/EntryVersion;
       9: areturn

  public void setVersion(org.infinispan.container.versioning.EntryVersion);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #29                 // Field metadata:Lorg/infinispan/metadata/Metadata;
       5: invokeinterface #30,  1           // InterfaceMethod org/infinispan/metadata/Metadata.builder:()Lorg/infinispan/metadata/Metadata$Builder;
      10: aload_1
      11: invokeinterface #31,  2           // InterfaceMethod org/infinispan/metadata/Metadata$Builder.version:(Lorg/infinispan/container/versioning/EntryVersion;)Lorg/infinispan/metadata/Metadata$Builder;
      16: invokeinterface #32,  1           // InterfaceMethod org/infinispan/metadata/Metadata$Builder.build:()Lorg/infinispan/metadata/Metadata;
      21: putfield      #29                 // Field metadata:Lorg/infinispan/metadata/Metadata;
      24: return

  public boolean isNull();
    Code:
       0: aload_0
       1: getfield      #33                 // Field value:Ljava/lang/Object;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public org.infinispan.container.entries.ClusteredRepeatableReadEntry clone();
    Code:
       0: aload_0
       1: invokespecial #34                 // Method org/infinispan/container/entries/RepeatableReadEntry.clone:()Lorg/infinispan/container/entries/RepeatableReadEntry;
       4: checkcast     #35                 // class org/infinispan/container/entries/ClusteredRepeatableReadEntry
       7: areturn

  public org.infinispan.container.entries.RepeatableReadEntry clone();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method clone:()Lorg/infinispan/container/entries/ClusteredRepeatableReadEntry;
       4: areturn

  public org.infinispan.container.entries.ReadCommittedEntry clone();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method clone:()Lorg/infinispan/container/entries/ClusteredRepeatableReadEntry;
       4: areturn

  public org.infinispan.container.entries.CacheEntry clone();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method clone:()Lorg/infinispan/container/entries/ClusteredRepeatableReadEntry;
       4: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method clone:()Lorg/infinispan/container/entries/ClusteredRepeatableReadEntry;
       4: areturn

  static {};
    Code:
       0: ldc           #35                 // class org/infinispan/container/entries/ClusteredRepeatableReadEntry
       2: invokestatic  #37                 // Method org/infinispan/util/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/infinispan/util/logging/Log;
       5: putstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
       8: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      11: invokeinterface #38,  1           // InterfaceMethod org/infinispan/util/logging/Log.isTraceEnabled:()Z
      16: putstatic     #2                  // Field trace:Z
      19: new           #39                 // class java/util/concurrent/atomic/AtomicReference
      22: dup
      23: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      26: putstatic     #8                  // Field ignored:Ljava/util/concurrent/atomic/AtomicReference;
      29: return
}
