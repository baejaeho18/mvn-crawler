Compiled from "JGroupsAddressCache.java"
public class org.infinispan.remoting.transport.jgroups.JGroupsAddressCache {
  private static final org.infinispan.commons.util.concurrent.jdk8backported.EquivalentConcurrentHashMapV8<org.jgroups.Address, org.infinispan.remoting.transport.jgroups.JGroupsAddress> addressCache;

  private static final org.infinispan.commons.util.concurrent.jdk8backported.EquivalentConcurrentHashMapV8<org.jgroups.Address, org.infinispan.topology.PersistentUUID> persistentUUIDCache;

  public org.infinispan.remoting.transport.jgroups.JGroupsAddressCache();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  static org.infinispan.remoting.transport.Address fromJGroupsAddress(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #2                  // class org/jgroups/Address
       4: astore_1
       5: getstatic     #3                  // Field addressCache:Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8;
       8: aload_1
       9: invokevirtual #4                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8.get:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #5                  // class org/infinispan/remoting/transport/jgroups/JGroupsAddress
      15: astore_2
      16: aload_2
      17: ifnull        22
      20: aload_2
      21: areturn
      22: getstatic     #3                  // Field addressCache:Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8;
      25: aload_1
      26: aload_1
      27: invokedynamic #6,  0              // InvokeDynamic #0:apply:(Lorg/jgroups/Address;)Ljava/util/function/Function;
      32: invokevirtual #7                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      35: checkcast     #8                  // class org/infinispan/remoting/transport/Address
      38: areturn

  public static void putAddressPersistentUUID(java.lang.Object, org.infinispan.topology.PersistentUUID);
    Code:
       0: aload_0
       1: checkcast     #5                  // class org/infinispan/remoting/transport/jgroups/JGroupsAddress
       4: getfield      #9                  // Field org/infinispan/remoting/transport/jgroups/JGroupsAddress.address:Lorg/jgroups/Address;
       7: astore_2
       8: getstatic     #10                 // Field persistentUUIDCache:Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8;
      11: aload_2
      12: aload_1
      13: invokevirtual #11                 // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: return

  public static org.infinispan.topology.PersistentUUID getPersistentUUID(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #5                  // class org/infinispan/remoting/transport/jgroups/JGroupsAddress
       4: getfield      #9                  // Field org/infinispan/remoting/transport/jgroups/JGroupsAddress.address:Lorg/jgroups/Address;
       7: astore_1
       8: getstatic     #10                 // Field persistentUUIDCache:Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8;
      11: aload_1
      12: invokevirtual #4                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #12                 // class org/infinispan/topology/PersistentUUID
      18: areturn

  static void pruneAddressCache();
    Code:
       0: getstatic     #3                  // Field addressCache:Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8;
       3: ldc2_w        #14                 // long 2147483647l
       6: invokedynamic #16,  0             // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
      11: invokevirtual #17                 // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8.forEachKey:(JLjava/util/function/Consumer;)V
      14: return

  private static void lambda$pruneAddressCache$252(org.jgroups.Address);
    Code:
       0: aload_0
       1: invokestatic  #18                 // Method org/jgroups/util/UUID.get:(Lorg/jgroups/Address;)Ljava/lang/String;
       4: ifnonnull     23
       7: getstatic     #3                  // Field addressCache:Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8;
      10: aload_0
      11: invokevirtual #19                 // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: getstatic     #10                 // Field persistentUUIDCache:Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8;
      18: aload_0
      19: invokevirtual #19                 // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      22: pop
      23: return

  private static org.infinispan.remoting.transport.jgroups.JGroupsAddress lambda$fromJGroupsAddress$251(org.jgroups.Address, org.jgroups.Address);
    Code:
       0: aload_0
       1: instanceof    #20                 // class org/jgroups/util/ExtendedUUID
       4: ifeq          19
       7: new           #21                 // class org/infinispan/remoting/transport/jgroups/JGroupsTopologyAwareAddress
      10: dup
      11: aload_0
      12: checkcast     #20                 // class org/jgroups/util/ExtendedUUID
      15: invokespecial #22                 // Method org/infinispan/remoting/transport/jgroups/JGroupsTopologyAwareAddress."<init>":(Lorg/jgroups/util/ExtendedUUID;)V
      18: areturn
      19: new           #5                  // class org/infinispan/remoting/transport/jgroups/JGroupsAddress
      22: dup
      23: aload_0
      24: invokespecial #23                 // Method org/infinispan/remoting/transport/jgroups/JGroupsAddress."<init>":(Lorg/jgroups/Address;)V
      27: areturn

  static {};
    Code:
       0: new           #24                 // class org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8
       3: dup
       4: invokestatic  #25                 // Method org/infinispan/commons/equivalence/AnyEquivalence.getInstance:()Lorg/infinispan/commons/equivalence/AnyEquivalence;
       7: invokestatic  #25                 // Method org/infinispan/commons/equivalence/AnyEquivalence.getInstance:()Lorg/infinispan/commons/equivalence/AnyEquivalence;
      10: invokespecial #26                 // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8."<init>":(Lorg/infinispan/commons/equivalence/Equivalence;Lorg/infinispan/commons/equivalence/Equivalence;)V
      13: putstatic     #3                  // Field addressCache:Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8;
      16: new           #24                 // class org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8
      19: dup
      20: invokestatic  #25                 // Method org/infinispan/commons/equivalence/AnyEquivalence.getInstance:()Lorg/infinispan/commons/equivalence/AnyEquivalence;
      23: invokestatic  #25                 // Method org/infinispan/commons/equivalence/AnyEquivalence.getInstance:()Lorg/infinispan/commons/equivalence/AnyEquivalence;
      26: invokespecial #26                 // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8."<init>":(Lorg/infinispan/commons/equivalence/Equivalence;Lorg/infinispan/commons/equivalence/Equivalence;)V
      29: putstatic     #10                 // Field persistentUUIDCache:Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8;
      32: return
}
