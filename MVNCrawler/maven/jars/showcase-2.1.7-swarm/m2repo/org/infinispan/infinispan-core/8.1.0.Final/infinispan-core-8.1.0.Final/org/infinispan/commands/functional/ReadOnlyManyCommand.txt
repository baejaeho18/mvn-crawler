Compiled from "ReadOnlyManyCommand.java"
public final class org.infinispan.commands.functional.ReadOnlyManyCommand<K, V, R> extends org.infinispan.commands.read.AbstractDataCommand implements org.infinispan.commands.LocalCommand {
  private java.util.Set<? extends K> keys;

  private java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadEntryView<K, V>, R> f;

  private org.infinispan.distribution.ch.ConsistentHash ch;

  private java.util.Map<java.lang.Object, org.infinispan.container.entries.InternalCacheEntry> remotelyFetched;

  public org.infinispan.commands.functional.ReadOnlyManyCommand(java.util.Set<? extends K>, java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadEntryView<K, V>, R>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/commands/read/AbstractDataCommand."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field keys:Ljava/util/Set;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field f:Ljava/util/function/Function;
      14: return

  public org.infinispan.commands.functional.ReadOnlyManyCommand();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/commands/read/AbstractDataCommand."<init>":()V
       4: return

  public java.util.Set<? extends K> getKeys();
    Code:
       0: aload_0
       1: getfield      #2                  // Field keys:Ljava/util/Set;
       4: areturn

  public byte getCommandId();
    Code:
       0: iconst_m1
       1: ireturn

  public void setParameters(int, java.lang.Object[]);
    Code:
       0: return

  public java.lang.Object[] getParameters();
    Code:
       0: iconst_0
       1: anewarray     #4                  // class java/lang/Object
       4: areturn

  public org.infinispan.distribution.ch.ConsistentHash getConsistentHash();
    Code:
       0: aload_0
       1: getfield      #5                  // Field ch:Lorg/infinispan/distribution/ch/ConsistentHash;
       4: areturn

  public void setConsistentHashAndAddress(org.infinispan.distribution.ch.ConsistentHash);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field ch:Lorg/infinispan/distribution/ch/ConsistentHash;
       5: return

  public java.util.Map<java.lang.Object, org.infinispan.container.entries.InternalCacheEntry> getRemotelyFetched();
    Code:
       0: aload_0
       1: getfield      #6                  // Field remotelyFetched:Ljava/util/Map;
       4: areturn

  public void setRemotelyFetched(java.util.Map<java.lang.Object, org.infinispan.container.entries.InternalCacheEntry>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field remotelyFetched:Ljava/util/Map;
       5: return

  public java.lang.Object perform(org.infinispan.context.InvocationContext) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: getfield      #2                  // Field keys:Ljava/util/Set;
       4: invokeinterface #7,  1            // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
       9: aload_0
      10: aload_1
      11: invokedynamic #8,  0              // InvokeDynamic #0:apply:(Lorg/infinispan/commands/functional/ReadOnlyManyCommand;Lorg/infinispan/context/InvocationContext;)Ljava/util/function/Function;
      16: invokeinterface #9,  2            // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      21: areturn

  private org.infinispan.container.entries.CacheEntry<K, V> lookupCacheEntry(org.infinispan.context.InvocationContext, java.lang.Object);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #10,  2           // InterfaceMethod org/infinispan/context/InvocationContext.lookupEntry:(Ljava/lang/Object;)Lorg/infinispan/container/entries/CacheEntry;
       7: areturn

  public java.lang.Object acceptVisitor(org.infinispan.context.InvocationContext, org.infinispan.commands.Visitor) throws java.lang.Throwable;
    Code:
       0: aload_2
       1: aload_1
       2: aload_0
       3: invokeinterface #11,  3           // InterfaceMethod org/infinispan/commands/Visitor.visitReadOnlyManyCommand:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/functional/ReadOnlyManyCommand;)Ljava/lang/Object;
       8: areturn

  public boolean readsExistingValues();
    Code:
       0: iconst_1
       1: ireturn

  public boolean alwaysReadsExistingValues();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String toString();
    Code:
       0: new           #12                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #14                 // String ReadOnlyManyCommand{keys=
       9: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #2                  // Field keys:Ljava/util/Set;
      16: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #17                 // String , f=
      21: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #3                  // Field f:Ljava/util/function/Function;
      28: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      31: ldc           #18                 // String , ch=
      33: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #5                  // Field ch:Lorg/infinispan/distribution/ch/ConsistentHash;
      40: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: ldc           #19                 // String , remotelyFetched=
      45: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: getfield      #6                  // Field remotelyFetched:Ljava/util/Map;
      52: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      55: bipush        125
      57: invokevirtual #20                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      60: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: areturn

  private java.lang.Object lambda$perform$7(org.infinispan.context.InvocationContext, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #22                 // Method lookupCacheEntry:(Lorg/infinispan/context/InvocationContext;Ljava/lang/Object;)Lorg/infinispan/container/entries/CacheEntry;
       6: astore_3
       7: aload_0
       8: getfield      #3                  // Field f:Ljava/util/function/Function;
      11: aload_3
      12: ifnonnull     22
      15: aload_2
      16: invokestatic  #23                 // Method org/infinispan/functional/impl/EntryViews.noValue:(Ljava/lang/Object;)Lorg/infinispan/commons/api/functional/EntryView$ReadEntryView;
      19: goto          26
      22: aload_3
      23: invokestatic  #24                 // Method org/infinispan/functional/impl/EntryViews.readOnly:(Lorg/infinispan/container/entries/CacheEntry;)Lorg/infinispan/commons/api/functional/EntryView$ReadEntryView;
      26: invokeinterface #25,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      31: astore        4
      33: aload         4
      35: invokestatic  #26                 // Method org/infinispan/functional/impl/EntryViews.snapshot:(Ljava/lang/Object;)Ljava/lang/Object;
      38: areturn
}
