Compiled from "WriteOnlyKeyValueCommand.java"
public final class org.infinispan.commands.functional.WriteOnlyKeyValueCommand<K, V> extends org.infinispan.commands.functional.AbstractWriteKeyCommand<K, V> {
  public static final byte COMMAND_ID;

  private java.util.function.BiConsumer<V, org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>> f;

  private V value;

  public org.infinispan.commands.functional.WriteOnlyKeyValueCommand(K, V, java.util.function.BiConsumer<V, org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>>, org.infinispan.commands.CommandInvocationId, org.infinispan.commands.write.ValueMatcher, org.infinispan.functional.impl.Params);
    Code:
       0: aload_0
       1: aload_1
       2: aload         5
       4: aload         4
       6: aload         6
       8: invokespecial #1                  // Method org/infinispan/commands/functional/AbstractWriteKeyCommand."<init>":(Ljava/lang/Object;Lorg/infinispan/commands/write/ValueMatcher;Lorg/infinispan/commands/CommandInvocationId;Lorg/infinispan/functional/impl/Params;)V
      11: aload_0
      12: aload_3
      13: putfield      #2                  // Field f:Ljava/util/function/BiConsumer;
      16: aload_0
      17: aload_2
      18: putfield      #3                  // Field value:Ljava/lang/Object;
      21: return

  public org.infinispan.commands.functional.WriteOnlyKeyValueCommand();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/infinispan/commands/functional/AbstractWriteKeyCommand."<init>":()V
       4: return

  public byte getCommandId();
    Code:
       0: bipush        55
       2: ireturn

  public void setParameters(int, java.lang.Object[]);
    Code:
       0: iload_1
       1: bipush        55
       3: if_icmpeq     16
       6: new           #6                  // class java/lang/IllegalStateException
       9: dup
      10: ldc           #7                  // String Invalid method id
      12: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: aload_2
      18: iconst_0
      19: aaload
      20: putfield      #9                  // Field key:Ljava/lang/Object;
      23: aload_0
      24: aload_2
      25: iconst_1
      26: aaload
      27: putfield      #3                  // Field value:Ljava/lang/Object;
      30: aload_0
      31: aload_2
      32: iconst_2
      33: aaload
      34: checkcast     #10                 // class java/util/function/BiConsumer
      37: putfield      #2                  // Field f:Ljava/util/function/BiConsumer;
      40: aload_0
      41: aload_2
      42: iconst_3
      43: aaload
      44: checkcast     #11                 // class org/infinispan/commands/write/ValueMatcher
      47: putfield      #12                 // Field valueMatcher:Lorg/infinispan/commands/write/ValueMatcher;
      50: aload_0
      51: aload_2
      52: iconst_4
      53: aaload
      54: checkcast     #13                 // class java/util/Set
      57: putfield      #14                 // Field flags:Ljava/util/Set;
      60: aload_0
      61: aload_2
      62: iconst_5
      63: aaload
      64: checkcast     #15                 // class org/infinispan/commands/CommandInvocationId
      67: putfield      #16                 // Field commandInvocationId:Lorg/infinispan/commands/CommandInvocationId;
      70: return

  public java.lang.Object[] getParameters();
    Code:
       0: bipush        6
       2: anewarray     #17                 // class java/lang/Object
       5: dup
       6: iconst_0
       7: aload_0
       8: getfield      #9                  // Field key:Ljava/lang/Object;
      11: aastore
      12: dup
      13: iconst_1
      14: aload_0
      15: getfield      #3                  // Field value:Ljava/lang/Object;
      18: aastore
      19: dup
      20: iconst_2
      21: aload_0
      22: getfield      #2                  // Field f:Ljava/util/function/BiConsumer;
      25: aastore
      26: dup
      27: iconst_3
      28: aload_0
      29: getfield      #12                 // Field valueMatcher:Lorg/infinispan/commands/write/ValueMatcher;
      32: aastore
      33: dup
      34: iconst_4
      35: aload_0
      36: getfield      #14                 // Field flags:Ljava/util/Set;
      39: invokestatic  #18                 // Method org/infinispan/context/Flag.copyWithoutRemotableFlags:(Ljava/util/Set;)Ljava/util/Set;
      42: aastore
      43: dup
      44: iconst_5
      45: aload_0
      46: getfield      #16                 // Field commandInvocationId:Lorg/infinispan/commands/CommandInvocationId;
      49: aastore
      50: areturn

  public boolean isConditional();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.Object perform(org.infinispan.context.InvocationContext) throws java.lang.Throwable;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #9                  // Field key:Ljava/lang/Object;
       5: invokeinterface #19,  2           // InterfaceMethod org/infinispan/context/InvocationContext.lookupEntry:(Ljava/lang/Object;)Lorg/infinispan/container/entries/CacheEntry;
      10: astore_2
      11: aload_2
      12: ifnonnull     17
      15: aconst_null
      16: areturn
      17: aload_0
      18: getfield      #2                  // Field f:Ljava/util/function/BiConsumer;
      21: aload_0
      22: getfield      #3                  // Field value:Ljava/lang/Object;
      25: aload_2
      26: invokestatic  #20                 // Method org/infinispan/functional/impl/EntryViews.writeOnly:(Lorg/infinispan/container/entries/CacheEntry;)Lorg/infinispan/commons/api/functional/EntryView$WriteEntryView;
      29: invokeinterface #21,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      34: aconst_null
      35: areturn

  public void updateStatusFromRemoteResponse(java.lang.Object);
    Code:
       0: return

  public java.lang.Object acceptVisitor(org.infinispan.context.InvocationContext, org.infinispan.commands.Visitor) throws java.lang.Throwable;
    Code:
       0: aload_2
       1: aload_1
       2: aload_0
       3: invokeinterface #22,  3           // InterfaceMethod org/infinispan/commands/Visitor.visitWriteOnlyKeyValueCommand:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/functional/WriteOnlyKeyValueCommand;)Ljava/lang/Object;
       8: areturn

  public boolean readsExistingValues();
    Code:
       0: iconst_0
       1: ireturn

  public boolean alwaysReadsExistingValues();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isWriteOnly();
    Code:
       0: iconst_1
       1: ireturn

  public org.infinispan.functional.impl.Params getParams();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method org/infinispan/commands/functional/AbstractWriteKeyCommand.getParams:()Lorg/infinispan/functional/impl/Params;
       4: areturn

  public boolean isSuccessful();
    Code:
       0: aload_0
       1: invokespecial #24                 // Method org/infinispan/commands/functional/AbstractWriteKeyCommand.isSuccessful:()Z
       4: ireturn

  public void setValueMatcher(org.infinispan.commands.write.ValueMatcher);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #25                 // Method org/infinispan/commands/functional/AbstractWriteKeyCommand.setValueMatcher:(Lorg/infinispan/commands/write/ValueMatcher;)V
       5: return

  public org.infinispan.commands.write.ValueMatcher getValueMatcher();
    Code:
       0: aload_0
       1: invokespecial #26                 // Method org/infinispan/commands/functional/AbstractWriteKeyCommand.getValueMatcher:()Lorg/infinispan/commands/write/ValueMatcher;
       4: areturn
}
