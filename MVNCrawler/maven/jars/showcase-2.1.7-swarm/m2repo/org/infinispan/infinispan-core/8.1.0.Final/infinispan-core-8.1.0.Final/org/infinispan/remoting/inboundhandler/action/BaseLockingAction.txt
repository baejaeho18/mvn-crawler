Compiled from "BaseLockingAction.java"
public abstract class org.infinispan.remoting.inboundhandler.action.BaseLockingAction implements org.infinispan.remoting.inboundhandler.action.Action {
  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<org.infinispan.remoting.inboundhandler.action.BaseLockingAction, org.infinispan.remoting.inboundhandler.action.BaseLockingAction$InternalState> UPDATER;

  private final org.infinispan.interceptors.locking.ClusteringDependentLogic clusteringDependentLogic;

  protected volatile org.infinispan.remoting.inboundhandler.action.BaseLockingAction$InternalState internalState;

  public org.infinispan.remoting.inboundhandler.action.BaseLockingAction(org.infinispan.interceptors.locking.ClusteringDependentLogic);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field clusteringDependentLogic:Lorg/infinispan/interceptors/locking/ClusteringDependentLogic;
       9: aload_0
      10: getstatic     #3                  // Field org/infinispan/remoting/inboundhandler/action/BaseLockingAction$InternalState.INIT:Lorg/infinispan/remoting/inboundhandler/action/BaseLockingAction$InternalState;
      13: putfield      #4                  // Field internalState:Lorg/infinispan/remoting/inboundhandler/action/BaseLockingAction$InternalState;
      16: return

  public final org.infinispan.remoting.inboundhandler.action.ActionStatus check(org.infinispan.remoting.inboundhandler.action.ActionState);
    Code:
       0: getstatic     #5                  // Field org/infinispan/remoting/inboundhandler/action/BaseLockingAction$1.$SwitchMap$org$infinispan$remoting$inboundhandler$action$BaseLockingAction$InternalState:[I
       3: aload_0
       4: getfield      #4                  // Field internalState:Lorg/infinispan/remoting/inboundhandler/action/BaseLockingAction$InternalState;
       7: invokevirtual #6                  // Method org/infinispan/remoting/inboundhandler/action/BaseLockingAction$InternalState.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 5
                     1: 44
                     2: 50
                     3: 56
                     4: 60
                     5: 64
               default: 68
          }
      44: aload_0
      45: aload_1
      46: invokevirtual #7                  // Method init:(Lorg/infinispan/remoting/inboundhandler/action/ActionState;)Lorg/infinispan/remoting/inboundhandler/action/ActionStatus;
      49: areturn
      50: aload_0
      51: aload_1
      52: invokevirtual #8                  // Method checking:(Lorg/infinispan/remoting/inboundhandler/action/ActionState;)Lorg/infinispan/remoting/inboundhandler/action/ActionStatus;
      55: areturn
      56: getstatic     #9                  // Field org/infinispan/remoting/inboundhandler/action/ActionStatus.NOT_READY:Lorg/infinispan/remoting/inboundhandler/action/ActionStatus;
      59: areturn
      60: getstatic     #10                 // Field org/infinispan/remoting/inboundhandler/action/ActionStatus.READY:Lorg/infinispan/remoting/inboundhandler/action/ActionStatus;
      63: areturn
      64: getstatic     #11                 // Field org/infinispan/remoting/inboundhandler/action/ActionStatus.CANCELED:Lorg/infinispan/remoting/inboundhandler/action/ActionStatus;
      67: areturn
      68: getstatic     #9                  // Field org/infinispan/remoting/inboundhandler/action/ActionStatus.NOT_READY:Lorg/infinispan/remoting/inboundhandler/action/ActionStatus;
      71: areturn

  protected abstract org.infinispan.remoting.inboundhandler.action.ActionStatus checking(org.infinispan.remoting.inboundhandler.action.ActionState);

  protected abstract org.infinispan.remoting.inboundhandler.action.ActionStatus init(org.infinispan.remoting.inboundhandler.action.ActionState);

  protected final boolean cas(org.infinispan.remoting.inboundhandler.action.BaseLockingAction$InternalState, org.infinispan.remoting.inboundhandler.action.BaseLockingAction$InternalState);
    Code:
       0: getstatic     #12                 // Field UPDATER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  private void filterByPrimaryOwner(java.util.Collection<java.lang.Object>, java.util.Collection<java.lang.Object>);
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: invokedynamic #14,  0             // InvokeDynamic #0:accept:(Lorg/infinispan/remoting/inboundhandler/action/BaseLockingAction;Ljava/util/Collection;)Ljava/util/function/Consumer;
       8: invokeinterface #15,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      13: return

  protected final java.util.List<java.lang.Object> getAndUpdateFilteredKeys(org.infinispan.remoting.inboundhandler.action.ActionState);
    Code:
       0: aload_1
       1: invokevirtual #16                 // Method org/infinispan/remoting/inboundhandler/action/ActionState.getFilteredKeys:()Ljava/util/List;
       4: astore_2
       5: aload_2
       6: ifnonnull     44
       9: aload_1
      10: invokevirtual #17                 // Method org/infinispan/remoting/inboundhandler/action/ActionState.getCommand:()Lorg/infinispan/util/concurrent/locks/RemoteLockCommand;
      13: invokeinterface #18,  1           // InterfaceMethod org/infinispan/util/concurrent/locks/RemoteLockCommand.getKeysToLock:()Ljava/util/Collection;
      18: astore_3
      19: new           #19                 // class java/util/ArrayList
      22: dup
      23: aload_3
      24: invokeinterface #20,  1           // InterfaceMethod java/util/Collection.size:()I
      29: invokespecial #21                 // Method java/util/ArrayList."<init>":(I)V
      32: astore_2
      33: aload_0
      34: aload_3
      35: aload_2
      36: invokespecial #22                 // Method filterByPrimaryOwner:(Ljava/util/Collection;Ljava/util/Collection;)V
      39: aload_1
      40: aload_2
      41: invokevirtual #23                 // Method org/infinispan/remoting/inboundhandler/action/ActionState.updateFilteredKeys:(Ljava/util/List;)V
      44: aload_2
      45: areturn

  public void cleanup(org.infinispan.remoting.inboundhandler.action.ActionState);
    Code:
       0: return

  private void lambda$filterByPrimaryOwner$217(java.util.Collection, java.lang.Object);
    Code:
       0: aload_2
       1: aload_0
       2: getfield      #2                  // Field clusteringDependentLogic:Lorg/infinispan/interceptors/locking/ClusteringDependentLogic;
       5: invokestatic  #24                 // Method org/infinispan/util/concurrent/locks/LockUtil.getLockOwnership:(Ljava/lang/Object;Lorg/infinispan/interceptors/locking/ClusteringDependentLogic;)Lorg/infinispan/util/concurrent/locks/LockUtil$LockOwnership;
       8: getstatic     #25                 // Field org/infinispan/util/concurrent/locks/LockUtil$LockOwnership.PRIMARY:Lorg/infinispan/util/concurrent/locks/LockUtil$LockOwnership;
      11: if_acmpne     22
      14: aload_1
      15: aload_2
      16: invokeinterface #26,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      21: pop
      22: return

  static {};
    Code:
       0: ldc           #27                 // class org/infinispan/remoting/inboundhandler/action/BaseLockingAction
       2: ldc           #28                 // class org/infinispan/remoting/inboundhandler/action/BaseLockingAction$InternalState
       4: ldc           #29                 // String internalState
       6: invokestatic  #30                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #12                 // Field UPDATER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
