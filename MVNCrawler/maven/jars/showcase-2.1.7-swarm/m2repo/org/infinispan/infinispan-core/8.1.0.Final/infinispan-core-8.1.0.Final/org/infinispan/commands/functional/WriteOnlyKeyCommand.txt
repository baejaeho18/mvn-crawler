Compiled from "WriteOnlyKeyCommand.java"
public final class org.infinispan.commands.functional.WriteOnlyKeyCommand<K, V> extends org.infinispan.commands.functional.AbstractWriteKeyCommand<K, V> {
  public static final byte COMMAND_ID;

  private java.util.function.Consumer<org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>> f;

  public org.infinispan.commands.functional.WriteOnlyKeyCommand(K, java.util.function.Consumer<org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>>, org.infinispan.commands.CommandInvocationId, org.infinispan.commands.write.ValueMatcher, org.infinispan.functional.impl.Params);
    Code:
       0: aload_0
       1: aload_1
       2: aload         4
       4: aload_3
       5: aload         5
       7: invokespecial #1                  // Method org/infinispan/commands/functional/AbstractWriteKeyCommand."<init>":(Ljava/lang/Object;Lorg/infinispan/commands/write/ValueMatcher;Lorg/infinispan/commands/CommandInvocationId;Lorg/infinispan/functional/impl/Params;)V
      10: aload_0
      11: aload_2
      12: putfield      #2                  // Field f:Ljava/util/function/Consumer;
      15: return

  public org.infinispan.commands.functional.WriteOnlyKeyCommand();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method org/infinispan/commands/functional/AbstractWriteKeyCommand."<init>":()V
       4: return

  public byte getCommandId();
    Code:
       0: bipush        54
       2: ireturn

  public void setParameters(int, java.lang.Object[]);
    Code:
       0: iload_1
       1: bipush        54
       3: if_icmpeq     16
       6: new           #5                  // class java/lang/IllegalStateException
       9: dup
      10: ldc           #6                  // String Invalid method id
      12: invokespecial #7                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: aload_2
      18: iconst_0
      19: aaload
      20: putfield      #8                  // Field key:Ljava/lang/Object;
      23: aload_0
      24: aload_2
      25: iconst_1
      26: aaload
      27: checkcast     #9                  // class java/util/function/Consumer
      30: putfield      #2                  // Field f:Ljava/util/function/Consumer;
      33: aload_0
      34: aload_2
      35: iconst_2
      36: aaload
      37: checkcast     #10                 // class org/infinispan/commands/write/ValueMatcher
      40: putfield      #11                 // Field valueMatcher:Lorg/infinispan/commands/write/ValueMatcher;
      43: aload_0
      44: aload_2
      45: iconst_3
      46: aaload
      47: checkcast     #12                 // class java/util/Set
      50: putfield      #13                 // Field flags:Ljava/util/Set;
      53: aload_0
      54: aload_2
      55: iconst_4
      56: aaload
      57: checkcast     #14                 // class org/infinispan/commands/CommandInvocationId
      60: putfield      #15                 // Field commandInvocationId:Lorg/infinispan/commands/CommandInvocationId;
      63: return

  public java.lang.Object[] getParameters();
    Code:
       0: iconst_5
       1: anewarray     #16                 // class java/lang/Object
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #8                  // Field key:Ljava/lang/Object;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #2                  // Field f:Ljava/util/function/Consumer;
      17: aastore
      18: dup
      19: iconst_2
      20: aload_0
      21: getfield      #11                 // Field valueMatcher:Lorg/infinispan/commands/write/ValueMatcher;
      24: aastore
      25: dup
      26: iconst_3
      27: aload_0
      28: getfield      #13                 // Field flags:Ljava/util/Set;
      31: invokestatic  #17                 // Method org/infinispan/context/Flag.copyWithoutRemotableFlags:(Ljava/util/Set;)Ljava/util/Set;
      34: aastore
      35: dup
      36: iconst_4
      37: aload_0
      38: getfield      #15                 // Field commandInvocationId:Lorg/infinispan/commands/CommandInvocationId;
      41: aastore
      42: areturn

  public boolean isConditional();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.Object acceptVisitor(org.infinispan.context.InvocationContext, org.infinispan.commands.Visitor) throws java.lang.Throwable;
    Code:
       0: aload_2
       1: aload_1
       2: aload_0
       3: invokeinterface #18,  3           // InterfaceMethod org/infinispan/commands/Visitor.visitWriteOnlyKeyCommand:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/functional/WriteOnlyKeyCommand;)Ljava/lang/Object;
       8: areturn

  public boolean readsExistingValues();
    Code:
       0: iconst_0
       1: ireturn

  public boolean alwaysReadsExistingValues();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.Object perform(org.infinispan.context.InvocationContext) throws java.lang.Throwable;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #8                  // Field key:Ljava/lang/Object;
       5: invokeinterface #19,  2           // InterfaceMethod org/infinispan/context/InvocationContext.lookupEntry:(Ljava/lang/Object;)Lorg/infinispan/container/entries/CacheEntry;
      10: astore_2
      11: aload_2
      12: ifnonnull     17
      15: aconst_null
      16: areturn
      17: aload_0
      18: getfield      #2                  // Field f:Ljava/util/function/Consumer;
      21: aload_2
      22: invokestatic  #20                 // Method org/infinispan/functional/impl/EntryViews.writeOnly:(Lorg/infinispan/container/entries/CacheEntry;)Lorg/infinispan/commons/api/functional/EntryView$WriteEntryView;
      25: invokeinterface #21,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      30: aconst_null
      31: areturn

  public void updateStatusFromRemoteResponse(java.lang.Object);
    Code:
       0: return

  public boolean isWriteOnly();
    Code:
       0: iconst_1
       1: ireturn

  public org.infinispan.functional.impl.Params getParams();
    Code:
       0: aload_0
       1: invokespecial #22                 // Method org/infinispan/commands/functional/AbstractWriteKeyCommand.getParams:()Lorg/infinispan/functional/impl/Params;
       4: areturn

  public boolean isSuccessful();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method org/infinispan/commands/functional/AbstractWriteKeyCommand.isSuccessful:()Z
       4: ireturn

  public void setValueMatcher(org.infinispan.commands.write.ValueMatcher);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #24                 // Method org/infinispan/commands/functional/AbstractWriteKeyCommand.setValueMatcher:(Lorg/infinispan/commands/write/ValueMatcher;)V
       5: return

  public org.infinispan.commands.write.ValueMatcher getValueMatcher();
    Code:
       0: aload_0
       1: invokespecial #25                 // Method org/infinispan/commands/functional/AbstractWriteKeyCommand.getValueMatcher:()Lorg/infinispan/commands/write/ValueMatcher;
       4: areturn
}
