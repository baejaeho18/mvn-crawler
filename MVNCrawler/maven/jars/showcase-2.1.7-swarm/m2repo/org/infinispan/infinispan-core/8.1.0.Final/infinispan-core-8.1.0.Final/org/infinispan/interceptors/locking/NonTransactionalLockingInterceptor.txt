Compiled from "NonTransactionalLockingInterceptor.java"
public class org.infinispan.interceptors.locking.NonTransactionalLockingInterceptor extends org.infinispan.interceptors.locking.AbstractLockingInterceptor {
  private static final org.infinispan.util.logging.Log log;

  public org.infinispan.interceptors.locking.NonTransactionalLockingInterceptor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/interceptors/locking/AbstractLockingInterceptor."<init>":()V
       4: return

  protected org.infinispan.util.logging.Log getLog();
    Code:
       0: getstatic     #2                  // Field log:Lorg/infinispan/util/logging/Log;
       3: areturn

  protected final java.lang.Object visitDataReadCommand(org.infinispan.context.InvocationContext, org.infinispan.commands.DataCommand) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method assertNonTransactional:(Lorg/infinispan/context/InvocationContext;)V
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #4                  // Method invokeNextInterceptor:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/VisitableCommand;)Ljava/lang/Object;
      11: astore_3
      12: aload_0
      13: getfield      #5                  // Field lockManager:Lorg/infinispan/util/concurrent/locks/LockManager;
      16: aload_1
      17: invokeinterface #6,  2            // InterfaceMethod org/infinispan/util/concurrent/locks/LockManager.unlockAll:(Lorg/infinispan/context/InvocationContext;)V
      22: aload_3
      23: areturn
      24: astore        4
      26: aload_0
      27: getfield      #5                  // Field lockManager:Lorg/infinispan/util/concurrent/locks/LockManager;
      30: aload_1
      31: invokeinterface #6,  2            // InterfaceMethod org/infinispan/util/concurrent/locks/LockManager.unlockAll:(Lorg/infinispan/context/InvocationContext;)V
      36: aload         4
      38: athrow
    Exception table:
       from    to  target type
           5    12    24   any
          24    26    24   any

  protected java.lang.Object visitDataWriteCommand(org.infinispan.context.InvocationContext, org.infinispan.commands.write.DataWriteCommand) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method assertNonTransactional:(Lorg/infinispan/context/InvocationContext;)V
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #7                  // Method visitNonTxDataWriteCommand:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/write/DataWriteCommand;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object visitGetAllCommand(org.infinispan.context.InvocationContext, org.infinispan.commands.read.GetAllCommand) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method assertNonTransactional:(Lorg/infinispan/context/InvocationContext;)V
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #4                  // Method invokeNextInterceptor:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/VisitableCommand;)Ljava/lang/Object;
      11: astore_3
      12: aload_0
      13: getfield      #5                  // Field lockManager:Lorg/infinispan/util/concurrent/locks/LockManager;
      16: aload_1
      17: invokeinterface #6,  2            // InterfaceMethod org/infinispan/util/concurrent/locks/LockManager.unlockAll:(Lorg/infinispan/context/InvocationContext;)V
      22: aload_3
      23: areturn
      24: astore        4
      26: aload_0
      27: getfield      #5                  // Field lockManager:Lorg/infinispan/util/concurrent/locks/LockManager;
      30: aload_1
      31: invokeinterface #6,  2            // InterfaceMethod org/infinispan/util/concurrent/locks/LockManager.unlockAll:(Lorg/infinispan/context/InvocationContext;)V
      36: aload         4
      38: athrow
    Exception table:
       from    to  target type
           5    12    24   any
          24    26    24   any

  public java.lang.Object visitPutMapCommand(org.infinispan.context.InvocationContext, org.infinispan.commands.write.PutMapCommand) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method assertNonTransactional:(Lorg/infinispan/context/InvocationContext;)V
       5: aload_2
       6: invokevirtual #8                  // Method org/infinispan/commands/write/PutMapCommand.isForwarded:()Z
       9: ifne          55
      12: aload_0
      13: aload_2
      14: invokevirtual #9                  // Method hasSkipLocking:(Lorg/infinispan/commands/LocalFlagAffectedCommand;)Z
      17: ifne          55
      20: aload_0
      21: aload_1
      22: aload_2
      23: invokevirtual #10                 // Method org/infinispan/commands/write/PutMapCommand.getMap:()Ljava/util/Map;
      26: invokeinterface #11,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      31: invokeinterface #12,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      36: aload_0
      37: invokedynamic #13,  0             // InvokeDynamic #0:test:(Lorg/infinispan/interceptors/locking/NonTransactionalLockingInterceptor;)Ljava/util/function/Predicate;
      42: invokeinterface #14,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      47: aload_0
      48: aload_2
      49: invokevirtual #15                 // Method getLockTimeoutMillis:(Lorg/infinispan/commands/LocalFlagAffectedCommand;)J
      52: invokevirtual #16                 // Method lockAllAndRecord:(Lorg/infinispan/context/InvocationContext;Ljava/util/stream/Stream;J)V
      55: aload_0
      56: aload_1
      57: aload_2
      58: invokevirtual #4                  // Method invokeNextInterceptor:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/VisitableCommand;)Ljava/lang/Object;
      61: astore_3
      62: aload_0
      63: getfield      #5                  // Field lockManager:Lorg/infinispan/util/concurrent/locks/LockManager;
      66: aload_1
      67: invokeinterface #6,  2            // InterfaceMethod org/infinispan/util/concurrent/locks/LockManager.unlockAll:(Lorg/infinispan/context/InvocationContext;)V
      72: aload_3
      73: areturn
      74: astore        4
      76: aload_0
      77: getfield      #5                  // Field lockManager:Lorg/infinispan/util/concurrent/locks/LockManager;
      80: aload_1
      81: invokeinterface #6,  2            // InterfaceMethod org/infinispan/util/concurrent/locks/LockManager.unlockAll:(Lorg/infinispan/context/InvocationContext;)V
      86: aload         4
      88: athrow
    Exception table:
       from    to  target type
           5    62    74   any
          74    76    74   any

  private void assertNonTransactional(org.infinispan.context.InvocationContext);
    Code:
       0: aload_1
       1: invokeinterface #17,  1           // InterfaceMethod org/infinispan/context/InvocationContext.isInTxScope:()Z
       6: ifeq          19
       9: new           #18                 // class org/infinispan/InvalidCacheUsageException
      12: dup
      13: ldc           #19                 // String This is a non-transactional cache and cannot be accessed with a transactional InvocationContext.
      15: invokespecial #20                 // Method org/infinispan/InvalidCacheUsageException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: return

  static {};
    Code:
       0: ldc           #21                 // class org/infinispan/interceptors/locking/NonTransactionalLockingInterceptor
       2: invokestatic  #22                 // Method org/infinispan/util/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/infinispan/util/logging/Log;
       5: putstatic     #2                  // Field log:Lorg/infinispan/util/logging/Log;
       8: return
}
