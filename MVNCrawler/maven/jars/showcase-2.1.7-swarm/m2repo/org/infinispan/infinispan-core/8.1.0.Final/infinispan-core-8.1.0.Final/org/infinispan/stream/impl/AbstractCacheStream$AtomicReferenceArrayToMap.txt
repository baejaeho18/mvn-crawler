Compiled from "AbstractCacheStream.java"
class org.infinispan.stream.impl.AbstractCacheStream$AtomicReferenceArrayToMap<R> extends java.util.AbstractMap<java.lang.Integer, R> {
  final java.util.concurrent.atomic.AtomicReferenceArray<R> array;

  org.infinispan.stream.impl.AbstractCacheStream$AtomicReferenceArrayToMap(java.util.concurrent.atomic.AtomicReferenceArray<R>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/AbstractMap."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       9: return

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #3                  // class java/lang/Integer
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #3                  // class java/lang/Integer
      13: invokevirtual #4                  // Method java/lang/Integer.intValue:()I
      16: istore_2
      17: iconst_0
      18: iload_2
      19: if_icmpgt     37
      22: iload_2
      23: aload_0
      24: getfield      #2                  // Field array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      27: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      30: if_icmpge     37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  public R get(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #3                  // class java/lang/Integer
       4: ifne          9
       7: aconst_null
       8: areturn
       9: aload_1
      10: checkcast     #3                  // class java/lang/Integer
      13: invokevirtual #4                  // Method java/lang/Integer.intValue:()I
      16: istore_2
      17: iconst_0
      18: iload_2
      19: if_icmpgt     42
      22: iload_2
      23: aload_0
      24: getfield      #2                  // Field array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      27: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      30: if_icmpge     42
      33: aload_0
      34: getfield      #2                  // Field array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      37: iload_2
      38: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      41: areturn
      42: aconst_null
      43: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #2                  // Field array:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
       7: ireturn

  public boolean remove(java.lang.Object, java.lang.Object);
    Code:
       0: new           #7                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #8                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public void clear();
    Code:
       0: new           #7                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #8                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public java.util.Set<java.util.Map$Entry<java.lang.Integer, R>> entrySet();
    Code:
       0: new           #7                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #8                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow
}
