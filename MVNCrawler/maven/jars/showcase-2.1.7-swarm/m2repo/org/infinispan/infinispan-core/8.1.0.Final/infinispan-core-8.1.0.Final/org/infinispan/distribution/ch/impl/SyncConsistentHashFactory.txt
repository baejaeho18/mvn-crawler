Compiled from "SyncConsistentHashFactory.java"
public class org.infinispan.distribution.ch.impl.SyncConsistentHashFactory implements org.infinispan.distribution.ch.ConsistentHashFactory<org.infinispan.distribution.ch.impl.DefaultConsistentHash> {
  public static final float OWNED_SEGMENTS_ALLOWED_VARIATION;

  public static final float PRIMARY_SEGMENTS_ALLOWED_VARIATION;

  public org.infinispan.distribution.ch.impl.SyncConsistentHashFactory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public org.infinispan.distribution.ch.impl.DefaultConsistentHash create(org.infinispan.commons.hash.Hash, int, int, java.util.List<org.infinispan.remoting.transport.Address>, java.util.Map<org.infinispan.remoting.transport.Address, java.lang.Float>);
    Code:
       0: aload_0
       1: aload         4
       3: aload         5
       5: invokevirtual #2                  // Method checkCapacityFactors:(Ljava/util/List;Ljava/util/Map;)V
       8: aload_0
       9: aload_1
      10: iload_2
      11: iload_3
      12: aload         4
      14: aload         5
      16: invokevirtual #3                  // Method createBuilder:(Lorg/infinispan/commons/hash/Hash;IILjava/util/List;Ljava/util/Map;)Lorg/infinispan/distribution/ch/impl/SyncConsistentHashFactory$Builder;
      19: astore        6
      21: aload         6
      23: iload_3
      24: invokevirtual #4                  // Method org/infinispan/distribution/ch/impl/SyncConsistentHashFactory$Builder.populateOwners:(I)V
      27: aload         6
      29: invokevirtual #5                  // Method org/infinispan/distribution/ch/impl/SyncConsistentHashFactory$Builder.copyOwners:()V
      32: new           #6                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
      35: dup
      36: aload_1
      37: iload_2
      38: iload_3
      39: aload         4
      41: aload         5
      43: aload         6
      45: getfield      #7                  // Field org/infinispan/distribution/ch/impl/SyncConsistentHashFactory$Builder.segmentOwners:[Ljava/util/List;
      48: invokespecial #8                  // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash."<init>":(Lorg/infinispan/commons/hash/Hash;IILjava/util/List;Ljava/util/Map;[Ljava/util/List;)V
      51: areturn

  protected org.infinispan.distribution.ch.impl.SyncConsistentHashFactory$Builder createBuilder(org.infinispan.commons.hash.Hash, int, int, java.util.List<org.infinispan.remoting.transport.Address>, java.util.Map<org.infinispan.remoting.transport.Address, java.lang.Float>);
    Code:
       0: new           #9                  // class org/infinispan/distribution/ch/impl/SyncConsistentHashFactory$Builder
       3: dup
       4: aload_1
       5: iload_2
       6: iload_3
       7: aload         4
       9: aload         5
      11: invokespecial #10                 // Method org/infinispan/distribution/ch/impl/SyncConsistentHashFactory$Builder."<init>":(Lorg/infinispan/commons/hash/Hash;IILjava/util/List;Ljava/util/Map;)V
      14: areturn

  protected void checkCapacityFactors(java.util.List<org.infinispan.remoting.transport.Address>, java.util.Map<org.infinispan.remoting.transport.Address, java.lang.Float>);
    Code:
       0: aload_2
       1: ifnull        119
       4: fconst_0
       5: fstore_3
       6: aload_1
       7: invokeinterface #11,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: astore        4
      14: aload         4
      16: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          103
      24: aload         4
      26: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #14                 // class org/infinispan/remoting/transport/Address
      34: astore        5
      36: aload_2
      37: aload         5
      39: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      44: checkcast     #16                 // class java/lang/Float
      47: astore        6
      49: aload         6
      51: ifnull        64
      54: aload         6
      56: invokevirtual #17                 // Method java/lang/Float.floatValue:()F
      59: fconst_0
      60: fcmpg
      61: ifge          92
      64: new           #18                 // class java/lang/IllegalArgumentException
      67: dup
      68: new           #19                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #21                 // String Invalid capacity factor for node
      77: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: aload         5
      82: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      85: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      88: invokespecial #25                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      91: athrow
      92: fload_3
      93: aload         6
      95: invokevirtual #17                 // Method java/lang/Float.floatValue:()F
      98: fadd
      99: fstore_3
     100: goto          14
     103: fload_3
     104: fconst_0
     105: fcmpl
     106: ifne          119
     109: new           #18                 // class java/lang/IllegalArgumentException
     112: dup
     113: ldc           #26                 // String There must be at least one node with a non-zero capacity factor
     115: invokespecial #25                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     118: athrow
     119: return

  public org.infinispan.distribution.ch.impl.DefaultConsistentHash updateMembers(org.infinispan.distribution.ch.impl.DefaultConsistentHash, java.util.List<org.infinispan.remoting.transport.Address>, java.util.Map<org.infinispan.remoting.transport.Address, java.lang.Float>);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: invokevirtual #2                  // Method checkCapacityFactors:(Ljava/util/List;Ljava/util/Map;)V
       6: aload_3
       7: ifnonnull     25
      10: aload_1
      11: invokevirtual #27                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getCapacityFactors:()Ljava/util/Map;
      14: ifnonnull     21
      17: iconst_1
      18: goto          35
      21: iconst_0
      22: goto          35
      25: aload_3
      26: aload_1
      27: invokevirtual #27                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getCapacityFactors:()Ljava/util/Map;
      30: invokeinterface #28,  2           // InterfaceMethod java/util/Map.equals:(Ljava/lang/Object;)Z
      35: istore        4
      37: aload_2
      38: aload_1
      39: invokevirtual #29                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getMembers:()Ljava/util/List;
      42: invokeinterface #30,  2           // InterfaceMethod java/util/List.equals:(Ljava/lang/Object;)Z
      47: ifeq          57
      50: iload         4
      52: ifeq          57
      55: aload_1
      56: areturn
      57: aload_1
      58: invokevirtual #31                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getNumSegments:()I
      61: istore        5
      63: aload_1
      64: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getNumOwners:()I
      67: istore        6
      69: new           #33                 // class java/util/HashSet
      72: dup
      73: aload_1
      74: invokevirtual #29                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getMembers:()Ljava/util/List;
      77: invokespecial #34                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      80: astore        7
      82: aload         7
      84: aload_2
      85: invokevirtual #35                 // Method java/util/HashSet.removeAll:(Ljava/util/Collection;)Z
      88: pop
      89: aconst_null
      90: astore        8
      92: iload         5
      94: anewarray     #36                 // class java/util/List
      97: astore        9
      99: iconst_0
     100: istore        10
     102: iload         10
     104: iload         5
     106: if_icmpge     193
     109: new           #37                 // class java/util/ArrayList
     112: dup
     113: aload_1
     114: iload         10
     116: invokevirtual #38                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.locateOwnersForSegment:(I)Ljava/util/List;
     119: invokespecial #39                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
     122: astore        11
     124: aload         11
     126: aload         7
     128: invokeinterface #40,  2           // InterfaceMethod java/util/List.removeAll:(Ljava/util/Collection;)Z
     133: pop
     134: aload         11
     136: invokeinterface #41,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     141: ifne          154
     144: aload         9
     146: iload         10
     148: aload         11
     150: aastore
     151: goto          187
     154: aload         8
     156: ifnonnull     175
     159: aload_0
     160: aload_1
     161: invokevirtual #42                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getHashFunction:()Lorg/infinispan/commons/hash/Hash;
     164: iload         6
     166: iload         5
     168: aload_2
     169: aload_3
     170: invokevirtual #43                 // Method create:(Lorg/infinispan/commons/hash/Hash;IILjava/util/List;Ljava/util/Map;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
     173: astore        8
     175: aload         9
     177: iload         10
     179: aload         8
     181: iload         10
     183: invokevirtual #38                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.locateOwnersForSegment:(I)Ljava/util/List;
     186: aastore
     187: iinc          10, 1
     190: goto          102
     193: new           #6                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
     196: dup
     197: aload_1
     198: invokevirtual #42                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getHashFunction:()Lorg/infinispan/commons/hash/Hash;
     201: iload         6
     203: iload         5
     205: aload_2
     206: aload_3
     207: aload         9
     209: invokespecial #8                  // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash."<init>":(Lorg/infinispan/commons/hash/Hash;IILjava/util/List;Ljava/util/Map;[Ljava/util/List;)V
     212: areturn

  public org.infinispan.distribution.ch.impl.DefaultConsistentHash rebalance(org.infinispan.distribution.ch.impl.DefaultConsistentHash);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #42                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getHashFunction:()Lorg/infinispan/commons/hash/Hash;
       5: aload_1
       6: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getNumOwners:()I
       9: aload_1
      10: invokevirtual #31                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getNumSegments:()I
      13: aload_1
      14: invokevirtual #29                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getMembers:()Ljava/util/List;
      17: aload_1
      18: invokevirtual #27                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getCapacityFactors:()Ljava/util/Map;
      21: invokevirtual #43                 // Method create:(Lorg/infinispan/commons/hash/Hash;IILjava/util/List;Ljava/util/Map;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
      24: astore_2
      25: aload_2
      26: aload_1
      27: invokevirtual #44                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.equals:(Ljava/lang/Object;)Z
      30: ifeq          35
      33: aload_1
      34: areturn
      35: aload_2
      36: areturn

  public org.infinispan.distribution.ch.impl.DefaultConsistentHash union(org.infinispan.distribution.ch.impl.DefaultConsistentHash, org.infinispan.distribution.ch.impl.DefaultConsistentHash);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #45                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.union:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
       5: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        19
       4: aload_1
       5: invokevirtual #46                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: aload_0
       9: invokevirtual #46                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      12: if_acmpne     19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public int hashCode();
    Code:
       0: sipush        -10007
       3: ireturn

  public org.infinispan.distribution.ch.ConsistentHash union(org.infinispan.distribution.ch.ConsistentHash, org.infinispan.distribution.ch.ConsistentHash);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #6                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
       5: aload_2
       6: checkcast     #6                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
       9: invokevirtual #47                 // Method union:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
      12: areturn

  public org.infinispan.distribution.ch.ConsistentHash rebalance(org.infinispan.distribution.ch.ConsistentHash);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #6                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
       5: invokevirtual #48                 // Method rebalance:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
       8: areturn

  public org.infinispan.distribution.ch.ConsistentHash updateMembers(org.infinispan.distribution.ch.ConsistentHash, java.util.List, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #6                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
       5: aload_2
       6: aload_3
       7: invokevirtual #49                 // Method updateMembers:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;Ljava/util/List;Ljava/util/Map;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
      10: areturn

  public org.infinispan.distribution.ch.ConsistentHash create(org.infinispan.commons.hash.Hash, int, int, java.util.List, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aload         4
       6: aload         5
       8: invokevirtual #43                 // Method create:(Lorg/infinispan/commons/hash/Hash;IILjava/util/List;Ljava/util/Map;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
      11: areturn
}
