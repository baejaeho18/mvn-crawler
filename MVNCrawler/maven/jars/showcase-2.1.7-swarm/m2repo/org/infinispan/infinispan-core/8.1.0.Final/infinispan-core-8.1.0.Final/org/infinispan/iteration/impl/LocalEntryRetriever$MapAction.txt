Compiled from "LocalEntryRetriever.java"
class org.infinispan.iteration.impl.LocalEntryRetriever$MapAction<C> implements java.util.function.BiConsumer<K, org.infinispan.container.entries.CacheEntry<K, V>> {
  final org.infinispan.filter.Converter<? super K, ? super V, ? extends C> converter;

  final java.util.Queue<org.infinispan.container.entries.CacheEntry<K, C>> queue;

  final int batchSize;

  final org.infinispan.iteration.impl.LocalEntryRetriever$BatchHandler<K, C> handler;

  final java.util.concurrent.atomic.AtomicInteger insertionCount;

  final org.infinispan.iteration.impl.LocalEntryRetriever this$0;

  public org.infinispan.iteration.impl.LocalEntryRetriever$MapAction(int, org.infinispan.filter.Converter<? super K, ? super V, ? extends C>, java.util.Queue<org.infinispan.container.entries.CacheEntry<K, C>>, org.infinispan.iteration.impl.LocalEntryRetriever$BatchHandler<K, C>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/infinispan/iteration/impl/LocalEntryRetriever;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicInteger
      13: dup
      14: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      17: putfield      #5                  // Field insertionCount:Ljava/util/concurrent/atomic/AtomicInteger;
      20: aload_0
      21: iload_2
      22: putfield      #6                  // Field batchSize:I
      25: aload_0
      26: aload_3
      27: putfield      #7                  // Field converter:Lorg/infinispan/filter/Converter;
      30: aload_0
      31: aload         4
      33: putfield      #8                  // Field queue:Ljava/util/Queue;
      36: aload_0
      37: aload         5
      39: putfield      #9                  // Field handler:Lorg/infinispan/iteration/impl/LocalEntryRetriever$BatchHandler;
      42: return

  public void accept(K, org.infinispan.container.entries.CacheEntry<K, V>);
    Code:
       0: aload_2
       1: invokeinterface #10,  1           // InterfaceMethod org/infinispan/container/entries/CacheEntry.clone:()Lorg/infinispan/container/entries/CacheEntry;
       6: astore_3
       7: aload_0
       8: getfield      #7                  // Field converter:Lorg/infinispan/filter/Converter;
      11: ifnull        63
      14: aload_0
      15: getfield      #7                  // Field converter:Lorg/infinispan/filter/Converter;
      18: aload_1
      19: aload_2
      20: invokeinterface #11,  1           // InterfaceMethod org/infinispan/container/entries/CacheEntry.getValue:()Ljava/lang/Object;
      25: aload_2
      26: invokeinterface #12,  1           // InterfaceMethod org/infinispan/container/entries/CacheEntry.getMetadata:()Lorg/infinispan/metadata/Metadata;
      31: invokeinterface #13,  4           // InterfaceMethod org/infinispan/filter/Converter.convert:(Ljava/lang/Object;Ljava/lang/Object;Lorg/infinispan/metadata/Metadata;)Ljava/lang/Object;
      36: astore        4
      38: aload         4
      40: ifnonnull     54
      43: aload_0
      44: getfield      #7                  // Field converter:Lorg/infinispan/filter/Converter;
      47: instanceof    #14                 // class org/infinispan/filter/KeyValueFilterConverter
      50: ifeq          54
      53: return
      54: aload_3
      55: aload         4
      57: invokeinterface #15,  2           // InterfaceMethod org/infinispan/container/entries/CacheEntry.setValue:(Ljava/lang/Object;)Ljava/lang/Object;
      62: pop
      63: aload_0
      64: getfield      #8                  // Field queue:Ljava/util/Queue;
      67: aload_3
      68: invokeinterface #16,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      73: pop
      74: aload_0
      75: getfield      #5                  // Field insertionCount:Ljava/util/concurrent/atomic/AtomicInteger;
      78: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      81: aload_0
      82: getfield      #6                  // Field batchSize:I
      85: irem
      86: ifne          123
      89: aload_0
      90: getfield      #9                  // Field handler:Lorg/infinispan/iteration/impl/LocalEntryRetriever$BatchHandler;
      93: iconst_0
      94: aload_0
      95: getfield      #8                  // Field queue:Ljava/util/Queue;
      98: invokeinterface #18,  3           // InterfaceMethod org/infinispan/iteration/impl/LocalEntryRetriever$BatchHandler.handleBatch:(ZLjava/util/Collection;)V
     103: goto          114
     106: astore        4
     108: invokestatic  #20                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     111: invokevirtual #21                 // Method java/lang/Thread.interrupt:()V
     114: aload_0
     115: getfield      #8                  // Field queue:Ljava/util/Queue;
     118: invokeinterface #22,  1           // InterfaceMethod java/util/Queue.clear:()V
     123: return
    Exception table:
       from    to  target type
          89   103   106   Class java/lang/InterruptedException

  public void accept(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #23                 // class org/infinispan/container/entries/CacheEntry
       6: invokevirtual #24                 // Method accept:(Ljava/lang/Object;Lorg/infinispan/container/entries/CacheEntry;)V
       9: return
}
