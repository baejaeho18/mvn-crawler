Compiled from "NumericVersion.java"
public class org.infinispan.container.versioning.NumericVersion implements org.infinispan.container.versioning.IncrementableEntryVersion {
  private final long version;

  public org.infinispan.container.versioning.NumericVersion(long);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lload_1
       6: putfield      #1                  // Field version:J
       9: return

  public long getVersion();
    Code:
       0: aload_0
       1: getfield      #1                  // Field version:J
       4: lreturn

  public org.infinispan.container.versioning.InequalVersionComparisonResult compareTo(org.infinispan.container.versioning.EntryVersion);
    Code:
       0: aload_1
       1: instanceof    #3                  // class org/infinispan/container/versioning/NumericVersion
       4: ifeq          48
       7: aload_1
       8: checkcast     #3                  // class org/infinispan/container/versioning/NumericVersion
      11: astore_2
      12: aload_0
      13: getfield      #1                  // Field version:J
      16: aload_2
      17: getfield      #1                  // Field version:J
      20: lcmp
      21: ifge          28
      24: getstatic     #4                  // Field org/infinispan/container/versioning/InequalVersionComparisonResult.BEFORE:Lorg/infinispan/container/versioning/InequalVersionComparisonResult;
      27: areturn
      28: aload_0
      29: getfield      #1                  // Field version:J
      32: aload_2
      33: getfield      #1                  // Field version:J
      36: lcmp
      37: ifle          44
      40: getstatic     #5                  // Field org/infinispan/container/versioning/InequalVersionComparisonResult.AFTER:Lorg/infinispan/container/versioning/InequalVersionComparisonResult;
      43: areturn
      44: getstatic     #6                  // Field org/infinispan/container/versioning/InequalVersionComparisonResult.EQUAL:Lorg/infinispan/container/versioning/InequalVersionComparisonResult;
      47: areturn
      48: new           #7                  // class java/lang/IllegalArgumentException
      51: dup
      52: new           #8                  // class java/lang/StringBuilder
      55: dup
      56: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #10                 // String Unable to compare other types:
      61: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: aload_1
      65: invokevirtual #12                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      68: invokevirtual #13                 // Method java/lang/Class.getName:()Ljava/lang/String;
      71: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      77: invokespecial #15                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      80: athrow

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #12                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #12                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #3                  // class org/infinispan/container/versioning/NumericVersion
      28: astore_2
      29: aload_0
      30: getfield      #1                  // Field version:J
      33: aload_2
      34: getfield      #1                  // Field version:J
      37: lcmp
      38: ifeq          43
      41: iconst_0
      42: ireturn
      43: iconst_1
      44: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #1                  // Field version:J
       4: aload_0
       5: getfield      #1                  // Field version:J
       8: bipush        32
      10: lushr
      11: lxor
      12: l2i
      13: ireturn

  public java.lang.String toString();
    Code:
       0: new           #8                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #16                 // String NumericVersion{version=
       9: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #1                  // Field version:J
      16: invokevirtual #17                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      19: bipush        125
      21: invokevirtual #18                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      24: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  static long access$000(org.infinispan.container.versioning.NumericVersion);
    Code:
       0: aload_0
       1: getfield      #1                  // Field version:J
       4: lreturn
}
