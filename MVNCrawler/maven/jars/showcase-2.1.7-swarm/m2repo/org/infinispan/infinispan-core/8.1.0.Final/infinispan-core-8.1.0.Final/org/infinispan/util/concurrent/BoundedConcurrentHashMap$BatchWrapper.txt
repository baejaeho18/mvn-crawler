Compiled from "BoundedConcurrentHashMap.java"
final class org.infinispan.util.concurrent.BoundedConcurrentHashMap$BatchWrapper<K, V> implements org.infinispan.util.concurrent.BoundedConcurrentHashMap$EvictionPolicy<K, V> {
  private static final int MAX_BATCH_SIZE;

  private final java.util.concurrent.ConcurrentLinkedQueue<org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>> accessQueue;

  private final java.util.concurrent.atomic.AtomicInteger accessQueueSize;

  private final java.util.concurrent.locks.ReentrantLock lock;

  private final int maxBatchQueueSize;

  private final org.infinispan.util.concurrent.BoundedConcurrentHashMap$EvictionPolicy<K, V> eviction;

  org.infinispan.util.concurrent.BoundedConcurrentHashMap$BatchWrapper(java.util.concurrent.locks.ReentrantLock, int, org.infinispan.util.concurrent.BoundedConcurrentHashMap$EvictionPolicy<K, V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentLinkedQueue
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      12: putfield      #4                  // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: iconst_0
      21: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      24: putfield      #7                  // Field accessQueueSize:Ljava/util/concurrent/atomic/AtomicInteger;
      27: aload_0
      28: aload_1
      29: putfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      32: aload_0
      33: iload_2
      34: bipush        64
      36: invokestatic  #10                 // Method java/lang/Math.min:(II)I
      39: putfield      #11                 // Field maxBatchQueueSize:I
      42: aload_0
      43: aload_3
      44: putfield      #12                 // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
      47: return

  public org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V> createNewEntry(K, int, org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>, V);
    Code:
       0: aload_0
       1: getfield      #12                 // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
       4: aload_1
       5: iload_2
       6: aload_3
       7: aload         4
       9: invokeinterface #13,  5           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.createNewEntry:(Ljava/lang/Object;ILorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;Ljava/lang/Object;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      14: areturn

  private void processEnqueuedHits();
    Code:
       0: aload_0
       1: getfield      #4                  // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
       4: invokevirtual #14                 // Method java/util/concurrent/ConcurrentLinkedQueue.poll:()Ljava/lang/Object;
       7: checkcast     #15                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry
      10: dup
      11: astore_1
      12: ifnull        28
      15: aload_0
      16: getfield      #12                 // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
      19: aload_1
      20: invokeinterface #16,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryHit:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)V
      25: goto          0
      28: aload_0
      29: getfield      #7                  // Field accessQueueSize:Ljava/util/concurrent/atomic/AtomicInteger;
      32: iconst_0
      33: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      36: return

  public java.util.Set<org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>> onEntryMiss(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processEnqueuedHits:()V
       4: aload_0
       5: getfield      #12                 // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
       8: aload_1
       9: invokeinterface #19,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryMiss:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)Ljava/util/Set;
      14: areturn

  public void onEntryHit(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
       4: aload_1
       5: invokevirtual #20                 // Method java/util/concurrent/ConcurrentLinkedQueue.add:(Ljava/lang/Object;)Z
       8: pop
       9: aload_0
      10: getfield      #7                  // Field accessQueueSize:Ljava/util/concurrent/atomic/AtomicInteger;
      13: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      16: istore_2
      17: iload_2
      18: aload_0
      19: getfield      #11                 // Field maxBatchQueueSize:I
      22: if_icmplt     59
      25: aload_0
      26: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      29: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:()Z
      32: ifeq          59
      35: aload_0
      36: invokespecial #18                 // Method processEnqueuedHits:()V
      39: aload_0
      40: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      43: invokevirtual #23                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      46: goto          59
      49: astore_3
      50: aload_0
      51: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      54: invokevirtual #23                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      57: aload_3
      58: athrow
      59: return
    Exception table:
       from    to  target type
          35    39    49   any

  public void onEntryRemove(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_0
       1: getfield      #12                 // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
       4: aload_1
       5: invokeinterface #24,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryRemove:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)V
      10: return

  public void clear();
    Code:
       0: aload_0
       1: getfield      #12                 // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
       4: invokeinterface #25,  1           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.clear:()V
       9: aload_0
      10: getfield      #4                  // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      13: invokevirtual #26                 // Method java/util/concurrent/ConcurrentLinkedQueue.clear:()V
      16: aload_0
      17: getfield      #7                  // Field accessQueueSize:Ljava/util/concurrent/atomic/AtomicInteger;
      20: iconst_0
      21: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      24: return
}
