Compiled from "WriteOnlyManyEntriesCommand.java"
public final class org.infinispan.commands.functional.WriteOnlyManyEntriesCommand<K, V> extends org.infinispan.commands.functional.AbstractWriteManyCommand<K, V> {
  public static final byte COMMAND_ID;

  private java.util.Map<? extends K, ? extends V> entries;

  private java.util.function.BiConsumer<V, org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>> f;

  public org.infinispan.commands.functional.WriteOnlyManyEntriesCommand(java.util.Map<? extends K, ? extends V>, java.util.function.BiConsumer<V, org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/commands/functional/AbstractWriteManyCommand."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field entries:Ljava/util/Map;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field f:Ljava/util/function/BiConsumer;
      14: return

  public org.infinispan.commands.functional.WriteOnlyManyEntriesCommand(org.infinispan.commands.functional.WriteOnlyManyEntriesCommand<K, V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/commands/functional/AbstractWriteManyCommand."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #2                  // Field entries:Ljava/util/Map;
       9: putfield      #2                  // Field entries:Ljava/util/Map;
      12: aload_0
      13: aload_1
      14: getfield      #3                  // Field f:Ljava/util/function/BiConsumer;
      17: putfield      #3                  // Field f:Ljava/util/function/BiConsumer;
      20: return

  public org.infinispan.commands.functional.WriteOnlyManyEntriesCommand();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/commands/functional/AbstractWriteManyCommand."<init>":()V
       4: return

  public java.util.Map<? extends K, ? extends V> getEntries();
    Code:
       0: aload_0
       1: getfield      #2                  // Field entries:Ljava/util/Map;
       4: areturn

  public void setEntries(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field entries:Ljava/util/Map;
       5: return

  public byte getCommandId();
    Code:
       0: bipush        57
       2: ireturn

  public void setParameters(int, java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_2
       2: iconst_0
       3: aaload
       4: checkcast     #5                  // class java/util/Map
       7: putfield      #2                  // Field entries:Ljava/util/Map;
      10: aload_0
      11: aload_2
      12: iconst_1
      13: aaload
      14: checkcast     #6                  // class java/util/function/BiConsumer
      17: putfield      #3                  // Field f:Ljava/util/function/BiConsumer;
      20: aload_0
      21: aload_2
      22: iconst_2
      23: aaload
      24: checkcast     #7                  // class java/lang/Boolean
      27: invokevirtual #8                  // Method java/lang/Boolean.booleanValue:()Z
      30: putfield      #9                  // Field isForwarded:Z
      33: return

  public java.lang.Object[] getParameters();
    Code:
       0: iconst_3
       1: anewarray     #10                 // class java/lang/Object
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #2                  // Field entries:Ljava/util/Map;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #3                  // Field f:Ljava/util/function/BiConsumer;
      17: aastore
      18: dup
      19: iconst_2
      20: aload_0
      21: getfield      #9                  // Field isForwarded:Z
      24: invokestatic  #11                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      27: aastore
      28: areturn

  public java.lang.Object perform(org.infinispan.context.InvocationContext) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: getfield      #2                  // Field entries:Ljava/util/Map;
       4: invokeinterface #12,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #13,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_2
      15: aload_2
      16: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          76
      24: aload_2
      25: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #16                 // class java/util/Map$Entry
      33: astore_3
      34: aload_1
      35: aload_3
      36: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      41: invokeinterface #18,  2           // InterfaceMethod org/infinispan/context/InvocationContext.lookupEntry:(Ljava/lang/Object;)Lorg/infinispan/container/entries/CacheEntry;
      46: astore        4
      48: aload         4
      50: ifnull        73
      53: aload_0
      54: getfield      #3                  // Field f:Ljava/util/function/BiConsumer;
      57: aload_3
      58: invokeinterface #19,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      63: aload         4
      65: invokestatic  #20                 // Method org/infinispan/functional/impl/EntryViews.writeOnly:(Lorg/infinispan/container/entries/CacheEntry;)Lorg/infinispan/commons/api/functional/EntryView$WriteEntryView;
      68: invokeinterface #21,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      73: goto          15
      76: aconst_null
      77: areturn

  public boolean isReturnValueExpected();
    Code:
       0: iconst_0
       1: ireturn

  public boolean canBlock();
    Code:
       0: iconst_0
       1: ireturn

  public java.util.Set<java.lang.Object> getAffectedKeys();
    Code:
       0: aconst_null
       1: areturn

  public void updateStatusFromRemoteResponse(java.lang.Object);
    Code:
       0: return

  public java.lang.Object acceptVisitor(org.infinispan.context.InvocationContext, org.infinispan.commands.Visitor) throws java.lang.Throwable;
    Code:
       0: aload_2
       1: aload_1
       2: aload_0
       3: invokeinterface #22,  3           // InterfaceMethod org/infinispan/commands/Visitor.visitWriteOnlyManyEntriesCommand:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/functional/WriteOnlyManyEntriesCommand;)Ljava/lang/Object;
       8: areturn

  public boolean ignoreCommandOnStatus(org.infinispan.lifecycle.ComponentStatus);
    Code:
       0: iconst_0
       1: ireturn

  public boolean readsExistingValues();
    Code:
       0: iconst_0
       1: ireturn

  public boolean alwaysReadsExistingValues();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isWriteOnly();
    Code:
       0: iconst_1
       1: ireturn

  public void setParams(org.infinispan.functional.impl.Params);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #23                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.setParams:(Lorg/infinispan/functional/impl/Params;)V
       5: return

  public org.infinispan.functional.impl.Params getParams();
    Code:
       0: aload_0
       1: invokespecial #24                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.getParams:()Lorg/infinispan/functional/impl/Params;
       4: areturn

  public boolean hasFlag(org.infinispan.context.Flag);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #25                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.hasFlag:(Lorg/infinispan/context/Flag;)Z
       5: ireturn

  public void setFlags(org.infinispan.context.Flag[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #26                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.setFlags:([Lorg/infinispan/context/Flag;)V
       5: return

  public void setFlags(java.util.Set);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #27                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.setFlags:(Ljava/util/Set;)V
       5: return

  public void setMetadata(org.infinispan.metadata.Metadata);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #28                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.setMetadata:(Lorg/infinispan/metadata/Metadata;)V
       5: return

  public org.infinispan.metadata.Metadata getMetadata();
    Code:
       0: aload_0
       1: invokespecial #29                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.getMetadata:()Lorg/infinispan/metadata/Metadata;
       4: areturn

  public java.util.Set getFlags();
    Code:
       0: aload_0
       1: invokespecial #30                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.getFlags:()Ljava/util/Set;
       4: areturn

  public boolean shouldInvoke(org.infinispan.context.InvocationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #31                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.shouldInvoke:(Lorg/infinispan/context/InvocationContext;)Z
       5: ireturn

  public boolean isConditional();
    Code:
       0: aload_0
       1: invokespecial #32                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.isConditional:()Z
       4: ireturn

  public boolean isSuccessful();
    Code:
       0: aload_0
       1: invokespecial #33                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.isSuccessful:()Z
       4: ireturn

  public void setValueMatcher(org.infinispan.commands.write.ValueMatcher);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #34                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.setValueMatcher:(Lorg/infinispan/commands/write/ValueMatcher;)V
       5: return

  public org.infinispan.commands.write.ValueMatcher getValueMatcher();
    Code:
       0: aload_0
       1: invokespecial #35                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.getValueMatcher:()Lorg/infinispan/commands/write/ValueMatcher;
       4: areturn

  public void setForwarded(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #36                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.setForwarded:(Z)V
       5: return

  public boolean isForwarded();
    Code:
       0: aload_0
       1: invokespecial #37                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.isForwarded:()Z
       4: ireturn

  public void setTopologyId(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #38                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.setTopologyId:(I)V
       5: return

  public int getTopologyId();
    Code:
       0: aload_0
       1: invokespecial #39                 // Method org/infinispan/commands/functional/AbstractWriteManyCommand.getTopologyId:()I
       4: ireturn
}
