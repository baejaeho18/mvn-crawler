Compiled from "GridInputStream.java"
public class org.infinispan.io.GridInputStream extends java.io.InputStream {
  private int index;

  private int localIndex;

  private byte[] currentBuffer;

  private int fSize;

  private boolean streamClosed;

  private final org.infinispan.io.FileChunkMapper fileChunkMapper;

  private final int chunkSize;

  org.infinispan.io.GridInputStream(org.infinispan.io.GridFile, org.infinispan.Cache<java.lang.String, byte[]>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field index:I
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field localIndex:I
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field currentBuffer:[B
      19: aload_0
      20: iconst_0
      21: putfield      #5                  // Field streamClosed:Z
      24: aload_0
      25: new           #6                  // class org/infinispan/io/FileChunkMapper
      28: dup
      29: aload_1
      30: aload_2
      31: invokespecial #7                  // Method org/infinispan/io/FileChunkMapper."<init>":(Lorg/infinispan/io/GridFile;Lorg/infinispan/Cache;)V
      34: putfield      #8                  // Field fileChunkMapper:Lorg/infinispan/io/FileChunkMapper;
      37: aload_0
      38: aload_0
      39: getfield      #8                  // Field fileChunkMapper:Lorg/infinispan/io/FileChunkMapper;
      42: invokevirtual #9                  // Method org/infinispan/io/FileChunkMapper.getChunkSize:()I
      45: putfield      #10                 // Field chunkSize:I
      48: aload_0
      49: aload_1
      50: invokevirtual #11                 // Method org/infinispan/io/GridFile.length:()J
      53: l2i
      54: putfield      #12                 // Field fSize:I
      57: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #13                 // Method assertOpen:()V
       4: aload_0
       5: invokespecial #14                 // Method isEndReached:()Z
       8: ifeq          13
      11: iconst_m1
      12: ireturn
      13: aload_0
      14: invokespecial #15                 // Method getBytesRemainingInChunk:()I
      17: ifne          24
      20: aload_0
      21: invokespecial #16                 // Method getChunk:()V
      24: sipush        255
      27: aload_0
      28: getfield      #4                  // Field currentBuffer:[B
      31: aload_0
      32: dup
      33: getfield      #3                  // Field localIndex:I
      36: dup_x1
      37: iconst_1
      38: iadd
      39: putfield      #3                  // Field localIndex:I
      42: baload
      43: iand
      44: istore_1
      45: aload_0
      46: dup
      47: getfield      #2                  // Field index:I
      50: iconst_1
      51: iadd
      52: putfield      #2                  // Field index:I
      55: iload_1
      56: ireturn

  public int read(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #17                 // Method read:([BII)I
       8: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #13                 // Method assertOpen:()V
       4: iconst_0
       5: istore        4
       7: iload_3
       8: ifle          58
      11: aload_0
      12: aload_1
      13: iload_2
      14: iload_3
      15: invokespecial #18                 // Method readFromChunk:([BII)I
      18: istore        5
      20: iload         5
      22: iconst_m1
      23: if_icmpne     38
      26: iload         4
      28: ifle          36
      31: iload         4
      33: goto          37
      36: iconst_m1
      37: ireturn
      38: iload_2
      39: iload         5
      41: iadd
      42: istore_2
      43: iload_3
      44: iload         5
      46: isub
      47: istore_3
      48: iload         4
      50: iload         5
      52: iadd
      53: istore        4
      55: goto          7
      58: iload         4
      60: ireturn

  private int readFromChunk(byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method isEndReached:()Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_0
      10: invokespecial #15                 // Method getBytesRemainingInChunk:()I
      13: istore        4
      15: iload         4
      17: ifne          30
      20: aload_0
      21: invokespecial #16                 // Method getChunk:()V
      24: aload_0
      25: invokespecial #15                 // Method getBytesRemainingInChunk:()I
      28: istore        4
      30: iload_3
      31: iload         4
      33: invokestatic  #19                 // Method java/lang/Math.min:(II)I
      36: istore        5
      38: aload_0
      39: getfield      #4                  // Field currentBuffer:[B
      42: aload_0
      43: getfield      #3                  // Field localIndex:I
      46: aload_1
      47: iload_2
      48: iload         5
      50: invokestatic  #20                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      53: aload_0
      54: dup
      55: getfield      #3                  // Field localIndex:I
      58: iload         5
      60: iadd
      61: putfield      #3                  // Field localIndex:I
      64: aload_0
      65: dup
      66: getfield      #2                  // Field index:I
      69: iload         5
      71: iadd
      72: putfield      #2                  // Field index:I
      75: iload         5
      77: ireturn

  public long skip(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #13                 // Method assertOpen:()V
       4: lload_1
       5: lconst_0
       6: lcmp
       7: ifgt          12
      10: lconst_0
      11: lreturn
      12: lload_1
      13: l2i
      14: aload_0
      15: invokespecial #21                 // Method getBytesRemainingInStream:()I
      18: invokestatic  #19                 // Method java/lang/Math.min:(II)I
      21: istore_3
      22: aload_0
      23: dup
      24: getfield      #2                  // Field index:I
      27: iload_3
      28: iadd
      29: putfield      #2                  // Field index:I
      32: iload_3
      33: aload_0
      34: invokespecial #15                 // Method getBytesRemainingInChunk:()I
      37: if_icmpgt     53
      40: aload_0
      41: dup
      42: getfield      #3                  // Field localIndex:I
      45: iload_3
      46: iadd
      47: putfield      #3                  // Field localIndex:I
      50: goto          72
      53: aload_0
      54: invokespecial #16                 // Method getChunk:()V
      57: aload_0
      58: aload_0
      59: getfield      #2                  // Field index:I
      62: aload_0
      63: getfield      #10                 // Field chunkSize:I
      66: invokestatic  #22                 // Method org/infinispan/io/ModularArithmetic.mod:(II)I
      69: putfield      #3                  // Field localIndex:I
      72: iload_3
      73: i2l
      74: lreturn

  int position();
    Code:
       0: aload_0
       1: getfield      #2                  // Field index:I
       4: ireturn

  void position(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #23                 // class java/lang/IllegalArgumentException
       9: dup
      10: ldc           #24                 // String newPosition may not be negative
      12: invokespecial #25                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: invokespecial #13                 // Method assertOpen:()V
      20: lload_1
      21: l2i
      22: istore_3
      23: aload_0
      24: iload_3
      25: invokespecial #26                 // Method getChunkNumber:(I)I
      28: istore        4
      30: aload_0
      31: aload_0
      32: getfield      #2                  // Field index:I
      35: iconst_1
      36: isub
      37: invokespecial #26                 // Method getChunkNumber:(I)I
      40: iload         4
      42: if_icmpeq     58
      45: aload_0
      46: aload_0
      47: getfield      #8                  // Field fileChunkMapper:Lorg/infinispan/io/FileChunkMapper;
      50: iload         4
      52: invokevirtual #27                 // Method org/infinispan/io/FileChunkMapper.fetchChunk:(I)[B
      55: putfield      #4                  // Field currentBuffer:[B
      58: aload_0
      59: iload_3
      60: putfield      #2                  // Field index:I
      63: aload_0
      64: iload_3
      65: aload_0
      66: getfield      #10                 // Field chunkSize:I
      69: invokestatic  #22                 // Method org/infinispan/io/ModularArithmetic.mod:(II)I
      72: putfield      #3                  // Field localIndex:I
      75: return

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #13                 // Method assertOpen:()V
       4: aload_0
       5: invokespecial #15                 // Method getBytesRemainingInChunk:()I
       8: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: iconst_0
       3: dup_x1
       4: putfield      #2                  // Field index:I
       7: putfield      #3                  // Field localIndex:I
      10: aload_0
      11: iconst_1
      12: putfield      #5                  // Field streamClosed:Z
      15: return

  private boolean isEndReached();
    Code:
       0: aload_0
       1: getfield      #2                  // Field index:I
       4: aload_0
       5: getfield      #12                 // Field fSize:I
       8: if_icmpne     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  private void assertOpen() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field streamClosed:Z
       4: ifeq          17
       7: new           #28                 // class java/io/IOException
      10: dup
      11: ldc           #29                 // String Stream is closed
      13: invokespecial #30                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  private int getBytesRemainingInChunk();
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentBuffer:[B
       4: ifnonnull     11
       7: iconst_0
       8: goto          21
      11: aload_0
      12: getfield      #4                  // Field currentBuffer:[B
      15: arraylength
      16: aload_0
      17: getfield      #3                  // Field localIndex:I
      20: isub
      21: ireturn

  private int getBytesRemainingInStream();
    Code:
       0: aload_0
       1: getfield      #12                 // Field fSize:I
       4: aload_0
       5: getfield      #2                  // Field index:I
       8: isub
       9: ireturn

  private void getChunk();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field fileChunkMapper:Lorg/infinispan/io/FileChunkMapper;
       5: aload_0
       6: invokespecial #31                 // Method getChunkNumber:()I
       9: invokevirtual #27                 // Method org/infinispan/io/FileChunkMapper.fetchChunk:(I)[B
      12: putfield      #4                  // Field currentBuffer:[B
      15: aload_0
      16: iconst_0
      17: putfield      #3                  // Field localIndex:I
      20: return

  private int getChunkNumber();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field index:I
       5: invokespecial #26                 // Method getChunkNumber:(I)I
       8: ireturn

  private int getChunkNumber(int);
    Code:
       0: iload_1
       1: ifge          8
       4: iconst_m1
       5: goto          14
       8: iload_1
       9: aload_0
      10: getfield      #10                 // Field chunkSize:I
      13: idiv
      14: ireturn

  int getFileSize();
    Code:
       0: aload_0
       1: getfield      #12                 // Field fSize:I
       4: ireturn
}
