Compiled from "MapReduceManagerImpl.java"
final class org.infinispan.distexec.mapreduce.MapReduceManagerImpl$DefaultCollector<K, V, KOut, VOut> implements org.infinispan.distexec.mapreduce.MapReduceManagerImpl$CollectableCollector<KOut, VOut> {
  private java.util.Map<KOut, java.util.List<VOut>> store;

  private final java.util.concurrent.atomic.AtomicInteger emitCount;

  private final int maxCollectorSize;

  private org.infinispan.commands.read.MapCombineCommand<K, V, KOut, VOut> mcc;

  final org.infinispan.distexec.mapreduce.MapReduceManagerImpl this$0;

  public org.infinispan.distexec.mapreduce.MapReduceManagerImpl$DefaultCollector(org.infinispan.commands.read.MapCombineCommand<K, V, KOut, VOut>, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/infinispan/distexec/mapreduce/MapReduceManagerImpl;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: new           #3                  // class java/util/HashMap
      13: dup
      14: sipush        1024
      17: ldc           #4                  // float 0.75f
      19: invokespecial #5                  // Method java/util/HashMap."<init>":(IF)V
      22: putfield      #6                  // Field store:Ljava/util/Map;
      25: aload_0
      26: new           #7                  // class java/util/concurrent/atomic/AtomicInteger
      29: dup
      30: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      33: putfield      #9                  // Field emitCount:Ljava/util/concurrent/atomic/AtomicInteger;
      36: aload_0
      37: iload_3
      38: putfield      #10                 // Field maxCollectorSize:I
      41: aload_0
      42: aload_2
      43: putfield      #11                 // Field mcc:Lorg/infinispan/commands/read/MapCombineCommand;
      46: return

  public void emit(KOut, VOut);
    Code:
       0: aload_0
       1: getfield      #6                  // Field store:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #13                 // class java/util/List
      13: astore_3
      14: aload_3
      15: ifnonnull     41
      18: new           #14                 // class java/util/ArrayList
      21: dup
      22: sipush        128
      25: invokespecial #15                 // Method java/util/ArrayList."<init>":(I)V
      28: astore_3
      29: aload_0
      30: getfield      #6                  // Field store:Ljava/util/Map;
      33: aload_1
      34: aload_3
      35: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      40: pop
      41: aload_3
      42: aload_2
      43: invokeinterface #17,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      48: pop
      49: aload_0
      50: getfield      #9                  // Field emitCount:Ljava/util/concurrent/atomic/AtomicInteger;
      53: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      56: pop
      57: aload_0
      58: invokevirtual #19                 // Method isOverflown:()Z
      61: ifeq          86
      64: aload_0
      65: getfield      #11                 // Field mcc:Lorg/infinispan/commands/read/MapCombineCommand;
      68: invokevirtual #20                 // Method org/infinispan/commands/read/MapCombineCommand.hasCombiner:()Z
      71: ifeq          86
      74: aload_0
      75: getfield      #1                  // Field this$0:Lorg/infinispan/distexec/mapreduce/MapReduceManagerImpl;
      78: aload_0
      79: getfield      #11                 // Field mcc:Lorg/infinispan/commands/read/MapCombineCommand;
      82: aload_0
      83: invokevirtual #21                 // Method org/infinispan/distexec/mapreduce/MapReduceManagerImpl.combine:(Lorg/infinispan/commands/read/MapCombineCommand;Lorg/infinispan/distexec/mapreduce/MapReduceManagerImpl$CollectableCollector;)V
      86: return

  public void emitReduced(KOut, VOut);
    Code:
       0: aload_0
       1: getfield      #6                  // Field store:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #13                 // class java/util/List
      13: astore_3
      14: aload_3
      15: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
      20: istore        4
      22: aload_3
      23: invokeinterface #23,  1           // InterfaceMethod java/util/List.clear:()V
      28: aload_3
      29: aload_2
      30: invokeinterface #17,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      35: pop
      36: aload_0
      37: getfield      #9                  // Field emitCount:Ljava/util/concurrent/atomic/AtomicInteger;
      40: iload         4
      42: ineg
      43: iconst_1
      44: iadd
      45: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicInteger.addAndGet:(I)I
      48: pop
      49: return

  public java.util.Map<KOut, java.util.List<VOut>> collectedValues();
    Code:
       0: aload_0
       1: getfield      #6                  // Field store:Ljava/util/Map;
       4: areturn

  public void reset();
    Code:
       0: aload_0
       1: getfield      #6                  // Field store:Ljava/util/Map;
       4: invokeinterface #25,  1           // InterfaceMethod java/util/Map.clear:()V
       9: aload_0
      10: getfield      #9                  // Field emitCount:Ljava/util/concurrent/atomic/AtomicInteger;
      13: iconst_0
      14: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      17: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #6                  // Field store:Ljava/util/Map;
       4: invokeinterface #27,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
       9: ireturn

  public void emit(java.util.Map<KOut, java.util.List<VOut>>);
    Code:
       0: aload_1
       1: invokeinterface #28,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #29,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          92
      21: aload_2
      22: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #32                 // class java/util/Map$Entry
      30: astore_3
      31: aload_3
      32: invokeinterface #33,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      37: astore        4
      39: aload_3
      40: invokeinterface #34,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      45: checkcast     #13                 // class java/util/List
      48: astore        5
      50: aload         5
      52: invokeinterface #35,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      57: astore        6
      59: aload         6
      61: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      66: ifeq          89
      69: aload         6
      71: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      76: astore        7
      78: aload_0
      79: aload         4
      81: aload         7
      83: invokevirtual #36                 // Method emit:(Ljava/lang/Object;Ljava/lang/Object;)V
      86: goto          59
      89: goto          12
      92: return

  public boolean isOverflown();
    Code:
       0: aload_0
       1: getfield      #9                  // Field emitCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: aload_0
       8: getfield      #10                 // Field maxCollectorSize:I
      11: if_icmple     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn
}
