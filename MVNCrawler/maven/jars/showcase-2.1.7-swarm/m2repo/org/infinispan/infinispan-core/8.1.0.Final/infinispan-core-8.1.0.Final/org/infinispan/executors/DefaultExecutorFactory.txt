Compiled from "DefaultExecutorFactory.java"
public class org.infinispan.executors.DefaultExecutorFactory implements org.infinispan.commons.executors.SecurityAwareExecutorFactory {
  private final java.util.concurrent.atomic.AtomicInteger counter;

  public org.infinispan.executors.DefaultExecutorFactory();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_0
      10: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #1                  // Field counter:Ljava/util/concurrent/atomic/AtomicInteger;
      16: return

  public java.util.concurrent.ExecutorService getExecutor(java.util.Properties);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #5                  // Method getExecutor:(Ljava/util/Properties;Ljava/security/AccessControlContext;)Ljava/util/concurrent/ExecutorService;
       6: areturn

  public java.util.concurrent.ExecutorService getExecutor(java.util.Properties, java.security.AccessControlContext);
    Code:
       0: aload_1
       1: invokestatic  #6                  // Method org/infinispan/commons/util/TypedProperties.toTypedProperties:(Ljava/util/Properties;)Lorg/infinispan/commons/util/TypedProperties;
       4: astore_3
       5: aload_3
       6: ldc           #7                  // String maxThreads
       8: iconst_1
       9: invokevirtual #8                  // Method org/infinispan/commons/util/TypedProperties.getIntProperty:(Ljava/lang/String;I)I
      12: istore        4
      14: aload_3
      15: ldc           #9                  // String queueSize
      17: ldc           #10                 // int 100000
      19: invokevirtual #8                  // Method org/infinispan/commons/util/TypedProperties.getIntProperty:(Ljava/lang/String;I)I
      22: istore        5
      24: iload         5
      26: ifne          33
      29: iconst_1
      30: goto          41
      33: aload_3
      34: ldc           #11                 // String coreThreads
      36: iload         4
      38: invokevirtual #8                  // Method org/infinispan/commons/util/TypedProperties.getIntProperty:(Ljava/lang/String;I)I
      41: istore        6
      43: aload_3
      44: ldc           #12                 // String keepAliveTime
      46: ldc2_w        #13                 // long 60000l
      49: invokevirtual #15                 // Method org/infinispan/commons/util/TypedProperties.getLongProperty:(Ljava/lang/String;J)J
      52: lstore        7
      54: aload_3
      55: ldc           #16                 // String threadPriority
      57: iconst_1
      58: invokevirtual #8                  // Method org/infinispan/commons/util/TypedProperties.getIntProperty:(Ljava/lang/String;I)I
      61: istore        9
      63: aload_3
      64: ldc           #18                 // String threadNamePrefix
      66: aload_3
      67: ldc           #19                 // String componentName
      69: ldc           #20                 // String Thread
      71: invokevirtual #21                 // Method org/infinispan/commons/util/TypedProperties.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      74: invokevirtual #21                 // Method org/infinispan/commons/util/TypedProperties.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      77: astore        10
      79: aload_3
      80: ldc           #22                 // String threadNameSuffix
      82: ldc           #23                 // String
      84: invokevirtual #21                 // Method org/infinispan/commons/util/TypedProperties.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      87: astore        11
      89: iload         5
      91: ifne          104
      94: new           #24                 // class java/util/concurrent/SynchronousQueue
      97: dup
      98: invokespecial #25                 // Method java/util/concurrent/SynchronousQueue."<init>":()V
     101: goto          113
     104: new           #26                 // class java/util/concurrent/LinkedBlockingQueue
     107: dup
     108: iload         5
     110: invokespecial #27                 // Method java/util/concurrent/LinkedBlockingQueue."<init>":(I)V
     113: astore        12
     115: new           #28                 // class org/infinispan/executors/DefaultExecutorFactory$1
     118: dup
     119: aload_0
     120: aload         10
     122: aload         11
     124: iload         9
     126: aload_2
     127: invokespecial #29                 // Method org/infinispan/executors/DefaultExecutorFactory$1."<init>":(Lorg/infinispan/executors/DefaultExecutorFactory;Ljava/lang/String;Ljava/lang/String;ILjava/security/AccessControlContext;)V
     130: astore        13
     132: new           #30                 // class java/util/concurrent/ThreadPoolExecutor
     135: dup
     136: iload         6
     138: iload         4
     140: lload         7
     142: getstatic     #31                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     145: aload         12
     147: aload         13
     149: new           #32                 // class java/util/concurrent/ThreadPoolExecutor$CallerRunsPolicy
     152: dup
     153: invokespecial #33                 // Method java/util/concurrent/ThreadPoolExecutor$CallerRunsPolicy."<init>":()V
     156: invokespecial #34                 // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V
     159: areturn

  static java.util.concurrent.atomic.AtomicInteger access$000(org.infinispan.executors.DefaultExecutorFactory);
    Code:
       0: aload_0
       1: getfield      #1                  // Field counter:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn
}
