Compiled from "CacheTransaction.java"
public interface org.infinispan.transaction.xa.CacheTransaction {
  public abstract org.infinispan.transaction.xa.GlobalTransaction getGlobalTransaction();

  public abstract java.util.List<org.infinispan.commands.write.WriteCommand> getModifications();

  public abstract java.util.List<org.infinispan.commands.write.WriteCommand> getAllModifications();

  public abstract boolean hasModification(java.lang.Class<?>);

  public abstract org.infinispan.container.entries.CacheEntry lookupEntry(java.lang.Object);

  public abstract java.util.Map<java.lang.Object, org.infinispan.container.entries.CacheEntry> getLookedUpEntries();

  public abstract void putLookedUpEntry(java.lang.Object, org.infinispan.container.entries.CacheEntry);

  public abstract void putLookedUpEntries(java.util.Map<java.lang.Object, org.infinispan.container.entries.CacheEntry>);

  public abstract void removeLookedUpEntry(java.lang.Object);

  public abstract void clearLookedUpEntries();

  public abstract boolean ownsLock(java.lang.Object);

  public abstract void clearLockedKeys();

  public abstract java.util.Set<java.lang.Object> getLockedKeys();

  public abstract int getTopologyId();

  public abstract java.util.Set<java.lang.Object> getBackupLockedKeys();

  public abstract void addBackupLockForKey(java.lang.Object);

  public abstract void notifyOnTransactionFinished();

  public abstract boolean waitForLockRelease(long) throws java.lang.InterruptedException;

  public abstract boolean containsLockOrBackupLock(java.lang.Object);

  public abstract java.lang.Object findAnyLockedOrBackupLocked(java.util.Collection<java.lang.Object>);

  public abstract boolean areLocksReleased();

  public abstract org.infinispan.container.versioning.EntryVersionsMap getUpdatedEntryVersions();

  public abstract void setUpdatedEntryVersions(org.infinispan.container.versioning.EntryVersionsMap);

  public abstract void putLookedUpRemoteVersion(java.lang.Object, org.infinispan.container.versioning.EntryVersion);

  public abstract org.infinispan.container.versioning.EntryVersion getLookedUpRemoteVersion(java.lang.Object);

  public abstract boolean keyRead(java.lang.Object);

  public abstract void addReadKey(java.lang.Object);

  public abstract boolean isMarkedForRollback();

  public abstract void markForRollback(boolean);

  public abstract void addVersionRead(java.lang.Object, org.infinispan.container.versioning.EntryVersion);

  public abstract void replaceVersionRead(java.lang.Object, org.infinispan.container.versioning.EntryVersion);

  public abstract org.infinispan.container.versioning.EntryVersionsMap getVersionsRead();

  public abstract long getCreationTime();

  public abstract void addListener(org.infinispan.transaction.xa.CacheTransaction$TransactionCompletedListener);

  public abstract void freezeModifications();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> getReleaseFutureForKey(java.lang.Object);

  public abstract org.infinispan.util.KeyValuePair<java.lang.Object, java.util.concurrent.CompletableFuture<java.lang.Void>> getReleaseFutureForKeys(java.util.Collection<java.lang.Object>);

  public abstract void cleanupBackupLocks();
}
