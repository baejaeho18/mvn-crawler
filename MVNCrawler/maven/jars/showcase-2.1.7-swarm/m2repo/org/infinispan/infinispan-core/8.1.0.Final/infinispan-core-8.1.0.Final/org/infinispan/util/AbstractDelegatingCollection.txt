Compiled from "AbstractDelegatingCollection.java"
public abstract class org.infinispan.util.AbstractDelegatingCollection<E> implements java.util.Collection<E> {
  public org.infinispan.util.AbstractDelegatingCollection();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  protected abstract java.util.Collection<E> delegate();

  public int size();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: invokeinterface #3,  1            // InterfaceMethod java/util/Collection.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: invokeinterface #4,  1            // InterfaceMethod java/util/Collection.isEmpty:()Z
       9: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod java/util/Collection.contains:(Ljava/lang/Object;)Z
      10: ireturn

  public java.util.Iterator<E> iterator();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: invokeinterface #6,  1            // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       9: areturn

  public void forEach(java.util.function.Consumer<? super E>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #7,  2            // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      10: return

  public java.lang.Object[] toArray();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: invokeinterface #8,  1            // InterfaceMethod java/util/Collection.toArray:()[Ljava/lang/Object;
       9: areturn

  public <T> T[] toArray(T[]);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #9,  2            // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      10: areturn

  public boolean add(E);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean remove(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #11,  2           // InterfaceMethod java/util/Collection.remove:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean containsAll(java.util.Collection<?>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/Collection.containsAll:(Ljava/util/Collection;)Z
      10: ireturn

  public boolean addAll(java.util.Collection<? extends E>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #13,  2           // InterfaceMethod java/util/Collection.addAll:(Ljava/util/Collection;)Z
      10: ireturn

  public boolean removeAll(java.util.Collection<?>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #14,  2           // InterfaceMethod java/util/Collection.removeAll:(Ljava/util/Collection;)Z
      10: ireturn

  public boolean removeIf(java.util.function.Predicate<? super E>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #15,  2           // InterfaceMethod java/util/Collection.removeIf:(Ljava/util/function/Predicate;)Z
      10: ireturn

  public boolean retainAll(java.util.Collection<?>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: aload_1
       5: invokeinterface #16,  2           // InterfaceMethod java/util/Collection.retainAll:(Ljava/util/Collection;)Z
      10: ireturn

  public void clear();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: invokeinterface #17,  1           // InterfaceMethod java/util/Collection.clear:()V
       9: return

  public java.util.Spliterator<E> spliterator();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: invokeinterface #18,  1           // InterfaceMethod java/util/Collection.spliterator:()Ljava/util/Spliterator;
       9: areturn

  public java.util.stream.Stream<E> stream();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
       9: areturn

  public java.util.stream.Stream<E> parallelStream();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method delegate:()Ljava/util/Collection;
       4: invokeinterface #20,  1           // InterfaceMethod java/util/Collection.parallelStream:()Ljava/util/stream/Stream;
       9: areturn
}
