Compiled from "BoundedConcurrentHashMap.java"
final class org.infinispan.util.concurrent.BoundedConcurrentHashMap$LRU<K, V> extends org.infinispan.commons.equivalence.EquivalentLinkedHashMap<org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>, V> implements org.infinispan.util.concurrent.BoundedConcurrentHashMap$EvictionPolicy<K, V> {
  private static final long serialVersionUID;

  private final org.infinispan.util.concurrent.BoundedConcurrentHashMap$Segment<K, V> segment;

  private final int trimDownSize;

  private final java.util.Set<org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>> evicted;

  public org.infinispan.util.concurrent.BoundedConcurrentHashMap$LRU(org.infinispan.util.concurrent.BoundedConcurrentHashMap$Segment<K, V>, int, float);
    Code:
       0: aload_0
       1: iload_2
       2: fload_3
       3: getstatic     #1                  // Field org/infinispan/commons/equivalence/EquivalentLinkedHashMap$IterationOrder.ACCESS_ORDER:Lorg/infinispan/commons/equivalence/EquivalentLinkedHashMap$IterationOrder;
       6: new           #2                  // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$LRU$1
       9: dup
      10: aload_1
      11: invokespecial #3                  // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LRU$1."<init>":(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment;)V
      14: aload_1
      15: getfield      #4                  // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment.map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
      18: invokestatic  #5                  // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$200:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/commons/equivalence/Equivalence;
      21: invokespecial #6                  // Method org/infinispan/commons/equivalence/EquivalentLinkedHashMap."<init>":(IFLorg/infinispan/commons/equivalence/EquivalentLinkedHashMap$IterationOrder;Lorg/infinispan/commons/equivalence/Equivalence;Lorg/infinispan/commons/equivalence/Equivalence;)V
      24: aload_0
      25: aload_1
      26: putfield      #7                  // Field segment:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment;
      29: aload_0
      30: iload_2
      31: putfield      #8                  // Field trimDownSize:I
      34: aload_0
      35: new           #9                  // class java/util/HashSet
      38: dup
      39: invokespecial #10                 // Method java/util/HashSet."<init>":()V
      42: putfield      #11                 // Field evicted:Ljava/util/Set;
      45: return

  public java.util.Set<org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>> onEntryMiss(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: getfield      #12                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
       6: invokevirtual #13                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: getfield      #11                 // Field evicted:Ljava/util/Set;
      14: invokeinterface #14,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      19: ifne          52
      22: new           #9                  // class java/util/HashSet
      25: dup
      26: invokespecial #10                 // Method java/util/HashSet."<init>":()V
      29: astore_2
      30: aload_2
      31: aload_0
      32: getfield      #11                 // Field evicted:Ljava/util/Set;
      35: invokeinterface #15,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      40: pop
      41: aload_0
      42: getfield      #11                 // Field evicted:Ljava/util/Set;
      45: invokeinterface #16,  1           // InterfaceMethod java/util/Set.clear:()V
      50: aload_2
      51: areturn
      52: invokestatic  #17                 // Method org/infinispan/commons/util/InfinispanCollections.emptySet:()Ljava/util/Set;
      55: areturn

  public void onEntryHit(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: pop
       6: return

  public void onEntryRemove(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #19                 // Method remove:(Ljava/lang/Object;)Ljava/lang/Object;
       5: pop
       6: return

  public void clear();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method org/infinispan/commons/equivalence/EquivalentLinkedHashMap.clear:()V
       4: return

  protected boolean isAboveThreshold();
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method size:()I
       4: aload_0
       5: getfield      #8                  // Field trimDownSize:I
       8: if_icmple     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  protected boolean removeEldestEntry(java.util.Map$Entry<org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>, V>);
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method isAboveThreshold:()Z
       4: istore_2
       5: iload_2
       6: ifeq          48
       9: aload_1
      10: invokeinterface #23,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      15: checkcast     #24                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry
      18: astore_3
      19: aload_0
      20: getfield      #7                  // Field segment:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment;
      23: aload_3
      24: getfield      #25                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      27: aload_3
      28: getfield      #26                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
      31: aconst_null
      32: iconst_1
      33: invokevirtual #27                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment.remove:(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;
      36: pop
      37: aload_0
      38: getfield      #11                 // Field evicted:Ljava/util/Set;
      41: aload_3
      42: invokeinterface #28,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      47: pop
      48: iload_2
      49: ireturn

  public org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V> createNewEntry(K, int, org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>, V);
    Code:
       0: new           #24                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry
       3: dup
       4: aload_1
       5: iload_2
       6: aload_3
       7: aload         4
       9: invokespecial #29                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry."<init>":(Ljava/lang/Object;ILorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;Ljava/lang/Object;)V
      12: areturn
}
