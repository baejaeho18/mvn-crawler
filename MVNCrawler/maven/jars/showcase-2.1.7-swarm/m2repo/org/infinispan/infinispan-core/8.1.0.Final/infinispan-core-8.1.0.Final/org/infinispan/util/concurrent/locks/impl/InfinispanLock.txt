Compiled from "InfinispanLock.java"
public class org.infinispan.util.concurrent.locks.impl.InfinispanLock {
  private static final org.infinispan.util.logging.Log log;

  private static final boolean trace;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<org.infinispan.util.concurrent.locks.impl.InfinispanLock, org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder> OWNER_UPDATER;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder, org.infinispan.util.concurrent.locks.LockState> STATE_UPDATER;

  private final java.util.Queue<org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder> pendingRequest;

  private final java.util.concurrent.ConcurrentMap<java.lang.Object, org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder> lockOwners;

  private final java.lang.Runnable releaseRunnable;

  private org.infinispan.util.TimeService timeService;

  private volatile org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder current;

  public org.infinispan.util.concurrent.locks.impl.InfinispanLock(org.infinispan.util.TimeService);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #8                  // Field timeService:Lorg/infinispan/util/TimeService;
       9: aload_0
      10: new           #10                 // class java/util/concurrent/ConcurrentLinkedQueue
      13: dup
      14: invokespecial #11                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      17: putfield      #12                 // Field pendingRequest:Ljava/util/Queue;
      20: aload_0
      21: new           #13                 // class java/util/concurrent/ConcurrentHashMap
      24: dup
      25: invokespecial #14                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      28: putfield      #15                 // Field lockOwners:Ljava/util/concurrent/ConcurrentMap;
      31: aload_0
      32: aconst_null
      33: putfield      #6                  // Field current:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
      36: aload_0
      37: aconst_null
      38: putfield      #16                 // Field releaseRunnable:Ljava/lang/Runnable;
      41: return

  public org.infinispan.util.concurrent.locks.impl.InfinispanLock(org.infinispan.util.TimeService, java.lang.Runnable);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #8                  // Field timeService:Lorg/infinispan/util/TimeService;
       9: aload_0
      10: new           #10                 // class java/util/concurrent/ConcurrentLinkedQueue
      13: dup
      14: invokespecial #11                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      17: putfield      #12                 // Field pendingRequest:Ljava/util/Queue;
      20: aload_0
      21: new           #13                 // class java/util/concurrent/ConcurrentHashMap
      24: dup
      25: invokespecial #14                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      28: putfield      #15                 // Field lockOwners:Ljava/util/concurrent/ConcurrentMap;
      31: aload_0
      32: aconst_null
      33: putfield      #6                  // Field current:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
      36: aload_0
      37: aload_2
      38: putfield      #16                 // Field releaseRunnable:Ljava/lang/Runnable;
      41: return

  public void setTimeService(org.infinispan.util.TimeService);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_0
       5: aload_1
       6: putfield      #8                  // Field timeService:Lorg/infinispan/util/TimeService;
       9: return

  public org.infinispan.util.concurrent.locks.ExtendedLockPromise acquire(java.lang.Object, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: ldc           #17                 // String Lock Owner should be non-null
       3: invokestatic  #18                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload         4
       9: ldc           #19                 // String Time Unit should be non-null
      11: invokestatic  #18                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: pop
      15: getstatic     #4                  // Field trace:Z
      18: ifeq          38
      21: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      24: ldc           #20                 // String Acquire lock for %s. Timeout=%s (%s)
      26: aload_1
      27: lload_2
      28: invokestatic  #21                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      31: aload         4
      33: invokeinterface #22,  5           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      38: aload_0
      39: getfield      #15                 // Field lockOwners:Ljava/util/concurrent/ConcurrentMap;
      42: aload_1
      43: invokeinterface #23,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      48: checkcast     #24                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder
      51: astore        5
      53: aload         5
      55: ifnull        79
      58: getstatic     #4                  // Field trace:Z
      61: ifeq          76
      64: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      67: ldc           #25                 // String Lock owner already exists: %s
      69: aload         5
      71: invokeinterface #26,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      76: aload         5
      78: areturn
      79: aload_0
      80: aload_1
      81: lload_2
      82: aload         4
      84: invokespecial #27                 // Method createLockInfo:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
      87: astore        5
      89: aload_0
      90: getfield      #15                 // Field lockOwners:Ljava/util/concurrent/ConcurrentMap;
      93: aload_1
      94: aload         5
      96: invokeinterface #28,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     101: checkcast     #24                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder
     104: astore        6
     106: aload         6
     108: ifnull        132
     111: getstatic     #4                  // Field trace:Z
     114: ifeq          129
     117: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
     120: ldc           #25                 // String Lock owner already exists: %s
     122: aload         6
     124: invokeinterface #26,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
     129: aload         6
     131: areturn
     132: getstatic     #4                  // Field trace:Z
     135: ifeq          150
     138: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
     141: ldc           #29                 // String Created a new one: %s
     143: aload         5
     145: invokeinterface #26,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
     150: aload_0
     151: getfield      #12                 // Field pendingRequest:Ljava/util/Queue;
     154: aload         5
     156: invokeinterface #30,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
     161: pop
     162: aload_0
     163: aconst_null
     164: invokespecial #31                 // Method tryAcquire:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)V
     167: aload         5
     169: areturn

  public void release(java.lang.Object);
    Code:
       0: aload_1
       1: ldc           #17                 // String Lock Owner should be non-null
       3: invokestatic  #18                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: getstatic     #4                  // Field trace:Z
      10: ifeq          24
      13: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      16: ldc           #32                 // String Release lock for %s.
      18: aload_1
      19: invokeinterface #26,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      24: aload_0
      25: getfield      #15                 // Field lockOwners:Ljava/util/concurrent/ConcurrentMap;
      28: aload_1
      29: invokeinterface #23,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      34: checkcast     #24                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder
      37: astore_2
      38: aload_2
      39: ifnonnull     60
      42: getstatic     #4                  // Field trace:Z
      45: ifeq          59
      48: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      51: ldc           #33                 // String %s not found!
      53: aload_1
      54: invokeinterface #26,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      59: return
      60: aload_2
      61: invokestatic  #34                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder.access$000:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)Z
      64: istore_3
      65: getstatic     #4                  // Field trace:Z
      68: ifeq          86
      71: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      74: ldc           #35                 // String Release lock for %s? %s
      76: aload_2
      77: iload_3
      78: invokestatic  #36                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      81: invokeinterface #37,  4           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      86: aload_0
      87: getfield      #6                  // Field current:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
      90: astore        4
      92: aload         4
      94: aload_2
      95: if_acmpne     103
      98: aload_0
      99: aload_2
     100: invokespecial #31                 // Method tryAcquire:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)V
     103: return

  public java.lang.Object getLockOwner();
    Code:
       0: aload_0
       1: getfield      #6                  // Field current:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
       4: astore_1
       5: aload_1
       6: ifnonnull     13
       9: aconst_null
      10: goto          17
      13: aload_1
      14: invokestatic  #38                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder.access$100:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)Ljava/lang/Object;
      17: areturn

  public boolean isLocked();
    Code:
       0: aload_0
       1: getfield      #6                  // Field current:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void deadlockCheck(org.infinispan.util.concurrent.locks.DeadlockChecker);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #6                  // Field current:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
       9: astore_2
      10: aload_2
      11: ifnull        57
      14: aload_0
      15: getfield      #12                 // Field pendingRequest:Ljava/util/Queue;
      18: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.iterator:()Ljava/util/Iterator;
      23: astore_3
      24: aload_3
      25: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          57
      33: aload_3
      34: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #24                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder
      42: astore        4
      44: aload         4
      46: aload_1
      47: aload_2
      48: invokestatic  #38                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder.access$100:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)Ljava/lang/Object;
      51: invokestatic  #42                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder.access$200:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;Lorg/infinispan/util/concurrent/locks/DeadlockChecker;Ljava/lang/Object;)V
      54: goto          24
      57: return

  public boolean containsLockOwner(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #15                 // Field lockOwners:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #43,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.containsKey:(Ljava/lang/Object;)Z
      10: ireturn

  private void onCanceled(org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder);
    Code:
       0: getstatic     #4                  // Field trace:Z
       3: ifeq          20
       6: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
       9: ldc           #44                 // String Release lock for %s. It was canceled.
      11: aload_1
      12: invokestatic  #38                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder.access$100:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)Ljava/lang/Object;
      15: invokeinterface #26,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      20: aload_0
      21: getfield      #6                  // Field current:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
      24: astore_2
      25: aload_2
      26: aload_1
      27: if_acmpne     35
      30: aload_0
      31: aload_1
      32: invokespecial #31                 // Method tryAcquire:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)V
      35: return

  private boolean casRelease(org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder);
    Code:
       0: getstatic     #45                 // Field OWNER_UPDATER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aconst_null
       6: invokevirtual #46                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  private boolean remove(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #15                 // Field lockOwners:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #47,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: ifnull        17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  private void triggerReleased();
    Code:
       0: aload_0
       1: getfield      #16                 // Field releaseRunnable:Ljava/lang/Runnable;
       4: ifnull        16
       7: aload_0
       8: getfield      #16                 // Field releaseRunnable:Ljava/lang/Runnable;
      11: invokeinterface #48,  1           // InterfaceMethod java/lang/Runnable.run:()V
      16: return

  private boolean cas(org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder, org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder);
    Code:
       0: getstatic     #45                 // Field OWNER_UPDATER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #46                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  private void tryAcquire(org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder);
    Code:
       0: aload_1
       1: astore_2
       2: aload_0
       3: getfield      #12                 // Field pendingRequest:Ljava/util/Queue;
       6: invokeinterface #49,  1           // InterfaceMethod java/util/Queue.peek:()Ljava/lang/Object;
      11: checkcast     #24                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder
      14: astore_3
      15: getstatic     #4                  // Field trace:Z
      18: ifeq          36
      21: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      24: ldc           #50                 // String Try acquire. Next in queue=%s. Current=%s
      26: aload_3
      27: aload_0
      28: getfield      #6                  // Field current:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
      31: invokeinterface #37,  4           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      36: aload_3
      37: ifnonnull     45
      40: aload_2
      41: ifnonnull     45
      44: return
      45: aload_3
      46: ifnonnull     56
      49: aload_0
      50: aload_2
      51: invokespecial #51                 // Method casRelease:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)Z
      54: pop
      55: return
      56: aload_0
      57: aload_2
      58: aload_3
      59: invokespecial #52                 // Method cas:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)Z
      62: ifeq          123
      65: aload_0
      66: getfield      #12                 // Field pendingRequest:Ljava/util/Queue;
      69: aload_3
      70: invokeinterface #53,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
      75: pop
      76: aload_3
      77: invokestatic  #54                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder.access$300:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)Z
      80: ifeq          101
      83: getstatic     #4                  // Field trace:Z
      86: ifeq          100
      89: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      92: ldc           #55                 // String %s successfully acquired the lock.
      94: aload_3
      95: invokeinterface #26,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
     100: return
     101: getstatic     #4                  // Field trace:Z
     104: ifeq          118
     107: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
     110: ldc           #56                 // String %s failed to acquire (invalid state). Retrying.
     112: aload_3
     113: invokeinterface #26,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
     118: aload_3
     119: astore_2
     120: goto          144
     123: getstatic     #4                  // Field trace:Z
     126: ifeq          143
     129: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
     132: ldc           #57                 // String Unable to acquire. Lock is held.
     134: iconst_0
     135: anewarray     #58                 // class java/lang/Object
     138: invokeinterface #59,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;[Ljava/lang/Object;)V
     143: return
     144: goto          2

  private org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder createLockInfo(java.lang.Object, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #24                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder
       3: dup
       4: aload_0
       5: aload_1
       6: aload_0
       7: getfield      #8                  // Field timeService:Lorg/infinispan/util/TimeService;
      10: lload_2
      11: aload         4
      13: invokeinterface #60,  4           // InterfaceMethod org/infinispan/util/TimeService.expectedEndTime:(JLjava/util/concurrent/TimeUnit;)J
      18: aconst_null
      19: invokespecial #61                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder."<init>":(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;Ljava/lang/Object;JLorg/infinispan/util/concurrent/locks/impl/InfinispanLock$1;)V
      22: areturn

  static org.infinispan.util.TimeService access$500(org.infinispan.util.concurrent.locks.impl.InfinispanLock);
    Code:
       0: aload_0
       1: getfield      #8                  // Field timeService:Lorg/infinispan/util/TimeService;
       4: areturn

  static void access$600(org.infinispan.util.concurrent.locks.impl.InfinispanLock, org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method onCanceled:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)V
       5: return

  static org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder access$700(org.infinispan.util.concurrent.locks.impl.InfinispanLock);
    Code:
       0: aload_0
       1: getfield      #6                  // Field current:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
       4: areturn

  static java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$800();
    Code:
       0: getstatic     #5                  // Field STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: areturn

  static boolean access$900();
    Code:
       0: getstatic     #4                  // Field trace:Z
       3: ireturn

  static org.infinispan.util.logging.Log access$1000();
    Code:
       0: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
       3: areturn

  static boolean access$1100(org.infinispan.util.concurrent.locks.impl.InfinispanLock, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method remove:(Ljava/lang/Object;)Z
       5: ireturn

  static void access$1200(org.infinispan.util.concurrent.locks.impl.InfinispanLock);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method triggerReleased:()V
       4: return

  static {};
    Code:
       0: ldc           #62                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock
       2: invokestatic  #63                 // Method org/infinispan/util/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/infinispan/util/logging/Log;
       5: putstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
       8: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      11: invokeinterface #64,  1           // InterfaceMethod org/infinispan/util/logging/Log.isTraceEnabled:()Z
      16: putstatic     #4                  // Field trace:Z
      19: ldc           #62                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock
      21: ldc           #24                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder
      23: ldc           #65                 // String current
      25: invokestatic  #66                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      28: putstatic     #45                 // Field OWNER_UPDATER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: ldc           #24                 // class org/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder
      33: ldc           #67                 // class org/infinispan/util/concurrent/locks/LockState
      35: ldc           #68                 // String lockState
      37: invokestatic  #66                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      40: putstatic     #5                  // Field STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      43: return
}
