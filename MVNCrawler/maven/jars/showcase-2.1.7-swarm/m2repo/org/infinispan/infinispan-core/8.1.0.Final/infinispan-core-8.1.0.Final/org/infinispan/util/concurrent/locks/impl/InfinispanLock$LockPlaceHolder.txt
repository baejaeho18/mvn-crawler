Compiled from "InfinispanLock.java"
class org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder implements org.infinispan.util.concurrent.locks.ExtendedLockPromise {
  private final java.lang.Object owner;

  private final long timeout;

  private final java.util.concurrent.CompletableFuture<java.lang.Void> notifier;

  volatile org.infinispan.util.concurrent.locks.LockState lockState;

  final org.infinispan.util.concurrent.locks.impl.InfinispanLock this$0;

  private org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder(org.infinispan.util.concurrent.locks.impl.InfinispanLock, java.lang.Object, long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field this$0:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;
       5: aload_0
       6: invokespecial #7                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field owner:Ljava/lang/Object;
      14: aload_0
      15: lload_3
      16: putfield      #8                  // Field timeout:J
      19: aload_0
      20: getstatic     #9                  // Field org/infinispan/util/concurrent/locks/LockState.WAITING:Lorg/infinispan/util/concurrent/locks/LockState;
      23: putfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
      26: aload_0
      27: new           #11                 // class java/util/concurrent/CompletableFuture
      30: dup
      31: invokespecial #12                 // Method java/util/concurrent/CompletableFuture."<init>":()V
      34: putfield      #13                 // Field notifier:Ljava/util/concurrent/CompletableFuture;
      37: return

  public boolean isAvailable();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method checkTimeout:()V
       4: aload_0
       5: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
       8: getstatic     #9                  // Field org/infinispan/util/concurrent/locks/LockState.WAITING:Lorg/infinispan/util/concurrent/locks/LockState;
      11: if_acmpeq     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public void lock() throws java.lang.InterruptedException, org.infinispan.util.concurrent.TimeoutException;
    Code:
       0: getstatic     #15                 // Field org/infinispan/util/concurrent/locks/impl/InfinispanLock$1.$SwitchMap$org$infinispan$util$concurrent$locks$LockState:[I
       3: aload_0
       4: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
       7: invokevirtual #16                 // Method org/infinispan/util/concurrent/locks/LockState.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 5
                     1: 44
                     2: 81
                     3: 82
                     4: 92
                     5: 106
               default: 120
          }
      44: aload_0
      45: invokespecial #14                 // Method checkTimeout:()V
      48: aload_0
      49: getfield      #13                 // Field notifier:Ljava/util/concurrent/CompletableFuture;
      52: aload_0
      53: getfield      #6                  // Field this$0:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;
      56: invokestatic  #17                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$500:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;)Lorg/infinispan/util/TimeService;
      59: aload_0
      60: getfield      #8                  // Field timeout:J
      63: getstatic     #18                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      66: invokeinterface #19,  4           // InterfaceMethod org/infinispan/util/TimeService.remainingTime:(JLjava/util/concurrent/TimeUnit;)J
      71: getstatic     #18                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      74: invokestatic  #20                 // Method org/infinispan/util/concurrent/CompletableFutures.await:(Ljava/util/concurrent/CompletableFuture;JLjava/util/concurrent/TimeUnit;)Z
      77: pop
      78: goto          0
      81: return
      82: new           #21                 // class java/lang/IllegalStateException
      85: dup
      86: ldc           #22                 // String Lock already released!
      88: invokespecial #23                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      91: athrow
      92: aload_0
      93: invokespecial #24                 // Method cleanup:()V
      96: new           #25                 // class org/infinispan/util/concurrent/TimeoutException
      99: dup
     100: ldc           #26                 // String Timeout waiting for lock.
     102: invokespecial #27                 // Method org/infinispan/util/concurrent/TimeoutException."<init>":(Ljava/lang/String;)V
     105: athrow
     106: aload_0
     107: invokespecial #24                 // Method cleanup:()V
     110: new           #28                 // class org/infinispan/util/concurrent/locks/DeadlockDetectedException
     113: dup
     114: ldc           #29                 // String DeadLock detected
     116: invokespecial #30                 // Method org/infinispan/util/concurrent/locks/DeadlockDetectedException."<init>":(Ljava/lang/String;)V
     119: athrow
     120: new           #21                 // class java/lang/IllegalStateException
     123: dup
     124: new           #31                 // class java/lang/StringBuilder
     127: dup
     128: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
     131: ldc           #33                 // String Unknown lock state:
     133: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: aload_0
     137: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
     140: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     143: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     146: invokespecial #23                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     149: athrow

  public void addListener(org.infinispan.util.concurrent.locks.LockListener);
    Code:
       0: aload_0
       1: getfield      #13                 // Field notifier:Ljava/util/concurrent/CompletableFuture;
       4: aload_0
       5: aload_1
       6: invokedynamic #37,  0             // InvokeDynamic #0:run:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;Lorg/infinispan/util/concurrent/locks/LockListener;)Ljava/lang/Runnable;
      11: invokevirtual #38                 // Method java/util/concurrent/CompletableFuture.thenRun:(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;
      14: pop
      15: return

  public void cancel(org.infinispan.util.concurrent.locks.LockState);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #39                 // Method checkValidCancelState:(Lorg/infinispan/util/concurrent/locks/LockState;)V
       5: aload_0
       6: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
       9: astore_2
      10: getstatic     #15                 // Field org/infinispan/util/concurrent/locks/impl/InfinispanLock$1.$SwitchMap$org$infinispan$util$concurrent$locks$LockState:[I
      13: aload_2
      14: invokevirtual #16                 // Method org/infinispan/util/concurrent/locks/LockState.ordinal:()I
      17: iaload
      18: tableswitch   { // 1 to 5
                     1: 52
                     2: 70
                     3: 70
                     4: 70
                     5: 70
               default: 71
          }
      52: aload_0
      53: getstatic     #9                  // Field org/infinispan/util/concurrent/locks/LockState.WAITING:Lorg/infinispan/util/concurrent/locks/LockState;
      56: aload_1
      57: invokespecial #40                 // Method casState:(Lorg/infinispan/util/concurrent/locks/LockState;Lorg/infinispan/util/concurrent/locks/LockState;)Z
      60: ifeq          83
      63: aload_0
      64: invokespecial #41                 // Method notifyListeners:()V
      67: goto          86
      70: return
      71: aload_0
      72: aload_2
      73: aload_1
      74: invokespecial #40                 // Method casState:(Lorg/infinispan/util/concurrent/locks/LockState;Lorg/infinispan/util/concurrent/locks/LockState;)Z
      77: ifeq          83
      80: goto          86
      83: goto          5
      86: aload_0
      87: getfield      #6                  // Field this$0:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;
      90: aload_0
      91: invokestatic  #42                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$600:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)V
      94: return

  public java.lang.Object getRequestor();
    Code:
       0: aload_0
       1: getfield      #4                  // Field owner:Ljava/lang/Object;
       4: areturn

  public java.lang.Object getOwner();
    Code:
       0: aload_0
       1: getfield      #6                  // Field this$0:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;
       4: invokestatic  #43                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$700:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;)Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;
       7: astore_1
       8: aload_1
       9: ifnull        19
      12: aload_1
      13: getfield      #4                  // Field owner:Ljava/lang/Object;
      16: goto          20
      19: aconst_null
      20: areturn

  public java.lang.String toString();
    Code:
       0: new           #31                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #44                 // String LockPlaceHolder{lockState=
       9: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
      16: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #45                 // String , owner=
      21: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #4                  // Field owner:Ljava/lang/Object;
      28: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      31: bipush        125
      33: invokevirtual #46                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      36: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: areturn

  private void invoke(org.infinispan.util.concurrent.locks.LockListener);
    Code:
       0: aload_0
       1: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
       4: astore_2
       5: getstatic     #15                 // Field org/infinispan/util/concurrent/locks/impl/InfinispanLock$1.$SwitchMap$org$infinispan$util$concurrent$locks$LockState:[I
       8: aload_2
       9: invokevirtual #16                 // Method org/infinispan/util/concurrent/locks/LockState.ordinal:()I
      12: iaload
      13: tableswitch   { // 1 to 3
                     1: 40
                     2: 50
                     3: 50
               default: 62
          }
      40: new           #21                 // class java/lang/IllegalStateException
      43: dup
      44: ldc           #47                 // String WAITING is not a valid state to invoke the listener
      46: invokespecial #23                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: aload_1
      51: getstatic     #48                 // Field org/infinispan/util/concurrent/locks/LockState.ACQUIRED:Lorg/infinispan/util/concurrent/locks/LockState;
      54: invokeinterface #49,  2           // InterfaceMethod org/infinispan/util/concurrent/locks/LockListener.onEvent:(Lorg/infinispan/util/concurrent/locks/LockState;)V
      59: goto          69
      62: aload_1
      63: aload_2
      64: invokeinterface #49,  2           // InterfaceMethod org/infinispan/util/concurrent/locks/LockListener.onEvent:(Lorg/infinispan/util/concurrent/locks/LockState;)V
      69: return

  private void checkValidCancelState(org.infinispan.util.concurrent.locks.LockState);
    Code:
       0: getstatic     #15                 // Field org/infinispan/util/concurrent/locks/impl/InfinispanLock$1.$SwitchMap$org$infinispan$util$concurrent$locks$LockState:[I
       3: aload_1
       4: invokevirtual #16                 // Method org/infinispan/util/concurrent/locks/LockState.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 3
                     1: 36
                     2: 36
                     3: 36
               default: 68
          }
      36: new           #50                 // class java/lang/IllegalArgumentException
      39: dup
      40: new           #31                 // class java/lang/StringBuilder
      43: dup
      44: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
      47: ldc           #51                 // String LockState
      49: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload_1
      53: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      56: ldc           #52                 // String  is not valid to cancel.
      58: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: invokespecial #53                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      67: athrow
      68: return

  private void checkDeadlock(org.infinispan.util.concurrent.locks.DeadlockChecker, java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method checkTimeout:()V
       4: aload_0
       5: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
       8: getstatic     #9                  // Field org/infinispan/util/concurrent/locks/LockState.WAITING:Lorg/infinispan/util/concurrent/locks/LockState;
      11: if_acmpne     64
      14: aload_0
      15: getfield      #4                  // Field owner:Ljava/lang/Object;
      18: aload_2
      19: invokevirtual #54                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      22: ifne          64
      25: aload_1
      26: aload_0
      27: getfield      #4                  // Field owner:Ljava/lang/Object;
      30: aload_2
      31: invokeinterface #55,  3           // InterfaceMethod org/infinispan/util/concurrent/locks/DeadlockChecker.deadlockDetected:(Ljava/lang/Object;Ljava/lang/Object;)Z
      36: ifeq          64
      39: aload_0
      40: getstatic     #9                  // Field org/infinispan/util/concurrent/locks/LockState.WAITING:Lorg/infinispan/util/concurrent/locks/LockState;
      43: getstatic     #56                 // Field org/infinispan/util/concurrent/locks/LockState.DEADLOCKED:Lorg/infinispan/util/concurrent/locks/LockState;
      46: invokespecial #40                 // Method casState:(Lorg/infinispan/util/concurrent/locks/LockState;Lorg/infinispan/util/concurrent/locks/LockState;)Z
      49: ifeq          64
      52: aload_0
      53: getfield      #6                  // Field this$0:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;
      56: aload_0
      57: invokestatic  #42                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$600:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)V
      60: aload_0
      61: invokespecial #41                 // Method notifyListeners:()V
      64: return

  private boolean setAcquire();
    Code:
       0: aload_0
       1: getstatic     #9                  // Field org/infinispan/util/concurrent/locks/LockState.WAITING:Lorg/infinispan/util/concurrent/locks/LockState;
       4: getstatic     #48                 // Field org/infinispan/util/concurrent/locks/LockState.ACQUIRED:Lorg/infinispan/util/concurrent/locks/LockState;
       7: invokespecial #40                 // Method casState:(Lorg/infinispan/util/concurrent/locks/LockState;Lorg/infinispan/util/concurrent/locks/LockState;)Z
      10: ifeq          17
      13: aload_0
      14: invokespecial #41                 // Method notifyListeners:()V
      17: aload_0
      18: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
      21: getstatic     #48                 // Field org/infinispan/util/concurrent/locks/LockState.ACQUIRED:Lorg/infinispan/util/concurrent/locks/LockState;
      24: if_acmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  private boolean setReleased();
    Code:
       0: aload_0
       1: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
       4: astore_1
       5: getstatic     #15                 // Field org/infinispan/util/concurrent/locks/impl/InfinispanLock$1.$SwitchMap$org$infinispan$util$concurrent$locks$LockState:[I
       8: aload_1
       9: invokevirtual #16                 // Method org/infinispan/util/concurrent/locks/LockState.ordinal:()I
      12: iaload
      13: tableswitch   { // 1 to 5
                     1: 48
                     2: 48
                     3: 86
                     4: 69
                     5: 69
               default: 86
          }
      48: aload_0
      49: aload_1
      50: getstatic     #57                 // Field org/infinispan/util/concurrent/locks/LockState.RELEASED:Lorg/infinispan/util/concurrent/locks/LockState;
      53: invokespecial #40                 // Method casState:(Lorg/infinispan/util/concurrent/locks/LockState;Lorg/infinispan/util/concurrent/locks/LockState;)Z
      56: ifeq          88
      59: aload_0
      60: invokespecial #24                 // Method cleanup:()V
      63: aload_0
      64: invokespecial #41                 // Method notifyListeners:()V
      67: iconst_1
      68: ireturn
      69: aload_0
      70: aload_1
      71: getstatic     #57                 // Field org/infinispan/util/concurrent/locks/LockState.RELEASED:Lorg/infinispan/util/concurrent/locks/LockState;
      74: invokespecial #40                 // Method casState:(Lorg/infinispan/util/concurrent/locks/LockState;Lorg/infinispan/util/concurrent/locks/LockState;)Z
      77: ifeq          88
      80: aload_0
      81: invokespecial #24                 // Method cleanup:()V
      84: iconst_1
      85: ireturn
      86: iconst_0
      87: ireturn
      88: goto          0

  private boolean casState(org.infinispan.util.concurrent.locks.LockState, org.infinispan.util.concurrent.locks.LockState);
    Code:
       0: invokestatic  #58                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$800:()Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: istore_3
      10: iload_3
      11: ifeq          33
      14: invokestatic  #60                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$900:()Z
      17: ifeq          33
      20: invokestatic  #61                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$1000:()Lorg/infinispan/util/logging/Log;
      23: ldc           #62                 // String State changed for %s. %s => %s
      25: aload_0
      26: aload_1
      27: aload_2
      28: invokeinterface #63,  5           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      33: iload_3
      34: ireturn

  private void cleanup();
    Code:
       0: aload_0
       1: getfield      #6                  // Field this$0:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;
       4: aload_0
       5: getfield      #4                  // Field owner:Ljava/lang/Object;
       8: invokestatic  #64                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$1100:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;Ljava/lang/Object;)Z
      11: ifeq          21
      14: aload_0
      15: getfield      #6                  // Field this$0:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;
      18: invokestatic  #65                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$1200:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;)V
      21: return

  private void checkTimeout();
    Code:
       0: aload_0
       1: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
       4: getstatic     #9                  // Field org/infinispan/util/concurrent/locks/LockState.WAITING:Lorg/infinispan/util/concurrent/locks/LockState;
       7: if_acmpne     54
      10: aload_0
      11: getfield      #6                  // Field this$0:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;
      14: invokestatic  #17                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$500:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;)Lorg/infinispan/util/TimeService;
      17: aload_0
      18: getfield      #8                  // Field timeout:J
      21: invokeinterface #66,  3           // InterfaceMethod org/infinispan/util/TimeService.isTimeExpired:(J)Z
      26: ifeq          54
      29: aload_0
      30: getstatic     #9                  // Field org/infinispan/util/concurrent/locks/LockState.WAITING:Lorg/infinispan/util/concurrent/locks/LockState;
      33: getstatic     #67                 // Field org/infinispan/util/concurrent/locks/LockState.TIMED_OUT:Lorg/infinispan/util/concurrent/locks/LockState;
      36: invokespecial #40                 // Method casState:(Lorg/infinispan/util/concurrent/locks/LockState;Lorg/infinispan/util/concurrent/locks/LockState;)Z
      39: ifeq          54
      42: aload_0
      43: getfield      #6                  // Field this$0:Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;
      46: aload_0
      47: invokestatic  #42                 // Method org/infinispan/util/concurrent/locks/impl/InfinispanLock.access$600:(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock$LockPlaceHolder;)V
      50: aload_0
      51: invokespecial #41                 // Method notifyListeners:()V
      54: return

  private void notifyListeners();
    Code:
       0: aload_0
       1: getfield      #10                 // Field lockState:Lorg/infinispan/util/concurrent/locks/LockState;
       4: getstatic     #9                  // Field org/infinispan/util/concurrent/locks/LockState.WAITING:Lorg/infinispan/util/concurrent/locks/LockState;
       7: if_acmpeq     19
      10: aload_0
      11: getfield      #13                 // Field notifier:Ljava/util/concurrent/CompletableFuture;
      14: aconst_null
      15: invokevirtual #68                 // Method java/util/concurrent/CompletableFuture.complete:(Ljava/lang/Object;)Z
      18: pop
      19: return

  private void lambda$addListener$21(org.infinispan.util.concurrent.locks.LockListener);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #69                 // Method invoke:(Lorg/infinispan/util/concurrent/locks/LockListener;)V
       5: return

  static boolean access$000(org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method setReleased:()Z
       4: ireturn

  static java.lang.Object access$100(org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder);
    Code:
       0: aload_0
       1: getfield      #4                  // Field owner:Ljava/lang/Object;
       4: areturn

  static void access$200(org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder, org.infinispan.util.concurrent.locks.DeadlockChecker, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #3                  // Method checkDeadlock:(Lorg/infinispan/util/concurrent/locks/DeadlockChecker;Ljava/lang/Object;)V
       6: return

  static boolean access$300(org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method setAcquire:()Z
       4: ireturn

  org.infinispan.util.concurrent.locks.impl.InfinispanLock$LockPlaceHolder(org.infinispan.util.concurrent.locks.impl.InfinispanLock, java.lang.Object, long, org.infinispan.util.concurrent.locks.impl.InfinispanLock$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lload_3
       4: invokespecial #1                  // Method "<init>":(Lorg/infinispan/util/concurrent/locks/impl/InfinispanLock;Ljava/lang/Object;J)V
       7: return
}
