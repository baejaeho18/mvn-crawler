Compiled from "BoundedConcurrentHashMap.java"
final class org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS<K, V> implements org.infinispan.util.concurrent.BoundedConcurrentHashMap$EvictionPolicy<K, V> {
  private static final float L_LIRS;

  private final org.infinispan.util.concurrent.BoundedConcurrentHashMap$Segment<K, V> segment;

  private int size;

  private final org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRSHashEntry<K, V> header;

  private final int maximumHotSize;

  private final int maximumSize;

  private int hotSize;

  public org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS(org.infinispan.util.concurrent.BoundedConcurrentHashMap$Segment<K, V>, int);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #11                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry
       8: dup
       9: aconst_null
      10: aconst_null
      11: iconst_0
      12: aconst_null
      13: aconst_null
      14: invokespecial #12                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry."<init>":(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRS;Ljava/lang/Object;ILorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;Ljava/lang/Object;)V
      17: putfield      #2                  // Field header:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
      20: aload_0
      21: iconst_0
      22: putfield      #7                  // Field hotSize:I
      25: aload_0
      26: aload_1
      27: putfield      #13                 // Field segment:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment;
      30: aload_0
      31: iload_2
      32: putfield      #4                  // Field maximumSize:I
      35: aload_0
      36: iload_2
      37: invokestatic  #14                 // Method calculateLIRSize:(I)I
      40: putfield      #6                  // Field maximumHotSize:I
      43: return

  private static int calculateLIRSize(int);
    Code:
       0: ldc           #16                 // float 0.95f
       2: iload_0
       3: i2f
       4: fmul
       5: f2i
       6: istore_1
       7: iload_1
       8: iload_0
       9: if_icmpne     18
      12: iload_0
      13: iconst_1
      14: isub
      15: goto          19
      18: iload_1
      19: ireturn

  private void pruneStack();
    Code:
       0: aload_0
       1: invokespecial #9                  // Method stackBottom:()Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       4: astore_1
       5: aload_1
       6: ifnull        31
       9: aload_1
      10: getfield      #17                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.state:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$Recency;
      13: getstatic     #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$Recency.LIR_RESIDENT:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$Recency;
      16: if_acmpeq     31
      19: aload_1
      20: invokestatic  #19                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.access$1200:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;)V
      23: aload_0
      24: invokespecial #9                  // Method stackBottom:()Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
      27: astore_1
      28: goto          5
      31: return

  public java.util.Set<org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>> onEntryMiss(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry
       4: astore_2
       5: aload_2
       6: invokestatic  #20                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.access$1300:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;)Ljava/util/Set;
       9: astore_3
      10: aload_0
      11: aload_3
      12: invokespecial #21                 // Method removeFromSegment:(Ljava/util/Set;)V
      15: aload_3
      16: areturn

  private void removeFromSegment(java.util.Set<org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>>);
    Code:
       0: aload_1
       1: invokeinterface #22,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          54
      16: aload_2
      17: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #25                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry
      25: astore_3
      26: aload_3
      27: checkcast     #11                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry
      30: invokestatic  #26                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.access$1400:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;)V
      33: aload_0
      34: getfield      #13                 // Field segment:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment;
      37: aload_3
      38: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      41: aload_3
      42: getfield      #28                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
      45: aconst_null
      46: iconst_1
      47: invokevirtual #29                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment.remove:(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;
      50: pop
      51: goto          7
      54: return

  public void onEntryHit(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry
       4: astore_2
       5: aload_2
       6: invokevirtual #30                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.isResident:()Z
       9: ifeq          16
      12: aload_2
      13: invokevirtual #31                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.hit:()V
      16: return

  public void onEntryRemove(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry
       4: invokestatic  #32                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.access$1500:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;)Ljava/lang/Object;
       7: pop
       8: return

  public void clear();
    Code:
       0: return

  private org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRSHashEntry<K, V> stackBottom();
    Code:
       0: aload_0
       1: getfield      #2                  // Field header:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       4: invokestatic  #33                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.access$1600:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field header:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
      13: if_acmpne     20
      16: aconst_null
      17: goto          21
      20: aload_1
      21: areturn

  private org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRSHashEntry<K, V> queueFront();
    Code:
       0: aload_0
       1: getfield      #2                  // Field header:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       4: invokestatic  #34                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.access$1700:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field header:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
      13: if_acmpne     20
      16: aconst_null
      17: goto          21
      20: aload_1
      21: areturn

  private org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRSHashEntry<K, V> queueEnd();
    Code:
       0: aload_0
       1: getfield      #2                  // Field header:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       4: invokestatic  #35                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry.access$1800:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field header:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
      13: if_acmpne     20
      16: aconst_null
      17: goto          21
      20: aload_1
      21: areturn

  public org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V> createNewEntry(K, int, org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>, V);
    Code:
       0: new           #11                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: aload_3
       8: aload         4
      10: invokespecial #12                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry."<init>":(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRS;Ljava/lang/Object;ILorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;Ljava/lang/Object;)V
      13: areturn

  static org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRSHashEntry access$300(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method stackBottom:()Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       4: areturn

  static void access$400(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method pruneStack:()V
       4: return

  static int access$500(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #7                  // Field hotSize:I
       4: ireturn

  static int access$600(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #6                  // Field maximumHotSize:I
       4: ireturn

  static int access$708(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field size:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #5                  // Field size:I
      11: ireturn

  static int access$700(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #5                  // Field size:I
       4: ireturn

  static int access$800(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #4                  // Field maximumSize:I
       4: ireturn

  static org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRSHashEntry access$900(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method queueFront:()Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       4: areturn

  static int access$508(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field hotSize:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #7                  // Field hotSize:I
      11: ireturn

  static int access$510(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field hotSize:I
       5: dup_x1
       6: iconst_1
       7: isub
       8: putfield      #7                  // Field hotSize:I
      11: ireturn

  static int access$710(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field size:I
       5: dup_x1
       6: iconst_1
       7: isub
       8: putfield      #5                  // Field size:I
      11: ireturn

  static org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRSHashEntry access$1000(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #2                  // Field header:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       4: areturn

  static org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRSHashEntry access$1100(org.infinispan.util.concurrent.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method queueEnd:()Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$LIRSHashEntry;
       4: areturn
}
