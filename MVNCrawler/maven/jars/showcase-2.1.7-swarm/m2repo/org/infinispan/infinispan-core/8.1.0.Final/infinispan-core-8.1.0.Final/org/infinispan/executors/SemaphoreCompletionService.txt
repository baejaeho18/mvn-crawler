Compiled from "SemaphoreCompletionService.java"
public class org.infinispan.executors.SemaphoreCompletionService<T> implements java.util.concurrent.CompletionService<T> {
  private static final org.infinispan.util.logging.Log log;

  private static final boolean trace;

  private final java.util.concurrent.Executor executor;

  private final org.infinispan.executors.SemaphoreCompletionService$CustomSemaphore semaphore;

  private final java.util.concurrent.BlockingQueue<org.infinispan.executors.SemaphoreCompletionService<T>.QueueingTask> queue;

  private final java.util.concurrent.BlockingQueue<org.infinispan.executors.SemaphoreCompletionService<T>.QueueingTask> completionQueue;

  public org.infinispan.executors.SemaphoreCompletionService(java.util.concurrent.Executor, int);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #8                  // class java/util/concurrent/LinkedBlockingQueue
       8: dup
       9: invokespecial #9                  // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
      12: putfield      #5                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      15: aload_0
      16: new           #8                  // class java/util/concurrent/LinkedBlockingQueue
      19: dup
      20: invokespecial #9                  // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
      23: putfield      #1                  // Field completionQueue:Ljava/util/concurrent/BlockingQueue;
      26: aload_0
      27: aload_1
      28: putfield      #10                 // Field executor:Ljava/util/concurrent/Executor;
      31: aload_0
      32: new           #11                 // class org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore
      35: dup
      36: iload_2
      37: invokespecial #12                 // Method org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore."<init>":(I)V
      40: putfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
      43: return

  public java.util.List<? extends java.util.concurrent.Future<T>> drainCompletionQueue();
    Code:
       0: new           #13                 // class java/util/ArrayList
       3: dup
       4: invokespecial #14                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #1                  // Field completionQueue:Ljava/util/concurrent/BlockingQueue;
      12: aload_1
      13: invokeinterface #15,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.drainTo:(Ljava/util/Collection;)I
      18: pop
      19: aload_1
      20: areturn

  public void cancelQueuedTasks();
    Code:
       0: new           #13                 // class java/util/ArrayList
       3: dup
       4: invokespecial #14                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      12: aload_1
      13: invokeinterface #15,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.drainTo:(Ljava/util/Collection;)I
      18: pop
      19: aload_1
      20: invokevirtual #16                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      23: astore_2
      24: aload_2
      25: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          52
      33: aload_2
      34: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #19                 // class org/infinispan/executors/SemaphoreCompletionService$QueueingTask
      42: astore_3
      43: aload_3
      44: iconst_0
      45: invokevirtual #20                 // Method org/infinispan/executors/SemaphoreCompletionService$QueueingTask.cancel:(Z)Z
      48: pop
      49: goto          24
      52: return

  public void continueTaskInBackground();
    Code:
       0: getstatic     #4                  // Field trace:Z
       3: ifeq          23
       6: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
       9: ldc           #21                 // String Moving task to background, available permits %d
      11: aload_0
      12: getfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
      15: invokevirtual #22                 // Method org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore.availablePermits:()I
      18: invokeinterface #23,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;I)V
      23: aload_0
      24: getfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
      27: invokevirtual #24                 // Method org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore.removePermit:()V
      30: return

  public java.util.concurrent.Future<T> backgroundTaskFinished(java.util.concurrent.Callable<T>);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_1
       3: ifnull        49
       6: getstatic     #4                  // Field trace:Z
       9: ifeq          26
      12: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      15: ldc           #25                 // String Background task finished, executing cleanup task
      17: iconst_0
      18: anewarray     #26                 // class java/lang/Object
      21: invokeinterface #27,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;[Ljava/lang/Object;)V
      26: new           #19                 // class org/infinispan/executors/SemaphoreCompletionService$QueueingTask
      29: dup
      30: aload_0
      31: aload_1
      32: invokespecial #28                 // Method org/infinispan/executors/SemaphoreCompletionService$QueueingTask."<init>":(Lorg/infinispan/executors/SemaphoreCompletionService;Ljava/util/concurrent/Callable;)V
      35: astore_2
      36: aload_0
      37: getfield      #10                 // Field executor:Ljava/util/concurrent/Executor;
      40: aload_2
      41: invokeinterface #29,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      46: goto          83
      49: aload_0
      50: getfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
      53: invokevirtual #30                 // Method org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore.release:()V
      56: getstatic     #4                  // Field trace:Z
      59: ifeq          79
      62: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      65: ldc           #31                 // String Background task finished, available permits %d
      67: aload_0
      68: getfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
      71: invokevirtual #22                 // Method org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore.availablePermits:()I
      74: invokeinterface #23,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;I)V
      79: aload_0
      80: invokespecial #2                  // Method executeFront:()V
      83: aload_2
      84: areturn

  public java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>);
    Code:
       0: new           #19                 // class org/infinispan/executors/SemaphoreCompletionService$QueueingTask
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #28                 // Method org/infinispan/executors/SemaphoreCompletionService$QueueingTask."<init>":(Lorg/infinispan/executors/SemaphoreCompletionService;Ljava/util/concurrent/Callable;)V
       9: astore_2
      10: aload_0
      11: getfield      #5                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      14: aload_2
      15: invokeinterface #32,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.add:(Ljava/lang/Object;)Z
      20: pop
      21: getstatic     #4                  // Field trace:Z
      24: ifeq          53
      27: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      30: ldc           #33                 // String New task submitted, tasks in queue %d, available permits %d
      32: aload_0
      33: getfield      #5                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      36: invokeinterface #34,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      41: aload_0
      42: getfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
      45: invokevirtual #22                 // Method org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore.availablePermits:()I
      48: invokeinterface #35,  4           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;II)V
      53: aload_0
      54: invokespecial #2                  // Method executeFront:()V
      57: aload_2
      58: areturn

  public java.util.concurrent.Future<T> submit(java.lang.Runnable, T);
    Code:
       0: new           #19                 // class org/infinispan/executors/SemaphoreCompletionService$QueueingTask
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #36                 // Method org/infinispan/executors/SemaphoreCompletionService$QueueingTask."<init>":(Lorg/infinispan/executors/SemaphoreCompletionService;Ljava/lang/Runnable;Ljava/lang/Object;)V
      10: astore_3
      11: aload_0
      12: getfield      #5                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      15: aload_3
      16: invokeinterface #32,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.add:(Ljava/lang/Object;)Z
      21: pop
      22: getstatic     #4                  // Field trace:Z
      25: ifeq          54
      28: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      31: ldc           #33                 // String New task submitted, tasks in queue %d, available permits %d
      33: aload_0
      34: getfield      #5                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      37: invokeinterface #34,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      42: aload_0
      43: getfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
      46: invokevirtual #22                 // Method org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore.availablePermits:()I
      49: invokeinterface #35,  4           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;II)V
      54: aload_0
      55: invokespecial #2                  // Method executeFront:()V
      58: aload_3
      59: areturn

  private void executeFront();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #37,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.isEmpty:()Z
       9: ifne          60
      12: aload_0
      13: getfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
      16: invokevirtual #38                 // Method org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore.tryAcquire:()Z
      19: ifeq          60
      22: aload_0
      23: getfield      #5                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      26: invokeinterface #39,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:()Ljava/lang/Object;
      31: checkcast     #19                 // class org/infinispan/executors/SemaphoreCompletionService$QueueingTask
      34: astore_1
      35: aload_1
      36: ifnull        50
      39: aload_0
      40: getfield      #10                 // Field executor:Ljava/util/concurrent/Executor;
      43: aload_1
      44: invokeinterface #29,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      49: return
      50: aload_0
      51: getfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
      54: invokevirtual #30                 // Method org/infinispan/executors/SemaphoreCompletionService$CustomSemaphore.release:()V
      57: goto          0
      60: return

  public java.util.concurrent.Future<T> take() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field completionQueue:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #40,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.take:()Ljava/lang/Object;
       9: checkcast     #41                 // class java/util/concurrent/Future
      12: areturn

  public java.util.concurrent.Future<T> poll();
    Code:
       0: aload_0
       1: getfield      #1                  // Field completionQueue:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #39,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:()Ljava/lang/Object;
       9: checkcast     #41                 // class java/util/concurrent/Future
      12: areturn

  public java.util.concurrent.Future<T> poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field completionQueue:Ljava/util/concurrent/BlockingQueue;
       4: lload_1
       5: aload_3
       6: invokeinterface #42,  4           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
      11: checkcast     #41                 // class java/util/concurrent/Future
      14: areturn

  static org.infinispan.executors.SemaphoreCompletionService$CustomSemaphore access$000(org.infinispan.executors.SemaphoreCompletionService);
    Code:
       0: aload_0
       1: getfield      #6                  // Field semaphore:Lorg/infinispan/executors/SemaphoreCompletionService$CustomSemaphore;
       4: areturn

  static java.util.concurrent.BlockingQueue access$100(org.infinispan.executors.SemaphoreCompletionService);
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/util/concurrent/BlockingQueue;
       4: areturn

  static boolean access$200();
    Code:
       0: getstatic     #4                  // Field trace:Z
       3: ireturn

  static org.infinispan.util.logging.Log access$300();
    Code:
       0: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
       3: areturn

  static void access$400(org.infinispan.executors.SemaphoreCompletionService);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method executeFront:()V
       4: return

  static java.util.concurrent.BlockingQueue access$500(org.infinispan.executors.SemaphoreCompletionService);
    Code:
       0: aload_0
       1: getfield      #1                  // Field completionQueue:Ljava/util/concurrent/BlockingQueue;
       4: areturn

  static {};
    Code:
       0: ldc           #43                 // class org/infinispan/executors/SemaphoreCompletionService
       2: invokestatic  #44                 // Method org/infinispan/util/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/infinispan/util/logging/Log;
       5: putstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
       8: getstatic     #3                  // Field log:Lorg/infinispan/util/logging/Log;
      11: invokeinterface #45,  1           // InterfaceMethod org/infinispan/util/logging/Log.isTraceEnabled:()Z
      16: putstatic     #4                  // Field trace:Z
      19: return
}
