Compiled from "Traversables.java"
final class org.infinispan.functional.impl.Traversables$StreamTraversable<T> implements org.infinispan.commons.api.functional.Traversable<T> {
  final java.util.stream.Stream<T> stream;

  private org.infinispan.functional.impl.Traversables$StreamTraversable(java.util.stream.Stream<T>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field stream:Ljava/util/stream/Stream;
       9: return

  public org.infinispan.commons.api.functional.Traversable<T> filter(java.util.function.Predicate<? super T>);
    Code:
       0: new           #4                  // class org/infinispan/functional/impl/Traversables$StreamTraversable
       3: dup
       4: aload_0
       5: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       8: aload_1
       9: invokeinterface #5,  2            // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      14: invokespecial #1                  // Method "<init>":(Ljava/util/stream/Stream;)V
      17: areturn

  public <R> org.infinispan.commons.api.functional.Traversable<R> map(java.util.function.Function<? super T, ? extends R>);
    Code:
       0: new           #4                  // class org/infinispan/functional/impl/Traversables$StreamTraversable
       3: dup
       4: aload_0
       5: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       8: aload_1
       9: invokeinterface #6,  2            // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      14: invokespecial #1                  // Method "<init>":(Ljava/util/stream/Stream;)V
      17: areturn

  public <R> org.infinispan.commons.api.functional.Traversable<R> flatMap(java.util.function.Function<? super T, ? extends org.infinispan.commons.api.functional.Traversable<? extends R>>);
    Code:
       0: new           #7                  // class org/infinispan/functional/impl/Traversables$StreamTraversable$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #8                  // Method org/infinispan/functional/impl/Traversables$StreamTraversable$1."<init>":(Lorg/infinispan/functional/impl/Traversables$StreamTraversable;Ljava/util/function/Function;)V
       9: astore_2
      10: new           #4                  // class org/infinispan/functional/impl/Traversables$StreamTraversable
      13: dup
      14: aload_0
      15: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
      18: aload_2
      19: invokeinterface #9,  2            // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      24: invokespecial #1                  // Method "<init>":(Ljava/util/stream/Stream;)V
      27: areturn

  public void forEach(java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      10: return

  public T reduce(T, java.util.function.BinaryOperator<T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: aload_1
       5: aload_2
       6: invokeinterface #11,  3           // InterfaceMethod java/util/stream/Stream.reduce:(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;
      11: areturn

  public java.util.Optional<T> reduce(java.util.function.BinaryOperator<T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/stream/Stream.reduce:(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;
      10: areturn

  public <U> U reduce(U, java.util.function.BiFunction<U, ? super T, U>, java.util.function.BinaryOperator<U>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #13,  4           // InterfaceMethod java/util/stream/Stream.reduce:(Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;
      12: areturn

  public <R> R collect(java.util.function.Supplier<R>, java.util.function.BiConsumer<R, ? super T>, java.util.function.BiConsumer<R, R>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #14,  4           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;
      12: areturn

  public <R, A> R collect(java.util.stream.Collector<? super T, A, R>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      10: areturn

  public long count();
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: invokeinterface #16,  1           // InterfaceMethod java/util/stream/Stream.count:()J
       9: lreturn

  public boolean anyMatch(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      10: ireturn

  public boolean allMatch(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #18,  2           // InterfaceMethod java/util/stream/Stream.allMatch:(Ljava/util/function/Predicate;)Z
      10: ireturn

  public boolean noneMatch(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.noneMatch:(Ljava/util/function/Predicate;)Z
      10: ireturn

  public java.util.Optional<T> findAny();
    Code:
       0: aload_0
       1: getfield      #3                  // Field stream:Ljava/util/stream/Stream;
       4: invokeinterface #20,  1           // InterfaceMethod java/util/stream/Stream.findAny:()Ljava/util/Optional;
       9: areturn

  org.infinispan.functional.impl.Traversables$StreamTraversable(java.util.stream.Stream, org.infinispan.functional.impl.Traversables$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljava/util/stream/Stream;)V
       5: return
}
