Compiled from "CommandsFactory.java"
public interface org.infinispan.commands.CommandsFactory {
  public abstract org.infinispan.commands.write.PutKeyValueCommand buildPutKeyValueCommand(java.lang.Object, java.lang.Object, org.infinispan.metadata.Metadata, java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.write.RemoveCommand buildRemoveCommand(java.lang.Object, java.lang.Object, java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.write.InvalidateCommand buildInvalidateCommand(java.util.Set<org.infinispan.context.Flag>, java.lang.Object...);

  public abstract org.infinispan.commands.write.InvalidateCommand buildInvalidateFromL1Command(java.util.Set<org.infinispan.context.Flag>, java.util.Collection<java.lang.Object>);

  public abstract org.infinispan.commands.write.InvalidateCommand buildInvalidateFromL1Command(org.infinispan.remoting.transport.Address, java.util.Set<org.infinispan.context.Flag>, java.util.Collection<java.lang.Object>);

  public abstract org.infinispan.commands.write.RemoveExpiredCommand buildRemoveExpiredCommand(java.lang.Object, java.lang.Object, java.lang.Long);

  public abstract org.infinispan.commands.write.ReplaceCommand buildReplaceCommand(java.lang.Object, java.lang.Object, java.lang.Object, org.infinispan.metadata.Metadata, java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.read.SizeCommand buildSizeCommand(java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.read.GetKeyValueCommand buildGetKeyValueCommand(java.lang.Object, java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.read.GetCacheEntryCommand buildGetCacheEntryCommand(java.lang.Object, java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.read.GetAllCommand buildGetAllCommand(java.util.Collection<?>, java.util.Set<org.infinispan.context.Flag>, boolean);

  public abstract org.infinispan.commands.read.KeySetCommand buildKeySetCommand(java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.read.EntrySetCommand buildEntrySetCommand(java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.write.PutMapCommand buildPutMapCommand(java.util.Map<?, ?>, org.infinispan.metadata.Metadata, java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.write.ClearCommand buildClearCommand(java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.write.EvictCommand buildEvictCommand(java.lang.Object, java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.commands.tx.PrepareCommand buildPrepareCommand(org.infinispan.transaction.xa.GlobalTransaction, java.util.List<org.infinispan.commands.write.WriteCommand>, boolean);

  public abstract org.infinispan.commands.tx.VersionedPrepareCommand buildVersionedPrepareCommand(org.infinispan.transaction.xa.GlobalTransaction, java.util.List<org.infinispan.commands.write.WriteCommand>, boolean);

  public abstract org.infinispan.commands.tx.CommitCommand buildCommitCommand(org.infinispan.transaction.xa.GlobalTransaction);

  public abstract org.infinispan.commands.tx.VersionedCommitCommand buildVersionedCommitCommand(org.infinispan.transaction.xa.GlobalTransaction);

  public abstract org.infinispan.commands.tx.RollbackCommand buildRollbackCommand(org.infinispan.transaction.xa.GlobalTransaction);

  public abstract void initializeReplicableCommand(org.infinispan.commands.ReplicableCommand, boolean);

  public abstract org.infinispan.commands.remote.MultipleRpcCommand buildReplicateCommand(java.util.List<org.infinispan.commands.ReplicableCommand>);

  public abstract org.infinispan.commands.remote.SingleRpcCommand buildSingleRpcCommand(org.infinispan.commands.ReplicableCommand);

  public abstract org.infinispan.commands.remote.ClusteredGetCommand buildClusteredGetCommand(java.lang.Object, java.util.Set<org.infinispan.context.Flag>, boolean, org.infinispan.transaction.xa.GlobalTransaction);

  public abstract org.infinispan.commands.remote.ClusteredGetAllCommand buildClusteredGetAllCommand(java.util.List<?>, java.util.Set<org.infinispan.context.Flag>, org.infinispan.transaction.xa.GlobalTransaction);

  public abstract org.infinispan.commands.control.LockControlCommand buildLockControlCommand(java.util.Collection<?>, java.util.Set<org.infinispan.context.Flag>, org.infinispan.transaction.xa.GlobalTransaction);

  public abstract org.infinispan.commands.control.LockControlCommand buildLockControlCommand(java.lang.Object, java.util.Set<org.infinispan.context.Flag>, org.infinispan.transaction.xa.GlobalTransaction);

  public abstract org.infinispan.commands.control.LockControlCommand buildLockControlCommand(java.util.Collection<?>, java.util.Set<org.infinispan.context.Flag>);

  public abstract org.infinispan.statetransfer.StateRequestCommand buildStateRequestCommand(org.infinispan.statetransfer.StateRequestCommand$Type, org.infinispan.remoting.transport.Address, int, java.util.Set<java.lang.Integer>);

  public abstract org.infinispan.statetransfer.StateResponseCommand buildStateResponseCommand(org.infinispan.remoting.transport.Address, int, java.util.Collection<org.infinispan.statetransfer.StateChunk>);

  public abstract java.lang.String getCacheName();

  public abstract org.infinispan.commands.remote.recovery.GetInDoubtTransactionsCommand buildGetInDoubtTransactionsCommand();

  public abstract org.infinispan.commands.remote.recovery.TxCompletionNotificationCommand buildTxCompletionNotificationCommand(javax.transaction.xa.Xid, org.infinispan.transaction.xa.GlobalTransaction);

  public abstract <T> org.infinispan.commands.read.DistributedExecuteCommand<T> buildDistributedExecuteCommand(java.util.concurrent.Callable<T>, org.infinispan.remoting.transport.Address, java.util.Collection);

  public abstract <KIn, VIn, KOut, VOut> org.infinispan.commands.read.MapCombineCommand<KIn, VIn, KOut, VOut> buildMapCombineCommand(java.lang.String, org.infinispan.distexec.mapreduce.Mapper<KIn, VIn, KOut, VOut>, org.infinispan.distexec.mapreduce.Reducer<KOut, VOut>, java.util.Collection<KIn>);

  public abstract <KOut, VOut> org.infinispan.commands.read.ReduceCommand<KOut, VOut> buildReduceCommand(java.lang.String, java.lang.String, org.infinispan.distexec.mapreduce.Reducer<KOut, VOut>, java.util.Collection<KOut>);

  public abstract org.infinispan.commands.remote.recovery.GetInDoubtTxInfoCommand buildGetInDoubtTxInfoCommand();

  public abstract org.infinispan.commands.remote.recovery.CompleteTransactionCommand buildCompleteTransactionCommand(javax.transaction.xa.Xid, boolean);

  public abstract org.infinispan.commands.remote.recovery.TxCompletionNotificationCommand buildTxCompletionNotificationCommand(long);

  public abstract org.infinispan.commands.write.ApplyDeltaCommand buildApplyDeltaCommand(java.lang.Object, org.infinispan.atomic.Delta, java.util.Collection);

  public abstract org.infinispan.commands.CreateCacheCommand buildCreateCacheCommand(java.lang.String, java.lang.String);

  public abstract org.infinispan.commands.CreateCacheCommand buildCreateCacheCommand(java.lang.String, java.lang.String, int);

  public abstract org.infinispan.commands.CancelCommand buildCancelCommandCommand(java.util.UUID);

  public abstract org.infinispan.xsite.statetransfer.XSiteStateTransferControlCommand buildXSiteStateTransferControlCommand(org.infinispan.xsite.statetransfer.XSiteStateTransferControlCommand$StateTransferControl, java.lang.String);

  public abstract org.infinispan.xsite.XSiteAdminCommand buildXSiteAdminCommand(java.lang.String, org.infinispan.xsite.XSiteAdminCommand$AdminOperation, java.lang.Integer, java.lang.Long);

  public abstract org.infinispan.xsite.statetransfer.XSiteStatePushCommand buildXSiteStatePushCommand(org.infinispan.xsite.statetransfer.XSiteState[], long);

  public abstract org.infinispan.xsite.SingleXSiteRpcCommand buildSingleXSiteRpcCommand(org.infinispan.commands.VisitableCommand);

  public abstract <K, V, C> org.infinispan.iteration.impl.EntryRequestCommand<K, V, C> buildEntryRequestCommand(java.util.UUID, java.util.Set<java.lang.Integer>, java.util.Set<K>, org.infinispan.filter.KeyValueFilter<? super K, ? super V>, org.infinispan.filter.Converter<? super K, ? super V, C>, java.util.Set<org.infinispan.context.Flag>);

  public abstract <K, C> org.infinispan.iteration.impl.EntryResponseCommand<K, C> buildEntryResponseCommand(java.util.UUID, java.util.Set<java.lang.Integer>, java.util.Set<java.lang.Integer>, java.util.Collection<org.infinispan.container.entries.CacheEntry<K, C>>, org.infinispan.commons.CacheException);

  public abstract org.infinispan.commands.remote.GetKeysInGroupCommand buildGetKeysInGroupCommand(java.util.Set<org.infinispan.context.Flag>, java.lang.String);

  public abstract <K> org.infinispan.stream.impl.StreamRequestCommand<K> buildStreamRequestCommand(java.util.UUID, boolean, org.infinispan.stream.impl.StreamRequestCommand$Type, java.util.Set<java.lang.Integer>, java.util.Set<K>, java.util.Set<K>, boolean, java.lang.Object);

  public abstract <R> org.infinispan.stream.impl.StreamResponseCommand<R> buildStreamResponseCommand(java.util.UUID, boolean, java.util.Set<java.lang.Integer>, R);

  public abstract <K, V, R> org.infinispan.commands.functional.ReadOnlyKeyCommand<K, V, R> buildReadOnlyKeyCommand(K, java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadEntryView<K, V>, R>);

  public abstract <K, V, R> org.infinispan.commands.functional.ReadOnlyManyCommand<K, V, R> buildReadOnlyManyCommand(java.util.Set<? extends K>, java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadEntryView<K, V>, R>);

  public abstract <K, V> org.infinispan.commands.functional.WriteOnlyKeyCommand<K, V> buildWriteOnlyKeyCommand(K, java.util.function.Consumer<org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>>, org.infinispan.functional.impl.Params);

  public abstract <K, V, R> org.infinispan.commands.functional.ReadWriteKeyValueCommand<K, V, R> buildReadWriteKeyValueCommand(K, V, java.util.function.BiFunction<V, org.infinispan.commons.api.functional.EntryView$ReadWriteEntryView<K, V>, R>, org.infinispan.functional.impl.Params);

  public abstract <K, V, R> org.infinispan.commands.functional.ReadWriteKeyCommand<K, V, R> buildReadWriteKeyCommand(K, java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadWriteEntryView<K, V>, R>, org.infinispan.functional.impl.Params);

  public abstract <K, V> org.infinispan.commands.functional.WriteOnlyManyEntriesCommand<K, V> buildWriteOnlyManyEntriesCommand(java.util.Map<? extends K, ? extends V>, java.util.function.BiConsumer<V, org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>>, org.infinispan.functional.impl.Params);

  public abstract <K, V> org.infinispan.commands.functional.WriteOnlyKeyValueCommand<K, V> buildWriteOnlyKeyValueCommand(K, V, java.util.function.BiConsumer<V, org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>>, org.infinispan.functional.impl.Params);

  public abstract <K, V> org.infinispan.commands.functional.WriteOnlyManyCommand<K, V> buildWriteOnlyManyCommand(java.util.Set<? extends K>, java.util.function.Consumer<org.infinispan.commons.api.functional.EntryView$WriteEntryView<V>>);

  public abstract <K, V, R> org.infinispan.commands.functional.ReadWriteManyCommand<K, V, R> buildReadWriteManyCommand(java.util.Set<? extends K>, java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadWriteEntryView<K, V>, R>);

  public abstract <K, V, R> org.infinispan.commands.functional.ReadWriteManyEntriesCommand<K, V, R> buildReadWriteManyEntriesCommand(java.util.Map<? extends K, ? extends V>, java.util.function.BiFunction<V, org.infinispan.commons.api.functional.EntryView$ReadWriteEntryView<K, V>, R>);
}
