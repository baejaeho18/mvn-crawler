Compiled from "ClusteredCacheLoaderInterceptor.java"
public class org.infinispan.interceptors.ClusteredCacheLoaderInterceptor extends org.infinispan.interceptors.CacheLoaderInterceptor {
  private static final org.infinispan.util.logging.Log log;

  private static final boolean trace;

  private boolean transactional;

  private org.infinispan.interceptors.locking.ClusteringDependentLogic cdl;

  private org.infinispan.statetransfer.StateTransferManager stateTransferManager;

  private boolean distributed;

  public org.infinispan.interceptors.ClusteredCacheLoaderInterceptor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/interceptors/CacheLoaderInterceptor."<init>":()V
       4: return

  private void injectDependencies(org.infinispan.interceptors.locking.ClusteringDependentLogic, org.infinispan.statetransfer.StateTransferManager);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field cdl:Lorg/infinispan/interceptors/locking/ClusteringDependentLogic;
       5: aload_0
       6: aload_2
       7: putfield      #3                  // Field stateTransferManager:Lorg/infinispan/statetransfer/StateTransferManager;
      10: return

  private void startClusteredCacheLoaderInterceptor();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field cacheConfiguration:Lorg/infinispan/configuration/cache/Configuration;
       5: invokevirtual #5                  // Method org/infinispan/configuration/cache/Configuration.transaction:()Lorg/infinispan/configuration/cache/TransactionConfiguration;
       8: invokevirtual #6                  // Method org/infinispan/configuration/cache/TransactionConfiguration.transactionMode:()Lorg/infinispan/transaction/TransactionMode;
      11: invokevirtual #7                  // Method org/infinispan/transaction/TransactionMode.isTransactional:()Z
      14: putfield      #8                  // Field transactional:Z
      17: aload_0
      18: aload_0
      19: getfield      #4                  // Field cacheConfiguration:Lorg/infinispan/configuration/cache/Configuration;
      22: invokevirtual #9                  // Method org/infinispan/configuration/cache/Configuration.clustering:()Lorg/infinispan/configuration/cache/ClusteringConfiguration;
      25: invokevirtual #10                 // Method org/infinispan/configuration/cache/ClusteringConfiguration.cacheMode:()Lorg/infinispan/configuration/cache/CacheMode;
      28: invokevirtual #11                 // Method org/infinispan/configuration/cache/CacheMode.isDistributed:()Z
      31: putfield      #12                 // Field distributed:Z
      34: return

  protected boolean skipLoadForWriteCommand(org.infinispan.commands.write.WriteCommand, java.lang.Object, org.infinispan.context.InvocationContext);
    Code:
       0: aload_1
       1: invokeinterface #13,  1           // InterfaceMethod org/infinispan/commands/write/WriteCommand.alwaysReadsExistingValues:()Z
       6: ifne          89
       9: aload_0
      10: getfield      #8                  // Field transactional:Z
      13: ifeq          44
      16: aload_3
      17: invokeinterface #14,  1           // InterfaceMethod org/infinispan/context/InvocationContext.isOriginLocal:()Z
      22: ifne          89
      25: getstatic     #15                 // Field trace:Z
      28: ifeq          42
      31: getstatic     #16                 // Field log:Lorg/infinispan/util/logging/Log;
      34: ldc           #17                 // String Skip load for remote tx write command %s.
      36: aload_1
      37: invokeinterface #18,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      42: iconst_1
      43: ireturn
      44: aload_0
      45: getfield      #2                  // Field cdl:Lorg/infinispan/interceptors/locking/ClusteringDependentLogic;
      48: aload_2
      49: invokeinterface #19,  2           // InterfaceMethod org/infinispan/interceptors/locking/ClusteringDependentLogic.localNodeIsPrimaryOwner:(Ljava/lang/Object;)Z
      54: ifne          89
      57: aload_1
      58: getstatic     #20                 // Field org/infinispan/context/Flag.CACHE_MODE_LOCAL:Lorg/infinispan/context/Flag;
      61: invokeinterface #21,  2           // InterfaceMethod org/infinispan/commands/write/WriteCommand.hasFlag:(Lorg/infinispan/context/Flag;)Z
      66: ifne          89
      69: getstatic     #15                 // Field trace:Z
      72: ifeq          87
      75: getstatic     #16                 // Field log:Lorg/infinispan/util/logging/Log;
      78: ldc           #22                 // String Skip load for command %s. This node is not the primary owner of %s
      80: aload_1
      81: aload_2
      82: invokeinterface #23,  4           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      87: iconst_1
      88: ireturn
      89: aload_0
      90: aload_1
      91: aload_2
      92: aload_3
      93: invokespecial #24                 // Method org/infinispan/interceptors/CacheLoaderInterceptor.skipLoadForWriteCommand:(Lorg/infinispan/commands/write/WriteCommand;Ljava/lang/Object;Lorg/infinispan/context/InvocationContext;)Z
      96: ireturn

  protected boolean canLoad(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stateTransferManager:Lorg/infinispan/statetransfer/StateTransferManager;
       4: invokeinterface #25,  1           // InterfaceMethod org/infinispan/statetransfer/StateTransferManager.isJoinComplete:()Z
       9: ifeq          31
      12: aload_0
      13: getfield      #12                 // Field distributed:Z
      16: ifeq          27
      19: aload_0
      20: aload_1
      21: invokespecial #26                 // Method isKeyLocal:(Ljava/lang/Object;)Z
      24: ifeq          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  private boolean isKeyLocal(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stateTransferManager:Lorg/infinispan/statetransfer/StateTransferManager;
       4: invokeinterface #27,  1           // InterfaceMethod org/infinispan/statetransfer/StateTransferManager.getCacheTopology:()Lorg/infinispan/topology/CacheTopology;
       9: invokevirtual #28                 // Method org/infinispan/topology/CacheTopology.getReadConsistentHash:()Lorg/infinispan/distribution/ch/ConsistentHash;
      12: aload_0
      13: getfield      #2                  // Field cdl:Lorg/infinispan/interceptors/locking/ClusteringDependentLogic;
      16: invokeinterface #29,  1           // InterfaceMethod org/infinispan/interceptors/locking/ClusteringDependentLogic.getAddress:()Lorg/infinispan/remoting/transport/Address;
      21: aload_1
      22: invokeinterface #30,  3           // InterfaceMethod org/infinispan/distribution/ch/ConsistentHash.isKeyLocalToNode:(Lorg/infinispan/remoting/transport/Address;Ljava/lang/Object;)Z
      27: ireturn

  static {};
    Code:
       0: ldc           #31                 // class org/infinispan/interceptors/ClusteredActivationInterceptor
       2: invokestatic  #32                 // Method org/infinispan/util/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/infinispan/util/logging/Log;
       5: putstatic     #16                 // Field log:Lorg/infinispan/util/logging/Log;
       8: getstatic     #16                 // Field log:Lorg/infinispan/util/logging/Log;
      11: invokeinterface #33,  1           // InterfaceMethod org/infinispan/util/logging/Log.isTraceEnabled:()Z
      16: putstatic     #15                 // Field trace:Z
      19: return
}
