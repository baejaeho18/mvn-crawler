Compiled from "ReadOnlySegmentAwareMap.java"
public class org.infinispan.distribution.util.ReadOnlySegmentAwareMap<K, V> extends org.infinispan.util.AbstractDelegatingMap<K, V> {
  protected final java.util.Map<K, V> map;

  protected final org.infinispan.distribution.ch.ConsistentHash ch;

  protected final java.util.Set<java.lang.Integer> allowedSegments;

  protected org.infinispan.distribution.util.ReadOnlySegmentAwareSet<K> segmentAwareKeySet;

  protected org.infinispan.distribution.util.ReadOnlySegmentAwareEntrySet<K, V> segmentAwareEntrySet;

  public org.infinispan.distribution.util.ReadOnlySegmentAwareMap(java.util.Map<K, V>, org.infinispan.distribution.ch.ConsistentHash, java.util.Set<java.lang.Integer>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/util/AbstractDelegatingMap."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #2                  // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
       9: putfield      #3                  // Field map:Ljava/util/Map;
      12: aload_0
      13: aload_2
      14: putfield      #4                  // Field ch:Lorg/infinispan/distribution/ch/ConsistentHash;
      17: aload_0
      18: aload_3
      19: putfield      #5                  // Field allowedSegments:Ljava/util/Set;
      22: return

  protected java.util.Map<K, V> delegate();
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Ljava/util/Map;
       4: areturn

  protected boolean keyAllowed(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field ch:Lorg/infinispan/distribution/ch/ConsistentHash;
       4: aload_1
       5: invokeinterface #6,  2            // InterfaceMethod org/infinispan/distribution/ch/ConsistentHash.getSegment:(Ljava/lang/Object;)I
      10: istore_2
      11: aload_0
      12: getfield      #5                  // Field allowedSegments:Ljava/util/Set;
      15: iload_2
      16: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: invokeinterface #8,  2            // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      24: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #9                  // Method keyAllowed:(Ljava/lang/Object;)Z
       5: ifeq          14
       8: aload_0
       9: aload_1
      10: invokespecial #10                 // Method org/infinispan/util/AbstractDelegatingMap.containsKey:(Ljava/lang/Object;)Z
      13: ireturn
      14: iconst_0
      15: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method entrySet:()Ljava/util/Set;
       4: invokeinterface #12,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          47
      19: aload_2
      20: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #15                 // class java/util/Map$Entry
      28: astore_3
      29: aload_1
      30: aload_3
      31: invokeinterface #16,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      36: invokevirtual #17                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: goto          10
      47: iconst_0
      48: ireturn

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #9                  // Method keyAllowed:(Ljava/lang/Object;)Z
       5: ifeq          14
       8: aload_0
       9: aload_1
      10: invokespecial #18                 // Method org/infinispan/util/AbstractDelegatingMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn
      14: aconst_null
      15: areturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: getfield      #19                 // Field segmentAwareEntrySet:Lorg/infinispan/distribution/util/ReadOnlySegmentAwareEntrySet;
       4: ifnonnull     35
       7: aload_0
       8: new           #20                 // class org/infinispan/distribution/util/ReadOnlySegmentAwareEntrySet
      11: dup
      12: aload_0
      13: invokevirtual #21                 // Method delegate:()Ljava/util/Map;
      16: invokeinterface #22,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      21: aload_0
      22: getfield      #4                  // Field ch:Lorg/infinispan/distribution/ch/ConsistentHash;
      25: aload_0
      26: getfield      #5                  // Field allowedSegments:Ljava/util/Set;
      29: invokespecial #23                 // Method org/infinispan/distribution/util/ReadOnlySegmentAwareEntrySet."<init>":(Ljava/util/Set;Lorg/infinispan/distribution/ch/ConsistentHash;Ljava/util/Set;)V
      32: putfield      #19                 // Field segmentAwareEntrySet:Lorg/infinispan/distribution/util/ReadOnlySegmentAwareEntrySet;
      35: aload_0
      36: getfield      #19                 // Field segmentAwareEntrySet:Lorg/infinispan/distribution/util/ReadOnlySegmentAwareEntrySet;
      39: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method keySet:()Ljava/util/Set;
       4: astore_1
       5: aload_1
       6: invokeinterface #12,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: getfield      #25                 // Field segmentAwareKeySet:Lorg/infinispan/distribution/util/ReadOnlySegmentAwareSet;
       4: ifnonnull     30
       7: aload_0
       8: new           #26                 // class org/infinispan/distribution/util/ReadOnlySegmentAwareSet
      11: dup
      12: aload_0
      13: invokespecial #27                 // Method org/infinispan/util/AbstractDelegatingMap.keySet:()Ljava/util/Set;
      16: aload_0
      17: getfield      #4                  // Field ch:Lorg/infinispan/distribution/ch/ConsistentHash;
      20: aload_0
      21: getfield      #5                  // Field allowedSegments:Ljava/util/Set;
      24: invokespecial #28                 // Method org/infinispan/distribution/util/ReadOnlySegmentAwareSet."<init>":(Ljava/util/Set;Lorg/infinispan/distribution/ch/ConsistentHash;Ljava/util/Set;)V
      27: putfield      #25                 // Field segmentAwareKeySet:Lorg/infinispan/distribution/util/ReadOnlySegmentAwareSet;
      30: aload_0
      31: getfield      #25                 // Field segmentAwareKeySet:Lorg/infinispan/distribution/util/ReadOnlySegmentAwareSet;
      34: areturn

  public int size();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method keySet:()Ljava/util/Set;
       4: astore_1
       5: aload_1
       6: invokeinterface #12,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: iconst_0
      13: istore_3
      14: aload_2
      15: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          36
      23: aload_2
      24: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: pop
      30: iinc          3, 1
      33: goto          14
      36: iload_3
      37: ireturn

  public java.util.Collection<V> values();
    Code:
       0: new           #29                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #30                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public java.lang.String toString();
    Code:
       0: new           #31                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #33                 // String ReadOnlySegmentAwareMap [map=
       9: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #3                  // Field map:Ljava/util/Map;
      16: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #36                 // String , ch=
      21: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #4                  // Field ch:Lorg/infinispan/distribution/ch/ConsistentHash;
      28: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      31: ldc           #37                 // String , allowedSegments=
      33: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #5                  // Field allowedSegments:Ljava/util/Set;
      40: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: ldc           #38                 // String ]
      45: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: areturn
}
