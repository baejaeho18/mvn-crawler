Compiled from "SingleKeyNonTxInvocationContext.java"
public final class org.infinispan.context.SingleKeyNonTxInvocationContext implements org.infinispan.context.InvocationContext {
  private boolean isLocked;

  private java.lang.Object key;

  private org.infinispan.container.entries.CacheEntry cacheEntry;

  private final org.infinispan.commons.equivalence.Equivalence keyEquivalence;

  private java.lang.ClassLoader classLoader;

  private final org.infinispan.remoting.transport.Address origin;

  private java.lang.Object lockOwner;

  public org.infinispan.context.SingleKeyNonTxInvocationContext(org.infinispan.remoting.transport.Address, org.infinispan.commons.equivalence.Equivalence<java.lang.Object>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field origin:Lorg/infinispan/remoting/transport/Address;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field keyEquivalence:Lorg/infinispan/commons/equivalence/Equivalence;
      14: return

  public boolean isOriginLocal();
    Code:
       0: aload_0
       1: getfield      #2                  // Field origin:Lorg/infinispan/remoting/transport/Address;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isInTxScope();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.Object getLockOwner();
    Code:
       0: aload_0
       1: getfield      #4                  // Field lockOwner:Ljava/lang/Object;
       4: areturn

  public void setLockOwner(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field lockOwner:Ljava/lang/Object;
       5: return

  public java.util.Set<java.lang.Object> getLockedKeys();
    Code:
       0: aload_0
       1: getfield      #5                  // Field isLocked:Z
       4: ifeq          17
       7: aload_0
       8: getfield      #6                  // Field key:Ljava/lang/Object;
      11: invokestatic  #7                  // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
      14: goto          20
      17: invokestatic  #8                  // Method org/infinispan/commons/util/InfinispanCollections.emptySet:()Ljava/util/Set;
      20: areturn

  public void clearLockedKeys();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #5                  // Field isLocked:Z
       5: aload_0
       6: aconst_null
       7: putfield      #9                  // Field cacheEntry:Lorg/infinispan/container/entries/CacheEntry;
      10: return

  public void addLockedKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #6                  // Field key:Ljava/lang/Object;
       4: ifnonnull     15
       7: aload_0
       8: aload_1
       9: putfield      #6                  // Field key:Ljava/lang/Object;
      12: goto          37
      15: aload_0
      16: getfield      #3                  // Field keyEquivalence:Lorg/infinispan/commons/equivalence/Equivalence;
      19: aload_1
      20: aload_0
      21: getfield      #6                  // Field key:Ljava/lang/Object;
      24: invokeinterface #10,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      29: ifne          37
      32: aload_0
      33: invokespecial #11                 // Method illegalStateException:()Ljava/lang/IllegalStateException;
      36: athrow
      37: aload_0
      38: iconst_1
      39: putfield      #5                  // Field isLocked:Z
      42: return

  private java.lang.IllegalStateException illegalStateException();
    Code:
       0: new           #12                 // class java/lang/IllegalStateException
       3: dup
       4: ldc           #13                 // String This is a single key invocation context, using multiple keys shouldn\'t be possible
       6: invokespecial #14                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: areturn

  public org.infinispan.container.entries.CacheEntry lookupEntry(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        33
       4: aload_0
       5: getfield      #6                  // Field key:Ljava/lang/Object;
       8: ifnull        33
      11: aload_0
      12: getfield      #3                  // Field keyEquivalence:Lorg/infinispan/commons/equivalence/Equivalence;
      15: aload_1
      16: aload_0
      17: getfield      #6                  // Field key:Ljava/lang/Object;
      20: invokeinterface #10,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      25: ifeq          33
      28: aload_0
      29: getfield      #9                  // Field cacheEntry:Lorg/infinispan/container/entries/CacheEntry;
      32: areturn
      33: aconst_null
      34: areturn

  public java.util.Map<java.lang.Object, org.infinispan.container.entries.CacheEntry> getLookedUpEntries();
    Code:
       0: aload_0
       1: getfield      #9                  // Field cacheEntry:Lorg/infinispan/container/entries/CacheEntry;
       4: ifnonnull     13
       7: invokestatic  #15                 // Method org/infinispan/commons/util/InfinispanCollections.emptyMap:()Ljava/util/Map;
      10: goto          24
      13: aload_0
      14: getfield      #6                  // Field key:Ljava/lang/Object;
      17: aload_0
      18: getfield      #9                  // Field cacheEntry:Lorg/infinispan/container/entries/CacheEntry;
      21: invokestatic  #16                 // Method java/util/Collections.singletonMap:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;
      24: areturn

  public void putLookedUpEntry(java.lang.Object, org.infinispan.container.entries.CacheEntry);
    Code:
       0: aload_0
       1: getfield      #6                  // Field key:Ljava/lang/Object;
       4: ifnonnull     15
       7: aload_0
       8: aload_1
       9: putfield      #6                  // Field key:Ljava/lang/Object;
      12: goto          37
      15: aload_0
      16: getfield      #3                  // Field keyEquivalence:Lorg/infinispan/commons/equivalence/Equivalence;
      19: aload_1
      20: aload_0
      21: getfield      #6                  // Field key:Ljava/lang/Object;
      24: invokeinterface #10,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      29: ifne          37
      32: aload_0
      33: invokespecial #11                 // Method illegalStateException:()Ljava/lang/IllegalStateException;
      36: athrow
      37: aload_0
      38: aload_2
      39: putfield      #9                  // Field cacheEntry:Lorg/infinispan/container/entries/CacheEntry;
      42: return

  public void removeLookedUpEntry(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyEquivalence:Lorg/infinispan/commons/equivalence/Equivalence;
       4: aload_1
       5: aload_0
       6: getfield      #6                  // Field key:Ljava/lang/Object;
       9: invokeinterface #10,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      14: ifeq          22
      17: aload_0
      18: aconst_null
      19: putfield      #9                  // Field cacheEntry:Lorg/infinispan/container/entries/CacheEntry;
      22: return

  public java.lang.Object getKey();
    Code:
       0: aload_0
       1: getfield      #6                  // Field key:Ljava/lang/Object;
       4: areturn

  public org.infinispan.container.entries.CacheEntry getCacheEntry();
    Code:
       0: aload_0
       1: getfield      #9                  // Field cacheEntry:Lorg/infinispan/container/entries/CacheEntry;
       4: areturn

  public org.infinispan.remoting.transport.Address getOrigin();
    Code:
       0: aload_0
       1: getfield      #2                  // Field origin:Lorg/infinispan/remoting/transport/Address;
       4: areturn

  public java.lang.ClassLoader getClassLoader();
    Code:
       0: aload_0
       1: getfield      #17                 // Field classLoader:Ljava/lang/ClassLoader;
       4: areturn

  public void setClassLoader(java.lang.ClassLoader);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field classLoader:Ljava/lang/ClassLoader;
       5: return

  public boolean hasLockedKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field isLocked:Z
       4: ifeq          28
       7: aload_0
       8: getfield      #3                  // Field keyEquivalence:Lorg/infinispan/commons/equivalence/Equivalence;
      11: aload_0
      12: getfield      #6                  // Field key:Ljava/lang/Object;
      15: aload_1
      16: invokeinterface #10,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public boolean isEntryRemovedInContext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method lookupEntry:(Ljava/lang/Object;)Lorg/infinispan/container/entries/CacheEntry;
       5: astore_2
       6: aload_2
       7: ifnull        32
      10: aload_2
      11: invokeinterface #19,  1           // InterfaceMethod org/infinispan/container/entries/CacheEntry.isRemoved:()Z
      16: ifeq          32
      19: aload_2
      20: invokeinterface #20,  1           // InterfaceMethod org/infinispan/container/entries/CacheEntry.isChanged:()Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public org.infinispan.context.SingleKeyNonTxInvocationContext clone();
    Code:
       0: aload_0
       1: invokespecial #21                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #22                 // class org/infinispan/context/SingleKeyNonTxInvocationContext
       7: areturn
       8: astore_1
       9: new           #12                 // class java/lang/IllegalStateException
      12: dup
      13: ldc           #24                 // String Impossible!
      15: invokespecial #14                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      18: athrow
    Exception table:
       from    to  target type
           0     7     8   Class java/lang/CloneNotSupportedException

  public void resetState();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #6                  // Field key:Ljava/lang/Object;
       5: aload_0
       6: aconst_null
       7: putfield      #9                  // Field cacheEntry:Lorg/infinispan/container/entries/CacheEntry;
      10: aload_0
      11: iconst_0
      12: putfield      #5                  // Field isLocked:Z
      15: return

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method clone:()Lorg/infinispan/context/SingleKeyNonTxInvocationContext;
       4: areturn

  public org.infinispan.context.InvocationContext clone();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method clone:()Lorg/infinispan/context/SingleKeyNonTxInvocationContext;
       4: areturn
}
