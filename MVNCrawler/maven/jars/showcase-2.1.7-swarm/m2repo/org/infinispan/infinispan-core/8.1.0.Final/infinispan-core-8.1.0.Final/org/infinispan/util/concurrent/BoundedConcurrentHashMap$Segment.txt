Compiled from "BoundedConcurrentHashMap.java"
final class org.infinispan.util.concurrent.BoundedConcurrentHashMap$Segment<K, V> extends java.util.concurrent.locks.ReentrantLock {
  private static final long serialVersionUID;

  volatile transient int count;

  transient int modCount;

  transient int threshold;

  volatile transient org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>[] table;

  final float loadFactor;

  final transient org.infinispan.util.concurrent.BoundedConcurrentHashMap$EvictionPolicy<K, V> eviction;

  final transient org.infinispan.util.concurrent.BoundedConcurrentHashMap map;

  org.infinispan.util.concurrent.BoundedConcurrentHashMap$Segment(int, float, org.infinispan.util.concurrent.BoundedConcurrentHashMap$Eviction, org.infinispan.util.concurrent.BoundedConcurrentHashMap);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
       4: aload_0
       5: aload         4
       7: putfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
      10: aload_0
      11: fload_2
      12: putfield      #4                  // Field loadFactor:F
      15: aload_0
      16: aload_3
      17: aload_0
      18: aload         4
      20: invokestatic  #5                  // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$1900:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)I
      23: fload_2
      24: invokevirtual #6                  // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$Eviction.make:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment;IF)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
      27: putfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
      30: aload_0
      31: iload_1
      32: invokestatic  #8                  // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.newArray:(I)[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      35: invokevirtual #9                  // Method setTable:([Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)V
      38: aload_3
      39: getstatic     #10                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$Eviction.NONE:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$Eviction;
      42: if_acmpeq     51
      45: aload_0
      46: ldc           #12                 // int 2147483647
      48: putfield      #13                 // Field threshold:I
      51: return

  static <K, V> org.infinispan.util.concurrent.BoundedConcurrentHashMap$Segment<K, V>[] newArray(int);
    Code:
       0: iload_0
       1: anewarray     #14                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$Segment
       4: areturn

  org.infinispan.util.concurrent.BoundedConcurrentHashMap$EvictionListener<K, V> getEvictionListener();
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
       4: invokestatic  #15                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$2000:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionListener;
       7: areturn

  void setTable(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>[]);
    Code:
       0: aload_0
       1: aload_1
       2: arraylength
       3: i2f
       4: aload_0
       5: getfield      #4                  // Field loadFactor:F
       8: fmul
       9: f2i
      10: putfield      #13                 // Field threshold:I
      13: aload_0
      14: aload_1
      15: putfield      #16                 // Field table:[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      18: return

  org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V> getFirst(int);
    Code:
       0: aload_0
       1: getfield      #16                 // Field table:[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
       4: astore_2
       5: aload_2
       6: iload_1
       7: aload_2
       8: arraylength
       9: iconst_1
      10: isub
      11: iand
      12: aaload
      13: areturn

  V readValueUnderLock(org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method lock:()V
       4: aload_1
       5: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
       8: astore_2
       9: aload_0
      10: invokevirtual #19                 // Method unlock:()V
      13: aload_2
      14: areturn
      15: astore_3
      16: aload_0
      17: invokevirtual #19                 // Method unlock:()V
      20: aload_3
      21: athrow
    Exception table:
       from    to  target type
           4     9    15   any

  V get(java.lang.Object, int);
    Code:
       0: aload_0
       1: getfield      #20                 // Field count:I
       4: istore_3
       5: iload_3
       6: ifeq          113
       9: aconst_null
      10: astore        4
      12: aload_0
      13: iload_2
      14: invokevirtual #21                 // Method getFirst:(I)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      17: astore        5
      19: aload         5
      21: ifnull        94
      24: aload         5
      26: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
      29: iload_2
      30: if_icmpne     84
      33: aload_0
      34: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
      37: invokestatic  #23                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$100:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/commons/equivalence/Equivalence;
      40: aload_1
      41: aload         5
      43: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      46: invokeinterface #25,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      51: ifeq          84
      54: aload         5
      56: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
      59: astore        6
      61: aload         6
      63: ifnull        73
      66: aload         6
      68: astore        4
      70: goto          94
      73: aload_0
      74: aload         5
      76: invokevirtual #26                 // Method readValueUnderLock:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)Ljava/lang/Object;
      79: astore        4
      81: goto          94
      84: aload         5
      86: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      89: astore        5
      91: goto          19
      94: aload         4
      96: ifnull        110
      99: aload_0
     100: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
     103: aload         5
     105: invokeinterface #28,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryHit:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)V
     110: aload         4
     112: areturn
     113: aconst_null
     114: areturn

  boolean containsKey(java.lang.Object, int);
    Code:
       0: aload_0
       1: getfield      #20                 // Field count:I
       4: ifeq          55
       7: aload_0
       8: iload_2
       9: invokevirtual #21                 // Method getFirst:(I)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      12: astore_3
      13: aload_3
      14: ifnull        55
      17: aload_3
      18: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
      21: iload_2
      22: if_icmpne     47
      25: aload_0
      26: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
      29: invokestatic  #23                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$100:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/commons/equivalence/Equivalence;
      32: aload_1
      33: aload_3
      34: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      37: invokeinterface #25,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      42: ifeq          47
      45: iconst_1
      46: ireturn
      47: aload_3
      48: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      51: astore_3
      52: goto          13
      55: iconst_0
      56: ireturn

  boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #20                 // Field count:I
       4: ifeq          91
       7: aload_0
       8: getfield      #16                 // Field table:[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      11: astore_2
      12: aload_2
      13: arraylength
      14: istore_3
      15: iconst_0
      16: istore        4
      18: iload         4
      20: iload_3
      21: if_icmpge     91
      24: aload_2
      25: iload         4
      27: aaload
      28: astore        5
      30: aload         5
      32: ifnull        85
      35: aload         5
      37: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
      40: astore        6
      42: aload         6
      44: ifnonnull     55
      47: aload_0
      48: aload         5
      50: invokevirtual #26                 // Method readValueUnderLock:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)Ljava/lang/Object;
      53: astore        6
      55: aload_0
      56: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
      59: invokestatic  #29                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$200:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/commons/equivalence/Equivalence;
      62: aload_1
      63: aload         6
      65: invokeinterface #25,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      70: ifeq          75
      73: iconst_1
      74: ireturn
      75: aload         5
      77: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      80: astore        5
      82: goto          30
      85: iinc          4, 1
      88: goto          18
      91: iconst_0
      92: ireturn

  boolean replace(K, int, V, V);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method lock:()V
       4: aload_0
       5: iload_2
       6: invokevirtual #21                 // Method getFirst:(I)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
       9: astore        5
      11: aload         5
      13: ifnull        56
      16: aload         5
      18: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
      21: iload_2
      22: if_icmpne     46
      25: aload_0
      26: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
      29: invokestatic  #23                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$100:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/commons/equivalence/Equivalence;
      32: aload_1
      33: aload         5
      35: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      38: invokeinterface #25,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      43: ifne          56
      46: aload         5
      48: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      51: astore        5
      53: goto          11
      56: iconst_0
      57: istore        6
      59: aload         5
      61: ifnull        106
      64: aload_0
      65: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
      68: invokestatic  #29                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$200:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/commons/equivalence/Equivalence;
      71: aload_3
      72: aload         5
      74: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
      77: invokeinterface #25,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      82: ifeq          106
      85: iconst_1
      86: istore        6
      88: aload         5
      90: aload         4
      92: putfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
      95: aload_0
      96: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
      99: aload         5
     101: invokeinterface #28,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryHit:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)V
     106: iload         6
     108: istore        7
     110: aload_0
     111: invokevirtual #19                 // Method unlock:()V
     114: iload         7
     116: ireturn
     117: astore        8
     119: aload_0
     120: invokevirtual #19                 // Method unlock:()V
     123: aload         8
     125: athrow
    Exception table:
       from    to  target type
           4   110   117   any
         117   119   117   any

  V replace(K, int, V);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method lock:()V
       4: aload_0
       5: iload_2
       6: invokevirtual #21                 // Method getFirst:(I)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
       9: astore        4
      11: aload         4
      13: ifnull        47
      16: aload         4
      18: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
      21: iload_2
      22: if_icmpne     37
      25: aload_1
      26: aload         4
      28: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      31: invokevirtual #30                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      34: ifne          47
      37: aload         4
      39: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      42: astore        4
      44: goto          11
      47: aconst_null
      48: astore        5
      50: aload         4
      52: ifnull        79
      55: aload         4
      57: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
      60: astore        5
      62: aload         4
      64: aload_3
      65: putfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
      68: aload_0
      69: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
      72: aload         4
      74: invokeinterface #28,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryHit:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)V
      79: aload         5
      81: astore        6
      83: aload_0
      84: invokevirtual #19                 // Method unlock:()V
      87: aload         6
      89: areturn
      90: astore        7
      92: aload_0
      93: invokevirtual #19                 // Method unlock:()V
      96: aload         7
      98: athrow
    Exception table:
       from    to  target type
           4    83    90   any
          90    92    90   any

  V put(K, int, V, boolean);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method lock:()V
       4: aconst_null
       5: astore        5
       7: aload_0
       8: getfield      #20                 // Field count:I
      11: istore        6
      13: iload         6
      15: iinc          6, 1
      18: aload_0
      19: getfield      #13                 // Field threshold:I
      22: if_icmple     29
      25: aload_0
      26: invokevirtual #31                 // Method rehash:()V
      29: aload_0
      30: getfield      #16                 // Field table:[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      33: astore        7
      35: iload_2
      36: aload         7
      38: arraylength
      39: iconst_1
      40: isub
      41: iand
      42: istore        8
      44: aload         7
      46: iload         8
      48: aaload
      49: astore        9
      51: aload         9
      53: astore        10
      55: aload         10
      57: ifnull        100
      60: aload         10
      62: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
      65: iload_2
      66: if_icmpne     90
      69: aload_0
      70: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
      73: invokestatic  #23                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$100:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/commons/equivalence/Equivalence;
      76: aload_1
      77: aload         10
      79: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      82: invokeinterface #25,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      87: ifne          100
      90: aload         10
      92: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      95: astore        10
      97: goto          55
     100: aload         10
     102: ifnull        137
     105: aload         10
     107: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
     110: astore        11
     112: iload         4
     114: ifne          204
     117: aload         10
     119: aload_3
     120: putfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
     123: aload_0
     124: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
     127: aload         10
     129: invokeinterface #28,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryHit:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)V
     134: goto          204
     137: aconst_null
     138: astore        11
     140: aload_0
     141: dup
     142: getfield      #32                 // Field modCount:I
     145: iconst_1
     146: iadd
     147: putfield      #32                 // Field modCount:I
     150: aload_0
     151: iload         6
     153: putfield      #20                 // Field count:I
     156: aload         7
     158: iload         8
     160: aload_0
     161: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
     164: aload_1
     165: iload_2
     166: aload         9
     168: aload_3
     169: invokeinterface #33,  5           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.createNewEntry:(Ljava/lang/Object;ILorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;Ljava/lang/Object;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
     174: aastore
     175: aload_0
     176: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
     179: aload         7
     181: iload         8
     183: aaload
     184: invokeinterface #34,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryMiss:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)Ljava/util/Set;
     189: astore        5
     191: aload_0
     192: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
     195: invokestatic  #15                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$2000:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionListener;
     198: aload_1
     199: invokeinterface #35,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionListener.onEntryActivated:(Ljava/lang/Object;)V
     204: aload         11
     206: astore        12
     208: aload_0
     209: invokevirtual #19                 // Method unlock:()V
     212: aload_0
     213: aload         5
     215: invokespecial #36                 // Method notifyEvictionListener:(Ljava/util/Set;)V
     218: aload         12
     220: areturn
     221: astore        13
     223: aload_0
     224: invokevirtual #19                 // Method unlock:()V
     227: aload_0
     228: aload         5
     230: invokespecial #36                 // Method notifyEvictionListener:(Ljava/util/Set;)V
     233: aload         13
     235: athrow
    Exception table:
       from    to  target type
           7   208   221   any
         221   223   221   any

  void rehash();
    Code:
       0: aload_0
       1: getfield      #16                 // Field table:[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iload_2
       9: ldc           #37                 // int 1073741824
      11: if_icmplt     15
      14: return
      15: iload_2
      16: iconst_1
      17: ishl
      18: invokestatic  #8                  // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.newArray:(I)[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      21: astore_3
      22: aload_0
      23: aload_3
      24: arraylength
      25: i2f
      26: aload_0
      27: getfield      #4                  // Field loadFactor:F
      30: fmul
      31: f2i
      32: putfield      #13                 // Field threshold:I
      35: aload_3
      36: arraylength
      37: iconst_1
      38: isub
      39: istore        4
      41: iconst_0
      42: istore        5
      44: iload         5
      46: iload_2
      47: if_icmpge     223
      50: aload_1
      51: iload         5
      53: aaload
      54: astore        6
      56: aload         6
      58: ifnull        217
      61: aload         6
      63: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      66: astore        7
      68: aload         6
      70: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
      73: iload         4
      75: iand
      76: istore        8
      78: aload         7
      80: ifnonnull     92
      83: aload_3
      84: iload         8
      86: aload         6
      88: aastore
      89: goto          217
      92: aload         6
      94: astore        9
      96: iload         8
      98: istore        10
     100: aload         7
     102: astore        11
     104: aload         11
     106: ifnull        144
     109: aload         11
     111: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
     114: iload         4
     116: iand
     117: istore        12
     119: iload         12
     121: iload         10
     123: if_icmpeq     134
     126: iload         12
     128: istore        10
     130: aload         11
     132: astore        9
     134: aload         11
     136: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
     139: astore        11
     141: goto          104
     144: aload_3
     145: iload         10
     147: aload         9
     149: aastore
     150: aload         6
     152: astore        11
     154: aload         11
     156: aload         9
     158: if_acmpeq     217
     161: aload         11
     163: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
     166: iload         4
     168: iand
     169: istore        12
     171: aload_3
     172: iload         12
     174: aaload
     175: astore        13
     177: aload_3
     178: iload         12
     180: aload_0
     181: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
     184: aload         11
     186: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
     189: aload         11
     191: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
     194: aload         13
     196: aload         11
     198: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
     201: invokeinterface #33,  5           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.createNewEntry:(Ljava/lang/Object;ILorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;Ljava/lang/Object;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
     206: aastore
     207: aload         11
     209: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
     212: astore        11
     214: goto          154
     217: iinc          5, 1
     220: goto          44
     223: aload_0
     224: aload_3
     225: putfield      #16                 // Field table:[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
     228: return

  V remove(java.lang.Object, int, java.lang.Object, boolean);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method lock:()V
       4: aload_0
       5: getfield      #20                 // Field count:I
       8: iconst_1
       9: isub
      10: istore        5
      12: aload_0
      13: getfield      #16                 // Field table:[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      16: astore        6
      18: iload_2
      19: aload         6
      21: arraylength
      22: iconst_1
      23: isub
      24: iand
      25: istore        7
      27: aload         6
      29: iload         7
      31: aaload
      32: astore        8
      34: aload         8
      36: astore        9
      38: aload         9
      40: ifnull        83
      43: aload         9
      45: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
      48: iload_2
      49: if_icmpne     73
      52: aload_0
      53: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
      56: invokestatic  #23                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$100:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/commons/equivalence/Equivalence;
      59: aload_1
      60: aload         9
      62: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      65: invokeinterface #25,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      70: ifne          83
      73: aload         9
      75: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      78: astore        9
      80: goto          38
      83: aconst_null
      84: astore        10
      86: aload         9
      88: ifnull        262
      91: aload         9
      93: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
      96: astore        11
      98: aload_0
      99: iload         4
     101: aload         10
     103: invokespecial #38                 // Method isEvictionRemoval:(ZLjava/lang/Object;)Z
     106: ifeq          123
     109: aload_0
     110: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
     113: invokestatic  #15                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$2000:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionListener;
     116: aload         11
     118: invokeinterface #39,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionListener.onEntryChosenForEviction:(Ljava/lang/Object;)V
     123: aload_3
     124: ifnull        145
     127: aload_0
     128: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
     131: invokestatic  #29                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$200:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/commons/equivalence/Equivalence;
     134: aload_3
     135: aload         11
     137: invokeinterface #25,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     142: ifeq          262
     145: aload         11
     147: astore        10
     149: aload_0
     150: dup
     151: getfield      #32                 // Field modCount:I
     154: iconst_1
     155: iadd
     156: putfield      #32                 // Field modCount:I
     159: aload_0
     160: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
     163: aload         9
     165: invokeinterface #40,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryRemove:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)V
     170: aload         9
     172: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
     175: astore        12
     177: aload         8
     179: astore        13
     181: aload         13
     183: aload         9
     185: if_acmpeq     249
     188: aload_0
     189: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
     192: aload         13
     194: invokeinterface #40,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryRemove:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)V
     199: aload_0
     200: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
     203: aload         13
     205: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
     208: aload         13
     210: getfield      #22                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.hash:I
     213: aload         12
     215: aload         13
     217: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
     220: invokeinterface #33,  5           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.createNewEntry:(Ljava/lang/Object;ILorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;Ljava/lang/Object;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
     225: astore        12
     227: aload_0
     228: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
     231: aload         12
     233: invokeinterface #34,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.onEntryMiss:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;)Ljava/util/Set;
     238: pop
     239: aload         13
     241: getfield      #27                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.next:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
     244: astore        13
     246: goto          181
     249: aload         6
     251: iload         7
     253: aload         12
     255: aastore
     256: aload_0
     257: iload         5
     259: putfield      #20                 // Field count:I
     262: aload_0
     263: iload         4
     265: aload         10
     267: invokespecial #38                 // Method isEvictionRemoval:(ZLjava/lang/Object;)Z
     270: ifne          306
     273: invokestatic  #41                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$2100:()Z
     276: ifeq          293
     279: invokestatic  #42                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$2200:()Lorg/infinispan/util/logging/Log;
     282: ldc           #43                 // String Entry removed (not evicting), so remove from cache store too
     284: iconst_0
     285: anewarray     #44                 // class java/lang/Object
     288: invokeinterface #45,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;[Ljava/lang/Object;)V
     293: aload_0
     294: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
     297: invokestatic  #15                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$2000:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionListener;
     300: aload_1
     301: invokeinterface #46,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionListener.onEntryRemoved:(Ljava/lang/Object;)V
     306: aload         10
     308: astore        11
     310: aload_0
     311: invokevirtual #19                 // Method unlock:()V
     314: aload         11
     316: areturn
     317: astore        14
     319: aload_0
     320: invokevirtual #19                 // Method unlock:()V
     323: aload         14
     325: athrow
    Exception table:
       from    to  target type
           4   310   317   any
         317   319   317   any

  private boolean isEvictionRemoval(boolean, V);
    Code:
       0: iload_1
       1: ifne          23
       4: aload_2
       5: instanceof    #47                 // class org/infinispan/container/entries/CacheEntry
       8: ifeq          27
      11: aload_2
      12: checkcast     #47                 // class org/infinispan/container/entries/CacheEntry
      15: invokeinterface #48,  1           // InterfaceMethod org/infinispan/container/entries/CacheEntry.isEvicted:()Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  void clear();
    Code:
       0: aload_0
       1: getfield      #20                 // Field count:I
       4: ifeq          72
       7: aload_0
       8: invokevirtual #17                 // Method lock:()V
      11: aload_0
      12: getfield      #16                 // Field table:[Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry;
      15: astore_1
      16: iconst_0
      17: istore_2
      18: iload_2
      19: aload_1
      20: arraylength
      21: if_icmpge     34
      24: aload_1
      25: iload_2
      26: aconst_null
      27: aastore
      28: iinc          2, 1
      31: goto          18
      34: aload_0
      35: dup
      36: getfield      #32                 // Field modCount:I
      39: iconst_1
      40: iadd
      41: putfield      #32                 // Field modCount:I
      44: aload_0
      45: getfield      #7                  // Field eviction:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy;
      48: invokeinterface #49,  1           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionPolicy.clear:()V
      53: aload_0
      54: iconst_0
      55: putfield      #20                 // Field count:I
      58: aload_0
      59: invokevirtual #19                 // Method unlock:()V
      62: goto          72
      65: astore_3
      66: aload_0
      67: invokevirtual #19                 // Method unlock:()V
      70: aload_3
      71: athrow
      72: return
    Exception table:
       from    to  target type
          11    58    65   any

  private void notifyEvictionListener(java.util.Set<org.infinispan.util.concurrent.BoundedConcurrentHashMap$HashEntry<K, V>>);
    Code:
       0: aload_1
       1: ifnull        132
       4: aload_1
       5: invokeinterface #50,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      10: ifne          132
      13: aload_1
      14: invokeinterface #51,  1           // InterfaceMethod java/util/Set.size:()I
      19: iconst_1
      20: if_icmpne     53
      23: aload_1
      24: invokeinterface #52,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      29: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #54                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry
      37: astore_3
      38: aload_3
      39: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      42: aload_3
      43: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
      46: invokestatic  #55                 // Method java/util/Collections.singletonMap:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;
      49: astore_2
      50: goto          119
      53: new           #56                 // class java/util/HashMap
      56: dup
      57: aload_1
      58: invokeinterface #51,  1           // InterfaceMethod java/util/Set.size:()I
      63: invokespecial #57                 // Method java/util/HashMap."<init>":(I)V
      66: astore_2
      67: aload_1
      68: invokeinterface #52,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      73: astore_3
      74: aload_3
      75: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      80: ifeq          114
      83: aload_3
      84: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      89: checkcast     #54                 // class org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry
      92: astore        4
      94: aload_2
      95: aload         4
      97: getfield      #24                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
     100: aload         4
     102: getfield      #18                 // Field org/infinispan/util/concurrent/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
     105: invokeinterface #59,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     110: pop
     111: goto          74
     114: aload_2
     115: invokestatic  #60                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
     118: astore_2
     119: aload_0
     120: getfield      #3                  // Field map:Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;
     123: invokestatic  #15                 // Method org/infinispan/util/concurrent/BoundedConcurrentHashMap.access$2000:(Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap;)Lorg/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionListener;
     126: aload_2
     127: invokeinterface #61,  2           // InterfaceMethod org/infinispan/util/concurrent/BoundedConcurrentHashMap$EvictionListener.onEntryEviction:(Ljava/util/Map;)V
     132: return
}
