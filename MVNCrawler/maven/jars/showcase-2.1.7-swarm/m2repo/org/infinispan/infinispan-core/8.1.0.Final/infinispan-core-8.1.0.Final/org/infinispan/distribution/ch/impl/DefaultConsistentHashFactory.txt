Compiled from "DefaultConsistentHashFactory.java"
public class org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory implements org.infinispan.distribution.ch.ConsistentHashFactory<org.infinispan.distribution.ch.impl.DefaultConsistentHash> {
  private static final org.infinispan.util.logging.Log log;

  private static final boolean trace;

  public org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public org.infinispan.distribution.ch.impl.DefaultConsistentHash create(org.infinispan.commons.hash.Hash, int, int, java.util.List<org.infinispan.remoting.transport.Address>, java.util.Map<org.infinispan.remoting.transport.Address, java.lang.Float>);
    Code:
       0: aload         4
       2: invokeinterface #2,  1            // InterfaceMethod java/util/List.size:()I
       7: ifne          20
      10: new           #3                  // class java/lang/IllegalArgumentException
      13: dup
      14: ldc           #4                  // String Can\'t construct a consistent hash without any members
      16: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: iload_2
      21: ifgt          34
      24: new           #3                  // class java/lang/IllegalArgumentException
      27: dup
      28: ldc           #6                  // String The number of owners should be greater than 0
      30: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: aload         4
      37: aload         5
      39: invokespecial #7                  // Method checkCapacityFactors:(Ljava/util/List;Ljava/util/Map;)V
      42: new           #8                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder
      45: dup
      46: aload_1
      47: iload_2
      48: iload_3
      49: aload         4
      51: aload         5
      53: invokespecial #9                  // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder."<init>":(Lorg/infinispan/commons/hash/Hash;IILjava/util/List;Ljava/util/Map;)V
      56: astore        6
      58: aload_0
      59: aload         6
      61: invokevirtual #10                 // Method rebalanceBuilder:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
      64: aload         6
      66: invokevirtual #11                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.build:()Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
      69: areturn

  private void checkCapacityFactors(java.util.List<org.infinispan.remoting.transport.Address>, java.util.Map<org.infinispan.remoting.transport.Address, java.lang.Float>);
    Code:
       0: aload_2
       1: ifnull        119
       4: fconst_0
       5: fstore_3
       6: aload_1
       7: invokeinterface #12,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: astore        4
      14: aload         4
      16: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          103
      24: aload         4
      26: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #15                 // class org/infinispan/remoting/transport/Address
      34: astore        5
      36: aload_2
      37: aload         5
      39: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      44: checkcast     #17                 // class java/lang/Float
      47: astore        6
      49: aload         6
      51: ifnull        64
      54: aload         6
      56: invokevirtual #18                 // Method java/lang/Float.floatValue:()F
      59: fconst_0
      60: fcmpg
      61: ifge          92
      64: new           #3                  // class java/lang/IllegalArgumentException
      67: dup
      68: new           #19                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #21                 // String Invalid capacity factor for node
      77: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: aload         5
      82: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      85: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      88: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      91: athrow
      92: fload_3
      93: aload         6
      95: invokevirtual #18                 // Method java/lang/Float.floatValue:()F
      98: fadd
      99: fstore_3
     100: goto          14
     103: fload_3
     104: fconst_0
     105: fcmpl
     106: ifne          119
     109: new           #3                  // class java/lang/IllegalArgumentException
     112: dup
     113: ldc           #25                 // String There must be at least one node with a non-zero capacity factor
     115: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     118: athrow
     119: return

  public org.infinispan.distribution.ch.impl.DefaultConsistentHash updateMembers(org.infinispan.distribution.ch.impl.DefaultConsistentHash, java.util.List<org.infinispan.remoting.transport.Address>, java.util.Map<org.infinispan.remoting.transport.Address, java.lang.Float>);
    Code:
       0: aload_2
       1: invokeinterface #2,  1            // InterfaceMethod java/util/List.size:()I
       6: ifne          19
       9: new           #3                  // class java/lang/IllegalArgumentException
      12: dup
      13: ldc           #4                  // String Can\'t construct a consistent hash without any members
      15: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: aload_2
      21: aload_3
      22: invokespecial #7                  // Method checkCapacityFactors:(Ljava/util/List;Ljava/util/Map;)V
      25: aload_3
      26: ifnonnull     44
      29: aload_1
      30: invokevirtual #26                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getCapacityFactors:()Ljava/util/Map;
      33: ifnonnull     40
      36: iconst_1
      37: goto          54
      40: iconst_0
      41: goto          54
      44: aload_3
      45: aload_1
      46: invokevirtual #26                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getCapacityFactors:()Ljava/util/Map;
      49: invokeinterface #27,  2           // InterfaceMethod java/util/Map.equals:(Ljava/lang/Object;)Z
      54: istore        4
      56: aload_2
      57: aload_1
      58: invokevirtual #28                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getMembers:()Ljava/util/List;
      61: invokeinterface #29,  2           // InterfaceMethod java/util/List.equals:(Ljava/lang/Object;)Z
      66: ifeq          76
      69: iload         4
      71: ifeq          76
      74: aload_1
      75: areturn
      76: new           #8                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder
      79: dup
      80: aload_1
      81: aload_2
      82: aload_3
      83: invokespecial #30                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder."<init>":(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;Ljava/util/List;Ljava/util/Map;)V
      86: astore        5
      88: aconst_null
      89: astore        6
      91: iconst_0
      92: istore        7
      94: iload         7
      96: aload_1
      97: invokevirtual #31                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.getNumSegments:()I
     100: if_icmpge     161
     103: aload         5
     105: iload         7
     107: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwners:(I)Ljava/util/List;
     110: invokeinterface #33,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     115: ifeq          155
     118: aload         6
     120: ifnonnull     140
     123: new           #8                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder
     126: dup
     127: aload         5
     129: invokespecial #34                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder."<init>":(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
     132: astore        6
     134: aload_0
     135: aload         6
     137: invokevirtual #10                 // Method rebalanceBuilder:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
     140: aload         5
     142: iload         7
     144: aload         6
     146: iload         7
     148: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwners:(I)Ljava/util/List;
     151: invokevirtual #35                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.addOwners:(ILjava/util/Collection;)Z
     154: pop
     155: iinc          7, 1
     158: goto          94
     161: aload         5
     163: invokevirtual #11                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.build:()Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
     166: areturn

  public org.infinispan.distribution.ch.impl.DefaultConsistentHash rebalance(org.infinispan.distribution.ch.impl.DefaultConsistentHash);
    Code:
       0: new           #8                  // class org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder
       3: dup
       4: aload_1
       5: invokespecial #36                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder."<init>":(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;)V
       8: astore_2
       9: aload_0
      10: aload_2
      11: invokevirtual #10                 // Method rebalanceBuilder:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
      14: aload_2
      15: invokevirtual #11                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.build:()Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
      18: astore_3
      19: aload_3
      20: aload_1
      21: invokevirtual #37                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.equals:(Ljava/lang/Object;)Z
      24: ifeq          31
      27: aload_1
      28: goto          32
      31: aload_3
      32: areturn

  public org.infinispan.distribution.ch.impl.DefaultConsistentHash union(org.infinispan.distribution.ch.impl.DefaultConsistentHash, org.infinispan.distribution.ch.impl.DefaultConsistentHash);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #38                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHash.union:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
       5: areturn

  protected void rebalanceBuilder(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #39                 // Method addPrimaryOwners:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #40                 // Method addBackupOwners:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
      10: return

  protected void addPrimaryOwners(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #41                 // Method addFirstOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #42                 // Method swapPrimaryOwnersWithBackups:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
      10: aload_1
      11: invokevirtual #43                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getActualNumOwners:()I
      14: istore_2
      15: aload_0
      16: aload_1
      17: iload_2
      18: invokevirtual #44                 // Method replacePrimaryOwners:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;I)V
      21: aload_0
      22: aload_1
      23: iload_2
      24: iconst_1
      25: iadd
      26: invokevirtual #44                 // Method replacePrimaryOwners:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;I)V
      29: return

  private void addFirstOwner(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_1
       4: invokevirtual #45                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getNumSegments:()I
       7: if_icmpge     53
      10: aload_1
      11: iload_2
      12: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwners:(I)Ljava/util/List;
      15: invokeinterface #2,  1            // InterfaceMethod java/util/List.size:()I
      20: ifle          26
      23: goto          47
      26: aload_0
      27: aload_1
      28: aload_1
      29: invokevirtual #46                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getMembers:()Ljava/util/List;
      32: aconst_null
      33: invokevirtual #47                 // Method findNewPrimaryOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/Collection;Lorg/infinispan/remoting/transport/Address;)Lorg/infinispan/remoting/transport/Address;
      36: astore_3
      37: aload_3
      38: ifnull        47
      41: aload_1
      42: iload_2
      43: aload_3
      44: invokevirtual #48                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.addPrimaryOwner:(ILorg/infinispan/remoting/transport/Address;)V
      47: iinc          2, 1
      50: goto          2
      53: return

  protected void replacePrimaryOwners(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder, int);
    Code:
       0: iconst_1
       1: istore_3
       2: iload_3
       3: ifeq          131
       6: aload_0
       7: aload_1
       8: aload_1
       9: invokevirtual #46                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getMembers:()Ljava/util/List;
      12: invokespecial #49                 // Method findWorstPrimaryOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/List;)Lorg/infinispan/remoting/transport/Address;
      15: astore        4
      17: iconst_0
      18: istore_3
      19: aload_1
      20: invokevirtual #45                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getNumSegments:()I
      23: iconst_1
      24: isub
      25: istore        5
      27: iload         5
      29: iflt          128
      32: aload_1
      33: iload         5
      35: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwners:(I)Ljava/util/List;
      38: invokeinterface #2,  1            // InterfaceMethod java/util/List.size:()I
      43: iload_2
      44: if_icmplt     50
      47: goto          122
      50: aload_1
      51: iload         5
      53: invokevirtual #50                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getPrimaryOwner:(I)Lorg/infinispan/remoting/transport/Address;
      56: aload         4
      58: invokevirtual #51                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      61: ifne          67
      64: goto          122
      67: aload_0
      68: aload_1
      69: aload_1
      70: invokevirtual #46                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getMembers:()Ljava/util/List;
      73: aload         4
      75: invokevirtual #47                 // Method findNewPrimaryOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/Collection;Lorg/infinispan/remoting/transport/Address;)Lorg/infinispan/remoting/transport/Address;
      78: astore        6
      80: aload         6
      82: ifnull        122
      85: aload_1
      86: iload         5
      88: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwners:(I)Ljava/util/List;
      91: aload         6
      93: invokeinterface #52,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      98: ifne          122
     101: aload_1
     102: iload         5
     104: aload         6
     106: invokevirtual #48                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.addPrimaryOwner:(ILorg/infinispan/remoting/transport/Address;)V
     109: iconst_1
     110: istore_3
     111: aload_0
     112: aload_1
     113: aload_1
     114: invokevirtual #46                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getMembers:()Ljava/util/List;
     117: invokespecial #49                 // Method findWorstPrimaryOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/List;)Lorg/infinispan/remoting/transport/Address;
     120: astore        4
     122: iinc          5, -1
     125: goto          27
     128: goto          2
     131: return

  protected void swapPrimaryOwnersWithBackups(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder);
    Code:
       0: aload_1
       1: invokevirtual #45                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getNumSegments:()I
       4: iconst_1
       5: isub
       6: istore_2
       7: iload_2
       8: iflt          64
      11: aload_1
      12: iload_2
      13: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwners:(I)Ljava/util/List;
      16: invokeinterface #33,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      21: ifeq          27
      24: goto          58
      27: aload_1
      28: iload_2
      29: invokevirtual #50                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getPrimaryOwner:(I)Lorg/infinispan/remoting/transport/Address;
      32: astore_3
      33: aload_0
      34: aload_1
      35: aload_1
      36: iload_2
      37: invokevirtual #53                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getBackupOwners:(I)Ljava/util/List;
      40: aload_3
      41: invokevirtual #47                 // Method findNewPrimaryOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/Collection;Lorg/infinispan/remoting/transport/Address;)Lorg/infinispan/remoting/transport/Address;
      44: astore        4
      46: aload         4
      48: ifnull        58
      51: aload_1
      52: iload_2
      53: aload         4
      55: invokevirtual #54                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.replacePrimaryOwnerWithBackup:(ILorg/infinispan/remoting/transport/Address;)V
      58: iinc          2, -1
      61: goto          7
      64: return

  protected void addBackupOwners(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #55                 // Method removeExtraBackupOwners:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #56                 // Method doAddBackupOwners:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
      10: aload_0
      11: aload_1
      12: invokevirtual #57                 // Method replaceBackupOwners:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;)V
      15: return

  protected void removeExtraBackupOwners(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder);
    Code:
       0: new           #58                 // class java/util/ArrayList
       3: dup
       4: aload_1
       5: invokevirtual #46                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getMembers:()Ljava/util/List;
       8: invokespecial #59                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      11: astore_2
      12: aload_2
      13: invokeinterface #33,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      18: ifne          138
      21: iconst_0
      22: istore_3
      23: aload_0
      24: aload_1
      25: aload_2
      26: invokespecial #60                 // Method findWorstBackupOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/List;)Lorg/infinispan/remoting/transport/Address;
      29: astore        4
      31: aload_1
      32: invokevirtual #45                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getNumSegments:()I
      35: iconst_1
      36: isub
      37: istore        5
      39: iload         5
      41: iflt          122
      44: aload_1
      45: iload         5
      47: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwners:(I)Ljava/util/List;
      50: astore        6
      52: aload         6
      54: invokeinterface #2,  1            // InterfaceMethod java/util/List.size:()I
      59: aload_1
      60: invokevirtual #43                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getActualNumOwners:()I
      63: if_icmpgt     69
      66: goto          116
      69: aload         6
      71: aload         4
      73: invokeinterface #61,  2           // InterfaceMethod java/util/List.indexOf:(Ljava/lang/Object;)I
      78: istore        7
      80: iload         7
      82: ifle          116
      85: aload_1
      86: iload         5
      88: aload         4
      90: invokevirtual #62                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.removeOwner:(ILorg/infinispan/remoting/transport/Address;)Z
      93: pop
      94: iconst_1
      95: istore_3
      96: new           #58                 // class java/util/ArrayList
      99: dup
     100: aload_1
     101: invokevirtual #46                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getMembers:()Ljava/util/List;
     104: invokespecial #59                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
     107: astore_2
     108: aload_0
     109: aload_1
     110: aload_2
     111: invokespecial #60                 // Method findWorstBackupOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/List;)Lorg/infinispan/remoting/transport/Address;
     114: astore        4
     116: iinc          5, -1
     119: goto          39
     122: iload_3
     123: ifne          135
     126: aload_2
     127: aload         4
     129: invokeinterface #63,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
     134: pop
     135: goto          12
     138: return

  private org.infinispan.remoting.transport.Address findWorstPrimaryOwner(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder, java.util.List<org.infinispan.remoting.transport.Address>);
    Code:
       0: aconst_null
       1: astore_3
       2: ldc           #64                 // float -1.0f
       4: fstore        4
       6: aload_2
       7: invokeinterface #12,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: astore        5
      14: aload         5
      16: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          93
      24: aload         5
      26: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #15                 // class org/infinispan/remoting/transport/Address
      34: astore        6
      36: aload_1
      37: aload         6
      39: invokevirtual #65                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getCapacityFactor:(Lorg/infinispan/remoting/transport/Address;)F
      42: fstore        7
      44: aload_1
      45: aload         6
      47: invokestatic  #66                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.access$000:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Lorg/infinispan/remoting/transport/Address;)I
      50: iconst_1
      51: isub
      52: i2f
      53: fload         7
      55: fload         4
      57: fmul
      58: fcmpl
      59: iflt          90
      62: aload         6
      64: astore_3
      65: fload         7
      67: fconst_0
      68: fcmpl
      69: ifeq          87
      72: aload_1
      73: aload         6
      75: invokestatic  #66                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.access$000:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Lorg/infinispan/remoting/transport/Address;)I
      78: iconst_1
      79: isub
      80: i2f
      81: fload         7
      83: fdiv
      84: goto          88
      87: fconst_0
      88: fstore        4
      90: goto          14
      93: aload_3
      94: areturn

  private org.infinispan.remoting.transport.Address findWorstBackupOwner(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder, java.util.List<org.infinispan.remoting.transport.Address>);
    Code:
       0: aconst_null
       1: astore_3
       2: ldc           #64                 // float -1.0f
       4: fstore        4
       6: aload_2
       7: invokeinterface #12,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: astore        5
      14: aload         5
      16: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          97
      24: aload         5
      26: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #15                 // class org/infinispan/remoting/transport/Address
      34: astore        6
      36: aload_1
      37: aload         6
      39: invokevirtual #65                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getCapacityFactor:(Lorg/infinispan/remoting/transport/Address;)F
      42: fstore        7
      44: aload_3
      45: ifnull        66
      48: aload_1
      49: aload         6
      51: invokevirtual #67                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwned:(Lorg/infinispan/remoting/transport/Address;)I
      54: iconst_1
      55: isub
      56: i2f
      57: fload         7
      59: fload         4
      61: fmul
      62: fcmpl
      63: iflt          94
      66: aload         6
      68: astore_3
      69: fload         7
      71: fconst_0
      72: fcmpl
      73: ifeq          91
      76: aload_1
      77: aload         6
      79: invokevirtual #67                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwned:(Lorg/infinispan/remoting/transport/Address;)I
      82: iconst_1
      83: isub
      84: i2f
      85: fload         7
      87: fdiv
      88: goto          92
      91: fconst_0
      92: fstore        4
      94: goto          14
      97: aload_3
      98: areturn

  protected void doAddBackupOwners(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_1
       4: invokevirtual #45                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getNumSegments:()I
       7: if_icmpge     55
      10: aload_1
      11: iload_2
      12: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwners:(I)Ljava/util/List;
      15: astore_3
      16: aload_3
      17: invokeinterface #2,  1            // InterfaceMethod java/util/List.size:()I
      22: aload_1
      23: invokevirtual #43                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getActualNumOwners:()I
      26: if_icmpge     49
      29: aload_0
      30: aload_1
      31: aload_3
      32: aconst_null
      33: invokevirtual #68                 // Method findNewBackupOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/Collection;Lorg/infinispan/remoting/transport/Address;)Lorg/infinispan/remoting/transport/Address;
      36: astore        4
      38: aload_1
      39: iload_2
      40: aload         4
      42: invokevirtual #69                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.addOwner:(ILorg/infinispan/remoting/transport/Address;)Z
      45: pop
      46: goto          16
      49: iinc          2, 1
      52: goto          2
      55: return

  protected void replaceBackupOwners(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder);
    Code:
       0: new           #58                 // class java/util/ArrayList
       3: dup
       4: aload_1
       5: invokevirtual #46                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getMembers:()Ljava/util/List;
       8: invokespecial #59                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      11: astore_2
      12: aload_2
      13: invokeinterface #33,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      18: ifne          146
      21: aload_0
      22: aload_1
      23: aload_2
      24: invokespecial #60                 // Method findWorstBackupOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/List;)Lorg/infinispan/remoting/transport/Address;
      27: astore_3
      28: iconst_0
      29: istore        4
      31: aload_1
      32: invokevirtual #45                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getNumSegments:()I
      35: iconst_1
      36: isub
      37: istore        5
      39: iload         5
      41: iflt          130
      44: aload_1
      45: iload         5
      47: invokevirtual #32                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwners:(I)Ljava/util/List;
      50: astore        6
      52: aload         6
      54: aload_3
      55: invokeinterface #61,  2           // InterfaceMethod java/util/List.indexOf:(Ljava/lang/Object;)I
      60: istore        7
      62: iload         7
      64: ifgt          70
      67: goto          124
      70: aload_0
      71: aload_1
      72: aload         6
      74: aload_3
      75: invokevirtual #68                 // Method findNewBackupOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/Collection;Lorg/infinispan/remoting/transport/Address;)Lorg/infinispan/remoting/transport/Address;
      78: astore        8
      80: aload         8
      82: ifnull        124
      85: aload_1
      86: iload         5
      88: aload_3
      89: invokevirtual #62                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.removeOwner:(ILorg/infinispan/remoting/transport/Address;)Z
      92: pop
      93: aload_1
      94: iload         5
      96: aload         8
      98: invokevirtual #69                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.addOwner:(ILorg/infinispan/remoting/transport/Address;)Z
     101: pop
     102: iconst_1
     103: istore        4
     105: new           #58                 // class java/util/ArrayList
     108: dup
     109: aload_1
     110: invokevirtual #46                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getMembers:()Ljava/util/List;
     113: invokespecial #59                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
     116: astore_2
     117: aload_0
     118: aload_1
     119: aload_2
     120: invokespecial #60                 // Method findWorstBackupOwner:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Ljava/util/List;)Lorg/infinispan/remoting/transport/Address;
     123: astore_3
     124: iinc          5, -1
     127: goto          39
     130: iload         4
     132: ifne          143
     135: aload_2
     136: aload_3
     137: invokeinterface #63,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
     142: pop
     143: goto          12
     146: return

  protected org.infinispan.remoting.transport.Address findNewBackupOwner(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder, java.util.Collection<org.infinispan.remoting.transport.Address>, org.infinispan.remoting.transport.Address);
    Code:
       0: aconst_null
       1: astore        4
       3: aload_3
       4: ifnull        15
       7: aload_1
       8: aload_3
       9: invokevirtual #65                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getCapacityFactor:(Lorg/infinispan/remoting/transport/Address;)F
      12: goto          16
      15: fconst_0
      16: fstore        5
      18: fload         5
      20: fconst_0
      21: fcmpl
      22: ifeq          39
      25: aload_1
      26: aload_3
      27: invokevirtual #67                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwned:(Lorg/infinispan/remoting/transport/Address;)I
      30: iconst_1
      31: isub
      32: i2f
      33: fload         5
      35: fdiv
      36: goto          41
      39: ldc           #70                 // float 3.4028235E38f
      41: fstore        6
      43: aload_1
      44: invokevirtual #46                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getMembers:()Ljava/util/List;
      47: invokeinterface #12,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      52: astore        7
      54: aload         7
      56: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      61: ifeq          138
      64: aload         7
      66: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      71: checkcast     #15                 // class org/infinispan/remoting/transport/Address
      74: astore        8
      76: aload_2
      77: ifnull        91
      80: aload_2
      81: aload         8
      83: invokeinterface #71,  2           // InterfaceMethod java/util/Collection.contains:(Ljava/lang/Object;)Z
      88: ifne          135
      91: aload_1
      92: aload         8
      94: invokevirtual #67                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getOwned:(Lorg/infinispan/remoting/transport/Address;)I
      97: istore        9
      99: aload_1
     100: aload         8
     102: invokevirtual #65                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getCapacityFactor:(Lorg/infinispan/remoting/transport/Address;)F
     105: fstore        10
     107: iload         9
     109: iconst_1
     110: iadd
     111: i2f
     112: fload         10
     114: fload         6
     116: fmul
     117: fcmpg
     118: ifgt          135
     121: aload         8
     123: astore        4
     125: iload         9
     127: iconst_1
     128: iadd
     129: i2f
     130: fload         10
     132: fdiv
     133: fstore        6
     135: goto          54
     138: aload         4
     140: areturn

  protected org.infinispan.remoting.transport.Address findNewPrimaryOwner(org.infinispan.distribution.ch.impl.DefaultConsistentHashFactory$Builder, java.util.Collection<org.infinispan.remoting.transport.Address>, org.infinispan.remoting.transport.Address);
    Code:
       0: aload_3
       1: ifnull        12
       4: aload_1
       5: aload_3
       6: invokevirtual #65                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getCapacityFactor:(Lorg/infinispan/remoting/transport/Address;)F
       9: goto          13
      12: fconst_0
      13: fstore        4
      15: aconst_null
      16: astore        5
      18: fload         4
      20: fconst_0
      21: fcmpl
      22: ifeq          39
      25: aload_1
      26: aload_3
      27: invokestatic  #66                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.access$000:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Lorg/infinispan/remoting/transport/Address;)I
      30: iconst_1
      31: isub
      32: i2f
      33: fload         4
      35: fdiv
      36: goto          41
      39: ldc           #70                 // float 3.4028235E38f
      41: fstore        6
      43: aload_2
      44: invokeinterface #72,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      49: astore        7
      51: aload         7
      53: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      58: ifeq          120
      61: aload         7
      63: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      68: checkcast     #15                 // class org/infinispan/remoting/transport/Address
      71: astore        8
      73: aload_1
      74: aload         8
      76: invokestatic  #66                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.access$000:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder;Lorg/infinispan/remoting/transport/Address;)I
      79: istore        9
      81: aload_1
      82: aload         8
      84: invokevirtual #65                 // Method org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory$Builder.getCapacityFactor:(Lorg/infinispan/remoting/transport/Address;)F
      87: fstore        10
      89: iload         9
      91: iconst_1
      92: iadd
      93: i2f
      94: fload         10
      96: fload         6
      98: fmul
      99: fcmpg
     100: ifgt          117
     103: aload         8
     105: astore        5
     107: iload         9
     109: iconst_1
     110: iadd
     111: i2f
     112: fload         10
     114: fdiv
     115: fstore        6
     117: goto          51
     120: aload         5
     122: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        19
       4: aload_1
       5: invokevirtual #73                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: aload_0
       9: invokevirtual #73                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      12: if_acmpne     19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public int hashCode();
    Code:
       0: sipush        3853
       3: ireturn

  public org.infinispan.distribution.ch.ConsistentHash union(org.infinispan.distribution.ch.ConsistentHash, org.infinispan.distribution.ch.ConsistentHash);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #74                 // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
       5: aload_2
       6: checkcast     #74                 // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
       9: invokevirtual #75                 // Method union:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
      12: areturn

  public org.infinispan.distribution.ch.ConsistentHash rebalance(org.infinispan.distribution.ch.ConsistentHash);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #74                 // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
       5: invokevirtual #76                 // Method rebalance:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
       8: areturn

  public org.infinispan.distribution.ch.ConsistentHash updateMembers(org.infinispan.distribution.ch.ConsistentHash, java.util.List, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #74                 // class org/infinispan/distribution/ch/impl/DefaultConsistentHash
       5: aload_2
       6: aload_3
       7: invokevirtual #77                 // Method updateMembers:(Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;Ljava/util/List;Ljava/util/Map;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
      10: areturn

  public org.infinispan.distribution.ch.ConsistentHash create(org.infinispan.commons.hash.Hash, int, int, java.util.List, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aload         4
       6: aload         5
       8: invokevirtual #78                 // Method create:(Lorg/infinispan/commons/hash/Hash;IILjava/util/List;Ljava/util/Map;)Lorg/infinispan/distribution/ch/impl/DefaultConsistentHash;
      11: areturn

  static {};
    Code:
       0: ldc           #79                 // class org/infinispan/distribution/ch/impl/DefaultConsistentHashFactory
       2: invokestatic  #80                 // Method org/infinispan/util/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/infinispan/util/logging/Log;
       5: putstatic     #81                 // Field log:Lorg/infinispan/util/logging/Log;
       8: getstatic     #81                 // Field log:Lorg/infinispan/util/logging/Log;
      11: invokeinterface #82,  1           // InterfaceMethod org/infinispan/util/logging/Log.isTraceEnabled:()Z
      16: putstatic     #83                 // Field trace:Z
      19: return
}
