Compiled from "ReadOnlyMapImpl.java"
public final class org.infinispan.functional.impl.ReadOnlyMapImpl<K, V> extends org.infinispan.functional.impl.AbstractFunctionalMap<K, V> implements org.infinispan.commons.api.functional.FunctionalMap$ReadOnlyMap<K, V> {
  private static final org.infinispan.util.logging.Log log;

  private final org.infinispan.functional.impl.Params params;

  private org.infinispan.functional.impl.ReadOnlyMapImpl(org.infinispan.functional.impl.Params, org.infinispan.functional.impl.FunctionalMapImpl<K, V>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #1                  // Method org/infinispan/functional/impl/AbstractFunctionalMap."<init>":(Lorg/infinispan/functional/impl/FunctionalMapImpl;)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field params:Lorg/infinispan/functional/impl/Params;
      10: return

  public static <K, V> org.infinispan.commons.api.functional.FunctionalMap$ReadOnlyMap<K, V> create(org.infinispan.functional.impl.FunctionalMapImpl<K, V>);
    Code:
       0: new           #3                  // class org/infinispan/functional/impl/ReadOnlyMapImpl
       3: dup
       4: aload_0
       5: getfield      #4                  // Field org/infinispan/functional/impl/FunctionalMapImpl.params:Lorg/infinispan/functional/impl/Params;
       8: getfield      #5                  // Field org/infinispan/functional/impl/Params.params:[Lorg/infinispan/commons/api/functional/Param;
      11: invokestatic  #6                  // Method org/infinispan/functional/impl/Params.from:([Lorg/infinispan/commons/api/functional/Param;)Lorg/infinispan/functional/impl/Params;
      14: aload_0
      15: invokespecial #7                  // Method "<init>":(Lorg/infinispan/functional/impl/Params;Lorg/infinispan/functional/impl/FunctionalMapImpl;)V
      18: areturn

  private static <K, V> org.infinispan.commons.api.functional.FunctionalMap$ReadOnlyMap<K, V> create(org.infinispan.functional.impl.Params, org.infinispan.functional.impl.FunctionalMapImpl<K, V>);
    Code:
       0: new           #3                  // class org/infinispan/functional/impl/ReadOnlyMapImpl
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #7                  // Method "<init>":(Lorg/infinispan/functional/impl/Params;Lorg/infinispan/functional/impl/FunctionalMapImpl;)V
       9: areturn

  public <R> java.util.concurrent.CompletableFuture<R> eval(K, java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadEntryView<K, V>, R>);
    Code:
       0: getstatic     #8                  // Field log:Lorg/infinispan/util/logging/Log;
       3: ldc           #9                  // String Invoked eval(k=%s, %s)
       5: aload_1
       6: aload_0
       7: getfield      #2                  // Field params:Lorg/infinispan/functional/impl/Params;
      10: invokeinterface #10,  4           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      15: aload_0
      16: getfield      #2                  // Field params:Lorg/infinispan/functional/impl/Params;
      19: iconst_0
      20: invokevirtual #12                 // Method org/infinispan/functional/impl/Params.get:(I)Lorg/infinispan/commons/api/functional/Param;
      23: astore_3
      24: aload_0
      25: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
      28: invokevirtual #14                 // Method org/infinispan/functional/impl/FunctionalMapImpl.cmdFactory:()Lorg/infinispan/commands/CommandsFactory;
      31: aload_1
      32: aload_2
      33: invokeinterface #15,  3           // InterfaceMethod org/infinispan/commands/CommandsFactory.buildReadOnlyKeyCommand:(Ljava/lang/Object;Ljava/util/function/Function;)Lorg/infinispan/commands/functional/ReadOnlyKeyCommand;
      38: astore        4
      40: aload_0
      41: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
      44: invokevirtual #16                 // Method org/infinispan/functional/impl/FunctionalMapImpl.invCtxFactory:()Lorg/infinispan/context/InvocationContextFactory;
      47: iconst_0
      48: iconst_1
      49: invokeinterface #17,  3           // InterfaceMethod org/infinispan/context/InvocationContextFactory.createInvocationContext:(ZI)Lorg/infinispan/context/InvocationContext;
      54: astore        5
      56: aload_3
      57: aload_0
      58: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
      61: invokevirtual #18                 // Method org/infinispan/functional/impl/FunctionalMapImpl.asyncExec:()Ljava/util/concurrent/ExecutorService;
      64: aload_0
      65: aload         5
      67: aload         4
      69: invokedynamic #19,  0             // InvokeDynamic #0:get:(Lorg/infinispan/functional/impl/ReadOnlyMapImpl;Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/functional/ReadOnlyKeyCommand;)Ljava/util/function/Supplier;
      74: invokestatic  #20                 // Method org/infinispan/functional/impl/Params.withFuture:(Lorg/infinispan/commons/api/functional/Param;Ljava/util/concurrent/ExecutorService;Ljava/util/function/Supplier;)Ljava/util/concurrent/CompletableFuture;
      77: areturn

  public <R> org.infinispan.commons.api.functional.Traversable<R> evalMany(java.util.Set<? extends K>, java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadEntryView<K, V>, R>);
    Code:
       0: getstatic     #8                  // Field log:Lorg/infinispan/util/logging/Log;
       3: ldc           #21                 // String Invoked evalMany(m=%s, %s)
       5: aload_1
       6: aload_0
       7: getfield      #2                  // Field params:Lorg/infinispan/functional/impl/Params;
      10: invokeinterface #10,  4           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      15: aload_0
      16: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
      19: invokevirtual #14                 // Method org/infinispan/functional/impl/FunctionalMapImpl.cmdFactory:()Lorg/infinispan/commands/CommandsFactory;
      22: aload_1
      23: aload_2
      24: invokeinterface #22,  3           // InterfaceMethod org/infinispan/commands/CommandsFactory.buildReadOnlyManyCommand:(Ljava/util/Set;Ljava/util/function/Function;)Lorg/infinispan/commands/functional/ReadOnlyManyCommand;
      29: astore_3
      30: aload_0
      31: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
      34: invokevirtual #16                 // Method org/infinispan/functional/impl/FunctionalMapImpl.invCtxFactory:()Lorg/infinispan/context/InvocationContextFactory;
      37: iconst_0
      38: aload_1
      39: invokeinterface #23,  1           // InterfaceMethod java/util/Set.size:()I
      44: invokeinterface #17,  3           // InterfaceMethod org/infinispan/context/InvocationContextFactory.createInvocationContext:(ZI)Lorg/infinispan/context/InvocationContext;
      49: astore        4
      51: aload_0
      52: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
      55: invokevirtual #24                 // Method org/infinispan/functional/impl/FunctionalMapImpl.chain:()Lorg/infinispan/interceptors/InterceptorChain;
      58: aload         4
      60: aload_3
      61: invokevirtual #25                 // Method org/infinispan/interceptors/InterceptorChain.invoke:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/VisitableCommand;)Ljava/lang/Object;
      64: checkcast     #26                 // class java/util/stream/Stream
      67: invokestatic  #27                 // Method org/infinispan/functional/impl/Traversables.of:(Ljava/util/stream/Stream;)Lorg/infinispan/commons/api/functional/Traversable;
      70: areturn

  public org.infinispan.commons.api.functional.Traversable<K> keys();
    Code:
       0: getstatic     #8                  // Field log:Lorg/infinispan/util/logging/Log;
       3: ldc           #28                 // String Invoked keys(%s)
       5: aload_0
       6: getfield      #2                  // Field params:Lorg/infinispan/functional/impl/Params;
       9: invokeinterface #29,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      14: aload_0
      15: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
      18: getfield      #30                 // Field org/infinispan/functional/impl/FunctionalMapImpl.cache:Lorg/infinispan/AdvancedCache;
      21: invokeinterface #31,  1           // InterfaceMethod org/infinispan/AdvancedCache.keySet:()Lorg/infinispan/CacheSet;
      26: invokeinterface #32,  1           // InterfaceMethod org/infinispan/CacheSet.stream:()Lorg/infinispan/CacheStream;
      31: invokestatic  #27                 // Method org/infinispan/functional/impl/Traversables.of:(Ljava/util/stream/Stream;)Lorg/infinispan/commons/api/functional/Traversable;
      34: areturn

  public org.infinispan.commons.api.functional.Traversable<org.infinispan.commons.api.functional.EntryView$ReadEntryView<K, V>> entries();
    Code:
       0: getstatic     #8                  // Field log:Lorg/infinispan/util/logging/Log;
       3: ldc           #33                 // String Invoked entries(%s)
       5: aload_0
       6: getfield      #2                  // Field params:Lorg/infinispan/functional/impl/Params;
       9: invokeinterface #29,  3           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      14: aload_0
      15: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
      18: getfield      #30                 // Field org/infinispan/functional/impl/FunctionalMapImpl.cache:Lorg/infinispan/AdvancedCache;
      21: invokestatic  #34                 // Method org/infinispan/filter/AcceptAllKeyValueFilter.getInstance:()Lorg/infinispan/filter/AcceptAllKeyValueFilter;
      24: invokeinterface #35,  2           // InterfaceMethod org/infinispan/AdvancedCache.filterEntries:(Lorg/infinispan/filter/KeyValueFilter;)Lorg/infinispan/iteration/EntryIterable;
      29: invokeinterface #36,  1           // InterfaceMethod org/infinispan/iteration/EntryIterable.iterator:()Lorg/infinispan/commons/util/CloseableIterator;
      34: astore_1
      35: aload_1
      36: sipush        1024
      39: invokestatic  #38                 // Method java/util/Spliterators.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;
      42: iconst_0
      43: invokestatic  #39                 // Method java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;
      46: astore_2
      47: aload_2
      48: invokedynamic #40,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      53: invokeinterface #41,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      58: invokestatic  #27                 // Method org/infinispan/functional/impl/Traversables.of:(Ljava/util/stream/Stream;)Lorg/infinispan/commons/api/functional/Traversable;
      61: areturn

  public org.infinispan.commons.api.functional.FunctionalMap$ReadOnlyMap<K, V> withParams(org.infinispan.commons.api.functional.Param<?>...);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_1
       5: arraylength
       6: ifne          11
       9: aload_0
      10: areturn
      11: aload_0
      12: getfield      #2                  // Field params:Lorg/infinispan/functional/impl/Params;
      15: aload_1
      16: invokevirtual #42                 // Method org/infinispan/functional/impl/Params.containsAll:([Lorg/infinispan/commons/api/functional/Param;)Z
      19: ifeq          24
      22: aload_0
      23: areturn
      24: aload_0
      25: getfield      #2                  // Field params:Lorg/infinispan/functional/impl/Params;
      28: aload_1
      29: invokevirtual #43                 // Method org/infinispan/functional/impl/Params.addAll:([Lorg/infinispan/commons/api/functional/Param;)Lorg/infinispan/functional/impl/Params;
      32: aload_0
      33: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
      36: invokestatic  #44                 // Method create:(Lorg/infinispan/functional/impl/Params;Lorg/infinispan/functional/impl/FunctionalMapImpl;)Lorg/infinispan/commons/api/functional/FunctionalMap$ReadOnlyMap;
      39: areturn

  public void close() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #45                 // Method org/infinispan/functional/impl/AbstractFunctionalMap.close:()V
       4: return

  public org.infinispan.commons.api.functional.Status getStatus();
    Code:
       0: aload_0
       1: invokespecial #46                 // Method org/infinispan/functional/impl/AbstractFunctionalMap.getStatus:()Lorg/infinispan/commons/api/functional/Status;
       4: areturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: invokespecial #47                 // Method org/infinispan/functional/impl/AbstractFunctionalMap.getName:()Ljava/lang/String;
       4: areturn

  public org.infinispan.commons.api.functional.FunctionalMap withParams(org.infinispan.commons.api.functional.Param[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #48                 // Method withParams:([Lorg/infinispan/commons/api/functional/Param;)Lorg/infinispan/commons/api/functional/FunctionalMap$ReadOnlyMap;
       5: areturn

  private java.lang.Object lambda$eval$254(org.infinispan.context.InvocationContext, org.infinispan.commands.functional.ReadOnlyKeyCommand);
    Code:
       0: aload_0
       1: getfield      #13                 // Field fmap:Lorg/infinispan/functional/impl/FunctionalMapImpl;
       4: invokevirtual #24                 // Method org/infinispan/functional/impl/FunctionalMapImpl.chain:()Lorg/infinispan/interceptors/InterceptorChain;
       7: aload_1
       8: aload_2
       9: invokevirtual #25                 // Method org/infinispan/interceptors/InterceptorChain.invoke:(Lorg/infinispan/context/InvocationContext;Lorg/infinispan/commands/VisitableCommand;)Ljava/lang/Object;
      12: areturn

  static {};
    Code:
       0: ldc           #3                  // class org/infinispan/functional/impl/ReadOnlyMapImpl
       2: invokestatic  #49                 // Method org/infinispan/util/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/infinispan/util/logging/Log;
       5: putstatic     #8                  // Field log:Lorg/infinispan/util/logging/Log;
       8: return
}
