Compiled from "RepeatableReadEntry.java"
public class org.infinispan.container.entries.RepeatableReadEntry extends org.infinispan.container.entries.ReadCommittedEntry {
  private static final org.infinispan.util.logging.Log log;

  private static final boolean trace;

  public org.infinispan.container.entries.RepeatableReadEntry(java.lang.Object, java.lang.Object, org.infinispan.metadata.Metadata);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method org/infinispan/container/entries/ReadCommittedEntry."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lorg/infinispan/metadata/Metadata;)V
       7: return

  public void copyForUpdate();
    Code:
       0: aload_0
       1: getstatic     #2                  // Field org/infinispan/container/entries/ReadCommittedEntry$Flags.COPIED:Lorg/infinispan/container/entries/ReadCommittedEntry$Flags;
       4: invokevirtual #3                  // Method isFlagSet:(Lorg/infinispan/container/entries/ReadCommittedEntry$Flags;)Z
       7: ifeq          11
      10: return
      11: aload_0
      12: getstatic     #2                  // Field org/infinispan/container/entries/ReadCommittedEntry$Flags.COPIED:Lorg/infinispan/container/entries/ReadCommittedEntry$Flags;
      15: invokevirtual #4                  // Method setFlag:(Lorg/infinispan/container/entries/ReadCommittedEntry$Flags;)V
      18: aload_0
      19: aload_0
      20: getfield      #5                  // Field value:Ljava/lang/Object;
      23: putfield      #6                  // Field oldValue:Ljava/lang/Object;
      26: return

  public void performLocalWriteSkewCheck(org.infinispan.container.DataContainer, boolean);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #7                  // Field key:Ljava/lang/Object;
       5: invokeinterface #8,  2            // InterfaceMethod org/infinispan/container/DataContainer.get:(Ljava/lang/Object;)Lorg/infinispan/container/entries/InternalCacheEntry;
      10: astore_3
      11: aload_3
      12: ifnonnull     19
      15: aconst_null
      16: goto          25
      19: aload_3
      20: invokeinterface #9,  1            // InterfaceMethod org/infinispan/container/entries/InternalCacheEntry.getValue:()Ljava/lang/Object;
      25: astore        4
      27: iload_2
      28: ifeq          38
      31: aload_0
      32: getfield      #6                  // Field oldValue:Ljava/lang/Object;
      35: goto          42
      38: aload_0
      39: getfield      #5                  // Field value:Ljava/lang/Object;
      42: astore        5
      44: getstatic     #10                 // Field trace:Z
      47: ifeq          64
      50: getstatic     #11                 // Field log:Lorg/infinispan/util/logging/Log;
      53: ldc           #12                 // String Performing local write skew check. actualValue=%s, transactionValue=%s
      55: aload         4
      57: aload         5
      59: invokeinterface #13,  4           // InterfaceMethod org/infinispan/util/logging/Log.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      64: aload         4
      66: ifnull        102
      69: aload         4
      71: aload         5
      73: if_acmpeq     102
      76: getstatic     #11                 // Field log:Lorg/infinispan/util/logging/Log;
      79: aload_0
      80: invokevirtual #14                 // Method getKey:()Ljava/lang/Object;
      83: invokeinterface #15,  2           // InterfaceMethod org/infinispan/util/logging/Log.unableToCopyEntryForUpdate:(Ljava/lang/Object;)V
      88: new           #16                 // class org/infinispan/transaction/WriteSkewException
      91: dup
      92: ldc           #17                 // String Detected write skew.
      94: aload_0
      95: getfield      #7                  // Field key:Ljava/lang/Object;
      98: invokespecial #18                 // Method org/infinispan/transaction/WriteSkewException."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
     101: athrow
     102: aload         5
     104: ifnull        144
     107: aload_3
     108: ifnonnull     144
     111: aload_0
     112: invokevirtual #19                 // Method isCreated:()Z
     115: ifne          144
     118: getstatic     #11                 // Field log:Lorg/infinispan/util/logging/Log;
     121: aload_0
     122: invokevirtual #14                 // Method getKey:()Ljava/lang/Object;
     125: invokeinterface #15,  2           // InterfaceMethod org/infinispan/util/logging/Log.unableToCopyEntryForUpdate:(Ljava/lang/Object;)V
     130: new           #16                 // class org/infinispan/transaction/WriteSkewException
     133: dup
     134: ldc           #20                 // String Detected write skew - concurrent removal of entry!
     136: aload_0
     137: getfield      #7                  // Field key:Ljava/lang/Object;
     140: invokespecial #18                 // Method org/infinispan/transaction/WriteSkewException."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
     143: athrow
     144: return

  public boolean isNull();
    Code:
       0: aload_0
       1: getfield      #5                  // Field value:Ljava/lang/Object;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setSkipLookup(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: getstatic     #21                 // Field org/infinispan/container/entries/ReadCommittedEntry$Flags.SKIP_LOOKUP:Lorg/infinispan/container/entries/ReadCommittedEntry$Flags;
       5: invokevirtual #22                 // Method setFlag:(ZLorg/infinispan/container/entries/ReadCommittedEntry$Flags;)V
       8: return

  public boolean skipLookup();
    Code:
       0: aload_0
       1: getstatic     #21                 // Field org/infinispan/container/entries/ReadCommittedEntry$Flags.SKIP_LOOKUP:Lorg/infinispan/container/entries/ReadCommittedEntry$Flags;
       4: invokevirtual #3                  // Method isFlagSet:(Lorg/infinispan/container/entries/ReadCommittedEntry$Flags;)Z
       7: ireturn

  public org.infinispan.container.entries.RepeatableReadEntry clone();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method org/infinispan/container/entries/ReadCommittedEntry.clone:()Lorg/infinispan/container/entries/ReadCommittedEntry;
       4: checkcast     #24                 // class org/infinispan/container/entries/RepeatableReadEntry
       7: areturn

  public org.infinispan.container.entries.ReadCommittedEntry clone();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method clone:()Lorg/infinispan/container/entries/RepeatableReadEntry;
       4: areturn

  public org.infinispan.container.entries.CacheEntry clone();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method clone:()Lorg/infinispan/container/entries/RepeatableReadEntry;
       4: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method clone:()Lorg/infinispan/container/entries/RepeatableReadEntry;
       4: areturn

  static {};
    Code:
       0: ldc           #24                 // class org/infinispan/container/entries/RepeatableReadEntry
       2: invokestatic  #26                 // Method org/infinispan/util/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/infinispan/util/logging/Log;
       5: putstatic     #11                 // Field log:Lorg/infinispan/util/logging/Log;
       8: getstatic     #11                 // Field log:Lorg/infinispan/util/logging/Log;
      11: invokeinterface #27,  1           // InterfaceMethod org/infinispan/util/logging/Log.isTraceEnabled:()Z
      16: putstatic     #10                 // Field trace:Z
      19: return
}
