Compiled from "BoundedEquivalentConcurrentHashMapV8.java"
final class org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$EntrySpliterator<K, V> extends org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$Traverser<K, V> implements org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$ConcurrentHashMapSpliterator<java.util.Map$Entry<K, V>> {
  final org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8<K, V> map;

  long est;

  org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$EntrySpliterator(org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$Node<K, V>[], int, int, int, long, org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokespecial #1                  // Method org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Traverser."<init>":([Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;III)V
       9: aload_0
      10: aload         7
      12: putfield      #2                  // Field map:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8;
      15: aload_0
      16: lload         5
      18: putfield      #3                  // Field est:J
      21: return

  public org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$ConcurrentHashMapSpliterator<java.util.Map$Entry<K, V>> trySplit();
    Code:
       0: aload_0
       1: getfield      #4                  // Field baseIndex:I
       4: dup
       5: istore_1
       6: aload_0
       7: getfield      #5                  // Field baseLimit:I
      10: dup
      11: istore_2
      12: iadd
      13: iconst_1
      14: iushr
      15: dup
      16: istore_3
      17: iload_1
      18: if_icmpgt     25
      21: aconst_null
      22: goto          62
      25: new           #6                  // class org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$EntrySpliterator
      28: dup
      29: aload_0
      30: getfield      #7                  // Field tab:[Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;
      33: aload_0
      34: getfield      #8                  // Field baseSize:I
      37: aload_0
      38: iload_3
      39: dup_x1
      40: putfield      #5                  // Field baseLimit:I
      43: iload_2
      44: aload_0
      45: dup
      46: getfield      #3                  // Field est:J
      49: iconst_1
      50: lushr
      51: dup2_x1
      52: putfield      #3                  // Field est:J
      55: aload_0
      56: getfield      #2                  // Field map:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8;
      59: invokespecial #9                  // Method "<init>":([Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;IIIJLorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8;)V
      62: areturn

  public void forEachRemaining(java.util.function.Consumer<? super java.util.Map$Entry<K, V>>);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #10                 // class java/lang/NullPointerException
       7: dup
       8: invokespecial #11                 // Method java/lang/NullPointerException."<init>":()V
      11: athrow
      12: aload_0
      13: invokevirtual #12                 // Method advance:()Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;
      16: dup
      17: astore_2
      18: ifnull        58
      21: aload_2
      22: getfield      #13                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.val:Ljava/lang/Object;
      25: astore_3
      26: aload_3
      27: getstatic     #14                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8.NULL_VALUE:Ljava/lang/Object;
      30: if_acmpeq     55
      33: aload_1
      34: new           #15                 // class org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$MapEntry
      37: dup
      38: aload_2
      39: getfield      #16                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.key:Ljava/lang/Object;
      42: aload_3
      43: aload_0
      44: getfield      #2                  // Field map:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8;
      47: invokespecial #17                 // Method org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$MapEntry."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8;)V
      50: invokeinterface #18,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      55: goto          12
      58: return

  public boolean tryAdvance(java.util.function.Consumer<? super java.util.Map$Entry<K, V>>);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #10                 // class java/lang/NullPointerException
       7: dup
       8: invokespecial #11                 // Method java/lang/NullPointerException."<init>":()V
      11: athrow
      12: aload_0
      13: invokevirtual #12                 // Method advance:()Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;
      16: dup
      17: astore_2
      18: ifnull        60
      21: aload_2
      22: getfield      #13                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.val:Ljava/lang/Object;
      25: astore_3
      26: aload_3
      27: getstatic     #14                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8.NULL_VALUE:Ljava/lang/Object;
      30: if_acmpeq     57
      33: aload_1
      34: new           #15                 // class org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$MapEntry
      37: dup
      38: aload_2
      39: getfield      #16                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.key:Ljava/lang/Object;
      42: aload_3
      43: aload_0
      44: getfield      #2                  // Field map:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8;
      47: invokespecial #17                 // Method org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$MapEntry."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8;)V
      50: invokeinterface #18,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      55: iconst_1
      56: ireturn
      57: goto          12
      60: iconst_0
      61: ireturn

  public long estimateSize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field est:J
       4: lreturn
}
