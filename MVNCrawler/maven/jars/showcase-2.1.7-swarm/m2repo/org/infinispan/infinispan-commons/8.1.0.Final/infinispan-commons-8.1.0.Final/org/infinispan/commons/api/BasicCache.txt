Compiled from "BasicCache.java"
public interface org.infinispan.commons.api.BasicCache<K, V> extends org.infinispan.commons.api.AsyncCache<K, V>, java.util.concurrent.ConcurrentMap<K, V>, org.infinispan.commons.api.Lifecycle {
  public abstract java.lang.String getName();

  public abstract java.lang.String getVersion();

  public abstract V put(K, V);

  public abstract V put(K, V, long, java.util.concurrent.TimeUnit);

  public abstract V putIfAbsent(K, V, long, java.util.concurrent.TimeUnit);

  public abstract void putAll(java.util.Map<? extends K, ? extends V>, long, java.util.concurrent.TimeUnit);

  public abstract V replace(K, V, long, java.util.concurrent.TimeUnit);

  public abstract boolean replace(K, V, V, long, java.util.concurrent.TimeUnit);

  public abstract V put(K, V, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit);

  public abstract V putIfAbsent(K, V, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit);

  public abstract void putAll(java.util.Map<? extends K, ? extends V>, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit);

  public abstract V replace(K, V, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit);

  public abstract boolean replace(K, V, V, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit);

  public abstract V remove(java.lang.Object);
}
