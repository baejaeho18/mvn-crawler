Compiled from "FunctionalMap.java"
public interface org.infinispan.commons.api.functional.FunctionalMap$ReadWriteMap<K, V> extends org.infinispan.commons.api.functional.FunctionalMap<K, V> {
  public abstract org.infinispan.commons.api.functional.FunctionalMap$ReadWriteMap<K, V> withParams(org.infinispan.commons.api.functional.Param<?>...);

  public abstract <R> java.util.concurrent.CompletableFuture<R> eval(K, java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadWriteEntryView<K, V>, R>);

  public abstract <R> java.util.concurrent.CompletableFuture<R> eval(K, V, java.util.function.BiFunction<V, org.infinispan.commons.api.functional.EntryView$ReadWriteEntryView<K, V>, R>);

  public abstract <R> org.infinispan.commons.api.functional.Traversable<R> evalMany(java.util.Map<? extends K, ? extends V>, java.util.function.BiFunction<V, org.infinispan.commons.api.functional.EntryView$ReadWriteEntryView<K, V>, R>);

  public abstract <R> org.infinispan.commons.api.functional.Traversable<R> evalMany(java.util.Set<? extends K>, java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadWriteEntryView<K, V>, R>);

  public abstract <R> org.infinispan.commons.api.functional.Traversable<R> evalAll(java.util.function.Function<org.infinispan.commons.api.functional.EntryView$ReadWriteEntryView<K, V>, R>);

  public abstract org.infinispan.commons.api.functional.Listeners$ReadWriteListeners<K, V> listeners();

  public default org.infinispan.commons.api.functional.FunctionalMap withParams(org.infinispan.commons.api.functional.Param[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #1,  2            // InterfaceMethod withParams:([Lorg/infinispan/commons/api/functional/Param;)Lorg/infinispan/commons/api/functional/FunctionalMap$ReadWriteMap;
       7: areturn
}
