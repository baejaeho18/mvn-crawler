Compiled from "Traversable.java"
public interface org.infinispan.commons.api.functional.Traversable<T> {
  public abstract org.infinispan.commons.api.functional.Traversable<T> filter(java.util.function.Predicate<? super T>);

  public abstract <R> org.infinispan.commons.api.functional.Traversable<R> map(java.util.function.Function<? super T, ? extends R>);

  public abstract <R> org.infinispan.commons.api.functional.Traversable<R> flatMap(java.util.function.Function<? super T, ? extends org.infinispan.commons.api.functional.Traversable<? extends R>>);

  public abstract void forEach(java.util.function.Consumer<? super T>);

  public abstract T reduce(T, java.util.function.BinaryOperator<T>);

  public abstract java.util.Optional<T> reduce(java.util.function.BinaryOperator<T>);

  public abstract <U> U reduce(U, java.util.function.BiFunction<U, ? super T, U>, java.util.function.BinaryOperator<U>);

  public abstract <R> R collect(java.util.function.Supplier<R>, java.util.function.BiConsumer<R, ? super T>, java.util.function.BiConsumer<R, R>);

  public abstract <R, A> R collect(java.util.stream.Collector<? super T, A, R>);

  public default java.util.Optional<T> min(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // InterfaceMethod java/util/function/BinaryOperator.minBy:(Ljava/util/Comparator;)Ljava/util/function/BinaryOperator;
       5: invokeinterface #2,  2            // InterfaceMethod reduce:(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;
      10: areturn

  public default java.util.Optional<T> max(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // InterfaceMethod java/util/function/BinaryOperator.maxBy:(Ljava/util/Comparator;)Ljava/util/function/BinaryOperator;
       5: invokeinterface #2,  2            // InterfaceMethod reduce:(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;
      10: areturn

  public abstract long count();

  public abstract boolean anyMatch(java.util.function.Predicate<? super T>);

  public abstract boolean allMatch(java.util.function.Predicate<? super T>);

  public abstract boolean noneMatch(java.util.function.Predicate<? super T>);

  public abstract java.util.Optional<T> findAny();
}
