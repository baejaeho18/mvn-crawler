Compiled from "ConcurrentParallelHashMapV8.java"
public class org.infinispan.commons.util.concurrent.jdk8backported.ConcurrentParallelHashMapV8<K, V> extends org.infinispan.commons.util.concurrent.jdk8backported.EquivalentConcurrentHashMapV8<K, V> implements org.infinispan.commons.util.concurrent.ParallelIterableMap<K, V> {
  private static final long serialVersionUID;

  public org.infinispan.commons.util.concurrent.jdk8backported.ConcurrentParallelHashMapV8(org.infinispan.commons.equivalence.Equivalence<? super K>, org.infinispan.commons.equivalence.Equivalence<? super V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8."<init>":(Lorg/infinispan/commons/equivalence/Equivalence;Lorg/infinispan/commons/equivalence/Equivalence;)V
       6: return

  public org.infinispan.commons.util.concurrent.jdk8backported.ConcurrentParallelHashMapV8(int, org.infinispan.commons.equivalence.Equivalence<? super K>, org.infinispan.commons.equivalence.Equivalence<? super V>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokespecial #2                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8."<init>":(ILorg/infinispan/commons/equivalence/Equivalence;Lorg/infinispan/commons/equivalence/Equivalence;)V
       7: return

  public org.infinispan.commons.util.concurrent.jdk8backported.ConcurrentParallelHashMapV8(int, float, org.infinispan.commons.equivalence.Equivalence<? super K>, org.infinispan.commons.equivalence.Equivalence<? super V>);
    Code:
       0: aload_0
       1: iload_1
       2: fload_2
       3: aload_3
       4: aload         4
       6: invokespecial #3                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8."<init>":(IFLorg/infinispan/commons/equivalence/Equivalence;Lorg/infinispan/commons/equivalence/Equivalence;)V
       9: return

  public org.infinispan.commons.util.concurrent.jdk8backported.ConcurrentParallelHashMapV8(int, float, int, org.infinispan.commons.equivalence.Equivalence<? super K>, org.infinispan.commons.equivalence.Equivalence<? super V>);
    Code:
       0: aload_0
       1: iload_1
       2: fload_2
       3: iload_3
       4: aload         4
       6: aload         5
       8: invokespecial #4                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8."<init>":(IFILorg/infinispan/commons/equivalence/Equivalence;Lorg/infinispan/commons/equivalence/Equivalence;)V
      11: return

  public org.infinispan.commons.util.concurrent.jdk8backported.ConcurrentParallelHashMapV8(java.util.Map<? extends K, ? extends V>, org.infinispan.commons.equivalence.Equivalence<? super K>, org.infinispan.commons.equivalence.Equivalence<? super V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #5                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8."<init>":(Ljava/util/Map;Lorg/infinispan/commons/equivalence/Equivalence;Lorg/infinispan/commons/equivalence/Equivalence;)V
       7: return

  public void forEach(long, java.util.function.BiConsumer<? super K, ? super V>);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokespecial #6                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8.forEach:(JLjava/util/function/BiConsumer;)V
       6: return
}
