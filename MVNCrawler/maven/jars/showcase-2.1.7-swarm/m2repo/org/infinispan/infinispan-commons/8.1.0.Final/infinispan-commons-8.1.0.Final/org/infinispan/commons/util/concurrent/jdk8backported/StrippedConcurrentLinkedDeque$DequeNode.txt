Compiled from "StrippedConcurrentLinkedDeque.java"
class org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode<E> {
  volatile org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode<E> prev;

  volatile E item;

  volatile org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode<E> next;

  private static final sun.misc.Unsafe UNSAFE;

  private static final long prevOffset;

  private static final long itemOffset;

  private static final long nextOffset;

  org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public java.lang.String toString();
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #4                  // String DequeNode [item=
       9: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #6                  // Field item:Ljava/lang/Object;
      16: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #8                  // String ]
      21: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode(E);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
       7: aload_0
       8: getstatic     #11                 // Field itemOffset:J
      11: aload_1
      12: invokevirtual #12                 // Method sun/misc/Unsafe.putObject:(Ljava/lang/Object;JLjava/lang/Object;)V
      15: return

  void resetLazily(E);
    Code:
       0: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #11                 // Field itemOffset:J
       7: aload_1
       8: invokevirtual #12                 // Method sun/misc/Unsafe.putObject:(Ljava/lang/Object;JLjava/lang/Object;)V
      11: aload_0
      12: aconst_null
      13: invokevirtual #13                 // Method lazySetNext:(Lorg/infinispan/commons/util/concurrent/jdk8backported/StrippedConcurrentLinkedDeque$DequeNode;)V
      16: aload_0
      17: aconst_null
      18: invokevirtual #14                 // Method lazySetPrev:(Lorg/infinispan/commons/util/concurrent/jdk8backported/StrippedConcurrentLinkedDeque$DequeNode;)V
      21: return

  boolean casItem(E, E);
    Code:
       0: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #11                 // Field itemOffset:J
       7: aload_1
       8: aload_2
       9: invokevirtual #15                 // Method sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
      12: ireturn

  void lazySetNext(org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode<E>);
    Code:
       0: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #16                 // Field nextOffset:J
       7: aload_1
       8: invokevirtual #17                 // Method sun/misc/Unsafe.putOrderedObject:(Ljava/lang/Object;JLjava/lang/Object;)V
      11: return

  boolean casNext(org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode<E>, org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode<E>);
    Code:
       0: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #16                 // Field nextOffset:J
       7: aload_1
       8: aload_2
       9: invokevirtual #15                 // Method sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
      12: ireturn

  void lazySetPrev(org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode<E>);
    Code:
       0: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #18                 // Field prevOffset:J
       7: aload_1
       8: invokevirtual #17                 // Method sun/misc/Unsafe.putOrderedObject:(Ljava/lang/Object;JLjava/lang/Object;)V
      11: return

  boolean casPrev(org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode<E>, org.infinispan.commons.util.concurrent.jdk8backported.StrippedConcurrentLinkedDeque$DequeNode<E>);
    Code:
       0: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #18                 // Field prevOffset:J
       7: aload_1
       8: aload_2
       9: invokevirtual #15                 // Method sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
      12: ireturn

  static {};
    Code:
       0: invokestatic  #19                 // Method org/infinispan/commons/util/concurrent/jdk8backported/StrippedConcurrentLinkedDeque.getUnsafe:()Lsun/misc/Unsafe;
       3: putstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
       6: ldc           #20                 // class org/infinispan/commons/util/concurrent/jdk8backported/StrippedConcurrentLinkedDeque$DequeNode
       8: astore_0
       9: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
      12: aload_0
      13: ldc           #21                 // String prev
      15: invokevirtual #22                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      18: invokevirtual #23                 // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
      21: putstatic     #18                 // Field prevOffset:J
      24: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
      27: aload_0
      28: ldc           #24                 // String item
      30: invokevirtual #22                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      33: invokevirtual #23                 // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
      36: putstatic     #11                 // Field itemOffset:J
      39: getstatic     #10                 // Field UNSAFE:Lsun/misc/Unsafe;
      42: aload_0
      43: ldc           #25                 // String next
      45: invokevirtual #22                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      48: invokevirtual #23                 // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
      51: putstatic     #16                 // Field nextOffset:J
      54: goto          67
      57: astore_0
      58: new           #27                 // class java/lang/Error
      61: dup
      62: aload_0
      63: invokespecial #28                 // Method java/lang/Error."<init>":(Ljava/lang/Throwable;)V
      66: athrow
      67: return
    Exception table:
       from    to  target type
           0    54    57   Class java/lang/Exception
}
