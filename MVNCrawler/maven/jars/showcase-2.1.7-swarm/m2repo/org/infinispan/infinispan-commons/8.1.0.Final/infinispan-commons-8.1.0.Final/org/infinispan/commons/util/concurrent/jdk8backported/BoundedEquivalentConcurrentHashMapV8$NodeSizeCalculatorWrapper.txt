Compiled from "BoundedEquivalentConcurrentHashMapV8.java"
public final class org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$NodeSizeCalculatorWrapper<K, V> extends org.infinispan.commons.util.concurrent.jdk8backported.AbstractEntrySizeCalculatorHelper<K, V> {
  private final org.infinispan.commons.util.concurrent.jdk8backported.EntrySizeCalculator<? super K, ? super V> calculator;

  private final long nodeAverageSize;

  public org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$NodeSizeCalculatorWrapper(org.infinispan.commons.util.concurrent.jdk8backported.EntrySizeCalculator<? super K, ? super V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/infinispan/commons/util/concurrent/jdk8backported/AbstractEntrySizeCalculatorHelper."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field calculator:Lorg/infinispan/commons/util/concurrent/jdk8backported/EntrySizeCalculator;
       9: getstatic     #3                  // Field OBJECT_SIZE:I
      12: getstatic     #4                  // Field POINTER_SIZE:I
      15: iadd
      16: i2l
      17: lstore_2
      18: lload_2
      19: iconst_5
      20: getstatic     #4                  // Field POINTER_SIZE:I
      23: imul
      24: i2l
      25: ladd
      26: lstore_2
      27: lload_2
      28: ldc2_w        #5                  // long 4l
      31: ladd
      32: lstore_2
      33: aload_0
      34: invokespecial #7                  // Method calculateLRUNodeSize:()J
      37: lstore        4
      39: aload_0
      40: aload_0
      41: lload_2
      42: invokevirtual #8                  // Method roundUpToNearest8:(J)J
      45: lload         4
      47: ladd
      48: putfield      #9                  // Field nodeAverageSize:J
      51: return

  private long calculateLRUNodeSize();
    Code:
       0: getstatic     #3                  // Field OBJECT_SIZE:I
       3: getstatic     #4                  // Field POINTER_SIZE:I
       6: iadd
       7: i2l
       8: lstore_1
       9: lload_1
      10: iconst_2
      11: getstatic     #4                  // Field POINTER_SIZE:I
      14: imul
      15: i2l
      16: ladd
      17: lstore_1
      18: aload_0
      19: invokespecial #10                 // Method calculateDequeNodeSize:()J
      22: lstore_3
      23: lload_1
      24: lconst_1
      25: ladd
      26: lstore_1
      27: aload_0
      28: lload_1
      29: invokevirtual #8                  // Method roundUpToNearest8:(J)J
      32: lload_3
      33: ladd
      34: lreturn

  private long calculateDequeNodeSize();
    Code:
       0: getstatic     #3                  // Field OBJECT_SIZE:I
       3: getstatic     #4                  // Field POINTER_SIZE:I
       6: iadd
       7: i2l
       8: lstore_1
       9: lload_1
      10: iconst_3
      11: getstatic     #4                  // Field POINTER_SIZE:I
      14: imul
      15: i2l
      16: ladd
      17: lstore_1
      18: aload_0
      19: lload_1
      20: invokevirtual #8                  // Method roundUpToNearest8:(J)J
      23: lreturn

  public long calculateSize(K, V);
    Code:
       0: aload_0
       1: getfield      #2                  // Field calculator:Lorg/infinispan/commons/util/concurrent/jdk8backported/EntrySizeCalculator;
       4: aload_1
       5: aload_2
       6: invokeinterface #11,  3           // InterfaceMethod org/infinispan/commons/util/concurrent/jdk8backported/EntrySizeCalculator.calculateSize:(Ljava/lang/Object;Ljava/lang/Object;)J
      11: aload_0
      12: getfield      #9                  // Field nodeAverageSize:J
      15: ladd
      16: lstore_3
      17: lload_3
      18: lconst_0
      19: lcmp
      20: ifge          33
      23: new           #12                 // class java/lang/ArithmeticException
      26: dup
      27: ldc           #13                 // String Size overflow!
      29: invokespecial #14                 // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: lload_3
      34: lreturn
}
