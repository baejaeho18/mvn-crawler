Compiled from "EquivalentConcurrentHashMapV8.java"
final class org.infinispan.commons.util.concurrent.jdk8backported.EquivalentConcurrentHashMapV8$SearchMappingsTask<K, V, U> extends org.infinispan.commons.util.concurrent.jdk8backported.EquivalentConcurrentHashMapV8$BulkTask<K, V, U> {
  final java.util.function.BiFunction<? super K, ? super V, ? extends U> searchFunction;

  final java.util.concurrent.atomic.AtomicReference<U> result;

  org.infinispan.commons.util.concurrent.jdk8backported.EquivalentConcurrentHashMapV8$SearchMappingsTask(org.infinispan.commons.util.concurrent.jdk8backported.EquivalentConcurrentHashMapV8$BulkTask<K, V, ?>, int, int, int, org.infinispan.commons.util.concurrent.jdk8backported.EquivalentConcurrentHashMapV8$Node<K, V>[], java.util.function.BiFunction<? super K, ? super V, ? extends U>, java.util.concurrent.atomic.AtomicReference<U>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: aload         5
       8: invokespecial #1                  // Method org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$BulkTask."<init>":(Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$BulkTask;III[Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$Node;)V
      11: aload_0
      12: aload         6
      14: putfield      #2                  // Field searchFunction:Ljava/util/function/BiFunction;
      17: aload_0
      18: aload         7
      20: putfield      #3                  // Field result:Ljava/util/concurrent/atomic/AtomicReference;
      23: return

  public final U getRawResult();
    Code:
       0: aload_0
       1: getfield      #3                  // Field result:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: areturn

  public final void compute();
    Code:
       0: aload_0
       1: getfield      #2                  // Field searchFunction:Ljava/util/function/BiFunction;
       4: dup
       5: astore_1
       6: ifnull        166
       9: aload_0
      10: getfield      #3                  // Field result:Ljava/util/concurrent/atomic/AtomicReference;
      13: dup
      14: astore_2
      15: ifnull        166
      18: aload_0
      19: getfield      #5                  // Field baseIndex:I
      22: istore_3
      23: aload_0
      24: getfield      #6                  // Field batch:I
      27: ifle          102
      30: aload_0
      31: getfield      #7                  // Field baseLimit:I
      34: dup
      35: istore        4
      37: iload_3
      38: iadd
      39: iconst_1
      40: iushr
      41: dup
      42: istore        5
      44: iload_3
      45: if_icmple     102
      48: aload_2
      49: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      52: ifnull        56
      55: return
      56: aload_0
      57: iconst_1
      58: invokevirtual #8                  // Method addToPendingCount:(I)V
      61: new           #9                  // class org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$SearchMappingsTask
      64: dup
      65: aload_0
      66: aload_0
      67: dup
      68: getfield      #6                  // Field batch:I
      71: iconst_1
      72: iushr
      73: dup_x1
      74: putfield      #6                  // Field batch:I
      77: aload_0
      78: iload         5
      80: dup_x1
      81: putfield      #7                  // Field baseLimit:I
      84: iload         4
      86: aload_0
      87: getfield      #10                 // Field tab:[Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$Node;
      90: aload_1
      91: aload_2
      92: invokespecial #11                 // Method "<init>":(Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$BulkTask;III[Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$Node;Ljava/util/function/BiFunction;Ljava/util/concurrent/atomic/AtomicReference;)V
      95: invokevirtual #12                 // Method fork:()Ljava/util/concurrent/ForkJoinTask;
      98: pop
      99: goto          23
     102: aload_2
     103: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     106: ifnonnull     166
     109: aload_0
     110: invokevirtual #13                 // Method advance:()Lorg/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$Node;
     113: dup
     114: astore        4
     116: ifnonnull     126
     119: aload_0
     120: invokevirtual #14                 // Method propagateCompletion:()V
     123: goto          166
     126: aload_1
     127: aload         4
     129: getfield      #15                 // Field org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$Node.key:Ljava/lang/Object;
     132: aload         4
     134: getfield      #16                 // Field org/infinispan/commons/util/concurrent/jdk8backported/EquivalentConcurrentHashMapV8$Node.val:Ljava/lang/Object;
     137: invokeinterface #17,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     142: dup
     143: astore_3
     144: ifnull        163
     147: aload_2
     148: aconst_null
     149: aload_3
     150: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
     153: ifeq          166
     156: aload_0
     157: invokevirtual #19                 // Method quietlyCompleteRoot:()V
     160: goto          166
     163: goto          102
     166: return
}
