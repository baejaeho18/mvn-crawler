Compiled from "ConcurrentWeakKeyHashMap.java"
final class org.infinispan.commons.util.concurrent.ConcurrentWeakKeyHashMap$Segment<K, V> extends java.util.concurrent.locks.ReentrantLock {
  private static final long serialVersionUID;

  volatile transient int count;

  int modCount;

  int threshold;

  volatile transient org.infinispan.commons.util.concurrent.ConcurrentWeakKeyHashMap$HashEntry<K, V>[] table;

  final float loadFactor;

  volatile transient java.lang.ref.ReferenceQueue<java.lang.Object> refQueue;

  org.infinispan.commons.util.concurrent.ConcurrentWeakKeyHashMap$Segment(int, float);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
       4: aload_0
       5: fload_2
       6: putfield      #3                  // Field loadFactor:F
       9: aload_0
      10: iload_1
      11: invokestatic  #4                  // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.newArray:(I)[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      14: invokevirtual #5                  // Method setTable:([Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;)V
      17: return

  static <K, V> org.infinispan.commons.util.concurrent.ConcurrentWeakKeyHashMap$Segment<K, V>[] newArray(int);
    Code:
       0: iload_0
       1: anewarray     #6                  // class org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$Segment
       4: areturn

  private boolean keyEq(java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #7                  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       5: ireturn

  void setTable(org.infinispan.commons.util.concurrent.ConcurrentWeakKeyHashMap$HashEntry<K, V>[]);
    Code:
       0: aload_0
       1: aload_1
       2: arraylength
       3: i2f
       4: aload_0
       5: getfield      #3                  // Field loadFactor:F
       8: fmul
       9: f2i
      10: putfield      #8                  // Field threshold:I
      13: aload_0
      14: aload_1
      15: putfield      #9                  // Field table:[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      18: aload_0
      19: new           #10                 // class java/lang/ref/ReferenceQueue
      22: dup
      23: invokespecial #11                 // Method java/lang/ref/ReferenceQueue."<init>":()V
      26: putfield      #12                 // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      29: return

  org.infinispan.commons.util.concurrent.ConcurrentWeakKeyHashMap$HashEntry<K, V> getFirst(int);
    Code:
       0: aload_0
       1: getfield      #9                  // Field table:[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
       4: astore_2
       5: aload_2
       6: iload_1
       7: aload_2
       8: arraylength
       9: iconst_1
      10: isub
      11: iand
      12: aaload
      13: areturn

  org.infinispan.commons.util.concurrent.ConcurrentWeakKeyHashMap$HashEntry<K, V> newHashEntry(K, int, org.infinispan.commons.util.concurrent.ConcurrentWeakKeyHashMap$HashEntry<K, V>, V);
    Code:
       0: new           #13                 // class org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry
       3: dup
       4: aload_1
       5: iload_2
       6: aload_3
       7: aload         4
       9: aload_0
      10: getfield      #12                 // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      13: invokespecial #14                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry."<init>":(Ljava/lang/Object;ILorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
      16: areturn

  V readValueUnderLock(org.infinispan.commons.util.concurrent.ConcurrentWeakKeyHashMap$HashEntry<K, V>);
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method lock:()V
       4: aload_0
       5: invokevirtual #16                 // Method removeStale:()V
       8: aload_1
       9: invokevirtual #17                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.value:()Ljava/lang/Object;
      12: astore_2
      13: aload_0
      14: invokevirtual #18                 // Method unlock:()V
      17: aload_2
      18: areturn
      19: astore_3
      20: aload_0
      21: invokevirtual #18                 // Method unlock:()V
      24: aload_3
      25: athrow
    Exception table:
       from    to  target type
           4    13    19   any

  V get(java.lang.Object, int);
    Code:
       0: aload_0
       1: getfield      #19                 // Field count:I
       4: ifeq          69
       7: aload_0
       8: iload_2
       9: invokevirtual #20                 // Method getFirst:(I)Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      12: astore_3
      13: aload_3
      14: ifnull        69
      17: aload_3
      18: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
      21: iload_2
      22: if_icmpne     61
      25: aload_0
      26: aload_1
      27: aload_3
      28: invokevirtual #22                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.key:()Ljava/lang/Object;
      31: invokespecial #23                 // Method keyEq:(Ljava/lang/Object;Ljava/lang/Object;)Z
      34: ifeq          61
      37: aload_3
      38: getfield      #24                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.valueRef:Ljava/lang/Object;
      41: astore        4
      43: aload         4
      45: ifnull        55
      48: aload_3
      49: aload         4
      51: invokevirtual #25                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.dereferenceValue:(Ljava/lang/Object;)Ljava/lang/Object;
      54: areturn
      55: aload_0
      56: aload_3
      57: invokevirtual #26                 // Method readValueUnderLock:(Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;)Ljava/lang/Object;
      60: areturn
      61: aload_3
      62: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      65: astore_3
      66: goto          13
      69: aconst_null
      70: areturn

  boolean containsKey(java.lang.Object, int);
    Code:
       0: aload_0
       1: getfield      #19                 // Field count:I
       4: ifeq          47
       7: aload_0
       8: iload_2
       9: invokevirtual #20                 // Method getFirst:(I)Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      12: astore_3
      13: aload_3
      14: ifnull        47
      17: aload_3
      18: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
      21: iload_2
      22: if_icmpne     39
      25: aload_0
      26: aload_1
      27: aload_3
      28: invokevirtual #22                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.key:()Ljava/lang/Object;
      31: invokespecial #23                 // Method keyEq:(Ljava/lang/Object;Ljava/lang/Object;)Z
      34: ifeq          39
      37: iconst_1
      38: ireturn
      39: aload_3
      40: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      43: astore_3
      44: goto          13
      47: iconst_0
      48: ireturn

  boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #19                 // Field count:I
       4: ifeq          94
       7: aload_0
       8: getfield      #9                  // Field table:[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      11: astore_2
      12: aload_2
      13: arraylength
      14: istore_3
      15: iconst_0
      16: istore        4
      18: iload         4
      20: iload_3
      21: if_icmpge     94
      24: aload_2
      25: iload         4
      27: aaload
      28: astore        5
      30: aload         5
      32: ifnull        88
      35: aload         5
      37: getfield      #24                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.valueRef:Ljava/lang/Object;
      40: astore        6
      42: aload         6
      44: ifnonnull     58
      47: aload_0
      48: aload         5
      50: invokevirtual #26                 // Method readValueUnderLock:(Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;)Ljava/lang/Object;
      53: astore        7
      55: goto          67
      58: aload         5
      60: aload         6
      62: invokevirtual #25                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.dereferenceValue:(Ljava/lang/Object;)Ljava/lang/Object;
      65: astore        7
      67: aload_1
      68: aload         7
      70: invokevirtual #7                  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      73: ifeq          78
      76: iconst_1
      77: ireturn
      78: aload         5
      80: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      83: astore        5
      85: goto          30
      88: iinc          4, 1
      91: goto          18
      94: iconst_0
      95: ireturn

  boolean replace(K, int, V, V);
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method lock:()V
       4: aload_0
       5: invokevirtual #16                 // Method removeStale:()V
       8: aload_0
       9: iload_2
      10: invokevirtual #20                 // Method getFirst:(I)Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      13: astore        5
      15: aload         5
      17: ifnull        52
      20: aload         5
      22: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
      25: iload_2
      26: if_icmpne     42
      29: aload_0
      30: aload_1
      31: aload         5
      33: invokevirtual #22                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.key:()Ljava/lang/Object;
      36: invokespecial #23                 // Method keyEq:(Ljava/lang/Object;Ljava/lang/Object;)Z
      39: ifne          52
      42: aload         5
      44: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      47: astore        5
      49: goto          15
      52: iconst_0
      53: istore        6
      55: aload         5
      57: ifnull        82
      60: aload_3
      61: aload         5
      63: invokevirtual #17                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.value:()Ljava/lang/Object;
      66: invokevirtual #7                  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      69: ifeq          82
      72: iconst_1
      73: istore        6
      75: aload         5
      77: aload         4
      79: invokevirtual #28                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.setValue:(Ljava/lang/Object;)V
      82: iload         6
      84: istore        7
      86: aload_0
      87: invokevirtual #18                 // Method unlock:()V
      90: iload         7
      92: ireturn
      93: astore        8
      95: aload_0
      96: invokevirtual #18                 // Method unlock:()V
      99: aload         8
     101: athrow
    Exception table:
       from    to  target type
           4    86    93   any
          93    95    93   any

  V replace(K, int, V);
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method lock:()V
       4: aload_0
       5: invokevirtual #16                 // Method removeStale:()V
       8: aload_0
       9: iload_2
      10: invokevirtual #20                 // Method getFirst:(I)Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      13: astore        4
      15: aload         4
      17: ifnull        52
      20: aload         4
      22: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
      25: iload_2
      26: if_icmpne     42
      29: aload_0
      30: aload_1
      31: aload         4
      33: invokevirtual #22                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.key:()Ljava/lang/Object;
      36: invokespecial #23                 // Method keyEq:(Ljava/lang/Object;Ljava/lang/Object;)Z
      39: ifne          52
      42: aload         4
      44: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      47: astore        4
      49: goto          15
      52: aconst_null
      53: astore        5
      55: aload         4
      57: ifnull        73
      60: aload         4
      62: invokevirtual #17                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.value:()Ljava/lang/Object;
      65: astore        5
      67: aload         4
      69: aload_3
      70: invokevirtual #28                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.setValue:(Ljava/lang/Object;)V
      73: aload         5
      75: astore        6
      77: aload_0
      78: invokevirtual #18                 // Method unlock:()V
      81: aload         6
      83: areturn
      84: astore        7
      86: aload_0
      87: invokevirtual #18                 // Method unlock:()V
      90: aload         7
      92: athrow
    Exception table:
       from    to  target type
           4    77    84   any
          84    86    84   any

  V put(K, int, V, boolean);
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method lock:()V
       4: aload_0
       5: invokevirtual #16                 // Method removeStale:()V
       8: aload_0
       9: getfield      #19                 // Field count:I
      12: istore        5
      14: iload         5
      16: iinc          5, 1
      19: aload_0
      20: getfield      #8                  // Field threshold:I
      23: if_icmple     51
      26: aload_0
      27: invokevirtual #29                 // Method rehash:()I
      30: istore        6
      32: iload         6
      34: ifle          51
      37: aload_0
      38: iload         5
      40: iload         6
      42: isub
      43: dup
      44: istore        5
      46: iconst_1
      47: isub
      48: putfield      #19                 // Field count:I
      51: aload_0
      52: getfield      #9                  // Field table:[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      55: astore        6
      57: iload_2
      58: aload         6
      60: arraylength
      61: iconst_1
      62: isub
      63: iand
      64: istore        7
      66: aload         6
      68: iload         7
      70: aaload
      71: astore        8
      73: aload         8
      75: astore        9
      77: aload         9
      79: ifnull        114
      82: aload         9
      84: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
      87: iload_2
      88: if_icmpne     104
      91: aload_0
      92: aload_1
      93: aload         9
      95: invokevirtual #22                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.key:()Ljava/lang/Object;
      98: invokespecial #23                 // Method keyEq:(Ljava/lang/Object;Ljava/lang/Object;)Z
     101: ifne          114
     104: aload         9
     106: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
     109: astore        9
     111: goto          77
     114: aload         9
     116: ifnull        140
     119: aload         9
     121: invokevirtual #17                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.value:()Ljava/lang/Object;
     124: astore        10
     126: iload         4
     128: ifne          173
     131: aload         9
     133: aload_3
     134: invokevirtual #28                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.setValue:(Ljava/lang/Object;)V
     137: goto          173
     140: aconst_null
     141: astore        10
     143: aload_0
     144: dup
     145: getfield      #30                 // Field modCount:I
     148: iconst_1
     149: iadd
     150: putfield      #30                 // Field modCount:I
     153: aload         6
     155: iload         7
     157: aload_0
     158: aload_1
     159: iload_2
     160: aload         8
     162: aload_3
     163: invokevirtual #31                 // Method newHashEntry:(Ljava/lang/Object;ILorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;Ljava/lang/Object;)Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
     166: aastore
     167: aload_0
     168: iload         5
     170: putfield      #19                 // Field count:I
     173: aload         10
     175: astore        11
     177: aload_0
     178: invokevirtual #18                 // Method unlock:()V
     181: aload         11
     183: areturn
     184: astore        12
     186: aload_0
     187: invokevirtual #18                 // Method unlock:()V
     190: aload         12
     192: athrow
    Exception table:
       from    to  target type
           4   177   184   any
         184   186   184   any

  int rehash();
    Code:
       0: aload_0
       1: getfield      #9                  // Field table:[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iload_2
       9: ldc           #32                 // int 1073741824
      11: if_icmplt     16
      14: iconst_0
      15: ireturn
      16: iload_2
      17: iconst_1
      18: ishl
      19: invokestatic  #4                  // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.newArray:(I)[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      22: astore_3
      23: aload_0
      24: aload_3
      25: arraylength
      26: i2f
      27: aload_0
      28: getfield      #3                  // Field loadFactor:F
      31: fmul
      32: f2i
      33: putfield      #8                  // Field threshold:I
      36: aload_3
      37: arraylength
      38: iconst_1
      39: isub
      40: istore        4
      42: iconst_0
      43: istore        5
      45: iconst_0
      46: istore        6
      48: iload         6
      50: iload_2
      51: if_icmpge     237
      54: aload_1
      55: iload         6
      57: aaload
      58: astore        7
      60: aload         7
      62: ifnull        231
      65: aload         7
      67: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      70: astore        8
      72: aload         7
      74: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
      77: iload         4
      79: iand
      80: istore        9
      82: aload         8
      84: ifnonnull     96
      87: aload_3
      88: iload         9
      90: aload         7
      92: aastore
      93: goto          231
      96: aload         7
      98: astore        10
     100: iload         9
     102: istore        11
     104: aload         8
     106: astore        12
     108: aload         12
     110: ifnull        148
     113: aload         12
     115: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
     118: iload         4
     120: iand
     121: istore        13
     123: iload         13
     125: iload         11
     127: if_icmpeq     138
     130: iload         13
     132: istore        11
     134: aload         12
     136: astore        10
     138: aload         12
     140: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
     143: astore        12
     145: goto          108
     148: aload_3
     149: iload         11
     151: aload         10
     153: aastore
     154: aload         7
     156: astore        12
     158: aload         12
     160: aload         10
     162: if_acmpeq     231
     165: aload         12
     167: invokevirtual #22                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.key:()Ljava/lang/Object;
     170: astore        13
     172: aload         13
     174: ifnonnull     183
     177: iinc          5, 1
     180: goto          221
     183: aload         12
     185: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
     188: iload         4
     190: iand
     191: istore        14
     193: aload_3
     194: iload         14
     196: aaload
     197: astore        15
     199: aload_3
     200: iload         14
     202: aload_0
     203: aload         13
     205: aload         12
     207: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
     210: aload         15
     212: aload         12
     214: invokevirtual #17                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.value:()Ljava/lang/Object;
     217: invokevirtual #31                 // Method newHashEntry:(Ljava/lang/Object;ILorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;Ljava/lang/Object;)Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
     220: aastore
     221: aload         12
     223: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
     226: astore        12
     228: goto          158
     231: iinc          6, 1
     234: goto          48
     237: aload_0
     238: aload_3
     239: putfield      #9                  // Field table:[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
     242: iload         5
     244: ireturn

  V remove(java.lang.Object, int, java.lang.Object, boolean);
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method lock:()V
       4: iload         4
       6: ifne          13
       9: aload_0
      10: invokevirtual #16                 // Method removeStale:()V
      13: aload_0
      14: getfield      #19                 // Field count:I
      17: iconst_1
      18: isub
      19: istore        5
      21: aload_0
      22: getfield      #9                  // Field table:[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      25: astore        6
      27: iload_2
      28: aload         6
      30: arraylength
      31: iconst_1
      32: isub
      33: iand
      34: istore        7
      36: aload         6
      38: iload         7
      40: aaload
      41: astore        8
      43: aload         8
      45: astore        9
      47: aload         9
      49: ifnull        98
      52: aload_1
      53: aload         9
      55: getfield      #33                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.keyRef:Ljava/lang/Object;
      58: if_acmpeq     98
      61: iload         4
      63: ifne          88
      66: iload_2
      67: aload         9
      69: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
      72: if_icmpne     88
      75: aload_0
      76: aload_1
      77: aload         9
      79: invokevirtual #22                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.key:()Ljava/lang/Object;
      82: invokespecial #23                 // Method keyEq:(Ljava/lang/Object;Ljava/lang/Object;)Z
      85: ifne          98
      88: aload         9
      90: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      93: astore        9
      95: goto          47
      98: aconst_null
      99: astore        10
     101: aload         9
     103: ifnull        219
     106: aload         9
     108: invokevirtual #17                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.value:()Ljava/lang/Object;
     111: astore        11
     113: aload_3
     114: ifnull        126
     117: aload_3
     118: aload         11
     120: invokevirtual #7                  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     123: ifeq          219
     126: aload         11
     128: astore        10
     130: aload_0
     131: dup
     132: getfield      #30                 // Field modCount:I
     135: iconst_1
     136: iadd
     137: putfield      #30                 // Field modCount:I
     140: aload         9
     142: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
     145: astore        12
     147: aload         8
     149: astore        13
     151: aload         13
     153: aload         9
     155: if_acmpeq     206
     158: aload         13
     160: invokevirtual #22                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.key:()Ljava/lang/Object;
     163: astore        14
     165: aload         14
     167: ifnonnull     176
     170: iinc          5, -1
     173: goto          196
     176: aload_0
     177: aload         14
     179: aload         13
     181: getfield      #21                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.hash:I
     184: aload         12
     186: aload         13
     188: invokevirtual #17                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.value:()Ljava/lang/Object;
     191: invokevirtual #31                 // Method newHashEntry:(Ljava/lang/Object;ILorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;Ljava/lang/Object;)Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
     194: astore        12
     196: aload         13
     198: getfield      #27                 // Field org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry.next:Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
     201: astore        13
     203: goto          151
     206: aload         6
     208: iload         7
     210: aload         12
     212: aastore
     213: aload_0
     214: iload         5
     216: putfield      #19                 // Field count:I
     219: aload         10
     221: astore        11
     223: aload_0
     224: invokevirtual #18                 // Method unlock:()V
     227: aload         11
     229: areturn
     230: astore        15
     232: aload_0
     233: invokevirtual #18                 // Method unlock:()V
     236: aload         15
     238: athrow
    Exception table:
       from    to  target type
           4   223   230   any
         230   232   230   any

  final void removeStale();
    Code:
       0: aload_0
       1: getfield      #12                 // Field refQueue:Ljava/lang/ref/ReferenceQueue;
       4: invokevirtual #34                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       7: checkcast     #35                 // class org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$WeakKeyReference
      10: dup
      11: astore_1
      12: ifnull        33
      15: aload_0
      16: aload_1
      17: invokevirtual #36                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$WeakKeyReference.keyRef:()Ljava/lang/Object;
      20: aload_1
      21: invokevirtual #37                 // Method org/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$WeakKeyReference.keyHash:()I
      24: aconst_null
      25: iconst_1
      26: invokevirtual #38                 // Method remove:(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;
      29: pop
      30: goto          0
      33: return

  void clear();
    Code:
       0: aload_0
       1: getfield      #19                 // Field count:I
       4: ifeq          74
       7: aload_0
       8: invokevirtual #15                 // Method lock:()V
      11: aload_0
      12: getfield      #9                  // Field table:[Lorg/infinispan/commons/util/concurrent/ConcurrentWeakKeyHashMap$HashEntry;
      15: astore_1
      16: iconst_0
      17: istore_2
      18: iload_2
      19: aload_1
      20: arraylength
      21: if_icmpge     34
      24: aload_1
      25: iload_2
      26: aconst_null
      27: aastore
      28: iinc          2, 1
      31: goto          18
      34: aload_0
      35: dup
      36: getfield      #30                 // Field modCount:I
      39: iconst_1
      40: iadd
      41: putfield      #30                 // Field modCount:I
      44: aload_0
      45: new           #10                 // class java/lang/ref/ReferenceQueue
      48: dup
      49: invokespecial #11                 // Method java/lang/ref/ReferenceQueue."<init>":()V
      52: putfield      #12                 // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      55: aload_0
      56: iconst_0
      57: putfield      #19                 // Field count:I
      60: aload_0
      61: invokevirtual #18                 // Method unlock:()V
      64: goto          74
      67: astore_3
      68: aload_0
      69: invokevirtual #18                 // Method unlock:()V
      72: aload_3
      73: athrow
      74: return
    Exception table:
       from    to  target type
          11    60    67   any
}
