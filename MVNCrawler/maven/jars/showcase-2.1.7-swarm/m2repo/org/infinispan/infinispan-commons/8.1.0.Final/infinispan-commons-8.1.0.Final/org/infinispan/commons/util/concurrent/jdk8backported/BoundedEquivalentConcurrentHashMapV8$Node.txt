Compiled from "BoundedEquivalentConcurrentHashMapV8.java"
class org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$Node<K, V> implements java.util.Map$Entry<K, V> {
  final int hash;

  final K key;

  final org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$NodeEquivalence<K, V> nodeEq;

  volatile V val;

  volatile org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$Node<K, V> next;

  volatile org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$EvictionEntry<K, V> eviction;

  private static final sun.misc.Unsafe UNSAFE;

  private static final long evictionOffset;

  org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$Node(int, org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$NodeEquivalence<K, V>, K, V, org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$Node<K, V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field hash:I
       9: aload_0
      10: aload_3
      11: putfield      #3                  // Field key:Ljava/lang/Object;
      14: aload_0
      15: aload         4
      17: putfield      #4                  // Field val:Ljava/lang/Object;
      20: aload_0
      21: aload         5
      23: putfield      #5                  // Field next:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;
      26: aload_0
      27: aload_2
      28: putfield      #6                  // Field nodeEq:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence;
      31: return

  public final int hashCode(K, V);
    Code:
       0: aload_0
       1: getfield      #6                  // Field nodeEq:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence;
       4: getfield      #7                  // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence.keyEq:Lorg/infinispan/commons/equivalence/Equivalence;
       7: aload_1
       8: invokeinterface #8,  2            // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.hashCode:(Ljava/lang/Object;)I
      13: aload_0
      14: getfield      #6                  // Field nodeEq:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence;
      17: getfield      #9                  // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence.valueEq:Lorg/infinispan/commons/equivalence/Equivalence;
      20: aload_2
      21: invokeinterface #8,  2            // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.hashCode:(Ljava/lang/Object;)I
      26: ixor
      27: ireturn

  public final K getKey();
    Code:
       0: aload_0
       1: getfield      #3                  // Field key:Ljava/lang/Object;
       4: areturn

  public final V getValue();
    Code:
       0: aload_0
       1: getfield      #4                  // Field val:Ljava/lang/Object;
       4: areturn

  public final int hashCode();
    Code:
       0: new           #10                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #11                 // String hashCode is not supported!
       6: invokespecial #12                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public java.lang.String toString();
    Code:
       0: new           #13                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #15                 // String Node:
       9: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #3                  // Field key:Ljava/lang/Object;
      16: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #18                 // String =
      21: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #4                  // Field val:Ljava/lang/Object;
      28: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      31: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: areturn

  public final V setValue(V);
    Code:
       0: new           #10                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #20                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public final boolean equals(java.lang.Object);
    Code:
       0: new           #10                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #21                 // String equals is not supported!
       6: invokespecial #12                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$Node<K, V> find(int, java.lang.Object);
    Code:
       0: aload_0
       1: astore_3
       2: aload_2
       3: ifnull        59
       6: aload_3
       7: getfield      #2                  // Field hash:I
      10: iload_1
      11: if_icmpne     50
      14: aload_3
      15: getfield      #3                  // Field key:Ljava/lang/Object;
      18: dup
      19: astore        4
      21: aload_2
      22: if_acmpeq     48
      25: aload         4
      27: ifnull        50
      30: aload_0
      31: getfield      #6                  // Field nodeEq:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence;
      34: getfield      #7                  // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence.keyEq:Lorg/infinispan/commons/equivalence/Equivalence;
      37: aload         4
      39: aload_2
      40: invokeinterface #22,  3           // InterfaceMethod org/infinispan/commons/equivalence/Equivalence.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      45: ifeq          50
      48: aload_3
      49: areturn
      50: aload_3
      51: getfield      #5                  // Field next:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;
      54: dup
      55: astore_3
      56: ifnonnull     6
      59: aconst_null
      60: areturn

  void lazySetEviction(org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$EvictionEntry<K, V>);
    Code:
       0: getstatic     #23                 // Field UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #24                 // Field evictionOffset:J
       7: aload_1
       8: invokevirtual #25                 // Method sun/misc/Unsafe.putOrderedObject:(Ljava/lang/Object;JLjava/lang/Object;)V
      11: return

  static {};
    Code:
       0: invokestatic  #26                 // Method org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8.getUnsafe:()Lsun/misc/Unsafe;
       3: putstatic     #23                 // Field UNSAFE:Lsun/misc/Unsafe;
       6: ldc           #27                 // class org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node
       8: astore_0
       9: getstatic     #23                 // Field UNSAFE:Lsun/misc/Unsafe;
      12: aload_0
      13: ldc           #28                 // String eviction
      15: invokevirtual #29                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      18: invokevirtual #30                 // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
      21: putstatic     #24                 // Field evictionOffset:J
      24: goto          37
      27: astore_0
      28: new           #32                 // class java/lang/Error
      31: dup
      32: aload_0
      33: invokespecial #33                 // Method java/lang/Error."<init>":(Ljava/lang/Throwable;)V
      36: athrow
      37: return
    Exception table:
       from    to  target type
           0    24    27   Class java/lang/Exception
}
