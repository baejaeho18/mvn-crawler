Compiled from "BoundedEquivalentConcurrentHashMapV8.java"
final class org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$ForEachTransformedEntryTask<K, V, U> extends org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$BulkTask<K, V, java.lang.Void> {
  final java.util.function.Function<java.util.Map$Entry<K, V>, ? extends U> transformer;

  final java.util.function.Consumer<? super U> action;

  org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$ForEachTransformedEntryTask(org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$BulkTask<K, V, ?>, int, int, int, org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$Node<K, V>[], java.util.function.Function<java.util.Map$Entry<K, V>, ? extends U>, java.util.function.Consumer<? super U>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: aload         5
       8: invokespecial #1                  // Method org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$BulkTask."<init>":(Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$BulkTask;III[Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;)V
      11: aload_0
      12: aload         6
      14: putfield      #2                  // Field transformer:Ljava/util/function/Function;
      17: aload_0
      18: aload         7
      20: putfield      #3                  // Field action:Ljava/util/function/Consumer;
      23: return

  public final void compute();
    Code:
       0: aload_0
       1: getfield      #2                  // Field transformer:Ljava/util/function/Function;
       4: dup
       5: astore_1
       6: ifnull        170
       9: aload_0
      10: getfield      #3                  // Field action:Ljava/util/function/Consumer;
      13: dup
      14: astore_2
      15: ifnull        170
      18: aload_0
      19: getfield      #4                  // Field baseIndex:I
      22: istore_3
      23: aload_0
      24: getfield      #5                  // Field batch:I
      27: ifle          94
      30: aload_0
      31: getfield      #6                  // Field baseLimit:I
      34: dup
      35: istore        4
      37: iload_3
      38: iadd
      39: iconst_1
      40: iushr
      41: dup
      42: istore        5
      44: iload_3
      45: if_icmple     94
      48: aload_0
      49: iconst_1
      50: invokevirtual #7                  // Method addToPendingCount:(I)V
      53: new           #8                  // class org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$ForEachTransformedEntryTask
      56: dup
      57: aload_0
      58: aload_0
      59: dup
      60: getfield      #5                  // Field batch:I
      63: iconst_1
      64: iushr
      65: dup_x1
      66: putfield      #5                  // Field batch:I
      69: aload_0
      70: iload         5
      72: dup_x1
      73: putfield      #6                  // Field baseLimit:I
      76: iload         4
      78: aload_0
      79: getfield      #9                  // Field tab:[Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;
      82: aload_1
      83: aload_2
      84: invokespecial #10                 // Method "<init>":(Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$BulkTask;III[Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;Ljava/util/function/Function;Ljava/util/function/Consumer;)V
      87: invokevirtual #11                 // Method fork:()Ljava/util/concurrent/ForkJoinTask;
      90: pop
      91: goto          23
      94: aload_0
      95: invokevirtual #12                 // Method advance:()Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;
      98: dup
      99: astore_3
     100: ifnull        166
     103: aload_3
     104: getfield      #13                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.val:Ljava/lang/Object;
     107: astore        4
     109: aload         4
     111: getstatic     #14                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8.NULL_VALUE:Ljava/lang/Object;
     114: if_acmpeq     163
     117: new           #15                 // class org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node
     120: dup
     121: aload_3
     122: getfield      #16                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.hash:I
     125: aload_3
     126: getfield      #17                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.nodeEq:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence;
     129: aload_3
     130: getfield      #18                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.key:Ljava/lang/Object;
     133: aload         4
     135: aconst_null
     136: invokespecial #19                 // Method org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node."<init>":(ILorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence;Ljava/lang/Object;Ljava/lang/Object;Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;)V
     139: astore        5
     141: aload_1
     142: aload         5
     144: invokeinterface #20,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     149: dup
     150: astore        6
     152: ifnull        163
     155: aload_2
     156: aload         6
     158: invokeinterface #21,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
     163: goto          94
     166: aload_0
     167: invokevirtual #22                 // Method propagateCompletion:()V
     170: return
}
