Compiled from "BoundedEquivalentConcurrentHashMapV8.java"
final class org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$ForEachEntryTask<K, V> extends org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$BulkTask<K, V, java.lang.Void> {
  final java.util.function.Consumer<? super java.util.Map$Entry<K, V>> action;

  org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$ForEachEntryTask(org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$BulkTask<K, V, ?>, int, int, int, org.infinispan.commons.util.concurrent.jdk8backported.BoundedEquivalentConcurrentHashMapV8$Node<K, V>[], java.util.function.Consumer<? super java.util.Map$Entry<K, V>>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: aload         5
       8: invokespecial #1                  // Method org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$BulkTask."<init>":(Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$BulkTask;III[Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;)V
      11: aload_0
      12: aload         6
      14: putfield      #2                  // Field action:Ljava/util/function/Consumer;
      17: return

  public final void compute();
    Code:
       0: aload_0
       1: getfield      #2                  // Field action:Ljava/util/function/Consumer;
       4: dup
       5: astore_1
       6: ifnull        141
       9: aload_0
      10: getfield      #3                  // Field baseIndex:I
      13: istore_2
      14: aload_0
      15: getfield      #4                  // Field batch:I
      18: ifle          82
      21: aload_0
      22: getfield      #5                  // Field baseLimit:I
      25: dup
      26: istore_3
      27: iload_2
      28: iadd
      29: iconst_1
      30: iushr
      31: dup
      32: istore        4
      34: iload_2
      35: if_icmple     82
      38: aload_0
      39: iconst_1
      40: invokevirtual #6                  // Method addToPendingCount:(I)V
      43: new           #7                  // class org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$ForEachEntryTask
      46: dup
      47: aload_0
      48: aload_0
      49: dup
      50: getfield      #4                  // Field batch:I
      53: iconst_1
      54: iushr
      55: dup_x1
      56: putfield      #4                  // Field batch:I
      59: aload_0
      60: iload         4
      62: dup_x1
      63: putfield      #5                  // Field baseLimit:I
      66: iload_3
      67: aload_0
      68: getfield      #8                  // Field tab:[Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;
      71: aload_1
      72: invokespecial #9                  // Method "<init>":(Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$BulkTask;III[Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;Ljava/util/function/Consumer;)V
      75: invokevirtual #10                 // Method fork:()Ljava/util/concurrent/ForkJoinTask;
      78: pop
      79: goto          14
      82: aload_0
      83: invokevirtual #11                 // Method advance:()Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;
      86: dup
      87: astore_2
      88: ifnull        137
      91: aload_2
      92: getfield      #12                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.val:Ljava/lang/Object;
      95: astore_3
      96: aload_3
      97: getstatic     #13                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8.NULL_VALUE:Ljava/lang/Object;
     100: if_acmpeq     134
     103: new           #14                 // class org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node
     106: dup
     107: aload_2
     108: getfield      #15                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.hash:I
     111: aload_2
     112: getfield      #16                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.nodeEq:Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence;
     115: aload_2
     116: getfield      #17                 // Field org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node.key:Ljava/lang/Object;
     119: aload_3
     120: aconst_null
     121: invokespecial #18                 // Method org/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node."<init>":(ILorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$NodeEquivalence;Ljava/lang/Object;Ljava/lang/Object;Lorg/infinispan/commons/util/concurrent/jdk8backported/BoundedEquivalentConcurrentHashMapV8$Node;)V
     124: astore        4
     126: aload_1
     127: aload         4
     129: invokeinterface #19,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
     134: goto          82
     137: aload_0
     138: invokevirtual #20                 // Method propagateCompletion:()V
     141: return
}
