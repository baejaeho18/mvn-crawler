Compiled from "JsonParserImpl.java"
public class org.glassfish.json.JsonParserImpl implements javax.json.stream.JsonParser {
  private org.glassfish.json.JsonParserImpl$Context currentContext;

  private javax.json.stream.JsonParser$Event currentEvent;

  private final org.glassfish.json.JsonParserImpl$Stack stack;

  private final org.glassfish.json.JsonParserImpl$StateIterator stateIterator;

  private final org.glassfish.json.JsonTokenizer tokenizer;

  public org.glassfish.json.JsonParserImpl(java.io.Reader, org.glassfish.json.api.BufferPool);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class org/glassfish/json/JsonParserImpl$NoneContext
       8: dup
       9: aload_0
      10: aconst_null
      11: invokespecial #7                  // Method org/glassfish/json/JsonParserImpl$NoneContext."<init>":(Lorg/glassfish/json/JsonParserImpl;Lorg/glassfish/json/JsonParserImpl$1;)V
      14: putfield      #1                  // Field currentContext:Lorg/glassfish/json/JsonParserImpl$Context;
      17: aload_0
      18: new           #8                  // class org/glassfish/json/JsonParserImpl$Stack
      21: dup
      22: aconst_null
      23: invokespecial #9                  // Method org/glassfish/json/JsonParserImpl$Stack."<init>":(Lorg/glassfish/json/JsonParserImpl$1;)V
      26: putfield      #4                  // Field stack:Lorg/glassfish/json/JsonParserImpl$Stack;
      29: aload_0
      30: new           #10                 // class org/glassfish/json/JsonTokenizer
      33: dup
      34: aload_1
      35: aload_2
      36: invokespecial #11                 // Method org/glassfish/json/JsonTokenizer."<init>":(Ljava/io/Reader;Lorg/glassfish/json/api/BufferPool;)V
      39: putfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
      42: aload_0
      43: new           #13                 // class org/glassfish/json/JsonParserImpl$StateIterator
      46: dup
      47: aload_0
      48: aconst_null
      49: invokespecial #14                 // Method org/glassfish/json/JsonParserImpl$StateIterator."<init>":(Lorg/glassfish/json/JsonParserImpl;Lorg/glassfish/json/JsonParserImpl$1;)V
      52: putfield      #15                 // Field stateIterator:Lorg/glassfish/json/JsonParserImpl$StateIterator;
      55: return

  public org.glassfish.json.JsonParserImpl(java.io.InputStream, org.glassfish.json.api.BufferPool);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class org/glassfish/json/JsonParserImpl$NoneContext
       8: dup
       9: aload_0
      10: aconst_null
      11: invokespecial #7                  // Method org/glassfish/json/JsonParserImpl$NoneContext."<init>":(Lorg/glassfish/json/JsonParserImpl;Lorg/glassfish/json/JsonParserImpl$1;)V
      14: putfield      #1                  // Field currentContext:Lorg/glassfish/json/JsonParserImpl$Context;
      17: aload_0
      18: new           #8                  // class org/glassfish/json/JsonParserImpl$Stack
      21: dup
      22: aconst_null
      23: invokespecial #9                  // Method org/glassfish/json/JsonParserImpl$Stack."<init>":(Lorg/glassfish/json/JsonParserImpl$1;)V
      26: putfield      #4                  // Field stack:Lorg/glassfish/json/JsonParserImpl$Stack;
      29: new           #16                 // class org/glassfish/json/UnicodeDetectingInputStream
      32: dup
      33: aload_1
      34: invokespecial #17                 // Method org/glassfish/json/UnicodeDetectingInputStream."<init>":(Ljava/io/InputStream;)V
      37: astore_3
      38: aload_0
      39: new           #10                 // class org/glassfish/json/JsonTokenizer
      42: dup
      43: new           #18                 // class java/io/InputStreamReader
      46: dup
      47: aload_3
      48: aload_3
      49: invokevirtual #19                 // Method org/glassfish/json/UnicodeDetectingInputStream.getCharset:()Ljava/nio/charset/Charset;
      52: invokespecial #20                 // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      55: aload_2
      56: invokespecial #11                 // Method org/glassfish/json/JsonTokenizer."<init>":(Ljava/io/Reader;Lorg/glassfish/json/api/BufferPool;)V
      59: putfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
      62: aload_0
      63: new           #13                 // class org/glassfish/json/JsonParserImpl$StateIterator
      66: dup
      67: aload_0
      68: aconst_null
      69: invokespecial #14                 // Method org/glassfish/json/JsonParserImpl$StateIterator."<init>":(Lorg/glassfish/json/JsonParserImpl;Lorg/glassfish/json/JsonParserImpl$1;)V
      72: putfield      #15                 // Field stateIterator:Lorg/glassfish/json/JsonParserImpl$StateIterator;
      75: return

  public org.glassfish.json.JsonParserImpl(java.io.InputStream, java.nio.charset.Charset, org.glassfish.json.api.BufferPool);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class org/glassfish/json/JsonParserImpl$NoneContext
       8: dup
       9: aload_0
      10: aconst_null
      11: invokespecial #7                  // Method org/glassfish/json/JsonParserImpl$NoneContext."<init>":(Lorg/glassfish/json/JsonParserImpl;Lorg/glassfish/json/JsonParserImpl$1;)V
      14: putfield      #1                  // Field currentContext:Lorg/glassfish/json/JsonParserImpl$Context;
      17: aload_0
      18: new           #8                  // class org/glassfish/json/JsonParserImpl$Stack
      21: dup
      22: aconst_null
      23: invokespecial #9                  // Method org/glassfish/json/JsonParserImpl$Stack."<init>":(Lorg/glassfish/json/JsonParserImpl$1;)V
      26: putfield      #4                  // Field stack:Lorg/glassfish/json/JsonParserImpl$Stack;
      29: aload_0
      30: new           #10                 // class org/glassfish/json/JsonTokenizer
      33: dup
      34: new           #18                 // class java/io/InputStreamReader
      37: dup
      38: aload_1
      39: aload_2
      40: invokespecial #20                 // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      43: aload_3
      44: invokespecial #11                 // Method org/glassfish/json/JsonTokenizer."<init>":(Ljava/io/Reader;Lorg/glassfish/json/api/BufferPool;)V
      47: putfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
      50: aload_0
      51: new           #13                 // class org/glassfish/json/JsonParserImpl$StateIterator
      54: dup
      55: aload_0
      56: aconst_null
      57: invokespecial #14                 // Method org/glassfish/json/JsonParserImpl$StateIterator."<init>":(Lorg/glassfish/json/JsonParserImpl;Lorg/glassfish/json/JsonParserImpl$1;)V
      60: putfield      #15                 // Field stateIterator:Lorg/glassfish/json/JsonParserImpl$StateIterator;
      63: return

  public java.lang.String getString();
    Code:
       0: aload_0
       1: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #21                 // Field javax/json/stream/JsonParser$Event.KEY_NAME:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpeq     30
      10: aload_0
      11: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
      14: getstatic     #22                 // Field javax/json/stream/JsonParser$Event.VALUE_STRING:Ljavax/json/stream/JsonParser$Event;
      17: if_acmpeq     30
      20: aload_0
      21: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
      24: getstatic     #23                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
      27: if_acmpne     38
      30: aload_0
      31: getfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
      34: invokevirtual #24                 // Method org/glassfish/json/JsonTokenizer.getValue:()Ljava/lang/String;
      37: areturn
      38: new           #25                 // class java/lang/IllegalStateException
      41: dup
      42: new           #26                 // class java/lang/StringBuilder
      45: dup
      46: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      49: ldc           #28                 // String JsonParser#getString() is valid only KEY_NAME, VALUE_STRING, VALUE_NUMBER parser states. But current parser state is
      51: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: aload_0
      55: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
      58: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      61: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: invokespecial #32                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      67: athrow

  public boolean isIntegralNumber();
    Code:
       0: aload_0
       1: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #23                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpeq     40
      10: new           #25                 // class java/lang/IllegalStateException
      13: dup
      14: new           #26                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #33                 // String JsonParser#isIntegralNumber() is valid only VALUE_NUMBER parser state. But current parser state is
      23: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
      30: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #32                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: getfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
      44: invokevirtual #34                 // Method org/glassfish/json/JsonTokenizer.isIntegral:()Z
      47: ireturn

  public int getInt();
    Code:
       0: aload_0
       1: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #23                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpeq     40
      10: new           #25                 // class java/lang/IllegalStateException
      13: dup
      14: new           #26                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #35                 // String JsonParser#getNumberType() is valid only VALUE_NUMBER parser state. But current parser state is
      23: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
      30: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #32                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: getfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
      44: invokevirtual #36                 // Method org/glassfish/json/JsonTokenizer.getInt:()I
      47: ireturn

  public long getLong();
    Code:
       0: aload_0
       1: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #23                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpeq     40
      10: new           #25                 // class java/lang/IllegalStateException
      13: dup
      14: new           #26                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #35                 // String JsonParser#getNumberType() is valid only VALUE_NUMBER parser state. But current parser state is
      23: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
      30: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #32                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: getfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
      44: invokevirtual #37                 // Method org/glassfish/json/JsonTokenizer.getBigDecimal:()Ljava/math/BigDecimal;
      47: invokevirtual #38                 // Method java/math/BigDecimal.longValue:()J
      50: lreturn

  public java.math.BigDecimal getBigDecimal();
    Code:
       0: aload_0
       1: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #23                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpeq     40
      10: new           #25                 // class java/lang/IllegalStateException
      13: dup
      14: new           #26                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #35                 // String JsonParser#getNumberType() is valid only VALUE_NUMBER parser state. But current parser state is
      23: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
      30: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #32                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: getfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
      44: invokevirtual #37                 // Method org/glassfish/json/JsonTokenizer.getBigDecimal:()Ljava/math/BigDecimal;
      47: areturn

  public javax.json.stream.JsonLocation getLocation();
    Code:
       0: aload_0
       1: getfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
       4: invokevirtual #39                 // Method org/glassfish/json/JsonTokenizer.getLocation:()Ljavax/json/stream/JsonLocation;
       7: areturn

  public javax.json.stream.JsonLocation getLastCharLocation();
    Code:
       0: aload_0
       1: getfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
       4: invokevirtual #40                 // Method org/glassfish/json/JsonTokenizer.getLastCharLocation:()Ljavax/json/stream/JsonLocation;
       7: areturn

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #15                 // Field stateIterator:Lorg/glassfish/json/JsonParserImpl$StateIterator;
       4: invokevirtual #41                 // Method org/glassfish/json/JsonParserImpl$StateIterator.hasNext:()Z
       7: ireturn

  public javax.json.stream.JsonParser$Event next();
    Code:
       0: aload_0
       1: getfield      #15                 // Field stateIterator:Lorg/glassfish/json/JsonParserImpl$StateIterator;
       4: invokevirtual #42                 // Method org/glassfish/json/JsonParserImpl$StateIterator.next:()Ljavax/json/stream/JsonParser$Event;
       7: areturn

  private org.glassfish.json.JsonTokenizer$JsonToken nextToken();
    Code:
       0: aload_0
       1: getfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
       4: invokevirtual #43                 // Method org/glassfish/json/JsonTokenizer.nextToken:()Lorg/glassfish/json/JsonTokenizer$JsonToken;
       7: areturn
       8: astore_1
       9: new           #45                 // class javax/json/JsonException
      12: dup
      13: ldc           #46                 // String I/O error while moving parser to next state
      15: aload_1
      16: invokespecial #47                 // Method javax/json/JsonException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      19: athrow
    Exception table:
       from    to  target type
           0     7     8   Class java/io/IOException

  public void close();
    Code:
       0: aload_0
       1: getfield      #12                 // Field tokenizer:Lorg/glassfish/json/JsonTokenizer;
       4: invokevirtual #48                 // Method org/glassfish/json/JsonTokenizer.close:()V
       7: goto          22
      10: astore_1
      11: new           #45                 // class javax/json/JsonException
      14: dup
      15: ldc           #49                 // String I/O error while closing JSON tokenizer
      17: aload_1
      18: invokespecial #47                 // Method javax/json/JsonException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      21: athrow
      22: return
    Exception table:
       from    to  target type
           0     7    10   Class java/io/IOException

  static org.glassfish.json.JsonParserImpl$Stack access$300(org.glassfish.json.JsonParserImpl);
    Code:
       0: aload_0
       1: getfield      #4                  // Field stack:Lorg/glassfish/json/JsonParserImpl$Stack;
       4: areturn

  static javax.json.stream.JsonParser$Event access$500(org.glassfish.json.JsonParserImpl);
    Code:
       0: aload_0
       1: getfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
       4: areturn

  static org.glassfish.json.JsonTokenizer$JsonToken access$600(org.glassfish.json.JsonParserImpl);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method nextToken:()Lorg/glassfish/json/JsonTokenizer$JsonToken;
       4: areturn

  static javax.json.stream.JsonParser$Event access$502(org.glassfish.json.JsonParserImpl, javax.json.stream.JsonParser$Event);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #3                  // Field currentEvent:Ljavax/json/stream/JsonParser$Event;
       6: areturn

  static org.glassfish.json.JsonParserImpl$Context access$700(org.glassfish.json.JsonParserImpl);
    Code:
       0: aload_0
       1: getfield      #1                  // Field currentContext:Lorg/glassfish/json/JsonParserImpl$Context;
       4: areturn

  static org.glassfish.json.JsonParserImpl$Context access$702(org.glassfish.json.JsonParserImpl, org.glassfish.json.JsonParserImpl$Context);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field currentContext:Lorg/glassfish/json/JsonParserImpl$Context;
       6: areturn
}
