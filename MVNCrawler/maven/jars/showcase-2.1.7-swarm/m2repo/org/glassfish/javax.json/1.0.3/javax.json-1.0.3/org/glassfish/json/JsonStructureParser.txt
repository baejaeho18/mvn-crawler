Compiled from "JsonStructureParser.java"
class org.glassfish.json.JsonStructureParser implements javax.json.stream.JsonParser {
  private org.glassfish.json.JsonStructureParser$Scope current;

  private javax.json.stream.JsonParser$Event state;

  private final java.util.Deque<org.glassfish.json.JsonStructureParser$Scope> scopeStack;

  org.glassfish.json.JsonStructureParser(javax.json.JsonArray);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayDeque
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayDeque."<init>":()V
      12: putfield      #4                  // Field scopeStack:Ljava/util/Deque;
      15: aload_0
      16: new           #5                  // class org/glassfish/json/JsonStructureParser$ArrayScope
      19: dup
      20: aload_1
      21: invokespecial #6                  // Method org/glassfish/json/JsonStructureParser$ArrayScope."<init>":(Ljavax/json/JsonArray;)V
      24: putfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      27: return

  org.glassfish.json.JsonStructureParser(javax.json.JsonObject);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayDeque
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayDeque."<init>":()V
      12: putfield      #4                  // Field scopeStack:Ljava/util/Deque;
      15: aload_0
      16: new           #8                  // class org/glassfish/json/JsonStructureParser$ObjectScope
      19: dup
      20: aload_1
      21: invokespecial #9                  // Method org/glassfish/json/JsonStructureParser$ObjectScope."<init>":(Ljavax/json/JsonObject;)V
      24: putfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      27: return

  public java.lang.String getString();
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #11                 // Field javax/json/stream/JsonParser$Event.KEY_NAME:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpne     21
      10: aload_0
      11: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      14: checkcast     #8                  // class org/glassfish/json/JsonStructureParser$ObjectScope
      17: invokestatic  #12                 // Method org/glassfish/json/JsonStructureParser$ObjectScope.access$000:(Lorg/glassfish/json/JsonStructureParser$ObjectScope;)Ljava/lang/String;
      20: areturn
      21: aload_0
      22: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      25: getstatic     #13                 // Field javax/json/stream/JsonParser$Event.VALUE_STRING:Ljavax/json/stream/JsonParser$Event;
      28: if_acmpne     47
      31: aload_0
      32: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      35: invokevirtual #14                 // Method org/glassfish/json/JsonStructureParser$Scope.getJsonValue:()Ljavax/json/JsonValue;
      38: checkcast     #15                 // class javax/json/JsonString
      41: invokeinterface #16,  1           // InterfaceMethod javax/json/JsonString.getString:()Ljava/lang/String;
      46: areturn
      47: new           #17                 // class java/lang/IllegalStateException
      50: dup
      51: new           #18                 // class java/lang/StringBuilder
      54: dup
      55: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      58: ldc           #20                 // String JsonParser#getString() can only be called in KEY_NAME or VALUE_STRING states, not in
      60: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: aload_0
      64: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      67: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      70: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      73: invokespecial #24                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      76: athrow

  public boolean isIntegralNumber();
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #25                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpne     26
      10: aload_0
      11: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      14: invokevirtual #14                 // Method org/glassfish/json/JsonStructureParser$Scope.getJsonValue:()Ljavax/json/JsonValue;
      17: checkcast     #26                 // class javax/json/JsonNumber
      20: invokeinterface #27,  1           // InterfaceMethod javax/json/JsonNumber.isIntegral:()Z
      25: ireturn
      26: new           #17                 // class java/lang/IllegalStateException
      29: dup
      30: new           #18                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #28                 // String JsonParser#isIntegralNumber() can only be called in VALUE_NUMBER state, not in
      39: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_0
      43: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      46: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      49: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #24                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      55: athrow

  public int getInt();
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #25                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpne     26
      10: aload_0
      11: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      14: invokevirtual #14                 // Method org/glassfish/json/JsonStructureParser$Scope.getJsonValue:()Ljavax/json/JsonValue;
      17: checkcast     #26                 // class javax/json/JsonNumber
      20: invokeinterface #29,  1           // InterfaceMethod javax/json/JsonNumber.intValue:()I
      25: ireturn
      26: new           #17                 // class java/lang/IllegalStateException
      29: dup
      30: new           #18                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #30                 // String JsonParser#getInt() can only be called in VALUE_NUMBER state, not in
      39: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_0
      43: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      46: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      49: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #24                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      55: athrow

  public long getLong();
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #25                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpne     26
      10: aload_0
      11: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      14: invokevirtual #14                 // Method org/glassfish/json/JsonStructureParser$Scope.getJsonValue:()Ljavax/json/JsonValue;
      17: checkcast     #26                 // class javax/json/JsonNumber
      20: invokeinterface #31,  1           // InterfaceMethod javax/json/JsonNumber.longValue:()J
      25: lreturn
      26: new           #17                 // class java/lang/IllegalStateException
      29: dup
      30: new           #18                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #32                 // String JsonParser#getLong() can only be called in VALUE_NUMBER state, not in
      39: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_0
      43: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      46: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      49: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #24                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      55: athrow

  public java.math.BigDecimal getBigDecimal();
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #25                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpne     26
      10: aload_0
      11: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      14: invokevirtual #14                 // Method org/glassfish/json/JsonStructureParser$Scope.getJsonValue:()Ljavax/json/JsonValue;
      17: checkcast     #26                 // class javax/json/JsonNumber
      20: invokeinterface #33,  1           // InterfaceMethod javax/json/JsonNumber.bigDecimalValue:()Ljava/math/BigDecimal;
      25: areturn
      26: new           #17                 // class java/lang/IllegalStateException
      29: dup
      30: new           #18                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #34                 // String JsonParser#getBigDecimal() can only be called in VALUE_NUMBER state, not in
      39: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_0
      43: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      46: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      49: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #24                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      55: athrow

  public javax.json.stream.JsonLocation getLocation();
    Code:
       0: getstatic     #35                 // Field org/glassfish/json/JsonLocationImpl.UNKNOWN:Ljavax/json/stream/JsonLocation;
       3: areturn

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
       4: getstatic     #36                 // Field javax/json/stream/JsonParser$Event.END_OBJECT:Ljavax/json/stream/JsonParser$Event;
       7: if_acmpeq     20
      10: aload_0
      11: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      14: getstatic     #37                 // Field javax/json/stream/JsonParser$Event.END_ARRAY:Ljavax/json/stream/JsonParser$Event;
      17: if_acmpne     32
      20: aload_0
      21: getfield      #4                  // Field scopeStack:Ljava/util/Deque;
      24: invokeinterface #38,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      29: ifne          36
      32: iconst_1
      33: goto          37
      36: iconst_0
      37: ireturn

  public javax.json.stream.JsonParser$Event next();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method hasNext:()Z
       4: ifne          15
       7: new           #40                 // class java/util/NoSuchElementException
      10: dup
      11: invokespecial #41                 // Method java/util/NoSuchElementException."<init>":()V
      14: athrow
      15: aload_0
      16: invokespecial #42                 // Method transition:()V
      19: aload_0
      20: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      23: areturn

  private void transition();
    Code:
       0: aload_0
       1: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
       4: ifnonnull     33
       7: aload_0
       8: aload_0
       9: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      12: instanceof    #5                  // class org/glassfish/json/JsonStructureParser$ArrayScope
      15: ifeq          24
      18: getstatic     #43                 // Field javax/json/stream/JsonParser$Event.START_ARRAY:Ljavax/json/stream/JsonParser$Event;
      21: goto          27
      24: getstatic     #44                 // Field javax/json/stream/JsonParser$Event.START_OBJECT:Ljavax/json/stream/JsonParser$Event;
      27: putfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      30: goto          280
      33: aload_0
      34: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      37: getstatic     #36                 // Field javax/json/stream/JsonParser$Event.END_OBJECT:Ljavax/json/stream/JsonParser$Event;
      40: if_acmpeq     53
      43: aload_0
      44: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
      47: getstatic     #37                 // Field javax/json/stream/JsonParser$Event.END_ARRAY:Ljavax/json/stream/JsonParser$Event;
      50: if_acmpne     69
      53: aload_0
      54: aload_0
      55: getfield      #4                  // Field scopeStack:Ljava/util/Deque;
      58: invokeinterface #45,  1           // InterfaceMethod java/util/Deque.pop:()Ljava/lang/Object;
      63: checkcast     #46                 // class org/glassfish/json/JsonStructureParser$Scope
      66: putfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      69: aload_0
      70: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      73: instanceof    #5                  // class org/glassfish/json/JsonStructureParser$ArrayScope
      76: ifeq          171
      79: aload_0
      80: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      83: invokevirtual #47                 // Method org/glassfish/json/JsonStructureParser$Scope.hasNext:()Z
      86: ifeq          161
      89: aload_0
      90: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
      93: invokevirtual #48                 // Method org/glassfish/json/JsonStructureParser$Scope.next:()Ljava/lang/Object;
      96: pop
      97: aload_0
      98: aload_0
      99: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     102: invokevirtual #14                 // Method org/glassfish/json/JsonStructureParser$Scope.getJsonValue:()Ljavax/json/JsonValue;
     105: invokestatic  #49                 // Method getState:(Ljavax/json/JsonValue;)Ljavax/json/stream/JsonParser$Event;
     108: putfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     111: aload_0
     112: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     115: getstatic     #43                 // Field javax/json/stream/JsonParser$Event.START_ARRAY:Ljavax/json/stream/JsonParser$Event;
     118: if_acmpeq     131
     121: aload_0
     122: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     125: getstatic     #44                 // Field javax/json/stream/JsonParser$Event.START_OBJECT:Ljavax/json/stream/JsonParser$Event;
     128: if_acmpne     280
     131: aload_0
     132: getfield      #4                  // Field scopeStack:Ljava/util/Deque;
     135: aload_0
     136: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     139: invokeinterface #50,  2           // InterfaceMethod java/util/Deque.push:(Ljava/lang/Object;)V
     144: aload_0
     145: aload_0
     146: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     149: invokevirtual #14                 // Method org/glassfish/json/JsonStructureParser$Scope.getJsonValue:()Ljavax/json/JsonValue;
     152: invokestatic  #51                 // Method org/glassfish/json/JsonStructureParser$Scope.createScope:(Ljavax/json/JsonValue;)Lorg/glassfish/json/JsonStructureParser$Scope;
     155: putfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     158: goto          280
     161: aload_0
     162: getstatic     #37                 // Field javax/json/stream/JsonParser$Event.END_ARRAY:Ljavax/json/stream/JsonParser$Event;
     165: putfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     168: goto          280
     171: aload_0
     172: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     175: getstatic     #11                 // Field javax/json/stream/JsonParser$Event.KEY_NAME:Ljavax/json/stream/JsonParser$Event;
     178: if_acmpne     245
     181: aload_0
     182: aload_0
     183: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     186: invokevirtual #14                 // Method org/glassfish/json/JsonStructureParser$Scope.getJsonValue:()Ljavax/json/JsonValue;
     189: invokestatic  #49                 // Method getState:(Ljavax/json/JsonValue;)Ljavax/json/stream/JsonParser$Event;
     192: putfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     195: aload_0
     196: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     199: getstatic     #43                 // Field javax/json/stream/JsonParser$Event.START_ARRAY:Ljavax/json/stream/JsonParser$Event;
     202: if_acmpeq     215
     205: aload_0
     206: getfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     209: getstatic     #44                 // Field javax/json/stream/JsonParser$Event.START_OBJECT:Ljavax/json/stream/JsonParser$Event;
     212: if_acmpne     280
     215: aload_0
     216: getfield      #4                  // Field scopeStack:Ljava/util/Deque;
     219: aload_0
     220: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     223: invokeinterface #50,  2           // InterfaceMethod java/util/Deque.push:(Ljava/lang/Object;)V
     228: aload_0
     229: aload_0
     230: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     233: invokevirtual #14                 // Method org/glassfish/json/JsonStructureParser$Scope.getJsonValue:()Ljavax/json/JsonValue;
     236: invokestatic  #51                 // Method org/glassfish/json/JsonStructureParser$Scope.createScope:(Ljavax/json/JsonValue;)Lorg/glassfish/json/JsonStructureParser$Scope;
     239: putfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     242: goto          280
     245: aload_0
     246: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     249: invokevirtual #47                 // Method org/glassfish/json/JsonStructureParser$Scope.hasNext:()Z
     252: ifeq          273
     255: aload_0
     256: getfield      #7                  // Field current:Lorg/glassfish/json/JsonStructureParser$Scope;
     259: invokevirtual #48                 // Method org/glassfish/json/JsonStructureParser$Scope.next:()Ljava/lang/Object;
     262: pop
     263: aload_0
     264: getstatic     #11                 // Field javax/json/stream/JsonParser$Event.KEY_NAME:Ljavax/json/stream/JsonParser$Event;
     267: putfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     270: goto          280
     273: aload_0
     274: getstatic     #36                 // Field javax/json/stream/JsonParser$Event.END_OBJECT:Ljavax/json/stream/JsonParser$Event;
     277: putfield      #10                 // Field state:Ljavax/json/stream/JsonParser$Event;
     280: return

  public void close();
    Code:
       0: return

  private static javax.json.stream.JsonParser$Event getState(javax.json.JsonValue);
    Code:
       0: getstatic     #52                 // Field org/glassfish/json/JsonStructureParser$1.$SwitchMap$javax$json$JsonValue$ValueType:[I
       3: aload_0
       4: invokeinterface #53,  1           // InterfaceMethod javax/json/JsonValue.getValueType:()Ljavax/json/JsonValue$ValueType;
       9: invokevirtual #54                 // Method javax/json/JsonValue$ValueType.ordinal:()I
      12: iaload
      13: tableswitch   { // 1 to 7
                     1: 56
                     2: 60
                     3: 64
                     4: 68
                     5: 72
                     6: 76
                     7: 80
               default: 84
          }
      56: getstatic     #43                 // Field javax/json/stream/JsonParser$Event.START_ARRAY:Ljavax/json/stream/JsonParser$Event;
      59: areturn
      60: getstatic     #44                 // Field javax/json/stream/JsonParser$Event.START_OBJECT:Ljavax/json/stream/JsonParser$Event;
      63: areturn
      64: getstatic     #13                 // Field javax/json/stream/JsonParser$Event.VALUE_STRING:Ljavax/json/stream/JsonParser$Event;
      67: areturn
      68: getstatic     #25                 // Field javax/json/stream/JsonParser$Event.VALUE_NUMBER:Ljavax/json/stream/JsonParser$Event;
      71: areturn
      72: getstatic     #55                 // Field javax/json/stream/JsonParser$Event.VALUE_TRUE:Ljavax/json/stream/JsonParser$Event;
      75: areturn
      76: getstatic     #56                 // Field javax/json/stream/JsonParser$Event.VALUE_FALSE:Ljavax/json/stream/JsonParser$Event;
      79: areturn
      80: getstatic     #57                 // Field javax/json/stream/JsonParser$Event.VALUE_NULL:Ljavax/json/stream/JsonParser$Event;
      83: areturn
      84: new           #58                 // class javax/json/JsonException
      87: dup
      88: new           #18                 // class java/lang/StringBuilder
      91: dup
      92: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      95: ldc           #59                 // String Unknown value type=
      97: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: aload_0
     101: invokeinterface #53,  1           // InterfaceMethod javax/json/JsonValue.getValueType:()Ljavax/json/JsonValue$ValueType;
     106: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     109: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     112: invokespecial #60                 // Method javax/json/JsonException."<init>":(Ljava/lang/String;)V
     115: athrow
}
