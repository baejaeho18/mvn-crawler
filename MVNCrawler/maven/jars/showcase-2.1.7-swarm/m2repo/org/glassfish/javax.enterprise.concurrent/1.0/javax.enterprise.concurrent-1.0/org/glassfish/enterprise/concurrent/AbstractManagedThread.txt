Compiled from "AbstractManagedThread.java"
public abstract class org.glassfish.enterprise.concurrent.AbstractManagedThread extends java.lang.Thread implements javax.enterprise.concurrent.ManageableThread {
  volatile boolean shutdown;

  final long threadStartTime;

  public org.glassfish.enterprise.concurrent.AbstractManagedThread(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
       5: aload_0
       6: iconst_0
       7: putfield      #2                  // Field shutdown:Z
      10: aload_0
      11: invokestatic  #3                  // Method java/lang/System.currentTimeMillis:()J
      14: putfield      #4                  // Field threadStartTime:J
      17: return

  public boolean isShutdown();
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdown:Z
       4: ireturn

  public void shutdown();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field shutdown:Z
       5: return

  abstract boolean cancelTask();

  public abstract java.lang.String getTaskIdentityName();

  public abstract long getTaskRunTime(long);

  public abstract long getThreadStartTime();

  abstract boolean isTaskHung(long);
}
