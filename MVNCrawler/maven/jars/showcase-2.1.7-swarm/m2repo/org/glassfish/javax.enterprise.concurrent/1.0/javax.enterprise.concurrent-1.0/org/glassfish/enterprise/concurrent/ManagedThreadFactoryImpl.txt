Compiled from "ManagedThreadFactoryImpl.java"
public class org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl implements javax.enterprise.concurrent.ManagedThreadFactory {
  private java.util.List<org.glassfish.enterprise.concurrent.AbstractManagedThread> threads;

  private boolean stopped;

  private java.util.concurrent.locks.Lock lock;

  private java.lang.String name;

  private final org.glassfish.enterprise.concurrent.spi.ContextSetupProvider contextSetupProvider;

  private final org.glassfish.enterprise.concurrent.ContextServiceImpl contextService;

  private int priority;

  private long hungTaskThreshold;

  private java.util.concurrent.atomic.AtomicInteger threadIdSequence;

  public static final java.lang.String MANAGED_THREAD_FACTORY_STOPPED;

  public org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iconst_5
       4: invokespecial #5                  // Method "<init>":(Ljava/lang/String;Lorg/glassfish/enterprise/concurrent/ContextServiceImpl;I)V
       7: return

  public org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl(java.lang.String, org.glassfish.enterprise.concurrent.ContextServiceImpl);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_5
       4: invokespecial #5                  // Method "<init>":(Ljava/lang/String;Lorg/glassfish/enterprise/concurrent/ContextServiceImpl;I)V
       7: return

  public org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl(java.lang.String, org.glassfish.enterprise.concurrent.ContextServiceImpl, int);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #7                  // Field stopped:Z
       9: aload_0
      10: lconst_0
      11: putfield      #1                  // Field hungTaskThreshold:J
      14: aload_0
      15: new           #8                  // class java/util/concurrent/atomic/AtomicInteger
      18: dup
      19: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      22: putfield      #3                  // Field threadIdSequence:Ljava/util/concurrent/atomic/AtomicInteger;
      25: aload_0
      26: aload_1
      27: putfield      #4                  // Field name:Ljava/lang/String;
      30: aload_0
      31: aload_2
      32: putfield      #10                 // Field contextService:Lorg/glassfish/enterprise/concurrent/ContextServiceImpl;
      35: aload_0
      36: aload_2
      37: ifnull        47
      40: aload_2
      41: invokevirtual #11                 // Method org/glassfish/enterprise/concurrent/ContextServiceImpl.getContextSetupProvider:()Lorg/glassfish/enterprise/concurrent/spi/ContextSetupProvider;
      44: goto          48
      47: aconst_null
      48: putfield      #2                  // Field contextSetupProvider:Lorg/glassfish/enterprise/concurrent/spi/ContextSetupProvider;
      51: aload_0
      52: iload_3
      53: putfield      #12                 // Field priority:I
      56: aload_0
      57: new           #13                 // class java/util/ArrayList
      60: dup
      61: invokespecial #14                 // Method java/util/ArrayList."<init>":()V
      64: putfield      #15                 // Field threads:Ljava/util/List;
      67: aload_0
      68: new           #16                 // class java/util/concurrent/locks/ReentrantLock
      71: dup
      72: invokespecial #17                 // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      75: putfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
      78: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #4                  // Field name:Ljava/lang/String;
       4: areturn

  public long getHungTaskThreshold();
    Code:
       0: aload_0
       1: getfield      #1                  // Field hungTaskThreshold:J
       4: lreturn

  public void setHungTaskThreshold(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #1                  // Field hungTaskThreshold:J
       5: return

  public java.lang.Thread newThread(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #7                  // Field stopped:Z
      13: ifeq          26
      16: new           #20                 // class java/lang/IllegalStateException
      19: dup
      20: ldc           #21                 // String ManagedThreadFactory is stopped
      22: invokespecial #22                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aconst_null
      27: astore_2
      28: aload_0
      29: getfield      #2                  // Field contextSetupProvider:Lorg/glassfish/enterprise/concurrent/spi/ContextSetupProvider;
      32: ifnull        49
      35: aload_0
      36: getfield      #2                  // Field contextSetupProvider:Lorg/glassfish/enterprise/concurrent/spi/ContextSetupProvider;
      39: aload_0
      40: getfield      #10                 // Field contextService:Lorg/glassfish/enterprise/concurrent/ContextServiceImpl;
      43: invokeinterface #23,  2           // InterfaceMethod org/glassfish/enterprise/concurrent/spi/ContextSetupProvider.saveContext:(Ljavax/enterprise/concurrent/ContextService;)Lorg/glassfish/enterprise/concurrent/spi/ContextHandle;
      48: astore_2
      49: aload_0
      50: aload_1
      51: aload_2
      52: invokevirtual #24                 // Method createThread:(Ljava/lang/Runnable;Lorg/glassfish/enterprise/concurrent/spi/ContextHandle;)Lorg/glassfish/enterprise/concurrent/AbstractManagedThread;
      55: astore_3
      56: aload_3
      57: aload_0
      58: getfield      #12                 // Field priority:I
      61: invokevirtual #25                 // Method org/glassfish/enterprise/concurrent/AbstractManagedThread.setPriority:(I)V
      64: aload_3
      65: iconst_1
      66: invokevirtual #26                 // Method org/glassfish/enterprise/concurrent/AbstractManagedThread.setDaemon:(Z)V
      69: aload_0
      70: getfield      #15                 // Field threads:Ljava/util/List;
      73: aload_3
      74: invokeinterface #27,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      79: pop
      80: aload_3
      81: astore        4
      83: aload_0
      84: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
      87: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      92: aload         4
      94: areturn
      95: astore        5
      97: aload_0
      98: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
     101: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     106: aload         5
     108: athrow
    Exception table:
       from    to  target type
           9    83    95   any
          95    97    95   any

  protected org.glassfish.enterprise.concurrent.AbstractManagedThread createThread(java.lang.Runnable, org.glassfish.enterprise.concurrent.spi.ContextHandle);
    Code:
       0: invokestatic  #29                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: ifnonnull     17
       6: new           #30                 // class org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread
       9: dup
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokespecial #31                 // Method org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread."<init>":(Lorg/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl;Ljava/lang/Runnable;Lorg/glassfish/enterprise/concurrent/spi/ContextHandle;)V
      16: areturn
      17: new           #32                 // class org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$1
      20: dup
      21: aload_0
      22: aload_1
      23: aload_2
      24: invokespecial #33                 // Method org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$1."<init>":(Lorg/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl;Ljava/lang/Runnable;Lorg/glassfish/enterprise/concurrent/spi/ContextHandle;)V
      27: invokestatic  #34                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      30: checkcast     #30                 // class org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread
      33: areturn

  protected void removeThread(org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl$ManagedThread);
    Code:
       0: aload_0
       1: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #15                 // Field threads:Ljava/util/List;
      13: aload_1
      14: invokeinterface #35,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      19: pop
      20: aload_0
      21: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
      24: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      29: goto          44
      32: astore_2
      33: aload_0
      34: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
      37: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      42: aload_2
      43: athrow
      44: return
    Exception table:
       from    to  target type
           9    20    32   any
          32    33    32   any

  protected java.util.Collection<org.glassfish.enterprise.concurrent.AbstractManagedThread> getThreads();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
       6: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      11: aload_0
      12: getfield      #15                 // Field threads:Ljava/util/List;
      15: invokeinterface #36,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      20: ifne          35
      23: new           #13                 // class java/util/ArrayList
      26: dup
      27: aload_0
      28: getfield      #15                 // Field threads:Ljava/util/List;
      31: invokespecial #37                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      34: astore_1
      35: aload_0
      36: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
      39: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      44: goto          59
      47: astore_2
      48: aload_0
      49: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
      52: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      57: aload_2
      58: athrow
      59: aload_1
      60: areturn
    Exception table:
       from    to  target type
          11    35    47   any
          47    48    47   any

  public void taskStarting(java.lang.Thread, org.glassfish.enterprise.concurrent.internal.ManagedFutureTask);
    Code:
       0: aload_1
       1: instanceof    #30                 // class org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread
       4: ifeq          24
       7: aload_1
       8: checkcast     #30                 // class org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread
      11: astore_3
      12: aload_3
      13: invokestatic  #38                 // Method java/lang/System.currentTimeMillis:()J
      16: putfield      #39                 // Field org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread.taskStartTime:J
      19: aload_3
      20: aload_2
      21: putfield      #40                 // Field org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread.task:Lorg/glassfish/enterprise/concurrent/internal/ManagedFutureTask;
      24: return

  public void taskDone(java.lang.Thread);
    Code:
       0: aload_1
       1: instanceof    #30                 // class org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread
       4: ifeq          22
       7: aload_1
       8: checkcast     #30                 // class org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread
      11: astore_2
      12: aload_2
      13: lconst_0
      14: putfield      #39                 // Field org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread.taskStartTime:J
      17: aload_2
      18: aconst_null
      19: putfield      #40                 // Field org/glassfish/enterprise/concurrent/ManagedThreadFactoryImpl$ManagedThread.task:Lorg/glassfish/enterprise/concurrent/internal/ManagedFutureTask;
      22: return

  public void stop();
    Code:
       0: aload_0
       1: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: iconst_1
      11: putfield      #7                  // Field stopped:Z
      14: aload_0
      15: getfield      #15                 // Field threads:Ljava/util/List;
      18: invokeinterface #41,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      23: astore_1
      24: aload_1
      25: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          58
      33: aload_1
      34: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #44                 // class org/glassfish/enterprise/concurrent/AbstractManagedThread
      42: astore_2
      43: aload_2
      44: invokevirtual #45                 // Method org/glassfish/enterprise/concurrent/AbstractManagedThread.shutdown:()V
      47: aload_2
      48: invokevirtual #46                 // Method org/glassfish/enterprise/concurrent/AbstractManagedThread.interrupt:()V
      51: goto          55
      54: astore_3
      55: goto          24
      58: aload_0
      59: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
      62: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      67: goto          84
      70: astore        4
      72: aload_0
      73: getfield      #18                 // Field lock:Ljava/util/concurrent/locks/Lock;
      76: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      81: aload         4
      83: athrow
      84: return
    Exception table:
       from    to  target type
          43    51    54   Class java/lang/SecurityException
           9    58    70   any
          70    72    70   any

  static java.lang.String access$000(org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl);
    Code:
       0: aload_0
       1: getfield      #4                  // Field name:Ljava/lang/String;
       4: areturn

  static java.util.concurrent.atomic.AtomicInteger access$100(org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl);
    Code:
       0: aload_0
       1: getfield      #3                  // Field threadIdSequence:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn

  static org.glassfish.enterprise.concurrent.spi.ContextSetupProvider access$200(org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl);
    Code:
       0: aload_0
       1: getfield      #2                  // Field contextSetupProvider:Lorg/glassfish/enterprise/concurrent/spi/ContextSetupProvider;
       4: areturn

  static long access$300(org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl);
    Code:
       0: aload_0
       1: getfield      #1                  // Field hungTaskThreshold:J
       4: lreturn
}
