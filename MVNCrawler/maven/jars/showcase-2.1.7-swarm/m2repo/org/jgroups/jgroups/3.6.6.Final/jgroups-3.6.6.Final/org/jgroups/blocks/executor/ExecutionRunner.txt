Compiled from "ExecutionRunner.java"
public class org.jgroups.blocks.executor.ExecutionRunner implements java.lang.Runnable {
  protected org.jgroups.JChannel ch;

  protected org.jgroups.protocols.Executing _execProt;

  private final java.util.Map<java.lang.Thread, org.jgroups.blocks.executor.ExecutionRunner$Holder<java.lang.Runnable>> _runnables;

  protected static final org.jgroups.logging.Log _logger;

  public org.jgroups.blocks.executor.ExecutionRunner(org.jgroups.JChannel);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #1                  // Field _runnables:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: invokevirtual #5                  // Method setChannel:(Lorg/jgroups/JChannel;)V
      20: return

  public void setChannel(org.jgroups.JChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field ch:Lorg/jgroups/JChannel;
       5: aload_0
       6: aload_1
       7: invokevirtual #7                  // Method org/jgroups/JChannel.getProtocolStack:()Lorg/jgroups/stack/ProtocolStack;
      10: ldc_w         #8                  // class org/jgroups/protocols/Executing
      13: invokevirtual #9                  // Method org/jgroups/stack/ProtocolStack.findProtocol:(Ljava/lang/Class;)Lorg/jgroups/stack/Protocol;
      16: checkcast     #8                  // class org/jgroups/protocols/Executing
      19: putfield      #10                 // Field _execProt:Lorg/jgroups/protocols/Executing;
      22: aload_0
      23: getfield      #10                 // Field _execProt:Lorg/jgroups/protocols/Executing;
      26: ifnonnull     66
      29: new           #11                 // class java/lang/IllegalStateException
      32: dup
      33: new           #12                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      40: ldc           #14                 // String Channel configuration must include a executing protocol (subclass of
      42: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: ldc_w         #8                  // class org/jgroups/protocols/Executing
      48: invokevirtual #16                 // Method java/lang/Class.getName:()Ljava/lang/String;
      51: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: ldc           #17                 // String )
      56: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: return

  public void run();
    Code:
       0: new           #20                 // class java/util/concurrent/locks/ReentrantLock
       3: dup
       4: invokespecial #21                 // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
       7: astore_1
       8: new           #22                 // class java/util/concurrent/atomic/AtomicBoolean
      11: dup
      12: iconst_1
      13: invokespecial #23                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      16: astore_2
      17: new           #22                 // class java/util/concurrent/atomic/AtomicBoolean
      20: dup
      21: invokespecial #24                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      24: astore_3
      25: new           #25                 // class org/jgroups/blocks/executor/ExecutionRunner$1
      28: dup
      29: aload_0
      30: aload_3
      31: aload_1
      32: aload_2
      33: invokespecial #26                 // Method org/jgroups/blocks/executor/ExecutionRunner$1."<init>":(Lorg/jgroups/blocks/executor/ExecutionRunner;Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/util/concurrent/locks/Lock;Ljava/util/concurrent/atomic/AtomicBoolean;)V
      36: astore        4
      38: aload         4
      40: new           #12                 // class java/lang/StringBuilder
      43: dup
      44: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      47: invokestatic  #27                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      50: invokevirtual #28                 // Method java/lang/Thread.getName:()Ljava/lang/String;
      53: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: ldc           #29                 // String - Task Runner
      58: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: invokevirtual #30                 // Method java/lang/Thread.setName:(Ljava/lang/String;)V
      67: aload         4
      69: invokevirtual #31                 // Method java/lang/Thread.start:()V
      72: aload         4
      74: invokevirtual #32                 // Method java/lang/Thread.join:()V
      77: goto          146
      80: astore        5
      82: aload_1
      83: invokeinterface #34,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      88: aload_2
      89: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      92: ifeq          100
      95: aload         4
      97: invokevirtual #36                 // Method java/lang/Thread.interrupt:()V
     100: aload_3
     101: iconst_1
     102: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     105: aload_1
     106: invokeinterface #38,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     111: goto          125
     114: astore        6
     116: aload_1
     117: invokeinterface #38,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     122: aload         6
     124: athrow
     125: getstatic     #39                 // Field _logger:Lorg/jgroups/logging/Log;
     128: invokeinterface #40,  1           // InterfaceMethod org/jgroups/logging/Log.isTraceEnabled:()Z
     133: ifeq          146
     136: getstatic     #39                 // Field _logger:Lorg/jgroups/logging/Log;
     139: ldc           #41                 // String Shutting down Execution Runner
     141: invokeinterface #42,  2           // InterfaceMethod org/jgroups/logging/Log.trace:(Ljava/lang/String;)V
     146: return
    Exception table:
       from    to  target type
          72    77    80   Class java/lang/InterruptedException
          88   105   114   any
         114   116   114   any

  public java.util.Map<java.lang.Thread, java.lang.Runnable> getCurrentRunningTasks();
    Code:
       0: new           #43                 // class java/util/HashMap
       3: dup
       4: invokespecial #44                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #1                  // Field _runnables:Ljava/util/Map;
      12: invokeinterface #45,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      17: invokeinterface #46,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          70
      32: aload_2
      33: invokeinterface #48,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #49                 // class java/util/Map$Entry
      41: astore_3
      42: aload_1
      43: aload_3
      44: invokeinterface #50,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      49: aload_3
      50: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      55: checkcast     #52                 // class org/jgroups/blocks/executor/ExecutionRunner$Holder
      58: getfield      #53                 // Field org/jgroups/blocks/executor/ExecutionRunner$Holder.value:Ljava/lang/Object;
      61: invokeinterface #54,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      66: pop
      67: goto          23
      70: aload_1
      71: areturn

  static java.util.Map access$000(org.jgroups.blocks.executor.ExecutionRunner);
    Code:
       0: aload_0
       1: getfield      #1                  // Field _runnables:Ljava/util/Map;
       4: areturn

  static {};
    Code:
       0: ldc_w         #55                 // class org/jgroups/blocks/executor/ExecutionRunner
       3: invokestatic  #56                 // Method org/jgroups/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/jgroups/logging/Log;
       6: putstatic     #39                 // Field _logger:Lorg/jgroups/logging/Log;
       9: return
}
