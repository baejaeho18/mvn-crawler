Compiled from "ConcurrentLinkedBlockingQueue.java"
public class org.jgroups.util.ConcurrentLinkedBlockingQueue<T> extends java.util.concurrent.ConcurrentLinkedQueue<T> implements java.util.concurrent.BlockingQueue<T> {
  private static final long serialVersionUID;

  private final int capacity;

  private final java.util.concurrent.locks.Lock lock;

  private final java.util.concurrent.locks.Condition not_empty;

  private final java.util.concurrent.atomic.AtomicInteger waiting_takers;

  public org.jgroups.util.ConcurrentLinkedBlockingQueue(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/locks/ReentrantLock
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      12: putfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      15: aload_0
      16: aload_0
      17: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      20: invokeinterface #5,  1            // InterfaceMethod java/util/concurrent/locks/Lock.newCondition:()Ljava/util/concurrent/locks/Condition;
      25: putfield      #6                  // Field not_empty:Ljava/util/concurrent/locks/Condition;
      28: aload_0
      29: new           #7                  // class java/util/concurrent/atomic/AtomicInteger
      32: dup
      33: iconst_0
      34: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      37: putfield      #9                  // Field waiting_takers:Ljava/util/concurrent/atomic/AtomicInteger;
      40: aload_0
      41: iload_1
      42: putfield      #10                 // Field capacity:I
      45: return

  public boolean offer(T);
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method size:()I
       4: aload_0
       5: getfield      #10                 // Field capacity:I
       8: if_icmpge     23
      11: aload_0
      12: aload_1
      13: invokespecial #12                 // Method java/util/concurrent/ConcurrentLinkedQueue.offer:(Ljava/lang/Object;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: istore_2
      25: aload_0
      26: getfield      #9                  // Field waiting_takers:Ljava/util/concurrent/atomic/AtomicInteger;
      29: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      32: ifle          77
      35: aload_0
      36: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      39: invokeinterface #14,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      44: aload_0
      45: getfield      #6                  // Field not_empty:Ljava/util/concurrent/locks/Condition;
      48: invokeinterface #15,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signal:()V
      53: aload_0
      54: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      57: invokeinterface #16,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      62: goto          77
      65: astore_3
      66: aload_0
      67: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      70: invokeinterface #16,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      75: aload_3
      76: athrow
      77: iload_2
      78: ireturn
    Exception table:
       from    to  target type
          44    53    65   any
          65    66    65   any

  public T take() throws java.lang.InterruptedException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: invokevirtual #17                 // Method poll:()Ljava/lang/Object;
       6: astore_1
       7: aload_1
       8: ifnull        13
      11: aload_1
      12: areturn
      13: aload_0
      14: invokevirtual #11                 // Method size:()I
      17: ifne          2
      20: aload_0
      21: getfield      #9                  // Field waiting_takers:Ljava/util/concurrent/atomic/AtomicInteger;
      24: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      27: pop
      28: aload_0
      29: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      32: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lockInterruptibly:()V
      37: aload_0
      38: getfield      #6                  // Field not_empty:Ljava/util/concurrent/locks/Condition;
      41: invokeinterface #20,  1           // InterfaceMethod java/util/concurrent/locks/Condition.await:()V
      46: aload_0
      47: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      50: invokeinterface #16,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      55: aload_0
      56: getfield      #9                  // Field waiting_takers:Ljava/util/concurrent/atomic/AtomicInteger;
      59: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      62: pop
      63: goto          86
      66: astore_2
      67: aload_0
      68: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/Lock;
      71: invokeinterface #16,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      76: aload_0
      77: getfield      #9                  // Field waiting_takers:Ljava/util/concurrent/atomic/AtomicInteger;
      80: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      83: pop
      84: aload_2
      85: athrow
      86: goto          13
    Exception table:
       from    to  target type
          37    46    66   any
          66    67    66   any

  public T poll();
    Code:
       0: aload_0
       1: invokespecial #22                 // Method java/util/concurrent/ConcurrentLinkedQueue.poll:()Ljava/lang/Object;
       4: areturn

  public T poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: getstatic     #23                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       3: lload_1
       4: aload_3
       5: invokevirtual #24                 // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
       8: lstore        4
      10: invokestatic  #25                 // Method java/lang/System.nanoTime:()J
      13: lload         4
      15: ladd
      16: lstore        6
      18: lload         4
      20: ldc2_w        #26                 // long 5l
      23: ldiv
      24: lstore        4
      26: aconst_null
      27: astore        8
      29: invokestatic  #25                 // Method java/lang/System.nanoTime:()J
      32: lload         6
      34: lcmp
      35: ifge          59
      38: aload_0
      39: invokevirtual #17                 // Method poll:()Ljava/lang/Object;
      42: dup
      43: astore        8
      45: ifnull        51
      48: aload         8
      50: areturn
      51: lload         4
      53: invokestatic  #28                 // Method java/util/concurrent/locks/LockSupport.parkNanos:(J)V
      56: goto          29
      59: aload         8
      61: areturn

  public boolean remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #29                 // Method java/util/concurrent/ConcurrentLinkedQueue.remove:(Ljava/lang/Object;)Z
       5: ireturn

  public int remainingCapacity();
    Code:
       0: aload_0
       1: getfield      #10                 // Field capacity:I
       4: aload_0
       5: invokevirtual #11                 // Method size:()I
       8: isub
       9: ireturn

  public int drainTo(java.util.Collection<? super T>);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: ifnonnull     8
       6: iload_2
       7: ireturn
       8: aload_0
       9: invokevirtual #17                 // Method poll:()Ljava/lang/Object;
      12: astore_3
      13: aload_3
      14: ifnonnull     20
      17: goto          34
      20: aload_1
      21: aload_3
      22: invokeinterface #30,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      27: pop
      28: iinc          2, 1
      31: goto          8
      34: iload_2
      35: ireturn

  public void put(T) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #12                 // Method java/util/concurrent/ConcurrentLinkedQueue.offer:(Ljava/lang/Object;)Z
       5: pop
       6: return

  public boolean offer(T, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method offer:(Ljava/lang/Object;)Z
       5: ireturn

  public int drainTo(java.util.Collection<? super T>, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #32                 // Method drainTo:(Ljava/util/Collection;)I
       5: ireturn
}
