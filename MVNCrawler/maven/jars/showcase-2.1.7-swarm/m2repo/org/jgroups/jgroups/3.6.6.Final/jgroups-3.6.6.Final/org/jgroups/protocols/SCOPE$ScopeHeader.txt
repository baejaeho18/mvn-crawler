Compiled from "SCOPE.java"
public class org.jgroups.protocols.SCOPE$ScopeHeader extends org.jgroups.Header {
  public static final byte MSG;

  public static final byte EXPIRE;

  byte type;

  short scope;

  public static org.jgroups.protocols.SCOPE$ScopeHeader createMessageHeader(short);
    Code:
       0: new           #1                  // class org/jgroups/protocols/SCOPE$ScopeHeader
       3: dup
       4: iconst_1
       5: iload_0
       6: invokespecial #2                  // Method "<init>":(BS)V
       9: areturn

  public static org.jgroups.protocols.SCOPE$ScopeHeader createExpireHeader(short);
    Code:
       0: new           #1                  // class org/jgroups/protocols/SCOPE$ScopeHeader
       3: dup
       4: iconst_2
       5: iload_0
       6: invokespecial #2                  // Method "<init>":(BS)V
       9: areturn

  public org.jgroups.protocols.SCOPE$ScopeHeader();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method org/jgroups/Header."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #4                  // Field scope:S
       9: return

  private org.jgroups.protocols.SCOPE$ScopeHeader(byte, short);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method org/jgroups/Header."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #4                  // Field scope:S
       9: aload_0
      10: iload_1
      11: putfield      #5                  // Field type:B
      14: aload_0
      15: iload_2
      16: putfield      #4                  // Field scope:S
      19: return

  public short getScope();
    Code:
       0: aload_0
       1: getfield      #4                  // Field scope:S
       4: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #5                  // Field type:B
       4: lookupswitch  { // 2
                     1: 32
                     2: 32
               default: 34
          }
      32: iconst_3
      33: ireturn
      34: new           #6                  // class java/lang/IllegalStateException
      37: dup
      38: ldc           #7                  // String type has to be MSG or EXPIRE
      40: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      43: athrow

  public void writeTo(java.io.DataOutput) throws java.lang.Exception;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field type:B
       5: invokeinterface #9,  2            // InterfaceMethod java/io/DataOutput.writeByte:(I)V
      10: aload_0
      11: getfield      #5                  // Field type:B
      14: lookupswitch  { // 2
                     1: 40
                     2: 40
               default: 53
          }
      40: aload_1
      41: aload_0
      42: getfield      #4                  // Field scope:S
      45: invokeinterface #10,  2           // InterfaceMethod java/io/DataOutput.writeShort:(I)V
      50: goto          63
      53: new           #6                  // class java/lang/IllegalStateException
      56: dup
      57: ldc           #7                  // String type has to be MSG or EXPIRE
      59: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      62: athrow
      63: return

  public void readFrom(java.io.DataInput) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #11,  1           // InterfaceMethod java/io/DataInput.readByte:()B
       7: putfield      #5                  // Field type:B
      10: aload_0
      11: getfield      #5                  // Field type:B
      14: lookupswitch  { // 2
                     1: 40
                     2: 40
               default: 53
          }
      40: aload_0
      41: aload_1
      42: invokeinterface #12,  1           // InterfaceMethod java/io/DataInput.readShort:()S
      47: putfield      #4                  // Field scope:S
      50: goto          63
      53: new           #6                  // class java/lang/IllegalStateException
      56: dup
      57: ldc           #7                  // String type has to be MSG or EXPIRE
      59: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      62: athrow
      63: return

  public java.lang.String toString();
    Code:
       0: new           #13                 // class java/lang/StringBuilder
       3: dup
       4: aload_0
       5: getfield      #5                  // Field type:B
       8: invokestatic  #14                 // Method typeToString:(B)Ljava/lang/String;
      11: invokespecial #15                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      14: astore_1
      15: aload_0
      16: getfield      #5                  // Field type:B
      19: lookupswitch  { // 2
                     1: 44
                     2: 44
               default: 61
          }
      44: aload_1
      45: ldc           #16                 // String : scope=
      47: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: aload_0
      51: getfield      #4                  // Field scope:S
      54: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      57: pop
      58: goto          68
      61: aload_1
      62: ldc           #19                 // String n/a
      64: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: pop
      68: aload_1
      69: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: areturn

  public static java.lang.String typeToString(byte);
    Code:
       0: iload_0
       1: lookupswitch  { // 2
                     1: 28
                     2: 31
               default: 34
          }
      28: ldc           #21                 // String MSG
      30: areturn
      31: ldc           #22                 // String EXPIRE
      33: areturn
      34: ldc           #19                 // String n/a
      36: areturn
}
