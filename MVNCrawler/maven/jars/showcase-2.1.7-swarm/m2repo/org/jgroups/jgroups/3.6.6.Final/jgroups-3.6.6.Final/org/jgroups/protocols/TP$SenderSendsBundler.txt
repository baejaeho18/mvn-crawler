Compiled from "TP.java"
public class org.jgroups.protocols.TP$SenderSendsBundler extends org.jgroups.protocols.TP$BaseBundler implements org.jgroups.protocols.TP$Bundler {
  protected final java.util.concurrent.atomic.AtomicInteger num_senders;

  final org.jgroups.protocols.TP this$0;

  protected org.jgroups.protocols.TP$SenderSendsBundler(org.jgroups.protocols.TP);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/jgroups/protocols/TP;
       5: aload_0
       6: aload_1
       7: invokespecial #2                  // Method org/jgroups/protocols/TP$BaseBundler."<init>":(Lorg/jgroups/protocols/TP;)V
      10: aload_0
      11: new           #3                  // class java/util/concurrent/atomic/AtomicInteger
      14: dup
      15: iconst_0
      16: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      19: putfield      #5                  // Field num_senders:Ljava/util/concurrent/atomic/AtomicInteger;
      22: return

  public void send(org.jgroups.Message) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokevirtual #6                  // Method org/jgroups/Message.size:()J
       4: lstore_2
       5: aload_0
       6: getfield      #5                  // Field num_senders:Ljava/util/concurrent/atomic/AtomicInteger;
       9: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      12: pop
      13: aload_0
      14: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      17: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      20: aload_0
      21: getfield      #5                  // Field num_senders:Ljava/util/concurrent/atomic/AtomicInteger;
      24: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      27: pop
      28: aload_0
      29: getfield      #11                 // Field count:J
      32: lload_2
      33: ladd
      34: aload_0
      35: getfield      #1                  // Field this$0:Lorg/jgroups/protocols/TP;
      38: getfield      #12                 // Field org/jgroups/protocols/TP.max_bundle_size:I
      41: i2l
      42: lcmp
      43: iflt          50
      46: aload_0
      47: invokevirtual #13                 // Method sendBundledMessages:()V
      50: aload_0
      51: getfield      #5                  // Field num_senders:Ljava/util/concurrent/atomic/AtomicInteger;
      54: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      57: ifne          90
      60: aload_0
      61: getfield      #11                 // Field count:J
      64: lconst_0
      65: lcmp
      66: ifne          77
      69: aload_0
      70: aload_1
      71: invokevirtual #15                 // Method sendSingleMessage:(Lorg/jgroups/Message;)V
      74: goto          96
      77: aload_0
      78: aload_1
      79: lload_2
      80: invokevirtual #16                 // Method addMessage:(Lorg/jgroups/Message;J)V
      83: aload_0
      84: invokevirtual #13                 // Method sendBundledMessages:()V
      87: goto          96
      90: aload_0
      91: aload_1
      92: lload_2
      93: invokevirtual #16                 // Method addMessage:(Lorg/jgroups/Message;J)V
      96: aload_0
      97: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     100: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     103: goto          118
     106: astore        4
     108: aload_0
     109: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     112: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     115: aload         4
     117: athrow
     118: return
    Exception table:
       from    to  target type
          20    96   106   any
         106   108   106   any
}
