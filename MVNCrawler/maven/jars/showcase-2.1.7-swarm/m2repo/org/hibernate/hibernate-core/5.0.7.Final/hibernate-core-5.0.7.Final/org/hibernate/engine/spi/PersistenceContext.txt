Compiled from "PersistenceContext.java"
public interface org.hibernate.engine.spi.PersistenceContext {
  public static final java.lang.Object NO_ROW;

  public abstract boolean isStateless();

  public abstract org.hibernate.engine.spi.SessionImplementor getSession();

  public abstract org.hibernate.engine.loading.internal.LoadContexts getLoadContexts();

  public abstract void addUnownedCollection(org.hibernate.engine.spi.CollectionKey, org.hibernate.collection.spi.PersistentCollection);

  public abstract org.hibernate.collection.spi.PersistentCollection useUnownedCollection(org.hibernate.engine.spi.CollectionKey);

  public abstract org.hibernate.engine.spi.BatchFetchQueue getBatchFetchQueue();

  public abstract void clear();

  public abstract boolean hasNonReadOnlyEntities();

  public abstract void setEntryStatus(org.hibernate.engine.spi.EntityEntry, org.hibernate.engine.spi.Status);

  public abstract void afterTransactionCompletion();

  public abstract java.lang.Object[] getDatabaseSnapshot(java.io.Serializable, org.hibernate.persister.entity.EntityPersister);

  public abstract java.lang.Object[] getCachedDatabaseSnapshot(org.hibernate.engine.spi.EntityKey);

  public abstract java.lang.Object[] getNaturalIdSnapshot(java.io.Serializable, org.hibernate.persister.entity.EntityPersister);

  public abstract void addEntity(org.hibernate.engine.spi.EntityKey, java.lang.Object);

  public abstract java.lang.Object getEntity(org.hibernate.engine.spi.EntityKey);

  public abstract boolean containsEntity(org.hibernate.engine.spi.EntityKey);

  public abstract java.lang.Object removeEntity(org.hibernate.engine.spi.EntityKey);

  public abstract void addEntity(org.hibernate.engine.spi.EntityUniqueKey, java.lang.Object);

  public abstract java.lang.Object getEntity(org.hibernate.engine.spi.EntityUniqueKey);

  public abstract org.hibernate.engine.spi.EntityEntry getEntry(java.lang.Object);

  public abstract org.hibernate.engine.spi.EntityEntry removeEntry(java.lang.Object);

  public abstract boolean isEntryFor(java.lang.Object);

  public abstract org.hibernate.engine.spi.CollectionEntry getCollectionEntry(org.hibernate.collection.spi.PersistentCollection);

  public abstract org.hibernate.engine.spi.EntityEntry addEntity(java.lang.Object, org.hibernate.engine.spi.Status, java.lang.Object[], org.hibernate.engine.spi.EntityKey, java.lang.Object, org.hibernate.LockMode, boolean, org.hibernate.persister.entity.EntityPersister, boolean, boolean);

  public abstract org.hibernate.engine.spi.EntityEntry addEntry(java.lang.Object, org.hibernate.engine.spi.Status, java.lang.Object[], java.lang.Object, java.io.Serializable, java.lang.Object, org.hibernate.LockMode, boolean, org.hibernate.persister.entity.EntityPersister, boolean, boolean);

  public abstract boolean containsCollection(org.hibernate.collection.spi.PersistentCollection);

  public abstract boolean containsProxy(java.lang.Object);

  public abstract boolean reassociateIfUninitializedProxy(java.lang.Object) throws org.hibernate.MappingException;

  public abstract void reassociateProxy(java.lang.Object, java.io.Serializable) throws org.hibernate.MappingException;

  public abstract java.lang.Object unproxy(java.lang.Object) throws org.hibernate.HibernateException;

  public abstract java.lang.Object unproxyAndReassociate(java.lang.Object) throws org.hibernate.HibernateException;

  public abstract void checkUniqueness(org.hibernate.engine.spi.EntityKey, java.lang.Object) throws org.hibernate.HibernateException;

  public abstract java.lang.Object narrowProxy(java.lang.Object, org.hibernate.persister.entity.EntityPersister, org.hibernate.engine.spi.EntityKey, java.lang.Object) throws org.hibernate.HibernateException;

  public abstract java.lang.Object proxyFor(org.hibernate.persister.entity.EntityPersister, org.hibernate.engine.spi.EntityKey, java.lang.Object) throws org.hibernate.HibernateException;

  public abstract java.lang.Object proxyFor(java.lang.Object) throws org.hibernate.HibernateException;

  public abstract java.lang.Object getCollectionOwner(java.io.Serializable, org.hibernate.persister.collection.CollectionPersister) throws org.hibernate.MappingException;

  public abstract java.lang.Object getLoadedCollectionOwnerOrNull(org.hibernate.collection.spi.PersistentCollection);

  public abstract java.io.Serializable getLoadedCollectionOwnerIdOrNull(org.hibernate.collection.spi.PersistentCollection);

  public abstract void addUninitializedCollection(org.hibernate.persister.collection.CollectionPersister, org.hibernate.collection.spi.PersistentCollection, java.io.Serializable);

  public abstract void addUninitializedDetachedCollection(org.hibernate.persister.collection.CollectionPersister, org.hibernate.collection.spi.PersistentCollection);

  public abstract void addNewCollection(org.hibernate.persister.collection.CollectionPersister, org.hibernate.collection.spi.PersistentCollection) throws org.hibernate.HibernateException;

  public abstract void addInitializedDetachedCollection(org.hibernate.persister.collection.CollectionPersister, org.hibernate.collection.spi.PersistentCollection) throws org.hibernate.HibernateException;

  public abstract org.hibernate.engine.spi.CollectionEntry addInitializedCollection(org.hibernate.persister.collection.CollectionPersister, org.hibernate.collection.spi.PersistentCollection, java.io.Serializable) throws org.hibernate.HibernateException;

  public abstract org.hibernate.collection.spi.PersistentCollection getCollection(org.hibernate.engine.spi.CollectionKey);

  public abstract void addNonLazyCollection(org.hibernate.collection.spi.PersistentCollection);

  public abstract void initializeNonLazyCollections() throws org.hibernate.HibernateException;

  public abstract org.hibernate.collection.spi.PersistentCollection getCollectionHolder(java.lang.Object);

  public abstract void addCollectionHolder(org.hibernate.collection.spi.PersistentCollection);

  public abstract org.hibernate.collection.spi.PersistentCollection removeCollectionHolder(java.lang.Object);

  public abstract java.io.Serializable getSnapshot(org.hibernate.collection.spi.PersistentCollection);

  public abstract org.hibernate.engine.spi.CollectionEntry getCollectionEntryOrNull(java.lang.Object);

  public abstract java.lang.Object getProxy(org.hibernate.engine.spi.EntityKey);

  public abstract void addProxy(org.hibernate.engine.spi.EntityKey, java.lang.Object);

  public abstract java.lang.Object removeProxy(org.hibernate.engine.spi.EntityKey);

  public abstract java.util.HashSet getNullifiableEntityKeys();

  public abstract java.util.Map getEntitiesByKey();

  public abstract java.util.Map$Entry<java.lang.Object, org.hibernate.engine.spi.EntityEntry>[] reentrantSafeEntityEntries();

  public abstract java.util.Map getEntityEntries();

  public abstract int getNumberOfManagedEntities();

  public abstract java.util.Map getCollectionEntries();

  public abstract java.util.Map getCollectionsByKey();

  public abstract int getCascadeLevel();

  public abstract int incrementCascadeLevel();

  public abstract int decrementCascadeLevel();

  public abstract boolean isFlushing();

  public abstract void setFlushing(boolean);

  public abstract void beforeLoad();

  public abstract void afterLoad();

  public abstract boolean isLoadFinished();

  public abstract java.lang.String toString();

  public abstract java.io.Serializable getOwnerId(java.lang.String, java.lang.String, java.lang.Object, java.util.Map);

  public abstract java.lang.Object getIndexInOwner(java.lang.String, java.lang.String, java.lang.Object, java.util.Map);

  public abstract void addNullProperty(org.hibernate.engine.spi.EntityKey, java.lang.String);

  public abstract boolean isPropertyNull(org.hibernate.engine.spi.EntityKey, java.lang.String);

  public abstract boolean isDefaultReadOnly();

  public abstract void setDefaultReadOnly(boolean);

  public abstract boolean isReadOnly(java.lang.Object);

  public abstract void setReadOnly(java.lang.Object, boolean);

  public abstract void replaceDelayedEntityIdentityInsertKeys(org.hibernate.engine.spi.EntityKey, java.io.Serializable);

  public abstract void addChildParent(java.lang.Object, java.lang.Object);

  public abstract void removeChildParent(java.lang.Object);

  public abstract void registerInsertedKey(org.hibernate.persister.entity.EntityPersister, java.io.Serializable);

  public abstract boolean wasInsertedDuringTransaction(org.hibernate.persister.entity.EntityPersister, java.io.Serializable);

  public abstract org.hibernate.engine.spi.PersistenceContext$NaturalIdHelper getNaturalIdHelper();

  static {};
    Code:
       0: new           #1                  // class org/hibernate/internal/util/MarkerObject
       3: dup
       4: ldc           #2                  // String NO_ROW
       6: invokespecial #3                  // Method org/hibernate/internal/util/MarkerObject."<init>":(Ljava/lang/String;)V
       9: putstatic     #4                  // Field NO_ROW:Ljava/lang/Object;
      12: return
}
