Compiled from "Session.java"
public interface org.hibernate.Session extends org.hibernate.SharedSessionContract,java.io.Closeable {
  public abstract org.hibernate.SharedSessionBuilder sessionWithOptions();

  public abstract void flush() throws org.hibernate.HibernateException;

  public abstract void setFlushMode(org.hibernate.FlushMode);

  public abstract org.hibernate.FlushMode getFlushMode();

  public abstract void setCacheMode(org.hibernate.CacheMode);

  public abstract org.hibernate.CacheMode getCacheMode();

  public abstract org.hibernate.SessionFactory getSessionFactory();

  public abstract void close() throws org.hibernate.HibernateException;

  public abstract void cancelQuery() throws org.hibernate.HibernateException;

  public abstract boolean isOpen();

  public abstract boolean isConnected();

  public abstract boolean isDirty() throws org.hibernate.HibernateException;

  public abstract boolean isDefaultReadOnly();

  public abstract void setDefaultReadOnly(boolean);

  public abstract java.io.Serializable getIdentifier(java.lang.Object);

  public abstract boolean contains(java.lang.Object);

  public abstract void evict(java.lang.Object);

  public abstract <T> T load(java.lang.Class<T>, java.io.Serializable, org.hibernate.LockMode);

  public abstract <T> T load(java.lang.Class<T>, java.io.Serializable, org.hibernate.LockOptions);

  public abstract java.lang.Object load(java.lang.String, java.io.Serializable, org.hibernate.LockMode);

  public abstract java.lang.Object load(java.lang.String, java.io.Serializable, org.hibernate.LockOptions);

  public abstract <T> T load(java.lang.Class<T>, java.io.Serializable);

  public abstract java.lang.Object load(java.lang.String, java.io.Serializable);

  public abstract void load(java.lang.Object, java.io.Serializable);

  public abstract void replicate(java.lang.Object, org.hibernate.ReplicationMode);

  public abstract void replicate(java.lang.String, java.lang.Object, org.hibernate.ReplicationMode);

  public abstract java.io.Serializable save(java.lang.Object);

  public abstract java.io.Serializable save(java.lang.String, java.lang.Object);

  public abstract void saveOrUpdate(java.lang.Object);

  public abstract void saveOrUpdate(java.lang.String, java.lang.Object);

  public abstract void update(java.lang.Object);

  public abstract void update(java.lang.String, java.lang.Object);

  public abstract java.lang.Object merge(java.lang.Object);

  public abstract java.lang.Object merge(java.lang.String, java.lang.Object);

  public abstract void persist(java.lang.Object);

  public abstract void persist(java.lang.String, java.lang.Object);

  public abstract void delete(java.lang.Object);

  public abstract void delete(java.lang.String, java.lang.Object);

  public abstract void lock(java.lang.Object, org.hibernate.LockMode);

  public abstract void lock(java.lang.String, java.lang.Object, org.hibernate.LockMode);

  public abstract org.hibernate.Session$LockRequest buildLockRequest(org.hibernate.LockOptions);

  public abstract void refresh(java.lang.Object);

  public abstract void refresh(java.lang.String, java.lang.Object);

  public abstract void refresh(java.lang.Object, org.hibernate.LockMode);

  public abstract void refresh(java.lang.Object, org.hibernate.LockOptions);

  public abstract void refresh(java.lang.String, java.lang.Object, org.hibernate.LockOptions);

  public abstract org.hibernate.LockMode getCurrentLockMode(java.lang.Object);

  public abstract org.hibernate.Query createFilter(java.lang.Object, java.lang.String);

  public abstract void clear();

  public abstract <T> T get(java.lang.Class<T>, java.io.Serializable);

  public abstract <T> T get(java.lang.Class<T>, java.io.Serializable, org.hibernate.LockMode);

  public abstract <T> T get(java.lang.Class<T>, java.io.Serializable, org.hibernate.LockOptions);

  public abstract java.lang.Object get(java.lang.String, java.io.Serializable);

  public abstract java.lang.Object get(java.lang.String, java.io.Serializable, org.hibernate.LockMode);

  public abstract java.lang.Object get(java.lang.String, java.io.Serializable, org.hibernate.LockOptions);

  public abstract java.lang.String getEntityName(java.lang.Object);

  public abstract org.hibernate.IdentifierLoadAccess byId(java.lang.String);

  public abstract <T> org.hibernate.IdentifierLoadAccess<T> byId(java.lang.Class<T>);

  public abstract org.hibernate.NaturalIdLoadAccess byNaturalId(java.lang.String);

  public abstract <T> org.hibernate.NaturalIdLoadAccess<T> byNaturalId(java.lang.Class<T>);

  public abstract org.hibernate.SimpleNaturalIdLoadAccess bySimpleNaturalId(java.lang.String);

  public abstract <T> org.hibernate.SimpleNaturalIdLoadAccess<T> bySimpleNaturalId(java.lang.Class<T>);

  public abstract org.hibernate.Filter enableFilter(java.lang.String);

  public abstract org.hibernate.Filter getEnabledFilter(java.lang.String);

  public abstract void disableFilter(java.lang.String);

  public abstract org.hibernate.stat.SessionStatistics getStatistics();

  public abstract boolean isReadOnly(java.lang.Object);

  public abstract void setReadOnly(java.lang.Object, boolean);

  public abstract void doWork(org.hibernate.jdbc.Work) throws org.hibernate.HibernateException;

  public abstract <T> T doReturningWork(org.hibernate.jdbc.ReturningWork<T>) throws org.hibernate.HibernateException;

  public abstract java.sql.Connection disconnect();

  public abstract void reconnect(java.sql.Connection);

  public abstract boolean isFetchProfileEnabled(java.lang.String) throws org.hibernate.UnknownProfileException;

  public abstract void enableFetchProfile(java.lang.String) throws org.hibernate.UnknownProfileException;

  public abstract void disableFetchProfile(java.lang.String) throws org.hibernate.UnknownProfileException;

  public abstract org.hibernate.TypeHelper getTypeHelper();

  public abstract org.hibernate.LobHelper getLobHelper();

  public abstract void addEventListeners(org.hibernate.SessionEventListener...);
}
