Compiled from "ManyToOne.java"
public class org.hibernate.mapping.ManyToOne extends org.hibernate.mapping.ToOne {
  private boolean ignoreNotFound;

  private boolean isLogicalOneToOne;

  public org.hibernate.mapping.ManyToOne(org.hibernate.boot.spi.MetadataImplementor, org.hibernate.mapping.Table);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/hibernate/mapping/ToOne."<init>":(Lorg/hibernate/boot/spi/MetadataImplementor;Lorg/hibernate/mapping/Table;)V
       6: return

  public org.hibernate.type.Type getType() throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method getMetadata:()Lorg/hibernate/boot/spi/MetadataImplementor;
       4: invokeinterface #3,  1            // InterfaceMethod org/hibernate/boot/spi/MetadataImplementor.getTypeResolver:()Lorg/hibernate/type/TypeResolver;
       9: invokevirtual #4                  // Method org/hibernate/type/TypeResolver.getTypeFactory:()Lorg/hibernate/type/TypeFactory;
      12: aload_0
      13: invokevirtual #5                  // Method getReferencedEntityName:()Ljava/lang/String;
      16: aload_0
      17: getfield      #6                  // Field referenceToPrimaryKey:Z
      20: aload_0
      21: invokevirtual #7                  // Method getReferencedPropertyName:()Ljava/lang/String;
      24: aload_0
      25: invokevirtual #8                  // Method isLazy:()Z
      28: aload_0
      29: invokevirtual #9                  // Method isUnwrapProxy:()Z
      32: aload_0
      33: invokevirtual #10                 // Method isIgnoreNotFound:()Z
      36: aload_0
      37: getfield      #11                 // Field isLogicalOneToOne:Z
      40: invokevirtual #12                 // Method org/hibernate/type/TypeFactory.manyToOne:(Ljava/lang/String;ZLjava/lang/String;ZZZZ)Lorg/hibernate/type/EntityType;
      43: areturn

  public void createForeignKey() throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field referencedPropertyName:Ljava/lang/String;
       4: ifnonnull     28
       7: aload_0
       8: invokevirtual #14                 // Method hasFormula:()Z
      11: ifne          28
      14: aload_0
      15: aload_0
      16: invokevirtual #15                 // Method getType:()Lorg/hibernate/type/Type;
      19: checkcast     #16                 // class org/hibernate/type/EntityType
      22: invokevirtual #17                 // Method org/hibernate/type/EntityType.getAssociatedEntityName:()Ljava/lang/String;
      25: invokevirtual #18                 // Method createForeignKeyOfEntity:(Ljava/lang/String;)V
      28: return

  public void createPropertyRefConstraints(java.util.Map);
    Code:
       0: aload_0
       1: getfield      #13                 // Field referencedPropertyName:Ljava/lang/String;
       4: ifnull        183
       7: aload_1
       8: aload_0
       9: invokevirtual #5                  // Method getReferencedEntityName:()Ljava/lang/String;
      12: invokeinterface #19,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #20                 // class org/hibernate/mapping/PersistentClass
      20: astore_2
      21: aload_2
      22: aload_0
      23: invokevirtual #7                  // Method getReferencedPropertyName:()Ljava/lang/String;
      26: invokevirtual #21                 // Method org/hibernate/mapping/PersistentClass.getReferencedProperty:(Ljava/lang/String;)Lorg/hibernate/mapping/Property;
      29: astore_3
      30: aload_3
      31: ifnonnull     76
      34: new           #22                 // class org/hibernate/MappingException
      37: dup
      38: new           #23                 // class java/lang/StringBuilder
      41: dup
      42: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      45: ldc           #25                 // String Could not find property
      47: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: aload_0
      51: invokevirtual #7                  // Method getReferencedPropertyName:()Ljava/lang/String;
      54: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: ldc           #27                 // String  on
      59: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_0
      63: invokevirtual #5                  // Method getReferencedEntityName:()Ljava/lang/String;
      66: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: invokespecial #29                 // Method org/hibernate/MappingException."<init>":(Ljava/lang/String;)V
      75: athrow
      76: aload_0
      77: invokevirtual #14                 // Method hasFormula:()Z
      80: ifne          183
      83: ldc           #30                 // String none
      85: aload_0
      86: invokevirtual #31                 // Method getForeignKeyName:()Ljava/lang/String;
      89: invokevirtual #32                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      92: ifne          183
      95: new           #33                 // class java/util/ArrayList
      98: dup
      99: invokespecial #34                 // Method java/util/ArrayList."<init>":()V
     102: astore        4
     104: aload_3
     105: invokevirtual #35                 // Method org/hibernate/mapping/Property.getColumnIterator:()Ljava/util/Iterator;
     108: astore        5
     110: aload         5
     112: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     117: ifeq          145
     120: aload         5
     122: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     127: checkcast     #38                 // class org/hibernate/mapping/Column
     130: astore        6
     132: aload         4
     134: aload         6
     136: invokeinterface #39,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     141: pop
     142: goto          110
     145: aload_0
     146: invokevirtual #40                 // Method getTable:()Lorg/hibernate/mapping/Table;
     149: aload_0
     150: invokevirtual #31                 // Method getForeignKeyName:()Ljava/lang/String;
     153: aload_0
     154: invokevirtual #41                 // Method getConstraintColumns:()Ljava/util/List;
     157: aload_0
     158: invokevirtual #15                 // Method getType:()Lorg/hibernate/type/Type;
     161: checkcast     #16                 // class org/hibernate/type/EntityType
     164: invokevirtual #17                 // Method org/hibernate/type/EntityType.getAssociatedEntityName:()Ljava/lang/String;
     167: aload         4
     169: invokevirtual #42                 // Method org/hibernate/mapping/Table.createForeignKey:(Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/util/List;)Lorg/hibernate/mapping/ForeignKey;
     172: astore        6
     174: aload         6
     176: aload_0
     177: invokevirtual #43                 // Method isCascadeDeleteEnabled:()Z
     180: invokevirtual #44                 // Method org/hibernate/mapping/ForeignKey.setCascadeDeleteEnabled:(Z)V
     183: return

  public java.lang.Object accept(org.hibernate.mapping.ValueVisitor);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #45,  2           // InterfaceMethod org/hibernate/mapping/ValueVisitor.accept:(Lorg/hibernate/mapping/ManyToOne;)Ljava/lang/Object;
       7: areturn

  public boolean isIgnoreNotFound();
    Code:
       0: aload_0
       1: getfield      #46                 // Field ignoreNotFound:Z
       4: ireturn

  public void setIgnoreNotFound(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #46                 // Field ignoreNotFound:Z
       5: return

  public void markAsLogicalOneToOne();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #11                 // Field isLogicalOneToOne:Z
       5: return

  public boolean isLogicalOneToOne();
    Code:
       0: aload_0
       1: getfield      #11                 // Field isLogicalOneToOne:Z
       4: ireturn
}
