Compiled from "Oracle9iDialect.java"
public class org.hibernate.dialect.Oracle9iDialect extends org.hibernate.dialect.Oracle8iDialect {
  private static final org.hibernate.dialect.pagination.AbstractLimitHandler LIMIT_HANDLER;

  public org.hibernate.dialect.Oracle9iDialect();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/hibernate/dialect/Oracle8iDialect."<init>":()V
       4: return

  protected void registerCharacterTypeMappings();
    Code:
       0: aload_0
       1: iconst_1
       2: ldc           #3                  // String char(1 char)
       4: invokevirtual #4                  // Method registerColumnType:(ILjava/lang/String;)V
       7: aload_0
       8: bipush        12
      10: ldc2_w        #5                  // long 4000l
      13: ldc           #7                  // String varchar2($l char)
      15: invokevirtual #8                  // Method registerColumnType:(IJLjava/lang/String;)V
      18: aload_0
      19: bipush        12
      21: ldc           #9                  // String long
      23: invokevirtual #4                  // Method registerColumnType:(ILjava/lang/String;)V
      26: return

  protected void registerDateTimeTypeMappings();
    Code:
       0: aload_0
       1: bipush        91
       3: ldc           #10                 // String date
       5: invokevirtual #4                  // Method registerColumnType:(ILjava/lang/String;)V
       8: aload_0
       9: bipush        92
      11: ldc           #10                 // String date
      13: invokevirtual #4                  // Method registerColumnType:(ILjava/lang/String;)V
      16: aload_0
      17: bipush        93
      19: ldc           #11                 // String timestamp
      21: invokevirtual #4                  // Method registerColumnType:(ILjava/lang/String;)V
      24: return

  public org.hibernate.sql.CaseFragment createCaseFragment();
    Code:
       0: new           #12                 // class org/hibernate/sql/ANSICaseFragment
       3: dup
       4: invokespecial #13                 // Method org/hibernate/sql/ANSICaseFragment."<init>":()V
       7: areturn

  public org.hibernate.dialect.pagination.LimitHandler getLimitHandler();
    Code:
       0: getstatic     #14                 // Field LIMIT_HANDLER:Lorg/hibernate/dialect/pagination/AbstractLimitHandler;
       3: areturn

  public java.lang.String getLimitString(java.lang.String, boolean);
    Code:
       0: aload_1
       1: invokevirtual #15                 // Method java/lang/String.trim:()Ljava/lang/String;
       4: astore_1
       5: aconst_null
       6: astore_3
       7: iconst_0
       8: istore        4
      10: aload_1
      11: getstatic     #16                 // Field java/util/Locale.ROOT:Ljava/util/Locale;
      14: invokevirtual #17                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      17: ldc           #18                 // String for update
      19: invokevirtual #19                 // Method java/lang/String.lastIndexOf:(Ljava/lang/String;)I
      22: istore        5
      24: iload         5
      26: iconst_m1
      27: if_icmple     50
      30: aload_1
      31: iload         5
      33: invokevirtual #20                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      36: astore_3
      37: aload_1
      38: iconst_0
      39: iload         5
      41: iconst_1
      42: isub
      43: invokevirtual #21                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      46: astore_1
      47: iconst_1
      48: istore        4
      50: new           #22                 // class java/lang/StringBuilder
      53: dup
      54: aload_1
      55: invokevirtual #23                 // Method java/lang/String.length:()I
      58: bipush        100
      60: iadd
      61: invokespecial #24                 // Method java/lang/StringBuilder."<init>":(I)V
      64: astore        6
      66: iload_2
      67: ifeq          81
      70: aload         6
      72: ldc           #25                 // String select * from ( select row_.*, rownum rownum_ from (
      74: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: pop
      78: goto          89
      81: aload         6
      83: ldc           #27                 // String select * from (
      85: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: pop
      89: aload         6
      91: aload_1
      92: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: pop
      96: iload_2
      97: ifeq          111
     100: aload         6
     102: ldc           #28                 // String  ) row_ where rownum <= ?) where rownum_ > ?
     104: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: pop
     108: goto          119
     111: aload         6
     113: ldc           #29                 // String  ) where rownum <= ?
     115: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: pop
     119: iload         4
     121: ifeq          139
     124: aload         6
     126: ldc           #30                 // String
     128: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: pop
     132: aload         6
     134: aload_3
     135: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     138: pop
     139: aload         6
     141: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     144: areturn

  public java.lang.String getSelectClauseNullString(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #32                 // Method getBasicSelectClauseNullString:(I)Ljava/lang/String;
       5: areturn

  public java.lang.String getCurrentTimestampSelectString();
    Code:
       0: ldc           #33                 // String select systimestamp from dual
       2: areturn

  public java.lang.String getCurrentTimestampSQLFunctionName();
    Code:
       0: ldc           #34                 // String current_timestamp
       2: areturn

  public java.lang.String getForUpdateString();
    Code:
       0: ldc           #35                 // String  for update
       2: areturn

  public java.lang.String getWriteLockString(int);
    Code:
       0: iload_1
       1: ifne          7
       4: ldc           #36                 // String  for update nowait
       6: areturn
       7: iload_1
       8: ifle          42
      11: iload_1
      12: i2f
      13: ldc           #37                 // float 1000.0f
      15: fdiv
      16: fstore_2
      17: fload_2
      18: invokestatic  #38                 // Method java/lang/Math.round:(F)I
      21: istore_1
      22: new           #22                 // class java/lang/StringBuilder
      25: dup
      26: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
      29: ldc           #40                 // String  for update wait
      31: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: iload_1
      35: invokevirtual #41                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      38: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: areturn
      42: ldc           #35                 // String  for update
      44: areturn

  public java.lang.String getReadLockString(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #42                 // Method getWriteLockString:(I)Ljava/lang/String;
       5: areturn

  public boolean supportsRowValueConstructorSyntaxInInList();
    Code:
       0: iconst_1
       1: ireturn

  public boolean supportsTupleDistinctCounts();
    Code:
       0: iconst_0
       1: ireturn

  static {};
    Code:
       0: new           #43                 // class org/hibernate/dialect/Oracle9iDialect$1
       3: dup
       4: invokespecial #44                 // Method org/hibernate/dialect/Oracle9iDialect$1."<init>":()V
       7: putstatic     #14                 // Field LIMIT_HANDLER:Lorg/hibernate/dialect/pagination/AbstractLimitHandler;
      10: return
}
