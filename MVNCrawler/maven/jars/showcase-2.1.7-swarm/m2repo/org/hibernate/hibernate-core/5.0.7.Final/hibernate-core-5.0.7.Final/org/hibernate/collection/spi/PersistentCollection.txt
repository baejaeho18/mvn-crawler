Compiled from "PersistentCollection.java"
public interface org.hibernate.collection.spi.PersistentCollection {
  public abstract java.lang.Object getOwner();

  public abstract void setOwner(java.lang.Object);

  public abstract boolean empty();

  public abstract void setSnapshot(java.io.Serializable, java.lang.String, java.io.Serializable);

  public abstract void postAction();

  public abstract java.lang.Object getValue();

  public abstract void beginRead();

  public abstract boolean endRead();

  public abstract boolean afterInitialize();

  public abstract boolean isDirectlyAccessible();

  public abstract boolean unsetSession(org.hibernate.engine.spi.SessionImplementor);

  public abstract boolean setCurrentSession(org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract void initializeFromCache(org.hibernate.persister.collection.CollectionPersister, java.io.Serializable, java.lang.Object);

  public abstract java.util.Iterator entries(org.hibernate.persister.collection.CollectionPersister);

  public abstract java.lang.Object readFrom(java.sql.ResultSet, org.hibernate.persister.collection.CollectionPersister, org.hibernate.loader.CollectionAliases, java.lang.Object) throws org.hibernate.HibernateException, java.sql.SQLException;

  public abstract java.lang.Object getIdentifier(java.lang.Object, int);

  public abstract java.lang.Object getIndex(java.lang.Object, int, org.hibernate.persister.collection.CollectionPersister);

  public abstract java.lang.Object getElement(java.lang.Object);

  public abstract java.lang.Object getSnapshotElement(java.lang.Object, int);

  public abstract void beforeInitialize(org.hibernate.persister.collection.CollectionPersister, int);

  public abstract boolean equalsSnapshot(org.hibernate.persister.collection.CollectionPersister);

  public abstract boolean isSnapshotEmpty(java.io.Serializable);

  public abstract java.io.Serializable disassemble(org.hibernate.persister.collection.CollectionPersister);

  public abstract boolean needsRecreate(org.hibernate.persister.collection.CollectionPersister);

  public abstract java.io.Serializable getSnapshot(org.hibernate.persister.collection.CollectionPersister);

  public abstract void forceInitialization();

  public abstract boolean entryExists(java.lang.Object, int);

  public abstract boolean needsInserting(java.lang.Object, int, org.hibernate.type.Type);

  public abstract boolean needsUpdating(java.lang.Object, int, org.hibernate.type.Type);

  public abstract boolean isRowUpdatePossible();

  public abstract java.util.Iterator getDeletes(org.hibernate.persister.collection.CollectionPersister, boolean);

  public abstract boolean isWrapper(java.lang.Object);

  public abstract boolean wasInitialized();

  public abstract boolean hasQueuedOperations();

  public abstract java.util.Iterator queuedAdditionIterator();

  public abstract java.util.Collection getQueuedOrphans(java.lang.String);

  public abstract java.io.Serializable getKey();

  public abstract java.lang.String getRole();

  public abstract boolean isUnreferenced();

  public abstract boolean isDirty();

  public abstract void clearDirty();

  public abstract java.io.Serializable getStoredSnapshot();

  public abstract void dirty();

  public abstract void preInsert(org.hibernate.persister.collection.CollectionPersister);

  public abstract void afterRowInsert(org.hibernate.persister.collection.CollectionPersister, java.lang.Object, int);

  public abstract java.util.Collection getOrphans(java.io.Serializable, java.lang.String);
}
