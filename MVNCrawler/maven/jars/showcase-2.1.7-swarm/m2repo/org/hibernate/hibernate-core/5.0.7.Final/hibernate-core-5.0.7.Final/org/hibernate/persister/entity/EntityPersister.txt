Compiled from "EntityPersister.java"
public interface org.hibernate.persister.entity.EntityPersister extends org.hibernate.cache.spi.OptimisticCacheSource,org.hibernate.persister.walking.spi.EntityDefinition {
  public static final java.lang.String ENTITY_ID;

  public abstract void generateEntityDefinition();

  public abstract void postInstantiate() throws org.hibernate.MappingException;

  public abstract org.hibernate.engine.spi.SessionFactoryImplementor getFactory();

  public abstract org.hibernate.engine.spi.EntityEntryFactory getEntityEntryFactory();

  public abstract java.lang.String getRootEntityName();

  public abstract java.lang.String getEntityName();

  public abstract org.hibernate.tuple.entity.EntityMetamodel getEntityMetamodel();

  public abstract boolean isSubclassEntityName(java.lang.String);

  public abstract java.io.Serializable[] getPropertySpaces();

  public abstract java.io.Serializable[] getQuerySpaces();

  public abstract boolean hasProxy();

  public abstract boolean hasCollections();

  public abstract boolean hasMutableProperties();

  public abstract boolean hasSubselectLoadableCollections();

  public abstract boolean hasCascades();

  public abstract boolean isMutable();

  public abstract boolean isInherited();

  public abstract boolean isIdentifierAssignedByInsert();

  public abstract org.hibernate.type.Type getPropertyType(java.lang.String) throws org.hibernate.MappingException;

  public abstract int[] findDirty(java.lang.Object[], java.lang.Object[], java.lang.Object, org.hibernate.engine.spi.SessionImplementor);

  public abstract int[] findModified(java.lang.Object[], java.lang.Object[], java.lang.Object, org.hibernate.engine.spi.SessionImplementor);

  public abstract boolean hasIdentifierProperty();

  public abstract boolean canExtractIdOutOfEntity();

  public abstract boolean isVersioned();

  public abstract org.hibernate.type.VersionType getVersionType();

  public abstract int getVersionProperty();

  public abstract boolean hasNaturalIdentifier();

  public abstract int[] getNaturalIdentifierProperties();

  public abstract java.lang.Object[] getNaturalIdentifierSnapshot(java.io.Serializable, org.hibernate.engine.spi.SessionImplementor);

  public abstract org.hibernate.id.IdentifierGenerator getIdentifierGenerator();

  public abstract boolean hasLazyProperties();

  public abstract java.io.Serializable loadEntityIdByNaturalId(java.lang.Object[], org.hibernate.LockOptions, org.hibernate.engine.spi.SessionImplementor);

  public abstract java.lang.Object load(java.io.Serializable, java.lang.Object, org.hibernate.LockMode, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract java.lang.Object load(java.io.Serializable, java.lang.Object, org.hibernate.LockOptions, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract void lock(java.io.Serializable, java.lang.Object, java.lang.Object, org.hibernate.LockMode, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract void lock(java.io.Serializable, java.lang.Object, java.lang.Object, org.hibernate.LockOptions, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract void insert(java.io.Serializable, java.lang.Object[], java.lang.Object, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract java.io.Serializable insert(java.lang.Object[], java.lang.Object, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract void delete(java.io.Serializable, java.lang.Object, java.lang.Object, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract void update(java.io.Serializable, java.lang.Object[], int[], boolean, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract org.hibernate.type.Type[] getPropertyTypes();

  public abstract java.lang.String[] getPropertyNames();

  public abstract boolean[] getPropertyInsertability();

  public abstract org.hibernate.engine.spi.ValueInclusion[] getPropertyInsertGenerationInclusions();

  public abstract org.hibernate.engine.spi.ValueInclusion[] getPropertyUpdateGenerationInclusions();

  public abstract boolean[] getPropertyUpdateability();

  public abstract boolean[] getPropertyCheckability();

  public abstract boolean[] getPropertyNullability();

  public abstract boolean[] getPropertyVersionability();

  public abstract boolean[] getPropertyLaziness();

  public abstract org.hibernate.engine.spi.CascadeStyle[] getPropertyCascadeStyles();

  public abstract org.hibernate.type.Type getIdentifierType();

  public abstract java.lang.String getIdentifierPropertyName();

  public abstract boolean isCacheInvalidationRequired();

  public abstract boolean isLazyPropertiesCacheable();

  public abstract boolean hasCache();

  public abstract org.hibernate.cache.spi.access.EntityRegionAccessStrategy getCacheAccessStrategy();

  public abstract org.hibernate.cache.spi.entry.CacheEntryStructure getCacheEntryStructure();

  public abstract org.hibernate.cache.spi.entry.CacheEntry buildCacheEntry(java.lang.Object, java.lang.Object[], java.lang.Object, org.hibernate.engine.spi.SessionImplementor);

  public abstract boolean hasNaturalIdCache();

  public abstract org.hibernate.cache.spi.access.NaturalIdRegionAccessStrategy getNaturalIdCacheAccessStrategy();

  public abstract org.hibernate.metadata.ClassMetadata getClassMetadata();

  public abstract boolean isBatchLoadable();

  public abstract boolean isSelectBeforeUpdateRequired();

  public abstract java.lang.Object[] getDatabaseSnapshot(java.io.Serializable, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract java.io.Serializable getIdByUniqueKey(java.io.Serializable, java.lang.String, org.hibernate.engine.spi.SessionImplementor);

  public abstract java.lang.Object getCurrentVersion(java.io.Serializable, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract java.lang.Object forceVersionIncrement(java.io.Serializable, java.lang.Object, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract boolean isInstrumented();

  public abstract boolean hasInsertGeneratedProperties();

  public abstract boolean hasUpdateGeneratedProperties();

  public abstract boolean isVersionPropertyGenerated();

  public abstract void afterInitialize(java.lang.Object, boolean, org.hibernate.engine.spi.SessionImplementor);

  public abstract void afterReassociate(java.lang.Object, org.hibernate.engine.spi.SessionImplementor);

  public abstract java.lang.Object createProxy(java.io.Serializable, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract java.lang.Boolean isTransient(java.lang.Object, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract java.lang.Object[] getPropertyValuesToInsert(java.lang.Object, java.util.Map, org.hibernate.engine.spi.SessionImplementor) throws org.hibernate.HibernateException;

  public abstract void processInsertGeneratedProperties(java.io.Serializable, java.lang.Object, java.lang.Object[], org.hibernate.engine.spi.SessionImplementor);

  public abstract void processUpdateGeneratedProperties(java.io.Serializable, java.lang.Object, java.lang.Object[], org.hibernate.engine.spi.SessionImplementor);

  public abstract java.lang.Class getMappedClass();

  public abstract boolean implementsLifecycle();

  public abstract java.lang.Class getConcreteProxyClass();

  public abstract void setPropertyValues(java.lang.Object, java.lang.Object[]);

  public abstract void setPropertyValue(java.lang.Object, int, java.lang.Object);

  public abstract java.lang.Object[] getPropertyValues(java.lang.Object);

  public abstract java.lang.Object getPropertyValue(java.lang.Object, int) throws org.hibernate.HibernateException;

  public abstract java.lang.Object getPropertyValue(java.lang.Object, java.lang.String);

  public abstract java.io.Serializable getIdentifier(java.lang.Object) throws org.hibernate.HibernateException;

  public abstract java.io.Serializable getIdentifier(java.lang.Object, org.hibernate.engine.spi.SessionImplementor);

  public abstract void setIdentifier(java.lang.Object, java.io.Serializable, org.hibernate.engine.spi.SessionImplementor);

  public abstract java.lang.Object getVersion(java.lang.Object) throws org.hibernate.HibernateException;

  public abstract java.lang.Object instantiate(java.io.Serializable, org.hibernate.engine.spi.SessionImplementor);

  public abstract boolean isInstance(java.lang.Object);

  public abstract boolean hasUninitializedLazyProperties(java.lang.Object);

  public abstract void resetIdentifier(java.lang.Object, java.io.Serializable, java.lang.Object, org.hibernate.engine.spi.SessionImplementor);

  public abstract org.hibernate.persister.entity.EntityPersister getSubclassEntityPersister(java.lang.Object, org.hibernate.engine.spi.SessionFactoryImplementor);

  public abstract org.hibernate.EntityMode getEntityMode();

  public abstract org.hibernate.tuple.entity.EntityTuplizer getEntityTuplizer();

  public abstract org.hibernate.bytecode.spi.EntityInstrumentationMetadata getInstrumentationMetadata();

  public abstract org.hibernate.internal.FilterAliasGenerator getFilterAliasGenerator(java.lang.String);

  public abstract int[] resolveAttributeIndexes(java.lang.String[]);

  public abstract boolean canUseReferenceCacheEntries();
}
