Compiled from "BoundedConcurrentHashMap.java"
final class org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS<K, V> implements org.hibernate.internal.util.collections.BoundedConcurrentHashMap$EvictionPolicy<K, V> {
  private static final float L_LIRS;

  private final org.hibernate.internal.util.collections.BoundedConcurrentHashMap$Segment<K, V> segment;

  private final java.util.concurrent.ConcurrentLinkedQueue<org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry<K, V>> accessQueue;

  private final int maxBatchQueueSize;

  private int size;

  private final float batchThresholdFactor;

  private final org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry<K, V> header;

  private final int maximumHotSize;

  private final int maximumSize;

  private int hotSize;

  public org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$Segment<K, V>, int, int, float);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #11                 // class org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry
       8: dup
       9: aconst_null
      10: aconst_null
      11: iconst_0
      12: aconst_null
      13: aconst_null
      14: invokespecial #12                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry."<init>":(Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRS;Ljava/lang/Object;ILorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$HashEntry;Ljava/lang/Object;)V
      17: putfield      #2                  // Field header:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
      20: aload_0
      21: aload_1
      22: putfield      #13                 // Field segment:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$Segment;
      25: aload_0
      26: iload_2
      27: putfield      #4                  // Field maximumSize:I
      30: aload_0
      31: iload_2
      32: invokestatic  #14                 // Method calculateLIRSize:(I)I
      35: putfield      #6                  // Field maximumHotSize:I
      38: aload_0
      39: iload_3
      40: bipush        64
      42: if_icmple     50
      45: bipush        64
      47: goto          51
      50: iload_3
      51: putfield      #16                 // Field maxBatchQueueSize:I
      54: aload_0
      55: fload         4
      57: putfield      #17                 // Field batchThresholdFactor:F
      60: aload_0
      61: new           #18                 // class java/util/concurrent/ConcurrentLinkedQueue
      64: dup
      65: invokespecial #19                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      68: putfield      #20                 // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      71: return

  private static int calculateLIRSize(int);
    Code:
       0: ldc           #22                 // float 0.95f
       2: iload_0
       3: i2f
       4: fmul
       5: f2i
       6: istore_1
       7: iload_1
       8: iload_0
       9: if_icmpne     18
      12: iload_0
      13: iconst_1
      14: isub
      15: goto          19
      18: iload_1
      19: ireturn

  public java.util.Set<org.hibernate.internal.util.collections.BoundedConcurrentHashMap$HashEntry<K, V>> execute();
    Code:
       0: new           #23                 // class java/util/HashSet
       3: dup
       4: invokespecial #24                 // Method java/util/HashSet."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #20                 // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      12: invokevirtual #25                 // Method java/util/concurrent/ConcurrentLinkedQueue.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          50
      25: aload_2
      26: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #11                 // class org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry
      34: astore_3
      35: aload_3
      36: invokevirtual #28                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.isResident:()Z
      39: ifeq          47
      42: aload_3
      43: aload_1
      44: invokevirtual #29                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.hit:(Ljava/util/Set;)V
      47: goto          16
      50: aload_0
      51: aload_1
      52: invokespecial #30                 // Method removeFromSegment:(Ljava/util/Set;)V
      55: aload_0
      56: getfield      #20                 // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      59: invokevirtual #31                 // Method java/util/concurrent/ConcurrentLinkedQueue.clear:()V
      62: goto          77
      65: astore        4
      67: aload_0
      68: getfield      #20                 // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      71: invokevirtual #31                 // Method java/util/concurrent/ConcurrentLinkedQueue.clear:()V
      74: aload         4
      76: athrow
      77: aload_1
      78: areturn
    Exception table:
       from    to  target type
           8    55    65   any
          65    67    65   any

  private void pruneStack(java.util.Set<org.hibernate.internal.util.collections.BoundedConcurrentHashMap$HashEntry<K, V>>);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method stackBottom:()Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       4: astore_2
       5: aload_2
       6: ifnull        49
       9: aload_2
      10: getfield      #32                 // Field org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.state:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$Recency;
      13: getstatic     #33                 // Field org/hibernate/internal/util/collections/BoundedConcurrentHashMap$Recency.LIR_RESIDENT:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$Recency;
      16: if_acmpeq     49
      19: aload_2
      20: invokestatic  #34                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.access$1000:(Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;)V
      23: aload_2
      24: getfield      #32                 // Field org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.state:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$Recency;
      27: getstatic     #35                 // Field org/hibernate/internal/util/collections/BoundedConcurrentHashMap$Recency.HIR_NONRESIDENT:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$Recency;
      30: if_acmpne     41
      33: aload_1
      34: aload_2
      35: invokeinterface #36,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      40: pop
      41: aload_0
      42: invokespecial #9                  // Method stackBottom:()Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
      45: astore_2
      46: goto          5
      49: return

  public java.util.Set<org.hibernate.internal.util.collections.BoundedConcurrentHashMap$HashEntry<K, V>> onEntryMiss(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry
       4: astore_2
       5: aload_2
       6: invokestatic  #37                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.access$1100:(Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;)Ljava/util/Set;
       9: astore_3
      10: aload_0
      11: aload_3
      12: invokespecial #30                 // Method removeFromSegment:(Ljava/util/Set;)V
      15: aload_3
      16: areturn

  private void removeFromSegment(java.util.Set<org.hibernate.internal.util.collections.BoundedConcurrentHashMap$HashEntry<K, V>>);
    Code:
       0: aload_1
       1: invokeinterface #38,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          69
      16: aload_2
      17: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #39                 // class org/hibernate/internal/util/collections/BoundedConcurrentHashMap$HashEntry
      25: astore_3
      26: aload_3
      27: checkcast     #11                 // class org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry
      30: invokestatic  #40                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.access$1200:(Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;)V
      33: aload_0
      34: getfield      #13                 // Field segment:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$Segment;
      37: getfield      #41                 // Field org/hibernate/internal/util/collections/BoundedConcurrentHashMap$Segment.evictionListener:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$EvictionListener;
      40: aload_3
      41: getfield      #42                 // Field org/hibernate/internal/util/collections/BoundedConcurrentHashMap$HashEntry.value:Ljava/lang/Object;
      44: invokeinterface #43,  2           // InterfaceMethod org/hibernate/internal/util/collections/BoundedConcurrentHashMap$EvictionListener.onEntryChosenForEviction:(Ljava/lang/Object;)V
      49: aload_0
      50: getfield      #13                 // Field segment:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$Segment;
      53: aload_3
      54: getfield      #44                 // Field org/hibernate/internal/util/collections/BoundedConcurrentHashMap$HashEntry.key:Ljava/lang/Object;
      57: aload_3
      58: getfield      #45                 // Field org/hibernate/internal/util/collections/BoundedConcurrentHashMap$HashEntry.hash:I
      61: aconst_null
      62: invokevirtual #46                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$Segment.remove:(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
      65: pop
      66: goto          7
      69: return

  public boolean onEntryHit(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_0
       1: getfield      #20                 // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
       4: aload_1
       5: checkcast     #11                 // class org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry
       8: invokevirtual #47                 // Method java/util/concurrent/ConcurrentLinkedQueue.add:(Ljava/lang/Object;)Z
      11: pop
      12: aload_0
      13: getfield      #20                 // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      16: invokevirtual #48                 // Method java/util/concurrent/ConcurrentLinkedQueue.size:()I
      19: i2f
      20: aload_0
      21: getfield      #16                 // Field maxBatchQueueSize:I
      24: i2f
      25: aload_0
      26: getfield      #17                 // Field batchThresholdFactor:F
      29: fmul
      30: fcmpl
      31: iflt          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  public boolean thresholdExpired();
    Code:
       0: aload_0
       1: getfield      #20                 // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
       4: invokevirtual #48                 // Method java/util/concurrent/ConcurrentLinkedQueue.size:()I
       7: aload_0
       8: getfield      #16                 // Field maxBatchQueueSize:I
      11: if_icmplt     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public void onEntryRemove(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$HashEntry<K, V>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry
       4: invokestatic  #49                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.access$1300:(Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: getfield      #20                 // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
      12: aload_1
      13: invokevirtual #50                 // Method java/util/concurrent/ConcurrentLinkedQueue.remove:(Ljava/lang/Object;)Z
      16: ifeq          22
      19: goto          8
      22: return

  public void clear();
    Code:
       0: aload_0
       1: getfield      #20                 // Field accessQueue:Ljava/util/concurrent/ConcurrentLinkedQueue;
       4: invokevirtual #31                 // Method java/util/concurrent/ConcurrentLinkedQueue.clear:()V
       7: return

  public org.hibernate.internal.util.collections.BoundedConcurrentHashMap$Eviction strategy();
    Code:
       0: getstatic     #51                 // Field org/hibernate/internal/util/collections/BoundedConcurrentHashMap$Eviction.LIRS:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$Eviction;
       3: areturn

  private org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry<K, V> stackBottom();
    Code:
       0: aload_0
       1: getfield      #2                  // Field header:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       4: invokestatic  #52                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.access$1400:(Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;)Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field header:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
      13: if_acmpne     20
      16: aconst_null
      17: goto          21
      20: aload_1
      21: areturn

  private org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry<K, V> queueFront();
    Code:
       0: aload_0
       1: getfield      #2                  // Field header:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       4: invokestatic  #53                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.access$1500:(Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;)Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field header:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
      13: if_acmpne     20
      16: aconst_null
      17: goto          21
      20: aload_1
      21: areturn

  private org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry<K, V> queueEnd();
    Code:
       0: aload_0
       1: getfield      #2                  // Field header:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       4: invokestatic  #54                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry.access$1600:(Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;)Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field header:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
      13: if_acmpne     20
      16: aconst_null
      17: goto          21
      20: aload_1
      21: areturn

  public org.hibernate.internal.util.collections.BoundedConcurrentHashMap$HashEntry<K, V> createNewEntry(K, int, org.hibernate.internal.util.collections.BoundedConcurrentHashMap$HashEntry<K, V>, V);
    Code:
       0: new           #11                 // class org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: aload_3
       8: aload         4
      10: invokespecial #12                 // Method org/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry."<init>":(Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRS;Ljava/lang/Object;ILorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$HashEntry;Ljava/lang/Object;)V
      13: areturn

  static org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry access$100(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method stackBottom:()Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       4: areturn

  static void access$200(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS, java.util.Set);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method pruneStack:(Ljava/util/Set;)V
       5: return

  static int access$300(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #7                  // Field hotSize:I
       4: ireturn

  static int access$400(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #6                  // Field maximumHotSize:I
       4: ireturn

  static int access$508(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field size:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #5                  // Field size:I
      11: ireturn

  static int access$500(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #5                  // Field size:I
       4: ireturn

  static int access$600(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #4                  // Field maximumSize:I
       4: ireturn

  static org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry access$700(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method queueFront:()Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       4: areturn

  static int access$308(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field hotSize:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #7                  // Field hotSize:I
      11: ireturn

  static int access$310(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: dup
       2: getfield      #7                  // Field hotSize:I
       5: dup_x1
       6: iconst_1
       7: isub
       8: putfield      #7                  // Field hotSize:I
      11: ireturn

  static int access$510(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field size:I
       5: dup_x1
       6: iconst_1
       7: isub
       8: putfield      #5                  // Field size:I
      11: ireturn

  static org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry access$800(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: getfield      #2                  // Field header:Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       4: areturn

  static org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry access$900(org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRS);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method queueEnd:()Lorg/hibernate/internal/util/collections/BoundedConcurrentHashMap$LIRSHashEntry;
       4: areturn
}
