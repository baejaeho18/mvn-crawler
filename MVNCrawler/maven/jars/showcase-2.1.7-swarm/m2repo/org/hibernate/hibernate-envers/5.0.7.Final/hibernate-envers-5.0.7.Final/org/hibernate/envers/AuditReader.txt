Compiled from "AuditReader.java"
public interface org.hibernate.envers.AuditReader {
  public abstract <T> T find(java.lang.Class<T>, java.lang.Object, java.lang.Number) throws java.lang.IllegalArgumentException, org.hibernate.envers.exception.NotAuditedException, java.lang.IllegalStateException;

  public abstract <T> T find(java.lang.Class<T>, java.lang.String, java.lang.Object, java.lang.Number) throws java.lang.IllegalArgumentException, org.hibernate.envers.exception.NotAuditedException, java.lang.IllegalStateException;

  public abstract <T> T find(java.lang.Class<T>, java.lang.String, java.lang.Object, java.lang.Number, boolean) throws java.lang.IllegalArgumentException, org.hibernate.envers.exception.NotAuditedException, java.lang.IllegalStateException;

  public abstract java.util.List<java.lang.Number> getRevisions(java.lang.Class<?>, java.lang.Object) throws java.lang.IllegalArgumentException, org.hibernate.envers.exception.NotAuditedException, java.lang.IllegalStateException;

  public abstract java.util.List<java.lang.Number> getRevisions(java.lang.Class<?>, java.lang.String, java.lang.Object) throws java.lang.IllegalArgumentException, org.hibernate.envers.exception.NotAuditedException, java.lang.IllegalStateException;

  public abstract java.util.Date getRevisionDate(java.lang.Number) throws java.lang.IllegalArgumentException, org.hibernate.envers.exception.RevisionDoesNotExistException, java.lang.IllegalStateException;

  public abstract java.lang.Number getRevisionNumberForDate(java.util.Date) throws java.lang.IllegalStateException, org.hibernate.envers.exception.RevisionDoesNotExistException, java.lang.IllegalArgumentException;

  public abstract <T> T findRevision(java.lang.Class<T>, java.lang.Number) throws java.lang.IllegalArgumentException, org.hibernate.envers.exception.RevisionDoesNotExistException, java.lang.IllegalStateException;

  public abstract <T> java.util.Map<java.lang.Number, T> findRevisions(java.lang.Class<T>, java.util.Set<java.lang.Number>) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;

  public abstract <T> T getCurrentRevision(java.lang.Class<T>, boolean);

  public abstract org.hibernate.envers.query.AuditQueryCreator createQuery();

  public abstract boolean isEntityClassAudited(java.lang.Class<?>);

  public abstract boolean isEntityNameAudited(java.lang.String);

  public abstract java.lang.String getEntityName(java.lang.Object, java.lang.Number, java.lang.Object) throws org.hibernate.HibernateException;

  public abstract org.hibernate.envers.CrossTypeRevisionChangesReader getCrossTypeRevisionChangesReader() throws org.hibernate.envers.exception.AuditException;
}
