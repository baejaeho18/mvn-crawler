Compiled from "OperationContext.java"
public interface org.jboss.as.controller.OperationContext extends org.jboss.as.controller.ExpressionResolver {
  public abstract void addStep(org.jboss.as.controller.OperationStepHandler, org.jboss.as.controller.OperationContext$Stage) throws java.lang.IllegalArgumentException;

  public abstract void addStep(org.jboss.as.controller.OperationStepHandler, org.jboss.as.controller.OperationContext$Stage, boolean) throws java.lang.IllegalArgumentException;

  public abstract void addStep(org.jboss.dmr.ModelNode, org.jboss.as.controller.OperationStepHandler, org.jboss.as.controller.OperationContext$Stage) throws java.lang.IllegalArgumentException;

  public abstract void addStep(org.jboss.dmr.ModelNode, org.jboss.as.controller.OperationStepHandler, org.jboss.as.controller.OperationContext$Stage, boolean) throws java.lang.IllegalArgumentException;

  public abstract void addStep(org.jboss.dmr.ModelNode, org.jboss.dmr.ModelNode, org.jboss.as.controller.OperationStepHandler, org.jboss.as.controller.OperationContext$Stage) throws java.lang.IllegalArgumentException;

  public abstract void addStep(org.jboss.dmr.ModelNode, org.jboss.dmr.ModelNode, org.jboss.as.controller.OperationStepHandler, org.jboss.as.controller.OperationContext$Stage, boolean) throws java.lang.IllegalArgumentException;

  public abstract java.io.InputStream getAttachmentStream(int);

  public abstract int getAttachmentStreamCount();

  public abstract org.jboss.dmr.ModelNode getResult();

  public abstract boolean hasResult();

  public abstract java.lang.String attachResultStream(java.lang.String, java.io.InputStream);

  public abstract void attachResultStream(java.lang.String, java.lang.String, java.io.InputStream);

  public abstract org.jboss.dmr.ModelNode getFailureDescription();

  public abstract boolean hasFailureDescription();

  public abstract org.jboss.dmr.ModelNode getServerResults();

  public abstract org.jboss.dmr.ModelNode getResponseHeaders();

  public abstract void completeStep(org.jboss.as.controller.OperationContext$RollbackHandler);

  public abstract void completeStep(org.jboss.as.controller.OperationContext$ResultHandler);

  public abstract void stepCompleted();

  public abstract org.jboss.as.controller.ProcessType getProcessType();

  public abstract org.jboss.as.controller.RunningMode getRunningMode();

  public abstract boolean isBooting();

  public abstract boolean isNormalServer();

  public abstract boolean isRollbackOnly();

  public abstract void setRollbackOnly();

  public abstract boolean isRollbackOnRuntimeFailure();

  public abstract boolean isResourceServiceRestartAllowed();

  public abstract void reloadRequired();

  public abstract void restartRequired();

  public abstract void revertReloadRequired();

  public abstract void revertRestartRequired();

  public abstract void runtimeUpdateSkipped();

  public abstract org.jboss.as.controller.PathAddress getCurrentAddress();

  public abstract java.lang.String getCurrentAddressValue();

  public abstract org.jboss.as.controller.registry.ImmutableManagementResourceRegistration getResourceRegistration();

  public abstract org.jboss.as.controller.registry.ManagementResourceRegistration getResourceRegistrationForUpdate();

  public abstract org.jboss.as.controller.registry.ImmutableManagementResourceRegistration getRootResourceRegistration();

  public abstract org.jboss.msc.service.ServiceRegistry getServiceRegistry(boolean) throws java.lang.UnsupportedOperationException;

  public abstract org.jboss.msc.service.ServiceController<?> removeService(org.jboss.msc.service.ServiceName) throws java.lang.UnsupportedOperationException;

  public abstract void removeService(org.jboss.msc.service.ServiceController<?>) throws java.lang.UnsupportedOperationException;

  public abstract org.jboss.msc.service.ServiceTarget getServiceTarget() throws java.lang.UnsupportedOperationException;

  public abstract void acquireControllerLock();

  public abstract org.jboss.as.controller.registry.Resource createResource(org.jboss.as.controller.PathAddress) throws java.lang.UnsupportedOperationException;

  public abstract void addResource(org.jboss.as.controller.PathAddress, org.jboss.as.controller.registry.Resource);

  public abstract void addResource(org.jboss.as.controller.PathAddress, int, org.jboss.as.controller.registry.Resource);

  public abstract org.jboss.as.controller.registry.Resource readResource(org.jboss.as.controller.PathAddress);

  public abstract org.jboss.as.controller.registry.Resource readResource(org.jboss.as.controller.PathAddress, boolean);

  public abstract org.jboss.as.controller.registry.Resource readResourceFromRoot(org.jboss.as.controller.PathAddress);

  public abstract org.jboss.as.controller.registry.Resource readResourceFromRoot(org.jboss.as.controller.PathAddress, boolean);

  public abstract org.jboss.as.controller.registry.Resource readResourceForUpdate(org.jboss.as.controller.PathAddress);

  public abstract org.jboss.as.controller.registry.Resource removeResource(org.jboss.as.controller.PathAddress) throws java.lang.UnsupportedOperationException;

  public abstract org.jboss.as.controller.registry.Resource getOriginalRootResource();

  public abstract boolean isModelAffected();

  public abstract boolean isResourceRegistryAffected();

  public abstract boolean isRuntimeAffected();

  public abstract org.jboss.as.controller.OperationContext$Stage getCurrentStage();

  public abstract void report(org.jboss.as.controller.client.MessageSeverity, java.lang.String);

  public abstract boolean markResourceRestarted(org.jboss.as.controller.PathAddress, java.lang.Object);

  public abstract boolean revertResourceRestarted(org.jboss.as.controller.PathAddress, java.lang.Object);

  public abstract org.jboss.dmr.ModelNode resolveExpressions(org.jboss.dmr.ModelNode) throws org.jboss.as.controller.OperationFailedException;

  public abstract <T> T getAttachment(org.jboss.as.controller.OperationContext$AttachmentKey<T>);

  public abstract <T> T attach(org.jboss.as.controller.OperationContext$AttachmentKey<T>, T);

  public abstract <T> T attachIfAbsent(org.jboss.as.controller.OperationContext$AttachmentKey<T>, T);

  public abstract <T> T detach(org.jboss.as.controller.OperationContext$AttachmentKey<T>);

  public abstract org.jboss.as.controller.access.AuthorizationResult authorize(org.jboss.dmr.ModelNode);

  public abstract org.jboss.as.controller.access.AuthorizationResult authorize(org.jboss.dmr.ModelNode, java.util.Set<org.jboss.as.controller.access.Action$ActionEffect>);

  public abstract org.jboss.as.controller.access.ResourceAuthorization authorizeResource(boolean, boolean);

  public abstract org.jboss.as.controller.access.AuthorizationResult authorize(org.jboss.dmr.ModelNode, java.lang.String, org.jboss.dmr.ModelNode);

  public abstract org.jboss.as.controller.access.AuthorizationResult authorize(org.jboss.dmr.ModelNode, java.lang.String, org.jboss.dmr.ModelNode, java.util.Set<org.jboss.as.controller.access.Action$ActionEffect>);

  public abstract org.jboss.as.controller.access.AuthorizationResult authorizeOperation(org.jboss.dmr.ModelNode);

  public abstract org.jboss.as.controller.access.Caller getCaller();

  public abstract void emit(org.jboss.as.controller.notification.Notification);

  public abstract org.jboss.as.controller.access.Environment getCallEnvironment();

  public abstract void registerCapability(org.jboss.as.controller.capability.RuntimeCapability, java.lang.String);

  public abstract void registerCapability(org.jboss.as.controller.capability.RuntimeCapability);

  public abstract void registerAdditionalCapabilityRequirement(java.lang.String, java.lang.String, java.lang.String);

  public abstract boolean hasOptionalCapability(java.lang.String, java.lang.String, java.lang.String);

  public abstract void requireOptionalCapability(java.lang.String, java.lang.String, java.lang.String) throws org.jboss.as.controller.OperationFailedException;

  public abstract void deregisterCapabilityRequirement(java.lang.String, java.lang.String);

  public abstract void deregisterCapability(java.lang.String);

  public abstract <T> T getCapabilityRuntimeAPI(java.lang.String, java.lang.Class<T>);

  public abstract <T> T getCapabilityRuntimeAPI(java.lang.String, java.lang.String, java.lang.Class<T>);

  public abstract org.jboss.msc.service.ServiceName getCapabilityServiceName(java.lang.String, java.lang.Class<?>);

  public abstract org.jboss.msc.service.ServiceName getCapabilityServiceName(java.lang.String, java.lang.String, java.lang.Class<?>);

  public abstract org.jboss.as.controller.capability.CapabilityServiceSupport getCapabilityServiceSupport();

  public abstract boolean isDefaultRequiresRuntime();
}
