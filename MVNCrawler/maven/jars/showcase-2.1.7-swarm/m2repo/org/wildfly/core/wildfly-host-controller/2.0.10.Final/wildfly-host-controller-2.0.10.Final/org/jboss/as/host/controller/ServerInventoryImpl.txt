Compiled from "ServerInventoryImpl.java"
public class org.jboss.as.host.controller.ServerInventoryImpl implements org.jboss.as.host.controller.ServerInventory {
  private final java.util.concurrent.ConcurrentMap<java.lang.String, org.jboss.as.host.controller.ManagedServer> servers;

  private final org.jboss.as.host.controller.HostControllerEnvironment environment;

  private final org.jboss.as.process.ProcessControllerClient processControllerClient;

  private final java.net.URI managementURI;

  private final org.jboss.as.domain.controller.DomainController domainController;

  private final org.jboss.as.controller.extension.ExtensionRegistry extensionRegistry;

  private volatile boolean shutdown;

  private volatile boolean connectionFinished;

  private volatile java.util.concurrent.CountDownLatch processInventoryLatch;

  private volatile java.util.Map<java.lang.String, org.jboss.as.process.ProcessInfo> processInfos;

  private final java.lang.Object shutdownCondition;

  org.jboss.as.host.controller.ServerInventoryImpl(org.jboss.as.domain.controller.DomainController, org.jboss.as.host.controller.HostControllerEnvironment, java.net.URI, org.jboss.as.process.ProcessControllerClient, org.jboss.as.controller.extension.ExtensionRegistry);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #8                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: new           #9                  // class java/lang/Object
      19: dup
      20: invokespecial #6                  // Method java/lang/Object."<init>":()V
      23: putfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      26: aload_0
      27: aload_1
      28: putfield      #3                  // Field domainController:Lorg/jboss/as/domain/controller/DomainController;
      31: aload_0
      32: aload_2
      33: putfield      #11                 // Field environment:Lorg/jboss/as/host/controller/HostControllerEnvironment;
      36: aload_0
      37: aload_3
      38: putfield      #12                 // Field managementURI:Ljava/net/URI;
      41: aload_0
      42: aload         4
      44: putfield      #13                 // Field processControllerClient:Lorg/jboss/as/process/ProcessControllerClient;
      47: aload_0
      48: aload         5
      50: putfield      #14                 // Field extensionRegistry:Lorg/jboss/as/controller/extension/ExtensionRegistry;
      53: return

  public java.lang.String getServerProcessName(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #15                 // Method org/jboss/as/host/controller/ManagedServer.getServerProcessName:(Ljava/lang/String;)Ljava/lang/String;
       4: areturn

  public java.lang.String getProcessServerName(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
       4: areturn

  public synchronized java.util.Map<java.lang.String, org.jboss.as.process.ProcessInfo> determineRunningProcesses();
    Code:
       0: aload_0
       1: new           #17                 // class java/util/concurrent/CountDownLatch
       4: dup
       5: iconst_1
       6: invokespecial #18                 // Method java/util/concurrent/CountDownLatch."<init>":(I)V
       9: putfield      #19                 // Field processInventoryLatch:Ljava/util/concurrent/CountDownLatch;
      12: aload_0
      13: getfield      #13                 // Field processControllerClient:Lorg/jboss/as/process/ProcessControllerClient;
      16: invokevirtual #20                 // Method org/jboss/as/process/ProcessControllerClient.requestProcessInventory:()V
      19: goto          32
      22: astore_1
      23: new           #22                 // class java/lang/RuntimeException
      26: dup
      27: aload_1
      28: invokespecial #23                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      31: athrow
      32: aload_0
      33: getfield      #19                 // Field processInventoryLatch:Ljava/util/concurrent/CountDownLatch;
      36: ldc2_w        #24                 // long 30l
      39: getstatic     #26                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      42: invokevirtual #27                 // Method java/util/concurrent/CountDownLatch.await:(JLjava/util/concurrent/TimeUnit;)Z
      45: ifne          72
      48: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      51: ldc2_w        #24                 // long 30l
      54: getstatic     #26                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      57: invokevirtual #29                 // Method java/util/concurrent/TimeUnit.toString:()Ljava/lang/String;
      60: getstatic     #30                 // Field java/util/Locale.US:Ljava/util/Locale;
      63: invokevirtual #31                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      66: invokeinterface #32,  4           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.couldNotGetServerInventory:(JLjava/lang/String;)Ljava/lang/RuntimeException;
      71: athrow
      72: goto          100
      75: astore_1
      76: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      79: ldc2_w        #24                 // long 30l
      82: getstatic     #26                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      85: invokevirtual #29                 // Method java/util/concurrent/TimeUnit.toString:()Ljava/lang/String;
      88: getstatic     #30                 // Field java/util/Locale.US:Ljava/util/Locale;
      91: invokevirtual #31                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      94: invokeinterface #32,  4           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.couldNotGetServerInventory:(JLjava/lang/String;)Ljava/lang/RuntimeException;
      99: athrow
     100: aload_0
     101: getfield      #34                 // Field processInfos:Ljava/util/Map;
     104: areturn
    Exception table:
       from    to  target type
          12    19    22   Class java/io/IOException
          32    72    75   Class java/lang/InterruptedException

  public java.util.Map<java.lang.String, org.jboss.as.process.ProcessInfo> determineRunningProcesses(boolean);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method determineRunningProcesses:()Ljava/util/Map;
       4: astore_2
       5: iload_1
       6: ifne          11
       9: aload_2
      10: areturn
      11: new           #36                 // class java/util/HashMap
      14: dup
      15: invokespecial #37                 // Method java/util/HashMap."<init>":()V
      18: astore_3
      19: aload_2
      20: invokeinterface #38,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      25: invokeinterface #39,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      30: astore        4
      32: aload         4
      34: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      39: ifeq          94
      42: aload         4
      44: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #42                 // class java/util/Map$Entry
      52: astore        5
      54: aload         5
      56: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      61: checkcast     #44                 // class java/lang/String
      64: invokestatic  #45                 // Method org/jboss/as/host/controller/ManagedServer.isServerProcess:(Ljava/lang/String;)Z
      67: ifeq          91
      70: aload_3
      71: aload         5
      73: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      78: aload         5
      80: invokeinterface #46,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      85: invokeinterface #47,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      90: pop
      91: goto          32
      94: aload_3
      95: areturn

  public org.jboss.as.controller.client.helpers.domain.ServerStatus determineServerStatus(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      13: astore_2
      14: aload_2
      15: ifnonnull     22
      18: getstatic     #50                 // Field org/jboss/as/controller/client/helpers/domain/ServerStatus.STOPPED:Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      21: areturn
      22: aload_2
      23: invokevirtual #51                 // Method org/jboss/as/host/controller/ManagedServer.getState:()Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      26: areturn

  public org.jboss.as.controller.client.helpers.domain.ServerStatus startServer(java.lang.String, org.jboss.dmr.ModelNode);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokevirtual #52                 // Method startServer:(Ljava/lang/String;Lorg/jboss/dmr/ModelNode;Z)Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
       7: areturn

  public org.jboss.as.controller.client.helpers.domain.ServerStatus startServer(java.lang.String, org.jboss.dmr.ModelNode, boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field shutdown:Z
       4: ifne          14
       7: aload_0
       8: getfield      #4                  // Field connectionFinished:Z
      11: ifeq          23
      14: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      17: invokeinterface #53,  1           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.hostAlreadyShutdown:()Ljava/lang/IllegalStateException;
      22: athrow
      23: aload_0
      24: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      27: aload_1
      28: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      36: astore        4
      38: aload         4
      40: ifnull        77
      43: aload         4
      45: invokevirtual #51                 // Method org/jboss/as/host/controller/ManagedServer.getState:()Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      48: getstatic     #54                 // Field org/jboss/as/controller/client/helpers/domain/ServerStatus.FAILED:Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      51: if_acmpne     77
      54: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      57: aconst_null
      58: aload_1
      59: invokeinterface #55,  3           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.failedToStartServer:(Ljava/lang/Throwable;Ljava/lang/String;)V
      64: aload_0
      65: aload_1
      66: sipush        1000
      69: iconst_1
      70: invokevirtual #56                 // Method stopServer:(Ljava/lang/String;IZ)Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      73: pop
      74: aconst_null
      75: astore        4
      77: aload         4
      79: ifnonnull     155
      82: bipush        16
      84: newarray       byte
      86: astore        5
      88: new           #58                 // class java/util/Random
      91: dup
      92: new           #59                 // class java/security/SecureRandom
      95: dup
      96: invokespecial #60                 // Method java/security/SecureRandom."<init>":()V
      99: invokevirtual #61                 // Method java/security/SecureRandom.nextLong:()J
     102: invokespecial #62                 // Method java/util/Random."<init>":(J)V
     105: aload         5
     107: invokevirtual #63                 // Method java/util/Random.nextBytes:([B)V
     110: invokestatic  #64                 // Method java/util/Base64.getEncoder:()Ljava/util/Base64$Encoder;
     113: aload         5
     115: invokevirtual #65                 // Method java/util/Base64$Encoder.encodeToString:([B)Ljava/lang/String;
     118: astore        6
     120: aload_0
     121: aload_1
     122: aload         6
     124: invokespecial #66                 // Method createManagedServer:(Ljava/lang/String;Ljava/lang/String;)Lorg/jboss/as/host/controller/ManagedServer;
     127: astore        7
     129: aload_0
     130: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
     133: aload_1
     134: aload         7
     136: invokeinterface #67,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     141: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
     144: astore        4
     146: aload         4
     148: ifnonnull     155
     151: aload         7
     153: astore        4
     155: aload         4
     157: aload_0
     158: aload_1
     159: aload_2
     160: invokespecial #68                 // Method createBootFactory:(Ljava/lang/String;Lorg/jboss/dmr/ModelNode;)Lorg/jboss/as/host/controller/ManagedServerBootCmdFactory;
     163: invokevirtual #69                 // Method org/jboss/as/host/controller/ManagedServer.start:(Lorg/jboss/as/host/controller/ManagedServerBootCmdFactory;)V
     166: aload_0
     167: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
     170: dup
     171: astore        5
     173: monitorenter
     174: aload_0
     175: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
     178: invokevirtual #70                 // Method java/lang/Object.notifyAll:()V
     181: aload         5
     183: monitorexit
     184: goto          195
     187: astore        8
     189: aload         5
     191: monitorexit
     192: aload         8
     194: athrow
     195: iload_3
     196: ifeq          211
     199: aload         4
     201: getstatic     #71                 // Field org/jboss/as/host/controller/ManagedServer$InternalState.SERVER_STARTED:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
     204: invokevirtual #72                 // Method org/jboss/as/host/controller/ManagedServer.awaitState:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)Z
     207: pop
     208: goto          220
     211: aload         4
     213: getstatic     #73                 // Field org/jboss/as/host/controller/ManagedServer$InternalState.SERVER_STARTING:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
     216: invokevirtual #72                 // Method org/jboss/as/host/controller/ManagedServer.awaitState:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)Z
     219: pop
     220: aload         4
     222: invokevirtual #51                 // Method org/jboss/as/host/controller/ManagedServer.getState:()Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
     225: areturn
    Exception table:
       from    to  target type
         174   184   187   any
         187   192   187   any

  public org.jboss.as.controller.client.helpers.domain.ServerStatus restartServer(java.lang.String, int, org.jboss.dmr.ModelNode);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: iconst_0
       5: invokevirtual #74                 // Method restartServer:(Ljava/lang/String;ILorg/jboss/dmr/ModelNode;Z)Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
       8: areturn

  public org.jboss.as.controller.client.helpers.domain.ServerStatus restartServer(java.lang.String, int, org.jboss.dmr.ModelNode, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #75                 // Method stopServer:(Ljava/lang/String;I)Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
       6: pop
       7: aload_0
       8: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      11: dup
      12: astore        5
      14: monitorenter
      15: aload_0
      16: getfield      #5                  // Field shutdown:Z
      19: ifne          29
      22: aload_0
      23: getfield      #4                  // Field connectionFinished:Z
      26: ifeq          38
      29: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      32: invokeinterface #53,  1           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.hostAlreadyShutdown:()Ljava/lang/IllegalStateException;
      37: athrow
      38: aload_0
      39: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      42: aload_1
      43: invokeinterface #76,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.containsKey:(Ljava/lang/Object;)Z
      48: ifne          54
      51: goto          75
      54: aload_0
      55: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      58: invokevirtual #77                 // Method java/lang/Object.wait:()V
      61: goto          15
      64: astore        6
      66: invokestatic  #78                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      69: invokevirtual #79                 // Method java/lang/Thread.interrupt:()V
      72: goto          75
      75: aload         5
      77: monitorexit
      78: goto          89
      81: astore        7
      83: aload         5
      85: monitorexit
      86: aload         7
      88: athrow
      89: aload_0
      90: aload_1
      91: aload_3
      92: iload         4
      94: invokevirtual #52                 // Method startServer:(Ljava/lang/String;Lorg/jboss/dmr/ModelNode;Z)Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      97: pop
      98: aload_0
      99: aload_1
     100: invokevirtual #80                 // Method determineServerStatus:(Ljava/lang/String;)Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
     103: areturn
    Exception table:
       from    to  target type
          54    61    64   Class java/lang/InterruptedException
          15    78    81   any
          81    86    81   any

  public org.jboss.as.controller.client.helpers.domain.ServerStatus stopServer(java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_0
       4: invokevirtual #56                 // Method stopServer:(Ljava/lang/String;IZ)Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
       7: areturn

  public org.jboss.as.controller.client.helpers.domain.ServerStatus stopServer(java.lang.String, int, boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      13: astore        4
      15: aload         4
      17: ifnonnull     24
      20: getstatic     #50                 // Field org/jboss/as/controller/client/helpers/domain/ServerStatus.STOPPED:Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      23: areturn
      24: invokestatic  #81                 // Method org/jboss/as/controller/CurrentOperationIdHolder.getCurrentOperationID:()Ljava/lang/Integer;
      27: astore        5
      29: aload         4
      31: aload         5
      33: ifnonnull     40
      36: iconst_m1
      37: goto          45
      40: aload         5
      42: invokevirtual #82                 // Method java/lang/Integer.intValue:()I
      45: iload_2
      46: invokevirtual #83                 // Method org/jboss/as/host/controller/ManagedServer.stop:(II)V
      49: iload_3
      50: ifeq          62
      53: aload         4
      55: getstatic     #84                 // Field org/jboss/as/host/controller/ManagedServer$InternalState.STOPPED:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
      58: invokevirtual #72                 // Method org/jboss/as/host/controller/ManagedServer.awaitState:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)Z
      61: pop
      62: aload         4
      64: invokevirtual #51                 // Method org/jboss/as/host/controller/ManagedServer.getState:()Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      67: areturn

  public void reconnectServer(java.lang.String, org.jboss.dmr.ModelNode, java.lang.String, boolean, boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field shutdown:Z
       4: ifne          14
       7: aload_0
       8: getfield      #4                  // Field connectionFinished:Z
      11: ifeq          23
      14: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      17: invokeinterface #53,  1           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.hostAlreadyShutdown:()Ljava/lang/IllegalStateException;
      22: athrow
      23: aload_0
      24: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      27: aload_1
      28: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      36: astore        6
      38: aload         6
      40: ifnull        58
      43: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      46: aload_1
      47: aload         6
      49: invokevirtual #51                 // Method org/jboss/as/host/controller/ManagedServer.getState:()Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      52: invokeinterface #85,  3           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.existingServerWithState:(Ljava/lang/String;Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;)V
      57: return
      58: aload_0
      59: aload_1
      60: aload_3
      61: invokespecial #66                 // Method createManagedServer:(Ljava/lang/String;Ljava/lang/String;)Lorg/jboss/as/host/controller/ManagedServer;
      64: astore        7
      66: aload_0
      67: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      70: aload_1
      71: aload         7
      73: invokeinterface #67,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      78: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      81: dup
      82: astore        6
      84: ifnull        102
      87: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      90: aload_1
      91: aload         6
      93: invokevirtual #51                 // Method org/jboss/as/host/controller/ManagedServer.getState:()Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      96: invokeinterface #85,  3           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.existingServerWithState:(Ljava/lang/String;Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;)V
     101: return
     102: iload         4
     104: ifeq          134
     107: iload         5
     109: ifne          126
     112: aload         7
     114: aload_0
     115: aload_1
     116: aload_2
     117: invokespecial #68                 // Method createBootFactory:(Ljava/lang/String;Lorg/jboss/dmr/ModelNode;)Lorg/jboss/as/host/controller/ManagedServerBootCmdFactory;
     120: invokevirtual #86                 // Method org/jboss/as/host/controller/ManagedServer.reconnectServerProcess:(Lorg/jboss/as/host/controller/ManagedServerBootCmdFactory;)V
     123: goto          139
     126: aload         7
     128: invokevirtual #87                 // Method org/jboss/as/host/controller/ManagedServer.setServerProcessStopping:()V
     131: goto          139
     134: aload         7
     136: invokevirtual #88                 // Method org/jboss/as/host/controller/ManagedServer.removeServerProcess:()V
     139: aload_0
     140: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
     143: dup
     144: astore        8
     146: monitorenter
     147: aload_0
     148: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
     151: invokevirtual #70                 // Method java/lang/Object.notifyAll:()V
     154: aload         8
     156: monitorexit
     157: goto          168
     160: astore        9
     162: aload         8
     164: monitorexit
     165: aload         9
     167: athrow
     168: return
    Exception table:
       from    to  target type
         147   157   160   any
         160   165   160   any

  public org.jboss.as.controller.client.helpers.domain.ServerStatus reloadServer(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field shutdown:Z
       4: ifne          14
       7: aload_0
       8: getfield      #4                  // Field connectionFinished:Z
      11: ifeq          23
      14: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      17: invokeinterface #53,  1           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.hostAlreadyShutdown:()Ljava/lang/IllegalStateException;
      22: athrow
      23: aload_0
      24: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      27: aload_1
      28: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      36: astore_3
      37: aload_3
      38: ifnonnull     45
      41: getstatic     #50                 // Field org/jboss/as/controller/client/helpers/domain/ServerStatus.STOPPED:Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      44: areturn
      45: aload_3
      46: invokestatic  #81                 // Method org/jboss/as/controller/CurrentOperationIdHolder.getCurrentOperationID:()Ljava/lang/Integer;
      49: invokevirtual #82                 // Method java/lang/Integer.intValue:()I
      52: invokevirtual #89                 // Method org/jboss/as/host/controller/ManagedServer.reload:(I)Z
      55: ifeq          81
      58: iload_2
      59: ifeq          73
      62: aload_3
      63: getstatic     #71                 // Field org/jboss/as/host/controller/ManagedServer$InternalState.SERVER_STARTED:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
      66: invokevirtual #72                 // Method org/jboss/as/host/controller/ManagedServer.awaitState:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)Z
      69: pop
      70: goto          81
      73: aload_3
      74: getstatic     #73                 // Field org/jboss/as/host/controller/ManagedServer$InternalState.SERVER_STARTING:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
      77: invokevirtual #72                 // Method org/jboss/as/host/controller/ManagedServer.awaitState:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)Z
      80: pop
      81: aload_0
      82: aload_1
      83: invokevirtual #80                 // Method determineServerStatus:(Ljava/lang/String;)Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
      86: areturn

  public void destroyServer(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      13: astore_2
      14: aload_2
      15: ifnonnull     19
      18: return
      19: aload_2
      20: invokevirtual #90                 // Method org/jboss/as/host/controller/ManagedServer.destroy:()V
      23: return

  public void killServer(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      13: astore_2
      14: aload_2
      15: ifnonnull     19
      18: return
      19: aload_2
      20: invokevirtual #91                 // Method org/jboss/as/host/controller/ManagedServer.kill:()V
      23: return

  public void stopServers(int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #92                 // Method stopServers:(IZ)V
       6: return

  public void stopServers(int, boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #93,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
       9: invokeinterface #94,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          63
      24: aload_3
      25: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      33: astore        4
      35: invokestatic  #81                 // Method org/jboss/as/controller/CurrentOperationIdHolder.getCurrentOperationID:()Ljava/lang/Integer;
      38: astore        5
      40: aload         4
      42: aload         5
      44: ifnonnull     51
      47: iconst_m1
      48: goto          56
      51: aload         5
      53: invokevirtual #82                 // Method java/lang/Integer.intValue:()I
      56: iload_1
      57: invokevirtual #83                 // Method org/jboss/as/host/controller/ManagedServer.stop:(II)V
      60: goto          15
      63: iload_2
      64: ifeq          221
      67: aload_0
      68: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      71: dup
      72: astore_3
      73: monitorenter
      74: aload_0
      75: getfield      #4                  // Field connectionFinished:Z
      78: ifeq          84
      81: goto          209
      84: iconst_0
      85: istore        4
      87: aload_0
      88: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      91: invokeinterface #93,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
      96: invokeinterface #94,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     101: astore        5
     103: aload         5
     105: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     110: ifeq          177
     113: aload         5
     115: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     120: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
     123: astore        6
     125: aload         6
     127: invokevirtual #51                 // Method org/jboss/as/host/controller/ManagedServer.getState:()Lorg/jboss/as/controller/client/helpers/domain/ServerStatus;
     130: astore        7
     132: getstatic     #95                 // Field org/jboss/as/host/controller/ServerInventoryImpl$3.$SwitchMap$org$jboss$as$controller$client$helpers$domain$ServerStatus:[I
     135: aload         7
     137: invokevirtual #96                 // Method org/jboss/as/controller/client/helpers/domain/ServerStatus.ordinal:()I
     140: iaload
     141: tableswitch   { // 1 to 3
                     1: 168
                     2: 168
                     3: 168
               default: 171
          }
     168: goto          174
     171: iinc          4, 1
     174: goto          103
     177: iload         4
     179: ifne          185
     182: goto          209
     185: aload_0
     186: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
     189: invokevirtual #77                 // Method java/lang/Object.wait:()V
     192: goto          206
     195: astore        5
     197: invokestatic  #78                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     200: invokevirtual #79                 // Method java/lang/Thread.interrupt:()V
     203: goto          209
     206: goto          74
     209: aload_3
     210: monitorexit
     211: goto          221
     214: astore        8
     216: aload_3
     217: monitorexit
     218: aload         8
     220: athrow
     221: return
    Exception table:
       from    to  target type
         185   192   195   Class java/lang/InterruptedException
          74   211   214   any
         214   218   214   any

  public void awaitServersState(java.util.Collection<java.lang.String>, boolean);
    Code:
       0: aload_1
       1: invokeinterface #94,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       6: astore_3
       7: aload_3
       8: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          73
      16: aload_3
      17: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #44                 // class java/lang/String
      25: astore        4
      27: aload_0
      28: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      31: aload         4
      33: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      38: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      41: astore        5
      43: aload         5
      45: ifnonnull     51
      48: goto          7
      51: aload         5
      53: iload_2
      54: ifeq          63
      57: getstatic     #71                 // Field org/jboss/as/host/controller/ManagedServer$InternalState.SERVER_STARTED:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
      60: goto          66
      63: getstatic     #84                 // Field org/jboss/as/host/controller/ManagedServer$InternalState.STOPPED:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
      66: invokevirtual #72                 // Method org/jboss/as/host/controller/ManagedServer.awaitState:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)Z
      69: pop
      70: goto          7
      73: return

  public void suspendServer(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      13: astore_2
      14: aload_2
      15: ifnonnull     19
      18: return
      19: aload_2
      20: invokevirtual #97                 // Method org/jboss/as/host/controller/ManagedServer.suspend:()Z
      23: pop
      24: return

  public void resumeServer(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      13: astore_2
      14: aload_2
      15: ifnonnull     19
      18: return
      19: aload_2
      20: invokevirtual #98                 // Method org/jboss/as/host/controller/ManagedServer.resume:()Z
      23: pop
      24: return

  public boolean awaitServerSuspend(java.util.Set<java.lang.String>, int);
    Code:
       0: invokestatic  #99                 // Method java/lang/System.currentTimeMillis:()J
       3: iload_2
       4: i2l
       5: ladd
       6: lstore_3
       7: aload_1
       8: invokeinterface #39,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      13: astore        5
      15: aload         5
      17: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          103
      25: aload         5
      27: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #44                 // class java/lang/String
      35: astore        6
      37: aload_0
      38: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      41: aload         6
      43: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      48: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      51: astore        7
      53: aload         7
      55: ifnull        100
      58: iload_2
      59: iconst_m1
      60: if_icmpne     74
      63: aload         7
      65: ldc2_w        #100                // long -1l
      68: invokevirtual #102                // Method org/jboss/as/host/controller/ManagedServer.awaitSuspended:(J)V
      71: goto          100
      74: lload_3
      75: invokestatic  #99                 // Method java/lang/System.currentTimeMillis:()J
      78: lsub
      79: lstore        8
      81: lload         8
      83: lconst_0
      84: lcmp
      85: ifle          98
      88: aload         7
      90: lload         8
      92: invokevirtual #102                // Method org/jboss/as/host/controller/ManagedServer.awaitSuspended:(J)V
      95: goto          100
      98: iconst_0
      99: ireturn
     100: goto          15
     103: lload_3
     104: invokestatic  #99                 // Method java/lang/System.currentTimeMillis:()J
     107: lsub
     108: lstore        5
     110: lload         5
     112: lconst_0
     113: lcmp
     114: ifle          121
     117: iconst_1
     118: goto          122
     121: iconst_0
     122: ireturn

  void shutdown(boolean, int, boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field shutdown:Z
       4: istore        4
       6: aload_0
       7: iconst_1
       8: putfield      #5                  // Field shutdown:Z
      11: iload         4
      13: ifne          34
      16: aload_0
      17: getfield      #4                  // Field connectionFinished:Z
      20: ifeq          24
      23: return
      24: iload_1
      25: ifeq          34
      28: aload_0
      29: iload_2
      30: iload_3
      31: invokevirtual #92                 // Method stopServers:(IZ)V
      34: return

  public org.jboss.as.controller.ProxyController serverCommunicationRegistered(java.lang.String, org.jboss.as.protocol.mgmt.ManagementChannelHandler);
    Code:
       0: aload_0
       1: getfield      #5                  // Field shutdown:Z
       4: ifne          14
       7: aload_0
       8: getfield      #4                  // Field connectionFinished:Z
      11: ifeq          23
      14: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      17: invokeinterface #53,  1           // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.hostAlreadyShutdown:()Ljava/lang/IllegalStateException;
      22: athrow
      23: aload_1
      24: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
      27: astore_3
      28: aload_0
      29: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
      32: aload_3
      33: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      38: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      41: astore        4
      43: aload         4
      45: ifnonnull     59
      48: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      51: aload_3
      52: invokeinterface #103,  2          // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.noServerAvailable:(Ljava/lang/String;)V
      57: aconst_null
      58: areturn
      59: aload         4
      61: aload_2
      62: invokevirtual #104                // Method org/jboss/as/host/controller/ManagedServer.channelRegistered:(Lorg/jboss/as/protocol/mgmt/ManagementChannelHandler;)Lorg/jboss/as/controller/remote/TransactionalProtocolClient;
      65: astore        5
      67: aload_2
      68: invokevirtual #105                // Method org/jboss/as/protocol/mgmt/ManagementChannelHandler.getChannel:()Lorg/jboss/remoting3/Channel;
      71: astore        6
      73: aload         6
      75: new           #106                // class org/jboss/as/host/controller/ServerInventoryImpl$1
      78: dup
      79: aload_0
      80: aload         4
      82: aload         5
      84: invokespecial #107                // Method org/jboss/as/host/controller/ServerInventoryImpl$1."<init>":(Lorg/jboss/as/host/controller/ServerInventoryImpl;Lorg/jboss/as/host/controller/ManagedServer;Lorg/jboss/as/controller/remote/TransactionalProtocolClient;)V
      87: invokeinterface #108,  2          // InterfaceMethod org/jboss/remoting3/Channel.addCloseHandler:(Lorg/jboss/remoting3/CloseHandler;)Lorg/jboss/remoting3/HandleableCloseable$Key;
      92: pop
      93: aload         4
      95: invokevirtual #109                // Method org/jboss/as/host/controller/ManagedServer.getProxyController:()Lorg/jboss/as/controller/TransformingProxyController;
      98: areturn
      99: astore        5
     101: new           #22                 // class java/lang/RuntimeException
     104: dup
     105: aload         5
     107: invokespecial #23                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     110: athrow
    Exception table:
       from    to  target type
          59    98    99   Class java/io/IOException

  public boolean serverReconnected(java.lang.String, org.jboss.as.protocol.mgmt.ManagementChannelHandler);
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_3
       5: aload_0
       6: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       9: aload_3
      10: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      18: astore        4
      20: aload_0
      21: aload_1
      22: aload_2
      23: invokevirtual #110                // Method serverCommunicationRegistered:(Ljava/lang/String;Lorg/jboss/as/protocol/mgmt/ManagementChannelHandler;)Lorg/jboss/as/controller/ProxyController;
      26: pop
      27: aload_0
      28: aload_1
      29: invokevirtual #111                // Method serverStarted:(Ljava/lang/String;)V
      32: aload_0
      33: getfield      #3                  // Field domainController:Lorg/jboss/as/domain/controller/DomainController;
      36: aload         4
      38: invokevirtual #109                // Method org/jboss/as/host/controller/ManagedServer.getProxyController:()Lorg/jboss/as/controller/TransformingProxyController;
      41: invokeinterface #112,  2          // InterfaceMethod org/jboss/as/domain/controller/DomainController.registerRunningServer:(Lorg/jboss/as/controller/ProxyController;)V
      46: aload         4
      48: invokevirtual #113                // Method org/jboss/as/host/controller/ManagedServer.isRequiresReload:()Z
      51: ifne          58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: ireturn

  public void serverProcessStopped(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       9: aload_2
      10: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      18: astore_3
      19: aload_3
      20: ifnonnull     33
      23: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      26: aload_2
      27: invokeinterface #103,  2          // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.noServerAvailable:(Ljava/lang/String;)V
      32: return
      33: aload_0
      34: getfield      #3                  // Field domainController:Lorg/jboss/as/domain/controller/DomainController;
      37: aload_3
      38: invokevirtual #114                // Method org/jboss/as/host/controller/ManagedServer.getServerName:()Ljava/lang/String;
      41: invokeinterface #115,  2          // InterfaceMethod org/jboss/as/domain/controller/DomainController.unregisterRunningServer:(Ljava/lang/String;)V
      46: aload_3
      47: invokevirtual #116                // Method org/jboss/as/host/controller/ManagedServer.processFinished:()V
      50: aload_0
      51: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      54: dup
      55: astore        4
      57: monitorenter
      58: aload_0
      59: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      62: invokevirtual #70                 // Method java/lang/Object.notifyAll:()V
      65: aload         4
      67: monitorexit
      68: goto          79
      71: astore        5
      73: aload         4
      75: monitorexit
      76: aload         5
      78: athrow
      79: return
    Exception table:
       from    to  target type
          58    68    71   any
          71    76    71   any

  public void connectionFinished();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #4                  // Field connectionFinished:Z
       5: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
       8: ldc           #117                // String process controller connection closed.
      10: invokeinterface #118,  2          // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.debug:(Ljava/lang/Object;)V
      15: aload_0
      16: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      19: dup
      20: astore_1
      21: monitorenter
      22: aload_0
      23: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      26: invokevirtual #70                 // Method java/lang/Object.notifyAll:()V
      29: aload_1
      30: monitorexit
      31: goto          39
      34: astore_2
      35: aload_1
      36: monitorexit
      37: aload_2
      38: athrow
      39: return
    Exception table:
       from    to  target type
          22    31    34   any
          34    37    34   any

  public void serverStarted(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       9: aload_2
      10: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      18: astore_3
      19: aload_3
      20: ifnonnull     33
      23: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      26: aload_2
      27: invokeinterface #103,  2          // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.noServerAvailable:(Ljava/lang/String;)V
      32: return
      33: aload_3
      34: aconst_null
      35: invokevirtual #119                // Method org/jboss/as/host/controller/ManagedServer.serverStarted:(Lorg/jboss/as/host/controller/ManagedServer$TransitionTask;)V
      38: aload_0
      39: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      42: dup
      43: astore        4
      45: monitorenter
      46: aload_0
      47: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      50: invokevirtual #70                 // Method java/lang/Object.notifyAll:()V
      53: aload         4
      55: monitorexit
      56: goto          67
      59: astore        5
      61: aload         4
      63: monitorexit
      64: aload         5
      66: athrow
      67: return
    Exception table:
       from    to  target type
          46    56    59   any
          59    64    59   any

  public void serverStartFailed(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       9: aload_2
      10: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      18: astore_3
      19: aload_3
      20: ifnonnull     33
      23: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      26: aload_2
      27: invokeinterface #103,  2          // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.noServerAvailable:(Ljava/lang/String;)V
      32: return
      33: aload_3
      34: invokevirtual #120                // Method org/jboss/as/host/controller/ManagedServer.serverStartFailed:()V
      37: aload_0
      38: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      41: dup
      42: astore        4
      44: monitorenter
      45: aload_0
      46: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      49: invokevirtual #70                 // Method java/lang/Object.notifyAll:()V
      52: aload         4
      54: monitorexit
      55: goto          66
      58: astore        5
      60: aload         4
      62: monitorexit
      63: aload         5
      65: athrow
      66: return
    Exception table:
       from    to  target type
          45    55    58   any
          58    63    58   any

  public void serverProcessAdded(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       9: aload_2
      10: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      18: astore_3
      19: aload_3
      20: ifnonnull     33
      23: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      26: aload_2
      27: invokeinterface #103,  2          // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.noServerAvailable:(Ljava/lang/String;)V
      32: return
      33: aload_3
      34: invokevirtual #121                // Method org/jboss/as/host/controller/ManagedServer.processAdded:()V
      37: aload_0
      38: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      41: dup
      42: astore        4
      44: monitorenter
      45: aload_0
      46: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      49: invokevirtual #70                 // Method java/lang/Object.notifyAll:()V
      52: aload         4
      54: monitorexit
      55: goto          66
      58: astore        5
      60: aload         4
      62: monitorexit
      63: aload         5
      65: athrow
      66: return
    Exception table:
       from    to  target type
          45    55    58   any
          58    63    58   any

  public void serverProcessStarted(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       9: aload_2
      10: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      18: astore_3
      19: aload_3
      20: ifnonnull     33
      23: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      26: aload_2
      27: invokeinterface #103,  2          // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.noServerAvailable:(Ljava/lang/String;)V
      32: return
      33: aload_3
      34: invokevirtual #122                // Method org/jboss/as/host/controller/ManagedServer.processStarted:()V
      37: aload_0
      38: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      41: dup
      42: astore        4
      44: monitorenter
      45: aload_0
      46: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      49: invokevirtual #70                 // Method java/lang/Object.notifyAll:()V
      52: aload         4
      54: monitorexit
      55: goto          66
      58: astore        5
      60: aload         4
      62: monitorexit
      63: aload         5
      65: athrow
      66: return
    Exception table:
       from    to  target type
          45    55    58   any
          58    63    58   any

  public void serverProcessRemoved(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       9: aload_2
      10: invokeinterface #123,  2          // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      18: astore_3
      19: aload_3
      20: ifnonnull     33
      23: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      26: aload_2
      27: invokeinterface #103,  2          // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.noServerAvailable:(Ljava/lang/String;)V
      32: return
      33: aload_3
      34: invokevirtual #124                // Method org/jboss/as/host/controller/ManagedServer.processRemoved:()V
      37: aload_0
      38: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      41: dup
      42: astore        4
      44: monitorenter
      45: aload_0
      46: getfield      #10                 // Field shutdownCondition:Ljava/lang/Object;
      49: invokevirtual #70                 // Method java/lang/Object.notifyAll:()V
      52: aload         4
      54: monitorexit
      55: goto          66
      58: astore        5
      60: aload         4
      62: monitorexit
      63: aload         5
      65: athrow
      66: return
    Exception table:
       from    to  target type
          45    55    58   any
          58    63    58   any

  public void operationFailed(java.lang.String, org.jboss.as.process.ProcessMessageHandler$OperationType);
    Code:
       0: aload_1
       1: invokestatic  #16                 // Method org/jboss/as/host/controller/ManagedServer.getServerName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_3
       5: aload_0
       6: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       9: aload_3
      10: invokeinterface #48,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #49                 // class org/jboss/as/host/controller/ManagedServer
      18: astore        4
      20: aload         4
      22: ifnonnull     35
      25: getstatic     #28                 // Field org/jboss/as/host/controller/logging/HostControllerLogger.ROOT_LOGGER:Lorg/jboss/as/host/controller/logging/HostControllerLogger;
      28: aload_3
      29: invokeinterface #103,  2          // InterfaceMethod org/jboss/as/host/controller/logging/HostControllerLogger.noServerAvailable:(Ljava/lang/String;)V
      34: return
      35: getstatic     #125                // Field org/jboss/as/host/controller/ServerInventoryImpl$3.$SwitchMap$org$jboss$as$process$ProcessMessageHandler$OperationType:[I
      38: aload_2
      39: invokevirtual #126                // Method org/jboss/as/process/ProcessMessageHandler$OperationType.ordinal:()I
      42: iaload
      43: tableswitch   { // 1 to 6
                     1: 80
                     2: 91
                     3: 102
                     4: 113
                     5: 113
                     6: 124
               default: 132
          }
      80: aload         4
      82: getstatic     #127                // Field org/jboss/as/host/controller/ManagedServer$InternalState.PROCESS_ADDING:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
      85: invokevirtual #128                // Method org/jboss/as/host/controller/ManagedServer.transitionFailed:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)V
      88: goto          132
      91: aload         4
      93: getstatic     #129                // Field org/jboss/as/host/controller/ManagedServer$InternalState.PROCESS_STARTING:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
      96: invokevirtual #128                // Method org/jboss/as/host/controller/ManagedServer.transitionFailed:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)V
      99: goto          132
     102: aload         4
     104: getstatic     #130                // Field org/jboss/as/host/controller/ManagedServer$InternalState.PROCESS_STOPPING:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
     107: invokevirtual #128                // Method org/jboss/as/host/controller/ManagedServer.transitionFailed:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)V
     110: goto          132
     113: aload         4
     115: getstatic     #73                 // Field org/jboss/as/host/controller/ManagedServer$InternalState.SERVER_STARTING:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
     118: invokevirtual #128                // Method org/jboss/as/host/controller/ManagedServer.transitionFailed:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)V
     121: goto          132
     124: aload         4
     126: getstatic     #131                // Field org/jboss/as/host/controller/ManagedServer$InternalState.PROCESS_REMOVING:Lorg/jboss/as/host/controller/ManagedServer$InternalState;
     129: invokevirtual #128                // Method org/jboss/as/host/controller/ManagedServer.transitionFailed:(Lorg/jboss/as/host/controller/ManagedServer$InternalState;)V
     132: return

  public void processInventory(java.util.Map<java.lang.String, org.jboss.as.process.ProcessInfo>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #34                 // Field processInfos:Ljava/util/Map;
       5: aload_0
       6: getfield      #19                 // Field processInventoryLatch:Ljava/util/concurrent/CountDownLatch;
       9: ifnull        19
      12: aload_0
      13: getfield      #19                 // Field processInventoryLatch:Ljava/util/concurrent/CountDownLatch;
      16: invokevirtual #132                // Method java/util/concurrent/CountDownLatch.countDown:()V
      19: return

  private org.jboss.as.host.controller.ManagedServer createManagedServer(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #3                  // Field domainController:Lorg/jboss/as/domain/controller/DomainController;
       4: invokeinterface #133,  1          // InterfaceMethod org/jboss/as/domain/controller/DomainController.getLocalHostInfo:()Lorg/jboss/as/domain/controller/LocalHostControllerInfo;
       9: invokeinterface #134,  1          // InterfaceMethod org/jboss/as/domain/controller/LocalHostControllerInfo.getLocalHostName:()Ljava/lang/String;
      14: astore_3
      15: aload_0
      16: getfield      #14                 // Field extensionRegistry:Lorg/jboss/as/controller/extension/ExtensionRegistry;
      19: invokestatic  #135                // Method org/jboss/as/controller/transform/TransformerRegistry.resolveVersions:(Lorg/jboss/as/controller/extension/ExtensionRegistry;)Ljava/util/Map;
      22: astore        4
      24: iconst_4
      25: iconst_0
      26: iconst_0
      27: invokestatic  #137                // Method org/jboss/as/controller/ModelVersion.create:(III)Lorg/jboss/as/controller/ModelVersion;
      30: astore        5
      32: aload_3
      33: aload_0
      34: getfield      #14                 // Field extensionRegistry:Lorg/jboss/as/controller/extension/ExtensionRegistry;
      37: invokevirtual #138                // Method org/jboss/as/controller/extension/ExtensionRegistry.getTransformerRegistry:()Lorg/jboss/as/controller/transform/TransformerRegistry;
      40: aload         5
      42: aload         4
      44: getstatic     #139                // Field org/jboss/as/controller/transform/TransformationTarget$TransformationTargetType.SERVER:Lorg/jboss/as/controller/transform/TransformationTarget$TransformationTargetType;
      47: iconst_0
      48: invokestatic  #140                // Method org/jboss/as/controller/transform/TransformationTargetImpl.create:(Ljava/lang/String;Lorg/jboss/as/controller/transform/TransformerRegistry;Lorg/jboss/as/controller/ModelVersion;Ljava/util/Map;Lorg/jboss/as/controller/transform/TransformationTarget$TransformationTargetType;Z)Lorg/jboss/as/controller/transform/TransformationTargetImpl;
      51: astore        6
      53: new           #49                 // class org/jboss/as/host/controller/ManagedServer
      56: dup
      57: aload_3
      58: aload_1
      59: aload_2
      60: aload_0
      61: getfield      #13                 // Field processControllerClient:Lorg/jboss/as/process/ProcessControllerClient;
      64: aload_0
      65: getfield      #12                 // Field managementURI:Ljava/net/URI;
      68: aload         6
      70: invokespecial #141                // Method org/jboss/as/host/controller/ManagedServer."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/jboss/as/process/ProcessControllerClient;Ljava/net/URI;Lorg/jboss/as/controller/transform/TransformationTarget;)V
      73: areturn

  private org.jboss.as.host.controller.ManagedServerBootCmdFactory createBootFactory(java.lang.String, org.jboss.dmr.ModelNode);
    Code:
       0: aload_0
       1: getfield      #3                  // Field domainController:Lorg/jboss/as/domain/controller/DomainController;
       4: invokeinterface #133,  1          // InterfaceMethod org/jboss/as/domain/controller/DomainController.getLocalHostInfo:()Lorg/jboss/as/domain/controller/LocalHostControllerInfo;
       9: invokeinterface #134,  1          // InterfaceMethod org/jboss/as/domain/controller/LocalHostControllerInfo.getLocalHostName:()Ljava/lang/String;
      14: astore_3
      15: aload_2
      16: ldc           #142                // String host
      18: invokevirtual #143                // Method org/jboss/dmr/ModelNode.require:(Ljava/lang/String;)Lorg/jboss/dmr/ModelNode;
      21: aload_3
      22: invokevirtual #143                // Method org/jboss/dmr/ModelNode.require:(Ljava/lang/String;)Lorg/jboss/dmr/ModelNode;
      25: astore        4
      27: new           #144                // class org/jboss/as/host/controller/ManagedServerBootCmdFactory
      30: dup
      31: aload_1
      32: aload_2
      33: aload         4
      35: aload_0
      36: getfield      #11                 // Field environment:Lorg/jboss/as/host/controller/HostControllerEnvironment;
      39: aload_0
      40: getfield      #3                  // Field domainController:Lorg/jboss/as/domain/controller/DomainController;
      43: invokeinterface #145,  1          // InterfaceMethod org/jboss/as/domain/controller/DomainController.getExpressionResolver:()Lorg/jboss/as/controller/ExpressionResolver;
      48: invokespecial #146                // Method org/jboss/as/host/controller/ManagedServerBootCmdFactory."<init>":(Ljava/lang/String;Lorg/jboss/dmr/ModelNode;Lorg/jboss/dmr/ModelNode;Lorg/jboss/as/host/controller/HostControllerEnvironment;Lorg/jboss/as/controller/ExpressionResolver;)V
      51: areturn

  public javax.security.auth.callback.CallbackHandler getServerCallbackHandler();
    Code:
       0: new           #147                // class org/jboss/as/host/controller/ServerInventoryImpl$2
       3: dup
       4: aload_0
       5: invokespecial #148                // Method org/jboss/as/host/controller/ServerInventoryImpl$2."<init>":(Lorg/jboss/as/host/controller/ServerInventoryImpl;)V
       8: areturn

  static boolean access$000(org.jboss.as.host.controller.ServerInventoryImpl);
    Code:
       0: aload_0
       1: getfield      #5                  // Field shutdown:Z
       4: ireturn

  static boolean access$100(org.jboss.as.host.controller.ServerInventoryImpl);
    Code:
       0: aload_0
       1: getfield      #4                  // Field connectionFinished:Z
       4: ireturn

  static org.jboss.as.domain.controller.DomainController access$200(org.jboss.as.host.controller.ServerInventoryImpl);
    Code:
       0: aload_0
       1: getfield      #3                  // Field domainController:Lorg/jboss/as/domain/controller/DomainController;
       4: areturn

  static java.util.concurrent.ConcurrentMap access$300(org.jboss.as.host.controller.ServerInventoryImpl);
    Code:
       0: aload_0
       1: getfield      #2                  // Field servers:Ljava/util/concurrent/ConcurrentMap;
       4: areturn
}
