Compiled from "ConcurrentGroupServerUpdatePolicy.java"
class org.jboss.as.domain.controller.plan.ConcurrentGroupServerUpdatePolicy {
  private final org.jboss.as.domain.controller.plan.ConcurrentGroupServerUpdatePolicy predecessor;

  private final java.util.Set<java.lang.String> groups;

  private int responseCount;

  private boolean failed;

  org.jboss.as.domain.controller.plan.ConcurrentGroupServerUpdatePolicy(org.jboss.as.domain.controller.plan.ConcurrentGroupServerUpdatePolicy, java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashSet
       8: dup
       9: invokespecial #3                  // Method java/util/HashSet."<init>":()V
      12: putfield      #4                  // Field groups:Ljava/util/Set;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field predecessor:Lorg/jboss/as/domain/controller/plan/ConcurrentGroupServerUpdatePolicy;
      20: aload_0
      21: getfield      #4                  // Field groups:Ljava/util/Set;
      24: aload_2
      25: invokeinterface #6,  2            // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      30: pop
      31: return

  private boolean canSuccessorProceed();
    Code:
       0: aload_0
       1: getfield      #5                  // Field predecessor:Lorg/jboss/as/domain/controller/plan/ConcurrentGroupServerUpdatePolicy;
       4: ifnull        19
       7: aload_0
       8: getfield      #5                  // Field predecessor:Lorg/jboss/as/domain/controller/plan/ConcurrentGroupServerUpdatePolicy;
      11: invokespecial #7                  // Method canSuccessorProceed:()Z
      14: ifne          19
      17: iconst_0
      18: ireturn
      19: aload_0
      20: dup
      21: astore_1
      22: monitorenter
      23: aload_0
      24: getfield      #8                  // Field responseCount:I
      27: aload_0
      28: getfield      #4                  // Field groups:Ljava/util/Set;
      31: invokeinterface #9,  1            // InterfaceMethod java/util/Set.size:()I
      36: if_icmpge     57
      39: aload_0
      40: invokevirtual #10                 // Method java/lang/Object.wait:()V
      43: goto          23
      46: astore_2
      47: invokestatic  #12                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      50: invokevirtual #13                 // Method java/lang/Thread.interrupt:()V
      53: iconst_0
      54: aload_1
      55: monitorexit
      56: ireturn
      57: aload_0
      58: getfield      #14                 // Field failed:Z
      61: ifne          68
      64: iconst_1
      65: goto          69
      68: iconst_0
      69: aload_1
      70: monitorexit
      71: ireturn
      72: astore_3
      73: aload_1
      74: monitorexit
      75: aload_3
      76: athrow
    Exception table:
       from    to  target type
          39    43    46   Class java/lang/InterruptedException
          23    56    72   any
          57    71    72   any
          72    75    72   any

  public boolean canChildProceed();
    Code:
       0: aload_0
       1: getfield      #5                  // Field predecessor:Lorg/jboss/as/domain/controller/plan/ConcurrentGroupServerUpdatePolicy;
       4: ifnull        17
       7: aload_0
       8: getfield      #5                  // Field predecessor:Lorg/jboss/as/domain/controller/plan/ConcurrentGroupServerUpdatePolicy;
      11: invokespecial #7                  // Method canSuccessorProceed:()Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public void recordServerGroupResult(java.lang.String, boolean);
    Code:
       0: aload_0
       1: dup
       2: astore_3
       3: monitorenter
       4: aload_0
       5: getfield      #4                  // Field groups:Ljava/util/Set;
       8: aload_1
       9: invokeinterface #15,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      14: ifeq          58
      17: aload_0
      18: dup
      19: getfield      #8                  // Field responseCount:I
      22: iconst_1
      23: iadd
      24: putfield      #8                  // Field responseCount:I
      27: iload_2
      28: ifeq          36
      31: aload_0
      32: iconst_1
      33: putfield      #14                 // Field failed:Z
      36: getstatic     #16                 // Field org/jboss/as/domain/controller/logging/DomainControllerLogger.HOST_CONTROLLER_LOGGER:Lorg/jboss/as/domain/controller/logging/DomainControllerLogger;
      39: ldc           #17                 // String Recorded group result for \'%s\': failed = %s
      41: aload_1
      42: iload_2
      43: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      46: invokeinterface #19,  4           // InterfaceMethod org/jboss/as/domain/controller/logging/DomainControllerLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      51: aload_0
      52: invokevirtual #20                 // Method java/lang/Object.notifyAll:()V
      55: goto          68
      58: getstatic     #16                 // Field org/jboss/as/domain/controller/logging/DomainControllerLogger.HOST_CONTROLLER_LOGGER:Lorg/jboss/as/domain/controller/logging/DomainControllerLogger;
      61: aload_1
      62: invokeinterface #21,  2           // InterfaceMethod org/jboss/as/domain/controller/logging/DomainControllerLogger.unknownServerGroup:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      67: athrow
      68: aload_3
      69: monitorexit
      70: goto          80
      73: astore        4
      75: aload_3
      76: monitorexit
      77: aload         4
      79: athrow
      80: return
    Exception table:
       from    to  target type
           4    70    73   any
          73    77    73   any
}
