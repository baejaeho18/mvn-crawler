Compiled from "RequestController.java"
final class org.wildfly.extension.requestcontroller.RequestController$QueuedTask extends java.util.TimerTask {
  private final java.util.concurrent.Executor executor;

  private final java.lang.Runnable task;

  private final java.lang.Runnable cancelTask;

  private final org.wildfly.extension.requestcontroller.ControlPoint controlPoint;

  private final boolean forceRun;

  private final java.util.concurrent.atomic.AtomicInteger state;

  private org.wildfly.extension.requestcontroller.RequestController$QueuedTask(java.util.concurrent.Executor, java.lang.Runnable, java.lang.Runnable, org.wildfly.extension.requestcontroller.ControlPoint, boolean);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/util/TimerTask."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_0
      10: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: aload_1
      18: putfield      #9                  // Field executor:Ljava/util/concurrent/Executor;
      21: aload_0
      22: aload_2
      23: putfield      #1                  // Field task:Ljava/lang/Runnable;
      26: aload_0
      27: aload_3
      28: putfield      #10                 // Field cancelTask:Ljava/lang/Runnable;
      31: aload_0
      32: aload         4
      34: putfield      #2                  // Field controlPoint:Lorg/wildfly/extension/requestcontroller/ControlPoint;
      37: aload_0
      38: iload         5
      40: putfield      #3                  // Field forceRun:Z
      43: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iconst_0
       5: iconst_2
       6: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
       9: ifeq          49
      12: aload_0
      13: getfield      #10                 // Field cancelTask:Ljava/lang/Runnable;
      16: ifnull        49
      19: aload_0
      20: getfield      #9                  // Field executor:Ljava/util/concurrent/Executor;
      23: aload_0
      24: getfield      #10                 // Field cancelTask:Ljava/lang/Runnable;
      27: invokeinterface #12,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      32: goto          49
      35: astore_1
      36: getstatic     #14                 // Field org/wildfly/extension/requestcontroller/logging/RequestControllerLogger.ROOT_LOGGER:Lorg/wildfly/extension/requestcontroller/logging/RequestControllerLogger;
      39: aload_0
      40: getfield      #10                 // Field cancelTask:Ljava/lang/Runnable;
      43: aload_1
      44: invokeinterface #15,  3           // InterfaceMethod org/wildfly/extension/requestcontroller/logging/RequestControllerLogger.failedToCancelTask:(Ljava/lang/Object;Ljava/lang/Exception;)V
      49: return
    Exception table:
       from    to  target type
          19    32    35   Class java/lang/Exception

  public boolean runRequest();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
       9: ifeq          36
      12: aload_0
      13: invokevirtual #16                 // Method cancel:()Z
      16: pop
      17: aload_0
      18: getfield      #9                  // Field executor:Ljava/util/concurrent/Executor;
      21: new           #17                 // class org/wildfly/extension/requestcontroller/RequestController$QueuedTask$1
      24: dup
      25: aload_0
      26: invokespecial #18                 // Method org/wildfly/extension/requestcontroller/RequestController$QueuedTask$1."<init>":(Lorg/wildfly/extension/requestcontroller/RequestController$QueuedTask;)V
      29: invokeinterface #12,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      34: iconst_1
      35: ireturn
      36: iconst_0
      37: ireturn

  boolean isQueued();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  org.wildfly.extension.requestcontroller.RequestController$QueuedTask(java.util.concurrent.Executor, java.lang.Runnable, java.lang.Runnable, org.wildfly.extension.requestcontroller.ControlPoint, boolean, org.wildfly.extension.requestcontroller.RequestController$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: invokespecial #4                  // Method "<init>":(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;Ljava/lang/Runnable;Lorg/wildfly/extension/requestcontroller/ControlPoint;Z)V
      11: return

  static boolean access$200(org.wildfly.extension.requestcontroller.RequestController$QueuedTask);
    Code:
       0: aload_0
       1: getfield      #3                  // Field forceRun:Z
       4: ireturn

  static org.wildfly.extension.requestcontroller.ControlPoint access$300(org.wildfly.extension.requestcontroller.RequestController$QueuedTask);
    Code:
       0: aload_0
       1: getfield      #2                  // Field controlPoint:Lorg/wildfly/extension/requestcontroller/ControlPoint;
       4: areturn

  static java.lang.Runnable access$400(org.wildfly.extension.requestcontroller.RequestController$QueuedTask);
    Code:
       0: aload_0
       1: getfield      #1                  // Field task:Ljava/lang/Runnable;
       4: areturn
}
