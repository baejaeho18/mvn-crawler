Compiled from "SessionExpirationScheduler.java"
public class org.wildfly.clustering.web.infinispan.session.SessionExpirationScheduler implements org.wildfly.clustering.web.infinispan.session.Scheduler {
  final java.util.Map<java.lang.String, java.util.concurrent.Future<?>> expirationFutures;

  final org.wildfly.clustering.ee.Batcher<org.wildfly.clustering.ee.infinispan.TransactionBatch> batcher;

  final org.wildfly.clustering.ee.infinispan.Remover<java.lang.String> remover;

  private final java.util.concurrent.ScheduledExecutorService executor;

  public org.wildfly.clustering.web.infinispan.session.SessionExpirationScheduler(org.wildfly.clustering.ee.Batcher<org.wildfly.clustering.ee.infinispan.TransactionBatch>, org.wildfly.clustering.ee.infinispan.Remover<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1                  // Method createThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       6: invokestatic  #2                  // Method createScheduledExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;
       9: invokespecial #3                  // Method "<init>":(Lorg/wildfly/clustering/ee/Batcher;Lorg/wildfly/clustering/ee/infinispan/Remover;Ljava/util/concurrent/ScheduledExecutorService;)V
      12: return

  private static java.util.concurrent.ThreadFactory createThreadFactory();
    Code:
       0: new           #4                  // class org/wildfly/clustering/web/infinispan/session/SessionExpirationScheduler$1
       3: dup
       4: invokespecial #5                  // Method org/wildfly/clustering/web/infinispan/session/SessionExpirationScheduler$1."<init>":()V
       7: invokestatic  #6                  // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      10: checkcast     #7                  // class java/util/concurrent/ThreadFactory
      13: areturn

  private static java.util.concurrent.ScheduledExecutorService createScheduledExecutor(java.util.concurrent.ThreadFactory);
    Code:
       0: new           #8                  // class java/util/concurrent/ScheduledThreadPoolExecutor
       3: dup
       4: iconst_1
       5: aload_0
       6: invokespecial #9                  // Method java/util/concurrent/ScheduledThreadPoolExecutor."<init>":(ILjava/util/concurrent/ThreadFactory;)V
       9: astore_1
      10: aload_1
      11: iconst_1
      12: invokevirtual #10                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy:(Z)V
      15: aload_1
      16: iconst_0
      17: invokevirtual #11                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy:(Z)V
      20: aload_1
      21: areturn

  public org.wildfly.clustering.web.infinispan.session.SessionExpirationScheduler(org.wildfly.clustering.ee.Batcher<org.wildfly.clustering.ee.infinispan.TransactionBatch>, org.wildfly.clustering.ee.infinispan.Remover<java.lang.String>, java.util.concurrent.ScheduledExecutorService);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #13                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #14                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #15                 // Field expirationFutures:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: putfield      #16                 // Field batcher:Lorg/wildfly/clustering/ee/Batcher;
      20: aload_0
      21: aload_2
      22: putfield      #17                 // Field remover:Lorg/wildfly/clustering/ee/infinispan/Remover;
      25: aload_0
      26: aload_3
      27: putfield      #18                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
      30: return

  public void cancel(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #15                 // Field expirationFutures:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #20                 // class java/util/concurrent/Future
      13: astore_2
      14: aload_2
      15: ifnull        26
      18: aload_2
      19: iconst_0
      20: invokeinterface #21,  2           // InterfaceMethod java/util/concurrent/Future.cancel:(Z)Z
      25: pop
      26: return

  public void schedule(java.lang.String, org.wildfly.clustering.web.session.ImmutableSessionMetaData);
    Code:
       0: aload_2
       1: invokeinterface #22,  1           // InterfaceMethod org/wildfly/clustering/web/session/ImmutableSessionMetaData.getMaxInactiveInterval:()Ljava/time/Duration;
       6: astore_3
       7: aload_3
       8: invokevirtual #23                 // Method java/time/Duration.isZero:()Z
      11: ifne          131
      14: aload_2
      15: invokeinterface #24,  1           // InterfaceMethod org/wildfly/clustering/web/session/ImmutableSessionMetaData.getLastAccessedTime:()Ljava/time/Instant;
      20: astore        4
      22: invokestatic  #25                 // Method java/time/Instant.now:()Ljava/time/Instant;
      25: aload         4
      27: aload_3
      28: invokevirtual #26                 // Method java/time/Instant.plus:(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;
      31: invokestatic  #27                 // Method java/time/Duration.between:(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;
      34: astore        5
      36: new           #28                 // class org/wildfly/clustering/web/infinispan/session/SessionExpirationScheduler$ExpirationTask
      39: dup
      40: aload_0
      41: aload_1
      42: invokespecial #29                 // Method org/wildfly/clustering/web/infinispan/session/SessionExpirationScheduler$ExpirationTask."<init>":(Lorg/wildfly/clustering/web/infinispan/session/SessionExpirationScheduler;Ljava/lang/String;)V
      45: astore        6
      47: aload         5
      49: invokevirtual #30                 // Method java/time/Duration.isNegative:()Z
      52: ifne          65
      55: aload         5
      57: invokevirtual #31                 // Method java/time/Duration.getSeconds:()J
      60: lconst_1
      61: ladd
      62: goto          66
      65: lconst_0
      66: lstore        7
      68: getstatic     #32                 // Field org/wildfly/clustering/web/infinispan/logging/InfinispanWebLogger.ROOT_LOGGER:Lorg/wildfly/clustering/web/infinispan/logging/InfinispanWebLogger;
      71: ldc           #33                 // String Session %s will expire in %d sec
      73: aload_1
      74: lload         7
      76: invokestatic  #34                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      79: invokeinterface #35,  4           // InterfaceMethod org/wildfly/clustering/web/infinispan/logging/InfinispanWebLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      84: aload         6
      86: dup
      87: astore        9
      89: monitorenter
      90: aload_0
      91: getfield      #15                 // Field expirationFutures:Ljava/util/Map;
      94: aload_1
      95: aload_0
      96: getfield      #18                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
      99: aload         6
     101: lload         7
     103: getstatic     #36                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
     106: invokeinterface #37,  5           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
     111: invokeinterface #38,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     116: pop
     117: aload         9
     119: monitorexit
     120: goto          131
     123: astore        10
     125: aload         9
     127: monitorexit
     128: aload         10
     130: athrow
     131: return
    Exception table:
       from    to  target type
          90   120   123   any
         123   128   123   any

  public void cancel(org.wildfly.clustering.infinispan.spi.distribution.Locality);
    Code:
       0: aload_0
       1: getfield      #15                 // Field expirationFutures:Ljava/util/Map;
       4: invokeinterface #39,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
       9: invokeinterface #40,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      14: aload_1
      15: invokedynamic #41,  0             // InvokeDynamic #0:test:(Lorg/wildfly/clustering/infinispan/spi/distribution/Locality;)Ljava/util/function/Predicate;
      20: invokeinterface #42,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      25: aload_0
      26: invokedynamic #43,  0             // InvokeDynamic #1:accept:(Lorg/wildfly/clustering/web/infinispan/session/SessionExpirationScheduler;)Ljava/util/function/Consumer;
      31: invokeinterface #44,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      36: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #18                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
       4: invokeinterface #45,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdown:()V
       9: aload_0
      10: getfield      #15                 // Field expirationFutures:Ljava/util/Map;
      13: invokeinterface #46,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      18: invokedynamic #47,  0             // InvokeDynamic #2:accept:()Ljava/util/function/Consumer;
      23: invokeinterface #48,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      28: aload_0
      29: getfield      #15                 // Field expirationFutures:Ljava/util/Map;
      32: invokeinterface #46,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      37: invokeinterface #49,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      42: invokedynamic #50,  0             // InvokeDynamic #3:test:()Ljava/util/function/Predicate;
      47: invokeinterface #42,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      52: invokedynamic #51,  0             // InvokeDynamic #4:accept:()Ljava/util/function/Consumer;
      57: invokeinterface #44,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      62: aload_0
      63: getfield      #15                 // Field expirationFutures:Ljava/util/Map;
      66: invokeinterface #52,  1           // InterfaceMethod java/util/Map.clear:()V
      71: return

  private static void lambda$close$16(java.util.concurrent.Future);
    Code:
       0: aload_0
       1: invokeinterface #53,  1           // InterfaceMethod java/util/concurrent/Future.get:()Ljava/lang/Object;
       6: pop
       7: goto          21
      10: astore_1
      11: invokestatic  #55                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      14: invokevirtual #56                 // Method java/lang/Thread.interrupt:()V
      17: goto          21
      20: astore_1
      21: return
    Exception table:
       from    to  target type
           0     7    10   Class java/lang/InterruptedException
           0     7    20   Class java/util/concurrent/ExecutionException

  private static boolean lambda$close$15(java.util.concurrent.Future);
    Code:
       0: aload_0
       1: invokeinterface #58,  1           // InterfaceMethod java/util/concurrent/Future.isDone:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private static void lambda$close$14(java.util.concurrent.Future);
    Code:
       0: aload_0
       1: iconst_0
       2: invokeinterface #21,  2           // InterfaceMethod java/util/concurrent/Future.cancel:(Z)Z
       7: pop
       8: return

  private void lambda$cancel$13(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #59                 // Method cancel:(Ljava/lang/String;)V
       5: return

  private static boolean lambda$cancel$12(org.wildfly.clustering.infinispan.spi.distribution.Locality, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #60,  2           // InterfaceMethod org/wildfly/clustering/infinispan/spi/distribution/Locality.isLocal:(Ljava/lang/Object;)Z
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn
}
