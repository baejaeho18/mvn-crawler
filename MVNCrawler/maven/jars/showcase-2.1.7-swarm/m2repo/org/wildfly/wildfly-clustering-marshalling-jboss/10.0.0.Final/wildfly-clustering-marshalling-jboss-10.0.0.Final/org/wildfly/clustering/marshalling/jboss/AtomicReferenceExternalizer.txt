Compiled from "AtomicReferenceExternalizer.java"
public class org.wildfly.clustering.marshalling.jboss.AtomicReferenceExternalizer implements org.wildfly.clustering.marshalling.Externalizer<java.util.concurrent.atomic.AtomicReference<java.lang.Object>> {
  public org.wildfly.clustering.marshalling.jboss.AtomicReferenceExternalizer();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void writeObject(java.io.ObjectOutput, java.util.concurrent.atomic.AtomicReference<java.lang.Object>) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       5: invokeinterface #3,  2            // InterfaceMethod java/io/ObjectOutput.writeObject:(Ljava/lang/Object;)V
      10: return

  public java.util.concurrent.atomic.AtomicReference<java.lang.Object> readObject(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: new           #4                  // class java/util/concurrent/atomic/AtomicReference
       3: dup
       4: aload_1
       5: invokeinterface #5,  1            // InterfaceMethod java/io/ObjectInput.readObject:()Ljava/lang/Object;
      10: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      13: areturn

  public java.lang.Class<? extends java.util.concurrent.atomic.AtomicReference<java.lang.Object>> getTargetClass();
    Code:
       0: ldc           #4                  // class java/util/concurrent/atomic/AtomicReference
       2: astore_1
       3: aload_1
       4: areturn

  public java.lang.Object readObject(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #7                  // Method readObject:(Ljava/io/ObjectInput;)Ljava/util/concurrent/atomic/AtomicReference;
       5: areturn

  public void writeObject(java.io.ObjectOutput, java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #4                  // class java/util/concurrent/atomic/AtomicReference
       6: invokevirtual #8                  // Method writeObject:(Ljava/io/ObjectOutput;Ljava/util/concurrent/atomic/AtomicReference;)V
       9: return
}
