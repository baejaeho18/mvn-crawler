Compiled from "CleanerReference.java"
public class org.wildfly.common.ref.CleanerReference<T, A> extends org.wildfly.common.ref.PhantomReference<T, A> {
  private static final java.util.Set<org.wildfly.common.ref.CleanerReference<?, ?>> set;

  public org.wildfly.common.ref.CleanerReference(T, A, org.wildfly.common.ref.Reaper<T, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method org/wildfly/common/ref/PhantomReference."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lorg/wildfly/common/ref/Reaper;)V
       7: getstatic     #2                  // Field set:Ljava/util/Set;
      10: aload_0
      11: invokeinterface #3,  2            // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      16: pop
      17: return

  void clean();
    Code:
       0: getstatic     #2                  // Field set:Ljava/util/Set;
       3: aload_0
       4: invokeinterface #4,  2            // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
       9: pop
      10: return

  public final int hashCode();
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object.hashCode:()I
       4: ireturn

  public final boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       5: ireturn

  static {};
    Code:
       0: new           #7                  // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #8                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: invokestatic  #9                  // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
      10: putstatic     #2                  // Field set:Ljava/util/Set;
      13: return
}
