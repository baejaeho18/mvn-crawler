Compiled from "ElytronPermissionCollection.java"
final class org.wildfly.security.permission.ElytronPermissionCollection extends java.security.PermissionCollection {
  private static final long serialVersionUID;

  private transient java.util.concurrent.atomic.AtomicInteger set;

  private static final java.io.ObjectStreamField[] serialPersistentFields;

  org.wildfly.security.permission.ElytronPermissionCollection();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/security/PermissionCollection."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_0
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #4                  // Field set:Ljava/util/concurrent/atomic/AtomicInteger;
      16: return

  public void add(java.security.Permission) throws java.lang.SecurityException, java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method isReadOnly:()Z
       4: ifeq          16
       7: getstatic     #6                  // Field org/wildfly/security/manager/_private/SecurityMessages.permission:Lorg/wildfly/security/manager/_private/SecurityMessages;
      10: invokeinterface #7,  1            // InterfaceMethod org/wildfly/security/manager/_private/SecurityMessages.readOnlyPermCollection:()Ljava/lang/SecurityException;
      15: athrow
      16: aload_1
      17: instanceof    #8                  // class org/wildfly/security/permission/ElytronPermission
      20: ifeq          40
      23: aload_0
      24: aload_1
      25: checkcast     #8                  // class org/wildfly/security/permission/ElytronPermission
      28: invokevirtual #9                  // Method org/wildfly/security/permission/ElytronPermission.getKind:()Lorg/wildfly/security/permission/ElytronPermission$Name;
      31: invokevirtual #10                 // Method org/wildfly/security/permission/ElytronPermission$Name.ordinal:()I
      34: invokespecial #11                 // Method setBit:(I)V
      37: goto          52
      40: getstatic     #6                  // Field org/wildfly/security/manager/_private/SecurityMessages.permission:Lorg/wildfly/security/manager/_private/SecurityMessages;
      43: ldc           #8                  // class org/wildfly/security/permission/ElytronPermission
      45: aload_1
      46: invokeinterface #12,  3           // InterfaceMethod org/wildfly/security/manager/_private/SecurityMessages.wrongPermType:(Ljava/lang/Class;Ljava/security/Permission;)Ljava/lang/IllegalArgumentException;
      51: athrow
      52: return

  private void setBit(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field set:Ljava/util/concurrent/atomic/AtomicInteger;
       4: astore_2
       5: iconst_1
       6: iload_1
       7: ishl
       8: istore_3
       9: aload_2
      10: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      13: istore        4
      15: iload         4
      17: iload_3
      18: iand
      19: ifeq          23
      22: return
      23: aload_2
      24: iload         4
      26: iload         4
      28: iload_3
      29: ior
      30: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      33: ifeq          9
      36: return

  public boolean isSet(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field set:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: iconst_1
       8: iload_1
       9: ishl
      10: iand
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean implies(java.security.Permission);
    Code:
       0: aload_1
       1: instanceof    #8                  // class org/wildfly/security/permission/ElytronPermission
       4: ifeq          28
       7: aload_0
       8: aload_1
       9: checkcast     #8                  // class org/wildfly/security/permission/ElytronPermission
      12: invokevirtual #9                  // Method org/wildfly/security/permission/ElytronPermission.getKind:()Lorg/wildfly/security/permission/ElytronPermission$Name;
      15: invokevirtual #10                 // Method org/wildfly/security/permission/ElytronPermission$Name.ordinal:()I
      18: invokevirtual #15                 // Method isSet:(I)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public java.util.Enumeration<java.security.Permission> elements();
    Code:
       0: aload_0
       1: getfield      #4                  // Field set:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: istore_1
       8: iload_1
       9: ifne          16
      12: invokestatic  #16                 // Method java/util/Collections.emptyEnumeration:()Ljava/util/Enumeration;
      15: areturn
      16: new           #17                 // class org/wildfly/security/permission/ElytronPermissionCollection$1
      19: dup
      20: aload_0
      21: iload_1
      22: invokespecial #18                 // Method org/wildfly/security/permission/ElytronPermissionCollection$1."<init>":(Lorg/wildfly/security/permission/ElytronPermissionCollection;I)V
      25: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #19                 // class org/wildfly/security/permission/ElytronPermissionCollection
       4: ifeq          31
       7: aload_0
       8: getfield      #4                  // Field set:Ljava/util/concurrent/atomic/AtomicInteger;
      11: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      14: aload_1
      15: checkcast     #19                 // class org/wildfly/security/permission/ElytronPermissionCollection
      18: getfield      #4                  // Field set:Ljava/util/concurrent/atomic/AtomicInteger;
      21: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #4                  // Field set:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: sipush        3559
      10: imul
      11: sipush        7477
      14: iadd
      15: ireturn

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #20                 // Method java/io/ObjectInputStream.readFields:()Ljava/io/ObjectInputStream$GetField;
       4: astore_2
       5: aload_2
       6: ldc           #21                 // String p1
       8: iconst_0
       9: invokevirtual #22                 // Method java/io/ObjectInputStream$GetField.get:(Ljava/lang/String;I)I
      12: istore_3
      13: aload_0
      14: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
      17: dup
      18: invokespecial #23                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      21: dup_x1
      22: putfield      #4                  // Field set:Ljava/util/concurrent/atomic/AtomicInteger;
      25: iload_3
      26: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicInteger.lazySet:(I)V
      29: return

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #25                 // Method java/io/ObjectOutputStream.putFields:()Ljava/io/ObjectOutputStream$PutField;
       4: astore_2
       5: aload_2
       6: ldc           #21                 // String p1
       8: aload_0
       9: getfield      #4                  // Field set:Ljava/util/concurrent/atomic/AtomicInteger;
      12: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      15: invokevirtual #26                 // Method java/io/ObjectOutputStream$PutField.put:(Ljava/lang/String;I)V
      18: aload_1
      19: invokevirtual #27                 // Method java/io/ObjectOutputStream.writeFields:()V
      22: return

  static {};
    Code:
       0: iconst_1
       1: anewarray     #28                 // class java/io/ObjectStreamField
       4: dup
       5: iconst_0
       6: new           #28                 // class java/io/ObjectStreamField
       9: dup
      10: ldc           #21                 // String p1
      12: getstatic     #29                 // Field java/lang/Integer.TYPE:Ljava/lang/Class;
      15: invokespecial #30                 // Method java/io/ObjectStreamField."<init>":(Ljava/lang/String;Ljava/lang/Class;)V
      18: aastore
      19: putstatic     #31                 // Field serialPersistentFields:[Ljava/io/ObjectStreamField;
      22: return
}
