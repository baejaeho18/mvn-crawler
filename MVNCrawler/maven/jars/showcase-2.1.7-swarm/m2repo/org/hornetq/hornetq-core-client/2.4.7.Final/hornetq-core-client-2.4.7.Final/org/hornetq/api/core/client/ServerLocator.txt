Compiled from "ServerLocator.java"
public interface org.hornetq.api.core.client.ServerLocator extends java.lang.AutoCloseable {
  public abstract boolean isClosed();

  public abstract void disableFinalizeCheck();

  public abstract org.hornetq.api.core.client.ClientSessionFactory createSessionFactory() throws java.lang.Exception;

  public abstract org.hornetq.api.core.client.ClientSessionFactory createSessionFactory(java.lang.String) throws java.lang.Exception;

  public abstract org.hornetq.api.core.client.ClientSessionFactory createSessionFactory(org.hornetq.api.core.TransportConfiguration) throws java.lang.Exception;

  public abstract org.hornetq.api.core.client.ClientSessionFactory createSessionFactory(org.hornetq.api.core.TransportConfiguration, int, boolean) throws java.lang.Exception;

  public abstract long getClientFailureCheckPeriod();

  public abstract void setClientFailureCheckPeriod(long);

  public abstract boolean isCacheLargeMessagesClient();

  public abstract void setCacheLargeMessagesClient(boolean);

  public abstract long getConnectionTTL();

  public abstract void setConnectionTTL(long);

  public abstract long getCallTimeout();

  public abstract void setCallTimeout(long);

  public abstract long getCallFailoverTimeout();

  public abstract void setCallFailoverTimeout(long);

  public abstract int getMinLargeMessageSize();

  public abstract void setMinLargeMessageSize(int);

  public abstract int getConsumerWindowSize();

  public abstract void setConsumerWindowSize(int);

  public abstract int getConsumerMaxRate();

  public abstract void setConsumerMaxRate(int);

  public abstract int getConfirmationWindowSize();

  public abstract void setConfirmationWindowSize(int);

  public abstract int getProducerWindowSize();

  public abstract void setProducerWindowSize(int);

  public abstract int getProducerMaxRate();

  public abstract void setProducerMaxRate(int);

  public abstract boolean isBlockOnAcknowledge();

  public abstract void setBlockOnAcknowledge(boolean);

  public abstract boolean isBlockOnDurableSend();

  public abstract void setBlockOnDurableSend(boolean);

  public abstract boolean isBlockOnNonDurableSend();

  public abstract void setBlockOnNonDurableSend(boolean);

  public abstract boolean isAutoGroup();

  public abstract void setAutoGroup(boolean);

  public abstract java.lang.String getGroupID();

  public abstract void setGroupID(java.lang.String);

  public abstract boolean isPreAcknowledge();

  public abstract void setPreAcknowledge(boolean);

  public abstract int getAckBatchSize();

  public abstract void setAckBatchSize(int);

  public abstract org.hornetq.api.core.TransportConfiguration[] getStaticTransportConfigurations();

  public abstract org.hornetq.api.core.DiscoveryGroupConfiguration getDiscoveryGroupConfiguration();

  public abstract boolean isUseGlobalPools();

  public abstract void setUseGlobalPools(boolean);

  public abstract int getScheduledThreadPoolMaxSize();

  public abstract void setScheduledThreadPoolMaxSize(int);

  public abstract int getThreadPoolMaxSize();

  public abstract void setThreadPoolMaxSize(int);

  public abstract long getRetryInterval();

  public abstract void setRetryInterval(long);

  public abstract double getRetryIntervalMultiplier();

  public abstract void setRetryIntervalMultiplier(double);

  public abstract long getMaxRetryInterval();

  public abstract void setMaxRetryInterval(long);

  public abstract int getReconnectAttempts();

  public abstract void setReconnectAttempts(int);

  public abstract void setInitialConnectAttempts(int);

  public abstract int getInitialConnectAttempts();

  public abstract boolean isFailoverOnInitialConnection();

  public abstract void setFailoverOnInitialConnection(boolean);

  public abstract java.lang.String getConnectionLoadBalancingPolicyClassName();

  public abstract void setConnectionLoadBalancingPolicyClassName(java.lang.String);

  public abstract int getInitialMessagePacketSize();

  public abstract void setInitialMessagePacketSize(int);

  public abstract void addInterceptor(org.hornetq.api.core.Interceptor);

  public abstract void addIncomingInterceptor(org.hornetq.api.core.Interceptor);

  public abstract void addOutgoingInterceptor(org.hornetq.api.core.Interceptor);

  public abstract boolean removeInterceptor(org.hornetq.api.core.Interceptor);

  public abstract boolean removeIncomingInterceptor(org.hornetq.api.core.Interceptor);

  public abstract boolean removeOutgoingInterceptor(org.hornetq.api.core.Interceptor);

  public abstract void close();

  public abstract org.hornetq.core.client.impl.Topology getTopology();

  public abstract boolean isHA();

  public abstract boolean isCompressLargeMessage();

  public abstract void setCompressLargeMessage(boolean);

  public abstract void addClusterTopologyListener(org.hornetq.api.core.client.ClusterTopologyListener);

  public abstract void removeClusterTopologyListener(org.hornetq.api.core.client.ClusterTopologyListener);
}
