Compiled from "Channel.java"
public interface org.hornetq.core.protocol.core.Channel {
  public abstract long getID();

  public abstract boolean supports(byte);

  public abstract boolean send(org.hornetq.core.protocol.core.Packet);

  public abstract boolean sendBatched(org.hornetq.core.protocol.core.Packet);

  public abstract boolean sendAndFlush(org.hornetq.core.protocol.core.Packet);

  public abstract org.hornetq.core.protocol.core.Packet sendBlocking(org.hornetq.core.protocol.core.Packet, byte) throws org.hornetq.api.core.HornetQException;

  public abstract void setHandler(org.hornetq.core.protocol.core.ChannelHandler);

  public abstract org.hornetq.core.protocol.core.ChannelHandler getHandler();

  public abstract void close();

  public abstract void transferConnection(org.hornetq.core.protocol.core.CoreRemotingConnection);

  public abstract void replayCommands(int);

  public abstract int getLastConfirmedCommandID();

  public abstract void lock();

  public abstract void unlock();

  public abstract void returnBlocking();

  public abstract void returnBlocking(java.lang.Throwable);

  public abstract java.util.concurrent.locks.Lock getLock();

  public abstract org.hornetq.core.protocol.core.CoreRemotingConnection getConnection();

  public abstract void confirm(org.hornetq.core.protocol.core.Packet);

  public abstract void setCommandConfirmationHandler(org.hornetq.core.protocol.core.CommandConfirmationHandler);

  public abstract void flushConfirmations();

  public abstract void handlePacket(org.hornetq.core.protocol.core.Packet);

  public abstract void clearCommands();

  public abstract int getConfirmationWindowSize();

  public abstract void setTransferring(boolean);
}
