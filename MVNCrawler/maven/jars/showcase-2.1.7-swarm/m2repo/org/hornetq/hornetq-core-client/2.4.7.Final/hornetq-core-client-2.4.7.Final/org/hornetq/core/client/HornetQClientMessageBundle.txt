Compiled from "HornetQClientMessageBundle.java"
public interface org.hornetq.core.client.HornetQClientMessageBundle {
  public static final org.hornetq.core.client.HornetQClientMessageBundle BUNDLE;

  public abstract org.hornetq.api.core.HornetQInternalErrorException clientSessionClosed();

  public abstract org.hornetq.api.core.HornetQInternalErrorException failedToCreateSession(java.lang.Throwable);

  public abstract org.hornetq.api.core.HornetQInternalErrorException clietSessionInternal();

  public abstract org.hornetq.api.core.HornetQInternalErrorException queueMisConfigured();

  public abstract org.hornetq.api.core.HornetQInternalErrorException failedToInitialiseSessionFactory(java.lang.Exception);

  public abstract org.hornetq.api.core.HornetQInternalErrorException nettyError();

  public abstract org.hornetq.api.core.HornetQNotConnectedException channelDisconnected();

  public abstract org.hornetq.api.core.HornetQNotConnectedException cannotConnectToServers();

  public abstract org.hornetq.api.core.HornetQNotConnectedException cannotConnectToStaticConnectors(java.lang.Exception);

  public abstract org.hornetq.api.core.HornetQNotConnectedException cannotConnectToStaticConnectors2();

  public abstract org.hornetq.api.core.HornetQNotConnectedException connectionDestroyed();

  public abstract org.hornetq.api.core.HornetQConnectionTimedOutException connectionTimedOut(org.hornetq.spi.core.remoting.Connection);

  public abstract org.hornetq.api.core.HornetQConnectionTimedOutException connectionTimedOutInInitialBroadcast();

  public abstract org.hornetq.api.core.HornetQConnectionTimedOutException connectionTimedOutOnReceiveTopology(org.hornetq.core.cluster.DiscoveryGroup);

  public abstract org.hornetq.api.core.HornetQConnectionTimedOutException timedOutSendingPacket(java.lang.Byte);

  public abstract org.hornetq.api.core.HornetQDisconnectedException disconnected();

  public abstract org.hornetq.api.core.HornetQUnBlockedException unblockingACall(java.lang.Throwable);

  public abstract org.hornetq.api.core.HornetQObjectClosedException consumerClosed();

  public abstract org.hornetq.api.core.HornetQObjectClosedException producerClosed();

  public abstract org.hornetq.api.core.HornetQObjectClosedException sessionClosed();

  public abstract org.hornetq.api.core.HornetQIllegalStateException messageHandlerSet();

  public abstract org.hornetq.api.core.HornetQIllegalStateException inReceive();

  public abstract org.hornetq.api.core.HornetQIllegalStateException headerSizeTooBig(java.lang.Integer);

  public abstract org.hornetq.api.core.HornetQIllegalStateException largeMessageLostSession();

  public abstract org.hornetq.api.core.HornetQIllegalStateException noTCForSessionFactory();

  public abstract org.hornetq.api.core.HornetQLargeMessageException errorSavingBody(java.lang.Exception);

  public abstract org.hornetq.api.core.HornetQLargeMessageException errorReadingBody(java.lang.Exception);

  public abstract org.hornetq.api.core.HornetQLargeMessageException errorClosingLargeMessage(java.lang.Exception);

  public abstract org.hornetq.api.core.HornetQLargeMessageException timeoutOnLargeMessage();

  public abstract org.hornetq.api.core.HornetQLargeMessageException errorWritingLargeMessage(java.lang.Exception);

  public abstract org.hornetq.api.core.HornetQTransactionRolledBackException txRolledBack();

  public abstract org.hornetq.api.core.HornetQTransactionOutcomeUnknownException txOutcomeUnknown();

  public abstract java.lang.IllegalArgumentException invalidType(java.lang.Object);

  public abstract java.lang.IllegalArgumentException invalidEncodeType(java.lang.Object);

  public abstract java.lang.IllegalArgumentException invalidManagementParam(java.lang.Object);

  public abstract java.lang.IllegalArgumentException invalidWindowSize(java.lang.Integer);

  public abstract java.lang.IllegalArgumentException noOperationMapped(java.lang.Integer);

  public abstract java.lang.IllegalArgumentException invalidCommandID(java.lang.Integer);

  public abstract java.lang.IllegalArgumentException noChannelToClose(java.lang.Long);

  public abstract java.lang.IllegalArgumentException closeListenerCannotBeNull();

  public abstract java.lang.IllegalArgumentException failListenerCannotBeNull();

  public abstract java.lang.IllegalArgumentException connectionExists(java.lang.Object);

  public abstract java.lang.IllegalArgumentException nullListener();

  public abstract java.lang.IllegalArgumentException nullHandler();

  public abstract java.lang.IllegalArgumentException noCodec();

  public abstract java.lang.IllegalArgumentException firstNodeNull();

  public abstract java.lang.IllegalArgumentException secondNodeNull();

  public abstract java.lang.IllegalArgumentException nodeHaveDifferentNames();

  public abstract java.lang.IllegalArgumentException nodeHaveDifferentAttNumber();

  public abstract java.lang.IllegalArgumentException attsDontMatch(java.lang.String, java.lang.String);

  public abstract java.lang.IllegalArgumentException oneNodeHasChildren();

  public abstract java.lang.IllegalArgumentException nodeHasDifferentChildNumber();

  public abstract java.lang.IllegalArgumentException mustBeBoolean(org.w3c.dom.Node, java.lang.String);

  public abstract java.lang.IllegalArgumentException mustBeDouble(org.w3c.dom.Node, java.lang.String);

  public abstract java.lang.IllegalArgumentException mustBeInteger(org.w3c.dom.Node, java.lang.String);

  public abstract java.lang.IllegalArgumentException mustBeLong(org.w3c.dom.Node, java.lang.String);

  public abstract java.lang.IllegalArgumentException failedToGetDecoder(java.lang.Exception);

  public abstract java.lang.IllegalArgumentException errordecodingPassword(java.lang.Exception);

  public abstract org.hornetq.api.core.HornetQAddressFullException addressIsFull(java.lang.String, int);

  public abstract org.hornetq.api.core.HornetQInterceptorRejectedPacketException interceptorRejectedPacket(java.lang.String);

  public abstract org.hornetq.api.core.HornetQLargeMessageInterruptedException largeMessageInterrupted();

  static {};
    Code:
       0: ldc           #1                  // class org/hornetq/core/client/HornetQClientMessageBundle
       2: invokestatic  #2                  // Method org/jboss/logging/Messages.getBundle:(Ljava/lang/Class;)Ljava/lang/Object;
       5: checkcast     #1                  // class org/hornetq/core/client/HornetQClientMessageBundle
       8: putstatic     #3                  // Field BUNDLE:Lorg/hornetq/core/client/HornetQClientMessageBundle;
      11: return
}
