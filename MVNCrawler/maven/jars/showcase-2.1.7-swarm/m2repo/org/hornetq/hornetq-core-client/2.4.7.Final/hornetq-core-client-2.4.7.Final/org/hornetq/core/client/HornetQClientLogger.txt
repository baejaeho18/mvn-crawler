Compiled from "HornetQClientLogger.java"
public interface org.hornetq.core.client.HornetQClientLogger extends org.jboss.logging.BasicLogger {
  public static final org.hornetq.core.client.HornetQClientLogger LOGGER;

  public abstract void dumpingSessionStacks();

  public abstract void dumpingSessionStack(java.lang.Exception);

  public abstract void warn(java.lang.String);

  public abstract void errorClearingMessages(java.lang.Throwable);

  public abstract void timeOutWaitingForProcessing();

  public abstract void unableToCloseSession(java.lang.Exception);

  public abstract void failedToConnectToServer();

  public abstract void failedToConnectToServer(java.lang.Integer);

  public abstract void waitingForRetry(java.lang.Long, java.lang.Long, java.lang.Double);

  public abstract void createConnectorException(java.lang.Exception);

  public abstract void factoryLeftOpen(java.lang.Exception, int);

  public abstract void resettingSessionAfterFailure();

  public abstract void retryCreateSessionSeverStarting(java.lang.String);

  public abstract void commitAfterFailover();

  public abstract void failoverDuringCommit();

  public abstract void failoverDuringPrepare();

  public abstract void failoverDuringPrepareRollingBack();

  public abstract void errorDuringPrepare(java.lang.Throwable);

  public abstract void clientSessionNotClosed(java.lang.Exception, int);

  public abstract void errorAddingPacket(java.lang.Exception);

  public abstract void errorCallingCancel(java.lang.Exception);

  public abstract void errorReadingIndex(java.lang.Exception);

  public abstract void errorSettingIndex(java.lang.Exception);

  public abstract void errorReSettingIndex(java.lang.Exception);

  public abstract void errorReadingCache(java.lang.Exception);

  public abstract void errorClosingCache(java.lang.Exception);

  public abstract void errorFinalisingCache(java.lang.Exception);

  public abstract void errorConnectingToNodes(java.lang.Exception);

  public abstract void timedOutWaitingForTermination();

  public abstract void timedOutWaitingForScheduledPoolTermination();

  public abstract void errorStartingLocator(java.lang.Exception);

  public abstract void serverLocatorNotClosed(java.lang.Exception, int);

  public abstract void errorSendingTopology(java.lang.Throwable);

  public abstract void errorSendingTopologyNodedown(java.lang.Throwable);

  public abstract void timedOutStoppingDiscovery();

  public abstract void errorSendingNotifOnDiscoveryStop(java.lang.Throwable);

  public abstract void multipleServersBroadcastingSameNode(java.lang.String);

  public abstract void errorReceivingPAcketInDiscovery(java.lang.Throwable);

  public abstract void cannotFindPacketToClear(java.lang.Integer, java.lang.Integer);

  public abstract void connectionFailureDetected(java.lang.String, org.hornetq.api.core.HornetQExceptionType);

  public abstract void errorCallingInterceptor(java.lang.Throwable, org.hornetq.api.core.Interceptor);

  public abstract void timeoutClosingSSL();

  public abstract void timeoutClosingNettyChannel();

  public abstract void timeoutFlushingPacket();

  public abstract void propertyNotInteger(java.lang.String, java.lang.String);

  public abstract void propertyNotLong(java.lang.String, java.lang.String);

  public abstract void propertyNotBoolean(java.lang.String, java.lang.String);

  public abstract void noVersionOnClasspath(java.lang.String);

  public abstract void jvmAllocatedMoreMemory(java.lang.Long, java.lang.Long);

  public abstract void broadcastGroupBindError();

  public abstract void ioDiscoveryError(java.lang.String, java.lang.String);

  public abstract void compressedLargeMessageError(int, int);

  public abstract void invalidConcurrentSessionUsage(java.lang.Throwable);

  public abstract void packetOutOfOrder(java.lang.Object, java.lang.Throwable);

  public abstract void confirmationWindowDisabledWarning();

  public abstract void outOfCreditOnFlowControl(java.lang.String);

  public abstract void unableToCloseConsumer(java.lang.Exception);

  public abstract void onMessageError(java.lang.Throwable);

  public abstract void failedToCleanupSession(java.lang.Exception);

  public abstract void failedToExecuteListener(java.lang.Throwable);

  public abstract void failedToHandleFailover(java.lang.Throwable);

  public abstract void errorCallingEnd(java.lang.Throwable);

  public abstract void errorCallingStart(java.lang.String, java.lang.Integer);

  public abstract void sessionNotXA();

  public abstract void receivedExceptionAsynchronously(java.lang.Exception);

  public abstract void failedToHandlePacket(java.lang.Exception);

  public abstract void failedToStopDiscovery(java.lang.Throwable);

  public abstract void failedToReceiveDatagramInDiscovery(java.lang.Throwable);

  public abstract void failedToCallListenerInDiscovery(java.lang.Throwable);

  public abstract void errorHandlingPacket(java.lang.Throwable, org.hornetq.core.protocol.core.Packet);

  public abstract void errorDecodingPacket(java.lang.Exception);

  public abstract void errorCallingFailureListener(java.lang.Throwable);

  public abstract void errorCallingLifeCycleListener(java.lang.Throwable);

  public abstract void errorCreatingNettyConnection(java.lang.Throwable);

  public abstract void caughtunexpectedThrowable(java.lang.Throwable);

  public abstract void errorOnXMLTransform(java.lang.Throwable, org.w3c.dom.Node);

  public abstract void errorOnXMLTransformInvalidConf(java.lang.Throwable);

  public abstract void errorStoppingDiscoveryBroadcastEndpoint(java.lang.Object, java.lang.Throwable);

  public abstract void invalidCipherSuite(java.lang.String);

  public abstract void invalidProtocol(java.lang.String);

  public abstract void httpHandshakeFailed(java.lang.String, java.lang.String);

  static {};
    Code:
       0: ldc           #1                  // class org/hornetq/core/client/HornetQClientLogger
       2: ldc           #1                  // class org/hornetq/core/client/HornetQClientLogger
       4: invokevirtual #2                  // Method java/lang/Class.getPackage:()Ljava/lang/Package;
       7: invokevirtual #3                  // Method java/lang/Package.getName:()Ljava/lang/String;
      10: invokestatic  #4                  // Method org/jboss/logging/Logger.getMessageLogger:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
      13: checkcast     #1                  // class org/hornetq/core/client/HornetQClientLogger
      16: putstatic     #5                  // Field LOGGER:Lorg/hornetq/core/client/HornetQClientLogger;
      19: return
}
