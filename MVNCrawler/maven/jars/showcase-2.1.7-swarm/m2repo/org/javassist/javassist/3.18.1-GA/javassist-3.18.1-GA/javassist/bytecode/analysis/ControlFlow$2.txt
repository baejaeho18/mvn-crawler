Compiled from "ControlFlow.java"
class javassist.bytecode.analysis.ControlFlow$2 extends javassist.bytecode.analysis.ControlFlow$Access {
  final javassist.bytecode.analysis.ControlFlow this$0;

  javassist.bytecode.analysis.ControlFlow$2(javassist.bytecode.analysis.ControlFlow, javassist.bytecode.analysis.ControlFlow$Node[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Ljavassist/bytecode/analysis/ControlFlow;
       5: aload_0
       6: aload_2
       7: invokespecial #2                  // Method javassist/bytecode/analysis/ControlFlow$Access."<init>":([Ljavassist/bytecode/analysis/ControlFlow$Node;)V
      10: return

  javassist.bytecode.stackmap.BasicBlock[] exits(javassist.bytecode.analysis.ControlFlow$Node);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method javassist/bytecode/analysis/ControlFlow$Node.access$100:(Ljavassist/bytecode/analysis/ControlFlow$Node;)Ljavassist/bytecode/analysis/ControlFlow$Block;
       4: invokevirtual #4                  // Method javassist/bytecode/analysis/ControlFlow$Block.getExit:()[Ljavassist/bytecode/stackmap/BasicBlock;
       7: areturn

  javassist.bytecode.stackmap.BasicBlock[] entrances(javassist.bytecode.analysis.ControlFlow$Node);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method javassist/bytecode/analysis/ControlFlow$Node.access$100:(Ljavassist/bytecode/analysis/ControlFlow$Node;)Ljavassist/bytecode/analysis/ControlFlow$Block;
       4: getfield      #5                  // Field javassist/bytecode/analysis/ControlFlow$Block.entrances:[Ljavassist/bytecode/analysis/ControlFlow$Block;
       7: areturn
}
