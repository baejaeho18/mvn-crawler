Compiled from "HttpConnection.java"
abstract class org.jsoup.helper.HttpConnection$Base<T extends org.jsoup.Connection$Base> implements org.jsoup.Connection$Base<T> {
  java.net.URL url;

  org.jsoup.Connection$Method method;

  java.util.Map<java.lang.String, java.lang.String> headers;

  java.util.Map<java.lang.String, java.lang.String> cookies;

  private org.jsoup.helper.HttpConnection$Base();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/LinkedHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/LinkedHashMap."<init>":()V
      12: putfield      #5                  // Field headers:Ljava/util/Map;
      15: aload_0
      16: new           #3                  // class java/util/LinkedHashMap
      19: dup
      20: invokespecial #4                  // Method java/util/LinkedHashMap."<init>":()V
      23: putfield      #6                  // Field cookies:Ljava/util/Map;
      26: return

  public java.net.URL url();
    Code:
       0: aload_0
       1: getfield      #7                  // Field url:Ljava/net/URL;
       4: areturn

  public T url(java.net.URL);
    Code:
       0: aload_1
       1: ldc           #8                  // String URL must not be null
       3: invokestatic  #9                  // Method org/jsoup/helper/Validate.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #7                  // Field url:Ljava/net/URL;
      11: aload_0
      12: areturn

  public org.jsoup.Connection$Method method();
    Code:
       0: aload_0
       1: getfield      #10                 // Field method:Lorg/jsoup/Connection$Method;
       4: areturn

  public T method(org.jsoup.Connection$Method);
    Code:
       0: aload_1
       1: ldc           #11                 // String Method must not be null
       3: invokestatic  #9                  // Method org/jsoup/helper/Validate.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #10                 // Field method:Lorg/jsoup/Connection$Method;
      11: aload_0
      12: areturn

  public java.lang.String header(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #12                 // String Header name must not be null
       3: invokestatic  #9                  // Method org/jsoup/helper/Validate.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokespecial #13                 // Method getHeaderCaseInsensitive:(Ljava/lang/String;)Ljava/lang/String;
      11: areturn

  public T header(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: ldc           #14                 // String Header name must not be empty
       3: invokestatic  #15                 // Method org/jsoup/helper/Validate.notEmpty:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #16                 // String Header value must not be null
       9: invokestatic  #9                  // Method org/jsoup/helper/Validate.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: aload_1
      14: invokevirtual #17                 // Method removeHeader:(Ljava/lang/String;)Lorg/jsoup/Connection$Base;
      17: pop
      18: aload_0
      19: getfield      #5                  // Field headers:Ljava/util/Map;
      22: aload_1
      23: aload_2
      24: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: pop
      30: aload_0
      31: areturn

  public boolean hasHeader(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #14                 // String Header name must not be empty
       3: invokestatic  #15                 // Method org/jsoup/helper/Validate.notEmpty:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokespecial #13                 // Method getHeaderCaseInsensitive:(Ljava/lang/String;)Ljava/lang/String;
      11: ifnull        18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean hasHeaderWithValue(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #19                 // Method hasHeader:(Ljava/lang/String;)Z
       5: ifeq          24
       8: aload_0
       9: aload_1
      10: invokevirtual #20                 // Method header:(Ljava/lang/String;)Ljava/lang/String;
      13: aload_2
      14: invokevirtual #21                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public T removeHeader(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #14                 // String Header name must not be empty
       3: invokestatic  #15                 // Method org/jsoup/helper/Validate.notEmpty:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokespecial #22                 // Method scanHeaders:(Ljava/lang/String;)Ljava/util/Map$Entry;
      11: astore_2
      12: aload_2
      13: ifnull        32
      16: aload_0
      17: getfield      #5                  // Field headers:Ljava/util/Map;
      20: aload_2
      21: invokeinterface #23,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      26: invokeinterface #24,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      31: pop
      32: aload_0
      33: areturn

  public java.util.Map<java.lang.String, java.lang.String> headers();
    Code:
       0: aload_0
       1: getfield      #5                  // Field headers:Ljava/util/Map;
       4: areturn

  private java.lang.String getHeaderCaseInsensitive(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #12                 // String Header name must not be null
       3: invokestatic  #9                  // Method org/jsoup/helper/Validate.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #5                  // Field headers:Ljava/util/Map;
      10: aload_1
      11: invokeinterface #25,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #26                 // class java/lang/String
      19: astore_2
      20: aload_2
      21: ifnonnull     41
      24: aload_0
      25: getfield      #5                  // Field headers:Ljava/util/Map;
      28: aload_1
      29: invokevirtual #27                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      32: invokeinterface #25,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #26                 // class java/lang/String
      40: astore_2
      41: aload_2
      42: ifnonnull     65
      45: aload_0
      46: aload_1
      47: invokespecial #22                 // Method scanHeaders:(Ljava/lang/String;)Ljava/util/Map$Entry;
      50: astore_3
      51: aload_3
      52: ifnull        65
      55: aload_3
      56: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      61: checkcast     #26                 // class java/lang/String
      64: astore_2
      65: aload_2
      66: areturn

  private java.util.Map$Entry<java.lang.String, java.lang.String> scanHeaders(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #27                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #5                  // Field headers:Ljava/util/Map;
       9: invokeinterface #29,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      14: invokeinterface #30,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      19: astore_3
      20: aload_3
      21: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      26: ifeq          66
      29: aload_3
      30: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      35: checkcast     #33                 // class java/util/Map$Entry
      38: astore        4
      40: aload         4
      42: invokeinterface #23,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      47: checkcast     #26                 // class java/lang/String
      50: invokevirtual #27                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      53: aload_2
      54: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      57: ifeq          63
      60: aload         4
      62: areturn
      63: goto          20
      66: aconst_null
      67: areturn

  public java.lang.String cookie(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #35                 // String Cookie name must not be empty
       3: invokestatic  #15                 // Method org/jsoup/helper/Validate.notEmpty:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #6                  // Field cookies:Ljava/util/Map;
      10: aload_1
      11: invokeinterface #25,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #26                 // class java/lang/String
      19: areturn

  public T cookie(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: ldc           #35                 // String Cookie name must not be empty
       3: invokestatic  #15                 // Method org/jsoup/helper/Validate.notEmpty:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #36                 // String Cookie value must not be null
       9: invokestatic  #9                  // Method org/jsoup/helper/Validate.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: getfield      #6                  // Field cookies:Ljava/util/Map;
      16: aload_1
      17: aload_2
      18: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      23: pop
      24: aload_0
      25: areturn

  public boolean hasCookie(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #35                 // String Cookie name must not be empty
       3: invokestatic  #15                 // Method org/jsoup/helper/Validate.notEmpty:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #6                  // Field cookies:Ljava/util/Map;
      10: aload_1
      11: invokeinterface #37,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      16: ireturn

  public T removeCookie(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #35                 // String Cookie name must not be empty
       3: invokestatic  #15                 // Method org/jsoup/helper/Validate.notEmpty:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #6                  // Field cookies:Ljava/util/Map;
      10: aload_1
      11: invokeinterface #24,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_0
      18: areturn

  public java.util.Map<java.lang.String, java.lang.String> cookies();
    Code:
       0: aload_0
       1: getfield      #6                  // Field cookies:Ljava/util/Map;
       4: areturn

  org.jsoup.helper.HttpConnection$Base(org.jsoup.helper.HttpConnection$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
