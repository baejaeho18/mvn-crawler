Compiled from "RetainingInjector.java"
public abstract class org.jboss.msc.inject.RetainingInjector<T> implements org.jboss.msc.inject.Injector<T> {
  private volatile org.jboss.msc.value.Value<T> value;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<org.jboss.msc.inject.RetainingInjector, org.jboss.msc.value.Value> valueUpdater;

  public org.jboss.msc.inject.RetainingInjector();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void inject(T) throws org.jboss.msc.inject.InjectionException;
    Code:
       0: getstatic     #2                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: new           #3                  // class org/jboss/msc/value/ImmediateValue
       8: dup
       9: aload_1
      10: invokespecial #4                  // Method org/jboss/msc/value/ImmediateValue."<init>":(Ljava/lang/Object;)V
      13: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ifne          29
      19: new           #6                  // class org/jboss/msc/inject/InjectionException
      22: dup
      23: ldc           #7                  // String Value already set for this injector
      25: invokespecial #8                  // Method org/jboss/msc/inject/InjectionException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: return

  public void uninject();
    Code:
       0: getstatic     #2                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: ifnonnull     11
      11: return

  protected org.jboss.msc.value.Value<T> getStoredValue();
    Code:
       0: aload_0
       1: getfield      #10                 // Field value:Lorg/jboss/msc/value/Value;
       4: areturn

  protected org.jboss.msc.value.Value<T> setStoredValue(org.jboss.msc.value.Value<T>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #11                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #12                 // String value is null
      10: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: getstatic     #2                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      17: aload_0
      18: aload_1
      19: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #14                 // class org/jboss/msc/value/Value
      25: areturn

  static {};
    Code:
       0: ldc_w         #15                 // class org/jboss/msc/inject/RetainingInjector
       3: ldc_w         #14                 // class org/jboss/msc/value/Value
       6: ldc           #16                 // String value
       8: invokestatic  #17                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      11: putstatic     #2                  // Field valueUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      14: return
}
