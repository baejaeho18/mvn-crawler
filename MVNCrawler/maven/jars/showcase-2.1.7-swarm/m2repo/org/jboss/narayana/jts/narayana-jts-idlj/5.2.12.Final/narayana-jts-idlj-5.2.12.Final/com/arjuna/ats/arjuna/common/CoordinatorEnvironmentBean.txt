Compiled from "CoordinatorEnvironmentBean.java"
public class com.arjuna.ats.arjuna.common.CoordinatorEnvironmentBean implements com.arjuna.ats.arjuna.common.CoordinatorEnvironmentBeanMBean {
  private volatile boolean asyncCommit;

  private volatile boolean asyncPrepare;

  private volatile boolean asyncRollback;

  private volatile boolean asyncBeforeSynchronization;

  private volatile boolean asyncAfterSynchronization;

  private volatile boolean commitOnePhase;

  private volatile boolean maintainHeuristics;

  private volatile boolean transactionLog;

  private volatile int maxTwoPhaseCommitThreads;

  private volatile boolean writeOptimisation;

  private volatile boolean dynamic1PC;

  private volatile boolean readonlyOptimisation;

  private volatile boolean classicPrepare;

  private volatile boolean enableStatistics;

  private volatile boolean sharedTransactionLog;

  private volatile boolean startDisabled;

  private volatile java.lang.String txReaperMode;

  private volatile long txReaperTimeout;

  private volatile long txReaperCancelWaitPeriod;

  private volatile long txReaperCancelFailWaitPeriod;

  private volatile int txReaperZombieMax;

  private volatile int defaultTimeout;

  private volatile boolean transactionStatusManagerEnable;

  private volatile boolean beforeCompletionWhenRollbackOnly;

  private volatile java.lang.String checkedActionFactoryClassName;

  private volatile com.arjuna.ats.arjuna.coordinator.CheckedActionFactory checkedActionFactory;

  private volatile boolean allowCheckedActionFactoryOverride;

  private volatile boolean alternativeRecordOrdering;

  private volatile java.lang.String communicationStore;

  private volatile boolean finalizeBasicActions;

  public com.arjuna.ats.arjuna.common.CoordinatorEnvironmentBean();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field asyncCommit:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field asyncPrepare:Z
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field asyncRollback:Z
      19: aload_0
      20: iconst_1
      21: putfield      #5                  // Field commitOnePhase:Z
      24: aload_0
      25: iconst_1
      26: putfield      #6                  // Field maintainHeuristics:Z
      29: aload_0
      30: iconst_0
      31: putfield      #7                  // Field transactionLog:Z
      34: aload_0
      35: bipush        100
      37: putfield      #8                  // Field maxTwoPhaseCommitThreads:I
      40: aload_0
      41: iconst_0
      42: putfield      #9                  // Field writeOptimisation:Z
      45: aload_0
      46: iconst_1
      47: putfield      #10                 // Field dynamic1PC:Z
      50: aload_0
      51: iconst_1
      52: putfield      #11                 // Field readonlyOptimisation:Z
      55: aload_0
      56: iconst_0
      57: putfield      #12                 // Field classicPrepare:Z
      60: aload_0
      61: iconst_0
      62: putfield      #13                 // Field enableStatistics:Z
      65: aload_0
      66: iconst_0
      67: putfield      #14                 // Field sharedTransactionLog:Z
      70: aload_0
      71: iconst_0
      72: putfield      #15                 // Field startDisabled:Z
      75: aload_0
      76: ldc           #16                 // String DYNAMIC
      78: putfield      #17                 // Field txReaperMode:Ljava/lang/String;
      81: aload_0
      82: ldc2_w        #19                 // long 120000l
      85: putfield      #21                 // Field txReaperTimeout:J
      88: aload_0
      89: ldc2_w        #22                 // long 500l
      92: putfield      #24                 // Field txReaperCancelWaitPeriod:J
      95: aload_0
      96: ldc2_w        #22                 // long 500l
      99: putfield      #25                 // Field txReaperCancelFailWaitPeriod:J
     102: aload_0
     103: bipush        8
     105: putfield      #26                 // Field txReaperZombieMax:I
     108: aload_0
     109: bipush        60
     111: putfield      #27                 // Field defaultTimeout:I
     114: aload_0
     115: iconst_1
     116: putfield      #28                 // Field transactionStatusManagerEnable:Z
     119: aload_0
     120: iconst_0
     121: putfield      #29                 // Field beforeCompletionWhenRollbackOnly:Z
     124: aload_0
     125: ldc           #30                 // String com.arjuna.ats.internal.arjuna.coordinator.CheckedActionFactoryImple
     127: putfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
     130: aload_0
     131: aconst_null
     132: putfield      #32                 // Field checkedActionFactory:Lcom/arjuna/ats/arjuna/coordinator/CheckedActionFactory;
     135: aload_0
     136: iconst_0
     137: putfield      #33                 // Field alternativeRecordOrdering:Z
     140: aload_0
     141: ldc           #34                 // class com/arjuna/ats/internal/arjuna/objectstore/HashedActionStore
     143: invokevirtual #35                 // Method java/lang/Class.getName:()Ljava/lang/String;
     146: putfield      #36                 // Field communicationStore:Ljava/lang/String;
     149: aload_0
     150: iconst_0
     151: putfield      #37                 // Field finalizeBasicActions:Z
     154: return

  public boolean isAsyncCommit();
    Code:
       0: aload_0
       1: getfield      #2                  // Field asyncCommit:Z
       4: ireturn

  public void setAsyncCommit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field asyncCommit:Z
       5: return

  public boolean isAsyncPrepare();
    Code:
       0: aload_0
       1: getfield      #3                  // Field asyncPrepare:Z
       4: ireturn

  public void setAsyncPrepare(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field asyncPrepare:Z
       5: return

  public boolean isAsyncRollback();
    Code:
       0: aload_0
       1: getfield      #4                  // Field asyncRollback:Z
       4: ireturn

  public void setAsyncRollback(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field asyncRollback:Z
       5: return

  public int getMaxTwoPhaseCommitThreads();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxTwoPhaseCommitThreads:I
       4: ireturn

  public void setMaxTwoPhaseCommitThreads(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field maxTwoPhaseCommitThreads:I
       5: return

  public boolean isCommitOnePhase();
    Code:
       0: aload_0
       1: getfield      #5                  // Field commitOnePhase:Z
       4: ireturn

  public void setCommitOnePhase(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field commitOnePhase:Z
       5: return

  public boolean getDynamic1PC();
    Code:
       0: aload_0
       1: getfield      #10                 // Field dynamic1PC:Z
       4: ireturn

  public void setDynamic1PC(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field dynamic1PC:Z
       5: return

  public boolean isMaintainHeuristics();
    Code:
       0: aload_0
       1: getfield      #6                  // Field maintainHeuristics:Z
       4: ireturn

  public void setMaintainHeuristics(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field maintainHeuristics:Z
       5: return

  public boolean isWriteOptimisation();
    Code:
       0: aload_0
       1: getfield      #9                  // Field writeOptimisation:Z
       4: ireturn

  public void setWriteOptimisation(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field writeOptimisation:Z
       5: return

  public boolean isReadonlyOptimisation();
    Code:
       0: aload_0
       1: getfield      #11                 // Field readonlyOptimisation:Z
       4: ireturn

  public void setReadonlyOptimisation(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field readonlyOptimisation:Z
       5: return

  public boolean isClassicPrepare();
    Code:
       0: aload_0
       1: getfield      #12                 // Field classicPrepare:Z
       4: ireturn

  public void setClassicPrepare(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field classicPrepare:Z
       5: return

  public boolean isEnableStatistics();
    Code:
       0: aload_0
       1: getfield      #13                 // Field enableStatistics:Z
       4: ireturn

  public void setEnableStatistics(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field enableStatistics:Z
       5: return

  public boolean isSharedTransactionLog();
    Code:
       0: aload_0
       1: getfield      #14                 // Field sharedTransactionLog:Z
       4: ireturn

  public void setSharedTransactionLog(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field sharedTransactionLog:Z
       5: return

  public boolean isStartDisabled();
    Code:
       0: aload_0
       1: getfield      #15                 // Field startDisabled:Z
       4: ireturn

  public void setStartDisabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field startDisabled:Z
       5: return

  public java.lang.String getTxReaperMode();
    Code:
       0: aload_0
       1: getfield      #17                 // Field txReaperMode:Ljava/lang/String;
       4: areturn

  public void setTxReaperMode(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field txReaperMode:Ljava/lang/String;
       5: return

  public long getTxReaperTimeout();
    Code:
       0: aload_0
       1: getfield      #21                 // Field txReaperTimeout:J
       4: lreturn

  public void setTxReaperTimeout(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #21                 // Field txReaperTimeout:J
       5: return

  public long getTxReaperCancelWaitPeriod();
    Code:
       0: aload_0
       1: getfield      #24                 // Field txReaperCancelWaitPeriod:J
       4: lreturn

  public void setTxReaperCancelWaitPeriod(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #24                 // Field txReaperCancelWaitPeriod:J
       5: return

  public long getTxReaperCancelFailWaitPeriod();
    Code:
       0: aload_0
       1: getfield      #25                 // Field txReaperCancelFailWaitPeriod:J
       4: lreturn

  public void setTxReaperCancelFailWaitPeriod(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #25                 // Field txReaperCancelFailWaitPeriod:J
       5: return

  public int getTxReaperZombieMax();
    Code:
       0: aload_0
       1: getfield      #26                 // Field txReaperZombieMax:I
       4: ireturn

  public void setTxReaperZombieMax(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field txReaperZombieMax:I
       5: return

  public int getDefaultTimeout();
    Code:
       0: aload_0
       1: getfield      #27                 // Field defaultTimeout:I
       4: ireturn

  public void setDefaultTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field defaultTimeout:I
       5: return

  public boolean isTransactionStatusManagerEnable();
    Code:
       0: aload_0
       1: getfield      #28                 // Field transactionStatusManagerEnable:Z
       4: ireturn

  public void setTransactionStatusManagerEnable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field transactionStatusManagerEnable:Z
       5: return

  public boolean isBeforeCompletionWhenRollbackOnly();
    Code:
       0: aload_0
       1: getfield      #29                 // Field beforeCompletionWhenRollbackOnly:Z
       4: ireturn

  public void setBeforeCompletionWhenRollbackOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field beforeCompletionWhenRollbackOnly:Z
       5: return

  public java.lang.String getCheckedActionFactoryClassName();
    Code:
       0: aload_0
       1: getfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
       4: areturn

  public void setCheckedActionFactoryClassName(java.lang.String);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_1
       5: ifnull        15
       8: aload_0
       9: getfield      #38                 // Field allowCheckedActionFactoryOverride:Z
      12: ifeq          48
      15: aload_1
      16: ifnonnull     27
      19: aload_0
      20: aconst_null
      21: putfield      #32                 // Field checkedActionFactory:Lcom/arjuna/ats/arjuna/coordinator/CheckedActionFactory;
      24: goto          43
      27: aload_1
      28: aload_0
      29: getfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
      32: invokevirtual #39                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      35: ifne          43
      38: aload_0
      39: aconst_null
      40: putfield      #32                 // Field checkedActionFactory:Lcom/arjuna/ats/arjuna/coordinator/CheckedActionFactory;
      43: aload_0
      44: aload_1
      45: putfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
      48: aload_2
      49: monitorexit
      50: goto          58
      53: astore_3
      54: aload_2
      55: monitorexit
      56: aload_3
      57: athrow
      58: return
    Exception table:
       from    to  target type
           4    50    53   any
          53    56    53   any

  public com.arjuna.ats.arjuna.coordinator.CheckedActionFactory getCheckedActionFactory();
    Code:
       0: aload_0
       1: getfield      #32                 // Field checkedActionFactory:Lcom/arjuna/ats/arjuna/coordinator/CheckedActionFactory;
       4: ifnonnull     61
       7: aload_0
       8: getfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
      11: ifnull        61
      14: aload_0
      15: dup
      16: astore_1
      17: monitorenter
      18: aload_0
      19: getfield      #32                 // Field checkedActionFactory:Lcom/arjuna/ats/arjuna/coordinator/CheckedActionFactory;
      22: ifnonnull     51
      25: aload_0
      26: getfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
      29: ifnull        51
      32: ldc           #40                 // class com/arjuna/ats/arjuna/coordinator/CheckedActionFactory
      34: aload_0
      35: getfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
      38: aconst_null
      39: invokestatic  #41                 // Method com/arjuna/common/internal/util/ClassloadingUtility.loadAndInstantiateClass:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      42: checkcast     #40                 // class com/arjuna/ats/arjuna/coordinator/CheckedActionFactory
      45: astore_2
      46: aload_0
      47: aload_2
      48: putfield      #32                 // Field checkedActionFactory:Lcom/arjuna/ats/arjuna/coordinator/CheckedActionFactory;
      51: aload_1
      52: monitorexit
      53: goto          61
      56: astore_3
      57: aload_1
      58: monitorexit
      59: aload_3
      60: athrow
      61: aload_0
      62: getfield      #32                 // Field checkedActionFactory:Lcom/arjuna/ats/arjuna/coordinator/CheckedActionFactory;
      65: areturn
    Exception table:
       from    to  target type
          18    53    56   any
          56    59    56   any

  public void setCheckedActionFactory(com.arjuna.ats.arjuna.coordinator.CheckedActionFactory);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
       8: ifnull        18
      11: aload_0
      12: getfield      #38                 // Field allowCheckedActionFactoryOverride:Z
      15: ifeq          57
      18: aload_0
      19: getfield      #32                 // Field checkedActionFactory:Lcom/arjuna/ats/arjuna/coordinator/CheckedActionFactory;
      22: astore_3
      23: aload_0
      24: aload_1
      25: putfield      #32                 // Field checkedActionFactory:Lcom/arjuna/ats/arjuna/coordinator/CheckedActionFactory;
      28: aload_1
      29: ifnonnull     40
      32: aload_0
      33: aconst_null
      34: putfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
      37: goto          57
      40: aload_1
      41: aload_3
      42: if_acmpeq     57
      45: aload_1
      46: invokestatic  #42                 // Method com/arjuna/common/internal/util/ClassloadingUtility.getNameForClass:(Ljava/lang/Object;)Ljava/lang/String;
      49: astore        4
      51: aload_0
      52: aload         4
      54: putfield      #31                 // Field checkedActionFactoryClassName:Ljava/lang/String;
      57: aload_2
      58: monitorexit
      59: goto          69
      62: astore        5
      64: aload_2
      65: monitorexit
      66: aload         5
      68: athrow
      69: return
    Exception table:
       from    to  target type
           4    59    62   any
          62    66    62   any

  public boolean isAlternativeRecordOrdering();
    Code:
       0: aload_0
       1: getfield      #33                 // Field alternativeRecordOrdering:Z
       4: ireturn

  public void setAlternativeRecordOrdering(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field alternativeRecordOrdering:Z
       5: return

  public java.lang.String getCommunicationStore();
    Code:
       0: aload_0
       1: getfield      #36                 // Field communicationStore:Ljava/lang/String;
       4: areturn

  public void setCommunicationStore(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field communicationStore:Ljava/lang/String;
       5: return

  public boolean isFinalizeBasicActions();
    Code:
       0: aload_0
       1: getfield      #37                 // Field finalizeBasicActions:Z
       4: ireturn

  public void setFinalizeBasicActions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field finalizeBasicActions:Z
       5: return

  public boolean isAsyncBeforeSynchronization();
    Code:
       0: aload_0
       1: getfield      #43                 // Field asyncBeforeSynchronization:Z
       4: ireturn

  public void setAsyncBeforeSynchronization(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #43                 // Field asyncBeforeSynchronization:Z
       5: return

  public boolean isAsyncAfterSynchronization();
    Code:
       0: aload_0
       1: getfield      #44                 // Field asyncAfterSynchronization:Z
       4: ireturn

  public void setAsyncAfterSynchronization(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #44                 // Field asyncAfterSynchronization:Z
       5: return

  public boolean isAllowCheckedActionFactoryOverride();
    Code:
       0: aload_0
       1: getfield      #38                 // Field allowCheckedActionFactoryOverride:Z
       4: ireturn

  public void setAllowCheckedActionFactoryOverride(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #38                 // Field allowCheckedActionFactoryOverride:Z
       5: return
}
