Compiled from "Pipe.java"
public final class org.xnio.streams.Pipe {
  private final java.lang.Object lock;

  private int tail;

  private int size;

  private final byte[] buffer;

  private boolean writeClosed;

  private boolean readClosed;

  private final java.io.InputStream in;

  private final java.io.OutputStream out;

  public org.xnio.streams.Pipe(int);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/lang/Object
       8: dup
       9: invokespecial #28                 // Method java/lang/Object."<init>":()V
      12: putfield      #30                 // Field lock:Ljava/lang/Object;
      15: aload_0
      16: new           #9                  // class org/xnio/streams/Pipe$1
      19: dup
      20: aload_0
      21: invokespecial #33                 // Method org/xnio/streams/Pipe$1."<init>":(Lorg/xnio/streams/Pipe;)V
      24: putfield      #35                 // Field in:Ljava/io/InputStream;
      27: aload_0
      28: new           #7                  // class org/xnio/streams/Pipe$2
      31: dup
      32: aload_0
      33: invokespecial #36                 // Method org/xnio/streams/Pipe$2."<init>":(Lorg/xnio/streams/Pipe;)V
      36: putfield      #38                 // Field out:Ljava/io/OutputStream;
      39: aload_0
      40: iload_1
      41: newarray       byte
      43: putfield      #40                 // Field buffer:[B
      46: return

  public void await();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #30                 // Field lock:Ljava/lang/Object;
       6: astore_2
       7: aload_2
       8: dup
       9: astore_3
      10: monitorenter
      11: aload_0
      12: getfield      #48                 // Field readClosed:Z
      15: ifne          32
      18: aload_2
      19: invokevirtual #51                 // Method java/lang/Object.wait:()V
      22: goto          11
      25: astore        4
      27: iconst_1
      28: istore_1
      29: goto          11
      32: aload_3
      33: monitorexit
      34: goto          44
      37: astore        5
      39: aload_3
      40: monitorexit
      41: aload         5
      43: athrow
      44: iload_1
      45: ifeq          72
      48: invokestatic  #59                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      51: invokevirtual #62                 // Method java/lang/Thread.interrupt:()V
      54: goto          72
      57: astore        6
      59: iload_1
      60: ifeq          69
      63: invokestatic  #59                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      66: invokevirtual #62                 // Method java/lang/Thread.interrupt:()V
      69: aload         6
      71: athrow
      72: return
    Exception table:
       from    to  target type
          18    22    25   Class java/lang/InterruptedException
          11    34    37   any
          37    41    37   any
           7    44    57   any
          57    59    57   any

  public java.io.InputStream getIn();
    Code:
       0: aload_0
       1: getfield      #35                 // Field in:Ljava/io/InputStream;
       4: areturn

  public java.io.OutputStream getOut();
    Code:
       0: aload_0
       1: getfield      #38                 // Field out:Ljava/io/OutputStream;
       4: areturn

  static java.lang.Object access$000(org.xnio.streams.Pipe);
    Code:
       0: aload_0
       1: getfield      #30                 // Field lock:Ljava/lang/Object;
       4: areturn

  static boolean access$100(org.xnio.streams.Pipe);
    Code:
       0: aload_0
       1: getfield      #76                 // Field writeClosed:Z
       4: ireturn

  static int access$200(org.xnio.streams.Pipe);
    Code:
       0: aload_0
       1: getfield      #80                 // Field size:I
       4: ireturn

  static int access$300(org.xnio.streams.Pipe);
    Code:
       0: aload_0
       1: getfield      #83                 // Field tail:I
       4: ireturn

  static byte[] access$400(org.xnio.streams.Pipe);
    Code:
       0: aload_0
       1: getfield      #40                 // Field buffer:[B
       4: areturn

  static int access$302(org.xnio.streams.Pipe, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #83                 // Field tail:I
       6: ireturn

  static int access$210(org.xnio.streams.Pipe);
    Code:
       0: aload_0
       1: dup
       2: getfield      #80                 // Field size:I
       5: dup_x1
       6: iconst_1
       7: isub
       8: putfield      #80                 // Field size:I
      11: ireturn

  static int access$202(org.xnio.streams.Pipe, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #80                 // Field size:I
       6: ireturn

  static boolean access$102(org.xnio.streams.Pipe, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #76                 // Field writeClosed:Z
       6: ireturn

  static boolean access$502(org.xnio.streams.Pipe, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #48                 // Field readClosed:Z
       6: ireturn

  static int access$208(org.xnio.streams.Pipe);
    Code:
       0: aload_0
       1: dup
       2: getfield      #80                 // Field size:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #80                 // Field size:I
      11: ireturn
}
