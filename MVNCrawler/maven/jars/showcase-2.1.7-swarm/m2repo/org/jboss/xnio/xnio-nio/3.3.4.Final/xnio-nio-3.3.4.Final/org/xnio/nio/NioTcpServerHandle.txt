Compiled from "NioTcpServerHandle.java"
final class org.xnio.nio.NioTcpServerHandle extends org.xnio.nio.NioHandle implements org.xnio.nio.ChannelClosed {
  private final java.lang.Runnable freeTask;

  private final org.xnio.nio.NioTcpServer server;

  private int count;

  private int low;

  private int high;

  private int tokenCount;

  private boolean stopped;

  static final boolean $assertionsDisabled;

  org.xnio.nio.NioTcpServerHandle(org.xnio.nio.NioTcpServer, java.nio.channels.SelectionKey, org.xnio.nio.WorkerThread, int, int);
    Code:
       0: aload_0
       1: aload_3
       2: aload_2
       3: invokespecial #2                  // Method org/xnio/nio/NioHandle."<init>":(Lorg/xnio/nio/WorkerThread;Ljava/nio/channels/SelectionKey;)V
       6: aload_0
       7: iconst_m1
       8: putfield      #3                  // Field tokenCount:I
      11: aload_0
      12: aload_1
      13: putfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      16: aload_0
      17: iload         4
      19: putfield      #4                  // Field low:I
      22: aload_0
      23: iload         5
      25: putfield      #5                  // Field high:I
      28: aload_0
      29: new           #6                  // class org/xnio/nio/NioTcpServerHandle$1
      32: dup
      33: aload_0
      34: invokespecial #7                  // Method org/xnio/nio/NioTcpServerHandle$1."<init>":(Lorg/xnio/nio/NioTcpServerHandle;)V
      37: putfield      #8                  // Field freeTask:Ljava/lang/Runnable;
      40: return

  void handleReady(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       4: aload_0
       5: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       8: invokevirtual #9                  // Method org/xnio/nio/NioTcpServer.getAcceptListener:()Lorg/xnio/ChannelListener;
      11: invokestatic  #10                 // Method org/xnio/ChannelListeners.invokeChannelListener:(Ljava/nio/channels/Channel;Lorg/xnio/ChannelListener;)Z
      14: pop
      15: return

  void forceTermination();
    Code:
       0: aload_0
       1: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       4: invokestatic  #11                 // Method org/xnio/IoUtils.safeClose:(Ljava/io/Closeable;)V
       7: return

  void terminated();
    Code:
       0: aload_0
       1: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       4: invokevirtual #12                 // Method org/xnio/nio/NioTcpServer.invokeCloseHandler:()V
       7: return

  java.lang.Runnable getFreeTask();
    Code:
       0: aload_0
       1: getfield      #8                  // Field freeTask:Ljava/lang/Runnable;
       4: areturn

  void resume();
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_1
       5: aload_1
       6: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     38
      12: aload_0
      13: getfield      #15                 // Field stopped:Z
      16: ifne          50
      19: aload_0
      20: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      23: getfield      #16                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      26: ifeq          50
      29: aload_0
      30: bipush        16
      32: invokespecial #18                 // Method org/xnio/nio/NioHandle.resume:(I)V
      35: goto          50
      38: aload_1
      39: new           #19                 // class org/xnio/nio/NioTcpServerHandle$2
      42: dup
      43: aload_0
      44: invokespecial #20                 // Method org/xnio/nio/NioTcpServerHandle$2."<init>":(Lorg/xnio/nio/NioTcpServerHandle;)V
      47: invokevirtual #21                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      50: return

  void suspend();
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_1
       5: aload_1
       6: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     38
      12: aload_0
      13: getfield      #15                 // Field stopped:Z
      16: ifne          29
      19: aload_0
      20: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      23: getfield      #16                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      26: ifne          50
      29: aload_0
      30: bipush        16
      32: invokespecial #22                 // Method org/xnio/nio/NioHandle.suspend:(I)V
      35: goto          50
      38: aload_1
      39: new           #23                 // class org/xnio/nio/NioTcpServerHandle$3
      42: dup
      43: aload_0
      44: invokespecial #24                 // Method org/xnio/nio/NioTcpServerHandle$3."<init>":(Lorg/xnio/nio/NioTcpServerHandle;)V
      47: invokevirtual #21                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      50: return

  public void channelClosed();
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_1
       5: aload_1
       6: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     19
      12: aload_0
      13: invokevirtual #25                 // Method freeConnection:()V
      16: goto          27
      19: aload_1
      20: aload_0
      21: getfield      #8                  // Field freeTask:Ljava/lang/Runnable;
      24: invokevirtual #21                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      27: return

  void freeConnection();
    Code:
       0: getstatic     #26                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: aload_0
      10: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
      13: if_acmpeq     24
      16: new           #27                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #28                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: dup
      26: getfield      #29                 // Field count:I
      29: dup_x1
      30: iconst_1
      31: isub
      32: putfield      #29                 // Field count:I
      35: aload_0
      36: getfield      #4                  // Field low:I
      39: if_icmpgt     77
      42: aload_0
      43: getfield      #3                  // Field tokenCount:I
      46: ifeq          77
      49: aload_0
      50: getfield      #15                 // Field stopped:Z
      53: ifeq          77
      56: aload_0
      57: iconst_0
      58: putfield      #15                 // Field stopped:Z
      61: aload_0
      62: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      65: getfield      #16                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      68: ifeq          77
      71: aload_0
      72: bipush        16
      74: invokespecial #18                 // Method org/xnio/nio/NioHandle.resume:(I)V
      77: return

  void setTokenCount(int);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_2
       5: aload_2
       6: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     69
      12: aload_0
      13: getfield      #3                  // Field tokenCount:I
      16: ifne          64
      19: aload_0
      20: iload_1
      21: putfield      #3                  // Field tokenCount:I
      24: aload_0
      25: getfield      #29                 // Field count:I
      28: aload_0
      29: getfield      #4                  // Field low:I
      32: if_icmpgt     63
      35: aload_0
      36: getfield      #15                 // Field stopped:Z
      39: ifeq          63
      42: aload_0
      43: iconst_0
      44: putfield      #15                 // Field stopped:Z
      47: aload_0
      48: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      51: getfield      #16                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      54: ifeq          63
      57: aload_0
      58: bipush        16
      60: invokespecial #18                 // Method org/xnio/nio/NioHandle.resume:(I)V
      63: return
      64: aload_2
      65: invokevirtual #30                 // Method org/xnio/nio/WorkerThread.getNextThread:()Lorg/xnio/nio/WorkerThread;
      68: astore_2
      69: aload_0
      70: aload_2
      71: iload_1
      72: invokespecial #31                 // Method setThreadNewCount:(Lorg/xnio/nio/WorkerThread;I)V
      75: return

  private void setThreadNewCount(org.xnio.nio.WorkerThread, int);
    Code:
       0: aload_1
       1: invokevirtual #32                 // Method org/xnio/nio/WorkerThread.getNumber:()I
       4: istore_3
       5: aload_1
       6: new           #33                 // class org/xnio/nio/NioTcpServerHandle$4
       9: dup
      10: aload_0
      11: iload_3
      12: iload_2
      13: invokespecial #34                 // Method org/xnio/nio/NioTcpServerHandle$4."<init>":(Lorg/xnio/nio/NioTcpServerHandle;II)V
      16: invokevirtual #21                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      19: return

  void initializeTokenCount(int);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_2
       5: aload_2
       6: invokevirtual #32                 // Method org/xnio/nio/WorkerThread.getNumber:()I
       9: istore_3
      10: aload_2
      11: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      14: if_acmpne     40
      17: aload_0
      18: iload_1
      19: putfield      #3                  // Field tokenCount:I
      22: iload_1
      23: ifne          54
      26: aload_0
      27: iconst_1
      28: putfield      #15                 // Field stopped:Z
      31: aload_0
      32: bipush        16
      34: invokespecial #22                 // Method org/xnio/nio/NioHandle.suspend:(I)V
      37: goto          54
      40: aload_2
      41: new           #35                 // class org/xnio/nio/NioTcpServerHandle$5
      44: dup
      45: aload_0
      46: iload_3
      47: iload_1
      48: invokespecial #36                 // Method org/xnio/nio/NioTcpServerHandle$5."<init>":(Lorg/xnio/nio/NioTcpServerHandle;II)V
      51: invokevirtual #21                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
      54: return

  boolean getConnection();
    Code:
       0: getstatic     #26                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: aload_0
      10: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
      13: if_acmpeq     24
      16: new           #27                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #28                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: getfield      #15                 // Field stopped:Z
      28: ifeq          33
      31: iconst_0
      32: ireturn
      33: aload_0
      34: getfield      #3                  // Field tokenCount:I
      37: iconst_m1
      38: if_icmpeq     73
      41: aload_0
      42: dup
      43: getfield      #3                  // Field tokenCount:I
      46: iconst_1
      47: isub
      48: dup_x1
      49: putfield      #3                  // Field tokenCount:I
      52: ifne          73
      55: aload_0
      56: aload_0
      57: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
      60: invokevirtual #30                 // Method org/xnio/nio/WorkerThread.getNextThread:()Lorg/xnio/nio/WorkerThread;
      63: aload_0
      64: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      67: invokevirtual #37                 // Method org/xnio/nio/NioTcpServer.getTokenConnectionCount:()I
      70: invokespecial #31                 // Method setThreadNewCount:(Lorg/xnio/nio/WorkerThread;I)V
      73: aload_0
      74: dup
      75: getfield      #29                 // Field count:I
      78: iconst_1
      79: iadd
      80: dup_x1
      81: putfield      #29                 // Field count:I
      84: aload_0
      85: getfield      #5                  // Field high:I
      88: if_icmpge     98
      91: aload_0
      92: getfield      #3                  // Field tokenCount:I
      95: ifne          109
      98: aload_0
      99: iconst_1
     100: putfield      #15                 // Field stopped:Z
     103: aload_0
     104: bipush        16
     106: invokespecial #22                 // Method org/xnio/nio/NioHandle.suspend:(I)V
     109: iconst_1
     110: ireturn

  public void executeSetTask(int, int);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
       4: astore_3
       5: aload_3
       6: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: if_acmpne     86
      12: aload_0
      13: iload_1
      14: putfield      #5                  // Field high:I
      17: aload_0
      18: iload_2
      19: putfield      #4                  // Field low:I
      22: aload_0
      23: getfield      #29                 // Field count:I
      26: iload_1
      27: if_icmplt     49
      30: aload_0
      31: getfield      #15                 // Field stopped:Z
      34: ifne          49
      37: aload_0
      38: iconst_1
      39: putfield      #15                 // Field stopped:Z
      42: aload_0
      43: invokevirtual #38                 // Method suspend:()V
      46: goto          100
      49: aload_0
      50: getfield      #29                 // Field count:I
      53: iload_2
      54: if_icmpgt     100
      57: aload_0
      58: getfield      #15                 // Field stopped:Z
      61: ifeq          100
      64: aload_0
      65: iconst_0
      66: putfield      #15                 // Field stopped:Z
      69: aload_0
      70: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
      73: getfield      #16                 // Field org/xnio/nio/NioTcpServer.resumed:Z
      76: ifeq          100
      79: aload_0
      80: invokevirtual #39                 // Method resume:()V
      83: goto          100
      86: aload_3
      87: new           #40                 // class org/xnio/nio/NioTcpServerHandle$6
      90: dup
      91: aload_0
      92: iload_1
      93: iload_2
      94: invokespecial #41                 // Method org/xnio/nio/NioTcpServerHandle$6."<init>":(Lorg/xnio/nio/NioTcpServerHandle;II)V
      97: invokevirtual #21                 // Method org/xnio/nio/WorkerThread.execute:(Ljava/lang/Runnable;)V
     100: return

  int getConnectionCount();
    Code:
       0: getstatic     #26                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: aload_0
      10: invokevirtual #13                 // Method getWorkerThread:()Lorg/xnio/nio/WorkerThread;
      13: if_acmpeq     24
      16: new           #27                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #28                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: getfield      #29                 // Field count:I
      28: ireturn

  static org.xnio.nio.NioTcpServer access$000(org.xnio.nio.NioTcpServerHandle);
    Code:
       0: aload_0
       1: getfield      #1                  // Field server:Lorg/xnio/nio/NioTcpServer;
       4: areturn

  static {};
    Code:
       0: ldc           #42                 // class org/xnio/nio/NioTcpServerHandle
       2: invokevirtual #43                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #26                 // Field $assertionsDisabled:Z
      16: return
}
