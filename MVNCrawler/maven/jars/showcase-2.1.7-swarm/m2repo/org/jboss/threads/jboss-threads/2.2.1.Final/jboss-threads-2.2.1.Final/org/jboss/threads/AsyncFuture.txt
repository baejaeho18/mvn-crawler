Compiled from "AsyncFuture.java"
public interface org.jboss.threads.AsyncFuture<T> extends java.util.concurrent.Future<T>, org.jboss.threads.AsyncCancellable {
  public abstract org.jboss.threads.AsyncFuture$Status await() throws java.lang.InterruptedException;

  public abstract org.jboss.threads.AsyncFuture$Status await(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;

  public abstract T getUninterruptibly() throws java.util.concurrent.CancellationException, java.util.concurrent.ExecutionException;

  public abstract T getUninterruptibly(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.CancellationException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;

  public abstract org.jboss.threads.AsyncFuture$Status awaitUninterruptibly();

  public abstract org.jboss.threads.AsyncFuture$Status awaitUninterruptibly(long, java.util.concurrent.TimeUnit);

  public abstract org.jboss.threads.AsyncFuture$Status getStatus();

  public abstract <A> void addListener(org.jboss.threads.AsyncFuture$Listener<? super T, A>, A);

  public abstract boolean cancel(boolean);

  public abstract void asyncCancel(boolean);
}
