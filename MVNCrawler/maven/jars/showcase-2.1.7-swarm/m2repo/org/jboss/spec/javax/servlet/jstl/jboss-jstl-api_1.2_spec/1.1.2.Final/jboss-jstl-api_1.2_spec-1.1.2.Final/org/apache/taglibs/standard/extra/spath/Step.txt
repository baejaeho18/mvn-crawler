Compiled from "Step.java"
public class org.apache.taglibs.standard.extra.spath.Step {
  private boolean depthUnlimited;

  private java.lang.String name;

  private java.util.List predicates;

  private java.lang.String uri;

  private java.lang.String localPart;

  public org.apache.taglibs.standard.extra.spath.Step(boolean, java.lang.String, java.util.List);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_2
       5: ifnonnull     18
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #3                  // String non-null name required
      14: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: iload_1
      20: putfield      #5                  // Field depthUnlimited:Z
      23: aload_0
      24: aload_2
      25: putfield      #6                  // Field name:Ljava/lang/String;
      28: aload_0
      29: aload_3
      30: putfield      #7                  // Field predicates:Ljava/util/List;
      33: return

  public boolean isMatchingName(java.lang.String, java.lang.String);
    Code:
       0: aload_2
       1: ifnonnull     14
       4: new           #2                  // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #8                  // String need non-null localPart
      10: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: ifnull        29
      18: aload_1
      19: ldc           #9                  // String
      21: invokevirtual #10                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      24: ifeq          29
      27: aconst_null
      28: astore_1
      29: aload_0
      30: getfield      #11                 // Field localPart:Ljava/lang/String;
      33: ifnonnull     47
      36: aload_0
      37: getfield      #12                 // Field uri:Ljava/lang/String;
      40: ifnonnull     47
      43: aload_0
      44: invokespecial #13                 // Method parseStepName:()V
      47: aload_0
      48: getfield      #12                 // Field uri:Ljava/lang/String;
      51: ifnonnull     68
      54: aload_0
      55: getfield      #11                 // Field localPart:Ljava/lang/String;
      58: ldc           #14                 // String *
      60: invokevirtual #10                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      63: ifeq          68
      66: iconst_1
      67: ireturn
      68: aload_1
      69: ifnonnull     92
      72: aload_0
      73: getfield      #12                 // Field uri:Ljava/lang/String;
      76: ifnonnull     92
      79: aload_2
      80: aload_0
      81: getfield      #11                 // Field localPart:Ljava/lang/String;
      84: invokevirtual #10                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      87: ifeq          92
      90: iconst_1
      91: ireturn
      92: aload_1
      93: ifnull        141
      96: aload_0
      97: getfield      #12                 // Field uri:Ljava/lang/String;
     100: ifnull        141
     103: aload_1
     104: aload_0
     105: getfield      #12                 // Field uri:Ljava/lang/String;
     108: invokevirtual #10                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     111: ifeq          141
     114: aload_2
     115: aload_0
     116: getfield      #11                 // Field localPart:Ljava/lang/String;
     119: invokevirtual #10                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     122: ifeq          127
     125: iconst_1
     126: ireturn
     127: aload_0
     128: getfield      #11                 // Field localPart:Ljava/lang/String;
     131: ldc           #14                 // String *
     133: invokevirtual #10                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     136: ifeq          141
     139: iconst_1
     140: ireturn
     141: iconst_0
     142: ireturn

  public boolean isDepthUnlimited();
    Code:
       0: aload_0
       1: getfield      #5                  // Field depthUnlimited:Z
       4: ireturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #6                  // Field name:Ljava/lang/String;
       4: areturn

  public java.util.List getPredicates();
    Code:
       0: aload_0
       1: getfield      #7                  // Field predicates:Ljava/util/List;
       4: areturn

  private void parseStepName();
    Code:
       0: aload_0
       1: getfield      #6                  // Field name:Ljava/lang/String;
       4: ldc           #15                 // String :
       6: invokevirtual #16                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
       9: istore_2
      10: iload_2
      11: iconst_m1
      12: if_icmpne     28
      15: aconst_null
      16: astore_1
      17: aload_0
      18: aload_0
      19: getfield      #6                  // Field name:Ljava/lang/String;
      22: putfield      #11                 // Field localPart:Ljava/lang/String;
      25: goto          52
      28: aload_0
      29: getfield      #6                  // Field name:Ljava/lang/String;
      32: iconst_0
      33: iload_2
      34: invokevirtual #17                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      37: astore_1
      38: aload_0
      39: aload_0
      40: getfield      #6                  // Field name:Ljava/lang/String;
      43: iload_2
      44: iconst_1
      45: iadd
      46: invokevirtual #18                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      49: putfield      #11                 // Field localPart:Ljava/lang/String;
      52: aload_0
      53: aload_0
      54: aload_1
      55: invokespecial #19                 // Method mapPrefix:(Ljava/lang/String;)Ljava/lang/String;
      58: putfield      #12                 // Field uri:Ljava/lang/String;
      61: return

  private java.lang.String mapPrefix(java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: new           #2                  // class java/lang/IllegalArgumentException
       9: dup
      10: new           #20                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #22                 // String unknown prefix \'
      19: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_1
      23: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: ldc           #24                 // String \'
      28: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      37: athrow
}
