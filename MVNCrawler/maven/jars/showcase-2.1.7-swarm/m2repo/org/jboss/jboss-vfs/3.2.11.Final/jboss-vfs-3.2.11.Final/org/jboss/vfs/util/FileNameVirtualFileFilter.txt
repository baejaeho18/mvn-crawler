Compiled from "FileNameVirtualFileFilter.java"
public class org.jboss.vfs.util.FileNameVirtualFileFilter implements org.jboss.vfs.VirtualFileFilter {
  private java.util.Map<java.lang.String, java.util.Set<java.lang.String>> excludes;

  public org.jboss.vfs.util.FileNameVirtualFileFilter(java.util.Map<java.lang.String, java.util.Set<java.lang.String>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnull        17
       8: aload_1
       9: invokeinterface #2,  1            // InterfaceMethod java/util/Map.isEmpty:()Z
      14: ifeq          28
      17: getstatic     #3                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
      20: ldc           #4                  // String excludes
      22: invokeinterface #5,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullOrEmpty:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      27: athrow
      28: aload_0
      29: aload_1
      30: putfield      #6                  // Field excludes:Ljava/util/Map;
      33: return

  public boolean accepts(org.jboss.vfs.VirtualFile);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #7                  // Method getPathName:(Lorg/jboss/vfs/VirtualFile;)Ljava/lang/String;
       5: astore_2
       6: aload_0
       7: getfield      #6                  // Field excludes:Ljava/util/Map;
      10: invokeinterface #8,  1            // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      15: invokeinterface #9,  1            // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          113
      30: aload_3
      31: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #12                 // class java/util/Map$Entry
      39: astore        4
      41: aload         4
      43: invokeinterface #13,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      48: checkcast     #14                 // class java/lang/String
      51: astore        5
      53: aload_2
      54: aload         5
      56: invokevirtual #15                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      59: ifeq          110
      62: aload_1
      63: invokevirtual #16                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
      66: astore        6
      68: aload         4
      70: invokeinterface #17,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      75: checkcast     #18                 // class java/util/Set
      78: astore        7
      80: aload         7
      82: ifnull        97
      85: aload         7
      87: aload         6
      89: invokeinterface #19,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      94: ifeq          110
      97: getstatic     #20                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
     100: ldc           #21                 // String Excluding %s
     102: aload_2
     103: invokeinterface #22,  3           // InterfaceMethod org/jboss/vfs/VFSLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
     108: iconst_0
     109: ireturn
     110: goto          21
     113: iconst_1
     114: ireturn

  protected java.lang.String getPathName(org.jboss.vfs.VirtualFile);
    Code:
       0: aload_1
       1: invokevirtual #23                 // Method org/jboss/vfs/VirtualFile.toURI:()Ljava/net/URI;
       4: invokevirtual #24                 // Method java/net/URI.toString:()Ljava/lang/String;
       7: areturn
       8: astore_2
       9: aload_1
      10: invokevirtual #26                 // Method org/jboss/vfs/VirtualFile.getPathName:()Ljava/lang/String;
      13: areturn
    Exception table:
       from    to  target type
           0     7     8   Class java/lang/Exception
}
