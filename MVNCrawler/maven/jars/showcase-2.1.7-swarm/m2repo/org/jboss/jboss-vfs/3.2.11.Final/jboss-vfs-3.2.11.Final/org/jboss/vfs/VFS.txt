Compiled from "VFS.java"
public class org.jboss.vfs.VFS {
  private static final java.util.concurrent.ConcurrentMap<org.jboss.vfs.VirtualFile, java.util.Map<java.lang.String, org.jboss.vfs.VFS$Mount>> mounts;

  private static final org.jboss.vfs.VirtualFile rootVirtualFile;

  private static final org.jboss.vfs.VFS$Mount rootMount;

  private static final java.util.Set EMPTY_REMOVABLE_SET;

  private static org.jboss.vfs.VirtualFile createDefaultRoot();
    Code:
       0: invokestatic  #2                  // Method isWindows:()Z
       3: ifeq          14
       6: ldc           #3                  // String /
       8: invokestatic  #4                  // Method getChild:(Ljava/lang/String;)Lorg/jboss/vfs/VirtualFile;
      11: goto          24
      14: new           #5                  // class org/jboss/vfs/VirtualFile
      17: dup
      18: ldc           #3                  // String /
      20: aconst_null
      21: invokespecial #6                  // Method org/jboss/vfs/VirtualFile."<init>":(Ljava/lang/String;Lorg/jboss/vfs/VirtualFile;)V
      24: areturn

  private org.jboss.vfs.VFS();
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: return

  private static void init();
    Code:
       0: ldc           #8                  // String java.protocol.handler.pkgs
       2: invokestatic  #9                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_0
       6: aload_0
       7: ifnull        20
      10: aload_0
      11: invokevirtual #10                 // Method java/lang/String.trim:()Ljava/lang/String;
      14: invokevirtual #11                 // Method java/lang/String.length:()I
      17: ifne          33
      20: ldc           #12                 // String org.jboss.net.protocol|org.jboss.vfs.protocol
      22: astore_0
      23: ldc           #8                  // String java.protocol.handler.pkgs
      25: aload_0
      26: invokestatic  #13                 // Method java/lang/System.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      29: pop
      30: goto          98
      33: aload_0
      34: ldc           #14                 // String org.jboss.vfs.protocol
      36: invokevirtual #15                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      39: ifne          98
      42: aload_0
      43: ldc           #16                 // String org.jboss.net.protocol
      45: invokevirtual #15                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      48: ifne          71
      51: new           #17                 // class java/lang/StringBuilder
      54: dup
      55: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      58: aload_0
      59: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: ldc           #20                 // String |org.jboss.net.protocol
      64: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      70: astore_0
      71: new           #17                 // class java/lang/StringBuilder
      74: dup
      75: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      78: aload_0
      79: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: ldc           #22                 // String |org.jboss.vfs.protocol
      84: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: astore_0
      91: ldc           #8                  // String java.protocol.handler.pkgs
      93: aload_0
      94: invokestatic  #13                 // Method java/lang/System.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      97: pop
      98: return

  public static java.io.Closeable mount(org.jboss.vfs.VirtualFile, org.jboss.vfs.spi.FileSystem) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method org/jboss/vfs/VirtualFile.getParent:()Lorg/jboss/vfs/VirtualFile;
       4: astore_2
       5: aload_2
       6: ifnonnull     18
       9: getstatic     #24                 // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
      12: invokeinterface #25,  1           // InterfaceMethod org/jboss/vfs/VFSMessages.rootFileSystemAlreadyMounted:()Ljava/io/IOException;
      17: athrow
      18: aload_0
      19: invokevirtual #26                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
      22: astore_3
      23: new           #27                 // class org/jboss/vfs/VFS$Mount
      26: dup
      27: aload_1
      28: aload_0
      29: invokespecial #28                 // Method org/jboss/vfs/VFS$Mount."<init>":(Lorg/jboss/vfs/spi/FileSystem;Lorg/jboss/vfs/VirtualFile;)V
      32: astore        4
      34: getstatic     #1                  // Field mounts:Ljava/util/concurrent/ConcurrentMap;
      37: astore        5
      39: aload         5
      41: aload_2
      42: invokeinterface #29,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      47: checkcast     #30                 // class java/util/Map
      50: astore        6
      52: aload         6
      54: ifnonnull     84
      57: aload         5
      59: aload_2
      60: aload_3
      61: aload         4
      63: invokestatic  #31                 // Method java/util/Collections.singletonMap:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;
      66: invokeinterface #32,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      71: checkcast     #30                 // class java/util/Map
      74: astore        6
      76: aload         6
      78: ifnonnull     84
      81: aload         4
      83: areturn
      84: new           #33                 // class java/util/HashMap
      87: dup
      88: aload         6
      90: invokespecial #34                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      93: astore        7
      95: aload         7
      97: aload_3
      98: aload         4
     100: invokeinterface #35,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     105: ifnull        118
     108: getstatic     #24                 // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
     111: aload_0
     112: invokeinterface #36,  2           // InterfaceMethod org/jboss/vfs/VFSMessages.fileSystemAlreadyMountedAtMountPoint:(Lorg/jboss/vfs/VirtualFile;)Ljava/io/IOException;
     117: athrow
     118: aload         5
     120: aload_2
     121: aload         6
     123: aload         7
     125: invokeinterface #37,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     130: ifeq          148
     133: getstatic     #38                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
     136: ldc           #39                 // String Mounted filesystem %s on mount point %s
     138: aload_1
     139: aload_0
     140: invokeinterface #40,  4           // InterfaceMethod org/jboss/vfs/VFSLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     145: aload         4
     147: areturn
     148: goto          39

  public static org.jboss.vfs.VirtualFile getChild(java.net.URL) throws java.net.URISyntaxException;
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method java/net/URL.toURI:()Ljava/net/URI;
       4: invokestatic  #42                 // Method getChild:(Ljava/net/URI;)Lorg/jboss/vfs/VirtualFile;
       7: areturn

  private static boolean isWindows();
    Code:
       0: getstatic     #43                 // Field java/io/File.separatorChar:C
       3: bipush        92
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public static org.jboss.vfs.VirtualFile getChild(java.net.URI);
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method java/net/URI.getPath:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ifnonnull     14
       9: aload_0
      10: invokevirtual #45                 // Method java/net/URI.getSchemeSpecificPart:()Ljava/lang/String;
      13: astore_1
      14: aload_1
      15: invokestatic  #4                  // Method getChild:(Ljava/lang/String;)Lorg/jboss/vfs/VirtualFile;
      18: areturn

  public static org.jboss.vfs.VirtualFile getChild(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #24                 // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #46                 // String path
       9: invokeinterface #47,  2           // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aconst_null
      16: astore_1
      17: invokestatic  #2                  // Method isWindows:()Z
      20: ifeq          223
      23: new           #48                 // class java/io/File
      26: dup
      27: aload_0
      28: invokespecial #49                 // Method java/io/File."<init>":(Ljava/lang/String;)V
      31: invokevirtual #50                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      34: astore_2
      35: aload_2
      36: invokevirtual #11                 // Method java/lang/String.length:()I
      39: iconst_2
      40: if_icmple     206
      43: aload_2
      44: iconst_1
      45: invokevirtual #51                 // Method java/lang/String.charAt:(I)C
      48: bipush        58
      50: if_icmpne     106
      53: new           #5                  // class org/jboss/vfs/VirtualFile
      56: dup
      57: new           #17                 // class java/lang/StringBuilder
      60: dup
      61: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      64: ldc           #3                  // String /
      66: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: aload_2
      70: iconst_0
      71: invokevirtual #51                 // Method java/lang/String.charAt:(I)C
      74: invokevirtual #52                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      77: ldc           #53                 // String :/
      79: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      85: aconst_null
      86: invokespecial #6                  // Method org/jboss/vfs/VirtualFile."<init>":(Ljava/lang/String;Lorg/jboss/vfs/VirtualFile;)V
      89: astore_1
      90: aload_2
      91: iconst_2
      92: invokevirtual #54                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      95: bipush        92
      97: bipush        47
      99: invokevirtual #55                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
     102: astore_0
     103: goto          206
     106: aload_2
     107: iconst_0
     108: invokevirtual #51                 // Method java/lang/String.charAt:(I)C
     111: bipush        92
     113: if_icmpne     206
     116: aload_2
     117: iconst_1
     118: invokevirtual #51                 // Method java/lang/String.charAt:(I)C
     121: bipush        92
     123: if_icmpne     206
     126: iconst_2
     127: istore_3
     128: iload_3
     129: aload_2
     130: invokevirtual #11                 // Method java/lang/String.length:()I
     133: if_icmpge     206
     136: aload_2
     137: iload_3
     138: invokevirtual #51                 // Method java/lang/String.charAt:(I)C
     141: bipush        92
     143: if_icmpne     200
     146: new           #5                  // class org/jboss/vfs/VirtualFile
     149: dup
     150: new           #17                 // class java/lang/StringBuilder
     153: dup
     154: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
     157: ldc           #56                 // String //
     159: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     162: aload_2
     163: iconst_0
     164: iload_3
     165: invokevirtual #57                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     168: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     171: ldc           #3                  // String /
     173: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     176: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     179: aconst_null
     180: invokespecial #6                  // Method org/jboss/vfs/VirtualFile."<init>":(Ljava/lang/String;Lorg/jboss/vfs/VirtualFile;)V
     183: astore_1
     184: aload_2
     185: iload_3
     186: invokevirtual #54                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     189: bipush        92
     191: bipush        47
     193: invokevirtual #55                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
     196: astore_0
     197: goto          206
     200: iinc          3, 1
     203: goto          128
     206: aload_1
     207: ifnonnull     220
     210: getstatic     #24                 // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
     213: aload_0
     214: invokeinterface #58,  2           // InterfaceMethod org/jboss/vfs/VFSMessages.invalidWin32Path:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
     219: athrow
     220: goto          227
     223: getstatic     #59                 // Field rootVirtualFile:Lorg/jboss/vfs/VirtualFile;
     226: astore_1
     227: aload_1
     228: aload_0
     229: invokevirtual #60                 // Method org/jboss/vfs/VirtualFile.getChild:(Ljava/lang/String;)Lorg/jboss/vfs/VirtualFile;
     232: areturn

  public static org.jboss.vfs.VirtualFile getRootVirtualFile();
    Code:
       0: getstatic     #59                 // Field rootVirtualFile:Lorg/jboss/vfs/VirtualFile;
       3: areturn

  public static java.util.List<org.jboss.vfs.VirtualFile> getChildren() throws java.io.IOException;
    Code:
       0: invokestatic  #61                 // Method getRootVirtualFile:()Lorg/jboss/vfs/VirtualFile;
       3: aconst_null
       4: invokevirtual #62                 // Method org/jboss/vfs/VirtualFile.getChildren:(Lorg/jboss/vfs/VirtualFileFilter;)Ljava/util/List;
       7: areturn

  public static java.util.List<org.jboss.vfs.VirtualFile> getChildren(org.jboss.vfs.VirtualFileFilter) throws java.io.IOException;
    Code:
       0: invokestatic  #61                 // Method getRootVirtualFile:()Lorg/jboss/vfs/VirtualFile;
       3: aload_0
       4: invokevirtual #62                 // Method org/jboss/vfs/VirtualFile.getChildren:(Lorg/jboss/vfs/VirtualFileFilter;)Ljava/util/List;
       7: areturn

  public static java.util.List<org.jboss.vfs.VirtualFile> getChildrenRecursively() throws java.io.IOException;
    Code:
       0: invokestatic  #61                 // Method getRootVirtualFile:()Lorg/jboss/vfs/VirtualFile;
       3: aconst_null
       4: invokevirtual #63                 // Method org/jboss/vfs/VirtualFile.getChildrenRecursively:(Lorg/jboss/vfs/VirtualFileFilter;)Ljava/util/List;
       7: areturn

  public static java.util.List<org.jboss.vfs.VirtualFile> getChildrenRecursively(org.jboss.vfs.VirtualFileFilter) throws java.io.IOException;
    Code:
       0: invokestatic  #61                 // Method getRootVirtualFile:()Lorg/jboss/vfs/VirtualFile;
       3: aload_0
       4: invokevirtual #63                 // Method org/jboss/vfs/VirtualFile.getChildrenRecursively:(Lorg/jboss/vfs/VirtualFileFilter;)Ljava/util/List;
       7: areturn

  public static void visit(org.jboss.vfs.VirtualFileVisitor) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #61                 // Method getRootVirtualFile:()Lorg/jboss/vfs/VirtualFile;
       4: invokeinterface #64,  2           // InterfaceMethod org/jboss/vfs/VirtualFileVisitor.visit:(Lorg/jboss/vfs/VirtualFile;)V
       9: return

  protected static void visit(org.jboss.vfs.VirtualFile, org.jboss.vfs.VirtualFileVisitor) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #24                 // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #65                 // String file
       9: invokeinterface #47,  2           // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_1
      16: aload_0
      17: invokeinterface #64,  2           // InterfaceMethod org/jboss/vfs/VirtualFileVisitor.visit:(Lorg/jboss/vfs/VirtualFile;)V
      22: return

  static org.jboss.vfs.VFS$Mount getMount(org.jboss.vfs.VirtualFile);
    Code:
       0: getstatic     #1                  // Field mounts:Ljava/util/concurrent/ConcurrentMap;
       3: astore_1
       4: aload_0
       5: invokevirtual #23                 // Method org/jboss/vfs/VirtualFile.getParent:()Lorg/jboss/vfs/VirtualFile;
       8: astore_2
       9: aload_2
      10: ifnonnull     17
      13: getstatic     #66                 // Field rootMount:Lorg/jboss/vfs/VFS$Mount;
      16: areturn
      17: aload_1
      18: aload_2
      19: invokeinterface #29,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #30                 // class java/util/Map
      27: astore_3
      28: aload_3
      29: ifnonnull     37
      32: aload_2
      33: astore_0
      34: goto          65
      37: aload_3
      38: aload_0
      39: invokevirtual #26                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
      42: invokeinterface #67,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      47: checkcast     #27                 // class org/jboss/vfs/VFS$Mount
      50: astore        4
      52: aload         4
      54: ifnonnull     62
      57: aload_2
      58: astore_0
      59: goto          65
      62: aload         4
      64: areturn
      65: goto          4

  static java.util.Set<java.lang.String> getSubmounts(org.jboss.vfs.VirtualFile);
    Code:
       0: getstatic     #1                  // Field mounts:Ljava/util/concurrent/ConcurrentMap;
       3: astore_1
       4: aload_1
       5: aload_0
       6: invokeinterface #29,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #30                 // class java/util/Map
      14: astore_2
      15: aload_2
      16: ifnonnull     23
      19: invokestatic  #68                 // Method emptyRemovableSet:()Ljava/util/Set;
      22: areturn
      23: new           #69                 // class java/util/HashSet
      26: dup
      27: aload_2
      28: invokeinterface #70,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      33: invokespecial #71                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      36: areturn

  private static org.jboss.vfs.spi.MountHandle doMount(org.jboss.vfs.spi.FileSystem, org.jboss.vfs.VirtualFile, java.io.Closeable...) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: aload_1
       3: aload_0
       4: invokestatic  #72                 // Method mount:(Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/spi/FileSystem;)Ljava/io/Closeable;
       7: astore        4
       9: iconst_1
      10: istore_3
      11: new           #73                 // class org/jboss/vfs/BasicMountHandle
      14: dup
      15: aload_0
      16: aload         4
      18: aload_2
      19: invokespecial #74                 // Method org/jboss/vfs/BasicMountHandle."<init>":(Lorg/jboss/vfs/spi/FileSystem;Ljava/io/Closeable;[Ljava/io/Closeable;)V
      22: astore        5
      24: iload_3
      25: ifne          32
      28: aload_0
      29: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      32: aload         5
      34: areturn
      35: astore        6
      37: iload_3
      38: ifne          45
      41: aload_0
      42: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      45: aload         6
      47: athrow
    Exception table:
       from    to  target type
           2    24    35   any
          35    37    35   any

  public static java.io.Closeable mountZip(java.io.File, org.jboss.vfs.VirtualFile, org.jboss.vfs.TempFileProvider) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: aload_2
       3: aload_0
       4: invokevirtual #76                 // Method java/io/File.getName:()Ljava/lang/String;
       7: invokevirtual #77                 // Method org/jboss/vfs/TempFileProvider.createTempDir:(Ljava/lang/String;)Lorg/jboss/vfs/TempDir;
      10: astore        4
      12: new           #78                 // class org/jboss/vfs/spi/JavaZipFileSystem
      15: dup
      16: aload_0
      17: aload         4
      19: invokespecial #79                 // Method org/jboss/vfs/spi/JavaZipFileSystem."<init>":(Ljava/io/File;Lorg/jboss/vfs/TempDir;)V
      22: aload_1
      23: iconst_0
      24: anewarray     #80                 // class java/io/Closeable
      27: invokestatic  #81                 // Method doMount:(Lorg/jboss/vfs/spi/FileSystem;Lorg/jboss/vfs/VirtualFile;[Ljava/io/Closeable;)Lorg/jboss/vfs/spi/MountHandle;
      30: astore        5
      32: iconst_1
      33: istore_3
      34: aload         5
      36: astore        6
      38: iload_3
      39: ifne          47
      42: aload         4
      44: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      47: aload         6
      49: areturn
      50: astore        7
      52: iload_3
      53: ifne          61
      56: aload         4
      58: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      61: aload         7
      63: athrow
    Exception table:
       from    to  target type
          12    38    50   any
          50    52    50   any

  public static java.io.Closeable mountZip(java.io.InputStream, java.lang.String, org.jboss.vfs.VirtualFile, org.jboss.vfs.TempFileProvider) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        4
       3: aload_3
       4: aload_1
       5: invokevirtual #77                 // Method org/jboss/vfs/TempFileProvider.createTempDir:(Ljava/lang/String;)Lorg/jboss/vfs/TempDir;
       8: astore        5
      10: new           #78                 // class org/jboss/vfs/spi/JavaZipFileSystem
      13: dup
      14: aload_1
      15: aload_0
      16: aload         5
      18: invokespecial #82                 // Method org/jboss/vfs/spi/JavaZipFileSystem."<init>":(Ljava/lang/String;Ljava/io/InputStream;Lorg/jboss/vfs/TempDir;)V
      21: aload_2
      22: iconst_0
      23: anewarray     #80                 // class java/io/Closeable
      26: invokestatic  #81                 // Method doMount:(Lorg/jboss/vfs/spi/FileSystem;Lorg/jboss/vfs/VirtualFile;[Ljava/io/Closeable;)Lorg/jboss/vfs/spi/MountHandle;
      29: astore        6
      31: iconst_1
      32: istore        4
      34: aload         6
      36: astore        7
      38: iload         4
      40: ifne          48
      43: aload         5
      45: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      48: aload_0
      49: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      52: aload         7
      54: areturn
      55: astore        8
      57: iload         4
      59: ifne          67
      62: aload         5
      64: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      67: aload         8
      69: athrow
      70: astore        9
      72: aload_0
      73: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      76: aload         9
      78: athrow
    Exception table:
       from    to  target type
          10    38    55   any
          55    57    55   any
           3    48    70   any
          55    72    70   any

  public static java.io.Closeable mountZip(org.jboss.vfs.VirtualFile, org.jboss.vfs.VirtualFile, org.jboss.vfs.TempFileProvider) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #83                 // Method org/jboss/vfs/VirtualFile.openStream:()Ljava/io/InputStream;
       4: aload_0
       5: invokevirtual #26                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
       8: aload_1
       9: aload_2
      10: invokestatic  #84                 // Method mountZip:(Ljava/io/InputStream;Ljava/lang/String;Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/TempFileProvider;)Ljava/io/Closeable;
      13: areturn

  public static java.io.Closeable mountReal(java.io.File, org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: new           #85                 // class org/jboss/vfs/spi/RealFileSystem
       3: dup
       4: aload_0
       5: invokespecial #86                 // Method org/jboss/vfs/spi/RealFileSystem."<init>":(Ljava/io/File;)V
       8: aload_1
       9: iconst_0
      10: anewarray     #80                 // class java/io/Closeable
      13: invokestatic  #81                 // Method doMount:(Lorg/jboss/vfs/spi/FileSystem;Lorg/jboss/vfs/VirtualFile;[Ljava/io/Closeable;)Lorg/jboss/vfs/spi/MountHandle;
      16: areturn

  public static java.io.Closeable mountTemp(org.jboss.vfs.VirtualFile, org.jboss.vfs.TempFileProvider) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: ldc           #87                 // String tmpfs
       5: invokevirtual #77                 // Method org/jboss/vfs/TempFileProvider.createTempDir:(Ljava/lang/String;)Lorg/jboss/vfs/TempDir;
       8: astore_3
       9: new           #85                 // class org/jboss/vfs/spi/RealFileSystem
      12: dup
      13: aload_3
      14: invokevirtual #88                 // Method org/jboss/vfs/TempDir.getRoot:()Ljava/io/File;
      17: invokespecial #86                 // Method org/jboss/vfs/spi/RealFileSystem."<init>":(Ljava/io/File;)V
      20: aload_0
      21: iconst_1
      22: anewarray     #80                 // class java/io/Closeable
      25: dup
      26: iconst_0
      27: aload_3
      28: aastore
      29: invokestatic  #81                 // Method doMount:(Lorg/jboss/vfs/spi/FileSystem;Lorg/jboss/vfs/VirtualFile;[Ljava/io/Closeable;)Lorg/jboss/vfs/spi/MountHandle;
      32: astore        4
      34: iconst_1
      35: istore_2
      36: aload         4
      38: astore        5
      40: iload_2
      41: ifne          48
      44: aload_3
      45: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      48: aload         5
      50: areturn
      51: astore        6
      53: iload_2
      54: ifne          61
      57: aload_3
      58: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      61: aload         6
      63: athrow
    Exception table:
       from    to  target type
           9    40    51   any
          51    53    51   any

  public static java.io.Closeable mountZipExpanded(java.io.File, org.jboss.vfs.VirtualFile, org.jboss.vfs.TempFileProvider) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: aload_2
       3: aload_0
       4: invokevirtual #76                 // Method java/io/File.getName:()Ljava/lang/String;
       7: invokevirtual #77                 // Method org/jboss/vfs/TempFileProvider.createTempDir:(Ljava/lang/String;)Lorg/jboss/vfs/TempDir;
      10: astore        4
      12: aload         4
      14: invokevirtual #88                 // Method org/jboss/vfs/TempDir.getRoot:()Ljava/io/File;
      17: astore        5
      19: aload_0
      20: aload         5
      22: invokestatic  #89                 // Method org/jboss/vfs/VFSUtils.unzip:(Ljava/io/File;Ljava/io/File;)V
      25: new           #85                 // class org/jboss/vfs/spi/RealFileSystem
      28: dup
      29: aload         5
      31: invokespecial #86                 // Method org/jboss/vfs/spi/RealFileSystem."<init>":(Ljava/io/File;)V
      34: aload_1
      35: iconst_1
      36: anewarray     #80                 // class java/io/Closeable
      39: dup
      40: iconst_0
      41: aload         4
      43: aastore
      44: invokestatic  #81                 // Method doMount:(Lorg/jboss/vfs/spi/FileSystem;Lorg/jboss/vfs/VirtualFile;[Ljava/io/Closeable;)Lorg/jboss/vfs/spi/MountHandle;
      47: astore        6
      49: iconst_1
      50: istore_3
      51: aload         6
      53: astore        7
      55: iload_3
      56: ifne          64
      59: aload         4
      61: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      64: aload         7
      66: areturn
      67: astore        8
      69: iload_3
      70: ifne          78
      73: aload         4
      75: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      78: aload         8
      80: athrow
    Exception table:
       from    to  target type
          12    55    67   any
          67    69    67   any

  public static java.io.Closeable mountZipExpanded(java.io.InputStream, java.lang.String, org.jboss.vfs.VirtualFile, org.jboss.vfs.TempFileProvider) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        4
       3: aload_3
       4: aload_1
       5: invokevirtual #77                 // Method org/jboss/vfs/TempFileProvider.createTempDir:(Ljava/lang/String;)Lorg/jboss/vfs/TempDir;
       8: astore        5
      10: new           #17                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      17: aload_1
      18: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: ldc           #90                 // String -
      23: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: ldc           #91                 // String .tmp
      31: aload         5
      33: invokevirtual #88                 // Method org/jboss/vfs/TempDir.getRoot:()Ljava/io/File;
      36: invokestatic  #92                 // Method java/io/File.createTempFile:(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
      39: astore        6
      41: new           #93                 // class java/io/FileOutputStream
      44: dup
      45: aload         6
      47: invokespecial #94                 // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      50: astore        7
      52: aload_0
      53: aload         7
      55: invokestatic  #95                 // Method org/jboss/vfs/VFSUtils.copyStream:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
      58: aload_0
      59: invokevirtual #96                 // Method java/io/InputStream.close:()V
      62: aload         7
      64: invokevirtual #97                 // Method java/io/FileOutputStream.close:()V
      67: aload_0
      68: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      71: aload         7
      73: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      76: goto          93
      79: astore        8
      81: aload_0
      82: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      85: aload         7
      87: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
      90: aload         8
      92: athrow
      93: aload         5
      95: invokevirtual #88                 // Method org/jboss/vfs/TempDir.getRoot:()Ljava/io/File;
      98: astore        8
     100: aload         6
     102: aload         8
     104: invokestatic  #89                 // Method org/jboss/vfs/VFSUtils.unzip:(Ljava/io/File;Ljava/io/File;)V
     107: new           #85                 // class org/jboss/vfs/spi/RealFileSystem
     110: dup
     111: aload         8
     113: invokespecial #86                 // Method org/jboss/vfs/spi/RealFileSystem."<init>":(Ljava/io/File;)V
     116: aload_2
     117: iconst_1
     118: anewarray     #80                 // class java/io/Closeable
     121: dup
     122: iconst_0
     123: aload         5
     125: aastore
     126: invokestatic  #81                 // Method doMount:(Lorg/jboss/vfs/spi/FileSystem;Lorg/jboss/vfs/VirtualFile;[Ljava/io/Closeable;)Lorg/jboss/vfs/spi/MountHandle;
     129: astore        9
     131: iconst_1
     132: istore        4
     134: aload         9
     136: astore        10
     138: aload         6
     140: invokevirtual #98                 // Method java/io/File.delete:()Z
     143: pop
     144: iload         4
     146: ifne          154
     149: aload         5
     151: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
     154: aload_0
     155: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
     158: aload         10
     160: areturn
     161: astore        11
     163: aload         6
     165: invokevirtual #98                 // Method java/io/File.delete:()Z
     168: pop
     169: aload         11
     171: athrow
     172: astore        12
     174: iload         4
     176: ifne          184
     179: aload         5
     181: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
     184: aload         12
     186: athrow
     187: astore        13
     189: aload_0
     190: invokestatic  #75                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/io/Closeable;)V
     193: aload         13
     195: athrow
    Exception table:
       from    to  target type
          52    67    79   any
          79    81    79   any
          41   138   161   any
         161   163   161   any
          10   144   172   any
         161   174   172   any
           0   154   187   any
         161   189   187   any

  public static java.io.Closeable mountZipExpanded(org.jboss.vfs.VirtualFile, org.jboss.vfs.VirtualFile, org.jboss.vfs.TempFileProvider) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #83                 // Method org/jboss/vfs/VirtualFile.openStream:()Ljava/io/InputStream;
       4: aload_0
       5: invokevirtual #26                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
       8: aload_1
       9: aload_2
      10: invokestatic  #99                 // Method mountZipExpanded:(Ljava/io/InputStream;Ljava/lang/String;Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/TempFileProvider;)Ljava/io/Closeable;
      13: areturn

  public static java.io.Closeable mountAssembly(org.jboss.vfs.VirtualFileAssembly, org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: new           #100                // class org/jboss/vfs/spi/AssemblyFileSystem
       3: dup
       4: aload_0
       5: invokespecial #101                // Method org/jboss/vfs/spi/AssemblyFileSystem."<init>":(Lorg/jboss/vfs/VirtualFileAssembly;)V
       8: aload_1
       9: iconst_0
      10: anewarray     #80                 // class java/io/Closeable
      13: invokestatic  #81                 // Method doMount:(Lorg/jboss/vfs/spi/FileSystem;Lorg/jboss/vfs/VirtualFile;[Ljava/io/Closeable;)Lorg/jboss/vfs/spi/MountHandle;
      16: areturn

  private static <E> java.util.Set<E> emptyRemovableSet();
    Code:
       0: getstatic     #102                // Field EMPTY_REMOVABLE_SET:Ljava/util/Set;
       3: areturn

  static java.util.concurrent.ConcurrentMap access$100();
    Code:
       0: getstatic     #1                  // Field mounts:Ljava/util/concurrent/ConcurrentMap;
       3: areturn

  static {};
    Code:
       0: new           #103                // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #104                // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #1                  // Field mounts:Ljava/util/concurrent/ConcurrentMap;
      10: invokestatic  #105                // Method createDefaultRoot:()Lorg/jboss/vfs/VirtualFile;
      13: putstatic     #59                 // Field rootVirtualFile:Lorg/jboss/vfs/VirtualFile;
      16: new           #27                 // class org/jboss/vfs/VFS$Mount
      19: dup
      20: getstatic     #106                // Field org/jboss/vfs/spi/RootFileSystem.ROOT_INSTANCE:Lorg/jboss/vfs/spi/RootFileSystem;
      23: getstatic     #59                 // Field rootVirtualFile:Lorg/jboss/vfs/VirtualFile;
      26: invokespecial #28                 // Method org/jboss/vfs/VFS$Mount."<init>":(Lorg/jboss/vfs/spi/FileSystem;Lorg/jboss/vfs/VirtualFile;)V
      29: putstatic     #66                 // Field rootMount:Lorg/jboss/vfs/VFS$Mount;
      32: invokestatic  #107                // Method init:()V
      35: new           #108                // class org/jboss/vfs/VFS$EmptyRemovableSet
      38: dup
      39: aconst_null
      40: invokespecial #109                // Method org/jboss/vfs/VFS$EmptyRemovableSet."<init>":(Lorg/jboss/vfs/VFS$1;)V
      43: putstatic     #102                // Field EMPTY_REMOVABLE_SET:Ljava/util/Set;
      46: return
}
