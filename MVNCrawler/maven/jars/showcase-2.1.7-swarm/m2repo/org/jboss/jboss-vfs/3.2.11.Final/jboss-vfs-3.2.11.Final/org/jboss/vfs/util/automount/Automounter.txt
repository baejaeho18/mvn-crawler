Compiled from "Automounter.java"
public class org.jboss.vfs.util.automount.Automounter {
  private static final org.jboss.vfs.util.automount.Automounter$RegistryEntry rootEntry;

  private static final java.util.concurrent.ConcurrentMap<org.jboss.vfs.util.automount.MountOwner, java.util.Set<org.jboss.vfs.util.automount.Automounter$RegistryEntry>> ownerReferences;

  private static org.jboss.vfs.TempFileProvider tempFileProvider;

  private org.jboss.vfs.util.automount.Automounter();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public static void mount(org.jboss.vfs.VirtualFile, org.jboss.vfs.util.automount.MountOption...) throws java.io.IOException;
    Code:
       0: new           #3                  // class org/jboss/vfs/util/automount/VirtualFileOwner
       3: dup
       4: aload_0
       5: invokespecial #4                  // Method org/jboss/vfs/util/automount/VirtualFileOwner."<init>":(Lorg/jboss/vfs/VirtualFile;)V
       8: aload_0
       9: aload_1
      10: invokestatic  #5                  // Method mount:(Lorg/jboss/vfs/util/automount/MountOwner;Lorg/jboss/vfs/VirtualFile;[Lorg/jboss/vfs/util/automount/MountOption;)V
      13: return

  public static void mount(java.lang.Object, org.jboss.vfs.VirtualFile, org.jboss.vfs.util.automount.MountOption...) throws java.io.IOException;
    Code:
       0: new           #6                  // class org/jboss/vfs/util/automount/SimpleMountOwner
       3: dup
       4: aload_0
       5: invokespecial #7                  // Method org/jboss/vfs/util/automount/SimpleMountOwner."<init>":(Ljava/lang/Object;)V
       8: aload_1
       9: aload_2
      10: invokestatic  #5                  // Method mount:(Lorg/jboss/vfs/util/automount/MountOwner;Lorg/jboss/vfs/VirtualFile;[Lorg/jboss/vfs/util/automount/MountOption;)V
      13: return

  public static void mount(org.jboss.vfs.VirtualFile, org.jboss.vfs.VirtualFile, org.jboss.vfs.util.automount.MountOption...) throws java.io.IOException;
    Code:
       0: new           #3                  // class org/jboss/vfs/util/automount/VirtualFileOwner
       3: dup
       4: aload_0
       5: invokespecial #4                  // Method org/jboss/vfs/util/automount/VirtualFileOwner."<init>":(Lorg/jboss/vfs/VirtualFile;)V
       8: aload_1
       9: aload_2
      10: invokestatic  #5                  // Method mount:(Lorg/jboss/vfs/util/automount/MountOwner;Lorg/jboss/vfs/VirtualFile;[Lorg/jboss/vfs/util/automount/MountOption;)V
      13: return

  public static void mount(org.jboss.vfs.util.automount.MountOwner, org.jboss.vfs.VirtualFile, org.jboss.vfs.util.automount.MountOption...) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #8                  // Method getEntry:(Lorg/jboss/vfs/VirtualFile;)Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
       4: astore_3
       5: aload_3
       6: aload_1
       7: aload_2
       8: invokestatic  #9                  // Method getMountConfig:([Lorg/jboss/vfs/util/automount/MountOption;)Lorg/jboss/vfs/util/automount/MountConfig;
      11: invokestatic  #10                 // Method org/jboss/vfs/util/automount/Automounter$RegistryEntry.access$000:(Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/util/automount/MountConfig;)V
      14: aload_3
      15: invokestatic  #11                 // Method org/jboss/vfs/util/automount/Automounter$RegistryEntry.access$100:(Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;)Ljava/util/Set;
      18: aload_0
      19: invokeinterface #12,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      24: pop
      25: getstatic     #13                 // Field ownerReferences:Ljava/util/concurrent/ConcurrentMap;
      28: aload_0
      29: new           #14                 // class java/util/HashSet
      32: dup
      33: invokespecial #15                 // Method java/util/HashSet."<init>":()V
      36: invokeinterface #16,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      41: pop
      42: getstatic     #13                 // Field ownerReferences:Ljava/util/concurrent/ConcurrentMap;
      45: aload_0
      46: invokeinterface #17,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      51: checkcast     #18                 // class java/util/Set
      54: aload_3
      55: invokeinterface #12,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      60: pop
      61: return

  private static org.jboss.vfs.util.automount.MountConfig getMountConfig(org.jboss.vfs.util.automount.MountOption[]);
    Code:
       0: new           #19                 // class org/jboss/vfs/util/automount/MountConfig
       3: dup
       4: invokespecial #20                 // Method org/jboss/vfs/util/automount/MountConfig."<init>":()V
       7: astore_1
       8: aload_0
       9: astore_2
      10: aload_2
      11: arraylength
      12: istore_3
      13: iconst_0
      14: istore        4
      16: iload         4
      18: iload_3
      19: if_icmpge     40
      22: aload_2
      23: iload         4
      25: aaload
      26: astore        5
      28: aload         5
      30: aload_1
      31: invokevirtual #21                 // Method org/jboss/vfs/util/automount/MountOption.applyTo:(Lorg/jboss/vfs/util/automount/MountConfig;)V
      34: iinc          4, 1
      37: goto          16
      40: aload_1
      41: areturn

  public static boolean addHandle(org.jboss.vfs.VirtualFile, java.io.Closeable);
    Code:
       0: aload_0
       1: invokestatic  #8                  // Method getEntry:(Lorg/jboss/vfs/VirtualFile;)Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
       4: astore_2
       5: aload_2
       6: invokestatic  #22                 // Method org/jboss/vfs/util/automount/Automounter$RegistryEntry.access$200:(Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;)Ljava/util/List;
       9: aload_1
      10: invokeinterface #23,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      15: ireturn

  public static boolean removeHandle(org.jboss.vfs.VirtualFile, java.io.Closeable);
    Code:
       0: aload_0
       1: invokestatic  #8                  // Method getEntry:(Lorg/jboss/vfs/VirtualFile;)Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
       4: astore_2
       5: aload_2
       6: invokestatic  #22                 // Method org/jboss/vfs/util/automount/Automounter$RegistryEntry.access$200:(Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;)Ljava/util/List;
       9: aload_1
      10: invokeinterface #24,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      15: ireturn

  public static void cleanup(java.lang.Object);
    Code:
       0: new           #6                  // class org/jboss/vfs/util/automount/SimpleMountOwner
       3: dup
       4: aload_0
       5: invokespecial #7                  // Method org/jboss/vfs/util/automount/SimpleMountOwner."<init>":(Ljava/lang/Object;)V
       8: invokestatic  #25                 // Method cleanup:(Lorg/jboss/vfs/util/automount/MountOwner;)V
      11: return

  public static void cleanup(org.jboss.vfs.VirtualFile);
    Code:
       0: new           #3                  // class org/jboss/vfs/util/automount/VirtualFileOwner
       3: dup
       4: aload_0
       5: invokespecial #4                  // Method org/jboss/vfs/util/automount/VirtualFileOwner."<init>":(Lorg/jboss/vfs/VirtualFile;)V
       8: invokestatic  #25                 // Method cleanup:(Lorg/jboss/vfs/util/automount/MountOwner;)V
      11: return

  public static void cleanup(org.jboss.vfs.util.automount.MountOwner);
    Code:
       0: getstatic     #13                 // Field ownerReferences:Ljava/util/concurrent/ConcurrentMap;
       3: aload_0
       4: invokeinterface #26,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #18                 // class java/util/Set
      12: astore_1
      13: aload_1
      14: ifnull        51
      17: aload_1
      18: invokeinterface #27,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      23: astore_2
      24: aload_2
      25: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          51
      33: aload_2
      34: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #30                 // class org/jboss/vfs/util/automount/Automounter$RegistryEntry
      42: astore_3
      43: aload_3
      44: aload_0
      45: invokestatic  #31                 // Method org/jboss/vfs/util/automount/Automounter$RegistryEntry.access$300:(Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;Lorg/jboss/vfs/util/automount/MountOwner;)V
      48: goto          24
      51: aload_0
      52: invokeinterface #32,  1           // InterfaceMethod org/jboss/vfs/util/automount/MountOwner.onCleanup:()V
      57: return

  public static boolean isMounted(org.jboss.vfs.VirtualFile);
    Code:
       0: aload_0
       1: invokestatic  #8                  // Method getEntry:(Lorg/jboss/vfs/VirtualFile;)Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
       4: invokestatic  #33                 // Method org/jboss/vfs/util/automount/Automounter$RegistryEntry.access$400:(Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;)Z
       7: ireturn

  static org.jboss.vfs.util.automount.Automounter$RegistryEntry getEntry(org.jboss.vfs.VirtualFile);
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #34                 // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #35                 // String VirutalFile
       9: invokeinterface #36,  2           // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: getstatic     #37                 // Field rootEntry:Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
      18: aload_0
      19: invokestatic  #38                 // Method org/jboss/vfs/util/automount/Automounter$RegistryEntry.access$500:(Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;Lorg/jboss/vfs/VirtualFile;)Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
      22: areturn

  private static org.jboss.vfs.TempFileProvider getTempFileProvider() throws java.io.IOException;
    Code:
       0: getstatic     #39                 // Field tempFileProvider:Lorg/jboss/vfs/TempFileProvider;
       3: ifnonnull     18
       6: ldc           #40                 // String automount
       8: iconst_2
       9: invokestatic  #41                 // Method java/util/concurrent/Executors.newScheduledThreadPool:(I)Ljava/util/concurrent/ScheduledExecutorService;
      12: invokestatic  #42                 // Method org/jboss/vfs/TempFileProvider.create:(Ljava/lang/String;Ljava/util/concurrent/ScheduledExecutorService;)Lorg/jboss/vfs/TempFileProvider;
      15: putstatic     #39                 // Field tempFileProvider:Lorg/jboss/vfs/TempFileProvider;
      18: getstatic     #39                 // Field tempFileProvider:Lorg/jboss/vfs/TempFileProvider;
      21: areturn

  static org.jboss.vfs.TempFileProvider access$600() throws java.io.IOException;
    Code:
       0: invokestatic  #1                  // Method getTempFileProvider:()Lorg/jboss/vfs/TempFileProvider;
       3: areturn

  static {};
    Code:
       0: new           #30                 // class org/jboss/vfs/util/automount/Automounter$RegistryEntry
       3: dup
       4: invokespecial #43                 // Method org/jboss/vfs/util/automount/Automounter$RegistryEntry."<init>":()V
       7: putstatic     #37                 // Field rootEntry:Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
      10: new           #44                 // class java/util/concurrent/ConcurrentHashMap
      13: dup
      14: invokespecial #45                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      17: putstatic     #13                 // Field ownerReferences:Ljava/util/concurrent/ConcurrentMap;
      20: return
}
