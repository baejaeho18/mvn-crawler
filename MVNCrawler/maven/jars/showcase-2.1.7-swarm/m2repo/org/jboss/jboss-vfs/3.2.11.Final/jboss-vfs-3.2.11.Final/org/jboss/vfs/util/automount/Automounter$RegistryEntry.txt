Compiled from "Automounter.java"
class org.jboss.vfs.util.automount.Automounter$RegistryEntry {
  private final java.util.concurrent.ConcurrentMap<java.lang.String, org.jboss.vfs.util.automount.Automounter$RegistryEntry> children;

  private final java.util.Set<org.jboss.vfs.util.automount.MountOwner> inboundReferences;

  private final java.util.List<java.io.Closeable> handles;

  private final java.util.concurrent.atomic.AtomicBoolean mounted;

  org.jboss.vfs.util.automount.Automounter$RegistryEntry();
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #8                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #10                 // Field children:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: new           #11                 // class java/util/HashSet
      19: dup
      20: invokespecial #12                 // Method java/util/HashSet."<init>":()V
      23: putfield      #5                  // Field inboundReferences:Ljava/util/Set;
      26: aload_0
      27: new           #13                 // class java/util/LinkedList
      30: dup
      31: invokespecial #14                 // Method java/util/LinkedList."<init>":()V
      34: putfield      #4                  // Field handles:Ljava/util/List;
      37: aload_0
      38: new           #15                 // class java/util/concurrent/atomic/AtomicBoolean
      41: dup
      42: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      45: putfield      #17                 // Field mounted:Ljava/util/concurrent/atomic/AtomicBoolean;
      48: return

  private void mount(org.jboss.vfs.VirtualFile, org.jboss.vfs.util.automount.MountConfig) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #17                 // Field mounted:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          135
      12: aload_1
      13: invokevirtual #19                 // Method org/jboss/vfs/VirtualFile.isFile:()Z
      16: ifeq          135
      19: getstatic     #20                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
      22: ldc           #21                 // String Automounting: %s with options %s
      24: aload_1
      25: aload_2
      26: invokeinterface #22,  4           // InterfaceMethod org/jboss/vfs/VFSLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      31: invokestatic  #23                 // Method org/jboss/vfs/util/automount/Automounter.access$600:()Lorg/jboss/vfs/TempFileProvider;
      34: astore_3
      35: aload_2
      36: invokevirtual #24                 // Method org/jboss/vfs/util/automount/MountConfig.mountExpanded:()Z
      39: ifeq          90
      42: aload_2
      43: invokevirtual #25                 // Method org/jboss/vfs/util/automount/MountConfig.copyTarget:()Z
      46: ifeq          68
      49: aload_0
      50: getfield      #4                  // Field handles:Ljava/util/List;
      53: aload_1
      54: aload_1
      55: aload_3
      56: invokestatic  #26                 // Method org/jboss/vfs/VFS.mountZipExpanded:(Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/TempFileProvider;)Ljava/io/Closeable;
      59: invokeinterface #27,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      64: pop
      65: goto          135
      68: aload_0
      69: getfield      #4                  // Field handles:Ljava/util/List;
      72: aload_1
      73: invokevirtual #28                 // Method org/jboss/vfs/VirtualFile.getPhysicalFile:()Ljava/io/File;
      76: aload_1
      77: aload_3
      78: invokestatic  #29                 // Method org/jboss/vfs/VFS.mountZipExpanded:(Ljava/io/File;Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/TempFileProvider;)Ljava/io/Closeable;
      81: invokeinterface #27,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      86: pop
      87: goto          135
      90: aload_2
      91: invokevirtual #25                 // Method org/jboss/vfs/util/automount/MountConfig.copyTarget:()Z
      94: ifeq          116
      97: aload_0
      98: getfield      #4                  // Field handles:Ljava/util/List;
     101: aload_1
     102: aload_1
     103: aload_3
     104: invokestatic  #30                 // Method org/jboss/vfs/VFS.mountZip:(Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/TempFileProvider;)Ljava/io/Closeable;
     107: invokeinterface #27,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     112: pop
     113: goto          135
     116: aload_0
     117: getfield      #4                  // Field handles:Ljava/util/List;
     120: aload_1
     121: invokevirtual #28                 // Method org/jboss/vfs/VirtualFile.getPhysicalFile:()Ljava/io/File;
     124: aload_1
     125: aload_3
     126: invokestatic  #31                 // Method org/jboss/vfs/VFS.mountZip:(Ljava/io/File;Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/TempFileProvider;)Ljava/io/Closeable;
     129: invokeinterface #27,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     134: pop
     135: return

  private void removeInboundReference(org.jboss.vfs.util.automount.MountOwner);
    Code:
       0: aload_0
       1: getfield      #5                  // Field inboundReferences:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #32,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: getfield      #5                  // Field inboundReferences:Ljava/util/Set;
      15: invokeinterface #33,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      20: ifeq          27
      23: aload_0
      24: invokevirtual #34                 // Method cleanup:()V
      27: return

  void cleanup();
    Code:
       0: aload_0
       1: getfield      #17                 // Field mounted:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: iconst_0
       6: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          66
      12: aload_0
      13: getfield      #4                  // Field handles:Ljava/util/List;
      16: invokestatic  #35                 // Method org/jboss/vfs/VFSUtils.safeClose:(Ljava/lang/Iterable;)V
      19: aload_0
      20: getfield      #4                  // Field handles:Ljava/util/List;
      23: invokeinterface #36,  1           // InterfaceMethod java/util/List.clear:()V
      28: aload_0
      29: invokespecial #37                 // Method getEntriesRecursive:()Ljava/util/Collection;
      32: astore_1
      33: aload_1
      34: invokeinterface #38,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      39: astore_2
      40: aload_2
      41: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      46: ifeq          66
      49: aload_2
      50: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      55: checkcast     #41                 // class org/jboss/vfs/util/automount/Automounter$RegistryEntry
      58: astore_3
      59: aload_3
      60: invokevirtual #34                 // Method cleanup:()V
      63: goto          40
      66: return

  private boolean isMounted();
    Code:
       0: aload_0
       1: getfield      #17                 // Field mounted:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #42                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  private org.jboss.vfs.util.automount.Automounter$RegistryEntry find(org.jboss.vfs.VirtualFile);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #43                 // Method org/jboss/vfs/VirtualFile.getPathName:()Ljava/lang/String;
       5: invokestatic  #44                 // Method org/jboss/vfs/util/PathTokenizer.getTokens:(Ljava/lang/String;)Ljava/util/List;
       8: invokespecial #45                 // Method find:(Ljava/util/List;)Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
      11: areturn

  private org.jboss.vfs.util.automount.Automounter$RegistryEntry find(java.util.List<java.lang.String>);
    Code:
       0: aload_1
       1: invokeinterface #46,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       6: ifeq          11
       9: aload_0
      10: areturn
      11: aload_1
      12: iconst_0
      13: invokeinterface #47,  2           // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
      18: checkcast     #48                 // class java/lang/String
      21: astore_2
      22: aload_0
      23: getfield      #10                 // Field children:Ljava/util/concurrent/ConcurrentMap;
      26: aload_2
      27: new           #41                 // class org/jboss/vfs/util/automount/Automounter$RegistryEntry
      30: dup
      31: invokespecial #49                 // Method "<init>":()V
      34: invokeinterface #50,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: pop
      40: aload_0
      41: getfield      #10                 // Field children:Ljava/util/concurrent/ConcurrentMap;
      44: aload_2
      45: invokeinterface #51,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      50: checkcast     #41                 // class org/jboss/vfs/util/automount/Automounter$RegistryEntry
      53: astore_3
      54: aload_3
      55: aload_1
      56: invokespecial #45                 // Method find:(Ljava/util/List;)Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
      59: areturn

  private java.util.Collection<org.jboss.vfs.util.automount.Automounter$RegistryEntry> getEntriesRecursive();
    Code:
       0: new           #13                 // class java/util/LinkedList
       3: dup
       4: invokespecial #14                 // Method java/util/LinkedList."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_0
      10: aload_1
      11: invokespecial #52                 // Method collectEntries:(Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;Ljava/util/List;)V
      14: aload_1
      15: areturn

  private void collectEntries(org.jboss.vfs.util.automount.Automounter$RegistryEntry, java.util.List<org.jboss.vfs.util.automount.Automounter$RegistryEntry>);
    Code:
       0: aload_1
       1: getfield      #10                 // Field children:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #53,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
       9: invokeinterface #38,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          54
      24: aload_3
      25: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #41                 // class org/jboss/vfs/util/automount/Automounter$RegistryEntry
      33: astore        4
      35: aload_0
      36: aload         4
      38: aload_2
      39: invokespecial #52                 // Method collectEntries:(Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;Ljava/util/List;)V
      42: aload_2
      43: aload         4
      45: invokeinterface #27,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      50: pop
      51: goto          15
      54: return

  static void access$000(org.jboss.vfs.util.automount.Automounter$RegistryEntry, org.jboss.vfs.VirtualFile, org.jboss.vfs.util.automount.MountConfig) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #6                  // Method mount:(Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/util/automount/MountConfig;)V
       6: return

  static java.util.Set access$100(org.jboss.vfs.util.automount.Automounter$RegistryEntry);
    Code:
       0: aload_0
       1: getfield      #5                  // Field inboundReferences:Ljava/util/Set;
       4: areturn

  static java.util.List access$200(org.jboss.vfs.util.automount.Automounter$RegistryEntry);
    Code:
       0: aload_0
       1: getfield      #4                  // Field handles:Ljava/util/List;
       4: areturn

  static void access$300(org.jboss.vfs.util.automount.Automounter$RegistryEntry, org.jboss.vfs.util.automount.MountOwner);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method removeInboundReference:(Lorg/jboss/vfs/util/automount/MountOwner;)V
       5: return

  static boolean access$400(org.jboss.vfs.util.automount.Automounter$RegistryEntry);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method isMounted:()Z
       4: ireturn

  static org.jboss.vfs.util.automount.Automounter$RegistryEntry access$500(org.jboss.vfs.util.automount.Automounter$RegistryEntry, org.jboss.vfs.VirtualFile);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method find:(Lorg/jboss/vfs/VirtualFile;)Lorg/jboss/vfs/util/automount/Automounter$RegistryEntry;
       5: areturn
}
