Compiled from "VFSUtils.java"
public class org.jboss.vfs.VFSUtils {
  private static final java.lang.String DEFAULT_ENCODING;

  public static final java.lang.String VFS_PROTOCOL;

  public static final java.lang.String FORCE_CASE_SENSITIVE_KEY;

  public static final java.net.URLStreamHandler VFS_URL_HANDLER;

  public static final java.net.URLStreamHandler FILE_URL_HANDLER;

  public static final int DEFAULT_BUFFER_SIZE;

  private static boolean forceCaseSensitive;

  private static final java.io.InputStream EMPTY_STREAM;

  private static final java.util.regex.Pattern GLOB_PATTERN;

  private org.jboss.vfs.VFSUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.lang.String getPathsString(java.util.Collection<org.jboss.vfs.VirtualFile>);
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #3                  // String paths
       9: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: new           #5                  // class java/lang/StringBuilder
      18: dup
      19: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
      22: astore_1
      23: iconst_1
      24: istore_2
      25: aload_0
      26: invokeinterface #7,  1            // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      31: astore_3
      32: aload_3
      33: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      38: ifeq          113
      41: aload_3
      42: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: checkcast     #10                 // class org/jboss/vfs/VirtualFile
      50: astore        4
      52: aload         4
      54: ifnonnull     84
      57: new           #11                 // class java/lang/IllegalArgumentException
      60: dup
      61: new           #5                  // class java/lang/StringBuilder
      64: dup
      65: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
      68: ldc           #12                 // String Null path in
      70: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: aload_0
      74: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      77: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: iload_2
      85: ifne          98
      88: aload_1
      89: bipush        58
      91: invokevirtual #17                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      94: pop
      95: goto          100
      98: iconst_0
      99: istore_2
     100: aload_1
     101: aload         4
     103: invokevirtual #18                 // Method org/jboss/vfs/VirtualFile.getPathName:()Ljava/lang/String;
     106: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: pop
     110: goto          32
     113: iload_2
     114: iconst_1
     115: if_icmpne     125
     118: aload_1
     119: ldc           #19                 // String <empty>
     121: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: pop
     125: aload_1
     126: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     129: areturn

  public static void addManifestLocations(org.jboss.vfs.VirtualFile, java.util.List<org.jboss.vfs.VirtualFile>) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #20                 // String file
       9: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_1
      16: ifnonnull     30
      19: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
      22: ldc           #3                  // String paths
      24: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      29: athrow
      30: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
      33: invokeinterface #22,  1           // InterfaceMethod org/jboss/vfs/VFSLogger.isTraceEnabled:()Z
      38: istore_2
      39: aload_0
      40: invokestatic  #23                 // Method getManifest:(Lorg/jboss/vfs/VirtualFile;)Ljava/util/jar/Manifest;
      43: astore_3
      44: aload_3
      45: ifnonnull     49
      48: return
      49: aload_3
      50: invokevirtual #24                 // Method java/util/jar/Manifest.getMainAttributes:()Ljava/util/jar/Attributes;
      53: astore        4
      55: aload         4
      57: getstatic     #25                 // Field java/util/jar/Attributes$Name.CLASS_PATH:Ljava/util/jar/Attributes$Name;
      60: invokevirtual #26                 // Method java/util/jar/Attributes.getValue:(Ljava/util/jar/Attributes$Name;)Ljava/lang/String;
      63: astore        5
      65: aload         5
      67: ifnonnull     89
      70: iload_2
      71: ifeq          88
      74: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
      77: ldc           #27                 // String Manifest has no Class-Path for %s
      79: aload_0
      80: invokevirtual #18                 // Method org/jboss/vfs/VirtualFile.getPathName:()Ljava/lang/String;
      83: invokeinterface #28,  3           // InterfaceMethod org/jboss/vfs/VFSLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      88: return
      89: aload_0
      90: invokevirtual #29                 // Method org/jboss/vfs/VirtualFile.getParent:()Lorg/jboss/vfs/VirtualFile;
      93: astore        6
      95: aload         6
      97: ifnonnull     112
     100: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
     103: ldc           #30                 // String %s has no parent.
     105: aload_0
     106: invokeinterface #31,  3           // InterfaceMethod org/jboss/vfs/VFSLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;)V
     111: return
     112: iload_2
     113: ifeq          137
     116: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
     119: ldc           #32                 // String Parsing Class-Path: %s for %s parent=%s
     121: aload         5
     123: aload_0
     124: invokevirtual #33                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
     127: aload         6
     129: invokevirtual #33                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
     132: invokeinterface #34,  5           // InterfaceMethod org/jboss/vfs/VFSLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
     137: new           #35                 // class java/util/StringTokenizer
     140: dup
     141: aload         5
     143: invokespecial #36                 // Method java/util/StringTokenizer."<init>":(Ljava/lang/String;)V
     146: astore        7
     148: aload         7
     150: invokevirtual #37                 // Method java/util/StringTokenizer.hasMoreTokens:()Z
     153: ifeq          313
     156: aload         7
     158: invokevirtual #38                 // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
     161: astore        8
     163: aload         6
     165: aload         8
     167: invokevirtual #39                 // Method org/jboss/vfs/VirtualFile.getChild:(Ljava/lang/String;)Lorg/jboss/vfs/VirtualFile;
     170: astore        9
     172: aload         9
     174: invokevirtual #40                 // Method org/jboss/vfs/VirtualFile.exists:()Z
     177: ifeq          242
     180: aload_1
     181: aload         9
     183: invokeinterface #41,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     188: ifne          219
     191: aload_1
     192: aload         9
     194: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     199: pop
     200: aload_0
     201: aload         9
     203: iconst_0
     204: anewarray     #43                 // class org/jboss/vfs/util/automount/MountOption
     207: invokestatic  #44                 // Method org/jboss/vfs/util/automount/Automounter.mount:(Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/VirtualFile;[Lorg/jboss/vfs/util/automount/MountOption;)V
     210: aload         9
     212: aload_1
     213: invokestatic  #45                 // Method addManifestLocations:(Lorg/jboss/vfs/VirtualFile;Ljava/util/List;)V
     216: goto          287
     219: iload_2
     220: ifeq          287
     223: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
     226: ldc           #46                 // String %s from manifest is already in the classpath %s
     228: aload         9
     230: invokevirtual #33                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
     233: aload_1
     234: invokeinterface #47,  4           // InterfaceMethod org/jboss/vfs/VFSLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     239: goto          287
     242: iload_2
     243: ifeq          287
     246: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
     249: new           #5                  // class java/lang/StringBuilder
     252: dup
     253: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
     256: ldc           #48                 // String Unable to find
     258: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     261: aload         8
     263: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     266: ldc           #49                 // String  from
     268: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     271: aload         6
     273: invokevirtual #33                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
     276: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     279: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     282: invokeinterface #50,  2           // InterfaceMethod org/jboss/vfs/VFSLogger.trace:(Ljava/lang/Object;)V
     287: goto          310
     290: astore        9
     292: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
     295: ldc           #52                 // String Manifest Class-Path entry %s ignored for %s reason= %s
     297: aload         8
     299: aload_0
     300: invokevirtual #18                 // Method org/jboss/vfs/VirtualFile.getPathName:()Ljava/lang/String;
     303: aload         9
     305: invokeinterface #53,  5           // InterfaceMethod org/jboss/vfs/VFSLogger.debugf:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
     310: goto          148
     313: return
    Exception table:
       from    to  target type
         163   287   290   Class java/io/IOException

  public static java.util.jar.Manifest getManifest(org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #54                 // String archive
       9: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: ldc           #55                 // String META-INF/MANIFEST.MF
      18: invokevirtual #39                 // Method org/jboss/vfs/VirtualFile.getChild:(Ljava/lang/String;)Lorg/jboss/vfs/VirtualFile;
      21: astore_1
      22: aload_1
      23: ifnull        33
      26: aload_1
      27: invokevirtual #40                 // Method org/jboss/vfs/VirtualFile.exists:()Z
      30: ifne          60
      33: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
      36: invokeinterface #22,  1           // InterfaceMethod org/jboss/vfs/VFSLogger.isTraceEnabled:()Z
      41: ifeq          58
      44: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
      47: ldc           #56                 // String Can\'t find manifest for %s
      49: aload_0
      50: invokevirtual #18                 // Method org/jboss/vfs/VirtualFile.getPathName:()Ljava/lang/String;
      53: invokeinterface #28,  3           // InterfaceMethod org/jboss/vfs/VFSLogger.tracef:(Ljava/lang/String;Ljava/lang/Object;)V
      58: aconst_null
      59: areturn
      60: aload_1
      61: invokestatic  #57                 // Method readManifest:(Lorg/jboss/vfs/VirtualFile;)Ljava/util/jar/Manifest;
      64: areturn

  public static java.util.jar.Manifest readManifest(org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #58                 // String manifest file
       9: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: new           #59                 // class org/jboss/vfs/util/PaddedManifestStream
      18: dup
      19: aload_0
      20: invokevirtual #60                 // Method org/jboss/vfs/VirtualFile.openStream:()Ljava/io/InputStream;
      23: invokespecial #61                 // Method org/jboss/vfs/util/PaddedManifestStream."<init>":(Ljava/io/InputStream;)V
      26: astore_1
      27: new           #62                 // class java/util/jar/Manifest
      30: dup
      31: aload_1
      32: invokespecial #63                 // Method java/util/jar/Manifest."<init>":(Ljava/io/InputStream;)V
      35: astore_2
      36: aload_1
      37: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      40: aload_2
      41: areturn
      42: astore_3
      43: aload_1
      44: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      47: aload_3
      48: athrow
    Exception table:
       from    to  target type
          27    36    42   any
          42    43    42   any

  public static java.lang.String fixName(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #65                 // String name
       9: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: invokevirtual #66                 // Method java/lang/String.length:()I
      19: istore_1
      20: iload_1
      21: iconst_1
      22: if_icmpgt     27
      25: aload_0
      26: areturn
      27: aload_0
      28: iload_1
      29: iconst_1
      30: isub
      31: invokevirtual #67                 // Method java/lang/String.charAt:(I)C
      34: bipush        47
      36: if_icmpne     48
      39: aload_0
      40: iconst_0
      41: iload_1
      42: iconst_1
      43: isub
      44: invokevirtual #68                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      47: areturn
      48: aload_0
      49: areturn

  public static java.lang.String decode(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #69                 // String UTF-8
       3: invokestatic  #70                 // Method decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  public static java.lang.String decode(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #71                 // Method java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       5: areturn
       6: astore_2
       7: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokeinterface #73,  4           // InterfaceMethod org/jboss/vfs/VFSMessages.cannotDecode:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/IllegalArgumentException;
      18: athrow
    Exception table:
       from    to  target type
           0     5     6   Class java/io/UnsupportedEncodingException

  public static java.lang.String getName(java.net.URI);
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #74                 // String uri
       9: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: invokevirtual #75                 // Method java/net/URI.getPath:()Ljava/lang/String;
      19: astore_1
      20: aload_1
      21: ifnull        43
      24: aload_1
      25: bipush        47
      27: invokevirtual #76                 // Method java/lang/String.lastIndexOf:(I)I
      30: istore_2
      31: iload_2
      32: ifle          43
      35: aload_1
      36: iload_2
      37: iconst_1
      38: iadd
      39: invokevirtual #77                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      42: astore_1
      43: aload_1
      44: areturn

  public static java.net.URI toURI(java.net.URL) throws java.net.URISyntaxException;
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #78                 // String url
       9: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_0
      16: invokevirtual #79                 // Method java/net/URL.toURI:()Ljava/net/URI;
      19: areturn
      20: astore_1
      21: aload_0
      22: invokevirtual #81                 // Method java/net/URL.toExternalForm:()Ljava/lang/String;
      25: astore_2
      26: aload_2
      27: ldc           #82                 // String %
      29: ldc           #83                 // String %25
      31: invokevirtual #84                 // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      34: astore_2
      35: aload_2
      36: ldc           #85                 // String
      38: ldc           #86                 // String %20
      40: invokevirtual #84                 // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      43: astore_2
      44: new           #87                 // class java/net/URI
      47: dup
      48: aload_2
      49: invokespecial #88                 // Method java/net/URI."<init>":(Ljava/lang/String;)V
      52: areturn
    Exception table:
       from    to  target type
          15    19    20   Class java/net/URISyntaxException

  public static java.net.URL sanitizeURL(java.net.URL) throws java.net.URISyntaxException, java.net.MalformedURLException;
    Code:
       0: aload_0
       1: invokestatic  #89                 // Method toURI:(Ljava/net/URL;)Ljava/net/URI;
       4: invokevirtual #90                 // Method java/net/URI.toURL:()Ljava/net/URL;
       7: areturn

  public static void copyChildrenRecursive(org.jboss.vfs.VirtualFile, org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #91                 // String Original VirtualFile
       9: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_1
      16: ifnonnull     30
      19: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
      22: ldc           #92                 // String Target VirtualFile
      24: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      29: athrow
      30: aload_0
      31: invokevirtual #93                 // Method org/jboss/vfs/VirtualFile.getChildren:()Ljava/util/List;
      34: astore_2
      35: aload_2
      36: invokeinterface #94,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      41: astore_3
      42: aload_3
      43: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      48: ifeq          141
      51: aload_3
      52: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      57: checkcast     #10                 // class org/jboss/vfs/VirtualFile
      60: astore        4
      62: aload_1
      63: aload         4
      65: invokevirtual #33                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
      68: invokevirtual #39                 // Method org/jboss/vfs/VirtualFile.getChild:(Ljava/lang/String;)Lorg/jboss/vfs/VirtualFile;
      71: astore        5
      73: aload         4
      75: invokevirtual #95                 // Method org/jboss/vfs/VirtualFile.getPhysicalFile:()Ljava/io/File;
      78: astore        6
      80: aload         6
      82: invokevirtual #96                 // Method java/io/File.isDirectory:()Z
      85: ifeq          120
      88: aload         5
      90: invokevirtual #95                 // Method org/jboss/vfs/VirtualFile.getPhysicalFile:()Ljava/io/File;
      93: invokevirtual #97                 // Method java/io/File.mkdir:()Z
      96: ifne          110
      99: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
     102: aload         5
     104: invokeinterface #98,  2           // InterfaceMethod org/jboss/vfs/VFSMessages.problemCreatingNewDirectory:(Lorg/jboss/vfs/VirtualFile;)Ljava/lang/IllegalArgumentException;
     109: athrow
     110: aload         4
     112: aload         5
     114: invokestatic  #99                 // Method copyChildrenRecursive:(Lorg/jboss/vfs/VirtualFile;Lorg/jboss/vfs/VirtualFile;)V
     117: goto          138
     120: new           #100                // class java/io/FileInputStream
     123: dup
     124: aload         6
     126: invokespecial #101                // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
     129: astore        7
     131: aload         5
     133: aload         7
     135: invokestatic  #102                // Method writeFile:(Lorg/jboss/vfs/VirtualFile;Ljava/io/InputStream;)V
     138: goto          42
     141: return

  public static void copyStreamAndClose(java.io.InputStream, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #103                // int 65536
       4: invokestatic  #104                // Method copyStreamAndClose:(Ljava/io/InputStream;Ljava/io/OutputStream;I)V
       7: return

  public static void copyStreamAndClose(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #105                // Method copyStream:(Ljava/io/InputStream;Ljava/io/OutputStream;I)V
       6: aload_0
       7: invokevirtual #106                // Method java/io/InputStream.close:()V
      10: aload_1
      11: invokevirtual #107                // Method java/io/OutputStream.close:()V
      14: aload_0
      15: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      18: aload_1
      19: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      22: goto          36
      25: astore_3
      26: aload_0
      27: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      30: aload_1
      31: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      34: aload_3
      35: athrow
      36: return
    Exception table:
       from    to  target type
           0    14    25   any
          25    26    25   any

  public static void copyStream(java.io.InputStream, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #103                // int 65536
       4: invokestatic  #105                // Method copyStream:(Ljava/io/InputStream;Ljava/io/OutputStream;I)V
       7: return

  public static void copyStream(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnonnull     15
       4: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
       7: ldc           #108                // String input stream
       9: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      14: athrow
      15: aload_1
      16: ifnonnull     30
      19: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
      22: ldc           #109                // String output stream
      24: invokeinterface #4,  2            // InterfaceMethod org/jboss/vfs/VFSMessages.nullArgument:(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;
      29: athrow
      30: iload_2
      31: newarray       byte
      33: astore_3
      34: aload_0
      35: aload_3
      36: invokevirtual #110                // Method java/io/InputStream.read:([B)I
      39: dup
      40: istore        4
      42: iconst_m1
      43: if_icmpeq     57
      46: aload_1
      47: aload_3
      48: iconst_0
      49: iload         4
      51: invokevirtual #111                // Method java/io/OutputStream.write:([BII)V
      54: goto          34
      57: aload_1
      58: invokevirtual #112                // Method java/io/OutputStream.flush:()V
      61: return

  public static void writeFile(org.jboss.vfs.VirtualFile, byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #95                 // Method org/jboss/vfs/VirtualFile.getPhysicalFile:()Ljava/io/File;
       4: astore_2
       5: aload_2
       6: invokevirtual #113                // Method java/io/File.getParentFile:()Ljava/io/File;
       9: invokevirtual #114                // Method java/io/File.mkdirs:()Z
      12: pop
      13: new           #115                // class java/io/FileOutputStream
      16: dup
      17: aload_2
      18: invokespecial #116                // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      21: astore_3
      22: aload_3
      23: aload_1
      24: invokevirtual #117                // Method java/io/FileOutputStream.write:([B)V
      27: aload_3
      28: invokevirtual #118                // Method java/io/FileOutputStream.close:()V
      31: aload_3
      32: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      35: goto          47
      38: astore        4
      40: aload_3
      41: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      44: aload         4
      46: athrow
      47: return
    Exception table:
       from    to  target type
          22    31    38   any
          38    40    38   any

  public static void writeFile(org.jboss.vfs.VirtualFile, java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #95                 // Method org/jboss/vfs/VirtualFile.getPhysicalFile:()Ljava/io/File;
       4: astore_2
       5: aload_2
       6: invokevirtual #113                // Method java/io/File.getParentFile:()Ljava/io/File;
       9: invokevirtual #114                // Method java/io/File.mkdirs:()Z
      12: pop
      13: new           #115                // class java/io/FileOutputStream
      16: dup
      17: aload_2
      18: invokespecial #116                // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      21: astore_3
      22: aload_1
      23: aload_3
      24: invokestatic  #119                // Method copyStreamAndClose:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
      27: return

  public static java.net.URL getVirtualURL(org.jboss.vfs.VirtualFile) throws java.net.MalformedURLException;
    Code:
       0: aload_0
       1: invokestatic  #120                // Method getVirtualURI:(Lorg/jboss/vfs/VirtualFile;)Ljava/net/URI;
       4: astore_1
       5: aload_1
       6: invokevirtual #121                // Method java/net/URI.getScheme:()Ljava/lang/String;
       9: astore_2
      10: new           #122                // class org/jboss/vfs/VFSUtils$2
      13: dup
      14: aload_2
      15: aload_1
      16: invokespecial #123                // Method org/jboss/vfs/VFSUtils$2."<init>":(Ljava/lang/String;Ljava/net/URI;)V
      19: invokestatic  #124                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      22: checkcast     #125                // class java/net/URL
      25: areturn
      26: astore_1
      27: new           #126                // class java/net/MalformedURLException
      30: dup
      31: aload_1
      32: invokevirtual #127                // Method java/net/URISyntaxException.getMessage:()Ljava/lang/String;
      35: invokespecial #128                // Method java/net/MalformedURLException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: astore_1
      40: aload_1
      41: invokevirtual #130                // Method java/security/PrivilegedActionException.getException:()Ljava/lang/Exception;
      44: checkcast     #126                // class java/net/MalformedURLException
      47: athrow
    Exception table:
       from    to  target type
           0    25    26   Class java/net/URISyntaxException
           0    25    39   Class java/security/PrivilegedActionException

  public static java.net.URI getVirtualURI(org.jboss.vfs.VirtualFile) throws java.net.URISyntaxException;
    Code:
       0: new           #87                 // class java/net/URI
       3: dup
       4: ldc           #131                // String vfs
       6: ldc           #132                // String
       8: aload_0
       9: iconst_1
      10: invokevirtual #133                // Method org/jboss/vfs/VirtualFile.getPathName:(Z)Ljava/lang/String;
      13: aconst_null
      14: invokespecial #134                // Method java/net/URI."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      17: areturn

  public static java.net.URL getPhysicalURL(org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #135                // Method getPhysicalURI:(Lorg/jboss/vfs/VirtualFile;)Ljava/net/URI;
       4: invokevirtual #90                 // Method java/net/URI.toURL:()Ljava/net/URL;
       7: areturn

  public static java.net.URI getPhysicalURI(org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #95                 // Method org/jboss/vfs/VirtualFile.getPhysicalFile:()Ljava/io/File;
       4: invokevirtual #136                // Method java/io/File.toURI:()Ljava/net/URI;
       7: areturn

  public static java.net.URL getRootURL(org.jboss.vfs.VirtualFile) throws java.net.MalformedURLException;
    Code:
       0: aload_0
       1: invokestatic  #137                // Method getRootURI:(Lorg/jboss/vfs/VirtualFile;)Ljava/net/URI;
       4: astore_1
       5: goto          21
       8: astore_2
       9: new           #126                // class java/net/MalformedURLException
      12: dup
      13: aload_2
      14: invokevirtual #127                // Method java/net/URISyntaxException.getMessage:()Ljava/lang/String;
      17: invokespecial #128                // Method java/net/MalformedURLException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_1
      22: invokevirtual #90                 // Method java/net/URI.toURL:()Ljava/net/URL;
      25: areturn
    Exception table:
       from    to  target type
           0     5     8   Class java/net/URISyntaxException

  public static java.net.URI getRootURI(org.jboss.vfs.VirtualFile) throws java.net.URISyntaxException;
    Code:
       0: aload_0
       1: invokestatic  #138                // Method org/jboss/vfs/VFS.getMount:(Lorg/jboss/vfs/VirtualFile;)Lorg/jboss/vfs/VFS$Mount;
       4: invokevirtual #139                // Method org/jboss/vfs/VFS$Mount.getFileSystem:()Lorg/jboss/vfs/spi/FileSystem;
       7: invokeinterface #140,  1          // InterfaceMethod org/jboss/vfs/spi/FileSystem.getRootURI:()Ljava/net/URI;
      12: areturn

  public static void safeClose(java.io.Closeable);
    Code:
       0: aload_0
       1: ifnull        25
       4: aload_0
       5: invokeinterface #141,  1          // InterfaceMethod java/io/Closeable.close:()V
      10: goto          25
      13: astore_1
      14: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
      17: ldc           #143                // String Failed to close resource
      19: aload_1
      20: invokeinterface #144,  3          // InterfaceMethod org/jboss/vfs/VFSLogger.trace:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      25: return
    Exception table:
       from    to  target type
           4    10    13   Class java/lang/Exception

  public static void safeClose(java.io.Closeable...);
    Code:
       0: aload_0
       1: invokestatic  #145                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       4: invokestatic  #146                // Method safeClose:(Ljava/lang/Iterable;)V
       7: return

  public static void safeClose(java.lang.Iterable<? extends java.io.Closeable>);
    Code:
       0: aload_0
       1: ifnull        37
       4: aload_0
       5: invokeinterface #147,  1          // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      10: astore_1
      11: aload_1
      12: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          37
      20: aload_1
      21: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #148                // class java/io/Closeable
      29: astore_2
      30: aload_2
      31: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      34: goto          11
      37: return

  public static void safeClose(java.util.zip.ZipFile);
    Code:
       0: aload_0
       1: ifnull        23
       4: aload_0
       5: invokevirtual #149                // Method java/util/zip/ZipFile.close:()V
       8: goto          23
      11: astore_1
      12: getstatic     #21                 // Field org/jboss/vfs/VFSLogger.ROOT_LOGGER:Lorg/jboss/vfs/VFSLogger;
      15: ldc           #143                // String Failed to close resource
      17: aload_1
      18: invokeinterface #144,  3          // InterfaceMethod org/jboss/vfs/VFSLogger.trace:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      23: return
    Exception table:
       from    to  target type
           4     8    11   Class java/lang/Exception

  public static boolean isForceCaseSensitive();
    Code:
       0: getstatic     #150                // Field forceCaseSensitive:Z
       3: ireturn

  public static boolean exists(java.io.File);
    Code:
       0: aload_0
       1: invokevirtual #151                // Method java/io/File.exists:()Z
       4: istore_1
       5: getstatic     #150                // Field forceCaseSensitive:Z
       8: ifeq          15
      11: iload_1
      12: ifne          17
      15: iload_1
      16: ireturn
      17: aload_0
      18: invokevirtual #152                // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      21: invokestatic  #153                // Method canonicalize:(Ljava/lang/String;)Ljava/lang/String;
      24: astore_2
      25: aload_0
      26: invokevirtual #154                // Method java/io/File.getCanonicalPath:()Ljava/lang/String;
      29: invokestatic  #153                // Method canonicalize:(Ljava/lang/String;)Ljava/lang/String;
      32: astore_3
      33: iload_1
      34: ifeq          49
      37: aload_2
      38: aload_3
      39: invokevirtual #155                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ireturn
      51: astore_1
      52: iconst_0
      53: ireturn
    Exception table:
       from    to  target type
           0    16    51   Class java/io/IOException
          17    50    51   Class java/io/IOException

  public static boolean recursiveDelete(java.io.File);
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: invokevirtual #96                 // Method java/io/File.isDirectory:()Z
       6: ifeq          78
       9: aload_0
      10: invokevirtual #156                // Method java/io/File.listFiles:()[Ljava/io/File;
      13: astore_2
      14: aload_2
      15: ifnull        54
      18: aload_2
      19: astore_3
      20: aload_3
      21: arraylength
      22: istore        4
      24: iconst_0
      25: istore        5
      27: iload         5
      29: iload         4
      31: if_icmpge     54
      34: aload_3
      35: iload         5
      37: aaload
      38: astore        6
      40: iload_1
      41: aload         6
      43: invokestatic  #157                // Method recursiveDelete:(Ljava/io/File;)Z
      46: iand
      47: istore_1
      48: iinc          5, 1
      51: goto          27
      54: iload_1
      55: ifeq          76
      58: aload_0
      59: invokevirtual #158                // Method java/io/File.delete:()Z
      62: ifne          72
      65: aload_0
      66: invokevirtual #151                // Method java/io/File.exists:()Z
      69: ifne          76
      72: iconst_1
      73: goto          77
      76: iconst_0
      77: ireturn
      78: iload_1
      79: aload_0
      80: invokevirtual #158                // Method java/io/File.delete:()Z
      83: ifne          93
      86: aload_0
      87: invokevirtual #151                // Method java/io/File.exists:()Z
      90: ifne          97
      93: iconst_1
      94: goto          98
      97: iconst_0
      98: iand
      99: istore_1
     100: iload_1
     101: ireturn

  public static boolean recursiveDelete(org.jboss.vfs.VirtualFile);
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: invokevirtual #159                // Method org/jboss/vfs/VirtualFile.isDirectory:()Z
       6: ifeq          76
       9: aload_0
      10: invokevirtual #93                 // Method org/jboss/vfs/VirtualFile.getChildren:()Ljava/util/List;
      13: astore_2
      14: aload_2
      15: invokeinterface #94,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          52
      30: aload_3
      31: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #10                 // class org/jboss/vfs/VirtualFile
      39: astore        4
      41: iload_1
      42: aload         4
      44: invokestatic  #160                // Method recursiveDelete:(Lorg/jboss/vfs/VirtualFile;)Z
      47: iand
      48: istore_1
      49: goto          21
      52: iload_1
      53: ifeq          74
      56: aload_0
      57: invokevirtual #161                // Method org/jboss/vfs/VirtualFile.delete:()Z
      60: ifne          70
      63: aload_0
      64: invokevirtual #40                 // Method org/jboss/vfs/VirtualFile.exists:()Z
      67: ifne          74
      70: iconst_1
      71: goto          75
      74: iconst_0
      75: ireturn
      76: iload_1
      77: aload_0
      78: invokevirtual #161                // Method org/jboss/vfs/VirtualFile.delete:()Z
      81: ifne          91
      84: aload_0
      85: invokevirtual #40                 // Method org/jboss/vfs/VirtualFile.exists:()Z
      88: ifne          95
      91: iconst_1
      92: goto          96
      95: iconst_0
      96: iand
      97: istore_1
      98: iload_1
      99: ireturn

  public static void recursiveCopy(java.io.File, java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #162                // Method java/io/File.getName:()Ljava/lang/String;
       4: astore_2
       5: new           #163                // class java/io/File
       8: dup
       9: aload_1
      10: aload_2
      11: invokespecial #164                // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
      14: astore_3
      15: aload_0
      16: invokevirtual #96                 // Method java/io/File.isDirectory:()Z
      19: ifeq          70
      22: aload_3
      23: invokevirtual #97                 // Method java/io/File.mkdir:()Z
      26: pop
      27: aload_0
      28: invokevirtual #156                // Method java/io/File.listFiles:()[Ljava/io/File;
      31: astore        4
      33: aload         4
      35: arraylength
      36: istore        5
      38: iconst_0
      39: istore        6
      41: iload         6
      43: iload         5
      45: if_icmpge     67
      48: aload         4
      50: iload         6
      52: aaload
      53: astore        7
      55: aload         7
      57: aload_3
      58: invokestatic  #165                // Method recursiveCopy:(Ljava/io/File;Ljava/io/File;)V
      61: iinc          6, 1
      64: goto          41
      67: goto          115
      70: new           #115                // class java/io/FileOutputStream
      73: dup
      74: aload_3
      75: invokespecial #116                // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      78: astore        4
      80: new           #100                // class java/io/FileInputStream
      83: dup
      84: aload_0
      85: invokespecial #101                // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      88: astore        5
      90: aload         5
      92: aload         4
      94: invokestatic  #119                // Method copyStreamAndClose:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
      97: aload         4
      99: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     102: goto          115
     105: astore        8
     107: aload         4
     109: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     112: aload         8
     114: athrow
     115: return
    Exception table:
       from    to  target type
          80    97   105   any
         105   107   105   any

  public static void recursiveCopy(java.io.File, org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #162                // Method java/io/File.getName:()Ljava/lang/String;
       4: astore_2
       5: aload_1
       6: aload_2
       7: invokevirtual #39                 // Method org/jboss/vfs/VirtualFile.getChild:(Ljava/lang/String;)Lorg/jboss/vfs/VirtualFile;
      10: invokevirtual #95                 // Method org/jboss/vfs/VirtualFile.getPhysicalFile:()Ljava/io/File;
      13: astore_3
      14: aload_0
      15: invokevirtual #96                 // Method java/io/File.isDirectory:()Z
      18: ifeq          69
      21: aload_3
      22: invokevirtual #97                 // Method java/io/File.mkdir:()Z
      25: pop
      26: aload_0
      27: invokevirtual #156                // Method java/io/File.listFiles:()[Ljava/io/File;
      30: astore        4
      32: aload         4
      34: arraylength
      35: istore        5
      37: iconst_0
      38: istore        6
      40: iload         6
      42: iload         5
      44: if_icmpge     66
      47: aload         4
      49: iload         6
      51: aaload
      52: astore        7
      54: aload         7
      56: aload_3
      57: invokestatic  #165                // Method recursiveCopy:(Ljava/io/File;Ljava/io/File;)V
      60: iinc          6, 1
      63: goto          40
      66: goto          114
      69: new           #115                // class java/io/FileOutputStream
      72: dup
      73: aload_3
      74: invokespecial #116                // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      77: astore        4
      79: new           #100                // class java/io/FileInputStream
      82: dup
      83: aload_0
      84: invokespecial #101                // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      87: astore        5
      89: aload         5
      91: aload         4
      93: invokestatic  #119                // Method copyStreamAndClose:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
      96: aload         4
      98: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     101: goto          114
     104: astore        8
     106: aload         4
     108: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     111: aload         8
     113: athrow
     114: return
    Exception table:
       from    to  target type
          79    96   104   any
         104   106   104   any

  public static void recursiveCopy(org.jboss.vfs.VirtualFile, java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
       4: astore_2
       5: new           #163                // class java/io/File
       8: dup
       9: aload_1
      10: aload_2
      11: invokespecial #164                // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
      14: astore_3
      15: aload_0
      16: invokevirtual #159                // Method org/jboss/vfs/VirtualFile.isDirectory:()Z
      19: ifeq          72
      22: aload_3
      23: invokevirtual #97                 // Method java/io/File.mkdir:()Z
      26: pop
      27: aload_0
      28: invokevirtual #93                 // Method org/jboss/vfs/VirtualFile.getChildren:()Ljava/util/List;
      31: invokeinterface #94,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      36: astore        4
      38: aload         4
      40: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      45: ifeq          69
      48: aload         4
      50: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      55: checkcast     #10                 // class org/jboss/vfs/VirtualFile
      58: astore        5
      60: aload         5
      62: aload_3
      63: invokestatic  #166                // Method recursiveCopy:(Lorg/jboss/vfs/VirtualFile;Ljava/io/File;)V
      66: goto          38
      69: goto          113
      72: new           #115                // class java/io/FileOutputStream
      75: dup
      76: aload_3
      77: invokespecial #116                // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      80: astore        4
      82: aload_0
      83: invokevirtual #60                 // Method org/jboss/vfs/VirtualFile.openStream:()Ljava/io/InputStream;
      86: astore        5
      88: aload         5
      90: aload         4
      92: invokestatic  #119                // Method copyStreamAndClose:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
      95: aload         4
      97: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     100: goto          113
     103: astore        6
     105: aload         4
     107: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     110: aload         6
     112: athrow
     113: return
    Exception table:
       from    to  target type
          82    95   103   any
         103   105   103   any

  public static void recursiveCopy(org.jboss.vfs.VirtualFile, org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method org/jboss/vfs/VirtualFile.getName:()Ljava/lang/String;
       4: astore_2
       5: aload_1
       6: aload_2
       7: invokevirtual #39                 // Method org/jboss/vfs/VirtualFile.getChild:(Ljava/lang/String;)Lorg/jboss/vfs/VirtualFile;
      10: invokevirtual #95                 // Method org/jboss/vfs/VirtualFile.getPhysicalFile:()Ljava/io/File;
      13: astore_3
      14: aload_0
      15: invokevirtual #159                // Method org/jboss/vfs/VirtualFile.isDirectory:()Z
      18: ifeq          71
      21: aload_3
      22: invokevirtual #97                 // Method java/io/File.mkdir:()Z
      25: pop
      26: aload_0
      27: invokevirtual #93                 // Method org/jboss/vfs/VirtualFile.getChildren:()Ljava/util/List;
      30: invokeinterface #94,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      35: astore        4
      37: aload         4
      39: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          68
      47: aload         4
      49: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: checkcast     #10                 // class org/jboss/vfs/VirtualFile
      57: astore        5
      59: aload         5
      61: aload_3
      62: invokestatic  #166                // Method recursiveCopy:(Lorg/jboss/vfs/VirtualFile;Ljava/io/File;)V
      65: goto          37
      68: goto          112
      71: new           #115                // class java/io/FileOutputStream
      74: dup
      75: aload_3
      76: invokespecial #116                // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      79: astore        4
      81: aload_0
      82: invokevirtual #60                 // Method org/jboss/vfs/VirtualFile.openStream:()Ljava/io/InputStream;
      85: astore        5
      87: aload         5
      89: aload         4
      91: invokestatic  #119                // Method copyStreamAndClose:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
      94: aload         4
      96: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
      99: goto          112
     102: astore        6
     104: aload         4
     106: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     109: aload         6
     111: athrow
     112: return
    Exception table:
       from    to  target type
          81    94   102   any
         102   104   102   any

  public static java.io.InputStream emptyStream();
    Code:
       0: getstatic     #167                // Field EMPTY_STREAM:Ljava/io/InputStream;
       3: areturn

  public static java.io.InputStream createJarFileInputStream(org.jboss.vfs.VirtualFile) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #159                // Method org/jboss/vfs/VirtualFile.isDirectory:()Z
       4: ifeq          25
       7: new           #168                // class org/jboss/vfs/VirtualJarInputStream
      10: dup
      11: aload_0
      12: invokespecial #169                // Method org/jboss/vfs/VirtualJarInputStream."<init>":(Lorg/jboss/vfs/VirtualFile;)V
      15: astore_1
      16: new           #170                // class org/jboss/vfs/VirtualJarFileInputStream
      19: dup
      20: aload_1
      21: invokespecial #171                // Method org/jboss/vfs/VirtualJarFileInputStream."<init>":(Lorg/jboss/vfs/VirtualJarInputStream;)V
      24: areturn
      25: aconst_null
      26: astore_1
      27: iconst_4
      28: newarray       byte
      30: astore_2
      31: aload_2
      32: iconst_0
      33: bipush        80
      35: bastore
      36: aload_2
      37: iconst_1
      38: bipush        75
      40: bastore
      41: aload_2
      42: iconst_2
      43: iconst_3
      44: bastore
      45: aload_2
      46: iconst_3
      47: iconst_4
      48: bastore
      49: aload_0
      50: invokevirtual #60                 // Method org/jboss/vfs/VirtualFile.openStream:()Ljava/io/InputStream;
      53: astore_1
      54: iconst_4
      55: newarray       byte
      57: astore_3
      58: aload_1
      59: aload_3
      60: iconst_0
      61: iconst_4
      62: invokevirtual #172                // Method java/io/InputStream.read:([BII)I
      65: istore        4
      67: iload         4
      69: iconst_4
      70: if_icmplt     81
      73: aload_2
      74: aload_3
      75: invokestatic  #173                // Method java/util/Arrays.equals:([B[B)Z
      78: ifne          98
      81: getstatic     #2                  // Field org/jboss/vfs/VFSMessages.MESSAGES:Lorg/jboss/vfs/VFSMessages;
      84: aload_3
      85: invokestatic  #174                // Method java/util/Arrays.toString:([B)Ljava/lang/String;
      88: aload_2
      89: invokestatic  #174                // Method java/util/Arrays.toString:([B)Ljava/lang/String;
      92: invokeinterface #175,  3          // InterfaceMethod org/jboss/vfs/VFSMessages.invalidJarSignature:(Ljava/lang/String;Ljava/lang/String;)Ljava/io/IOException;
      97: athrow
      98: aload_1
      99: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     102: goto          114
     105: astore        5
     107: aload_1
     108: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     111: aload         5
     113: athrow
     114: aload_0
     115: invokevirtual #60                 // Method org/jboss/vfs/VirtualFile.openStream:()Ljava/io/InputStream;
     118: areturn
    Exception table:
       from    to  target type
          27    98   105   any
         105   107   105   any

  public static void unzip(java.io.File, java.io.File) throws java.io.IOException;
    Code:
       0: new           #176                // class java/util/zip/ZipFile
       3: dup
       4: aload_0
       5: invokespecial #177                // Method java/util/zip/ZipFile."<init>":(Ljava/io/File;)V
       8: astore_2
       9: new           #178                // class java/util/HashSet
      12: dup
      13: invokespecial #179                // Method java/util/HashSet."<init>":()V
      16: astore_3
      17: aload_2
      18: invokevirtual #180                // Method java/util/zip/ZipFile.entries:()Ljava/util/Enumeration;
      21: astore        4
      23: aload         4
      25: invokeinterface #181,  1          // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
      30: ifeq          270
      33: aload         4
      35: invokeinterface #182,  1          // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
      40: checkcast     #183                // class java/util/zip/ZipEntry
      43: astore        5
      45: aload         5
      47: invokevirtual #184                // Method java/util/zip/ZipEntry.getName:()Ljava/lang/String;
      50: astore        6
      52: aload         6
      54: invokestatic  #185                // Method org/jboss/vfs/util/PathTokenizer.getTokens:(Ljava/lang/String;)Ljava/util/List;
      57: astore        7
      59: aload         7
      61: invokeinterface #186,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      66: astore        8
      68: aload_1
      69: astore        9
      71: aload         8
      73: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      78: ifeq          163
      81: aload         8
      83: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      88: checkcast     #187                // class java/lang/String
      91: astore        10
      93: aload         10
      95: invokestatic  #188                // Method org/jboss/vfs/util/PathTokenizer.isCurrentToken:(Ljava/lang/String;)Z
      98: ifne          23
     101: aload         10
     103: invokestatic  #189                // Method org/jboss/vfs/util/PathTokenizer.isReverseToken:(Ljava/lang/String;)Z
     106: ifeq          112
     109: goto          23
     112: new           #163                // class java/io/File
     115: dup
     116: aload         9
     118: aload         10
     120: invokespecial #164                // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
     123: astore        9
     125: aload         8
     127: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
     132: ifne          143
     135: aload         5
     137: invokevirtual #190                // Method java/util/zip/ZipEntry.isDirectory:()Z
     140: ifeq          160
     143: aload_3
     144: aload         9
     146: invokeinterface #191,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     151: ifeq          160
     154: aload         9
     156: invokevirtual #97                 // Method java/io/File.mkdir:()Z
     159: pop
     160: goto          71
     163: aload         5
     165: invokevirtual #190                // Method java/util/zip/ZipEntry.isDirectory:()Z
     168: ifne          267
     171: aload_2
     172: aload         5
     174: invokevirtual #192                // Method java/util/zip/ZipFile.getInputStream:(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;
     177: astore        10
     179: new           #115                // class java/io/FileOutputStream
     182: dup
     183: aload         9
     185: invokespecial #116                // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
     188: astore        11
     190: aload         10
     192: aload         11
     194: invokestatic  #193                // Method copyStream:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
     197: aload         10
     199: invokevirtual #106                // Method java/io/InputStream.close:()V
     202: aload         11
     204: invokevirtual #118                // Method java/io/FileOutputStream.close:()V
     207: aload         11
     209: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     212: goto          225
     215: astore        12
     217: aload         11
     219: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     222: aload         12
     224: athrow
     225: aload         10
     227: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     230: goto          243
     233: astore        13
     235: aload         10
     237: invokestatic  #64                 // Method safeClose:(Ljava/io/Closeable;)V
     240: aload         13
     242: athrow
     243: aload         9
     245: invokevirtual #162                // Method java/io/File.getName:()Ljava/lang/String;
     248: ldc           #194                // String .jsp
     250: invokevirtual #195                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
     253: ifne          267
     256: aload         9
     258: aload         5
     260: invokevirtual #196                // Method java/util/zip/ZipEntry.getTime:()J
     263: invokevirtual #197                // Method java/io/File.setLastModified:(J)Z
     266: pop
     267: goto          23
     270: aload_2
     271: invokestatic  #198                // Method safeClose:(Ljava/util/zip/ZipFile;)V
     274: goto          286
     277: astore        14
     279: aload_2
     280: invokestatic  #198                // Method safeClose:(Ljava/util/zip/ZipFile;)V
     283: aload         14
     285: athrow
     286: return
    Exception table:
       from    to  target type
         190   207   215   any
         215   217   215   any
         179   225   233   any
         233   235   233   any
           9   270   277   any
         277   279   277   any

  public static java.io.File getMountSource(java.io.Closeable);
    Code:
       0: aload_0
       1: instanceof    #199                // class org/jboss/vfs/spi/MountHandle
       4: ifeq          23
       7: ldc_w         #199                // class org/jboss/vfs/spi/MountHandle
      10: aload_0
      11: invokevirtual #200                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #199                // class org/jboss/vfs/spi/MountHandle
      17: invokeinterface #201,  1          // InterfaceMethod org/jboss/vfs/spi/MountHandle.getMountSource:()Ljava/io/File;
      22: areturn
      23: aconst_null
      24: areturn

  public static java.util.regex.Pattern getGlobPattern(java.lang.String);
    Code:
       0: new           #5                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #202                // String ^
      11: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: getstatic     #203                // Field GLOB_PATTERN:Ljava/util/regex/Pattern;
      18: aload_0
      19: invokevirtual #204                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      22: astore_2
      23: iconst_0
      24: istore_3
      25: aload_2
      26: invokevirtual #205                // Method java/util/regex/Matcher.find:()Z
      29: ifeq          158
      32: iconst_0
      33: istore_3
      34: aload_2
      35: iconst_1
      36: invokevirtual #206                // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      39: dup
      40: astore        4
      42: ifnull        74
      45: aload         4
      47: invokevirtual #66                 // Method java/lang/String.length:()I
      50: iconst_2
      51: if_icmpne     64
      54: aload_1
      55: ldc           #207                // String .*
      57: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: pop
      61: goto          155
      64: aload_1
      65: ldc           #208                // String [^/]*
      67: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: pop
      71: goto          155
      74: aload_2
      75: iconst_2
      76: invokevirtual #206                // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      79: dup
      80: astore        4
      82: ifnull        95
      85: aload_1
      86: ldc           #209                // String [^/]
      88: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: pop
      92: goto          155
      95: aload_2
      96: iconst_3
      97: invokevirtual #206                // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
     100: dup
     101: astore        4
     103: ifnull        120
     106: aload_1
     107: aload         4
     109: iconst_1
     110: invokevirtual #67                 // Method java/lang/String.charAt:(I)C
     113: invokevirtual #17                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     116: pop
     117: goto          155
     120: aload_2
     121: iconst_4
     122: invokevirtual #206                // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
     125: dup
     126: astore        4
     128: ifnull        143
     131: aload_1
     132: ldc           #210                // String /+
     134: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     137: pop
     138: iconst_1
     139: istore_3
     140: goto          155
     143: aload_1
     144: aload_2
     145: invokevirtual #211                // Method java/util/regex/Matcher.group:()Ljava/lang/String;
     148: invokestatic  #212                // Method java/util/regex/Pattern.quote:(Ljava/lang/String;)Ljava/lang/String;
     151: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     154: pop
     155: goto          25
     158: iload_3
     159: ifeq          169
     162: aload_1
     163: ldc           #207                // String .*
     165: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     168: pop
     169: aload_1
     170: ldc           #213                // String $
     172: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     175: pop
     176: aload_1
     177: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     180: invokestatic  #214                // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     183: areturn

  public static java.lang.String canonicalize(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #66                 // Method java/lang/String.length:()I
       4: istore_1
       5: iconst_0
       6: istore_2
       7: iload_1
       8: ifne          13
      11: aload_0
      12: areturn
      13: iload_1
      14: newarray       char
      16: astore_3
      17: iload_1
      18: istore        4
      20: iload_1
      21: istore        5
      23: iload_1
      24: iconst_1
      25: isub
      26: istore        6
      28: iconst_0
      29: istore        7
      31: iinc          5, -1
      34: iload         5
      36: iflt          304
      39: aload_0
      40: iload         5
      42: invokevirtual #67                 // Method java/lang/String.charAt:(I)C
      45: istore        8
      47: iload         8
      49: lookupswitch  { // 2
                    46: 153
                    47: 76
               default: 210
          }
      76: iload_2
      77: tableswitch   { // 0 to 3
                     0: 108
                     1: 117
                     2: 126
                     3: 138
               default: 145
          }
     108: iconst_3
     109: istore_2
     110: iload         5
     112: istore        4
     114: goto          301
     117: iconst_3
     118: istore_2
     119: iload         5
     121: istore        4
     123: goto          301
     126: iconst_3
     127: istore_2
     128: iload         5
     130: istore        4
     132: iinc          7, 1
     135: goto          301
     138: iload         5
     140: istore        4
     142: goto          301
     145: new           #215                // class java/lang/IllegalStateException
     148: dup
     149: invokespecial #216                // Method java/lang/IllegalStateException."<init>":()V
     152: athrow
     153: iload_2
     154: tableswitch   { // 0 to 3
                     0: 184
                     1: 189
                     2: 194
                     3: 197
               default: 202
          }
     184: iconst_1
     185: istore_2
     186: goto          301
     189: iconst_2
     190: istore_2
     191: goto          301
     194: goto          210
     197: iconst_1
     198: istore_2
     199: goto          301
     202: new           #215                // class java/lang/IllegalStateException
     205: dup
     206: invokespecial #216                // Method java/lang/IllegalStateException."<init>":()V
     209: athrow
     210: iload         4
     212: ifle          228
     215: aload_0
     216: bipush        47
     218: iload         4
     220: iconst_1
     221: isub
     222: invokevirtual #217                // Method java/lang/String.lastIndexOf:(II)I
     225: goto          229
     228: iconst_m1
     229: istore        9
     231: iload         4
     233: iload         9
     235: isub
     236: iconst_1
     237: isub
     238: istore        10
     240: iload         7
     242: ifle          251
     245: iinc          7, -1
     248: goto          286
     251: iload_2
     252: iconst_3
     253: if_icmpne     265
     256: aload_3
     257: iload         6
     259: iinc          6, -1
     262: bipush        47
     264: castore
     265: aload_0
     266: iload         9
     268: iconst_1
     269: iadd
     270: iload         4
     272: aload_3
     273: iload         6
     275: iload         10
     277: isub
     278: dup
     279: istore        6
     281: iconst_1
     282: iadd
     283: invokevirtual #218                // Method java/lang/String.getChars:(II[CI)V
     286: iconst_0
     287: istore_2
     288: iload         9
     290: iconst_1
     291: iadd
     292: istore        5
     294: iload         9
     296: istore        4
     298: goto          301
     301: goto          31
     304: iload_2
     305: iconst_3
     306: if_icmpne     318
     309: aload_3
     310: iload         6
     312: iinc          6, -1
     315: bipush        47
     317: castore
     318: new           #187                // class java/lang/String
     321: dup
     322: aload_3
     323: iload         6
     325: iconst_1
     326: iadd
     327: iload_1
     328: iload         6
     330: isub
     331: iconst_1
     332: isub
     333: invokespecial #219                // Method java/lang/String."<init>":([CII)V
     336: areturn

  static {};
    Code:
       0: new           #220                // class org/jboss/vfs/protocol/VirtualFileURLStreamHandler
       3: dup
       4: invokespecial #221                // Method org/jboss/vfs/protocol/VirtualFileURLStreamHandler."<init>":()V
       7: putstatic     #222                // Field VFS_URL_HANDLER:Ljava/net/URLStreamHandler;
      10: new           #223                // class org/jboss/vfs/protocol/FileURLStreamHandler
      13: dup
      14: invokespecial #224                // Method org/jboss/vfs/protocol/FileURLStreamHandler."<init>":()V
      17: putstatic     #225                // Field FILE_URL_HANDLER:Ljava/net/URLStreamHandler;
      20: new           #226                // class org/jboss/vfs/VFSUtils$1
      23: dup
      24: invokespecial #227                // Method org/jboss/vfs/VFSUtils$1."<init>":()V
      27: invokestatic  #228                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      30: checkcast     #229                // class java/lang/Boolean
      33: invokevirtual #230                // Method java/lang/Boolean.booleanValue:()Z
      36: putstatic     #150                // Field forceCaseSensitive:Z
      39: new           #231                // class org/jboss/vfs/VFSUtils$3
      42: dup
      43: invokespecial #232                // Method org/jboss/vfs/VFSUtils$3."<init>":()V
      46: putstatic     #167                // Field EMPTY_STREAM:Ljava/io/InputStream;
      49: ldc           #233                // String (\\*\\*?)|(\\?)|(\\\\.)|(/+)|([^*?]+)
      51: invokestatic  #214                // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      54: putstatic     #203                // Field GLOB_PATTERN:Ljava/util/regex/Pattern;
      57: return
}
