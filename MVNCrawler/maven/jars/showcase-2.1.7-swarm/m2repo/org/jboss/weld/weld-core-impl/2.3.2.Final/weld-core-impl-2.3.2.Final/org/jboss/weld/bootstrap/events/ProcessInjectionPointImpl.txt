Compiled from "ProcessInjectionPointImpl.java"
public class org.jboss.weld.bootstrap.events.ProcessInjectionPointImpl<T, X> extends org.jboss.weld.bootstrap.events.AbstractDefinitionContainerEvent implements javax.enterprise.inject.spi.ProcessInjectionPoint<T, X> {
  private javax.enterprise.inject.spi.InjectionPoint ip;

  private boolean dirty;

  protected static <T, X> org.jboss.weld.injection.attributes.FieldInjectionPointAttributes<T, X> fire(org.jboss.weld.injection.attributes.FieldInjectionPointAttributes<T, X>, java.lang.Class<?>, org.jboss.weld.manager.BeanManagerImpl);
    Code:
       0: new           #1                  // class org/jboss/weld/bootstrap/events/ProcessInjectionPointImpl$1
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_0
       8: invokeinterface #2,  1            // InterfaceMethod org/jboss/weld/injection/attributes/FieldInjectionPointAttributes.getAnnotated:()Ljavax/enterprise/inject/spi/AnnotatedField;
      13: invokeinterface #3,  1            // InterfaceMethod javax/enterprise/inject/spi/AnnotatedField.getBaseType:()Ljava/lang/reflect/Type;
      18: invokespecial #4                  // Method org/jboss/weld/bootstrap/events/ProcessInjectionPointImpl$1."<init>":(Ljavax/enterprise/inject/spi/InjectionPoint;Ljava/lang/Class;Lorg/jboss/weld/manager/BeanManagerImpl;Ljava/lang/reflect/Type;)V
      21: astore_3
      22: aload_3
      23: invokevirtual #5                  // Method fire:()V
      26: aload_3
      27: invokevirtual #6                  // Method isDirty:()Z
      30: ifne          35
      33: aload_0
      34: areturn
      35: aload_3
      36: invokevirtual #7                  // Method getInjectionPointInternal:()Ljavax/enterprise/inject/spi/InjectionPoint;
      39: invokestatic  #8                  // Method org/jboss/weld/injection/attributes/ForwardingFieldInjectionPointAttributes.of:(Ljavax/enterprise/inject/spi/InjectionPoint;)Lorg/jboss/weld/injection/attributes/FieldInjectionPointAttributes;
      42: areturn

  public static <T, X> org.jboss.weld.injection.attributes.ParameterInjectionPointAttributes<T, X> fire(org.jboss.weld.injection.attributes.ParameterInjectionPointAttributes<T, X>, java.lang.Class<?>, org.jboss.weld.manager.BeanManagerImpl);
    Code:
       0: new           #9                  // class org/jboss/weld/bootstrap/events/ProcessInjectionPointImpl$2
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_0
       8: invokeinterface #10,  1           // InterfaceMethod org/jboss/weld/injection/attributes/ParameterInjectionPointAttributes.getAnnotated:()Ljavax/enterprise/inject/spi/AnnotatedParameter;
      13: invokeinterface #11,  1           // InterfaceMethod javax/enterprise/inject/spi/AnnotatedParameter.getBaseType:()Ljava/lang/reflect/Type;
      18: invokespecial #12                 // Method org/jboss/weld/bootstrap/events/ProcessInjectionPointImpl$2."<init>":(Ljavax/enterprise/inject/spi/InjectionPoint;Ljava/lang/Class;Lorg/jboss/weld/manager/BeanManagerImpl;Ljava/lang/reflect/Type;)V
      21: astore_3
      22: aload_3
      23: invokevirtual #5                  // Method fire:()V
      26: aload_3
      27: invokevirtual #6                  // Method isDirty:()Z
      30: ifne          35
      33: aload_0
      34: areturn
      35: aload_3
      36: invokevirtual #7                  // Method getInjectionPointInternal:()Ljavax/enterprise/inject/spi/InjectionPoint;
      39: invokestatic  #13                 // Method org/jboss/weld/injection/attributes/ForwardingParameterInjectionPointAttributes.of:(Ljavax/enterprise/inject/spi/InjectionPoint;)Lorg/jboss/weld/injection/attributes/ForwardingParameterInjectionPointAttributes;
      42: areturn

  protected org.jboss.weld.bootstrap.events.ProcessInjectionPointImpl(javax.enterprise.inject.spi.InjectionPoint, java.lang.Class<?>, org.jboss.weld.manager.BeanManagerImpl, java.lang.reflect.Type);
    Code:
       0: aload_0
       1: aload_3
       2: ldc           #14                 // class javax/enterprise/inject/spi/ProcessInjectionPoint
       4: iconst_2
       5: anewarray     #15                 // class java/lang/reflect/Type
       8: dup
       9: iconst_0
      10: aload_1
      11: invokeinterface #16,  1           // InterfaceMethod javax/enterprise/inject/spi/InjectionPoint.getBean:()Ljavax/enterprise/inject/spi/Bean;
      16: ifnonnull     23
      19: aload_2
      20: goto          34
      23: aload_1
      24: invokeinterface #16,  1           // InterfaceMethod javax/enterprise/inject/spi/InjectionPoint.getBean:()Ljavax/enterprise/inject/spi/Bean;
      29: invokeinterface #17,  1           // InterfaceMethod javax/enterprise/inject/spi/Bean.getBeanClass:()Ljava/lang/Class;
      34: aastore
      35: dup
      36: iconst_1
      37: aload         4
      39: aastore
      40: invokespecial #18                 // Method org/jboss/weld/bootstrap/events/AbstractDefinitionContainerEvent."<init>":(Lorg/jboss/weld/manager/BeanManagerImpl;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V
      43: aload_0
      44: aload_1
      45: putfield      #19                 // Field ip:Ljavax/enterprise/inject/spi/InjectionPoint;
      48: return

  public javax.enterprise.inject.spi.InjectionPoint getInjectionPoint();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method checkWithinObserverNotification:()V
       4: aload_0
       5: getfield      #19                 // Field ip:Ljavax/enterprise/inject/spi/InjectionPoint;
       8: areturn

  javax.enterprise.inject.spi.InjectionPoint getInjectionPointInternal();
    Code:
       0: aload_0
       1: getfield      #19                 // Field ip:Ljavax/enterprise/inject/spi/InjectionPoint;
       4: areturn

  public void setInjectionPoint(javax.enterprise.inject.spi.InjectionPoint);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method checkWithinObserverNotification:()V
       4: aload_0
       5: aload_1
       6: putfield      #19                 // Field ip:Ljavax/enterprise/inject/spi/InjectionPoint;
       9: aload_0
      10: iconst_1
      11: putfield      #21                 // Field dirty:Z
      14: return

  public boolean isDirty();
    Code:
       0: aload_0
       1: getfield      #21                 // Field dirty:Z
       4: ireturn
}
