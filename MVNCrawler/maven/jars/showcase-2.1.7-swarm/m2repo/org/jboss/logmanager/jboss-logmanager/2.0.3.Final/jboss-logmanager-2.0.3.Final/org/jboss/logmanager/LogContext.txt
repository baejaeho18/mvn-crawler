Compiled from "LogContext.java"
public final class org.jboss.logmanager.LogContext implements org.jboss.logmanager.Protectable {
  private static final org.jboss.logmanager.LogContext SYSTEM_CONTEXT;

  static final java.security.Permission CREATE_CONTEXT_PERMISSION;

  static final java.security.Permission SET_CONTEXT_SELECTOR_PERMISSION;

  static final java.security.Permission CONTROL_PERMISSION;

  private final org.jboss.logmanager.LoggerNode rootLogger;

  private final java.util.logging.LoggingMXBean mxBean;

  private final boolean strong;

  private final java.util.concurrent.ConcurrentSkipListMap<java.lang.String, java.util.concurrent.atomic.AtomicInteger> loggerNames;

  private volatile java.lang.Object protectKey;

  private final java.lang.ThreadLocal<java.lang.Boolean> granted;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<org.jboss.logmanager.LogContext, java.lang.Object> protectKeyUpdater;

  private final java.util.concurrent.atomic.AtomicReference<java.util.Map<java.lang.String, org.jboss.logmanager.LogContext$LevelRef>> levelMapReference;

  final java.lang.Object treeLock;

  public static final org.jboss.logmanager.LogContextSelector DEFAULT_LOG_CONTEXT_SELECTOR;

  private static volatile org.jboss.logmanager.LogContextSelector logContextSelector;

  static final boolean $assertionsDisabled;

  org.jboss.logmanager.LogContext(boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class org/jboss/logmanager/LoggingMXBeanImpl
       8: dup
       9: aload_0
      10: invokespecial #4                  // Method org/jboss/logmanager/LoggingMXBeanImpl."<init>":(Lorg/jboss/logmanager/LogContext;)V
      13: putfield      #5                  // Field mxBean:Ljava/util/logging/LoggingMXBean;
      16: aload_0
      17: new           #6                  // class java/lang/InheritableThreadLocal
      20: dup
      21: invokespecial #7                  // Method java/lang/InheritableThreadLocal."<init>":()V
      24: putfield      #8                  // Field granted:Ljava/lang/ThreadLocal;
      27: aload_0
      28: new           #9                  // class java/lang/Object
      31: dup
      32: invokespecial #2                  // Method java/lang/Object."<init>":()V
      35: putfield      #10                 // Field treeLock:Ljava/lang/Object;
      38: aload_0
      39: iload_1
      40: putfield      #11                 // Field strong:Z
      43: aload_0
      44: new           #12                 // class java/util/concurrent/atomic/AtomicReference
      47: dup
      48: invokestatic  #13                 // Method org/jboss/logmanager/LogContext$LazyHolder.access$100:()Ljava/util/HashMap;
      51: invokespecial #14                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      54: putfield      #15                 // Field levelMapReference:Ljava/util/concurrent/atomic/AtomicReference;
      57: aload_0
      58: new           #16                 // class org/jboss/logmanager/LoggerNode
      61: dup
      62: aload_0
      63: invokespecial #17                 // Method org/jboss/logmanager/LoggerNode."<init>":(Lorg/jboss/logmanager/LogContext;)V
      66: putfield      #18                 // Field rootLogger:Lorg/jboss/logmanager/LoggerNode;
      69: aload_0
      70: new           #19                 // class java/util/concurrent/ConcurrentSkipListMap
      73: dup
      74: invokespecial #20                 // Method java/util/concurrent/ConcurrentSkipListMap."<init>":()V
      77: putfield      #21                 // Field loggerNames:Ljava/util/concurrent/ConcurrentSkipListMap;
      80: return

  public static org.jboss.logmanager.LogContext create(boolean);
    Code:
       0: invokestatic  #22                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_1
       4: aload_1
       5: ifnull        15
       8: aload_1
       9: getstatic     #23                 // Field CREATE_CONTEXT_PERMISSION:Ljava/security/Permission;
      12: invokevirtual #24                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      15: new           #25                 // class org/jboss/logmanager/LogContext
      18: dup
      19: iload_0
      20: invokespecial #26                 // Method "<init>":(Z)V
      23: areturn

  public static org.jboss.logmanager.LogContext create();
    Code:
       0: iconst_0
       1: invokestatic  #27                 // Method create:(Z)Lorg/jboss/logmanager/LogContext;
       4: areturn

  public org.jboss.logmanager.Logger getLogger(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #18                 // Field rootLogger:Lorg/jboss/logmanager/LoggerNode;
       4: aload_1
       5: invokevirtual #28                 // Method org/jboss/logmanager/LoggerNode.getOrCreate:(Ljava/lang/String;)Lorg/jboss/logmanager/LoggerNode;
       8: invokevirtual #29                 // Method org/jboss/logmanager/LoggerNode.createLogger:()Lorg/jboss/logmanager/Logger;
      11: areturn

  public org.jboss.logmanager.Logger getLoggerIfExists(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #18                 // Field rootLogger:Lorg/jboss/logmanager/LoggerNode;
       4: aload_1
       5: invokevirtual #30                 // Method org/jboss/logmanager/LoggerNode.getIfExists:(Ljava/lang/String;)Lorg/jboss/logmanager/LoggerNode;
       8: astore_2
       9: aload_2
      10: ifnonnull     17
      13: aconst_null
      14: goto          21
      17: aload_2
      18: invokevirtual #29                 // Method org/jboss/logmanager/LoggerNode.createLogger:()Lorg/jboss/logmanager/Logger;
      21: areturn

  public <V> V getAttachment(java.lang.String, org.jboss.logmanager.Logger$AttachmentKey<V>);
    Code:
       0: aload_0
       1: getfield      #18                 // Field rootLogger:Lorg/jboss/logmanager/LoggerNode;
       4: aload_1
       5: invokevirtual #30                 // Method org/jboss/logmanager/LoggerNode.getIfExists:(Ljava/lang/String;)Lorg/jboss/logmanager/LoggerNode;
       8: astore_3
       9: aload_3
      10: ifnonnull     15
      13: aconst_null
      14: areturn
      15: aload_3
      16: aload_2
      17: invokevirtual #31                 // Method org/jboss/logmanager/LoggerNode.getAttachment:(Lorg/jboss/logmanager/Logger$AttachmentKey;)Ljava/lang/Object;
      20: areturn

  public java.util.logging.LoggingMXBean getLoggingMXBean();
    Code:
       0: aload_0
       1: getfield      #5                  // Field mxBean:Ljava/util/logging/LoggingMXBean;
       4: areturn

  public java.util.logging.Level getLevelForName(java.lang.String) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_1
       1: ifnull        46
       4: aload_0
       5: getfield      #15                 // Field levelMapReference:Ljava/util/concurrent/atomic/AtomicReference;
       8: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      11: checkcast     #33                 // class java/util/Map
      14: astore_2
      15: aload_2
      16: aload_1
      17: invokeinterface #34,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #35                 // class org/jboss/logmanager/LogContext$LevelRef
      25: astore_3
      26: aload_3
      27: ifnull        46
      30: aload_3
      31: invokeinterface #36,  1           // InterfaceMethod org/jboss/logmanager/LogContext$LevelRef.get:()Ljava/util/logging/Level;
      36: astore        4
      38: aload         4
      40: ifnull        46
      43: aload         4
      45: areturn
      46: new           #37                 // class java/lang/IllegalArgumentException
      49: dup
      50: new           #38                 // class java/lang/StringBuilder
      53: dup
      54: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
      57: ldc           #40                 // String Unknown level \"
      59: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_1
      63: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: ldc           #42                 // String \"
      68: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokespecial #44                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      77: athrow

  public void registerLevel(java.util.logging.Level);
    Code:
       0: invokestatic  #22                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_2
       4: aload_2
       5: ifnull        15
       8: aload_2
       9: getstatic     #45                 // Field CONTROL_PERMISSION:Ljava/security/Permission;
      12: invokevirtual #24                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      15: aload_0
      16: getfield      #15                 // Field levelMapReference:Ljava/util/concurrent/atomic/AtomicReference;
      19: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      22: checkcast     #33                 // class java/util/Map
      25: astore_3
      26: new           #46                 // class java/util/HashMap
      29: dup
      30: aload_3
      31: invokeinterface #47,  1           // InterfaceMethod java/util/Map.size:()I
      36: invokespecial #48                 // Method java/util/HashMap."<init>":(I)V
      39: astore        4
      41: aload_3
      42: invokeinterface #49,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      47: invokeinterface #50,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      52: astore        5
      54: aload         5
      56: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      61: ifeq          125
      64: aload         5
      66: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      71: checkcast     #53                 // class java/util/Map$Entry
      74: astore        6
      76: aload         6
      78: invokeinterface #54,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      83: checkcast     #55                 // class java/lang/String
      86: astore        7
      88: aload         6
      90: invokeinterface #56,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      95: checkcast     #35                 // class org/jboss/logmanager/LogContext$LevelRef
      98: astore        8
     100: aload         8
     102: invokeinterface #36,  1           // InterfaceMethod org/jboss/logmanager/LogContext$LevelRef.get:()Ljava/util/logging/Level;
     107: ifnull        122
     110: aload         4
     112: aload         7
     114: aload         8
     116: invokeinterface #57,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     121: pop
     122: goto          54
     125: aload         4
     127: aload_1
     128: invokevirtual #58                 // Method java/util/logging/Level.getName:()Ljava/lang/String;
     131: new           #59                 // class org/jboss/logmanager/LogContext$WeakLevelRef
     134: dup
     135: aload_1
     136: aconst_null
     137: invokespecial #60                 // Method org/jboss/logmanager/LogContext$WeakLevelRef."<init>":(Ljava/util/logging/Level;Lorg/jboss/logmanager/LogContext$1;)V
     140: invokeinterface #57,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     145: pop
     146: aload_0
     147: getfield      #15                 // Field levelMapReference:Ljava/util/concurrent/atomic/AtomicReference;
     150: aload_3
     151: aload         4
     153: invokevirtual #61                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
     156: ifeq          160
     159: return
     160: goto          15

  public void unregisterLevel(java.util.logging.Level);
    Code:
       0: invokestatic  #22                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_2
       4: aload_2
       5: ifnull        15
       8: aload_2
       9: getstatic     #45                 // Field CONTROL_PERMISSION:Ljava/security/Permission;
      12: invokevirtual #24                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      15: aload_0
      16: getfield      #15                 // Field levelMapReference:Ljava/util/concurrent/atomic/AtomicReference;
      19: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      22: checkcast     #33                 // class java/util/Map
      25: astore_3
      26: aload_3
      27: aload_1
      28: invokevirtual #58                 // Method java/util/logging/Level.getName:()Ljava/lang/String;
      31: invokeinterface #34,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #35                 // class org/jboss/logmanager/LogContext$LevelRef
      39: astore        4
      41: aload         4
      43: ifnull        57
      46: aload         4
      48: invokeinterface #36,  1           // InterfaceMethod org/jboss/logmanager/LogContext$LevelRef.get:()Ljava/util/logging/Level;
      53: aload_1
      54: if_acmpeq     58
      57: return
      58: new           #46                 // class java/util/HashMap
      61: dup
      62: aload_3
      63: invokeinterface #47,  1           // InterfaceMethod java/util/Map.size:()I
      68: invokespecial #48                 // Method java/util/HashMap."<init>":(I)V
      71: astore        5
      73: aload_3
      74: invokeinterface #49,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      79: invokeinterface #50,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      84: astore        6
      86: aload         6
      88: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      93: ifeq          167
      96: aload         6
      98: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     103: checkcast     #53                 // class java/util/Map$Entry
     106: astore        7
     108: aload         7
     110: invokeinterface #54,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     115: checkcast     #55                 // class java/lang/String
     118: astore        8
     120: aload         7
     122: invokeinterface #56,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     127: checkcast     #35                 // class org/jboss/logmanager/LogContext$LevelRef
     130: astore        9
     132: aload         9
     134: invokeinterface #36,  1           // InterfaceMethod org/jboss/logmanager/LogContext$LevelRef.get:()Ljava/util/logging/Level;
     139: astore        10
     141: aload         10
     143: ifnull        164
     146: aload         10
     148: aload_1
     149: if_acmpeq     164
     152: aload         5
     154: aload         8
     156: aload         9
     158: invokeinterface #57,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     163: pop
     164: goto          86
     167: aload         5
     169: aload_1
     170: invokevirtual #58                 // Method java/util/logging/Level.getName:()Ljava/lang/String;
     173: new           #59                 // class org/jboss/logmanager/LogContext$WeakLevelRef
     176: dup
     177: aload_1
     178: aconst_null
     179: invokespecial #60                 // Method org/jboss/logmanager/LogContext$WeakLevelRef."<init>":(Ljava/util/logging/Level;Lorg/jboss/logmanager/LogContext$1;)V
     182: invokeinterface #57,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     187: pop
     188: aload_0
     189: getfield      #15                 // Field levelMapReference:Ljava/util/concurrent/atomic/AtomicReference;
     192: aload_3
     193: aload         5
     195: invokevirtual #61                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
     198: ifeq          202
     201: return
     202: goto          15

  public static org.jboss.logmanager.LogContext getSystemLogContext();
    Code:
       0: getstatic     #1                  // Field SYSTEM_CONTEXT:Lorg/jboss/logmanager/LogContext;
       3: areturn

  public static org.jboss.logmanager.LogContext getLogContext();
    Code:
       0: getstatic     #62                 // Field logContextSelector:Lorg/jboss/logmanager/LogContextSelector;
       3: invokeinterface #63,  1           // InterfaceMethod org/jboss/logmanager/LogContextSelector.getLogContext:()Lorg/jboss/logmanager/LogContext;
       8: areturn

  public static void setLogContextSelector(org.jboss.logmanager.LogContextSelector);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #64                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #65                 // String newSelector is null
      10: invokespecial #66                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: invokestatic  #22                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
      17: astore_1
      18: aload_1
      19: ifnull        29
      22: aload_1
      23: getstatic     #67                 // Field SET_CONTEXT_SELECTOR_PERMISSION:Ljava/security/Permission;
      26: invokevirtual #24                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      29: aload_0
      30: putstatic     #62                 // Field logContextSelector:Lorg/jboss/logmanager/LogContextSelector;
      33: return

  public void protect(java.lang.Object) throws java.lang.SecurityException;
    Code:
       0: getstatic     #68                 // Field protectKeyUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: aload_1
       6: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifeq          13
      12: return
      13: new           #70                 // class java/lang/SecurityException
      16: dup
      17: ldc           #71                 // String Log context already protected
      19: invokespecial #72                 // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
      22: athrow

  public void unprotect(java.lang.Object) throws java.lang.SecurityException;
    Code:
       0: getstatic     #68                 // Field protectKeyUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aconst_null
       6: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifeq          13
      12: return
      13: invokestatic  #73                 // Method accessDenied:()Ljava/lang/SecurityException;
      16: athrow

  public void enableAccess(java.lang.Object) throws java.lang.SecurityException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #74                 // Field protectKey:Ljava/lang/Object;
       5: if_acmpne     18
       8: aload_0
       9: getfield      #8                  // Field granted:Ljava/lang/ThreadLocal;
      12: getstatic     #75                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      15: invokevirtual #76                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
      18: return

  public void disableAccess();
    Code:
       0: aload_0
       1: getfield      #8                  // Field granted:Ljava/lang/ThreadLocal;
       4: invokevirtual #77                 // Method java/lang/ThreadLocal.remove:()V
       7: return

  public java.util.Enumeration<java.lang.String> getLoggerNames();
    Code:
       0: aload_0
       1: getfield      #21                 // Field loggerNames:Ljava/util/concurrent/ConcurrentSkipListMap;
       4: invokevirtual #78                 // Method java/util/concurrent/ConcurrentSkipListMap.entrySet:()Ljava/util/Set;
       7: invokeinterface #79,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      12: astore_1
      13: new           #80                 // class org/jboss/logmanager/LogContext$2
      16: dup
      17: aload_0
      18: aload_1
      19: invokespecial #81                 // Method org/jboss/logmanager/LogContext$2."<init>":(Lorg/jboss/logmanager/LogContext;Ljava/util/Iterator;)V
      22: areturn

  protected void incrementRef(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #21                 // Field loggerNames:Ljava/util/concurrent/ConcurrentSkipListMap;
       4: aload_1
       5: invokevirtual #82                 // Method java/util/concurrent/ConcurrentSkipListMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #83                 // class java/util/concurrent/atomic/AtomicInteger
      11: astore_2
      12: aload_2
      13: ifnonnull     43
      16: aload_0
      17: getfield      #21                 // Field loggerNames:Ljava/util/concurrent/ConcurrentSkipListMap;
      20: aload_1
      21: new           #83                 // class java/util/concurrent/atomic/AtomicInteger
      24: dup
      25: invokespecial #84                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      28: dup
      29: astore_2
      30: invokevirtual #85                 // Method java/util/concurrent/ConcurrentSkipListMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #83                 // class java/util/concurrent/atomic/AtomicInteger
      36: astore_3
      37: aload_3
      38: ifnull        43
      41: aload_3
      42: astore_2
      43: aload_2
      44: invokevirtual #86                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      47: pop
      48: return

  protected void decrementRef(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #21                 // Field loggerNames:Ljava/util/concurrent/ConcurrentSkipListMap;
       4: aload_1
       5: invokevirtual #82                 // Method java/util/concurrent/ConcurrentSkipListMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #83                 // class java/util/concurrent/atomic/AtomicInteger
      11: astore_2
      12: getstatic     #87                 // Field $assertionsDisabled:Z
      15: ifne          37
      18: aload_2
      19: ifnull        29
      22: aload_2
      23: invokevirtual #88                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      26: ifgt          37
      29: new           #89                 // class java/lang/AssertionError
      32: dup
      33: invokespecial #90                 // Method java/lang/AssertionError."<init>":()V
      36: athrow
      37: aload_2
      38: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      41: pop
      42: return

  private static java.lang.SecurityException accessDenied();
    Code:
       0: new           #70                 // class java/lang/SecurityException
       3: dup
       4: ldc           #92                 // String Log context modification access denied
       6: invokespecial #72                 // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
       9: areturn

  static void checkSecurityAccess();
    Code:
       0: invokestatic  #22                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_0
       4: aload_0
       5: ifnull        15
       8: aload_0
       9: getstatic     #45                 // Field CONTROL_PERMISSION:Ljava/security/Permission;
      12: invokevirtual #24                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      15: return

  static void checkAccess(org.jboss.logmanager.LogContext);
    Code:
       0: invokestatic  #93                 // Method checkSecurityAccess:()V
       3: aload_0
       4: getfield      #74                 // Field protectKey:Ljava/lang/Object;
       7: ifnull        24
      10: aload_0
      11: getfield      #8                  // Field granted:Ljava/lang/ThreadLocal;
      14: invokevirtual #94                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      17: ifnonnull     24
      20: invokestatic  #73                 // Method accessDenied:()Ljava/lang/SecurityException;
      23: athrow
      24: return

  org.jboss.logmanager.LoggerNode getRootLoggerNode();
    Code:
       0: aload_0
       1: getfield      #18                 // Field rootLogger:Lorg/jboss/logmanager/LoggerNode;
       4: areturn

  java.util.concurrent.ConcurrentMap<java.lang.String, org.jboss.logmanager.LoggerNode> createChildMap();
    Code:
       0: aload_0
       1: getfield      #11                 // Field strong:Z
       4: ifeq          17
       7: new           #95                 // class org/jboss/logmanager/CopyOnWriteMap
      10: dup
      11: invokespecial #96                 // Method org/jboss/logmanager/CopyOnWriteMap."<init>":()V
      14: goto          24
      17: new           #97                 // class org/jboss/logmanager/CopyOnWriteWeakMap
      20: dup
      21: invokespecial #98                 // Method org/jboss/logmanager/CopyOnWriteWeakMap."<init>":()V
      24: checkcast     #99                 // class java/util/concurrent/ConcurrentMap
      27: areturn

  static org.jboss.logmanager.LogContext access$300();
    Code:
       0: getstatic     #1                  // Field SYSTEM_CONTEXT:Lorg/jboss/logmanager/LogContext;
       3: areturn

  static {};
    Code:
       0: ldc_w         #25                 // class org/jboss/logmanager/LogContext
       3: invokevirtual #100                // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #87                 // Field $assertionsDisabled:Z
      17: new           #25                 // class org/jboss/logmanager/LogContext
      20: dup
      21: iconst_0
      22: invokespecial #26                 // Method "<init>":(Z)V
      25: putstatic     #1                  // Field SYSTEM_CONTEXT:Lorg/jboss/logmanager/LogContext;
      28: new           #101                // class java/lang/RuntimePermission
      31: dup
      32: ldc           #102                // String createLogContext
      34: aconst_null
      35: invokespecial #103                // Method java/lang/RuntimePermission."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      38: putstatic     #23                 // Field CREATE_CONTEXT_PERMISSION:Ljava/security/Permission;
      41: new           #101                // class java/lang/RuntimePermission
      44: dup
      45: ldc           #104                // String setLogContextSelector
      47: aconst_null
      48: invokespecial #103                // Method java/lang/RuntimePermission."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      51: putstatic     #67                 // Field SET_CONTEXT_SELECTOR_PERMISSION:Ljava/security/Permission;
      54: new           #105                // class java/util/logging/LoggingPermission
      57: dup
      58: ldc           #106                // String control
      60: aconst_null
      61: invokespecial #107                // Method java/util/logging/LoggingPermission."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      64: putstatic     #45                 // Field CONTROL_PERMISSION:Ljava/security/Permission;
      67: ldc_w         #25                 // class org/jboss/logmanager/LogContext
      70: ldc_w         #9                  // class java/lang/Object
      73: ldc           #108                // String protectKey
      75: invokestatic  #109                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      78: putstatic     #68                 // Field protectKeyUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      81: new           #110                // class org/jboss/logmanager/LogContext$1
      84: dup
      85: invokespecial #111                // Method org/jboss/logmanager/LogContext$1."<init>":()V
      88: putstatic     #112                // Field DEFAULT_LOG_CONTEXT_SELECTOR:Lorg/jboss/logmanager/LogContextSelector;
      91: getstatic     #112                // Field DEFAULT_LOG_CONTEXT_SELECTOR:Lorg/jboss/logmanager/LogContextSelector;
      94: putstatic     #62                 // Field logContextSelector:Lorg/jboss/logmanager/LogContextSelector;
      97: return
}
