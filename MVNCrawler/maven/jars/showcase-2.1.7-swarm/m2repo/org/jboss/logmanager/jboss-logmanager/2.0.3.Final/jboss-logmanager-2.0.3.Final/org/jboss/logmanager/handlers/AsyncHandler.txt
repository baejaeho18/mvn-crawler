Compiled from "AsyncHandler.java"
public class org.jboss.logmanager.handlers.AsyncHandler extends org.jboss.logmanager.ExtHandler {
  private final java.util.concurrent.BlockingQueue<org.jboss.logmanager.ExtLogRecord> recordQueue;

  private final int queueLength;

  private final java.lang.Thread thread;

  private volatile org.jboss.logmanager.handlers.AsyncHandler$OverflowAction overflowAction;

  private volatile int state;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<org.jboss.logmanager.handlers.AsyncHandler> stateUpdater;

  private static final int DEFAULT_QUEUE_LENGTH;

  public org.jboss.logmanager.handlers.AsyncHandler(int, java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/jboss/logmanager/ExtHandler."<init>":()V
       4: aload_0
       5: getstatic     #5                  // Field org/jboss/logmanager/handlers/AsyncHandler$OverflowAction.BLOCK:Lorg/jboss/logmanager/handlers/AsyncHandler$OverflowAction;
       8: putfield      #6                  // Field overflowAction:Lorg/jboss/logmanager/handlers/AsyncHandler$OverflowAction;
      11: aload_0
      12: new           #7                  // class java/util/concurrent/ArrayBlockingQueue
      15: dup
      16: iload_1
      17: invokespecial #8                  // Method java/util/concurrent/ArrayBlockingQueue."<init>":(I)V
      20: putfield      #3                  // Field recordQueue:Ljava/util/concurrent/BlockingQueue;
      23: aload_0
      24: aload_2
      25: new           #9                  // class org/jboss/logmanager/handlers/AsyncHandler$AsyncTask
      28: dup
      29: aload_0
      30: aconst_null
      31: invokespecial #10                 // Method org/jboss/logmanager/handlers/AsyncHandler$AsyncTask."<init>":(Lorg/jboss/logmanager/handlers/AsyncHandler;Lorg/jboss/logmanager/handlers/AsyncHandler$1;)V
      34: invokeinterface #11,  2           // InterfaceMethod java/util/concurrent/ThreadFactory.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
      39: putfield      #12                 // Field thread:Ljava/lang/Thread;
      42: aload_0
      43: getfield      #12                 // Field thread:Ljava/lang/Thread;
      46: ifnonnull     59
      49: new           #13                 // class java/lang/IllegalArgumentException
      52: dup
      53: ldc           #14                 // String Thread factory did not create a thread
      55: invokespecial #15                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      58: athrow
      59: aload_0
      60: getfield      #12                 // Field thread:Ljava/lang/Thread;
      63: iconst_1
      64: invokevirtual #16                 // Method java/lang/Thread.setDaemon:(Z)V
      67: aload_0
      68: iload_1
      69: putfield      #17                 // Field queueLength:I
      72: return

  public org.jboss.logmanager.handlers.AsyncHandler(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: sipush        512
       4: aload_1
       5: invokespecial #18                 // Method "<init>":(ILjava/util/concurrent/ThreadFactory;)V
       8: return

  public org.jboss.logmanager.handlers.AsyncHandler(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #19                 // Method java/util/concurrent/Executors.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       5: invokespecial #18                 // Method "<init>":(ILjava/util/concurrent/ThreadFactory;)V
       8: return

  public org.jboss.logmanager.handlers.AsyncHandler();
    Code:
       0: aload_0
       1: sipush        512
       4: invokespecial #20                 // Method "<init>":(I)V
       7: return

  public int getQueueLength();
    Code:
       0: aload_0
       1: getfield      #17                 // Field queueLength:I
       4: ireturn

  public org.jboss.logmanager.handlers.AsyncHandler$OverflowAction getOverflowAction();
    Code:
       0: aload_0
       1: getfield      #6                  // Field overflowAction:Lorg/jboss/logmanager/handlers/AsyncHandler$OverflowAction;
       4: areturn

  public void setOverflowAction(org.jboss.logmanager.handlers.AsyncHandler$OverflowAction);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #21                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #22                 // String overflowAction is null
      10: invokespecial #23                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: invokestatic  #24                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
      18: aload_0
      19: aload_1
      20: putfield      #6                  // Field overflowAction:Lorg/jboss/logmanager/handlers/AsyncHandler$OverflowAction;
      23: return

  protected void doPublish(org.jboss.logmanager.ExtLogRecord);
    Code:
       0: aload_0
       1: getfield      #1                  // Field state:I
       4: lookupswitch  { // 2
                     0: 32
                     1: 51
               default: 54
          }
      32: getstatic     #25                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      35: aload_0
      36: iconst_0
      37: iconst_1
      38: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      41: ifeq          51
      44: aload_0
      45: getfield      #12                 // Field thread:Ljava/lang/Thread;
      48: invokevirtual #27                 // Method java/lang/Thread.start:()V
      51: goto          55
      54: return
      55: aload_0
      56: getfield      #3                  // Field recordQueue:Ljava/util/concurrent/BlockingQueue;
      59: astore_2
      60: aload_1
      61: invokevirtual #28                 // Method org/jboss/logmanager/ExtLogRecord.copyAll:()V
      64: aload_0
      65: getfield      #6                  // Field overflowAction:Lorg/jboss/logmanager/handlers/AsyncHandler$OverflowAction;
      68: getstatic     #29                 // Field org/jboss/logmanager/handlers/AsyncHandler$OverflowAction.DISCARD:Lorg/jboss/logmanager/handlers/AsyncHandler$OverflowAction;
      71: if_acmpne     85
      74: aload_2
      75: aload_1
      76: invokeinterface #30,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.offer:(Ljava/lang/Object;)Z
      81: pop
      82: goto          103
      85: aload_2
      86: aload_1
      87: invokeinterface #31,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.put:(Ljava/lang/Object;)V
      92: goto          103
      95: astore_3
      96: invokestatic  #33                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      99: invokevirtual #34                 // Method java/lang/Thread.interrupt:()V
     102: return
     103: return
    Exception table:
       from    to  target type
          85    92    95   Class java/lang/InterruptedException

  public void close() throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #24                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: getstatic     #25                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: aload_0
       8: iconst_2
       9: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      12: iconst_2
      13: if_icmpeq     27
      16: aload_0
      17: getfield      #12                 // Field thread:Ljava/lang/Thread;
      20: invokevirtual #34                 // Method java/lang/Thread.interrupt:()V
      23: aload_0
      24: invokespecial #36                 // Method org/jboss/logmanager/ExtHandler.close:()V
      27: return

  static java.util.concurrent.BlockingQueue access$100(org.jboss.logmanager.handlers.AsyncHandler);
    Code:
       0: aload_0
       1: getfield      #3                  // Field recordQueue:Ljava/util/concurrent/BlockingQueue;
       4: areturn

  static java.util.logging.Handler[] access$200(org.jboss.logmanager.handlers.AsyncHandler);
    Code:
       0: aload_0
       1: getfield      #2                  // Field handlers:[Ljava/util/logging/Handler;
       4: areturn

  static int access$300(org.jboss.logmanager.handlers.AsyncHandler);
    Code:
       0: aload_0
       1: getfield      #1                  // Field state:I
       4: ireturn

  static {};
    Code:
       0: ldc_w         #37                 // class org/jboss/logmanager/handlers/AsyncHandler
       3: ldc           #38                 // String state
       5: invokestatic  #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       8: putstatic     #25                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      11: return
}
