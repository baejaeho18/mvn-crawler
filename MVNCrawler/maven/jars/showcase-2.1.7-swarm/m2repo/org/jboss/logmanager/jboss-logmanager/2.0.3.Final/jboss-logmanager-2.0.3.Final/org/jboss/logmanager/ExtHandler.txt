Compiled from "ExtHandler.java"
public abstract class org.jboss.logmanager.ExtHandler extends java.util.logging.Handler implements org.jboss.logmanager.handlers.FlushableCloseable,org.jboss.logmanager.Protectable {
  private static final java.security.Permission CONTROL_PERMISSION;

  private volatile boolean autoFlush;

  private volatile boolean enabled;

  private static final java.util.logging.ErrorManager DEFAULT_ERROR_MANAGER;

  private volatile java.lang.Object protectKey;

  private final java.lang.ThreadLocal<java.lang.Boolean> granted;

  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<org.jboss.logmanager.ExtHandler, java.lang.Object> protectKeyUpdater;

  protected volatile java.util.logging.Handler[] handlers;

  protected static final org.jboss.logmanager.AtomicArray<org.jboss.logmanager.ExtHandler, java.util.logging.Handler> handlersUpdater;

  protected org.jboss.logmanager.ExtHandler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/logging/Handler."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field autoFlush:Z
       9: aload_0
      10: iconst_1
      11: putfield      #3                  // Field enabled:Z
      14: aload_0
      15: new           #4                  // class java/lang/InheritableThreadLocal
      18: dup
      19: invokespecial #5                  // Method java/lang/InheritableThreadLocal."<init>":()V
      22: putfield      #6                  // Field granted:Ljava/lang/ThreadLocal;
      25: getstatic     #7                  // Field handlersUpdater:Lorg/jboss/logmanager/AtomicArray;
      28: aload_0
      29: invokevirtual #8                  // Method org/jboss/logmanager/AtomicArray.clear:(Ljava/lang/Object;)V
      32: aload_0
      33: getstatic     #9                  // Field DEFAULT_ERROR_MANAGER:Ljava/util/logging/ErrorManager;
      36: invokespecial #10                 // Method java/util/logging/Handler.setErrorManager:(Ljava/util/logging/ErrorManager;)V
      39: return

  public void publish(java.util.logging.LogRecord);
    Code:
       0: aload_0
       1: getfield      #3                  // Field enabled:Z
       4: ifeq          27
       7: aload_1
       8: ifnull        27
      11: aload_0
      12: aload_1
      13: invokevirtual #11                 // Method isLoggable:(Ljava/util/logging/LogRecord;)Z
      16: ifeq          27
      19: aload_0
      20: aload_1
      21: invokestatic  #12                 // Method org/jboss/logmanager/ExtLogRecord.wrap:(Ljava/util/logging/LogRecord;)Lorg/jboss/logmanager/ExtLogRecord;
      24: invokevirtual #13                 // Method doPublish:(Lorg/jboss/logmanager/ExtLogRecord;)V
      27: return

  public void publish(org.jboss.logmanager.ExtLogRecord);
    Code:
       0: aload_0
       1: getfield      #3                  // Field enabled:Z
       4: ifeq          24
       7: aload_1
       8: ifnull        24
      11: aload_0
      12: aload_1
      13: invokevirtual #11                 // Method isLoggable:(Ljava/util/logging/LogRecord;)Z
      16: ifeq          24
      19: aload_0
      20: aload_1
      21: invokevirtual #13                 // Method doPublish:(Lorg/jboss/logmanager/ExtLogRecord;)V
      24: return

  protected void doPublish(org.jboss.logmanager.ExtLogRecord);
    Code:
       0: aload_0
       1: getfield      #2                  // Field autoFlush:Z
       4: ifeq          11
       7: aload_0
       8: invokevirtual #14                 // Method flush:()V
      11: return

  public void addHandler(java.util.logging.Handler) throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_1
       5: ifnonnull     18
       8: new           #16                 // class java/lang/NullPointerException
      11: dup
      12: ldc           #17                 // String handler is null
      14: invokespecial #18                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: getstatic     #7                  // Field handlersUpdater:Lorg/jboss/logmanager/AtomicArray;
      21: aload_0
      22: aload_1
      23: invokevirtual #19                 // Method org/jboss/logmanager/AtomicArray.add:(Ljava/lang/Object;Ljava/lang/Object;)V
      26: return

  public void removeHandler(java.util.logging.Handler) throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_1
       5: ifnonnull     9
       8: return
       9: getstatic     #7                  // Field handlersUpdater:Lorg/jboss/logmanager/AtomicArray;
      12: aload_0
      13: aload_1
      14: iconst_1
      15: invokevirtual #20                 // Method org/jboss/logmanager/AtomicArray.remove:(Ljava/lang/Object;Ljava/lang/Object;Z)Z
      18: pop
      19: return

  public java.util.logging.Handler[] getHandlers();
    Code:
       0: aload_0
       1: getfield      #21                 // Field handlers:[Ljava/util/logging/Handler;
       4: astore_1
       5: aload_1
       6: arraylength
       7: ifle          20
      10: aload_1
      11: invokevirtual #22                 // Method "[Ljava/util/logging/Handler;".clone:()Ljava/lang/Object;
      14: checkcast     #23                 // class "[Ljava/util/logging/Handler;"
      17: goto          21
      20: aload_1
      21: areturn

  public java.util.logging.Handler[] clearHandlers() throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_0
       5: getfield      #21                 // Field handlers:[Ljava/util/logging/Handler;
       8: astore_1
       9: getstatic     #7                  // Field handlersUpdater:Lorg/jboss/logmanager/AtomicArray;
      12: aload_0
      13: invokevirtual #8                  // Method org/jboss/logmanager/AtomicArray.clear:(Ljava/lang/Object;)V
      16: aload_1
      17: arraylength
      18: ifle          31
      21: aload_1
      22: invokevirtual #24                 // Method "[Ljava/util/logging/Handler;".clone:()Ljava/lang/Object;
      25: checkcast     #23                 // class "[Ljava/util/logging/Handler;"
      28: goto          32
      31: aload_1
      32: areturn

  public java.util.logging.Handler[] setHandlers(java.util.logging.Handler[]) throws java.lang.SecurityException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #25                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #26                 // String newHandlers is null
      10: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: arraylength
      16: ifne          24
      19: aload_0
      20: invokevirtual #28                 // Method clearHandlers:()[Ljava/util/logging/Handler;
      23: areturn
      24: aload_0
      25: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
      28: getstatic     #7                  // Field handlersUpdater:Lorg/jboss/logmanager/AtomicArray;
      31: aload_0
      32: aload_1
      33: invokevirtual #29                 // Method org/jboss/logmanager/AtomicArray.getAndSet:(Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;
      36: checkcast     #23                 // class "[Ljava/util/logging/Handler;"
      39: astore_2
      40: aload_2
      41: arraylength
      42: ifle          55
      45: aload_2
      46: invokevirtual #30                 // Method "[Ljava/util/logging/Handler;".clone:()Ljava/lang/Object;
      49: checkcast     #23                 // class "[Ljava/util/logging/Handler;"
      52: goto          56
      55: aload_2
      56: areturn

  public boolean isAutoFlush();
    Code:
       0: aload_0
       1: getfield      #2                  // Field autoFlush:Z
       4: ireturn

  public void setAutoFlush(boolean) throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field autoFlush:Z
       9: iload_1
      10: ifeq          17
      13: aload_0
      14: invokevirtual #14                 // Method flush:()V
      17: return

  public final void setEnabled(boolean) throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_0
       5: iload_1
       6: putfield      #3                  // Field enabled:Z
       9: return

  public final boolean isEnabled();
    Code:
       0: aload_0
       1: getfield      #3                  // Field enabled:Z
       4: ireturn

  public final void protect(java.lang.Object) throws java.lang.SecurityException;
    Code:
       0: getstatic     #31                 // Field protectKeyUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: aload_1
       6: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifeq          13
      12: return
      13: new           #33                 // class java/lang/SecurityException
      16: dup
      17: ldc           #34                 // String Log handler already protected
      19: invokespecial #35                 // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
      22: athrow

  public final void unprotect(java.lang.Object) throws java.lang.SecurityException;
    Code:
       0: getstatic     #31                 // Field protectKeyUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: aconst_null
       6: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifeq          13
      12: return
      13: invokestatic  #36                 // Method accessDenied:()Ljava/lang/SecurityException;
      16: athrow

  public final void enableAccess(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #37                 // Field protectKey:Ljava/lang/Object;
       5: if_acmpne     18
       8: aload_0
       9: getfield      #6                  // Field granted:Ljava/lang/ThreadLocal;
      12: getstatic     #38                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      15: invokevirtual #39                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
      18: return

  public final void disableAccess();
    Code:
       0: aload_0
       1: getfield      #6                  // Field granted:Ljava/lang/ThreadLocal;
       4: invokevirtual #40                 // Method java/lang/ThreadLocal.remove:()V
       7: return

  private static java.lang.SecurityException accessDenied();
    Code:
       0: new           #33                 // class java/lang/SecurityException
       3: dup
       4: ldc           #41                 // String Log handler modification access denied
       6: invokespecial #35                 // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
       9: areturn

  protected static void checkAccess() throws java.lang.SecurityException;
    Code:
       0: invokestatic  #42                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_0
       4: aload_0
       5: ifnull        15
       8: aload_0
       9: getstatic     #43                 // Field CONTROL_PERMISSION:Ljava/security/Permission;
      12: invokevirtual #44                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      15: return

  protected static void checkAccess(org.jboss.logmanager.ExtHandler) throws java.lang.SecurityException;
    Code:
       0: invokestatic  #42                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_1
       4: aload_1
       5: ifnull        15
       8: aload_1
       9: getstatic     #43                 // Field CONTROL_PERMISSION:Ljava/security/Permission;
      12: invokevirtual #44                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      15: aload_0
      16: getfield      #37                 // Field protectKey:Ljava/lang/Object;
      19: ifnull        36
      22: aload_0
      23: getfield      #6                  // Field granted:Ljava/lang/ThreadLocal;
      26: invokevirtual #45                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      29: ifnonnull     36
      32: invokestatic  #36                 // Method accessDenied:()Ljava/lang/SecurityException;
      35: athrow
      36: return

  public void flush();
    Code:
       0: aload_0
       1: getfield      #21                 // Field handlers:[Ljava/util/logging/Handler;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     50
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokevirtual #46                 // Method java/util/logging/Handler.flush:()V
      25: goto          44
      28: astore        5
      30: aload_0
      31: ldc           #48                 // String Failed to flush child handler
      33: aload         5
      35: iconst_2
      36: invokevirtual #49                 // Method reportError:(Ljava/lang/String;Ljava/lang/Exception;I)V
      39: goto          44
      42: astore        5
      44: iinc          3, 1
      47: goto          10
      50: return
    Exception table:
       from    to  target type
          20    25    28   Class java/lang/Exception
          20    25    42   Class java/lang/Throwable

  public void close() throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_0
       5: getfield      #21                 // Field handlers:[Ljava/util/logging/Handler;
       8: astore_1
       9: aload_1
      10: arraylength
      11: istore_2
      12: iconst_0
      13: istore_3
      14: iload_3
      15: iload_2
      16: if_icmpge     54
      19: aload_1
      20: iload_3
      21: aaload
      22: astore        4
      24: aload         4
      26: invokevirtual #51                 // Method java/util/logging/Handler.close:()V
      29: goto          48
      32: astore        5
      34: aload_0
      35: ldc           #52                 // String Failed to close child handler
      37: aload         5
      39: iconst_3
      40: invokevirtual #49                 // Method reportError:(Ljava/lang/String;Ljava/lang/Exception;I)V
      43: goto          48
      46: astore        5
      48: iinc          3, 1
      51: goto          14
      54: return
    Exception table:
       from    to  target type
          24    29    32   Class java/lang/Exception
          24    29    46   Class java/lang/Throwable

  public void setFormatter(java.util.logging.Formatter) throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_0
       5: aload_1
       6: invokespecial #53                 // Method java/util/logging/Handler.setFormatter:(Ljava/util/logging/Formatter;)V
       9: return

  public void setFilter(java.util.logging.Filter) throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_0
       5: aload_1
       6: invokespecial #54                 // Method java/util/logging/Handler.setFilter:(Ljava/util/logging/Filter;)V
       9: return

  public void setEncoding(java.lang.String) throws java.lang.SecurityException, java.io.UnsupportedEncodingException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_0
       5: aload_1
       6: invokespecial #55                 // Method java/util/logging/Handler.setEncoding:(Ljava/lang/String;)V
       9: return

  public void setErrorManager(java.util.logging.ErrorManager);
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_0
       5: aload_1
       6: invokespecial #10                 // Method java/util/logging/Handler.setErrorManager:(Ljava/util/logging/ErrorManager;)V
       9: return

  public void setLevel(java.util.logging.Level) throws java.lang.SecurityException;
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method checkAccess:(Lorg/jboss/logmanager/ExtHandler;)V
       4: aload_0
       5: aload_1
       6: invokespecial #56                 // Method java/util/logging/Handler.setLevel:(Ljava/util/logging/Level;)V
       9: return

  static {};
    Code:
       0: new           #57                 // class java/util/logging/LoggingPermission
       3: dup
       4: ldc           #58                 // String control
       6: aconst_null
       7: invokespecial #59                 // Method java/util/logging/LoggingPermission."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      10: putstatic     #43                 // Field CONTROL_PERMISSION:Ljava/security/Permission;
      13: new           #60                 // class org/jboss/logmanager/errormanager/OnlyOnceErrorManager
      16: dup
      17: invokespecial #61                 // Method org/jboss/logmanager/errormanager/OnlyOnceErrorManager."<init>":()V
      20: putstatic     #9                  // Field DEFAULT_ERROR_MANAGER:Ljava/util/logging/ErrorManager;
      23: ldc_w         #62                 // class org/jboss/logmanager/ExtHandler
      26: ldc_w         #63                 // class java/lang/Object
      29: ldc           #64                 // String protectKey
      31: invokestatic  #65                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: putstatic     #31                 // Field protectKeyUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      37: ldc_w         #62                 // class org/jboss/logmanager/ExtHandler
      40: ldc_w         #23                 // class "[Ljava/util/logging/Handler;"
      43: ldc           #66                 // String handlers
      45: invokestatic  #65                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      48: ldc_w         #67                 // class java/util/logging/Handler
      51: invokestatic  #68                 // Method org/jboss/logmanager/AtomicArray.create:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Class;)Lorg/jboss/logmanager/AtomicArray;
      54: putstatic     #7                  // Field handlersUpdater:Lorg/jboss/logmanager/AtomicArray;
      57: return
}
