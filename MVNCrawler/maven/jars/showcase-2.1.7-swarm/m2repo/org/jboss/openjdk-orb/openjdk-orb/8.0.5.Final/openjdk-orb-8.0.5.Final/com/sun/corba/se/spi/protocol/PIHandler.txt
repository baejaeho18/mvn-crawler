Compiled from "PIHandler.java"
public interface com.sun.corba.se.spi.protocol.PIHandler extends java.io.Closeable {
  public abstract void initialize();

  public abstract void destroyInterceptors();

  public abstract void objectAdapterCreated(com.sun.corba.se.spi.oa.ObjectAdapter);

  public abstract void adapterManagerStateChanged(int, short);

  public abstract void adapterStateChanged(org.omg.PortableInterceptor.ObjectReferenceTemplate[], short);

  public abstract void disableInterceptorsThisThread();

  public abstract void enableInterceptorsThisThread();

  public abstract void invokeClientPIStartingPoint() throws org.omg.CORBA.portable.RemarshalException;

  public abstract java.lang.Exception invokeClientPIEndingPoint(int, java.lang.Exception);

  public abstract java.lang.Exception makeCompletedClientRequest(int, java.lang.Exception);

  public abstract void initiateClientPIRequest(boolean);

  public abstract void cleanupClientPIRequest();

  public abstract void setClientPIInfo(com.sun.corba.se.impl.corba.RequestImpl);

  public abstract void setClientPIInfo(com.sun.corba.se.spi.protocol.CorbaMessageMediator);

  public abstract void invokeServerPIStartingPoint();

  public abstract void invokeServerPIIntermediatePoint();

  public abstract void invokeServerPIEndingPoint(com.sun.corba.se.impl.protocol.giopmsgheaders.ReplyMessage);

  public abstract void initializeServerPIInfo(com.sun.corba.se.spi.protocol.CorbaMessageMediator, com.sun.corba.se.spi.oa.ObjectAdapter, byte[], com.sun.corba.se.spi.ior.ObjectKeyTemplate);

  public abstract void setServerPIInfo(java.lang.Object, java.lang.String);

  public abstract void setServerPIInfo(java.lang.Exception);

  public abstract void setServerPIInfo(org.omg.CORBA.NVList);

  public abstract void setServerPIExceptionInfo(org.omg.CORBA.Any);

  public abstract void setServerPIInfo(org.omg.CORBA.Any);

  public abstract void cleanupServerPIRequest();

  public abstract org.omg.CORBA.Policy create_policy(int, org.omg.CORBA.Any) throws org.omg.CORBA.PolicyError;

  public abstract void register_interceptor(org.omg.PortableInterceptor.Interceptor, int) throws org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateName;

  public abstract org.omg.PortableInterceptor.Current getPICurrent();

  public abstract void registerPolicyFactory(int, org.omg.PortableInterceptor.PolicyFactory);

  public abstract int allocateServerRequestId();
}
