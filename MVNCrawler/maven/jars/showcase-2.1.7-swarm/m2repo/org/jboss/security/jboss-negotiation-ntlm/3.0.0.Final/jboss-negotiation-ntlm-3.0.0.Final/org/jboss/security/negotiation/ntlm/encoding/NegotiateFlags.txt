Compiled from "NegotiateFlags.java"
public class org.jboss.security.negotiation.ntlm.encoding.NegotiateFlags {
  private boolean encryption56Bit;

  private boolean explicitKeyExchange;

  private boolean sessionKeyExchange128Bit;

  private boolean negotiateVersion;

  private boolean targetInfo;

  private boolean requestNonNTSessionKey;

  private boolean identify;

  private boolean ntlm2;

  private boolean targetTypeShare;

  private boolean targetTypeServer;

  private boolean targetTypeDomain;

  private boolean alwaysSign;

  private boolean oemWorkstationSupplied;

  private boolean oemDomainSupplied;

  private boolean ntOnly;

  private boolean ntlm;

  private boolean lmKey;

  private boolean datagram;

  private boolean seal;

  private boolean sign;

  private boolean requestTarget;

  private boolean oem;

  private boolean unicode;

  public org.jboss.security.negotiation.ntlm.encoding.NegotiateFlags();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public boolean isEncryption56Bit();
    Code:
       0: aload_0
       1: getfield      #2                  // Field encryption56Bit:Z
       4: ireturn

  public void setEncryption56Bit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field encryption56Bit:Z
       5: return

  public boolean isExplicitKeyExchange();
    Code:
       0: aload_0
       1: getfield      #3                  // Field explicitKeyExchange:Z
       4: ireturn

  public void setExplicitKeyExchange(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field explicitKeyExchange:Z
       5: return

  public boolean isSessionKeyExchange128Bit();
    Code:
       0: aload_0
       1: getfield      #4                  // Field sessionKeyExchange128Bit:Z
       4: ireturn

  public void setSessionKeyExchange128Bit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field sessionKeyExchange128Bit:Z
       5: return

  public boolean isNegotiateVersion();
    Code:
       0: aload_0
       1: getfield      #5                  // Field negotiateVersion:Z
       4: ireturn

  public void setNegotiateVersion(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field negotiateVersion:Z
       5: return

  public boolean isTargetInfo();
    Code:
       0: aload_0
       1: getfield      #6                  // Field targetInfo:Z
       4: ireturn

  public void setTargetInfo(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field targetInfo:Z
       5: return

  public boolean isRequestNonNTSessionKey();
    Code:
       0: aload_0
       1: getfield      #7                  // Field requestNonNTSessionKey:Z
       4: ireturn

  public void setRequestNonNTSessionKey(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field requestNonNTSessionKey:Z
       5: return

  public boolean isIdentify();
    Code:
       0: aload_0
       1: getfield      #8                  // Field identify:Z
       4: ireturn

  public void setIdentify(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field identify:Z
       5: return

  public boolean isNtlm2();
    Code:
       0: aload_0
       1: getfield      #9                  // Field ntlm2:Z
       4: ireturn

  public void setNtlm2(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field ntlm2:Z
       5: return

  public boolean isTargetTypeShare();
    Code:
       0: aload_0
       1: getfield      #10                 // Field targetTypeShare:Z
       4: ireturn

  public void setTargetTypeShare(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field targetTypeShare:Z
       5: return

  public boolean isTargetTypeServer();
    Code:
       0: aload_0
       1: getfield      #11                 // Field targetTypeServer:Z
       4: ireturn

  public void setTargetTypeServer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field targetTypeServer:Z
       5: return

  public boolean isTargetTypeDomain();
    Code:
       0: aload_0
       1: getfield      #12                 // Field targetTypeDomain:Z
       4: ireturn

  public void setTargetTypeDomain(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field targetTypeDomain:Z
       5: return

  public boolean isAlwaysSign();
    Code:
       0: aload_0
       1: getfield      #13                 // Field alwaysSign:Z
       4: ireturn

  public void setAlwaysSign(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field alwaysSign:Z
       5: return

  public boolean isOemWorkstationSupplied();
    Code:
       0: aload_0
       1: getfield      #14                 // Field oemWorkstationSupplied:Z
       4: ireturn

  public void setOemWorkstationSupplied(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field oemWorkstationSupplied:Z
       5: return

  public boolean isOemDomainSupplied();
    Code:
       0: aload_0
       1: getfield      #15                 // Field oemDomainSupplied:Z
       4: ireturn

  public void setOemDomainSupplied(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field oemDomainSupplied:Z
       5: return

  public boolean isNtOnly();
    Code:
       0: aload_0
       1: getfield      #16                 // Field ntOnly:Z
       4: ireturn

  public void setNtOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field ntOnly:Z
       5: return

  public boolean isNtlm();
    Code:
       0: aload_0
       1: getfield      #17                 // Field ntlm:Z
       4: ireturn

  public void setNtlm(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field ntlm:Z
       5: return

  public boolean isLmKey();
    Code:
       0: aload_0
       1: getfield      #18                 // Field lmKey:Z
       4: ireturn

  public void setLmKey(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field lmKey:Z
       5: return

  public boolean isDatagram();
    Code:
       0: aload_0
       1: getfield      #19                 // Field datagram:Z
       4: ireturn

  public void setDatagram(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #19                 // Field datagram:Z
       5: return

  public boolean isSeal();
    Code:
       0: aload_0
       1: getfield      #20                 // Field seal:Z
       4: ireturn

  public void setSeal(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #20                 // Field seal:Z
       5: return

  public boolean isSign();
    Code:
       0: aload_0
       1: getfield      #21                 // Field sign:Z
       4: ireturn

  public void setSign(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field sign:Z
       5: return

  public boolean isRequestTarget();
    Code:
       0: aload_0
       1: getfield      #22                 // Field requestTarget:Z
       4: ireturn

  public void setRequestTarget(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field requestTarget:Z
       5: return

  public boolean isOem();
    Code:
       0: aload_0
       1: getfield      #23                 // Field oem:Z
       4: ireturn

  public void setOem(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field oem:Z
       5: return

  public boolean isUnicode();
    Code:
       0: aload_0
       1: getfield      #24                 // Field unicode:Z
       4: ireturn

  public void setUnicode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field unicode:Z
       5: return

  public java.lang.String toString();
    Code:
       0: new           #25                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #27                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      12: invokevirtual #28                 // Method java/lang/Class.getDeclaredFields:()[Ljava/lang/reflect/Field;
      15: astore_2
      16: aload_2
      17: astore_3
      18: aload_3
      19: arraylength
      20: istore        4
      22: iconst_0
      23: istore        5
      25: iload         5
      27: iload         4
      29: if_icmpge     97
      32: aload_3
      33: iload         5
      35: aaload
      36: astore        6
      38: aload         6
      40: invokevirtual #29                 // Method java/lang/reflect/Field.getType:()Ljava/lang/Class;
      43: getstatic     #30                 // Field java/lang/Boolean.TYPE:Ljava/lang/Class;
      46: invokevirtual #31                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      49: ifeq          91
      52: aload         6
      54: aload_0
      55: invokevirtual #32                 // Method java/lang/reflect/Field.getBoolean:(Ljava/lang/Object;)Z
      58: istore        7
      60: iload         7
      62: iconst_1
      63: if_icmpne     86
      66: aload_1
      67: ldc           #33                 // String (
      69: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: aload         6
      74: invokevirtual #35                 // Method java/lang/reflect/Field.getName:()Ljava/lang/String;
      77: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: ldc           #36                 // String )
      82: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: pop
      86: goto          91
      89: astore        7
      91: iinc          5, 1
      94: goto          25
      97: aload_1
      98: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     101: areturn
    Exception table:
       from    to  target type
          52    86    89   Class java/lang/Exception
}
