Compiled from "LongCounterNonce.java"
public class org.cryptacular.generator.sp80038a.LongCounterNonce implements org.cryptacular.generator.Nonce {
  private final java.util.concurrent.atomic.AtomicLong counter;

  public org.cryptacular.generator.sp80038a.LongCounterNonce();
    Code:
       0: aload_0
       1: lconst_0
       2: invokespecial #1                  // Method "<init>":(J)V
       5: return

  public org.cryptacular.generator.sp80038a.LongCounterNonce(long);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: lload_1
      10: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      13: putfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
      16: return

  public byte[] generate() throws org.cryptacular.generator.LimitException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: invokestatic  #7                  // Method org/cryptacular/util/ByteUtil.toBytes:(J)[B
      10: areturn

  public int getLength();
    Code:
       0: bipush        8
       2: ireturn
}
