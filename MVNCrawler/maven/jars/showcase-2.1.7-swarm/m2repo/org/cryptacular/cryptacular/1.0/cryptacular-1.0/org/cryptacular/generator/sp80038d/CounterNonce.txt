Compiled from "CounterNonce.java"
public class org.cryptacular.generator.sp80038d.CounterNonce implements org.cryptacular.generator.Nonce {
  public static final int DEFAULT_LENGTH;

  public static final long MAX_INVOCATIONS;

  private final byte[] fixed;

  private final java.util.concurrent.atomic.AtomicLong count;

  public org.cryptacular.generator.sp80038d.CounterNonce(java.lang.String, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method org/cryptacular/util/ByteUtil.toBytes:(Ljava/lang/String;)[B
       5: lload_2
       6: invokespecial #2                  // Method "<init>":([BJ)V
       9: return

  public org.cryptacular.generator.sp80038d.CounterNonce(int, long);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #3                  // Method org/cryptacular/util/ByteUtil.toBytes:(I)[B
       5: lload_2
       6: invokespecial #2                  // Method "<init>":([BJ)V
       9: return

  public org.cryptacular.generator.sp80038d.CounterNonce(long, long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #4                  // Method org/cryptacular/util/ByteUtil.toBytes:(J)[B
       5: lload_3
       6: invokespecial #2                  // Method "<init>":([BJ)V
       9: return

  public org.cryptacular.generator.sp80038d.CounterNonce(byte[], long);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnull        13
       8: aload_1
       9: arraylength
      10: ifne          23
      13: new           #6                  // class java/lang/IllegalArgumentException
      16: dup
      17: ldc           #7                  // String Fixed part cannot be null or empty.
      19: invokespecial #8                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: aload_0
      24: new           #9                  // class java/util/concurrent/atomic/AtomicLong
      27: dup
      28: lload_2
      29: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      32: putfield      #11                 // Field count:Ljava/util/concurrent/atomic/AtomicLong;
      35: aload_0
      36: aload_1
      37: putfield      #12                 // Field fixed:[B
      40: return

  public byte[] generate() throws org.cryptacular.generator.LimitException;
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getLength:()I
       4: newarray       byte
       6: astore_1
       7: aload_0
       8: getfield      #12                 // Field fixed:[B
      11: iconst_0
      12: aload_1
      13: iconst_0
      14: aload_0
      15: getfield      #12                 // Field fixed:[B
      18: arraylength
      19: invokestatic  #14                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      22: aload_0
      23: getfield      #11                 // Field count:Ljava/util/concurrent/atomic/AtomicLong;
      26: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      29: lstore_2
      30: aload_1
      31: arraylength
      32: bipush        12
      34: if_icmpeq     55
      37: lload_2
      38: ldc2_w        #16                 // long 4294967295l
      41: lcmp
      42: ifle          55
      45: new           #18                 // class org/cryptacular/generator/LimitException
      48: dup
      49: ldc           #19                 // String Exceeded 2^32 invocations.
      51: invokespecial #20                 // Method org/cryptacular/generator/LimitException."<init>":(Ljava/lang/String;)V
      54: athrow
      55: lload_2
      56: aload_1
      57: aload_0
      58: getfield      #12                 // Field fixed:[B
      61: arraylength
      62: invokestatic  #21                 // Method org/cryptacular/util/ByteUtil.toBytes:(J[BI)V
      65: aload_1
      66: areturn

  public int getLength();
    Code:
       0: aload_0
       1: getfield      #12                 // Field fixed:[B
       4: arraylength
       5: bipush        8
       7: iadd
       8: ireturn

  public long getInvocations();
    Code:
       0: aload_0
       1: getfield      #11                 // Field count:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn
}
