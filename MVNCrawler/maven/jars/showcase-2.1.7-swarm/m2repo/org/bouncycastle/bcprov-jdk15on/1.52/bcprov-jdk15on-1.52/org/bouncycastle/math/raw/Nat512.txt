public abstract class org.bouncycastle.math.raw.Nat512 {
  public org.bouncycastle.math.raw.Nat512();
    Code:
       0: aload_0
       1: invokespecial #43                 // Method java/lang/Object."<init>":()V
       4: return

  public static void mul(int[], int[], int[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #55                 // Method org/bouncycastle/math/raw/Nat256.mul:([I[I[I)V
       6: aload_0
       7: bipush        8
       9: aload_1
      10: bipush        8
      12: aload_2
      13: bipush        16
      15: invokestatic  #52                 // Method org/bouncycastle/math/raw/Nat256.mul:([II[II[II)V
      18: aload_2
      19: bipush        8
      21: aload_2
      22: bipush        16
      24: invokestatic  #49                 // Method org/bouncycastle/math/raw/Nat256.addToEachOther:([II[II)I
      27: istore_3
      28: iload_3
      29: aload_2
      30: iconst_0
      31: aload_2
      32: bipush        8
      34: iconst_0
      35: invokestatic  #51                 // Method org/bouncycastle/math/raw/Nat256.addTo:([II[III)I
      38: iadd
      39: istore        4
      41: iload_3
      42: aload_2
      43: bipush        24
      45: aload_2
      46: bipush        16
      48: iload         4
      50: invokestatic  #51                 // Method org/bouncycastle/math/raw/Nat256.addTo:([II[III)I
      53: iadd
      54: istore_3
      55: invokestatic  #47                 // Method org/bouncycastle/math/raw/Nat256.create:()[I
      58: astore        5
      60: invokestatic  #47                 // Method org/bouncycastle/math/raw/Nat256.create:()[I
      63: astore        6
      65: aload_0
      66: bipush        8
      68: aload_0
      69: iconst_0
      70: aload         5
      72: iconst_0
      73: invokestatic  #53                 // Method org/bouncycastle/math/raw/Nat256.diff:([II[II[II)Z
      76: aload_1
      77: bipush        8
      79: aload_1
      80: iconst_0
      81: aload         6
      83: iconst_0
      84: invokestatic  #53                 // Method org/bouncycastle/math/raw/Nat256.diff:([II[II[II)Z
      87: if_icmpeq     94
      90: iconst_1
      91: goto          95
      94: iconst_0
      95: istore        7
      97: invokestatic  #48                 // Method org/bouncycastle/math/raw/Nat256.createExt:()[I
     100: astore        8
     102: aload         5
     104: aload         6
     106: aload         8
     108: invokestatic  #55                 // Method org/bouncycastle/math/raw/Nat256.mul:([I[I[I)V
     111: iload_3
     112: iload         7
     114: ifeq          131
     117: bipush        16
     119: aload         8
     121: iconst_0
     122: aload_2
     123: bipush        8
     125: invokestatic  #45                 // Method org/bouncycastle/math/raw/Nat.addTo:(I[II[II)I
     128: goto          142
     131: bipush        16
     133: aload         8
     135: iconst_0
     136: aload_2
     137: bipush        8
     139: invokestatic  #46                 // Method org/bouncycastle/math/raw/Nat.subFrom:(I[II[II)I
     142: iadd
     143: istore_3
     144: bipush        32
     146: iload_3
     147: aload_2
     148: bipush        24
     150: invokestatic  #44                 // Method org/bouncycastle/math/raw/Nat.addWordAt:(II[II)I
     153: pop
     154: return

  public static void square(int[], int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #54                 // Method org/bouncycastle/math/raw/Nat256.square:([I[I)V
       5: aload_0
       6: bipush        8
       8: aload_1
       9: bipush        16
      11: invokestatic  #50                 // Method org/bouncycastle/math/raw/Nat256.square:([II[II)V
      14: aload_1
      15: bipush        8
      17: aload_1
      18: bipush        16
      20: invokestatic  #49                 // Method org/bouncycastle/math/raw/Nat256.addToEachOther:([II[II)I
      23: istore_2
      24: iload_2
      25: aload_1
      26: iconst_0
      27: aload_1
      28: bipush        8
      30: iconst_0
      31: invokestatic  #51                 // Method org/bouncycastle/math/raw/Nat256.addTo:([II[III)I
      34: iadd
      35: istore_3
      36: iload_2
      37: aload_1
      38: bipush        24
      40: aload_1
      41: bipush        16
      43: iload_3
      44: invokestatic  #51                 // Method org/bouncycastle/math/raw/Nat256.addTo:([II[III)I
      47: iadd
      48: istore_2
      49: invokestatic  #47                 // Method org/bouncycastle/math/raw/Nat256.create:()[I
      52: astore        4
      54: aload_0
      55: bipush        8
      57: aload_0
      58: iconst_0
      59: aload         4
      61: iconst_0
      62: invokestatic  #53                 // Method org/bouncycastle/math/raw/Nat256.diff:([II[II[II)Z
      65: pop
      66: invokestatic  #48                 // Method org/bouncycastle/math/raw/Nat256.createExt:()[I
      69: astore        5
      71: aload         4
      73: aload         5
      75: invokestatic  #54                 // Method org/bouncycastle/math/raw/Nat256.square:([I[I)V
      78: iload_2
      79: bipush        16
      81: aload         5
      83: iconst_0
      84: aload_1
      85: bipush        8
      87: invokestatic  #46                 // Method org/bouncycastle/math/raw/Nat.subFrom:(I[II[II)I
      90: iadd
      91: istore_2
      92: bipush        32
      94: iload_2
      95: aload_1
      96: bipush        24
      98: invokestatic  #44                 // Method org/bouncycastle/math/raw/Nat.addWordAt:(II[II)I
     101: pop
     102: return
}
