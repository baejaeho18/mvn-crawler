public abstract class org.bouncycastle.math.ec.ECFieldElement implements org.bouncycastle.math.ec.ECConstants {
  public org.bouncycastle.math.ec.ECFieldElement();
    Code:
       0: aload_0
       1: invokespecial #68                 // Method java/lang/Object."<init>":()V
       4: return

  public abstract java.math.BigInteger toBigInteger();

  public abstract java.lang.String getFieldName();

  public abstract int getFieldSize();

  public abstract org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement);

  public abstract org.bouncycastle.math.ec.ECFieldElement addOne();

  public abstract org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement);

  public abstract org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement);

  public abstract org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement);

  public abstract org.bouncycastle.math.ec.ECFieldElement negate();

  public abstract org.bouncycastle.math.ec.ECFieldElement square();

  public abstract org.bouncycastle.math.ec.ECFieldElement invert();

  public abstract org.bouncycastle.math.ec.ECFieldElement sqrt();

  public int bitLength();
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method toBigInteger:()Ljava/math/BigInteger;
       4: invokevirtual #69                 // Method java/math/BigInteger.bitLength:()I
       7: ireturn

  public boolean isOne();
    Code:
       0: aload_0
       1: invokevirtual #73                 // Method bitLength:()I
       4: iconst_1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public boolean isZero();
    Code:
       0: iconst_0
       1: aload_0
       2: invokevirtual #75                 // Method toBigInteger:()Ljava/math/BigInteger;
       5: invokevirtual #70                 // Method java/math/BigInteger.signum:()I
       8: if_icmpne     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public org.bouncycastle.math.ec.ECFieldElement multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement, org.bouncycastle.math.ec.ECFieldElement, org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #78                 // Method multiply:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
       5: aload_2
       6: aload_3
       7: invokevirtual #78                 // Method multiply:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
      10: invokevirtual #79                 // Method subtract:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
      13: areturn

  public org.bouncycastle.math.ec.ECFieldElement multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement, org.bouncycastle.math.ec.ECFieldElement, org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #78                 // Method multiply:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
       5: aload_2
       6: aload_3
       7: invokevirtual #78                 // Method multiply:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
      10: invokevirtual #77                 // Method add:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
      13: areturn

  public org.bouncycastle.math.ec.ECFieldElement squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement, org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: aload_0
       1: invokevirtual #76                 // Method square:()Lorg/bouncycastle/math/ec/ECFieldElement;
       4: aload_1
       5: aload_2
       6: invokevirtual #78                 // Method multiply:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
       9: invokevirtual #79                 // Method subtract:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
      12: areturn

  public org.bouncycastle.math.ec.ECFieldElement squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement, org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: aload_0
       1: invokevirtual #76                 // Method square:()Lorg/bouncycastle/math/ec/ECFieldElement;
       4: aload_1
       5: aload_2
       6: invokevirtual #78                 // Method multiply:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
       9: invokevirtual #77                 // Method add:(Lorg/bouncycastle/math/ec/ECFieldElement;)Lorg/bouncycastle/math/ec/ECFieldElement;
      12: areturn

  public boolean testBitZero();
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method toBigInteger:()Ljava/math/BigInteger;
       4: iconst_0
       5: invokevirtual #71                 // Method java/math/BigInteger.testBit:(I)Z
       8: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method toBigInteger:()Ljava/math/BigInteger;
       4: bipush        16
       6: invokevirtual #72                 // Method java/math/BigInteger.toString:(I)Ljava/lang/String;
       9: areturn

  public byte[] getEncoded();
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method getFieldSize:()I
       4: bipush        7
       6: iadd
       7: bipush        8
       9: idiv
      10: aload_0
      11: invokevirtual #75                 // Method toBigInteger:()Ljava/math/BigInteger;
      14: invokestatic  #80                 // Method org/bouncycastle/util/BigIntegers.asUnsignedByteArray:(ILjava/math/BigInteger;)[B
      17: areturn
}
