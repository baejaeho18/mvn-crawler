public class org.bouncycastle.math.ec.custom.sec.SecP521R1Field {
  static final int[] P;

  private static final int P16;

  public org.bouncycastle.math.ec.custom.sec.SecP521R1Field();
    Code:
       0: aload_0
       1: invokespecial #89                 // Method java/lang/Object."<init>":()V
       4: return

  public static void add(int[], int[], int[]);
    Code:
       0: bipush        16
       2: aload_0
       3: aload_1
       4: aload_2
       5: invokestatic  #107                // Method org/bouncycastle/math/raw/Nat.add:(I[I[I[I)I
       8: aload_0
       9: bipush        16
      11: iaload
      12: iadd
      13: aload_1
      14: bipush        16
      16: iaload
      17: iadd
      18: istore_3
      19: iload_3
      20: sipush        511
      23: if_icmpgt     45
      26: iload_3
      27: sipush        511
      30: if_icmpne     60
      33: bipush        16
      35: aload_2
      36: getstatic     #88                 // Field P:[I
      39: invokestatic  #106                // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      42: ifeq          60
      45: iload_3
      46: bipush        16
      48: aload_2
      49: invokestatic  #98                 // Method org/bouncycastle/math/raw/Nat.inc:(I[I)I
      52: iadd
      53: istore_3
      54: iload_3
      55: sipush        511
      58: iand
      59: istore_3
      60: aload_2
      61: bipush        16
      63: iload_3
      64: iastore
      65: return

  public static void addOne(int[], int[]);
    Code:
       0: bipush        16
       2: aload_0
       3: aload_1
       4: invokestatic  #105                // Method org/bouncycastle/math/raw/Nat.inc:(I[I[I)I
       7: aload_0
       8: bipush        16
      10: iaload
      11: iadd
      12: istore_2
      13: iload_2
      14: sipush        511
      17: if_icmpgt     39
      20: iload_2
      21: sipush        511
      24: if_icmpne     54
      27: bipush        16
      29: aload_1
      30: getstatic     #88                 // Field P:[I
      33: invokestatic  #106                // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      36: ifeq          54
      39: iload_2
      40: bipush        16
      42: aload_1
      43: invokestatic  #98                 // Method org/bouncycastle/math/raw/Nat.inc:(I[I)I
      46: iadd
      47: istore_2
      48: iload_2
      49: sipush        511
      52: iand
      53: istore_2
      54: aload_1
      55: bipush        16
      57: iload_2
      58: iastore
      59: return

  public static int[] fromBigInteger(java.math.BigInteger);
    Code:
       0: sipush        521
       3: aload_0
       4: invokestatic  #109                // Method org/bouncycastle/math/raw/Nat.fromBigInteger:(ILjava/math/BigInteger;)[I
       7: astore_1
       8: bipush        17
      10: aload_1
      11: getstatic     #88                 // Field P:[I
      14: invokestatic  #106                // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      17: ifeq          26
      20: bipush        17
      22: aload_1
      23: invokestatic  #99                 // Method org/bouncycastle/math/raw/Nat.zero:(I[I)V
      26: aload_1
      27: areturn

  public static void half(int[], int[]);
    Code:
       0: aload_0
       1: bipush        16
       3: iaload
       4: istore_2
       5: bipush        16
       7: aload_0
       8: iload_2
       9: aload_1
      10: invokestatic  #102                // Method org/bouncycastle/math/raw/Nat.shiftDownBit:(I[II[I)I
      13: istore_3
      14: aload_1
      15: bipush        16
      17: iload_2
      18: iconst_1
      19: iushr
      20: iload_3
      21: bipush        23
      23: iushr
      24: ior
      25: iastore
      26: return

  public static void multiply(int[], int[], int[]);
    Code:
       0: bipush        33
       2: invokestatic  #93                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
       5: astore_3
       6: aload_0
       7: aload_1
       8: aload_3
       9: invokestatic  #92                 // Method implMultiply:([I[I[I)V
      12: aload_3
      13: aload_2
      14: invokestatic  #91                 // Method reduce:([I[I)V
      17: return

  public static void negate(int[], int[]);
    Code:
       0: bipush        17
       2: aload_0
       3: invokestatic  #100                // Method org/bouncycastle/math/raw/Nat.isZero:(I[I)Z
       6: ifeq          18
       9: bipush        17
      11: aload_1
      12: invokestatic  #99                 // Method org/bouncycastle/math/raw/Nat.zero:(I[I)V
      15: goto          29
      18: bipush        17
      20: getstatic     #88                 // Field P:[I
      23: aload_0
      24: aload_1
      25: invokestatic  #108                // Method org/bouncycastle/math/raw/Nat.sub:(I[I[I[I)I
      28: pop
      29: return

  public static void reduce(int[], int[]);
    Code:
       0: aload_0
       1: bipush        32
       3: iaload
       4: istore_2
       5: bipush        16
       7: aload_0
       8: bipush        16
      10: bipush        9
      12: iload_2
      13: aload_1
      14: iconst_0
      15: invokestatic  #101                // Method org/bouncycastle/math/raw/Nat.shiftDownBits:(I[IIII[II)I
      18: bipush        23
      20: iushr
      21: istore_3
      22: iload_3
      23: iload_2
      24: bipush        9
      26: iushr
      27: iadd
      28: istore_3
      29: iload_3
      30: bipush        16
      32: aload_0
      33: aload_1
      34: invokestatic  #104                // Method org/bouncycastle/math/raw/Nat.addTo:(I[I[I)I
      37: iadd
      38: istore_3
      39: iload_3
      40: sipush        511
      43: if_icmpgt     65
      46: iload_3
      47: sipush        511
      50: if_icmpne     80
      53: bipush        16
      55: aload_1
      56: getstatic     #88                 // Field P:[I
      59: invokestatic  #106                // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      62: ifeq          80
      65: iload_3
      66: bipush        16
      68: aload_1
      69: invokestatic  #98                 // Method org/bouncycastle/math/raw/Nat.inc:(I[I)I
      72: iadd
      73: istore_3
      74: iload_3
      75: sipush        511
      78: iand
      79: istore_3
      80: aload_1
      81: bipush        16
      83: iload_3
      84: iastore
      85: return

  public static void reduce23(int[]);
    Code:
       0: aload_0
       1: bipush        16
       3: iaload
       4: istore_1
       5: bipush        16
       7: iload_1
       8: bipush        9
      10: iushr
      11: aload_0
      12: invokestatic  #94                 // Method org/bouncycastle/math/raw/Nat.addWordTo:(II[I)I
      15: iload_1
      16: sipush        511
      19: iand
      20: iadd
      21: istore_2
      22: iload_2
      23: sipush        511
      26: if_icmpgt     48
      29: iload_2
      30: sipush        511
      33: if_icmpne     63
      36: bipush        16
      38: aload_0
      39: getstatic     #88                 // Field P:[I
      42: invokestatic  #106                // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      45: ifeq          63
      48: iload_2
      49: bipush        16
      51: aload_0
      52: invokestatic  #98                 // Method org/bouncycastle/math/raw/Nat.inc:(I[I)I
      55: iadd
      56: istore_2
      57: iload_2
      58: sipush        511
      61: iand
      62: istore_2
      63: aload_0
      64: bipush        16
      66: iload_2
      67: iastore
      68: return

  public static void square(int[], int[]);
    Code:
       0: bipush        33
       2: invokestatic  #93                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
       5: astore_2
       6: aload_0
       7: aload_2
       8: invokestatic  #90                 // Method implSquare:([I[I)V
      11: aload_2
      12: aload_1
      13: invokestatic  #91                 // Method reduce:([I[I)V
      16: return

  public static void squareN(int[], int, int[]);
    Code:
       0: bipush        33
       2: invokestatic  #93                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
       5: astore_3
       6: aload_0
       7: aload_3
       8: invokestatic  #90                 // Method implSquare:([I[I)V
      11: aload_3
      12: aload_2
      13: invokestatic  #91                 // Method reduce:([I[I)V
      16: iinc          1, -1
      19: iload_1
      20: ifle          36
      23: aload_2
      24: aload_3
      25: invokestatic  #90                 // Method implSquare:([I[I)V
      28: aload_3
      29: aload_2
      30: invokestatic  #91                 // Method reduce:([I[I)V
      33: goto          16
      36: return

  public static void subtract(int[], int[], int[]);
    Code:
       0: bipush        16
       2: aload_0
       3: aload_1
       4: aload_2
       5: invokestatic  #108                // Method org/bouncycastle/math/raw/Nat.sub:(I[I[I[I)I
       8: aload_0
       9: bipush        16
      11: iaload
      12: iadd
      13: aload_1
      14: bipush        16
      16: iaload
      17: isub
      18: istore_3
      19: iload_3
      20: ifge          38
      23: iload_3
      24: bipush        16
      26: aload_2
      27: invokestatic  #97                 // Method org/bouncycastle/math/raw/Nat.dec:(I[I)I
      30: iadd
      31: istore_3
      32: iload_3
      33: sipush        511
      36: iand
      37: istore_3
      38: aload_2
      39: bipush        16
      41: iload_3
      42: iastore
      43: return

  public static void twice(int[], int[]);
    Code:
       0: aload_0
       1: bipush        16
       3: iaload
       4: istore_2
       5: bipush        16
       7: aload_0
       8: iload_2
       9: bipush        23
      11: ishl
      12: aload_1
      13: invokestatic  #103                // Method org/bouncycastle/math/raw/Nat.shiftUpBit:(I[II[I)I
      16: iload_2
      17: iconst_1
      18: ishl
      19: ior
      20: istore_3
      21: aload_1
      22: bipush        16
      24: iload_3
      25: sipush        511
      28: iand
      29: iastore
      30: return

  protected static void implMultiply(int[], int[], int[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #111                // Method org/bouncycastle/math/raw/Nat512.mul:([I[I[I)V
       6: aload_0
       7: bipush        16
       9: iaload
      10: istore_3
      11: aload_1
      12: bipush        16
      14: iaload
      15: istore        4
      17: aload_2
      18: bipush        32
      20: bipush        16
      22: iload_3
      23: aload_1
      24: iload         4
      26: aload_0
      27: aload_2
      28: bipush        16
      30: invokestatic  #96                 // Method org/bouncycastle/math/raw/Nat.mul31BothAdd:(II[II[I[II)I
      33: iload_3
      34: iload         4
      36: imul
      37: iadd
      38: iastore
      39: return

  protected static void implSquare(int[], int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #110                // Method org/bouncycastle/math/raw/Nat512.square:([I[I)V
       5: aload_0
       6: bipush        16
       8: iaload
       9: istore_2
      10: aload_1
      11: bipush        32
      13: bipush        16
      15: iload_2
      16: iconst_1
      17: ishl
      18: aload_0
      19: iconst_0
      20: aload_1
      21: bipush        16
      23: invokestatic  #95                 // Method org/bouncycastle/math/raw/Nat.mulWordAddTo:(II[II[II)I
      26: iload_2
      27: iload_2
      28: imul
      29: iadd
      30: iastore
      31: return

  static {};
    Code:
       0: bipush        17
       2: newarray       int
       4: dup
       5: iconst_0
       6: iconst_m1
       7: iastore
       8: dup
       9: iconst_1
      10: iconst_m1
      11: iastore
      12: dup
      13: iconst_2
      14: iconst_m1
      15: iastore
      16: dup
      17: iconst_3
      18: iconst_m1
      19: iastore
      20: dup
      21: iconst_4
      22: iconst_m1
      23: iastore
      24: dup
      25: iconst_5
      26: iconst_m1
      27: iastore
      28: dup
      29: bipush        6
      31: iconst_m1
      32: iastore
      33: dup
      34: bipush        7
      36: iconst_m1
      37: iastore
      38: dup
      39: bipush        8
      41: iconst_m1
      42: iastore
      43: dup
      44: bipush        9
      46: iconst_m1
      47: iastore
      48: dup
      49: bipush        10
      51: iconst_m1
      52: iastore
      53: dup
      54: bipush        11
      56: iconst_m1
      57: iastore
      58: dup
      59: bipush        12
      61: iconst_m1
      62: iastore
      63: dup
      64: bipush        13
      66: iconst_m1
      67: iastore
      68: dup
      69: bipush        14
      71: iconst_m1
      72: iastore
      73: dup
      74: bipush        15
      76: iconst_m1
      77: iastore
      78: dup
      79: bipush        16
      81: sipush        511
      84: iastore
      85: putstatic     #88                 // Field P:[I
      88: return
}
