public class org.bouncycastle.crypto.prng.X931RNG {
  private static final long BLOCK64_RESEED_MAX;

  private static final long BLOCK128_RESEED_MAX;

  private static final int BLOCK64_MAX_BITS_REQUEST;

  private static final int BLOCK128_MAX_BITS_REQUEST;

  private final org.bouncycastle.crypto.BlockCipher engine;

  private final org.bouncycastle.crypto.prng.EntropySource entropySource;

  private final byte[] DT;

  private final byte[] I;

  private final byte[] R;

  private byte[] V;

  private long reseedCounter;

  public org.bouncycastle.crypto.prng.X931RNG(org.bouncycastle.crypto.BlockCipher, byte[], org.bouncycastle.crypto.prng.EntropySource);
    Code:
       0: aload_0
       1: invokespecial #84                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_1
       6: putfield      #76                 // Field reseedCounter:J
       9: aload_0
      10: aload_1
      11: putfield      #81                 // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
      14: aload_0
      15: aload_3
      16: putfield      #82                 // Field entropySource:Lorg/bouncycastle/crypto/prng/EntropySource;
      19: aload_0
      20: aload_1
      21: invokeinterface #89,  1           // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getBlockSize:()I
      26: newarray       byte
      28: putfield      #77                 // Field DT:[B
      31: aload_2
      32: iconst_0
      33: aload_0
      34: getfield      #77                 // Field DT:[B
      37: iconst_0
      38: aload_0
      39: getfield      #77                 // Field DT:[B
      42: arraylength
      43: invokestatic  #85                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      46: aload_0
      47: aload_1
      48: invokeinterface #89,  1           // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getBlockSize:()I
      53: newarray       byte
      55: putfield      #78                 // Field I:[B
      58: aload_0
      59: aload_1
      60: invokeinterface #89,  1           // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getBlockSize:()I
      65: newarray       byte
      67: putfield      #79                 // Field R:[B
      70: return

  int generate(byte[], boolean);
    Code:
       0: aload_0
       1: getfield      #79                 // Field R:[B
       4: arraylength
       5: bipush        8
       7: if_icmpne     43
      10: aload_0
      11: getfield      #76                 // Field reseedCounter:J
      14: ldc2_w        #45                 // long 32768l
      17: lcmp
      18: ifle          23
      21: iconst_m1
      22: ireturn
      23: aload_1
      24: sipush        512
      27: invokestatic  #87                 // Method isTooLarge:([BI)Z
      30: ifeq          75
      33: new           #49                 // class java/lang/IllegalArgumentException
      36: dup
      37: ldc           #3                  // String Number of bits per request limited to 4096
      39: invokespecial #83                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_0
      44: getfield      #76                 // Field reseedCounter:J
      47: ldc2_w        #47                 // long 8388608l
      50: lcmp
      51: ifle          56
      54: iconst_m1
      55: ireturn
      56: aload_1
      57: ldc           #1                  // int 32768
      59: invokestatic  #87                 // Method isTooLarge:([BI)Z
      62: ifeq          75
      65: new           #49                 // class java/lang/IllegalArgumentException
      68: dup
      69: ldc           #2                  // String Number of bits per request limited to 262144
      71: invokespecial #83                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      74: athrow
      75: iload_2
      76: ifne          86
      79: aload_0
      80: getfield      #80                 // Field V:[B
      83: ifnonnull     99
      86: aload_0
      87: aload_0
      88: getfield      #82                 // Field entropySource:Lorg/bouncycastle/crypto/prng/EntropySource;
      91: invokeinterface #91,  1           // InterfaceMethod org/bouncycastle/crypto/prng/EntropySource.getEntropy:()[B
      96: putfield      #80                 // Field V:[B
      99: aload_1
     100: arraylength
     101: aload_0
     102: getfield      #79                 // Field R:[B
     105: arraylength
     106: idiv
     107: istore_3
     108: iconst_0
     109: istore        4
     111: iload         4
     113: iload_3
     114: if_icmpge     205
     117: aload_0
     118: getfield      #81                 // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
     121: aload_0
     122: getfield      #77                 // Field DT:[B
     125: iconst_0
     126: aload_0
     127: getfield      #78                 // Field I:[B
     130: iconst_0
     131: invokeinterface #90,  5           // InterfaceMethod org/bouncycastle/crypto/BlockCipher.processBlock:([BI[BI)I
     136: pop
     137: aload_0
     138: aload_0
     139: getfield      #79                 // Field R:[B
     142: aload_0
     143: getfield      #78                 // Field I:[B
     146: aload_0
     147: getfield      #80                 // Field V:[B
     150: invokespecial #88                 // Method process:([B[B[B)V
     153: aload_0
     154: aload_0
     155: getfield      #80                 // Field V:[B
     158: aload_0
     159: getfield      #79                 // Field R:[B
     162: aload_0
     163: getfield      #78                 // Field I:[B
     166: invokespecial #88                 // Method process:([B[B[B)V
     169: aload_0
     170: getfield      #79                 // Field R:[B
     173: iconst_0
     174: aload_1
     175: iload         4
     177: aload_0
     178: getfield      #79                 // Field R:[B
     181: arraylength
     182: imul
     183: aload_0
     184: getfield      #79                 // Field R:[B
     187: arraylength
     188: invokestatic  #85                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     191: aload_0
     192: aload_0
     193: getfield      #77                 // Field DT:[B
     196: invokespecial #86                 // Method increment:([B)V
     199: iinc          4, 1
     202: goto          111
     205: aload_1
     206: arraylength
     207: iload_3
     208: aload_0
     209: getfield      #79                 // Field R:[B
     212: arraylength
     213: imul
     214: isub
     215: istore        4
     217: iload         4
     219: ifle          300
     222: aload_0
     223: getfield      #81                 // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
     226: aload_0
     227: getfield      #77                 // Field DT:[B
     230: iconst_0
     231: aload_0
     232: getfield      #78                 // Field I:[B
     235: iconst_0
     236: invokeinterface #90,  5           // InterfaceMethod org/bouncycastle/crypto/BlockCipher.processBlock:([BI[BI)I
     241: pop
     242: aload_0
     243: aload_0
     244: getfield      #79                 // Field R:[B
     247: aload_0
     248: getfield      #78                 // Field I:[B
     251: aload_0
     252: getfield      #80                 // Field V:[B
     255: invokespecial #88                 // Method process:([B[B[B)V
     258: aload_0
     259: aload_0
     260: getfield      #80                 // Field V:[B
     263: aload_0
     264: getfield      #79                 // Field R:[B
     267: aload_0
     268: getfield      #78                 // Field I:[B
     271: invokespecial #88                 // Method process:([B[B[B)V
     274: aload_0
     275: getfield      #79                 // Field R:[B
     278: iconst_0
     279: aload_1
     280: iload_3
     281: aload_0
     282: getfield      #79                 // Field R:[B
     285: arraylength
     286: imul
     287: iload         4
     289: invokestatic  #85                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     292: aload_0
     293: aload_0
     294: getfield      #77                 // Field DT:[B
     297: invokespecial #86                 // Method increment:([B)V
     300: aload_0
     301: dup
     302: getfield      #76                 // Field reseedCounter:J
     305: lconst_1
     306: ladd
     307: putfield      #76                 // Field reseedCounter:J
     310: aload_1
     311: arraylength
     312: ireturn

  void reseed();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #82                 // Field entropySource:Lorg/bouncycastle/crypto/prng/EntropySource;
       5: invokeinterface #91,  1           // InterfaceMethod org/bouncycastle/crypto/prng/EntropySource.getEntropy:()[B
      10: putfield      #80                 // Field V:[B
      13: aload_0
      14: lconst_1
      15: putfield      #76                 // Field reseedCounter:J
      18: return

  private void process(byte[], byte[], byte[]);
    Code:
       0: iconst_0
       1: istore        4
       3: iload         4
       5: aload_1
       6: arraylength
       7: if_icmpeq     30
      10: aload_1
      11: iload         4
      13: aload_2
      14: iload         4
      16: baload
      17: aload_3
      18: iload         4
      20: baload
      21: ixor
      22: i2b
      23: bastore
      24: iinc          4, 1
      27: goto          3
      30: aload_0
      31: getfield      #81                 // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
      34: aload_1
      35: iconst_0
      36: aload_1
      37: iconst_0
      38: invokeinterface #90,  5           // InterfaceMethod org/bouncycastle/crypto/BlockCipher.processBlock:([BI[BI)I
      43: pop
      44: return

  private void increment(byte[]);
    Code:
       0: aload_1
       1: arraylength
       2: iconst_1
       3: isub
       4: istore_2
       5: iload_2
       6: iflt          30
       9: aload_1
      10: iload_2
      11: dup2
      12: baload
      13: iconst_1
      14: iadd
      15: i2b
      16: dup_x2
      17: bastore
      18: ifeq          24
      21: goto          30
      24: iinc          2, -1
      27: goto          5
      30: return

  private static boolean isTooLarge(byte[], int);
    Code:
       0: aload_0
       1: ifnull        14
       4: aload_0
       5: arraylength
       6: iload_1
       7: if_icmple     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn
}
