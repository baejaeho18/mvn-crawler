public class org.bouncycastle.crypto.params.HKDFParameters implements org.bouncycastle.crypto.DerivationParameters {
  private final byte[] ikm;

  private final boolean skipExpand;

  private final byte[] salt;

  private final byte[] info;

  private org.bouncycastle.crypto.params.HKDFParameters(byte[], boolean, byte[], byte[]);
    Code:
       0: aload_0
       1: invokespecial #49                 // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #28                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #1                  // String IKM (input keying material) should not be null
      14: invokespecial #48                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: invokestatic  #51                 // Method org/bouncycastle/util/Arrays.clone:([B)[B
      23: putfield      #45                 // Field ikm:[B
      26: aload_0
      27: iload_2
      28: putfield      #44                 // Field skipExpand:Z
      31: aload_3
      32: ifnull        40
      35: aload_3
      36: arraylength
      37: ifne          48
      40: aload_0
      41: aconst_null
      42: putfield      #47                 // Field salt:[B
      45: goto          56
      48: aload_0
      49: aload_3
      50: invokestatic  #51                 // Method org/bouncycastle/util/Arrays.clone:([B)[B
      53: putfield      #47                 // Field salt:[B
      56: aload         4
      58: ifnonnull     71
      61: aload_0
      62: iconst_0
      63: newarray       byte
      65: putfield      #46                 // Field info:[B
      68: goto          80
      71: aload_0
      72: aload         4
      74: invokestatic  #51                 // Method org/bouncycastle/util/Arrays.clone:([B)[B
      77: putfield      #46                 // Field info:[B
      80: return

  public org.bouncycastle.crypto.params.HKDFParameters(byte[], byte[], byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_2
       4: aload_3
       5: invokespecial #50                 // Method "<init>":([BZ[B[B)V
       8: return

  public static org.bouncycastle.crypto.params.HKDFParameters skipExtractParameters(byte[], byte[]);
    Code:
       0: new           #31                 // class org/bouncycastle/crypto/params/HKDFParameters
       3: dup
       4: aload_0
       5: iconst_1
       6: aconst_null
       7: aload_1
       8: invokespecial #50                 // Method "<init>":([BZ[B[B)V
      11: areturn

  public static org.bouncycastle.crypto.params.HKDFParameters defaultParameters(byte[]);
    Code:
       0: new           #31                 // class org/bouncycastle/crypto/params/HKDFParameters
       3: dup
       4: aload_0
       5: iconst_0
       6: aconst_null
       7: aconst_null
       8: invokespecial #50                 // Method "<init>":([BZ[B[B)V
      11: areturn

  public byte[] getIKM();
    Code:
       0: aload_0
       1: getfield      #45                 // Field ikm:[B
       4: invokestatic  #51                 // Method org/bouncycastle/util/Arrays.clone:([B)[B
       7: areturn

  public boolean skipExtract();
    Code:
       0: aload_0
       1: getfield      #44                 // Field skipExpand:Z
       4: ireturn

  public byte[] getSalt();
    Code:
       0: aload_0
       1: getfield      #47                 // Field salt:[B
       4: invokestatic  #51                 // Method org/bouncycastle/util/Arrays.clone:([B)[B
       7: areturn

  public byte[] getInfo();
    Code:
       0: aload_0
       1: getfield      #46                 // Field info:[B
       4: invokestatic  #51                 // Method org/bouncycastle/util/Arrays.clone:([B)[B
       7: areturn
}
