public abstract class org.bouncycastle.math.raw.Mod {
  public org.bouncycastle.math.raw.Mod();
    Code:
       0: aload_0
       1: invokespecial #75                 // Method java/lang/Object."<init>":()V
       4: return

  public static int inverse32(int);
    Code:
       0: iload_0
       1: istore_1
       2: iload_1
       3: iconst_2
       4: iload_0
       5: iload_1
       6: imul
       7: isub
       8: imul
       9: istore_1
      10: iload_1
      11: iconst_2
      12: iload_0
      13: iload_1
      14: imul
      15: isub
      16: imul
      17: istore_1
      18: iload_1
      19: iconst_2
      20: iload_0
      21: iload_1
      22: imul
      23: isub
      24: imul
      25: istore_1
      26: iload_1
      27: iconst_2
      28: iload_0
      29: iload_1
      30: imul
      31: isub
      32: imul
      33: istore_1
      34: iload_1
      35: ireturn

  public static void invert(int[], int[], int[]);
    Code:
       0: aload_0
       1: arraylength
       2: istore_3
       3: iload_3
       4: aload_1
       5: invokestatic  #84                 // Method org/bouncycastle/math/raw/Nat.isZero:(I[I)Z
       8: ifeq          21
      11: new           #47                 // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #1                  // String \'x\' cannot be 0
      17: invokespecial #74                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: iload_3
      22: aload_1
      23: invokestatic  #83                 // Method org/bouncycastle/math/raw/Nat.isOne:(I[I)Z
      26: ifeq          38
      29: aload_1
      30: iconst_0
      31: aload_2
      32: iconst_0
      33: iload_3
      34: invokestatic  #76                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      37: return
      38: iload_3
      39: aload_1
      40: invokestatic  #85                 // Method org/bouncycastle/math/raw/Nat.copy:(I[I)[I
      43: astore        4
      45: iload_3
      46: invokestatic  #82                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
      49: astore        5
      51: aload         5
      53: iconst_0
      54: iconst_1
      55: iastore
      56: iconst_0
      57: istore        6
      59: aload         4
      61: iconst_0
      62: iaload
      63: iconst_1
      64: iand
      65: ifne          81
      68: aload_0
      69: aload         4
      71: iload_3
      72: aload         5
      74: iload         6
      76: invokestatic  #81                 // Method inversionStep:([I[II[II)I
      79: istore        6
      81: iload_3
      82: aload         4
      84: invokestatic  #83                 // Method org/bouncycastle/math/raw/Nat.isOne:(I[I)Z
      87: ifeq          100
      90: aload_0
      91: iload         6
      93: aload         5
      95: aload_2
      96: invokestatic  #80                 // Method inversionResult:([II[I[I)V
      99: return
     100: iload_3
     101: aload_0
     102: invokestatic  #85                 // Method org/bouncycastle/math/raw/Nat.copy:(I[I)[I
     105: astore        7
     107: iload_3
     108: invokestatic  #82                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
     111: astore        8
     113: iconst_0
     114: istore        9
     116: iload_3
     117: istore        10
     119: aload         4
     121: iload         10
     123: iconst_1
     124: isub
     125: iaload
     126: ifne          145
     129: aload         7
     131: iload         10
     133: iconst_1
     134: isub
     135: iaload
     136: ifne          145
     139: iinc          10, -1
     142: goto          119
     145: iload         10
     147: aload         4
     149: aload         7
     151: invokestatic  #91                 // Method org/bouncycastle/math/raw/Nat.gte:(I[I[I)Z
     154: ifeq          217
     157: iload         10
     159: aload         7
     161: aload         4
     163: invokestatic  #90                 // Method org/bouncycastle/math/raw/Nat.subFrom:(I[I[I)I
     166: pop
     167: iload         6
     169: iload_3
     170: aload         8
     172: aload         5
     174: invokestatic  #90                 // Method org/bouncycastle/math/raw/Nat.subFrom:(I[I[I)I
     177: iload         9
     179: isub
     180: iadd
     181: istore        6
     183: aload_0
     184: aload         4
     186: iload         10
     188: aload         5
     190: iload         6
     192: invokestatic  #81                 // Method inversionStep:([I[II[II)I
     195: istore        6
     197: iload         10
     199: aload         4
     201: invokestatic  #83                 // Method org/bouncycastle/math/raw/Nat.isOne:(I[I)Z
     204: ifeq          119
     207: aload_0
     208: iload         6
     210: aload         5
     212: aload_2
     213: invokestatic  #80                 // Method inversionResult:([II[I[I)V
     216: return
     217: iload         10
     219: aload         4
     221: aload         7
     223: invokestatic  #90                 // Method org/bouncycastle/math/raw/Nat.subFrom:(I[I[I)I
     226: pop
     227: iload         9
     229: iload_3
     230: aload         5
     232: aload         8
     234: invokestatic  #90                 // Method org/bouncycastle/math/raw/Nat.subFrom:(I[I[I)I
     237: iload         6
     239: isub
     240: iadd
     241: istore        9
     243: aload_0
     244: aload         7
     246: iload         10
     248: aload         8
     250: iload         9
     252: invokestatic  #81                 // Method inversionStep:([I[II[II)I
     255: istore        9
     257: iload         10
     259: aload         7
     261: invokestatic  #83                 // Method org/bouncycastle/math/raw/Nat.isOne:(I[I)Z
     264: ifeq          119
     267: aload_0
     268: iload         9
     270: aload         8
     272: aload_2
     273: invokestatic  #80                 // Method inversionResult:([II[I[I)V
     276: return

  public static int[] random(int[]);
    Code:
       0: aload_0
       1: arraylength
       2: istore_1
       3: new           #50                 // class java/util/Random
       6: dup
       7: invokespecial #78                 // Method java/util/Random."<init>":()V
      10: astore_2
      11: iload_1
      12: invokestatic  #82                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
      15: astore_3
      16: aload_0
      17: iload_1
      18: iconst_1
      19: isub
      20: iaload
      21: istore        4
      23: iload         4
      25: iload         4
      27: iconst_1
      28: iushr
      29: ior
      30: istore        4
      32: iload         4
      34: iload         4
      36: iconst_2
      37: iushr
      38: ior
      39: istore        4
      41: iload         4
      43: iload         4
      45: iconst_4
      46: iushr
      47: ior
      48: istore        4
      50: iload         4
      52: iload         4
      54: bipush        8
      56: iushr
      57: ior
      58: istore        4
      60: iload         4
      62: iload         4
      64: bipush        16
      66: iushr
      67: ior
      68: istore        4
      70: iconst_0
      71: istore        5
      73: iload         5
      75: iload_1
      76: if_icmpeq     93
      79: aload_3
      80: iload         5
      82: aload_2
      83: invokevirtual #77                 // Method java/util/Random.nextInt:()I
      86: iastore
      87: iinc          5, 1
      90: goto          73
      93: aload_3
      94: iload_1
      95: iconst_1
      96: isub
      97: dup2
      98: iaload
      99: iload         4
     101: iand
     102: iastore
     103: iload_1
     104: aload_3
     105: aload_0
     106: invokestatic  #91                 // Method org/bouncycastle/math/raw/Nat.gte:(I[I[I)Z
     109: ifne          70
     112: aload_3
     113: areturn

  public static void add(int[], int[], int[], int[]);
    Code:
       0: aload_0
       1: arraylength
       2: istore        4
       4: iload         4
       6: aload_1
       7: aload_2
       8: aload_3
       9: invokestatic  #92                 // Method org/bouncycastle/math/raw/Nat.add:(I[I[I[I)I
      12: istore        5
      14: iload         5
      16: ifeq          27
      19: iload         4
      21: aload_0
      22: aload_3
      23: invokestatic  #90                 // Method org/bouncycastle/math/raw/Nat.subFrom:(I[I[I)I
      26: pop
      27: return

  public static void subtract(int[], int[], int[], int[]);
    Code:
       0: aload_0
       1: arraylength
       2: istore        4
       4: iload         4
       6: aload_1
       7: aload_2
       8: aload_3
       9: invokestatic  #93                 // Method org/bouncycastle/math/raw/Nat.sub:(I[I[I[I)I
      12: istore        5
      14: iload         5
      16: ifeq          27
      19: iload         4
      21: aload_0
      22: aload_3
      23: invokestatic  #89                 // Method org/bouncycastle/math/raw/Nat.addTo:(I[I[I)I
      26: pop
      27: return

  private static void inversionResult(int[], int, int[], int[]);
    Code:
       0: iload_1
       1: ifge          16
       4: aload_0
       5: arraylength
       6: aload_2
       7: aload_0
       8: aload_3
       9: invokestatic  #92                 // Method org/bouncycastle/math/raw/Nat.add:(I[I[I[I)I
      12: pop
      13: goto          25
      16: aload_2
      17: iconst_0
      18: aload_3
      19: iconst_0
      20: aload_0
      21: arraylength
      22: invokestatic  #76                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      25: return

  private static int inversionStep(int[], int[], int, int[], int);
    Code:
       0: aload_0
       1: arraylength
       2: istore        5
       4: iconst_0
       5: istore        6
       7: aload_1
       8: iconst_0
       9: iaload
      10: ifne          26
      13: iload_2
      14: aload_1
      15: iconst_0
      16: invokestatic  #87                 // Method org/bouncycastle/math/raw/Nat.shiftDownWord:(I[II)I
      19: pop
      20: iinc          6, 32
      23: goto          7
      26: aload_1
      27: iconst_0
      28: iaload
      29: invokestatic  #79                 // Method getTrailingZeroes:(I)I
      32: istore        7
      34: iload         7
      36: ifle          55
      39: iload_2
      40: aload_1
      41: iload         7
      43: iconst_0
      44: invokestatic  #88                 // Method org/bouncycastle/math/raw/Nat.shiftDownBits:(I[III)I
      47: pop
      48: iload         6
      50: iload         7
      52: iadd
      53: istore        6
      55: iconst_0
      56: istore        7
      58: iload         7
      60: iload         6
      62: if_icmpge     120
      65: aload_3
      66: iconst_0
      67: iaload
      68: iconst_1
      69: iand
      70: ifeq          105
      73: iload         4
      75: ifge          93
      78: iload         4
      80: iload         5
      82: aload_0
      83: aload_3
      84: invokestatic  #89                 // Method org/bouncycastle/math/raw/Nat.addTo:(I[I[I)I
      87: iadd
      88: istore        4
      90: goto          105
      93: iload         4
      95: iload         5
      97: aload_0
      98: aload_3
      99: invokestatic  #90                 // Method org/bouncycastle/math/raw/Nat.subFrom:(I[I[I)I
     102: iadd
     103: istore        4
     105: iload         5
     107: aload_3
     108: iload         4
     110: invokestatic  #86                 // Method org/bouncycastle/math/raw/Nat.shiftDownBit:(I[II)I
     113: pop
     114: iinc          7, 1
     117: goto          58
     120: iload         4
     122: ireturn

  private static int getTrailingZeroes(int);
    Code:
       0: iconst_0
       1: istore_1
       2: iload_0
       3: iconst_1
       4: iand
       5: ifne          18
       8: iload_0
       9: iconst_1
      10: iushr
      11: istore_0
      12: iinc          1, 1
      15: goto          2
      18: iload_1
      19: ireturn
}
