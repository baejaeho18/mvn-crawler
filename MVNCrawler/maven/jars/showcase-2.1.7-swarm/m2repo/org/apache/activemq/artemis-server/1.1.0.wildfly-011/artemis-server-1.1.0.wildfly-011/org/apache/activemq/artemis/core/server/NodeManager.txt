Compiled from "NodeManager.java"
public abstract class org.apache.activemq.artemis.core.server.NodeManager implements org.apache.activemq.artemis.core.server.ActiveMQComponent {
  protected static final byte FIRST_TIME_START;

  private static final java.lang.String SERVER_LOCK_NAME;

  private static final java.lang.String ACCESS_MODE;

  protected final boolean replicatedBackup;

  private final java.io.File directory;

  private final java.lang.Object nodeIDGuard;

  private org.apache.activemq.artemis.api.core.SimpleString nodeID;

  private org.apache.activemq.artemis.utils.UUID uuid;

  private boolean isStarted;

  protected java.nio.channels.FileChannel channel;

  public org.apache.activemq.artemis.core.server.NodeManager(boolean, java.io.File);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/lang/Object
       8: dup
       9: invokespecial #1                  // Method java/lang/Object."<init>":()V
      12: putfield      #3                  // Field nodeIDGuard:Ljava/lang/Object;
      15: aload_0
      16: iconst_0
      17: putfield      #4                  // Field isStarted:Z
      20: aload_0
      21: aload_2
      22: putfield      #5                  // Field directory:Ljava/io/File;
      25: aload_0
      26: iload_1
      27: putfield      #6                  // Field replicatedBackup:Z
      30: return

  public abstract void awaitLiveNode() throws java.lang.Exception;

  public abstract void awaitLiveStatus() throws java.lang.Exception;

  public abstract void startBackup() throws java.lang.Exception;

  public abstract org.apache.activemq.artemis.core.server.ActivateCallback startLiveNode() throws java.lang.Exception;

  public abstract void pauseLiveServer() throws java.lang.Exception;

  public abstract void crashLiveServer() throws java.lang.Exception;

  public abstract void releaseBackup() throws java.lang.Exception;

  public synchronized void start() throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #4                  // Field isStarted:Z
       5: return

  public boolean isStarted();
    Code:
       0: aload_0
       1: getfield      #4                  // Field isStarted:Z
       4: ireturn

  public org.apache.activemq.artemis.api.core.SimpleString getNodeId();
    Code:
       0: aload_0
       1: getfield      #3                  // Field nodeIDGuard:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #7                  // Field nodeID:Lorg/apache/activemq/artemis/api/core/SimpleString;
      11: aload_1
      12: monitorexit
      13: areturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public abstract org.apache.activemq.artemis.api.core.SimpleString readNodeId() throws org.apache.activemq.artemis.api.core.ActiveMQIllegalStateException, java.io.IOException;

  public org.apache.activemq.artemis.utils.UUID getUUID();
    Code:
       0: aload_0
       1: getfield      #3                  // Field nodeIDGuard:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #8                  // Field uuid:Lorg/apache/activemq/artemis/utils/UUID;
      11: aload_1
      12: monitorexit
      13: areturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public void setNodeID(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #3                  // Field nodeIDGuard:Ljava/lang/Object;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: new           #9                  // class org/apache/activemq/artemis/api/core/SimpleString
      11: dup
      12: aload_1
      13: invokespecial #10                 // Method org/apache/activemq/artemis/api/core/SimpleString."<init>":(Ljava/lang/String;)V
      16: putfield      #7                  // Field nodeID:Lorg/apache/activemq/artemis/api/core/SimpleString;
      19: aload_0
      20: new           #11                 // class org/apache/activemq/artemis/utils/UUID
      23: dup
      24: iconst_1
      25: aload_1
      26: invokestatic  #12                 // Method org/apache/activemq/artemis/utils/UUID.stringToBytes:(Ljava/lang/String;)[B
      29: invokespecial #13                 // Method org/apache/activemq/artemis/utils/UUID."<init>":(I[B)V
      32: putfield      #8                  // Field uuid:Lorg/apache/activemq/artemis/utils/UUID;
      35: aload_2
      36: monitorexit
      37: goto          45
      40: astore_3
      41: aload_2
      42: monitorexit
      43: aload_3
      44: athrow
      45: return
    Exception table:
       from    to  target type
           7    37    40   any
          40    43    40   any

  protected void setUUID(org.apache.activemq.artemis.utils.UUID);
    Code:
       0: aload_0
       1: getfield      #3                  // Field nodeIDGuard:Ljava/lang/Object;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: aload_1
       9: putfield      #8                  // Field uuid:Lorg/apache/activemq/artemis/utils/UUID;
      12: aload_0
      13: new           #9                  // class org/apache/activemq/artemis/api/core/SimpleString
      16: dup
      17: aload_0
      18: getfield      #8                  // Field uuid:Lorg/apache/activemq/artemis/utils/UUID;
      21: invokevirtual #14                 // Method org/apache/activemq/artemis/utils/UUID.toString:()Ljava/lang/String;
      24: invokespecial #10                 // Method org/apache/activemq/artemis/api/core/SimpleString."<init>":(Ljava/lang/String;)V
      27: putfield      #7                  // Field nodeID:Lorg/apache/activemq/artemis/api/core/SimpleString;
      30: aload_2
      31: monitorexit
      32: goto          40
      35: astore_3
      36: aload_2
      37: monitorexit
      38: aload_3
      39: athrow
      40: return
    Exception table:
       from    to  target type
           7    32    35   any
          35    38    35   any

  public abstract boolean isAwaitingFailback() throws java.lang.Exception;

  public abstract boolean isBackupLive() throws java.lang.Exception;

  public abstract void interrupt();

  public synchronized void stop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #15                 // Field channel:Ljava/nio/channels/FileChannel;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: invokevirtual #16                 // Method java/nio/channels/FileChannel.close:()V
      13: aload_0
      14: iconst_0
      15: putfield      #4                  // Field isStarted:Z
      18: return

  public final void stopBackup() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #6                  // Field replicatedBackup:Z
       4: ifeq          18
       7: aload_0
       8: invokevirtual #17                 // Method getNodeId:()Lorg/apache/activemq/artemis/api/core/SimpleString;
      11: ifnull        18
      14: aload_0
      15: invokevirtual #18                 // Method setUpServerLockFile:()V
      18: aload_0
      19: invokevirtual #19                 // Method releaseBackup:()V
      22: return

  protected final synchronized void setUpServerLockFile() throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc           #21                 // String server.lock
       3: invokevirtual #22                 // Method newFile:(Ljava/lang/String;)Ljava/io/File;
       6: astore_1
       7: iconst_0
       8: istore_2
       9: iconst_0
      10: istore_3
      11: aload_1
      12: invokevirtual #23                 // Method java/io/File.exists:()Z
      15: ifne          80
      18: aload_1
      19: invokevirtual #24                 // Method java/io/File.createNewFile:()Z
      22: istore_2
      23: goto          11
      26: astore        4
      28: getstatic     #26                 // Field org/apache/activemq/artemis/core/server/ActiveMQServerLogger.LOGGER:Lorg/apache/activemq/artemis/core/server/ActiveMQServerLogger;
      31: aload         4
      33: aload_1
      34: invokeinterface #27,  3           // InterfaceMethod org/apache/activemq/artemis/core/server/ActiveMQServerLogger.nodeManagerCantOpenFile:(Ljava/lang/Exception;Ljava/io/File;)V
      39: aload         4
      41: athrow
      42: astore        4
      44: iload_3
      45: iconst_5
      46: if_icmpge     66
      49: ldc2_w        #29                 // long 100l
      52: invokestatic  #31                 // Method java/lang/Thread.sleep:(J)V
      55: goto          60
      58: astore        5
      60: iinc          3, 1
      63: goto          11
      66: getstatic     #26                 // Field org/apache/activemq/artemis/core/server/ActiveMQServerLogger.LOGGER:Lorg/apache/activemq/artemis/core/server/ActiveMQServerLogger;
      69: aload         4
      71: aload_1
      72: invokeinterface #27,  3           // InterfaceMethod org/apache/activemq/artemis/core/server/ActiveMQServerLogger.nodeManagerCantOpenFile:(Ljava/lang/Exception;Ljava/io/File;)V
      77: aload         4
      79: athrow
      80: new           #33                 // class java/io/RandomAccessFile
      83: dup
      84: aload_1
      85: ldc           #34                 // String rw
      87: invokespecial #35                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
      90: astore        4
      92: aload_0
      93: aload         4
      95: invokevirtual #36                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      98: putfield      #15                 // Field channel:Ljava/nio/channels/FileChannel;
     101: iload_2
     102: ifeq          170
     105: iconst_3
     106: invokestatic  #37                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
     109: astore        5
     111: iconst_3
     112: newarray       byte
     114: astore        6
     116: aload         6
     118: iconst_0
     119: bipush        48
     121: bastore
     122: aload         6
     124: iconst_1
     125: bipush        48
     127: bastore
     128: aload         6
     130: iconst_2
     131: bipush        48
     133: bastore
     134: aload         5
     136: aload         6
     138: iconst_0
     139: iconst_3
     140: invokevirtual #38                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
     143: pop
     144: aload         5
     146: iconst_0
     147: invokevirtual #39                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     150: pop
     151: aload_0
     152: getfield      #15                 // Field channel:Ljava/nio/channels/FileChannel;
     155: aload         5
     157: lconst_0
     158: invokevirtual #40                 // Method java/nio/channels/FileChannel.write:(Ljava/nio/ByteBuffer;J)I
     161: pop
     162: aload_0
     163: getfield      #15                 // Field channel:Ljava/nio/channels/FileChannel;
     166: iconst_1
     167: invokevirtual #41                 // Method java/nio/channels/FileChannel.force:(Z)V
     170: aload_0
     171: invokevirtual #42                 // Method createNodeId:()V
     174: return
    Exception table:
       from    to  target type
          18    23    26   Class java/lang/RuntimeException
          18    23    42   Class java/io/IOException
          49    55    58   Class java/lang/InterruptedException

  protected final java.io.File newFile(java.lang.String);
    Code:
       0: new           #43                 // class java/io/File
       3: dup
       4: aload_0
       5: getfield      #5                  // Field directory:Ljava/io/File;
       8: aload_1
       9: invokespecial #44                 // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
      12: astore_2
      13: aload_2
      14: areturn

  protected final synchronized void createNodeId() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field nodeIDGuard:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: bipush        16
       9: invokestatic  #37                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      12: astore_2
      13: aload_0
      14: getfield      #15                 // Field channel:Ljava/nio/channels/FileChannel;
      17: aload_2
      18: ldc2_w        #45                 // long 3l
      21: invokevirtual #47                 // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I
      24: istore_3
      25: aload_0
      26: getfield      #6                  // Field replicatedBackup:Z
      29: ifeq          82
      32: aload_2
      33: iconst_0
      34: invokevirtual #39                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      37: pop
      38: aload_2
      39: aload_0
      40: invokevirtual #48                 // Method getUUID:()Lorg/apache/activemq/artemis/utils/UUID;
      43: invokevirtual #49                 // Method org/apache/activemq/artemis/utils/UUID.asBytes:()[B
      46: iconst_0
      47: bipush        16
      49: invokevirtual #38                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      52: pop
      53: aload_2
      54: iconst_0
      55: invokevirtual #39                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      58: pop
      59: aload_0
      60: getfield      #15                 // Field channel:Ljava/nio/channels/FileChannel;
      63: aload_2
      64: ldc2_w        #45                 // long 3l
      67: invokevirtual #40                 // Method java/nio/channels/FileChannel.write:(Ljava/nio/ByteBuffer;J)I
      70: pop
      71: aload_0
      72: getfield      #15                 // Field channel:Ljava/nio/channels/FileChannel;
      75: iconst_1
      76: invokevirtual #41                 // Method java/nio/channels/FileChannel.force:(Z)V
      79: goto          175
      82: iload_3
      83: bipush        16
      85: if_icmpeq     142
      88: aload_0
      89: invokestatic  #50                 // Method org/apache/activemq/artemis/utils/UUIDGenerator.getInstance:()Lorg/apache/activemq/artemis/utils/UUIDGenerator;
      92: invokevirtual #51                 // Method org/apache/activemq/artemis/utils/UUIDGenerator.generateUUID:()Lorg/apache/activemq/artemis/utils/UUID;
      95: invokevirtual #52                 // Method setUUID:(Lorg/apache/activemq/artemis/utils/UUID;)V
      98: aload_2
      99: aload_0
     100: invokevirtual #48                 // Method getUUID:()Lorg/apache/activemq/artemis/utils/UUID;
     103: invokevirtual #49                 // Method org/apache/activemq/artemis/utils/UUID.asBytes:()[B
     106: iconst_0
     107: bipush        16
     109: invokevirtual #38                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
     112: pop
     113: aload_2
     114: iconst_0
     115: invokevirtual #39                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     118: pop
     119: aload_0
     120: getfield      #15                 // Field channel:Ljava/nio/channels/FileChannel;
     123: aload_2
     124: ldc2_w        #45                 // long 3l
     127: invokevirtual #40                 // Method java/nio/channels/FileChannel.write:(Ljava/nio/ByteBuffer;J)I
     130: pop
     131: aload_0
     132: getfield      #15                 // Field channel:Ljava/nio/channels/FileChannel;
     135: iconst_1
     136: invokevirtual #41                 // Method java/nio/channels/FileChannel.force:(Z)V
     139: goto          175
     142: bipush        16
     144: newarray       byte
     146: astore        4
     148: aload_2
     149: iconst_0
     150: invokevirtual #39                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     153: pop
     154: aload_2
     155: aload         4
     157: invokevirtual #53                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
     160: pop
     161: aload_0
     162: new           #11                 // class org/apache/activemq/artemis/utils/UUID
     165: dup
     166: iconst_1
     167: aload         4
     169: invokespecial #13                 // Method org/apache/activemq/artemis/utils/UUID."<init>":(I[B)V
     172: invokevirtual #52                 // Method setUUID:(Lorg/apache/activemq/artemis/utils/UUID;)V
     175: aload_1
     176: monitorexit
     177: goto          187
     180: astore        5
     182: aload_1
     183: monitorexit
     184: aload         5
     186: athrow
     187: return
    Exception table:
       from    to  target type
           7   177   180   any
         180   184   180   any
}
