Compiled from "AIOSequentialFile.java"
public class org.apache.activemq.artemis.core.io.aio.AIOSequentialFile extends org.apache.activemq.artemis.core.io.AbstractSequentialFile {
  private boolean opened;

  private org.apache.activemq.artemis.jlibaio.LibaioFile aioFile;

  private final org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory aioFactory;

  private final org.apache.activemq.artemis.utils.ReusableLatch pendingCallbacks;

  private final java.util.concurrent.atomic.AtomicLong nextWritingSequence;

  final java.util.PriorityQueue<org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory$AIOSequentialCallback> pendingCallbackList;

  private long nextReadSequence;

  public org.apache.activemq.artemis.core.io.aio.AIOSequentialFile(org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory, int, long, java.io.File, java.lang.String, java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: aload         5
       3: aload         6
       5: aload_1
       6: aload         7
       8: invokespecial #1                  // Method org/apache/activemq/artemis/core/io/AbstractSequentialFile."<init>":(Ljava/io/File;Ljava/lang/String;Lorg/apache/activemq/artemis/core/io/SequentialFileFactory;Ljava/util/concurrent/Executor;)V
      11: aload_0
      12: iconst_0
      13: putfield      #2                  // Field opened:Z
      16: aload_0
      17: new           #3                  // class org/apache/activemq/artemis/utils/ReusableLatch
      20: dup
      21: invokespecial #4                  // Method org/apache/activemq/artemis/utils/ReusableLatch."<init>":()V
      24: putfield      #5                  // Field pendingCallbacks:Lorg/apache/activemq/artemis/utils/ReusableLatch;
      27: aload_0
      28: new           #6                  // class java/util/concurrent/atomic/AtomicLong
      31: dup
      32: lconst_0
      33: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      36: putfield      #8                  // Field nextWritingSequence:Ljava/util/concurrent/atomic/AtomicLong;
      39: aload_0
      40: new           #9                  // class java/util/PriorityQueue
      43: dup
      44: invokespecial #10                 // Method java/util/PriorityQueue."<init>":()V
      47: putfield      #11                 // Field pendingCallbackList:Ljava/util/PriorityQueue;
      50: aload_0
      51: lconst_0
      52: putfield      #12                 // Field nextReadSequence:J
      55: aload_0
      56: aload_1
      57: putfield      #13                 // Field aioFactory:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;
      60: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #2                  // Field opened:Z
       4: ireturn

  public int getAlignment();
    Code:
       0: sipush        512
       3: ireturn

  public int calculateBlockStart(int);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getAlignment:()I
       4: istore_2
       5: iload_1
       6: iload_2
       7: idiv
       8: iload_1
       9: iload_2
      10: irem
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: iadd
      20: iload_2
      21: imul
      22: istore_3
      23: iload_3
      24: ireturn

  public org.apache.activemq.artemis.core.io.SequentialFile cloneFile();
    Code:
       0: new           #15                 // class org/apache/activemq/artemis/core/io/aio/AIOSequentialFile
       3: dup
       4: aload_0
       5: getfield      #13                 // Field aioFactory:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;
       8: iconst_m1
       9: ldc2_w        #16                 // long -1l
      12: aload_0
      13: invokevirtual #18                 // Method getFile:()Ljava/io/File;
      16: invokevirtual #19                 // Method java/io/File.getParentFile:()Ljava/io/File;
      19: aload_0
      20: invokevirtual #18                 // Method getFile:()Ljava/io/File;
      23: invokevirtual #20                 // Method java/io/File.getName:()Ljava/lang/String;
      26: aload_0
      27: getfield      #21                 // Field writerExecutor:Ljava/util/concurrent/Executor;
      30: invokespecial #22                 // Method "<init>":(Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;IJLjava/io/File;Ljava/lang/String;Ljava/util/concurrent/Executor;)V
      33: areturn

  public synchronized void close() throws java.io.IOException, java.lang.InterruptedException, org.apache.activemq.artemis.api.core.ActiveMQException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field opened:Z
       4: ifne          8
       7: return
       8: aload_0
       9: invokespecial #23                 // Method org/apache/activemq/artemis/core/io/AbstractSequentialFile.close:()V
      12: aload_0
      13: getfield      #5                  // Field pendingCallbacks:Lorg/apache/activemq/artemis/utils/ReusableLatch;
      16: ldc2_w        #24                 // long 10l
      19: getstatic     #26                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      22: invokevirtual #27                 // Method org/apache/activemq/artemis/utils/ReusableLatch.await:(JLjava/util/concurrent/TimeUnit;)Z
      25: ifne          49
      28: aload_0
      29: getfield      #28                 // Field factory:Lorg/apache/activemq/artemis/core/io/SequentialFileFactory;
      32: new           #29                 // class java/io/IOException
      35: dup
      36: ldc           #30                 // String Timeout on close
      38: invokespecial #31                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      41: ldc           #30                 // String Timeout on close
      43: aload_0
      44: invokeinterface #32,  4           // InterfaceMethod org/apache/activemq/artemis/core/io/SequentialFileFactory.onIOError:(Ljava/lang/Exception;Ljava/lang/String;Lorg/apache/activemq/artemis/core/io/SequentialFile;)V
      49: aload_0
      50: iconst_0
      51: putfield      #2                  // Field opened:Z
      54: aload_0
      55: aconst_null
      56: putfield      #33                 // Field timedBuffer:Lorg/apache/activemq/artemis/core/io/buffer/TimedBuffer;
      59: aload_0
      60: getfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
      63: invokevirtual #35                 // Method org/apache/activemq/artemis/jlibaio/LibaioFile.close:()V
      66: aload_0
      67: aconst_null
      68: putfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
      71: return

  public synchronized void fill(int) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkOpened:()V
       4: aload_0
       5: getfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
       8: iload_1
       9: i2l
      10: invokevirtual #37                 // Method org/apache/activemq/artemis/jlibaio/LibaioFile.fill:(J)V
      13: aload_0
      14: aload_0
      15: getfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
      18: invokevirtual #38                 // Method org/apache/activemq/artemis/jlibaio/LibaioFile.getSize:()J
      21: putfield      #39                 // Field fileSize:J
      24: return

  public void open() throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #13                 // Field aioFactory:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;
       5: invokevirtual #40                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory.getMaxIO:()I
       8: iconst_1
       9: invokevirtual #41                 // Method open:(IZ)V
      12: return

  public synchronized void open(int, boolean) throws org.apache.activemq.artemis.api.core.ActiveMQException;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field opened:Z
       5: aload_0
       6: aload_0
       7: getfield      #13                 // Field aioFactory:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;
      10: getfield      #42                 // Field org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory.libaioContext:Lorg/apache/activemq/artemis/jlibaio/LibaioContext;
      13: aload_0
      14: invokevirtual #18                 // Method getFile:()Ljava/io/File;
      17: iconst_1
      18: invokevirtual #43                 // Method org/apache/activemq/artemis/jlibaio/LibaioContext.openFile:(Ljava/io/File;Z)Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
      21: putfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
      24: goto          56
      27: astore_3
      28: aload_0
      29: getfield      #28                 // Field factory:Lorg/apache/activemq/artemis/core/io/SequentialFileFactory;
      32: aload_3
      33: aload_3
      34: invokevirtual #44                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      37: aload_0
      38: invokeinterface #32,  4           // InterfaceMethod org/apache/activemq/artemis/core/io/SequentialFileFactory.onIOError:(Ljava/lang/Exception;Ljava/lang/String;Lorg/apache/activemq/artemis/core/io/SequentialFile;)V
      43: new           #45                 // class org/apache/activemq/artemis/api/core/ActiveMQNativeIOError
      46: dup
      47: aload_3
      48: invokevirtual #44                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      51: aload_3
      52: invokespecial #46                 // Method org/apache/activemq/artemis/api/core/ActiveMQNativeIOError."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      55: athrow
      56: aload_0
      57: getfield      #47                 // Field position:Ljava/util/concurrent/atomic/AtomicLong;
      60: lconst_0
      61: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      64: aload_0
      65: aload_0
      66: getfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
      69: invokevirtual #38                 // Method org/apache/activemq/artemis/jlibaio/LibaioFile.getSize:()J
      72: putfield      #39                 // Field fileSize:J
      75: return
    Exception table:
       from    to  target type
           5    24    27   Class java/io/IOException

  public int read(java.nio.ByteBuffer, org.apache.activemq.artemis.core.io.IOCallback) throws org.apache.activemq.artemis.api.core.ActiveMQException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkOpened:()V
       4: aload_1
       5: invokevirtual #49                 // Method java/nio/ByteBuffer.limit:()I
       8: istore_3
       9: aload_0
      10: getfield      #47                 // Field position:Ljava/util/concurrent/atomic/AtomicLong;
      13: iload_3
      14: i2l
      15: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicLong.getAndAdd:(J)J
      18: lstore        4
      20: aload_1
      21: invokevirtual #51                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      24: pop
      25: aload_0
      26: getfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
      29: lload         4
      31: iload_3
      32: aload_1
      33: aload_0
      34: aload_2
      35: aconst_null
      36: invokevirtual #52                 // Method getCallback:(Lorg/apache/activemq/artemis/core/io/IOCallback;Ljava/nio/ByteBuffer;)Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback;
      39: invokevirtual #53                 // Method org/apache/activemq/artemis/jlibaio/LibaioFile.read:(JILjava/nio/ByteBuffer;Lorg/apache/activemq/artemis/jlibaio/SubmitInfo;)V
      42: goto          79
      45: astore        6
      47: aload_0
      48: getfield      #28                 // Field factory:Lorg/apache/activemq/artemis/core/io/SequentialFileFactory;
      51: aload         6
      53: aload         6
      55: invokevirtual #44                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      58: aload_0
      59: invokeinterface #32,  4           // InterfaceMethod org/apache/activemq/artemis/core/io/SequentialFileFactory.onIOError:(Ljava/lang/Exception;Ljava/lang/String;Lorg/apache/activemq/artemis/core/io/SequentialFile;)V
      64: new           #45                 // class org/apache/activemq/artemis/api/core/ActiveMQNativeIOError
      67: dup
      68: aload         6
      70: invokevirtual #44                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      73: aload         6
      75: invokespecial #46                 // Method org/apache/activemq/artemis/api/core/ActiveMQNativeIOError."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      78: athrow
      79: iload_3
      80: ireturn
    Exception table:
       from    to  target type
          25    42    45   Class java/io/IOException

  public int read(java.nio.ByteBuffer) throws java.lang.Exception;
    Code:
       0: new           #54                 // class org/apache/activemq/artemis/core/journal/impl/SimpleWaitIOCallback
       3: dup
       4: invokespecial #55                 // Method org/apache/activemq/artemis/core/journal/impl/SimpleWaitIOCallback."<init>":()V
       7: astore_2
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokevirtual #56                 // Method read:(Ljava/nio/ByteBuffer;Lorg/apache/activemq/artemis/core/io/IOCallback;)I
      14: istore_3
      15: aload_2
      16: invokevirtual #57                 // Method org/apache/activemq/artemis/core/journal/impl/SimpleWaitIOCallback.waitCompletion:()V
      19: iload_3
      20: ireturn

  public void writeDirect(java.nio.ByteBuffer, boolean) throws java.lang.Exception;
    Code:
       0: iload_2
       1: ifeq          26
       4: new           #54                 // class org/apache/activemq/artemis/core/journal/impl/SimpleWaitIOCallback
       7: dup
       8: invokespecial #55                 // Method org/apache/activemq/artemis/core/journal/impl/SimpleWaitIOCallback."<init>":()V
      11: astore_3
      12: aload_0
      13: aload_1
      14: iconst_1
      15: aload_3
      16: invokevirtual #58                 // Method writeDirect:(Ljava/nio/ByteBuffer;ZLorg/apache/activemq/artemis/core/io/IOCallback;)V
      19: aload_3
      20: invokevirtual #57                 // Method org/apache/activemq/artemis/core/journal/impl/SimpleWaitIOCallback.waitCompletion:()V
      23: goto          35
      26: aload_0
      27: aload_1
      28: iconst_0
      29: invokestatic  #59                 // Method org/apache/activemq/artemis/core/io/DummyCallback.getInstance:()Lorg/apache/activemq/artemis/core/io/DummyCallback;
      32: invokevirtual #58                 // Method writeDirect:(Ljava/nio/ByteBuffer;ZLorg/apache/activemq/artemis/core/io/IOCallback;)V
      35: return

  public void writeDirect(java.nio.ByteBuffer, boolean, org.apache.activemq.artemis.core.io.IOCallback);
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkOpened:()V
       4: aload_0
       5: getfield      #28                 // Field factory:Lorg/apache/activemq/artemis/core/io/SequentialFileFactory;
       8: aload_1
       9: invokevirtual #49                 // Method java/nio/ByteBuffer.limit:()I
      12: invokeinterface #60,  2           // InterfaceMethod org/apache/activemq/artemis/core/io/SequentialFileFactory.calculateBlockSize:(I)I
      17: istore        4
      19: aload_0
      20: getfield      #47                 // Field position:Ljava/util/concurrent/atomic/AtomicLong;
      23: iload         4
      25: i2l
      26: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicLong.getAndAdd:(J)J
      29: lstore        5
      31: aload_0
      32: aload_3
      33: aload_1
      34: invokevirtual #52                 // Method getCallback:(Lorg/apache/activemq/artemis/core/io/IOCallback;Ljava/nio/ByteBuffer;)Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback;
      37: astore        7
      39: aload         7
      41: lload         5
      43: iload         4
      45: invokevirtual #61                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback.initWrite:(JI)Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback;
      48: pop
      49: aload_0
      50: getfield      #21                 // Field writerExecutor:Ljava/util/concurrent/Executor;
      53: ifnull        70
      56: aload_0
      57: getfield      #21                 // Field writerExecutor:Ljava/util/concurrent/Executor;
      60: aload         7
      62: invokeinterface #62,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      67: goto          75
      70: aload         7
      72: invokevirtual #63                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback.run:()V
      75: return

  org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory$AIOSequentialCallback getCallback(org.apache.activemq.artemis.core.io.IOCallback, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #13                 // Field aioFactory:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;
       4: invokevirtual #64                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory.getCallback:()Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback;
       7: astore_3
       8: aload_3
       9: aload_0
      10: getfield      #8                  // Field nextWritingSequence:Ljava/util/concurrent/atomic/AtomicLong;
      13: invokevirtual #65                 // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
      16: aload_1
      17: aload_0
      18: getfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
      21: aload_0
      22: aload_2
      23: invokevirtual #66                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback.init:(JLorg/apache/activemq/artemis/core/io/IOCallback;Lorg/apache/activemq/artemis/jlibaio/LibaioFile;Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFile;Ljava/nio/ByteBuffer;)Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback;
      26: pop
      27: aload_0
      28: getfield      #5                  // Field pendingCallbacks:Lorg/apache/activemq/artemis/utils/ReusableLatch;
      31: invokevirtual #67                 // Method org/apache/activemq/artemis/utils/ReusableLatch.countUp:()V
      34: aload_3
      35: areturn

  void done(org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory$AIOSequentialCallback);
    Code:
       0: aload_1
       1: getfield      #68                 // Field org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback.writeSequence:J
       4: ldc2_w        #16                 // long -1l
       7: lcmp
       8: ifne          22
      11: aload_1
      12: invokevirtual #69                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback.sequentialDone:()V
      15: aload_0
      16: getfield      #5                  // Field pendingCallbacks:Lorg/apache/activemq/artemis/utils/ReusableLatch;
      19: invokevirtual #70                 // Method org/apache/activemq/artemis/utils/ReusableLatch.countDown:()V
      22: aload_1
      23: getfield      #68                 // Field org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback.writeSequence:J
      26: aload_0
      27: getfield      #12                 // Field nextReadSequence:J
      30: lcmp
      31: ifne          62
      34: aload_0
      35: dup
      36: getfield      #12                 // Field nextReadSequence:J
      39: lconst_1
      40: ladd
      41: putfield      #12                 // Field nextReadSequence:J
      44: aload_1
      45: invokevirtual #69                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback.sequentialDone:()V
      48: aload_0
      49: getfield      #5                  // Field pendingCallbacks:Lorg/apache/activemq/artemis/utils/ReusableLatch;
      52: invokevirtual #70                 // Method org/apache/activemq/artemis/utils/ReusableLatch.countDown:()V
      55: aload_0
      56: invokespecial #71                 // Method flushCallbacks:()V
      59: goto          71
      62: aload_0
      63: getfield      #11                 // Field pendingCallbackList:Ljava/util/PriorityQueue;
      66: aload_1
      67: invokevirtual #72                 // Method java/util/PriorityQueue.add:(Ljava/lang/Object;)Z
      70: pop
      71: return

  private void flushCallbacks();
    Code:
       0: aload_0
       1: getfield      #11                 // Field pendingCallbackList:Ljava/util/PriorityQueue;
       4: invokevirtual #73                 // Method java/util/PriorityQueue.isEmpty:()Z
       7: ifne          66
      10: aload_0
      11: getfield      #11                 // Field pendingCallbackList:Ljava/util/PriorityQueue;
      14: invokevirtual #74                 // Method java/util/PriorityQueue.peek:()Ljava/lang/Object;
      17: checkcast     #75                 // class org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback
      20: getfield      #68                 // Field org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback.writeSequence:J
      23: aload_0
      24: getfield      #12                 // Field nextReadSequence:J
      27: lcmp
      28: ifne          66
      31: aload_0
      32: getfield      #11                 // Field pendingCallbackList:Ljava/util/PriorityQueue;
      35: invokevirtual #76                 // Method java/util/PriorityQueue.poll:()Ljava/lang/Object;
      38: checkcast     #75                 // class org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback
      41: astore_1
      42: aload_1
      43: invokevirtual #69                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback.sequentialDone:()V
      46: aload_0
      47: dup
      48: getfield      #12                 // Field nextReadSequence:J
      51: lconst_1
      52: ladd
      53: putfield      #12                 // Field nextReadSequence:J
      56: aload_0
      57: getfield      #5                  // Field pendingCallbacks:Lorg/apache/activemq/artemis/utils/ReusableLatch;
      60: invokevirtual #70                 // Method org/apache/activemq/artemis/utils/ReusableLatch.countDown:()V
      63: goto          0
      66: return

  public void sync();
    Code:
       0: new           #77                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #78                 // String This method is not supported on AIO
       6: invokespecial #79                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public long size() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
       4: ifnonnull     15
       7: aload_0
       8: invokevirtual #18                 // Method getFile:()Ljava/io/File;
      11: invokevirtual #80                 // Method java/io/File.length:()J
      14: lreturn
      15: aload_0
      16: getfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
      19: invokevirtual #38                 // Method org/apache/activemq/artemis/jlibaio/LibaioFile.getSize:()J
      22: lreturn

  public java.lang.String toString();
    Code:
       0: new           #81                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #83                 // String AIOSequentialFile:
       9: invokevirtual #84                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #18                 // Method getFile:()Ljava/io/File;
      16: invokevirtual #85                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      19: invokevirtual #84                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: invokevirtual #86                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: areturn

  protected java.nio.ByteBuffer newBuffer(int, int);
    Code:
       0: aload_0
       1: getfield      #28                 // Field factory:Lorg/apache/activemq/artemis/core/io/SequentialFileFactory;
       4: iload_1
       5: invokeinterface #60,  2           // InterfaceMethod org/apache/activemq/artemis/core/io/SequentialFileFactory.calculateBlockSize:(I)I
      10: istore_1
      11: aload_0
      12: getfield      #28                 // Field factory:Lorg/apache/activemq/artemis/core/io/SequentialFileFactory;
      15: iload_2
      16: invokeinterface #60,  2           // InterfaceMethod org/apache/activemq/artemis/core/io/SequentialFileFactory.calculateBlockSize:(I)I
      21: istore_2
      22: aload_0
      23: getfield      #28                 // Field factory:Lorg/apache/activemq/artemis/core/io/SequentialFileFactory;
      26: iload_1
      27: invokeinterface #87,  2           // InterfaceMethod org/apache/activemq/artemis/core/io/SequentialFileFactory.newBuffer:(I)Ljava/nio/ByteBuffer;
      32: astore_3
      33: aload_3
      34: iload_2
      35: invokevirtual #88                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      38: pop
      39: aload_3
      40: areturn

  private void checkOpened();
    Code:
       0: aload_0
       1: getfield      #34                 // Field aioFile:Lorg/apache/activemq/artemis/jlibaio/LibaioFile;
       4: ifnull        14
       7: aload_0
       8: getfield      #2                  // Field opened:Z
      11: ifne          24
      14: new           #89                 // class java/lang/NullPointerException
      17: dup
      18: ldc           #90                 // String File not opened, file=null
      20: invokespecial #91                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: return
}
