Compiled from "BatchingIDGenerator.java"
public final class org.apache.activemq.artemis.core.persistence.impl.journal.BatchingIDGenerator implements org.apache.activemq.artemis.utils.IDGenerator {
  private final java.util.concurrent.atomic.AtomicLong counter;

  private final long checkpointSize;

  private volatile long nextID;

  private final org.apache.activemq.artemis.core.persistence.StorageManager storageManager;

  private java.util.List<java.lang.Long> cleanupRecords;

  public org.apache.activemq.artemis.core.persistence.impl.journal.BatchingIDGenerator(long, long, org.apache.activemq.artemis.core.persistence.StorageManager);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field cleanupRecords:Ljava/util/List;
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicLong
      13: dup
      14: lload_1
      15: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      18: putfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
      21: aload_0
      22: lload_1
      23: putfield      #6                  // Field nextID:J
      26: aload_0
      27: lload_3
      28: putfield      #7                  // Field checkpointSize:J
      31: aload_0
      32: aload         5
      34: putfield      #8                  // Field storageManager:Lorg/apache/activemq/artemis/core/persistence/StorageManager;
      37: return

  public void persistCurrentID();
    Code:
       0: aload_0
       1: getfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: lstore_1
       8: aload_0
       9: lload_1
      10: lload_1
      11: invokespecial #10                 // Method storeID:(JJ)V
      14: return

  public void cleanup();
    Code:
       0: aload_0
       1: getfield      #2                  // Field cleanupRecords:Ljava/util/List;
       4: ifnull        70
       7: aload_0
       8: getfield      #2                  // Field cleanupRecords:Ljava/util/List;
      11: invokeinterface #11,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      16: astore_1
      17: aload_1
      18: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          56
      26: aload_1
      27: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #14                 // class java/lang/Long
      35: astore_2
      36: aload_1
      37: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      42: ifeq          53
      45: aload_0
      46: aload_2
      47: invokevirtual #15                 // Method java/lang/Long.longValue:()J
      50: invokespecial #16                 // Method deleteID:(J)V
      53: goto          17
      56: aload_0
      57: getfield      #2                  // Field cleanupRecords:Ljava/util/List;
      60: invokeinterface #17,  1           // InterfaceMethod java/util/List.clear:()V
      65: aload_0
      66: aconst_null
      67: putfield      #2                  // Field cleanupRecords:Ljava/util/List;
      70: return

  public void loadState(long, org.apache.activemq.artemis.api.core.ActiveMQBuffer);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #18                 // Method addCleanupRecord:(J)V
       5: new           #19                 // class org/apache/activemq/artemis/core/persistence/impl/journal/BatchingIDGenerator$IDCounterEncoding
       8: dup
       9: invokespecial #20                 // Method org/apache/activemq/artemis/core/persistence/impl/journal/BatchingIDGenerator$IDCounterEncoding."<init>":()V
      12: astore        4
      14: aload         4
      16: aload_3
      17: invokevirtual #21                 // Method org/apache/activemq/artemis/core/persistence/impl/journal/BatchingIDGenerator$IDCounterEncoding.decode:(Lorg/apache/activemq/artemis/api/core/ActiveMQBuffer;)V
      20: aload_0
      21: aload         4
      23: invokestatic  #22                 // Method org/apache/activemq/artemis/core/persistence/impl/journal/BatchingIDGenerator$IDCounterEncoding.access$000:(Lorg/apache/activemq/artemis/core/persistence/impl/journal/BatchingIDGenerator$IDCounterEncoding;)J
      26: putfield      #6                  // Field nextID:J
      29: aload_0
      30: getfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
      33: aload_0
      34: getfield      #6                  // Field nextID:J
      37: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      40: return

  public void forceNextID(long);
    Code:
       0: aload_0
       1: getfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: lstore_3
       8: aload_0
       9: getfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
      12: lload_1
      13: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      16: aload_0
      17: lload_3
      18: lload_1
      19: invokespecial #10                 // Method storeID:(JJ)V
      22: return

  public long generateID();
    Code:
       0: aload_0
       1: getfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
       7: lstore_1
       8: lload_1
       9: aload_0
      10: getfield      #6                  // Field nextID:J
      13: lcmp
      14: iflt          22
      17: aload_0
      18: lload_1
      19: invokespecial #25                 // Method saveCheckPoint:(J)V
      22: lload_1
      23: lreturn

  public long getCurrentID();
    Code:
       0: aload_0
       1: getfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  private synchronized void saveCheckPoint(long);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #6                  // Field nextID:J
       5: lcmp
       6: iflt          62
       9: aload_0
      10: dup
      11: getfield      #6                  // Field nextID:J
      14: aload_0
      15: getfield      #7                  // Field checkpointSize:J
      18: ladd
      19: putfield      #6                  // Field nextID:J
      22: aload_0
      23: getfield      #8                  // Field storageManager:Lorg/apache/activemq/artemis/core/persistence/StorageManager;
      26: invokeinterface #27,  1           // InterfaceMethod org/apache/activemq/artemis/core/persistence/StorageManager.isStarted:()Z
      31: ifne          47
      34: getstatic     #28                 // Field org/apache/activemq/artemis/core/server/ActiveMQServerLogger.LOGGER:Lorg/apache/activemq/artemis/core/server/ActiveMQServerLogger;
      37: ldc           #29                 // String The journalStorageManager is not loaded. This is probably ok as long as it\'s a notification being sent after shutdown
      39: invokeinterface #30,  2           // InterfaceMethod org/apache/activemq/artemis/core/server/ActiveMQServerLogger.debug:(Ljava/lang/Object;)V
      44: goto          62
      47: aload_0
      48: aload_0
      49: getfield      #5                  // Field counter:Ljava/util/concurrent/atomic/AtomicLong;
      52: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
      55: aload_0
      56: getfield      #6                  // Field nextID:J
      59: invokespecial #10                 // Method storeID:(JJ)V
      62: return

  private void addCleanupRecord(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field cleanupRecords:Ljava/util/List;
       4: ifnonnull     18
       7: aload_0
       8: new           #31                 // class java/util/LinkedList
      11: dup
      12: invokespecial #32                 // Method java/util/LinkedList."<init>":()V
      15: putfield      #2                  // Field cleanupRecords:Ljava/util/List;
      18: aload_0
      19: getfield      #2                  // Field cleanupRecords:Ljava/util/List;
      22: lload_1
      23: invokestatic  #33                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      26: invokeinterface #34,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      31: pop
      32: return

  private void storeID(long, long);
    Code:
       0: aload_0
       1: getfield      #8                  // Field storageManager:Lorg/apache/activemq/artemis/core/persistence/StorageManager;
       4: lload_1
       5: lload_3
       6: invokeinterface #35,  5           // InterfaceMethod org/apache/activemq/artemis/core/persistence/StorageManager.storeID:(JJ)V
      11: goto          26
      14: astore        5
      16: getstatic     #28                 // Field org/apache/activemq/artemis/core/server/ActiveMQServerLogger.LOGGER:Lorg/apache/activemq/artemis/core/server/ActiveMQServerLogger;
      19: aload         5
      21: invokeinterface #37,  2           // InterfaceMethod org/apache/activemq/artemis/core/server/ActiveMQServerLogger.batchingIdError:(Ljava/lang/Exception;)V
      26: return
    Exception table:
       from    to  target type
           0    11    14   Class java/lang/Exception

  private void deleteID(long);
    Code:
       0: aload_0
       1: getfield      #8                  // Field storageManager:Lorg/apache/activemq/artemis/core/persistence/StorageManager;
       4: lload_1
       5: invokeinterface #38,  3           // InterfaceMethod org/apache/activemq/artemis/core/persistence/StorageManager.deleteID:(J)V
      10: goto          23
      13: astore_3
      14: getstatic     #28                 // Field org/apache/activemq/artemis/core/server/ActiveMQServerLogger.LOGGER:Lorg/apache/activemq/artemis/core/server/ActiveMQServerLogger;
      17: aload_3
      18: invokeinterface #37,  2           // InterfaceMethod org/apache/activemq/artemis/core/server/ActiveMQServerLogger.batchingIdError:(Ljava/lang/Exception;)V
      23: return
    Exception table:
       from    to  target type
           0    10    13   Class java/lang/Exception

  public static org.apache.activemq.artemis.core.journal.EncodingSupport createIDEncodingSupport(long);
    Code:
       0: new           #19                 // class org/apache/activemq/artemis/core/persistence/impl/journal/BatchingIDGenerator$IDCounterEncoding
       3: dup
       4: lload_0
       5: aconst_null
       6: invokespecial #39                 // Method org/apache/activemq/artemis/core/persistence/impl/journal/BatchingIDGenerator$IDCounterEncoding."<init>":(JLorg/apache/activemq/artemis/core/persistence/impl/journal/BatchingIDGenerator$1;)V
       9: areturn
}
