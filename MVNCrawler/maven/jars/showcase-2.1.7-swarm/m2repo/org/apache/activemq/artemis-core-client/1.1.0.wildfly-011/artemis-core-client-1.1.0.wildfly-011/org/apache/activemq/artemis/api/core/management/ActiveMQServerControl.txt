Compiled from "ActiveMQServerControl.java"
public interface org.apache.activemq.artemis.api.core.management.ActiveMQServerControl {
  public abstract java.lang.String getVersion();

  public abstract int getConnectionCount();

  public abstract boolean isStarted();

  public abstract java.lang.String[] getIncomingInterceptorClassNames();

  public abstract java.lang.String[] getOutgoingInterceptorClassNames();

  public abstract boolean isClustered();

  public abstract int getScheduledThreadPoolMaxSize();

  public abstract int getThreadPoolMaxSize();

  public abstract long getSecurityInvalidationInterval();

  public abstract boolean isSecurityEnabled();

  public abstract java.lang.String getBindingsDirectory();

  public abstract java.lang.String getJournalDirectory();

  public abstract java.lang.String getJournalType();

  public abstract boolean isJournalSyncTransactional();

  public abstract boolean isJournalSyncNonTransactional();

  public abstract int getJournalFileSize();

  public abstract int getJournalMinFiles();

  public abstract int getJournalMaxIO();

  public abstract int getJournalBufferSize();

  public abstract int getJournalBufferTimeout();

  public abstract void setFailoverOnServerShutdown(boolean) throws java.lang.Exception;

  public abstract boolean isFailoverOnServerShutdown();

  public abstract int getJournalCompactMinFiles();

  public abstract int getJournalCompactPercentage();

  public abstract boolean isPersistenceEnabled();

  public abstract boolean isCreateBindingsDir();

  public abstract boolean isCreateJournalDir();

  public abstract boolean isMessageCounterEnabled();

  public abstract int getMessageCounterMaxDayCount();

  public abstract void setMessageCounterMaxDayCount(int) throws java.lang.Exception;

  public abstract long getMessageCounterSamplePeriod();

  public abstract void setMessageCounterSamplePeriod(long) throws java.lang.Exception;

  public abstract boolean isBackup();

  public abstract boolean isSharedStore();

  public abstract java.lang.String getPagingDirectory();

  public abstract boolean isPersistDeliveryCountBeforeDelivery();

  public abstract long getConnectionTTLOverride();

  public abstract java.lang.String getManagementAddress();

  public abstract java.lang.String getManagementNotificationAddress();

  public abstract int getIDCacheSize();

  public abstract boolean isPersistIDCache();

  public abstract java.lang.String getLargeMessagesDirectory();

  public abstract boolean isWildcardRoutingEnabled();

  public abstract long getTransactionTimeout();

  public abstract long getTransactionTimeoutScanPeriod();

  public abstract long getMessageExpiryScanPeriod();

  public abstract long getMessageExpiryThreadPriority();

  public abstract boolean isAsyncConnectionExecutionEnabled();

  public abstract java.lang.Object[] getConnectors() throws java.lang.Exception;

  public abstract java.lang.String getConnectorsAsJSON() throws java.lang.Exception;

  public abstract java.lang.String[] getAddressNames();

  public abstract java.lang.String[] getQueueNames();

  public abstract void createQueue(java.lang.String, java.lang.String) throws java.lang.Exception;

  public abstract void createQueue(java.lang.String, java.lang.String, java.lang.String, boolean) throws java.lang.Exception;

  public abstract void createQueue(java.lang.String, java.lang.String, boolean) throws java.lang.Exception;

  public abstract void deployQueue(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception;

  public abstract void deployQueue(java.lang.String, java.lang.String, java.lang.String, boolean) throws java.lang.Exception;

  public abstract void destroyQueue(java.lang.String) throws java.lang.Exception;

  public abstract void enableMessageCounters() throws java.lang.Exception;

  public abstract void disableMessageCounters() throws java.lang.Exception;

  public abstract void resetAllMessageCounters() throws java.lang.Exception;

  public abstract void resetAllMessageCounterHistories() throws java.lang.Exception;

  public abstract java.lang.String[] listPreparedTransactions() throws java.lang.Exception;

  public abstract java.lang.String listPreparedTransactionDetailsAsJSON() throws java.lang.Exception;

  public abstract java.lang.String listPreparedTransactionDetailsAsHTML() throws java.lang.Exception;

  public abstract java.lang.String[] listHeuristicCommittedTransactions() throws java.lang.Exception;

  public abstract java.lang.String[] listHeuristicRolledBackTransactions() throws java.lang.Exception;

  public abstract boolean commitPreparedTransaction(java.lang.String) throws java.lang.Exception;

  public abstract boolean rollbackPreparedTransaction(java.lang.String) throws java.lang.Exception;

  public abstract java.lang.String[] listRemoteAddresses() throws java.lang.Exception;

  public abstract java.lang.String[] listRemoteAddresses(java.lang.String) throws java.lang.Exception;

  public abstract boolean closeConnectionsForAddress(java.lang.String) throws java.lang.Exception;

  public abstract boolean closeConsumerConnectionsForAddress(java.lang.String) throws java.lang.Exception;

  public abstract boolean closeConnectionsForUser(java.lang.String) throws java.lang.Exception;

  public abstract java.lang.String[] listConnectionIDs() throws java.lang.Exception;

  public abstract java.lang.String listProducersInfoAsJSON() throws java.lang.Exception;

  public abstract java.lang.String[] listSessions(java.lang.String) throws java.lang.Exception;

  public abstract void sendQueueInfoToQueue(java.lang.String, java.lang.String) throws java.lang.Exception;

  public abstract void addSecuritySettings(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception;

  public abstract void removeSecuritySettings(java.lang.String) throws java.lang.Exception;

  public abstract java.lang.Object[] getRoles(java.lang.String) throws java.lang.Exception;

  public abstract java.lang.String getRolesAsJSON(java.lang.String) throws java.lang.Exception;

  public abstract void addAddressSettings(java.lang.String, java.lang.String, java.lang.String, long, boolean, int, long, int, int, long, double, long, long, boolean, java.lang.String, long, long, java.lang.String, boolean, boolean) throws java.lang.Exception;

  public abstract void removeAddressSettings(java.lang.String) throws java.lang.Exception;

  public abstract java.lang.String getAddressSettingsAsJSON(java.lang.String) throws java.lang.Exception;

  public abstract java.lang.String[] getDivertNames();

  public abstract void createDivert(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String) throws java.lang.Exception;

  public abstract void destroyDivert(java.lang.String) throws java.lang.Exception;

  public abstract java.lang.String[] getBridgeNames();

  public abstract void createBridge(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, double, int, int, boolean, int, long, java.lang.String, boolean, boolean, java.lang.String, java.lang.String) throws java.lang.Exception;

  public abstract void destroyBridge(java.lang.String) throws java.lang.Exception;

  public abstract void forceFailover() throws java.lang.Exception;

  public abstract void updateDuplicateIdCache(java.lang.String, java.lang.Object[]) throws java.lang.Exception;

  public abstract void scaleDown(java.lang.String) throws java.lang.Exception;
}
