Compiled from "AIOSequentialFileFactory.java"
public final class org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory extends org.apache.activemq.artemis.core.io.AbstractSequentialFileFactory {
  private static final boolean trace;

  private final org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory$ReuseBuffersController buffersControl;

  private volatile boolean reuseBuffers;

  private java.lang.Thread pollerThread;

  volatile org.apache.activemq.artemis.jlibaio.LibaioContext<org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory$AIOSequentialCallback> libaioContext;

  private final org.apache.activemq.artemis.jlibaio.util.CallbackCache<org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory$AIOSequentialCallback> callbackPool;

  private final java.util.concurrent.atomic.AtomicBoolean running;

  private static void trace(java.lang.String);
    Code:
       0: getstatic     #8                  // Field org/apache/activemq/artemis/journal/ActiveMQJournalLogger.LOGGER:Lorg/apache/activemq/artemis/journal/ActiveMQJournalLogger;
       3: aload_0
       4: invokeinterface #9,  2            // InterfaceMethod org/apache/activemq/artemis/journal/ActiveMQJournalLogger.trace:(Ljava/lang/Object;)V
       9: return

  public org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory(java.io.File, int);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #11                 // int 501760
       4: ldc           #12                 // int 500000
       6: iload_2
       7: iconst_0
       8: aconst_null
       9: invokespecial #13                 // Method "<init>":(Ljava/io/File;IIIZLorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;)V
      12: return

  public org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory(java.io.File, org.apache.activemq.artemis.core.io.IOCriticalErrorListener, int);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #11                 // int 501760
       4: ldc           #12                 // int 500000
       6: iload_3
       7: iconst_0
       8: aload_2
       9: invokespecial #13                 // Method "<init>":(Ljava/io/File;IIIZLorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;)V
      12: return

  public org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory(java.io.File, int, int, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iload         5
       8: aconst_null
       9: invokespecial #13                 // Method "<init>":(Ljava/io/File;IIIZLorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;)V
      12: return

  public org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory(java.io.File, int, int, int, boolean, org.apache.activemq.artemis.core.io.IOCriticalErrorListener);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: iload_2
       4: iload_3
       5: iload         4
       7: iload         5
       9: aload         6
      11: invokespecial #14                 // Method org/apache/activemq/artemis/core/io/AbstractSequentialFileFactory."<init>":(Ljava/io/File;ZIIIZLorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;)V
      14: aload_0
      15: new           #15                 // class org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController
      18: dup
      19: aload_0
      20: aconst_null
      21: invokespecial #16                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController."<init>":(Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$1;)V
      24: putfield      #6                  // Field buffersControl:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController;
      27: aload_0
      28: iconst_1
      29: putfield      #7                  // Field reuseBuffers:Z
      32: aload_0
      33: new           #17                 // class java/util/concurrent/atomic/AtomicBoolean
      36: dup
      37: iconst_0
      38: invokespecial #18                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      41: putfield      #4                  // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
      44: aload_0
      45: new           #19                 // class org/apache/activemq/artemis/jlibaio/util/CallbackCache
      48: dup
      49: iload         4
      51: invokespecial #20                 // Method org/apache/activemq/artemis/jlibaio/util/CallbackCache."<init>":(I)V
      54: putfield      #5                  // Field callbackPool:Lorg/apache/activemq/artemis/jlibaio/util/CallbackCache;
      57: return

  public org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory$AIOSequentialCallback getCallback();
    Code:
       0: aload_0
       1: getfield      #5                  // Field callbackPool:Lorg/apache/activemq/artemis/jlibaio/util/CallbackCache;
       4: invokevirtual #21                 // Method org/apache/activemq/artemis/jlibaio/util/CallbackCache.get:()Lorg/apache/activemq/artemis/jlibaio/SubmitInfo;
       7: checkcast     #22                 // class org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback
      10: astore_1
      11: aload_1
      12: ifnonnull     24
      15: new           #22                 // class org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback
      18: dup
      19: aload_0
      20: invokespecial #23                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$AIOSequentialCallback."<init>":(Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;)V
      23: astore_1
      24: aload_1
      25: areturn

  public void enableBufferReuse();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #7                  // Field reuseBuffers:Z
       5: return

  public void disableBufferReuse();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #7                  // Field reuseBuffers:Z
       5: return

  public org.apache.activemq.artemis.core.io.SequentialFile createSequentialFile(java.lang.String);
    Code:
       0: new           #24                 // class org/apache/activemq/artemis/core/io/aio/AIOSequentialFile
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #1                  // Field bufferSize:I
       9: aload_0
      10: getfield      #25                 // Field bufferTimeout:J
      13: aload_0
      14: getfield      #26                 // Field journalDir:Ljava/io/File;
      17: aload_1
      18: aload_0
      19: getfield      #27                 // Field writeExecutor:Ljava/util/concurrent/ExecutorService;
      22: invokespecial #28                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFile."<init>":(Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;IJLjava/io/File;Ljava/lang/String;Ljava/util/concurrent/Executor;)V
      25: areturn

  public boolean isSupportsCallbacks();
    Code:
       0: iconst_1
       1: ireturn

  public static boolean isSupported();
    Code:
       0: invokestatic  #29                 // Method org/apache/activemq/artemis/jlibaio/LibaioContext.isLoaded:()Z
       3: ireturn

  public java.nio.ByteBuffer allocateDirectBuffer(int);
    Code:
       0: iload_1
       1: sipush        512
       4: idiv
       5: istore_2
       6: iload_1
       7: sipush        512
      10: irem
      11: ifeq          17
      14: iinc          2, 1
      17: iload_2
      18: sipush        512
      21: imul
      22: sipush        512
      25: invokestatic  #30                 // Method org/apache/activemq/artemis/jlibaio/LibaioContext.newAlignedBuffer:(II)Ljava/nio/ByteBuffer;
      28: astore_3
      29: aload_3
      30: iload_1
      31: invokevirtual #31                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      34: pop
      35: aload_3
      36: areturn

  public void releaseDirectBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: invokestatic  #32                 // Method org/apache/activemq/artemis/jlibaio/LibaioContext.freeBuffer:(Ljava/nio/ByteBuffer;)V
       4: return

  public java.nio.ByteBuffer newBuffer(int);
    Code:
       0: iload_1
       1: sipush        512
       4: irem
       5: ifeq          20
       8: iload_1
       9: sipush        512
      12: idiv
      13: iconst_1
      14: iadd
      15: sipush        512
      18: imul
      19: istore_1
      20: aload_0
      21: getfield      #6                  // Field buffersControl:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController;
      24: iload_1
      25: invokevirtual #33                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController.newBuffer:(I)Ljava/nio/ByteBuffer;
      28: areturn

  public void clearBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: iconst_0
       2: invokevirtual #34                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
       5: pop
       6: aload_0
       7: getfield      #35                 // Field libaioContext:Lorg/apache/activemq/artemis/jlibaio/LibaioContext;
      10: aload_1
      11: invokevirtual #36                 // Method org/apache/activemq/artemis/jlibaio/LibaioContext.memsetBuffer:(Ljava/nio/ByteBuffer;)V
      14: return

  public int getAlignment();
    Code:
       0: sipush        512
       3: ireturn

  public java.nio.ByteBuffer wrapBuffer(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: arraylength
       3: invokevirtual #37                 // Method newBuffer:(I)Ljava/nio/ByteBuffer;
       6: astore_2
       7: aload_2
       8: aload_1
       9: invokevirtual #38                 // Method java/nio/ByteBuffer.put:([B)Ljava/nio/ByteBuffer;
      12: pop
      13: aload_2
      14: areturn

  public int calculateBlockSize(int);
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getAlignment:()I
       4: istore_2
       5: iload_1
       6: iload_2
       7: idiv
       8: iload_1
       9: iload_2
      10: irem
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: iadd
      20: iload_2
      21: imul
      22: istore_3
      23: iload_3
      24: ireturn

  public synchronized void releaseBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: invokestatic  #32                 // Method org/apache/activemq/artemis/jlibaio/LibaioContext.freeBuffer:(Ljava/nio/ByteBuffer;)V
       4: return

  public void start();
    Code:
       0: aload_0
       1: getfield      #4                  // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          59
      12: aload_0
      13: invokespecial #41                 // Method org/apache/activemq/artemis/core/io/AbstractSequentialFileFactory.start:()V
      16: aload_0
      17: new           #42                 // class org/apache/activemq/artemis/jlibaio/LibaioContext
      20: dup
      21: aload_0
      22: getfield      #43                 // Field maxIO:I
      25: iconst_1
      26: invokespecial #44                 // Method org/apache/activemq/artemis/jlibaio/LibaioContext."<init>":(IZ)V
      29: putfield      #35                 // Field libaioContext:Lorg/apache/activemq/artemis/jlibaio/LibaioContext;
      32: aload_0
      33: getfield      #4                  // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
      36: iconst_1
      37: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      40: aload_0
      41: new           #46                 // class org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$PollerThread
      44: dup
      45: aload_0
      46: invokespecial #47                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$PollerThread."<init>":(Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory;)V
      49: putfield      #48                 // Field pollerThread:Ljava/lang/Thread;
      52: aload_0
      53: getfield      #48                 // Field pollerThread:Ljava/lang/Thread;
      56: invokevirtual #49                 // Method java/lang/Thread.start:()V
      59: return

  public void stop();
    Code:
       0: aload_0
       1: getfield      #4                  // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: iconst_0
       6: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          92
      12: aload_0
      13: getfield      #6                  // Field buffersControl:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController;
      16: invokevirtual #50                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController.stop:()V
      19: aload_0
      20: getfield      #35                 // Field libaioContext:Lorg/apache/activemq/artemis/jlibaio/LibaioContext;
      23: invokevirtual #51                 // Method org/apache/activemq/artemis/jlibaio/LibaioContext.close:()V
      26: aload_0
      27: aconst_null
      28: putfield      #35                 // Field libaioContext:Lorg/apache/activemq/artemis/jlibaio/LibaioContext;
      31: aload_0
      32: getfield      #48                 // Field pollerThread:Ljava/lang/Thread;
      35: ifnull        88
      38: aload_0
      39: getfield      #48                 // Field pollerThread:Ljava/lang/Thread;
      42: ldc2_w        #53                 // long 60000l
      45: invokevirtual #55                 // Method java/lang/Thread.join:(J)V
      48: aload_0
      49: getfield      #48                 // Field pollerThread:Ljava/lang/Thread;
      52: invokevirtual #56                 // Method java/lang/Thread.isAlive:()Z
      55: ifeq          75
      58: getstatic     #8                  // Field org/apache/activemq/artemis/journal/ActiveMQJournalLogger.LOGGER:Lorg/apache/activemq/artemis/journal/ActiveMQJournalLogger;
      61: new           #57                 // class java/lang/Exception
      64: dup
      65: ldc           #58                 // String trace
      67: invokespecial #59                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
      70: invokeinterface #60,  2           // InterfaceMethod org/apache/activemq/artemis/journal/ActiveMQJournalLogger.timeoutOnPollerShutdown:(Ljava/lang/Exception;)V
      75: goto          88
      78: astore_1
      79: new           #62                 // class org/apache/activemq/artemis/api/core/ActiveMQInterruptedException
      82: dup
      83: aload_1
      84: invokespecial #63                 // Method org/apache/activemq/artemis/api/core/ActiveMQInterruptedException."<init>":(Ljava/lang/Throwable;)V
      87: athrow
      88: aload_0
      89: invokespecial #64                 // Method org/apache/activemq/artemis/core/io/AbstractSequentialFileFactory.stop:()V
      92: return
    Exception table:
       from    to  target type
          38    75    78   Class java/lang/InterruptedException

  public java.lang.String toString();
    Code:
       0: new           #65                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #66                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #67                 // class org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory
       9: invokevirtual #68                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      12: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: ldc           #70                 // String (buffersControl.stopped=
      17: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: aload_0
      21: getfield      #6                  // Field buffersControl:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController;
      24: invokestatic  #71                 // Method org/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController.access$1000:(Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController;)Z
      27: invokevirtual #72                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      30: ldc           #73                 // String ):
      32: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_0
      36: invokespecial #74                 // Method java/lang/Object.toString:()Ljava/lang/String;
      39: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #75                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: areturn

  static boolean access$100(org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory);
    Code:
       0: aload_0
       1: getfield      #7                  // Field reuseBuffers:Z
       4: ireturn

  static org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory$ReuseBuffersController access$200(org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory);
    Code:
       0: aload_0
       1: getfield      #6                  // Field buffersControl:Lorg/apache/activemq/artemis/core/io/aio/AIOSequentialFileFactory$ReuseBuffersController;
       4: areturn

  static org.apache.activemq.artemis.jlibaio.util.CallbackCache access$300(org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory);
    Code:
       0: aload_0
       1: getfield      #5                  // Field callbackPool:Lorg/apache/activemq/artemis/jlibaio/util/CallbackCache;
       4: areturn

  static java.util.concurrent.atomic.AtomicBoolean access$400(org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory);
    Code:
       0: aload_0
       1: getfield      #4                  // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static int access$500(org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory);
    Code:
       0: aload_0
       1: getfield      #1                  // Field bufferSize:I
       4: ireturn

  static boolean access$600();
    Code:
       0: getstatic     #3                  // Field trace:Z
       3: ireturn

  static void access$700(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method trace:(Ljava/lang/String;)V
       4: return

  static int access$800(org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory);
    Code:
       0: aload_0
       1: getfield      #1                  // Field bufferSize:I
       4: ireturn

  static int access$900(org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory);
    Code:
       0: aload_0
       1: getfield      #1                  // Field bufferSize:I
       4: ireturn

  static {};
    Code:
       0: getstatic     #8                  // Field org/apache/activemq/artemis/journal/ActiveMQJournalLogger.LOGGER:Lorg/apache/activemq/artemis/journal/ActiveMQJournalLogger;
       3: invokeinterface #76,  1           // InterfaceMethod org/apache/activemq/artemis/journal/ActiveMQJournalLogger.isTraceEnabled:()Z
       8: putstatic     #3                  // Field trace:Z
      11: return
}
