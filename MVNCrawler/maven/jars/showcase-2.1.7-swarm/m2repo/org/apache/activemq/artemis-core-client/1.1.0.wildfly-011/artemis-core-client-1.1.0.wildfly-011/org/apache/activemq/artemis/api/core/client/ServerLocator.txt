Compiled from "ServerLocator.java"
public interface org.apache.activemq.artemis.api.core.client.ServerLocator extends java.lang.AutoCloseable {
  public abstract boolean isClosed();

  public abstract void disableFinalizeCheck();

  public abstract org.apache.activemq.artemis.api.core.client.ClientSessionFactory createSessionFactory() throws java.lang.Exception;

  public abstract org.apache.activemq.artemis.api.core.client.ClientSessionFactory createSessionFactory(java.lang.String) throws java.lang.Exception;

  public abstract org.apache.activemq.artemis.api.core.client.ClientSessionFactory createSessionFactory(org.apache.activemq.artemis.api.core.TransportConfiguration) throws java.lang.Exception;

  public abstract org.apache.activemq.artemis.api.core.client.ClientSessionFactory createSessionFactory(org.apache.activemq.artemis.api.core.TransportConfiguration, int, boolean) throws java.lang.Exception;

  public abstract long getClientFailureCheckPeriod();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setClientFailureCheckPeriod(long);

  public abstract boolean isCacheLargeMessagesClient();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setCacheLargeMessagesClient(boolean);

  public abstract long getConnectionTTL();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setConnectionTTL(long);

  public abstract long getCallTimeout();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setCallTimeout(long);

  public abstract long getCallFailoverTimeout();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setCallFailoverTimeout(long);

  public abstract int getMinLargeMessageSize();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setMinLargeMessageSize(int);

  public abstract int getConsumerWindowSize();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setConsumerWindowSize(int);

  public abstract int getConsumerMaxRate();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setConsumerMaxRate(int);

  public abstract int getConfirmationWindowSize();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setConfirmationWindowSize(int);

  public abstract int getProducerWindowSize();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setProducerWindowSize(int);

  public abstract int getProducerMaxRate();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setProducerMaxRate(int);

  public abstract boolean isBlockOnAcknowledge();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setBlockOnAcknowledge(boolean);

  public abstract boolean isBlockOnDurableSend();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setBlockOnDurableSend(boolean);

  public abstract boolean isBlockOnNonDurableSend();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setBlockOnNonDurableSend(boolean);

  public abstract boolean isAutoGroup();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setAutoGroup(boolean);

  public abstract java.lang.String getGroupID();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setGroupID(java.lang.String);

  public abstract boolean isPreAcknowledge();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setPreAcknowledge(boolean);

  public abstract int getAckBatchSize();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setAckBatchSize(int);

  public abstract org.apache.activemq.artemis.api.core.TransportConfiguration[] getStaticTransportConfigurations();

  public abstract org.apache.activemq.artemis.api.core.DiscoveryGroupConfiguration getDiscoveryGroupConfiguration();

  public abstract boolean isUseGlobalPools();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setUseGlobalPools(boolean);

  public abstract int getScheduledThreadPoolMaxSize();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setScheduledThreadPoolMaxSize(int);

  public abstract int getThreadPoolMaxSize();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setThreadPoolMaxSize(int);

  public abstract long getRetryInterval();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setRetryInterval(long);

  public abstract double getRetryIntervalMultiplier();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setRetryIntervalMultiplier(double);

  public abstract long getMaxRetryInterval();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setMaxRetryInterval(long);

  public abstract int getReconnectAttempts();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setReconnectAttempts(int);

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setInitialConnectAttempts(int);

  public abstract int getInitialConnectAttempts();

  public abstract boolean isFailoverOnInitialConnection();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setFailoverOnInitialConnection(boolean);

  public abstract java.lang.String getConnectionLoadBalancingPolicyClassName();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setConnectionLoadBalancingPolicyClassName(java.lang.String);

  public abstract int getInitialMessagePacketSize();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setInitialMessagePacketSize(int);

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator addIncomingInterceptor(org.apache.activemq.artemis.api.core.Interceptor);

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator addOutgoingInterceptor(org.apache.activemq.artemis.api.core.Interceptor);

  public abstract boolean removeIncomingInterceptor(org.apache.activemq.artemis.api.core.Interceptor);

  public abstract boolean removeOutgoingInterceptor(org.apache.activemq.artemis.api.core.Interceptor);

  public abstract void close();

  public abstract org.apache.activemq.artemis.core.client.impl.Topology getTopology();

  public abstract boolean isHA();

  public abstract boolean allInVM();

  public abstract boolean isCompressLargeMessage();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setCompressLargeMessage(boolean);

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator addClusterTopologyListener(org.apache.activemq.artemis.api.core.client.ClusterTopologyListener);

  public abstract void removeClusterTopologyListener(org.apache.activemq.artemis.api.core.client.ClusterTopologyListener);

  public abstract org.apache.activemq.artemis.spi.core.remoting.ClientProtocolManagerFactory getProtocolManagerFactory();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setProtocolManagerFactory(org.apache.activemq.artemis.spi.core.remoting.ClientProtocolManagerFactory);

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setIncomingInterceptorList(java.lang.String);

  public abstract java.lang.String getIncomingInterceptorList();

  public abstract org.apache.activemq.artemis.api.core.client.ServerLocator setOutgoingInterceptorList(java.lang.String);

  public abstract java.lang.String getOutgoingInterceptorList();

  public abstract boolean setThreadPools(java.util.concurrent.ExecutorService, java.util.concurrent.ScheduledExecutorService);
}
