Compiled from "NIOSequentialFileFactory.java"
public class org.apache.activemq.artemis.core.io.nio.NIOSequentialFileFactory extends org.apache.activemq.artemis.core.io.AbstractSequentialFileFactory {
  public org.apache.activemq.artemis.core.io.nio.NIOSequentialFileFactory(java.io.File, int);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iload_2
       4: invokespecial #1                  // Method "<init>":(Ljava/io/File;Lorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;I)V
       7: return

  public org.apache.activemq.artemis.core.io.nio.NIOSequentialFileFactory(java.io.File, org.apache.activemq.artemis.core.io.IOCriticalErrorListener, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: ldc           #3                  // int 501760
       5: ldc           #4                  // int 3333333
       7: iload_3
       8: iconst_0
       9: aload_2
      10: invokespecial #5                  // Method "<init>":(Ljava/io/File;ZIIIZLorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;)V
      13: return

  public org.apache.activemq.artemis.core.io.nio.NIOSequentialFileFactory(java.io.File, boolean, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aconst_null
       4: iload_3
       5: invokespecial #6                  // Method "<init>":(Ljava/io/File;ZLorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;I)V
       8: return

  public org.apache.activemq.artemis.core.io.nio.NIOSequentialFileFactory(java.io.File, boolean, org.apache.activemq.artemis.core.io.IOCriticalErrorListener, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: ldc           #3                  // int 501760
       5: ldc           #4                  // int 3333333
       7: iload         4
       9: iconst_0
      10: aload_3
      11: invokespecial #5                  // Method "<init>":(Ljava/io/File;ZIIIZLorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;)V
      14: return

  public org.apache.activemq.artemis.core.io.nio.NIOSequentialFileFactory(java.io.File, boolean, int, int, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iload         5
       8: iload         6
      10: aconst_null
      11: invokespecial #5                  // Method "<init>":(Ljava/io/File;ZIIIZLorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;)V
      14: return

  public org.apache.activemq.artemis.core.io.nio.NIOSequentialFileFactory(java.io.File, boolean, int, int, int, boolean, org.apache.activemq.artemis.core.io.IOCriticalErrorListener);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: iload         5
       8: iload         6
      10: aload         7
      12: invokespecial #7                  // Method org/apache/activemq/artemis/core/io/AbstractSequentialFileFactory."<init>":(Ljava/io/File;ZIIIZLorg/apache/activemq/artemis/core/io/IOCriticalErrorListener;)V
      15: return

  public org.apache.activemq.artemis.core.io.SequentialFile createSequentialFile(java.lang.String);
    Code:
       0: new           #8                  // class org/apache/activemq/artemis/core/io/nio/NIOSequentialFile
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #9                  // Field journalDir:Ljava/io/File;
       9: aload_1
      10: aload_0
      11: getfield      #10                 // Field maxIO:I
      14: aload_0
      15: getfield      #11                 // Field writeExecutor:Ljava/util/concurrent/ExecutorService;
      18: invokespecial #12                 // Method org/apache/activemq/artemis/core/io/nio/NIOSequentialFile."<init>":(Lorg/apache/activemq/artemis/core/io/SequentialFileFactory;Ljava/io/File;Ljava/lang/String;ILjava/util/concurrent/Executor;)V
      21: areturn

  public boolean isSupportsCallbacks();
    Code:
       0: aload_0
       1: getfield      #13                 // Field timedBuffer:Lorg/apache/activemq/artemis/core/io/buffer/TimedBuffer;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.nio.ByteBuffer allocateDirectBuffer(int);
    Code:
       0: aconst_null
       1: astore_2
       2: iload_1
       3: invokestatic  #14                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
       6: astore_2
       7: goto          75
      10: astore_3
      11: new           #16                 // class java/lang/ref/WeakReference
      14: dup
      15: new           #17                 // class java/lang/Object
      18: dup
      19: invokespecial #18                 // Method java/lang/Object."<init>":()V
      22: invokespecial #19                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
      25: astore        4
      27: invokestatic  #20                 // Method java/lang/System.currentTimeMillis:()J
      30: ldc2_w        #21                 // long 5000l
      33: ladd
      34: lstore        5
      36: invokestatic  #20                 // Method java/lang/System.currentTimeMillis:()J
      39: lload         5
      41: lcmp
      42: ifle          65
      45: aload         4
      47: invokevirtual #23                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      50: ifnull        65
      53: invokestatic  #24                 // Method java/lang/System.gc:()V
      56: ldc2_w        #25                 // long 100l
      59: invokestatic  #27                 // Method java/lang/Thread.sleep:(J)V
      62: goto          36
      65: goto          70
      68: astore        5
      70: iload_1
      71: invokestatic  #14                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      74: astore_2
      75: aload_2
      76: areturn
    Exception table:
       from    to  target type
           2     7    10   Class java/lang/OutOfMemoryError
          27    65    68   Class java/lang/InterruptedException

  public void releaseDirectBuffer(java.nio.ByteBuffer);
    Code:
       0: return

  public java.nio.ByteBuffer newBuffer(int);
    Code:
       0: iload_1
       1: invokestatic  #29                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
       4: areturn

  public void clearBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: invokevirtual #30                 // Method java/nio/ByteBuffer.limit:()I
       4: istore_2
       5: aload_1
       6: invokevirtual #31                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
       9: pop
      10: iconst_0
      11: istore_3
      12: iload_3
      13: iload_2
      14: if_icmpge     29
      17: aload_1
      18: iconst_0
      19: invokevirtual #32                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      22: pop
      23: iinc          3, 1
      26: goto          12
      29: aload_1
      30: invokevirtual #31                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      33: pop
      34: return

  public java.nio.ByteBuffer wrapBuffer(byte[]);
    Code:
       0: aload_1
       1: invokestatic  #33                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
       4: areturn

  public int getAlignment();
    Code:
       0: iconst_1
       1: ireturn

  public int calculateBlockSize(int);
    Code:
       0: iload_1
       1: ireturn
}
