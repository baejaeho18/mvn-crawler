Compiled from "JournalFileImpl.java"
public class org.apache.activemq.artemis.core.journal.impl.JournalFileImpl implements org.apache.activemq.artemis.core.journal.impl.JournalFile {
  private final org.apache.activemq.artemis.core.io.SequentialFile file;

  private final long fileID;

  private final int recordID;

  private long offset;

  private final java.util.concurrent.atomic.AtomicInteger posCount;

  private final java.util.concurrent.atomic.AtomicInteger liveBytes;

  private boolean canReclaim;

  private final java.util.concurrent.atomic.AtomicInteger totalNegativeToOthers;

  private final int version;

  private final java.util.Map<org.apache.activemq.artemis.core.journal.impl.JournalFile, java.util.concurrent.atomic.AtomicInteger> negCounts;

  public org.apache.activemq.artemis.core.journal.impl.JournalFileImpl(org.apache.activemq.artemis.core.io.SequentialFile, long, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_0
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #4                  // Field posCount:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
      20: dup
      21: iconst_0
      22: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      25: putfield      #5                  // Field liveBytes:Ljava/util/concurrent/atomic/AtomicInteger;
      28: aload_0
      29: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
      32: dup
      33: iconst_0
      34: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      37: putfield      #6                  // Field totalNegativeToOthers:Ljava/util/concurrent/atomic/AtomicInteger;
      40: aload_0
      41: new           #7                  // class java/util/concurrent/ConcurrentHashMap
      44: dup
      45: invokespecial #8                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      48: putfield      #9                  // Field negCounts:Ljava/util/Map;
      51: aload_0
      52: aload_1
      53: putfield      #10                 // Field file:Lorg/apache/activemq/artemis/core/io/SequentialFile;
      56: aload_0
      57: lload_2
      58: putfield      #11                 // Field fileID:J
      61: aload_0
      62: iload         4
      64: putfield      #12                 // Field version:I
      67: aload_0
      68: lload_2
      69: ldc2_w        #14                 // long 2147483647l
      72: land
      73: l2i
      74: putfield      #16                 // Field recordID:I
      77: return

  public int getPosCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field posCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicInteger.intValue:()I
       7: ireturn

  public boolean isCanReclaim();
    Code:
       0: aload_0
       1: getfield      #18                 // Field canReclaim:Z
       4: ireturn

  public void setCanReclaim(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field canReclaim:Z
       5: return

  public void incNegCount(org.apache.activemq.artemis.core.journal.impl.JournalFile);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpeq     13
       5: aload_0
       6: getfield      #6                  // Field totalNegativeToOthers:Ljava/util/concurrent/atomic/AtomicInteger;
       9: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      12: pop
      13: aload_0
      14: aload_1
      15: invokespecial #20                 // Method getOrCreateNegCount:(Lorg/apache/activemq/artemis/core/journal/impl/JournalFile;)Ljava/util/concurrent/atomic/AtomicInteger;
      18: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      21: pop
      22: return

  public int getNegCount(org.apache.activemq.artemis.core.journal.impl.JournalFile);
    Code:
       0: aload_0
       1: getfield      #9                  // Field negCounts:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #21,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #2                  // class java/util/concurrent/atomic/AtomicInteger
      13: astore_2
      14: aload_2
      15: ifnonnull     20
      18: iconst_0
      19: ireturn
      20: aload_2
      21: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicInteger.intValue:()I
      24: ireturn

  public int getJournalVersion();
    Code:
       0: aload_0
       1: getfield      #12                 // Field version:I
       4: ireturn

  public void incPosCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field posCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: pop
       8: return

  public void decPosCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field posCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: pop
       8: return

  public long getOffset();
    Code:
       0: aload_0
       1: getfield      #23                 // Field offset:J
       4: lreturn

  public long getFileID();
    Code:
       0: aload_0
       1: getfield      #11                 // Field fileID:J
       4: lreturn

  public int getRecordID();
    Code:
       0: aload_0
       1: getfield      #16                 // Field recordID:I
       4: ireturn

  public void setOffset(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #23                 // Field offset:J
       5: return

  public org.apache.activemq.artemis.core.io.SequentialFile getFile();
    Code:
       0: aload_0
       1: getfield      #10                 // Field file:Lorg/apache/activemq/artemis/core/io/SequentialFile;
       4: areturn

  public java.lang.String toString();
    Code:
       0: new           #24                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #26                 // String JournalFileImpl: (
       9: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #10                 // Field file:Lorg/apache/activemq/artemis/core/io/SequentialFile;
      16: invokeinterface #28,  1           // InterfaceMethod org/apache/activemq/artemis/core/io/SequentialFile.getFileName:()Ljava/lang/String;
      21: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #29                 // String  id =
      26: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_0
      30: getfield      #11                 // Field fileID:J
      33: invokevirtual #30                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      36: ldc           #31                 // String , recordID =
      38: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_0
      42: getfield      #16                 // Field recordID:I
      45: invokevirtual #32                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      48: ldc           #33                 // String )
      50: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      56: areturn
      57: astore_1
      58: aload_1
      59: invokevirtual #36                 // Method java/lang/Exception.printStackTrace:()V
      62: new           #24                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #37                 // String Error:
      71: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload_1
      75: invokevirtual #38                 // Method java/lang/Exception.toString:()Ljava/lang/String;
      78: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: areturn
    Exception table:
       from    to  target type
           0    56    57   Class java/lang/Exception

  public java.lang.String debug();
    Code:
       0: new           #24                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #9                  // Field negCounts:Ljava/util/Map;
      12: invokeinterface #39,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      17: invokeinterface #40,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          93
      32: aload_2
      33: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #43                 // class java/util/Map$Entry
      41: astore_3
      42: aload_1
      43: new           #24                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      50: ldc           #44                 // String  file =
      52: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload_3
      56: invokeinterface #45,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      61: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      64: ldc           #47                 // String  negcount value =
      66: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: aload_3
      70: invokeinterface #48,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      75: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      78: ldc           #49                 // String \n
      80: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: pop
      90: goto          23
      93: aload_1
      94: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      97: areturn

  private synchronized java.util.concurrent.atomic.AtomicInteger getOrCreateNegCount(org.apache.activemq.artemis.core.journal.impl.JournalFile);
    Code:
       0: aload_0
       1: getfield      #9                  // Field negCounts:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #21,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #2                  // class java/util/concurrent/atomic/AtomicInteger
      13: astore_2
      14: aload_2
      15: ifnonnull     38
      18: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
      21: dup
      22: invokespecial #50                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      25: astore_2
      26: aload_0
      27: getfield      #9                  // Field negCounts:Ljava/util/Map;
      30: aload_1
      31: aload_2
      32: invokeinterface #51,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: pop
      38: aload_2
      39: areturn

  public void addSize(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field liveBytes:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iload_1
       5: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicInteger.addAndGet:(I)I
       8: pop
       9: return

  public void decSize(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field liveBytes:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iload_1
       5: ineg
       6: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicInteger.addAndGet:(I)I
       9: pop
      10: return

  public int getLiveSize();
    Code:
       0: aload_0
       1: getfield      #5                  // Field liveBytes:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn

  public int getTotalNegativeToOthers();
    Code:
       0: aload_0
       1: getfield      #6                  // Field totalNegativeToOthers:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn
}
