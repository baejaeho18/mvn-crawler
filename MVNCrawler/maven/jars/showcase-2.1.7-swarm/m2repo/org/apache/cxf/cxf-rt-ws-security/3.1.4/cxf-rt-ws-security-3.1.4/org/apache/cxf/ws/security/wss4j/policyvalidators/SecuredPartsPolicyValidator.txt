Compiled from "SecuredPartsPolicyValidator.java"
public class org.apache.cxf.ws.security.wss4j.policyvalidators.SecuredPartsPolicyValidator implements org.apache.cxf.ws.security.wss4j.policyvalidators.SecurityPolicyValidator {
  private org.apache.cxf.ws.security.wss4j.CryptoCoverageUtil$CoverageType coverageType;

  public org.apache.cxf.ws.security.wss4j.policyvalidators.SecuredPartsPolicyValidator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType.ENCRYPTED:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       8: putfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
      11: return

  public boolean canValidatePolicy(org.apache.cxf.ws.policy.AssertionInfo);
    Code:
       0: aload_0
       1: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       4: getstatic     #4                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType.SIGNED:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       7: if_acmpne     59
      10: aload_1
      11: invokevirtual #5                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      14: ifnull        57
      17: getstatic     #6                  // Field org/apache/wss4j/policy/SP12Constants.SIGNED_PARTS:Ljavax/xml/namespace/QName;
      20: aload_1
      21: invokevirtual #5                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      24: invokeinterface #7,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      29: invokevirtual #8                  // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
      32: ifne          53
      35: getstatic     #9                  // Field org/apache/wss4j/policy/SP11Constants.SIGNED_PARTS:Ljavax/xml/namespace/QName;
      38: aload_1
      39: invokevirtual #5                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      42: invokeinterface #7,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      47: invokevirtual #8                  // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
      50: ifeq          57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: ireturn
      59: aload_1
      60: invokevirtual #5                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      63: ifnull        106
      66: getstatic     #10                 // Field org/apache/wss4j/policy/SP12Constants.ENCRYPTED_PARTS:Ljavax/xml/namespace/QName;
      69: aload_1
      70: invokevirtual #5                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      73: invokeinterface #7,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      78: invokevirtual #8                  // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
      81: ifne          102
      84: getstatic     #11                 // Field org/apache/wss4j/policy/SP11Constants.ENCRYPTED_PARTS:Ljavax/xml/namespace/QName;
      87: aload_1
      88: invokevirtual #5                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      91: invokeinterface #7,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      96: invokevirtual #8                  // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
      99: ifeq          106
     102: iconst_1
     103: goto          107
     106: iconst_0
     107: ireturn

  public void validatePolicies(org.apache.cxf.ws.security.wss4j.policyvalidators.PolicyValidatorParameters, java.util.Collection<org.apache.cxf.ws.policy.AssertionInfo>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #12                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getAssertionInfoMap:()Lorg/apache/cxf/ws/policy/AssertionInfoMap;
       5: aload_1
       6: invokevirtual #13                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getMessage:()Lorg/apache/cxf/message/Message;
       9: invokespecial #14                 // Method isTransportBinding:(Lorg/apache/cxf/ws/policy/AssertionInfoMap;Lorg/apache/cxf/message/Message;)Z
      12: ifeq          16
      15: return
      16: aload_1
      17: invokevirtual #13                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getMessage:()Lorg/apache/cxf/message/Message;
      20: astore_3
      21: aload_1
      22: invokevirtual #15                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getSoapBody:()Lorg/w3c/dom/Element;
      25: astore        4
      27: aload_1
      28: invokevirtual #16                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getEncrypted:()Ljava/util/Collection;
      31: astore        5
      33: aload_0
      34: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
      37: getstatic     #4                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType.SIGNED:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
      40: if_acmpne     49
      43: aload_1
      44: invokevirtual #17                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getSigned:()Ljava/util/Collection;
      47: astore        5
      49: aload_2
      50: invokeinterface #18,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      55: astore        6
      57: aload         6
      59: invokeinterface #19,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      64: ifeq          366
      67: aload         6
      69: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      74: checkcast     #21                 // class org/apache/cxf/ws/policy/AssertionInfo
      77: astore        7
      79: aload         7
      81: invokevirtual #22                 // Method org/apache/cxf/ws/policy/AssertionInfo.isAsserted:()Z
      84: ifeq          90
      87: goto          57
      90: aload         7
      92: invokevirtual #5                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      95: checkcast     #23                 // class org/apache/wss4j/policy/model/SignedParts
      98: astore        8
     100: aload         7
     102: iconst_1
     103: invokevirtual #24                 // Method org/apache/cxf/ws/policy/AssertionInfo.setAsserted:(Z)V
     106: aload         8
     108: invokevirtual #25                 // Method org/apache/wss4j/policy/model/SignedParts.isBody:()Z
     111: ifeq          188
     114: aload_0
     115: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     118: getstatic     #4                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType.SIGNED:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     121: if_acmpne     140
     124: aload         4
     126: aload         5
     128: getstatic     #4                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType.SIGNED:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     131: getstatic     #26                 // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope.ELEMENT:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
     134: invokestatic  #27                 // Method org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil.checkBodyCoverage:(Lorg/w3c/dom/Element;Ljava/util/Collection;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;)V
     137: goto          153
     140: aload         4
     142: aload         5
     144: getstatic     #2                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType.ENCRYPTED:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     147: getstatic     #28                 // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope.CONTENT:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
     150: invokestatic  #27                 // Method org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil.checkBodyCoverage:(Lorg/w3c/dom/Element;Ljava/util/Collection;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;)V
     153: goto          188
     156: astore        9
     158: aload         7
     160: new           #30                 // class java/lang/StringBuilder
     163: dup
     164: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
     167: ldc           #32                 // String Soap Body is not
     169: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     172: aload_0
     173: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     176: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     179: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     182: invokevirtual #36                 // Method org/apache/cxf/ws/policy/AssertionInfo.setNotAsserted:(Ljava/lang/String;)V
     185: goto          57
     188: aload         8
     190: invokevirtual #37                 // Method org/apache/wss4j/policy/model/SignedParts.getHeaders:()Ljava/util/List;
     193: invokeinterface #38,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     198: astore        9
     200: aload         9
     202: invokeinterface #19,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     207: ifeq          304
     210: aload         9
     212: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     217: checkcast     #39                 // class org/apache/wss4j/policy/model/Header
     220: astore        10
     222: aload_1
     223: invokevirtual #40                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getSoapHeader:()Lorg/w3c/dom/Element;
     226: aload         5
     228: aload         10
     230: invokevirtual #41                 // Method org/apache/wss4j/policy/model/Header.getNamespace:()Ljava/lang/String;
     233: aload         10
     235: invokevirtual #42                 // Method org/apache/wss4j/policy/model/Header.getName:()Ljava/lang/String;
     238: aload_0
     239: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     242: getstatic     #26                 // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope.ELEMENT:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
     245: invokestatic  #43                 // Method org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil.checkHeaderCoverage:(Lorg/w3c/dom/Element;Ljava/util/Collection;Ljava/lang/String;Ljava/lang/String;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;)V
     248: goto          301
     251: astore        11
     253: aload         7
     255: new           #30                 // class java/lang/StringBuilder
     258: dup
     259: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
     262: aload         10
     264: invokevirtual #41                 // Method org/apache/wss4j/policy/model/Header.getNamespace:()Ljava/lang/String;
     267: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     270: ldc           #44                 // String :
     272: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     275: aload         10
     277: invokevirtual #42                 // Method org/apache/wss4j/policy/model/Header.getName:()Ljava/lang/String;
     280: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     283: ldc           #45                 // String  not +
     285: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     288: aload_0
     289: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     292: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     295: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     298: invokevirtual #36                 // Method org/apache/cxf/ws/policy/AssertionInfo.setNotAsserted:(Ljava/lang/String;)V
     301: goto          200
     304: aload         8
     306: invokevirtual #46                 // Method org/apache/wss4j/policy/model/SignedParts.getAttachments:()Lorg/apache/wss4j/policy/model/Attachments;
     309: astore        9
     311: aload         9
     313: ifnull        363
     316: getstatic     #26                 // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope.ELEMENT:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
     319: astore        10
     321: aload         9
     323: invokevirtual #47                 // Method org/apache/wss4j/policy/model/Attachments.isContentSignatureTransform:()Z
     326: ifeq          334
     329: getstatic     #28                 // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope.CONTENT:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
     332: astore        10
     334: aload_3
     335: invokeinterface #48,  1           // InterfaceMethod org/apache/cxf/message/Message.getAttachments:()Ljava/util/Collection;
     340: aload         5
     342: aload_0
     343: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     346: aload         10
     348: invokestatic  #49                 // Method org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil.checkAttachmentsCoverage:(Ljava/util/Collection;Ljava/util/Collection;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;)V
     351: goto          363
     354: astore        10
     356: aload         7
     358: ldc           #50                 // String An attachment was not signed/encrypted
     360: invokevirtual #36                 // Method org/apache/cxf/ws/policy/AssertionInfo.setNotAsserted:(Ljava/lang/String;)V
     363: goto          57
     366: return
    Exception table:
       from    to  target type
         114   153   156   Class org/apache/wss4j/common/ext/WSSecurityException
         222   248   251   Class org/apache/wss4j/common/ext/WSSecurityException
         316   351   354   Class org/apache/wss4j/common/ext/WSSecurityException

  private boolean isTransportBinding(org.apache.cxf.ws.policy.AssertionInfoMap, org.apache.cxf.message.Message);
    Code:
       0: aload_1
       1: ldc           #51                 // String SymmetricBinding
       3: invokestatic  #52                 // Method org/apache/cxf/ws/security/policy/PolicyUtils.getFirstAssertionByLocalname:(Lorg/apache/cxf/ws/policy/AssertionInfoMap;Ljava/lang/String;)Lorg/apache/cxf/ws/policy/AssertionInfo;
       6: astore_3
       7: aload_3
       8: ifnull        13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: ldc           #53                 // String AsymmetricBinding
      16: invokestatic  #52                 // Method org/apache/cxf/ws/security/policy/PolicyUtils.getFirstAssertionByLocalname:(Lorg/apache/cxf/ws/policy/AssertionInfoMap;Ljava/lang/String;)Lorg/apache/cxf/ws/policy/AssertionInfo;
      19: astore        4
      21: aload         4
      23: ifnull        28
      26: iconst_0
      27: ireturn
      28: aload_1
      29: ldc           #54                 // String TransportBinding
      31: invokestatic  #52                 // Method org/apache/cxf/ws/security/policy/PolicyUtils.getFirstAssertionByLocalname:(Lorg/apache/cxf/ws/policy/AssertionInfoMap;Ljava/lang/String;)Lorg/apache/cxf/ws/policy/AssertionInfo;
      34: astore        5
      36: aload         5
      38: ifnull        43
      41: iconst_1
      42: ireturn
      43: aload_2
      44: ldc_w         #55                 // class org/apache/cxf/security/transport/TLSSessionInfo
      47: invokeinterface #56,  2           // InterfaceMethod org/apache/cxf/message/Message.get:(Ljava/lang/Class;)Ljava/lang/Object;
      52: checkcast     #55                 // class org/apache/cxf/security/transport/TLSSessionInfo
      55: astore        6
      57: aload         6
      59: ifnull        96
      62: aload_1
      63: getstatic     #10                 // Field org/apache/wss4j/policy/SP12Constants.ENCRYPTED_PARTS:Ljavax/xml/namespace/QName;
      66: invokestatic  #57                 // Method org/apache/cxf/ws/security/policy/PolicyUtils.assertPolicy:(Lorg/apache/cxf/ws/policy/AssertionInfoMap;Ljavax/xml/namespace/QName;)Z
      69: pop
      70: aload_1
      71: getstatic     #11                 // Field org/apache/wss4j/policy/SP11Constants.ENCRYPTED_PARTS:Ljavax/xml/namespace/QName;
      74: invokestatic  #57                 // Method org/apache/cxf/ws/security/policy/PolicyUtils.assertPolicy:(Lorg/apache/cxf/ws/policy/AssertionInfoMap;Ljavax/xml/namespace/QName;)Z
      77: pop
      78: aload_1
      79: getstatic     #6                  // Field org/apache/wss4j/policy/SP12Constants.SIGNED_PARTS:Ljavax/xml/namespace/QName;
      82: invokestatic  #57                 // Method org/apache/cxf/ws/security/policy/PolicyUtils.assertPolicy:(Lorg/apache/cxf/ws/policy/AssertionInfoMap;Ljavax/xml/namespace/QName;)Z
      85: pop
      86: aload_1
      87: getstatic     #9                  // Field org/apache/wss4j/policy/SP11Constants.SIGNED_PARTS:Ljavax/xml/namespace/QName;
      90: invokestatic  #57                 // Method org/apache/cxf/ws/security/policy/PolicyUtils.assertPolicy:(Lorg/apache/cxf/ws/policy/AssertionInfoMap;Ljavax/xml/namespace/QName;)Z
      93: pop
      94: iconst_1
      95: ireturn
      96: iconst_0
      97: ireturn

  public org.apache.cxf.ws.security.wss4j.CryptoCoverageUtil$CoverageType getCoverageType();
    Code:
       0: aload_0
       1: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       4: areturn

  public void setCoverageType(org.apache.cxf.ws.security.wss4j.CryptoCoverageUtil$CoverageType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       5: return
}
