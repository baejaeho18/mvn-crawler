Compiled from "DelegatingInputStream.java"
public class org.apache.cxf.attachment.DelegatingInputStream extends java.io.InputStream implements org.apache.cxf.io.Transferable {
  private java.io.InputStream is;

  private org.apache.cxf.attachment.AttachmentDeserializer deserializer;

  private boolean isClosed;

  org.apache.cxf.attachment.DelegatingInputStream(java.io.InputStream, org.apache.cxf.attachment.AttachmentDeserializer);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field is:Ljava/io/InputStream;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field deserializer:Lorg/apache/cxf/attachment/AttachmentDeserializer;
      14: return

  org.apache.cxf.attachment.DelegatingInputStream(java.io.InputStream);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field is:Ljava/io/InputStream;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field deserializer:Lorg/apache/cxf/attachment/AttachmentDeserializer;
      14: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: invokestatic  #4                  // Method org/apache/cxf/helpers/IOUtils.consume:(Ljava/io/InputStream;)V
       7: aload_0
       8: getfield      #2                  // Field is:Ljava/io/InputStream;
      11: invokevirtual #5                  // Method java/io/InputStream.close:()V
      14: aload_0
      15: getfield      #6                  // Field isClosed:Z
      18: ifne          36
      21: aload_0
      22: getfield      #3                  // Field deserializer:Lorg/apache/cxf/attachment/AttachmentDeserializer;
      25: ifnull        36
      28: aload_0
      29: getfield      #3                  // Field deserializer:Lorg/apache/cxf/attachment/AttachmentDeserializer;
      32: aload_0
      33: invokevirtual #7                  // Method org/apache/cxf/attachment/AttachmentDeserializer.markClosed:(Lorg/apache/cxf/attachment/DelegatingInputStream;)V
      36: aload_0
      37: iconst_1
      38: putfield      #6                  // Field isClosed:Z
      41: return

  public void transferTo(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field isClosed:Z
       4: ifeq          17
       7: new           #8                  // class java/io/IOException
      10: dup
      11: ldc           #9                  // String Stream is closed
      13: invokespecial #10                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #2                  // Field is:Ljava/io/InputStream;
      21: aload_1
      22: invokestatic  #11                 // Method org/apache/cxf/helpers/IOUtils.transferTo:(Ljava/io/InputStream;Ljava/io/File;)V
      25: return

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isClosed:Z
       4: ireturn

  public void setClosed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field isClosed:Z
       5: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: invokevirtual #12                 // Method java/io/InputStream.read:()I
       7: ireturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: invokevirtual #13                 // Method java/io/InputStream.available:()I
       7: ireturn

  public synchronized void mark(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: iload_1
       5: invokevirtual #14                 // Method java/io/InputStream.mark:(I)V
       8: return

  public boolean markSupported();
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: invokevirtual #15                 // Method java/io/InputStream.markSupported:()Z
       7: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #16                 // Method java/io/InputStream.read:([BII)I
      10: ireturn

  public int read(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: aload_1
       5: invokevirtual #17                 // Method java/io/InputStream.read:([B)I
       8: ireturn

  public synchronized void reset() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: invokevirtual #18                 // Method java/io/InputStream.reset:()V
       7: return

  public long skip(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: lload_1
       5: invokevirtual #19                 // Method java/io/InputStream.skip:(J)J
       8: lreturn

  public void setInputStream(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field is:Ljava/io/InputStream;
       5: return

  public java.io.InputStream getInputStream();
    Code:
       0: aload_0
       1: getfield      #2                  // Field is:Ljava/io/InputStream;
       4: areturn
}
