Compiled from "SecuredElementsPolicyValidator.java"
public class org.apache.cxf.ws.security.wss4j.policyvalidators.SecuredElementsPolicyValidator implements org.apache.cxf.ws.security.wss4j.policyvalidators.SecurityPolicyValidator {
  private org.apache.cxf.ws.security.wss4j.CryptoCoverageUtil$CoverageType coverageType;

  private org.apache.cxf.ws.security.wss4j.CryptoCoverageUtil$CoverageScope coverageScope;

  public org.apache.cxf.ws.security.wss4j.policyvalidators.SecuredElementsPolicyValidator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType.ENCRYPTED:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       8: putfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
      11: aload_0
      12: getstatic     #4                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope.ELEMENT:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
      15: putfield      #5                  // Field coverageScope:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
      18: return

  public boolean canValidatePolicy(org.apache.cxf.ws.policy.AssertionInfo);
    Code:
       0: aload_0
       1: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       4: getstatic     #6                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType.SIGNED:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       7: if_acmpne     59
      10: aload_1
      11: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      14: ifnull        57
      17: getstatic     #8                  // Field org/apache/wss4j/policy/SP12Constants.SIGNED_ELEMENTS:Ljavax/xml/namespace/QName;
      20: aload_1
      21: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      24: invokeinterface #9,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      29: invokevirtual #10                 // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
      32: ifne          53
      35: getstatic     #11                 // Field org/apache/wss4j/policy/SP11Constants.SIGNED_ELEMENTS:Ljavax/xml/namespace/QName;
      38: aload_1
      39: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      42: invokeinterface #9,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      47: invokevirtual #10                 // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
      50: ifeq          57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: ireturn
      59: aload_0
      60: getfield      #5                  // Field coverageScope:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
      63: getstatic     #12                 // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope.CONTENT:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
      66: if_acmpne     118
      69: aload_1
      70: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      73: ifnull        116
      76: getstatic     #13                 // Field org/apache/wss4j/policy/SP12Constants.CONTENT_ENCRYPTED_ELEMENTS:Ljavax/xml/namespace/QName;
      79: aload_1
      80: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      83: invokeinterface #9,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      88: invokevirtual #10                 // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
      91: ifne          112
      94: getstatic     #14                 // Field org/apache/wss4j/policy/SP11Constants.CONTENT_ENCRYPTED_ELEMENTS:Ljavax/xml/namespace/QName;
      97: aload_1
      98: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
     101: invokeinterface #9,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
     106: invokevirtual #10                 // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
     109: ifeq          116
     112: iconst_1
     113: goto          117
     116: iconst_0
     117: ireturn
     118: aload_1
     119: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
     122: ifnull        165
     125: getstatic     #15                 // Field org/apache/wss4j/policy/SP12Constants.ENCRYPTED_ELEMENTS:Ljavax/xml/namespace/QName;
     128: aload_1
     129: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
     132: invokeinterface #9,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
     137: invokevirtual #10                 // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
     140: ifne          161
     143: getstatic     #16                 // Field org/apache/wss4j/policy/SP11Constants.ENCRYPTED_ELEMENTS:Ljavax/xml/namespace/QName;
     146: aload_1
     147: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
     150: invokeinterface #9,  1            // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
     155: invokevirtual #10                 // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
     158: ifeq          165
     161: iconst_1
     162: goto          166
     165: iconst_0
     166: ireturn

  public void validatePolicies(org.apache.cxf.ws.security.wss4j.policyvalidators.PolicyValidatorParameters, java.util.Collection<org.apache.cxf.ws.policy.AssertionInfo>);
    Code:
       0: invokestatic  #17                 // Method javax/xml/xpath/XPathFactory.newInstance:()Ljavax/xml/xpath/XPathFactory;
       3: astore_3
       4: aload_3
       5: invokevirtual #18                 // Method javax/xml/xpath/XPathFactory.newXPath:()Ljavax/xml/xpath/XPath;
       8: astore        4
      10: aload_1
      11: invokevirtual #19                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getSoapHeader:()Lorg/w3c/dom/Element;
      14: invokeinterface #20,  1           // InterfaceMethod org/w3c/dom/Element.getOwnerDocument:()Lorg/w3c/dom/Document;
      19: invokeinterface #21,  1           // InterfaceMethod org/w3c/dom/Document.getDocumentElement:()Lorg/w3c/dom/Element;
      24: astore        5
      26: aload_1
      27: invokevirtual #22                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getEncrypted:()Ljava/util/Collection;
      30: astore        6
      32: aload_0
      33: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
      36: getstatic     #6                  // Field org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType.SIGNED:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
      39: if_acmpne     48
      42: aload_1
      43: invokevirtual #23                 // Method org/apache/cxf/ws/security/wss4j/policyvalidators/PolicyValidatorParameters.getSigned:()Ljava/util/Collection;
      46: astore        6
      48: aload_2
      49: invokeinterface #24,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      54: astore        7
      56: aload         7
      58: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      63: ifeq          288
      66: aload         7
      68: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      73: checkcast     #27                 // class org/apache/cxf/ws/policy/AssertionInfo
      76: astore        8
      78: aload         8
      80: invokevirtual #7                  // Method org/apache/cxf/ws/policy/AssertionInfo.getAssertion:()Lorg/apache/neethi/Assertion;
      83: checkcast     #28                 // class org/apache/wss4j/policy/model/RequiredElements
      86: astore        9
      88: aload         8
      90: iconst_1
      91: invokevirtual #29                 // Method org/apache/cxf/ws/policy/AssertionInfo.setAsserted:(Z)V
      94: aload         9
      96: ifnull        285
      99: aload         9
     101: invokevirtual #30                 // Method org/apache/wss4j/policy/model/RequiredElements.getXPaths:()Ljava/util/List;
     104: ifnull        285
     107: aload         9
     109: invokevirtual #30                 // Method org/apache/wss4j/policy/model/RequiredElements.getXPaths:()Ljava/util/List;
     112: invokeinterface #31,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     117: ifne          285
     120: new           #32                 // class java/util/ArrayList
     123: dup
     124: invokespecial #33                 // Method java/util/ArrayList."<init>":()V
     127: astore        10
     129: new           #34                 // class org/apache/cxf/helpers/MapNamespaceContext
     132: dup
     133: invokespecial #35                 // Method org/apache/cxf/helpers/MapNamespaceContext."<init>":()V
     136: astore        11
     138: aload         9
     140: invokevirtual #30                 // Method org/apache/wss4j/policy/model/RequiredElements.getXPaths:()Ljava/util/List;
     143: invokeinterface #36,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     148: astore        12
     150: aload         12
     152: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     157: ifeq          207
     160: aload         12
     162: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     167: checkcast     #37                 // class org/apache/wss4j/policy/model/XPath
     170: astore        13
     172: aload         10
     174: aload         13
     176: invokevirtual #38                 // Method org/apache/wss4j/policy/model/XPath.getXPath:()Ljava/lang/String;
     179: invokeinterface #39,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     184: pop
     185: aload         13
     187: invokevirtual #40                 // Method org/apache/wss4j/policy/model/XPath.getPrefixNamespaceMap:()Ljava/util/Map;
     190: astore        14
     192: aload         14
     194: ifnull        204
     197: aload         11
     199: aload         14
     201: invokevirtual #41                 // Method org/apache/cxf/helpers/MapNamespaceContext.addNamespaces:(Ljava/util/Map;)V
     204: goto          150
     207: aload         4
     209: aload         11
     211: invokeinterface #42,  2           // InterfaceMethod javax/xml/xpath/XPath.setNamespaceContext:(Ljavax/xml/namespace/NamespaceContext;)V
     216: aload         5
     218: aload         6
     220: aload         4
     222: aload         10
     224: aload_0
     225: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     228: aload_0
     229: getfield      #5                  // Field coverageScope:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
     232: invokestatic  #43                 // Method org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil.checkCoverage:(Lorg/w3c/dom/Element;Ljava/util/Collection;Ljavax/xml/xpath/XPath;Ljava/util/Collection;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;)V
     235: goto          285
     238: astore        12
     240: aload         8
     242: new           #45                 // class java/lang/StringBuilder
     245: dup
     246: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
     249: ldc           #47                 // String No
     251: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     254: aload_0
     255: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
     258: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     261: ldc           #50                 // String  element found matching one of the XPaths
     263: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     266: aload         10
     268: invokeinterface #51,  1           // InterfaceMethod java/util/List.toArray:()[Ljava/lang/Object;
     273: invokestatic  #52                 // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
     276: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     279: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     282: invokevirtual #54                 // Method org/apache/cxf/ws/policy/AssertionInfo.setNotAsserted:(Ljava/lang/String;)V
     285: goto          56
     288: return
    Exception table:
       from    to  target type
         216   235   238   Class org/apache/wss4j/common/ext/WSSecurityException

  public org.apache.cxf.ws.security.wss4j.CryptoCoverageUtil$CoverageType getCoverageType();
    Code:
       0: aload_0
       1: getfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       4: areturn

  public void setCoverageType(org.apache.cxf.ws.security.wss4j.CryptoCoverageUtil$CoverageType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field coverageType:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageType;
       5: return

  public org.apache.cxf.ws.security.wss4j.CryptoCoverageUtil$CoverageScope getCoverageScope();
    Code:
       0: aload_0
       1: getfield      #5                  // Field coverageScope:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
       4: areturn

  public void setCoverageScope(org.apache.cxf.ws.security.wss4j.CryptoCoverageUtil$CoverageScope);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field coverageScope:Lorg/apache/cxf/ws/security/wss4j/CryptoCoverageUtil$CoverageScope;
       5: return
}
