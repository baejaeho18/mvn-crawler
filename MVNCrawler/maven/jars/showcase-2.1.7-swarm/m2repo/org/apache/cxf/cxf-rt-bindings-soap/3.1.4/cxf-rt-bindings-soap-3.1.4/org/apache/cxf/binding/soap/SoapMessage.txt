Compiled from "SoapMessage.java"
public class org.apache.cxf.binding.soap.SoapMessage extends org.apache.cxf.message.MessageImpl {
  private static final long serialVersionUID;

  private org.apache.cxf.binding.soap.SoapVersion version;

  public org.apache.cxf.binding.soap.SoapMessage(org.apache.cxf.message.Message);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/apache/cxf/message/MessageImpl."<init>":(Lorg/apache/cxf/message/Message;)V
       5: aload_0
       6: invokestatic  #2                  // Method org/apache/cxf/binding/soap/Soap11.getInstance:()Lorg/apache/cxf/binding/soap/Soap11;
       9: invokevirtual #3                  // Method setVersion:(Lorg/apache/cxf/binding/soap/SoapVersion;)V
      12: return

  public org.apache.cxf.binding.soap.SoapMessage(org.apache.cxf.binding.soap.SoapVersion);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/apache/cxf/message/MessageImpl."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #3                  // Method setVersion:(Lorg/apache/cxf/binding/soap/SoapVersion;)V
       9: return

  public org.apache.cxf.binding.soap.SoapVersion getVersion();
    Code:
       0: aload_0
       1: getfield      #5                  // Field version:Lorg/apache/cxf/binding/soap/SoapVersion;
       4: areturn

  public final void setVersion(org.apache.cxf.binding.soap.SoapVersion);
    Code:
       0: aload_0
       1: ldc_w         #6                  // class org/apache/cxf/binding/soap/SoapVersion
       4: aload_1
       5: invokespecial #7                  // Method org/apache/cxf/message/MessageImpl.put:(Ljava/lang/Class;Ljava/lang/Object;)V
       8: aload_0
       9: aload_1
      10: putfield      #5                  // Field version:Lorg/apache/cxf/binding/soap/SoapVersion;
      13: return

  public java.util.List<org.apache.cxf.headers.Header> getHeaders();
    Code:
       0: aload_0
       1: getstatic     #8                  // Field org/apache/cxf/headers/Header.HEADER_LIST:Ljava/lang/String;
       4: invokevirtual #9                  // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #10                 // class java/util/List
      10: invokestatic  #11                 // Method org/apache/cxf/helpers/CastUtils.cast:(Ljava/util/List;)Ljava/util/List;
      13: astore_1
      14: aload_1
      15: ifnonnull     35
      18: new           #12                 // class java/util/ArrayList
      21: dup
      22: invokespecial #13                 // Method java/util/ArrayList."<init>":()V
      25: astore_1
      26: aload_0
      27: getstatic     #8                  // Field org/apache/cxf/headers/Header.HEADER_LIST:Ljava/lang/String;
      30: aload_1
      31: invokevirtual #14                 // Method put:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      34: pop
      35: aload_1
      36: areturn

  public boolean hasHeader(javax.xml.namespace.QName);
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method getHeaders:()Ljava/util/List;
       4: invokeinterface #16,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          45
      19: aload_2
      20: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #19                 // class org/apache/cxf/headers/Header
      28: astore_3
      29: aload_3
      30: invokevirtual #20                 // Method org/apache/cxf/headers/Header.getName:()Ljavax/xml/namespace/QName;
      33: aload_1
      34: invokevirtual #21                 // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
      37: ifeq          42
      40: iconst_1
      41: ireturn
      42: goto          10
      45: iconst_0
      46: ireturn

  public org.apache.cxf.headers.Header getHeader(javax.xml.namespace.QName);
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method getHeaders:()Ljava/util/List;
       4: invokeinterface #16,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          45
      19: aload_2
      20: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #19                 // class org/apache/cxf/headers/Header
      28: astore_3
      29: aload_3
      30: invokevirtual #20                 // Method org/apache/cxf/headers/Header.getName:()Ljavax/xml/namespace/QName;
      33: aload_1
      34: invokevirtual #21                 // Method javax/xml/namespace/QName.equals:(Ljava/lang/Object;)Z
      37: ifeq          42
      40: aload_3
      41: areturn
      42: goto          10
      45: aconst_null
      46: areturn

  public boolean hasHeaders();
    Code:
       0: aload_0
       1: getstatic     #8                  // Field org/apache/cxf/headers/Header.HEADER_LIST:Ljava/lang/String;
       4: invokevirtual #22                 // Method containsKey:(Ljava/lang/Object;)Z
       7: ifeq          26
      10: aload_0
      11: invokevirtual #15                 // Method getHeaders:()Ljava/util/List;
      14: invokeinterface #23,  1           // InterfaceMethod java/util/List.size:()I
      19: ifle          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public java.util.Map<java.lang.String, java.lang.String> getEnvelopeNs();
    Code:
       0: aload_0
       1: ldc           #24                 // String soap.env.ns.map
       3: invokevirtual #25                 // Method getContextualProperty:(Ljava/lang/String;)Ljava/lang/Object;
       6: checkcast     #26                 // class java/util/Map
       9: invokestatic  #27                 // Method org/apache/cxf/helpers/CastUtils.cast:(Ljava/util/Map;)Ljava/util/Map;
      12: areturn

  public boolean hasAdditionalEnvNs();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method getEnvelopeNs:()Ljava/util/Map;
       4: astore_1
       5: aload_1
       6: ifnull        22
       9: aload_1
      10: invokeinterface #29,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      15: ifne          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn
}
