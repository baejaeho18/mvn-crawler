Compiled from "Log4jLogger.java"
class org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper extends org.apache.log4j.AppenderSkeleton {
  java.util.logging.Handler handler;

  final org.apache.cxf.common.logging.Log4jLogger this$0;

  org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper(org.apache.cxf.common.logging.Log4jLogger, java.util.logging.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/cxf/common/logging/Log4jLogger;
       5: aload_0
       6: invokespecial #2                  // Method org/apache/log4j/AppenderSkeleton."<init>":()V
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field handler:Ljava/util/logging/Handler;
      14: aload_0
      15: new           #4                  // class java/lang/StringBuilder
      18: dup
      19: invokespecial #5                  // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #6                  // String HandlerWrapper-
      24: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_2
      28: invokevirtual #8                  // Method java/lang/Object.hashCode:()I
      31: invokevirtual #9                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      34: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: putfield      #11                 // Field name:Ljava/lang/String;
      40: return

  public java.util.logging.Handler getHandler();
    Code:
       0: aload_0
       1: getfield      #3                  // Field handler:Ljava/util/logging/Handler;
       4: areturn

  protected void append(org.apache.log4j.spi.LoggingEvent);
    Code:
       0: new           #12                 // class java/util/logging/LogRecord
       3: dup
       4: aload_0
       5: getfield      #1                  // Field this$0:Lorg/apache/cxf/common/logging/Log4jLogger;
       8: aload_1
       9: invokevirtual #13                 // Method org/apache/log4j/spi/LoggingEvent.getLevel:()Lorg/apache/log4j/Level;
      12: invokestatic  #14                 // Method org/apache/cxf/common/logging/Log4jLogger.access$000:(Lorg/apache/cxf/common/logging/Log4jLogger;Lorg/apache/log4j/Level;)Ljava/util/logging/Level;
      15: aload_1
      16: invokevirtual #15                 // Method org/apache/log4j/spi/LoggingEvent.getMessage:()Ljava/lang/Object;
      19: invokevirtual #16                 // Method java/lang/Object.toString:()Ljava/lang/String;
      22: invokespecial #17                 // Method java/util/logging/LogRecord."<init>":(Ljava/util/logging/Level;Ljava/lang/String;)V
      25: astore_2
      26: aload_2
      27: aload_1
      28: invokevirtual #18                 // Method org/apache/log4j/spi/LoggingEvent.getLoggerName:()Ljava/lang/String;
      31: invokevirtual #19                 // Method java/util/logging/LogRecord.setLoggerName:(Ljava/lang/String;)V
      34: aload_1
      35: invokevirtual #20                 // Method org/apache/log4j/spi/LoggingEvent.getThrowableInformation:()Lorg/apache/log4j/spi/ThrowableInformation;
      38: ifnull        52
      41: aload_2
      42: aload_1
      43: invokevirtual #20                 // Method org/apache/log4j/spi/LoggingEvent.getThrowableInformation:()Lorg/apache/log4j/spi/ThrowableInformation;
      46: invokevirtual #21                 // Method org/apache/log4j/spi/ThrowableInformation.getThrowable:()Ljava/lang/Throwable;
      49: invokevirtual #22                 // Method java/util/logging/LogRecord.setThrown:(Ljava/lang/Throwable;)V
      52: aload_0
      53: getfield      #1                  // Field this$0:Lorg/apache/cxf/common/logging/Log4jLogger;
      56: invokevirtual #23                 // Method org/apache/cxf/common/logging/Log4jLogger.getResourceBundleName:()Ljava/lang/String;
      59: astore_3
      60: aload_3
      61: ifnull        80
      64: aload_2
      65: aload_3
      66: invokevirtual #24                 // Method java/util/logging/LogRecord.setResourceBundleName:(Ljava/lang/String;)V
      69: aload_2
      70: aload_0
      71: getfield      #1                  // Field this$0:Lorg/apache/cxf/common/logging/Log4jLogger;
      74: invokevirtual #25                 // Method org/apache/cxf/common/logging/Log4jLogger.getResourceBundle:()Ljava/util/ResourceBundle;
      77: invokevirtual #26                 // Method java/util/logging/LogRecord.setResourceBundle:(Ljava/util/ResourceBundle;)V
      80: aload_2
      81: aload_1
      82: getfield      #27                 // Field org/apache/log4j/spi/LoggingEvent.fqnOfCategoryClass:Ljava/lang/String;
      85: invokestatic  #28                 // Method org/apache/cxf/common/logging/Log4jLogger.access$100:(Ljava/util/logging/LogRecord;Ljava/lang/String;)V
      88: aload_0
      89: getfield      #3                  // Field handler:Ljava/util/logging/Handler;
      92: aload_2
      93: invokevirtual #29                 // Method java/util/logging/Handler.publish:(Ljava/util/logging/LogRecord;)V
      96: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #3                  // Field handler:Ljava/util/logging/Handler;
       4: invokevirtual #30                 // Method java/util/logging/Handler.close:()V
       7: aload_0
       8: iconst_1
       9: putfield      #31                 // Field closed:Z
      12: return

  public boolean requiresLayout();
    Code:
       0: iconst_0
       1: ireturn

  public org.apache.log4j.Priority getThreshold();
    Code:
       0: invokestatic  #32                 // Method org/apache/cxf/common/logging/Log4jLogger.access$200:()Ljava/util/Map;
       3: aload_0
       4: getfield      #3                  // Field handler:Ljava/util/logging/Handler;
       7: invokevirtual #33                 // Method java/util/logging/Handler.getLevel:()Ljava/util/logging/Level;
      10: invokeinterface #34,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #35                 // class org/apache/log4j/Priority
      18: areturn

  public boolean isAsSevereAsThreshold(org.apache.log4j.Priority);
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method getThreshold:()Lorg/apache/log4j/Priority;
       4: astore_2
       5: aload_2
       6: ifnull        17
       9: aload_1
      10: aload_2
      11: invokevirtual #37                 // Method org/apache/log4j/Priority.isGreaterOrEqual:(Lorg/apache/log4j/Priority;)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn
}
