Compiled from "ResponseTimeCounter.java"
public class org.apache.cxf.management.counters.ResponseTimeCounter implements org.apache.cxf.management.counters.ResponseTimeCounterMBean,org.apache.cxf.management.counters.Counter {
  private javax.management.ObjectName objectName;

  private final java.util.concurrent.atomic.AtomicInteger invocations;

  private final java.util.concurrent.atomic.AtomicInteger checkedApplicationFaults;

  private final java.util.concurrent.atomic.AtomicInteger unCheckedApplicationFaults;

  private final java.util.concurrent.atomic.AtomicInteger runtimeFaults;

  private final java.util.concurrent.atomic.AtomicInteger logicalRuntimeFaults;

  private final java.util.concurrent.atomic.AtomicLong totalHandlingTime;

  private final java.util.concurrent.locks.ReentrantLock write;

  private final java.util.concurrent.atomic.AtomicLong maxHandlingTime;

  private final java.util.concurrent.atomic.AtomicLong minHandlingTime;

  private final java.util.concurrent.atomic.AtomicLong averageProcessingTime;

  private boolean enabled;

  public org.apache.cxf.management.counters.ResponseTimeCounter(javax.management.ObjectName);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #4                  // Field invocations:Ljava/util/concurrent/atomic/AtomicInteger;
      15: aload_0
      16: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      23: putfield      #5                  // Field checkedApplicationFaults:Ljava/util/concurrent/atomic/AtomicInteger;
      26: aload_0
      27: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
      30: dup
      31: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      34: putfield      #6                  // Field unCheckedApplicationFaults:Ljava/util/concurrent/atomic/AtomicInteger;
      37: aload_0
      38: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
      41: dup
      42: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      45: putfield      #7                  // Field runtimeFaults:Ljava/util/concurrent/atomic/AtomicInteger;
      48: aload_0
      49: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
      52: dup
      53: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      56: putfield      #8                  // Field logicalRuntimeFaults:Ljava/util/concurrent/atomic/AtomicInteger;
      59: aload_0
      60: new           #9                  // class java/util/concurrent/atomic/AtomicLong
      63: dup
      64: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      67: putfield      #11                 // Field totalHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
      70: aload_0
      71: new           #12                 // class java/util/concurrent/locks/ReentrantLock
      74: dup
      75: invokespecial #13                 // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      78: putfield      #14                 // Field write:Ljava/util/concurrent/locks/ReentrantLock;
      81: aload_0
      82: new           #9                  // class java/util/concurrent/atomic/AtomicLong
      85: dup
      86: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      89: putfield      #15                 // Field maxHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
      92: aload_0
      93: new           #9                  // class java/util/concurrent/atomic/AtomicLong
      96: dup
      97: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
     100: putfield      #16                 // Field minHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
     103: aload_0
     104: new           #9                  // class java/util/concurrent/atomic/AtomicLong
     107: dup
     108: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
     111: putfield      #17                 // Field averageProcessingTime:Ljava/util/concurrent/atomic/AtomicLong;
     114: aload_0
     115: iconst_1
     116: putfield      #18                 // Field enabled:Z
     119: aload_0
     120: aload_1
     121: putfield      #19                 // Field objectName:Ljavax/management/ObjectName;
     124: return

  public void increase(org.apache.cxf.management.counters.MessageHandlingTimeRecorder);
    Code:
       0: aload_0
       1: getfield      #18                 // Field enabled:Z
       4: ifne          8
       7: return
       8: lconst_0
       9: lstore_2
      10: aload_1
      11: invokevirtual #20                 // Method org/apache/cxf/management/counters/MessageHandlingTimeRecorder.isOneWay:()Z
      14: ifeq          34
      17: aload_1
      18: invokevirtual #21                 // Method org/apache/cxf/management/counters/MessageHandlingTimeRecorder.getEndTime:()J
      21: lconst_0
      22: lcmp
      23: ifle          39
      26: aload_1
      27: invokevirtual #22                 // Method org/apache/cxf/management/counters/MessageHandlingTimeRecorder.getHandlingTime:()J
      30: lstore_2
      31: goto          39
      34: aload_1
      35: invokevirtual #22                 // Method org/apache/cxf/management/counters/MessageHandlingTimeRecorder.getHandlingTime:()J
      38: lstore_2
      39: aload_0
      40: getfield      #14                 // Field write:Ljava/util/concurrent/locks/ReentrantLock;
      43: invokevirtual #23                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      46: aload_1
      47: invokevirtual #24                 // Method org/apache/cxf/management/counters/MessageHandlingTimeRecorder.getFaultMode:()Lorg/apache/cxf/message/FaultMode;
      50: astore        4
      52: aload_0
      53: getfield      #4                  // Field invocations:Ljava/util/concurrent/atomic/AtomicInteger;
      56: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      59: pop
      60: aconst_null
      61: aload         4
      63: if_acmpne     69
      66: goto          160
      69: getstatic     #26                 // Field org/apache/cxf/management/counters/ResponseTimeCounter$1.$SwitchMap$org$apache$cxf$message$FaultMode:[I
      72: aload         4
      74: invokevirtual #27                 // Method org/apache/cxf/message/FaultMode.ordinal:()I
      77: iaload
      78: tableswitch   { // 1 to 4
                     1: 108
                     2: 119
                     3: 130
                     4: 141
               default: 152
          }
     108: aload_0
     109: getfield      #5                  // Field checkedApplicationFaults:Ljava/util/concurrent/atomic/AtomicInteger;
     112: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
     115: pop
     116: goto          160
     119: aload_0
     120: getfield      #8                  // Field logicalRuntimeFaults:Ljava/util/concurrent/atomic/AtomicInteger;
     123: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
     126: pop
     127: goto          160
     130: aload_0
     131: getfield      #7                  // Field runtimeFaults:Ljava/util/concurrent/atomic/AtomicInteger;
     134: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
     137: pop
     138: goto          160
     141: aload_0
     142: getfield      #6                  // Field unCheckedApplicationFaults:Ljava/util/concurrent/atomic/AtomicInteger;
     145: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
     148: pop
     149: goto          160
     152: aload_0
     153: getfield      #7                  // Field runtimeFaults:Ljava/util/concurrent/atomic/AtomicInteger;
     156: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
     159: pop
     160: aload_0
     161: getfield      #11                 // Field totalHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
     164: lload_2
     165: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
     168: pop2
     169: aload_0
     170: getfield      #17                 // Field averageProcessingTime:Ljava/util/concurrent/atomic/AtomicLong;
     173: aload_0
     174: getfield      #11                 // Field totalHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
     177: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
     180: aload_0
     181: getfield      #4                  // Field invocations:Ljava/util/concurrent/atomic/AtomicInteger;
     184: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
     187: i2l
     188: ldiv
     189: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicLong.getAndSet:(J)J
     192: pop2
     193: aload_0
     194: getfield      #14                 // Field write:Ljava/util/concurrent/locks/ReentrantLock;
     197: invokevirtual #33                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     200: goto          215
     203: astore        5
     205: aload_0
     206: getfield      #14                 // Field write:Ljava/util/concurrent/locks/ReentrantLock;
     209: invokevirtual #33                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     212: aload         5
     214: athrow
     215: aload_0
     216: lload_2
     217: invokespecial #34                 // Method updateMax:(J)V
     220: aload_0
     221: lload_2
     222: invokespecial #35                 // Method updateMin:(J)V
     225: return
    Exception table:
       from    to  target type
          46   193   203   any
         203   205   203   any

  public void reset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field invocations:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iconst_0
       5: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
       8: aload_0
       9: getfield      #5                  // Field checkedApplicationFaults:Ljava/util/concurrent/atomic/AtomicInteger;
      12: iconst_0
      13: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      16: aload_0
      17: getfield      #6                  // Field unCheckedApplicationFaults:Ljava/util/concurrent/atomic/AtomicInteger;
      20: iconst_0
      21: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      24: aload_0
      25: getfield      #7                  // Field runtimeFaults:Ljava/util/concurrent/atomic/AtomicInteger;
      28: iconst_0
      29: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      32: aload_0
      33: getfield      #8                  // Field logicalRuntimeFaults:Ljava/util/concurrent/atomic/AtomicInteger;
      36: iconst_0
      37: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      40: aload_0
      41: getfield      #11                 // Field totalHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
      44: lconst_0
      45: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      48: aload_0
      49: getfield      #15                 // Field maxHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
      52: lconst_0
      53: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      56: aload_0
      57: getfield      #16                 // Field minHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
      60: lconst_0
      61: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      64: aload_0
      65: getfield      #17                 // Field averageProcessingTime:Ljava/util/concurrent/atomic/AtomicLong;
      68: lconst_0
      69: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      72: return

  public javax.management.ObjectName getObjectName();
    Code:
       0: aload_0
       1: getfield      #19                 // Field objectName:Ljavax/management/ObjectName;
       4: areturn

  public java.lang.Number getAvgResponseTime();
    Code:
       0: aload_0
       1: getfield      #17                 // Field averageProcessingTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: invokestatic  #38                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      10: areturn

  public java.lang.Number getMaxResponseTime();
    Code:
       0: aload_0
       1: getfield      #15                 // Field maxHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: invokestatic  #38                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      10: areturn

  public java.lang.Number getMinResponseTime();
    Code:
       0: aload_0
       1: getfield      #16                 // Field minHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: invokestatic  #38                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      10: areturn

  public java.lang.Number getNumInvocations();
    Code:
       0: aload_0
       1: getfield      #4                  // Field invocations:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      10: areturn

  public java.lang.Number getNumCheckedApplicationFaults();
    Code:
       0: aload_0
       1: getfield      #5                  // Field checkedApplicationFaults:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      10: areturn

  public java.lang.Number getNumLogicalRuntimeFaults();
    Code:
       0: aload_0
       1: getfield      #8                  // Field logicalRuntimeFaults:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      10: areturn

  public java.lang.Number getNumRuntimeFaults();
    Code:
       0: aload_0
       1: getfield      #7                  // Field runtimeFaults:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      10: areturn

  public java.lang.Number getNumUnCheckedApplicationFaults();
    Code:
       0: aload_0
       1: getfield      #6                  // Field unCheckedApplicationFaults:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      10: areturn

  public java.lang.Number getTotalHandlingTime();
    Code:
       0: aload_0
       1: getfield      #11                 // Field totalHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  public void enable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field enabled:Z
       5: return

  public boolean isEnabled();
    Code:
       0: aload_0
       1: getfield      #18                 // Field enabled:Z
       4: ireturn

  private void updateMax(long);
    Code:
       0: aload_0
       1: getfield      #15                 // Field maxHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lstore_3
       8: lload_3
       9: lload_1
      10: lcmp
      11: iflt          17
      14: goto          35
      17: aload_0
      18: getfield      #15                 // Field maxHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
      21: lload_3
      22: lload_1
      23: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      26: ifeq          32
      29: goto          35
      32: goto          0
      35: return

  private void updateMin(long);
    Code:
       0: aload_0
       1: getfield      #16                 // Field minHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lstore_3
       8: lload_3
       9: lload_1
      10: lcmp
      11: ifge          23
      14: lload_3
      15: lconst_0
      16: lcmp
      17: ifeq          23
      20: goto          41
      23: aload_0
      24: getfield      #16                 // Field minHandlingTime:Ljava/util/concurrent/atomic/AtomicLong;
      27: lload_3
      28: lload_1
      29: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      32: ifeq          38
      35: goto          41
      38: goto          0
      41: return
}
