Compiled from "AbstractWrappedOutputStream.java"
public abstract class org.apache.cxf.io.AbstractWrappedOutputStream extends java.io.OutputStream {
  protected java.io.OutputStream wrappedStream;

  protected boolean written;

  protected boolean allowFlush;

  protected org.apache.cxf.io.AbstractWrappedOutputStream();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field allowFlush:Z
       9: return

  protected org.apache.cxf.io.AbstractWrappedOutputStream(java.io.OutputStream);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field allowFlush:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field wrappedStream:Ljava/io/OutputStream;
      14: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field written:Z
       4: ifne          16
       7: aload_0
       8: invokevirtual #5                  // Method onFirstWrite:()V
      11: aload_0
      12: iconst_1
      13: putfield      #4                  // Field written:Z
      16: aload_0
      17: getfield      #3                  // Field wrappedStream:Ljava/io/OutputStream;
      20: ifnull        33
      23: aload_0
      24: getfield      #3                  // Field wrappedStream:Ljava/io/OutputStream;
      27: aload_1
      28: iload_2
      29: iload_3
      30: invokevirtual #6                  // Method java/io/OutputStream.write:([BII)V
      33: return

  protected void onFirstWrite() throws java.io.IOException;
    Code:
       0: return

  public void write(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #7                  // Method write:([BII)V
       8: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field written:Z
       4: ifne          16
       7: aload_0
       8: invokevirtual #5                  // Method onFirstWrite:()V
      11: aload_0
      12: iconst_1
      13: putfield      #4                  // Field written:Z
      16: aload_0
      17: getfield      #3                  // Field wrappedStream:Ljava/io/OutputStream;
      20: ifnull        31
      23: aload_0
      24: getfield      #3                  // Field wrappedStream:Ljava/io/OutputStream;
      27: iload_1
      28: invokevirtual #8                  // Method java/io/OutputStream.write:(I)V
      31: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field wrappedStream:Ljava/io/OutputStream;
       4: ifnull        14
       7: aload_0
       8: getfield      #3                  // Field wrappedStream:Ljava/io/OutputStream;
      11: invokevirtual #9                  // Method java/io/OutputStream.close:()V
      14: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field written:Z
       4: ifeq          28
       7: aload_0
       8: getfield      #3                  // Field wrappedStream:Ljava/io/OutputStream;
      11: ifnull        28
      14: aload_0
      15: getfield      #2                  // Field allowFlush:Z
      18: ifeq          28
      21: aload_0
      22: getfield      #3                  // Field wrappedStream:Ljava/io/OutputStream;
      25: invokevirtual #10                 // Method java/io/OutputStream.flush:()V
      28: return

  public void allowFlush(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field allowFlush:Z
       5: return
}
