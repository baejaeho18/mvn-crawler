Compiled from "ThrottlingCounter.java"
public class org.apache.cxf.transport.jms.ThrottlingCounter implements org.apache.cxf.transport.jms.continuations.Counter {
  private java.util.concurrent.atomic.AtomicInteger counter;

  private final int lowWatermark;

  private final int highWatermark;

  private org.apache.cxf.transport.jms.util.JMSListenerContainer listenerContainer;

  public org.apache.cxf.transport.jms.ThrottlingCounter(int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #4                  // Field counter:Ljava/util/concurrent/atomic/AtomicInteger;
      15: aload_0
      16: iload_1
      17: putfield      #5                  // Field lowWatermark:I
      20: aload_0
      21: iload_2
      22: putfield      #6                  // Field highWatermark:I
      25: return

  public void setListenerContainer(org.apache.cxf.transport.jms.util.JMSListenerContainer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field listenerContainer:Lorg/apache/cxf/transport/jms/util/JMSListenerContainer;
       5: return

  public final int incrementAndGet();
    Code:
       0: aload_0
       1: getfield      #4                  // Field counter:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: istore_1
       8: aload_0
       9: getfield      #7                  // Field listenerContainer:Lorg/apache/cxf/transport/jms/util/JMSListenerContainer;
      12: ifnull        51
      15: aload_0
      16: getfield      #6                  // Field highWatermark:I
      19: iflt          51
      22: iload_1
      23: aload_0
      24: getfield      #6                  // Field highWatermark:I
      27: if_icmplt     51
      30: aload_0
      31: getfield      #7                  // Field listenerContainer:Lorg/apache/cxf/transport/jms/util/JMSListenerContainer;
      34: invokeinterface #9,  1            // InterfaceMethod org/apache/cxf/transport/jms/util/JMSListenerContainer.isRunning:()Z
      39: ifeq          51
      42: aload_0
      43: getfield      #7                  // Field listenerContainer:Lorg/apache/cxf/transport/jms/util/JMSListenerContainer;
      46: invokeinterface #10,  1           // InterfaceMethod org/apache/cxf/transport/jms/util/JMSListenerContainer.stop:()V
      51: iload_1
      52: ireturn

  public final int decrementAndGet();
    Code:
       0: aload_0
       1: getfield      #4                  // Field counter:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: istore_1
       8: aload_0
       9: getfield      #7                  // Field listenerContainer:Lorg/apache/cxf/transport/jms/util/JMSListenerContainer;
      12: ifnull        44
      15: iload_1
      16: aload_0
      17: getfield      #5                  // Field lowWatermark:I
      20: if_icmpgt     44
      23: aload_0
      24: getfield      #7                  // Field listenerContainer:Lorg/apache/cxf/transport/jms/util/JMSListenerContainer;
      27: invokeinterface #9,  1            // InterfaceMethod org/apache/cxf/transport/jms/util/JMSListenerContainer.isRunning:()Z
      32: ifne          44
      35: aload_0
      36: getfield      #7                  // Field listenerContainer:Lorg/apache/cxf/transport/jms/util/JMSListenerContainer;
      39: invokeinterface #12,  1           // InterfaceMethod org/apache/cxf/transport/jms/util/JMSListenerContainer.start:()V
      44: iload_1
      45: ireturn
}
