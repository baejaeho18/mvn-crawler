Compiled from "ModCountCopyOnWriteArrayList.java"
public final class org.apache.cxf.common.util.ModCountCopyOnWriteArrayList<T> extends java.util.concurrent.CopyOnWriteArrayList<T> {
  private static final long serialVersionUID;

  private java.util.concurrent.atomic.AtomicInteger modCount;

  public org.apache.cxf.common.util.ModCountCopyOnWriteArrayList();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      15: return

  public org.apache.cxf.common.util.ModCountCopyOnWriteArrayList(java.util.Collection<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method java/util/concurrent/CopyOnWriteArrayList."<init>":(Ljava/util/Collection;)V
       5: aload_0
       6: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       9: dup
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      13: putfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_1
      17: instanceof    #6                  // class org/apache/cxf/common/util/ModCountCopyOnWriteArrayList
      20: ifeq          37
      23: aload_0
      24: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      27: aload_1
      28: checkcast     #6                  // class org/apache/cxf/common/util/ModCountCopyOnWriteArrayList
      31: invokevirtual #7                  // Method getModCount:()I
      34: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      37: return

  public int getModCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn

  public void setModCount(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iload_1
       5: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
       8: return

  public void add(int, T);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #10                 // Method java/util/concurrent/CopyOnWriteArrayList.add:(ILjava/lang/Object;)V
       6: aload_0
       7: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      10: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      13: pop
      14: return

  public boolean add(T);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #12                 // Method java/util/concurrent/CopyOnWriteArrayList.add:(Ljava/lang/Object;)Z
       5: ifeq          18
       8: aload_0
       9: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      12: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      15: pop
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  public boolean addAll(java.util.Collection<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #13                 // Method java/util/concurrent/CopyOnWriteArrayList.addAll:(Ljava/util/Collection;)Z
       5: ifeq          18
       8: aload_0
       9: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      12: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      15: pop
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  public boolean addAll(int, java.util.Collection<? extends T>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #14                 // Method java/util/concurrent/CopyOnWriteArrayList.addAll:(ILjava/util/Collection;)Z
       6: ifeq          19
       9: aload_0
      10: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      13: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      16: pop
      17: iconst_1
      18: ireturn
      19: iconst_0
      20: ireturn

  public int addAllAbsent(java.util.Collection<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #15                 // Method java/util/concurrent/CopyOnWriteArrayList.addAllAbsent:(Ljava/util/Collection;)I
       5: istore_2
       6: iload_2
       7: ifle          18
      10: aload_0
      11: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      14: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      17: pop
      18: iload_2
      19: ireturn

  public boolean addIfAbsent(T);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #16                 // Method java/util/concurrent/CopyOnWriteArrayList.addIfAbsent:(Ljava/lang/Object;)Z
       5: ifeq          18
       8: aload_0
       9: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      12: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      15: pop
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  public void clear();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method java/util/concurrent/CopyOnWriteArrayList.clear:()V
       4: aload_0
       5: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
       8: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      11: pop
      12: return

  public T remove(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #18                 // Method java/util/concurrent/CopyOnWriteArrayList.remove:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnull        18
      10: aload_0
      11: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      14: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      17: pop
      18: aload_2
      19: areturn

  public boolean remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #19                 // Method java/util/concurrent/CopyOnWriteArrayList.remove:(Ljava/lang/Object;)Z
       5: ifeq          18
       8: aload_0
       9: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      12: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      15: pop
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  public boolean removeAll(java.util.Collection<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #20                 // Method java/util/concurrent/CopyOnWriteArrayList.removeAll:(Ljava/util/Collection;)Z
       5: ifeq          18
       8: aload_0
       9: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      12: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      15: pop
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  public boolean retainAll(java.util.Collection<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #21                 // Method java/util/concurrent/CopyOnWriteArrayList.retainAll:(Ljava/util/Collection;)Z
       5: ifeq          18
       8: aload_0
       9: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      12: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      15: pop
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokespecial #22                 // Method java/util/concurrent/CopyOnWriteArrayList.hashCode:()I
       4: aload_0
       5: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
       8: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      11: iadd
      12: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #6                  // class org/apache/cxf/common/util/ModCountCopyOnWriteArrayList
       4: ifeq          38
       7: aload_0
       8: aload_1
       9: invokespecial #23                 // Method java/util/concurrent/CopyOnWriteArrayList.equals:(Ljava/lang/Object;)Z
      12: ifeq          36
      15: aload_0
      16: getfield      #4                  // Field modCount:Ljava/util/concurrent/atomic/AtomicInteger;
      19: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      22: aload_1
      23: checkcast     #6                  // class org/apache/cxf/common/util/ModCountCopyOnWriteArrayList
      26: invokevirtual #7                  // Method getModCount:()I
      29: if_icmpne     36
      32: iconst_1
      33: goto          37
      36: iconst_0
      37: ireturn
      38: iconst_0
      39: ireturn
}
