Compiled from "SharedInputBuffer.java"
public class org.apache.cxf.transport.http.asyncclient.SharedInputBuffer extends org.apache.http.nio.util.ExpandableBuffer {
  private final java.util.concurrent.locks.ReentrantLock lock;

  private final java.util.concurrent.locks.Condition condition;

  private final int requestInputSize;

  private volatile org.apache.http.nio.IOControl ioctrl;

  private volatile boolean shutdown;

  private volatile boolean endOfStream;

  private volatile java.nio.ByteBuffer waitingBuffer;

  public org.apache.cxf.transport.http.asyncclient.SharedInputBuffer(int, org.apache.http.nio.util.ByteBufferAllocator);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #1                  // Method org/apache/http/nio/util/ExpandableBuffer."<init>":(ILorg/apache/http/nio/util/ByteBufferAllocator;)V
       6: aload_0
       7: new           #2                  // class java/util/concurrent/locks/ReentrantLock
      10: dup
      11: invokespecial #3                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      14: putfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      17: aload_0
      18: aload_0
      19: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      22: invokevirtual #5                  // Method java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;
      25: putfield      #6                  // Field condition:Ljava/util/concurrent/locks/Condition;
      28: aload_0
      29: iload_1
      30: iconst_3
      31: imul
      32: iconst_4
      33: idiv
      34: putfield      #7                  // Field requestInputSize:I
      37: return

  public void reset();
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdown:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      12: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      15: aload_0
      16: invokevirtual #10                 // Method clear:()V
      19: aload_0
      20: iconst_0
      21: putfield      #11                 // Field endOfStream:Z
      24: aload_0
      25: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      28: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      31: goto          44
      34: astore_1
      35: aload_0
      36: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      39: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      42: aload_1
      43: athrow
      44: return
    Exception table:
       from    to  target type
          15    24    34   any
          34    35    34   any

  public int consumeContent(org.apache.http.nio.ContentDecoder, org.apache.http.nio.IOControl) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdown:Z
       4: ifeq          15
       7: aload_2
       8: invokeinterface #13,  1           // InterfaceMethod org/apache/http/nio/IOControl.shutdown:()V
      13: iconst_m1
      14: ireturn
      15: aload_0
      16: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      19: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      22: aload_0
      23: aload_2
      24: putfield      #14                 // Field ioctrl:Lorg/apache/http/nio/IOControl;
      27: aload_0
      28: invokevirtual #15                 // Method setInputMode:()V
      31: iconst_0
      32: istore_3
      33: aload_0
      34: getfield      #16                 // Field waitingBuffer:Ljava/nio/ByteBuffer;
      37: ifnull        74
      40: aload_0
      41: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
      44: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
      47: ifne          74
      50: aload_1
      51: aload_0
      52: getfield      #16                 // Field waitingBuffer:Ljava/nio/ByteBuffer;
      55: invokeinterface #19,  2           // InterfaceMethod org/apache/http/nio/ContentDecoder.read:(Ljava/nio/ByteBuffer;)I
      60: dup
      61: istore        4
      63: ifle          74
      66: iload_3
      67: iload         4
      69: iadd
      70: istore_3
      71: goto          50
      74: aload_1
      75: aload_0
      76: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
      79: invokeinterface #19,  2           // InterfaceMethod org/apache/http/nio/ContentDecoder.read:(Ljava/nio/ByteBuffer;)I
      84: dup
      85: istore        4
      87: ifle          98
      90: iload_3
      91: iload         4
      93: iadd
      94: istore_3
      95: goto          74
      98: iload         4
     100: iconst_m1
     101: if_icmpeq     113
     104: aload_1
     105: invokeinterface #20,  1           // InterfaceMethod org/apache/http/nio/ContentDecoder.isCompleted:()Z
     110: ifeq          118
     113: aload_0
     114: iconst_1
     115: putfield      #11                 // Field endOfStream:Z
     118: aload_0
     119: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
     122: invokevirtual #21                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     125: ifne          144
     128: aload_0
     129: getfield      #14                 // Field ioctrl:Lorg/apache/http/nio/IOControl;
     132: ifnull        144
     135: aload_0
     136: getfield      #14                 // Field ioctrl:Lorg/apache/http/nio/IOControl;
     139: invokeinterface #22,  1           // InterfaceMethod org/apache/http/nio/IOControl.suspendInput:()V
     144: aload_0
     145: getfield      #6                  // Field condition:Ljava/util/concurrent/locks/Condition;
     148: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
     153: iload_3
     154: ifle          170
     157: iload_3
     158: istore        5
     160: aload_0
     161: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     164: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     167: iload         5
     169: ireturn
     170: aload_0
     171: getfield      #11                 // Field endOfStream:Z
     174: ifeq          190
     177: iconst_m1
     178: istore        5
     180: aload_0
     181: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     184: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     187: iload         5
     189: ireturn
     190: iconst_0
     191: istore        5
     193: aload_0
     194: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     197: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     200: iload         5
     202: ireturn
     203: astore        6
     205: aload_0
     206: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     209: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     212: aload         6
     214: athrow
    Exception table:
       from    to  target type
          22   160   203   any
         170   180   203   any
         190   193   203   any
         203   205   203   any

  public boolean hasData();
    Code:
       0: aload_0
       1: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokespecial #24                 // Method org/apache/http/nio/util/ExpandableBuffer.hasData:()Z
      11: istore_1
      12: aload_0
      13: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      16: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      19: iload_1
      20: ireturn
      21: astore_2
      22: aload_0
      23: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      26: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: aload_2
      30: athrow
    Exception table:
       from    to  target type
           7    12    21   any
          21    22    21   any

  public int available();
    Code:
       0: aload_0
       1: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokespecial #25                 // Method org/apache/http/nio/util/ExpandableBuffer.length:()I
      11: istore_1
      12: aload_0
      13: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      16: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      19: iload_1
      20: ireturn
      21: astore_2
      22: aload_0
      23: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      26: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: aload_2
      30: athrow
    Exception table:
       from    to  target type
           7    12    21   any
          21    22    21   any

  public int capacity();
    Code:
       0: aload_0
       1: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokespecial #26                 // Method org/apache/http/nio/util/ExpandableBuffer.capacity:()I
      11: istore_1
      12: aload_0
      13: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      16: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      19: iload_1
      20: ireturn
      21: astore_2
      22: aload_0
      23: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      26: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: aload_2
      30: athrow
    Exception table:
       from    to  target type
           7    12    21   any
          21    22    21   any

  public int length();
    Code:
       0: aload_0
       1: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokespecial #25                 // Method org/apache/http/nio/util/ExpandableBuffer.length:()I
      11: istore_1
      12: aload_0
      13: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      16: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      19: iload_1
      20: ireturn
      21: astore_2
      22: aload_0
      23: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      26: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: aload_2
      30: athrow
    Exception table:
       from    to  target type
           7    12    21   any
          21    22    21   any

  protected void waitForData(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: getfield      #16                 // Field waitingBuffer:Ljava/nio/ByteBuffer;
      11: ifnull        33
      14: aload_0
      15: getfield      #16                 // Field waitingBuffer:Ljava/nio/ByteBuffer;
      18: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
      21: iload_1
      22: if_icmple     33
      25: aload_0
      26: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      29: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      32: return
      33: aload_0
      34: invokespecial #24                 // Method org/apache/http/nio/util/ExpandableBuffer.hasData:()Z
      37: ifeq          48
      40: aload_0
      41: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      44: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      47: return
      48: aload_0
      49: getfield      #11                 // Field endOfStream:Z
      52: ifeq          63
      55: aload_0
      56: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      59: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      62: return
      63: aload_0
      64: getfield      #8                  // Field shutdown:Z
      67: ifeq          80
      70: new           #27                 // class java/io/InterruptedIOException
      73: dup
      74: ldc           #28                 // String Input operation aborted
      76: invokespecial #29                 // Method java/io/InterruptedIOException."<init>":(Ljava/lang/String;)V
      79: athrow
      80: aload_0
      81: getfield      #14                 // Field ioctrl:Lorg/apache/http/nio/IOControl;
      84: ifnull        96
      87: aload_0
      88: getfield      #14                 // Field ioctrl:Lorg/apache/http/nio/IOControl;
      91: invokeinterface #30,  1           // InterfaceMethod org/apache/http/nio/IOControl.requestInput:()V
      96: aload_0
      97: getfield      #6                  // Field condition:Ljava/util/concurrent/locks/Condition;
     100: invokeinterface #31,  1           // InterfaceMethod java/util/concurrent/locks/Condition.await:()V
     105: goto          7
     108: astore_2
     109: new           #33                 // class java/io/IOException
     112: dup
     113: ldc           #34                 // String Interrupted while waiting for more data
     115: invokespecial #35                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     118: athrow
     119: astore_3
     120: aload_0
     121: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     124: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     127: aload_3
     128: athrow
    Exception table:
       from    to  target type
           7    25   108   Class java/lang/InterruptedException
          33    40   108   Class java/lang/InterruptedException
          48    55   108   Class java/lang/InterruptedException
          63   108   108   Class java/lang/InterruptedException
           7    25   119   any
          33    40   119   any
          48    55   119   any
          63   120   119   any

  public void close();
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdown:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #11                 // Field endOfStream:Z
      13: aload_0
      14: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      17: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      20: aload_0
      21: getfield      #6                  // Field condition:Ljava/util/concurrent/locks/Condition;
      24: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
      29: aload_0
      30: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      33: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      36: goto          49
      39: astore_1
      40: aload_0
      41: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      44: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      47: aload_1
      48: athrow
      49: return
    Exception table:
       from    to  target type
          20    29    39   any
          39    40    39   any

  public void shutdown();
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdown:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #8                  // Field shutdown:Z
      13: aload_0
      14: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      17: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      20: aload_0
      21: getfield      #6                  // Field condition:Ljava/util/concurrent/locks/Condition;
      24: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
      29: aload_0
      30: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      33: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      36: goto          49
      39: astore_1
      40: aload_0
      41: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      44: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      47: aload_1
      48: athrow
      49: return
    Exception table:
       from    to  target type
          20    29    39   any
          39    40    39   any

  protected boolean isShutdown();
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdown:Z
       4: ireturn

  protected boolean isEndOfStream();
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdown:Z
       4: ifne          21
       7: aload_0
       8: invokevirtual #36                 // Method hasData:()Z
      11: ifne          25
      14: aload_0
      15: getfield      #11                 // Field endOfStream:Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdown:Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_0
      10: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      13: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      16: aload_0
      17: invokespecial #24                 // Method org/apache/http/nio/util/ExpandableBuffer.hasData:()Z
      20: ifne          28
      23: aload_0
      24: iconst_0
      25: invokevirtual #37                 // Method waitForData:(I)V
      28: aload_0
      29: invokevirtual #38                 // Method isEndOfStream:()Z
      32: ifeq          46
      35: iconst_m1
      36: istore_1
      37: aload_0
      38: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      41: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      44: iload_1
      45: ireturn
      46: aload_0
      47: invokevirtual #39                 // Method setOutputMode:()V
      50: aload_0
      51: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
      54: invokevirtual #40                 // Method java/nio/ByteBuffer.get:()B
      57: sipush        255
      60: iand
      61: istore_1
      62: aload_0
      63: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      66: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      69: iload_1
      70: ireturn
      71: astore_2
      72: aload_0
      73: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      76: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      79: aload_2
      80: athrow
    Exception table:
       from    to  target type
          16    37    71   any
          46    62    71   any
          71    72    71   any

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdown:Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_1
      10: ifnonnull     15
      13: iconst_0
      14: ireturn
      15: aload_0
      16: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      19: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      22: aload_0
      23: invokevirtual #36                 // Method hasData:()Z
      26: ifne          79
      29: aload_0
      30: aload_1
      31: iload_2
      32: iload_3
      33: invokestatic  #41                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;
      36: putfield      #16                 // Field waitingBuffer:Ljava/nio/ByteBuffer;
      39: aload_0
      40: iload_2
      41: invokevirtual #37                 // Method waitForData:(I)V
      44: aload_0
      45: getfield      #16                 // Field waitingBuffer:Ljava/nio/ByteBuffer;
      48: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
      51: iload_2
      52: isub
      53: istore        4
      55: aload_0
      56: aconst_null
      57: putfield      #16                 // Field waitingBuffer:Ljava/nio/ByteBuffer;
      60: iload         4
      62: ifle          79
      65: iload         4
      67: istore        5
      69: aload_0
      70: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      73: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      76: iload         5
      78: ireturn
      79: aload_0
      80: invokevirtual #38                 // Method isEndOfStream:()Z
      83: ifeq          99
      86: iconst_m1
      87: istore        4
      89: aload_0
      90: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      93: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      96: iload         4
      98: ireturn
      99: aload_0
     100: invokevirtual #39                 // Method setOutputMode:()V
     103: iload_3
     104: istore        4
     106: iload         4
     108: aload_0
     109: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
     112: invokevirtual #42                 // Method java/nio/ByteBuffer.remaining:()I
     115: if_icmple     127
     118: aload_0
     119: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
     122: invokevirtual #42                 // Method java/nio/ByteBuffer.remaining:()I
     125: istore        4
     127: aload_0
     128: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
     131: aload_1
     132: iload_2
     133: iload         4
     135: invokevirtual #43                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
     138: pop
     139: aload_0
     140: getfield      #17                 // Field buffer:Ljava/nio/ByteBuffer;
     143: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
     146: aload_0
     147: getfield      #7                  // Field requestInputSize:I
     150: if_icmplt     176
     153: aload_0
     154: getfield      #11                 // Field endOfStream:Z
     157: ifne          176
     160: aload_0
     161: getfield      #14                 // Field ioctrl:Lorg/apache/http/nio/IOControl;
     164: ifnull        176
     167: aload_0
     168: getfield      #14                 // Field ioctrl:Lorg/apache/http/nio/IOControl;
     171: invokeinterface #30,  1           // InterfaceMethod org/apache/http/nio/IOControl.requestInput:()V
     176: iload         4
     178: istore        5
     180: aload_0
     181: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     184: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     187: iload         5
     189: ireturn
     190: astore        6
     192: aload_0
     193: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     196: invokevirtual #12                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     199: aload         6
     201: athrow
    Exception table:
       from    to  target type
          22    69   190   any
          79    89   190   any
          99   180   190   any
         190   192   190   any

  public int read(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdown:Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_1
      10: ifnonnull     15
      13: iconst_0
      14: ireturn
      15: aload_0
      16: aload_1
      17: iconst_0
      18: aload_1
      19: arraylength
      20: invokevirtual #44                 // Method read:([BII)I
      23: ireturn
}
