Compiled from "NFileEntity.java"
public class org.apache.http.nio.entity.NFileEntity extends org.apache.http.entity.AbstractHttpEntity implements org.apache.http.nio.entity.HttpAsyncContentProducer,org.apache.http.nio.entity.ProducingNHttpEntity {
  private final java.io.File file;

  private java.io.RandomAccessFile accessfile;

  private java.nio.channels.FileChannel fileChannel;

  private long idx;

  private boolean useFileChannels;

  public org.apache.http.nio.entity.NFileEntity(java.io.File, org.apache.http.entity.ContentType, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/http/entity/AbstractHttpEntity."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long -1l
       8: putfield      #4                  // Field idx:J
      11: aload_1
      12: ldc           #5                  // String File
      14: invokestatic  #6                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      17: pop
      18: aload_0
      19: aload_1
      20: putfield      #7                  // Field file:Ljava/io/File;
      23: aload_0
      24: iload_3
      25: putfield      #8                  // Field useFileChannels:Z
      28: aload_2
      29: ifnull        40
      32: aload_0
      33: aload_2
      34: invokevirtual #9                  // Method org/apache/http/entity/ContentType.toString:()Ljava/lang/String;
      37: invokevirtual #10                 // Method setContentType:(Ljava/lang/String;)V
      40: return

  public org.apache.http.nio.entity.NFileEntity(java.io.File);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/http/entity/AbstractHttpEntity."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long -1l
       8: putfield      #4                  // Field idx:J
      11: aload_1
      12: ldc           #5                  // String File
      14: invokestatic  #6                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      17: pop
      18: aload_0
      19: aload_1
      20: putfield      #7                  // Field file:Ljava/io/File;
      23: return

  public org.apache.http.nio.entity.NFileEntity(java.io.File, org.apache.http.entity.ContentType);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokespecial #11                 // Method "<init>":(Ljava/io/File;Lorg/apache/http/entity/ContentType;Z)V
       7: return

  public org.apache.http.nio.entity.NFileEntity(java.io.File, java.lang.String, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/http/entity/AbstractHttpEntity."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long -1l
       8: putfield      #4                  // Field idx:J
      11: aload_1
      12: ldc           #5                  // String File
      14: invokestatic  #6                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      17: pop
      18: aload_0
      19: aload_1
      20: putfield      #7                  // Field file:Ljava/io/File;
      23: aload_0
      24: iload_3
      25: putfield      #8                  // Field useFileChannels:Z
      28: aload_0
      29: aload_2
      30: invokevirtual #10                 // Method setContentType:(Ljava/lang/String;)V
      33: return

  public org.apache.http.nio.entity.NFileEntity(java.io.File, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokespecial #12                 // Method "<init>":(Ljava/io/File;Ljava/lang/String;Z)V
       7: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field accessfile:Ljava/io/RandomAccessFile;
       4: ifnull        14
       7: aload_0
       8: getfield      #13                 // Field accessfile:Ljava/io/RandomAccessFile;
      11: invokevirtual #14                 // Method java/io/RandomAccessFile.close:()V
      14: aload_0
      15: aconst_null
      16: putfield      #13                 // Field accessfile:Ljava/io/RandomAccessFile;
      19: aload_0
      20: aconst_null
      21: putfield      #15                 // Field fileChannel:Ljava/nio/channels/FileChannel;
      24: return

  public void finish() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method close:()V
       4: return

  public long getContentLength();
    Code:
       0: aload_0
       1: getfield      #7                  // Field file:Ljava/io/File;
       4: invokevirtual #17                 // Method java/io/File.length:()J
       7: lreturn

  public boolean isRepeatable();
    Code:
       0: iconst_1
       1: ireturn

  public void produceContent(org.apache.http.nio.ContentEncoder, org.apache.http.nio.IOControl) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field accessfile:Ljava/io/RandomAccessFile;
       4: ifnonnull     24
       7: aload_0
       8: new           #18                 // class java/io/RandomAccessFile
      11: dup
      12: aload_0
      13: getfield      #7                  // Field file:Ljava/io/File;
      16: ldc           #19                 // String r
      18: invokespecial #20                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
      21: putfield      #13                 // Field accessfile:Ljava/io/RandomAccessFile;
      24: aload_0
      25: getfield      #15                 // Field fileChannel:Ljava/nio/channels/FileChannel;
      28: ifnonnull     47
      31: aload_0
      32: aload_0
      33: getfield      #13                 // Field accessfile:Ljava/io/RandomAccessFile;
      36: invokevirtual #21                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      39: putfield      #15                 // Field fileChannel:Ljava/nio/channels/FileChannel;
      42: aload_0
      43: lconst_0
      44: putfield      #4                  // Field idx:J
      47: aload_0
      48: getfield      #8                  // Field useFileChannels:Z
      51: ifeq          85
      54: aload_1
      55: instanceof    #22                 // class org/apache/http/nio/FileContentEncoder
      58: ifeq          85
      61: aload_1
      62: checkcast     #22                 // class org/apache/http/nio/FileContentEncoder
      65: aload_0
      66: getfield      #15                 // Field fileChannel:Ljava/nio/channels/FileChannel;
      69: aload_0
      70: getfield      #4                  // Field idx:J
      73: ldc2_w        #23                 // long 9223372036854775807l
      76: invokeinterface #25,  6           // InterfaceMethod org/apache/http/nio/FileContentEncoder.transfer:(Ljava/nio/channels/FileChannel;JJ)J
      81: lstore_3
      82: goto          108
      85: aload_0
      86: getfield      #15                 // Field fileChannel:Ljava/nio/channels/FileChannel;
      89: aload_0
      90: getfield      #4                  // Field idx:J
      93: ldc2_w        #23                 // long 9223372036854775807l
      96: new           #26                 // class org/apache/http/nio/ContentEncoderChannel
      99: dup
     100: aload_1
     101: invokespecial #27                 // Method org/apache/http/nio/ContentEncoderChannel."<init>":(Lorg/apache/http/nio/ContentEncoder;)V
     104: invokevirtual #28                 // Method java/nio/channels/FileChannel.transferTo:(JJLjava/nio/channels/WritableByteChannel;)J
     107: lstore_3
     108: lload_3
     109: lconst_0
     110: lcmp
     111: ifle          124
     114: aload_0
     115: dup
     116: getfield      #4                  // Field idx:J
     119: lload_3
     120: ladd
     121: putfield      #4                  // Field idx:J
     124: aload_0
     125: getfield      #4                  // Field idx:J
     128: aload_0
     129: getfield      #15                 // Field fileChannel:Ljava/nio/channels/FileChannel;
     132: invokevirtual #29                 // Method java/nio/channels/FileChannel.size:()J
     135: lcmp
     136: iflt          149
     139: aload_1
     140: invokeinterface #30,  1           // InterfaceMethod org/apache/http/nio/ContentEncoder.complete:()V
     145: aload_0
     146: invokevirtual #16                 // Method close:()V
     149: return

  public boolean isStreaming();
    Code:
       0: iconst_0
       1: ireturn

  public java.io.InputStream getContent() throws java.io.IOException;
    Code:
       0: new           #31                 // class java/io/FileInputStream
       3: dup
       4: aload_0
       5: getfield      #7                  // Field file:Ljava/io/File;
       8: invokespecial #32                 // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      11: areturn

  public void writeTo(java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: ldc           #33                 // String Output stream
       3: invokestatic  #6                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #31                 // class java/io/FileInputStream
      10: dup
      11: aload_0
      12: getfield      #7                  // Field file:Ljava/io/File;
      15: invokespecial #32                 // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      18: astore_2
      19: sipush        4096
      22: newarray       byte
      24: astore_3
      25: aload_2
      26: aload_3
      27: invokevirtual #34                 // Method java/io/InputStream.read:([B)I
      30: dup
      31: istore        4
      33: iconst_m1
      34: if_icmpeq     48
      37: aload_1
      38: aload_3
      39: iconst_0
      40: iload         4
      42: invokevirtual #35                 // Method java/io/OutputStream.write:([BII)V
      45: goto          25
      48: aload_1
      49: invokevirtual #36                 // Method java/io/OutputStream.flush:()V
      52: aload_2
      53: invokevirtual #37                 // Method java/io/InputStream.close:()V
      56: goto          68
      59: astore        5
      61: aload_2
      62: invokevirtual #37                 // Method java/io/InputStream.close:()V
      65: aload         5
      67: athrow
      68: return
    Exception table:
       from    to  target type
          19    52    59   any
          59    61    59   any
}
