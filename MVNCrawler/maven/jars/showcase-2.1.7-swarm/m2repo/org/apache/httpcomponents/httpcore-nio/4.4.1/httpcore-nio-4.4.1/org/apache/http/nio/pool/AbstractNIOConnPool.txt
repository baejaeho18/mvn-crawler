Compiled from "AbstractNIOConnPool.java"
public abstract class org.apache.http.nio.pool.AbstractNIOConnPool<T, C, E extends org.apache.http.pool.PoolEntry<T, C>> implements org.apache.http.pool.ConnPool<T, E>, org.apache.http.pool.ConnPoolControl<T> {
  private final org.apache.http.nio.reactor.ConnectingIOReactor ioreactor;

  private final org.apache.http.nio.pool.NIOConnFactory<T, C> connFactory;

  private final org.apache.http.nio.pool.SocketAddressResolver<T> addressResolver;

  private final org.apache.http.nio.reactor.SessionRequestCallback sessionRequestCallback;

  private final java.util.Map<T, org.apache.http.nio.pool.RouteSpecificPool<T, C, E>> routeToPool;

  private final java.util.LinkedList<org.apache.http.nio.pool.LeaseRequest<T, C, E>> leasingRequests;

  private final java.util.Set<org.apache.http.nio.reactor.SessionRequest> pending;

  private final java.util.Set<E> leased;

  private final java.util.LinkedList<E> available;

  private final java.util.concurrent.ConcurrentLinkedQueue<org.apache.http.nio.pool.LeaseRequest<T, C, E>> completedRequests;

  private final java.util.Map<T, java.lang.Integer> maxPerRoute;

  private final java.util.concurrent.locks.Lock lock;

  private final java.util.concurrent.atomic.AtomicBoolean isShutDown;

  private volatile int defaultMaxPerRoute;

  private volatile int maxTotal;

  public org.apache.http.nio.pool.AbstractNIOConnPool(org.apache.http.nio.reactor.ConnectingIOReactor, org.apache.http.nio.pool.NIOConnFactory<T, C>, int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String I/O reactor
       7: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: pop
      11: aload_2
      12: ldc           #4                  // String Connection factory
      14: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      17: pop
      18: iload_3
      19: ldc           #5                  // String Max per route value
      21: invokestatic  #6                  // Method org/apache/http/util/Args.positive:(ILjava/lang/String;)I
      24: pop
      25: iload         4
      27: ldc           #7                  // String Max total value
      29: invokestatic  #6                  // Method org/apache/http/util/Args.positive:(ILjava/lang/String;)I
      32: pop
      33: aload_0
      34: aload_1
      35: putfield      #8                  // Field ioreactor:Lorg/apache/http/nio/reactor/ConnectingIOReactor;
      38: aload_0
      39: aload_2
      40: putfield      #9                  // Field connFactory:Lorg/apache/http/nio/pool/NIOConnFactory;
      43: aload_0
      44: new           #10                 // class org/apache/http/nio/pool/AbstractNIOConnPool$1
      47: dup
      48: aload_0
      49: invokespecial #11                 // Method org/apache/http/nio/pool/AbstractNIOConnPool$1."<init>":(Lorg/apache/http/nio/pool/AbstractNIOConnPool;)V
      52: putfield      #12                 // Field addressResolver:Lorg/apache/http/nio/pool/SocketAddressResolver;
      55: aload_0
      56: new           #13                 // class org/apache/http/nio/pool/AbstractNIOConnPool$InternalSessionRequestCallback
      59: dup
      60: aload_0
      61: invokespecial #14                 // Method org/apache/http/nio/pool/AbstractNIOConnPool$InternalSessionRequestCallback."<init>":(Lorg/apache/http/nio/pool/AbstractNIOConnPool;)V
      64: putfield      #15                 // Field sessionRequestCallback:Lorg/apache/http/nio/reactor/SessionRequestCallback;
      67: aload_0
      68: new           #16                 // class java/util/HashMap
      71: dup
      72: invokespecial #17                 // Method java/util/HashMap."<init>":()V
      75: putfield      #18                 // Field routeToPool:Ljava/util/Map;
      78: aload_0
      79: new           #19                 // class java/util/LinkedList
      82: dup
      83: invokespecial #20                 // Method java/util/LinkedList."<init>":()V
      86: putfield      #21                 // Field leasingRequests:Ljava/util/LinkedList;
      89: aload_0
      90: new           #22                 // class java/util/HashSet
      93: dup
      94: invokespecial #23                 // Method java/util/HashSet."<init>":()V
      97: putfield      #24                 // Field pending:Ljava/util/Set;
     100: aload_0
     101: new           #22                 // class java/util/HashSet
     104: dup
     105: invokespecial #23                 // Method java/util/HashSet."<init>":()V
     108: putfield      #25                 // Field leased:Ljava/util/Set;
     111: aload_0
     112: new           #19                 // class java/util/LinkedList
     115: dup
     116: invokespecial #20                 // Method java/util/LinkedList."<init>":()V
     119: putfield      #26                 // Field available:Ljava/util/LinkedList;
     122: aload_0
     123: new           #16                 // class java/util/HashMap
     126: dup
     127: invokespecial #17                 // Method java/util/HashMap."<init>":()V
     130: putfield      #27                 // Field maxPerRoute:Ljava/util/Map;
     133: aload_0
     134: new           #28                 // class java/util/concurrent/ConcurrentLinkedQueue
     137: dup
     138: invokespecial #29                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
     141: putfield      #30                 // Field completedRequests:Ljava/util/concurrent/ConcurrentLinkedQueue;
     144: aload_0
     145: new           #31                 // class java/util/concurrent/locks/ReentrantLock
     148: dup
     149: invokespecial #32                 // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
     152: putfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     155: aload_0
     156: new           #34                 // class java/util/concurrent/atomic/AtomicBoolean
     159: dup
     160: iconst_0
     161: invokespecial #35                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
     164: putfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
     167: aload_0
     168: iload_3
     169: putfield      #37                 // Field defaultMaxPerRoute:I
     172: aload_0
     173: iload         4
     175: putfield      #38                 // Field maxTotal:I
     178: return

  public org.apache.http.nio.pool.AbstractNIOConnPool(org.apache.http.nio.reactor.ConnectingIOReactor, org.apache.http.nio.pool.NIOConnFactory<T, C>, org.apache.http.nio.pool.SocketAddressResolver<T>, int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String I/O reactor
       7: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: pop
      11: aload_2
      12: ldc           #4                  // String Connection factory
      14: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      17: pop
      18: aload_3
      19: ldc           #39                 // String Address resolver
      21: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: pop
      25: iload         4
      27: ldc           #5                  // String Max per route value
      29: invokestatic  #6                  // Method org/apache/http/util/Args.positive:(ILjava/lang/String;)I
      32: pop
      33: iload         5
      35: ldc           #7                  // String Max total value
      37: invokestatic  #6                  // Method org/apache/http/util/Args.positive:(ILjava/lang/String;)I
      40: pop
      41: aload_0
      42: aload_1
      43: putfield      #8                  // Field ioreactor:Lorg/apache/http/nio/reactor/ConnectingIOReactor;
      46: aload_0
      47: aload_2
      48: putfield      #9                  // Field connFactory:Lorg/apache/http/nio/pool/NIOConnFactory;
      51: aload_0
      52: aload_3
      53: putfield      #12                 // Field addressResolver:Lorg/apache/http/nio/pool/SocketAddressResolver;
      56: aload_0
      57: new           #13                 // class org/apache/http/nio/pool/AbstractNIOConnPool$InternalSessionRequestCallback
      60: dup
      61: aload_0
      62: invokespecial #14                 // Method org/apache/http/nio/pool/AbstractNIOConnPool$InternalSessionRequestCallback."<init>":(Lorg/apache/http/nio/pool/AbstractNIOConnPool;)V
      65: putfield      #15                 // Field sessionRequestCallback:Lorg/apache/http/nio/reactor/SessionRequestCallback;
      68: aload_0
      69: new           #16                 // class java/util/HashMap
      72: dup
      73: invokespecial #17                 // Method java/util/HashMap."<init>":()V
      76: putfield      #18                 // Field routeToPool:Ljava/util/Map;
      79: aload_0
      80: new           #19                 // class java/util/LinkedList
      83: dup
      84: invokespecial #20                 // Method java/util/LinkedList."<init>":()V
      87: putfield      #21                 // Field leasingRequests:Ljava/util/LinkedList;
      90: aload_0
      91: new           #22                 // class java/util/HashSet
      94: dup
      95: invokespecial #23                 // Method java/util/HashSet."<init>":()V
      98: putfield      #24                 // Field pending:Ljava/util/Set;
     101: aload_0
     102: new           #22                 // class java/util/HashSet
     105: dup
     106: invokespecial #23                 // Method java/util/HashSet."<init>":()V
     109: putfield      #25                 // Field leased:Ljava/util/Set;
     112: aload_0
     113: new           #19                 // class java/util/LinkedList
     116: dup
     117: invokespecial #20                 // Method java/util/LinkedList."<init>":()V
     120: putfield      #26                 // Field available:Ljava/util/LinkedList;
     123: aload_0
     124: new           #28                 // class java/util/concurrent/ConcurrentLinkedQueue
     127: dup
     128: invokespecial #29                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
     131: putfield      #30                 // Field completedRequests:Ljava/util/concurrent/ConcurrentLinkedQueue;
     134: aload_0
     135: new           #16                 // class java/util/HashMap
     138: dup
     139: invokespecial #17                 // Method java/util/HashMap."<init>":()V
     142: putfield      #27                 // Field maxPerRoute:Ljava/util/Map;
     145: aload_0
     146: new           #31                 // class java/util/concurrent/locks/ReentrantLock
     149: dup
     150: invokespecial #32                 // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
     153: putfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     156: aload_0
     157: new           #34                 // class java/util/concurrent/atomic/AtomicBoolean
     160: dup
     161: iconst_0
     162: invokespecial #35                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
     165: putfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
     168: aload_0
     169: iload         4
     171: putfield      #37                 // Field defaultMaxPerRoute:I
     174: aload_0
     175: iload         5
     177: putfield      #38                 // Field maxTotal:I
     180: return

  protected java.net.SocketAddress resolveRemoteAddress(T);
    Code:
       0: aconst_null
       1: areturn

  protected java.net.SocketAddress resolveLocalAddress(T);
    Code:
       0: aconst_null
       1: areturn

  protected abstract E createEntry(T, C);

  protected void onLease(E);
    Code:
       0: return

  protected void onRelease(E);
    Code:
       0: return

  protected void onReuse(E);
    Code:
       0: return

  public boolean isShutdown();
    Code:
       0: aload_0
       1: getfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public void shutdown(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          259
      12: aload_0
      13: invokespecial #42                 // Method fireCallbacks:()V
      16: aload_0
      17: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      20: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      25: aload_0
      26: getfield      #24                 // Field pending:Ljava/util/Set;
      29: invokeinterface #44,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      34: astore_3
      35: aload_3
      36: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      41: ifeq          65
      44: aload_3
      45: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      50: checkcast     #47                 // class org/apache/http/nio/reactor/SessionRequest
      53: astore        4
      55: aload         4
      57: invokeinterface #48,  1           // InterfaceMethod org/apache/http/nio/reactor/SessionRequest.cancel:()V
      62: goto          35
      65: aload_0
      66: getfield      #26                 // Field available:Ljava/util/LinkedList;
      69: invokevirtual #49                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
      72: astore_3
      73: aload_3
      74: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      79: ifeq          101
      82: aload_3
      83: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      88: checkcast     #50                 // class org/apache/http/pool/PoolEntry
      91: astore        4
      93: aload         4
      95: invokevirtual #51                 // Method org/apache/http/pool/PoolEntry.close:()V
      98: goto          73
     101: aload_0
     102: getfield      #25                 // Field leased:Ljava/util/Set;
     105: invokeinterface #44,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     110: astore_3
     111: aload_3
     112: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     117: ifeq          139
     120: aload_3
     121: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     126: checkcast     #50                 // class org/apache/http/pool/PoolEntry
     129: astore        4
     131: aload         4
     133: invokevirtual #51                 // Method org/apache/http/pool/PoolEntry.close:()V
     136: goto          111
     139: aload_0
     140: getfield      #18                 // Field routeToPool:Ljava/util/Map;
     143: invokeinterface #52,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     148: invokeinterface #53,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     153: astore_3
     154: aload_3
     155: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     160: ifeq          182
     163: aload_3
     164: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     169: checkcast     #54                 // class org/apache/http/nio/pool/RouteSpecificPool
     172: astore        4
     174: aload         4
     176: invokevirtual #55                 // Method org/apache/http/nio/pool/RouteSpecificPool.shutdown:()V
     179: goto          154
     182: aload_0
     183: getfield      #18                 // Field routeToPool:Ljava/util/Map;
     186: invokeinterface #56,  1           // InterfaceMethod java/util/Map.clear:()V
     191: aload_0
     192: getfield      #25                 // Field leased:Ljava/util/Set;
     195: invokeinterface #57,  1           // InterfaceMethod java/util/Set.clear:()V
     200: aload_0
     201: getfield      #24                 // Field pending:Ljava/util/Set;
     204: invokeinterface #57,  1           // InterfaceMethod java/util/Set.clear:()V
     209: aload_0
     210: getfield      #26                 // Field available:Ljava/util/LinkedList;
     213: invokevirtual #58                 // Method java/util/LinkedList.clear:()V
     216: aload_0
     217: getfield      #21                 // Field leasingRequests:Ljava/util/LinkedList;
     220: invokevirtual #58                 // Method java/util/LinkedList.clear:()V
     223: aload_0
     224: getfield      #8                  // Field ioreactor:Lorg/apache/http/nio/reactor/ConnectingIOReactor;
     227: lload_1
     228: invokeinterface #59,  3           // InterfaceMethod org/apache/http/nio/reactor/ConnectingIOReactor.shutdown:(J)V
     233: aload_0
     234: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     237: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     242: goto          259
     245: astore        5
     247: aload_0
     248: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     251: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     256: aload         5
     258: athrow
     259: return
    Exception table:
       from    to  target type
          25   233   245   any
         245   247   245   any

  private org.apache.http.nio.pool.RouteSpecificPool<T, C, E> getPool(T);
    Code:
       0: aload_0
       1: getfield      #18                 // Field routeToPool:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #61,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #54                 // class org/apache/http/nio/pool/RouteSpecificPool
      13: astore_2
      14: aload_2
      15: ifnonnull     40
      18: new           #62                 // class org/apache/http/nio/pool/AbstractNIOConnPool$2
      21: dup
      22: aload_0
      23: aload_1
      24: invokespecial #63                 // Method org/apache/http/nio/pool/AbstractNIOConnPool$2."<init>":(Lorg/apache/http/nio/pool/AbstractNIOConnPool;Ljava/lang/Object;)V
      27: astore_2
      28: aload_0
      29: getfield      #18                 // Field routeToPool:Ljava/util/Map;
      32: aload_1
      33: aload_2
      34: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: pop
      40: aload_2
      41: areturn

  public java.util.concurrent.Future<E> lease(T, java.lang.Object, long, java.util.concurrent.TimeUnit, org.apache.http.concurrent.FutureCallback<E>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lload_3
       4: lload_3
       5: aload         5
       7: aload         6
       9: invokevirtual #65                 // Method lease:(Ljava/lang/Object;Ljava/lang/Object;JJLjava/util/concurrent/TimeUnit;Lorg/apache/http/concurrent/FutureCallback;)Ljava/util/concurrent/Future;
      12: areturn

  public java.util.concurrent.Future<E> lease(T, java.lang.Object, long, long, java.util.concurrent.TimeUnit, org.apache.http.concurrent.FutureCallback<E>);
    Code:
       0: aload_1
       1: ldc           #66                 // String Route
       3: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload         7
       9: ldc           #67                 // String Time unit
      11: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: pop
      15: aload_0
      16: getfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
      19: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      22: ifne          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ldc           #68                 // String Connection pool shut down
      32: invokestatic  #69                 // Method org/apache/http/util/Asserts.check:(ZLjava/lang/String;)V
      35: new           #70                 // class org/apache/http/concurrent/BasicFuture
      38: dup
      39: aload         8
      41: invokespecial #71                 // Method org/apache/http/concurrent/BasicFuture."<init>":(Lorg/apache/http/concurrent/FutureCallback;)V
      44: astore        9
      46: aload_0
      47: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      50: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      55: lload_3
      56: lconst_0
      57: lcmp
      58: ifle          70
      61: aload         7
      63: lload_3
      64: invokevirtual #72                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      67: goto          71
      70: lconst_0
      71: lstore        10
      73: new           #73                 // class org/apache/http/nio/pool/LeaseRequest
      76: dup
      77: aload_1
      78: aload_2
      79: lload         10
      81: lload         5
      83: aload         9
      85: invokespecial #74                 // Method org/apache/http/nio/pool/LeaseRequest."<init>":(Ljava/lang/Object;Ljava/lang/Object;JJLorg/apache/http/concurrent/BasicFuture;)V
      88: astore        12
      90: aload_0
      91: aload         12
      93: invokespecial #75                 // Method processPendingRequest:(Lorg/apache/http/nio/pool/LeaseRequest;)Z
      96: istore        13
      98: aload         12
     100: invokevirtual #76                 // Method org/apache/http/nio/pool/LeaseRequest.isDone:()Z
     103: ifne          121
     106: iload         13
     108: ifne          121
     111: aload_0
     112: getfield      #21                 // Field leasingRequests:Ljava/util/LinkedList;
     115: aload         12
     117: invokevirtual #77                 // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z
     120: pop
     121: aload         12
     123: invokevirtual #76                 // Method org/apache/http/nio/pool/LeaseRequest.isDone:()Z
     126: ifeq          139
     129: aload_0
     130: getfield      #30                 // Field completedRequests:Ljava/util/concurrent/ConcurrentLinkedQueue;
     133: aload         12
     135: invokevirtual #78                 // Method java/util/concurrent/ConcurrentLinkedQueue.add:(Ljava/lang/Object;)Z
     138: pop
     139: aload_0
     140: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     143: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     148: goto          165
     151: astore        14
     153: aload_0
     154: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     157: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     162: aload         14
     164: athrow
     165: aload_0
     166: invokespecial #42                 // Method fireCallbacks:()V
     169: aload         9
     171: areturn
    Exception table:
       from    to  target type
          55   139   151   any
         151   153   151   any

  public java.util.concurrent.Future<E> lease(T, java.lang.Object, org.apache.http.concurrent.FutureCallback<E>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ldc2_w        #79                 // long -1l
       6: getstatic     #81                 // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
       9: aload_3
      10: invokevirtual #82                 // Method lease:(Ljava/lang/Object;Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;Lorg/apache/http/concurrent/FutureCallback;)Ljava/util/concurrent/Future;
      13: areturn

  public java.util.concurrent.Future<E> lease(T, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ldc2_w        #79                 // long -1l
       6: getstatic     #81                 // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
       9: aconst_null
      10: invokevirtual #82                 // Method lease:(Ljava/lang/Object;Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;Lorg/apache/http/concurrent/FutureCallback;)Ljava/util/concurrent/Future;
      13: areturn

  public void release(E, boolean);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
       9: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      12: ifeq          16
      15: return
      16: aload_0
      17: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      20: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      25: aload_0
      26: getfield      #25                 // Field leased:Ljava/util/Set;
      29: aload_1
      30: invokeinterface #83,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      35: ifeq          81
      38: aload_0
      39: aload_1
      40: invokevirtual #84                 // Method org/apache/http/pool/PoolEntry.getRoute:()Ljava/lang/Object;
      43: invokespecial #85                 // Method getPool:(Ljava/lang/Object;)Lorg/apache/http/nio/pool/RouteSpecificPool;
      46: astore_3
      47: aload_3
      48: aload_1
      49: iload_2
      50: invokevirtual #86                 // Method org/apache/http/nio/pool/RouteSpecificPool.free:(Lorg/apache/http/pool/PoolEntry;Z)V
      53: iload_2
      54: ifeq          73
      57: aload_0
      58: getfield      #26                 // Field available:Ljava/util/LinkedList;
      61: aload_1
      62: invokevirtual #87                 // Method java/util/LinkedList.addFirst:(Ljava/lang/Object;)V
      65: aload_0
      66: aload_1
      67: invokevirtual #88                 // Method onRelease:(Lorg/apache/http/pool/PoolEntry;)V
      70: goto          77
      73: aload_1
      74: invokevirtual #51                 // Method org/apache/http/pool/PoolEntry.close:()V
      77: aload_0
      78: invokespecial #89                 // Method processNextPendingRequest:()V
      81: aload_0
      82: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      85: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      90: goto          107
      93: astore        4
      95: aload_0
      96: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      99: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     104: aload         4
     106: athrow
     107: aload_0
     108: invokespecial #42                 // Method fireCallbacks:()V
     111: return
    Exception table:
       from    to  target type
          25    81    93   any
          93    95    93   any

  private void processPendingRequests();
    Code:
       0: aload_0
       1: getfield      #21                 // Field leasingRequests:Ljava/util/LinkedList;
       4: invokevirtual #90                 // Method java/util/LinkedList.listIterator:()Ljava/util/ListIterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #91,  1           // InterfaceMethod java/util/ListIterator.hasNext:()Z
      14: ifeq          69
      17: aload_1
      18: invokeinterface #92,  1           // InterfaceMethod java/util/ListIterator.next:()Ljava/lang/Object;
      23: checkcast     #73                 // class org/apache/http/nio/pool/LeaseRequest
      26: astore_2
      27: aload_0
      28: aload_2
      29: invokespecial #75                 // Method processPendingRequest:(Lorg/apache/http/nio/pool/LeaseRequest;)Z
      32: istore_3
      33: aload_2
      34: invokevirtual #76                 // Method org/apache/http/nio/pool/LeaseRequest.isDone:()Z
      37: ifne          44
      40: iload_3
      41: ifeq          50
      44: aload_1
      45: invokeinterface #93,  1           // InterfaceMethod java/util/ListIterator.remove:()V
      50: aload_2
      51: invokevirtual #76                 // Method org/apache/http/nio/pool/LeaseRequest.isDone:()Z
      54: ifeq          66
      57: aload_0
      58: getfield      #30                 // Field completedRequests:Ljava/util/concurrent/ConcurrentLinkedQueue;
      61: aload_2
      62: invokevirtual #78                 // Method java/util/concurrent/ConcurrentLinkedQueue.add:(Ljava/lang/Object;)Z
      65: pop
      66: goto          8
      69: return

  private void processNextPendingRequest();
    Code:
       0: aload_0
       1: getfield      #21                 // Field leasingRequests:Ljava/util/LinkedList;
       4: invokevirtual #90                 // Method java/util/LinkedList.listIterator:()Ljava/util/ListIterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #91,  1           // InterfaceMethod java/util/ListIterator.hasNext:()Z
      14: ifeq          74
      17: aload_1
      18: invokeinterface #92,  1           // InterfaceMethod java/util/ListIterator.next:()Ljava/lang/Object;
      23: checkcast     #73                 // class org/apache/http/nio/pool/LeaseRequest
      26: astore_2
      27: aload_0
      28: aload_2
      29: invokespecial #75                 // Method processPendingRequest:(Lorg/apache/http/nio/pool/LeaseRequest;)Z
      32: istore_3
      33: aload_2
      34: invokevirtual #76                 // Method org/apache/http/nio/pool/LeaseRequest.isDone:()Z
      37: ifne          44
      40: iload_3
      41: ifeq          50
      44: aload_1
      45: invokeinterface #93,  1           // InterfaceMethod java/util/ListIterator.remove:()V
      50: aload_2
      51: invokevirtual #76                 // Method org/apache/http/nio/pool/LeaseRequest.isDone:()Z
      54: ifeq          66
      57: aload_0
      58: getfield      #30                 // Field completedRequests:Ljava/util/concurrent/ConcurrentLinkedQueue;
      61: aload_2
      62: invokevirtual #78                 // Method java/util/concurrent/ConcurrentLinkedQueue.add:(Ljava/lang/Object;)Z
      65: pop
      66: iload_3
      67: ifeq          71
      70: return
      71: goto          8
      74: return

  private boolean processPendingRequest(org.apache.http.nio.pool.LeaseRequest<T, C, E>);
    Code:
       0: aload_1
       1: invokevirtual #94                 // Method org/apache/http/nio/pool/LeaseRequest.getRoute:()Ljava/lang/Object;
       4: astore_2
       5: aload_1
       6: invokevirtual #95                 // Method org/apache/http/nio/pool/LeaseRequest.getState:()Ljava/lang/Object;
       9: astore_3
      10: aload_1
      11: invokevirtual #96                 // Method org/apache/http/nio/pool/LeaseRequest.getDeadline:()J
      14: lstore        4
      16: invokestatic  #97                 // Method java/lang/System.currentTimeMillis:()J
      19: lstore        6
      21: lload         6
      23: lload         4
      25: lcmp
      26: ifle          42
      29: aload_1
      30: new           #98                 // class java/util/concurrent/TimeoutException
      33: dup
      34: invokespecial #99                 // Method java/util/concurrent/TimeoutException."<init>":()V
      37: invokevirtual #100                // Method org/apache/http/nio/pool/LeaseRequest.failed:(Ljava/lang/Exception;)V
      40: iconst_0
      41: ireturn
      42: aload_0
      43: aload_2
      44: invokespecial #85                 // Method getPool:(Ljava/lang/Object;)Lorg/apache/http/nio/pool/RouteSpecificPool;
      47: astore        8
      49: aload         8
      51: aload_3
      52: invokevirtual #101                // Method org/apache/http/nio/pool/RouteSpecificPool.getFree:(Ljava/lang/Object;)Lorg/apache/http/pool/PoolEntry;
      55: astore        9
      57: aload         9
      59: ifnonnull     65
      62: goto          110
      65: aload         9
      67: invokevirtual #102                // Method org/apache/http/pool/PoolEntry.isClosed:()Z
      70: ifne          84
      73: aload         9
      75: invokestatic  #97                 // Method java/lang/System.currentTimeMillis:()J
      78: invokevirtual #103                // Method org/apache/http/pool/PoolEntry.isExpired:(J)Z
      81: ifeq          110
      84: aload         9
      86: invokevirtual #51                 // Method org/apache/http/pool/PoolEntry.close:()V
      89: aload_0
      90: getfield      #26                 // Field available:Ljava/util/LinkedList;
      93: aload         9
      95: invokevirtual #104                // Method java/util/LinkedList.remove:(Ljava/lang/Object;)Z
      98: pop
      99: aload         8
     101: aload         9
     103: iconst_0
     104: invokevirtual #86                 // Method org/apache/http/nio/pool/RouteSpecificPool.free:(Lorg/apache/http/pool/PoolEntry;Z)V
     107: goto          49
     110: aload         9
     112: ifnull        157
     115: aload_0
     116: getfield      #26                 // Field available:Ljava/util/LinkedList;
     119: aload         9
     121: invokevirtual #104                // Method java/util/LinkedList.remove:(Ljava/lang/Object;)Z
     124: pop
     125: aload_0
     126: getfield      #25                 // Field leased:Ljava/util/Set;
     129: aload         9
     131: invokeinterface #105,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     136: pop
     137: aload_1
     138: aload         9
     140: invokevirtual #106                // Method org/apache/http/nio/pool/LeaseRequest.completed:(Lorg/apache/http/pool/PoolEntry;)V
     143: aload_0
     144: aload         9
     146: invokevirtual #107                // Method onReuse:(Lorg/apache/http/pool/PoolEntry;)V
     149: aload_0
     150: aload         9
     152: invokevirtual #108                // Method onLease:(Lorg/apache/http/pool/PoolEntry;)V
     155: iconst_1
     156: ireturn
     157: aload_0
     158: aload_2
     159: invokespecial #109                // Method getMax:(Ljava/lang/Object;)I
     162: istore        10
     164: iconst_0
     165: aload         8
     167: invokevirtual #110                // Method org/apache/http/nio/pool/RouteSpecificPool.getAllocatedCount:()I
     170: iconst_1
     171: iadd
     172: iload         10
     174: isub
     175: invokestatic  #111                // Method java/lang/Math.max:(II)I
     178: istore        11
     180: iload         11
     182: ifle          239
     185: iconst_0
     186: istore        12
     188: iload         12
     190: iload         11
     192: if_icmpge     239
     195: aload         8
     197: invokevirtual #112                // Method org/apache/http/nio/pool/RouteSpecificPool.getLastUsed:()Lorg/apache/http/pool/PoolEntry;
     200: astore        13
     202: aload         13
     204: ifnonnull     210
     207: goto          239
     210: aload         13
     212: invokevirtual #51                 // Method org/apache/http/pool/PoolEntry.close:()V
     215: aload_0
     216: getfield      #26                 // Field available:Ljava/util/LinkedList;
     219: aload         13
     221: invokevirtual #104                // Method java/util/LinkedList.remove:(Ljava/lang/Object;)Z
     224: pop
     225: aload         8
     227: aload         13
     229: invokevirtual #113                // Method org/apache/http/nio/pool/RouteSpecificPool.remove:(Lorg/apache/http/pool/PoolEntry;)Z
     232: pop
     233: iinc          12, 1
     236: goto          188
     239: aload         8
     241: invokevirtual #110                // Method org/apache/http/nio/pool/RouteSpecificPool.getAllocatedCount:()I
     244: iload         10
     246: if_icmpge     468
     249: aload_0
     250: getfield      #24                 // Field pending:Ljava/util/Set;
     253: invokeinterface #114,  1          // InterfaceMethod java/util/Set.size:()I
     258: aload_0
     259: getfield      #25                 // Field leased:Ljava/util/Set;
     262: invokeinterface #114,  1          // InterfaceMethod java/util/Set.size:()I
     267: iadd
     268: istore        12
     270: aload_0
     271: getfield      #38                 // Field maxTotal:I
     274: iload         12
     276: isub
     277: iconst_0
     278: invokestatic  #111                // Method java/lang/Math.max:(II)I
     281: istore        13
     283: iload         13
     285: ifne          290
     288: iconst_0
     289: ireturn
     290: aload_0
     291: getfield      #26                 // Field available:Ljava/util/LinkedList;
     294: invokevirtual #115                // Method java/util/LinkedList.size:()I
     297: istore        14
     299: iload         14
     301: iload         13
     303: iconst_1
     304: isub
     305: if_icmple     354
     308: aload_0
     309: getfield      #26                 // Field available:Ljava/util/LinkedList;
     312: invokevirtual #116                // Method java/util/LinkedList.isEmpty:()Z
     315: ifne          354
     318: aload_0
     319: getfield      #26                 // Field available:Ljava/util/LinkedList;
     322: invokevirtual #117                // Method java/util/LinkedList.removeLast:()Ljava/lang/Object;
     325: checkcast     #50                 // class org/apache/http/pool/PoolEntry
     328: astore        15
     330: aload         15
     332: invokevirtual #51                 // Method org/apache/http/pool/PoolEntry.close:()V
     335: aload_0
     336: aload         15
     338: invokevirtual #84                 // Method org/apache/http/pool/PoolEntry.getRoute:()Ljava/lang/Object;
     341: invokespecial #85                 // Method getPool:(Ljava/lang/Object;)Lorg/apache/http/nio/pool/RouteSpecificPool;
     344: astore        16
     346: aload         16
     348: aload         15
     350: invokevirtual #113                // Method org/apache/http/nio/pool/RouteSpecificPool.remove:(Lorg/apache/http/pool/PoolEntry;)Z
     353: pop
     354: aload_0
     355: getfield      #12                 // Field addressResolver:Lorg/apache/http/nio/pool/SocketAddressResolver;
     358: aload_2
     359: invokeinterface #118,  2          // InterfaceMethod org/apache/http/nio/pool/SocketAddressResolver.resolveRemoteAddress:(Ljava/lang/Object;)Ljava/net/SocketAddress;
     364: astore        16
     366: aload_0
     367: getfield      #12                 // Field addressResolver:Lorg/apache/http/nio/pool/SocketAddressResolver;
     370: aload_2
     371: invokeinterface #119,  2          // InterfaceMethod org/apache/http/nio/pool/SocketAddressResolver.resolveLocalAddress:(Ljava/lang/Object;)Ljava/net/SocketAddress;
     376: astore        15
     378: goto          391
     381: astore        17
     383: aload_1
     384: aload         17
     386: invokevirtual #100                // Method org/apache/http/nio/pool/LeaseRequest.failed:(Ljava/lang/Exception;)V
     389: iconst_0
     390: ireturn
     391: aload_0
     392: getfield      #8                  // Field ioreactor:Lorg/apache/http/nio/reactor/ConnectingIOReactor;
     395: aload         16
     397: aload         15
     399: aload_2
     400: aload_0
     401: getfield      #15                 // Field sessionRequestCallback:Lorg/apache/http/nio/reactor/SessionRequestCallback;
     404: invokeinterface #121,  5          // InterfaceMethod org/apache/http/nio/reactor/ConnectingIOReactor.connect:(Ljava/net/SocketAddress;Ljava/net/SocketAddress;Ljava/lang/Object;Lorg/apache/http/nio/reactor/SessionRequestCallback;)Lorg/apache/http/nio/reactor/SessionRequest;
     409: astore        17
     411: aload_1
     412: invokevirtual #122                // Method org/apache/http/nio/pool/LeaseRequest.getConnectTimeout:()J
     415: ldc2_w        #123                // long 2147483647l
     418: lcmp
     419: ifge          430
     422: aload_1
     423: invokevirtual #122                // Method org/apache/http/nio/pool/LeaseRequest.getConnectTimeout:()J
     426: l2i
     427: goto          432
     430: ldc           #125                // int 2147483647
     432: istore        18
     434: aload         17
     436: iload         18
     438: invokeinterface #126,  2          // InterfaceMethod org/apache/http/nio/reactor/SessionRequest.setConnectTimeout:(I)V
     443: aload_0
     444: getfield      #24                 // Field pending:Ljava/util/Set;
     447: aload         17
     449: invokeinterface #105,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     454: pop
     455: aload         8
     457: aload         17
     459: aload_1
     460: invokevirtual #127                // Method org/apache/http/nio/pool/LeaseRequest.getFuture:()Lorg/apache/http/concurrent/BasicFuture;
     463: invokevirtual #128                // Method org/apache/http/nio/pool/RouteSpecificPool.addPending:(Lorg/apache/http/nio/reactor/SessionRequest;Lorg/apache/http/concurrent/BasicFuture;)V
     466: iconst_1
     467: ireturn
     468: iconst_0
     469: ireturn
    Exception table:
       from    to  target type
         354   378   381   Class java/io/IOException

  private void fireCallbacks();
    Code:
       0: aload_0
       1: getfield      #30                 // Field completedRequests:Ljava/util/concurrent/ConcurrentLinkedQueue;
       4: invokevirtual #129                // Method java/util/concurrent/ConcurrentLinkedQueue.poll:()Ljava/lang/Object;
       7: checkcast     #73                 // class org/apache/http/nio/pool/LeaseRequest
      10: dup
      11: astore_1
      12: ifnull        67
      15: aload_1
      16: invokevirtual #127                // Method org/apache/http/nio/pool/LeaseRequest.getFuture:()Lorg/apache/http/concurrent/BasicFuture;
      19: astore_2
      20: aload_1
      21: invokevirtual #130                // Method org/apache/http/nio/pool/LeaseRequest.getException:()Ljava/lang/Exception;
      24: astore_3
      25: aload_1
      26: invokevirtual #131                // Method org/apache/http/nio/pool/LeaseRequest.getResult:()Lorg/apache/http/pool/PoolEntry;
      29: astore        4
      31: aload_3
      32: ifnull        44
      35: aload_2
      36: aload_3
      37: invokevirtual #132                // Method org/apache/http/concurrent/BasicFuture.failed:(Ljava/lang/Exception;)Z
      40: pop
      41: goto          64
      44: aload         4
      46: ifnull        59
      49: aload_2
      50: aload         4
      52: invokevirtual #133                // Method org/apache/http/concurrent/BasicFuture.completed:(Ljava/lang/Object;)Z
      55: pop
      56: goto          64
      59: aload_2
      60: invokevirtual #134                // Method org/apache/http/concurrent/BasicFuture.cancel:()Z
      63: pop
      64: goto          0
      67: return

  public void validatePendingRequests();
    Code:
       0: aload_0
       1: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: invokestatic  #97                 // Method java/lang/System.currentTimeMillis:()J
      12: lstore_1
      13: aload_0
      14: getfield      #21                 // Field leasingRequests:Ljava/util/LinkedList;
      17: invokevirtual #90                 // Method java/util/LinkedList.listIterator:()Ljava/util/ListIterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #91,  1           // InterfaceMethod java/util/ListIterator.hasNext:()Z
      27: ifeq          86
      30: aload_3
      31: invokeinterface #92,  1           // InterfaceMethod java/util/ListIterator.next:()Ljava/lang/Object;
      36: checkcast     #73                 // class org/apache/http/nio/pool/LeaseRequest
      39: astore        4
      41: aload         4
      43: invokevirtual #96                 // Method org/apache/http/nio/pool/LeaseRequest.getDeadline:()J
      46: lstore        5
      48: lload_1
      49: lload         5
      51: lcmp
      52: ifle          83
      55: aload_3
      56: invokeinterface #93,  1           // InterfaceMethod java/util/ListIterator.remove:()V
      61: aload         4
      63: new           #98                 // class java/util/concurrent/TimeoutException
      66: dup
      67: invokespecial #99                 // Method java/util/concurrent/TimeoutException."<init>":()V
      70: invokevirtual #100                // Method org/apache/http/nio/pool/LeaseRequest.failed:(Ljava/lang/Exception;)V
      73: aload_0
      74: getfield      #30                 // Field completedRequests:Ljava/util/concurrent/ConcurrentLinkedQueue;
      77: aload         4
      79: invokevirtual #78                 // Method java/util/concurrent/ConcurrentLinkedQueue.add:(Ljava/lang/Object;)Z
      82: pop
      83: goto          21
      86: aload_0
      87: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      90: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      95: goto          112
      98: astore        7
     100: aload_0
     101: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     104: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     109: aload         7
     111: athrow
     112: aload_0
     113: invokespecial #42                 // Method fireCallbacks:()V
     116: return
    Exception table:
       from    to  target type
           9    86    98   any
          98   100    98   any

  protected void requestCompleted(org.apache.http.nio.reactor.SessionRequest);
    Code:
       0: aload_0
       1: getfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          11
      10: return
      11: aload_1
      12: invokeinterface #135,  1          // InterfaceMethod org/apache/http/nio/reactor/SessionRequest.getAttachment:()Ljava/lang/Object;
      17: astore_2
      18: aload_0
      19: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      27: aload_0
      28: getfield      #24                 // Field pending:Ljava/util/Set;
      31: aload_1
      32: invokeinterface #83,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      37: pop
      38: aload_0
      39: aload_2
      40: invokespecial #85                 // Method getPool:(Ljava/lang/Object;)Lorg/apache/http/nio/pool/RouteSpecificPool;
      43: astore_3
      44: aload_1
      45: invokeinterface #136,  1          // InterfaceMethod org/apache/http/nio/reactor/SessionRequest.getSession:()Lorg/apache/http/nio/reactor/IOSession;
      50: astore        4
      52: aload_0
      53: getfield      #9                  // Field connFactory:Lorg/apache/http/nio/pool/NIOConnFactory;
      56: aload_2
      57: aload         4
      59: invokeinterface #137,  3          // InterfaceMethod org/apache/http/nio/pool/NIOConnFactory.create:(Ljava/lang/Object;Lorg/apache/http/nio/reactor/IOSession;)Ljava/lang/Object;
      64: astore        5
      66: aload_3
      67: aload_1
      68: aload         5
      70: invokevirtual #138                // Method org/apache/http/nio/pool/RouteSpecificPool.createEntry:(Lorg/apache/http/nio/reactor/SessionRequest;Ljava/lang/Object;)Lorg/apache/http/pool/PoolEntry;
      73: astore        6
      75: aload_0
      76: getfield      #25                 // Field leased:Ljava/util/Set;
      79: aload         6
      81: invokeinterface #105,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      86: pop
      87: aload_3
      88: aload_1
      89: aload         6
      91: invokevirtual #139                // Method org/apache/http/nio/pool/RouteSpecificPool.completed:(Lorg/apache/http/nio/reactor/SessionRequest;Lorg/apache/http/pool/PoolEntry;)V
      94: aload_0
      95: aload         6
      97: invokevirtual #108                // Method onLease:(Lorg/apache/http/pool/PoolEntry;)V
     100: goto          112
     103: astore        5
     105: aload_3
     106: aload_1
     107: aload         5
     109: invokevirtual #140                // Method org/apache/http/nio/pool/RouteSpecificPool.failed:(Lorg/apache/http/nio/reactor/SessionRequest;Ljava/lang/Exception;)V
     112: aload_0
     113: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     116: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     121: goto          138
     124: astore        7
     126: aload_0
     127: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     130: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     135: aload         7
     137: athrow
     138: aload_0
     139: invokespecial #42                 // Method fireCallbacks:()V
     142: return
    Exception table:
       from    to  target type
          52   100   103   Class java/io/IOException
          27   112   124   any
         124   126   124   any

  protected void requestCancelled(org.apache.http.nio.reactor.SessionRequest);
    Code:
       0: aload_0
       1: getfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          11
      10: return
      11: aload_1
      12: invokeinterface #135,  1          // InterfaceMethod org/apache/http/nio/reactor/SessionRequest.getAttachment:()Ljava/lang/Object;
      17: astore_2
      18: aload_0
      19: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      27: aload_0
      28: getfield      #24                 // Field pending:Ljava/util/Set;
      31: aload_1
      32: invokeinterface #83,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      37: pop
      38: aload_0
      39: aload_2
      40: invokespecial #85                 // Method getPool:(Ljava/lang/Object;)Lorg/apache/http/nio/pool/RouteSpecificPool;
      43: astore_3
      44: aload_3
      45: aload_1
      46: invokevirtual #141                // Method org/apache/http/nio/pool/RouteSpecificPool.cancelled:(Lorg/apache/http/nio/reactor/SessionRequest;)V
      49: aload_0
      50: getfield      #8                  // Field ioreactor:Lorg/apache/http/nio/reactor/ConnectingIOReactor;
      53: invokeinterface #142,  1          // InterfaceMethod org/apache/http/nio/reactor/ConnectingIOReactor.getStatus:()Lorg/apache/http/nio/reactor/IOReactorStatus;
      58: getstatic     #143                // Field org/apache/http/nio/reactor/IOReactorStatus.ACTIVE:Lorg/apache/http/nio/reactor/IOReactorStatus;
      61: invokevirtual #144                // Method org/apache/http/nio/reactor/IOReactorStatus.compareTo:(Ljava/lang/Enum;)I
      64: ifgt          71
      67: aload_0
      68: invokespecial #89                 // Method processNextPendingRequest:()V
      71: aload_0
      72: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      75: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      80: goto          97
      83: astore        4
      85: aload_0
      86: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      89: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      94: aload         4
      96: athrow
      97: aload_0
      98: invokespecial #42                 // Method fireCallbacks:()V
     101: return
    Exception table:
       from    to  target type
          27    71    83   any
          83    85    83   any

  protected void requestFailed(org.apache.http.nio.reactor.SessionRequest);
    Code:
       0: aload_0
       1: getfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          11
      10: return
      11: aload_1
      12: invokeinterface #135,  1          // InterfaceMethod org/apache/http/nio/reactor/SessionRequest.getAttachment:()Ljava/lang/Object;
      17: astore_2
      18: aload_0
      19: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      27: aload_0
      28: getfield      #24                 // Field pending:Ljava/util/Set;
      31: aload_1
      32: invokeinterface #83,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      37: pop
      38: aload_0
      39: aload_2
      40: invokespecial #85                 // Method getPool:(Ljava/lang/Object;)Lorg/apache/http/nio/pool/RouteSpecificPool;
      43: astore_3
      44: aload_3
      45: aload_1
      46: aload_1
      47: invokeinterface #145,  1          // InterfaceMethod org/apache/http/nio/reactor/SessionRequest.getException:()Ljava/io/IOException;
      52: invokevirtual #140                // Method org/apache/http/nio/pool/RouteSpecificPool.failed:(Lorg/apache/http/nio/reactor/SessionRequest;Ljava/lang/Exception;)V
      55: aload_0
      56: invokespecial #89                 // Method processNextPendingRequest:()V
      59: aload_0
      60: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      63: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      68: goto          85
      71: astore        4
      73: aload_0
      74: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      77: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      82: aload         4
      84: athrow
      85: aload_0
      86: invokespecial #42                 // Method fireCallbacks:()V
      89: return
    Exception table:
       from    to  target type
          27    59    71   any
          71    73    71   any

  protected void requestTimeout(org.apache.http.nio.reactor.SessionRequest);
    Code:
       0: aload_0
       1: getfield      #36                 // Field isShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          11
      10: return
      11: aload_1
      12: invokeinterface #135,  1          // InterfaceMethod org/apache/http/nio/reactor/SessionRequest.getAttachment:()Ljava/lang/Object;
      17: astore_2
      18: aload_0
      19: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      27: aload_0
      28: getfield      #24                 // Field pending:Ljava/util/Set;
      31: aload_1
      32: invokeinterface #83,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      37: pop
      38: aload_0
      39: aload_2
      40: invokespecial #85                 // Method getPool:(Ljava/lang/Object;)Lorg/apache/http/nio/pool/RouteSpecificPool;
      43: astore_3
      44: aload_3
      45: aload_1
      46: invokevirtual #146                // Method org/apache/http/nio/pool/RouteSpecificPool.timeout:(Lorg/apache/http/nio/reactor/SessionRequest;)V
      49: aload_0
      50: invokespecial #89                 // Method processNextPendingRequest:()V
      53: aload_0
      54: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      57: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      62: goto          79
      65: astore        4
      67: aload_0
      68: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      71: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      76: aload         4
      78: athrow
      79: aload_0
      80: invokespecial #42                 // Method fireCallbacks:()V
      83: return
    Exception table:
       from    to  target type
          27    53    65   any
          65    67    65   any

  private int getMax(T);
    Code:
       0: aload_0
       1: getfield      #27                 // Field maxPerRoute:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #61,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #147                // class java/lang/Integer
      13: astore_2
      14: aload_2
      15: ifnull        23
      18: aload_2
      19: invokevirtual #148                // Method java/lang/Integer.intValue:()I
      22: ireturn
      23: aload_0
      24: getfield      #37                 // Field defaultMaxPerRoute:I
      27: ireturn

  public void setMaxTotal(int);
    Code:
       0: iload_1
       1: ldc           #149                // String Max value
       3: invokestatic  #6                  // Method org/apache/http/util/Args.positive:(ILjava/lang/String;)I
       6: pop
       7: aload_0
       8: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      11: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      16: aload_0
      17: iload_1
      18: putfield      #38                 // Field maxTotal:I
      21: aload_0
      22: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      25: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      30: goto          45
      33: astore_2
      34: aload_0
      35: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      38: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      43: aload_2
      44: athrow
      45: return
    Exception table:
       from    to  target type
          16    21    33   any
          33    34    33   any

  public int getMaxTotal();
    Code:
       0: aload_0
       1: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #38                 // Field maxTotal:I
      13: istore_1
      14: aload_0
      15: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      18: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      23: iload_1
      24: ireturn
      25: astore_2
      26: aload_0
      27: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      30: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      35: aload_2
      36: athrow
    Exception table:
       from    to  target type
           9    14    25   any
          25    26    25   any

  public void setDefaultMaxPerRoute(int);
    Code:
       0: iload_1
       1: ldc           #149                // String Max value
       3: invokestatic  #6                  // Method org/apache/http/util/Args.positive:(ILjava/lang/String;)I
       6: pop
       7: aload_0
       8: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      11: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      16: aload_0
      17: iload_1
      18: putfield      #37                 // Field defaultMaxPerRoute:I
      21: aload_0
      22: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      25: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      30: goto          45
      33: astore_2
      34: aload_0
      35: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      38: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      43: aload_2
      44: athrow
      45: return
    Exception table:
       from    to  target type
          16    21    33   any
          33    34    33   any

  public int getDefaultMaxPerRoute();
    Code:
       0: aload_0
       1: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #37                 // Field defaultMaxPerRoute:I
      13: istore_1
      14: aload_0
      15: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      18: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      23: iload_1
      24: ireturn
      25: astore_2
      26: aload_0
      27: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      30: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      35: aload_2
      36: athrow
    Exception table:
       from    to  target type
           9    14    25   any
          25    26    25   any

  public void setMaxPerRoute(T, int);
    Code:
       0: aload_1
       1: ldc           #66                 // String Route
       3: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: iload_2
       8: ldc           #149                // String Max value
      10: invokestatic  #6                  // Method org/apache/http/util/Args.positive:(ILjava/lang/String;)I
      13: pop
      14: aload_0
      15: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      18: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      23: aload_0
      24: getfield      #27                 // Field maxPerRoute:Ljava/util/Map;
      27: aload_1
      28: iload_2
      29: invokestatic  #150                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      32: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: pop
      38: aload_0
      39: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      42: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      47: goto          62
      50: astore_3
      51: aload_0
      52: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      55: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      60: aload_3
      61: athrow
      62: return
    Exception table:
       from    to  target type
          23    38    50   any
          50    51    50   any

  public int getMaxPerRoute(T);
    Code:
       0: aload_1
       1: ldc           #66                 // String Route
       3: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      11: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      16: aload_0
      17: aload_1
      18: invokespecial #109                // Method getMax:(Ljava/lang/Object;)I
      21: istore_2
      22: aload_0
      23: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      26: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      31: iload_2
      32: ireturn
      33: astore_3
      34: aload_0
      35: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      38: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      43: aload_3
      44: athrow
    Exception table:
       from    to  target type
          16    22    33   any
          33    34    33   any

  public org.apache.http.pool.PoolStats getTotalStats();
    Code:
       0: aload_0
       1: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: new           #151                // class org/apache/http/pool/PoolStats
      12: dup
      13: aload_0
      14: getfield      #25                 // Field leased:Ljava/util/Set;
      17: invokeinterface #114,  1          // InterfaceMethod java/util/Set.size:()I
      22: aload_0
      23: getfield      #24                 // Field pending:Ljava/util/Set;
      26: invokeinterface #114,  1          // InterfaceMethod java/util/Set.size:()I
      31: aload_0
      32: getfield      #26                 // Field available:Ljava/util/LinkedList;
      35: invokevirtual #115                // Method java/util/LinkedList.size:()I
      38: aload_0
      39: getfield      #38                 // Field maxTotal:I
      42: invokespecial #152                // Method org/apache/http/pool/PoolStats."<init>":(IIII)V
      45: astore_1
      46: aload_0
      47: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      50: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      55: aload_1
      56: areturn
      57: astore_2
      58: aload_0
      59: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      62: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      67: aload_2
      68: athrow
    Exception table:
       from    to  target type
           9    46    57   any
          57    58    57   any

  public org.apache.http.pool.PoolStats getStats(T);
    Code:
       0: aload_1
       1: ldc           #66                 // String Route
       3: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      11: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      16: aload_0
      17: aload_1
      18: invokespecial #85                 // Method getPool:(Ljava/lang/Object;)Lorg/apache/http/nio/pool/RouteSpecificPool;
      21: astore_2
      22: new           #151                // class org/apache/http/pool/PoolStats
      25: dup
      26: aload_2
      27: invokevirtual #153                // Method org/apache/http/nio/pool/RouteSpecificPool.getLeasedCount:()I
      30: aload_2
      31: invokevirtual #154                // Method org/apache/http/nio/pool/RouteSpecificPool.getPendingCount:()I
      34: aload_2
      35: invokevirtual #155                // Method org/apache/http/nio/pool/RouteSpecificPool.getAvailableCount:()I
      38: aload_0
      39: aload_1
      40: invokespecial #109                // Method getMax:(Ljava/lang/Object;)I
      43: invokespecial #152                // Method org/apache/http/pool/PoolStats."<init>":(IIII)V
      46: astore_3
      47: aload_0
      48: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      51: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      56: aload_3
      57: areturn
      58: astore        4
      60: aload_0
      61: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      64: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      69: aload         4
      71: athrow
    Exception table:
       from    to  target type
          16    47    58   any
          58    60    58   any

  public java.util.Set<T> getRoutes();
    Code:
       0: aload_0
       1: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: new           #22                 // class java/util/HashSet
      12: dup
      13: aload_0
      14: getfield      #18                 // Field routeToPool:Ljava/util/Map;
      17: invokeinterface #156,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      22: invokespecial #157                // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      25: astore_1
      26: aload_0
      27: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      30: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      35: aload_1
      36: areturn
      37: astore_2
      38: aload_0
      39: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      42: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      47: aload_2
      48: athrow
    Exception table:
       from    to  target type
           9    26    37   any
          37    38    37   any

  protected void enumAvailable(org.apache.http.pool.PoolEntryCallback<T, C>);
    Code:
       0: aload_0
       1: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #26                 // Field available:Ljava/util/LinkedList;
      13: invokevirtual #158                // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
      16: astore_2
      17: aload_2
      18: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          76
      26: aload_2
      27: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #50                 // class org/apache/http/pool/PoolEntry
      35: astore_3
      36: aload_1
      37: aload_3
      38: invokeinterface #159,  2          // InterfaceMethod org/apache/http/pool/PoolEntryCallback.process:(Lorg/apache/http/pool/PoolEntry;)V
      43: aload_3
      44: invokevirtual #102                // Method org/apache/http/pool/PoolEntry.isClosed:()Z
      47: ifeq          73
      50: aload_0
      51: aload_3
      52: invokevirtual #84                 // Method org/apache/http/pool/PoolEntry.getRoute:()Ljava/lang/Object;
      55: invokespecial #85                 // Method getPool:(Ljava/lang/Object;)Lorg/apache/http/nio/pool/RouteSpecificPool;
      58: astore        4
      60: aload         4
      62: aload_3
      63: invokevirtual #113                // Method org/apache/http/nio/pool/RouteSpecificPool.remove:(Lorg/apache/http/pool/PoolEntry;)Z
      66: pop
      67: aload_2
      68: invokeinterface #160,  1          // InterfaceMethod java/util/Iterator.remove:()V
      73: goto          17
      76: aload_0
      77: invokespecial #161                // Method processPendingRequests:()V
      80: aload_0
      81: invokespecial #162                // Method purgePoolMap:()V
      84: aload_0
      85: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      88: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      93: goto          110
      96: astore        5
      98: aload_0
      99: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
     102: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     107: aload         5
     109: athrow
     110: return
    Exception table:
       from    to  target type
           9    84    96   any
          96    98    96   any

  protected void enumLeased(org.apache.http.pool.PoolEntryCallback<T, C>);
    Code:
       0: aload_0
       1: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #25                 // Field leased:Ljava/util/Set;
      13: invokeinterface #163,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      18: astore_2
      19: aload_2
      20: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      25: ifeq          48
      28: aload_2
      29: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #50                 // class org/apache/http/pool/PoolEntry
      37: astore_3
      38: aload_1
      39: aload_3
      40: invokeinterface #159,  2          // InterfaceMethod org/apache/http/pool/PoolEntryCallback.process:(Lorg/apache/http/pool/PoolEntry;)V
      45: goto          19
      48: aload_0
      49: invokespecial #161                // Method processPendingRequests:()V
      52: aload_0
      53: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      56: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      61: goto          78
      64: astore        4
      66: aload_0
      67: getfield      #33                 // Field lock:Ljava/util/concurrent/locks/Lock;
      70: invokeinterface #60,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      75: aload         4
      77: athrow
      78: return
    Exception table:
       from    to  target type
           9    52    64   any
          64    66    64   any

  protected void enumEntries(java.util.Iterator<E>, org.apache.http.pool.PoolEntryCallback<T, C>);
    Code:
       0: aload_1
       1: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
       6: ifeq          29
       9: aload_1
      10: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      15: checkcast     #50                 // class org/apache/http/pool/PoolEntry
      18: astore_3
      19: aload_2
      20: aload_3
      21: invokeinterface #159,  2          // InterfaceMethod org/apache/http/pool/PoolEntryCallback.process:(Lorg/apache/http/pool/PoolEntry;)V
      26: goto          0
      29: aload_0
      30: invokespecial #161                // Method processPendingRequests:()V
      33: return

  private void purgePoolMap();
    Code:
       0: aload_0
       1: getfield      #18                 // Field routeToPool:Ljava/util/Map;
       4: invokeinterface #164,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #163,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          60
      24: aload_1
      25: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #165                // class java/util/Map$Entry
      33: astore_2
      34: aload_2
      35: invokeinterface #166,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      40: checkcast     #54                 // class org/apache/http/nio/pool/RouteSpecificPool
      43: astore_3
      44: aload_3
      45: invokevirtual #110                // Method org/apache/http/nio/pool/RouteSpecificPool.getAllocatedCount:()I
      48: ifne          57
      51: aload_1
      52: invokeinterface #160,  1          // InterfaceMethod java/util/Iterator.remove:()V
      57: goto          15
      60: return

  public void closeIdle(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_3
       1: ldc           #67                 // String Time unit
       3: invokestatic  #3                  // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_3
       8: lload_1
       9: invokevirtual #72                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      12: lstore        4
      14: lload         4
      16: lconst_0
      17: lcmp
      18: ifge          24
      21: lconst_0
      22: lstore        4
      24: invokestatic  #97                 // Method java/lang/System.currentTimeMillis:()J
      27: lload         4
      29: lsub
      30: lstore        6
      32: aload_0
      33: new           #167                // class org/apache/http/nio/pool/AbstractNIOConnPool$3
      36: dup
      37: aload_0
      38: lload         6
      40: invokespecial #168                // Method org/apache/http/nio/pool/AbstractNIOConnPool$3."<init>":(Lorg/apache/http/nio/pool/AbstractNIOConnPool;J)V
      43: invokevirtual #169                // Method enumAvailable:(Lorg/apache/http/pool/PoolEntryCallback;)V
      46: return

  public void closeExpired();
    Code:
       0: invokestatic  #97                 // Method java/lang/System.currentTimeMillis:()J
       3: lstore_1
       4: aload_0
       5: new           #170                // class org/apache/http/nio/pool/AbstractNIOConnPool$4
       8: dup
       9: aload_0
      10: lload_1
      11: invokespecial #171                // Method org/apache/http/nio/pool/AbstractNIOConnPool$4."<init>":(Lorg/apache/http/nio/pool/AbstractNIOConnPool;J)V
      14: invokevirtual #169                // Method enumAvailable:(Lorg/apache/http/pool/PoolEntryCallback;)V
      17: return

  public java.lang.String toString();
    Code:
       0: new           #172                // class java/lang/StringBuilder
       3: dup
       4: invokespecial #173                // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #174                // String [leased:
      11: invokevirtual #175                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_1
      16: aload_0
      17: getfield      #25                 // Field leased:Ljava/util/Set;
      20: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      23: pop
      24: aload_1
      25: ldc           #177                // String ][available:
      27: invokevirtual #175                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: pop
      31: aload_1
      32: aload_0
      33: getfield      #26                 // Field available:Ljava/util/LinkedList;
      36: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      39: pop
      40: aload_1
      41: ldc           #178                // String ][pending:
      43: invokevirtual #175                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: pop
      47: aload_1
      48: aload_0
      49: getfield      #24                 // Field pending:Ljava/util/Set;
      52: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      55: pop
      56: aload_1
      57: ldc           #179                // String ]
      59: invokevirtual #175                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: pop
      63: aload_1
      64: invokevirtual #180                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      67: areturn

  public void release(java.lang.Object, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #50                 // class org/apache/http/pool/PoolEntry
       5: iload_2
       6: invokevirtual #181                // Method release:(Lorg/apache/http/pool/PoolEntry;Z)V
       9: return
}
