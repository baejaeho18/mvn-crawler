Compiled from "CloseableHttpAsyncClientBase.java"
abstract class org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase extends org.apache.http.impl.nio.client.CloseableHttpPipeliningClient {
  private final org.apache.commons.logging.Log log;

  private final org.apache.http.nio.conn.NHttpClientConnectionManager connmgr;

  private final java.lang.Thread reactorThread;

  private final java.util.concurrent.atomic.AtomicReference<org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase$Status> status;

  public org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase(org.apache.http.nio.conn.NHttpClientConnectionManager, java.util.concurrent.ThreadFactory, org.apache.http.nio.NHttpClientEventHandler);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method org/apache/http/impl/nio/client/CloseableHttpPipeliningClient."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #5                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #2                  // Field log:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: aload_1
      17: putfield      #6                  // Field connmgr:Lorg/apache/http/nio/conn/NHttpClientConnectionManager;
      20: aload_2
      21: ifnull        51
      24: aload_3
      25: ifnull        51
      28: aload_0
      29: aload_2
      30: new           #7                  // class org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$1
      33: dup
      34: aload_0
      35: aload_3
      36: aload_1
      37: invokespecial #8                  // Method org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$1."<init>":(Lorg/apache/http/impl/nio/client/CloseableHttpAsyncClientBase;Lorg/apache/http/nio/NHttpClientEventHandler;Lorg/apache/http/nio/conn/NHttpClientConnectionManager;)V
      40: invokeinterface #9,  2            // InterfaceMethod java/util/concurrent/ThreadFactory.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
      45: putfield      #10                 // Field reactorThread:Ljava/lang/Thread;
      48: goto          56
      51: aload_0
      52: aconst_null
      53: putfield      #10                 // Field reactorThread:Ljava/lang/Thread;
      56: aload_0
      57: new           #11                 // class java/util/concurrent/atomic/AtomicReference
      60: dup
      61: getstatic     #12                 // Field org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status.INACTIVE:Lorg/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status;
      64: invokespecial #13                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      67: putfield      #1                  // Field status:Ljava/util/concurrent/atomic/AtomicReference;
      70: return

  public void start();
    Code:
       0: aload_0
       1: getfield      #1                  // Field status:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #12                 // Field org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status.INACTIVE:Lorg/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status;
       7: getstatic     #14                 // Field org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status.ACTIVE:Lorg/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status;
      10: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      13: ifeq          30
      16: aload_0
      17: getfield      #10                 // Field reactorThread:Ljava/lang/Thread;
      20: ifnull        30
      23: aload_0
      24: getfield      #10                 // Field reactorThread:Ljava/lang/Thread;
      27: invokevirtual #16                 // Method java/lang/Thread.start:()V
      30: return

  protected void ensureRunning();
    Code:
       0: aload_0
       1: getfield      #1                  // Field status:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #18                 // class org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status
      10: astore_1
      11: aload_1
      12: getstatic     #14                 // Field org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status.ACTIVE:Lorg/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status;
      15: if_acmpne     22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #19                 // String Request cannot be executed; I/O reactor status: %s
      25: aload_1
      26: invokestatic  #20                 // Method org/apache/http/util/Asserts.check:(ZLjava/lang/String;Ljava/lang/Object;)V
      29: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #1                  // Field status:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #14                 // Field org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status.ACTIVE:Lorg/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status;
       7: getstatic     #21                 // Field org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status.STOPPED:Lorg/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status;
      10: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      13: ifeq          65
      16: aload_0
      17: getfield      #10                 // Field reactorThread:Ljava/lang/Thread;
      20: ifnull        65
      23: aload_0
      24: getfield      #6                  // Field connmgr:Lorg/apache/http/nio/conn/NHttpClientConnectionManager;
      27: invokeinterface #22,  1           // InterfaceMethod org/apache/http/nio/conn/NHttpClientConnectionManager.shutdown:()V
      32: goto          48
      35: astore_1
      36: aload_0
      37: getfield      #2                  // Field log:Lorg/apache/commons/logging/Log;
      40: ldc           #24                 // String I/O error shutting down connection manager
      42: aload_1
      43: invokeinterface #25,  3           // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      48: aload_0
      49: getfield      #10                 // Field reactorThread:Ljava/lang/Thread;
      52: invokevirtual #26                 // Method java/lang/Thread.join:()V
      55: goto          65
      58: astore_1
      59: invokestatic  #28                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      62: invokevirtual #29                 // Method java/lang/Thread.interrupt:()V
      65: return
    Exception table:
       from    to  target type
          23    32    35   Class java/io/IOException
          48    55    58   Class java/lang/InterruptedException

  public boolean isRunning();
    Code:
       0: aload_0
       1: getfield      #1                  // Field status:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #14                 // Field org/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status.ACTIVE:Lorg/apache/http/impl/nio/client/CloseableHttpAsyncClientBase$Status;
      10: if_acmpne     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  static org.apache.commons.logging.Log access$000(org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase);
    Code:
       0: aload_0
       1: getfield      #2                  // Field log:Lorg/apache/commons/logging/Log;
       4: areturn

  static java.util.concurrent.atomic.AtomicReference access$100(org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase);
    Code:
       0: aload_0
       1: getfield      #1                  // Field status:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn
}
