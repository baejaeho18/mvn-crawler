Compiled from "SSLIOSessionStrategy.java"
public class org.apache.http.nio.conn.ssl.SSLIOSessionStrategy implements org.apache.http.nio.conn.SchemeIOSessionStrategy {
  public static final org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER;

  public static final org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;

  public static final org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER;

  private final javax.net.ssl.SSLContext sslContext;

  private final java.lang.String[] supportedProtocols;

  private final java.lang.String[] supportedCipherSuites;

  private final javax.net.ssl.HostnameVerifier hostnameVerifier;

  private static java.lang.String[] split(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #3                  // Method org/apache/http/util/TextUtils.isBlank:(Ljava/lang/CharSequence;)Z
       4: ifeq          9
       7: aconst_null
       8: areturn
       9: aload_0
      10: ldc           #4                  // String  *, *
      12: invokevirtual #5                  // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      15: areturn

  public static javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier();
    Code:
       0: new           #6                  // class org/apache/http/conn/ssl/DefaultHostnameVerifier
       3: dup
       4: invokestatic  #7                  // Method org/apache/http/conn/util/PublicSuffixMatcherLoader.getDefault:()Lorg/apache/http/conn/util/PublicSuffixMatcher;
       7: invokespecial #8                  // Method org/apache/http/conn/ssl/DefaultHostnameVerifier."<init>":(Lorg/apache/http/conn/util/PublicSuffixMatcher;)V
      10: areturn

  public static org.apache.http.nio.conn.ssl.SSLIOSessionStrategy getDefaultStrategy();
    Code:
       0: new           #9                  // class org/apache/http/nio/conn/ssl/SSLIOSessionStrategy
       3: dup
       4: invokestatic  #10                 // Method org/apache/http/ssl/SSLContexts.createDefault:()Ljavax/net/ssl/SSLContext;
       7: invokestatic  #11                 // Method getDefaultHostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;
      10: invokespecial #12                 // Method "<init>":(Ljavax/net/ssl/SSLContext;Ljavax/net/ssl/HostnameVerifier;)V
      13: areturn

  public static org.apache.http.nio.conn.ssl.SSLIOSessionStrategy getSystemDefaultStrategy();
    Code:
       0: new           #9                  // class org/apache/http/nio/conn/ssl/SSLIOSessionStrategy
       3: dup
       4: invokestatic  #13                 // Method org/apache/http/ssl/SSLContexts.createSystemDefault:()Ljavax/net/ssl/SSLContext;
       7: ldc           #14                 // String https.protocols
       9: invokestatic  #15                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      12: invokestatic  #16                 // Method split:(Ljava/lang/String;)[Ljava/lang/String;
      15: ldc           #17                 // String https.cipherSuites
      17: invokestatic  #15                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      20: invokestatic  #16                 // Method split:(Ljava/lang/String;)[Ljava/lang/String;
      23: invokestatic  #11                 // Method getDefaultHostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;
      26: invokespecial #18                 // Method "<init>":(Ljavax/net/ssl/SSLContext;[Ljava/lang/String;[Ljava/lang/String;Ljavax/net/ssl/HostnameVerifier;)V
      29: areturn

  public org.apache.http.nio.conn.ssl.SSLIOSessionStrategy(javax.net.ssl.SSLContext, java.lang.String[], java.lang.String[], org.apache.http.conn.ssl.X509HostnameVerifier);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokespecial #18                 // Method "<init>":(Ljavax/net/ssl/SSLContext;[Ljava/lang/String;[Ljava/lang/String;Ljavax/net/ssl/HostnameVerifier;)V
       9: return

  public org.apache.http.nio.conn.ssl.SSLIOSessionStrategy(javax.net.ssl.SSLContext, org.apache.http.conn.ssl.X509HostnameVerifier);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aconst_null
       4: aload_2
       5: invokespecial #18                 // Method "<init>":(Ljavax/net/ssl/SSLContext;[Ljava/lang/String;[Ljava/lang/String;Ljavax/net/ssl/HostnameVerifier;)V
       8: return

  public org.apache.http.nio.conn.ssl.SSLIOSessionStrategy(javax.net.ssl.SSLContext, java.lang.String[], java.lang.String[], javax.net.ssl.HostnameVerifier);
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #20                 // String SSL context
       8: invokestatic  #21                 // Method org/apache/http/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #22                 // class javax/net/ssl/SSLContext
      14: putfield      #23                 // Field sslContext:Ljavax/net/ssl/SSLContext;
      17: aload_0
      18: aload_2
      19: putfield      #2                  // Field supportedProtocols:[Ljava/lang/String;
      22: aload_0
      23: aload_3
      24: putfield      #1                  // Field supportedCipherSuites:[Ljava/lang/String;
      27: aload_0
      28: aload         4
      30: ifnull        38
      33: aload         4
      35: goto          41
      38: invokestatic  #11                 // Method getDefaultHostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;
      41: putfield      #24                 // Field hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;
      44: return

  public org.apache.http.nio.conn.ssl.SSLIOSessionStrategy(javax.net.ssl.SSLContext, javax.net.ssl.HostnameVerifier);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aconst_null
       4: aload_2
       5: invokespecial #18                 // Method "<init>":(Ljavax/net/ssl/SSLContext;[Ljava/lang/String;[Ljava/lang/String;Ljavax/net/ssl/HostnameVerifier;)V
       8: return

  public org.apache.http.nio.conn.ssl.SSLIOSessionStrategy(javax.net.ssl.SSLContext);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aconst_null
       4: invokestatic  #11                 // Method getDefaultHostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;
       7: invokespecial #18                 // Method "<init>":(Ljavax/net/ssl/SSLContext;[Ljava/lang/String;[Ljava/lang/String;Ljavax/net/ssl/HostnameVerifier;)V
      10: return

  public org.apache.http.nio.reactor.ssl.SSLIOSession upgrade(org.apache.http.HttpHost, org.apache.http.nio.reactor.IOSession) throws java.io.IOException;
    Code:
       0: aload_2
       1: instanceof    #25                 // class org/apache/http/nio/reactor/ssl/SSLIOSession
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #26                 // String I/O session is already upgraded to TLS/SSL
      14: invokestatic  #27                 // Method org/apache/http/util/Asserts.check:(ZLjava/lang/String;)V
      17: new           #25                 // class org/apache/http/nio/reactor/ssl/SSLIOSession
      20: dup
      21: aload_2
      22: getstatic     #28                 // Field org/apache/http/nio/reactor/ssl/SSLMode.CLIENT:Lorg/apache/http/nio/reactor/ssl/SSLMode;
      25: aload_1
      26: aload_0
      27: getfield      #23                 // Field sslContext:Ljavax/net/ssl/SSLContext;
      30: new           #29                 // class org/apache/http/nio/conn/ssl/SSLIOSessionStrategy$1
      33: dup
      34: aload_0
      35: aload_1
      36: invokespecial #30                 // Method org/apache/http/nio/conn/ssl/SSLIOSessionStrategy$1."<init>":(Lorg/apache/http/nio/conn/ssl/SSLIOSessionStrategy;Lorg/apache/http/HttpHost;)V
      39: invokespecial #31                 // Method org/apache/http/nio/reactor/ssl/SSLIOSession."<init>":(Lorg/apache/http/nio/reactor/IOSession;Lorg/apache/http/nio/reactor/ssl/SSLMode;Lorg/apache/http/HttpHost;Ljavax/net/ssl/SSLContext;Lorg/apache/http/nio/reactor/ssl/SSLSetupHandler;)V
      42: astore_3
      43: aload_2
      44: ldc           #32                 // String http.session.ssl
      46: aload_3
      47: invokeinterface #33,  3           // InterfaceMethod org/apache/http/nio/reactor/IOSession.setAttribute:(Ljava/lang/String;Ljava/lang/Object;)V
      52: aload_3
      53: invokevirtual #34                 // Method org/apache/http/nio/reactor/ssl/SSLIOSession.initialize:()V
      56: aload_3
      57: areturn

  protected void initializeEngine(javax.net.ssl.SSLEngine);
    Code:
       0: return

  protected void verifySession(org.apache.http.HttpHost, org.apache.http.nio.reactor.IOSession, javax.net.ssl.SSLSession) throws javax.net.ssl.SSLException;
    Code:
       0: aload_0
       1: getfield      #24                 // Field hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;
       4: aload_1
       5: invokevirtual #35                 // Method org/apache/http/HttpHost.getHostName:()Ljava/lang/String;
       8: aload_3
       9: invokeinterface #36,  3           // InterfaceMethod javax/net/ssl/HostnameVerifier.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z
      14: ifne          94
      17: aload_3
      18: invokeinterface #37,  1           // InterfaceMethod javax/net/ssl/SSLSession.getPeerCertificates:()[Ljava/security/cert/Certificate;
      23: astore        4
      25: aload         4
      27: iconst_0
      28: aaload
      29: checkcast     #38                 // class java/security/cert/X509Certificate
      32: astore        5
      34: aload         5
      36: invokevirtual #39                 // Method java/security/cert/X509Certificate.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;
      39: astore        6
      41: new           #40                 // class javax/net/ssl/SSLPeerUnverifiedException
      44: dup
      45: new           #41                 // class java/lang/StringBuilder
      48: dup
      49: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
      52: ldc           #43                 // String Host name \'
      54: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_1
      58: invokevirtual #35                 // Method org/apache/http/HttpHost.getHostName:()Ljava/lang/String;
      61: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: ldc           #45                 // String \' does not match
      66: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: ldc           #46                 // String the certificate subject provided by the peer (
      71: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload         6
      76: invokevirtual #47                 // Method javax/security/auth/x500/X500Principal.toString:()Ljava/lang/String;
      79: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: ldc           #48                 // String )
      84: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: invokevirtual #49                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: invokespecial #50                 // Method javax/net/ssl/SSLPeerUnverifiedException."<init>":(Ljava/lang/String;)V
      93: athrow
      94: return

  public boolean isLayeringRequired();
    Code:
       0: iconst_1
       1: ireturn

  public org.apache.http.nio.reactor.IOSession upgrade(org.apache.http.HttpHost, org.apache.http.nio.reactor.IOSession) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #51                 // Method upgrade:(Lorg/apache/http/HttpHost;Lorg/apache/http/nio/reactor/IOSession;)Lorg/apache/http/nio/reactor/ssl/SSLIOSession;
       6: areturn

  static java.lang.String[] access$000(org.apache.http.nio.conn.ssl.SSLIOSessionStrategy);
    Code:
       0: aload_0
       1: getfield      #2                  // Field supportedProtocols:[Ljava/lang/String;
       4: areturn

  static java.lang.String[] access$100(org.apache.http.nio.conn.ssl.SSLIOSessionStrategy);
    Code:
       0: aload_0
       1: getfield      #1                  // Field supportedCipherSuites:[Ljava/lang/String;
       4: areturn

  static {};
    Code:
       0: new           #52                 // class org/apache/http/conn/ssl/AllowAllHostnameVerifier
       3: dup
       4: invokespecial #53                 // Method org/apache/http/conn/ssl/AllowAllHostnameVerifier."<init>":()V
       7: putstatic     #54                 // Field ALLOW_ALL_HOSTNAME_VERIFIER:Lorg/apache/http/conn/ssl/X509HostnameVerifier;
      10: new           #55                 // class org/apache/http/conn/ssl/BrowserCompatHostnameVerifier
      13: dup
      14: invokespecial #56                 // Method org/apache/http/conn/ssl/BrowserCompatHostnameVerifier."<init>":()V
      17: putstatic     #57                 // Field BROWSER_COMPATIBLE_HOSTNAME_VERIFIER:Lorg/apache/http/conn/ssl/X509HostnameVerifier;
      20: new           #58                 // class org/apache/http/conn/ssl/StrictHostnameVerifier
      23: dup
      24: invokespecial #59                 // Method org/apache/http/conn/ssl/StrictHostnameVerifier."<init>":()V
      27: putstatic     #60                 // Field STRICT_HOSTNAME_VERIFIER:Lorg/apache/http/conn/ssl/X509HostnameVerifier;
      30: return
}
