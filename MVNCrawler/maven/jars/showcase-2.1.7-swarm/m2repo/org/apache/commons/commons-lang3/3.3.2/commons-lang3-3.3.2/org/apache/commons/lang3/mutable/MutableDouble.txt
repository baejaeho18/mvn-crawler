Compiled from "MutableDouble.java"
public class org.apache.commons.lang3.mutable.MutableDouble extends java.lang.Number implements java.lang.Comparable<org.apache.commons.lang3.mutable.MutableDouble>, org.apache.commons.lang3.mutable.Mutable<java.lang.Number> {
  private static final long serialVersionUID;

  private double value;

  public org.apache.commons.lang3.mutable.MutableDouble();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Number."<init>":()V
       4: return

  public org.apache.commons.lang3.mutable.MutableDouble(double);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Number."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #2                  // Field value:D
       9: return

  public org.apache.commons.lang3.mutable.MutableDouble(java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Number."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.doubleValue:()D
       9: putfield      #2                  // Field value:D
      12: return

  public org.apache.commons.lang3.mutable.MutableDouble(java.lang.String) throws java.lang.NumberFormatException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Number."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #4                  // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D
       9: putfield      #2                  // Field value:D
      12: return

  public java.lang.Double getValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: invokestatic  #5                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
       7: areturn

  public void setValue(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #2                  // Field value:D
       5: return

  public void setValue(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method java/lang/Number.doubleValue:()D
       5: putfield      #2                  // Field value:D
       8: return

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: invokestatic  #6                  // Method java/lang/Double.isNaN:(D)Z
       7: ireturn

  public boolean isInfinite();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: invokestatic  #7                  // Method java/lang/Double.isInfinite:(D)Z
       7: ireturn

  public void increment();
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:D
       5: dconst_1
       6: dadd
       7: putfield      #2                  // Field value:D
      10: return

  public void decrement();
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:D
       5: dconst_1
       6: dsub
       7: putfield      #2                  // Field value:D
      10: return

  public void add(double);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:D
       5: dload_1
       6: dadd
       7: putfield      #2                  // Field value:D
      10: return

  public void add(java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:D
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.doubleValue:()D
       9: dadd
      10: putfield      #2                  // Field value:D
      13: return

  public void subtract(double);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:D
       5: dload_1
       6: dsub
       7: putfield      #2                  // Field value:D
      10: return

  public void subtract(java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:D
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.doubleValue:()D
       9: dsub
      10: putfield      #2                  // Field value:D
      13: return

  public int intValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: d2i
       5: ireturn

  public long longValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: d2l
       5: lreturn

  public float floatValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: d2f
       5: freturn

  public double doubleValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: dreturn

  public java.lang.Double toDouble();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method doubleValue:()D
       4: invokestatic  #5                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #9                  // class org/apache/commons/lang3/mutable/MutableDouble
       4: ifeq          32
       7: aload_1
       8: checkcast     #9                  // class org/apache/commons/lang3/mutable/MutableDouble
      11: getfield      #2                  // Field value:D
      14: invokestatic  #10                 // Method java/lang/Double.doubleToLongBits:(D)J
      17: aload_0
      18: getfield      #2                  // Field value:D
      21: invokestatic  #10                 // Method java/lang/Double.doubleToLongBits:(D)J
      24: lcmp
      25: ifne          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: invokestatic  #10                 // Method java/lang/Double.doubleToLongBits:(D)J
       7: lstore_1
       8: lload_1
       9: lload_1
      10: bipush        32
      12: lushr
      13: lxor
      14: l2i
      15: ireturn

  public int compareTo(org.apache.commons.lang3.mutable.MutableDouble);
    Code:
       0: aload_1
       1: getfield      #2                  // Field value:D
       4: dstore_2
       5: aload_0
       6: getfield      #2                  // Field value:D
       9: dload_2
      10: invokestatic  #11                 // Method java/lang/Double.compare:(DD)I
      13: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: invokestatic  #12                 // Method java/lang/String.valueOf:(D)Ljava/lang/String;
       7: areturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #9                  // class org/apache/commons/lang3/mutable/MutableDouble
       5: invokevirtual #13                 // Method compareTo:(Lorg/apache/commons/lang3/mutable/MutableDouble;)I
       8: ireturn

  public void setValue(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #14                 // class java/lang/Number
       5: invokevirtual #15                 // Method setValue:(Ljava/lang/Number;)V
       8: return

  public java.lang.Object getValue();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method getValue:()Ljava/lang/Double;
       4: areturn
}
