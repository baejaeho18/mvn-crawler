Compiled from "AtomicInitializer.java"
public abstract class org.apache.commons.lang3.concurrent.AtomicInitializer<T> implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T> {
  private final java.util.concurrent.atomic.AtomicReference<T> reference;

  public org.apache.commons.lang3.concurrent.AtomicInitializer();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      12: putfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
      15: return

  public T get() throws org.apache.commons.lang3.concurrent.ConcurrentException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: astore_1
       8: aload_1
       9: ifnonnull     37
      12: aload_0
      13: invokevirtual #6                  // Method initialize:()Ljava/lang/Object;
      16: astore_1
      17: aload_0
      18: getfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
      21: aconst_null
      22: aload_1
      23: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          37
      29: aload_0
      30: getfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
      33: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      36: astore_1
      37: aload_1
      38: areturn

  protected abstract T initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;
}
