Compiled from "X509Token.java"
public class org.apache.wss4j.policy.model.X509Token extends org.apache.wss4j.policy.model.AbstractToken {
  private boolean requireKeyIdentifierReference;

  private boolean requireIssuerSerialReference;

  private boolean requireEmbeddedTokenReference;

  private boolean requireThumbprintReference;

  private org.apache.wss4j.policy.model.X509Token$TokenType tokenType;

  public org.apache.wss4j.policy.model.X509Token(org.apache.wss4j.policy.SPConstants$SPVersion, org.apache.wss4j.policy.SPConstants$IncludeTokenType, org.w3c.dom.Element, java.lang.String, org.w3c.dom.Element, org.apache.neethi.Policy);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokespecial #1                  // Method org/apache/wss4j/policy/model/AbstractToken."<init>":(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/wss4j/policy/SPConstants$IncludeTokenType;Lorg/w3c/dom/Element;Ljava/lang/String;Lorg/w3c/dom/Element;Lorg/apache/neethi/Policy;)V
      13: aload_0
      14: aload         6
      16: aload_0
      17: invokevirtual #2                  // Method parseNestedPolicy:(Lorg/apache/neethi/Policy;Lorg/apache/wss4j/policy/model/X509Token;)V
      20: return

  public javax.xml.namespace.QName getName();
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
       4: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
       7: invokevirtual #5                  // Method org/apache/wss4j/policy/SPConstants.getX509Token:()Ljavax/xml/namespace/QName;
      10: areturn

  protected org.apache.wss4j.policy.model.AbstractSecurityAssertion cloneAssertion(org.apache.neethi.Policy);
    Code:
       0: new           #6                  // class org/apache/wss4j/policy/model/X509Token
       3: dup
       4: aload_0
       5: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
       8: aload_0
       9: invokevirtual #7                  // Method getIncludeTokenType:()Lorg/apache/wss4j/policy/SPConstants$IncludeTokenType;
      12: aload_0
      13: invokevirtual #8                  // Method getIssuer:()Lorg/w3c/dom/Element;
      16: aload_0
      17: invokevirtual #9                  // Method getIssuerName:()Ljava/lang/String;
      20: aload_0
      21: invokevirtual #10                 // Method getClaims:()Lorg/w3c/dom/Element;
      24: aload_1
      25: invokespecial #11                 // Method "<init>":(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/wss4j/policy/SPConstants$IncludeTokenType;Lorg/w3c/dom/Element;Ljava/lang/String;Lorg/w3c/dom/Element;Lorg/apache/neethi/Policy;)V
      28: areturn

  protected void parseNestedPolicy(org.apache.neethi.Policy, org.apache.wss4j.policy.model.X509Token);
    Code:
       0: aload_1
       1: invokevirtual #12                 // Method org/apache/neethi/Policy.getAlternatives:()Ljava/util/Iterator;
       4: astore_3
       5: aload_3
       6: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifeq          456
      14: aload_3
      15: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      20: checkcast     #15                 // class java/util/List
      23: astore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: aload         4
      32: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
      37: if_icmpge     456
      40: aload         4
      42: iload         5
      44: invokeinterface #17,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      49: checkcast     #18                 // class org/apache/neethi/Assertion
      52: astore        6
      54: aload         6
      56: invokeinterface #19,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      61: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
      64: astore        7
      66: aload         6
      68: invokeinterface #19,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      73: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
      76: astore        8
      78: aload         7
      80: invokestatic  #22                 // Method org/apache/wss4j/policy/model/AbstractToken$DerivedKeys.lookUp:(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/AbstractToken$DerivedKeys;
      83: astore        9
      85: aload         9
      87: ifnull        116
      90: aload_2
      91: invokevirtual #23                 // Method getDerivedKeys:()Lorg/apache/wss4j/policy/model/AbstractToken$DerivedKeys;
      94: ifnull        107
      97: new           #24                 // class java/lang/IllegalArgumentException
     100: dup
     101: ldc           #25                 // String Invalid Policy
     103: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     106: athrow
     107: aload_2
     108: aload         9
     110: invokevirtual #27                 // Method setDerivedKeys:(Lorg/apache/wss4j/policy/model/AbstractToken$DerivedKeys;)V
     113: goto          450
     116: aload         7
     118: invokestatic  #28                 // Method org/apache/wss4j/policy/model/X509Token$TokenType.lookUp:(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/X509Token$TokenType;
     121: astore        10
     123: aload         10
     125: ifnull        182
     128: aload_2
     129: invokevirtual #29                 // Method getTokenType:()Lorg/apache/wss4j/policy/model/X509Token$TokenType;
     132: ifnull        145
     135: new           #24                 // class java/lang/IllegalArgumentException
     138: dup
     139: ldc           #25                 // String Invalid Policy
     141: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     144: athrow
     145: getstatic     #30                 // Field org/apache/wss4j/policy/model/X509Token$TokenType.WssX509V1Token10:Lorg/apache/wss4j/policy/model/X509Token$TokenType;
     148: aload         10
     150: if_acmpne     173
     153: getstatic     #31                 // Field org/apache/wss4j/policy/SPConstants$SPVersion.SP11:Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     156: aload_0
     157: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     160: if_acmpeq     173
     163: new           #24                 // class java/lang/IllegalArgumentException
     166: dup
     167: ldc           #25                 // String Invalid Policy
     169: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     172: athrow
     173: aload_2
     174: aload         10
     176: invokevirtual #32                 // Method setTokenType:(Lorg/apache/wss4j/policy/model/X509Token$TokenType;)V
     179: goto          450
     182: aload_0
     183: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     186: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     189: invokevirtual #33                 // Method org/apache/wss4j/policy/SPConstants.getRequireKeyIdentifierReference:()Ljavax/xml/namespace/QName;
     192: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     195: aload         7
     197: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     200: ifeq          249
     203: aload_0
     204: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     207: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     210: invokevirtual #33                 // Method org/apache/wss4j/policy/SPConstants.getRequireKeyIdentifierReference:()Ljavax/xml/namespace/QName;
     213: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     216: aload         8
     218: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     221: ifeq          249
     224: aload_2
     225: invokevirtual #35                 // Method isRequireKeyIdentifierReference:()Z
     228: ifeq          241
     231: new           #24                 // class java/lang/IllegalArgumentException
     234: dup
     235: ldc           #25                 // String Invalid Policy
     237: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     240: athrow
     241: aload_2
     242: iconst_1
     243: invokevirtual #36                 // Method setRequireKeyIdentifierReference:(Z)V
     246: goto          450
     249: aload_0
     250: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     253: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     256: invokevirtual #37                 // Method org/apache/wss4j/policy/SPConstants.getRequireIssuerSerialReference:()Ljavax/xml/namespace/QName;
     259: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     262: aload         7
     264: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     267: ifeq          316
     270: aload_0
     271: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     274: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     277: invokevirtual #37                 // Method org/apache/wss4j/policy/SPConstants.getRequireIssuerSerialReference:()Ljavax/xml/namespace/QName;
     280: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     283: aload         8
     285: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     288: ifeq          316
     291: aload_2
     292: invokevirtual #38                 // Method isRequireIssuerSerialReference:()Z
     295: ifeq          308
     298: new           #24                 // class java/lang/IllegalArgumentException
     301: dup
     302: ldc           #25                 // String Invalid Policy
     304: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     307: athrow
     308: aload_2
     309: iconst_1
     310: invokevirtual #39                 // Method setRequireIssuerSerialReference:(Z)V
     313: goto          450
     316: aload_0
     317: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     320: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     323: invokevirtual #40                 // Method org/apache/wss4j/policy/SPConstants.getRequireEmbeddedTokenReference:()Ljavax/xml/namespace/QName;
     326: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     329: aload         7
     331: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     334: ifeq          383
     337: aload_0
     338: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     341: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     344: invokevirtual #40                 // Method org/apache/wss4j/policy/SPConstants.getRequireEmbeddedTokenReference:()Ljavax/xml/namespace/QName;
     347: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     350: aload         8
     352: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     355: ifeq          383
     358: aload_2
     359: invokevirtual #41                 // Method isRequireEmbeddedTokenReference:()Z
     362: ifeq          375
     365: new           #24                 // class java/lang/IllegalArgumentException
     368: dup
     369: ldc           #25                 // String Invalid Policy
     371: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     374: athrow
     375: aload_2
     376: iconst_1
     377: invokevirtual #42                 // Method setRequireEmbeddedTokenReference:(Z)V
     380: goto          450
     383: aload_0
     384: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     387: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     390: invokevirtual #43                 // Method org/apache/wss4j/policy/SPConstants.getRequireThumbprintReference:()Ljavax/xml/namespace/QName;
     393: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     396: aload         7
     398: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     401: ifeq          450
     404: aload_0
     405: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     408: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     411: invokevirtual #43                 // Method org/apache/wss4j/policy/SPConstants.getRequireThumbprintReference:()Ljavax/xml/namespace/QName;
     414: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     417: aload         8
     419: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     422: ifeq          450
     425: aload_2
     426: invokevirtual #44                 // Method isRequireThumbprintReference:()Z
     429: ifeq          442
     432: new           #24                 // class java/lang/IllegalArgumentException
     435: dup
     436: ldc           #25                 // String Invalid Policy
     438: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     441: athrow
     442: aload_2
     443: iconst_1
     444: invokevirtual #45                 // Method setRequireThumbprintReference:(Z)V
     447: goto          450
     450: iinc          5, 1
     453: goto          28
     456: return

  public boolean isRequireKeyIdentifierReference();
    Code:
       0: aload_0
       1: getfield      #46                 // Field requireKeyIdentifierReference:Z
       4: ireturn

  protected void setRequireKeyIdentifierReference(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #46                 // Field requireKeyIdentifierReference:Z
       5: return

  public boolean isRequireIssuerSerialReference();
    Code:
       0: aload_0
       1: getfield      #47                 // Field requireIssuerSerialReference:Z
       4: ireturn

  protected void setRequireIssuerSerialReference(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #47                 // Field requireIssuerSerialReference:Z
       5: return

  public boolean isRequireEmbeddedTokenReference();
    Code:
       0: aload_0
       1: getfield      #48                 // Field requireEmbeddedTokenReference:Z
       4: ireturn

  protected void setRequireEmbeddedTokenReference(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #48                 // Field requireEmbeddedTokenReference:Z
       5: return

  public boolean isRequireThumbprintReference();
    Code:
       0: aload_0
       1: getfield      #49                 // Field requireThumbprintReference:Z
       4: ireturn

  protected void setRequireThumbprintReference(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #49                 // Field requireThumbprintReference:Z
       5: return

  public org.apache.wss4j.policy.model.X509Token$TokenType getTokenType();
    Code:
       0: aload_0
       1: getfield      #50                 // Field tokenType:Lorg/apache/wss4j/policy/model/X509Token$TokenType;
       4: areturn

  protected void setTokenType(org.apache.wss4j.policy.model.X509Token$TokenType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #50                 // Field tokenType:Lorg/apache/wss4j/policy/model/X509Token$TokenType;
       5: return
}
