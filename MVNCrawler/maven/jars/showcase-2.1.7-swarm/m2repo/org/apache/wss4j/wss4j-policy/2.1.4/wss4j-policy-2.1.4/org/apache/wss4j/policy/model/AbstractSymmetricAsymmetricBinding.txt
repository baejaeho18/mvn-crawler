Compiled from "AbstractSymmetricAsymmetricBinding.java"
public abstract class org.apache.wss4j.policy.model.AbstractSymmetricAsymmetricBinding extends org.apache.wss4j.policy.model.AbstractBinding {
  private org.apache.wss4j.policy.model.AbstractSymmetricAsymmetricBinding$ProtectionOrder protectionOrder;

  private boolean encryptSignature;

  private boolean protectTokens;

  private boolean onlySignEntireHeadersAndBody;

  protected org.apache.wss4j.policy.model.AbstractSymmetricAsymmetricBinding(org.apache.wss4j.policy.SPConstants$SPVersion, org.apache.neethi.Policy);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/apache/wss4j/policy/model/AbstractBinding."<init>":(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/neethi/Policy;)V
       6: aload_0
       7: getstatic     #2                  // Field org/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder.SignBeforeEncrypting:Lorg/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder;
      10: putfield      #3                  // Field protectionOrder:Lorg/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder;
      13: aload_0
      14: iconst_0
      15: putfield      #4                  // Field encryptSignature:Z
      18: aload_0
      19: iconst_0
      20: putfield      #5                  // Field protectTokens:Z
      23: aload_0
      24: iconst_0
      25: putfield      #6                  // Field onlySignEntireHeadersAndBody:Z
      28: aload_0
      29: aload_2
      30: aload_0
      31: invokevirtual #7                  // Method parseNestedSymmetricAsymmetricBindingBasePolicy:(Lorg/apache/neethi/Policy;Lorg/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding;)V
      34: return

  protected void parseNestedSymmetricAsymmetricBindingBasePolicy(org.apache.neethi.Policy, org.apache.wss4j.policy.model.AbstractSymmetricAsymmetricBinding);
    Code:
       0: aload_1
       1: invokevirtual #8                  // Method org/apache/neethi/Policy.getAlternatives:()Ljava/util/Iterator;
       4: astore_3
       5: aload_3
       6: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifeq          326
      14: aload_3
      15: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      20: checkcast     #11                 // class java/util/List
      23: astore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: aload         4
      32: invokeinterface #12,  1           // InterfaceMethod java/util/List.size:()I
      37: if_icmpge     326
      40: aload         4
      42: iload         5
      44: invokeinterface #13,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      49: checkcast     #14                 // class org/apache/neethi/Assertion
      52: astore        6
      54: aload         6
      56: invokeinterface #15,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      61: invokevirtual #16                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
      64: astore        7
      66: aload         6
      68: invokeinterface #15,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      73: invokevirtual #17                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
      76: astore        8
      78: aload         7
      80: invokestatic  #18                 // Method org/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder.lookUp:(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder;
      83: astore        9
      85: aload         9
      87: ifnull        119
      90: aload_2
      91: invokevirtual #19                 // Method getProtectionOrder:()Lorg/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder;
      94: getstatic     #20                 // Field org/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder.EncryptBeforeSigning:Lorg/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder;
      97: if_acmpne     110
     100: new           #21                 // class java/lang/IllegalArgumentException
     103: dup
     104: ldc           #22                 // String Invalid Policy
     106: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     109: athrow
     110: aload_2
     111: aload         9
     113: invokevirtual #24                 // Method setProtectionOrder:(Lorg/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder;)V
     116: goto          320
     119: aload_0
     120: invokevirtual #25                 // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     123: invokevirtual #26                 // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     126: invokevirtual #27                 // Method org/apache/wss4j/policy/SPConstants.getEncryptSignature:()Ljavax/xml/namespace/QName;
     129: invokevirtual #16                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     132: aload         7
     134: invokevirtual #28                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     137: ifeq          186
     140: aload_0
     141: invokevirtual #25                 // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     144: invokevirtual #26                 // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     147: invokevirtual #27                 // Method org/apache/wss4j/policy/SPConstants.getEncryptSignature:()Ljavax/xml/namespace/QName;
     150: invokevirtual #17                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     153: aload         8
     155: invokevirtual #28                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     158: ifeq          186
     161: aload_2
     162: invokevirtual #29                 // Method isEncryptSignature:()Z
     165: ifeq          178
     168: new           #21                 // class java/lang/IllegalArgumentException
     171: dup
     172: ldc           #22                 // String Invalid Policy
     174: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     177: athrow
     178: aload_2
     179: iconst_1
     180: invokevirtual #30                 // Method setEncryptSignature:(Z)V
     183: goto          320
     186: aload_0
     187: invokevirtual #25                 // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     190: invokevirtual #26                 // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     193: invokevirtual #31                 // Method org/apache/wss4j/policy/SPConstants.getProtectTokens:()Ljavax/xml/namespace/QName;
     196: invokevirtual #16                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     199: aload         7
     201: invokevirtual #28                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     204: ifeq          253
     207: aload_0
     208: invokevirtual #25                 // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     211: invokevirtual #26                 // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     214: invokevirtual #31                 // Method org/apache/wss4j/policy/SPConstants.getProtectTokens:()Ljavax/xml/namespace/QName;
     217: invokevirtual #17                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     220: aload         8
     222: invokevirtual #28                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     225: ifeq          253
     228: aload_2
     229: invokevirtual #32                 // Method isProtectTokens:()Z
     232: ifeq          245
     235: new           #21                 // class java/lang/IllegalArgumentException
     238: dup
     239: ldc           #22                 // String Invalid Policy
     241: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     244: athrow
     245: aload_2
     246: iconst_1
     247: invokevirtual #33                 // Method setProtectTokens:(Z)V
     250: goto          320
     253: aload_0
     254: invokevirtual #25                 // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     257: invokevirtual #26                 // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     260: invokevirtual #34                 // Method org/apache/wss4j/policy/SPConstants.getOnlySignEntireHeadersAndBody:()Ljavax/xml/namespace/QName;
     263: invokevirtual #16                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     266: aload         7
     268: invokevirtual #28                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     271: ifeq          320
     274: aload_0
     275: invokevirtual #25                 // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     278: invokevirtual #26                 // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     281: invokevirtual #34                 // Method org/apache/wss4j/policy/SPConstants.getOnlySignEntireHeadersAndBody:()Ljavax/xml/namespace/QName;
     284: invokevirtual #17                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     287: aload         8
     289: invokevirtual #28                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     292: ifeq          320
     295: aload_2
     296: invokevirtual #35                 // Method isOnlySignEntireHeadersAndBody:()Z
     299: ifeq          312
     302: new           #21                 // class java/lang/IllegalArgumentException
     305: dup
     306: ldc           #22                 // String Invalid Policy
     308: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     311: athrow
     312: aload_2
     313: iconst_1
     314: invokevirtual #36                 // Method setOnlySignEntireHeadersAndBody:(Z)V
     317: goto          320
     320: iinc          5, 1
     323: goto          28
     326: return

  public org.apache.wss4j.policy.model.AbstractSymmetricAsymmetricBinding$ProtectionOrder getProtectionOrder();
    Code:
       0: aload_0
       1: getfield      #3                  // Field protectionOrder:Lorg/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder;
       4: areturn

  protected void setProtectionOrder(org.apache.wss4j.policy.model.AbstractSymmetricAsymmetricBinding$ProtectionOrder);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field protectionOrder:Lorg/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding$ProtectionOrder;
       5: return

  public boolean isEncryptSignature();
    Code:
       0: aload_0
       1: getfield      #4                  // Field encryptSignature:Z
       4: ireturn

  protected void setEncryptSignature(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field encryptSignature:Z
       5: return

  public boolean isProtectTokens();
    Code:
       0: aload_0
       1: getfield      #5                  // Field protectTokens:Z
       4: ireturn

  protected void setProtectTokens(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field protectTokens:Z
       5: return

  public boolean isOnlySignEntireHeadersAndBody();
    Code:
       0: aload_0
       1: getfield      #6                  // Field onlySignEntireHeadersAndBody:Z
       4: ireturn

  protected void setOnlySignEntireHeadersAndBody(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field onlySignEntireHeadersAndBody:Z
       5: return
}
