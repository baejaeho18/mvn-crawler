Compiled from "SecureConversationToken.java"
public class org.apache.wss4j.policy.model.SecureConversationToken extends org.apache.wss4j.policy.model.SecurityContextToken {
  private org.apache.wss4j.policy.model.BootstrapPolicy bootstrapPolicy;

  private boolean mustNotSendCancel;

  private boolean mustNotSendAmend;

  private boolean mustNotSendRenew;

  public org.apache.wss4j.policy.model.SecureConversationToken(org.apache.wss4j.policy.SPConstants$SPVersion, org.apache.wss4j.policy.SPConstants$IncludeTokenType, org.w3c.dom.Element, java.lang.String, org.w3c.dom.Element, org.apache.neethi.Policy);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokespecial #1                  // Method org/apache/wss4j/policy/model/SecurityContextToken."<init>":(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/wss4j/policy/SPConstants$IncludeTokenType;Lorg/w3c/dom/Element;Ljava/lang/String;Lorg/w3c/dom/Element;Lorg/apache/neethi/Policy;)V
      13: aload_0
      14: aload         6
      16: aload_0
      17: invokevirtual #2                  // Method parseNestedPolicy:(Lorg/apache/neethi/Policy;Lorg/apache/wss4j/policy/model/SecureConversationToken;)V
      20: return

  public javax.xml.namespace.QName getName();
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
       4: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
       7: invokevirtual #5                  // Method org/apache/wss4j/policy/SPConstants.getSecureConversationToken:()Ljavax/xml/namespace/QName;
      10: areturn

  protected org.apache.wss4j.policy.model.AbstractSecurityAssertion cloneAssertion(org.apache.neethi.Policy);
    Code:
       0: new           #6                  // class org/apache/wss4j/policy/model/SecureConversationToken
       3: dup
       4: aload_0
       5: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
       8: aload_0
       9: invokevirtual #7                  // Method getIncludeTokenType:()Lorg/apache/wss4j/policy/SPConstants$IncludeTokenType;
      12: aload_0
      13: invokevirtual #8                  // Method getIssuer:()Lorg/w3c/dom/Element;
      16: aload_0
      17: invokevirtual #9                  // Method getIssuerName:()Ljava/lang/String;
      20: aload_0
      21: invokevirtual #10                 // Method getClaims:()Lorg/w3c/dom/Element;
      24: aload_1
      25: invokespecial #11                 // Method "<init>":(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/wss4j/policy/SPConstants$IncludeTokenType;Lorg/w3c/dom/Element;Ljava/lang/String;Lorg/w3c/dom/Element;Lorg/apache/neethi/Policy;)V
      28: areturn

  protected void parseNestedPolicy(org.apache.neethi.Policy, org.apache.wss4j.policy.model.SecureConversationToken);
    Code:
       0: aload_1
       1: invokevirtual #12                 // Method org/apache/neethi/Policy.getAlternatives:()Ljava/util/Iterator;
       4: astore_3
       5: aload_3
       6: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifeq          360
      14: aload_3
      15: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      20: checkcast     #15                 // class java/util/List
      23: astore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: aload         4
      32: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
      37: if_icmpge     360
      40: aload         4
      42: iload         5
      44: invokeinterface #17,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      49: checkcast     #18                 // class org/apache/neethi/Assertion
      52: astore        6
      54: aload         6
      56: invokeinterface #19,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      61: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
      64: astore        7
      66: aload         6
      68: invokeinterface #19,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      73: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
      76: astore        8
      78: aload_0
      79: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
      82: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
      85: invokevirtual #22                 // Method org/apache/wss4j/policy/SPConstants.getMustNotSendCancel:()Ljavax/xml/namespace/QName;
      88: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
      91: aload         7
      93: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      96: ifeq          145
      99: aload_0
     100: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     103: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     106: invokevirtual #22                 // Method org/apache/wss4j/policy/SPConstants.getMustNotSendCancel:()Ljavax/xml/namespace/QName;
     109: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     112: aload         8
     114: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     117: ifeq          145
     120: aload_2
     121: invokevirtual #24                 // Method isMustNotSendCancel:()Z
     124: ifeq          137
     127: new           #25                 // class java/lang/IllegalArgumentException
     130: dup
     131: ldc           #26                 // String Invalid Policy
     133: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     136: athrow
     137: aload_2
     138: iconst_1
     139: invokevirtual #28                 // Method setMustNotSendCancel:(Z)V
     142: goto          354
     145: aload_0
     146: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     149: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     152: invokevirtual #29                 // Method org/apache/wss4j/policy/SPConstants.getMustNotSendAmend:()Ljavax/xml/namespace/QName;
     155: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     158: aload         7
     160: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     163: ifeq          212
     166: aload_0
     167: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     170: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     173: invokevirtual #29                 // Method org/apache/wss4j/policy/SPConstants.getMustNotSendAmend:()Ljavax/xml/namespace/QName;
     176: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     179: aload         8
     181: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     184: ifeq          212
     187: aload_2
     188: invokevirtual #30                 // Method isMustNotSendAmend:()Z
     191: ifeq          204
     194: new           #25                 // class java/lang/IllegalArgumentException
     197: dup
     198: ldc           #26                 // String Invalid Policy
     200: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     203: athrow
     204: aload_2
     205: iconst_1
     206: invokevirtual #31                 // Method setMustNotSendAmend:(Z)V
     209: goto          354
     212: aload_0
     213: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     216: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     219: invokevirtual #32                 // Method org/apache/wss4j/policy/SPConstants.getMustNotSendRenew:()Ljavax/xml/namespace/QName;
     222: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     225: aload         7
     227: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     230: ifeq          279
     233: aload_0
     234: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     237: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     240: invokevirtual #32                 // Method org/apache/wss4j/policy/SPConstants.getMustNotSendRenew:()Ljavax/xml/namespace/QName;
     243: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     246: aload         8
     248: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     251: ifeq          279
     254: aload_2
     255: invokevirtual #33                 // Method isMustNotSendRenew:()Z
     258: ifeq          271
     261: new           #25                 // class java/lang/IllegalArgumentException
     264: dup
     265: ldc           #26                 // String Invalid Policy
     267: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     270: athrow
     271: aload_2
     272: iconst_1
     273: invokevirtual #34                 // Method setMustNotSendRenew:(Z)V
     276: goto          354
     279: aload_0
     280: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     283: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     286: invokevirtual #35                 // Method org/apache/wss4j/policy/SPConstants.getBootstrapPolicy:()Ljavax/xml/namespace/QName;
     289: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     292: aload         7
     294: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     297: ifeq          354
     300: aload_0
     301: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     304: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     307: invokevirtual #35                 // Method org/apache/wss4j/policy/SPConstants.getBootstrapPolicy:()Ljavax/xml/namespace/QName;
     310: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     313: aload         8
     315: invokevirtual #23                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     318: ifeq          354
     321: aload_2
     322: invokevirtual #36                 // Method getBootstrapPolicy:()Lorg/apache/wss4j/policy/model/BootstrapPolicy;
     325: ifnull        338
     328: new           #25                 // class java/lang/IllegalArgumentException
     331: dup
     332: ldc           #26                 // String Invalid Policy
     334: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     337: athrow
     338: aload         6
     340: checkcast     #37                 // class org/apache/wss4j/policy/model/BootstrapPolicy
     343: astore        9
     345: aload_2
     346: aload         9
     348: invokevirtual #38                 // Method setBootstrapPolicy:(Lorg/apache/wss4j/policy/model/BootstrapPolicy;)V
     351: goto          354
     354: iinc          5, 1
     357: goto          28
     360: return

  public boolean isMustNotSendCancel();
    Code:
       0: aload_0
       1: getfield      #39                 // Field mustNotSendCancel:Z
       4: ireturn

  protected void setMustNotSendCancel(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #39                 // Field mustNotSendCancel:Z
       5: return

  public boolean isMustNotSendAmend();
    Code:
       0: aload_0
       1: getfield      #40                 // Field mustNotSendAmend:Z
       4: ireturn

  protected void setMustNotSendAmend(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #40                 // Field mustNotSendAmend:Z
       5: return

  public boolean isMustNotSendRenew();
    Code:
       0: aload_0
       1: getfield      #41                 // Field mustNotSendRenew:Z
       4: ireturn

  protected void setMustNotSendRenew(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field mustNotSendRenew:Z
       5: return

  public org.apache.wss4j.policy.model.BootstrapPolicy getBootstrapPolicy();
    Code:
       0: aload_0
       1: getfield      #42                 // Field bootstrapPolicy:Lorg/apache/wss4j/policy/model/BootstrapPolicy;
       4: areturn

  protected void setBootstrapPolicy(org.apache.wss4j.policy.model.BootstrapPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #42                 // Field bootstrapPolicy:Lorg/apache/wss4j/policy/model/BootstrapPolicy;
       5: return
}
