Compiled from "Wss11.java"
public class org.apache.wss4j.policy.model.Wss11 extends org.apache.wss4j.policy.model.Wss10 {
  private boolean mustSupportRefThumbprint;

  private boolean mustSupportRefEncryptedKey;

  private boolean requireSignatureConfirmation;

  public org.apache.wss4j.policy.model.Wss11(org.apache.wss4j.policy.SPConstants$SPVersion, org.apache.neethi.Policy);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/apache/wss4j/policy/model/Wss10."<init>":(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/neethi/Policy;)V
       6: aload_0
       7: aload_2
       8: aload_0
       9: invokevirtual #2                  // Method parseNestedWss11Policy:(Lorg/apache/neethi/Policy;Lorg/apache/wss4j/policy/model/Wss11;)V
      12: return

  public javax.xml.namespace.QName getName();
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
       4: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
       7: invokevirtual #5                  // Method org/apache/wss4j/policy/SPConstants.getWss11:()Ljavax/xml/namespace/QName;
      10: areturn

  protected org.apache.wss4j.policy.model.AbstractSecurityAssertion cloneAssertion(org.apache.neethi.Policy);
    Code:
       0: new           #6                  // class org/apache/wss4j/policy/model/Wss11
       3: dup
       4: aload_0
       5: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
       8: aload_1
       9: invokespecial #7                  // Method "<init>":(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/neethi/Policy;)V
      12: areturn

  protected void parseNestedWss11Policy(org.apache.neethi.Policy, org.apache.wss4j.policy.model.Wss11);
    Code:
       0: aload_1
       1: invokevirtual #8                  // Method org/apache/neethi/Policy.getAlternatives:()Ljava/util/Iterator;
       4: astore_3
       5: aload_3
       6: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifeq          285
      14: aload_3
      15: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      20: checkcast     #11                 // class java/util/List
      23: astore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: aload         4
      32: invokeinterface #12,  1           // InterfaceMethod java/util/List.size:()I
      37: if_icmpge     285
      40: aload         4
      42: iload         5
      44: invokeinterface #13,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      49: checkcast     #14                 // class org/apache/neethi/Assertion
      52: astore        6
      54: aload         6
      56: invokeinterface #15,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      61: invokevirtual #16                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
      64: astore        7
      66: aload         6
      68: invokeinterface #15,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      73: invokevirtual #17                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
      76: astore        8
      78: aload_0
      79: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
      82: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
      85: invokevirtual #18                 // Method org/apache/wss4j/policy/SPConstants.getMustSupportRefThumbprint:()Ljavax/xml/namespace/QName;
      88: invokevirtual #16                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
      91: aload         7
      93: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      96: ifeq          145
      99: aload_0
     100: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     103: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     106: invokevirtual #18                 // Method org/apache/wss4j/policy/SPConstants.getMustSupportRefThumbprint:()Ljavax/xml/namespace/QName;
     109: invokevirtual #17                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     112: aload         8
     114: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     117: ifeq          145
     120: aload_2
     121: invokevirtual #20                 // Method isMustSupportRefThumbprint:()Z
     124: ifeq          137
     127: new           #21                 // class java/lang/IllegalArgumentException
     130: dup
     131: ldc           #22                 // String Invalid Policy
     133: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     136: athrow
     137: aload_2
     138: iconst_1
     139: invokevirtual #24                 // Method setMustSupportRefThumbprint:(Z)V
     142: goto          279
     145: aload_0
     146: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     149: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     152: invokevirtual #25                 // Method org/apache/wss4j/policy/SPConstants.getMustSupportRefEncryptedKey:()Ljavax/xml/namespace/QName;
     155: invokevirtual #16                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     158: aload         7
     160: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     163: ifeq          212
     166: aload_0
     167: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     170: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     173: invokevirtual #25                 // Method org/apache/wss4j/policy/SPConstants.getMustSupportRefEncryptedKey:()Ljavax/xml/namespace/QName;
     176: invokevirtual #17                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     179: aload         8
     181: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     184: ifeq          212
     187: aload_2
     188: invokevirtual #26                 // Method isMustSupportRefEncryptedKey:()Z
     191: ifeq          204
     194: new           #21                 // class java/lang/IllegalArgumentException
     197: dup
     198: ldc           #22                 // String Invalid Policy
     200: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     203: athrow
     204: aload_2
     205: iconst_1
     206: invokevirtual #27                 // Method setMustSupportRefEncryptedKey:(Z)V
     209: goto          279
     212: aload_0
     213: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     216: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     219: invokevirtual #28                 // Method org/apache/wss4j/policy/SPConstants.getRequireSignatureConfirmation:()Ljavax/xml/namespace/QName;
     222: invokevirtual #16                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     225: aload         7
     227: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     230: ifeq          279
     233: aload_0
     234: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     237: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     240: invokevirtual #28                 // Method org/apache/wss4j/policy/SPConstants.getRequireSignatureConfirmation:()Ljavax/xml/namespace/QName;
     243: invokevirtual #17                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     246: aload         8
     248: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     251: ifeq          279
     254: aload_2
     255: invokevirtual #29                 // Method isRequireSignatureConfirmation:()Z
     258: ifeq          271
     261: new           #21                 // class java/lang/IllegalArgumentException
     264: dup
     265: ldc           #22                 // String Invalid Policy
     267: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     270: athrow
     271: aload_2
     272: iconst_1
     273: invokevirtual #30                 // Method setRequireSignatureConfirmation:(Z)V
     276: goto          279
     279: iinc          5, 1
     282: goto          28
     285: return

  public boolean isMustSupportRefThumbprint();
    Code:
       0: aload_0
       1: getfield      #31                 // Field mustSupportRefThumbprint:Z
       4: ireturn

  protected void setMustSupportRefThumbprint(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field mustSupportRefThumbprint:Z
       5: return

  public boolean isMustSupportRefEncryptedKey();
    Code:
       0: aload_0
       1: getfield      #32                 // Field mustSupportRefEncryptedKey:Z
       4: ireturn

  protected void setMustSupportRefEncryptedKey(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field mustSupportRefEncryptedKey:Z
       5: return

  public boolean isRequireSignatureConfirmation();
    Code:
       0: aload_0
       1: getfield      #33                 // Field requireSignatureConfirmation:Z
       4: ireturn

  protected void setRequireSignatureConfirmation(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field requireSignatureConfirmation:Z
       5: return
}
