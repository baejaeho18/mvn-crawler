Compiled from "UsernameToken.java"
public class org.apache.wss4j.policy.model.UsernameToken extends org.apache.wss4j.policy.model.AbstractToken {
  private org.apache.wss4j.policy.model.UsernameToken$PasswordType passwordType;

  private boolean created;

  private boolean nonce;

  private org.apache.wss4j.policy.model.UsernameToken$UsernameTokenType usernameTokenType;

  public org.apache.wss4j.policy.model.UsernameToken(org.apache.wss4j.policy.SPConstants$SPVersion, org.apache.wss4j.policy.SPConstants$IncludeTokenType, org.w3c.dom.Element, java.lang.String, org.w3c.dom.Element, org.apache.neethi.Policy);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokespecial #1                  // Method org/apache/wss4j/policy/model/AbstractToken."<init>":(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/wss4j/policy/SPConstants$IncludeTokenType;Lorg/w3c/dom/Element;Ljava/lang/String;Lorg/w3c/dom/Element;Lorg/apache/neethi/Policy;)V
      13: aload_0
      14: aload         6
      16: aload_0
      17: invokevirtual #2                  // Method parseNestedPolicy:(Lorg/apache/neethi/Policy;Lorg/apache/wss4j/policy/model/UsernameToken;)V
      20: return

  public javax.xml.namespace.QName getName();
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
       4: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
       7: invokevirtual #5                  // Method org/apache/wss4j/policy/SPConstants.getUsernameToken:()Ljavax/xml/namespace/QName;
      10: areturn

  protected org.apache.wss4j.policy.model.AbstractSecurityAssertion cloneAssertion(org.apache.neethi.Policy);
    Code:
       0: new           #6                  // class org/apache/wss4j/policy/model/UsernameToken
       3: dup
       4: aload_0
       5: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
       8: aload_0
       9: invokevirtual #7                  // Method getIncludeTokenType:()Lorg/apache/wss4j/policy/SPConstants$IncludeTokenType;
      12: aload_0
      13: invokevirtual #8                  // Method getIssuer:()Lorg/w3c/dom/Element;
      16: aload_0
      17: invokevirtual #9                  // Method getIssuerName:()Ljava/lang/String;
      20: aload_0
      21: invokevirtual #10                 // Method getClaims:()Lorg/w3c/dom/Element;
      24: aload_1
      25: invokespecial #11                 // Method "<init>":(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/wss4j/policy/SPConstants$IncludeTokenType;Lorg/w3c/dom/Element;Ljava/lang/String;Lorg/w3c/dom/Element;Lorg/apache/neethi/Policy;)V
      28: areturn

  protected void parseNestedPolicy(org.apache.neethi.Policy, org.apache.wss4j.policy.model.UsernameToken);
    Code:
       0: aload_1
       1: invokevirtual #12                 // Method org/apache/neethi/Policy.getAlternatives:()Ljava/util/Iterator;
       4: astore_3
       5: aload_3
       6: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifeq          332
      14: aload_3
      15: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      20: checkcast     #15                 // class java/util/List
      23: astore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: aload         4
      32: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
      37: if_icmpge     332
      40: aload         4
      42: iload         5
      44: invokeinterface #17,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      49: checkcast     #18                 // class org/apache/neethi/Assertion
      52: astore        6
      54: aload         6
      56: invokeinterface #19,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      61: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
      64: astore        7
      66: aload         6
      68: invokeinterface #19,  1           // InterfaceMethod org/apache/neethi/Assertion.getName:()Ljavax/xml/namespace/QName;
      73: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
      76: astore        8
      78: aload         7
      80: invokestatic  #22                 // Method org/apache/wss4j/policy/model/UsernameToken$PasswordType.lookUp:(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/UsernameToken$PasswordType;
      83: astore        9
      85: aload         9
      87: ifnull        116
      90: aload_2
      91: invokevirtual #23                 // Method getPasswordType:()Lorg/apache/wss4j/policy/model/UsernameToken$PasswordType;
      94: ifnull        107
      97: new           #24                 // class java/lang/IllegalArgumentException
     100: dup
     101: ldc           #25                 // String Invalid Policy
     103: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     106: athrow
     107: aload_2
     108: aload         9
     110: invokevirtual #27                 // Method setPasswordType:(Lorg/apache/wss4j/policy/model/UsernameToken$PasswordType;)V
     113: goto          326
     116: aload_0
     117: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     120: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     123: invokevirtual #28                 // Method org/apache/wss4j/policy/SPConstants.getCreated:()Ljavax/xml/namespace/QName;
     126: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     129: aload         7
     131: invokevirtual #29                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     134: ifeq          183
     137: aload_0
     138: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     141: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     144: invokevirtual #28                 // Method org/apache/wss4j/policy/SPConstants.getCreated:()Ljavax/xml/namespace/QName;
     147: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     150: aload         8
     152: invokevirtual #29                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     155: ifeq          183
     158: aload_2
     159: invokevirtual #30                 // Method isCreated:()Z
     162: ifeq          175
     165: new           #24                 // class java/lang/IllegalArgumentException
     168: dup
     169: ldc           #25                 // String Invalid Policy
     171: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     174: athrow
     175: aload_2
     176: iconst_1
     177: invokevirtual #31                 // Method setCreated:(Z)V
     180: goto          326
     183: aload_0
     184: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     187: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     190: invokevirtual #32                 // Method org/apache/wss4j/policy/SPConstants.getNonce:()Ljavax/xml/namespace/QName;
     193: invokevirtual #20                 // Method javax/xml/namespace/QName.getLocalPart:()Ljava/lang/String;
     196: aload         7
     198: invokevirtual #29                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     201: ifeq          250
     204: aload_0
     205: invokevirtual #3                  // Method getVersion:()Lorg/apache/wss4j/policy/SPConstants$SPVersion;
     208: invokevirtual #4                  // Method org/apache/wss4j/policy/SPConstants$SPVersion.getSPConstants:()Lorg/apache/wss4j/policy/SPConstants;
     211: invokevirtual #32                 // Method org/apache/wss4j/policy/SPConstants.getNonce:()Ljavax/xml/namespace/QName;
     214: invokevirtual #21                 // Method javax/xml/namespace/QName.getNamespaceURI:()Ljava/lang/String;
     217: aload         8
     219: invokevirtual #29                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     222: ifeq          250
     225: aload_2
     226: invokevirtual #33                 // Method isNonce:()Z
     229: ifeq          242
     232: new           #24                 // class java/lang/IllegalArgumentException
     235: dup
     236: ldc           #25                 // String Invalid Policy
     238: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     241: athrow
     242: aload_2
     243: iconst_1
     244: invokevirtual #34                 // Method setNonce:(Z)V
     247: goto          326
     250: aload         7
     252: invokestatic  #35                 // Method org/apache/wss4j/policy/model/AbstractToken$DerivedKeys.lookUp:(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/AbstractToken$DerivedKeys;
     255: astore        10
     257: aload         10
     259: ifnull        288
     262: aload_2
     263: invokevirtual #36                 // Method getDerivedKeys:()Lorg/apache/wss4j/policy/model/AbstractToken$DerivedKeys;
     266: ifnull        279
     269: new           #24                 // class java/lang/IllegalArgumentException
     272: dup
     273: ldc           #25                 // String Invalid Policy
     275: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     278: athrow
     279: aload_2
     280: aload         10
     282: invokevirtual #37                 // Method setDerivedKeys:(Lorg/apache/wss4j/policy/model/AbstractToken$DerivedKeys;)V
     285: goto          326
     288: aload         7
     290: invokestatic  #38                 // Method org/apache/wss4j/policy/model/UsernameToken$UsernameTokenType.lookUp:(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/UsernameToken$UsernameTokenType;
     293: astore        11
     295: aload         11
     297: ifnull        326
     300: aload_2
     301: invokevirtual #39                 // Method getUsernameTokenType:()Lorg/apache/wss4j/policy/model/UsernameToken$UsernameTokenType;
     304: ifnull        317
     307: new           #24                 // class java/lang/IllegalArgumentException
     310: dup
     311: ldc           #25                 // String Invalid Policy
     313: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     316: athrow
     317: aload_2
     318: aload         11
     320: invokevirtual #40                 // Method setUsernameTokenType:(Lorg/apache/wss4j/policy/model/UsernameToken$UsernameTokenType;)V
     323: goto          326
     326: iinc          5, 1
     329: goto          28
     332: return

  public org.apache.wss4j.policy.model.UsernameToken$PasswordType getPasswordType();
    Code:
       0: aload_0
       1: getfield      #41                 // Field passwordType:Lorg/apache/wss4j/policy/model/UsernameToken$PasswordType;
       4: areturn

  protected void setPasswordType(org.apache.wss4j.policy.model.UsernameToken$PasswordType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field passwordType:Lorg/apache/wss4j/policy/model/UsernameToken$PasswordType;
       5: return

  public boolean isCreated();
    Code:
       0: aload_0
       1: getfield      #42                 // Field created:Z
       4: ireturn

  protected void setCreated(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #42                 // Field created:Z
       5: return

  public boolean isNonce();
    Code:
       0: aload_0
       1: getfield      #43                 // Field nonce:Z
       4: ireturn

  protected void setNonce(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #43                 // Field nonce:Z
       5: return

  public org.apache.wss4j.policy.model.UsernameToken$UsernameTokenType getUsernameTokenType();
    Code:
       0: aload_0
       1: getfield      #44                 // Field usernameTokenType:Lorg/apache/wss4j/policy/model/UsernameToken$UsernameTokenType;
       4: areturn

  protected void setUsernameTokenType(org.apache.wss4j.policy.model.UsernameToken$UsernameTokenType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #44                 // Field usernameTokenType:Lorg/apache/wss4j/policy/model/UsernameToken$UsernameTokenType;
       5: return
}
