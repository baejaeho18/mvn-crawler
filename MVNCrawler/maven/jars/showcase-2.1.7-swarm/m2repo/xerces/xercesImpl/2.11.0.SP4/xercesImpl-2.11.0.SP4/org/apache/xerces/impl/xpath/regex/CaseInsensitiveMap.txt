Compiled from "CaseInsensitiveMap.java"
final class org.apache.xerces.impl.xpath.regex.CaseInsensitiveMap {
  private static int CHUNK_SHIFT;

  private static int CHUNK_SIZE;

  private static int CHUNK_MASK;

  private static int INITIAL_CHUNK_COUNT;

  private static int[][][] caseInsensitiveMap;

  private static int LOWER_CASE_MATCH;

  private static int UPPER_CASE_MATCH;

  org.apache.xerces.impl.xpath.regex.CaseInsensitiveMap();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static int[] get(int);
    Code:
       0: iload_0
       1: ldc           #2                  // int 65536
       3: if_icmpge     13
       6: iload_0
       7: invokestatic  #3                  // Method getMapping:(I)[I
      10: goto          14
      13: aconst_null
      14: areturn

  private static int[] getMapping(int);
    Code:
       0: iload_0
       1: getstatic     #4                  // Field CHUNK_SHIFT:I
       4: iushr
       5: istore_1
       6: iload_0
       7: getstatic     #5                  // Field CHUNK_MASK:I
      10: iand
      11: istore_2
      12: getstatic     #6                  // Field caseInsensitiveMap:[[[I
      15: iload_1
      16: aaload
      17: iload_2
      18: aaload
      19: areturn

  private static void buildCaseInsensitiveMap();
    Code:
       0: getstatic     #7                  // Field INITIAL_CHUNK_COUNT:I
       3: getstatic     #8                  // Field CHUNK_SIZE:I
       6: multianewarray #9,  2             // class "[[[I"
      10: putstatic     #6                  // Field caseInsensitiveMap:[[[I
      13: iconst_0
      14: istore_2
      15: iload_2
      16: ldc           #2                  // int 65536
      18: if_icmpge     166
      21: iload_2
      22: i2c
      23: invokestatic  #10                 // Method java/lang/Character.toLowerCase:(C)C
      26: istore_0
      27: iload_2
      28: i2c
      29: invokestatic  #11                 // Method java/lang/Character.toUpperCase:(C)C
      32: istore_1
      33: iload_0
      34: iload_1
      35: if_icmpne     43
      38: iload_0
      39: iload_2
      40: if_icmpeq     160
      43: iconst_2
      44: newarray       int
      46: astore_3
      47: iconst_0
      48: istore        4
      50: iload_0
      51: iload_2
      52: if_icmpeq     96
      55: aload_3
      56: iload         4
      58: iinc          4, 1
      61: iload_0
      62: iastore
      63: aload_3
      64: iload         4
      66: iinc          4, 1
      69: getstatic     #12                 // Field LOWER_CASE_MATCH:I
      72: iastore
      73: iload_0
      74: invokestatic  #3                  // Method getMapping:(I)[I
      77: astore        5
      79: aload         5
      81: ifnull        96
      84: iload_2
      85: aload_3
      86: iload_0
      87: aload         5
      89: getstatic     #12                 // Field LOWER_CASE_MATCH:I
      92: invokestatic  #13                 // Method updateMap:(I[II[II)[I
      95: astore_3
      96: iload_1
      97: iload_2
      98: if_icmpeq     155
     101: iload         4
     103: aload_3
     104: arraylength
     105: if_icmpne     114
     108: aload_3
     109: iconst_2
     110: invokestatic  #14                 // Method expandMap:([II)[I
     113: astore_3
     114: aload_3
     115: iload         4
     117: iinc          4, 1
     120: iload_1
     121: iastore
     122: aload_3
     123: iload         4
     125: iinc          4, 1
     128: getstatic     #15                 // Field UPPER_CASE_MATCH:I
     131: iastore
     132: iload_1
     133: invokestatic  #3                  // Method getMapping:(I)[I
     136: astore        5
     138: aload         5
     140: ifnull        155
     143: iload_2
     144: aload_3
     145: iload_1
     146: aload         5
     148: getstatic     #15                 // Field UPPER_CASE_MATCH:I
     151: invokestatic  #13                 // Method updateMap:(I[II[II)[I
     154: astore_3
     155: iload_2
     156: aload_3
     157: invokestatic  #16                 // Method set:(I[I)V
     160: iinc          2, 1
     163: goto          15
     166: return

  private static int[] expandMap(int[], int);
    Code:
       0: aload_0
       1: arraylength
       2: istore_2
       3: iload_2
       4: iload_1
       5: iadd
       6: newarray       int
       8: astore_3
       9: aload_0
      10: iconst_0
      11: aload_3
      12: iconst_0
      13: iload_2
      14: invokestatic  #17                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      17: aload_3
      18: areturn

  private static void set(int, int[]);
    Code:
       0: iload_0
       1: getstatic     #4                  // Field CHUNK_SHIFT:I
       4: iushr
       5: istore_2
       6: iload_0
       7: getstatic     #5                  // Field CHUNK_MASK:I
      10: iand
      11: istore_3
      12: getstatic     #6                  // Field caseInsensitiveMap:[[[I
      15: iload_2
      16: aaload
      17: iload_3
      18: aload_1
      19: aastore
      20: return

  private static int[] updateMap(int, int[], int, int[], int);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: aload_3
       6: arraylength
       7: if_icmpge     89
      10: aload_3
      11: iload         5
      13: iaload
      14: istore        6
      16: iload         6
      18: invokestatic  #3                  // Method getMapping:(I)[I
      21: astore        7
      23: aload         7
      25: ifnull        83
      28: aload         7
      30: iload_2
      31: iload         4
      33: invokestatic  #18                 // Method contains:([III)Z
      36: ifeq          83
      39: aload         7
      41: iload_0
      42: invokestatic  #19                 // Method contains:([II)Z
      45: ifne          65
      48: aload         7
      50: iload_0
      51: iload         4
      53: invokestatic  #20                 // Method expandAndAdd:([III)[I
      56: astore        7
      58: iload         6
      60: aload         7
      62: invokestatic  #16                 // Method set:(I[I)V
      65: aload_1
      66: iload         6
      68: invokestatic  #19                 // Method contains:([II)Z
      71: ifne          83
      74: aload_1
      75: iload         6
      77: iload         4
      79: invokestatic  #20                 // Method expandAndAdd:([III)[I
      82: astore_1
      83: iinc          5, 2
      86: goto          3
      89: aload_3
      90: iload_0
      91: invokestatic  #19                 // Method contains:([II)Z
      94: ifne          110
      97: aload_3
      98: iload_0
      99: iload         4
     101: invokestatic  #20                 // Method expandAndAdd:([III)[I
     104: astore_3
     105: iload_2
     106: aload_3
     107: invokestatic  #16                 // Method set:(I[I)V
     110: aload_1
     111: areturn

  private static boolean contains(int[], int);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_0
       4: arraylength
       5: if_icmpge     23
       8: aload_0
       9: iload_2
      10: iaload
      11: iload_1
      12: if_icmpne     17
      15: iconst_1
      16: ireturn
      17: iinc          2, 2
      20: goto          2
      23: iconst_0
      24: ireturn

  private static boolean contains(int[], int, int);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: aload_0
       4: arraylength
       5: if_icmpge     32
       8: aload_0
       9: iload_3
      10: iaload
      11: iload_1
      12: if_icmpne     26
      15: aload_0
      16: iload_3
      17: iconst_1
      18: iadd
      19: iaload
      20: iload_2
      21: if_icmpne     26
      24: iconst_1
      25: ireturn
      26: iinc          3, 2
      29: goto          2
      32: iconst_0
      33: ireturn

  private static int[] expandAndAdd(int[], int, int);
    Code:
       0: aload_0
       1: arraylength
       2: istore_3
       3: iload_3
       4: iconst_2
       5: iadd
       6: newarray       int
       8: astore        4
      10: aload_0
      11: iconst_0
      12: aload         4
      14: iconst_0
      15: iload_3
      16: invokestatic  #17                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      19: aload         4
      21: iload_3
      22: iload_1
      23: iastore
      24: aload         4
      26: iload_3
      27: iconst_1
      28: iadd
      29: iload_2
      30: iastore
      31: aload         4
      33: areturn

  static {};
    Code:
       0: bipush        10
       2: putstatic     #4                  // Field CHUNK_SHIFT:I
       5: iconst_1
       6: getstatic     #4                  // Field CHUNK_SHIFT:I
       9: ishl
      10: putstatic     #8                  // Field CHUNK_SIZE:I
      13: getstatic     #8                  // Field CHUNK_SIZE:I
      16: iconst_1
      17: isub
      18: putstatic     #5                  // Field CHUNK_MASK:I
      21: bipush        64
      23: putstatic     #7                  // Field INITIAL_CHUNK_COUNT:I
      26: iconst_1
      27: putstatic     #12                 // Field LOWER_CASE_MATCH:I
      30: iconst_2
      31: putstatic     #15                 // Field UPPER_CASE_MATCH:I
      34: invokestatic  #21                 // Method buildCaseInsensitiveMap:()V
      37: return
}
