///<reference path="definitions/external/tsd.d.ts"/>
var ButterFaces;
(function (ButterFaces) {
    var Tooltip = (function () {
        function Tooltip(popoverMaxWidthByBootstrap, popoverMaxHeightByButterFaces) {
            if (popoverMaxWidthByBootstrap === void 0) { popoverMaxWidthByBootstrap = 276; }
            if (popoverMaxHeightByButterFaces === void 0) { popoverMaxHeightByButterFaces = 110; }
            this.popoverMaxWidthByBootstrap = popoverMaxWidthByBootstrap;
            this.popoverMaxHeightByButterFaces = popoverMaxHeightByButterFaces;
            console.log('ButterFaces.Tooltip.constructor - popoverMaxWidthByBootstrap is ' + this.popoverMaxHeightByButterFaces + ", popoverMaxHeightByButterFaces is " + this.popoverMaxWidthByBootstrap);
        }
        Tooltip.prototype.calculateTooltipPosition = function (popover, source) {
            var offsetBottom = $(window).height() - $(source).offset().top - $(source).outerHeight();
            var offsetRight = $(window).width() - $(source).offset().left - $(source).outerWidth();
            console.log('ButterFaces.Tooltip.calculateTooltipPosition - offsetBottom is ' + offsetBottom);
            console.log('ButterFaces.Tooltip.calculateTooltipPosition - offsetRight is ' + offsetRight);
            if (offsetBottom < this.popoverMaxHeightByButterFaces) {
                if (offsetRight < this.popoverMaxWidthByBootstrap) {
                    console.log('ButterFaces.Tooltip.calculateTooltipPosition - offset right (' + offsetRight + ') is smaller than popoverMaxWidthByBootstrap (' + this.popoverMaxWidthByBootstrap + ') -> position is top or left');
                    if ($(source).offset().left < this.popoverMaxWidthByBootstrap) {
                        console.log('ButterFaces.Tooltip.calculateTooltipPosition - left offset is smaller than popoverMaxWidthByBootstrap (' + this.popoverMaxWidthByBootstrap + ') -> position is top');
                        return 'top';
                    }
                    console.log('ButterFaces.Tooltip.calculateTooltipPosition - left offset is NOT smaller than popoverMaxWidthByBootstrap (' + this.popoverMaxWidthByBootstrap + ') -> position is left');
                    return 'left';
                }
                console.log('ButterFaces.Tooltip.calculateTooltipPosition - offsetRight (' + offsetRight + ') is greater than popoverMaxWidthByBootstrap (' + this.popoverMaxWidthByBootstrap + ') -> position is right');
                return 'right';
            }
            console.log('ButterFaces.Tooltip.calculateTooltipPosition - offsetBottom (' + offsetBottom + ') is greater than popoverMaxHeightByButterFaces (' + this.popoverMaxHeightByButterFaces + ') -> position is bottom');
            return 'bottom';
        };
        ;
        return Tooltip;
    })();
    ButterFaces.Tooltip = Tooltip;
})(ButterFaces || (ButterFaces = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dHRlcmZhY2VzLXRvb2x0aXAudHMiXSwibmFtZXMiOlsiQnV0dGVyRmFjZXMiLCJCdXR0ZXJGYWNlcy5Ub29sdGlwIiwiQnV0dGVyRmFjZXMuVG9vbHRpcC5jb25zdHJ1Y3RvciIsIkJ1dHRlckZhY2VzLlRvb2x0aXAuY2FsY3VsYXRlVG9vbHRpcFBvc2l0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxvREFBb0Q7QUFFcEQsSUFBTyxXQUFXLENBc0NqQjtBQXRDRCxXQUFPLFdBQVcsRUFBQyxDQUFDO0lBQ2hCQTtRQUtJQyxpQkFBWUEsMEJBQWdDQSxFQUFFQSw2QkFBbUNBO1lBQXJFQywwQ0FBZ0NBLEdBQWhDQSxnQ0FBZ0NBO1lBQUVBLDZDQUFtQ0EsR0FBbkNBLG1DQUFtQ0E7WUFDN0VBLElBQUlBLENBQUNBLDBCQUEwQkEsR0FBR0EsMEJBQTBCQSxDQUFDQTtZQUM3REEsSUFBSUEsQ0FBQ0EsNkJBQTZCQSxHQUFHQSw2QkFBNkJBLENBQUNBO1lBRW5FQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxrRUFBa0VBLEdBQUdBLElBQUlBLENBQUNBLDZCQUE2QkEsR0FBR0EscUNBQXFDQSxHQUFHQSxJQUFJQSxDQUFDQSwwQkFBMEJBLENBQUNBLENBQUNBO1FBQ25NQSxDQUFDQTtRQUVNRCwwQ0FBd0JBLEdBQS9CQSxVQUFnQ0EsT0FBV0EsRUFBRUEsTUFBVUE7WUFFbkRFLElBQUlBLFlBQVlBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBO1lBQ3pGQSxJQUFJQSxXQUFXQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQTtZQUV2RkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsaUVBQWlFQSxHQUFHQSxZQUFZQSxDQUFDQSxDQUFDQTtZQUM5RkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsZ0VBQWdFQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQTtZQUU1RkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsNkJBQTZCQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDcERBLEVBQUVBLENBQUNBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2hEQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSwrREFBK0RBLEdBQUdBLFdBQVdBLEdBQUdBLGdEQUFnREEsR0FBR0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxHQUFHQSw4QkFBOEJBLENBQUNBLENBQUNBO29CQUNqTkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDNURBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLHlHQUF5R0EsR0FBR0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxHQUFHQSxzQkFBc0JBLENBQUNBLENBQUNBO3dCQUNsTEEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7b0JBQ2pCQSxDQUFDQTtvQkFDREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsNkdBQTZHQSxHQUFHQSxJQUFJQSxDQUFDQSwwQkFBMEJBLEdBQUdBLHVCQUF1QkEsQ0FBQ0EsQ0FBQ0E7b0JBQ3ZMQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtnQkFDbEJBLENBQUNBO2dCQUNEQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSw4REFBOERBLEdBQUdBLFdBQVdBLEdBQUdBLGdEQUFnREEsR0FBR0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxHQUFHQSx3QkFBd0JBLENBQUNBLENBQUNBO2dCQUMxTUEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7WUFDbkJBLENBQUNBO1lBQ0RBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLCtEQUErREEsR0FBR0EsWUFBWUEsR0FBR0EsbURBQW1EQSxHQUFHQSxJQUFJQSxDQUFDQSw2QkFBNkJBLEdBQUdBLHlCQUF5QkEsQ0FBQ0EsQ0FBQ0E7WUFDbk5BLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBO1FBQ3BCQSxDQUFDQTs7UUFDTEYsY0FBQ0E7SUFBREEsQ0FwQ0FELEFBb0NDQyxJQUFBRDtJQXBDWUEsbUJBQU9BLFVBb0NuQkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF0Q00sV0FBVyxLQUFYLFdBQVcsUUFzQ2pCIiwiZmlsZSI6ImJ1dHRlcmZhY2VzLXRvb2x0aXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy88cmVmZXJlbmNlIHBhdGg9XCJkZWZpbml0aW9ucy9leHRlcm5hbC90c2QuZC50c1wiLz5cblxubW9kdWxlIEJ1dHRlckZhY2VzIHtcbiAgICBleHBvcnQgY2xhc3MgVG9vbHRpcCB7XG5cbiAgICAgICAgcG9wb3Zlck1heFdpZHRoQnlCb290c3RyYXA6bnVtYmVyO1xuICAgICAgICBwb3BvdmVyTWF4SGVpZ2h0QnlCdXR0ZXJGYWNlczpudW1iZXI7XG5cbiAgICAgICAgY29uc3RydWN0b3IocG9wb3Zlck1heFdpZHRoQnlCb290c3RyYXAgPSAyNzYsIHBvcG92ZXJNYXhIZWlnaHRCeUJ1dHRlckZhY2VzID0gMTEwKSB7XG4gICAgICAgICAgICB0aGlzLnBvcG92ZXJNYXhXaWR0aEJ5Qm9vdHN0cmFwID0gcG9wb3Zlck1heFdpZHRoQnlCb290c3RyYXA7XG4gICAgICAgICAgICB0aGlzLnBvcG92ZXJNYXhIZWlnaHRCeUJ1dHRlckZhY2VzID0gcG9wb3Zlck1heEhlaWdodEJ5QnV0dGVyRmFjZXM7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdCdXR0ZXJGYWNlcy5Ub29sdGlwLmNvbnN0cnVjdG9yIC0gcG9wb3Zlck1heFdpZHRoQnlCb290c3RyYXAgaXMgJyArIHRoaXMucG9wb3Zlck1heEhlaWdodEJ5QnV0dGVyRmFjZXMgKyBcIiwgcG9wb3Zlck1heEhlaWdodEJ5QnV0dGVyRmFjZXMgaXMgXCIgKyB0aGlzLnBvcG92ZXJNYXhXaWR0aEJ5Qm9vdHN0cmFwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjYWxjdWxhdGVUb29sdGlwUG9zaXRpb24ocG9wb3ZlcjphbnksIHNvdXJjZTphbnkpIHtcblxuICAgICAgICAgICAgbGV0IG9mZnNldEJvdHRvbSA9ICQod2luZG93KS5oZWlnaHQoKSAtICQoc291cmNlKS5vZmZzZXQoKS50b3AgLSAkKHNvdXJjZSkub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgICAgIGxldCBvZmZzZXRSaWdodCA9ICQod2luZG93KS53aWR0aCgpIC0gJChzb3VyY2UpLm9mZnNldCgpLmxlZnQgLSAkKHNvdXJjZSkub3V0ZXJXaWR0aCgpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQnV0dGVyRmFjZXMuVG9vbHRpcC5jYWxjdWxhdGVUb29sdGlwUG9zaXRpb24gLSBvZmZzZXRCb3R0b20gaXMgJyArIG9mZnNldEJvdHRvbSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQnV0dGVyRmFjZXMuVG9vbHRpcC5jYWxjdWxhdGVUb29sdGlwUG9zaXRpb24gLSBvZmZzZXRSaWdodCBpcyAnICsgb2Zmc2V0UmlnaHQpO1xuXG4gICAgICAgICAgICBpZiAob2Zmc2V0Qm90dG9tIDwgdGhpcy5wb3BvdmVyTWF4SGVpZ2h0QnlCdXR0ZXJGYWNlcykge1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXRSaWdodCA8IHRoaXMucG9wb3Zlck1heFdpZHRoQnlCb290c3RyYXApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0J1dHRlckZhY2VzLlRvb2x0aXAuY2FsY3VsYXRlVG9vbHRpcFBvc2l0aW9uIC0gb2Zmc2V0IHJpZ2h0ICgnICsgb2Zmc2V0UmlnaHQgKyAnKSBpcyBzbWFsbGVyIHRoYW4gcG9wb3Zlck1heFdpZHRoQnlCb290c3RyYXAgKCcgKyB0aGlzLnBvcG92ZXJNYXhXaWR0aEJ5Qm9vdHN0cmFwICsgJykgLT4gcG9zaXRpb24gaXMgdG9wIG9yIGxlZnQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQoc291cmNlKS5vZmZzZXQoKS5sZWZ0IDwgdGhpcy5wb3BvdmVyTWF4V2lkdGhCeUJvb3RzdHJhcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0J1dHRlckZhY2VzLlRvb2x0aXAuY2FsY3VsYXRlVG9vbHRpcFBvc2l0aW9uIC0gbGVmdCBvZmZzZXQgaXMgc21hbGxlciB0aGFuIHBvcG92ZXJNYXhXaWR0aEJ5Qm9vdHN0cmFwICgnICsgdGhpcy5wb3BvdmVyTWF4V2lkdGhCeUJvb3RzdHJhcCArICcpIC0+IHBvc2l0aW9uIGlzIHRvcCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdCdXR0ZXJGYWNlcy5Ub29sdGlwLmNhbGN1bGF0ZVRvb2x0aXBQb3NpdGlvbiAtIGxlZnQgb2Zmc2V0IGlzIE5PVCBzbWFsbGVyIHRoYW4gcG9wb3Zlck1heFdpZHRoQnlCb290c3RyYXAgKCcgKyB0aGlzLnBvcG92ZXJNYXhXaWR0aEJ5Qm9vdHN0cmFwICsgJykgLT4gcG9zaXRpb24gaXMgbGVmdCcpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQnV0dGVyRmFjZXMuVG9vbHRpcC5jYWxjdWxhdGVUb29sdGlwUG9zaXRpb24gLSBvZmZzZXRSaWdodCAoJyArIG9mZnNldFJpZ2h0ICsgJykgaXMgZ3JlYXRlciB0aGFuIHBvcG92ZXJNYXhXaWR0aEJ5Qm9vdHN0cmFwICgnICsgdGhpcy5wb3BvdmVyTWF4V2lkdGhCeUJvb3RzdHJhcCArICcpIC0+IHBvc2l0aW9uIGlzIHJpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQnV0dGVyRmFjZXMuVG9vbHRpcC5jYWxjdWxhdGVUb29sdGlwUG9zaXRpb24gLSBvZmZzZXRCb3R0b20gKCcgKyBvZmZzZXRCb3R0b20gKyAnKSBpcyBncmVhdGVyIHRoYW4gcG9wb3Zlck1heEhlaWdodEJ5QnV0dGVyRmFjZXMgKCcgKyB0aGlzLnBvcG92ZXJNYXhIZWlnaHRCeUJ1dHRlckZhY2VzICsgJykgLT4gcG9zaXRpb24gaXMgYm90dG9tJyk7XG4gICAgICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgICAgIH07XG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
