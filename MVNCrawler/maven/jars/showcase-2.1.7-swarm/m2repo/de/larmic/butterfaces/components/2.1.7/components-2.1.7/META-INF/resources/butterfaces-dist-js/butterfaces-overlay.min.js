var ButterFaces;!function(e){var a=function(){function a(e,a,t){void 0===e&&(e=500),void 0===a&&(a=!0),void 0===t&&(t="body"),this.isHiding=!0,this.delay=e,this.isTransparentBlockingOverlayActive=a,this.selector=t,console.log("ButterFaces.Overlay.constructor - creating overlay with delay is "+this.delay+", isTransparentBlockingOverlayActive is "+this.isTransparentBlockingOverlayActive+", selector is "+this.selector)}return a.prototype.show=function(){var a=this,t=$(this.selector);e.Overlay.fadeOutDetachtedOverlays(),t.each(function(t,r){var o=$(r);if(a.isHiding=!1,void 0!==o.attr("data-overlay-uuid")){if(e.Overlay.findOverlay(o.attr("data-overlay-uuid")).length>0)return void console.log("ButterFaces.Overlay.show - overlay already existing. Skip showing overlay");o.removeAttr("data-overlay-uuid")}console.log("ButterFaces.Overlay.show - appending not displayed overlay to body");var i=e.Guid.newGuid(),n=$('<div class="butter-component-overlay" data-overlay-uuid="'+i+'"><div class="butter-component-spinner"><div></div><div></div><div></div><div></div></div></div>');o.attr("data-overlay-uuid",i),"body"===a.selector?n.addClass("overlay-body"):n.offset(o.offset()).width(o.outerWidth()).height(o.outerHeight()).addClass("overlay-body-child").css({position:"absolute"}),$("body").append(n),a.isTransparentBlockingOverlayActive&&(console.log("ButterFaces.Overlay.show - isTransparentBlockingOverlayActive is true, showing transparent overlay direcly"),n.show()),window.setTimeout(function(){a.isHiding||a.isTransparentBlockingOverlayActive||(console.log("ButterFaces.Overlay.show - deferred: isTransparentBlockingOverlayActive is false, showing transparent overlay after delay"),n.show()),a.isHiding||(console.log("ButterFaces.Overlay.show - deferred: starting animation to make overlay intransparent"),n.stop(!0).animate({opacity:1},300,function(){console.log("ButterFaces.Overlay.show - deferred: animation ended to make overlay intransparent")}))},a.delay)})},a.prototype.hide=function(){console.log("ButterFaces.Overlay.hide - starting animation to make overlay transparent");var a=$(this.selector);this.isHiding=!0,e.Overlay.fadeOutDetachtedOverlays(),a.each(function(a,t){var r=$(t),o=r.attr("data-overlay-uuid");if(void 0!==o&&e.Overlay.findOverlay(o).length>0){var i=e.Overlay.findOverlay(r.attr("data-overlay-uuid"));e.Overlay.fadeOutOverlay(i)}})},a.hideAll=function(){console.log("ButterFaces.Overlay.hideAll - starting animation to make all overlays transparent"),e.Overlay.fadeOutDetachtedOverlays(),e.Overlay.fadeOutAttachtedOverlays()},a.fadeOutDetachtedOverlays=function(){$(".butter-component-overlay").each(function(a,t){var r=$(t),o=$(t).attr("data-overlay-uuid");1==$("[data-overlay-uuid="+o+"]").length&&e.Overlay.fadeOutOverlay(r)})},a.fadeOutAttachtedOverlays=function(){$(".butter-component-overlay").each(function(a,t){var r=$(t),o=$(t).attr("data-overlay-uuid"),i=$("[data-overlay-uuid="+o+"]");i.length>1&&(e.Overlay.fadeOutOverlay(r),i.each(function(e,a){var t=$(a);t.removeAttr("data-overlay-uuid")}))})},a.fadeOutOverlay=function(e){e.stop(!0).animate({opacity:0},300,function(){e.remove(),console.log("ButterFaces.Overlay.hide - animation ended to make overlay transparent, OVERLAY REMOVED")})},a.findOverlay=function(e){return $("body .butter-component-overlay[data-overlay-uuid='"+e+"']")},a}();e.Overlay=a}(ButterFaces||(ButterFaces={}));
//# sourceMappingURL=data:application/json;base64,
