///<reference path="definitions/external/tsd.d.ts"/>
///<reference path="butterfaces-overlay.ts"/>
var ButterFaces;
(function (ButterFaces) {
    var Ajax = (function () {
        function Ajax() {
        }
        Ajax.sendRequest = function (clientId, event, renderIds, /*optional string */ params, disableRenderIds) {
            jsf.ajax.request(clientId, event, {
                "javax.faces.behavior.event": event,
                render: renderIds.join(", "),
                params: params,
                onevent: (function (data) {
                    //console.log(data);
                    if (disableRenderIds) {
                        ButterFaces.Ajax.disableElementsOnRequest(data, renderIds);
                    }
                })
            });
        };
        ;
        Ajax.disableElementsOnRequest = function (data, ids) {
            var status = data.status;
            // console.log(data);
            // console.log(ids);
            switch (status) {
                case "begin":
                    // console.log('ajax request begin');
                    for (var i = 0; i < ids.length; i++) {
                        var $elementToDisable = $(document.getElementById(ids[i]));
                        if ($elementToDisable.length !== 0) {
                            //console.log('disable ' + ids[i]);
                            new ButterFaces.Overlay(0, false, document.getElementById(ids[i])).show();
                        }
                    }
                    break;
                case "complete":
                    // console.log('ajax request complete');
                    break;
                case "success":
                    // console.log('ajax request success');
                    for (i = 0; i < ids.length; i++) {
                        var $elementToEmable = $(document.getElementById(ids[i]));
                        if ($elementToEmable.length !== 0) {
                            //console.log('enable ' + ids[i]);
                            new ButterFaces.Overlay(0, false, document.getElementById(ids[i])).hide();
                        }
                    }
                    break;
            }
        };
        ;
        return Ajax;
    })();
    ButterFaces.Ajax = Ajax;
})(ButterFaces || (ButterFaces = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dHRlcmZhY2VzLWFqYXgudHMiXSwibmFtZXMiOlsiQnV0dGVyRmFjZXMiLCJCdXR0ZXJGYWNlcy5BamF4IiwiQnV0dGVyRmFjZXMuQWpheC5jb25zdHJ1Y3RvciIsIkJ1dHRlckZhY2VzLkFqYXguc2VuZFJlcXVlc3QiLCJCdXR0ZXJGYWNlcy5BamF4LmRpc2FibGVFbGVtZW50c09uUmVxdWVzdCJdLCJtYXBwaW5ncyI6IkFBQUEsb0RBQW9EO0FBQ3BELDZDQUE2QztBQUU3QyxJQUFPLFdBQVcsQ0EyRGpCO0FBM0RELFdBQU8sV0FBVyxFQUFDLENBQUM7SUFDaEJBO1FBQUFDO1FBeURBQyxDQUFDQTtRQXhEVUQsZ0JBQVdBLEdBQWxCQSxVQUFtQkEsUUFBZUEsRUFBRUEsS0FBWUEsRUFBRUEsU0FBa0JBLEVBQUVBLG9CQUFvQkEsQ0FBQ0EsTUFBYUEsRUFBRUEsZ0JBQXdCQTtZQUM5SEUsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsRUFBRUEsS0FBS0EsRUFBRUE7Z0JBQzlCQSw0QkFBNEJBLEVBQUVBLEtBQUtBO2dCQUNuQ0EsTUFBTUEsRUFBRUEsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7Z0JBQzVCQSxNQUFNQSxFQUFFQSxNQUFNQTtnQkFDZEEsT0FBT0EsRUFBRUEsQ0FBQ0EsVUFBVUEsSUFBSUE7b0JBQ3BCLG9CQUFvQjtvQkFDcEIsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO3dCQUNuQixXQUFXLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztvQkFDL0QsQ0FBQztnQkFDTCxDQUFDLENBQUNBO2FBQ0xBLENBQUNBLENBQUNBO1FBQ1BBLENBQUNBOztRQUVNRiw2QkFBd0JBLEdBQS9CQSxVQUFnQ0EsSUFBUUEsRUFBRUEsR0FBWUE7WUFDbERHLElBQUlBLE1BQU1BLEdBQVVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBRWhDQSxxQkFBcUJBO1lBQ3JCQSxvQkFBb0JBO1lBRXBCQSxNQUFNQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDYkEsS0FBS0EsT0FBT0E7b0JBQ1JBLHFDQUFxQ0E7b0JBRXJDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTt3QkFDbENBLElBQUlBLGlCQUFpQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBRTNEQSxFQUFFQSxDQUFDQSxDQUFDQSxpQkFBaUJBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBOzRCQUNqQ0EsbUNBQW1DQTs0QkFDbkNBLElBQUlBLFdBQVdBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO3dCQUU5RUEsQ0FBQ0E7b0JBQ0xBLENBQUNBO29CQUVEQSxLQUFLQSxDQUFDQTtnQkFFVkEsS0FBS0EsVUFBVUE7b0JBQ1hBLHdDQUF3Q0E7b0JBQ3hDQSxLQUFLQSxDQUFDQTtnQkFFVkEsS0FBS0EsU0FBU0E7b0JBQ0VBLHVDQUF1Q0E7b0JBRW5EQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTt3QkFDOUJBLElBQUlBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBRTFEQSxFQUFFQSxDQUFDQSxDQUFDQSxnQkFBZ0JBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBOzRCQUNoQ0Esa0NBQWtDQTs0QkFDbENBLElBQUlBLFdBQVdBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO3dCQUU5RUEsQ0FBQ0E7b0JBQ0xBLENBQUNBO29CQUVEQSxLQUFLQSxDQUFDQTtZQUNkQSxDQUFDQTtRQUNMQSxDQUFDQTs7UUFDTEgsV0FBQ0E7SUFBREEsQ0F6REFELEFBeURDQyxJQUFBRDtJQXpEWUEsZ0JBQUlBLE9BeURoQkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUEzRE0sV0FBVyxLQUFYLFdBQVcsUUEyRGpCIiwiZmlsZSI6ImJ1dHRlcmZhY2VzLWFqYXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy88cmVmZXJlbmNlIHBhdGg9XCJkZWZpbml0aW9ucy9leHRlcm5hbC90c2QuZC50c1wiLz5cbi8vLzxyZWZlcmVuY2UgcGF0aD1cImJ1dHRlcmZhY2VzLW92ZXJsYXkudHNcIi8+XG5cbm1vZHVsZSBCdXR0ZXJGYWNlcyB7XG4gICAgZXhwb3J0IGNsYXNzIEFqYXgge1xuICAgICAgICBzdGF0aWMgc2VuZFJlcXVlc3QoY2xpZW50SWQ6c3RyaW5nLCBldmVudDpzdHJpbmcsIHJlbmRlcklkczpzdHJpbmdbXSwgLypvcHRpb25hbCBzdHJpbmcgKi8gcGFyYW1zOnN0cmluZywgZGlzYWJsZVJlbmRlcklkczpib29sZWFuKSB7XG4gICAgICAgICAgICBqc2YuYWpheC5yZXF1ZXN0KGNsaWVudElkLCBldmVudCwge1xuICAgICAgICAgICAgICAgIFwiamF2YXguZmFjZXMuYmVoYXZpb3IuZXZlbnRcIjogZXZlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiByZW5kZXJJZHMuam9pbihcIiwgXCIpLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgICAgIG9uZXZlbnQ6IChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzYWJsZVJlbmRlcklkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgQnV0dGVyRmFjZXMuQWpheC5kaXNhYmxlRWxlbWVudHNPblJlcXVlc3QoZGF0YSwgcmVuZGVySWRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBzdGF0aWMgZGlzYWJsZUVsZW1lbnRzT25SZXF1ZXN0KGRhdGE6YW55LCBpZHM6c3RyaW5nW10pIHtcbiAgICAgICAgICAgIHZhciBzdGF0dXM6c3RyaW5nID0gZGF0YS5zdGF0dXM7XG5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaWRzKTtcblxuICAgICAgICAgICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYmVnaW5cIjogLy8gQmVmb3JlIHRoZSBhamF4IHJlcXVlc3QgaXMgc2VudC5cbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FqYXggcmVxdWVzdCBiZWdpbicpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGVsZW1lbnRUb0Rpc2FibGUgPSAkKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkc1tpXSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGVsZW1lbnRUb0Rpc2FibGUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZGlzYWJsZSAnICsgaWRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQnV0dGVyRmFjZXMuT3ZlcmxheSgwLCBmYWxzZSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRzW2ldKSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2Rpc2FibGVlICcgKyBpZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwiY29tcGxldGVcIjogLy8gQWZ0ZXIgdGhlIGFqYXggcmVzcG9uc2UgaXMgYXJyaXZlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FqYXggcmVxdWVzdCBjb21wbGV0ZScpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdWNjZXNzXCI6IC8vIEFmdGVyIHVwZGF0ZSBvZiBIVE1MIERPTSBiYXNlZCBvbiBhamF4IHJlc3BvbnNlLi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FqYXggcmVxdWVzdCBzdWNjZXNzJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlbGVtZW50VG9FbWFibGUgPSAkKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkc1tpXSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGVsZW1lbnRUb0VtYWJsZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdlbmFibGUgJyArIGlkc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJ1dHRlckZhY2VzLk92ZXJsYXkoMCwgZmFsc2UsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkc1tpXSkpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdlbmFibGVkICcgKyBpZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
