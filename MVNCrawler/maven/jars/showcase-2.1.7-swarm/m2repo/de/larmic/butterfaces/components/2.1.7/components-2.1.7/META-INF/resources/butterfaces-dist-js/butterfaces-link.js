var ButterFaces;
(function (ButterFaces) {
    var CommandLink = (function () {
        function CommandLink() {
        }
        /**
         * Submit given form.
         * @param formId the target form id to submit
         * @param params a list of params to be added to form as hidden input fields
         * @param target the target of the form submission
         */
        CommandLink.submitForm = function (formId, params, target) {
            var form = document.getElementById(formId);
            ButterFaces.CommandLink.addParametersAsHiddenFieldsToForm(form, params);
            var oldFormTarget = ButterFaces.CommandLink.setFormTarget(form, target);
            if (form.onsubmit) {
                var result = form.onsubmit();
                if ((typeof result == 'undefined') || result) {
                    form.submit();
                }
            }
            else {
                form.submit();
            }
            form.target = oldFormTarget;
            ButterFaces.CommandLink.removeHiddenFieldsFromForm(form);
        };
        CommandLink.addParametersAsHiddenFieldsToForm = function (form, params) {
            var bfHiddenInputFields = new Array();
            form.bfHiddenInputFields = bfHiddenInputFields;
            var i = 0;
            for (var k in params) {
                if (params.hasOwnProperty(k)) {
                    var p = document.createElement("input");
                    p.type = "hidden";
                    p.name = k;
                    p.value = params[k];
                    form.appendChild(p);
                    bfHiddenInputFields[i++] = p;
                }
            }
        };
        CommandLink.removeHiddenFieldsFromForm = function (form) {
            var bfHiddenInputFields = form.bfHiddenInputFields;
            if (bfHiddenInputFields !== null) {
                for (var i = 0; i < bfHiddenInputFields.length; i++) {
                    form.removeChild(bfHiddenInputFields[i]);
                }
            }
        };
        /**
         * Updates form target (if exists) and returns previous form target
         * @param form the torm to add the new target to
         * @param target the target to add (if not null)
         * @return the previous form target
         */
        CommandLink.setFormTarget = function (form, target) {
            var previousTarget = form.target;
            if (target) {
                form.target = target;
            }
            return previousTarget;
        };
        return CommandLink;
    })();
    ButterFaces.CommandLink = CommandLink;
})(ButterFaces || (ButterFaces = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dHRlcmZhY2VzLWxpbmsudHMiXSwibmFtZXMiOlsiQnV0dGVyRmFjZXMiLCJCdXR0ZXJGYWNlcy5Db21tYW5kTGluayIsIkJ1dHRlckZhY2VzLkNvbW1hbmRMaW5rLmNvbnN0cnVjdG9yIiwiQnV0dGVyRmFjZXMuQ29tbWFuZExpbmsuc3VibWl0Rm9ybSIsIkJ1dHRlckZhY2VzLkNvbW1hbmRMaW5rLmFkZFBhcmFtZXRlcnNBc0hpZGRlbkZpZWxkc1RvRm9ybSIsIkJ1dHRlckZhY2VzLkNvbW1hbmRMaW5rLnJlbW92ZUhpZGRlbkZpZWxkc0Zyb21Gb3JtIiwiQnV0dGVyRmFjZXMuQ29tbWFuZExpbmsuc2V0Rm9ybVRhcmdldCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxXQUFXLENBdUVqQjtBQXZFRCxXQUFPLFdBQVcsRUFBQyxDQUFDO0lBQ2hCQTtRQUFBQztRQXFFQUMsQ0FBQ0E7UUFuRUdEOzs7OztXQUtHQTtRQUNJQSxzQkFBVUEsR0FBakJBLFVBQWtCQSxNQUFhQSxFQUFFQSxNQUFVQSxFQUFFQSxNQUFhQTtZQUN0REUsSUFBSUEsSUFBSUEsR0FBT0EsUUFBUUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFFL0NBLFdBQVdBLENBQUNBLFdBQVdBLENBQUNBLGlDQUFpQ0EsQ0FBQ0EsSUFBSUEsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDeEVBLElBQUlBLGFBQWFBLEdBQUdBLFdBQVdBLENBQUNBLFdBQVdBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1lBRXhFQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDaEJBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO2dCQUM3QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsTUFBTUEsSUFBSUEsV0FBV0EsQ0FBQ0EsSUFBSUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzNDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtnQkFDbEJBLENBQUNBO1lBQ0xBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNKQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUNsQkEsQ0FBQ0E7WUFFREEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsYUFBYUEsQ0FBQ0E7WUFDNUJBLFdBQVdBLENBQUNBLFdBQVdBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDN0RBLENBQUNBO1FBRWNGLDZDQUFpQ0EsR0FBaERBLFVBQWlEQSxJQUFRQSxFQUFFQSxNQUFVQTtZQUNqRUcsSUFBSUEsbUJBQW1CQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFFQSxDQUFDQTtZQUN0Q0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxHQUFHQSxtQkFBbUJBLENBQUNBO1lBRS9DQSxJQUFJQSxDQUFDQSxHQUFVQSxDQUFDQSxDQUFDQTtZQUVqQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ25CQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDM0JBLElBQUlBLENBQUNBLEdBQUdBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO29CQUN4Q0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsUUFBUUEsQ0FBQ0E7b0JBQ2xCQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDWEEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3BCQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDcEJBLG1CQUFtQkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pDQSxDQUFDQTtZQUNMQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUVjSCxzQ0FBMEJBLEdBQXpDQSxVQUEwQ0EsSUFBUUE7WUFDOUNJLElBQUlBLG1CQUFtQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQTtZQUNuREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsbUJBQW1CQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDL0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLG1CQUFtQkEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7b0JBQ2xEQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxtQkFBbUJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUM3Q0EsQ0FBQ0E7WUFDTEEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFFREo7Ozs7O1dBS0dBO1FBQ1lBLHlCQUFhQSxHQUE1QkEsVUFBNkJBLElBQVFBLEVBQUVBLE1BQWFBO1lBQ2hESyxJQUFJQSxjQUFjQSxHQUFVQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUV4Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1RBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBO1lBQ3pCQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUMxQkEsQ0FBQ0E7UUFDTEwsa0JBQUNBO0lBQURBLENBckVBRCxBQXFFQ0MsSUFBQUQ7SUFyRVlBLHVCQUFXQSxjQXFFdkJBLENBQUFBO0FBQ0xBLENBQUNBLEVBdkVNLFdBQVcsS0FBWCxXQUFXLFFBdUVqQiIsImZpbGUiOiJidXR0ZXJmYWNlcy1saW5rLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIEJ1dHRlckZhY2VzIHtcbiAgICBleHBvcnQgY2xhc3MgQ29tbWFuZExpbmsge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdWJtaXQgZ2l2ZW4gZm9ybS5cbiAgICAgICAgICogQHBhcmFtIGZvcm1JZCB0aGUgdGFyZ2V0IGZvcm0gaWQgdG8gc3VibWl0XG4gICAgICAgICAqIEBwYXJhbSBwYXJhbXMgYSBsaXN0IG9mIHBhcmFtcyB0byBiZSBhZGRlZCB0byBmb3JtIGFzIGhpZGRlbiBpbnB1dCBmaWVsZHNcbiAgICAgICAgICogQHBhcmFtIHRhcmdldCB0aGUgdGFyZ2V0IG9mIHRoZSBmb3JtIHN1Ym1pc3Npb25cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBzdWJtaXRGb3JtKGZvcm1JZDpzdHJpbmcsIHBhcmFtczphbnksIHRhcmdldDpzdHJpbmcpIHtcbiAgICAgICAgICAgIGxldCBmb3JtOmFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZvcm1JZCk7XG5cbiAgICAgICAgICAgIEJ1dHRlckZhY2VzLkNvbW1hbmRMaW5rLmFkZFBhcmFtZXRlcnNBc0hpZGRlbkZpZWxkc1RvRm9ybShmb3JtLCBwYXJhbXMpO1xuICAgICAgICAgICAgbGV0IG9sZEZvcm1UYXJnZXQgPSBCdXR0ZXJGYWNlcy5Db21tYW5kTGluay5zZXRGb3JtVGFyZ2V0KGZvcm0sIHRhcmdldCk7XG5cbiAgICAgICAgICAgIGlmIChmb3JtLm9uc3VibWl0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZvcm0ub25zdWJtaXQoKTtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiByZXN1bHQgPT0gJ3VuZGVmaW5lZCcpIHx8IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9ybS5zdWJtaXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybS50YXJnZXQgPSBvbGRGb3JtVGFyZ2V0O1xuICAgICAgICAgICAgQnV0dGVyRmFjZXMuQ29tbWFuZExpbmsucmVtb3ZlSGlkZGVuRmllbGRzRnJvbUZvcm0oZm9ybSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIHN0YXRpYyBhZGRQYXJhbWV0ZXJzQXNIaWRkZW5GaWVsZHNUb0Zvcm0oZm9ybTphbnksIHBhcmFtczphbnkpIHtcbiAgICAgICAgICAgIGxldCBiZkhpZGRlbklucHV0RmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICBmb3JtLmJmSGlkZGVuSW5wdXRGaWVsZHMgPSBiZkhpZGRlbklucHV0RmllbGRzO1xuXG4gICAgICAgICAgICB2YXIgaTpudW1iZXIgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgIHAudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICAgICAgICAgIHAubmFtZSA9IGs7XG4gICAgICAgICAgICAgICAgICAgIHAudmFsdWUgPSBwYXJhbXNba107XG4gICAgICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQocCk7XG4gICAgICAgICAgICAgICAgICAgIGJmSGlkZGVuSW5wdXRGaWVsZHNbaSsrXSA9IHA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgcmVtb3ZlSGlkZGVuRmllbGRzRnJvbUZvcm0oZm9ybTphbnkpIHtcbiAgICAgICAgICAgIHZhciBiZkhpZGRlbklucHV0RmllbGRzID0gZm9ybS5iZkhpZGRlbklucHV0RmllbGRzO1xuICAgICAgICAgICAgaWYgKGJmSGlkZGVuSW5wdXRGaWVsZHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJmSGlkZGVuSW5wdXRGaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5yZW1vdmVDaGlsZChiZkhpZGRlbklucHV0RmllbGRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyBmb3JtIHRhcmdldCAoaWYgZXhpc3RzKSBhbmQgcmV0dXJucyBwcmV2aW91cyBmb3JtIHRhcmdldFxuICAgICAgICAgKiBAcGFyYW0gZm9ybSB0aGUgdG9ybSB0byBhZGQgdGhlIG5ldyB0YXJnZXQgdG9cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCB0aGUgdGFyZ2V0IHRvIGFkZCAoaWYgbm90IG51bGwpXG4gICAgICAgICAqIEByZXR1cm4gdGhlIHByZXZpb3VzIGZvcm0gdGFyZ2V0XG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBzZXRGb3JtVGFyZ2V0KGZvcm06YW55LCB0YXJnZXQ6c3RyaW5nKTpzdHJpbmcge1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzVGFyZ2V0OnN0cmluZyA9IGZvcm0udGFyZ2V0O1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgZm9ybS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1RhcmdldDtcbiAgICAgICAgfVxuICAgIH1cbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
