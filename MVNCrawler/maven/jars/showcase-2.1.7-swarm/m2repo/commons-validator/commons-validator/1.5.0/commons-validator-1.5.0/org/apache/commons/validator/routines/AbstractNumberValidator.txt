Compiled from "AbstractNumberValidator.java"
public abstract class org.apache.commons.validator.routines.AbstractNumberValidator extends org.apache.commons.validator.routines.AbstractFormatValidator {
  private static final long serialVersionUID;

  public static final int STANDARD_FORMAT;

  public static final int CURRENCY_FORMAT;

  public static final int PERCENT_FORMAT;

  private final boolean allowFractions;

  private final int formatType;

  public org.apache.commons.validator.routines.AbstractNumberValidator(boolean, int, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method org/apache/commons/validator/routines/AbstractFormatValidator."<init>":(Z)V
       5: aload_0
       6: iload_3
       7: putfield      #2                  // Field allowFractions:Z
      10: aload_0
      11: iload_2
      12: putfield      #3                  // Field formatType:I
      15: return

  public boolean isAllowFractions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field allowFractions:Z
       4: ireturn

  public int getFormatType();
    Code:
       0: aload_0
       1: getfield      #3                  // Field formatType:I
       4: ireturn

  public boolean isValid(java.lang.String, java.lang.String, java.util.Locale);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #4                  // Method parse:(Ljava/lang/String;Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/Object;
       7: astore        4
       9: aload         4
      11: ifnonnull     18
      14: iconst_0
      15: goto          19
      18: iconst_1
      19: ireturn

  public boolean isInRange(java.lang.Number, java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #5                  // Method minValue:(Ljava/lang/Number;Ljava/lang/Number;)Z
       6: ifeq          22
       9: aload_0
      10: aload_1
      11: aload_3
      12: invokevirtual #6                  // Method maxValue:(Ljava/lang/Number;Ljava/lang/Number;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public boolean minValue(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method isAllowFractions:()Z
       4: ifeq          25
       7: aload_1
       8: invokevirtual #8                  // Method java/lang/Number.doubleValue:()D
      11: aload_2
      12: invokevirtual #8                  // Method java/lang/Number.doubleValue:()D
      15: dcmpl
      16: iflt          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn
      25: aload_1
      26: invokevirtual #9                  // Method java/lang/Number.longValue:()J
      29: aload_2
      30: invokevirtual #9                  // Method java/lang/Number.longValue:()J
      33: lcmp
      34: iflt          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: ireturn

  public boolean maxValue(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method isAllowFractions:()Z
       4: ifeq          25
       7: aload_1
       8: invokevirtual #8                  // Method java/lang/Number.doubleValue:()D
      11: aload_2
      12: invokevirtual #8                  // Method java/lang/Number.doubleValue:()D
      15: dcmpg
      16: ifgt          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn
      25: aload_1
      26: invokevirtual #9                  // Method java/lang/Number.longValue:()J
      29: aload_2
      30: invokevirtual #9                  // Method java/lang/Number.longValue:()J
      33: lcmp
      34: ifgt          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: ireturn

  protected java.lang.Object parse(java.lang.String, java.lang.String, java.util.Locale);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: aconst_null
       5: goto          12
       8: aload_1
       9: invokevirtual #10                 // Method java/lang/String.trim:()Ljava/lang/String;
      12: astore_1
      13: aload_1
      14: ifnull        24
      17: aload_1
      18: invokevirtual #11                 // Method java/lang/String.length:()I
      21: ifne          26
      24: aconst_null
      25: areturn
      26: aload_0
      27: aload_2
      28: aload_3
      29: invokevirtual #12                 // Method getFormat:(Ljava/lang/String;Ljava/util/Locale;)Ljava/text/Format;
      32: astore        4
      34: aload_0
      35: aload_1
      36: aload         4
      38: invokevirtual #13                 // Method parse:(Ljava/lang/String;Ljava/text/Format;)Ljava/lang/Object;
      41: areturn

  protected abstract java.lang.Object processParsedValue(java.lang.Object, java.text.Format);

  protected java.text.Format getFormat(java.lang.String, java.util.Locale);
    Code:
       0: aconst_null
       1: astore_3
       2: aload_1
       3: ifnull        17
       6: aload_1
       7: invokevirtual #11                 // Method java/lang/String.length:()I
      10: ifle          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: istore        4
      20: iload         4
      22: ifne          37
      25: aload_0
      26: aload_2
      27: invokevirtual #14                 // Method getFormat:(Ljava/util/Locale;)Ljava/text/Format;
      30: checkcast     #15                 // class java/text/NumberFormat
      33: astore_3
      34: goto          74
      37: aload_2
      38: ifnonnull     53
      41: new           #16                 // class java/text/DecimalFormat
      44: dup
      45: aload_1
      46: invokespecial #17                 // Method java/text/DecimalFormat."<init>":(Ljava/lang/String;)V
      49: astore_3
      50: goto          74
      53: new           #18                 // class java/text/DecimalFormatSymbols
      56: dup
      57: aload_2
      58: invokespecial #19                 // Method java/text/DecimalFormatSymbols."<init>":(Ljava/util/Locale;)V
      61: astore        5
      63: new           #16                 // class java/text/DecimalFormat
      66: dup
      67: aload_1
      68: aload         5
      70: invokespecial #20                 // Method java/text/DecimalFormat."<init>":(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;)V
      73: astore_3
      74: aload_0
      75: aload_3
      76: invokevirtual #21                 // Method determineScale:(Ljava/text/NumberFormat;)I
      79: ifne          87
      82: aload_3
      83: iconst_1
      84: invokevirtual #22                 // Method java/text/NumberFormat.setParseIntegerOnly:(Z)V
      87: aload_3
      88: areturn

  protected int determineScale(java.text.NumberFormat);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isStrict:()Z
       4: ifne          9
       7: iconst_m1
       8: ireturn
       9: aload_0
      10: invokevirtual #7                  // Method isAllowFractions:()Z
      13: ifeq          23
      16: aload_1
      17: invokevirtual #24                 // Method java/text/NumberFormat.isParseIntegerOnly:()Z
      20: ifeq          25
      23: iconst_0
      24: ireturn
      25: aload_1
      26: invokevirtual #25                 // Method java/text/NumberFormat.getMinimumFractionDigits:()I
      29: istore_2
      30: aload_1
      31: invokevirtual #26                 // Method java/text/NumberFormat.getMaximumFractionDigits:()I
      34: istore_3
      35: iload_2
      36: iload_3
      37: if_icmpeq     42
      40: iconst_m1
      41: ireturn
      42: iload_2
      43: istore        4
      45: aload_1
      46: instanceof    #16                 // class java/text/DecimalFormat
      49: ifeq          88
      52: aload_1
      53: checkcast     #16                 // class java/text/DecimalFormat
      56: invokevirtual #27                 // Method java/text/DecimalFormat.getMultiplier:()I
      59: istore        5
      61: iload         5
      63: bipush        100
      65: if_icmpne     74
      68: iinc          4, 2
      71: goto          85
      74: iload         5
      76: sipush        1000
      79: if_icmpne     85
      82: iinc          4, 3
      85: goto          99
      88: aload_0
      89: getfield      #3                  // Field formatType:I
      92: iconst_2
      93: if_icmpne     99
      96: iinc          4, 2
      99: iload         4
     101: ireturn

  protected java.text.Format getFormat(java.util.Locale);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: getfield      #3                  // Field formatType:I
       6: lookupswitch  { // 2
                     1: 32
                     2: 51
               default: 70
          }
      32: aload_1
      33: ifnonnull     43
      36: invokestatic  #28                 // Method java/text/NumberFormat.getCurrencyInstance:()Ljava/text/NumberFormat;
      39: astore_2
      40: goto          86
      43: aload_1
      44: invokestatic  #29                 // Method java/text/NumberFormat.getCurrencyInstance:(Ljava/util/Locale;)Ljava/text/NumberFormat;
      47: astore_2
      48: goto          86
      51: aload_1
      52: ifnonnull     62
      55: invokestatic  #30                 // Method java/text/NumberFormat.getPercentInstance:()Ljava/text/NumberFormat;
      58: astore_2
      59: goto          86
      62: aload_1
      63: invokestatic  #31                 // Method java/text/NumberFormat.getPercentInstance:(Ljava/util/Locale;)Ljava/text/NumberFormat;
      66: astore_2
      67: goto          86
      70: aload_1
      71: ifnonnull     81
      74: invokestatic  #32                 // Method java/text/NumberFormat.getInstance:()Ljava/text/NumberFormat;
      77: astore_2
      78: goto          86
      81: aload_1
      82: invokestatic  #33                 // Method java/text/NumberFormat.getInstance:(Ljava/util/Locale;)Ljava/text/NumberFormat;
      85: astore_2
      86: aload_2
      87: areturn
}
