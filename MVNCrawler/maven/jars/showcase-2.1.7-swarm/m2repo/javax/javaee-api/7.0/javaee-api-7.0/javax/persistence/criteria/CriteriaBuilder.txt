Compiled from "CriteriaBuilder.java"
public interface javax.persistence.criteria.CriteriaBuilder {
  public abstract javax.persistence.criteria.CriteriaQuery<java.lang.Object> createQuery();

  public abstract <T> javax.persistence.criteria.CriteriaQuery<T> createQuery(java.lang.Class<T>);

  public abstract javax.persistence.criteria.CriteriaQuery<javax.persistence.Tuple> createTupleQuery();

  public abstract <T> javax.persistence.criteria.CriteriaUpdate<T> createCriteriaUpdate(java.lang.Class<T>);

  public abstract <T> javax.persistence.criteria.CriteriaDelete<T> createCriteriaDelete(java.lang.Class<T>);

  public abstract <Y> javax.persistence.criteria.CompoundSelection<Y> construct(java.lang.Class<Y>, javax.persistence.criteria.Selection<?>...);

  public abstract javax.persistence.criteria.CompoundSelection<javax.persistence.Tuple> tuple(javax.persistence.criteria.Selection<?>...);

  public abstract javax.persistence.criteria.CompoundSelection<java.lang.Object[]> array(javax.persistence.criteria.Selection<?>...);

  public abstract javax.persistence.criteria.Order asc(javax.persistence.criteria.Expression<?>);

  public abstract javax.persistence.criteria.Order desc(javax.persistence.criteria.Expression<?>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<java.lang.Double> avg(javax.persistence.criteria.Expression<N>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> sum(javax.persistence.criteria.Expression<N>);

  public abstract javax.persistence.criteria.Expression<java.lang.Long> sumAsLong(javax.persistence.criteria.Expression<java.lang.Integer>);

  public abstract javax.persistence.criteria.Expression<java.lang.Double> sumAsDouble(javax.persistence.criteria.Expression<java.lang.Float>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> max(javax.persistence.criteria.Expression<N>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> min(javax.persistence.criteria.Expression<N>);

  public abstract <X extends java.lang.Comparable<? super X>> javax.persistence.criteria.Expression<X> greatest(javax.persistence.criteria.Expression<X>);

  public abstract <X extends java.lang.Comparable<? super X>> javax.persistence.criteria.Expression<X> least(javax.persistence.criteria.Expression<X>);

  public abstract javax.persistence.criteria.Expression<java.lang.Long> count(javax.persistence.criteria.Expression<?>);

  public abstract javax.persistence.criteria.Expression<java.lang.Long> countDistinct(javax.persistence.criteria.Expression<?>);

  public abstract javax.persistence.criteria.Predicate exists(javax.persistence.criteria.Subquery<?>);

  public abstract <Y> javax.persistence.criteria.Expression<Y> all(javax.persistence.criteria.Subquery<Y>);

  public abstract <Y> javax.persistence.criteria.Expression<Y> some(javax.persistence.criteria.Subquery<Y>);

  public abstract <Y> javax.persistence.criteria.Expression<Y> any(javax.persistence.criteria.Subquery<Y>);

  public abstract javax.persistence.criteria.Predicate and(javax.persistence.criteria.Expression<java.lang.Boolean>, javax.persistence.criteria.Expression<java.lang.Boolean>);

  public abstract javax.persistence.criteria.Predicate and(javax.persistence.criteria.Predicate...);

  public abstract javax.persistence.criteria.Predicate or(javax.persistence.criteria.Expression<java.lang.Boolean>, javax.persistence.criteria.Expression<java.lang.Boolean>);

  public abstract javax.persistence.criteria.Predicate or(javax.persistence.criteria.Predicate...);

  public abstract javax.persistence.criteria.Predicate not(javax.persistence.criteria.Expression<java.lang.Boolean>);

  public abstract javax.persistence.criteria.Predicate conjunction();

  public abstract javax.persistence.criteria.Predicate disjunction();

  public abstract javax.persistence.criteria.Predicate isTrue(javax.persistence.criteria.Expression<java.lang.Boolean>);

  public abstract javax.persistence.criteria.Predicate isFalse(javax.persistence.criteria.Expression<java.lang.Boolean>);

  public abstract javax.persistence.criteria.Predicate isNull(javax.persistence.criteria.Expression<?>);

  public abstract javax.persistence.criteria.Predicate isNotNull(javax.persistence.criteria.Expression<?>);

  public abstract javax.persistence.criteria.Predicate equal(javax.persistence.criteria.Expression<?>, javax.persistence.criteria.Expression<?>);

  public abstract javax.persistence.criteria.Predicate equal(javax.persistence.criteria.Expression<?>, java.lang.Object);

  public abstract javax.persistence.criteria.Predicate notEqual(javax.persistence.criteria.Expression<?>, javax.persistence.criteria.Expression<?>);

  public abstract javax.persistence.criteria.Predicate notEqual(javax.persistence.criteria.Expression<?>, java.lang.Object);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate greaterThan(javax.persistence.criteria.Expression<? extends Y>, javax.persistence.criteria.Expression<? extends Y>);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate greaterThan(javax.persistence.criteria.Expression<? extends Y>, Y);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate greaterThanOrEqualTo(javax.persistence.criteria.Expression<? extends Y>, javax.persistence.criteria.Expression<? extends Y>);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate greaterThanOrEqualTo(javax.persistence.criteria.Expression<? extends Y>, Y);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate lessThan(javax.persistence.criteria.Expression<? extends Y>, javax.persistence.criteria.Expression<? extends Y>);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate lessThan(javax.persistence.criteria.Expression<? extends Y>, Y);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate lessThanOrEqualTo(javax.persistence.criteria.Expression<? extends Y>, javax.persistence.criteria.Expression<? extends Y>);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate lessThanOrEqualTo(javax.persistence.criteria.Expression<? extends Y>, Y);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate between(javax.persistence.criteria.Expression<? extends Y>, javax.persistence.criteria.Expression<? extends Y>, javax.persistence.criteria.Expression<? extends Y>);

  public abstract <Y extends java.lang.Comparable<? super Y>> javax.persistence.criteria.Predicate between(javax.persistence.criteria.Expression<? extends Y>, Y, Y);

  public abstract javax.persistence.criteria.Predicate gt(javax.persistence.criteria.Expression<? extends java.lang.Number>, javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Predicate gt(javax.persistence.criteria.Expression<? extends java.lang.Number>, java.lang.Number);

  public abstract javax.persistence.criteria.Predicate ge(javax.persistence.criteria.Expression<? extends java.lang.Number>, javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Predicate ge(javax.persistence.criteria.Expression<? extends java.lang.Number>, java.lang.Number);

  public abstract javax.persistence.criteria.Predicate lt(javax.persistence.criteria.Expression<? extends java.lang.Number>, javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Predicate lt(javax.persistence.criteria.Expression<? extends java.lang.Number>, java.lang.Number);

  public abstract javax.persistence.criteria.Predicate le(javax.persistence.criteria.Expression<? extends java.lang.Number>, javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Predicate le(javax.persistence.criteria.Expression<? extends java.lang.Number>, java.lang.Number);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> neg(javax.persistence.criteria.Expression<N>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> abs(javax.persistence.criteria.Expression<N>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> sum(javax.persistence.criteria.Expression<? extends N>, javax.persistence.criteria.Expression<? extends N>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> sum(javax.persistence.criteria.Expression<? extends N>, N);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> sum(N, javax.persistence.criteria.Expression<? extends N>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> prod(javax.persistence.criteria.Expression<? extends N>, javax.persistence.criteria.Expression<? extends N>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> prod(javax.persistence.criteria.Expression<? extends N>, N);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> prod(N, javax.persistence.criteria.Expression<? extends N>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> diff(javax.persistence.criteria.Expression<? extends N>, javax.persistence.criteria.Expression<? extends N>);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> diff(javax.persistence.criteria.Expression<? extends N>, N);

  public abstract <N extends java.lang.Number> javax.persistence.criteria.Expression<N> diff(N, javax.persistence.criteria.Expression<? extends N>);

  public abstract javax.persistence.criteria.Expression<java.lang.Number> quot(javax.persistence.criteria.Expression<? extends java.lang.Number>, javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Expression<java.lang.Number> quot(javax.persistence.criteria.Expression<? extends java.lang.Number>, java.lang.Number);

  public abstract javax.persistence.criteria.Expression<java.lang.Number> quot(java.lang.Number, javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Expression<java.lang.Integer> mod(javax.persistence.criteria.Expression<java.lang.Integer>, javax.persistence.criteria.Expression<java.lang.Integer>);

  public abstract javax.persistence.criteria.Expression<java.lang.Integer> mod(javax.persistence.criteria.Expression<java.lang.Integer>, java.lang.Integer);

  public abstract javax.persistence.criteria.Expression<java.lang.Integer> mod(java.lang.Integer, javax.persistence.criteria.Expression<java.lang.Integer>);

  public abstract javax.persistence.criteria.Expression<java.lang.Double> sqrt(javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Expression<java.lang.Long> toLong(javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Expression<java.lang.Integer> toInteger(javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Expression<java.lang.Float> toFloat(javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Expression<java.lang.Double> toDouble(javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Expression<java.math.BigDecimal> toBigDecimal(javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Expression<java.math.BigInteger> toBigInteger(javax.persistence.criteria.Expression<? extends java.lang.Number>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> toString(javax.persistence.criteria.Expression<java.lang.Character>);

  public abstract <T> javax.persistence.criteria.Expression<T> literal(T);

  public abstract <T> javax.persistence.criteria.Expression<T> nullLiteral(java.lang.Class<T>);

  public abstract <T> javax.persistence.criteria.ParameterExpression<T> parameter(java.lang.Class<T>);

  public abstract <T> javax.persistence.criteria.ParameterExpression<T> parameter(java.lang.Class<T>, java.lang.String);

  public abstract <C extends java.util.Collection<?>> javax.persistence.criteria.Predicate isEmpty(javax.persistence.criteria.Expression<C>);

  public abstract <C extends java.util.Collection<?>> javax.persistence.criteria.Predicate isNotEmpty(javax.persistence.criteria.Expression<C>);

  public abstract <C extends java.util.Collection<?>> javax.persistence.criteria.Expression<java.lang.Integer> size(javax.persistence.criteria.Expression<C>);

  public abstract <C extends java.util.Collection<?>> javax.persistence.criteria.Expression<java.lang.Integer> size(C);

  public abstract <E, C extends java.util.Collection<E>> javax.persistence.criteria.Predicate isMember(javax.persistence.criteria.Expression<E>, javax.persistence.criteria.Expression<C>);

  public abstract <E, C extends java.util.Collection<E>> javax.persistence.criteria.Predicate isMember(E, javax.persistence.criteria.Expression<C>);

  public abstract <E, C extends java.util.Collection<E>> javax.persistence.criteria.Predicate isNotMember(javax.persistence.criteria.Expression<E>, javax.persistence.criteria.Expression<C>);

  public abstract <E, C extends java.util.Collection<E>> javax.persistence.criteria.Predicate isNotMember(E, javax.persistence.criteria.Expression<C>);

  public abstract <V, M extends java.util.Map<?, V>> javax.persistence.criteria.Expression<java.util.Collection<V>> values(M);

  public abstract <K, M extends java.util.Map<K, ?>> javax.persistence.criteria.Expression<java.util.Set<K>> keys(M);

  public abstract javax.persistence.criteria.Predicate like(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Predicate like(javax.persistence.criteria.Expression<java.lang.String>, java.lang.String);

  public abstract javax.persistence.criteria.Predicate like(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.Character>);

  public abstract javax.persistence.criteria.Predicate like(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.String>, char);

  public abstract javax.persistence.criteria.Predicate like(javax.persistence.criteria.Expression<java.lang.String>, java.lang.String, javax.persistence.criteria.Expression<java.lang.Character>);

  public abstract javax.persistence.criteria.Predicate like(javax.persistence.criteria.Expression<java.lang.String>, java.lang.String, char);

  public abstract javax.persistence.criteria.Predicate notLike(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Predicate notLike(javax.persistence.criteria.Expression<java.lang.String>, java.lang.String);

  public abstract javax.persistence.criteria.Predicate notLike(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.Character>);

  public abstract javax.persistence.criteria.Predicate notLike(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.String>, char);

  public abstract javax.persistence.criteria.Predicate notLike(javax.persistence.criteria.Expression<java.lang.String>, java.lang.String, javax.persistence.criteria.Expression<java.lang.Character>);

  public abstract javax.persistence.criteria.Predicate notLike(javax.persistence.criteria.Expression<java.lang.String>, java.lang.String, char);

  public abstract javax.persistence.criteria.Expression<java.lang.String> concat(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> concat(javax.persistence.criteria.Expression<java.lang.String>, java.lang.String);

  public abstract javax.persistence.criteria.Expression<java.lang.String> concat(java.lang.String, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> substring(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.Integer>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> substring(javax.persistence.criteria.Expression<java.lang.String>, int);

  public abstract javax.persistence.criteria.Expression<java.lang.String> substring(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.Integer>, javax.persistence.criteria.Expression<java.lang.Integer>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> substring(javax.persistence.criteria.Expression<java.lang.String>, int, int);

  public abstract javax.persistence.criteria.Expression<java.lang.String> trim(javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> trim(javax.persistence.criteria.CriteriaBuilder$Trimspec, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> trim(javax.persistence.criteria.Expression<java.lang.Character>, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> trim(javax.persistence.criteria.CriteriaBuilder$Trimspec, javax.persistence.criteria.Expression<java.lang.Character>, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> trim(char, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> trim(javax.persistence.criteria.CriteriaBuilder$Trimspec, char, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> lower(javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.String> upper(javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.Integer> length(javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.Integer> locate(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.String>);

  public abstract javax.persistence.criteria.Expression<java.lang.Integer> locate(javax.persistence.criteria.Expression<java.lang.String>, java.lang.String);

  public abstract javax.persistence.criteria.Expression<java.lang.Integer> locate(javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.String>, javax.persistence.criteria.Expression<java.lang.Integer>);

  public abstract javax.persistence.criteria.Expression<java.lang.Integer> locate(javax.persistence.criteria.Expression<java.lang.String>, java.lang.String, int);

  public abstract javax.persistence.criteria.Expression<java.sql.Date> currentDate();

  public abstract javax.persistence.criteria.Expression<java.sql.Timestamp> currentTimestamp();

  public abstract javax.persistence.criteria.Expression<java.sql.Time> currentTime();

  public abstract <T> javax.persistence.criteria.CriteriaBuilder$In<T> in(javax.persistence.criteria.Expression<? extends T>);

  public abstract <Y> javax.persistence.criteria.Expression<Y> coalesce(javax.persistence.criteria.Expression<? extends Y>, javax.persistence.criteria.Expression<? extends Y>);

  public abstract <Y> javax.persistence.criteria.Expression<Y> coalesce(javax.persistence.criteria.Expression<? extends Y>, Y);

  public abstract <Y> javax.persistence.criteria.Expression<Y> nullif(javax.persistence.criteria.Expression<Y>, javax.persistence.criteria.Expression<?>);

  public abstract <Y> javax.persistence.criteria.Expression<Y> nullif(javax.persistence.criteria.Expression<Y>, Y);

  public abstract <T> javax.persistence.criteria.CriteriaBuilder$Coalesce<T> coalesce();

  public abstract <C, R> javax.persistence.criteria.CriteriaBuilder$SimpleCase<C, R> selectCase(javax.persistence.criteria.Expression<? extends C>);

  public abstract <R> javax.persistence.criteria.CriteriaBuilder$Case<R> selectCase();

  public abstract <T> javax.persistence.criteria.Expression<T> function(java.lang.String, java.lang.Class<T>, javax.persistence.criteria.Expression<?>...);

  public abstract <X, T, V extends T> javax.persistence.criteria.Join<X, V> treat(javax.persistence.criteria.Join<X, T>, java.lang.Class<V>);

  public abstract <X, T, E extends T> javax.persistence.criteria.CollectionJoin<X, E> treat(javax.persistence.criteria.CollectionJoin<X, T>, java.lang.Class<E>);

  public abstract <X, T, E extends T> javax.persistence.criteria.SetJoin<X, E> treat(javax.persistence.criteria.SetJoin<X, T>, java.lang.Class<E>);

  public abstract <X, T, E extends T> javax.persistence.criteria.ListJoin<X, E> treat(javax.persistence.criteria.ListJoin<X, T>, java.lang.Class<E>);

  public abstract <X, K, T, V extends T> javax.persistence.criteria.MapJoin<X, K, V> treat(javax.persistence.criteria.MapJoin<X, K, T>, java.lang.Class<V>);

  public abstract <X, T extends X> javax.persistence.criteria.Path<T> treat(javax.persistence.criteria.Path<X>, java.lang.Class<T>);

  public abstract <X, T extends X> javax.persistence.criteria.Root<T> treat(javax.persistence.criteria.Root<X>, java.lang.Class<T>);
}
