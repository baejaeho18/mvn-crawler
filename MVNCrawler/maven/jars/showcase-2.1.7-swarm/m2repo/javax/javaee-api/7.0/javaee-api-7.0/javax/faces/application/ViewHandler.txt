Compiled from "ViewHandler.java"
public abstract class javax.faces.application.ViewHandler {
  private static final java.util.logging.Logger log;

  public static final java.lang.String CHARACTER_ENCODING_KEY;

  public static final java.lang.String DEFAULT_SUFFIX_PARAM_NAME;

  public static final java.lang.String DEFAULT_SUFFIX;

  public static final java.lang.String FACELETS_SKIP_COMMENTS_PARAM_NAME;

  public static final java.lang.String FACELETS_SUFFIX_PARAM_NAME;

  public static final java.lang.String DEFAULT_FACELETS_SUFFIX;

  public static final java.lang.String FACELETS_VIEW_MAPPINGS_PARAM_NAME;

  public static final java.lang.String FACELETS_BUFFER_SIZE_PARAM_NAME;

  public static final java.lang.String FACELETS_REFRESH_PERIOD_PARAM_NAME;

  public static final java.lang.String FACELETS_LIBRARIES_PARAM_NAME;

  public static final java.lang.String FACELETS_DECORATORS_PARAM_NAME;

  public static final java.lang.String DISABLE_FACELET_JSF_VIEWHANDLER_PARAM_NAME;

  public javax.faces.application.ViewHandler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public abstract java.util.Locale calculateLocale(javax.faces.context.FacesContext);

  public java.lang.String calculateCharacterEncoding(javax.faces.context.FacesContext);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method javax/faces/context/FacesContext.getExternalContext:()Ljavax/faces/context/ExternalContext;
       4: astore_2
       5: aload_2
       6: invokevirtual #3                  // Method javax/faces/context/ExternalContext.getRequestHeaderMap:()Ljava/util/Map;
       9: astore_3
      10: aload_3
      11: ldc           #4                  // String Content-Type
      13: invokeinterface #5,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      18: checkcast     #6                  // class java/lang/String
      21: astore        4
      23: aconst_null
      24: astore        5
      26: aconst_null
      27: aload         4
      29: if_acmpeq     83
      32: ldc           #7                  // String charset=
      34: astore        6
      36: aload         6
      38: invokevirtual #8                  // Method java/lang/String.length:()I
      41: istore        7
      43: aload         4
      45: aload         6
      47: invokevirtual #9                  // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      50: istore        8
      52: iload         8
      54: iconst_m1
      55: if_icmpeq     83
      58: iload         8
      60: iload         7
      62: iadd
      63: aload         4
      65: invokevirtual #8                  // Method java/lang/String.length:()I
      68: if_icmpge     83
      71: aload         4
      73: iload         8
      75: iload         7
      77: iadd
      78: invokevirtual #10                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      81: astore        5
      83: aconst_null
      84: aload         5
      86: if_acmpne     114
      89: aconst_null
      90: aload_2
      91: iconst_0
      92: invokevirtual #11                 // Method javax/faces/context/ExternalContext.getSession:(Z)Ljava/lang/Object;
      95: if_acmpeq     114
      98: aload_2
      99: invokevirtual #12                 // Method javax/faces/context/ExternalContext.getSessionMap:()Ljava/util/Map;
     102: ldc           #13                 // String javax.faces.request.charset
     104: invokeinterface #5,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     109: checkcast     #6                  // class java/lang/String
     112: astore        5
     114: aload         5
     116: areturn

  public abstract java.lang.String calculateRenderKitId(javax.faces.context.FacesContext);

  public abstract javax.faces.component.UIViewRoot createView(javax.faces.context.FacesContext, java.lang.String);

  public java.lang.String deriveViewId(javax.faces.context.FacesContext, java.lang.String);
    Code:
       0: aload_2
       1: areturn

  public java.lang.String deriveLogicalViewId(javax.faces.context.FacesContext, java.lang.String);
    Code:
       0: aload_2
       1: areturn

  public abstract java.lang.String getActionURL(javax.faces.context.FacesContext, java.lang.String);

  public abstract java.lang.String getResourceURL(javax.faces.context.FacesContext, java.lang.String);

  public java.util.Set<java.lang.String> getProtectedViewsUnmodifiable();
    Code:
       0: getstatic     #14                 // Field java/util/Collections.EMPTY_SET:Ljava/util/Set;
       3: invokestatic  #15                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
       6: areturn

  public void addProtectedView(java.lang.String);
    Code:
       0: return

  public boolean removeProtectedView(java.lang.String);
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getRedirectURL(javax.faces.context.FacesContext, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #16                 // Method getActionURL:(Ljavax/faces/context/FacesContext;Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  public java.lang.String getBookmarkableURL(javax.faces.context.FacesContext, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #16                 // Method getActionURL:(Ljavax/faces/context/FacesContext;Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  public javax.faces.view.ViewDeclarationLanguage getViewDeclarationLanguage(javax.faces.context.FacesContext, java.lang.String);
    Code:
       0: aconst_null
       1: areturn

  public void initView(javax.faces.context.FacesContext) throws javax.faces.FacesException;
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method javax/faces/context/FacesContext.getExternalContext:()Ljavax/faces/context/ExternalContext;
       4: invokevirtual #17                 // Method javax/faces/context/ExternalContext.getRequestCharacterEncoding:()Ljava/lang/String;
       7: astore_2
       8: aconst_null
       9: aload_2
      10: if_acmpeq     14
      13: return
      14: aload_0
      15: aload_1
      16: invokevirtual #18                 // Method calculateCharacterEncoding:(Ljavax/faces/context/FacesContext;)Ljava/lang/String;
      19: astore_2
      20: aconst_null
      21: aload_2
      22: if_acmpeq     101
      25: aload_1
      26: invokevirtual #2                  // Method javax/faces/context/FacesContext.getExternalContext:()Ljavax/faces/context/ExternalContext;
      29: aload_2
      30: invokevirtual #19                 // Method javax/faces/context/ExternalContext.setRequestCharacterEncoding:(Ljava/lang/String;)V
      33: goto          101
      36: astore_3
      37: new           #21                 // class java/lang/StringBuilder
      40: dup
      41: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      44: ldc           #23                 // String Can\'t set encoding to:
      46: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_2
      50: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: ldc           #25                 // String  Exception:
      55: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: aload_3
      59: invokevirtual #26                 // Method java/io/UnsupportedEncodingException.getMessage:()Ljava/lang/String;
      62: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      68: astore        4
      70: getstatic     #28                 // Field log:Ljava/util/logging/Logger;
      73: getstatic     #29                 // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      76: invokevirtual #30                 // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      79: ifeq          90
      82: getstatic     #28                 // Field log:Ljava/util/logging/Logger;
      85: aload         4
      87: invokevirtual #31                 // Method java/util/logging/Logger.fine:(Ljava/lang/String;)V
      90: new           #32                 // class javax/faces/FacesException
      93: dup
      94: aload         4
      96: aload_3
      97: invokespecial #33                 // Method javax/faces/FacesException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     100: athrow
     101: return
    Exception table:
       from    to  target type
          25    33    36   Class java/io/UnsupportedEncodingException

  public abstract void renderView(javax.faces.context.FacesContext, javax.faces.component.UIViewRoot) throws java.io.IOException, javax.faces.FacesException;

  public abstract javax.faces.component.UIViewRoot restoreView(javax.faces.context.FacesContext, java.lang.String);

  public abstract void writeState(javax.faces.context.FacesContext) throws java.io.IOException;

  static {};
    Code:
       0: ldc           #34                 // String javax.faces.application
       2: invokestatic  #35                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       5: putstatic     #28                 // Field log:Ljava/util/logging/Logger;
       8: return
}
