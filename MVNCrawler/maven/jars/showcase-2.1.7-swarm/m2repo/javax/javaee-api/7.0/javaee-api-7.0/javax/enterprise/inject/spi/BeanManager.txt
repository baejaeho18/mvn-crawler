Compiled from "BeanManager.java"
public interface javax.enterprise.inject.spi.BeanManager {
  public abstract java.lang.Object getReference(javax.enterprise.inject.spi.Bean<?>, java.lang.reflect.Type, javax.enterprise.context.spi.CreationalContext<?>);

  public abstract java.lang.Object getInjectableReference(javax.enterprise.inject.spi.InjectionPoint, javax.enterprise.context.spi.CreationalContext<?>);

  public abstract <T> javax.enterprise.context.spi.CreationalContext<T> createCreationalContext(javax.enterprise.context.spi.Contextual<T>);

  public abstract java.util.Set<javax.enterprise.inject.spi.Bean<?>> getBeans(java.lang.reflect.Type, java.lang.annotation.Annotation...);

  public abstract java.util.Set<javax.enterprise.inject.spi.Bean<?>> getBeans(java.lang.String);

  public abstract javax.enterprise.inject.spi.Bean<?> getPassivationCapableBean(java.lang.String);

  public abstract <X> javax.enterprise.inject.spi.Bean<? extends X> resolve(java.util.Set<javax.enterprise.inject.spi.Bean<? extends X>>);

  public abstract void validate(javax.enterprise.inject.spi.InjectionPoint);

  public abstract void fireEvent(java.lang.Object, java.lang.annotation.Annotation...);

  public abstract <T> java.util.Set<javax.enterprise.inject.spi.ObserverMethod<? super T>> resolveObserverMethods(T, java.lang.annotation.Annotation...);

  public abstract java.util.List<javax.enterprise.inject.spi.Decorator<?>> resolveDecorators(java.util.Set<java.lang.reflect.Type>, java.lang.annotation.Annotation...);

  public abstract java.util.List<javax.enterprise.inject.spi.Interceptor<?>> resolveInterceptors(javax.enterprise.inject.spi.InterceptionType, java.lang.annotation.Annotation...);

  public abstract boolean isScope(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract boolean isNormalScope(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract boolean isPassivatingScope(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract boolean isQualifier(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract boolean isInterceptorBinding(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract boolean isStereotype(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract java.util.Set<java.lang.annotation.Annotation> getInterceptorBindingDefinition(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract java.util.Set<java.lang.annotation.Annotation> getStereotypeDefinition(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract boolean areQualifiersEquivalent(java.lang.annotation.Annotation, java.lang.annotation.Annotation);

  public abstract boolean areInterceptorBindingsEquivalent(java.lang.annotation.Annotation, java.lang.annotation.Annotation);

  public abstract int getQualifierHashCode(java.lang.annotation.Annotation);

  public abstract int getInterceptorBindingHashCode(java.lang.annotation.Annotation);

  public abstract javax.enterprise.context.spi.Context getContext(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract javax.el.ELResolver getELResolver();

  public abstract javax.el.ExpressionFactory wrapExpressionFactory(javax.el.ExpressionFactory);

  public abstract <T> javax.enterprise.inject.spi.AnnotatedType<T> createAnnotatedType(java.lang.Class<T>);

  public abstract <T> javax.enterprise.inject.spi.InjectionTarget<T> createInjectionTarget(javax.enterprise.inject.spi.AnnotatedType<T>);

  public abstract <T> javax.enterprise.inject.spi.InjectionTargetFactory<T> getInjectionTargetFactory(javax.enterprise.inject.spi.AnnotatedType<T>);

  public abstract <X> javax.enterprise.inject.spi.ProducerFactory<X> getProducerFactory(javax.enterprise.inject.spi.AnnotatedField<? super X>, javax.enterprise.inject.spi.Bean<X>);

  public abstract <X> javax.enterprise.inject.spi.ProducerFactory<X> getProducerFactory(javax.enterprise.inject.spi.AnnotatedMethod<? super X>, javax.enterprise.inject.spi.Bean<X>);

  public abstract <T> javax.enterprise.inject.spi.BeanAttributes<T> createBeanAttributes(javax.enterprise.inject.spi.AnnotatedType<T>);

  public abstract javax.enterprise.inject.spi.BeanAttributes<?> createBeanAttributes(javax.enterprise.inject.spi.AnnotatedMember<?>);

  public abstract <T> javax.enterprise.inject.spi.Bean<T> createBean(javax.enterprise.inject.spi.BeanAttributes<T>, java.lang.Class<T>, javax.enterprise.inject.spi.InjectionTargetFactory<T>);

  public abstract <T, X> javax.enterprise.inject.spi.Bean<T> createBean(javax.enterprise.inject.spi.BeanAttributes<T>, java.lang.Class<X>, javax.enterprise.inject.spi.ProducerFactory<X>);

  public abstract javax.enterprise.inject.spi.InjectionPoint createInjectionPoint(javax.enterprise.inject.spi.AnnotatedField<?>);

  public abstract javax.enterprise.inject.spi.InjectionPoint createInjectionPoint(javax.enterprise.inject.spi.AnnotatedParameter<?>);

  public abstract <T extends javax.enterprise.inject.spi.Extension> T getExtension(java.lang.Class<T>);
}
