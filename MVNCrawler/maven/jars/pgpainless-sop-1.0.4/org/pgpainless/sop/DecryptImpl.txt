Compiled from "DecryptImpl.java"
public class org.pgpainless.sop.DecryptImpl implements sop.operation.Decrypt {
  private final org.pgpainless.decryption_verification.ConsumerOptions consumerOptions;

  public org.pgpainless.sop.DecryptImpl();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class org/pgpainless/decryption_verification/ConsumerOptions
       8: dup
       9: invokespecial #4                  // Method org/pgpainless/decryption_verification/ConsumerOptions."<init>":()V
      12: putfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
      15: return

  public org.pgpainless.sop.DecryptImpl verifyNotBefore(java.util.Date) throws sop.exception.SOPGPException$UnsupportedOption;
    Code:
       0: aload_0
       1: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
       4: aload_1
       5: invokevirtual #5                  // Method org/pgpainless/decryption_verification/ConsumerOptions.verifyNotBefore:(Ljava/util/Date;)Lorg/pgpainless/decryption_verification/ConsumerOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.pgpainless.sop.DecryptImpl verifyNotAfter(java.util.Date) throws sop.exception.SOPGPException$UnsupportedOption;
    Code:
       0: aload_0
       1: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
       4: aload_1
       5: invokevirtual #6                  // Method org/pgpainless/decryption_verification/ConsumerOptions.verifyNotAfter:(Ljava/util/Date;)Lorg/pgpainless/decryption_verification/ConsumerOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.pgpainless.sop.DecryptImpl verifyWithCert(java.io.InputStream) throws sop.exception.SOPGPException$BadData, java.io.IOException;
    Code:
       0: invokestatic  #7                  // Method org/pgpainless/PGPainless.readKeyRing:()Lorg/pgpainless/key/parsing/KeyRingReader;
       3: aload_1
       4: iconst_0
       5: invokevirtual #8                  // Method org/pgpainless/key/parsing/KeyRingReader.keyRingCollection:(Ljava/io/InputStream;Z)Lorg/pgpainless/key/collection/PGPKeyRingCollection;
       8: invokevirtual #9                  // Method org/pgpainless/key/collection/PGPKeyRingCollection.getPgpPublicKeyRingCollection:()Lorg/bouncycastle/openpgp/PGPPublicKeyRingCollection;
      11: astore_2
      12: aload_2
      13: invokevirtual #10                 // Method org/bouncycastle/openpgp/PGPPublicKeyRingCollection.size:()I
      16: ifne          36
      19: new           #11                 // class sop/exception/SOPGPException$BadData
      22: dup
      23: new           #12                 // class org/bouncycastle/openpgp/PGPException
      26: dup
      27: ldc           #13                 // String No certificates provided.
      29: invokespecial #14                 // Method org/bouncycastle/openpgp/PGPException."<init>":(Ljava/lang/String;)V
      32: invokespecial #15                 // Method sop/exception/SOPGPException$BadData."<init>":(Ljava/lang/Throwable;)V
      35: athrow
      36: aload_0
      37: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
      40: aload_2
      41: invokevirtual #16                 // Method org/pgpainless/decryption_verification/ConsumerOptions.addVerificationCerts:(Lorg/bouncycastle/openpgp/PGPPublicKeyRingCollection;)Lorg/pgpainless/decryption_verification/ConsumerOptions;
      44: pop
      45: goto          58
      48: astore_2
      49: new           #11                 // class sop/exception/SOPGPException$BadData
      52: dup
      53: aload_2
      54: invokespecial #15                 // Method sop/exception/SOPGPException$BadData."<init>":(Ljava/lang/Throwable;)V
      57: athrow
      58: aload_0
      59: areturn
    Exception table:
       from    to  target type
           0    45    48   Class org/bouncycastle/openpgp/PGPException

  public org.pgpainless.sop.DecryptImpl withSessionKey(sop.SessionKey) throws sop.exception.SOPGPException$UnsupportedOption;
    Code:
       0: aload_0
       1: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
       4: new           #17                 // class org/pgpainless/util/SessionKey
       7: dup
       8: aload_1
       9: invokevirtual #18                 // Method sop/SessionKey.getAlgorithm:()B
      12: invokestatic  #19                 // Method org/pgpainless/algorithm/SymmetricKeyAlgorithm.fromId:(I)Lorg/pgpainless/algorithm/SymmetricKeyAlgorithm;
      15: aload_1
      16: invokevirtual #20                 // Method sop/SessionKey.getKey:()[B
      19: invokespecial #21                 // Method org/pgpainless/util/SessionKey."<init>":(Lorg/pgpainless/algorithm/SymmetricKeyAlgorithm;[B)V
      22: invokevirtual #22                 // Method org/pgpainless/decryption_verification/ConsumerOptions.setSessionKey:(Lorg/pgpainless/util/SessionKey;)Lorg/pgpainless/decryption_verification/ConsumerOptions;
      25: pop
      26: aload_0
      27: areturn

  public org.pgpainless.sop.DecryptImpl withPassword(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
       4: aload_1
       5: invokestatic  #23                 // Method org/pgpainless/util/Passphrase.fromPassword:(Ljava/lang/String;)Lorg/pgpainless/util/Passphrase;
       8: invokevirtual #24                 // Method org/pgpainless/decryption_verification/ConsumerOptions.addDecryptionPassphrase:(Lorg/pgpainless/util/Passphrase;)Lorg/pgpainless/decryption_verification/ConsumerOptions;
      11: pop
      12: aload_1
      13: invokestatic  #25                 // Method removeTrailingWhitespace:(Ljava/lang/String;)Ljava/lang/String;
      16: astore_2
      17: aload_1
      18: aload_2
      19: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      22: ifne          37
      25: aload_0
      26: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
      29: aload_2
      30: invokestatic  #23                 // Method org/pgpainless/util/Passphrase.fromPassword:(Ljava/lang/String;)Lorg/pgpainless/util/Passphrase;
      33: invokevirtual #24                 // Method org/pgpainless/decryption_verification/ConsumerOptions.addDecryptionPassphrase:(Lorg/pgpainless/util/Passphrase;)Lorg/pgpainless/decryption_verification/ConsumerOptions;
      36: pop
      37: aload_0
      38: areturn

  private static java.lang.String removeTrailingWhitespace(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method java/lang/String.length:()I
       4: iconst_1
       5: isub
       6: istore_1
       7: iload_1
       8: ifle          28
      11: aload_0
      12: iload_1
      13: invokevirtual #28                 // Method java/lang/String.charAt:(I)C
      16: invokestatic  #29                 // Method java/lang/Character.isWhitespace:(C)Z
      19: ifeq          28
      22: iinc          1, -1
      25: goto          7
      28: aload_0
      29: iconst_0
      30: iload_1
      31: invokevirtual #30                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      34: areturn

  public org.pgpainless.sop.DecryptImpl withKey(java.io.InputStream) throws sop.exception.SOPGPException$KeyIsProtected, sop.exception.SOPGPException$BadData, sop.exception.SOPGPException$UnsupportedAsymmetricAlgo;
    Code:
       0: invokestatic  #7                  // Method org/pgpainless/PGPainless.readKeyRing:()Lorg/pgpainless/key/parsing/KeyRingReader;
       3: aload_1
       4: invokevirtual #31                 // Method org/pgpainless/key/parsing/KeyRingReader.secretKeyRingCollection:(Ljava/io/InputStream;)Lorg/bouncycastle/openpgp/PGPSecretKeyRingCollection;
       7: astore_2
       8: aload_2
       9: invokevirtual #32                 // Method org/bouncycastle/openpgp/PGPSecretKeyRingCollection.iterator:()Ljava/util/Iterator;
      12: astore_3
      13: aload_3
      14: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          63
      22: aload_3
      23: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #35                 // class org/bouncycastle/openpgp/PGPSecretKeyRing
      31: astore        4
      33: new           #36                 // class org/pgpainless/key/info/KeyRingInfo
      36: dup
      37: aload         4
      39: invokespecial #37                 // Method org/pgpainless/key/info/KeyRingInfo."<init>":(Lorg/bouncycastle/openpgp/PGPKeyRing;)V
      42: astore        5
      44: aload         5
      46: invokevirtual #38                 // Method org/pgpainless/key/info/KeyRingInfo.isFullyDecrypted:()Z
      49: ifne          60
      52: new           #39                 // class sop/exception/SOPGPException$KeyIsProtected
      55: dup
      56: invokespecial #40                 // Method sop/exception/SOPGPException$KeyIsProtected."<init>":()V
      59: athrow
      60: goto          13
      63: aload_0
      64: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
      67: aload_2
      68: invokestatic  #41                 // InterfaceMethod org/pgpainless/key/protection/SecretKeyRingProtector.unprotectedKeys:()Lorg/pgpainless/key/protection/SecretKeyRingProtector;
      71: invokevirtual #42                 // Method org/pgpainless/decryption_verification/ConsumerOptions.addDecryptionKeys:(Lorg/bouncycastle/openpgp/PGPSecretKeyRingCollection;Lorg/pgpainless/key/protection/SecretKeyRingProtector;)Lorg/pgpainless/decryption_verification/ConsumerOptions;
      74: pop
      75: goto          88
      78: astore_2
      79: new           #11                 // class sop/exception/SOPGPException$BadData
      82: dup
      83: aload_2
      84: invokespecial #15                 // Method sop/exception/SOPGPException$BadData."<init>":(Ljava/lang/Throwable;)V
      87: athrow
      88: aload_0
      89: areturn
    Exception table:
       from    to  target type
           0    75    78   Class java/io/IOException
           0    75    78   Class org/bouncycastle/openpgp/PGPException

  public sop.ReadyWithResult<sop.DecryptionResult> ciphertext(java.io.InputStream) throws sop.exception.SOPGPException$BadData, sop.exception.SOPGPException$MissingArg;
    Code:
       0: aload_0
       1: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
       4: invokevirtual #44                 // Method org/pgpainless/decryption_verification/ConsumerOptions.getDecryptionKeys:()Ljava/util/Set;
       7: invokeinterface #45,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      12: ifeq          50
      15: aload_0
      16: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
      19: invokevirtual #46                 // Method org/pgpainless/decryption_verification/ConsumerOptions.getDecryptionPassphrases:()Ljava/util/Set;
      22: invokeinterface #45,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      27: ifeq          50
      30: aload_0
      31: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
      34: invokevirtual #47                 // Method org/pgpainless/decryption_verification/ConsumerOptions.getSessionKey:()Lorg/pgpainless/util/SessionKey;
      37: ifnonnull     50
      40: new           #48                 // class sop/exception/SOPGPException$MissingArg
      43: dup
      44: ldc           #49                 // String Missing decryption key, passphrase or session key.
      46: invokespecial #50                 // Method sop/exception/SOPGPException$MissingArg."<init>":(Ljava/lang/String;)V
      49: athrow
      50: invokestatic  #51                 // Method org/pgpainless/PGPainless.decryptAndOrVerify:()Lorg/pgpainless/decryption_verification/DecryptionBuilder;
      53: aload_1
      54: invokevirtual #52                 // Method org/pgpainless/decryption_verification/DecryptionBuilder.onInputStream:(Ljava/io/InputStream;)Lorg/pgpainless/decryption_verification/DecryptionBuilderInterface$DecryptWith;
      57: aload_0
      58: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
      61: invokeinterface #53,  2           // InterfaceMethod org/pgpainless/decryption_verification/DecryptionBuilderInterface$DecryptWith.withOptions:(Lorg/pgpainless/decryption_verification/ConsumerOptions;)Lorg/pgpainless/decryption_verification/DecryptionStream;
      66: astore_2
      67: goto          80
      70: astore_3
      71: new           #11                 // class sop/exception/SOPGPException$BadData
      74: dup
      75: aload_3
      76: invokespecial #15                 // Method sop/exception/SOPGPException$BadData."<init>":(Ljava/lang/Throwable;)V
      79: athrow
      80: new           #54                 // class org/pgpainless/sop/DecryptImpl$1
      83: dup
      84: aload_0
      85: aload_2
      86: invokespecial #55                 // Method org/pgpainless/sop/DecryptImpl$1."<init>":(Lorg/pgpainless/sop/DecryptImpl;Lorg/pgpainless/decryption_verification/DecryptionStream;)V
      89: areturn
    Exception table:
       from    to  target type
          50    67    70   Class org/bouncycastle/openpgp/PGPException
          50    67    70   Class java/io/IOException

  public sop.operation.Decrypt withKey(java.io.InputStream) throws sop.exception.SOPGPException$KeyIsProtected, sop.exception.SOPGPException$BadData, sop.exception.SOPGPException$UnsupportedAsymmetricAlgo;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #56                 // Method withKey:(Ljava/io/InputStream;)Lorg/pgpainless/sop/DecryptImpl;
       5: areturn

  public sop.operation.Decrypt withPassword(java.lang.String) throws sop.exception.SOPGPException$PasswordNotHumanReadable, sop.exception.SOPGPException$UnsupportedOption;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #57                 // Method withPassword:(Ljava/lang/String;)Lorg/pgpainless/sop/DecryptImpl;
       5: areturn

  public sop.operation.Decrypt withSessionKey(sop.SessionKey) throws sop.exception.SOPGPException$UnsupportedOption;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method withSessionKey:(Lsop/SessionKey;)Lorg/pgpainless/sop/DecryptImpl;
       5: areturn

  public sop.operation.Decrypt verifyWithCert(java.io.InputStream) throws sop.exception.SOPGPException$BadData, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #59                 // Method verifyWithCert:(Ljava/io/InputStream;)Lorg/pgpainless/sop/DecryptImpl;
       5: areturn

  public sop.operation.Decrypt verifyNotAfter(java.util.Date) throws sop.exception.SOPGPException$UnsupportedOption;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #60                 // Method verifyNotAfter:(Ljava/util/Date;)Lorg/pgpainless/sop/DecryptImpl;
       5: areturn

  public sop.operation.Decrypt verifyNotBefore(java.util.Date) throws sop.exception.SOPGPException$UnsupportedOption;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #61                 // Method verifyNotBefore:(Ljava/util/Date;)Lorg/pgpainless/sop/DecryptImpl;
       5: areturn

  static org.pgpainless.decryption_verification.ConsumerOptions access$000(org.pgpainless.sop.DecryptImpl);
    Code:
       0: aload_0
       1: getfield      #1                  // Field consumerOptions:Lorg/pgpainless/decryption_verification/ConsumerOptions;
       4: areturn
}
