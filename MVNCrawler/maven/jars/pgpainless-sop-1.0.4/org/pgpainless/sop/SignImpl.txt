Compiled from "SignImpl.java"
public class org.pgpainless.sop.SignImpl implements sop.operation.Sign {
  private boolean armor;

  private sop.enums.SignAs mode;

  private final org.pgpainless.encryption_signing.SigningOptions signingOptions;

  public org.pgpainless.sop.SignImpl();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field armor:Z
       9: aload_0
      10: getstatic     #4                  // Field sop/enums/SignAs.Binary:Lsop/enums/SignAs;
      13: putfield      #5                  // Field mode:Lsop/enums/SignAs;
      16: aload_0
      17: new           #6                  // class org/pgpainless/encryption_signing/SigningOptions
      20: dup
      21: invokespecial #7                  // Method org/pgpainless/encryption_signing/SigningOptions."<init>":()V
      24: putfield      #8                  // Field signingOptions:Lorg/pgpainless/encryption_signing/SigningOptions;
      27: return

  public sop.operation.Sign noArmor();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #2                  // Field armor:Z
       5: aload_0
       6: areturn

  public sop.operation.Sign mode(sop.enums.SignAs);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field mode:Lsop/enums/SignAs;
       5: aload_0
       6: areturn

  public sop.operation.Sign key(java.io.InputStream) throws sop.exception.SOPGPException$KeyIsProtected, sop.exception.SOPGPException$BadData, java.io.IOException;
    Code:
       0: invokestatic  #9                  // Method org/pgpainless/PGPainless.readKeyRing:()Lorg/pgpainless/key/parsing/KeyRingReader;
       3: aload_1
       4: invokevirtual #10                 // Method org/pgpainless/key/parsing/KeyRingReader.secretKeyRingCollection:(Ljava/io/InputStream;)Lorg/bouncycastle/openpgp/PGPSecretKeyRingCollection;
       7: astore_2
       8: aload_2
       9: invokevirtual #11                 // Method org/bouncycastle/openpgp/PGPSecretKeyRingCollection.iterator:()Ljava/util/Iterator;
      12: astore_3
      13: aload_3
      14: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          83
      22: aload_3
      23: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #14                 // class org/bouncycastle/openpgp/PGPSecretKeyRing
      31: astore        4
      33: new           #15                 // class org/pgpainless/key/info/KeyRingInfo
      36: dup
      37: aload         4
      39: invokespecial #16                 // Method org/pgpainless/key/info/KeyRingInfo."<init>":(Lorg/bouncycastle/openpgp/PGPKeyRing;)V
      42: astore        5
      44: aload         5
      46: invokevirtual #17                 // Method org/pgpainless/key/info/KeyRingInfo.isFullyDecrypted:()Z
      49: ifne          60
      52: new           #18                 // class sop/exception/SOPGPException$KeyIsProtected
      55: dup
      56: invokespecial #19                 // Method sop/exception/SOPGPException$KeyIsProtected."<init>":()V
      59: athrow
      60: aload_0
      61: getfield      #8                  // Field signingOptions:Lorg/pgpainless/encryption_signing/SigningOptions;
      64: invokestatic  #20                 // InterfaceMethod org/pgpainless/key/protection/SecretKeyRingProtector.unprotectedKeys:()Lorg/pgpainless/key/protection/SecretKeyRingProtector;
      67: aload         4
      69: aload_0
      70: getfield      #5                  // Field mode:Lsop/enums/SignAs;
      73: invokestatic  #21                 // Method modeToSigType:(Lsop/enums/SignAs;)Lorg/pgpainless/algorithm/DocumentSignatureType;
      76: invokevirtual #22                 // Method org/pgpainless/encryption_signing/SigningOptions.addDetachedSignature:(Lorg/pgpainless/key/protection/SecretKeyRingProtector;Lorg/bouncycastle/openpgp/PGPSecretKeyRing;Lorg/pgpainless/algorithm/DocumentSignatureType;)Lorg/pgpainless/encryption_signing/SigningOptions;
      79: pop
      80: goto          13
      83: goto          96
      86: astore_2
      87: new           #24                 // class sop/exception/SOPGPException$BadData
      90: dup
      91: aload_2
      92: invokespecial #25                 // Method sop/exception/SOPGPException$BadData."<init>":(Ljava/lang/Throwable;)V
      95: athrow
      96: aload_0
      97: areturn
    Exception table:
       from    to  target type
           0    83    86   Class org/bouncycastle/openpgp/PGPException

  public sop.ReadyWithResult<sop.SigningResult> data(java.io.InputStream) throws java.io.IOException;
    Code:
       0: new           #26                 // class java/io/ByteArrayOutputStream
       3: dup
       4: invokespecial #27                 // Method java/io/ByteArrayOutputStream."<init>":()V
       7: astore_2
       8: invokestatic  #28                 // Method org/pgpainless/PGPainless.encryptAndOrSign:()Lorg/pgpainless/encryption_signing/EncryptionBuilder;
      11: aload_2
      12: invokevirtual #29                 // Method org/pgpainless/encryption_signing/EncryptionBuilder.onOutputStream:(Ljava/io/OutputStream;)Lorg/pgpainless/encryption_signing/EncryptionBuilderInterface$WithOptions;
      15: aload_0
      16: getfield      #8                  // Field signingOptions:Lorg/pgpainless/encryption_signing/SigningOptions;
      19: invokestatic  #30                 // Method org/pgpainless/encryption_signing/ProducerOptions.sign:(Lorg/pgpainless/encryption_signing/SigningOptions;)Lorg/pgpainless/encryption_signing/ProducerOptions;
      22: aload_0
      23: getfield      #2                  // Field armor:Z
      26: invokevirtual #31                 // Method org/pgpainless/encryption_signing/ProducerOptions.setAsciiArmor:(Z)Lorg/pgpainless/encryption_signing/ProducerOptions;
      29: invokeinterface #32,  2           // InterfaceMethod org/pgpainless/encryption_signing/EncryptionBuilderInterface$WithOptions.withOptions:(Lorg/pgpainless/encryption_signing/ProducerOptions;)Lorg/pgpainless/encryption_signing/EncryptionStream;
      34: astore_3
      35: new           #33                 // class org/pgpainless/sop/SignImpl$1
      38: dup
      39: aload_0
      40: aload_3
      41: aload_1
      42: invokespecial #34                 // Method org/pgpainless/sop/SignImpl$1."<init>":(Lorg/pgpainless/sop/SignImpl;Lorg/pgpainless/encryption_signing/EncryptionStream;Ljava/io/InputStream;)V
      45: areturn
      46: astore_3
      47: new           #35                 // class java/lang/RuntimeException
      50: dup
      51: aload_3
      52: invokespecial #36                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      55: athrow
    Exception table:
       from    to  target type
           8    45    46   Class org/bouncycastle/openpgp/PGPException

  private sop.MicAlg micAlgFromSignatures(java.lang.Iterable<org.bouncycastle.openpgp.PGPSignature>);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: invokeinterface #37,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
       8: astore_3
       9: aload_3
      10: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      15: ifeq          59
      18: aload_3
      19: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      24: checkcast     #38                 // class org/bouncycastle/openpgp/PGPSignature
      27: astore        4
      29: aload         4
      31: invokevirtual #39                 // Method org/bouncycastle/openpgp/PGPSignature.getHashAlgorithm:()I
      34: istore        5
      36: iload_2
      37: ifeq          46
      40: iload_2
      41: iload         5
      43: if_icmpne     52
      46: iload         5
      48: istore_2
      49: goto          56
      52: invokestatic  #40                 // Method sop/MicAlg.empty:()Lsop/MicAlg;
      55: areturn
      56: goto          9
      59: iload_2
      60: ifne          69
      63: invokestatic  #40                 // Method sop/MicAlg.empty:()Lsop/MicAlg;
      66: goto          73
      69: iload_2
      70: invokestatic  #41                 // Method sop/MicAlg.fromHashAlgorithmId:(I)Lsop/MicAlg;
      73: areturn

  private static org.pgpainless.algorithm.DocumentSignatureType modeToSigType(sop.enums.SignAs);
    Code:
       0: aload_0
       1: getstatic     #4                  // Field sop/enums/SignAs.Binary:Lsop/enums/SignAs;
       4: if_acmpne     13
       7: getstatic     #42                 // Field org/pgpainless/algorithm/DocumentSignatureType.BINARY_DOCUMENT:Lorg/pgpainless/algorithm/DocumentSignatureType;
      10: goto          16
      13: getstatic     #43                 // Field org/pgpainless/algorithm/DocumentSignatureType.CANONICAL_TEXT_DOCUMENT:Lorg/pgpainless/algorithm/DocumentSignatureType;
      16: areturn

  static boolean access$000(org.pgpainless.sop.SignImpl);
    Code:
       0: aload_0
       1: getfield      #2                  // Field armor:Z
       4: ireturn

  static sop.MicAlg access$100(org.pgpainless.sop.SignImpl, java.lang.Iterable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method micAlgFromSignatures:(Ljava/lang/Iterable;)Lsop/MicAlg;
       5: areturn
}
