Compiled from "StateNode.java"
public abstract class org.joni.ast.StateNode extends org.joni.ast.Node implements org.joni.constants.NodeStatus {
  protected int state;

  public org.joni.ast.StateNode();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/joni/ast/Node."<init>":()V
       4: return

  public java.lang.String toString(int);
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #4                  // String \n  state:
       9: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #6                  // Method stateToString:()Ljava/lang/String;
      16: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      22: areturn

  public java.lang.String stateToString();
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #8                  // Method isMinFixed:()Z
      12: ifeq          22
      15: aload_1
      16: ldc           #9                  // String MIN_FIXED
      18: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: pop
      22: aload_0
      23: invokevirtual #10                 // Method isMaxFixed:()Z
      26: ifeq          36
      29: aload_1
      30: ldc           #11                 // String MAX_FIXED
      32: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: pop
      36: aload_0
      37: invokevirtual #12                 // Method isMark1:()Z
      40: ifeq          50
      43: aload_1
      44: ldc           #13                 // String MARK1
      46: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: pop
      50: aload_0
      51: invokevirtual #14                 // Method isMark2:()Z
      54: ifeq          64
      57: aload_1
      58: ldc           #15                 // String MARK2
      60: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: pop
      64: aload_0
      65: invokevirtual #16                 // Method isMemBackrefed:()Z
      68: ifeq          78
      71: aload_1
      72: ldc           #17                 // String MEM_BACKREFED
      74: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: pop
      78: aload_0
      79: invokevirtual #18                 // Method isStopBtSimpleRepeat:()Z
      82: ifeq          92
      85: aload_1
      86: ldc           #19                 // String STOP_BT_SIMPLE_REPEAT
      88: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: pop
      92: aload_0
      93: invokevirtual #20                 // Method isRecursion:()Z
      96: ifeq          106
      99: aload_1
     100: ldc           #21                 // String RECURSION
     102: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     105: pop
     106: aload_0
     107: invokevirtual #22                 // Method isCalled:()Z
     110: ifeq          120
     113: aload_1
     114: ldc           #23                 // String CALLED
     116: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: pop
     120: aload_0
     121: invokevirtual #24                 // Method isAddrFixed:()Z
     124: ifeq          134
     127: aload_1
     128: ldc           #25                 // String ADDR_FIXED
     130: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     133: pop
     134: aload_0
     135: invokevirtual #26                 // Method isNamedGroup:()Z
     138: ifeq          148
     141: aload_1
     142: ldc           #27                 // String NAMED_GROUP
     144: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     147: pop
     148: aload_0
     149: invokevirtual #28                 // Method isNameRef:()Z
     152: ifeq          162
     155: aload_1
     156: ldc           #29                 // String NAME_REF
     158: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     161: pop
     162: aload_0
     163: invokevirtual #30                 // Method isInRepeat:()Z
     166: ifeq          176
     169: aload_1
     170: ldc           #31                 // String IN_REPEAT
     172: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     175: pop
     176: aload_0
     177: invokevirtual #32                 // Method isNestLevel:()Z
     180: ifeq          190
     183: aload_1
     184: ldc           #33                 // String NEST_LEVEL
     186: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     189: pop
     190: aload_0
     191: invokevirtual #34                 // Method isByNumber:()Z
     194: ifeq          204
     197: aload_1
     198: ldc           #35                 // String BY_NUMBER
     200: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     203: pop
     204: aload_1
     205: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     208: areturn

  public boolean isMinFixed();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: iconst_1
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public void setMinFixed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: iconst_1
       6: ior
       7: putfield      #36                 // Field state:I
      10: return

  public void clearMinFixed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        -2
       7: iand
       8: putfield      #36                 // Field state:I
      11: return

  public boolean isMaxFixed();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: iconst_2
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public void setMaxFixed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: iconst_2
       6: ior
       7: putfield      #36                 // Field state:I
      10: return

  public void clearMaxFixed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        -3
       7: iand
       8: putfield      #36                 // Field state:I
      11: return

  public boolean isCLenFixed();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: iconst_4
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public void setCLenFixed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: iconst_4
       6: ior
       7: putfield      #36                 // Field state:I
      10: return

  public void clearCLenFixed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        -5
       7: iand
       8: putfield      #36                 // Field state:I
      11: return

  public boolean isMark1();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: bipush        8
       6: iand
       7: ifeq          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void setMark1();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        8
       7: ior
       8: putfield      #36                 // Field state:I
      11: return

  public void clearMark1();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        -9
       7: iand
       8: putfield      #36                 // Field state:I
      11: return

  public boolean isMark2();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: bipush        16
       6: iand
       7: ifeq          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void setMark2();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        16
       7: ior
       8: putfield      #36                 // Field state:I
      11: return

  public void clearMark2();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        -17
       7: iand
       8: putfield      #36                 // Field state:I
      11: return

  public boolean isMemBackrefed();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: bipush        32
       6: iand
       7: ifeq          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void setMemBackrefed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        32
       7: ior
       8: putfield      #36                 // Field state:I
      11: return

  public void clearMemBackrefed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        -33
       7: iand
       8: putfield      #36                 // Field state:I
      11: return

  public boolean isStopBtSimpleRepeat();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: bipush        64
       6: iand
       7: ifeq          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void setStopBtSimpleRepeat();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        64
       7: ior
       8: putfield      #36                 // Field state:I
      11: return

  public void clearStopBtSimpleRepeat();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: bipush        -65
       7: iand
       8: putfield      #36                 // Field state:I
      11: return

  public boolean isRecursion();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: sipush        128
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void setRecursion();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        128
       8: ior
       9: putfield      #36                 // Field state:I
      12: return

  public void clearRecursion();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        -129
       8: iand
       9: putfield      #36                 // Field state:I
      12: return

  public boolean isCalled();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: sipush        256
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void setCalled();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        256
       8: ior
       9: putfield      #36                 // Field state:I
      12: return

  public void clearCAlled();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        -257
       8: iand
       9: putfield      #36                 // Field state:I
      12: return

  public boolean isAddrFixed();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: sipush        512
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void setAddrFixed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        512
       8: ior
       9: putfield      #36                 // Field state:I
      12: return

  public void clearAddrFixed();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        -513
       8: iand
       9: putfield      #36                 // Field state:I
      12: return

  public boolean isNamedGroup();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: sipush        1024
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void setNamedGroup();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        1024
       8: ior
       9: putfield      #36                 // Field state:I
      12: return

  public void clearNamedGroup();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        -1025
       8: iand
       9: putfield      #36                 // Field state:I
      12: return

  public boolean isNameRef();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: sipush        2048
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void setNameRef();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        2048
       8: ior
       9: putfield      #36                 // Field state:I
      12: return

  public void clearNameRef();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        -2049
       8: iand
       9: putfield      #36                 // Field state:I
      12: return

  public boolean isInRepeat();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: sipush        4096
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void setInRepeat();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        4096
       8: ior
       9: putfield      #36                 // Field state:I
      12: return

  public void clearInRepeat();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        -4097
       8: iand
       9: putfield      #36                 // Field state:I
      12: return

  public boolean isNestLevel();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: sipush        8192
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void setNestLevel();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        8192
       8: ior
       9: putfield      #36                 // Field state:I
      12: return

  public void clearNestLevel();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        -8193
       8: iand
       9: putfield      #36                 // Field state:I
      12: return

  public boolean isByNumber();
    Code:
       0: aload_0
       1: getfield      #36                 // Field state:I
       4: sipush        16384
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void setByNumber();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        16384
       8: ior
       9: putfield      #36                 // Field state:I
      12: return

  public void clearByNumber();
    Code:
       0: aload_0
       1: dup
       2: getfield      #36                 // Field state:I
       5: sipush        -16385
       8: iand
       9: putfield      #36                 // Field state:I
      12: return
}
