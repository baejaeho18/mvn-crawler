Compiled from "ScanEnvironment.java"
public final class org.joni.ScanEnvironment {
  private static final int SCANENV_MEMNODES_SIZE;

  int option;

  final int caseFoldFlag;

  public final org.jcodings.Encoding enc;

  public final org.joni.Syntax syntax;

  int captureHistory;

  int btMemStart;

  int btMemEnd;

  int backrefedMem;

  public final org.joni.Regex reg;

  int numCall;

  org.joni.UnsetAddrList unsetAddrList;

  public int numMem;

  int numNamed;

  public org.joni.ast.Node[] memNodes;

  int numCombExpCheck;

  int combExpMaxRegNum;

  int currMaxRegNum;

  boolean hasRecursion;

  public org.joni.ScanEnvironment(org.joni.Regex, org.joni.Syntax);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field reg:Lorg/joni/Regex;
       9: aload_0
      10: aload_1
      11: getfield      #3                  // Field org/joni/Regex.options:I
      14: putfield      #4                  // Field option:I
      17: aload_0
      18: aload_1
      19: getfield      #5                  // Field org/joni/Regex.caseFoldFlag:I
      22: putfield      #6                  // Field caseFoldFlag:I
      25: aload_0
      26: aload_1
      27: getfield      #7                  // Field org/joni/Regex.enc:Lorg/jcodings/Encoding;
      30: putfield      #8                  // Field enc:Lorg/jcodings/Encoding;
      33: aload_0
      34: aload_2
      35: putfield      #9                  // Field syntax:Lorg/joni/Syntax;
      38: return

  public void clear();
    Code:
       0: aload_0
       1: invokestatic  #10                 // Method org/joni/BitStatus.bsClear:()I
       4: putfield      #11                 // Field captureHistory:I
       7: aload_0
       8: invokestatic  #10                 // Method org/joni/BitStatus.bsClear:()I
      11: putfield      #12                 // Field btMemStart:I
      14: aload_0
      15: invokestatic  #10                 // Method org/joni/BitStatus.bsClear:()I
      18: putfield      #13                 // Field btMemEnd:I
      21: aload_0
      22: invokestatic  #10                 // Method org/joni/BitStatus.bsClear:()I
      25: putfield      #14                 // Field backrefedMem:I
      28: aload_0
      29: iconst_0
      30: putfield      #15                 // Field numCall:I
      33: aload_0
      34: iconst_0
      35: putfield      #16                 // Field numMem:I
      38: aload_0
      39: iconst_0
      40: putfield      #17                 // Field numNamed:I
      43: aload_0
      44: aconst_null
      45: putfield      #18                 // Field memNodes:[Lorg/joni/ast/Node;
      48: aload_0
      49: iconst_0
      50: putfield      #19                 // Field numCombExpCheck:I
      53: aload_0
      54: iconst_0
      55: putfield      #20                 // Field combExpMaxRegNum:I
      58: aload_0
      59: iconst_0
      60: putfield      #21                 // Field currMaxRegNum:I
      63: aload_0
      64: iconst_0
      65: putfield      #22                 // Field hasRecursion:Z
      68: return

  public int addMemEntry();
    Code:
       0: aload_0
       1: dup
       2: getfield      #16                 // Field numMem:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #16                 // Field numMem:I
      11: ifne          26
      14: aload_0
      15: bipush        8
      17: anewarray     #23                 // class org/joni/ast/Node
      20: putfield      #18                 // Field memNodes:[Lorg/joni/ast/Node;
      23: goto          69
      26: aload_0
      27: getfield      #16                 // Field numMem:I
      30: aload_0
      31: getfield      #18                 // Field memNodes:[Lorg/joni/ast/Node;
      34: arraylength
      35: if_icmplt     69
      38: aload_0
      39: getfield      #18                 // Field memNodes:[Lorg/joni/ast/Node;
      42: arraylength
      43: iconst_1
      44: ishl
      45: anewarray     #23                 // class org/joni/ast/Node
      48: astore_1
      49: aload_0
      50: getfield      #18                 // Field memNodes:[Lorg/joni/ast/Node;
      53: iconst_0
      54: aload_1
      55: iconst_0
      56: aload_0
      57: getfield      #18                 // Field memNodes:[Lorg/joni/ast/Node;
      60: arraylength
      61: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      64: aload_0
      65: aload_1
      66: putfield      #18                 // Field memNodes:[Lorg/joni/ast/Node;
      69: aload_0
      70: getfield      #16                 // Field numMem:I
      73: ireturn

  public void setMemNode(int, org.joni.ast.Node);
    Code:
       0: aload_0
       1: getfield      #16                 // Field numMem:I
       4: iload_1
       5: if_icmplt     18
       8: aload_0
       9: getfield      #18                 // Field memNodes:[Lorg/joni/ast/Node;
      12: iload_1
      13: aload_2
      14: aastore
      15: goto          28
      18: new           #25                 // class org/joni/exception/InternalException
      21: dup
      22: ldc           #26                 // String internal parser error (bug)
      24: invokespecial #27                 // Method org/joni/exception/InternalException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: return

  public int convertBackslashValue(int);
    Code:
       0: aload_0
       1: getfield      #9                  // Field syntax:Lorg/joni/Syntax;
       4: invokevirtual #28                 // Method org/joni/Syntax.opEscControlChars:()Z
       7: ifeq          146
      10: iload_1
      11: tableswitch   { // 97 to 118
                    97: 124
                    98: 127
                    99: 146
                   100: 146
                   101: 130
                   102: 121
                   103: 146
                   104: 146
                   105: 146
                   106: 146
                   107: 146
                   108: 146
                   109: 146
                   110: 112
                   111: 146
                   112: 146
                   113: 146
                   114: 118
                   115: 146
                   116: 115
                   117: 146
                   118: 133
               default: 146
          }
     112: bipush        10
     114: ireturn
     115: bipush        9
     117: ireturn
     118: bipush        13
     120: ireturn
     121: bipush        12
     123: ireturn
     124: bipush        7
     126: ireturn
     127: bipush        8
     129: ireturn
     130: bipush        27
     132: ireturn
     133: aload_0
     134: getfield      #9                  // Field syntax:Lorg/joni/Syntax;
     137: invokevirtual #29                 // Method org/joni/Syntax.op2EscVVtab:()Z
     140: ifeq          146
     143: bipush        11
     145: ireturn
     146: iload_1
     147: ireturn

  void ccEscWarn(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #9                  // Field syntax:Lorg/joni/Syntax;
       4: invokevirtual #30                 // Method org/joni/Syntax.warnCCOpNotEscaped:()Z
       7: ifeq          56
      10: aload_0
      11: getfield      #9                  // Field syntax:Lorg/joni/Syntax;
      14: invokevirtual #31                 // Method org/joni/Syntax.backSlashEscapeInCC:()Z
      17: ifeq          56
      20: aload_0
      21: getfield      #2                  // Field reg:Lorg/joni/Regex;
      24: getfield      #32                 // Field org/joni/Regex.warnings:Lorg/joni/WarnCallback;
      27: new           #33                 // class java/lang/StringBuilder
      30: dup
      31: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
      34: ldc           #35                 // String character class has \'
      36: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_1
      40: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: ldc           #37                 // String \' without escape
      45: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: invokeinterface #39,  2           // InterfaceMethod org/joni/WarnCallback.warn:(Ljava/lang/String;)V
      56: return

  void closeBracketWithoutEscapeWarn(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #9                  // Field syntax:Lorg/joni/Syntax;
       4: invokevirtual #30                 // Method org/joni/Syntax.warnCCOpNotEscaped:()Z
       7: ifeq          46
      10: aload_0
      11: getfield      #2                  // Field reg:Lorg/joni/Regex;
      14: getfield      #32                 // Field org/joni/Regex.warnings:Lorg/joni/WarnCallback;
      17: new           #33                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #40                 // String regular expression has \'
      26: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_1
      30: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #37                 // String \' without escape
      35: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: invokeinterface #39,  2           // InterfaceMethod org/joni/WarnCallback.warn:(Ljava/lang/String;)V
      46: return
}
