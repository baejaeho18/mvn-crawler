Compiled from "ByteCodeMachine.java"
class org.joni.ByteCodeMachine extends org.joni.StackMachine {
  private int bestLen;

  private int s;

  private int range;

  private int sprev;

  private int sstart;

  private int sbegin;

  private final int[] code;

  private int ip;

  protected int stkp;

  private byte[] cfbuf;

  private byte[] cfbuf2;

  org.joni.ByteCodeMachine(org.joni.Regex, byte[], int, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: iload         4
       6: invokespecial #1                  // Method org/joni/StackMachine."<init>":(Lorg/joni/Regex;[BII)V
       9: aload_0
      10: iconst_0
      11: putfield      #2                  // Field s:I
      14: aload_0
      15: aload_1
      16: getfield      #3                  // Field org/joni/Regex.code:[I
      19: putfield      #4                  // Field code:[I
      22: return

  private boolean makeCaptureHistoryTree(org.joni.CaptureTreeNode);
    Code:
       0: aload_0
       1: getfield      #5                  // Field stkp:I
       4: istore_2
       5: iload_2
       6: aload_0
       7: getfield      #6                  // Field stk:I
      10: if_icmpge     177
      13: aload_0
      14: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
      17: iload_2
      18: aaload
      19: astore_3
      20: aload_3
      21: getfield      #8                  // Field org/joni/StackEntry.type:I
      24: sipush        256
      27: if_icmpne     134
      30: aload_3
      31: invokevirtual #9                  // Method org/joni/StackEntry.getMemNum:()I
      34: istore        4
      36: iload         4
      38: bipush        31
      40: if_icmpgt     131
      43: aload_0
      44: getfield      #10                 // Field regex:Lorg/joni/Regex;
      47: getfield      #11                 // Field org/joni/Regex.captureHistory:I
      50: iload         4
      52: invokestatic  #12                 // Method org/joni/BitStatus.bsAt:(II)Z
      55: ifeq          131
      58: new           #13                 // class org/joni/CaptureTreeNode
      61: dup
      62: invokespecial #14                 // Method org/joni/CaptureTreeNode."<init>":()V
      65: astore        5
      67: aload         5
      69: iload         4
      71: putfield      #15                 // Field org/joni/CaptureTreeNode.group:I
      74: aload         5
      76: aload_3
      77: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
      80: aload_0
      81: getfield      #17                 // Field str:I
      84: isub
      85: putfield      #18                 // Field org/joni/CaptureTreeNode.beg:I
      88: aload_1
      89: aload         5
      91: invokevirtual #19                 // Method org/joni/CaptureTreeNode.addChild:(Lorg/joni/CaptureTreeNode;)V
      94: aload_0
      95: iload_2
      96: iconst_1
      97: iadd
      98: putfield      #5                  // Field stkp:I
     101: aload_0
     102: aload         5
     104: invokespecial #20                 // Method makeCaptureHistoryTree:(Lorg/joni/CaptureTreeNode;)Z
     107: ifeq          112
     110: iconst_1
     111: ireturn
     112: aload_0
     113: getfield      #5                  // Field stkp:I
     116: istore_2
     117: aload         5
     119: aload_3
     120: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
     123: aload_0
     124: getfield      #17                 // Field str:I
     127: isub
     128: putfield      #21                 // Field org/joni/CaptureTreeNode.end:I
     131: goto          174
     134: aload_3
     135: getfield      #8                  // Field org/joni/StackEntry.type:I
     138: ldc           #22                 // int 33280
     140: if_icmpne     174
     143: aload_3
     144: invokevirtual #9                  // Method org/joni/StackEntry.getMemNum:()I
     147: aload_1
     148: getfield      #15                 // Field org/joni/CaptureTreeNode.group:I
     151: if_icmpne     174
     154: aload_1
     155: aload_3
     156: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
     159: aload_0
     160: getfield      #17                 // Field str:I
     163: isub
     164: putfield      #21                 // Field org/joni/CaptureTreeNode.end:I
     167: aload_0
     168: iload_2
     169: putfield      #5                  // Field stkp:I
     172: iconst_0
     173: ireturn
     174: goto          5
     177: iconst_1
     178: ireturn

  private void checkCaptureHistory(org.joni.Region);
    Code:
       0: aload_1
       1: getfield      #23                 // Field org/joni/Region.historyRoot:Lorg/joni/CaptureTreeNode;
       4: ifnonnull     23
       7: aload_1
       8: new           #13                 // class org/joni/CaptureTreeNode
      11: dup
      12: invokespecial #14                 // Method org/joni/CaptureTreeNode."<init>":()V
      15: dup_x1
      16: putfield      #23                 // Field org/joni/Region.historyRoot:Lorg/joni/CaptureTreeNode;
      19: astore_2
      20: goto          32
      23: aload_1
      24: getfield      #23                 // Field org/joni/Region.historyRoot:Lorg/joni/CaptureTreeNode;
      27: astore_2
      28: aload_2
      29: invokevirtual #24                 // Method org/joni/CaptureTreeNode.clear:()V
      32: aload_2
      33: iconst_0
      34: putfield      #15                 // Field org/joni/CaptureTreeNode.group:I
      37: aload_2
      38: aload_0
      39: getfield      #25                 // Field sstart:I
      42: aload_0
      43: getfield      #17                 // Field str:I
      46: isub
      47: putfield      #18                 // Field org/joni/CaptureTreeNode.beg:I
      50: aload_2
      51: aload_0
      52: getfield      #2                  // Field s:I
      55: aload_0
      56: getfield      #17                 // Field str:I
      59: isub
      60: putfield      #21                 // Field org/joni/CaptureTreeNode.end:I
      63: aload_0
      64: iconst_0
      65: putfield      #5                  // Field stkp:I
      68: aload_0
      69: aload_1
      70: getfield      #23                 // Field org/joni/Region.historyRoot:Lorg/joni/CaptureTreeNode;
      73: invokespecial #20                 // Method makeCaptureHistoryTree:(Lorg/joni/CaptureTreeNode;)Z
      76: pop
      77: return

  protected final byte[] cfbuf();
    Code:
       0: aload_0
       1: getfield      #26                 // Field cfbuf:[B
       4: ifnonnull     19
       7: aload_0
       8: bipush        18
      10: newarray       byte
      12: dup_x1
      13: putfield      #26                 // Field cfbuf:[B
      16: goto          23
      19: aload_0
      20: getfield      #26                 // Field cfbuf:[B
      23: areturn

  protected final byte[] cfbuf2();
    Code:
       0: aload_0
       1: getfield      #27                 // Field cfbuf2:[B
       4: ifnonnull     19
       7: aload_0
       8: bipush        18
      10: newarray       byte
      12: dup_x1
      13: putfield      #27                 // Field cfbuf2:[B
      16: goto          23
      19: aload_0
      20: getfield      #27                 // Field cfbuf2:[B
      23: areturn

  private boolean stringCmpIC(int, int, org.jcodings.IntHolder, int, int);
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method cfbuf:()[B
       4: astore        6
       6: aload_0
       7: invokevirtual #29                 // Method cfbuf2:()[B
      10: astore        7
      12: aload_3
      13: getfield      #30                 // Field org/jcodings/IntHolder.value:I
      16: istore        8
      18: iload_2
      19: iload         4
      21: iadd
      22: istore        9
      24: iload_2
      25: iload         9
      27: if_icmpge     142
      30: aload_0
      31: iload_2
      32: putfield      #31                 // Field value:I
      35: aload_0
      36: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      39: iload_1
      40: aload_0
      41: getfield      #33                 // Field bytes:[B
      44: aload_0
      45: iload         5
      47: aload         6
      49: invokevirtual #34                 // Method org/jcodings/Encoding.mbcCaseFold:(I[BLorg/jcodings/IntHolder;I[B)I
      52: istore        10
      54: aload_0
      55: getfield      #31                 // Field value:I
      58: istore_2
      59: aload_0
      60: iload         8
      62: putfield      #31                 // Field value:I
      65: aload_0
      66: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      69: iload_1
      70: aload_0
      71: getfield      #33                 // Field bytes:[B
      74: aload_0
      75: iload         5
      77: aload         7
      79: invokevirtual #34                 // Method org/jcodings/Encoding.mbcCaseFold:(I[BLorg/jcodings/IntHolder;I[B)I
      82: istore        11
      84: aload_0
      85: getfield      #31                 // Field value:I
      88: istore        8
      90: iload         10
      92: iload         11
      94: if_icmpeq     99
      97: iconst_0
      98: ireturn
      99: iconst_0
     100: istore        12
     102: iconst_0
     103: istore        13
     105: iload         10
     107: dup
     108: iconst_1
     109: isub
     110: istore        10
     112: ifle          139
     115: aload         6
     117: iload         12
     119: baload
     120: aload         7
     122: iload         13
     124: baload
     125: if_icmpeq     130
     128: iconst_0
     129: ireturn
     130: iinc          12, 1
     133: iinc          13, 1
     136: goto          105
     139: goto          24
     142: aload_3
     143: iload         8
     145: putfield      #30                 // Field org/jcodings/IntHolder.value:I
     148: iconst_1
     149: ireturn

  private void debugMatchBegin();
    Code:
       0: getstatic     #35                 // Field org/joni/Config.log:Ljava/io/PrintStream;
       3: new           #36                 // class java/lang/StringBuilder
       6: dup
       7: invokespecial #37                 // Method java/lang/StringBuilder."<init>":()V
      10: ldc           #38                 // String match_at: str:
      12: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: aload_0
      16: getfield      #17                 // Field str:I
      19: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      22: ldc           #41                 // String , end:
      24: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: getfield      #42                 // Field end:I
      31: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      34: ldc           #43                 // String , start:
      36: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_0
      40: getfield      #25                 // Field sstart:I
      43: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      46: ldc           #44                 // String , sprev:
      48: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: aload_0
      52: getfield      #45                 // Field sprev:I
      55: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      58: invokevirtual #46                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: invokevirtual #47                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      64: getstatic     #35                 // Field org/joni/Config.log:Ljava/io/PrintStream;
      67: new           #36                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #37                 // Method java/lang/StringBuilder."<init>":()V
      74: ldc           #48                 // String size:
      76: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: aload_0
      80: getfield      #42                 // Field end:I
      83: aload_0
      84: getfield      #17                 // Field str:I
      87: isub
      88: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      91: ldc           #49                 // String , start offset:
      93: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      96: aload_0
      97: getfield      #25                 // Field sstart:I
     100: aload_0
     101: getfield      #17                 // Field str:I
     104: isub
     105: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     108: invokevirtual #46                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     111: invokevirtual #47                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     114: return

  private void debugMatchLoop();
    Code:
       0: return

  protected final int matchAt(int, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #50                 // Field range:I
       5: aload_0
       6: iload_2
       7: putfield      #25                 // Field sstart:I
      10: aload_0
      11: iload_3
      12: putfield      #45                 // Field sprev:I
      15: aload_0
      16: iconst_0
      17: putfield      #6                  // Field stk:I
      20: aload_0
      21: iconst_0
      22: putfield      #51                 // Field ip:I
      25: aload_0
      26: invokevirtual #52                 // Method init:()V
      29: aload_0
      30: iconst_m1
      31: putfield      #53                 // Field bestLen:I
      34: aload_0
      35: iload_2
      36: putfield      #2                  // Field s:I
      39: aload_0
      40: getfield      #4                  // Field code:[I
      43: astore        4
      45: aload_0
      46: aload_0
      47: getfield      #2                  // Field s:I
      50: putfield      #54                 // Field sbegin:I
      53: aload         4
      55: aload_0
      56: dup
      57: getfield      #51                 // Field ip:I
      60: dup_x1
      61: iconst_1
      62: iadd
      63: putfield      #51                 // Field ip:I
      66: iaload
      67: tableswitch   { // 0 to 106
                     0: 1234
                     1: 508
                     2: 520
                     3: 527
                     4: 534
                     5: 541
                     6: 548
                     7: 555
                     8: 562
                     9: 569
                    10: 576
                    11: 583
                    12: 590
                    13: 597
                    14: 604
                    15: 611
                    16: 618
                    17: 625
                    18: 632
                    19: 639
                    20: 646
                    21: 653
                    22: 660
                    23: 667
                    24: 674
                    25: 681
                    26: 688
                    27: 695
                    28: 702
                    29: 723
                    30: 730
                    31: 737
                    32: 744
                    33: 751
                    34: 758
                    35: 765
                    36: 772
                    37: 779
                    38: 786
                    39: 793
                    40: 800
                    41: 849
                    42: 856
                    43: 863
                    44: 870
                    45: 877
                    46: 884
                    47: 891
                    48: 814
                    49: 807
                    50: 821
                    51: 835
                    52: 828
                    53: 842
                    54: 1239
                    55: 926
                    56: 933
                    57: 961
                    58: 968
                    59: 975
                    60: 982
                    61: 989
                    62: 996
                    63: 1010
                    64: 1003
                    65: 1017
                    66: 898
                    67: 905
                    68: 912
                    69: 919
                    70: 1024
                    71: 1031
                    72: 1038
                    73: 1045
                    74: 1052
                    75: 1059
                    76: 1066
                    77: 1073
                    78: 1080
                    79: 1087
                    80: 1094
                    81: 940
                    82: 947
                    83: 954
                    84: 709
                    85: 716
                    86: 1246
                    87: 1246
                    88: 1115
                    89: 1122
                    90: 1129
                    91: 1136
                    92: 1143
                    93: 1150
                    94: 1157
                    95: 1164
                    96: 1101
                    97: 1108
                    98: 1171
                    99: 1178
                   100: 1185
                   101: 1192
                   102: 1199
                   103: 1206
                   104: 1213
                   105: 1220
                   106: 1227
               default: 1246
          }
     508: aload_0
     509: invokespecial #55                 // Method opEnd:()Z
     512: ifeq          45
     515: aload_0
     516: invokespecial #56                 // Method finish:()I
     519: ireturn
     520: aload_0
     521: invokespecial #57                 // Method opExact1:()V
     524: goto          45
     527: aload_0
     528: invokespecial #58                 // Method opExact2:()V
     531: goto          45
     534: aload_0
     535: invokespecial #59                 // Method opExact3:()V
     538: goto          45
     541: aload_0
     542: invokespecial #60                 // Method opExact4:()V
     545: goto          45
     548: aload_0
     549: invokespecial #61                 // Method opExact5:()V
     552: goto          45
     555: aload_0
     556: invokespecial #62                 // Method opExactN:()V
     559: goto          45
     562: aload_0
     563: invokespecial #63                 // Method opExactMB2N1:()V
     566: goto          45
     569: aload_0
     570: invokespecial #64                 // Method opExactMB2N2:()V
     573: goto          45
     576: aload_0
     577: invokespecial #65                 // Method opExactMB2N3:()V
     580: goto          45
     583: aload_0
     584: invokespecial #66                 // Method opExactMB2N:()V
     587: goto          45
     590: aload_0
     591: invokespecial #67                 // Method opExactMB3N:()V
     594: goto          45
     597: aload_0
     598: invokespecial #68                 // Method opExactMBN:()V
     601: goto          45
     604: aload_0
     605: invokespecial #69                 // Method opExact1IC:()V
     608: goto          45
     611: aload_0
     612: invokespecial #70                 // Method opExactNIC:()V
     615: goto          45
     618: aload_0
     619: invokespecial #71                 // Method opCClass:()V
     622: goto          45
     625: aload_0
     626: invokespecial #72                 // Method opCClassMB:()V
     629: goto          45
     632: aload_0
     633: invokespecial #73                 // Method opCClassMIX:()V
     636: goto          45
     639: aload_0
     640: invokespecial #74                 // Method opCClassNot:()V
     643: goto          45
     646: aload_0
     647: invokespecial #75                 // Method opCClassMBNot:()V
     650: goto          45
     653: aload_0
     654: invokespecial #76                 // Method opCClassMIXNot:()V
     657: goto          45
     660: aload_0
     661: invokespecial #77                 // Method opCClassNode:()V
     664: goto          45
     667: aload_0
     668: invokespecial #78                 // Method opAnyChar:()V
     671: goto          45
     674: aload_0
     675: invokespecial #79                 // Method opAnyCharML:()V
     678: goto          45
     681: aload_0
     682: invokespecial #80                 // Method opAnyCharStar:()V
     685: goto          45
     688: aload_0
     689: invokespecial #81                 // Method opAnyCharMLStar:()V
     692: goto          45
     695: aload_0
     696: invokespecial #82                 // Method opAnyCharStarPeekNext:()V
     699: goto          45
     702: aload_0
     703: invokespecial #83                 // Method opAnyCharMLStarPeekNext:()V
     706: goto          45
     709: aload_0
     710: invokespecial #84                 // Method opStateCheckAnyCharStar:()V
     713: goto          45
     716: aload_0
     717: invokespecial #85                 // Method opStateCheckAnyCharMLStar:()V
     720: goto          45
     723: aload_0
     724: invokespecial #86                 // Method opWord:()V
     727: goto          45
     730: aload_0
     731: invokespecial #87                 // Method opNotWord:()V
     734: goto          45
     737: aload_0
     738: invokespecial #88                 // Method opWordBound:()V
     741: goto          45
     744: aload_0
     745: invokespecial #89                 // Method opNotWordBound:()V
     748: goto          45
     751: aload_0
     752: invokespecial #90                 // Method opWordBegin:()V
     755: goto          45
     758: aload_0
     759: invokespecial #91                 // Method opWordEnd:()V
     762: goto          45
     765: aload_0
     766: invokespecial #92                 // Method opBeginBuf:()V
     769: goto          45
     772: aload_0
     773: invokespecial #93                 // Method opEndBuf:()V
     776: goto          45
     779: aload_0
     780: invokespecial #94                 // Method opBeginLine:()V
     783: goto          45
     786: aload_0
     787: invokespecial #95                 // Method opEndLine:()V
     790: goto          45
     793: aload_0
     794: invokespecial #96                 // Method opSemiEndBuf:()V
     797: goto          45
     800: aload_0
     801: invokespecial #97                 // Method opBeginPosition:()V
     804: goto          45
     807: aload_0
     808: invokespecial #98                 // Method opMemoryStartPush:()V
     811: goto          45
     814: aload_0
     815: invokespecial #99                 // Method opMemoryStart:()V
     818: goto          45
     821: aload_0
     822: invokespecial #100                // Method opMemoryEndPush:()V
     825: goto          45
     828: aload_0
     829: invokespecial #101                // Method opMemoryEnd:()V
     832: goto          45
     835: aload_0
     836: invokespecial #102                // Method opMemoryEndPushRec:()V
     839: goto          45
     842: aload_0
     843: invokespecial #103                // Method opMemoryEndRec:()V
     846: goto          45
     849: aload_0
     850: invokespecial #104                // Method opBackRef1:()V
     853: goto          45
     856: aload_0
     857: invokespecial #105                // Method opBackRef2:()V
     860: goto          45
     863: aload_0
     864: invokespecial #106                // Method opBackRefN:()V
     867: goto          45
     870: aload_0
     871: invokespecial #107                // Method opBackRefNIC:()V
     874: goto          45
     877: aload_0
     878: invokespecial #108                // Method opBackRefMulti:()V
     881: goto          45
     884: aload_0
     885: invokespecial #109                // Method opBackRefMultiIC:()V
     888: goto          45
     891: aload_0
     892: invokespecial #110                // Method opBackRefAtLevel:()V
     895: goto          45
     898: aload_0
     899: invokespecial #111                // Method opNullCheckStart:()V
     902: goto          45
     905: aload_0
     906: invokespecial #112                // Method opNullCheckEnd:()V
     909: goto          45
     912: aload_0
     913: invokespecial #113                // Method opNullCheckEndMemST:()V
     916: goto          45
     919: aload_0
     920: invokespecial #114                // Method opNullCheckEndMemSTPush:()V
     923: goto          45
     926: aload_0
     927: invokespecial #115                // Method opJump:()V
     930: goto          45
     933: aload_0
     934: invokespecial #116                // Method opPush:()V
     937: goto          45
     940: aload_0
     941: invokespecial #117                // Method opStateCheckPush:()V
     944: goto          45
     947: aload_0
     948: invokespecial #118                // Method opStateCheckPushOrJump:()V
     951: goto          45
     954: aload_0
     955: invokespecial #119                // Method opStateCheck:()V
     958: goto          45
     961: aload_0
     962: invokespecial #120                // Method opPop:()V
     965: goto          45
     968: aload_0
     969: invokespecial #121                // Method opPushOrJumpExact1:()V
     972: goto          45
     975: aload_0
     976: invokespecial #122                // Method opPushIfPeekNext:()V
     979: goto          45
     982: aload_0
     983: invokespecial #123                // Method opRepeat:()V
     986: goto          45
     989: aload_0
     990: invokespecial #124                // Method opRepeatNG:()V
     993: goto          45
     996: aload_0
     997: invokespecial #125                // Method opRepeatInc:()V
    1000: goto          45
    1003: aload_0
    1004: invokespecial #126                // Method opRepeatIncSG:()V
    1007: goto          45
    1010: aload_0
    1011: invokespecial #127                // Method opRepeatIncNG:()V
    1014: goto          45
    1017: aload_0
    1018: invokespecial #128                // Method opRepeatIncNGSG:()V
    1021: goto          45
    1024: aload_0
    1025: invokespecial #129                // Method opPushPos:()V
    1028: goto          45
    1031: aload_0
    1032: invokespecial #130                // Method opPopPos:()V
    1035: goto          45
    1038: aload_0
    1039: invokespecial #131                // Method opPushPosNot:()V
    1042: goto          45
    1045: aload_0
    1046: invokespecial #132                // Method opFailPos:()V
    1049: goto          45
    1052: aload_0
    1053: invokespecial #133                // Method opPushStopBT:()V
    1056: goto          45
    1059: aload_0
    1060: invokespecial #134                // Method opPopStopBT:()V
    1063: goto          45
    1066: aload_0
    1067: invokespecial #135                // Method opLookBehind:()V
    1070: goto          45
    1073: aload_0
    1074: invokespecial #136                // Method opPushLookBehindNot:()V
    1077: goto          45
    1080: aload_0
    1081: invokespecial #137                // Method opFailLookBehindNot:()V
    1084: goto          45
    1087: aload_0
    1088: invokespecial #138                // Method opCall:()V
    1091: goto          45
    1094: aload_0
    1095: invokespecial #139                // Method opReturn:()V
    1098: goto          45
    1101: aload_0
    1102: invokespecial #140                // Method opCClassSb:()V
    1105: goto          45
    1108: aload_0
    1109: invokespecial #141                // Method opCClassNotSb:()V
    1112: goto          45
    1115: aload_0
    1116: invokespecial #142                // Method opAnyCharSb:()V
    1119: goto          45
    1122: aload_0
    1123: invokespecial #143                // Method opAnyCharMLSb:()V
    1126: goto          45
    1129: aload_0
    1130: invokespecial #144                // Method opAnyCharStarSb:()V
    1133: goto          45
    1136: aload_0
    1137: invokespecial #145                // Method opAnyCharMLStarSb:()V
    1140: goto          45
    1143: aload_0
    1144: invokespecial #146                // Method opAnyCharStarPeekNextSb:()V
    1147: goto          45
    1150: aload_0
    1151: invokespecial #147                // Method opAnyCharMLStarPeekNextSb:()V
    1154: goto          45
    1157: aload_0
    1158: invokespecial #148                // Method opStateCheckAnyCharStarSb:()V
    1161: goto          45
    1164: aload_0
    1165: invokespecial #149                // Method opStateCheckAnyCharMLStarSb:()V
    1168: goto          45
    1171: aload_0
    1172: invokespecial #150                // Method opWordSb:()V
    1175: goto          45
    1178: aload_0
    1179: invokespecial #151                // Method opNotWordSb:()V
    1182: goto          45
    1185: aload_0
    1186: invokespecial #152                // Method opWordBoundSb:()V
    1189: goto          45
    1192: aload_0
    1193: invokespecial #153                // Method opNotWordBoundSb:()V
    1196: goto          45
    1199: aload_0
    1200: invokespecial #154                // Method opWordBeginSb:()V
    1203: goto          45
    1206: aload_0
    1207: invokespecial #155                // Method opWordEndSb:()V
    1210: goto          45
    1213: aload_0
    1214: invokespecial #156                // Method opLookBehindSb:()V
    1217: goto          45
    1220: aload_0
    1221: invokespecial #157                // Method opExact1ICSb:()V
    1224: goto          45
    1227: aload_0
    1228: invokespecial #158                // Method opExactNICSb:()V
    1231: goto          45
    1234: aload_0
    1235: invokespecial #56                 // Method finish:()I
    1238: ireturn
    1239: aload_0
    1240: invokespecial #159                // Method opFail:()V
    1243: goto          45
    1246: new           #160                // class org/joni/exception/InternalException
    1249: dup
    1250: ldc           #161                // String undefined bytecode (bug)
    1252: invokespecial #162                // Method org/joni/exception/InternalException."<init>":(Ljava/lang/String;)V
    1255: athrow

  private boolean opEnd();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #25                 // Field sstart:I
       8: isub
       9: istore_1
      10: iload_1
      11: aload_0
      12: getfield      #53                 // Field bestLen:I
      15: if_icmple     318
      18: aload_0
      19: getfield      #10                 // Field regex:Lorg/joni/Regex;
      22: getfield      #163                // Field org/joni/Regex.options:I
      25: invokestatic  #164                // Method org/joni/Option.isFindLongest:(I)Z
      28: ifeq          60
      31: iload_1
      32: aload_0
      33: getfield      #165                // Field msaBestLen:I
      36: if_icmple     55
      39: aload_0
      40: iload_1
      41: putfield      #165                // Field msaBestLen:I
      44: aload_0
      45: aload_0
      46: getfield      #25                 // Field sstart:I
      49: putfield      #166                // Field msaBestS:I
      52: goto          60
      55: aload_0
      56: invokespecial #167                // Method endBestLength:()Z
      59: ireturn
      60: aload_0
      61: iload_1
      62: putfield      #53                 // Field bestLen:I
      65: aload_0
      66: getfield      #168                // Field msaRegion:Lorg/joni/Region;
      69: astore_2
      70: aload_2
      71: ifnull        289
      74: aload_2
      75: getfield      #169                // Field org/joni/Region.beg:[I
      78: iconst_0
      79: aload_0
      80: aload_0
      81: getfield      #25                 // Field sstart:I
      84: aload_0
      85: getfield      #17                 // Field str:I
      88: isub
      89: dup_x1
      90: putfield      #170                // Field msaBegin:I
      93: iastore
      94: aload_2
      95: getfield      #171                // Field org/joni/Region.end:[I
      98: iconst_0
      99: aload_0
     100: aload_0
     101: getfield      #2                  // Field s:I
     104: aload_0
     105: getfield      #17                 // Field str:I
     108: isub
     109: dup_x1
     110: putfield      #172                // Field msaEnd:I
     113: iastore
     114: iconst_1
     115: istore_3
     116: iload_3
     117: aload_0
     118: getfield      #10                 // Field regex:Lorg/joni/Regex;
     121: getfield      #173                // Field org/joni/Regex.numMem:I
     124: if_icmpgt     286
     127: aload_0
     128: getfield      #174                // Field repeatStk:[I
     131: aload_0
     132: getfield      #175                // Field memEndStk:I
     135: iload_3
     136: iadd
     137: iaload
     138: iconst_m1
     139: if_icmpeq     266
     142: aload_2
     143: getfield      #169                // Field org/joni/Region.beg:[I
     146: iload_3
     147: aload_0
     148: getfield      #10                 // Field regex:Lorg/joni/Regex;
     151: getfield      #176                // Field org/joni/Regex.btMemStart:I
     154: iload_3
     155: invokestatic  #12                 // Method org/joni/BitStatus.bsAt:(II)Z
     158: ifeq          188
     161: aload_0
     162: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
     165: aload_0
     166: getfield      #174                // Field repeatStk:[I
     169: aload_0
     170: getfield      #177                // Field memStartStk:I
     173: iload_3
     174: iadd
     175: iaload
     176: aaload
     177: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
     180: aload_0
     181: getfield      #17                 // Field str:I
     184: isub
     185: goto          204
     188: aload_0
     189: getfield      #174                // Field repeatStk:[I
     192: aload_0
     193: getfield      #177                // Field memStartStk:I
     196: iload_3
     197: iadd
     198: iaload
     199: aload_0
     200: getfield      #17                 // Field str:I
     203: isub
     204: iastore
     205: aload_2
     206: getfield      #171                // Field org/joni/Region.end:[I
     209: iload_3
     210: aload_0
     211: getfield      #10                 // Field regex:Lorg/joni/Regex;
     214: getfield      #178                // Field org/joni/Regex.btMemEnd:I
     217: iload_3
     218: invokestatic  #12                 // Method org/joni/BitStatus.bsAt:(II)Z
     221: ifeq          246
     224: aload_0
     225: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
     228: aload_0
     229: getfield      #174                // Field repeatStk:[I
     232: aload_0
     233: getfield      #175                // Field memEndStk:I
     236: iload_3
     237: iadd
     238: iaload
     239: aaload
     240: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
     243: goto          262
     246: aload_0
     247: getfield      #174                // Field repeatStk:[I
     250: aload_0
     251: getfield      #175                // Field memEndStk:I
     254: iload_3
     255: iadd
     256: iaload
     257: aload_0
     258: getfield      #17                 // Field str:I
     261: isub
     262: iastore
     263: goto          280
     266: aload_2
     267: getfield      #169                // Field org/joni/Region.beg:[I
     270: iload_3
     271: aload_2
     272: getfield      #171                // Field org/joni/Region.end:[I
     275: iload_3
     276: iconst_m1
     277: dup_x2
     278: iastore
     279: iastore
     280: iinc          3, 1
     283: goto          116
     286: goto          315
     289: aload_0
     290: aload_0
     291: getfield      #25                 // Field sstart:I
     294: aload_0
     295: getfield      #17                 // Field str:I
     298: isub
     299: putfield      #170                // Field msaBegin:I
     302: aload_0
     303: aload_0
     304: getfield      #2                  // Field s:I
     307: aload_0
     308: getfield      #17                 // Field str:I
     311: isub
     312: putfield      #172                // Field msaEnd:I
     315: goto          357
     318: aload_0
     319: getfield      #168                // Field msaRegion:Lorg/joni/Region;
     322: astore_2
     323: aload_0
     324: getfield      #10                 // Field regex:Lorg/joni/Regex;
     327: getfield      #163                // Field org/joni/Regex.options:I
     330: invokestatic  #179                // Method org/joni/Option.isPosixRegion:(I)Z
     333: ifne          357
     336: aload_2
     337: ifnull        347
     340: aload_2
     341: invokevirtual #180                // Method org/joni/Region.clear:()V
     344: goto          357
     347: aload_0
     348: aload_0
     349: iconst_0
     350: dup_x1
     351: putfield      #172                // Field msaEnd:I
     354: putfield      #170                // Field msaBegin:I
     357: aload_0
     358: invokespecial #167                // Method endBestLength:()Z
     361: ireturn

  private boolean endBestLength();
    Code:
       0: aload_0
       1: getfield      #10                 // Field regex:Lorg/joni/Regex;
       4: getfield      #163                // Field org/joni/Regex.options:I
       7: invokestatic  #181                // Method org/joni/Option.isFindCondition:(I)Z
      10: ifeq          78
      13: aload_0
      14: getfield      #10                 // Field regex:Lorg/joni/Regex;
      17: getfield      #163                // Field org/joni/Regex.options:I
      20: invokestatic  #182                // Method org/joni/Option.isFindNotEmpty:(I)Z
      23: ifeq          48
      26: aload_0
      27: getfield      #2                  // Field s:I
      30: aload_0
      31: getfield      #25                 // Field sstart:I
      34: if_icmpne     48
      37: aload_0
      38: iconst_m1
      39: putfield      #53                 // Field bestLen:I
      42: aload_0
      43: invokespecial #159                // Method opFail:()V
      46: iconst_0
      47: ireturn
      48: aload_0
      49: getfield      #10                 // Field regex:Lorg/joni/Regex;
      52: getfield      #163                // Field org/joni/Regex.options:I
      55: invokestatic  #164                // Method org/joni/Option.isFindLongest:(I)Z
      58: ifeq          78
      61: aload_0
      62: getfield      #2                  // Field s:I
      65: aload_0
      66: getfield      #50                 // Field range:I
      69: if_icmpge     78
      72: aload_0
      73: invokespecial #159                // Method opFail:()V
      76: iconst_0
      77: ireturn
      78: iconst_1
      79: ireturn

  private void opExact1();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     39
      11: aload_0
      12: getfield      #4                  // Field code:[I
      15: aload_0
      16: getfield      #51                 // Field ip:I
      19: iaload
      20: aload_0
      21: getfield      #33                 // Field bytes:[B
      24: aload_0
      25: dup
      26: getfield      #2                  // Field s:I
      29: dup_x1
      30: iconst_1
      31: iadd
      32: putfield      #2                  // Field s:I
      35: baload
      36: if_icmpeq     44
      39: aload_0
      40: invokespecial #159                // Method opFail:()V
      43: return
      44: aload_0
      45: dup
      46: getfield      #51                 // Field ip:I
      49: iconst_1
      50: iadd
      51: putfield      #51                 // Field ip:I
      54: aload_0
      55: aload_0
      56: getfield      #54                 // Field sbegin:I
      59: putfield      #45                 // Field sprev:I
      62: return

  private void opExact2();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: iconst_2
       5: iadd
       6: aload_0
       7: getfield      #50                 // Field range:I
      10: if_icmple     18
      13: aload_0
      14: invokespecial #159                // Method opFail:()V
      17: return
      18: aload_0
      19: getfield      #4                  // Field code:[I
      22: aload_0
      23: getfield      #51                 // Field ip:I
      26: iaload
      27: aload_0
      28: getfield      #33                 // Field bytes:[B
      31: aload_0
      32: getfield      #2                  // Field s:I
      35: baload
      36: if_icmpeq     44
      39: aload_0
      40: invokespecial #159                // Method opFail:()V
      43: return
      44: aload_0
      45: dup
      46: getfield      #51                 // Field ip:I
      49: iconst_1
      50: iadd
      51: putfield      #51                 // Field ip:I
      54: aload_0
      55: dup
      56: getfield      #2                  // Field s:I
      59: iconst_1
      60: iadd
      61: putfield      #2                  // Field s:I
      64: aload_0
      65: getfield      #4                  // Field code:[I
      68: aload_0
      69: getfield      #51                 // Field ip:I
      72: iaload
      73: aload_0
      74: getfield      #33                 // Field bytes:[B
      77: aload_0
      78: getfield      #2                  // Field s:I
      81: baload
      82: if_icmpeq     90
      85: aload_0
      86: invokespecial #159                // Method opFail:()V
      89: return
      90: aload_0
      91: aload_0
      92: getfield      #2                  // Field s:I
      95: putfield      #45                 // Field sprev:I
      98: aload_0
      99: dup
     100: getfield      #51                 // Field ip:I
     103: iconst_1
     104: iadd
     105: putfield      #51                 // Field ip:I
     108: aload_0
     109: dup
     110: getfield      #2                  // Field s:I
     113: iconst_1
     114: iadd
     115: putfield      #2                  // Field s:I
     118: return

  private void opExact3();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: iconst_3
       5: iadd
       6: aload_0
       7: getfield      #50                 // Field range:I
      10: if_icmple     18
      13: aload_0
      14: invokespecial #159                // Method opFail:()V
      17: return
      18: aload_0
      19: getfield      #4                  // Field code:[I
      22: aload_0
      23: getfield      #51                 // Field ip:I
      26: iaload
      27: aload_0
      28: getfield      #33                 // Field bytes:[B
      31: aload_0
      32: getfield      #2                  // Field s:I
      35: baload
      36: if_icmpeq     44
      39: aload_0
      40: invokespecial #159                // Method opFail:()V
      43: return
      44: aload_0
      45: dup
      46: getfield      #51                 // Field ip:I
      49: iconst_1
      50: iadd
      51: putfield      #51                 // Field ip:I
      54: aload_0
      55: dup
      56: getfield      #2                  // Field s:I
      59: iconst_1
      60: iadd
      61: putfield      #2                  // Field s:I
      64: aload_0
      65: getfield      #4                  // Field code:[I
      68: aload_0
      69: getfield      #51                 // Field ip:I
      72: iaload
      73: aload_0
      74: getfield      #33                 // Field bytes:[B
      77: aload_0
      78: getfield      #2                  // Field s:I
      81: baload
      82: if_icmpeq     90
      85: aload_0
      86: invokespecial #159                // Method opFail:()V
      89: return
      90: aload_0
      91: dup
      92: getfield      #51                 // Field ip:I
      95: iconst_1
      96: iadd
      97: putfield      #51                 // Field ip:I
     100: aload_0
     101: dup
     102: getfield      #2                  // Field s:I
     105: iconst_1
     106: iadd
     107: putfield      #2                  // Field s:I
     110: aload_0
     111: getfield      #4                  // Field code:[I
     114: aload_0
     115: getfield      #51                 // Field ip:I
     118: iaload
     119: aload_0
     120: getfield      #33                 // Field bytes:[B
     123: aload_0
     124: getfield      #2                  // Field s:I
     127: baload
     128: if_icmpeq     136
     131: aload_0
     132: invokespecial #159                // Method opFail:()V
     135: return
     136: aload_0
     137: aload_0
     138: getfield      #2                  // Field s:I
     141: putfield      #45                 // Field sprev:I
     144: aload_0
     145: dup
     146: getfield      #51                 // Field ip:I
     149: iconst_1
     150: iadd
     151: putfield      #51                 // Field ip:I
     154: aload_0
     155: dup
     156: getfield      #2                  // Field s:I
     159: iconst_1
     160: iadd
     161: putfield      #2                  // Field s:I
     164: return

  private void opExact4();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: iconst_4
       5: iadd
       6: aload_0
       7: getfield      #50                 // Field range:I
      10: if_icmple     18
      13: aload_0
      14: invokespecial #159                // Method opFail:()V
      17: return
      18: aload_0
      19: getfield      #4                  // Field code:[I
      22: aload_0
      23: getfield      #51                 // Field ip:I
      26: iaload
      27: aload_0
      28: getfield      #33                 // Field bytes:[B
      31: aload_0
      32: getfield      #2                  // Field s:I
      35: baload
      36: if_icmpeq     44
      39: aload_0
      40: invokespecial #159                // Method opFail:()V
      43: return
      44: aload_0
      45: dup
      46: getfield      #51                 // Field ip:I
      49: iconst_1
      50: iadd
      51: putfield      #51                 // Field ip:I
      54: aload_0
      55: dup
      56: getfield      #2                  // Field s:I
      59: iconst_1
      60: iadd
      61: putfield      #2                  // Field s:I
      64: aload_0
      65: getfield      #4                  // Field code:[I
      68: aload_0
      69: getfield      #51                 // Field ip:I
      72: iaload
      73: aload_0
      74: getfield      #33                 // Field bytes:[B
      77: aload_0
      78: getfield      #2                  // Field s:I
      81: baload
      82: if_icmpeq     90
      85: aload_0
      86: invokespecial #159                // Method opFail:()V
      89: return
      90: aload_0
      91: dup
      92: getfield      #51                 // Field ip:I
      95: iconst_1
      96: iadd
      97: putfield      #51                 // Field ip:I
     100: aload_0
     101: dup
     102: getfield      #2                  // Field s:I
     105: iconst_1
     106: iadd
     107: putfield      #2                  // Field s:I
     110: aload_0
     111: getfield      #4                  // Field code:[I
     114: aload_0
     115: getfield      #51                 // Field ip:I
     118: iaload
     119: aload_0
     120: getfield      #33                 // Field bytes:[B
     123: aload_0
     124: getfield      #2                  // Field s:I
     127: baload
     128: if_icmpeq     136
     131: aload_0
     132: invokespecial #159                // Method opFail:()V
     135: return
     136: aload_0
     137: dup
     138: getfield      #51                 // Field ip:I
     141: iconst_1
     142: iadd
     143: putfield      #51                 // Field ip:I
     146: aload_0
     147: dup
     148: getfield      #2                  // Field s:I
     151: iconst_1
     152: iadd
     153: putfield      #2                  // Field s:I
     156: aload_0
     157: getfield      #4                  // Field code:[I
     160: aload_0
     161: getfield      #51                 // Field ip:I
     164: iaload
     165: aload_0
     166: getfield      #33                 // Field bytes:[B
     169: aload_0
     170: getfield      #2                  // Field s:I
     173: baload
     174: if_icmpeq     182
     177: aload_0
     178: invokespecial #159                // Method opFail:()V
     181: return
     182: aload_0
     183: aload_0
     184: getfield      #2                  // Field s:I
     187: putfield      #45                 // Field sprev:I
     190: aload_0
     191: dup
     192: getfield      #51                 // Field ip:I
     195: iconst_1
     196: iadd
     197: putfield      #51                 // Field ip:I
     200: aload_0
     201: dup
     202: getfield      #2                  // Field s:I
     205: iconst_1
     206: iadd
     207: putfield      #2                  // Field s:I
     210: return

  private void opExact5();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: iconst_5
       5: iadd
       6: aload_0
       7: getfield      #50                 // Field range:I
      10: if_icmple     18
      13: aload_0
      14: invokespecial #159                // Method opFail:()V
      17: return
      18: aload_0
      19: getfield      #4                  // Field code:[I
      22: aload_0
      23: getfield      #51                 // Field ip:I
      26: iaload
      27: aload_0
      28: getfield      #33                 // Field bytes:[B
      31: aload_0
      32: getfield      #2                  // Field s:I
      35: baload
      36: if_icmpeq     44
      39: aload_0
      40: invokespecial #159                // Method opFail:()V
      43: return
      44: aload_0
      45: dup
      46: getfield      #51                 // Field ip:I
      49: iconst_1
      50: iadd
      51: putfield      #51                 // Field ip:I
      54: aload_0
      55: dup
      56: getfield      #2                  // Field s:I
      59: iconst_1
      60: iadd
      61: putfield      #2                  // Field s:I
      64: aload_0
      65: getfield      #4                  // Field code:[I
      68: aload_0
      69: getfield      #51                 // Field ip:I
      72: iaload
      73: aload_0
      74: getfield      #33                 // Field bytes:[B
      77: aload_0
      78: getfield      #2                  // Field s:I
      81: baload
      82: if_icmpeq     90
      85: aload_0
      86: invokespecial #159                // Method opFail:()V
      89: return
      90: aload_0
      91: dup
      92: getfield      #51                 // Field ip:I
      95: iconst_1
      96: iadd
      97: putfield      #51                 // Field ip:I
     100: aload_0
     101: dup
     102: getfield      #2                  // Field s:I
     105: iconst_1
     106: iadd
     107: putfield      #2                  // Field s:I
     110: aload_0
     111: getfield      #4                  // Field code:[I
     114: aload_0
     115: getfield      #51                 // Field ip:I
     118: iaload
     119: aload_0
     120: getfield      #33                 // Field bytes:[B
     123: aload_0
     124: getfield      #2                  // Field s:I
     127: baload
     128: if_icmpeq     136
     131: aload_0
     132: invokespecial #159                // Method opFail:()V
     135: return
     136: aload_0
     137: dup
     138: getfield      #51                 // Field ip:I
     141: iconst_1
     142: iadd
     143: putfield      #51                 // Field ip:I
     146: aload_0
     147: dup
     148: getfield      #2                  // Field s:I
     151: iconst_1
     152: iadd
     153: putfield      #2                  // Field s:I
     156: aload_0
     157: getfield      #4                  // Field code:[I
     160: aload_0
     161: getfield      #51                 // Field ip:I
     164: iaload
     165: aload_0
     166: getfield      #33                 // Field bytes:[B
     169: aload_0
     170: getfield      #2                  // Field s:I
     173: baload
     174: if_icmpeq     182
     177: aload_0
     178: invokespecial #159                // Method opFail:()V
     181: return
     182: aload_0
     183: dup
     184: getfield      #51                 // Field ip:I
     187: iconst_1
     188: iadd
     189: putfield      #51                 // Field ip:I
     192: aload_0
     193: dup
     194: getfield      #2                  // Field s:I
     197: iconst_1
     198: iadd
     199: putfield      #2                  // Field s:I
     202: aload_0
     203: getfield      #4                  // Field code:[I
     206: aload_0
     207: getfield      #51                 // Field ip:I
     210: iaload
     211: aload_0
     212: getfield      #33                 // Field bytes:[B
     215: aload_0
     216: getfield      #2                  // Field s:I
     219: baload
     220: if_icmpeq     228
     223: aload_0
     224: invokespecial #159                // Method opFail:()V
     227: return
     228: aload_0
     229: aload_0
     230: getfield      #2                  // Field s:I
     233: putfield      #45                 // Field sprev:I
     236: aload_0
     237: dup
     238: getfield      #51                 // Field ip:I
     241: iconst_1
     242: iadd
     243: putfield      #51                 // Field ip:I
     246: aload_0
     247: dup
     248: getfield      #2                  // Field s:I
     251: iconst_1
     252: iadd
     253: putfield      #2                  // Field s:I
     256: return

  private void opExactN();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #2                  // Field s:I
      21: iload_1
      22: iadd
      23: aload_0
      24: getfield      #50                 // Field range:I
      27: if_icmple     35
      30: aload_0
      31: invokespecial #159                // Method opFail:()V
      34: return
      35: iload_1
      36: dup
      37: iconst_1
      38: isub
      39: istore_1
      40: ifle          83
      43: aload_0
      44: getfield      #4                  // Field code:[I
      47: aload_0
      48: dup
      49: getfield      #51                 // Field ip:I
      52: dup_x1
      53: iconst_1
      54: iadd
      55: putfield      #51                 // Field ip:I
      58: iaload
      59: aload_0
      60: getfield      #33                 // Field bytes:[B
      63: aload_0
      64: dup
      65: getfield      #2                  // Field s:I
      68: dup_x1
      69: iconst_1
      70: iadd
      71: putfield      #2                  // Field s:I
      74: baload
      75: if_icmpeq     35
      78: aload_0
      79: invokespecial #159                // Method opFail:()V
      82: return
      83: aload_0
      84: aload_0
      85: getfield      #2                  // Field s:I
      88: iconst_1
      89: isub
      90: putfield      #45                 // Field sprev:I
      93: return

  private void opExactMB2N1();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: iconst_2
       5: iadd
       6: aload_0
       7: getfield      #50                 // Field range:I
      10: if_icmple     18
      13: aload_0
      14: invokespecial #159                // Method opFail:()V
      17: return
      18: aload_0
      19: getfield      #4                  // Field code:[I
      22: aload_0
      23: getfield      #51                 // Field ip:I
      26: iaload
      27: aload_0
      28: getfield      #33                 // Field bytes:[B
      31: aload_0
      32: getfield      #2                  // Field s:I
      35: baload
      36: if_icmpeq     44
      39: aload_0
      40: invokespecial #159                // Method opFail:()V
      43: return
      44: aload_0
      45: dup
      46: getfield      #51                 // Field ip:I
      49: iconst_1
      50: iadd
      51: putfield      #51                 // Field ip:I
      54: aload_0
      55: dup
      56: getfield      #2                  // Field s:I
      59: iconst_1
      60: iadd
      61: putfield      #2                  // Field s:I
      64: aload_0
      65: getfield      #4                  // Field code:[I
      68: aload_0
      69: getfield      #51                 // Field ip:I
      72: iaload
      73: aload_0
      74: getfield      #33                 // Field bytes:[B
      77: aload_0
      78: getfield      #2                  // Field s:I
      81: baload
      82: if_icmpeq     90
      85: aload_0
      86: invokespecial #159                // Method opFail:()V
      89: return
      90: aload_0
      91: dup
      92: getfield      #51                 // Field ip:I
      95: iconst_1
      96: iadd
      97: putfield      #51                 // Field ip:I
     100: aload_0
     101: dup
     102: getfield      #2                  // Field s:I
     105: iconst_1
     106: iadd
     107: putfield      #2                  // Field s:I
     110: aload_0
     111: aload_0
     112: getfield      #54                 // Field sbegin:I
     115: putfield      #45                 // Field sprev:I
     118: return

  private void opExactMB2N2();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: iconst_4
       5: iadd
       6: aload_0
       7: getfield      #50                 // Field range:I
      10: if_icmple     18
      13: aload_0
      14: invokespecial #159                // Method opFail:()V
      17: return
      18: aload_0
      19: getfield      #4                  // Field code:[I
      22: aload_0
      23: getfield      #51                 // Field ip:I
      26: iaload
      27: aload_0
      28: getfield      #33                 // Field bytes:[B
      31: aload_0
      32: getfield      #2                  // Field s:I
      35: baload
      36: if_icmpeq     44
      39: aload_0
      40: invokespecial #159                // Method opFail:()V
      43: return
      44: aload_0
      45: dup
      46: getfield      #51                 // Field ip:I
      49: iconst_1
      50: iadd
      51: putfield      #51                 // Field ip:I
      54: aload_0
      55: dup
      56: getfield      #2                  // Field s:I
      59: iconst_1
      60: iadd
      61: putfield      #2                  // Field s:I
      64: aload_0
      65: getfield      #4                  // Field code:[I
      68: aload_0
      69: getfield      #51                 // Field ip:I
      72: iaload
      73: aload_0
      74: getfield      #33                 // Field bytes:[B
      77: aload_0
      78: getfield      #2                  // Field s:I
      81: baload
      82: if_icmpeq     90
      85: aload_0
      86: invokespecial #159                // Method opFail:()V
      89: return
      90: aload_0
      91: dup
      92: getfield      #51                 // Field ip:I
      95: iconst_1
      96: iadd
      97: putfield      #51                 // Field ip:I
     100: aload_0
     101: dup
     102: getfield      #2                  // Field s:I
     105: iconst_1
     106: iadd
     107: putfield      #2                  // Field s:I
     110: aload_0
     111: aload_0
     112: getfield      #2                  // Field s:I
     115: putfield      #45                 // Field sprev:I
     118: aload_0
     119: getfield      #4                  // Field code:[I
     122: aload_0
     123: getfield      #51                 // Field ip:I
     126: iaload
     127: aload_0
     128: getfield      #33                 // Field bytes:[B
     131: aload_0
     132: getfield      #2                  // Field s:I
     135: baload
     136: if_icmpeq     144
     139: aload_0
     140: invokespecial #159                // Method opFail:()V
     143: return
     144: aload_0
     145: dup
     146: getfield      #51                 // Field ip:I
     149: iconst_1
     150: iadd
     151: putfield      #51                 // Field ip:I
     154: aload_0
     155: dup
     156: getfield      #2                  // Field s:I
     159: iconst_1
     160: iadd
     161: putfield      #2                  // Field s:I
     164: aload_0
     165: getfield      #4                  // Field code:[I
     168: aload_0
     169: getfield      #51                 // Field ip:I
     172: iaload
     173: aload_0
     174: getfield      #33                 // Field bytes:[B
     177: aload_0
     178: getfield      #2                  // Field s:I
     181: baload
     182: if_icmpeq     190
     185: aload_0
     186: invokespecial #159                // Method opFail:()V
     189: return
     190: aload_0
     191: dup
     192: getfield      #51                 // Field ip:I
     195: iconst_1
     196: iadd
     197: putfield      #51                 // Field ip:I
     200: aload_0
     201: dup
     202: getfield      #2                  // Field s:I
     205: iconst_1
     206: iadd
     207: putfield      #2                  // Field s:I
     210: return

  private void opExactMB2N3();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: bipush        6
       6: iadd
       7: aload_0
       8: getfield      #50                 // Field range:I
      11: if_icmple     19
      14: aload_0
      15: invokespecial #159                // Method opFail:()V
      18: return
      19: aload_0
      20: getfield      #4                  // Field code:[I
      23: aload_0
      24: getfield      #51                 // Field ip:I
      27: iaload
      28: aload_0
      29: getfield      #33                 // Field bytes:[B
      32: aload_0
      33: getfield      #2                  // Field s:I
      36: baload
      37: if_icmpeq     45
      40: aload_0
      41: invokespecial #159                // Method opFail:()V
      44: return
      45: aload_0
      46: dup
      47: getfield      #51                 // Field ip:I
      50: iconst_1
      51: iadd
      52: putfield      #51                 // Field ip:I
      55: aload_0
      56: dup
      57: getfield      #2                  // Field s:I
      60: iconst_1
      61: iadd
      62: putfield      #2                  // Field s:I
      65: aload_0
      66: getfield      #4                  // Field code:[I
      69: aload_0
      70: getfield      #51                 // Field ip:I
      73: iaload
      74: aload_0
      75: getfield      #33                 // Field bytes:[B
      78: aload_0
      79: getfield      #2                  // Field s:I
      82: baload
      83: if_icmpeq     91
      86: aload_0
      87: invokespecial #159                // Method opFail:()V
      90: return
      91: aload_0
      92: dup
      93: getfield      #51                 // Field ip:I
      96: iconst_1
      97: iadd
      98: putfield      #51                 // Field ip:I
     101: aload_0
     102: dup
     103: getfield      #2                  // Field s:I
     106: iconst_1
     107: iadd
     108: putfield      #2                  // Field s:I
     111: aload_0
     112: getfield      #4                  // Field code:[I
     115: aload_0
     116: getfield      #51                 // Field ip:I
     119: iaload
     120: aload_0
     121: getfield      #33                 // Field bytes:[B
     124: aload_0
     125: getfield      #2                  // Field s:I
     128: baload
     129: if_icmpeq     137
     132: aload_0
     133: invokespecial #159                // Method opFail:()V
     136: return
     137: aload_0
     138: dup
     139: getfield      #51                 // Field ip:I
     142: iconst_1
     143: iadd
     144: putfield      #51                 // Field ip:I
     147: aload_0
     148: dup
     149: getfield      #2                  // Field s:I
     152: iconst_1
     153: iadd
     154: putfield      #2                  // Field s:I
     157: aload_0
     158: getfield      #4                  // Field code:[I
     161: aload_0
     162: getfield      #51                 // Field ip:I
     165: iaload
     166: aload_0
     167: getfield      #33                 // Field bytes:[B
     170: aload_0
     171: getfield      #2                  // Field s:I
     174: baload
     175: if_icmpeq     183
     178: aload_0
     179: invokespecial #159                // Method opFail:()V
     182: return
     183: aload_0
     184: dup
     185: getfield      #51                 // Field ip:I
     188: iconst_1
     189: iadd
     190: putfield      #51                 // Field ip:I
     193: aload_0
     194: dup
     195: getfield      #2                  // Field s:I
     198: iconst_1
     199: iadd
     200: putfield      #2                  // Field s:I
     203: aload_0
     204: aload_0
     205: getfield      #2                  // Field s:I
     208: putfield      #45                 // Field sprev:I
     211: aload_0
     212: getfield      #4                  // Field code:[I
     215: aload_0
     216: getfield      #51                 // Field ip:I
     219: iaload
     220: aload_0
     221: getfield      #33                 // Field bytes:[B
     224: aload_0
     225: getfield      #2                  // Field s:I
     228: baload
     229: if_icmpeq     237
     232: aload_0
     233: invokespecial #159                // Method opFail:()V
     236: return
     237: aload_0
     238: dup
     239: getfield      #51                 // Field ip:I
     242: iconst_1
     243: iadd
     244: putfield      #51                 // Field ip:I
     247: aload_0
     248: dup
     249: getfield      #2                  // Field s:I
     252: iconst_1
     253: iadd
     254: putfield      #2                  // Field s:I
     257: aload_0
     258: getfield      #4                  // Field code:[I
     261: aload_0
     262: getfield      #51                 // Field ip:I
     265: iaload
     266: aload_0
     267: getfield      #33                 // Field bytes:[B
     270: aload_0
     271: getfield      #2                  // Field s:I
     274: baload
     275: if_icmpeq     283
     278: aload_0
     279: invokespecial #159                // Method opFail:()V
     282: return
     283: aload_0
     284: dup
     285: getfield      #51                 // Field ip:I
     288: iconst_1
     289: iadd
     290: putfield      #51                 // Field ip:I
     293: aload_0
     294: dup
     295: getfield      #2                  // Field s:I
     298: iconst_1
     299: iadd
     300: putfield      #2                  // Field s:I
     303: return

  private void opExactMB2N();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: iload_1
      18: iconst_2
      19: imul
      20: aload_0
      21: getfield      #50                 // Field range:I
      24: if_icmple     32
      27: aload_0
      28: invokespecial #159                // Method opFail:()V
      31: return
      32: iload_1
      33: dup
      34: iconst_1
      35: isub
      36: istore_1
      37: ifle          135
      40: aload_0
      41: getfield      #4                  // Field code:[I
      44: aload_0
      45: getfield      #51                 // Field ip:I
      48: iaload
      49: aload_0
      50: getfield      #33                 // Field bytes:[B
      53: aload_0
      54: getfield      #2                  // Field s:I
      57: baload
      58: if_icmpeq     66
      61: aload_0
      62: invokespecial #159                // Method opFail:()V
      65: return
      66: aload_0
      67: dup
      68: getfield      #51                 // Field ip:I
      71: iconst_1
      72: iadd
      73: putfield      #51                 // Field ip:I
      76: aload_0
      77: dup
      78: getfield      #2                  // Field s:I
      81: iconst_1
      82: iadd
      83: putfield      #2                  // Field s:I
      86: aload_0
      87: getfield      #4                  // Field code:[I
      90: aload_0
      91: getfield      #51                 // Field ip:I
      94: iaload
      95: aload_0
      96: getfield      #33                 // Field bytes:[B
      99: aload_0
     100: getfield      #2                  // Field s:I
     103: baload
     104: if_icmpeq     112
     107: aload_0
     108: invokespecial #159                // Method opFail:()V
     111: return
     112: aload_0
     113: dup
     114: getfield      #51                 // Field ip:I
     117: iconst_1
     118: iadd
     119: putfield      #51                 // Field ip:I
     122: aload_0
     123: dup
     124: getfield      #2                  // Field s:I
     127: iconst_1
     128: iadd
     129: putfield      #2                  // Field s:I
     132: goto          32
     135: aload_0
     136: aload_0
     137: getfield      #2                  // Field s:I
     140: iconst_2
     141: isub
     142: putfield      #45                 // Field sprev:I
     145: return

  private void opExactMB3N();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: iload_1
      18: iconst_3
      19: imul
      20: aload_0
      21: getfield      #50                 // Field range:I
      24: if_icmple     32
      27: aload_0
      28: invokespecial #159                // Method opFail:()V
      31: return
      32: iload_1
      33: dup
      34: iconst_1
      35: isub
      36: istore_1
      37: ifle          181
      40: aload_0
      41: getfield      #4                  // Field code:[I
      44: aload_0
      45: getfield      #51                 // Field ip:I
      48: iaload
      49: aload_0
      50: getfield      #33                 // Field bytes:[B
      53: aload_0
      54: getfield      #2                  // Field s:I
      57: baload
      58: if_icmpeq     66
      61: aload_0
      62: invokespecial #159                // Method opFail:()V
      65: return
      66: aload_0
      67: dup
      68: getfield      #51                 // Field ip:I
      71: iconst_1
      72: iadd
      73: putfield      #51                 // Field ip:I
      76: aload_0
      77: dup
      78: getfield      #2                  // Field s:I
      81: iconst_1
      82: iadd
      83: putfield      #2                  // Field s:I
      86: aload_0
      87: getfield      #4                  // Field code:[I
      90: aload_0
      91: getfield      #51                 // Field ip:I
      94: iaload
      95: aload_0
      96: getfield      #33                 // Field bytes:[B
      99: aload_0
     100: getfield      #2                  // Field s:I
     103: baload
     104: if_icmpeq     112
     107: aload_0
     108: invokespecial #159                // Method opFail:()V
     111: return
     112: aload_0
     113: dup
     114: getfield      #51                 // Field ip:I
     117: iconst_1
     118: iadd
     119: putfield      #51                 // Field ip:I
     122: aload_0
     123: dup
     124: getfield      #2                  // Field s:I
     127: iconst_1
     128: iadd
     129: putfield      #2                  // Field s:I
     132: aload_0
     133: getfield      #4                  // Field code:[I
     136: aload_0
     137: getfield      #51                 // Field ip:I
     140: iaload
     141: aload_0
     142: getfield      #33                 // Field bytes:[B
     145: aload_0
     146: getfield      #2                  // Field s:I
     149: baload
     150: if_icmpeq     158
     153: aload_0
     154: invokespecial #159                // Method opFail:()V
     157: return
     158: aload_0
     159: dup
     160: getfield      #51                 // Field ip:I
     163: iconst_1
     164: iadd
     165: putfield      #51                 // Field ip:I
     168: aload_0
     169: dup
     170: getfield      #2                  // Field s:I
     173: iconst_1
     174: iadd
     175: putfield      #2                  // Field s:I
     178: goto          32
     181: aload_0
     182: aload_0
     183: getfield      #2                  // Field s:I
     186: iconst_3
     187: isub
     188: putfield      #45                 // Field sprev:I
     191: return

  private void opExactMBN();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #4                  // Field code:[I
      21: aload_0
      22: dup
      23: getfield      #51                 // Field ip:I
      26: dup_x1
      27: iconst_1
      28: iadd
      29: putfield      #51                 // Field ip:I
      32: iaload
      33: istore_2
      34: iload_2
      35: iload_1
      36: imul
      37: istore_2
      38: aload_0
      39: getfield      #2                  // Field s:I
      42: iload_2
      43: iadd
      44: aload_0
      45: getfield      #50                 // Field range:I
      48: if_icmple     56
      51: aload_0
      52: invokespecial #159                // Method opFail:()V
      55: return
      56: iload_2
      57: dup
      58: iconst_1
      59: isub
      60: istore_2
      61: ifle          113
      64: aload_0
      65: getfield      #4                  // Field code:[I
      68: aload_0
      69: getfield      #51                 // Field ip:I
      72: iaload
      73: aload_0
      74: getfield      #33                 // Field bytes:[B
      77: aload_0
      78: getfield      #2                  // Field s:I
      81: baload
      82: if_icmpeq     90
      85: aload_0
      86: invokespecial #159                // Method opFail:()V
      89: return
      90: aload_0
      91: dup
      92: getfield      #51                 // Field ip:I
      95: iconst_1
      96: iadd
      97: putfield      #51                 // Field ip:I
     100: aload_0
     101: dup
     102: getfield      #2                  // Field s:I
     105: iconst_1
     106: iadd
     107: putfield      #2                  // Field s:I
     110: goto          56
     113: aload_0
     114: aload_0
     115: getfield      #2                  // Field s:I
     118: iload_1
     119: isub
     120: putfield      #45                 // Field sprev:I
     123: return

  private void opExact1IC();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmplt     16
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return
      16: aload_0
      17: invokevirtual #28                 // Method cfbuf:()[B
      20: astore_1
      21: aload_0
      22: aload_0
      23: getfield      #2                  // Field s:I
      26: putfield      #31                 // Field value:I
      29: aload_0
      30: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      33: aload_0
      34: getfield      #10                 // Field regex:Lorg/joni/Regex;
      37: getfield      #183                // Field org/joni/Regex.caseFoldFlag:I
      40: aload_0
      41: getfield      #33                 // Field bytes:[B
      44: aload_0
      45: aload_0
      46: getfield      #42                 // Field end:I
      49: aload_1
      50: invokevirtual #34                 // Method org/jcodings/Encoding.mbcCaseFold:(I[BLorg/jcodings/IntHolder;I[B)I
      53: istore_2
      54: aload_0
      55: aload_0
      56: getfield      #31                 // Field value:I
      59: putfield      #2                  // Field s:I
      62: aload_0
      63: getfield      #2                  // Field s:I
      66: aload_0
      67: getfield      #50                 // Field range:I
      70: if_icmple     78
      73: aload_0
      74: invokespecial #159                // Method opFail:()V
      77: return
      78: iconst_0
      79: istore_3
      80: iload_2
      81: dup
      82: iconst_1
      83: isub
      84: istore_2
      85: ifle          124
      88: aload_0
      89: getfield      #4                  // Field code:[I
      92: aload_0
      93: getfield      #51                 // Field ip:I
      96: iaload
      97: aload_1
      98: iload_3
      99: baload
     100: if_icmpeq     108
     103: aload_0
     104: invokespecial #159                // Method opFail:()V
     107: return
     108: aload_0
     109: dup
     110: getfield      #51                 // Field ip:I
     113: iconst_1
     114: iadd
     115: putfield      #51                 // Field ip:I
     118: iinc          3, 1
     121: goto          80
     124: aload_0
     125: aload_0
     126: getfield      #54                 // Field sbegin:I
     129: putfield      #45                 // Field sprev:I
     132: return

  private void opExact1ICSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     51
      11: aload_0
      12: getfield      #4                  // Field code:[I
      15: aload_0
      16: getfield      #51                 // Field ip:I
      19: iaload
      20: aload_0
      21: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      24: invokevirtual #184                // Method org/jcodings/Encoding.toLowerCaseTable:()[B
      27: aload_0
      28: getfield      #33                 // Field bytes:[B
      31: aload_0
      32: dup
      33: getfield      #2                  // Field s:I
      36: dup_x1
      37: iconst_1
      38: iadd
      39: putfield      #2                  // Field s:I
      42: baload
      43: sipush        255
      46: iand
      47: baload
      48: if_icmpeq     56
      51: aload_0
      52: invokespecial #159                // Method opFail:()V
      55: return
      56: aload_0
      57: dup
      58: getfield      #51                 // Field ip:I
      61: iconst_1
      62: iadd
      63: putfield      #51                 // Field ip:I
      66: aload_0
      67: aload_0
      68: getfield      #54                 // Field sbegin:I
      71: putfield      #45                 // Field sprev:I
      74: return

  private void opExactNIC();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #51                 // Field ip:I
      21: iload_1
      22: iadd
      23: istore_2
      24: aload_0
      25: invokevirtual #28                 // Method cfbuf:()[B
      28: astore_3
      29: aload_0
      30: getfield      #51                 // Field ip:I
      33: iload_2
      34: if_icmpge     172
      37: aload_0
      38: aload_0
      39: getfield      #2                  // Field s:I
      42: putfield      #45                 // Field sprev:I
      45: aload_0
      46: getfield      #2                  // Field s:I
      49: aload_0
      50: getfield      #50                 // Field range:I
      53: if_icmplt     61
      56: aload_0
      57: invokespecial #159                // Method opFail:()V
      60: return
      61: aload_0
      62: aload_0
      63: getfield      #2                  // Field s:I
      66: putfield      #31                 // Field value:I
      69: aload_0
      70: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      73: aload_0
      74: getfield      #10                 // Field regex:Lorg/joni/Regex;
      77: getfield      #183                // Field org/joni/Regex.caseFoldFlag:I
      80: aload_0
      81: getfield      #33                 // Field bytes:[B
      84: aload_0
      85: aload_0
      86: getfield      #42                 // Field end:I
      89: aload_3
      90: invokevirtual #34                 // Method org/jcodings/Encoding.mbcCaseFold:(I[BLorg/jcodings/IntHolder;I[B)I
      93: istore        4
      95: aload_0
      96: aload_0
      97: getfield      #31                 // Field value:I
     100: putfield      #2                  // Field s:I
     103: aload_0
     104: getfield      #2                  // Field s:I
     107: aload_0
     108: getfield      #50                 // Field range:I
     111: if_icmple     119
     114: aload_0
     115: invokespecial #159                // Method opFail:()V
     118: return
     119: iconst_0
     120: istore        5
     122: iload         4
     124: dup
     125: iconst_1
     126: isub
     127: istore        4
     129: ifle          169
     132: aload_0
     133: getfield      #4                  // Field code:[I
     136: aload_0
     137: getfield      #51                 // Field ip:I
     140: iaload
     141: aload_3
     142: iload         5
     144: baload
     145: if_icmpeq     153
     148: aload_0
     149: invokespecial #159                // Method opFail:()V
     152: return
     153: aload_0
     154: dup
     155: getfield      #51                 // Field ip:I
     158: iconst_1
     159: iadd
     160: putfield      #51                 // Field ip:I
     163: iinc          5, 1
     166: goto          122
     169: goto          29
     172: return

  private void opExactNICSb();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #2                  // Field s:I
      21: iload_1
      22: iadd
      23: aload_0
      24: getfield      #50                 // Field range:I
      27: if_icmple     35
      30: aload_0
      31: invokespecial #159                // Method opFail:()V
      34: return
      35: aload_0
      36: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      39: invokevirtual #184                // Method org/jcodings/Encoding.toLowerCaseTable:()[B
      42: astore_2
      43: iload_1
      44: dup
      45: iconst_1
      46: isub
      47: istore_1
      48: ifle          97
      51: aload_0
      52: getfield      #4                  // Field code:[I
      55: aload_0
      56: dup
      57: getfield      #51                 // Field ip:I
      60: dup_x1
      61: iconst_1
      62: iadd
      63: putfield      #51                 // Field ip:I
      66: iaload
      67: aload_2
      68: aload_0
      69: getfield      #33                 // Field bytes:[B
      72: aload_0
      73: dup
      74: getfield      #2                  // Field s:I
      77: dup_x1
      78: iconst_1
      79: iadd
      80: putfield      #2                  // Field s:I
      83: baload
      84: sipush        255
      87: iand
      88: baload
      89: if_icmpeq     43
      92: aload_0
      93: invokespecial #159                // Method opFail:()V
      96: return
      97: aload_0
      98: aload_0
      99: getfield      #2                  // Field s:I
     102: iconst_1
     103: isub
     104: putfield      #45                 // Field sprev:I
     107: return

  private boolean isInBitSet();
    Code:
       0: aload_0
       1: getfield      #33                 // Field bytes:[B
       4: aload_0
       5: getfield      #2                  // Field s:I
       8: baload
       9: sipush        255
      12: iand
      13: istore_1
      14: aload_0
      15: getfield      #4                  // Field code:[I
      18: aload_0
      19: getfield      #51                 // Field ip:I
      22: iload_1
      23: getstatic     #185                // Field org/joni/BitSet.ROOM_SHIFT:I
      26: iushr
      27: iadd
      28: iaload
      29: iconst_1
      30: iload_1
      31: ishl
      32: iand
      33: ifeq          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn

  private void opCClass();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     18
      11: aload_0
      12: invokespecial #186                // Method isInBitSet:()Z
      15: ifne          23
      18: aload_0
      19: invokespecial #159                // Method opFail:()V
      22: return
      23: aload_0
      24: dup
      25: getfield      #51                 // Field ip:I
      28: bipush        8
      30: iadd
      31: putfield      #51                 // Field ip:I
      34: aload_0
      35: dup
      36: getfield      #2                  // Field s:I
      39: aload_0
      40: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      43: aload_0
      44: getfield      #33                 // Field bytes:[B
      47: aload_0
      48: getfield      #2                  // Field s:I
      51: aload_0
      52: getfield      #42                 // Field end:I
      55: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      58: iadd
      59: putfield      #2                  // Field s:I
      62: aload_0
      63: aload_0
      64: getfield      #54                 // Field sbegin:I
      67: putfield      #45                 // Field sprev:I
      70: return

  private void opCClassSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     18
      11: aload_0
      12: invokespecial #186                // Method isInBitSet:()Z
      15: ifne          23
      18: aload_0
      19: invokespecial #159                // Method opFail:()V
      22: return
      23: aload_0
      24: dup
      25: getfield      #51                 // Field ip:I
      28: bipush        8
      30: iadd
      31: putfield      #51                 // Field ip:I
      34: aload_0
      35: dup
      36: getfield      #2                  // Field s:I
      39: iconst_1
      40: iadd
      41: putfield      #2                  // Field s:I
      44: aload_0
      45: aload_0
      46: getfield      #54                 // Field sbegin:I
      49: putfield      #45                 // Field sprev:I
      52: return

  private boolean isInClassMB();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #2                  // Field s:I
      21: aload_0
      22: getfield      #50                 // Field range:I
      25: if_icmplt     30
      28: iconst_0
      29: ireturn
      30: aload_0
      31: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      34: aload_0
      35: getfield      #33                 // Field bytes:[B
      38: aload_0
      39: getfield      #2                  // Field s:I
      42: aload_0
      43: getfield      #42                 // Field end:I
      46: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      49: istore_2
      50: aload_0
      51: getfield      #2                  // Field s:I
      54: iload_2
      55: iadd
      56: aload_0
      57: getfield      #50                 // Field range:I
      60: if_icmple     65
      63: iconst_0
      64: ireturn
      65: aload_0
      66: getfield      #2                  // Field s:I
      69: istore_3
      70: aload_0
      71: dup
      72: getfield      #2                  // Field s:I
      75: iload_2
      76: iadd
      77: putfield      #2                  // Field s:I
      80: aload_0
      81: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      84: aload_0
      85: getfield      #33                 // Field bytes:[B
      88: iload_3
      89: aload_0
      90: getfield      #2                  // Field s:I
      93: invokevirtual #188                // Method org/jcodings/Encoding.mbcToCode:([BII)I
      96: istore        4
      98: aload_0
      99: getfield      #4                  // Field code:[I
     102: aload_0
     103: getfield      #51                 // Field ip:I
     106: iload         4
     108: invokestatic  #189                // Method org/jcodings/CodeRange.isInCodeRange:([III)Z
     111: ifne          116
     114: iconst_0
     115: ireturn
     116: aload_0
     117: dup
     118: getfield      #51                 // Field ip:I
     121: iload_1
     122: iadd
     123: putfield      #51                 // Field ip:I
     126: iconst_1
     127: ireturn

  private void opCClassMB();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     33
      11: aload_0
      12: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      15: aload_0
      16: getfield      #33                 // Field bytes:[B
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: aload_0
      24: getfield      #42                 // Field end:I
      27: invokevirtual #190                // Method org/jcodings/Encoding.isMbcHead:([BII)Z
      30: ifne          38
      33: aload_0
      34: invokespecial #159                // Method opFail:()V
      37: return
      38: aload_0
      39: invokespecial #191                // Method isInClassMB:()Z
      42: ifne          50
      45: aload_0
      46: invokespecial #159                // Method opFail:()V
      49: return
      50: aload_0
      51: aload_0
      52: getfield      #54                 // Field sbegin:I
      55: putfield      #45                 // Field sprev:I
      58: return

  private void opCClassMIX();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmplt     16
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return
      16: aload_0
      17: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      20: aload_0
      21: getfield      #33                 // Field bytes:[B
      24: aload_0
      25: getfield      #2                  // Field s:I
      28: aload_0
      29: getfield      #42                 // Field end:I
      32: invokevirtual #190                // Method org/jcodings/Encoding.isMbcHead:([BII)Z
      35: ifeq          61
      38: aload_0
      39: dup
      40: getfield      #51                 // Field ip:I
      43: bipush        8
      45: iadd
      46: putfield      #51                 // Field ip:I
      49: aload_0
      50: invokespecial #191                // Method isInClassMB:()Z
      53: ifne          121
      56: aload_0
      57: invokespecial #159                // Method opFail:()V
      60: return
      61: aload_0
      62: invokespecial #186                // Method isInBitSet:()Z
      65: ifne          73
      68: aload_0
      69: invokespecial #159                // Method opFail:()V
      72: return
      73: aload_0
      74: dup
      75: getfield      #51                 // Field ip:I
      78: bipush        8
      80: iadd
      81: putfield      #51                 // Field ip:I
      84: aload_0
      85: getfield      #4                  // Field code:[I
      88: aload_0
      89: dup
      90: getfield      #51                 // Field ip:I
      93: dup_x1
      94: iconst_1
      95: iadd
      96: putfield      #51                 // Field ip:I
      99: iaload
     100: istore_1
     101: aload_0
     102: dup
     103: getfield      #51                 // Field ip:I
     106: iload_1
     107: iadd
     108: putfield      #51                 // Field ip:I
     111: aload_0
     112: dup
     113: getfield      #2                  // Field s:I
     116: iconst_1
     117: iadd
     118: putfield      #2                  // Field s:I
     121: aload_0
     122: aload_0
     123: getfield      #54                 // Field sbegin:I
     126: putfield      #45                 // Field sprev:I
     129: return

  private void opCClassNot();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     18
      11: aload_0
      12: invokespecial #186                // Method isInBitSet:()Z
      15: ifeq          23
      18: aload_0
      19: invokespecial #159                // Method opFail:()V
      22: return
      23: aload_0
      24: dup
      25: getfield      #51                 // Field ip:I
      28: bipush        8
      30: iadd
      31: putfield      #51                 // Field ip:I
      34: aload_0
      35: dup
      36: getfield      #2                  // Field s:I
      39: aload_0
      40: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      43: aload_0
      44: getfield      #33                 // Field bytes:[B
      47: aload_0
      48: getfield      #2                  // Field s:I
      51: aload_0
      52: getfield      #42                 // Field end:I
      55: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      58: iadd
      59: putfield      #2                  // Field s:I
      62: aload_0
      63: aload_0
      64: getfield      #54                 // Field sbegin:I
      67: putfield      #45                 // Field sprev:I
      70: return

  private void opCClassNotSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     18
      11: aload_0
      12: invokespecial #186                // Method isInBitSet:()Z
      15: ifeq          23
      18: aload_0
      19: invokespecial #159                // Method opFail:()V
      22: return
      23: aload_0
      24: dup
      25: getfield      #51                 // Field ip:I
      28: bipush        8
      30: iadd
      31: putfield      #51                 // Field ip:I
      34: aload_0
      35: dup
      36: getfield      #2                  // Field s:I
      39: iconst_1
      40: iadd
      41: putfield      #2                  // Field s:I
      44: aload_0
      45: aload_0
      46: getfield      #54                 // Field sbegin:I
      49: putfield      #45                 // Field sprev:I
      52: return

  private boolean isNotInClassMB();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      21: aload_0
      22: getfield      #33                 // Field bytes:[B
      25: aload_0
      26: getfield      #2                  // Field s:I
      29: aload_0
      30: getfield      #42                 // Field end:I
      33: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      36: istore_2
      37: aload_0
      38: getfield      #2                  // Field s:I
      41: iload_2
      42: iadd
      43: aload_0
      44: getfield      #50                 // Field range:I
      47: if_icmple     83
      50: aload_0
      51: getfield      #2                  // Field s:I
      54: aload_0
      55: getfield      #50                 // Field range:I
      58: if_icmplt     63
      61: iconst_0
      62: ireturn
      63: aload_0
      64: aload_0
      65: getfield      #42                 // Field end:I
      68: putfield      #2                  // Field s:I
      71: aload_0
      72: dup
      73: getfield      #51                 // Field ip:I
      76: iload_1
      77: iadd
      78: putfield      #51                 // Field ip:I
      81: iconst_1
      82: ireturn
      83: aload_0
      84: getfield      #2                  // Field s:I
      87: istore_3
      88: aload_0
      89: dup
      90: getfield      #2                  // Field s:I
      93: iload_2
      94: iadd
      95: putfield      #2                  // Field s:I
      98: aload_0
      99: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     102: aload_0
     103: getfield      #33                 // Field bytes:[B
     106: iload_3
     107: aload_0
     108: getfield      #2                  // Field s:I
     111: invokevirtual #188                // Method org/jcodings/Encoding.mbcToCode:([BII)I
     114: istore        4
     116: aload_0
     117: getfield      #4                  // Field code:[I
     120: aload_0
     121: getfield      #51                 // Field ip:I
     124: iload         4
     126: invokestatic  #189                // Method org/jcodings/CodeRange.isInCodeRange:([III)Z
     129: ifeq          134
     132: iconst_0
     133: ireturn
     134: aload_0
     135: dup
     136: getfield      #51                 // Field ip:I
     139: iload_1
     140: iadd
     141: putfield      #51                 // Field ip:I
     144: iconst_1
     145: ireturn

  private void opCClassMBNot();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmplt     16
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return
      16: aload_0
      17: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      20: aload_0
      21: getfield      #33                 // Field bytes:[B
      24: aload_0
      25: getfield      #2                  // Field s:I
      28: aload_0
      29: getfield      #42                 // Field end:I
      32: invokevirtual #190                // Method org/jcodings/Encoding.isMbcHead:([BII)Z
      35: ifne          84
      38: aload_0
      39: dup
      40: getfield      #2                  // Field s:I
      43: iconst_1
      44: iadd
      45: putfield      #2                  // Field s:I
      48: aload_0
      49: getfield      #4                  // Field code:[I
      52: aload_0
      53: dup
      54: getfield      #51                 // Field ip:I
      57: dup_x1
      58: iconst_1
      59: iadd
      60: putfield      #51                 // Field ip:I
      63: iaload
      64: istore_1
      65: aload_0
      66: dup
      67: getfield      #51                 // Field ip:I
      70: iload_1
      71: iadd
      72: putfield      #51                 // Field ip:I
      75: aload_0
      76: aload_0
      77: getfield      #54                 // Field sbegin:I
      80: putfield      #45                 // Field sprev:I
      83: return
      84: aload_0
      85: invokespecial #192                // Method isNotInClassMB:()Z
      88: ifne          96
      91: aload_0
      92: invokespecial #159                // Method opFail:()V
      95: return
      96: aload_0
      97: aload_0
      98: getfield      #54                 // Field sbegin:I
     101: putfield      #45                 // Field sprev:I
     104: return

  private void opCClassMIXNot();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmplt     16
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return
      16: aload_0
      17: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      20: aload_0
      21: getfield      #33                 // Field bytes:[B
      24: aload_0
      25: getfield      #2                  // Field s:I
      28: aload_0
      29: getfield      #42                 // Field end:I
      32: invokevirtual #190                // Method org/jcodings/Encoding.isMbcHead:([BII)Z
      35: ifeq          61
      38: aload_0
      39: dup
      40: getfield      #51                 // Field ip:I
      43: bipush        8
      45: iadd
      46: putfield      #51                 // Field ip:I
      49: aload_0
      50: invokespecial #192                // Method isNotInClassMB:()Z
      53: ifne          121
      56: aload_0
      57: invokespecial #159                // Method opFail:()V
      60: return
      61: aload_0
      62: invokespecial #186                // Method isInBitSet:()Z
      65: ifeq          73
      68: aload_0
      69: invokespecial #159                // Method opFail:()V
      72: return
      73: aload_0
      74: dup
      75: getfield      #51                 // Field ip:I
      78: bipush        8
      80: iadd
      81: putfield      #51                 // Field ip:I
      84: aload_0
      85: getfield      #4                  // Field code:[I
      88: aload_0
      89: dup
      90: getfield      #51                 // Field ip:I
      93: dup_x1
      94: iconst_1
      95: iadd
      96: putfield      #51                 // Field ip:I
      99: iaload
     100: istore_1
     101: aload_0
     102: dup
     103: getfield      #51                 // Field ip:I
     106: iload_1
     107: iadd
     108: putfield      #51                 // Field ip:I
     111: aload_0
     112: dup
     113: getfield      #2                  // Field s:I
     116: iconst_1
     117: iadd
     118: putfield      #2                  // Field s:I
     121: aload_0
     122: aload_0
     123: getfield      #54                 // Field sbegin:I
     126: putfield      #45                 // Field sprev:I
     129: return

  private void opCClassNode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmplt     16
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return
      16: aload_0
      17: getfield      #10                 // Field regex:Lorg/joni/Regex;
      20: getfield      #193                // Field org/joni/Regex.operands:[Ljava/lang/Object;
      23: aload_0
      24: getfield      #4                  // Field code:[I
      27: aload_0
      28: dup
      29: getfield      #51                 // Field ip:I
      32: dup_x1
      33: iconst_1
      34: iadd
      35: putfield      #51                 // Field ip:I
      38: iaload
      39: aaload
      40: checkcast     #194                // class org/joni/ast/CClassNode
      43: astore_1
      44: aload_0
      45: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      48: aload_0
      49: getfield      #33                 // Field bytes:[B
      52: aload_0
      53: getfield      #2                  // Field s:I
      56: aload_0
      57: getfield      #42                 // Field end:I
      60: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      63: istore_2
      64: aload_0
      65: getfield      #2                  // Field s:I
      68: istore_3
      69: aload_0
      70: dup
      71: getfield      #2                  // Field s:I
      74: iload_2
      75: iadd
      76: putfield      #2                  // Field s:I
      79: aload_0
      80: getfield      #2                  // Field s:I
      83: aload_0
      84: getfield      #50                 // Field range:I
      87: if_icmple     95
      90: aload_0
      91: invokespecial #159                // Method opFail:()V
      94: return
      95: aload_0
      96: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      99: aload_0
     100: getfield      #33                 // Field bytes:[B
     103: iload_3
     104: aload_0
     105: getfield      #2                  // Field s:I
     108: invokevirtual #188                // Method org/jcodings/Encoding.mbcToCode:([BII)I
     111: istore        4
     113: aload_1
     114: iload_2
     115: iload         4
     117: invokevirtual #195                // Method org/joni/ast/CClassNode.isCodeInCCLength:(II)Z
     120: ifne          128
     123: aload_0
     124: invokespecial #159                // Method opFail:()V
     127: return
     128: aload_0
     129: aload_0
     130: getfield      #54                 // Field sbegin:I
     133: putfield      #45                 // Field sprev:I
     136: return

  private void opAnyChar();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmplt     16
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return
      16: aload_0
      17: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      20: aload_0
      21: getfield      #33                 // Field bytes:[B
      24: aload_0
      25: getfield      #2                  // Field s:I
      28: aload_0
      29: getfield      #42                 // Field end:I
      32: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      35: istore_1
      36: aload_0
      37: getfield      #2                  // Field s:I
      40: iload_1
      41: iadd
      42: aload_0
      43: getfield      #50                 // Field range:I
      46: if_icmple     54
      49: aload_0
      50: invokespecial #159                // Method opFail:()V
      53: return
      54: aload_0
      55: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      58: aload_0
      59: getfield      #33                 // Field bytes:[B
      62: aload_0
      63: getfield      #2                  // Field s:I
      66: aload_0
      67: getfield      #42                 // Field end:I
      70: invokevirtual #196                // Method org/jcodings/Encoding.isNewLine:([BII)Z
      73: ifeq          81
      76: aload_0
      77: invokespecial #159                // Method opFail:()V
      80: return
      81: aload_0
      82: dup
      83: getfield      #2                  // Field s:I
      86: iload_1
      87: iadd
      88: putfield      #2                  // Field s:I
      91: aload_0
      92: aload_0
      93: getfield      #54                 // Field sbegin:I
      96: putfield      #45                 // Field sprev:I
      99: return

  private void opAnyCharSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmplt     16
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return
      16: aload_0
      17: getfield      #33                 // Field bytes:[B
      20: aload_0
      21: getfield      #2                  // Field s:I
      24: baload
      25: bipush        10
      27: if_icmpne     35
      30: aload_0
      31: invokespecial #159                // Method opFail:()V
      34: return
      35: aload_0
      36: dup
      37: getfield      #2                  // Field s:I
      40: iconst_1
      41: iadd
      42: putfield      #2                  // Field s:I
      45: aload_0
      46: aload_0
      47: getfield      #54                 // Field sbegin:I
      50: putfield      #45                 // Field sprev:I
      53: return

  private void opAnyCharML();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmplt     16
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return
      16: aload_0
      17: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      20: aload_0
      21: getfield      #33                 // Field bytes:[B
      24: aload_0
      25: getfield      #2                  // Field s:I
      28: aload_0
      29: getfield      #42                 // Field end:I
      32: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      35: istore_1
      36: aload_0
      37: getfield      #2                  // Field s:I
      40: iload_1
      41: iadd
      42: aload_0
      43: getfield      #50                 // Field range:I
      46: if_icmple     54
      49: aload_0
      50: invokespecial #159                // Method opFail:()V
      53: return
      54: aload_0
      55: dup
      56: getfield      #2                  // Field s:I
      59: iload_1
      60: iadd
      61: putfield      #2                  // Field s:I
      64: aload_0
      65: aload_0
      66: getfield      #54                 // Field sbegin:I
      69: putfield      #45                 // Field sprev:I
      72: return

  private void opAnyCharMLSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmplt     16
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return
      16: aload_0
      17: dup
      18: getfield      #2                  // Field s:I
      21: iconst_1
      22: iadd
      23: putfield      #2                  // Field s:I
      26: aload_0
      27: aload_0
      28: getfield      #54                 // Field sbegin:I
      31: putfield      #45                 // Field sprev:I
      34: return

  private void opAnyCharStar();
    Code:
       0: aload_0
       1: getfield      #33                 // Field bytes:[B
       4: astore_1
       5: aload_0
       6: getfield      #2                  // Field s:I
       9: aload_0
      10: getfield      #50                 // Field range:I
      13: if_icmpge     112
      16: aload_0
      17: aload_0
      18: getfield      #51                 // Field ip:I
      21: aload_0
      22: getfield      #2                  // Field s:I
      25: aload_0
      26: getfield      #45                 // Field sprev:I
      29: invokevirtual #197                // Method pushAlt:(III)V
      32: aload_0
      33: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      36: aload_1
      37: aload_0
      38: getfield      #2                  // Field s:I
      41: aload_0
      42: getfield      #42                 // Field end:I
      45: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      48: istore_2
      49: aload_0
      50: getfield      #2                  // Field s:I
      53: iload_2
      54: iadd
      55: aload_0
      56: getfield      #50                 // Field range:I
      59: if_icmple     67
      62: aload_0
      63: invokespecial #159                // Method opFail:()V
      66: return
      67: aload_0
      68: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      71: aload_1
      72: aload_0
      73: getfield      #2                  // Field s:I
      76: aload_0
      77: getfield      #42                 // Field end:I
      80: invokevirtual #196                // Method org/jcodings/Encoding.isNewLine:([BII)Z
      83: ifeq          91
      86: aload_0
      87: invokespecial #159                // Method opFail:()V
      90: return
      91: aload_0
      92: aload_0
      93: getfield      #2                  // Field s:I
      96: putfield      #45                 // Field sprev:I
      99: aload_0
     100: dup
     101: getfield      #2                  // Field s:I
     104: iload_2
     105: iadd
     106: putfield      #2                  // Field s:I
     109: goto          5
     112: aload_0
     113: aload_0
     114: getfield      #54                 // Field sbegin:I
     117: putfield      #45                 // Field sprev:I
     120: return

  private void opAnyCharStarSb();
    Code:
       0: aload_0
       1: getfield      #33                 // Field bytes:[B
       4: astore_1
       5: aload_0
       6: getfield      #2                  // Field s:I
       9: aload_0
      10: getfield      #50                 // Field range:I
      13: if_icmpge     69
      16: aload_0
      17: aload_0
      18: getfield      #51                 // Field ip:I
      21: aload_0
      22: getfield      #2                  // Field s:I
      25: aload_0
      26: getfield      #45                 // Field sprev:I
      29: invokevirtual #197                // Method pushAlt:(III)V
      32: aload_1
      33: aload_0
      34: getfield      #2                  // Field s:I
      37: baload
      38: bipush        10
      40: if_icmpne     48
      43: aload_0
      44: invokespecial #159                // Method opFail:()V
      47: return
      48: aload_0
      49: aload_0
      50: getfield      #2                  // Field s:I
      53: putfield      #45                 // Field sprev:I
      56: aload_0
      57: dup
      58: getfield      #2                  // Field s:I
      61: iconst_1
      62: iadd
      63: putfield      #2                  // Field s:I
      66: goto          5
      69: aload_0
      70: aload_0
      71: getfield      #54                 // Field sbegin:I
      74: putfield      #45                 // Field sprev:I
      77: return

  private void opAnyCharMLStar();
    Code:
       0: aload_0
       1: getfield      #33                 // Field bytes:[B
       4: astore_1
       5: aload_0
       6: getfield      #2                  // Field s:I
       9: aload_0
      10: getfield      #50                 // Field range:I
      13: if_icmpge     88
      16: aload_0
      17: aload_0
      18: getfield      #51                 // Field ip:I
      21: aload_0
      22: getfield      #2                  // Field s:I
      25: aload_0
      26: getfield      #45                 // Field sprev:I
      29: invokevirtual #197                // Method pushAlt:(III)V
      32: aload_0
      33: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      36: aload_1
      37: aload_0
      38: getfield      #2                  // Field s:I
      41: aload_0
      42: getfield      #42                 // Field end:I
      45: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      48: istore_2
      49: aload_0
      50: getfield      #2                  // Field s:I
      53: iload_2
      54: iadd
      55: aload_0
      56: getfield      #50                 // Field range:I
      59: if_icmple     67
      62: aload_0
      63: invokespecial #159                // Method opFail:()V
      66: return
      67: aload_0
      68: aload_0
      69: getfield      #2                  // Field s:I
      72: putfield      #45                 // Field sprev:I
      75: aload_0
      76: dup
      77: getfield      #2                  // Field s:I
      80: iload_2
      81: iadd
      82: putfield      #2                  // Field s:I
      85: goto          5
      88: aload_0
      89: aload_0
      90: getfield      #54                 // Field sbegin:I
      93: putfield      #45                 // Field sprev:I
      96: return

  private void opAnyCharMLStarSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     48
      11: aload_0
      12: aload_0
      13: getfield      #51                 // Field ip:I
      16: aload_0
      17: getfield      #2                  // Field s:I
      20: aload_0
      21: getfield      #45                 // Field sprev:I
      24: invokevirtual #197                // Method pushAlt:(III)V
      27: aload_0
      28: aload_0
      29: getfield      #2                  // Field s:I
      32: putfield      #45                 // Field sprev:I
      35: aload_0
      36: dup
      37: getfield      #2                  // Field s:I
      40: iconst_1
      41: iadd
      42: putfield      #2                  // Field s:I
      45: goto          0
      48: aload_0
      49: aload_0
      50: getfield      #54                 // Field sbegin:I
      53: putfield      #45                 // Field sprev:I
      56: return

  private void opAnyCharStarPeekNext();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: getfield      #51                 // Field ip:I
       8: iaload
       9: i2b
      10: istore_1
      11: aload_0
      12: getfield      #33                 // Field bytes:[B
      15: astore_2
      16: aload_0
      17: getfield      #2                  // Field s:I
      20: aload_0
      21: getfield      #50                 // Field range:I
      24: if_icmpge     130
      27: iload_1
      28: aload_2
      29: aload_0
      30: getfield      #2                  // Field s:I
      33: baload
      34: if_icmpne     55
      37: aload_0
      38: aload_0
      39: getfield      #51                 // Field ip:I
      42: iconst_1
      43: iadd
      44: aload_0
      45: getfield      #2                  // Field s:I
      48: aload_0
      49: getfield      #45                 // Field sprev:I
      52: invokevirtual #197                // Method pushAlt:(III)V
      55: aload_0
      56: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      59: aload_2
      60: aload_0
      61: getfield      #2                  // Field s:I
      64: aload_0
      65: getfield      #42                 // Field end:I
      68: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      71: istore_3
      72: aload_0
      73: getfield      #2                  // Field s:I
      76: iload_3
      77: iadd
      78: aload_0
      79: getfield      #50                 // Field range:I
      82: if_icmpgt     104
      85: aload_0
      86: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      89: aload_2
      90: aload_0
      91: getfield      #2                  // Field s:I
      94: aload_0
      95: getfield      #42                 // Field end:I
      98: invokevirtual #196                // Method org/jcodings/Encoding.isNewLine:([BII)Z
     101: ifeq          109
     104: aload_0
     105: invokespecial #159                // Method opFail:()V
     108: return
     109: aload_0
     110: aload_0
     111: getfield      #2                  // Field s:I
     114: putfield      #45                 // Field sprev:I
     117: aload_0
     118: dup
     119: getfield      #2                  // Field s:I
     122: iload_3
     123: iadd
     124: putfield      #2                  // Field s:I
     127: goto          16
     130: aload_0
     131: dup
     132: getfield      #51                 // Field ip:I
     135: iconst_1
     136: iadd
     137: putfield      #51                 // Field ip:I
     140: aload_0
     141: aload_0
     142: getfield      #54                 // Field sbegin:I
     145: putfield      #45                 // Field sprev:I
     148: return

  private void opAnyCharStarPeekNextSb();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: getfield      #51                 // Field ip:I
       8: iaload
       9: i2b
      10: istore_1
      11: aload_0
      12: getfield      #33                 // Field bytes:[B
      15: astore_2
      16: aload_0
      17: getfield      #2                  // Field s:I
      20: aload_0
      21: getfield      #50                 // Field range:I
      24: if_icmpge     89
      27: aload_2
      28: aload_0
      29: getfield      #2                  // Field s:I
      32: baload
      33: istore_3
      34: iload_1
      35: iload_3
      36: if_icmpne     57
      39: aload_0
      40: aload_0
      41: getfield      #51                 // Field ip:I
      44: iconst_1
      45: iadd
      46: aload_0
      47: getfield      #2                  // Field s:I
      50: aload_0
      51: getfield      #45                 // Field sprev:I
      54: invokevirtual #197                // Method pushAlt:(III)V
      57: iload_3
      58: bipush        10
      60: if_icmpne     68
      63: aload_0
      64: invokespecial #159                // Method opFail:()V
      67: return
      68: aload_0
      69: aload_0
      70: getfield      #2                  // Field s:I
      73: putfield      #45                 // Field sprev:I
      76: aload_0
      77: dup
      78: getfield      #2                  // Field s:I
      81: iconst_1
      82: iadd
      83: putfield      #2                  // Field s:I
      86: goto          16
      89: aload_0
      90: dup
      91: getfield      #51                 // Field ip:I
      94: iconst_1
      95: iadd
      96: putfield      #51                 // Field ip:I
      99: aload_0
     100: aload_0
     101: getfield      #54                 // Field sbegin:I
     104: putfield      #45                 // Field sprev:I
     107: return

  private void opAnyCharMLStarPeekNext();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: getfield      #51                 // Field ip:I
       8: iaload
       9: i2b
      10: istore_1
      11: aload_0
      12: getfield      #33                 // Field bytes:[B
      15: astore_2
      16: aload_0
      17: getfield      #2                  // Field s:I
      20: aload_0
      21: getfield      #50                 // Field range:I
      24: if_icmpge     111
      27: iload_1
      28: aload_2
      29: aload_0
      30: getfield      #2                  // Field s:I
      33: baload
      34: if_icmpne     55
      37: aload_0
      38: aload_0
      39: getfield      #51                 // Field ip:I
      42: iconst_1
      43: iadd
      44: aload_0
      45: getfield      #2                  // Field s:I
      48: aload_0
      49: getfield      #45                 // Field sprev:I
      52: invokevirtual #197                // Method pushAlt:(III)V
      55: aload_0
      56: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      59: aload_2
      60: aload_0
      61: getfield      #2                  // Field s:I
      64: aload_0
      65: getfield      #42                 // Field end:I
      68: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      71: istore_3
      72: aload_0
      73: getfield      #2                  // Field s:I
      76: iload_3
      77: iadd
      78: aload_0
      79: getfield      #50                 // Field range:I
      82: if_icmple     90
      85: aload_0
      86: invokespecial #159                // Method opFail:()V
      89: return
      90: aload_0
      91: aload_0
      92: getfield      #2                  // Field s:I
      95: putfield      #45                 // Field sprev:I
      98: aload_0
      99: dup
     100: getfield      #2                  // Field s:I
     103: iload_3
     104: iadd
     105: putfield      #2                  // Field s:I
     108: goto          16
     111: aload_0
     112: dup
     113: getfield      #51                 // Field ip:I
     116: iconst_1
     117: iadd
     118: putfield      #51                 // Field ip:I
     121: aload_0
     122: aload_0
     123: getfield      #54                 // Field sbegin:I
     126: putfield      #45                 // Field sprev:I
     129: return

  private void opAnyCharMLStarPeekNextSb();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: getfield      #51                 // Field ip:I
       8: iaload
       9: i2b
      10: istore_1
      11: aload_0
      12: getfield      #33                 // Field bytes:[B
      15: astore_2
      16: aload_0
      17: getfield      #2                  // Field s:I
      20: aload_0
      21: getfield      #50                 // Field range:I
      24: if_icmpge     76
      27: iload_1
      28: aload_2
      29: aload_0
      30: getfield      #2                  // Field s:I
      33: baload
      34: if_icmpne     55
      37: aload_0
      38: aload_0
      39: getfield      #51                 // Field ip:I
      42: iconst_1
      43: iadd
      44: aload_0
      45: getfield      #2                  // Field s:I
      48: aload_0
      49: getfield      #45                 // Field sprev:I
      52: invokevirtual #197                // Method pushAlt:(III)V
      55: aload_0
      56: aload_0
      57: getfield      #2                  // Field s:I
      60: putfield      #45                 // Field sprev:I
      63: aload_0
      64: dup
      65: getfield      #2                  // Field s:I
      68: iconst_1
      69: iadd
      70: putfield      #2                  // Field s:I
      73: goto          16
      76: aload_0
      77: dup
      78: getfield      #51                 // Field ip:I
      81: iconst_1
      82: iadd
      83: putfield      #51                 // Field ip:I
      86: aload_0
      87: aload_0
      88: getfield      #54                 // Field sbegin:I
      91: putfield      #45                 // Field sprev:I
      94: return

  private void opStateCheckAnyCharStar();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #33                 // Field bytes:[B
      21: astore_2
      22: aload_0
      23: getfield      #2                  // Field s:I
      26: aload_0
      27: getfield      #50                 // Field range:I
      30: if_icmpge     142
      33: aload_0
      34: aload_0
      35: getfield      #2                  // Field s:I
      38: iload_1
      39: invokevirtual #198                // Method stateCheckVal:(II)Z
      42: ifeq          50
      45: aload_0
      46: invokespecial #159                // Method opFail:()V
      49: return
      50: aload_0
      51: aload_0
      52: getfield      #51                 // Field ip:I
      55: aload_0
      56: getfield      #2                  // Field s:I
      59: aload_0
      60: getfield      #45                 // Field sprev:I
      63: iload_1
      64: invokevirtual #199                // Method pushAltWithStateCheck:(IIII)V
      67: aload_0
      68: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      71: aload_2
      72: aload_0
      73: getfield      #2                  // Field s:I
      76: aload_0
      77: getfield      #42                 // Field end:I
      80: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      83: istore_3
      84: aload_0
      85: getfield      #2                  // Field s:I
      88: iload_3
      89: iadd
      90: aload_0
      91: getfield      #50                 // Field range:I
      94: if_icmpgt     116
      97: aload_0
      98: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     101: aload_2
     102: aload_0
     103: getfield      #2                  // Field s:I
     106: aload_0
     107: getfield      #42                 // Field end:I
     110: invokevirtual #196                // Method org/jcodings/Encoding.isNewLine:([BII)Z
     113: ifeq          121
     116: aload_0
     117: invokespecial #159                // Method opFail:()V
     120: return
     121: aload_0
     122: aload_0
     123: getfield      #2                  // Field s:I
     126: putfield      #45                 // Field sprev:I
     129: aload_0
     130: dup
     131: getfield      #2                  // Field s:I
     134: iload_3
     135: iadd
     136: putfield      #2                  // Field s:I
     139: goto          22
     142: aload_0
     143: aload_0
     144: getfield      #54                 // Field sbegin:I
     147: putfield      #45                 // Field sprev:I
     150: return

  private void opStateCheckAnyCharStarSb();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #33                 // Field bytes:[B
      21: astore_2
      22: aload_0
      23: getfield      #2                  // Field s:I
      26: aload_0
      27: getfield      #50                 // Field range:I
      30: if_icmpge     104
      33: aload_0
      34: aload_0
      35: getfield      #2                  // Field s:I
      38: iload_1
      39: invokevirtual #198                // Method stateCheckVal:(II)Z
      42: ifeq          50
      45: aload_0
      46: invokespecial #159                // Method opFail:()V
      49: return
      50: aload_0
      51: aload_0
      52: getfield      #51                 // Field ip:I
      55: aload_0
      56: getfield      #2                  // Field s:I
      59: aload_0
      60: getfield      #45                 // Field sprev:I
      63: iload_1
      64: invokevirtual #199                // Method pushAltWithStateCheck:(IIII)V
      67: aload_2
      68: aload_0
      69: getfield      #2                  // Field s:I
      72: baload
      73: bipush        10
      75: if_icmpne     83
      78: aload_0
      79: invokespecial #159                // Method opFail:()V
      82: return
      83: aload_0
      84: aload_0
      85: getfield      #2                  // Field s:I
      88: putfield      #45                 // Field sprev:I
      91: aload_0
      92: dup
      93: getfield      #2                  // Field s:I
      96: iconst_1
      97: iadd
      98: putfield      #2                  // Field s:I
     101: goto          22
     104: aload_0
     105: aload_0
     106: getfield      #54                 // Field sbegin:I
     109: putfield      #45                 // Field sprev:I
     112: return

  private void opStateCheckAnyCharMLStar();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #33                 // Field bytes:[B
      21: astore_2
      22: aload_0
      23: getfield      #2                  // Field s:I
      26: aload_0
      27: getfield      #50                 // Field range:I
      30: if_icmpge     123
      33: aload_0
      34: aload_0
      35: getfield      #2                  // Field s:I
      38: iload_1
      39: invokevirtual #198                // Method stateCheckVal:(II)Z
      42: ifeq          50
      45: aload_0
      46: invokespecial #159                // Method opFail:()V
      49: return
      50: aload_0
      51: aload_0
      52: getfield      #51                 // Field ip:I
      55: aload_0
      56: getfield      #2                  // Field s:I
      59: aload_0
      60: getfield      #45                 // Field sprev:I
      63: iload_1
      64: invokevirtual #199                // Method pushAltWithStateCheck:(IIII)V
      67: aload_0
      68: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      71: aload_2
      72: aload_0
      73: getfield      #2                  // Field s:I
      76: aload_0
      77: getfield      #42                 // Field end:I
      80: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      83: istore_3
      84: aload_0
      85: getfield      #2                  // Field s:I
      88: iload_3
      89: iadd
      90: aload_0
      91: getfield      #50                 // Field range:I
      94: if_icmple     102
      97: aload_0
      98: invokespecial #159                // Method opFail:()V
     101: return
     102: aload_0
     103: aload_0
     104: getfield      #2                  // Field s:I
     107: putfield      #45                 // Field sprev:I
     110: aload_0
     111: dup
     112: getfield      #2                  // Field s:I
     115: iload_3
     116: iadd
     117: putfield      #2                  // Field s:I
     120: goto          22
     123: aload_0
     124: aload_0
     125: getfield      #54                 // Field sbegin:I
     128: putfield      #45                 // Field sprev:I
     131: return

  private void opStateCheckAnyCharMLStarSb();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #2                  // Field s:I
      21: aload_0
      22: getfield      #50                 // Field range:I
      25: if_icmpge     83
      28: aload_0
      29: aload_0
      30: getfield      #2                  // Field s:I
      33: iload_1
      34: invokevirtual #198                // Method stateCheckVal:(II)Z
      37: ifeq          45
      40: aload_0
      41: invokespecial #159                // Method opFail:()V
      44: return
      45: aload_0
      46: aload_0
      47: getfield      #51                 // Field ip:I
      50: aload_0
      51: getfield      #2                  // Field s:I
      54: aload_0
      55: getfield      #45                 // Field sprev:I
      58: iload_1
      59: invokevirtual #199                // Method pushAltWithStateCheck:(IIII)V
      62: aload_0
      63: aload_0
      64: getfield      #2                  // Field s:I
      67: putfield      #45                 // Field sprev:I
      70: aload_0
      71: dup
      72: getfield      #2                  // Field s:I
      75: iconst_1
      76: iadd
      77: putfield      #2                  // Field s:I
      80: goto          17
      83: aload_0
      84: aload_0
      85: getfield      #54                 // Field sbegin:I
      88: putfield      #45                 // Field sprev:I
      91: return

  private void opWord();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     33
      11: aload_0
      12: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      15: aload_0
      16: getfield      #33                 // Field bytes:[B
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: aload_0
      24: getfield      #42                 // Field end:I
      27: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      30: ifne          38
      33: aload_0
      34: invokespecial #159                // Method opFail:()V
      37: return
      38: aload_0
      39: dup
      40: getfield      #2                  // Field s:I
      43: aload_0
      44: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      47: aload_0
      48: getfield      #33                 // Field bytes:[B
      51: aload_0
      52: getfield      #2                  // Field s:I
      55: aload_0
      56: getfield      #42                 // Field end:I
      59: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      62: iadd
      63: putfield      #2                  // Field s:I
      66: aload_0
      67: aload_0
      68: getfield      #54                 // Field sbegin:I
      71: putfield      #45                 // Field sprev:I
      74: return

  private void opWordSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     34
      11: aload_0
      12: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      15: aload_0
      16: getfield      #33                 // Field bytes:[B
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: baload
      24: sipush        255
      27: iand
      28: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      31: ifne          39
      34: aload_0
      35: invokespecial #159                // Method opFail:()V
      38: return
      39: aload_0
      40: dup
      41: getfield      #2                  // Field s:I
      44: iconst_1
      45: iadd
      46: putfield      #2                  // Field s:I
      49: aload_0
      50: aload_0
      51: getfield      #54                 // Field sbegin:I
      54: putfield      #45                 // Field sprev:I
      57: return

  private void opNotWord();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     33
      11: aload_0
      12: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      15: aload_0
      16: getfield      #33                 // Field bytes:[B
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: aload_0
      24: getfield      #42                 // Field end:I
      27: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      30: ifeq          38
      33: aload_0
      34: invokespecial #159                // Method opFail:()V
      37: return
      38: aload_0
      39: dup
      40: getfield      #2                  // Field s:I
      43: aload_0
      44: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      47: aload_0
      48: getfield      #33                 // Field bytes:[B
      51: aload_0
      52: getfield      #2                  // Field s:I
      55: aload_0
      56: getfield      #42                 // Field end:I
      59: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
      62: iadd
      63: putfield      #2                  // Field s:I
      66: aload_0
      67: aload_0
      68: getfield      #54                 // Field sbegin:I
      71: putfield      #45                 // Field sprev:I
      74: return

  private void opNotWordSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     34
      11: aload_0
      12: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      15: aload_0
      16: getfield      #33                 // Field bytes:[B
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: baload
      24: sipush        255
      27: iand
      28: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      31: ifeq          39
      34: aload_0
      35: invokespecial #159                // Method opFail:()V
      38: return
      39: aload_0
      40: dup
      41: getfield      #2                  // Field s:I
      44: iconst_1
      45: iadd
      46: putfield      #2                  // Field s:I
      49: aload_0
      50: aload_0
      51: getfield      #54                 // Field sbegin:I
      54: putfield      #45                 // Field sprev:I
      57: return

  private void opWordBound();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #17                 // Field str:I
       8: if_icmpne     49
      11: aload_0
      12: getfield      #2                  // Field s:I
      15: aload_0
      16: getfield      #50                 // Field range:I
      19: if_icmpge     44
      22: aload_0
      23: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      26: aload_0
      27: getfield      #33                 // Field bytes:[B
      30: aload_0
      31: getfield      #2                  // Field s:I
      34: aload_0
      35: getfield      #42                 // Field end:I
      38: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      41: ifne          133
      44: aload_0
      45: invokespecial #159                // Method opFail:()V
      48: return
      49: aload_0
      50: getfield      #2                  // Field s:I
      53: aload_0
      54: getfield      #42                 // Field end:I
      57: if_icmpne     87
      60: aload_0
      61: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      64: aload_0
      65: getfield      #33                 // Field bytes:[B
      68: aload_0
      69: getfield      #45                 // Field sprev:I
      72: aload_0
      73: getfield      #42                 // Field end:I
      76: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      79: ifne          133
      82: aload_0
      83: invokespecial #159                // Method opFail:()V
      86: return
      87: aload_0
      88: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      91: aload_0
      92: getfield      #33                 // Field bytes:[B
      95: aload_0
      96: getfield      #2                  // Field s:I
      99: aload_0
     100: getfield      #42                 // Field end:I
     103: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
     106: aload_0
     107: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     110: aload_0
     111: getfield      #33                 // Field bytes:[B
     114: aload_0
     115: getfield      #45                 // Field sprev:I
     118: aload_0
     119: getfield      #42                 // Field end:I
     122: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
     125: if_icmpne     133
     128: aload_0
     129: invokespecial #159                // Method opFail:()V
     132: return
     133: return

  private void opWordBoundSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #17                 // Field str:I
       8: if_icmpne     50
      11: aload_0
      12: getfield      #2                  // Field s:I
      15: aload_0
      16: getfield      #50                 // Field range:I
      19: if_icmpge     45
      22: aload_0
      23: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      26: aload_0
      27: getfield      #33                 // Field bytes:[B
      30: aload_0
      31: getfield      #2                  // Field s:I
      34: baload
      35: sipush        255
      38: iand
      39: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      42: ifne          148
      45: aload_0
      46: invokespecial #159                // Method opFail:()V
      49: return
      50: aload_0
      51: getfield      #2                  // Field s:I
      54: aload_0
      55: getfield      #42                 // Field end:I
      58: if_icmpne     100
      61: aload_0
      62: getfield      #45                 // Field sprev:I
      65: aload_0
      66: getfield      #42                 // Field end:I
      69: if_icmpge     95
      72: aload_0
      73: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      76: aload_0
      77: getfield      #33                 // Field bytes:[B
      80: aload_0
      81: getfield      #45                 // Field sprev:I
      84: baload
      85: sipush        255
      88: iand
      89: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      92: ifne          148
      95: aload_0
      96: invokespecial #159                // Method opFail:()V
      99: return
     100: aload_0
     101: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     104: aload_0
     105: getfield      #33                 // Field bytes:[B
     108: aload_0
     109: getfield      #2                  // Field s:I
     112: baload
     113: sipush        255
     116: iand
     117: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
     120: aload_0
     121: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     124: aload_0
     125: getfield      #33                 // Field bytes:[B
     128: aload_0
     129: getfield      #45                 // Field sprev:I
     132: baload
     133: sipush        255
     136: iand
     137: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
     140: if_icmpne     148
     143: aload_0
     144: invokespecial #159                // Method opFail:()V
     147: return
     148: return

  private void opNotWordBound();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #17                 // Field str:I
       8: if_icmpne     49
      11: aload_0
      12: getfield      #2                  // Field s:I
      15: aload_0
      16: getfield      #50                 // Field range:I
      19: if_icmpge     133
      22: aload_0
      23: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      26: aload_0
      27: getfield      #33                 // Field bytes:[B
      30: aload_0
      31: getfield      #2                  // Field s:I
      34: aload_0
      35: getfield      #42                 // Field end:I
      38: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      41: ifeq          133
      44: aload_0
      45: invokespecial #159                // Method opFail:()V
      48: return
      49: aload_0
      50: getfield      #2                  // Field s:I
      53: aload_0
      54: getfield      #42                 // Field end:I
      57: if_icmpne     87
      60: aload_0
      61: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      64: aload_0
      65: getfield      #33                 // Field bytes:[B
      68: aload_0
      69: getfield      #45                 // Field sprev:I
      72: aload_0
      73: getfield      #42                 // Field end:I
      76: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      79: ifeq          133
      82: aload_0
      83: invokespecial #159                // Method opFail:()V
      86: return
      87: aload_0
      88: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      91: aload_0
      92: getfield      #33                 // Field bytes:[B
      95: aload_0
      96: getfield      #2                  // Field s:I
      99: aload_0
     100: getfield      #42                 // Field end:I
     103: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
     106: aload_0
     107: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     110: aload_0
     111: getfield      #33                 // Field bytes:[B
     114: aload_0
     115: getfield      #45                 // Field sprev:I
     118: aload_0
     119: getfield      #42                 // Field end:I
     122: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
     125: if_icmpeq     133
     128: aload_0
     129: invokespecial #159                // Method opFail:()V
     132: return
     133: return

  private void opNotWordBoundSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #17                 // Field str:I
       8: if_icmpne     50
      11: aload_0
      12: getfield      #2                  // Field s:I
      15: aload_0
      16: getfield      #50                 // Field range:I
      19: if_icmpge     148
      22: aload_0
      23: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      26: aload_0
      27: getfield      #33                 // Field bytes:[B
      30: aload_0
      31: getfield      #2                  // Field s:I
      34: baload
      35: sipush        255
      38: iand
      39: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      42: ifeq          148
      45: aload_0
      46: invokespecial #159                // Method opFail:()V
      49: return
      50: aload_0
      51: getfield      #2                  // Field s:I
      54: aload_0
      55: getfield      #42                 // Field end:I
      58: if_icmpne     100
      61: aload_0
      62: getfield      #45                 // Field sprev:I
      65: aload_0
      66: getfield      #42                 // Field end:I
      69: if_icmpge     148
      72: aload_0
      73: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      76: aload_0
      77: getfield      #33                 // Field bytes:[B
      80: aload_0
      81: getfield      #45                 // Field sprev:I
      84: baload
      85: sipush        255
      88: iand
      89: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      92: ifeq          148
      95: aload_0
      96: invokespecial #159                // Method opFail:()V
      99: return
     100: aload_0
     101: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     104: aload_0
     105: getfield      #33                 // Field bytes:[B
     108: aload_0
     109: getfield      #2                  // Field s:I
     112: baload
     113: sipush        255
     116: iand
     117: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
     120: aload_0
     121: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     124: aload_0
     125: getfield      #33                 // Field bytes:[B
     128: aload_0
     129: getfield      #45                 // Field sprev:I
     132: baload
     133: sipush        255
     136: iand
     137: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
     140: if_icmpeq     148
     143: aload_0
     144: invokespecial #159                // Method opFail:()V
     147: return
     148: return

  private void opWordBegin();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     67
      11: aload_0
      12: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      15: aload_0
      16: getfield      #33                 // Field bytes:[B
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: aload_0
      24: getfield      #42                 // Field end:I
      27: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      30: ifeq          67
      33: aload_0
      34: getfield      #2                  // Field s:I
      37: aload_0
      38: getfield      #17                 // Field str:I
      41: if_icmpeq     66
      44: aload_0
      45: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      48: aload_0
      49: getfield      #33                 // Field bytes:[B
      52: aload_0
      53: getfield      #45                 // Field sprev:I
      56: aload_0
      57: getfield      #42                 // Field end:I
      60: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      63: ifne          67
      66: return
      67: aload_0
      68: invokespecial #159                // Method opFail:()V
      71: return

  private void opWordBeginSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #50                 // Field range:I
       8: if_icmpge     69
      11: aload_0
      12: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      15: aload_0
      16: getfield      #33                 // Field bytes:[B
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: baload
      24: sipush        255
      27: iand
      28: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      31: ifeq          69
      34: aload_0
      35: getfield      #2                  // Field s:I
      38: aload_0
      39: getfield      #17                 // Field str:I
      42: if_icmpeq     68
      45: aload_0
      46: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      49: aload_0
      50: getfield      #33                 // Field bytes:[B
      53: aload_0
      54: getfield      #45                 // Field sprev:I
      57: baload
      58: sipush        255
      61: iand
      62: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      65: ifne          69
      68: return
      69: aload_0
      70: invokespecial #159                // Method opFail:()V
      73: return

  private void opWordEnd();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #17                 // Field str:I
       8: if_icmpeq     67
      11: aload_0
      12: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      15: aload_0
      16: getfield      #33                 // Field bytes:[B
      19: aload_0
      20: getfield      #45                 // Field sprev:I
      23: aload_0
      24: getfield      #42                 // Field end:I
      27: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      30: ifeq          67
      33: aload_0
      34: getfield      #2                  // Field s:I
      37: aload_0
      38: getfield      #42                 // Field end:I
      41: if_icmpeq     66
      44: aload_0
      45: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      48: aload_0
      49: getfield      #33                 // Field bytes:[B
      52: aload_0
      53: getfield      #2                  // Field s:I
      56: aload_0
      57: getfield      #42                 // Field end:I
      60: invokevirtual #200                // Method org/jcodings/Encoding.isMbcWord:([BII)Z
      63: ifne          67
      66: return
      67: aload_0
      68: invokespecial #159                // Method opFail:()V
      71: return

  private void opWordEndSb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #17                 // Field str:I
       8: if_icmpeq     69
      11: aload_0
      12: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      15: aload_0
      16: getfield      #33                 // Field bytes:[B
      19: aload_0
      20: getfield      #45                 // Field sprev:I
      23: baload
      24: sipush        255
      27: iand
      28: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      31: ifeq          69
      34: aload_0
      35: getfield      #2                  // Field s:I
      38: aload_0
      39: getfield      #42                 // Field end:I
      42: if_icmpeq     68
      45: aload_0
      46: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      49: aload_0
      50: getfield      #33                 // Field bytes:[B
      53: aload_0
      54: getfield      #2                  // Field s:I
      57: baload
      58: sipush        255
      61: iand
      62: invokevirtual #201                // Method org/jcodings/Encoding.isWord:(I)Z
      65: ifne          69
      68: return
      69: aload_0
      70: invokespecial #159                // Method opFail:()V
      73: return

  private void opBeginBuf();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #17                 // Field str:I
       8: if_icmpeq     15
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return

  private void opEndBuf();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #42                 // Field end:I
       8: if_icmpeq     15
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return

  private void opBeginLine();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #17                 // Field str:I
       8: if_icmpne     26
      11: aload_0
      12: getfield      #202                // Field msaOptions:I
      15: invokestatic  #203                // Method org/joni/Option.isNotBol:(I)Z
      18: ifeq          25
      21: aload_0
      22: invokespecial #159                // Method opFail:()V
      25: return
      26: aload_0
      27: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      30: aload_0
      31: getfield      #33                 // Field bytes:[B
      34: aload_0
      35: getfield      #45                 // Field sprev:I
      38: aload_0
      39: getfield      #42                 // Field end:I
      42: invokevirtual #196                // Method org/jcodings/Encoding.isNewLine:([BII)Z
      45: ifeq          60
      48: aload_0
      49: getfield      #2                  // Field s:I
      52: aload_0
      53: getfield      #42                 // Field end:I
      56: if_icmpeq     60
      59: return
      60: aload_0
      61: invokespecial #159                // Method opFail:()V
      64: return

  private void opEndLine();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #42                 // Field end:I
       8: if_icmpne     59
      11: aload_0
      12: getfield      #17                 // Field str:I
      15: aload_0
      16: getfield      #42                 // Field end:I
      19: if_icmpeq     44
      22: aload_0
      23: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      26: aload_0
      27: getfield      #33                 // Field bytes:[B
      30: aload_0
      31: getfield      #45                 // Field sprev:I
      34: aload_0
      35: getfield      #42                 // Field end:I
      38: invokevirtual #196                // Method org/jcodings/Encoding.isNewLine:([BII)Z
      41: ifne          58
      44: aload_0
      45: getfield      #202                // Field msaOptions:I
      48: invokestatic  #204                // Method org/joni/Option.isNotEol:(I)Z
      51: ifeq          58
      54: aload_0
      55: invokespecial #159                // Method opFail:()V
      58: return
      59: aload_0
      60: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      63: aload_0
      64: getfield      #33                 // Field bytes:[B
      67: aload_0
      68: getfield      #2                  // Field s:I
      71: aload_0
      72: getfield      #42                 // Field end:I
      75: invokevirtual #196                // Method org/jcodings/Encoding.isNewLine:([BII)Z
      78: ifne          84
      81: goto          85
      84: return
      85: aload_0
      86: invokespecial #159                // Method opFail:()V
      89: return

  private void opSemiEndBuf();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #42                 // Field end:I
       8: if_icmpne     59
      11: aload_0
      12: getfield      #17                 // Field str:I
      15: aload_0
      16: getfield      #42                 // Field end:I
      19: if_icmpeq     44
      22: aload_0
      23: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      26: aload_0
      27: getfield      #33                 // Field bytes:[B
      30: aload_0
      31: getfield      #45                 // Field sprev:I
      34: aload_0
      35: getfield      #42                 // Field end:I
      38: invokevirtual #196                // Method org/jcodings/Encoding.isNewLine:([BII)Z
      41: ifne          58
      44: aload_0
      45: getfield      #202                // Field msaOptions:I
      48: invokestatic  #204                // Method org/joni/Option.isNotEol:(I)Z
      51: ifeq          58
      54: aload_0
      55: invokespecial #159                // Method opFail:()V
      58: return
      59: aload_0
      60: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      63: aload_0
      64: getfield      #33                 // Field bytes:[B
      67: aload_0
      68: getfield      #2                  // Field s:I
      71: aload_0
      72: getfield      #42                 // Field end:I
      75: invokevirtual #196                // Method org/jcodings/Encoding.isNewLine:([BII)Z
      78: ifeq          113
      81: aload_0
      82: getfield      #2                  // Field s:I
      85: aload_0
      86: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      89: aload_0
      90: getfield      #33                 // Field bytes:[B
      93: aload_0
      94: getfield      #2                  // Field s:I
      97: aload_0
      98: getfield      #42                 // Field end:I
     101: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
     104: iadd
     105: aload_0
     106: getfield      #42                 // Field end:I
     109: if_icmpne     113
     112: return
     113: aload_0
     114: invokespecial #159                // Method opFail:()V
     117: return

  private void opBeginPosition();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:I
       4: aload_0
       5: getfield      #205                // Field msaStart:I
       8: if_icmpeq     15
      11: aload_0
      12: invokespecial #159                // Method opFail:()V
      15: return

  private void opMemoryStartPush();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: iload_1
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: invokevirtual #206                // Method pushMemStart:(II)V
      26: return

  private void opMemoryStart();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #174                // Field repeatStk:[I
      21: aload_0
      22: getfield      #177                // Field memStartStk:I
      25: iload_1
      26: iadd
      27: aload_0
      28: getfield      #2                  // Field s:I
      31: iastore
      32: return

  private void opMemoryEndPush();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: iload_1
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: invokevirtual #207                // Method pushMemEnd:(II)V
      26: return

  private void opMemoryEnd();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #174                // Field repeatStk:[I
      21: aload_0
      22: getfield      #175                // Field memEndStk:I
      25: iload_1
      26: iadd
      27: aload_0
      28: getfield      #2                  // Field s:I
      31: iastore
      32: return

  private void opMemoryEndPushRec();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: iload_1
      19: invokevirtual #208                // Method getMemStart:(I)I
      22: istore_2
      23: aload_0
      24: iload_1
      25: aload_0
      26: getfield      #2                  // Field s:I
      29: invokevirtual #207                // Method pushMemEnd:(II)V
      32: aload_0
      33: getfield      #174                // Field repeatStk:[I
      36: aload_0
      37: getfield      #177                // Field memStartStk:I
      40: iload_1
      41: iadd
      42: iload_2
      43: iastore
      44: return

  private void opMemoryEndRec();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #174                // Field repeatStk:[I
      21: aload_0
      22: getfield      #175                // Field memEndStk:I
      25: iload_1
      26: iadd
      27: aload_0
      28: getfield      #2                  // Field s:I
      31: iastore
      32: aload_0
      33: iload_1
      34: invokevirtual #208                // Method getMemStart:(I)I
      37: istore_2
      38: aload_0
      39: getfield      #10                 // Field regex:Lorg/joni/Regex;
      42: getfield      #176                // Field org/joni/Regex.btMemStart:I
      45: iload_1
      46: invokestatic  #12                 // Method org/joni/BitStatus.bsAt:(II)Z
      49: ifeq          67
      52: aload_0
      53: getfield      #174                // Field repeatStk:[I
      56: aload_0
      57: getfield      #177                // Field memStartStk:I
      60: iload_1
      61: iadd
      62: iload_2
      63: iastore
      64: goto          87
      67: aload_0
      68: getfield      #174                // Field repeatStk:[I
      71: aload_0
      72: getfield      #177                // Field memStartStk:I
      75: iload_1
      76: iadd
      77: aload_0
      78: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
      81: iload_2
      82: aaload
      83: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
      86: iastore
      87: aload_0
      88: iload_1
      89: invokevirtual #209                // Method pushMemEndMark:(I)V
      92: return

  private boolean backrefInvalid(int);
    Code:
       0: aload_0
       1: getfield      #174                // Field repeatStk:[I
       4: aload_0
       5: getfield      #175                // Field memEndStk:I
       8: iload_1
       9: iadd
      10: iaload
      11: iconst_m1
      12: if_icmpeq     30
      15: aload_0
      16: getfield      #174                // Field repeatStk:[I
      19: aload_0
      20: getfield      #177                // Field memStartStk:I
      23: iload_1
      24: iadd
      25: iaload
      26: iconst_m1
      27: if_icmpne     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  private int backrefStart(int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field regex:Lorg/joni/Regex;
       4: getfield      #176                // Field org/joni/Regex.btMemStart:I
       7: iload_1
       8: invokestatic  #12                 // Method org/joni/BitStatus.bsAt:(II)Z
      11: ifeq          36
      14: aload_0
      15: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
      18: aload_0
      19: getfield      #174                // Field repeatStk:[I
      22: aload_0
      23: getfield      #177                // Field memStartStk:I
      26: iload_1
      27: iadd
      28: iaload
      29: aaload
      30: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
      33: goto          47
      36: aload_0
      37: getfield      #174                // Field repeatStk:[I
      40: aload_0
      41: getfield      #177                // Field memStartStk:I
      44: iload_1
      45: iadd
      46: iaload
      47: ireturn

  private int backrefEnd(int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field regex:Lorg/joni/Regex;
       4: getfield      #178                // Field org/joni/Regex.btMemEnd:I
       7: iload_1
       8: invokestatic  #12                 // Method org/joni/BitStatus.bsAt:(II)Z
      11: ifeq          36
      14: aload_0
      15: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
      18: aload_0
      19: getfield      #174                // Field repeatStk:[I
      22: aload_0
      23: getfield      #175                // Field memEndStk:I
      26: iload_1
      27: iadd
      28: iaload
      29: aaload
      30: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
      33: goto          47
      36: aload_0
      37: getfield      #174                // Field repeatStk:[I
      40: aload_0
      41: getfield      #175                // Field memEndStk:I
      44: iload_1
      45: iadd
      46: iaload
      47: ireturn

  private void backref(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #10                 // Field regex:Lorg/joni/Regex;
       5: getfield      #173                // Field org/joni/Regex.numMem:I
       8: if_icmpgt     19
      11: aload_0
      12: iload_1
      13: invokespecial #210                // Method backrefInvalid:(I)Z
      16: ifeq          24
      19: aload_0
      20: invokespecial #159                // Method opFail:()V
      23: return
      24: aload_0
      25: iload_1
      26: invokespecial #211                // Method backrefStart:(I)I
      29: istore_2
      30: aload_0
      31: iload_1
      32: invokespecial #212                // Method backrefEnd:(I)I
      35: istore_3
      36: iload_3
      37: iload_2
      38: isub
      39: istore        4
      41: aload_0
      42: getfield      #2                  // Field s:I
      45: iload         4
      47: iadd
      48: aload_0
      49: getfield      #50                 // Field range:I
      52: if_icmple     60
      55: aload_0
      56: invokespecial #159                // Method opFail:()V
      59: return
      60: aload_0
      61: aload_0
      62: getfield      #2                  // Field s:I
      65: putfield      #45                 // Field sprev:I
      68: iload         4
      70: dup
      71: iconst_1
      72: isub
      73: istore        4
      75: ifle          111
      78: aload_0
      79: getfield      #33                 // Field bytes:[B
      82: iload_2
      83: iinc          2, 1
      86: baload
      87: aload_0
      88: getfield      #33                 // Field bytes:[B
      91: aload_0
      92: dup
      93: getfield      #2                  // Field s:I
      96: dup_x1
      97: iconst_1
      98: iadd
      99: putfield      #2                  // Field s:I
     102: baload
     103: if_icmpeq     68
     106: aload_0
     107: invokespecial #159                // Method opFail:()V
     110: return
     111: aload_0
     112: getfield      #45                 // Field sprev:I
     115: aload_0
     116: getfield      #50                 // Field range:I
     119: if_icmpge     170
     122: aload_0
     123: getfield      #45                 // Field sprev:I
     126: aload_0
     127: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     130: aload_0
     131: getfield      #33                 // Field bytes:[B
     134: aload_0
     135: getfield      #45                 // Field sprev:I
     138: aload_0
     139: getfield      #42                 // Field end:I
     142: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
     145: dup
     146: istore        5
     148: iadd
     149: aload_0
     150: getfield      #2                  // Field s:I
     153: if_icmpge     170
     156: aload_0
     157: dup
     158: getfield      #45                 // Field sprev:I
     161: iload         5
     163: iadd
     164: putfield      #45                 // Field sprev:I
     167: goto          122
     170: return

  private void opBackRef1();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #213                // Method backref:(I)V
       5: return

  private void opBackRef2();
    Code:
       0: aload_0
       1: iconst_2
       2: invokespecial #213                // Method backref:(I)V
       5: return

  private void opBackRefN();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field code:[I
       5: aload_0
       6: dup
       7: getfield      #51                 // Field ip:I
      10: dup_x1
      11: iconst_1
      12: iadd
      13: putfield      #51                 // Field ip:I
      16: iaload
      17: invokespecial #213                // Method backref:(I)V
      20: return

  private void opBackRefNIC();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: iload_1
      18: aload_0
      19: getfield      #10                 // Field regex:Lorg/joni/Regex;
      22: getfield      #173                // Field org/joni/Regex.numMem:I
      25: if_icmpgt     36
      28: aload_0
      29: iload_1
      30: invokespecial #210                // Method backrefInvalid:(I)Z
      33: ifeq          41
      36: aload_0
      37: invokespecial #159                // Method opFail:()V
      40: return
      41: aload_0
      42: iload_1
      43: invokespecial #211                // Method backrefStart:(I)I
      46: istore_2
      47: aload_0
      48: iload_1
      49: invokespecial #212                // Method backrefEnd:(I)I
      52: istore_3
      53: iload_3
      54: iload_2
      55: isub
      56: istore        4
      58: aload_0
      59: getfield      #2                  // Field s:I
      62: iload         4
      64: iadd
      65: aload_0
      66: getfield      #50                 // Field range:I
      69: if_icmple     77
      72: aload_0
      73: invokespecial #159                // Method opFail:()V
      76: return
      77: aload_0
      78: aload_0
      79: getfield      #2                  // Field s:I
      82: putfield      #45                 // Field sprev:I
      85: aload_0
      86: aload_0
      87: getfield      #2                  // Field s:I
      90: putfield      #31                 // Field value:I
      93: aload_0
      94: aload_0
      95: getfield      #10                 // Field regex:Lorg/joni/Regex;
      98: getfield      #183                // Field org/joni/Regex.caseFoldFlag:I
     101: iload_2
     102: aload_0
     103: iload         4
     105: aload_0
     106: getfield      #42                 // Field end:I
     109: invokespecial #214                // Method stringCmpIC:(IILorg/jcodings/IntHolder;II)Z
     112: ifne          120
     115: aload_0
     116: invokespecial #159                // Method opFail:()V
     119: return
     120: aload_0
     121: aload_0
     122: getfield      #31                 // Field value:I
     125: putfield      #2                  // Field s:I
     128: aload_0
     129: getfield      #45                 // Field sprev:I
     132: aload_0
     133: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     136: aload_0
     137: getfield      #33                 // Field bytes:[B
     140: aload_0
     141: getfield      #45                 // Field sprev:I
     144: aload_0
     145: getfield      #42                 // Field end:I
     148: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
     151: dup
     152: istore        5
     154: iadd
     155: aload_0
     156: getfield      #2                  // Field s:I
     159: if_icmpge     176
     162: aload_0
     163: dup
     164: getfield      #45                 // Field sprev:I
     167: iload         5
     169: iadd
     170: putfield      #45                 // Field sprev:I
     173: goto          128
     176: return

  private void opBackRefMulti();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: iconst_0
      18: istore_2
      19: iload_2
      20: iload_1
      21: if_icmpge     230
      24: aload_0
      25: getfield      #4                  // Field code:[I
      28: aload_0
      29: dup
      30: getfield      #51                 // Field ip:I
      33: dup_x1
      34: iconst_1
      35: iadd
      36: putfield      #51                 // Field ip:I
      39: iaload
      40: istore_3
      41: aload_0
      42: iload_3
      43: invokespecial #210                // Method backrefInvalid:(I)Z
      46: ifeq          52
      49: goto          224
      52: aload_0
      53: iload_3
      54: invokespecial #211                // Method backrefStart:(I)I
      57: istore        4
      59: aload_0
      60: iload_3
      61: invokespecial #212                // Method backrefEnd:(I)I
      64: istore        5
      66: iload         5
      68: iload         4
      70: isub
      71: istore        6
      73: aload_0
      74: getfield      #2                  // Field s:I
      77: iload         6
      79: iadd
      80: aload_0
      81: getfield      #50                 // Field range:I
      84: if_icmple     92
      87: aload_0
      88: invokespecial #159                // Method opFail:()V
      91: return
      92: aload_0
      93: aload_0
      94: getfield      #2                  // Field s:I
      97: putfield      #45                 // Field sprev:I
     100: aload_0
     101: getfield      #2                  // Field s:I
     104: istore        7
     106: iload         6
     108: dup
     109: iconst_1
     110: isub
     111: istore        6
     113: ifle          142
     116: aload_0
     117: getfield      #33                 // Field bytes:[B
     120: iload         4
     122: iinc          4, 1
     125: baload
     126: aload_0
     127: getfield      #33                 // Field bytes:[B
     130: iload         7
     132: iinc          7, 1
     135: baload
     136: if_icmpeq     106
     139: goto          224
     142: aload_0
     143: iload         7
     145: putfield      #2                  // Field s:I
     148: aload_0
     149: getfield      #45                 // Field sprev:I
     152: aload_0
     153: getfield      #50                 // Field range:I
     156: if_icmpge     207
     159: aload_0
     160: getfield      #45                 // Field sprev:I
     163: aload_0
     164: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     167: aload_0
     168: getfield      #33                 // Field bytes:[B
     171: aload_0
     172: getfield      #45                 // Field sprev:I
     175: aload_0
     176: getfield      #42                 // Field end:I
     179: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
     182: dup
     183: istore        8
     185: iadd
     186: aload_0
     187: getfield      #2                  // Field s:I
     190: if_icmpge     207
     193: aload_0
     194: dup
     195: getfield      #45                 // Field sprev:I
     198: iload         8
     200: iadd
     201: putfield      #45                 // Field sprev:I
     204: goto          159
     207: aload_0
     208: dup
     209: getfield      #51                 // Field ip:I
     212: iload_1
     213: iload_2
     214: isub
     215: iconst_1
     216: isub
     217: iadd
     218: putfield      #51                 // Field ip:I
     221: goto          230
     224: iinc          2, 1
     227: goto          19
     230: iload_2
     231: iload_1
     232: if_icmpne     240
     235: aload_0
     236: invokespecial #159                // Method opFail:()V
     239: return
     240: return

  private void opBackRefMultiIC();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: iconst_0
      18: istore_2
      19: iload_2
      20: iload_1
      21: if_icmpge     213
      24: aload_0
      25: getfield      #4                  // Field code:[I
      28: aload_0
      29: dup
      30: getfield      #51                 // Field ip:I
      33: dup_x1
      34: iconst_1
      35: iadd
      36: putfield      #51                 // Field ip:I
      39: iaload
      40: istore_3
      41: aload_0
      42: iload_3
      43: invokespecial #210                // Method backrefInvalid:(I)Z
      46: ifeq          52
      49: goto          207
      52: aload_0
      53: iload_3
      54: invokespecial #211                // Method backrefStart:(I)I
      57: istore        4
      59: aload_0
      60: iload_3
      61: invokespecial #212                // Method backrefEnd:(I)I
      64: istore        5
      66: iload         5
      68: iload         4
      70: isub
      71: istore        6
      73: aload_0
      74: getfield      #2                  // Field s:I
      77: iload         6
      79: iadd
      80: aload_0
      81: getfield      #50                 // Field range:I
      84: if_icmple     92
      87: aload_0
      88: invokespecial #159                // Method opFail:()V
      91: return
      92: aload_0
      93: aload_0
      94: getfield      #2                  // Field s:I
      97: putfield      #45                 // Field sprev:I
     100: aload_0
     101: aload_0
     102: getfield      #2                  // Field s:I
     105: putfield      #31                 // Field value:I
     108: aload_0
     109: aload_0
     110: getfield      #10                 // Field regex:Lorg/joni/Regex;
     113: getfield      #183                // Field org/joni/Regex.caseFoldFlag:I
     116: iload         4
     118: aload_0
     119: iload         6
     121: aload_0
     122: getfield      #42                 // Field end:I
     125: invokespecial #214                // Method stringCmpIC:(IILorg/jcodings/IntHolder;II)Z
     128: ifne          134
     131: goto          207
     134: aload_0
     135: aload_0
     136: getfield      #31                 // Field value:I
     139: putfield      #2                  // Field s:I
     142: aload_0
     143: getfield      #45                 // Field sprev:I
     146: aload_0
     147: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     150: aload_0
     151: getfield      #33                 // Field bytes:[B
     154: aload_0
     155: getfield      #45                 // Field sprev:I
     158: aload_0
     159: getfield      #42                 // Field end:I
     162: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
     165: dup
     166: istore        7
     168: iadd
     169: aload_0
     170: getfield      #2                  // Field s:I
     173: if_icmpge     190
     176: aload_0
     177: dup
     178: getfield      #45                 // Field sprev:I
     181: iload         7
     183: iadd
     184: putfield      #45                 // Field sprev:I
     187: goto          142
     190: aload_0
     191: dup
     192: getfield      #51                 // Field ip:I
     195: iload_1
     196: iload_2
     197: isub
     198: iconst_1
     199: isub
     200: iadd
     201: putfield      #51                 // Field ip:I
     204: goto          213
     207: iinc          2, 1
     210: goto          19
     213: iload_2
     214: iload_1
     215: if_icmpne     223
     218: aload_0
     219: invokespecial #159                // Method opFail:()V
     222: return
     223: return

  private boolean memIsInMemp(int, int, int);
    Code:
       0: iconst_0
       1: istore        4
       3: iload         4
       5: iload_2
       6: if_icmpge     34
       9: aload_0
      10: getfield      #4                  // Field code:[I
      13: iload_3
      14: iinc          3, 1
      17: iaload
      18: istore        5
      20: iload_1
      21: iload         5
      23: if_icmpne     28
      26: iconst_1
      27: ireturn
      28: iinc          4, 1
      31: goto          3
      34: iconst_0
      35: ireturn

  private boolean backrefMatchAtNestedLevel(boolean, int, int, int, int);
    Code:
       0: iconst_m1
       1: istore        6
       3: iconst_0
       4: istore        7
       6: aload_0
       7: getfield      #6                  // Field stk:I
      10: iconst_1
      11: isub
      12: istore        8
      14: iload         8
      16: iflt          255
      19: aload_0
      20: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
      23: iload         8
      25: aaload
      26: astore        9
      28: aload         9
      30: getfield      #8                  // Field org/joni/StackEntry.type:I
      33: sipush        2048
      36: if_icmpne     45
      39: iinc          7, -1
      42: goto          249
      45: aload         9
      47: getfield      #8                  // Field org/joni/StackEntry.type:I
      50: sipush        2304
      53: if_icmpne     62
      56: iinc          7, 1
      59: goto          249
      62: iload         7
      64: iload_3
      65: if_icmpne     249
      68: aload         9
      70: getfield      #8                  // Field org/joni/StackEntry.type:I
      73: sipush        256
      76: if_icmpne     216
      79: aload_0
      80: aload         9
      82: invokevirtual #9                  // Method org/joni/StackEntry.getMemNum:()I
      85: iload         4
      87: iload         5
      89: invokespecial #215                // Method memIsInMemp:(III)Z
      92: ifeq          249
      95: aload         9
      97: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
     100: istore        10
     102: iload         6
     104: iconst_m1
     105: if_icmpeq     213
     108: iload         6
     110: iload         10
     112: isub
     113: aload_0
     114: getfield      #42                 // Field end:I
     117: aload_0
     118: getfield      #2                  // Field s:I
     121: isub
     122: if_icmple     127
     125: iconst_0
     126: ireturn
     127: iload         10
     129: istore        11
     131: aload_0
     132: aload_0
     133: getfield      #2                  // Field s:I
     136: putfield      #31                 // Field value:I
     139: iload_1
     140: ifeq          165
     143: aload_0
     144: iload_2
     145: iload         10
     147: aload_0
     148: iload         6
     150: iload         10
     152: isub
     153: aload_0
     154: getfield      #42                 // Field end:I
     157: invokespecial #214                // Method stringCmpIC:(IILorg/jcodings/IntHolder;II)Z
     160: ifne          203
     163: iconst_0
     164: ireturn
     165: iload         11
     167: iload         6
     169: if_icmpge     203
     172: aload_0
     173: getfield      #33                 // Field bytes:[B
     176: iload         11
     178: iinc          11, 1
     181: baload
     182: aload_0
     183: getfield      #33                 // Field bytes:[B
     186: aload_0
     187: dup
     188: getfield      #31                 // Field value:I
     191: dup_x1
     192: iconst_1
     193: iadd
     194: putfield      #31                 // Field value:I
     197: baload
     198: if_icmpeq     165
     201: iconst_0
     202: ireturn
     203: aload_0
     204: aload_0
     205: getfield      #31                 // Field value:I
     208: putfield      #2                  // Field s:I
     211: iconst_1
     212: ireturn
     213: goto          249
     216: aload         9
     218: getfield      #8                  // Field org/joni/StackEntry.type:I
     221: ldc           #22                 // int 33280
     223: if_icmpne     249
     226: aload_0
     227: aload         9
     229: invokevirtual #9                  // Method org/joni/StackEntry.getMemNum:()I
     232: iload         4
     234: iload         5
     236: invokespecial #215                // Method memIsInMemp:(III)Z
     239: ifeq          249
     242: aload         9
     244: invokevirtual #16                 // Method org/joni/StackEntry.getMemPStr:()I
     247: istore        6
     249: iinc          8, -1
     252: goto          14
     255: iconst_0
     256: ireturn

  private void opBackRefAtLevel();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #4                  // Field code:[I
      21: aload_0
      22: dup
      23: getfield      #51                 // Field ip:I
      26: dup_x1
      27: iconst_1
      28: iadd
      29: putfield      #51                 // Field ip:I
      32: iaload
      33: istore_2
      34: aload_0
      35: getfield      #4                  // Field code:[I
      38: aload_0
      39: dup
      40: getfield      #51                 // Field ip:I
      43: dup_x1
      44: iconst_1
      45: iadd
      46: putfield      #51                 // Field ip:I
      49: iaload
      50: istore_3
      51: aload_0
      52: aload_0
      53: getfield      #2                  // Field s:I
      56: putfield      #45                 // Field sprev:I
      59: aload_0
      60: iload_1
      61: ifeq          68
      64: iconst_1
      65: goto          69
      68: iconst_0
      69: aload_0
      70: getfield      #10                 // Field regex:Lorg/joni/Regex;
      73: getfield      #183                // Field org/joni/Regex.caseFoldFlag:I
      76: iload_2
      77: iload_3
      78: aload_0
      79: getfield      #51                 // Field ip:I
      82: invokespecial #216                // Method backrefMatchAtNestedLevel:(ZIIII)Z
      85: ifeq          149
      88: aload_0
      89: getfield      #45                 // Field sprev:I
      92: aload_0
      93: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      96: aload_0
      97: getfield      #33                 // Field bytes:[B
     100: aload_0
     101: getfield      #45                 // Field sprev:I
     104: aload_0
     105: getfield      #42                 // Field end:I
     108: invokevirtual #187                // Method org/jcodings/Encoding.length:([BII)I
     111: dup
     112: istore        4
     114: iadd
     115: aload_0
     116: getfield      #2                  // Field s:I
     119: if_icmpge     136
     122: aload_0
     123: dup
     124: getfield      #45                 // Field sprev:I
     127: iload         4
     129: iadd
     130: putfield      #45                 // Field sprev:I
     133: goto          88
     136: aload_0
     137: dup
     138: getfield      #51                 // Field ip:I
     141: iload_3
     142: iadd
     143: putfield      #51                 // Field ip:I
     146: goto          154
     149: aload_0
     150: invokespecial #159                // Method opFail:()V
     153: return
     154: return

  private void opSetOptionPush();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #51                 // Field ip:I
       5: aload_0
       6: getfield      #2                  // Field s:I
       9: aload_0
      10: getfield      #45                 // Field sprev:I
      13: invokevirtual #197                // Method pushAlt:(III)V
      16: aload_0
      17: dup
      18: getfield      #51                 // Field ip:I
      21: iconst_3
      22: iadd
      23: putfield      #51                 // Field ip:I
      26: return

  private void opSetOption();
    Code:
       0: return

  private void opNullCheckStart();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: iload_1
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: invokevirtual #217                // Method pushNullCheckStart:(II)V
      26: return

  private void nullCheckFound();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: tableswitch   { // 55 to 65
                    55: 76
                    56: 76
                    57: 102
                    58: 102
                    59: 102
                    60: 102
                    61: 102
                    62: 89
                    63: 89
                    64: 89
                    65: 89
               default: 102
          }
      76: aload_0
      77: dup
      78: getfield      #51                 // Field ip:I
      81: iconst_1
      82: iadd
      83: putfield      #51                 // Field ip:I
      86: goto          112
      89: aload_0
      90: dup
      91: getfield      #51                 // Field ip:I
      94: iconst_1
      95: iadd
      96: putfield      #51                 // Field ip:I
      99: goto          112
     102: new           #160                // class org/joni/exception/InternalException
     105: dup
     106: ldc           #218                // String unexpected bytecode (bug)
     108: invokespecial #162                // Method org/joni/exception/InternalException."<init>":(Ljava/lang/String;)V
     111: athrow
     112: return

  private void opNullCheckEnd();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: iload_1
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: invokevirtual #219                // Method nullCheck:(II)I
      26: istore_2
      27: iload_2
      28: ifeq          35
      31: aload_0
      32: invokespecial #220                // Method nullCheckFound:()V
      35: return

  private void opNullCheckEndMemST();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: iload_1
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: invokevirtual #221                // Method nullCheckMemSt:(II)I
      26: istore_2
      27: iload_2
      28: ifeq          45
      31: iload_2
      32: iconst_m1
      33: if_icmpne     41
      36: aload_0
      37: invokespecial #159                // Method opFail:()V
      40: return
      41: aload_0
      42: invokespecial #220                // Method nullCheckFound:()V
      45: return

  private void opNullCheckEndMemSTPush();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: iload_1
      19: aload_0
      20: getfield      #2                  // Field s:I
      23: invokevirtual #222                // Method nullCheckMemStRec:(II)I
      26: istore_2
      27: iload_2
      28: ifeq          48
      31: iload_2
      32: iconst_m1
      33: if_icmpne     41
      36: aload_0
      37: invokespecial #159                // Method opFail:()V
      40: return
      41: aload_0
      42: invokespecial #220                // Method nullCheckFound:()V
      45: goto          53
      48: aload_0
      49: iload_1
      50: invokevirtual #223                // Method pushNullCheckEnd:(I)V
      53: return

  private void opJump();
    Code:
       0: aload_0
       1: dup
       2: getfield      #51                 // Field ip:I
       5: aload_0
       6: getfield      #4                  // Field code:[I
       9: aload_0
      10: getfield      #51                 // Field ip:I
      13: iaload
      14: iconst_1
      15: iadd
      16: iadd
      17: putfield      #51                 // Field ip:I
      20: return

  private void opPush();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: aload_0
      19: getfield      #51                 // Field ip:I
      22: iload_1
      23: iadd
      24: aload_0
      25: getfield      #2                  // Field s:I
      28: aload_0
      29: getfield      #45                 // Field sprev:I
      32: invokevirtual #197                // Method pushAlt:(III)V
      35: return

  private void opStateCheckPush();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: aload_0
      19: getfield      #2                  // Field s:I
      22: iload_1
      23: invokevirtual #198                // Method stateCheckVal:(II)Z
      26: ifeq          34
      29: aload_0
      30: invokespecial #159                // Method opFail:()V
      33: return
      34: aload_0
      35: getfield      #4                  // Field code:[I
      38: aload_0
      39: dup
      40: getfield      #51                 // Field ip:I
      43: dup_x1
      44: iconst_1
      45: iadd
      46: putfield      #51                 // Field ip:I
      49: iaload
      50: istore_2
      51: aload_0
      52: aload_0
      53: getfield      #51                 // Field ip:I
      56: iload_2
      57: iadd
      58: aload_0
      59: getfield      #2                  // Field s:I
      62: aload_0
      63: getfield      #45                 // Field sprev:I
      66: iload_1
      67: invokevirtual #199                // Method pushAltWithStateCheck:(IIII)V
      70: return

  private void opStateCheckPushOrJump();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #4                  // Field code:[I
      21: aload_0
      22: dup
      23: getfield      #51                 // Field ip:I
      26: dup_x1
      27: iconst_1
      28: iadd
      29: putfield      #51                 // Field ip:I
      32: iaload
      33: istore_2
      34: aload_0
      35: aload_0
      36: getfield      #2                  // Field s:I
      39: iload_1
      40: invokevirtual #198                // Method stateCheckVal:(II)Z
      43: ifeq          59
      46: aload_0
      47: dup
      48: getfield      #51                 // Field ip:I
      51: iload_2
      52: iadd
      53: putfield      #51                 // Field ip:I
      56: goto          78
      59: aload_0
      60: aload_0
      61: getfield      #51                 // Field ip:I
      64: iload_2
      65: iadd
      66: aload_0
      67: getfield      #2                  // Field s:I
      70: aload_0
      71: getfield      #45                 // Field sprev:I
      74: iload_1
      75: invokevirtual #199                // Method pushAltWithStateCheck:(IIII)V
      78: return

  private void opStateCheck();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: aload_0
      19: getfield      #2                  // Field s:I
      22: iload_1
      23: invokevirtual #198                // Method stateCheckVal:(II)Z
      26: ifeq          34
      29: aload_0
      30: invokespecial #159                // Method opFail:()V
      33: return
      34: aload_0
      35: aload_0
      36: getfield      #2                  // Field s:I
      39: iload_1
      40: invokevirtual #224                // Method pushStateCheck:(II)V
      43: return

  private void opPop();
    Code:
       0: aload_0
       1: invokevirtual #225                // Method popOne:()V
       4: return

  private void opPushOrJumpExact1();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #4                  // Field code:[I
      21: aload_0
      22: getfield      #51                 // Field ip:I
      25: iaload
      26: aload_0
      27: getfield      #33                 // Field bytes:[B
      30: aload_0
      31: getfield      #2                  // Field s:I
      34: baload
      35: if_icmpne     78
      38: aload_0
      39: getfield      #2                  // Field s:I
      42: aload_0
      43: getfield      #50                 // Field range:I
      46: if_icmpge     78
      49: aload_0
      50: dup
      51: getfield      #51                 // Field ip:I
      54: iconst_1
      55: iadd
      56: putfield      #51                 // Field ip:I
      59: aload_0
      60: aload_0
      61: getfield      #51                 // Field ip:I
      64: iload_1
      65: iadd
      66: aload_0
      67: getfield      #2                  // Field s:I
      70: aload_0
      71: getfield      #45                 // Field sprev:I
      74: invokevirtual #197                // Method pushAlt:(III)V
      77: return
      78: aload_0
      79: dup
      80: getfield      #51                 // Field ip:I
      83: iload_1
      84: iconst_1
      85: iadd
      86: iadd
      87: putfield      #51                 // Field ip:I
      90: return

  private void opPushIfPeekNext();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #2                  // Field s:I
      21: aload_0
      22: getfield      #50                 // Field range:I
      25: if_icmpge     78
      28: aload_0
      29: getfield      #4                  // Field code:[I
      32: aload_0
      33: getfield      #51                 // Field ip:I
      36: iaload
      37: aload_0
      38: getfield      #33                 // Field bytes:[B
      41: aload_0
      42: getfield      #2                  // Field s:I
      45: baload
      46: if_icmpne     78
      49: aload_0
      50: dup
      51: getfield      #51                 // Field ip:I
      54: iconst_1
      55: iadd
      56: putfield      #51                 // Field ip:I
      59: aload_0
      60: aload_0
      61: getfield      #51                 // Field ip:I
      64: iload_1
      65: iadd
      66: aload_0
      67: getfield      #2                  // Field s:I
      70: aload_0
      71: getfield      #45                 // Field sprev:I
      74: invokevirtual #197                // Method pushAlt:(III)V
      77: return
      78: aload_0
      79: dup
      80: getfield      #51                 // Field ip:I
      83: iconst_1
      84: iadd
      85: putfield      #51                 // Field ip:I
      88: return

  private void opRepeat();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #4                  // Field code:[I
      21: aload_0
      22: dup
      23: getfield      #51                 // Field ip:I
      26: dup_x1
      27: iconst_1
      28: iadd
      29: putfield      #51                 // Field ip:I
      32: iaload
      33: istore_2
      34: aload_0
      35: getfield      #174                // Field repeatStk:[I
      38: iload_1
      39: aload_0
      40: getfield      #6                  // Field stk:I
      43: iastore
      44: aload_0
      45: iload_1
      46: aload_0
      47: getfield      #51                 // Field ip:I
      50: invokevirtual #226                // Method pushRepeat:(II)V
      53: aload_0
      54: getfield      #10                 // Field regex:Lorg/joni/Regex;
      57: getfield      #227                // Field org/joni/Regex.repeatRangeLo:[I
      60: iload_1
      61: iaload
      62: ifne          83
      65: aload_0
      66: aload_0
      67: getfield      #51                 // Field ip:I
      70: iload_2
      71: iadd
      72: aload_0
      73: getfield      #2                  // Field s:I
      76: aload_0
      77: getfield      #45                 // Field sprev:I
      80: invokevirtual #197                // Method pushAlt:(III)V
      83: return

  private void opRepeatNG();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #4                  // Field code:[I
      21: aload_0
      22: dup
      23: getfield      #51                 // Field ip:I
      26: dup_x1
      27: iconst_1
      28: iadd
      29: putfield      #51                 // Field ip:I
      32: iaload
      33: istore_2
      34: aload_0
      35: getfield      #174                // Field repeatStk:[I
      38: iload_1
      39: aload_0
      40: getfield      #6                  // Field stk:I
      43: iastore
      44: aload_0
      45: iload_1
      46: aload_0
      47: getfield      #51                 // Field ip:I
      50: invokevirtual #226                // Method pushRepeat:(II)V
      53: aload_0
      54: getfield      #10                 // Field regex:Lorg/joni/Regex;
      57: getfield      #227                // Field org/joni/Regex.repeatRangeLo:[I
      60: iload_1
      61: iaload
      62: ifne          91
      65: aload_0
      66: aload_0
      67: getfield      #51                 // Field ip:I
      70: aload_0
      71: getfield      #2                  // Field s:I
      74: aload_0
      75: getfield      #45                 // Field sprev:I
      78: invokevirtual #197                // Method pushAlt:(III)V
      81: aload_0
      82: dup
      83: getfield      #51                 // Field ip:I
      86: iload_2
      87: iadd
      88: putfield      #51                 // Field ip:I
      91: return

  private void repeatInc(int, int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
       4: iload_2
       5: aaload
       6: astore_3
       7: aload_3
       8: invokevirtual #228                // Method org/joni/StackEntry.increaseRepeatCount:()V
      11: aload_3
      12: invokevirtual #229                // Method org/joni/StackEntry.getRepeatCount:()I
      15: aload_0
      16: getfield      #10                 // Field regex:Lorg/joni/Regex;
      19: getfield      #230                // Field org/joni/Regex.repeatRangeHi:[I
      22: iload_1
      23: iaload
      24: if_icmplt     30
      27: goto          81
      30: aload_3
      31: invokevirtual #229                // Method org/joni/StackEntry.getRepeatCount:()I
      34: aload_0
      35: getfield      #10                 // Field regex:Lorg/joni/Regex;
      38: getfield      #227                // Field org/joni/Regex.repeatRangeLo:[I
      41: iload_1
      42: iaload
      43: if_icmplt     73
      46: aload_0
      47: aload_0
      48: getfield      #51                 // Field ip:I
      51: aload_0
      52: getfield      #2                  // Field s:I
      55: aload_0
      56: getfield      #45                 // Field sprev:I
      59: invokevirtual #197                // Method pushAlt:(III)V
      62: aload_0
      63: aload_3
      64: invokevirtual #231                // Method org/joni/StackEntry.getRepeatPCode:()I
      67: putfield      #51                 // Field ip:I
      70: goto          81
      73: aload_0
      74: aload_3
      75: invokevirtual #231                // Method org/joni/StackEntry.getRepeatPCode:()I
      78: putfield      #51                 // Field ip:I
      81: aload_0
      82: iload_2
      83: invokevirtual #232                // Method pushRepeatInc:(I)V
      86: return

  private void opRepeatInc();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #174                // Field repeatStk:[I
      21: iload_1
      22: iaload
      23: istore_2
      24: aload_0
      25: iload_1
      26: iload_2
      27: invokespecial #233                // Method repeatInc:(II)V
      30: return

  private void opRepeatIncSG();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: iload_1
      19: invokevirtual #234                // Method getRepeat:(I)I
      22: istore_2
      23: aload_0
      24: iload_1
      25: iload_2
      26: invokespecial #233                // Method repeatInc:(II)V
      29: return

  private void repeatIncNG(int, int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
       4: iload_2
       5: aaload
       6: astore_3
       7: aload_3
       8: invokevirtual #228                // Method org/joni/StackEntry.increaseRepeatCount:()V
      11: aload_3
      12: invokevirtual #229                // Method org/joni/StackEntry.getRepeatCount:()I
      15: aload_0
      16: getfield      #10                 // Field regex:Lorg/joni/Regex;
      19: getfield      #230                // Field org/joni/Regex.repeatRangeHi:[I
      22: iload_1
      23: iaload
      24: if_icmpge     87
      27: aload_3
      28: invokevirtual #229                // Method org/joni/StackEntry.getRepeatCount:()I
      31: aload_0
      32: getfield      #10                 // Field regex:Lorg/joni/Regex;
      35: getfield      #227                // Field org/joni/Regex.repeatRangeLo:[I
      38: iload_1
      39: iaload
      40: if_icmplt     71
      43: aload_3
      44: invokevirtual #231                // Method org/joni/StackEntry.getRepeatPCode:()I
      47: istore        4
      49: aload_0
      50: iload_2
      51: invokevirtual #232                // Method pushRepeatInc:(I)V
      54: aload_0
      55: iload         4
      57: aload_0
      58: getfield      #2                  // Field s:I
      61: aload_0
      62: getfield      #45                 // Field sprev:I
      65: invokevirtual #197                // Method pushAlt:(III)V
      68: goto          108
      71: aload_0
      72: aload_3
      73: invokevirtual #231                // Method org/joni/StackEntry.getRepeatPCode:()I
      76: putfield      #51                 // Field ip:I
      79: aload_0
      80: iload_2
      81: invokevirtual #232                // Method pushRepeatInc:(I)V
      84: goto          108
      87: aload_3
      88: invokevirtual #229                // Method org/joni/StackEntry.getRepeatCount:()I
      91: aload_0
      92: getfield      #10                 // Field regex:Lorg/joni/Regex;
      95: getfield      #230                // Field org/joni/Regex.repeatRangeHi:[I
      98: iload_1
      99: iaload
     100: if_icmpne     108
     103: aload_0
     104: iload_2
     105: invokevirtual #232                // Method pushRepeatInc:(I)V
     108: return

  private void opRepeatIncNG();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #174                // Field repeatStk:[I
      21: iload_1
      22: iaload
      23: istore_2
      24: aload_0
      25: iload_1
      26: iload_2
      27: invokespecial #235                // Method repeatIncNG:(II)V
      30: return

  private void opRepeatIncNGSG();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: iload_1
      19: invokevirtual #234                // Method getRepeat:(I)I
      22: istore_2
      23: aload_0
      24: iload_1
      25: iload_2
      26: invokespecial #235                // Method repeatIncNG:(II)V
      29: return

  private void opPushPos();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field s:I
       5: aload_0
       6: getfield      #45                 // Field sprev:I
       9: invokevirtual #236                // Method pushPos:(II)V
      12: return

  private void opPopPos();
    Code:
       0: aload_0
       1: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
       4: aload_0
       5: invokevirtual #237                // Method posEnd:()I
       8: aaload
       9: astore_1
      10: aload_0
      11: aload_1
      12: invokevirtual #238                // Method org/joni/StackEntry.getStatePStr:()I
      15: putfield      #2                  // Field s:I
      18: aload_0
      19: aload_1
      20: invokevirtual #239                // Method org/joni/StackEntry.getStatePStrPrev:()I
      23: putfield      #45                 // Field sprev:I
      26: return

  private void opPushPosNot();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: aload_0
      19: getfield      #51                 // Field ip:I
      22: iload_1
      23: iadd
      24: aload_0
      25: getfield      #2                  // Field s:I
      28: aload_0
      29: getfield      #45                 // Field sprev:I
      32: invokevirtual #240                // Method pushPosNot:(III)V
      35: return

  private void opFailPos();
    Code:
       0: aload_0
       1: invokevirtual #241                // Method popTilPosNot:()V
       4: aload_0
       5: invokespecial #159                // Method opFail:()V
       8: return

  private void opPushStopBT();
    Code:
       0: aload_0
       1: invokevirtual #242                // Method pushStopBT:()V
       4: return

  private void opPopStopBT();
    Code:
       0: aload_0
       1: invokevirtual #243                // Method stopBtEnd:()V
       4: return

  private void opLookBehind();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: aload_0
      19: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      22: aload_0
      23: getfield      #33                 // Field bytes:[B
      26: aload_0
      27: getfield      #17                 // Field str:I
      30: aload_0
      31: getfield      #2                  // Field s:I
      34: aload_0
      35: getfield      #42                 // Field end:I
      38: iload_1
      39: invokevirtual #244                // Method org/jcodings/Encoding.stepBack:([BIIII)I
      42: putfield      #2                  // Field s:I
      45: aload_0
      46: getfield      #2                  // Field s:I
      49: iconst_m1
      50: if_icmpne     58
      53: aload_0
      54: invokespecial #159                // Method opFail:()V
      57: return
      58: aload_0
      59: aload_0
      60: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      63: aload_0
      64: getfield      #33                 // Field bytes:[B
      67: aload_0
      68: getfield      #17                 // Field str:I
      71: aload_0
      72: getfield      #2                  // Field s:I
      75: aload_0
      76: getfield      #42                 // Field end:I
      79: invokevirtual #245                // Method org/jcodings/Encoding.prevCharHead:([BIII)I
      82: putfield      #45                 // Field sprev:I
      85: return

  private void opLookBehindSb();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: dup
      19: getfield      #2                  // Field s:I
      22: iload_1
      23: isub
      24: putfield      #2                  // Field s:I
      27: aload_0
      28: getfield      #2                  // Field s:I
      31: aload_0
      32: getfield      #17                 // Field str:I
      35: if_icmpge     43
      38: aload_0
      39: invokespecial #159                // Method opFail:()V
      42: return
      43: aload_0
      44: aload_0
      45: getfield      #2                  // Field s:I
      48: aload_0
      49: getfield      #17                 // Field str:I
      52: if_icmpne     59
      55: iconst_m1
      56: goto          65
      59: aload_0
      60: getfield      #2                  // Field s:I
      63: iconst_1
      64: isub
      65: putfield      #45                 // Field sprev:I
      68: return

  private void opPushLookBehindNot();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: getfield      #4                  // Field code:[I
      21: aload_0
      22: dup
      23: getfield      #51                 // Field ip:I
      26: dup_x1
      27: iconst_1
      28: iadd
      29: putfield      #51                 // Field ip:I
      32: iaload
      33: istore_2
      34: aload_0
      35: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
      38: aload_0
      39: getfield      #33                 // Field bytes:[B
      42: aload_0
      43: getfield      #17                 // Field str:I
      46: aload_0
      47: getfield      #2                  // Field s:I
      50: aload_0
      51: getfield      #42                 // Field end:I
      54: iload_2
      55: invokevirtual #244                // Method org/jcodings/Encoding.stepBack:([BIIII)I
      58: istore_3
      59: iload_3
      60: iconst_m1
      61: if_icmpne     77
      64: aload_0
      65: dup
      66: getfield      #51                 // Field ip:I
      69: iload_1
      70: iadd
      71: putfield      #51                 // Field ip:I
      74: goto          127
      77: aload_0
      78: aload_0
      79: getfield      #51                 // Field ip:I
      82: iload_1
      83: iadd
      84: aload_0
      85: getfield      #2                  // Field s:I
      88: aload_0
      89: getfield      #45                 // Field sprev:I
      92: invokevirtual #246                // Method pushLookBehindNot:(III)V
      95: aload_0
      96: iload_3
      97: putfield      #2                  // Field s:I
     100: aload_0
     101: aload_0
     102: getfield      #32                 // Field enc:Lorg/jcodings/Encoding;
     105: aload_0
     106: getfield      #33                 // Field bytes:[B
     109: aload_0
     110: getfield      #17                 // Field str:I
     113: aload_0
     114: getfield      #2                  // Field s:I
     117: aload_0
     118: getfield      #42                 // Field end:I
     121: invokevirtual #245                // Method org/jcodings/Encoding.prevCharHead:([BIII)I
     124: putfield      #45                 // Field sprev:I
     127: return

  private void opFailLookBehindNot();
    Code:
       0: aload_0
       1: invokevirtual #247                // Method popTilLookBehindNot:()V
       4: aload_0
       5: invokespecial #159                // Method opFail:()V
       8: return

  private void opCall();
    Code:
       0: aload_0
       1: getfield      #4                  // Field code:[I
       4: aload_0
       5: dup
       6: getfield      #51                 // Field ip:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #51                 // Field ip:I
      15: iaload
      16: istore_1
      17: aload_0
      18: aload_0
      19: getfield      #51                 // Field ip:I
      22: invokevirtual #248                // Method pushCallFrame:(I)V
      25: aload_0
      26: iload_1
      27: putfield      #51                 // Field ip:I
      30: return

  private void opReturn();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #249                // Method sreturn:()I
       5: putfield      #51                 // Field ip:I
       8: aload_0
       9: invokevirtual #250                // Method pushReturn:()V
      12: return

  private void opFail();
    Code:
       0: aload_0
       1: getfield      #7                  // Field stack:[Lorg/joni/StackEntry;
       4: ifnonnull     21
       7: aload_0
       8: aload_0
       9: getfield      #10                 // Field regex:Lorg/joni/Regex;
      12: getfield      #251                // Field org/joni/Regex.codeLength:I
      15: iconst_1
      16: isub
      17: putfield      #51                 // Field ip:I
      20: return
      21: aload_0
      22: invokevirtual #252                // Method pop:()Lorg/joni/StackEntry;
      25: astore_1
      26: aload_0
      27: aload_1
      28: invokevirtual #253                // Method org/joni/StackEntry.getStatePCode:()I
      31: putfield      #51                 // Field ip:I
      34: aload_0
      35: aload_1
      36: invokevirtual #238                // Method org/joni/StackEntry.getStatePStr:()I
      39: putfield      #2                  // Field s:I
      42: aload_0
      43: aload_1
      44: invokevirtual #239                // Method org/joni/StackEntry.getStatePStrPrev:()I
      47: putfield      #45                 // Field sprev:I
      50: return

  private int finish();
    Code:
       0: aload_0
       1: getfield      #53                 // Field bestLen:I
       4: ireturn
}
