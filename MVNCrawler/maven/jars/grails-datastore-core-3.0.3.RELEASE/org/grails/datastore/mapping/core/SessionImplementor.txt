Compiled from "SessionImplementor.java"
public interface org.grails.datastore.mapping.core.SessionImplementor<T> {
  public abstract boolean isStateless();

  public abstract boolean isStateless(org.grails.datastore.mapping.model.PersistentEntity);

  public abstract void addPendingInsert(org.grails.datastore.mapping.core.impl.PendingInsert);

  public abstract void addPendingUpdate(org.grails.datastore.mapping.core.impl.PendingUpdate);

  public abstract java.util.Map<org.grails.datastore.mapping.model.PersistentEntity, java.util.Collection<org.grails.datastore.mapping.core.impl.PendingInsert>> getPendingInserts();

  public abstract java.util.Map<org.grails.datastore.mapping.model.PersistentEntity, java.util.Collection<org.grails.datastore.mapping.core.impl.PendingUpdate>> getPendingUpdates();

  public abstract java.util.Collection<java.lang.Runnable> getPendingDeletes();

  public abstract void cacheEntry(org.grails.datastore.mapping.model.PersistentEntity, java.io.Serializable, T);

  public abstract T getCachedEntry(org.grails.datastore.mapping.model.PersistentEntity, java.io.Serializable);

  public abstract T getCachedEntry(org.grails.datastore.mapping.model.PersistentEntity, java.io.Serializable, boolean);

  public abstract void cacheInstance(java.lang.Class, java.io.Serializable, java.lang.Object);

  public abstract java.lang.Object getCachedInstance(java.lang.Class, java.io.Serializable);

  public abstract boolean isCached(java.lang.Class, java.io.Serializable);

  public abstract java.util.Collection getCachedCollection(org.grails.datastore.mapping.model.PersistentEntity, java.io.Serializable, java.lang.String);

  public abstract void cacheCollection(org.grails.datastore.mapping.model.PersistentEntity, java.io.Serializable, java.util.Collection, java.lang.String);

  public abstract void addPostFlushOperation(java.lang.Runnable);
}
