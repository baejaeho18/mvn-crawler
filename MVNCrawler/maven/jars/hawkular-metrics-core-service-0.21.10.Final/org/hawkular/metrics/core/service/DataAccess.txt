Compiled from "DataAccess.java"
public interface org.hawkular.metrics.core.service.DataAccess {
  public abstract rx.Observable<com.datastax.driver.core.ResultSet> insertTenant(org.hawkular.metrics.model.Tenant, boolean);

  public abstract rx.Observable<com.datastax.driver.core.Row> findAllTenantIds();

  public abstract rx.Observable<com.datastax.driver.core.Row> findTenant(java.lang.String);

  public abstract <T> com.datastax.driver.core.ResultSetFuture insertMetricInMetricsIndex(org.hawkular.metrics.model.Metric<T>, boolean);

  public abstract <T> rx.Observable<com.datastax.driver.core.Row> findMetricInData(org.hawkular.metrics.model.MetricId<T>);

  public abstract <T> rx.Observable<com.datastax.driver.core.Row> findMetricInMetricsIndex(org.hawkular.metrics.model.MetricId<T>);

  public abstract <T> rx.Observable<com.datastax.driver.core.Row> getMetricTags(org.hawkular.metrics.model.MetricId<T>);

  public abstract <T> rx.Observable<com.datastax.driver.core.ResultSet> addTags(org.hawkular.metrics.model.Metric<T>, java.util.Map<java.lang.String, java.lang.String>);

  public abstract <T> rx.Observable<com.datastax.driver.core.ResultSet> deleteTags(org.hawkular.metrics.model.Metric<T>, java.util.Set<java.lang.String>);

  public abstract <T> rx.Observable<java.lang.Integer> updateMetricsIndex(rx.Observable<org.hawkular.metrics.model.Metric<T>>);

  public abstract <T> rx.Observable<com.datastax.driver.core.Row> findMetricsInMetricsIndex(java.lang.String, org.hawkular.metrics.model.MetricType<T>);

  public abstract rx.Observable<com.datastax.driver.core.Row> findAllMetricsInData();

  public abstract rx.Observable<java.lang.Integer> insertGaugeData(org.hawkular.metrics.model.Metric<java.lang.Double>);

  public abstract rx.Observable<java.lang.Integer> insertGaugeData(org.hawkular.metrics.model.Metric<java.lang.Double>, int);

  public abstract rx.Observable<java.lang.Integer> insertStringData(org.hawkular.metrics.model.Metric<java.lang.String>, int);

  public abstract rx.Observable<java.lang.Integer> insertStringData(org.hawkular.metrics.model.Metric<java.lang.String>, int, int);

  public abstract rx.Observable<java.lang.Integer> insertCounterData(org.hawkular.metrics.model.Metric<java.lang.Long>);

  public abstract rx.Observable<java.lang.Integer> insertCounterData(org.hawkular.metrics.model.Metric<java.lang.Long>, int);

  public abstract rx.Observable<com.datastax.driver.core.Row> findCounterData(org.hawkular.metrics.model.MetricId<java.lang.Long>, long, long, int, org.hawkular.metrics.core.service.Order, int);

  public abstract rx.Observable<com.datastax.driver.core.Row> findCompressedData(org.hawkular.metrics.model.MetricId<?>, long, long, int, org.hawkular.metrics.core.service.Order);

  public abstract rx.Observable<com.datastax.driver.core.Row> findGaugeData(org.hawkular.metrics.model.MetricId<java.lang.Double>, long, long, int, org.hawkular.metrics.core.service.Order, int);

  public abstract rx.Observable<com.datastax.driver.core.Row> findStringData(org.hawkular.metrics.model.MetricId<java.lang.String>, long, long, int, org.hawkular.metrics.core.service.Order, int);

  public abstract rx.Observable<com.datastax.driver.core.Row> findAvailabilityData(org.hawkular.metrics.model.MetricId<org.hawkular.metrics.model.AvailabilityType>, long, long, int, org.hawkular.metrics.core.service.Order, int);

  public abstract rx.Observable<com.datastax.driver.core.Row> findAvailabilityData(org.hawkular.metrics.model.MetricId<org.hawkular.metrics.model.AvailabilityType>, long);

  public abstract rx.Observable<com.datastax.driver.core.ResultSet> deleteGaugeMetric(java.lang.String, java.lang.String, org.hawkular.metrics.model.Interval, long);

  public abstract rx.Observable<java.lang.Integer> insertAvailabilityData(org.hawkular.metrics.model.Metric<org.hawkular.metrics.model.AvailabilityType>);

  public abstract rx.Observable<java.lang.Integer> insertAvailabilityData(org.hawkular.metrics.model.Metric<org.hawkular.metrics.model.AvailabilityType>, int);

  public abstract <T> com.datastax.driver.core.ResultSetFuture findDataRetentions(java.lang.String, org.hawkular.metrics.model.MetricType<T>);

  public abstract <T> rx.Observable<com.datastax.driver.core.ResultSet> updateRetentionsIndex(java.lang.String, org.hawkular.metrics.model.MetricType<T>, java.util.Map<java.lang.String, java.lang.Integer>);

  public abstract <T> com.datastax.driver.core.ResultSetFuture updateRetentionsIndex(org.hawkular.metrics.model.Metric<T>);

  public abstract <T> rx.Observable<com.datastax.driver.core.ResultSet> insertIntoMetricsTagsIndex(org.hawkular.metrics.model.Metric<T>, java.util.Map<java.lang.String, java.lang.String>);

  public abstract <T> rx.Observable<com.datastax.driver.core.ResultSet> deleteFromMetricsTagsIndex(org.hawkular.metrics.model.Metric<T>, java.util.Map<java.lang.String, java.lang.String>);

  public abstract rx.Observable<com.datastax.driver.core.Row> findMetricsByTagName(java.lang.String, java.lang.String);

  public abstract rx.Observable<com.datastax.driver.core.Row> findMetricsByTagNameValue(java.lang.String, java.lang.String, java.lang.String);

  public abstract rx.Observable<com.datastax.driver.core.Row> findAllMetricsFromTagsIndex();

  public abstract <T> rx.Observable<com.datastax.driver.core.ResultSet> deleteAndInsertCompressedGauge(org.hawkular.metrics.model.MetricId<T>, long, org.hawkular.metrics.core.service.compress.CompressedPointContainer, long, long, int);
}
