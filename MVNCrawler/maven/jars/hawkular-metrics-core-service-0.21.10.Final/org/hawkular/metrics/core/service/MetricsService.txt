Compiled from "MetricsService.java"
public interface org.hawkular.metrics.core.service.MetricsService {
  public abstract rx.Observable<java.lang.Void> createTenant(org.hawkular.metrics.model.Tenant, boolean);

  public abstract rx.Observable<org.hawkular.metrics.model.Tenant> getTenants();

  public abstract rx.Observable<java.lang.Void> createMetric(org.hawkular.metrics.model.Metric<?>, boolean);

  public abstract rx.Observable<org.hawkular.metrics.model.Metric<?>> findAllMetrics();

  public abstract <T> rx.Observable<org.hawkular.metrics.model.Metric<T>> findMetric(org.hawkular.metrics.model.MetricId<T>);

  public abstract <T> rx.Observable<org.hawkular.metrics.model.Metric<T>> findMetrics(java.lang.String, org.hawkular.metrics.model.MetricType<T>);

  public abstract <T> rx.Observable<org.hawkular.metrics.model.Metric<T>> findMetricsWithFilters(java.lang.String, org.hawkular.metrics.model.MetricType<T>, java.util.Map<java.lang.String, java.lang.String>);

  public abstract rx.Observable<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>> getTagValues(java.lang.String, org.hawkular.metrics.model.MetricType<?>, java.util.Map<java.lang.String, java.lang.String>);

  public abstract rx.Observable<java.util.Map<java.lang.String, java.lang.String>> getMetricTags(org.hawkular.metrics.model.MetricId<?>);

  public abstract rx.Observable<java.lang.Void> addTags(org.hawkular.metrics.model.Metric<?>, java.util.Map<java.lang.String, java.lang.String>);

  public abstract rx.Observable<java.lang.Void> deleteTags(org.hawkular.metrics.model.Metric<?>, java.util.Set<java.lang.String>);

  public abstract <T> rx.Observable<java.lang.Void> addDataPoints(org.hawkular.metrics.model.MetricType<T>, rx.Observable<org.hawkular.metrics.model.Metric<T>>);

  public abstract <T> rx.Observable<org.hawkular.metrics.model.DataPoint<T>> findDataPoints(org.hawkular.metrics.model.MetricId<T>, long, long, int, org.hawkular.metrics.core.service.Order);

  public abstract <T> rx.Observable<org.hawkular.metrics.model.DataPoint<T>> findDataPoints(org.hawkular.metrics.model.MetricId<T>, long, long, int, org.hawkular.metrics.core.service.Order, int);

  public abstract rx.Observable<java.lang.Void> compressBlock(rx.Observable<? extends org.hawkular.metrics.model.MetricId<?>>, long, int);

  public abstract <T> rx.Observable<org.hawkular.metrics.model.NamedDataPoint<T>> findDataPoints(java.util.List<org.hawkular.metrics.model.MetricId<T>>, long, long, int, org.hawkular.metrics.core.service.Order);

  public abstract <T> rx.Observable<org.hawkular.metrics.model.NamedDataPoint<T>> findDataPoints(java.lang.String, org.hawkular.metrics.model.MetricType<T>, java.util.Map<java.lang.String, java.lang.String>, long, long, int, org.hawkular.metrics.core.service.Order);

  public abstract <T> rx.Observable<T> findGaugeData(org.hawkular.metrics.model.MetricId<java.lang.Double>, long, long, rx.functions.Func1<rx.Observable<org.hawkular.metrics.model.DataPoint<java.lang.Double>>, rx.Observable<T>>...);

  public abstract rx.Observable<java.util.List<org.hawkular.metrics.model.NumericBucketPoint>> findGaugeStats(org.hawkular.metrics.model.MetricId<java.lang.Double>, org.hawkular.metrics.model.param.BucketConfig, java.util.List<org.hawkular.metrics.model.Percentile>);

  public abstract rx.Observable<java.util.Map<java.lang.String, org.hawkular.metrics.model.TaggedBucketPoint>> findGaugeStats(org.hawkular.metrics.model.MetricId<java.lang.Double>, java.util.Map<java.lang.String, java.lang.String>, long, long, java.util.List<org.hawkular.metrics.model.Percentile>);

  public abstract <T extends java.lang.Number> rx.Observable<java.util.List<org.hawkular.metrics.model.NumericBucketPoint>> findNumericStats(java.util.List<org.hawkular.metrics.model.MetricId<T>>, long, long, org.hawkular.metrics.model.Buckets, java.util.List<org.hawkular.metrics.model.Percentile>, boolean, boolean);

  public abstract rx.Observable<org.hawkular.metrics.model.DataPoint<org.hawkular.metrics.model.AvailabilityType>> findAvailabilityData(org.hawkular.metrics.model.MetricId<org.hawkular.metrics.model.AvailabilityType>, long, long, boolean, int, org.hawkular.metrics.core.service.Order);

  public abstract rx.Observable<java.util.List<org.hawkular.metrics.model.AvailabilityBucketPoint>> findAvailabilityStats(org.hawkular.metrics.model.MetricId<org.hawkular.metrics.model.AvailabilityType>, long, long, org.hawkular.metrics.model.Buckets);

  public abstract rx.Observable<org.hawkular.metrics.model.DataPoint<java.lang.String>> findStringData(org.hawkular.metrics.model.MetricId<java.lang.String>, long, long, boolean, int, org.hawkular.metrics.core.service.Order);

  public abstract rx.Observable<java.util.List<org.hawkular.metrics.model.NumericBucketPoint>> findCounterStats(org.hawkular.metrics.model.MetricId<java.lang.Long>, org.hawkular.metrics.model.param.BucketConfig, java.util.List<org.hawkular.metrics.model.Percentile>);

  public abstract rx.Observable<java.util.Map<java.lang.String, org.hawkular.metrics.model.TaggedBucketPoint>> findCounterStats(org.hawkular.metrics.model.MetricId<java.lang.Long>, java.util.Map<java.lang.String, java.lang.String>, long, long, java.util.List<org.hawkular.metrics.model.Percentile>);

  public abstract rx.Observable<org.hawkular.metrics.model.DataPoint<java.lang.Double>> findRateData(org.hawkular.metrics.model.MetricId<? extends java.lang.Number>, long, long, int, org.hawkular.metrics.core.service.Order);

  public abstract <T extends java.lang.Number> rx.Observable<org.hawkular.metrics.model.NamedDataPoint<java.lang.Double>> findRateData(java.util.List<org.hawkular.metrics.model.MetricId<T>>, long, long, int, org.hawkular.metrics.core.service.Order);

  public abstract rx.Observable<java.util.List<org.hawkular.metrics.model.NumericBucketPoint>> findRateStats(org.hawkular.metrics.model.MetricId<? extends java.lang.Number>, org.hawkular.metrics.model.param.BucketConfig, java.util.List<org.hawkular.metrics.model.Percentile>);

  public abstract rx.Observable<java.util.List<long[]>> getPeriods(org.hawkular.metrics.model.MetricId<java.lang.Double>, java.util.function.Predicate<java.lang.Double>, long, long);

  public abstract rx.Observable<org.hawkular.metrics.model.Metric<?>> insertedDataEvents();

  public abstract <T> rx.functions.Func1<org.hawkular.metrics.model.Metric<T>, java.lang.Boolean> idFilter(java.lang.String);
}
