Compiled from "LLkGrammarAnalyzer.java"
public interface antlr.LLkGrammarAnalyzer extends antlr.GrammarAnalyzer {
  public abstract boolean deterministic(antlr.AlternativeBlock);

  public abstract boolean deterministic(antlr.OneOrMoreBlock);

  public abstract boolean deterministic(antlr.ZeroOrMoreBlock);

  public abstract antlr.Lookahead FOLLOW(int, antlr.RuleEndElement);

  public abstract antlr.Lookahead look(int, antlr.ActionElement);

  public abstract antlr.Lookahead look(int, antlr.AlternativeBlock);

  public abstract antlr.Lookahead look(int, antlr.BlockEndElement);

  public abstract antlr.Lookahead look(int, antlr.CharLiteralElement);

  public abstract antlr.Lookahead look(int, antlr.CharRangeElement);

  public abstract antlr.Lookahead look(int, antlr.GrammarAtom);

  public abstract antlr.Lookahead look(int, antlr.OneOrMoreBlock);

  public abstract antlr.Lookahead look(int, antlr.RuleBlock);

  public abstract antlr.Lookahead look(int, antlr.RuleEndElement);

  public abstract antlr.Lookahead look(int, antlr.RuleRefElement);

  public abstract antlr.Lookahead look(int, antlr.StringLiteralElement);

  public abstract antlr.Lookahead look(int, antlr.SynPredBlock);

  public abstract antlr.Lookahead look(int, antlr.TokenRangeElement);

  public abstract antlr.Lookahead look(int, antlr.TreeElement);

  public abstract antlr.Lookahead look(int, antlr.WildcardElement);

  public abstract antlr.Lookahead look(int, antlr.ZeroOrMoreBlock);

  public abstract antlr.Lookahead look(int, java.lang.String);

  public abstract void setGrammar(antlr.Grammar);

  public abstract boolean subruleCanBeInverted(antlr.AlternativeBlock, boolean);
}
