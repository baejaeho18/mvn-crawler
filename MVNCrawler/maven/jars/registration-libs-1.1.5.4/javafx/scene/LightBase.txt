Compiled from "LightBase.java"
public abstract class javafx.scene.LightBase extends javafx.scene.Node {
  private com.sun.javafx.geom.transform.Affine3D localToSceneTx;

  private javafx.beans.property.ObjectProperty<javafx.scene.paint.Color> color;

  private javafx.beans.property.BooleanProperty lightOn;

  private javafx.collections.ObservableList<javafx.scene.Node> scope;

  protected javafx.scene.LightBase();
    Code:
       0: aload_0
       1: getstatic     #6                  // Field javafx/scene/paint/Color.WHITE:Ljavafx/scene/paint/Color;
       4: invokespecial #7                  // Method "<init>":(Ljavafx/scene/paint/Color;)V
       7: return

  protected javafx.scene.LightBase(javafx.scene.paint.Color);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method javafx/scene/Node."<init>":()V
       4: aload_0
       5: new           #9                  // class com/sun/javafx/geom/transform/Affine3D
       8: dup
       9: invokespecial #10                 // Method com/sun/javafx/geom/transform/Affine3D."<init>":()V
      12: putfield      #11                 // Field localToSceneTx:Lcom/sun/javafx/geom/transform/Affine3D;
      15: aload_0
      16: invokestatic  #12                 // Method com/sun/javafx/scene/LightBaseHelper.initHelper:(Ljavafx/scene/LightBase;)V
      19: getstatic     #13                 // Field javafx/application/ConditionalFeature.SCENE3D:Ljavafx/application/ConditionalFeature;
      22: invokestatic  #14                 // Method javafx/application/Platform.isSupported:(Ljavafx/application/ConditionalFeature;)Z
      25: ifne          43
      28: ldc           #15                 // class javafx/scene/LightBase
      30: invokevirtual #16                 // Method java/lang/Class.getName:()Ljava/lang/String;
      33: astore_2
      34: aload_2
      35: invokestatic  #17                 // Method com/sun/javafx/logging/PlatformLogger.getLogger:(Ljava/lang/String;)Lcom/sun/javafx/logging/PlatformLogger;
      38: ldc           #18                 // String System can\'t support ConditionalFeature.SCENE3D
      40: invokevirtual #19                 // Method com/sun/javafx/logging/PlatformLogger.warning:(Ljava/lang/String;)V
      43: aload_0
      44: aload_1
      45: invokevirtual #20                 // Method setColor:(Ljavafx/scene/paint/Color;)V
      48: aload_0
      49: invokevirtual #21                 // Method localToSceneTransformProperty:()Ljavafx/beans/property/ReadOnlyObjectProperty;
      52: aload_0
      53: invokedynamic #22,  0             // InvokeDynamic #0:invalidated:(Ljavafx/scene/LightBase;)Ljavafx/beans/InvalidationListener;
      58: invokevirtual #23                 // Method javafx/beans/property/ReadOnlyObjectProperty.addListener:(Ljavafx/beans/InvalidationListener;)V
      61: return

  public final void setColor(javafx.scene.paint.Color);
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method colorProperty:()Ljavafx/beans/property/ObjectProperty;
       4: aload_1
       5: invokevirtual #25                 // Method javafx/beans/property/ObjectProperty.set:(Ljava/lang/Object;)V
       8: return

  public final javafx.scene.paint.Color getColor();
    Code:
       0: aload_0
       1: getfield      #26                 // Field color:Ljavafx/beans/property/ObjectProperty;
       4: ifnonnull     11
       7: aconst_null
       8: goto          21
      11: aload_0
      12: getfield      #26                 // Field color:Ljavafx/beans/property/ObjectProperty;
      15: invokevirtual #27                 // Method javafx/beans/property/ObjectProperty.get:()Ljava/lang/Object;
      18: checkcast     #28                 // class javafx/scene/paint/Color
      21: areturn

  public final javafx.beans.property.ObjectProperty<javafx.scene.paint.Color> colorProperty();
    Code:
       0: aload_0
       1: getfield      #26                 // Field color:Ljavafx/beans/property/ObjectProperty;
       4: ifnonnull     22
       7: aload_0
       8: new           #29                 // class javafx/scene/LightBase$2
      11: dup
      12: aload_0
      13: aload_0
      14: ldc           #30                 // String color
      16: invokespecial #31                 // Method javafx/scene/LightBase$2."<init>":(Ljavafx/scene/LightBase;Ljava/lang/Object;Ljava/lang/String;)V
      19: putfield      #26                 // Field color:Ljavafx/beans/property/ObjectProperty;
      22: aload_0
      23: getfield      #26                 // Field color:Ljavafx/beans/property/ObjectProperty;
      26: areturn

  public final void setLightOn(boolean);
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method lightOnProperty:()Ljavafx/beans/property/BooleanProperty;
       4: iload_1
       5: invokevirtual #33                 // Method javafx/beans/property/BooleanProperty.set:(Z)V
       8: return

  public final boolean isLightOn();
    Code:
       0: aload_0
       1: getfield      #34                 // Field lightOn:Ljavafx/beans/property/BooleanProperty;
       4: ifnonnull     11
       7: iconst_1
       8: goto          18
      11: aload_0
      12: getfield      #34                 // Field lightOn:Ljavafx/beans/property/BooleanProperty;
      15: invokevirtual #35                 // Method javafx/beans/property/BooleanProperty.get:()Z
      18: ireturn

  public final javafx.beans.property.BooleanProperty lightOnProperty();
    Code:
       0: aload_0
       1: getfield      #34                 // Field lightOn:Ljavafx/beans/property/BooleanProperty;
       4: ifnonnull     23
       7: aload_0
       8: new           #36                 // class javafx/scene/LightBase$3
      11: dup
      12: aload_0
      13: aload_0
      14: ldc           #37                 // String lightOn
      16: iconst_1
      17: invokespecial #38                 // Method javafx/scene/LightBase$3."<init>":(Ljavafx/scene/LightBase;Ljava/lang/Object;Ljava/lang/String;Z)V
      20: putfield      #34                 // Field lightOn:Ljavafx/beans/property/BooleanProperty;
      23: aload_0
      24: getfield      #34                 // Field lightOn:Ljavafx/beans/property/BooleanProperty;
      27: areturn

  public javafx.collections.ObservableList<javafx.scene.Node> getScope();
    Code:
       0: aload_0
       1: getfield      #39                 // Field scope:Ljavafx/collections/ObservableList;
       4: ifnonnull     19
       7: aload_0
       8: new           #40                 // class javafx/scene/LightBase$4
      11: dup
      12: aload_0
      13: invokespecial #41                 // Method javafx/scene/LightBase$4."<init>":(Ljavafx/scene/LightBase;)V
      16: putfield      #39                 // Field scope:Ljavafx/collections/ObservableList;
      19: aload_0
      20: getfield      #39                 // Field scope:Ljavafx/collections/ObservableList;
      23: areturn

  void scenesChanged(javafx.scene.Scene, javafx.scene.SubScene, javafx.scene.Scene, javafx.scene.SubScene);
    Code:
       0: aload         4
       2: ifnull        14
       5: aload         4
       7: aload_0
       8: invokevirtual #42                 // Method javafx/scene/SubScene.removeLight:(Ljavafx/scene/LightBase;)V
      11: goto          23
      14: aload_3
      15: ifnull        23
      18: aload_3
      19: aload_0
      20: invokevirtual #43                 // Method javafx/scene/Scene.removeLight:(Ljavafx/scene/LightBase;)V
      23: aload_2
      24: ifnull        35
      27: aload_2
      28: aload_0
      29: invokevirtual #44                 // Method javafx/scene/SubScene.addLight:(Ljavafx/scene/LightBase;)V
      32: goto          44
      35: aload_1
      36: ifnull        44
      39: aload_1
      40: aload_0
      41: invokevirtual #45                 // Method javafx/scene/Scene.addLight:(Ljavafx/scene/LightBase;)V
      44: return

  private void markOwnerDirty();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getSubScene:()Ljavafx/scene/SubScene;
       4: astore_1
       5: aload_1
       6: ifnull        16
       9: aload_1
      10: invokevirtual #47                 // Method javafx/scene/SubScene.markContentDirty:()V
      13: goto          29
      16: aload_0
      17: invokevirtual #48                 // Method getScene:()Ljavafx/scene/Scene;
      20: astore_2
      21: aload_2
      22: ifnull        29
      25: aload_2
      26: invokevirtual #49                 // Method javafx/scene/Scene.setNeedsRepaint:()V
      29: return

  private void markChildrenDirty(javafx.scene.Node);
    Code:
       0: aload_1
       1: instanceof    #50                 // class javafx/scene/shape/Shape3D
       4: ifeq          20
       7: aload_1
       8: checkcast     #50                 // class javafx/scene/shape/Shape3D
      11: getstatic     #51                 // Field com/sun/javafx/scene/DirtyBits.NODE_DRAWMODE:Lcom/sun/javafx/scene/DirtyBits;
      14: invokestatic  #52                 // Method com/sun/javafx/scene/NodeHelper.markDirty:(Ljavafx/scene/Node;Lcom/sun/javafx/scene/DirtyBits;)V
      17: goto          67
      20: aload_1
      21: instanceof    #53                 // class javafx/scene/Parent
      24: ifeq          67
      27: aload_1
      28: checkcast     #53                 // class javafx/scene/Parent
      31: invokevirtual #54                 // Method javafx/scene/Parent.getChildren:()Ljavafx/collections/ObservableList;
      34: invokeinterface #55,  1           // InterfaceMethod javafx/collections/ObservableList.iterator:()Ljava/util/Iterator;
      39: astore_2
      40: aload_2
      41: invokeinterface #56,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      46: ifeq          67
      49: aload_2
      50: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      55: checkcast     #58                 // class javafx/scene/Node
      58: astore_3
      59: aload_0
      60: aload_3
      61: invokespecial #1                  // Method markChildrenDirty:(Ljavafx/scene/Node;)V
      64: goto          40
      67: return

  private void doMarkDirty(com.sun.javafx.scene.DirtyBits);
    Code:
       0: aload_0
       1: getfield      #39                 // Field scope:Ljavafx/collections/ObservableList;
       4: ifnull        19
       7: aload_0
       8: invokevirtual #59                 // Method getScope:()Ljavafx/collections/ObservableList;
      11: invokeinterface #60,  1           // InterfaceMethod javafx/collections/ObservableList.isEmpty:()Z
      16: ifeq          26
      19: aload_0
      20: invokespecial #61                 // Method markOwnerDirty:()V
      23: goto          74
      26: aload_1
      27: getstatic     #62                 // Field com/sun/javafx/scene/DirtyBits.NODE_LIGHT_SCOPE:Lcom/sun/javafx/scene/DirtyBits;
      30: if_acmpeq     74
      33: aload_0
      34: invokevirtual #59                 // Method getScope:()Ljavafx/collections/ObservableList;
      37: astore_2
      38: iconst_0
      39: istore_3
      40: aload_2
      41: invokeinterface #63,  1           // InterfaceMethod javafx/collections/ObservableList.size:()I
      46: istore        4
      48: iload_3
      49: iload         4
      51: if_icmpge     74
      54: aload_0
      55: aload_2
      56: iload_3
      57: invokeinterface #64,  2           // InterfaceMethod javafx/collections/ObservableList.get:(I)Ljava/lang/Object;
      62: checkcast     #58                 // class javafx/scene/Node
      65: invokespecial #1                  // Method markChildrenDirty:(Ljavafx/scene/Node;)V
      68: iinc          3, 1
      71: goto          48
      74: return

  private void doUpdatePeer();
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method getPeer:()Lcom/sun/javafx/sg/prism/NGNode;
       4: checkcast     #66                 // class com/sun/javafx/sg/prism/NGLightBase
       7: astore_1
       8: aload_0
       9: getstatic     #67                 // Field com/sun/javafx/scene/DirtyBits.NODE_LIGHT:Lcom/sun/javafx/scene/DirtyBits;
      12: invokevirtual #68                 // Method isDirty:(Lcom/sun/javafx/scene/DirtyBits;)Z
      15: ifeq          63
      18: aload_1
      19: aload_0
      20: invokevirtual #69                 // Method getColor:()Ljavafx/scene/paint/Color;
      23: ifnonnull     40
      26: invokestatic  #70                 // Method com/sun/javafx/tk/Toolkit.getPaintAccessor:()Lcom/sun/javafx/tk/Toolkit$PaintAccessor;
      29: getstatic     #6                  // Field javafx/scene/paint/Color.WHITE:Ljavafx/scene/paint/Color;
      32: invokeinterface #71,  2           // InterfaceMethod com/sun/javafx/tk/Toolkit$PaintAccessor.getPlatformPaint:(Ljavafx/scene/paint/Paint;)Ljava/lang/Object;
      37: goto          52
      40: invokestatic  #70                 // Method com/sun/javafx/tk/Toolkit.getPaintAccessor:()Lcom/sun/javafx/tk/Toolkit$PaintAccessor;
      43: aload_0
      44: invokevirtual #69                 // Method getColor:()Ljavafx/scene/paint/Color;
      47: invokeinterface #71,  2           // InterfaceMethod com/sun/javafx/tk/Toolkit$PaintAccessor.getPlatformPaint:(Ljavafx/scene/paint/Paint;)Ljava/lang/Object;
      52: invokevirtual #72                 // Method com/sun/javafx/sg/prism/NGLightBase.setColor:(Ljava/lang/Object;)V
      55: aload_1
      56: aload_0
      57: invokevirtual #73                 // Method isLightOn:()Z
      60: invokevirtual #74                 // Method com/sun/javafx/sg/prism/NGLightBase.setLightOn:(Z)V
      63: aload_0
      64: getstatic     #62                 // Field com/sun/javafx/scene/DirtyBits.NODE_LIGHT_SCOPE:Lcom/sun/javafx/scene/DirtyBits;
      67: invokevirtual #68                 // Method isDirty:(Lcom/sun/javafx/scene/DirtyBits;)Z
      70: ifeq          159
      73: aload_0
      74: getfield      #39                 // Field scope:Ljavafx/collections/ObservableList;
      77: ifnull        159
      80: aload_0
      81: invokevirtual #59                 // Method getScope:()Ljavafx/collections/ObservableList;
      84: astore_2
      85: aload_2
      86: invokeinterface #60,  1           // InterfaceMethod javafx/collections/ObservableList.isEmpty:()Z
      91: ifeq          102
      94: aload_1
      95: aconst_null
      96: invokevirtual #75                 // Method com/sun/javafx/sg/prism/NGLightBase.setScope:([Ljava/lang/Object;)V
      99: goto          159
     102: aload_2
     103: invokeinterface #63,  1           // InterfaceMethod javafx/collections/ObservableList.size:()I
     108: anewarray     #76                 // class java/lang/Object
     111: astore_3
     112: iconst_0
     113: istore        4
     115: iload         4
     117: aload_2
     118: invokeinterface #63,  1           // InterfaceMethod javafx/collections/ObservableList.size:()I
     123: if_icmpge     154
     126: aload_2
     127: iload         4
     129: invokeinterface #64,  2           // InterfaceMethod javafx/collections/ObservableList.get:(I)Ljava/lang/Object;
     134: checkcast     #58                 // class javafx/scene/Node
     137: astore        5
     139: aload_3
     140: iload         4
     142: aload         5
     144: invokevirtual #77                 // Method javafx/scene/Node.getPeer:()Lcom/sun/javafx/sg/prism/NGNode;
     147: aastore
     148: iinc          4, 1
     151: goto          115
     154: aload_1
     155: aload_3
     156: invokevirtual #75                 // Method com/sun/javafx/sg/prism/NGLightBase.setScope:([Ljava/lang/Object;)V
     159: aload_0
     160: getstatic     #78                 // Field com/sun/javafx/scene/DirtyBits.NODE_LIGHT_TRANSFORM:Lcom/sun/javafx/scene/DirtyBits;
     163: invokevirtual #68                 // Method isDirty:(Lcom/sun/javafx/scene/DirtyBits;)Z
     166: ifeq          195
     169: aload_0
     170: getfield      #11                 // Field localToSceneTx:Lcom/sun/javafx/geom/transform/Affine3D;
     173: invokevirtual #79                 // Method com/sun/javafx/geom/transform/Affine3D.setToIdentity:()V
     176: aload_0
     177: invokevirtual #80                 // Method getLocalToSceneTransform:()Ljavafx/scene/transform/Transform;
     180: aload_0
     181: getfield      #11                 // Field localToSceneTx:Lcom/sun/javafx/geom/transform/Affine3D;
     184: invokestatic  #81                 // Method com/sun/javafx/scene/transform/TransformHelper.apply:(Ljavafx/scene/transform/Transform;Lcom/sun/javafx/geom/transform/Affine3D;)V
     187: aload_1
     188: aload_0
     189: getfield      #11                 // Field localToSceneTx:Lcom/sun/javafx/geom/transform/Affine3D;
     192: invokevirtual #82                 // Method com/sun/javafx/sg/prism/NGLightBase.setWorldTransform:(Lcom/sun/javafx/geom/transform/Affine3D;)V
     195: return

  private com.sun.javafx.geom.BaseBounds doComputeGeomBounds(com.sun.javafx.geom.BaseBounds, com.sun.javafx.geom.transform.BaseTransform);
    Code:
       0: new           #83                 // class com/sun/javafx/geom/BoxBounds
       3: dup
       4: invokespecial #84                 // Method com/sun/javafx/geom/BoxBounds."<init>":()V
       7: areturn

  private boolean doComputeContains(double, double);
    Code:
       0: iconst_0
       1: ireturn

  private void lambda$new$0(javafx.beans.Observable);
    Code:
       0: aload_0
       1: getstatic     #78                 // Field com/sun/javafx/scene/DirtyBits.NODE_LIGHT_TRANSFORM:Lcom/sun/javafx/scene/DirtyBits;
       4: invokestatic  #52                 // Method com/sun/javafx/scene/NodeHelper.markDirty:(Ljavafx/scene/Node;Lcom/sun/javafx/scene/DirtyBits;)V
       7: return

  static void access$000(javafx.scene.LightBase, com.sun.javafx.scene.DirtyBits);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method doMarkDirty:(Lcom/sun/javafx/scene/DirtyBits;)V
       5: return

  static void access$100(javafx.scene.LightBase);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method doUpdatePeer:()V
       4: return

  static com.sun.javafx.geom.BaseBounds access$200(javafx.scene.LightBase, com.sun.javafx.geom.BaseBounds, com.sun.javafx.geom.transform.BaseTransform);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #3                  // Method doComputeGeomBounds:(Lcom/sun/javafx/geom/BaseBounds;Lcom/sun/javafx/geom/transform/BaseTransform;)Lcom/sun/javafx/geom/BaseBounds;
       6: areturn

  static boolean access$300(javafx.scene.LightBase, double, double);
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: invokespecial #2                  // Method doComputeContains:(DD)Z
       6: ireturn

  static void access$400(javafx.scene.LightBase, javafx.scene.Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method markChildrenDirty:(Ljavafx/scene/Node;)V
       5: return

  static {};
    Code:
       0: new           #85                 // class javafx/scene/LightBase$1
       3: dup
       4: invokespecial #86                 // Method javafx/scene/LightBase$1."<init>":()V
       7: invokestatic  #87                 // Method com/sun/javafx/scene/LightBaseHelper.setLightBaseAccessor:(Lcom/sun/javafx/scene/LightBaseHelper$LightBaseAccessor;)V
      10: return
}
