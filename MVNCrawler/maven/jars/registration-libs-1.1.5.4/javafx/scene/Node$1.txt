Compiled from "Node.java"
class javafx.scene.Node$1 implements com.sun.javafx.scene.NodeHelper$NodeAccessor {
  javafx.scene.Node$1();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public com.sun.javafx.scene.NodeHelper getHelper(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokestatic  #2                  // Method javafx/scene/Node.access$000:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: areturn

  public void setHelper(javafx.scene.Node, com.sun.javafx.scene.NodeHelper);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #3                  // Method javafx/scene/Node.access$002:(Ljavafx/scene/Node;Lcom/sun/javafx/scene/NodeHelper;)Lcom/sun/javafx/scene/NodeHelper;
       5: pop
       6: return

  public void doMarkDirty(javafx.scene.Node, com.sun.javafx.scene.DirtyBits);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #4                  // Method javafx/scene/Node.access$100:(Ljavafx/scene/Node;Lcom/sun/javafx/scene/DirtyBits;)V
       5: return

  public void doUpdatePeer(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokestatic  #5                  // Method javafx/scene/Node.access$200:(Ljavafx/scene/Node;)V
       4: return

  public com.sun.javafx.geom.transform.BaseTransform getLeafTransform(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #6                  // Method javafx/scene/Node.getLeafTransform:()Lcom/sun/javafx/geom/transform/BaseTransform;
       4: areturn

  public javafx.geometry.Bounds doComputeLayoutBounds(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokestatic  #7                  // Method javafx/scene/Node.access$300:(Ljavafx/scene/Node;)Ljavafx/geometry/Bounds;
       4: areturn

  public void doTransformsChanged(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokestatic  #8                  // Method javafx/scene/Node.access$400:(Ljavafx/scene/Node;)V
       4: return

  public void doPickNodeLocal(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokestatic  #9                  // Method javafx/scene/Node.access$500:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)V
       6: return

  public boolean doComputeIntersects(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokestatic  #10                 // Method javafx/scene/Node.access$600:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)Z
       6: ireturn

  public void doGeomChanged(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokestatic  #11                 // Method javafx/scene/Node.access$700:(Ljavafx/scene/Node;)V
       4: return

  public void doNotifyLayoutBoundsChanged(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokestatic  #12                 // Method javafx/scene/Node.access$800:(Ljavafx/scene/Node;)V
       4: return

  public void doProcessCSS(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokestatic  #13                 // Method javafx/scene/Node.access$900:(Ljavafx/scene/Node;)V
       4: return

  public boolean isDirty(javafx.scene.Node, com.sun.javafx.scene.DirtyBits);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #14                 // Method javafx/scene/Node.isDirty:(Lcom/sun/javafx/scene/DirtyBits;)Z
       5: ireturn

  public boolean isDirtyEmpty(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #15                 // Method javafx/scene/Node.isDirtyEmpty:()Z
       4: ireturn

  public void syncPeer(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #16                 // Method javafx/scene/Node.syncPeer:()V
       4: return

  public void layoutBoundsChanged(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #17                 // Method javafx/scene/Node.layoutBoundsChanged:()V
       4: return

  public <P extends com.sun.javafx.sg.prism.NGNode> P getPeer(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #18                 // Method javafx/scene/Node.getPeer:()Lcom/sun/javafx/sg/prism/NGNode;
       4: areturn

  public void setShowMnemonics(javafx.scene.Node, boolean);
    Code:
       0: aload_1
       1: iload_2
       2: invokevirtual #19                 // Method javafx/scene/Node.setShowMnemonics:(Z)V
       5: return

  public boolean isShowMnemonics(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #20                 // Method javafx/scene/Node.isShowMnemonics:()Z
       4: ireturn

  public javafx.beans.property.BooleanProperty showMnemonicsProperty(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #21                 // Method javafx/scene/Node.showMnemonicsProperty:()Ljavafx/beans/property/BooleanProperty;
       4: areturn

  public boolean traverse(javafx.scene.Node, com.sun.javafx.scene.traversal.Direction);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #22                 // Method javafx/scene/Node.traverse:(Lcom/sun/javafx/scene/traversal/Direction;)Z
       5: ireturn

  public double getPivotX(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #23                 // Method javafx/scene/Node.getPivotX:()D
       4: dreturn

  public double getPivotY(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #24                 // Method javafx/scene/Node.getPivotY:()D
       4: dreturn

  public double getPivotZ(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #25                 // Method javafx/scene/Node.getPivotZ:()D
       4: dreturn

  public void pickNode(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokevirtual #26                 // Method javafx/scene/Node.pickNode:(Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)V
       6: return

  public boolean intersects(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokevirtual #27                 // Method javafx/scene/Node.intersects:(Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)Z
       6: ireturn

  public double intersectsBounds(javafx.scene.Node, com.sun.javafx.geom.PickRay);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #28                 // Method javafx/scene/Node.intersectsBounds:(Lcom/sun/javafx/geom/PickRay;)D
       5: dreturn

  public void layoutNodeForPrinting(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokestatic  #29                 // Method javafx/scene/Node.access$1000:(Ljavafx/scene/Node;)V
       4: return

  public boolean isDerivedDepthTest(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #30                 // Method javafx/scene/Node.isDerivedDepthTest:()Z
       4: ireturn

  public javafx.scene.SubScene getSubScene(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #31                 // Method javafx/scene/Node.getSubScene:()Ljavafx/scene/SubScene;
       4: areturn

  public void setLabeledBy(javafx.scene.Node, javafx.scene.Node);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #32                 // Method javafx/scene/Node.access$1102:(Ljavafx/scene/Node;Ljavafx/scene/Node;)Ljavafx/scene/Node;
       5: pop
       6: return

  public com.sun.glass.ui.Accessible getAccessible(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #33                 // Method javafx/scene/Node.getAccessible:()Lcom/sun/glass/ui/Accessible;
       4: areturn

  public void reapplyCSS(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #34                 // Method javafx/scene/Node.reapplyCSS:()V
       4: return

  public boolean isTreeVisible(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #35                 // Method javafx/scene/Node.isTreeVisible:()Z
       4: ireturn

  public javafx.beans.binding.BooleanExpression treeVisibleProperty(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #36                 // Method javafx/scene/Node.treeVisibleProperty:()Ljavafx/beans/binding/BooleanExpression;
       4: areturn

  public boolean isTreeShowing(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #37                 // Method javafx/scene/Node.isTreeShowing:()Z
       4: ireturn

  public javafx.beans.binding.BooleanExpression treeShowingProperty(javafx.scene.Node);
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method javafx/scene/Node.treeShowingProperty:()Ljavafx/beans/binding/BooleanExpression;
       4: areturn

  public java.util.List<javafx.css.Style> getMatchingStyles(javafx.css.CssMetaData, javafx.css.Styleable);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #39                 // Method javafx/scene/Node.getMatchingStyles:(Ljavafx/css/CssMetaData;Ljavafx/css/Styleable;)Ljava/util/List;
       5: areturn

  public java.util.Map<javafx.css.StyleableProperty<?>, java.util.List<javafx.css.Style>> findStyles(javafx.scene.Node, java.util.Map<javafx.css.StyleableProperty<?>, java.util.List<javafx.css.Style>>);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #40                 // Method javafx/scene/Node.findStyles:(Ljava/util/Map;)Ljava/util/Map;
       5: areturn
}
