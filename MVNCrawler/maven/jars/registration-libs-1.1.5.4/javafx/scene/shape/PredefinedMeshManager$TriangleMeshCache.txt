Compiled from "PredefinedMeshManager.java"
class javafx.scene.shape.PredefinedMeshManager$TriangleMeshCache {
  java.util.Map<javafx.scene.shape.Shape3D$Key, java.lang.ref.SoftReference<javafx.scene.shape.TriangleMesh>> cache;

  private javafx.scene.shape.PredefinedMeshManager$TriangleMeshCache();
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #10                 // class java/util/HashMap
       8: dup
       9: bipush        17
      11: ldc           #11                 // float 0.75f
      13: invokespecial #12                 // Method java/util/HashMap."<init>":(IF)V
      16: putfield      #13                 // Field cache:Ljava/util/Map;
      19: return

  private javafx.scene.shape.TriangleMesh get(javafx.scene.shape.Shape3D$Key);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method cleanCache:()V
       4: aload_0
       5: getfield      #13                 // Field cache:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #15,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      14: ifeq          39
      17: aload_0
      18: getfield      #13                 // Field cache:Ljava/util/Map;
      21: aload_1
      22: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #17                 // class java/lang/ref/SoftReference
      30: invokevirtual #18                 // Method java/lang/ref/SoftReference.get:()Ljava/lang/Object;
      33: checkcast     #19                 // class javafx/scene/shape/TriangleMesh
      36: goto          40
      39: aconst_null
      40: areturn

  private void put(javafx.scene.shape.Shape3D$Key, javafx.scene.shape.TriangleMesh);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method cleanCache:()V
       4: aload_2
       5: ifnull        27
       8: aload_0
       9: getfield      #13                 // Field cache:Ljava/util/Map;
      12: aload_1
      13: new           #17                 // class java/lang/ref/SoftReference
      16: dup
      17: aload_2
      18: invokespecial #20                 // Method java/lang/ref/SoftReference."<init>":(Ljava/lang/Object;)V
      21: invokeinterface #21,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: pop
      27: return

  private void cleanCache();
    Code:
       0: aload_0
       1: getfield      #13                 // Field cache:Ljava/util/Map;
       4: invokeinterface #22,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokedynamic #23,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      14: invokeinterface #24,  2           // InterfaceMethod java/util/Collection.removeIf:(Ljava/util/function/Predicate;)Z
      19: pop
      20: return

  private void clear();
    Code:
       0: aload_0
       1: getfield      #13                 // Field cache:Ljava/util/Map;
       4: invokeinterface #25,  1           // InterfaceMethod java/util/Map.clear:()V
       9: return

  private int size();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method cleanCache:()V
       4: aload_0
       5: getfield      #13                 // Field cache:Ljava/util/Map;
       8: invokeinterface #26,  1           // InterfaceMethod java/util/Map.size:()I
      13: ireturn

  private void printStats(java.lang.String);
    Code:
       0: getstatic     #27                 // Field java/lang/System.out:Ljava/io/PrintStream;
       3: aload_1
       4: aload_0
       5: invokespecial #3                  // Method size:()I
       8: invokedynamic #28,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;
      13: invokevirtual #29                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      16: return

  private void invalidateMesh(javafx.scene.shape.Shape3D$Key);
    Code:
       0: aload_0
       1: getfield      #13                 // Field cache:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #15,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ifeq          75
      13: aload_0
      14: getfield      #13                 // Field cache:Ljava/util/Map;
      17: aload_1
      18: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #17                 // class java/lang/ref/SoftReference
      26: invokevirtual #18                 // Method java/lang/ref/SoftReference.get:()Ljava/lang/Object;
      29: checkcast     #19                 // class javafx/scene/shape/TriangleMesh
      32: astore_2
      33: aload_2
      34: ifnull        64
      37: aload_2
      38: invokevirtual #30                 // Method javafx/scene/shape/TriangleMesh.decRef:()V
      41: aload_2
      42: invokevirtual #31                 // Method javafx/scene/shape/TriangleMesh.getRefCount:()I
      45: istore_3
      46: iload_3
      47: ifne          61
      50: aload_0
      51: getfield      #13                 // Field cache:Ljava/util/Map;
      54: aload_1
      55: invokeinterface #32,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      60: pop
      61: goto          75
      64: aload_0
      65: getfield      #13                 // Field cache:Ljava/util/Map;
      68: aload_1
      69: invokeinterface #32,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      74: pop
      75: return

  private static boolean lambda$cleanCache$0(java.lang.ref.SoftReference);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method java/lang/ref/SoftReference.get:()Ljava/lang/Object;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  static javafx.scene.shape.TriangleMesh access$100(javafx.scene.shape.PredefinedMeshManager$TriangleMeshCache, javafx.scene.shape.Shape3D$Key);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method get:(Ljavafx/scene/shape/Shape3D$Key;)Ljavafx/scene/shape/TriangleMesh;
       5: areturn

  static void access$200(javafx.scene.shape.PredefinedMeshManager$TriangleMeshCache, javafx.scene.shape.Shape3D$Key, javafx.scene.shape.TriangleMesh);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #7                  // Method put:(Ljavafx/scene/shape/Shape3D$Key;Ljavafx/scene/shape/TriangleMesh;)V
       6: return

  static void access$500(javafx.scene.shape.PredefinedMeshManager$TriangleMeshCache, javafx.scene.shape.Shape3D$Key);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method invalidateMesh:(Ljavafx/scene/shape/Shape3D$Key;)V
       5: return

  static void access$600(javafx.scene.shape.PredefinedMeshManager$TriangleMeshCache);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method clear:()V
       4: return

  static void access$700(javafx.scene.shape.PredefinedMeshManager$TriangleMeshCache, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method printStats:(Ljava/lang/String;)V
       5: return

  static int access$800(javafx.scene.shape.PredefinedMeshManager$TriangleMeshCache);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method size:()I
       4: ireturn

  javafx.scene.shape.PredefinedMeshManager$TriangleMeshCache(javafx.scene.shape.PredefinedMeshManager$1);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method "<init>":()V
       4: return
}
