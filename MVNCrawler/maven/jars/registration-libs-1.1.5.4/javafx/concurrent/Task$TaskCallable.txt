Compiled from "Task.java"
final class javafx.concurrent.Task$TaskCallable<V> implements java.util.concurrent.Callable<V> {
  private javafx.concurrent.Task<V> task;

  private javafx.concurrent.Task$TaskCallable();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: return

  public V call() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
       4: iconst_1
       5: invokestatic  #4                  // Method javafx/concurrent/Task.access$702:(Ljavafx/concurrent/Task;Z)Z
       8: pop
       9: aload_0
      10: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
      13: aload_0
      14: invokedynamic #5,  0              // InvokeDynamic #0:run:(Ljavafx/concurrent/Task$TaskCallable;)Ljava/lang/Runnable;
      19: invokevirtual #6                  // Method javafx/concurrent/Task.runLater:(Ljava/lang/Runnable;)V
      22: aload_0
      23: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
      26: invokevirtual #7                  // Method javafx/concurrent/Task.call:()Ljava/lang/Object;
      29: astore_1
      30: aload_0
      31: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
      34: invokevirtual #8                  // Method javafx/concurrent/Task.isCancelled:()Z
      37: ifne          56
      40: aload_0
      41: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
      44: aload_0
      45: aload_1
      46: invokedynamic #9,  0              // InvokeDynamic #1:run:(Ljavafx/concurrent/Task$TaskCallable;Ljava/lang/Object;)Ljava/lang/Runnable;
      51: invokevirtual #6                  // Method javafx/concurrent/Task.runLater:(Ljava/lang/Runnable;)V
      54: aload_1
      55: areturn
      56: aconst_null
      57: areturn
      58: astore_1
      59: aload_0
      60: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
      63: aload_0
      64: aload_1
      65: invokedynamic #11,  0             // InvokeDynamic #2:run:(Ljavafx/concurrent/Task$TaskCallable;Ljava/lang/Throwable;)Ljava/lang/Runnable;
      70: invokevirtual #6                  // Method javafx/concurrent/Task.runLater:(Ljava/lang/Runnable;)V
      73: aload_1
      74: instanceof    #12                 // class java/lang/Exception
      77: ifeq          85
      80: aload_1
      81: checkcast     #12                 // class java/lang/Exception
      84: athrow
      85: new           #12                 // class java/lang/Exception
      88: dup
      89: aload_1
      90: invokespecial #13                 // Method java/lang/Exception."<init>":(Ljava/lang/Throwable;)V
      93: athrow
    Exception table:
       from    to  target type
          22    55    58   Class java/lang/Throwable
          56    57    58   Class java/lang/Throwable

  private void lambda$call$2(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
       4: aload_1
       5: invokestatic  #14                 // Method javafx/concurrent/Task.access$800:(Ljavafx/concurrent/Task;Ljava/lang/Throwable;)V
       8: aload_0
       9: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
      12: getstatic     #15                 // Field javafx/concurrent/Worker$State.FAILED:Ljavafx/concurrent/Worker$State;
      15: invokevirtual #16                 // Method javafx/concurrent/Task.setState:(Ljavafx/concurrent/Worker$State;)V
      18: return

  private void lambda$call$1(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
       4: aload_1
       5: invokevirtual #17                 // Method javafx/concurrent/Task.updateValue:(Ljava/lang/Object;)V
       8: aload_0
       9: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
      12: getstatic     #18                 // Field javafx/concurrent/Worker$State.SUCCEEDED:Ljavafx/concurrent/Worker$State;
      15: invokevirtual #16                 // Method javafx/concurrent/Task.setState:(Ljavafx/concurrent/Worker$State;)V
      18: return

  private void lambda$call$0();
    Code:
       0: aload_0
       1: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
       4: getstatic     #19                 // Field javafx/concurrent/Worker$State.SCHEDULED:Ljavafx/concurrent/Worker$State;
       7: invokevirtual #16                 // Method javafx/concurrent/Task.setState:(Ljavafx/concurrent/Worker$State;)V
      10: aload_0
      11: getfield      #1                  // Field task:Ljavafx/concurrent/Task;
      14: getstatic     #20                 // Field javafx/concurrent/Worker$State.RUNNING:Ljavafx/concurrent/Worker$State;
      17: invokevirtual #16                 // Method javafx/concurrent/Task.setState:(Ljavafx/concurrent/Worker$State;)V
      20: return

  javafx.concurrent.Task$TaskCallable(javafx.concurrent.Task$1);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method "<init>":()V
       4: return

  static javafx.concurrent.Task access$102(javafx.concurrent.Task$TaskCallable, javafx.concurrent.Task);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field task:Ljavafx/concurrent/Task;
       6: areturn
}
