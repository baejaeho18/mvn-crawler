Compiled from "Service.java"
public abstract class javafx.concurrent.Service<V> implements javafx.concurrent.Worker<V>, javafx.event.EventTarget {
  private static final com.sun.javafx.logging.PlatformLogger LOG;

  private static final int THREAD_POOL_SIZE;

  private static final long THREAD_TIME_OUT;

  private static final java.util.concurrent.BlockingQueue<java.lang.Runnable> IO_QUEUE;

  private static final java.lang.ThreadGroup THREAD_GROUP;

  private static final java.lang.Thread$UncaughtExceptionHandler UNCAUGHT_HANDLER;

  private static final java.util.concurrent.ThreadFactory THREAD_FACTORY;

  private static final java.util.concurrent.ThreadPoolExecutor EXECUTOR;

  private final javafx.beans.property.ObjectProperty<javafx.concurrent.Worker$State> state;

  private final javafx.beans.property.ObjectProperty<V> value;

  private final javafx.beans.property.ObjectProperty<java.lang.Throwable> exception;

  private final javafx.beans.property.DoubleProperty workDone;

  private final javafx.beans.property.DoubleProperty totalWorkToBeDone;

  private final javafx.beans.property.DoubleProperty progress;

  private final javafx.beans.property.BooleanProperty running;

  private final javafx.beans.property.StringProperty message;

  private final javafx.beans.property.StringProperty title;

  private final javafx.beans.property.ObjectProperty<java.util.concurrent.Executor> executor;

  private javafx.concurrent.Task<V> task;

  private volatile boolean startedOnce;

  private javafx.concurrent.EventHelper eventHelper;

  public final javafx.concurrent.Worker$State getState();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
       8: invokevirtual #4                  // Method javafx/beans/property/ObjectProperty.get:()Ljava/lang/Object;
      11: checkcast     #5                  // class javafx/concurrent/Worker$State
      14: areturn

  public final javafx.beans.property.ReadOnlyObjectProperty<javafx.concurrent.Worker$State> stateProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
       8: areturn

  public final V getValue();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #6                  // Field value:Ljavafx/beans/property/ObjectProperty;
       8: invokevirtual #4                  // Method javafx/beans/property/ObjectProperty.get:()Ljava/lang/Object;
      11: areturn

  public final javafx.beans.property.ReadOnlyObjectProperty<V> valueProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #6                  // Field value:Ljavafx/beans/property/ObjectProperty;
       8: areturn

  public final java.lang.Throwable getException();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #7                  // Field exception:Ljavafx/beans/property/ObjectProperty;
       8: invokevirtual #4                  // Method javafx/beans/property/ObjectProperty.get:()Ljava/lang/Object;
      11: checkcast     #8                  // class java/lang/Throwable
      14: areturn

  public final javafx.beans.property.ReadOnlyObjectProperty<java.lang.Throwable> exceptionProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #7                  // Field exception:Ljavafx/beans/property/ObjectProperty;
       8: areturn

  public final double getWorkDone();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #9                  // Field workDone:Ljavafx/beans/property/DoubleProperty;
       8: invokevirtual #10                 // Method javafx/beans/property/DoubleProperty.get:()D
      11: dreturn

  public final javafx.beans.property.ReadOnlyDoubleProperty workDoneProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #9                  // Field workDone:Ljavafx/beans/property/DoubleProperty;
       8: areturn

  public final double getTotalWork();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #11                 // Field totalWorkToBeDone:Ljavafx/beans/property/DoubleProperty;
       8: invokevirtual #10                 // Method javafx/beans/property/DoubleProperty.get:()D
      11: dreturn

  public final javafx.beans.property.ReadOnlyDoubleProperty totalWorkProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #11                 // Field totalWorkToBeDone:Ljavafx/beans/property/DoubleProperty;
       8: areturn

  public final double getProgress();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #12                 // Field progress:Ljavafx/beans/property/DoubleProperty;
       8: invokevirtual #10                 // Method javafx/beans/property/DoubleProperty.get:()D
      11: dreturn

  public final javafx.beans.property.ReadOnlyDoubleProperty progressProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #12                 // Field progress:Ljavafx/beans/property/DoubleProperty;
       8: areturn

  public final boolean isRunning();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #13                 // Field running:Ljavafx/beans/property/BooleanProperty;
       8: invokevirtual #14                 // Method javafx/beans/property/BooleanProperty.get:()Z
      11: ireturn

  public final javafx.beans.property.ReadOnlyBooleanProperty runningProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #13                 // Field running:Ljavafx/beans/property/BooleanProperty;
       8: areturn

  public final java.lang.String getMessage();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #15                 // Field message:Ljavafx/beans/property/StringProperty;
       8: invokevirtual #16                 // Method javafx/beans/property/StringProperty.get:()Ljava/lang/Object;
      11: checkcast     #17                 // class java/lang/String
      14: areturn

  public final javafx.beans.property.ReadOnlyStringProperty messageProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #15                 // Field message:Ljavafx/beans/property/StringProperty;
       8: areturn

  public final java.lang.String getTitle();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #18                 // Field title:Ljavafx/beans/property/StringProperty;
       8: invokevirtual #16                 // Method javafx/beans/property/StringProperty.get:()Ljava/lang/Object;
      11: checkcast     #17                 // class java/lang/String
      14: areturn

  public final javafx.beans.property.ReadOnlyStringProperty titleProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #18                 // Field title:Ljavafx/beans/property/StringProperty;
       8: areturn

  public final void setExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #19                 // Field executor:Ljavafx/beans/property/ObjectProperty;
       8: aload_1
       9: invokevirtual #20                 // Method javafx/beans/property/ObjectProperty.set:(Ljava/lang/Object;)V
      12: return

  public final java.util.concurrent.Executor getExecutor();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #19                 // Field executor:Ljavafx/beans/property/ObjectProperty;
       8: invokevirtual #4                  // Method javafx/beans/property/ObjectProperty.get:()Ljava/lang/Object;
      11: checkcast     #21                 // class java/util/concurrent/Executor
      14: areturn

  public final javafx.beans.property.ObjectProperty<java.util.concurrent.Executor> executorProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #19                 // Field executor:Ljavafx/beans/property/ObjectProperty;
       8: areturn

  public final javafx.beans.property.ObjectProperty<javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>> onReadyProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: invokevirtual #23                 // Method javafx/concurrent/EventHelper.onReadyProperty:()Ljavafx/beans/property/ObjectProperty;
      11: areturn

  public final javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent> getOnReady();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
       8: ifnonnull     15
      11: aconst_null
      12: goto          22
      15: aload_0
      16: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
      19: invokevirtual #25                 // Method javafx/concurrent/EventHelper.getOnReady:()Ljavafx/event/EventHandler;
      22: areturn

  public final void setOnReady(javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: invokevirtual #26                 // Method javafx/concurrent/EventHelper.setOnReady:(Ljavafx/event/EventHandler;)V
      12: return

  protected void ready();
    Code:
       0: return

  public final javafx.beans.property.ObjectProperty<javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>> onScheduledProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: invokevirtual #27                 // Method javafx/concurrent/EventHelper.onScheduledProperty:()Ljavafx/beans/property/ObjectProperty;
      11: areturn

  public final javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent> getOnScheduled();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
       8: ifnonnull     15
      11: aconst_null
      12: goto          22
      15: aload_0
      16: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
      19: invokevirtual #28                 // Method javafx/concurrent/EventHelper.getOnScheduled:()Ljavafx/event/EventHandler;
      22: areturn

  public final void setOnScheduled(javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: invokevirtual #29                 // Method javafx/concurrent/EventHelper.setOnScheduled:(Ljavafx/event/EventHandler;)V
      12: return

  protected void scheduled();
    Code:
       0: return

  public final javafx.beans.property.ObjectProperty<javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>> onRunningProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: invokevirtual #30                 // Method javafx/concurrent/EventHelper.onRunningProperty:()Ljavafx/beans/property/ObjectProperty;
      11: areturn

  public final javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent> getOnRunning();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
       8: ifnonnull     15
      11: aconst_null
      12: goto          22
      15: aload_0
      16: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
      19: invokevirtual #31                 // Method javafx/concurrent/EventHelper.getOnRunning:()Ljavafx/event/EventHandler;
      22: areturn

  public final void setOnRunning(javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: invokevirtual #32                 // Method javafx/concurrent/EventHelper.setOnRunning:(Ljavafx/event/EventHandler;)V
      12: return

  protected void running();
    Code:
       0: return

  public final javafx.beans.property.ObjectProperty<javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>> onSucceededProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: invokevirtual #33                 // Method javafx/concurrent/EventHelper.onSucceededProperty:()Ljavafx/beans/property/ObjectProperty;
      11: areturn

  public final javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent> getOnSucceeded();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
       8: ifnonnull     15
      11: aconst_null
      12: goto          22
      15: aload_0
      16: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
      19: invokevirtual #34                 // Method javafx/concurrent/EventHelper.getOnSucceeded:()Ljavafx/event/EventHandler;
      22: areturn

  public final void setOnSucceeded(javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: invokevirtual #35                 // Method javafx/concurrent/EventHelper.setOnSucceeded:(Ljavafx/event/EventHandler;)V
      12: return

  protected void succeeded();
    Code:
       0: return

  public final javafx.beans.property.ObjectProperty<javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>> onCancelledProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: invokevirtual #36                 // Method javafx/concurrent/EventHelper.onCancelledProperty:()Ljavafx/beans/property/ObjectProperty;
      11: areturn

  public final javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent> getOnCancelled();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
       8: ifnonnull     15
      11: aconst_null
      12: goto          22
      15: aload_0
      16: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
      19: invokevirtual #37                 // Method javafx/concurrent/EventHelper.getOnCancelled:()Ljavafx/event/EventHandler;
      22: areturn

  public final void setOnCancelled(javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: invokevirtual #38                 // Method javafx/concurrent/EventHelper.setOnCancelled:(Ljavafx/event/EventHandler;)V
      12: return

  protected void cancelled();
    Code:
       0: return

  public final javafx.beans.property.ObjectProperty<javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>> onFailedProperty();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: invokevirtual #39                 // Method javafx/concurrent/EventHelper.onFailedProperty:()Ljavafx/beans/property/ObjectProperty;
      11: areturn

  public final javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent> getOnFailed();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
       8: ifnonnull     15
      11: aconst_null
      12: goto          22
      15: aload_0
      16: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
      19: invokevirtual #40                 // Method javafx/concurrent/EventHelper.getOnFailed:()Ljavafx/event/EventHandler;
      22: areturn

  public final void setOnFailed(javafx.event.EventHandler<javafx.concurrent.WorkerStateEvent>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: invokevirtual #41                 // Method javafx/concurrent/EventHelper.setOnFailed:(Ljavafx/event/EventHandler;)V
      12: return

  protected void failed();
    Code:
       0: return

  protected javafx.concurrent.Service();
    Code:
       0: aload_0
       1: invokespecial #42                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #43                 // class javafx/beans/property/SimpleObjectProperty
       8: dup
       9: aload_0
      10: ldc           #44                 // String state
      12: getstatic     #45                 // Field javafx/concurrent/Worker$State.READY:Ljavafx/concurrent/Worker$State;
      15: invokespecial #46                 // Method javafx/beans/property/SimpleObjectProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V
      18: putfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      21: aload_0
      22: new           #43                 // class javafx/beans/property/SimpleObjectProperty
      25: dup
      26: aload_0
      27: ldc           #47                 // String value
      29: invokespecial #48                 // Method javafx/beans/property/SimpleObjectProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;)V
      32: putfield      #6                  // Field value:Ljavafx/beans/property/ObjectProperty;
      35: aload_0
      36: new           #43                 // class javafx/beans/property/SimpleObjectProperty
      39: dup
      40: aload_0
      41: ldc           #49                 // String exception
      43: invokespecial #48                 // Method javafx/beans/property/SimpleObjectProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;)V
      46: putfield      #7                  // Field exception:Ljavafx/beans/property/ObjectProperty;
      49: aload_0
      50: new           #50                 // class javafx/beans/property/SimpleDoubleProperty
      53: dup
      54: aload_0
      55: ldc           #51                 // String workDone
      57: ldc2_w        #52                 // double -1.0d
      60: invokespecial #54                 // Method javafx/beans/property/SimpleDoubleProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;D)V
      63: putfield      #9                  // Field workDone:Ljavafx/beans/property/DoubleProperty;
      66: aload_0
      67: new           #50                 // class javafx/beans/property/SimpleDoubleProperty
      70: dup
      71: aload_0
      72: ldc           #55                 // String totalWork
      74: ldc2_w        #52                 // double -1.0d
      77: invokespecial #54                 // Method javafx/beans/property/SimpleDoubleProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;D)V
      80: putfield      #11                 // Field totalWorkToBeDone:Ljavafx/beans/property/DoubleProperty;
      83: aload_0
      84: new           #50                 // class javafx/beans/property/SimpleDoubleProperty
      87: dup
      88: aload_0
      89: ldc           #56                 // String progress
      91: ldc2_w        #52                 // double -1.0d
      94: invokespecial #54                 // Method javafx/beans/property/SimpleDoubleProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;D)V
      97: putfield      #12                 // Field progress:Ljavafx/beans/property/DoubleProperty;
     100: aload_0
     101: new           #57                 // class javafx/beans/property/SimpleBooleanProperty
     104: dup
     105: aload_0
     106: ldc           #58                 // String running
     108: iconst_0
     109: invokespecial #59                 // Method javafx/beans/property/SimpleBooleanProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;Z)V
     112: putfield      #13                 // Field running:Ljavafx/beans/property/BooleanProperty;
     115: aload_0
     116: new           #60                 // class javafx/beans/property/SimpleStringProperty
     119: dup
     120: aload_0
     121: ldc           #61                 // String message
     123: ldc           #62                 // String
     125: invokespecial #63                 // Method javafx/beans/property/SimpleStringProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)V
     128: putfield      #15                 // Field message:Ljavafx/beans/property/StringProperty;
     131: aload_0
     132: new           #60                 // class javafx/beans/property/SimpleStringProperty
     135: dup
     136: aload_0
     137: ldc           #64                 // String title
     139: ldc           #62                 // String
     141: invokespecial #63                 // Method javafx/beans/property/SimpleStringProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)V
     144: putfield      #18                 // Field title:Ljavafx/beans/property/StringProperty;
     147: aload_0
     148: new           #43                 // class javafx/beans/property/SimpleObjectProperty
     151: dup
     152: aload_0
     153: ldc           #65                 // String executor
     155: invokespecial #48                 // Method javafx/beans/property/SimpleObjectProperty."<init>":(Ljava/lang/Object;Ljava/lang/String;)V
     158: putfield      #19                 // Field executor:Ljavafx/beans/property/ObjectProperty;
     161: aload_0
     162: iconst_0
     163: putfield      #66                 // Field startedOnce:Z
     166: aload_0
     167: aconst_null
     168: putfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
     171: aload_0
     172: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
     175: aload_0
     176: invokedynamic #67,  0             // InvokeDynamic #0:changed:(Ljavafx/concurrent/Service;)Ljavafx/beans/value/ChangeListener;
     181: invokevirtual #68                 // Method javafx/beans/property/ObjectProperty.addListener:(Ljavafx/beans/value/ChangeListener;)V
     184: return

  public boolean cancel();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
       8: ifnonnull     51
      11: aload_0
      12: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      15: invokevirtual #4                  // Method javafx/beans/property/ObjectProperty.get:()Ljava/lang/Object;
      18: getstatic     #70                 // Field javafx/concurrent/Worker$State.CANCELLED:Ljavafx/concurrent/Worker$State;
      21: if_acmpeq     37
      24: aload_0
      25: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      28: invokevirtual #4                  // Method javafx/beans/property/ObjectProperty.get:()Ljava/lang/Object;
      31: getstatic     #71                 // Field javafx/concurrent/Worker$State.SUCCEEDED:Ljavafx/concurrent/Worker$State;
      34: if_acmpne     39
      37: iconst_0
      38: ireturn
      39: aload_0
      40: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      43: getstatic     #70                 // Field javafx/concurrent/Worker$State.CANCELLED:Ljavafx/concurrent/Worker$State;
      46: invokevirtual #20                 // Method javafx/beans/property/ObjectProperty.set:(Ljava/lang/Object;)V
      49: iconst_1
      50: ireturn
      51: aload_0
      52: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
      55: iconst_1
      56: invokevirtual #72                 // Method javafx/concurrent/Task.cancel:(Z)Z
      59: ireturn

  public void restart();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
       8: ifnull        41
      11: aload_0
      12: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
      15: invokevirtual #73                 // Method javafx/concurrent/Task.cancel:()Z
      18: pop
      19: aload_0
      20: aconst_null
      21: putfield      #69                 // Field task:Ljavafx/concurrent/Task;
      24: aload_0
      25: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      28: invokevirtual #74                 // Method javafx/beans/property/ObjectProperty.unbind:()V
      31: aload_0
      32: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      35: getstatic     #70                 // Field javafx/concurrent/Worker$State.CANCELLED:Ljavafx/concurrent/Worker$State;
      38: invokevirtual #20                 // Method javafx/beans/property/ObjectProperty.set:(Ljava/lang/Object;)V
      41: aload_0
      42: invokevirtual #75                 // Method reset:()V
      45: aload_0
      46: invokevirtual #76                 // Method start:()V
      49: return

  public void reset();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokevirtual #77                 // Method getState:()Ljavafx/concurrent/Worker$State;
       8: astore_1
       9: aload_1
      10: getstatic     #78                 // Field javafx/concurrent/Worker$State.SCHEDULED:Ljavafx/concurrent/Worker$State;
      13: if_acmpeq     23
      16: aload_1
      17: getstatic     #79                 // Field javafx/concurrent/Worker$State.RUNNING:Ljavafx/concurrent/Worker$State;
      20: if_acmpne     31
      23: new           #80                 // class java/lang/IllegalStateException
      26: dup
      27: invokespecial #81                 // Method java/lang/IllegalStateException."<init>":()V
      30: athrow
      31: aload_0
      32: aconst_null
      33: putfield      #69                 // Field task:Ljavafx/concurrent/Task;
      36: aload_0
      37: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      40: invokevirtual #74                 // Method javafx/beans/property/ObjectProperty.unbind:()V
      43: aload_0
      44: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      47: getstatic     #45                 // Field javafx/concurrent/Worker$State.READY:Ljavafx/concurrent/Worker$State;
      50: invokevirtual #20                 // Method javafx/beans/property/ObjectProperty.set:(Ljava/lang/Object;)V
      53: aload_0
      54: getfield      #6                  // Field value:Ljavafx/beans/property/ObjectProperty;
      57: invokevirtual #74                 // Method javafx/beans/property/ObjectProperty.unbind:()V
      60: aload_0
      61: getfield      #6                  // Field value:Ljavafx/beans/property/ObjectProperty;
      64: aconst_null
      65: invokevirtual #20                 // Method javafx/beans/property/ObjectProperty.set:(Ljava/lang/Object;)V
      68: aload_0
      69: getfield      #7                  // Field exception:Ljavafx/beans/property/ObjectProperty;
      72: invokevirtual #74                 // Method javafx/beans/property/ObjectProperty.unbind:()V
      75: aload_0
      76: getfield      #7                  // Field exception:Ljavafx/beans/property/ObjectProperty;
      79: aconst_null
      80: invokevirtual #20                 // Method javafx/beans/property/ObjectProperty.set:(Ljava/lang/Object;)V
      83: aload_0
      84: getfield      #9                  // Field workDone:Ljavafx/beans/property/DoubleProperty;
      87: invokevirtual #82                 // Method javafx/beans/property/DoubleProperty.unbind:()V
      90: aload_0
      91: getfield      #9                  // Field workDone:Ljavafx/beans/property/DoubleProperty;
      94: ldc2_w        #52                 // double -1.0d
      97: invokevirtual #83                 // Method javafx/beans/property/DoubleProperty.set:(D)V
     100: aload_0
     101: getfield      #11                 // Field totalWorkToBeDone:Ljavafx/beans/property/DoubleProperty;
     104: invokevirtual #82                 // Method javafx/beans/property/DoubleProperty.unbind:()V
     107: aload_0
     108: getfield      #11                 // Field totalWorkToBeDone:Ljavafx/beans/property/DoubleProperty;
     111: ldc2_w        #52                 // double -1.0d
     114: invokevirtual #83                 // Method javafx/beans/property/DoubleProperty.set:(D)V
     117: aload_0
     118: getfield      #12                 // Field progress:Ljavafx/beans/property/DoubleProperty;
     121: invokevirtual #82                 // Method javafx/beans/property/DoubleProperty.unbind:()V
     124: aload_0
     125: getfield      #12                 // Field progress:Ljavafx/beans/property/DoubleProperty;
     128: ldc2_w        #52                 // double -1.0d
     131: invokevirtual #83                 // Method javafx/beans/property/DoubleProperty.set:(D)V
     134: aload_0
     135: getfield      #13                 // Field running:Ljavafx/beans/property/BooleanProperty;
     138: invokevirtual #84                 // Method javafx/beans/property/BooleanProperty.unbind:()V
     141: aload_0
     142: getfield      #13                 // Field running:Ljavafx/beans/property/BooleanProperty;
     145: iconst_0
     146: invokevirtual #85                 // Method javafx/beans/property/BooleanProperty.set:(Z)V
     149: aload_0
     150: getfield      #15                 // Field message:Ljavafx/beans/property/StringProperty;
     153: invokevirtual #86                 // Method javafx/beans/property/StringProperty.unbind:()V
     156: aload_0
     157: getfield      #15                 // Field message:Ljavafx/beans/property/StringProperty;
     160: ldc           #62                 // String
     162: invokevirtual #87                 // Method javafx/beans/property/StringProperty.set:(Ljava/lang/Object;)V
     165: aload_0
     166: getfield      #18                 // Field title:Ljavafx/beans/property/StringProperty;
     169: invokevirtual #86                 // Method javafx/beans/property/StringProperty.unbind:()V
     172: aload_0
     173: getfield      #18                 // Field title:Ljavafx/beans/property/StringProperty;
     176: ldc           #62                 // String
     178: invokevirtual #87                 // Method javafx/beans/property/StringProperty.set:(Ljava/lang/Object;)V
     181: return

  public void start();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokevirtual #77                 // Method getState:()Ljavafx/concurrent/Worker$State;
       8: getstatic     #45                 // Field javafx/concurrent/Worker$State.READY:Ljavafx/concurrent/Worker$State;
      11: if_acmpeq     31
      14: new           #80                 // class java/lang/IllegalStateException
      17: dup
      18: aload_0
      19: invokevirtual #77                 // Method getState:()Ljavafx/concurrent/Worker$State;
      22: invokedynamic #88,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljavafx/concurrent/Worker$State;)Ljava/lang/String;
      27: invokespecial #89                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: aload_0
      33: invokevirtual #90                 // Method createTask:()Ljavafx/concurrent/Task;
      36: putfield      #69                 // Field task:Ljavafx/concurrent/Task;
      39: aload_0
      40: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      43: aload_0
      44: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
      47: invokevirtual #91                 // Method javafx/concurrent/Task.stateProperty:()Ljavafx/beans/property/ReadOnlyObjectProperty;
      50: invokevirtual #92                 // Method javafx/beans/property/ObjectProperty.bind:(Ljavafx/beans/value/ObservableValue;)V
      53: aload_0
      54: getfield      #6                  // Field value:Ljavafx/beans/property/ObjectProperty;
      57: aload_0
      58: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
      61: invokevirtual #93                 // Method javafx/concurrent/Task.valueProperty:()Ljavafx/beans/property/ReadOnlyObjectProperty;
      64: invokevirtual #92                 // Method javafx/beans/property/ObjectProperty.bind:(Ljavafx/beans/value/ObservableValue;)V
      67: aload_0
      68: getfield      #7                  // Field exception:Ljavafx/beans/property/ObjectProperty;
      71: aload_0
      72: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
      75: invokevirtual #94                 // Method javafx/concurrent/Task.exceptionProperty:()Ljavafx/beans/property/ReadOnlyObjectProperty;
      78: invokevirtual #92                 // Method javafx/beans/property/ObjectProperty.bind:(Ljavafx/beans/value/ObservableValue;)V
      81: aload_0
      82: getfield      #9                  // Field workDone:Ljavafx/beans/property/DoubleProperty;
      85: aload_0
      86: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
      89: invokevirtual #95                 // Method javafx/concurrent/Task.workDoneProperty:()Ljavafx/beans/property/ReadOnlyDoubleProperty;
      92: invokevirtual #96                 // Method javafx/beans/property/DoubleProperty.bind:(Ljavafx/beans/value/ObservableValue;)V
      95: aload_0
      96: getfield      #11                 // Field totalWorkToBeDone:Ljavafx/beans/property/DoubleProperty;
      99: aload_0
     100: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
     103: invokevirtual #97                 // Method javafx/concurrent/Task.totalWorkProperty:()Ljavafx/beans/property/ReadOnlyDoubleProperty;
     106: invokevirtual #96                 // Method javafx/beans/property/DoubleProperty.bind:(Ljavafx/beans/value/ObservableValue;)V
     109: aload_0
     110: getfield      #12                 // Field progress:Ljavafx/beans/property/DoubleProperty;
     113: aload_0
     114: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
     117: invokevirtual #98                 // Method javafx/concurrent/Task.progressProperty:()Ljavafx/beans/property/ReadOnlyDoubleProperty;
     120: invokevirtual #96                 // Method javafx/beans/property/DoubleProperty.bind:(Ljavafx/beans/value/ObservableValue;)V
     123: aload_0
     124: getfield      #13                 // Field running:Ljavafx/beans/property/BooleanProperty;
     127: aload_0
     128: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
     131: invokevirtual #99                 // Method javafx/concurrent/Task.runningProperty:()Ljavafx/beans/property/ReadOnlyBooleanProperty;
     134: invokevirtual #100                // Method javafx/beans/property/BooleanProperty.bind:(Ljavafx/beans/value/ObservableValue;)V
     137: aload_0
     138: getfield      #15                 // Field message:Ljavafx/beans/property/StringProperty;
     141: aload_0
     142: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
     145: invokevirtual #101                // Method javafx/concurrent/Task.messageProperty:()Ljavafx/beans/property/ReadOnlyStringProperty;
     148: invokevirtual #102                // Method javafx/beans/property/StringProperty.bind:(Ljavafx/beans/value/ObservableValue;)V
     151: aload_0
     152: getfield      #18                 // Field title:Ljavafx/beans/property/StringProperty;
     155: aload_0
     156: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
     159: invokevirtual #103                // Method javafx/concurrent/Task.titleProperty:()Ljavafx/beans/property/ReadOnlyStringProperty;
     162: invokevirtual #102                // Method javafx/beans/property/StringProperty.bind:(Ljavafx/beans/value/ObservableValue;)V
     165: aload_0
     166: iconst_1
     167: putfield      #66                 // Field startedOnce:Z
     170: aload_0
     171: invokevirtual #104                // Method isFxApplicationThread:()Z
     174: ifne          190
     177: aload_0
     178: aload_0
     179: invokedynamic #105,  0            // InvokeDynamic #2:run:(Ljavafx/concurrent/Service;)Ljava/lang/Runnable;
     184: invokevirtual #106                // Method runLater:(Ljava/lang/Runnable;)V
     187: goto          208
     190: aload_0
     191: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
     194: getstatic     #78                 // Field javafx/concurrent/Worker$State.SCHEDULED:Ljavafx/concurrent/Worker$State;
     197: invokevirtual #107                // Method javafx/concurrent/Task.setState:(Ljavafx/concurrent/Worker$State;)V
     200: aload_0
     201: aload_0
     202: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
     205: invokevirtual #108                // Method executeTask:(Ljavafx/concurrent/Task;)V
     208: return

  void cancelFromReadyState();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
       4: getstatic     #78                 // Field javafx/concurrent/Worker$State.SCHEDULED:Ljavafx/concurrent/Worker$State;
       7: invokevirtual #20                 // Method javafx/beans/property/ObjectProperty.set:(Ljava/lang/Object;)V
      10: aload_0
      11: getfield      #3                  // Field state:Ljavafx/beans/property/ObjectProperty;
      14: getstatic     #70                 // Field javafx/concurrent/Worker$State.CANCELLED:Ljavafx/concurrent/Worker$State;
      17: invokevirtual #20                 // Method javafx/beans/property/ObjectProperty.set:(Ljava/lang/Object;)V
      20: return

  protected void executeTask(javafx.concurrent.Task<V>);
    Code:
       0: invokestatic  #109                // Method java/security/AccessController.getContext:()Ljava/security/AccessControlContext;
       3: astore_2
       4: aload_0
       5: invokevirtual #110                // Method getExecutor:()Ljava/util/concurrent/Executor;
       8: ifnull        18
      11: aload_0
      12: invokevirtual #110                // Method getExecutor:()Ljava/util/concurrent/Executor;
      15: goto          21
      18: getstatic     #1                  // Field EXECUTOR:Ljava/util/concurrent/ThreadPoolExecutor;
      21: astore_3
      22: aload_3
      23: aload_1
      24: aload_2
      25: invokedynamic #111,  0            // InvokeDynamic #3:run:(Ljavafx/concurrent/Task;Ljava/security/AccessControlContext;)Ljava/lang/Runnable;
      30: invokeinterface #112,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      35: return

  private javafx.concurrent.EventHelper getEventHelper();
    Code:
       0: aload_0
       1: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
       4: ifnonnull     19
       7: aload_0
       8: new           #113                // class javafx/concurrent/EventHelper
      11: dup
      12: aload_0
      13: invokespecial #114                // Method javafx/concurrent/EventHelper."<init>":(Ljavafx/event/EventTarget;)V
      16: putfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
      19: aload_0
      20: getfield      #24                 // Field eventHelper:Ljavafx/concurrent/EventHelper;
      23: areturn

  public final <T extends javafx.event.Event> void addEventHandler(javafx.event.EventType<T>, javafx.event.EventHandler<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: aload_2
      10: invokevirtual #115                // Method javafx/concurrent/EventHelper.addEventHandler:(Ljavafx/event/EventType;Ljavafx/event/EventHandler;)V
      13: return

  public final <T extends javafx.event.Event> void removeEventHandler(javafx.event.EventType<T>, javafx.event.EventHandler<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: aload_2
      10: invokevirtual #116                // Method javafx/concurrent/EventHelper.removeEventHandler:(Ljavafx/event/EventType;Ljavafx/event/EventHandler;)V
      13: return

  public final <T extends javafx.event.Event> void addEventFilter(javafx.event.EventType<T>, javafx.event.EventHandler<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: aload_2
      10: invokevirtual #117                // Method javafx/concurrent/EventHelper.addEventFilter:(Ljavafx/event/EventType;Ljavafx/event/EventHandler;)V
      13: return

  public final <T extends javafx.event.Event> void removeEventFilter(javafx.event.EventType<T>, javafx.event.EventHandler<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: aload_2
      10: invokevirtual #118                // Method javafx/concurrent/EventHelper.removeEventFilter:(Ljavafx/event/EventType;Ljavafx/event/EventHandler;)V
      13: return

  protected final <T extends javafx.event.Event> void setEventHandler(javafx.event.EventType<T>, javafx.event.EventHandler<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: aload_2
      10: invokevirtual #119                // Method javafx/concurrent/EventHelper.setEventHandler:(Ljavafx/event/EventType;Ljavafx/event/EventHandler;)V
      13: return

  protected final void fireEvent(javafx.event.Event);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: invokevirtual #120                // Method javafx/concurrent/EventHelper.fireEvent:(Ljavafx/event/Event;)V
      12: return

  public javafx.event.EventDispatchChain buildEventDispatchChain(javafx.event.EventDispatchChain);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method checkThread:()V
       4: aload_0
       5: invokespecial #22                 // Method getEventHelper:()Ljavafx/concurrent/EventHelper;
       8: aload_1
       9: invokevirtual #121                // Method javafx/concurrent/EventHelper.buildEventDispatchChain:(Ljavafx/event/EventDispatchChain;)Ljavafx/event/EventDispatchChain;
      12: areturn

  protected abstract javafx.concurrent.Task<V> createTask();

  void checkThread();
    Code:
       0: aload_0
       1: getfield      #66                 // Field startedOnce:Z
       4: ifeq          24
       7: aload_0
       8: invokevirtual #104                // Method isFxApplicationThread:()Z
      11: ifne          24
      14: new           #80                 // class java/lang/IllegalStateException
      17: dup
      18: ldc           #122                // String Service must only be used from the FX Application Thread
      20: invokespecial #89                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: return

  void runLater(java.lang.Runnable);
    Code:
       0: aload_1
       1: invokestatic  #123                // Method javafx/application/Platform.runLater:(Ljava/lang/Runnable;)V
       4: return

  boolean isFxApplicationThread();
    Code:
       0: invokestatic  #124                // Method javafx/application/Platform.isFxApplicationThread:()Z
       3: ireturn

  private static void lambda$executeTask$7(javafx.concurrent.Task, java.security.AccessControlContext);
    Code:
       0: aload_0
       1: invokedynamic #125,  0            // InvokeDynamic #4:run:(Ljavafx/concurrent/Task;)Ljava/security/PrivilegedAction;
       6: aload_1
       7: invokestatic  #126                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;
      10: pop
      11: return

  private static java.lang.Void lambda$executeTask$6(javafx.concurrent.Task);
    Code:
       0: aload_0
       1: invokevirtual #127                // Method javafx/concurrent/Task.run:()V
       4: aconst_null
       5: areturn

  private void lambda$start$5();
    Code:
       0: aload_0
       1: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
       4: getstatic     #78                 // Field javafx/concurrent/Worker$State.SCHEDULED:Ljavafx/concurrent/Worker$State;
       7: invokevirtual #107                // Method javafx/concurrent/Task.setState:(Ljavafx/concurrent/Worker$State;)V
      10: aload_0
      11: aload_0
      12: getfield      #69                 // Field task:Ljavafx/concurrent/Task;
      15: invokevirtual #108                // Method executeTask:(Ljavafx/concurrent/Task;)V
      18: return

  private void lambda$new$4(javafx.beans.value.ObservableValue, javafx.concurrent.Worker$State, javafx.concurrent.Worker$State);
    Code:
       0: getstatic     #128                // Field javafx/concurrent/Service$2.$SwitchMap$javafx$concurrent$Worker$State:[I
       3: aload_3
       4: invokevirtual #129                // Method javafx/concurrent/Worker$State.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 6
                     1: 48
                     2: 70
                     3: 92
                     4: 114
                     5: 136
                     6: 158
               default: 180
          }
      48: aload_0
      49: new           #130                // class javafx/concurrent/WorkerStateEvent
      52: dup
      53: aload_0
      54: getstatic     #131                // Field javafx/concurrent/WorkerStateEvent.WORKER_STATE_CANCELLED:Ljavafx/event/EventType;
      57: invokespecial #132                // Method javafx/concurrent/WorkerStateEvent."<init>":(Ljavafx/concurrent/Worker;Ljavafx/event/EventType;)V
      60: invokevirtual #133                // Method fireEvent:(Ljavafx/event/Event;)V
      63: aload_0
      64: invokevirtual #134                // Method cancelled:()V
      67: goto          190
      70: aload_0
      71: new           #130                // class javafx/concurrent/WorkerStateEvent
      74: dup
      75: aload_0
      76: getstatic     #135                // Field javafx/concurrent/WorkerStateEvent.WORKER_STATE_FAILED:Ljavafx/event/EventType;
      79: invokespecial #132                // Method javafx/concurrent/WorkerStateEvent."<init>":(Ljavafx/concurrent/Worker;Ljavafx/event/EventType;)V
      82: invokevirtual #133                // Method fireEvent:(Ljavafx/event/Event;)V
      85: aload_0
      86: invokevirtual #136                // Method failed:()V
      89: goto          190
      92: aload_0
      93: new           #130                // class javafx/concurrent/WorkerStateEvent
      96: dup
      97: aload_0
      98: getstatic     #137                // Field javafx/concurrent/WorkerStateEvent.WORKER_STATE_READY:Ljavafx/event/EventType;
     101: invokespecial #132                // Method javafx/concurrent/WorkerStateEvent."<init>":(Ljavafx/concurrent/Worker;Ljavafx/event/EventType;)V
     104: invokevirtual #133                // Method fireEvent:(Ljavafx/event/Event;)V
     107: aload_0
     108: invokevirtual #138                // Method ready:()V
     111: goto          190
     114: aload_0
     115: new           #130                // class javafx/concurrent/WorkerStateEvent
     118: dup
     119: aload_0
     120: getstatic     #139                // Field javafx/concurrent/WorkerStateEvent.WORKER_STATE_RUNNING:Ljavafx/event/EventType;
     123: invokespecial #132                // Method javafx/concurrent/WorkerStateEvent."<init>":(Ljavafx/concurrent/Worker;Ljavafx/event/EventType;)V
     126: invokevirtual #133                // Method fireEvent:(Ljavafx/event/Event;)V
     129: aload_0
     130: invokevirtual #140                // Method running:()V
     133: goto          190
     136: aload_0
     137: new           #130                // class javafx/concurrent/WorkerStateEvent
     140: dup
     141: aload_0
     142: getstatic     #141                // Field javafx/concurrent/WorkerStateEvent.WORKER_STATE_SCHEDULED:Ljavafx/event/EventType;
     145: invokespecial #132                // Method javafx/concurrent/WorkerStateEvent."<init>":(Ljavafx/concurrent/Worker;Ljavafx/event/EventType;)V
     148: invokevirtual #133                // Method fireEvent:(Ljavafx/event/Event;)V
     151: aload_0
     152: invokevirtual #142                // Method scheduled:()V
     155: goto          190
     158: aload_0
     159: new           #130                // class javafx/concurrent/WorkerStateEvent
     162: dup
     163: aload_0
     164: getstatic     #143                // Field javafx/concurrent/WorkerStateEvent.WORKER_STATE_SUCCEEDED:Ljavafx/event/EventType;
     167: invokespecial #132                // Method javafx/concurrent/WorkerStateEvent."<init>":(Ljavafx/concurrent/Worker;Ljavafx/event/EventType;)V
     170: invokevirtual #133                // Method fireEvent:(Ljavafx/event/Event;)V
     173: aload_0
     174: invokevirtual #144                // Method succeeded:()V
     177: goto          190
     180: new           #145                // class java/lang/AssertionError
     183: dup
     184: ldc           #146                // String Should be unreachable
     186: invokespecial #147                // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     189: athrow
     190: return

  private static java.lang.Thread lambda$static$3(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokedynamic #148,  0            // InvokeDynamic #5:run:(Ljava/lang/Runnable;)Ljava/security/PrivilegedAction;
       6: invokestatic  #149                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
       9: checkcast     #150                // class java/lang/Thread
      12: areturn

  private static java.lang.Thread lambda$static$2(java.lang.Runnable);
    Code:
       0: new           #150                // class java/lang/Thread
       3: dup
       4: getstatic     #151                // Field THREAD_GROUP:Ljava/lang/ThreadGroup;
       7: aload_0
       8: invokespecial #152                // Method java/lang/Thread."<init>":(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V
      11: astore_1
      12: aload_1
      13: getstatic     #153                // Field UNCAUGHT_HANDLER:Ljava/lang/Thread$UncaughtExceptionHandler;
      16: invokevirtual #154                // Method java/lang/Thread.setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
      19: aload_1
      20: iconst_1
      21: invokevirtual #155                // Method java/lang/Thread.setPriority:(I)V
      24: aload_1
      25: iconst_1
      26: invokevirtual #156                // Method java/lang/Thread.setDaemon:(Z)V
      29: aload_1
      30: areturn

  private static void lambda$static$1(java.lang.Thread, java.lang.Throwable);
    Code:
       0: aload_1
       1: instanceof    #157                // class java/lang/IllegalMonitorStateException
       4: ifne          25
       7: getstatic     #158                // Field LOG:Lcom/sun/javafx/logging/PlatformLogger;
      10: getstatic     #151                // Field THREAD_GROUP:Ljava/lang/ThreadGroup;
      13: invokevirtual #159                // Method java/lang/ThreadGroup.getName:()Ljava/lang/String;
      16: invokedynamic #160,  0            // InvokeDynamic #6:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      21: aload_1
      22: invokevirtual #161                // Method com/sun/javafx/logging/PlatformLogger.warning:(Ljava/lang/String;Ljava/lang/Throwable;)V
      25: return

  private static java.lang.ThreadGroup lambda$static$0();
    Code:
       0: new           #162                // class java/lang/ThreadGroup
       3: dup
       4: ldc           #163                // String javafx concurrent thread pool
       6: invokespecial #164                // Method java/lang/ThreadGroup."<init>":(Ljava/lang/String;)V
       9: areturn

  static java.util.concurrent.ThreadPoolExecutor access$000();
    Code:
       0: getstatic     #1                  // Field EXECUTOR:Ljava/util/concurrent/ThreadPoolExecutor;
       3: areturn

  static {};
    Code:
       0: ldc           #165                // class javafx/concurrent/Service
       2: invokevirtual #166                // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #167                // Method com/sun/javafx/logging/PlatformLogger.getLogger:(Ljava/lang/String;)Lcom/sun/javafx/logging/PlatformLogger;
       8: putstatic     #158                // Field LOG:Lcom/sun/javafx/logging/PlatformLogger;
      11: new           #168                // class javafx/concurrent/Service$1
      14: dup
      15: invokespecial #169                // Method javafx/concurrent/Service$1."<init>":()V
      18: putstatic     #170                // Field IO_QUEUE:Ljava/util/concurrent/BlockingQueue;
      21: invokedynamic #171,  0            // InvokeDynamic #7:run:()Ljava/security/PrivilegedAction;
      26: invokestatic  #149                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      29: checkcast     #162                // class java/lang/ThreadGroup
      32: putstatic     #151                // Field THREAD_GROUP:Ljava/lang/ThreadGroup;
      35: invokedynamic #172,  0            // InvokeDynamic #8:uncaughtException:()Ljava/lang/Thread$UncaughtExceptionHandler;
      40: putstatic     #153                // Field UNCAUGHT_HANDLER:Ljava/lang/Thread$UncaughtExceptionHandler;
      43: invokedynamic #173,  0            // InvokeDynamic #9:newThread:()Ljava/util/concurrent/ThreadFactory;
      48: putstatic     #174                // Field THREAD_FACTORY:Ljava/util/concurrent/ThreadFactory;
      51: new           #175                // class java/util/concurrent/ThreadPoolExecutor
      54: dup
      55: iconst_2
      56: bipush        32
      58: ldc2_w        #176                // long 1000l
      61: getstatic     #178                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      64: getstatic     #170                // Field IO_QUEUE:Ljava/util/concurrent/BlockingQueue;
      67: getstatic     #174                // Field THREAD_FACTORY:Ljava/util/concurrent/ThreadFactory;
      70: new           #179                // class java/util/concurrent/ThreadPoolExecutor$AbortPolicy
      73: dup
      74: invokespecial #180                // Method java/util/concurrent/ThreadPoolExecutor$AbortPolicy."<init>":()V
      77: invokespecial #181                // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V
      80: putstatic     #1                  // Field EXECUTOR:Ljava/util/concurrent/ThreadPoolExecutor;
      83: getstatic     #1                  // Field EXECUTOR:Ljava/util/concurrent/ThreadPoolExecutor;
      86: iconst_1
      87: invokevirtual #182                // Method java/util/concurrent/ThreadPoolExecutor.allowCoreThreadTimeOut:(Z)V
      90: return
}
