Compiled from "Call.java"
final class zipkin2.Call$Constant<V> extends zipkin2.Call$Base<V> {
  final V v;

  zipkin2.Call$Constant(V);
    Code:
       0: aload_0
       1: invokespecial #19                 // Method zipkin2/Call$Base."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #21                 // Field v:Ljava/lang/Object;
       9: return

  protected V doExecute();
    Code:
       0: aload_0
       1: getfield      #21                 // Field v:Ljava/lang/Object;
       4: areturn

  protected void doEnqueue(zipkin2.Callback<V>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #21                 // Field v:Ljava/lang/Object;
       5: invokeinterface #35,  2           // InterfaceMethod zipkin2/Callback.onSuccess:(Ljava/lang/Object;)V
      10: return

  public zipkin2.Call<V> clone();
    Code:
       0: new           #2                  // class zipkin2/Call$Constant
       3: dup
       4: aload_0
       5: getfield      #21                 // Field v:Ljava/lang/Object;
       8: invokespecial #43                 // Method "<init>":(Ljava/lang/Object;)V
      11: areturn

  public java.lang.String toString();
    Code:
       0: new           #47                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #50                 // String ConstantCall{value=
       9: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #21                 // Field v:Ljava/lang/Object;
      16: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #59                 // String }
      21: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #61                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #2                  // class zipkin2/Call$Constant
      11: ifeq          53
      14: aload_1
      15: checkcast     #2                  // class zipkin2/Call$Constant
      18: astore_2
      19: aload_0
      20: getfield      #21                 // Field v:Ljava/lang/Object;
      23: ifnonnull     41
      26: aload_2
      27: getfield      #21                 // Field v:Ljava/lang/Object;
      30: ifnonnull     37
      33: iconst_1
      34: goto          52
      37: iconst_0
      38: goto          52
      41: aload_0
      42: getfield      #21                 // Field v:Ljava/lang/Object;
      45: aload_2
      46: getfield      #21                 // Field v:Ljava/lang/Object;
      49: invokevirtual #67                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      52: ireturn
      53: iconst_0
      54: ireturn

  public int hashCode();
    Code:
       0: iconst_1
       1: istore_1
       2: iload_1
       3: ldc           #72                 // int 1000003
       5: imul
       6: istore_1
       7: iload_1
       8: aload_0
       9: getfield      #21                 // Field v:Ljava/lang/Object;
      12: ifnonnull     19
      15: iconst_0
      16: goto          26
      19: aload_0
      20: getfield      #21                 // Field v:Ljava/lang/Object;
      23: invokevirtual #74                 // Method java/lang/Object.hashCode:()I
      26: ixor
      27: istore_1
      28: iload_1
      29: ireturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method clone:()Lzipkin2/Call;
       4: areturn
}
