Compiled from "Proto3ZipkinFields.java"
class zipkin2.internal.Proto3ZipkinFields$EndpointField extends zipkin2.internal.Proto3Fields$LengthDelimitedField<zipkin2.Endpoint> {
  static final int SERVICE_NAME_KEY;

  static final int IPV4_KEY;

  static final int IPV6_KEY;

  static final int PORT_KEY;

  static final zipkin2.internal.Proto3Fields$Utf8Field SERVICE_NAME;

  static final zipkin2.internal.Proto3Fields$BytesField IPV4;

  static final zipkin2.internal.Proto3Fields$BytesField IPV6;

  static final zipkin2.internal.Proto3Fields$VarintField PORT;

  zipkin2.internal.Proto3ZipkinFields$EndpointField(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #46                 // Method zipkin2/internal/Proto3Fields$LengthDelimitedField."<init>":(I)V
       5: return

  int sizeOfValue(zipkin2.Endpoint);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: getstatic     #53                 // Field SERVICE_NAME:Lzipkin2/internal/Proto3Fields$Utf8Field;
       6: aload_1
       7: invokevirtual #57                 // Method zipkin2/Endpoint.serviceName:()Ljava/lang/String;
      10: invokevirtual #61                 // Method zipkin2/internal/Proto3Fields$Utf8Field.sizeInBytes:(Ljava/lang/Object;)I
      13: iadd
      14: istore_2
      15: iload_2
      16: getstatic     #63                 // Field IPV4:Lzipkin2/internal/Proto3Fields$BytesField;
      19: aload_1
      20: invokevirtual #67                 // Method zipkin2/Endpoint.ipv4Bytes:()[B
      23: invokevirtual #68                 // Method zipkin2/internal/Proto3Fields$BytesField.sizeInBytes:(Ljava/lang/Object;)I
      26: iadd
      27: istore_2
      28: iload_2
      29: getstatic     #70                 // Field IPV6:Lzipkin2/internal/Proto3Fields$BytesField;
      32: aload_1
      33: invokevirtual #73                 // Method zipkin2/Endpoint.ipv6Bytes:()[B
      36: invokevirtual #68                 // Method zipkin2/internal/Proto3Fields$BytesField.sizeInBytes:(Ljava/lang/Object;)I
      39: iadd
      40: istore_2
      41: iload_2
      42: getstatic     #75                 // Field PORT:Lzipkin2/internal/Proto3Fields$VarintField;
      45: aload_1
      46: invokevirtual #79                 // Method zipkin2/Endpoint.portAsInt:()I
      49: invokevirtual #82                 // Method zipkin2/internal/Proto3Fields$VarintField.sizeInBytes:(I)I
      52: iadd
      53: istore_2
      54: iload_2
      55: ireturn

  void writeValue(zipkin2.internal.Buffer, zipkin2.Endpoint);
    Code:
       0: getstatic     #53                 // Field SERVICE_NAME:Lzipkin2/internal/Proto3Fields$Utf8Field;
       3: aload_1
       4: aload_2
       5: invokevirtual #57                 // Method zipkin2/Endpoint.serviceName:()Ljava/lang/String;
       8: invokevirtual #91                 // Method zipkin2/internal/Proto3Fields$Utf8Field.write:(Lzipkin2/internal/Buffer;Ljava/lang/Object;)V
      11: getstatic     #63                 // Field IPV4:Lzipkin2/internal/Proto3Fields$BytesField;
      14: aload_1
      15: aload_2
      16: invokevirtual #67                 // Method zipkin2/Endpoint.ipv4Bytes:()[B
      19: invokevirtual #92                 // Method zipkin2/internal/Proto3Fields$BytesField.write:(Lzipkin2/internal/Buffer;Ljava/lang/Object;)V
      22: getstatic     #70                 // Field IPV6:Lzipkin2/internal/Proto3Fields$BytesField;
      25: aload_1
      26: aload_2
      27: invokevirtual #73                 // Method zipkin2/Endpoint.ipv6Bytes:()[B
      30: invokevirtual #92                 // Method zipkin2/internal/Proto3Fields$BytesField.write:(Lzipkin2/internal/Buffer;Ljava/lang/Object;)V
      33: getstatic     #75                 // Field PORT:Lzipkin2/internal/Proto3Fields$VarintField;
      36: aload_1
      37: aload_2
      38: invokevirtual #79                 // Method zipkin2/Endpoint.portAsInt:()I
      41: invokevirtual #95                 // Method zipkin2/internal/Proto3Fields$VarintField.write:(Lzipkin2/internal/Buffer;I)V
      44: return

  zipkin2.Endpoint readValue(zipkin2.internal.Buffer, int);
    Code:
       0: aload_1
       1: getfield      #104                // Field zipkin2/internal/Buffer.pos:I
       4: iload_2
       5: iadd
       6: istore_3
       7: invokestatic  #108                // Method zipkin2/Endpoint.newBuilder:()Lzipkin2/Endpoint$Builder;
      10: astore        4
      12: aload_1
      13: getfield      #104                // Field zipkin2/internal/Buffer.pos:I
      16: iload_3
      17: if_icmpge     151
      20: aload_1
      21: invokevirtual #111                // Method zipkin2/internal/Buffer.readVarint32:()I
      24: istore        5
      26: iload         5
      28: lookupswitch  { // 4
                    10: 72
                    18: 91
                    26: 110
                    32: 129
               default: 142
          }
      72: aload         4
      74: getstatic     #53                 // Field SERVICE_NAME:Lzipkin2/internal/Proto3Fields$Utf8Field;
      77: aload_1
      78: invokevirtual #115                // Method zipkin2/internal/Proto3Fields$Utf8Field.readLengthPrefixAndValue:(Lzipkin2/internal/Buffer;)Ljava/lang/Object;
      81: checkcast     #117                // class java/lang/String
      84: invokevirtual #120                // Method zipkin2/Endpoint$Builder.serviceName:(Ljava/lang/String;)Lzipkin2/Endpoint$Builder;
      87: pop
      88: goto          148
      91: aload         4
      93: getstatic     #63                 // Field IPV4:Lzipkin2/internal/Proto3Fields$BytesField;
      96: aload_1
      97: invokevirtual #121                // Method zipkin2/internal/Proto3Fields$BytesField.readLengthPrefixAndValue:(Lzipkin2/internal/Buffer;)Ljava/lang/Object;
     100: checkcast     #123                // class "[B"
     103: invokevirtual #127                // Method zipkin2/Endpoint$Builder.parseIp:([B)Z
     106: pop
     107: goto          148
     110: aload         4
     112: getstatic     #70                 // Field IPV6:Lzipkin2/internal/Proto3Fields$BytesField;
     115: aload_1
     116: invokevirtual #121                // Method zipkin2/internal/Proto3Fields$BytesField.readLengthPrefixAndValue:(Lzipkin2/internal/Buffer;)Ljava/lang/Object;
     119: checkcast     #123                // class "[B"
     122: invokevirtual #127                // Method zipkin2/Endpoint$Builder.parseIp:([B)Z
     125: pop
     126: goto          148
     129: aload         4
     131: aload_1
     132: invokevirtual #111                // Method zipkin2/internal/Buffer.readVarint32:()I
     135: invokevirtual #131                // Method zipkin2/Endpoint$Builder.port:(I)Lzipkin2/Endpoint$Builder;
     138: pop
     139: goto          148
     142: aload_1
     143: iload         5
     145: invokestatic  #134                // Method zipkin2/internal/Proto3ZipkinFields.logAndSkip:(Lzipkin2/internal/Buffer;I)V
     148: goto          12
     151: aload         4
     153: invokevirtual #138                // Method zipkin2/Endpoint$Builder.build:()Lzipkin2/Endpoint;
     156: areturn

  java.lang.Object readValue(zipkin2.internal.Buffer, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #147                // Method readValue:(Lzipkin2/internal/Buffer;I)Lzipkin2/Endpoint;
       6: areturn

  void writeValue(zipkin2.internal.Buffer, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #24                 // class zipkin2/Endpoint
       6: invokevirtual #149                // Method writeValue:(Lzipkin2/internal/Buffer;Lzipkin2/Endpoint;)V
       9: return

  int sizeOfValue(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class zipkin2/Endpoint
       5: invokevirtual #151                // Method sizeOfValue:(Lzipkin2/Endpoint;)I
       8: ireturn

  static {};
    Code:
       0: new           #8                  // class zipkin2/internal/Proto3Fields$Utf8Field
       3: dup
       4: bipush        10
       6: invokespecial #154                // Method zipkin2/internal/Proto3Fields$Utf8Field."<init>":(I)V
       9: putstatic     #53                 // Field SERVICE_NAME:Lzipkin2/internal/Proto3Fields$Utf8Field;
      12: new           #13                 // class zipkin2/internal/Proto3Fields$BytesField
      15: dup
      16: bipush        18
      18: invokespecial #155                // Method zipkin2/internal/Proto3Fields$BytesField."<init>":(I)V
      21: putstatic     #63                 // Field IPV4:Lzipkin2/internal/Proto3Fields$BytesField;
      24: new           #13                 // class zipkin2/internal/Proto3Fields$BytesField
      27: dup
      28: bipush        26
      30: invokespecial #155                // Method zipkin2/internal/Proto3Fields$BytesField."<init>":(I)V
      33: putstatic     #70                 // Field IPV6:Lzipkin2/internal/Proto3Fields$BytesField;
      36: new           #16                 // class zipkin2/internal/Proto3Fields$VarintField
      39: dup
      40: bipush        32
      42: invokespecial #156                // Method zipkin2/internal/Proto3Fields$VarintField."<init>":(I)V
      45: putstatic     #75                 // Field PORT:Lzipkin2/internal/Proto3Fields$VarintField;
      48: return
}
