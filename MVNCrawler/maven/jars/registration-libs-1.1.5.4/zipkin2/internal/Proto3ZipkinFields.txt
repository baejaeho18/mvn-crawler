Compiled from "Proto3ZipkinFields.java"
final class zipkin2.internal.Proto3ZipkinFields {
  static final java.util.logging.Logger LOG;

  static final zipkin2.internal.Proto3ZipkinFields$SpanField SPAN;

  zipkin2.internal.Proto3ZipkinFields();
    Code:
       0: aload_0
       1: invokespecial #33                 // Method java/lang/Object."<init>":()V
       4: return

  static void logAndSkip(zipkin2.internal.Buffer, int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #43                 // Field zipkin2/internal/Buffer.pos:I
       5: invokestatic  #47                 // Method zipkin2/internal/Proto3Fields$Field.wireType:(II)I
       8: istore_2
       9: getstatic     #49                 // Field LOG:Ljava/util/logging/Logger;
      12: getstatic     #55                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
      15: invokevirtual #61                 // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      18: ifeq          69
      21: iload_1
      22: aload_0
      23: getfield      #43                 // Field zipkin2/internal/Buffer.pos:I
      26: invokestatic  #64                 // Method zipkin2/internal/Proto3Fields$Field.fieldNumber:(II)I
      29: istore_3
      30: getstatic     #49                 // Field LOG:Ljava/util/logging/Logger;
      33: ldc           #66                 // String Skipping field: byte=%s, fieldNumber=%s, wireType=%s
      35: iconst_3
      36: anewarray     #4                  // class java/lang/Object
      39: dup
      40: iconst_0
      41: aload_0
      42: getfield      #43                 // Field zipkin2/internal/Buffer.pos:I
      45: invokestatic  #72                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      48: aastore
      49: dup
      50: iconst_1
      51: iload_3
      52: invokestatic  #72                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      55: aastore
      56: dup
      57: iconst_2
      58: iload_2
      59: invokestatic  #72                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      62: aastore
      63: invokestatic  #78                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      66: invokevirtual #82                 // Method java/util/logging/Logger.fine:(Ljava/lang/String;)V
      69: aload_0
      70: iload_2
      71: invokestatic  #86                 // Method zipkin2/internal/Proto3Fields$Field.skipValue:(Lzipkin2/internal/Buffer;I)Z
      74: pop
      75: return

  static {};
    Code:
       0: ldc           #2                  // class zipkin2/internal/Proto3ZipkinFields
       2: invokevirtual #98                 // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #102                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: putstatic     #49                 // Field LOG:Ljava/util/logging/Logger;
      11: new           #7                  // class zipkin2/internal/Proto3ZipkinFields$SpanField
      14: dup
      15: invokespecial #103                // Method zipkin2/internal/Proto3ZipkinFields$SpanField."<init>":()V
      18: putstatic     #105                // Field SPAN:Lzipkin2/internal/Proto3ZipkinFields$SpanField;
      21: return
}
