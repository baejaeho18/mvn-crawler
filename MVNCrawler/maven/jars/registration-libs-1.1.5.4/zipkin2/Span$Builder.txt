Compiled from "Span.java"
public final class zipkin2.Span$Builder {
  java.lang.String traceId;

  java.lang.String parentId;

  java.lang.String id;

  zipkin2.Span$Kind kind;

  java.lang.String name;

  long timestamp;

  long duration;

  zipkin2.Endpoint localEndpoint;

  zipkin2.Endpoint remoteEndpoint;

  java.util.ArrayList<zipkin2.Annotation> annotations;

  java.util.TreeMap<java.lang.String, java.lang.String> tags;

  int flags;

  public zipkin2.Span$Builder clear();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #40                 // Field traceId:Ljava/lang/String;
       5: aload_0
       6: aconst_null
       7: putfield      #42                 // Field parentId:Ljava/lang/String;
      10: aload_0
      11: aconst_null
      12: putfield      #44                 // Field id:Ljava/lang/String;
      15: aload_0
      16: aconst_null
      17: putfield      #46                 // Field kind:Lzipkin2/Span$Kind;
      20: aload_0
      21: aconst_null
      22: putfield      #48                 // Field name:Ljava/lang/String;
      25: aload_0
      26: lconst_0
      27: putfield      #50                 // Field timestamp:J
      30: aload_0
      31: lconst_0
      32: putfield      #52                 // Field duration:J
      35: aload_0
      36: aconst_null
      37: putfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
      40: aload_0
      41: aconst_null
      42: putfield      #56                 // Field remoteEndpoint:Lzipkin2/Endpoint;
      45: aload_0
      46: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
      49: ifnull        59
      52: aload_0
      53: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
      56: invokevirtual #63                 // Method java/util/ArrayList.clear:()V
      59: aload_0
      60: getfield      #65                 // Field tags:Ljava/util/TreeMap;
      63: ifnull        73
      66: aload_0
      67: getfield      #65                 // Field tags:Ljava/util/TreeMap;
      70: invokevirtual #68                 // Method java/util/TreeMap.clear:()V
      73: aload_0
      74: iconst_0
      75: putfield      #70                 // Field flags:I
      78: aload_0
      79: areturn

  public zipkin2.Span$Builder clone();
    Code:
       0: new           #2                  // class zipkin2/Span$Builder
       3: dup
       4: invokespecial #76                 // Method "<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #40                 // Field traceId:Ljava/lang/String;
      13: putfield      #40                 // Field traceId:Ljava/lang/String;
      16: aload_1
      17: aload_0
      18: getfield      #42                 // Field parentId:Ljava/lang/String;
      21: putfield      #42                 // Field parentId:Ljava/lang/String;
      24: aload_1
      25: aload_0
      26: getfield      #44                 // Field id:Ljava/lang/String;
      29: putfield      #44                 // Field id:Ljava/lang/String;
      32: aload_1
      33: aload_0
      34: getfield      #46                 // Field kind:Lzipkin2/Span$Kind;
      37: putfield      #46                 // Field kind:Lzipkin2/Span$Kind;
      40: aload_1
      41: aload_0
      42: getfield      #48                 // Field name:Ljava/lang/String;
      45: putfield      #48                 // Field name:Ljava/lang/String;
      48: aload_1
      49: aload_0
      50: getfield      #50                 // Field timestamp:J
      53: putfield      #50                 // Field timestamp:J
      56: aload_1
      57: aload_0
      58: getfield      #52                 // Field duration:J
      61: putfield      #52                 // Field duration:J
      64: aload_1
      65: aload_0
      66: getfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
      69: putfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
      72: aload_1
      73: aload_0
      74: getfield      #56                 // Field remoteEndpoint:Lzipkin2/Endpoint;
      77: putfield      #56                 // Field remoteEndpoint:Lzipkin2/Endpoint;
      80: aload_0
      81: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
      84: ifnull        101
      87: aload_1
      88: aload_0
      89: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
      92: invokevirtual #79                 // Method java/util/ArrayList.clone:()Ljava/lang/Object;
      95: checkcast     #60                 // class java/util/ArrayList
      98: putfield      #58                 // Field annotations:Ljava/util/ArrayList;
     101: aload_0
     102: getfield      #65                 // Field tags:Ljava/util/TreeMap;
     105: ifnull        122
     108: aload_1
     109: aload_0
     110: getfield      #65                 // Field tags:Ljava/util/TreeMap;
     113: invokevirtual #80                 // Method java/util/TreeMap.clone:()Ljava/lang/Object;
     116: checkcast     #67                 // class java/util/TreeMap
     119: putfield      #65                 // Field tags:Ljava/util/TreeMap;
     122: aload_1
     123: aload_0
     124: getfield      #70                 // Field flags:I
     127: putfield      #70                 // Field flags:I
     130: aload_1
     131: areturn

  zipkin2.Span$Builder(zipkin2.Span);
    Code:
       0: aload_0
       1: invokespecial #83                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #70                 // Field flags:I
       9: aload_0
      10: aload_1
      11: getfield      #84                 // Field zipkin2/Span.traceId:Ljava/lang/String;
      14: putfield      #40                 // Field traceId:Ljava/lang/String;
      17: aload_0
      18: aload_1
      19: getfield      #85                 // Field zipkin2/Span.parentId:Ljava/lang/String;
      22: putfield      #42                 // Field parentId:Ljava/lang/String;
      25: aload_0
      26: aload_1
      27: getfield      #86                 // Field zipkin2/Span.id:Ljava/lang/String;
      30: putfield      #44                 // Field id:Ljava/lang/String;
      33: aload_0
      34: aload_1
      35: getfield      #87                 // Field zipkin2/Span.kind:Lzipkin2/Span$Kind;
      38: putfield      #46                 // Field kind:Lzipkin2/Span$Kind;
      41: aload_0
      42: aload_1
      43: getfield      #88                 // Field zipkin2/Span.name:Ljava/lang/String;
      46: putfield      #48                 // Field name:Ljava/lang/String;
      49: aload_0
      50: aload_1
      51: getfield      #89                 // Field zipkin2/Span.timestamp:J
      54: putfield      #50                 // Field timestamp:J
      57: aload_0
      58: aload_1
      59: getfield      #90                 // Field zipkin2/Span.duration:J
      62: putfield      #52                 // Field duration:J
      65: aload_0
      66: aload_1
      67: getfield      #91                 // Field zipkin2/Span.localEndpoint:Lzipkin2/Endpoint;
      70: putfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
      73: aload_0
      74: aload_1
      75: getfield      #92                 // Field zipkin2/Span.remoteEndpoint:Lzipkin2/Endpoint;
      78: putfield      #56                 // Field remoteEndpoint:Lzipkin2/Endpoint;
      81: aload_1
      82: getfield      #95                 // Field zipkin2/Span.annotations:Ljava/util/List;
      85: invokeinterface #101,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      90: ifne          125
      93: aload_0
      94: new           #60                 // class java/util/ArrayList
      97: dup
      98: aload_1
      99: getfield      #95                 // Field zipkin2/Span.annotations:Ljava/util/List;
     102: invokeinterface #105,  1          // InterfaceMethod java/util/List.size:()I
     107: invokespecial #108                // Method java/util/ArrayList."<init>":(I)V
     110: putfield      #58                 // Field annotations:Ljava/util/ArrayList;
     113: aload_0
     114: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
     117: aload_1
     118: getfield      #95                 // Field zipkin2/Span.annotations:Ljava/util/List;
     121: invokevirtual #112                // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
     124: pop
     125: aload_1
     126: getfield      #115                // Field zipkin2/Span.tags:Ljava/util/Map;
     129: invokeinterface #118,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
     134: ifne          159
     137: aload_0
     138: new           #67                 // class java/util/TreeMap
     141: dup
     142: invokespecial #119                // Method java/util/TreeMap."<init>":()V
     145: putfield      #65                 // Field tags:Ljava/util/TreeMap;
     148: aload_0
     149: getfield      #65                 // Field tags:Ljava/util/TreeMap;
     152: aload_1
     153: getfield      #115                // Field zipkin2/Span.tags:Ljava/util/Map;
     156: invokevirtual #123                // Method java/util/TreeMap.putAll:(Ljava/util/Map;)V
     159: aload_0
     160: aload_1
     161: getfield      #124                // Field zipkin2/Span.flags:I
     164: putfield      #70                 // Field flags:I
     167: return

  public zipkin2.Span$Builder merge(zipkin2.Span);
    Code:
       0: aload_0
       1: getfield      #40                 // Field traceId:Ljava/lang/String;
       4: ifnonnull     15
       7: aload_0
       8: aload_1
       9: getfield      #84                 // Field zipkin2/Span.traceId:Ljava/lang/String;
      12: putfield      #40                 // Field traceId:Ljava/lang/String;
      15: aload_0
      16: getfield      #44                 // Field id:Ljava/lang/String;
      19: ifnonnull     30
      22: aload_0
      23: aload_1
      24: getfield      #86                 // Field zipkin2/Span.id:Ljava/lang/String;
      27: putfield      #44                 // Field id:Ljava/lang/String;
      30: aload_0
      31: getfield      #42                 // Field parentId:Ljava/lang/String;
      34: ifnonnull     45
      37: aload_0
      38: aload_1
      39: getfield      #85                 // Field zipkin2/Span.parentId:Ljava/lang/String;
      42: putfield      #42                 // Field parentId:Ljava/lang/String;
      45: aload_0
      46: getfield      #46                 // Field kind:Lzipkin2/Span$Kind;
      49: ifnonnull     60
      52: aload_0
      53: aload_1
      54: getfield      #87                 // Field zipkin2/Span.kind:Lzipkin2/Span$Kind;
      57: putfield      #46                 // Field kind:Lzipkin2/Span$Kind;
      60: aload_0
      61: getfield      #48                 // Field name:Ljava/lang/String;
      64: ifnonnull     75
      67: aload_0
      68: aload_1
      69: getfield      #88                 // Field zipkin2/Span.name:Ljava/lang/String;
      72: putfield      #48                 // Field name:Ljava/lang/String;
      75: aload_0
      76: getfield      #50                 // Field timestamp:J
      79: lconst_0
      80: lcmp
      81: ifne          92
      84: aload_0
      85: aload_1
      86: getfield      #89                 // Field zipkin2/Span.timestamp:J
      89: putfield      #50                 // Field timestamp:J
      92: aload_0
      93: getfield      #52                 // Field duration:J
      96: lconst_0
      97: lcmp
      98: ifne          109
     101: aload_0
     102: aload_1
     103: getfield      #90                 // Field zipkin2/Span.duration:J
     106: putfield      #52                 // Field duration:J
     109: aload_0
     110: getfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
     113: ifnonnull     127
     116: aload_0
     117: aload_1
     118: getfield      #91                 // Field zipkin2/Span.localEndpoint:Lzipkin2/Endpoint;
     121: putfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
     124: goto          155
     127: aload_1
     128: getfield      #91                 // Field zipkin2/Span.localEndpoint:Lzipkin2/Endpoint;
     131: ifnull        155
     134: aload_0
     135: aload_0
     136: getfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
     139: invokevirtual #132                // Method zipkin2/Endpoint.toBuilder:()Lzipkin2/Endpoint$Builder;
     142: aload_1
     143: getfield      #91                 // Field zipkin2/Span.localEndpoint:Lzipkin2/Endpoint;
     146: invokevirtual #135                // Method zipkin2/Endpoint$Builder.merge:(Lzipkin2/Endpoint;)Lzipkin2/Endpoint$Builder;
     149: invokevirtual #139                // Method zipkin2/Endpoint$Builder.build:()Lzipkin2/Endpoint;
     152: putfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
     155: aload_0
     156: getfield      #56                 // Field remoteEndpoint:Lzipkin2/Endpoint;
     159: ifnonnull     173
     162: aload_0
     163: aload_1
     164: getfield      #92                 // Field zipkin2/Span.remoteEndpoint:Lzipkin2/Endpoint;
     167: putfield      #56                 // Field remoteEndpoint:Lzipkin2/Endpoint;
     170: goto          201
     173: aload_1
     174: getfield      #92                 // Field zipkin2/Span.remoteEndpoint:Lzipkin2/Endpoint;
     177: ifnull        201
     180: aload_0
     181: aload_0
     182: getfield      #56                 // Field remoteEndpoint:Lzipkin2/Endpoint;
     185: invokevirtual #132                // Method zipkin2/Endpoint.toBuilder:()Lzipkin2/Endpoint$Builder;
     188: aload_1
     189: getfield      #92                 // Field zipkin2/Span.remoteEndpoint:Lzipkin2/Endpoint;
     192: invokevirtual #135                // Method zipkin2/Endpoint$Builder.merge:(Lzipkin2/Endpoint;)Lzipkin2/Endpoint$Builder;
     195: invokevirtual #139                // Method zipkin2/Endpoint$Builder.build:()Lzipkin2/Endpoint;
     198: putfield      #56                 // Field remoteEndpoint:Lzipkin2/Endpoint;
     201: aload_1
     202: getfield      #95                 // Field zipkin2/Span.annotations:Ljava/util/List;
     205: invokeinterface #101,  1          // InterfaceMethod java/util/List.isEmpty:()Z
     210: ifne          252
     213: aload_0
     214: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
     217: ifnonnull     240
     220: aload_0
     221: new           #60                 // class java/util/ArrayList
     224: dup
     225: aload_1
     226: getfield      #95                 // Field zipkin2/Span.annotations:Ljava/util/List;
     229: invokeinterface #105,  1          // InterfaceMethod java/util/List.size:()I
     234: invokespecial #108                // Method java/util/ArrayList."<init>":(I)V
     237: putfield      #58                 // Field annotations:Ljava/util/ArrayList;
     240: aload_0
     241: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
     244: aload_1
     245: getfield      #95                 // Field zipkin2/Span.annotations:Ljava/util/List;
     248: invokevirtual #112                // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
     251: pop
     252: aload_1
     253: getfield      #115                // Field zipkin2/Span.tags:Ljava/util/Map;
     256: invokeinterface #118,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
     261: ifne          293
     264: aload_0
     265: getfield      #65                 // Field tags:Ljava/util/TreeMap;
     268: ifnonnull     282
     271: aload_0
     272: new           #67                 // class java/util/TreeMap
     275: dup
     276: invokespecial #119                // Method java/util/TreeMap."<init>":()V
     279: putfield      #65                 // Field tags:Ljava/util/TreeMap;
     282: aload_0
     283: getfield      #65                 // Field tags:Ljava/util/TreeMap;
     286: aload_1
     287: getfield      #115                // Field zipkin2/Span.tags:Ljava/util/Map;
     290: invokevirtual #123                // Method java/util/TreeMap.putAll:(Ljava/util/Map;)V
     293: aload_0
     294: aload_0
     295: getfield      #70                 // Field flags:I
     298: aload_1
     299: getfield      #124                // Field zipkin2/Span.flags:I
     302: ior
     303: putfield      #70                 // Field flags:I
     306: aload_0
     307: areturn

  public zipkin2.Span$Kind kind();
    Code:
       0: aload_0
       1: getfield      #46                 // Field kind:Lzipkin2/Span$Kind;
       4: areturn

  public zipkin2.Endpoint localEndpoint();
    Code:
       0: aload_0
       1: getfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
       4: areturn

  public zipkin2.Span$Builder traceId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #146                // Method zipkin2/Span.normalizeTraceId:(Ljava/lang/String;)Ljava/lang/String;
       5: putfield      #40                 // Field traceId:Ljava/lang/String;
       8: aload_0
       9: areturn

  public zipkin2.Span$Builder traceId(long, long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifne          22
       6: lload_3
       7: lconst_0
       8: lcmp
       9: ifne          22
      12: new           #149                // class java/lang/IllegalArgumentException
      15: dup
      16: ldc           #151                // String empty trace ID
      18: invokespecial #154                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: lload_1
      23: lconst_0
      24: lcmp
      25: ifeq          33
      28: bipush        32
      30: goto          35
      33: bipush        16
      35: newarray       char
      37: astore        5
      39: iconst_0
      40: istore        6
      42: lload_1
      43: lconst_0
      44: lcmp
      45: ifeq          59
      48: aload         5
      50: iload         6
      52: lload_1
      53: invokestatic  #158                // Method zipkin2/Span.writeHexLong:([CIJ)V
      56: iinc          6, 16
      59: aload         5
      61: iload         6
      63: lload_3
      64: invokestatic  #158                // Method zipkin2/Span.writeHexLong:([CIJ)V
      67: aload_0
      68: new           #162                // class java/lang/String
      71: dup
      72: aload         5
      74: invokespecial #165                // Method java/lang/String."<init>":([C)V
      77: putfield      #40                 // Field traceId:Ljava/lang/String;
      80: aload_0
      81: areturn

  public zipkin2.Span$Builder parentId(long);
    Code:
       0: aload_0
       1: lload_1
       2: lconst_0
       3: lcmp
       4: ifeq          14
       7: lload_1
       8: invokestatic  #173                // Method zipkin2/Span.toLowerHex:(J)Ljava/lang/String;
      11: goto          15
      14: aconst_null
      15: putfield      #42                 // Field parentId:Ljava/lang/String;
      18: aload_0
      19: areturn

  public zipkin2.Span$Builder parentId(java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     11
       4: aload_0
       5: aconst_null
       6: putfield      #42                 // Field parentId:Ljava/lang/String;
       9: aload_0
      10: areturn
      11: aload_1
      12: invokevirtual #176                // Method java/lang/String.length:()I
      15: istore_2
      16: iload_2
      17: ifne          30
      20: new           #149                // class java/lang/IllegalArgumentException
      23: dup
      24: ldc           #178                // String parentId is empty
      26: invokespecial #154                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: iload_2
      31: bipush        16
      33: if_icmple     46
      36: new           #149                // class java/lang/IllegalArgumentException
      39: dup
      40: ldc           #180                // String parentId.length > 16
      42: invokespecial #154                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload_1
      47: invokestatic  #184                // Method zipkin2/Span.validateHexAndReturnZeroPrefix:(Ljava/lang/String;)I
      50: iload_2
      51: if_icmpne     62
      54: aload_0
      55: aconst_null
      56: putfield      #42                 // Field parentId:Ljava/lang/String;
      59: goto          82
      62: aload_0
      63: iload_2
      64: bipush        16
      66: if_icmpge     78
      69: aload_1
      70: bipush        16
      72: invokestatic  #188                // Method zipkin2/Span.padLeft:(Ljava/lang/String;I)Ljava/lang/String;
      75: goto          79
      78: aload_1
      79: putfield      #42                 // Field parentId:Ljava/lang/String;
      82: aload_0
      83: areturn

  public zipkin2.Span$Builder id(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifne          16
       6: new           #149                // class java/lang/IllegalArgumentException
       9: dup
      10: ldc           #190                // String empty id
      12: invokespecial #154                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: lload_1
      18: invokestatic  #173                // Method zipkin2/Span.toLowerHex:(J)Ljava/lang/String;
      21: putfield      #44                 // Field id:Ljava/lang/String;
      24: aload_0
      25: areturn

  public zipkin2.Span$Builder id(java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #192                // class java/lang/NullPointerException
       7: dup
       8: ldc           #194                // String id == null
      10: invokespecial #195                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: invokevirtual #176                // Method java/lang/String.length:()I
      18: istore_2
      19: iload_2
      20: ifne          33
      23: new           #149                // class java/lang/IllegalArgumentException
      26: dup
      27: ldc           #197                // String id is empty
      29: invokespecial #154                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: iload_2
      34: bipush        16
      36: if_icmple     49
      39: new           #149                // class java/lang/IllegalArgumentException
      42: dup
      43: ldc           #199                // String id.length > 16
      45: invokespecial #154                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      48: athrow
      49: aload_1
      50: invokestatic  #184                // Method zipkin2/Span.validateHexAndReturnZeroPrefix:(Ljava/lang/String;)I
      53: bipush        16
      55: if_icmpne     68
      58: new           #149                // class java/lang/IllegalArgumentException
      61: dup
      62: ldc           #201                // String id is all zeros
      64: invokespecial #154                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      67: athrow
      68: aload_0
      69: iload_2
      70: bipush        16
      72: if_icmpge     84
      75: aload_1
      76: bipush        16
      78: invokestatic  #188                // Method zipkin2/Span.padLeft:(Ljava/lang/String;I)Ljava/lang/String;
      81: goto          85
      84: aload_1
      85: putfield      #44                 // Field id:Ljava/lang/String;
      88: aload_0
      89: areturn

  public zipkin2.Span$Builder kind(zipkin2.Span$Kind);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field kind:Lzipkin2/Span$Kind;
       5: aload_0
       6: areturn

  public zipkin2.Span$Builder name(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ifnull        12
       5: aload_1
       6: invokevirtual #203                // Method java/lang/String.isEmpty:()Z
       9: ifeq          16
      12: aconst_null
      13: goto          23
      16: aload_1
      17: getstatic     #209                // Field java/util/Locale.ROOT:Ljava/util/Locale;
      20: invokevirtual #213                // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      23: putfield      #48                 // Field name:Ljava/lang/String;
      26: aload_0
      27: areturn

  public zipkin2.Span$Builder timestamp(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          8
       6: lconst_0
       7: lstore_1
       8: aload_0
       9: lload_1
      10: putfield      #50                 // Field timestamp:J
      13: aload_0
      14: areturn

  public zipkin2.Span$Builder timestamp(java.lang.Long);
    Code:
       0: aload_1
       1: ifnull        13
       4: aload_1
       5: invokevirtual #220                // Method java/lang/Long.longValue:()J
       8: lconst_0
       9: lcmp
      10: ifge          18
      13: lconst_0
      14: invokestatic  #224                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      17: astore_1
      18: aload_0
      19: aload_1
      20: invokevirtual #220                // Method java/lang/Long.longValue:()J
      23: putfield      #50                 // Field timestamp:J
      26: aload_0
      27: areturn

  public zipkin2.Span$Builder duration(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          8
       6: lconst_0
       7: lstore_1
       8: aload_0
       9: lload_1
      10: putfield      #52                 // Field duration:J
      13: aload_0
      14: areturn

  public zipkin2.Span$Builder duration(java.lang.Long);
    Code:
       0: aload_1
       1: ifnull        13
       4: aload_1
       5: invokevirtual #220                // Method java/lang/Long.longValue:()J
       8: lconst_0
       9: lcmp
      10: ifge          18
      13: lconst_0
      14: invokestatic  #224                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      17: astore_1
      18: aload_0
      19: aload_1
      20: invokevirtual #220                // Method java/lang/Long.longValue:()J
      23: putfield      #52                 // Field duration:J
      26: aload_0
      27: areturn

  public zipkin2.Span$Builder localEndpoint(zipkin2.Endpoint);
    Code:
       0: getstatic     #229                // Field zipkin2/Span.EMPTY_ENDPOINT:Lzipkin2/Endpoint;
       3: aload_1
       4: invokevirtual #233                // Method zipkin2/Endpoint.equals:(Ljava/lang/Object;)Z
       7: ifeq          12
      10: aconst_null
      11: astore_1
      12: aload_0
      13: aload_1
      14: putfield      #54                 // Field localEndpoint:Lzipkin2/Endpoint;
      17: aload_0
      18: areturn

  public zipkin2.Span$Builder remoteEndpoint(zipkin2.Endpoint);
    Code:
       0: getstatic     #229                // Field zipkin2/Span.EMPTY_ENDPOINT:Lzipkin2/Endpoint;
       3: aload_1
       4: invokevirtual #233                // Method zipkin2/Endpoint.equals:(Ljava/lang/Object;)Z
       7: ifeq          12
      10: aconst_null
      11: astore_1
      12: aload_0
      13: aload_1
      14: putfield      #56                 // Field remoteEndpoint:Lzipkin2/Endpoint;
      17: aload_0
      18: areturn

  public zipkin2.Span$Builder addAnnotation(long, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
       4: ifnonnull     19
       7: aload_0
       8: new           #60                 // class java/util/ArrayList
      11: dup
      12: iconst_2
      13: invokespecial #108                // Method java/util/ArrayList."<init>":(I)V
      16: putfield      #58                 // Field annotations:Ljava/util/ArrayList;
      19: aload_0
      20: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
      23: lload_1
      24: aload_3
      25: invokestatic  #241                // Method zipkin2/Annotation.create:(JLjava/lang/String;)Lzipkin2/Annotation;
      28: invokevirtual #244                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      31: pop
      32: aload_0
      33: areturn

  public zipkin2.Span$Builder clearAnnotations();
    Code:
       0: aload_0
       1: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
       4: ifnonnull     9
       7: aload_0
       8: areturn
       9: aload_0
      10: getfield      #58                 // Field annotations:Ljava/util/ArrayList;
      13: invokevirtual #63                 // Method java/util/ArrayList.clear:()V
      16: aload_0
      17: areturn

  public zipkin2.Span$Builder putTag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #65                 // Field tags:Ljava/util/TreeMap;
       4: ifnonnull     18
       7: aload_0
       8: new           #67                 // class java/util/TreeMap
      11: dup
      12: invokespecial #119                // Method java/util/TreeMap."<init>":()V
      15: putfield      #65                 // Field tags:Ljava/util/TreeMap;
      18: aload_1
      19: ifnonnull     32
      22: new           #192                // class java/lang/NullPointerException
      25: dup
      26: ldc           #250                // String key == null
      28: invokespecial #195                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_2
      33: ifnonnull     69
      36: new           #192                // class java/lang/NullPointerException
      39: dup
      40: new           #252                // class java/lang/StringBuilder
      43: dup
      44: invokespecial #253                // Method java/lang/StringBuilder."<init>":()V
      47: ldc           #255                // String value of
      49: invokevirtual #259                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload_1
      53: invokevirtual #259                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: ldc_w         #261                // String  == null
      59: invokevirtual #259                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: invokevirtual #265                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      65: invokespecial #195                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      68: athrow
      69: aload_0
      70: getfield      #65                 // Field tags:Ljava/util/TreeMap;
      73: aload_1
      74: aload_2
      75: invokevirtual #269                // Method java/util/TreeMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      78: pop
      79: aload_0
      80: areturn

  public zipkin2.Span$Builder clearTags();
    Code:
       0: aload_0
       1: getfield      #65                 // Field tags:Ljava/util/TreeMap;
       4: ifnonnull     9
       7: aload_0
       8: areturn
       9: aload_0
      10: getfield      #65                 // Field tags:Ljava/util/TreeMap;
      13: invokevirtual #68                 // Method java/util/TreeMap.clear:()V
      16: aload_0
      17: areturn

  public zipkin2.Span$Builder debug(boolean);
    Code:
       0: aload_0
       1: dup
       2: getfield      #70                 // Field flags:I
       5: iconst_4
       6: ior
       7: putfield      #70                 // Field flags:I
      10: iload_1
      11: ifeq          27
      14: aload_0
      15: dup
      16: getfield      #70                 // Field flags:I
      19: iconst_2
      20: ior
      21: putfield      #70                 // Field flags:I
      24: goto          38
      27: aload_0
      28: dup
      29: getfield      #70                 // Field flags:I
      32: bipush        -3
      34: iand
      35: putfield      #70                 // Field flags:I
      38: aload_0
      39: areturn

  public zipkin2.Span$Builder debug(java.lang.Boolean);
    Code:
       0: aload_1
       1: ifnull        13
       4: aload_0
       5: aload_1
       6: invokevirtual #280                // Method java/lang/Boolean.booleanValue:()Z
       9: invokevirtual #282                // Method debug:(Z)Lzipkin2/Span$Builder;
      12: areturn
      13: aload_0
      14: dup
      15: getfield      #70                 // Field flags:I
      18: bipush        -7
      20: iand
      21: putfield      #70                 // Field flags:I
      24: aload_0
      25: areturn

  public zipkin2.Span$Builder shared(boolean);
    Code:
       0: aload_0
       1: dup
       2: getfield      #70                 // Field flags:I
       5: bipush        16
       7: ior
       8: putfield      #70                 // Field flags:I
      11: iload_1
      12: ifeq          29
      15: aload_0
      16: dup
      17: getfield      #70                 // Field flags:I
      20: bipush        8
      22: ior
      23: putfield      #70                 // Field flags:I
      26: goto          40
      29: aload_0
      30: dup
      31: getfield      #70                 // Field flags:I
      34: bipush        -9
      36: iand
      37: putfield      #70                 // Field flags:I
      40: aload_0
      41: areturn

  public zipkin2.Span$Builder shared(java.lang.Boolean);
    Code:
       0: aload_1
       1: ifnull        13
       4: aload_0
       5: aload_1
       6: invokevirtual #280                // Method java/lang/Boolean.booleanValue:()Z
       9: invokevirtual #286                // Method shared:(Z)Lzipkin2/Span$Builder;
      12: areturn
      13: aload_0
      14: dup
      15: getfield      #70                 // Field flags:I
      18: bipush        -25
      20: iand
      21: putfield      #70                 // Field flags:I
      24: aload_0
      25: areturn

  public zipkin2.Span build();
    Code:
       0: ldc_w         #289                // String
       3: astore_1
       4: aload_0
       5: getfield      #40                 // Field traceId:Ljava/lang/String;
       8: ifnonnull     32
      11: new           #252                // class java/lang/StringBuilder
      14: dup
      15: invokespecial #253                // Method java/lang/StringBuilder."<init>":()V
      18: aload_1
      19: invokevirtual #259                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc_w         #291                // String  traceId
      25: invokevirtual #259                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: invokevirtual #265                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: astore_1
      32: aload_0
      33: getfield      #44                 // Field id:Ljava/lang/String;
      36: ifnonnull     60
      39: new           #252                // class java/lang/StringBuilder
      42: dup
      43: invokespecial #253                // Method java/lang/StringBuilder."<init>":()V
      46: aload_1
      47: invokevirtual #259                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: ldc_w         #293                // String  id
      53: invokevirtual #259                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: invokevirtual #265                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: astore_1
      60: ldc_w         #289                // String
      63: aload_1
      64: invokevirtual #294                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      67: ifne          98
      70: new           #296                // class java/lang/IllegalStateException
      73: dup
      74: new           #252                // class java/lang/StringBuilder
      77: dup
      78: invokespecial #253                // Method java/lang/StringBuilder."<init>":()V
      81: ldc_w         #298                // String Missing :
      84: invokevirtual #259                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: aload_1
      88: invokevirtual #259                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: invokevirtual #265                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      94: invokespecial #299                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      97: athrow
      98: aload_0
      99: getfield      #44                 // Field id:Ljava/lang/String;
     102: aload_0
     103: getfield      #42                 // Field parentId:Ljava/lang/String;
     106: invokevirtual #294                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     109: ifeq          164
     112: ldc           #9                  // class zipkin2/Span
     114: invokevirtual #304                // Method java/lang/Class.getName:()Ljava/lang/String;
     117: invokestatic  #310                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
     120: astore_2
     121: aload_2
     122: getstatic     #316                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
     125: invokevirtual #320                // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
     128: ifeq          159
     131: aload_2
     132: ldc_w         #322                // String undoing circular dependency: traceId=%s, spanId=%s
     135: iconst_2
     136: anewarray     #4                  // class java/lang/Object
     139: dup
     140: iconst_0
     141: aload_0
     142: getfield      #40                 // Field traceId:Ljava/lang/String;
     145: aastore
     146: dup
     147: iconst_1
     148: aload_0
     149: getfield      #44                 // Field id:Ljava/lang/String;
     152: aastore
     153: invokestatic  #326                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     156: invokevirtual #329                // Method java/util/logging/Logger.fine:(Ljava/lang/String;)V
     159: aload_0
     160: aconst_null
     161: putfield      #42                 // Field parentId:Ljava/lang/String;
     164: aload_0
     165: getfield      #70                 // Field flags:I
     168: bipush        8
     170: iand
     171: bipush        8
     173: if_icmpne     239
     176: aload_0
     177: getfield      #46                 // Field kind:Lzipkin2/Span$Kind;
     180: getstatic     #332                // Field zipkin2/Span$Kind.CLIENT:Lzipkin2/Span$Kind;
     183: if_acmpne     239
     186: ldc           #9                  // class zipkin2/Span
     188: invokevirtual #304                // Method java/lang/Class.getName:()Ljava/lang/String;
     191: invokestatic  #310                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
     194: astore_2
     195: aload_2
     196: getstatic     #316                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
     199: invokevirtual #320                // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
     202: ifeq          233
     205: aload_2
     206: ldc_w         #334                // String removing shared flag on client: traceId=%s, spanId=%s
     209: iconst_2
     210: anewarray     #4                  // class java/lang/Object
     213: dup
     214: iconst_0
     215: aload_0
     216: getfield      #40                 // Field traceId:Ljava/lang/String;
     219: aastore
     220: dup
     221: iconst_1
     222: aload_0
     223: getfield      #44                 // Field id:Ljava/lang/String;
     226: aastore
     227: invokestatic  #326                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     230: invokevirtual #329                // Method java/util/logging/Logger.fine:(Ljava/lang/String;)V
     233: aload_0
     234: aconst_null
     235: invokevirtual #336                // Method shared:(Ljava/lang/Boolean;)Lzipkin2/Span$Builder;
     238: pop
     239: new           #9                  // class zipkin2/Span
     242: dup
     243: aload_0
     244: invokespecial #339                // Method zipkin2/Span."<init>":(Lzipkin2/Span$Builder;)V
     247: areturn

  zipkin2.Span$Builder();
    Code:
       0: aload_0
       1: invokespecial #83                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #70                 // Field flags:I
       9: return

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #346                // Method clone:()Lzipkin2/Span$Builder;
       4: areturn
}
