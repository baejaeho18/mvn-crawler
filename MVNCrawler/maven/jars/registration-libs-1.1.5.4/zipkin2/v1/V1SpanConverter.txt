Compiled from "V1SpanConverter.java"
public final class zipkin2.v1.V1SpanConverter {
  final zipkin2.Span$Builder first;

  final java.util.List<zipkin2.Span$Builder> spans;

  zipkin2.v1.V1Annotation cs;

  zipkin2.v1.V1Annotation sr;

  zipkin2.v1.V1Annotation ss;

  zipkin2.v1.V1Annotation cr;

  zipkin2.v1.V1Annotation ms;

  zipkin2.v1.V1Annotation mr;

  zipkin2.v1.V1Annotation ws;

  zipkin2.v1.V1Annotation wr;

  public static zipkin2.v1.V1SpanConverter create();
    Code:
       0: new           #2                  // class zipkin2/v1/V1SpanConverter
       3: dup
       4: invokespecial #37                 // Method "<init>":()V
       7: areturn

  public java.util.List<zipkin2.Span> convert(zipkin2.v1.V1Span);
    Code:
       0: new           #42                 // class java/util/ArrayList
       3: dup
       4: invokespecial #43                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokevirtual #46                 // Method convert:(Lzipkin2/v1/V1Span;Ljava/util/Collection;)V
      14: aload_2
      15: areturn

  public void convert(zipkin2.v1.V1Span, java.util.Collection<zipkin2.Span>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #57                 // Method start:(Lzipkin2/v1/V1Span;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #60                 // Method processAnnotations:(Lzipkin2/v1/V1Span;)V
      10: aload_0
      11: aload_1
      12: invokevirtual #63                 // Method processBinaryAnnotations:(Lzipkin2/v1/V1Span;)V
      15: aload_0
      16: aload_2
      17: invokevirtual #67                 // Method finish:(Ljava/util/Collection;)V
      20: return

  void start(zipkin2.v1.V1Span);
    Code:
       0: aload_0
       1: getfield      #72                 // Field first:Lzipkin2/Span$Builder;
       4: invokevirtual #76                 // Method zipkin2/Span$Builder.clear:()Lzipkin2/Span$Builder;
       7: pop
       8: aload_0
       9: getfield      #78                 // Field spans:Ljava/util/List;
      12: invokeinterface #82,  1           // InterfaceMethod java/util/List.clear:()V
      17: aload_0
      18: aload_0
      19: aload_0
      20: aload_0
      21: aload_0
      22: aload_0
      23: aload_0
      24: aload_0
      25: aconst_null
      26: dup_x1
      27: putfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
      30: dup_x1
      31: putfield      #86                 // Field ws:Lzipkin2/v1/V1Annotation;
      34: dup_x1
      35: putfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
      38: dup_x1
      39: putfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
      42: dup_x1
      43: putfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
      46: dup_x1
      47: putfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
      50: dup_x1
      51: putfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
      54: putfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
      57: aload_0
      58: getfield      #72                 // Field first:Lzipkin2/Span$Builder;
      61: aload_1
      62: invokestatic  #102                // Method newBuilder:(Lzipkin2/Span$Builder;Lzipkin2/v1/V1Span;)Lzipkin2/Span$Builder;
      65: pop
      66: return

  void processAnnotations(zipkin2.v1.V1Span);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: getfield      #107                // Field zipkin2/v1/V1Span.annotations:Ljava/util/List;
       6: invokeinterface #111,  1          // InterfaceMethod java/util/List.size:()I
      11: istore_3
      12: iload_2
      13: iload_3
      14: if_icmpge     335
      17: aload_1
      18: getfield      #107                // Field zipkin2/v1/V1Span.annotations:Ljava/util/List;
      21: iload_2
      22: invokeinterface #115,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      27: checkcast     #117                // class zipkin2/v1/V1Annotation
      30: astore        4
      32: aload_0
      33: aload_1
      34: aload         4
      36: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
      39: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
      42: astore        5
      44: aload         4
      46: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
      49: invokevirtual #134                // Method java/lang/String.length:()I
      52: iconst_2
      53: if_icmpne     313
      56: aload         4
      58: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
      61: ifnull        313
      64: aload         4
      66: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
      69: ldc           #135                // String cs
      71: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      74: ifeq          95
      77: aload         5
      79: getstatic     #143                // Field zipkin2/Span$Kind.CLIENT:Lzipkin2/Span$Kind;
      82: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
      85: pop
      86: aload_0
      87: aload         4
      89: putfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
      92: goto          329
      95: aload         4
      97: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     100: ldc           #148                // String sr
     102: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     105: ifeq          126
     108: aload         5
     110: getstatic     #151                // Field zipkin2/Span$Kind.SERVER:Lzipkin2/Span$Kind;
     113: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     116: pop
     117: aload_0
     118: aload         4
     120: putfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     123: goto          329
     126: aload         4
     128: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     131: ldc           #152                // String ss
     133: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     136: ifeq          157
     139: aload         5
     141: getstatic     #151                // Field zipkin2/Span$Kind.SERVER:Lzipkin2/Span$Kind;
     144: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     147: pop
     148: aload_0
     149: aload         4
     151: putfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     154: goto          329
     157: aload         4
     159: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     162: ldc           #153                // String cr
     164: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     167: ifeq          188
     170: aload         5
     172: getstatic     #143                // Field zipkin2/Span$Kind.CLIENT:Lzipkin2/Span$Kind;
     175: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     178: pop
     179: aload_0
     180: aload         4
     182: putfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     185: goto          329
     188: aload         4
     190: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     193: ldc           #154                // String ms
     195: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     198: ifeq          219
     201: aload         5
     203: getstatic     #157                // Field zipkin2/Span$Kind.PRODUCER:Lzipkin2/Span$Kind;
     206: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     209: pop
     210: aload_0
     211: aload         4
     213: putfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     216: goto          329
     219: aload         4
     221: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     224: ldc           #158                // String mr
     226: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     229: ifeq          250
     232: aload         5
     234: getstatic     #161                // Field zipkin2/Span$Kind.CONSUMER:Lzipkin2/Span$Kind;
     237: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     240: pop
     241: aload_0
     242: aload         4
     244: putfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     247: goto          329
     250: aload         4
     252: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     255: ldc           #162                // String ws
     257: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     260: ifeq          272
     263: aload_0
     264: aload         4
     266: putfield      #86                 // Field ws:Lzipkin2/v1/V1Annotation;
     269: goto          329
     272: aload         4
     274: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     277: ldc           #163                // String wr
     279: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     282: ifeq          294
     285: aload_0
     286: aload         4
     288: putfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
     291: goto          329
     294: aload         5
     296: aload         4
     298: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     301: aload         4
     303: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     306: invokevirtual #171                // Method zipkin2/Span$Builder.addAnnotation:(JLjava/lang/String;)Lzipkin2/Span$Builder;
     309: pop
     310: goto          329
     313: aload         5
     315: aload         4
     317: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     320: aload         4
     322: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     325: invokevirtual #171                // Method zipkin2/Span$Builder.addAnnotation:(JLjava/lang/String;)Lzipkin2/Span$Builder;
     328: pop
     329: iinc          2, 1
     332: goto          12
     335: aload_0
     336: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     339: ifnonnull     373
     342: aload_0
     343: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     346: aload_1
     347: invokestatic  #175                // Method endTimestampReflectsSpanDuration:(Lzipkin2/v1/V1Annotation;Lzipkin2/v1/V1Span;)Z
     350: ifeq          373
     353: aload_0
     354: aload_1
     355: getfield      #176                // Field zipkin2/v1/V1Span.timestamp:J
     358: ldc           #135                // String cs
     360: aload_0
     361: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     364: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     367: invokestatic  #179                // Method zipkin2/v1/V1Annotation.create:(JLjava/lang/String;Lzipkin2/Endpoint;)Lzipkin2/v1/V1Annotation;
     370: putfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     373: aload_0
     374: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     377: ifnonnull     411
     380: aload_0
     381: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     384: aload_1
     385: invokestatic  #175                // Method endTimestampReflectsSpanDuration:(Lzipkin2/v1/V1Annotation;Lzipkin2/v1/V1Span;)Z
     388: ifeq          411
     391: aload_0
     392: aload_1
     393: getfield      #176                // Field zipkin2/v1/V1Span.timestamp:J
     396: ldc           #148                // String sr
     398: aload_0
     399: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     402: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     405: invokestatic  #179                // Method zipkin2/v1/V1Annotation.create:(JLjava/lang/String;Lzipkin2/Endpoint;)Lzipkin2/v1/V1Annotation;
     408: putfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     411: aload_0
     412: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     415: ifnull        582
     418: aload_0
     419: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     422: ifnull        582
     425: aload_0
     426: aload_1
     427: aload_0
     428: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     431: aload_0
     432: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     435: invokevirtual #183                // Method maybeTimestampDuration:(Lzipkin2/v1/V1Span;Lzipkin2/v1/V1Annotation;Lzipkin2/v1/V1Annotation;)V
     438: aload_0
     439: aload_1
     440: aload_0
     441: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     444: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     447: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     450: astore_2
     451: aload_0
     452: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     455: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     458: aload_0
     459: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     462: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     465: invokestatic  #187                // Method hasSameServiceName:(Lzipkin2/Endpoint;Lzipkin2/Endpoint;)Z
     468: ifeq          501
     471: aload_2
     472: getstatic     #143                // Field zipkin2/Span$Kind.CLIENT:Lzipkin2/Span$Kind;
     475: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     478: pop
     479: aload_0
     480: aload_1
     481: aload_0
     482: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     485: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     488: invokevirtual #190                // Method newSpanBuilder:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     491: getstatic     #151                // Field zipkin2/Span$Kind.SERVER:Lzipkin2/Span$Kind;
     494: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     497: astore_3
     498: goto          514
     501: aload_0
     502: aload_1
     503: aload_0
     504: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     507: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     510: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     513: astore_3
     514: aload_3
     515: iconst_1
     516: invokevirtual #194                // Method zipkin2/Span$Builder.shared:(Z)Lzipkin2/Span$Builder;
     519: aload_0
     520: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     523: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     526: invokevirtual #197                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
     529: pop
     530: aload_0
     531: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     534: ifnull        557
     537: aload_3
     538: aload_0
     539: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     542: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     545: aload_0
     546: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     549: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     552: lsub
     553: invokevirtual #200                // Method zipkin2/Span$Builder.duration:(J)Lzipkin2/Span$Builder;
     556: pop
     557: aload_0
     558: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     561: ifnonnull     579
     564: aload_1
     565: getfield      #202                // Field zipkin2/v1/V1Span.duration:J
     568: lconst_0
     569: lcmp
     570: ifne          579
     573: aload_2
     574: aconst_null
     575: invokevirtual #205                // Method zipkin2/Span$Builder.duration:(Ljava/lang/Long;)Lzipkin2/Span$Builder;
     578: pop
     579: goto          647
     582: aload_0
     583: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     586: ifnull        612
     589: aload_0
     590: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     593: ifnull        612
     596: aload_0
     597: aload_1
     598: aload_0
     599: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     602: aload_0
     603: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     606: invokevirtual #183                // Method maybeTimestampDuration:(Lzipkin2/v1/V1Span;Lzipkin2/v1/V1Annotation;Lzipkin2/v1/V1Annotation;)V
     609: goto          647
     612: aload_0
     613: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     616: ifnull        642
     619: aload_0
     620: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     623: ifnull        642
     626: aload_0
     627: aload_1
     628: aload_0
     629: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     632: aload_0
     633: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     636: invokevirtual #183                // Method maybeTimestampDuration:(Lzipkin2/v1/V1Span;Lzipkin2/v1/V1Annotation;Lzipkin2/v1/V1Annotation;)V
     639: goto          647
     642: aload_0
     643: aload_1
     644: invokevirtual #208                // Method handleIncompleteRpc:(Lzipkin2/v1/V1Span;)V
     647: aload_0
     648: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     651: ifnonnull     703
     654: aload_0
     655: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     658: ifnull        703
     661: aload_1
     662: getfield      #176                // Field zipkin2/v1/V1Span.timestamp:J
     665: lconst_0
     666: lcmp
     667: ifeq          686
     670: aload_0
     671: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     674: ifnull        703
     677: aload_1
     678: getfield      #202                // Field zipkin2/v1/V1Span.duration:J
     681: lconst_0
     682: lcmp
     683: ifne          703
     686: aload_0
     687: aload_1
     688: aload_0
     689: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     692: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     695: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     698: iconst_1
     699: invokevirtual #194                // Method zipkin2/Span$Builder.shared:(Z)Lzipkin2/Span$Builder;
     702: pop
     703: aload_0
     704: getfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     707: ifnull        898
     710: aload_0
     711: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     714: ifnull        898
     717: aload_0
     718: aload_1
     719: aload_0
     720: getfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     723: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     726: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     729: astore_2
     730: aload_0
     731: getfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     734: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     737: aload_0
     738: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     741: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     744: invokestatic  #187                // Method hasSameServiceName:(Lzipkin2/Endpoint;Lzipkin2/Endpoint;)Z
     747: ifeq          780
     750: aload_2
     751: getstatic     #157                // Field zipkin2/Span$Kind.PRODUCER:Lzipkin2/Span$Kind;
     754: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     757: pop
     758: aload_0
     759: aload_1
     760: aload_0
     761: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     764: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     767: invokevirtual #190                // Method newSpanBuilder:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     770: getstatic     #161                // Field zipkin2/Span$Kind.CONSUMER:Lzipkin2/Span$Kind;
     773: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     776: astore_3
     777: goto          793
     780: aload_0
     781: aload_1
     782: aload_0
     783: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     786: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     789: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     792: astore_3
     793: aload_3
     794: iconst_1
     795: invokevirtual #194                // Method zipkin2/Span$Builder.shared:(Z)Lzipkin2/Span$Builder;
     798: pop
     799: aload_0
     800: getfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
     803: ifnull        839
     806: aload_3
     807: aload_0
     808: getfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
     811: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     814: invokevirtual #197                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
     817: aload_0
     818: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     821: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     824: aload_0
     825: getfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
     828: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     831: lsub
     832: invokevirtual #200                // Method zipkin2/Span$Builder.duration:(J)Lzipkin2/Span$Builder;
     835: pop
     836: goto          851
     839: aload_3
     840: aload_0
     841: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     844: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     847: invokevirtual #197                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
     850: pop
     851: aload_2
     852: aload_0
     853: getfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     856: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     859: invokevirtual #197                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
     862: aload_0
     863: getfield      #86                 // Field ws:Lzipkin2/v1/V1Annotation;
     866: ifnull        890
     869: aload_0
     870: getfield      #86                 // Field ws:Lzipkin2/v1/V1Annotation;
     873: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     876: aload_0
     877: getfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     880: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     883: lsub
     884: invokestatic  #214                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     887: goto          891
     890: aconst_null
     891: invokevirtual #205                // Method zipkin2/Span$Builder.duration:(Ljava/lang/Long;)Lzipkin2/Span$Builder;
     894: pop
     895: goto          1038
     898: aload_0
     899: getfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     902: ifnull        921
     905: aload_0
     906: aload_1
     907: aload_0
     908: getfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     911: aload_0
     912: getfield      #86                 // Field ws:Lzipkin2/v1/V1Annotation;
     915: invokevirtual #183                // Method maybeTimestampDuration:(Lzipkin2/v1/V1Span;Lzipkin2/v1/V1Annotation;Lzipkin2/v1/V1Annotation;)V
     918: goto          1038
     921: aload_0
     922: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     925: ifnull        964
     928: aload_0
     929: getfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
     932: ifnull        951
     935: aload_0
     936: aload_1
     937: aload_0
     938: getfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
     941: aload_0
     942: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     945: invokevirtual #183                // Method maybeTimestampDuration:(Lzipkin2/v1/V1Span;Lzipkin2/v1/V1Annotation;Lzipkin2/v1/V1Annotation;)V
     948: goto          1038
     951: aload_0
     952: aload_1
     953: aload_0
     954: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     957: aconst_null
     958: invokevirtual #183                // Method maybeTimestampDuration:(Lzipkin2/v1/V1Span;Lzipkin2/v1/V1Annotation;Lzipkin2/v1/V1Annotation;)V
     961: goto          1038
     964: aload_0
     965: getfield      #86                 // Field ws:Lzipkin2/v1/V1Annotation;
     968: ifnull        1001
     971: aload_0
     972: aload_1
     973: aload_0
     974: getfield      #86                 // Field ws:Lzipkin2/v1/V1Annotation;
     977: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     980: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     983: aload_0
     984: getfield      #86                 // Field ws:Lzipkin2/v1/V1Annotation;
     987: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     990: aload_0
     991: getfield      #86                 // Field ws:Lzipkin2/v1/V1Annotation;
     994: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     997: invokevirtual #171                // Method zipkin2/Span$Builder.addAnnotation:(JLjava/lang/String;)Lzipkin2/Span$Builder;
    1000: pop
    1001: aload_0
    1002: getfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
    1005: ifnull        1038
    1008: aload_0
    1009: aload_1
    1010: aload_0
    1011: getfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
    1014: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
    1017: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
    1020: aload_0
    1021: getfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
    1024: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
    1027: aload_0
    1028: getfield      #84                 // Field wr:Lzipkin2/v1/V1Annotation;
    1031: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
    1034: invokevirtual #171                // Method zipkin2/Span$Builder.addAnnotation:(JLjava/lang/String;)Lzipkin2/Span$Builder;
    1037: pop
    1038: return

  void handleIncompleteRpc(zipkin2.v1.V1Span);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #72                 // Field first:Lzipkin2/Span$Builder;
       5: invokevirtual #225                // Method handleIncompleteRpc:(Lzipkin2/Span$Builder;)V
       8: iconst_0
       9: istore_2
      10: aload_0
      11: getfield      #78                 // Field spans:Ljava/util/List;
      14: invokeinterface #111,  1          // InterfaceMethod java/util/List.size:()I
      19: istore_3
      20: iload_2
      21: iload_3
      22: if_icmpge     48
      25: aload_0
      26: aload_0
      27: getfield      #78                 // Field spans:Ljava/util/List;
      30: iload_2
      31: invokeinterface #115,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      36: checkcast     #7                  // class zipkin2/Span$Builder
      39: invokevirtual #225                // Method handleIncompleteRpc:(Lzipkin2/Span$Builder;)V
      42: iinc          2, 1
      45: goto          20
      48: aload_1
      49: getfield      #176                // Field zipkin2/v1/V1Span.timestamp:J
      52: lconst_0
      53: lcmp
      54: ifeq          76
      57: aload_0
      58: getfield      #72                 // Field first:Lzipkin2/Span$Builder;
      61: aload_1
      62: getfield      #176                // Field zipkin2/v1/V1Span.timestamp:J
      65: invokevirtual #197                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
      68: aload_1
      69: getfield      #202                // Field zipkin2/v1/V1Span.duration:J
      72: invokevirtual #200                // Method zipkin2/Span$Builder.duration:(J)Lzipkin2/Span$Builder;
      75: pop
      76: return

  void handleIncompleteRpc(zipkin2.Span$Builder);
    Code:
       0: getstatic     #143                // Field zipkin2/Span$Kind.CLIENT:Lzipkin2/Span$Kind;
       3: aload_1
       4: invokevirtual #228                // Method zipkin2/Span$Builder.kind:()Lzipkin2/Span$Kind;
       7: invokevirtual #229                // Method zipkin2/Span$Kind.equals:(Ljava/lang/Object;)Z
      10: ifeq          61
      13: aload_0
      14: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
      17: ifnull        32
      20: aload_1
      21: aload_0
      22: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
      25: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
      28: invokevirtual #197                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
      31: pop
      32: aload_0
      33: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
      36: ifnull        119
      39: aload_1
      40: aload_0
      41: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
      44: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
      47: aload_0
      48: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
      51: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
      54: invokevirtual #171                // Method zipkin2/Span$Builder.addAnnotation:(JLjava/lang/String;)Lzipkin2/Span$Builder;
      57: pop
      58: goto          119
      61: getstatic     #151                // Field zipkin2/Span$Kind.SERVER:Lzipkin2/Span$Kind;
      64: aload_1
      65: invokevirtual #228                // Method zipkin2/Span$Builder.kind:()Lzipkin2/Span$Kind;
      68: invokevirtual #229                // Method zipkin2/Span$Kind.equals:(Ljava/lang/Object;)Z
      71: ifeq          119
      74: aload_0
      75: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
      78: ifnull        93
      81: aload_1
      82: aload_0
      83: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
      86: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
      89: invokevirtual #197                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
      92: pop
      93: aload_0
      94: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
      97: ifnull        119
     100: aload_1
     101: aload_0
     102: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     105: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
     108: aload_0
     109: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     112: getfield      #129                // Field zipkin2/v1/V1Annotation.value:Ljava/lang/String;
     115: invokevirtual #171                // Method zipkin2/Span$Builder.addAnnotation:(JLjava/lang/String;)Lzipkin2/Span$Builder;
     118: pop
     119: return

  static boolean endTimestampReflectsSpanDuration(zipkin2.v1.V1Annotation, zipkin2.v1.V1Span);
    Code:
       0: aload_0
       1: ifnull        43
       4: aload_1
       5: getfield      #176                // Field zipkin2/v1/V1Span.timestamp:J
       8: lconst_0
       9: lcmp
      10: ifeq          43
      13: aload_1
      14: getfield      #202                // Field zipkin2/v1/V1Span.duration:J
      17: lconst_0
      18: lcmp
      19: ifeq          43
      22: aload_1
      23: getfield      #176                // Field zipkin2/v1/V1Span.timestamp:J
      26: aload_1
      27: getfield      #202                // Field zipkin2/v1/V1Span.duration:J
      30: ladd
      31: aload_0
      32: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
      35: lcmp
      36: ifne          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ireturn

  void maybeTimestampDuration(zipkin2.v1.V1Span, zipkin2.v1.V1Annotation, zipkin2.v1.V1Annotation);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
       6: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
       9: astore        4
      11: aload_1
      12: getfield      #176                // Field zipkin2/v1/V1Span.timestamp:J
      15: lconst_0
      16: lcmp
      17: ifeq          49
      20: aload_1
      21: getfield      #202                // Field zipkin2/v1/V1Span.duration:J
      24: lconst_0
      25: lcmp
      26: ifeq          49
      29: aload         4
      31: aload_1
      32: getfield      #176                // Field zipkin2/v1/V1Span.timestamp:J
      35: invokevirtual #197                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
      38: aload_1
      39: getfield      #202                // Field zipkin2/v1/V1Span.duration:J
      42: invokevirtual #200                // Method zipkin2/Span$Builder.duration:(J)Lzipkin2/Span$Builder;
      45: pop
      46: goto          78
      49: aload         4
      51: aload_2
      52: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
      55: invokevirtual #197                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
      58: pop
      59: aload_3
      60: ifnull        78
      63: aload         4
      65: aload_3
      66: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
      69: aload_2
      70: getfield      #167                // Field zipkin2/v1/V1Annotation.timestamp:J
      73: lsub
      74: invokevirtual #200                // Method zipkin2/Span$Builder.duration:(J)Lzipkin2/Span$Builder;
      77: pop
      78: return

  void processBinaryAnnotations(zipkin2.v1.V1Span);
    Code:
       0: aconst_null
       1: astore_2
       2: aconst_null
       3: astore_3
       4: aconst_null
       5: astore        4
       7: iconst_0
       8: istore        5
      10: aload_1
      11: getfield      #237                // Field zipkin2/v1/V1Span.binaryAnnotations:Ljava/util/List;
      14: invokeinterface #111,  1          // InterfaceMethod java/util/List.size:()I
      19: istore        6
      21: iload         5
      23: iload         6
      25: if_icmpge     180
      28: aload_1
      29: getfield      #237                // Field zipkin2/v1/V1Span.binaryAnnotations:Ljava/util/List;
      32: iload         5
      34: invokeinterface #115,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      39: checkcast     #239                // class zipkin2/v1/V1BinaryAnnotation
      42: astore        7
      44: aload         7
      46: getfield      #242                // Field zipkin2/v1/V1BinaryAnnotation.stringValue:Ljava/lang/String;
      49: ifnonnull     119
      52: ldc           #244                // String ca
      54: aload         7
      56: getfield      #247                // Field zipkin2/v1/V1BinaryAnnotation.key:Ljava/lang/String;
      59: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      62: ifeq          74
      65: aload         7
      67: getfield      #248                // Field zipkin2/v1/V1BinaryAnnotation.endpoint:Lzipkin2/Endpoint;
      70: astore_2
      71: goto          174
      74: ldc           #250                // String sa
      76: aload         7
      78: getfield      #247                // Field zipkin2/v1/V1BinaryAnnotation.key:Ljava/lang/String;
      81: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      84: ifeq          96
      87: aload         7
      89: getfield      #248                // Field zipkin2/v1/V1BinaryAnnotation.endpoint:Lzipkin2/Endpoint;
      92: astore_3
      93: goto          174
      96: ldc           #252                // String ma
      98: aload         7
     100: getfield      #247                // Field zipkin2/v1/V1BinaryAnnotation.key:Ljava/lang/String;
     103: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     106: ifeq          174
     109: aload         7
     111: getfield      #248                // Field zipkin2/v1/V1BinaryAnnotation.endpoint:Lzipkin2/Endpoint;
     114: astore        4
     116: goto          174
     119: aload_0
     120: aload_1
     121: aload         7
     123: getfield      #248                // Field zipkin2/v1/V1BinaryAnnotation.endpoint:Lzipkin2/Endpoint;
     126: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     129: astore        8
     131: ldc           #254                // String lc
     133: aload         7
     135: getfield      #247                // Field zipkin2/v1/V1BinaryAnnotation.key:Ljava/lang/String;
     138: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     141: ifeq          158
     144: aload         7
     146: getfield      #242                // Field zipkin2/v1/V1BinaryAnnotation.stringValue:Ljava/lang/String;
     149: invokevirtual #258                // Method java/lang/String.isEmpty:()Z
     152: ifeq          158
     155: goto          174
     158: aload         8
     160: aload         7
     162: getfield      #247                // Field zipkin2/v1/V1BinaryAnnotation.key:Ljava/lang/String;
     165: aload         7
     167: getfield      #242                // Field zipkin2/v1/V1BinaryAnnotation.stringValue:Ljava/lang/String;
     170: invokevirtual #262                // Method zipkin2/Span$Builder.putTag:(Ljava/lang/String;Ljava/lang/String;)Lzipkin2/Span$Builder;
     173: pop
     174: iinc          5, 1
     177: goto          21
     180: aload_0
     181: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     184: ifnonnull     212
     187: aload_0
     188: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     191: ifnonnull     212
     194: aload_0
     195: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     198: ifnonnull     212
     201: aload_0
     202: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     205: ifnonnull     212
     208: iconst_1
     209: goto          213
     212: iconst_0
     213: istore        5
     215: iload         5
     217: ifeq          286
     220: aload_2
     221: ifnonnull     228
     224: aload_3
     225: ifnull        286
     228: aload_2
     229: ifnull        250
     232: aload_3
     233: ifnull        250
     236: aload_0
     237: aload_1
     238: aload_2
     239: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     242: aload_3
     243: invokevirtual #266                // Method zipkin2/Span$Builder.remoteEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     246: pop
     247: goto          285
     250: aload_3
     251: ifnull        268
     254: aload_0
     255: aload_1
     256: aconst_null
     257: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     260: aload_3
     261: invokevirtual #266                // Method zipkin2/Span$Builder.remoteEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     264: pop
     265: goto          285
     268: aload_0
     269: aload_1
     270: aconst_null
     271: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     274: getstatic     #151                // Field zipkin2/Span$Kind.SERVER:Lzipkin2/Span$Kind;
     277: invokevirtual #147                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
     280: aload_2
     281: invokevirtual #266                // Method zipkin2/Span$Builder.remoteEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     284: pop
     285: return
     286: aload_0
     287: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     290: ifnull        300
     293: aload_0
     294: getfield      #96                 // Field sr:Lzipkin2/v1/V1Annotation;
     297: goto          304
     300: aload_0
     301: getfield      #94                 // Field ss:Lzipkin2/v1/V1Annotation;
     304: astore        6
     306: aload_2
     307: ifnull        366
     310: aload         6
     312: ifnull        366
     315: aload_2
     316: aload         6
     318: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     321: invokevirtual #267                // Method zipkin2/Endpoint.equals:(Ljava/lang/Object;)Z
     324: ifne          366
     327: aload_2
     328: aload         6
     330: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     333: invokestatic  #187                // Method hasSameServiceName:(Lzipkin2/Endpoint;Lzipkin2/Endpoint;)Z
     336: ifeq          351
     339: aload_2
     340: invokevirtual #271                // Method zipkin2/Endpoint.toBuilder:()Lzipkin2/Endpoint$Builder;
     343: aconst_null
     344: invokevirtual #275                // Method zipkin2/Endpoint$Builder.serviceName:(Ljava/lang/String;)Lzipkin2/Endpoint$Builder;
     347: invokevirtual #279                // Method zipkin2/Endpoint$Builder.build:()Lzipkin2/Endpoint;
     350: astore_2
     351: aload_0
     352: aload_1
     353: aload         6
     355: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     358: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     361: aload_2
     362: invokevirtual #266                // Method zipkin2/Span$Builder.remoteEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     365: pop
     366: aload_3
     367: ifnull        421
     370: aload_0
     371: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     374: ifnull        397
     377: aload_0
     378: aload_1
     379: aload_0
     380: getfield      #98                 // Field cs:Lzipkin2/v1/V1Annotation;
     383: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     386: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     389: aload_3
     390: invokevirtual #266                // Method zipkin2/Span$Builder.remoteEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     393: pop
     394: goto          421
     397: aload_0
     398: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     401: ifnull        421
     404: aload_0
     405: aload_1
     406: aload_0
     407: getfield      #92                 // Field cr:Lzipkin2/v1/V1Annotation;
     410: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     413: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     416: aload_3
     417: invokevirtual #266                // Method zipkin2/Span$Builder.remoteEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     420: pop
     421: aload         4
     423: ifnull        476
     426: aload_0
     427: getfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     430: ifnull        451
     433: aload_0
     434: aload_1
     435: aload_0
     436: getfield      #90                 // Field ms:Lzipkin2/v1/V1Annotation;
     439: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     442: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     445: aload         4
     447: invokevirtual #266                // Method zipkin2/Span$Builder.remoteEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     450: pop
     451: aload_0
     452: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     455: ifnull        476
     458: aload_0
     459: aload_1
     460: aload_0
     461: getfield      #88                 // Field mr:Lzipkin2/v1/V1Annotation;
     464: getfield      #121                // Field zipkin2/v1/V1Annotation.endpoint:Lzipkin2/Endpoint;
     467: invokevirtual #125                // Method forEndpoint:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     470: aload         4
     472: invokevirtual #266                // Method zipkin2/Span$Builder.remoteEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     475: pop
     476: return

  zipkin2.Span$Builder forEndpoint(zipkin2.v1.V1Span, zipkin2.Endpoint);
    Code:
       0: aload_2
       1: ifnonnull     9
       4: aload_0
       5: getfield      #72                 // Field first:Lzipkin2/Span$Builder;
       8: areturn
       9: aload_0
      10: getfield      #72                 // Field first:Lzipkin2/Span$Builder;
      13: aload_2
      14: invokestatic  #287                // Method closeEnoughEndpoint:(Lzipkin2/Span$Builder;Lzipkin2/Endpoint;)Z
      17: ifeq          25
      20: aload_0
      21: getfield      #72                 // Field first:Lzipkin2/Span$Builder;
      24: areturn
      25: iconst_0
      26: istore_3
      27: aload_0
      28: getfield      #78                 // Field spans:Ljava/util/List;
      31: invokeinterface #111,  1          // InterfaceMethod java/util/List.size:()I
      36: istore        4
      38: iload_3
      39: iload         4
      41: if_icmpge     77
      44: aload_0
      45: getfield      #78                 // Field spans:Ljava/util/List;
      48: iload_3
      49: invokeinterface #115,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      54: checkcast     #7                  // class zipkin2/Span$Builder
      57: astore        5
      59: aload         5
      61: aload_2
      62: invokestatic  #287                // Method closeEnoughEndpoint:(Lzipkin2/Span$Builder;Lzipkin2/Endpoint;)Z
      65: ifeq          71
      68: aload         5
      70: areturn
      71: iinc          3, 1
      74: goto          38
      77: aload_0
      78: aload_1
      79: aload_2
      80: invokevirtual #190                // Method newSpanBuilder:(Lzipkin2/v1/V1Span;Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
      83: areturn

  static boolean closeEnoughEndpoint(zipkin2.Span$Builder, zipkin2.Endpoint);
    Code:
       0: aload_0
       1: invokevirtual #291                // Method zipkin2/Span$Builder.localEndpoint:()Lzipkin2/Endpoint;
       4: astore_2
       5: aload_2
       6: ifnonnull     17
       9: aload_0
      10: aload_1
      11: invokevirtual #293                // Method zipkin2/Span$Builder.localEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
      14: pop
      15: iconst_1
      16: ireturn
      17: aload_2
      18: aload_1
      19: invokestatic  #187                // Method hasSameServiceName:(Lzipkin2/Endpoint;Lzipkin2/Endpoint;)Z
      22: ireturn

  zipkin2.Span$Builder newSpanBuilder(zipkin2.v1.V1Span, zipkin2.Endpoint);
    Code:
       0: invokestatic  #296                // Method zipkin2/Span.newBuilder:()Lzipkin2/Span$Builder;
       3: aload_1
       4: invokestatic  #102                // Method newBuilder:(Lzipkin2/Span$Builder;Lzipkin2/v1/V1Span;)Lzipkin2/Span$Builder;
       7: aload_2
       8: invokevirtual #293                // Method zipkin2/Span$Builder.localEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
      11: astore_3
      12: aload_0
      13: getfield      #78                 // Field spans:Ljava/util/List;
      16: aload_3
      17: invokeinterface #299,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      22: pop
      23: aload_3
      24: areturn

  void finish(java.util.Collection<zipkin2.Span>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #72                 // Field first:Lzipkin2/Span$Builder;
       5: invokevirtual #304                // Method zipkin2/Span$Builder.build:()Lzipkin2/Span;
       8: invokeinterface #307,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      13: pop
      14: iconst_0
      15: istore_2
      16: aload_0
      17: getfield      #78                 // Field spans:Ljava/util/List;
      20: invokeinterface #111,  1          // InterfaceMethod java/util/List.size:()I
      25: istore_3
      26: iload_2
      27: iload_3
      28: if_icmpge     60
      31: aload_1
      32: aload_0
      33: getfield      #78                 // Field spans:Ljava/util/List;
      36: iload_2
      37: invokeinterface #115,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      42: checkcast     #7                  // class zipkin2/Span$Builder
      45: invokevirtual #304                // Method zipkin2/Span$Builder.build:()Lzipkin2/Span;
      48: invokeinterface #307,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      53: pop
      54: iinc          2, 1
      57: goto          26
      60: return

  static boolean hasSameServiceName(zipkin2.Endpoint, zipkin2.Endpoint);
    Code:
       0: aload_0
       1: invokevirtual #310                // Method zipkin2/Endpoint.serviceName:()Ljava/lang/String;
       4: aload_1
       5: invokevirtual #310                // Method zipkin2/Endpoint.serviceName:()Ljava/lang/String;
       8: invokestatic  #314                // Method equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      11: ireturn

  static boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     17
       5: aload_0
       6: ifnull        21
       9: aload_0
      10: aload_1
      11: invokevirtual #317                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  static zipkin2.Span$Builder newBuilder(zipkin2.Span$Builder, zipkin2.v1.V1Span);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #321                // Field zipkin2/v1/V1Span.traceIdHigh:J
       5: aload_1
       6: getfield      #324                // Field zipkin2/v1/V1Span.traceId:J
       9: invokevirtual #327                // Method zipkin2/Span$Builder.traceId:(JJ)Lzipkin2/Span$Builder;
      12: aload_1
      13: getfield      #330                // Field zipkin2/v1/V1Span.parentId:J
      16: invokevirtual #332                // Method zipkin2/Span$Builder.parentId:(J)Lzipkin2/Span$Builder;
      19: aload_1
      20: getfield      #335                // Field zipkin2/v1/V1Span.id:J
      23: invokevirtual #337                // Method zipkin2/Span$Builder.id:(J)Lzipkin2/Span$Builder;
      26: aload_1
      27: getfield      #340                // Field zipkin2/v1/V1Span.name:Ljava/lang/String;
      30: invokevirtual #343                // Method zipkin2/Span$Builder.name:(Ljava/lang/String;)Lzipkin2/Span$Builder;
      33: aload_1
      34: getfield      #347                // Field zipkin2/v1/V1Span.debug:Ljava/lang/Boolean;
      37: invokevirtual #350                // Method zipkin2/Span$Builder.debug:(Ljava/lang/Boolean;)Lzipkin2/Span$Builder;
      40: areturn

  zipkin2.v1.V1SpanConverter();
    Code:
       0: aload_0
       1: invokespecial #351                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #296                // Method zipkin2/Span.newBuilder:()Lzipkin2/Span$Builder;
       8: putfield      #72                 // Field first:Lzipkin2/Span$Builder;
      11: aload_0
      12: new           #42                 // class java/util/ArrayList
      15: dup
      16: invokespecial #43                 // Method java/util/ArrayList."<init>":()V
      19: putfield      #78                 // Field spans:Ljava/util/List;
      22: return
}
