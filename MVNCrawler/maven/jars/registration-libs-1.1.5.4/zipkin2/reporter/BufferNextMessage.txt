Compiled from "BufferNextMessage.java"
abstract class zipkin2.reporter.BufferNextMessage<S> implements zipkin2.reporter.SpanWithSizeConsumer<S> {
  final int maxBytes;

  final long timeoutNanos;

  final java.util.ArrayList<S> spans;

  final java.util.ArrayList<java.lang.Integer> sizes;

  long deadlineNanoTime;

  int messageSizeInBytes;

  boolean bufferFull;

  static <S> zipkin2.reporter.BufferNextMessage<S> create(zipkin2.codec.Encoding, int, long);
    Code:
       0: getstatic     #39                 // Field zipkin2/reporter/BufferNextMessage$1.$SwitchMap$zipkin2$codec$Encoding:[I
       3: aload_0
       4: invokevirtual #45                 // Method zipkin2/codec/Encoding.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 3
                     1: 36
                     2: 46
                     3: 56
               default: 66
          }
      36: new           #18                 // class zipkin2/reporter/BufferNextMessage$BufferNextJsonMessage
      39: dup
      40: iload_1
      41: lload_2
      42: invokespecial #49                 // Method zipkin2/reporter/BufferNextMessage$BufferNextJsonMessage."<init>":(IJ)V
      45: areturn
      46: new           #15                 // class zipkin2/reporter/BufferNextMessage$BufferNextThriftMessage
      49: dup
      50: iload_1
      51: lload_2
      52: invokespecial #50                 // Method zipkin2/reporter/BufferNextMessage$BufferNextThriftMessage."<init>":(IJ)V
      55: areturn
      56: new           #12                 // class zipkin2/reporter/BufferNextMessage$BufferNextProto3Message
      59: dup
      60: iload_1
      61: lload_2
      62: invokespecial #51                 // Method zipkin2/reporter/BufferNextMessage$BufferNextProto3Message."<init>":(IJ)V
      65: areturn
      66: new           #53                 // class java/lang/UnsupportedOperationException
      69: dup
      70: new           #55                 // class java/lang/StringBuilder
      73: dup
      74: invokespecial #58                 // Method java/lang/StringBuilder."<init>":()V
      77: ldc           #60                 // String encoding:
      79: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: aload_0
      83: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      86: invokevirtual #71                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      89: invokespecial #74                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      92: athrow

  zipkin2.reporter.BufferNextMessage(int, long);
    Code:
       0: aload_0
       1: invokespecial #77                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #79                 // class java/util/ArrayList
       8: dup
       9: invokespecial #80                 // Method java/util/ArrayList."<init>":()V
      12: putfield      #82                 // Field spans:Ljava/util/ArrayList;
      15: aload_0
      16: new           #79                 // class java/util/ArrayList
      19: dup
      20: invokespecial #80                 // Method java/util/ArrayList."<init>":()V
      23: putfield      #84                 // Field sizes:Ljava/util/ArrayList;
      26: aload_0
      27: iload_1
      28: putfield      #86                 // Field maxBytes:I
      31: aload_0
      32: lload_2
      33: putfield      #88                 // Field timeoutNanos:J
      36: return

  abstract int messageSizeInBytes(int);

  abstract void resetMessageSizeInBytes();

  public boolean offer(S, int);
    Code:
       0: aload_0
       1: iload_2
       2: invokevirtual #98                 // Method messageSizeInBytes:(I)I
       5: istore_3
       6: aload_0
       7: getfield      #86                 // Field maxBytes:I
      10: istore        4
      12: iload_3
      13: iload         4
      15: if_icmpge     22
      18: iconst_m1
      19: goto          33
      22: iload_3
      23: iload         4
      25: if_icmpne     32
      28: iconst_0
      29: goto          33
      32: iconst_1
      33: istore        5
      35: iload         5
      37: ifle          47
      40: aload_0
      41: iconst_1
      42: putfield      #100                // Field bufferFull:Z
      45: iconst_0
      46: ireturn
      47: aload_0
      48: aload_1
      49: iload_2
      50: invokevirtual #104                // Method addSpanToBuffer:(Ljava/lang/Object;I)V
      53: aload_0
      54: iload_3
      55: putfield      #106                // Field messageSizeInBytes:I
      58: iload         5
      60: ifne          68
      63: aload_0
      64: iconst_1
      65: putfield      #100                // Field bufferFull:Z
      68: iconst_1
      69: ireturn

  void addSpanToBuffer(S, int);
    Code:
       0: aload_0
       1: getfield      #82                 // Field spans:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #118                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: aload_0
      10: getfield      #84                 // Field sizes:Ljava/util/ArrayList;
      13: iload_2
      14: invokestatic  #124                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      17: invokevirtual #118                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      20: pop
      21: return

  long remainingNanos();
    Code:
       0: aload_0
       1: getfield      #82                 // Field spans:Ljava/util/ArrayList;
       4: invokevirtual #130                // Method java/util/ArrayList.isEmpty:()Z
       7: ifeq          22
      10: aload_0
      11: invokestatic  #135                // Method java/lang/System.nanoTime:()J
      14: aload_0
      15: getfield      #88                 // Field timeoutNanos:J
      18: ladd
      19: putfield      #137                // Field deadlineNanoTime:J
      22: aload_0
      23: getfield      #137                // Field deadlineNanoTime:J
      26: invokestatic  #135                // Method java/lang/System.nanoTime:()J
      29: lsub
      30: lconst_0
      31: invokestatic  #143                // Method java/lang/Math.max:(JJ)J
      34: lreturn

  boolean isReady();
    Code:
       0: aload_0
       1: getfield      #100                // Field bufferFull:Z
       4: ifne          16
       7: aload_0
       8: invokevirtual #146                // Method remainingNanos:()J
      11: lconst_0
      12: lcmp
      13: ifgt          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  void drain(zipkin2.reporter.SpanWithSizeConsumer<S>);
    Code:
       0: aload_0
       1: getfield      #82                 // Field spans:Ljava/util/ArrayList;
       4: invokevirtual #153                // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
       7: astore_2
       8: aload_0
       9: getfield      #84                 // Field sizes:Ljava/util/ArrayList;
      12: invokevirtual #153                // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      15: astore_3
      16: aload_2
      17: invokeinterface #158,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          72
      25: aload_1
      26: aload_2
      27: invokeinterface #161,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: aload_3
      33: invokeinterface #161,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #120                // class java/lang/Integer
      41: invokevirtual #164                // Method java/lang/Integer.intValue:()I
      44: invokeinterface #166,  3          // InterfaceMethod zipkin2/reporter/SpanWithSizeConsumer.offer:(Ljava/lang/Object;I)Z
      49: ifeq          16
      52: aload_0
      53: iconst_0
      54: putfield      #100                // Field bufferFull:Z
      57: aload_2
      58: invokeinterface #169,  1          // InterfaceMethod java/util/Iterator.remove:()V
      63: aload_3
      64: invokeinterface #169,  1          // InterfaceMethod java/util/Iterator.remove:()V
      69: goto          16
      72: aload_0
      73: invokevirtual #171                // Method resetMessageSizeInBytes:()V
      76: aload_0
      77: lconst_0
      78: putfield      #137                // Field deadlineNanoTime:J
      81: return

  int count();
    Code:
       0: aload_0
       1: getfield      #82                 // Field spans:Ljava/util/ArrayList;
       4: invokevirtual #183                // Method java/util/ArrayList.size:()I
       7: ireturn

  int sizeInBytes();
    Code:
       0: aload_0
       1: getfield      #106                // Field messageSizeInBytes:I
       4: ireturn
}
