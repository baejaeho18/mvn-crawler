Compiled from "ByteBoundedQueue.java"
final class zipkin2.reporter.ByteBoundedQueue<S> implements zipkin2.reporter.SpanWithSizeConsumer<S> {
  final java.util.concurrent.locks.ReentrantLock lock;

  final java.util.concurrent.locks.Condition available;

  final int maxSize;

  final int maxBytes;

  final S[] elements;

  final int[] sizesInBytes;

  int count;

  int sizeInBytes;

  int writePos;

  int readPos;

  zipkin2.reporter.ByteBoundedQueue(int, int);
    Code:
       0: aload_0
       1: invokespecial #29                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #31                 // class java/util/concurrent/locks/ReentrantLock
       8: dup
       9: iconst_0
      10: invokespecial #34                 // Method java/util/concurrent/locks/ReentrantLock."<init>":(Z)V
      13: putfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      16: aload_0
      17: aload_0
      18: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      21: invokevirtual #40                 // Method java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;
      24: putfield      #42                 // Field available:Ljava/util/concurrent/locks/Condition;
      27: aload_0
      28: iload_1
      29: anewarray     #5                  // class java/lang/Object
      32: putfield      #44                 // Field elements:[Ljava/lang/Object;
      35: aload_0
      36: iload_1
      37: newarray       int
      39: putfield      #46                 // Field sizesInBytes:[I
      42: aload_0
      43: iload_1
      44: putfield      #48                 // Field maxSize:I
      47: aload_0
      48: iload_2
      49: putfield      #50                 // Field maxBytes:I
      52: return

  public boolean offer(S, int);
    Code:
       0: aload_0
       1: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #58                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: getfield      #60                 // Field count:I
      11: aload_0
      12: getfield      #48                 // Field maxSize:I
      15: if_icmpne     29
      18: iconst_0
      19: istore_3
      20: aload_0
      21: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      24: invokevirtual #63                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      27: iload_3
      28: ireturn
      29: aload_0
      30: getfield      #65                 // Field sizeInBytes:I
      33: iload_2
      34: iadd
      35: aload_0
      36: getfield      #50                 // Field maxBytes:I
      39: if_icmple     53
      42: iconst_0
      43: istore_3
      44: aload_0
      45: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      48: invokevirtual #63                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      51: iload_3
      52: ireturn
      53: aload_0
      54: getfield      #44                 // Field elements:[Ljava/lang/Object;
      57: aload_0
      58: getfield      #67                 // Field writePos:I
      61: aload_1
      62: aastore
      63: aload_0
      64: getfield      #46                 // Field sizesInBytes:[I
      67: aload_0
      68: dup
      69: getfield      #67                 // Field writePos:I
      72: dup_x1
      73: iconst_1
      74: iadd
      75: putfield      #67                 // Field writePos:I
      78: iload_2
      79: iastore
      80: aload_0
      81: getfield      #67                 // Field writePos:I
      84: aload_0
      85: getfield      #48                 // Field maxSize:I
      88: if_icmpne     96
      91: aload_0
      92: iconst_0
      93: putfield      #67                 // Field writePos:I
      96: aload_0
      97: dup
      98: getfield      #60                 // Field count:I
     101: iconst_1
     102: iadd
     103: putfield      #60                 // Field count:I
     106: aload_0
     107: dup
     108: getfield      #65                 // Field sizeInBytes:I
     111: iload_2
     112: iadd
     113: putfield      #65                 // Field sizeInBytes:I
     116: aload_0
     117: getfield      #42                 // Field available:Ljava/util/concurrent/locks/Condition;
     120: invokeinterface #72,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signal:()V
     125: iconst_1
     126: istore_3
     127: aload_0
     128: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     131: invokevirtual #63                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     134: iload_3
     135: ireturn
     136: astore        4
     138: aload_0
     139: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     142: invokevirtual #63                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     145: aload         4
     147: athrow
    Exception table:
       from    to  target type
           7    20   136   any
          29    44   136   any
          53   127   136   any
         136   138   136   any

  int drainTo(zipkin2.reporter.SpanWithSizeConsumer<S>, long);
    Code:
       0: aload_0
       1: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #86                 // Method java/util/concurrent/locks/ReentrantLock.lockInterruptibly:()V
       7: lload_2
       8: lstore        4
      10: aload_0
      11: getfield      #60                 // Field count:I
      14: ifne          53
      17: lload         4
      19: lconst_0
      20: lcmp
      21: ifgt          37
      24: iconst_0
      25: istore        6
      27: aload_0
      28: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      31: invokevirtual #63                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      34: iload         6
      36: ireturn
      37: aload_0
      38: getfield      #42                 // Field available:Ljava/util/concurrent/locks/Condition;
      41: lload         4
      43: invokeinterface #90,  3           // InterfaceMethod java/util/concurrent/locks/Condition.awaitNanos:(J)J
      48: lstore        4
      50: goto          10
      53: aload_0
      54: aload_1
      55: invokevirtual #94                 // Method doDrain:(Lzipkin2/reporter/SpanWithSizeConsumer;)I
      58: istore        6
      60: aload_0
      61: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      64: invokevirtual #63                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      67: iload         6
      69: ireturn
      70: astore        7
      72: aload_0
      73: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      76: invokevirtual #63                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      79: aload         7
      81: athrow
      82: astore        4
      84: iconst_0
      85: ireturn
    Exception table:
       from    to  target type
           7    27    70   any
          37    60    70   any
          70    72    70   any
           0    34    82   Class java/lang/InterruptedException
          37    67    82   Class java/lang/InterruptedException
          70    82    82   Class java/lang/InterruptedException

  int clear();
    Code:
       0: aload_0
       1: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #58                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: getfield      #60                 // Field count:I
      11: istore_1
      12: aload_0
      13: aload_0
      14: aload_0
      15: aload_0
      16: iconst_0
      17: dup_x1
      18: putfield      #67                 // Field writePos:I
      21: dup_x1
      22: putfield      #106                // Field readPos:I
      25: dup_x1
      26: putfield      #65                 // Field sizeInBytes:I
      29: putfield      #60                 // Field count:I
      32: aload_0
      33: getfield      #44                 // Field elements:[Ljava/lang/Object;
      36: aconst_null
      37: invokestatic  #112                // Method java/util/Arrays.fill:([Ljava/lang/Object;Ljava/lang/Object;)V
      40: iload_1
      41: istore_2
      42: aload_0
      43: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      46: invokevirtual #63                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      49: iload_2
      50: ireturn
      51: astore_3
      52: aload_0
      53: getfield      #36                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      56: invokevirtual #63                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      59: aload_3
      60: athrow
    Exception table:
       from    to  target type
           7    42    51   any

  int doDrain(zipkin2.reporter.SpanWithSizeConsumer<S>);
    Code:
       0: iconst_0
       1: istore_2
       2: iconst_0
       3: istore_3
       4: iload_2
       5: aload_0
       6: getfield      #60                 // Field count:I
       9: if_icmpge     100
      12: aload_0
      13: getfield      #44                 // Field elements:[Ljava/lang/Object;
      16: aload_0
      17: getfield      #106                // Field readPos:I
      20: aaload
      21: astore        4
      23: aload_0
      24: getfield      #46                 // Field sizesInBytes:[I
      27: aload_0
      28: getfield      #106                // Field readPos:I
      31: iaload
      32: istore        5
      34: aload         4
      36: ifnonnull     42
      39: goto          100
      42: aload_1
      43: aload         4
      45: iload         5
      47: invokeinterface #116,  3          // InterfaceMethod zipkin2/reporter/SpanWithSizeConsumer.offer:(Ljava/lang/Object;I)Z
      52: ifeq          100
      55: iinc          2, 1
      58: iload_3
      59: iload         5
      61: iadd
      62: istore_3
      63: aload_0
      64: getfield      #44                 // Field elements:[Ljava/lang/Object;
      67: aload_0
      68: getfield      #106                // Field readPos:I
      71: aconst_null
      72: aastore
      73: aload_0
      74: dup
      75: getfield      #106                // Field readPos:I
      78: iconst_1
      79: iadd
      80: dup_x1
      81: putfield      #106                // Field readPos:I
      84: aload_0
      85: getfield      #44                 // Field elements:[Ljava/lang/Object;
      88: arraylength
      89: if_icmpne     97
      92: aload_0
      93: iconst_0
      94: putfield      #106                // Field readPos:I
      97: goto          4
     100: aload_0
     101: dup
     102: getfield      #60                 // Field count:I
     105: iload_2
     106: isub
     107: putfield      #60                 // Field count:I
     110: aload_0
     111: dup
     112: getfield      #65                 // Field sizeInBytes:I
     115: iload_3
     116: isub
     117: putfield      #65                 // Field sizeInBytes:I
     120: iload_2
     121: ireturn
}
