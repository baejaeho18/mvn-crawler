Compiled from "Image.java"
abstract class com.sun.prism.Image$Accessor<I extends java.nio.Buffer> {
  final com.sun.prism.Image this$0;

  com.sun.prism.Image$Accessor(com.sun.prism.Image);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/sun/prism/Image;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public abstract int getArgb(int, int);

  public abstract void setArgb(int, int, int);

  public abstract javafx.scene.image.PixelFormat<I> getPlatformPixelFormat();

  public abstract boolean isWritable();

  public abstract com.sun.javafx.tk.PlatformImage promoteToWritableImage();

  public abstract <T extends java.nio.Buffer> void getPixels(int, int, int, int, javafx.scene.image.WritablePixelFormat<T>, T, int);

  public abstract void getPixels(int, int, int, int, javafx.scene.image.WritablePixelFormat<java.nio.ByteBuffer>, byte[], int, int);

  public abstract void getPixels(int, int, int, int, javafx.scene.image.WritablePixelFormat<java.nio.IntBuffer>, int[], int, int);

  public abstract <T extends java.nio.Buffer> void setPixels(int, int, int, int, javafx.scene.image.PixelFormat<T>, T, int);

  public abstract void setPixels(int, int, int, int, javafx.scene.image.PixelFormat<java.nio.ByteBuffer>, byte[], int, int);

  public abstract void setPixels(int, int, int, int, javafx.scene.image.PixelFormat<java.nio.IntBuffer>, int[], int, int);

  public abstract void setPixels(int, int, int, int, javafx.scene.image.PixelReader, int, int);
}
