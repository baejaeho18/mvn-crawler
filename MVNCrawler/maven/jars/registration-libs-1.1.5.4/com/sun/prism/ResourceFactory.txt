Compiled from "ResourceFactory.java"
public interface com.sun.prism.ResourceFactory extends com.sun.prism.GraphicsResource {
  public abstract boolean isDeviceReady();

  public abstract com.sun.prism.impl.TextureResourcePool getTextureResourcePool();

  public abstract com.sun.prism.Texture createTexture(com.sun.prism.Image, com.sun.prism.Texture$Usage, com.sun.prism.Texture$WrapMode);

  public abstract com.sun.prism.Texture createTexture(com.sun.prism.Image, com.sun.prism.Texture$Usage, com.sun.prism.Texture$WrapMode, boolean);

  public abstract com.sun.prism.Texture createTexture(com.sun.prism.PixelFormat, com.sun.prism.Texture$Usage, com.sun.prism.Texture$WrapMode, int, int);

  public abstract com.sun.prism.Texture createTexture(com.sun.prism.PixelFormat, com.sun.prism.Texture$Usage, com.sun.prism.Texture$WrapMode, int, int, boolean);

  public abstract com.sun.prism.Texture createTexture(com.sun.prism.MediaFrame);

  public abstract com.sun.prism.Texture getCachedTexture(com.sun.prism.Image, com.sun.prism.Texture$WrapMode);

  public abstract com.sun.prism.Texture getCachedTexture(com.sun.prism.Image, com.sun.prism.Texture$WrapMode, boolean);

  public abstract boolean isFormatSupported(com.sun.prism.PixelFormat);

  public abstract boolean isWrapModeSupported(com.sun.prism.Texture$WrapMode);

  public abstract int getMaximumTextureSize();

  public abstract int getRTTWidth(int, com.sun.prism.Texture$WrapMode);

  public abstract int getRTTHeight(int, com.sun.prism.Texture$WrapMode);

  public abstract com.sun.prism.Texture createMaskTexture(int, int, com.sun.prism.Texture$WrapMode);

  public abstract com.sun.prism.Texture createFloatTexture(int, int);

  public abstract com.sun.prism.RTTexture createRTTexture(int, int, com.sun.prism.Texture$WrapMode);

  public abstract com.sun.prism.RTTexture createRTTexture(int, int, com.sun.prism.Texture$WrapMode, boolean);

  public abstract boolean isCompatibleTexture(com.sun.prism.Texture);

  public abstract com.sun.prism.Presentable createPresentable(com.sun.prism.PresentableState);

  public abstract com.sun.prism.shape.ShapeRep createPathRep();

  public abstract com.sun.prism.shape.ShapeRep createRoundRectRep();

  public abstract com.sun.prism.shape.ShapeRep createEllipseRep();

  public abstract com.sun.prism.shape.ShapeRep createArcRep();

  public abstract void addFactoryListener(com.sun.prism.ResourceFactoryListener);

  public abstract void removeFactoryListener(com.sun.prism.ResourceFactoryListener);

  public abstract void setRegionTexture(com.sun.prism.Texture);

  public abstract com.sun.prism.Texture getRegionTexture();

  public abstract void setGlyphTexture(com.sun.prism.Texture);

  public abstract com.sun.prism.Texture getGlyphTexture();

  public abstract boolean isSuperShaderAllowed();

  public abstract void dispose();

  public abstract com.sun.prism.PhongMaterial createPhongMaterial();

  public abstract com.sun.prism.MeshView createMeshView(com.sun.prism.Mesh);

  public abstract com.sun.prism.Mesh createMesh();
}
