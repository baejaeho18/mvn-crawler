Compiled from "SWArgbPreTexture.java"
class com.sun.prism.sw.SWArgbPreTexture extends com.sun.prism.sw.SWTexture {
  private int[] data;

  private int offset;

  private boolean hasAlpha;

  com.sun.prism.sw.SWArgbPreTexture(com.sun.prism.sw.SWResourceFactory, com.sun.prism.Texture$WrapMode, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: iload         4
       6: invokespecial #1                  // Method com/sun/prism/sw/SWTexture."<init>":(Lcom/sun/prism/sw/SWResourceFactory;Lcom/sun/prism/Texture$WrapMode;II)V
       9: aload_0
      10: iconst_1
      11: putfield      #2                  // Field hasAlpha:Z
      14: aload_0
      15: iconst_0
      16: putfield      #3                  // Field offset:I
      19: return

  com.sun.prism.sw.SWArgbPreTexture(com.sun.prism.sw.SWArgbPreTexture, com.sun.prism.Texture$WrapMode);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method com/sun/prism/sw/SWTexture."<init>":(Lcom/sun/prism/sw/SWTexture;Lcom/sun/prism/Texture$WrapMode;)V
       6: aload_0
       7: iconst_1
       8: putfield      #2                  // Field hasAlpha:Z
      11: aload_0
      12: aload_1
      13: getfield      #5                  // Field data:[I
      16: putfield      #5                  // Field data:[I
      19: aload_0
      20: aload_1
      21: getfield      #3                  // Field offset:I
      24: putfield      #3                  // Field offset:I
      27: aload_0
      28: aload_1
      29: getfield      #2                  // Field hasAlpha:Z
      32: putfield      #2                  // Field hasAlpha:Z
      35: return

  int[] getDataNoClone();
    Code:
       0: aload_0
       1: getfield      #5                  // Field data:[I
       4: areturn

  int getOffset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field offset:I
       4: ireturn

  boolean hasAlpha();
    Code:
       0: aload_0
       1: getfield      #2                  // Field hasAlpha:Z
       4: ireturn

  public com.sun.prism.PixelFormat getPixelFormat();
    Code:
       0: getstatic     #6                  // Field com/sun/prism/PixelFormat.INT_ARGB_PRE:Lcom/sun/prism/PixelFormat;
       3: areturn

  public void update(java.nio.Buffer, com.sun.prism.PixelFormat, int, int, int, int, int, int, int, boolean);
    Code:
       0: getstatic     #7                  // Field com/sun/prism/impl/PrismSettings.debug:Z
       3: ifeq          54
       6: getstatic     #8                  // Field java/lang/System.out:Ljava/io/PrintStream;
       9: aload_2
      10: aload_1
      11: invokedynamic #9,  0              // InvokeDynamic #0:makeConcatWithConstants:(Lcom/sun/prism/PixelFormat;Ljava/nio/Buffer;)Ljava/lang/String;
      16: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      19: getstatic     #8                  // Field java/lang/System.out:Ljava/io/PrintStream;
      22: iload_3
      23: iload         4
      25: invokedynamic #11,  0             // InvokeDynamic #1:makeConcatWithConstants:(II)Ljava/lang/String;
      30: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      33: getstatic     #8                  // Field java/lang/System.out:Ljava/io/PrintStream;
      36: iload         5
      38: iload         6
      40: iload         7
      42: iload         8
      44: iload         9
      46: invokedynamic #12,  0             // InvokeDynamic #2:makeConcatWithConstants:(IIIII)Ljava/lang/String;
      51: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      54: aload_0
      55: iload_3
      56: iload         7
      58: iadd
      59: iload         4
      61: iload         8
      63: iadd
      64: invokevirtual #13                 // Method checkDimensions:(II)V
      67: aload_0
      68: invokevirtual #14                 // Method allocate:()V
      71: getstatic     #15                 // Field com/sun/prism/sw/SWArgbPreTexture$1.$SwitchMap$com$sun$prism$PixelFormat:[I
      74: aload_2
      75: invokevirtual #16                 // Method com/sun/prism/PixelFormat.ordinal:()I
      78: iaload
      79: tableswitch   { // 1 to 4
                     1: 108
                     2: 121
                     3: 140
                     4: 153
               default: 166
          }
     108: getstatic     #17                 // Field com/sun/javafx/image/impl/ByteRgb.getter:Lcom/sun/javafx/image/BytePixelGetter;
     111: astore        11
     113: aload_0
     114: iconst_0
     115: putfield      #2                  // Field hasAlpha:Z
     118: goto          180
     121: getstatic     #18                 // Field com/sun/javafx/image/impl/IntArgbPre.getter:Lcom/sun/javafx/image/IntPixelGetter;
     124: astore        11
     126: iload         9
     128: iconst_2
     129: ishr
     130: istore        9
     132: aload_0
     133: iconst_1
     134: putfield      #2                  // Field hasAlpha:Z
     137: goto          180
     140: getstatic     #19                 // Field com/sun/javafx/image/impl/ByteBgraPre.getter:Lcom/sun/javafx/image/BytePixelGetter;
     143: astore        11
     145: aload_0
     146: iconst_1
     147: putfield      #2                  // Field hasAlpha:Z
     150: goto          180
     153: getstatic     #20                 // Field com/sun/javafx/image/impl/ByteGray.getter:Lcom/sun/javafx/image/BytePixelGetter;
     156: astore        11
     158: aload_0
     159: iconst_0
     160: putfield      #2                  // Field hasAlpha:Z
     163: goto          180
     166: new           #21                 // class java/lang/UnsupportedOperationException
     169: dup
     170: aload_2
     171: invokedynamic #22,  0             // InvokeDynamic #3:makeConcatWithConstants:(Lcom/sun/prism/PixelFormat;)Ljava/lang/String;
     176: invokespecial #23                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
     179: athrow
     180: aload         11
     182: getstatic     #24                 // Field com/sun/javafx/image/impl/IntArgbPre.setter:Lcom/sun/javafx/image/IntPixelSetter;
     185: invokestatic  #25                 // Method com/sun/javafx/image/PixelUtils.getConverter:(Lcom/sun/javafx/image/PixelGetter;Lcom/sun/javafx/image/PixelSetter;)Lcom/sun/javafx/image/PixelConverter;
     188: astore        12
     190: aload_1
     191: iconst_0
     192: invokevirtual #26                 // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
     195: pop
     196: aload         12
     198: aload_1
     199: iload         6
     201: iload         9
     203: imul
     204: iload         5
     206: iadd
     207: iload         9
     209: aload_0
     210: getfield      #5                  // Field data:[I
     213: invokestatic  #27                 // Method java/nio/IntBuffer.wrap:([I)Ljava/nio/IntBuffer;
     216: iload         4
     218: aload_0
     219: getfield      #28                 // Field physicalWidth:I
     222: imul
     223: iload_3
     224: iadd
     225: aload_0
     226: getfield      #28                 // Field physicalWidth:I
     229: iload         7
     231: iload         8
     233: invokeinterface #29,  9           // InterfaceMethod com/sun/javafx/image/PixelConverter.convert:(Ljava/nio/Buffer;IILjava/nio/Buffer;IIII)V
     238: return

  public void update(com.sun.prism.MediaFrame, boolean);
    Code:
       0: getstatic     #7                  // Field com/sun/prism/impl/PrismSettings.debug:Z
       3: ifeq          23
       6: getstatic     #8                  // Field java/lang/System.out:Ljava/io/PrintStream;
       9: aload_1
      10: invokeinterface #30,  1           // InterfaceMethod com/sun/prism/MediaFrame.getPixelFormat:()Lcom/sun/prism/PixelFormat;
      15: invokedynamic #31,  0             // InvokeDynamic #4:makeConcatWithConstants:(Lcom/sun/prism/PixelFormat;)Ljava/lang/String;
      20: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      23: aload_1
      24: invokeinterface #32,  1           // InterfaceMethod com/sun/prism/MediaFrame.holdFrame:()V
      29: aload_1
      30: invokeinterface #30,  1           // InterfaceMethod com/sun/prism/MediaFrame.getPixelFormat:()Lcom/sun/prism/PixelFormat;
      35: getstatic     #6                  // Field com/sun/prism/PixelFormat.INT_ARGB_PRE:Lcom/sun/prism/PixelFormat;
      38: if_acmpeq     59
      41: aload_1
      42: getstatic     #6                  // Field com/sun/prism/PixelFormat.INT_ARGB_PRE:Lcom/sun/prism/PixelFormat;
      45: invokeinterface #33,  2           // InterfaceMethod com/sun/prism/MediaFrame.convertToFormat:(Lcom/sun/prism/PixelFormat;)Lcom/sun/prism/MediaFrame;
      50: astore_3
      51: aload_1
      52: invokeinterface #34,  1           // InterfaceMethod com/sun/prism/MediaFrame.releaseFrame:()V
      57: aload_3
      58: astore_1
      59: aload_1
      60: iconst_0
      61: invokeinterface #35,  2           // InterfaceMethod com/sun/prism/MediaFrame.strideForPlane:(I)I
      66: iconst_4
      67: idiv
      68: istore_3
      69: aload_1
      70: iconst_0
      71: invokeinterface #36,  2           // InterfaceMethod com/sun/prism/MediaFrame.getBufferForPlane:(I)Ljava/nio/ByteBuffer;
      76: invokevirtual #37                 // Method java/nio/ByteBuffer.asIntBuffer:()Ljava/nio/IntBuffer;
      79: astore        4
      81: aload         4
      83: invokevirtual #38                 // Method java/nio/IntBuffer.hasArray:()Z
      86: ifeq          116
      89: aload_0
      90: iconst_0
      91: putfield      #39                 // Field allocated:Z
      94: aload_0
      95: iconst_0
      96: putfield      #3                  // Field offset:I
      99: aload_0
     100: iload_3
     101: putfield      #28                 // Field physicalWidth:I
     104: aload_0
     105: aload         4
     107: invokevirtual #40                 // Method java/nio/IntBuffer.array:()[I
     110: putfield      #5                  // Field data:[I
     113: goto          174
     116: aload_0
     117: invokevirtual #14                 // Method allocate:()V
     120: iconst_0
     121: istore        5
     123: iload         5
     125: aload_0
     126: getfield      #41                 // Field contentHeight:I
     129: if_icmpge     174
     132: aload         4
     134: aload_0
     135: getfield      #3                  // Field offset:I
     138: iload         5
     140: iload_3
     141: imul
     142: iadd
     143: invokevirtual #42                 // Method java/nio/IntBuffer.position:(I)Ljava/nio/IntBuffer;
     146: pop
     147: aload         4
     149: aload_0
     150: getfield      #5                  // Field data:[I
     153: iload         5
     155: aload_0
     156: getfield      #28                 // Field physicalWidth:I
     159: imul
     160: aload_0
     161: getfield      #43                 // Field contentWidth:I
     164: invokevirtual #44                 // Method java/nio/IntBuffer.get:([III)Ljava/nio/IntBuffer;
     167: pop
     168: iinc          5, 1
     171: goto          123
     174: aload_1
     175: invokeinterface #34,  1           // InterfaceMethod com/sun/prism/MediaFrame.releaseFrame:()V
     180: return

  void checkDimensions(int, int);
    Code:
       0: iload_1
       1: ifge          14
       4: new           #45                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #46                 // String srcw must be >=0
      10: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: iload_2
      15: ifge          28
      18: new           #45                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #48                 // String srch must be >=0
      24: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: iload_1
      29: aload_0
      30: getfield      #28                 // Field physicalWidth:I
      33: if_icmple     46
      36: new           #45                 // class java/lang/IllegalArgumentException
      39: dup
      40: ldc           #49                 // String srcw exceeds WIDTH
      42: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: iload_2
      47: aload_0
      48: getfield      #50                 // Field physicalHeight:I
      51: if_icmple     64
      54: new           #45                 // class java/lang/IllegalArgumentException
      57: dup
      58: ldc           #51                 // String srch exceeds HEIGHT
      60: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      63: athrow
      64: return

  void applyCompositeAlpha(float);
    Code:
       0: aload_0
       1: getfield      #39                 // Field allocated:Z
       4: ifeq          90
       7: aload_0
       8: aload_0
       9: getfield      #2                  // Field hasAlpha:Z
      12: ifne          21
      15: fload_1
      16: fconst_1
      17: fcmpg
      18: ifge          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: putfield      #2                  // Field hasAlpha:Z
      29: iconst_0
      30: istore_3
      31: iload_3
      32: aload_0
      33: getfield      #5                  // Field data:[I
      36: arraylength
      37: if_icmpge     87
      40: aload_0
      41: getfield      #5                  // Field data:[I
      44: iload_3
      45: iaload
      46: bipush        24
      48: ishr
      49: i2f
      50: fload_1
      51: fmul
      52: ldc           #52                 // float 0.5f
      54: fadd
      55: f2i
      56: sipush        255
      59: iand
      60: istore_2
      61: aload_0
      62: getfield      #5                  // Field data:[I
      65: iload_3
      66: iload_2
      67: bipush        24
      69: ishl
      70: aload_0
      71: getfield      #5                  // Field data:[I
      74: iload_3
      75: iaload
      76: ldc           #53                 // int 16777215
      78: iand
      79: ior
      80: iastore
      81: iinc          3, 1
      84: goto          31
      87: goto          100
      90: new           #54                 // class java/lang/IllegalStateException
      93: dup
      94: ldc           #55                 // String Cannot apply composite alpha to texture with non-allocated data
      96: invokespecial #56                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      99: athrow
     100: return

  void allocateBuffer();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #28                 // Field physicalWidth:I
       5: aload_0
       6: getfield      #50                 // Field physicalHeight:I
       9: imul
      10: newarray       int
      12: putfield      #5                  // Field data:[I
      15: return

  com.sun.prism.Texture createSharedLockedTexture(com.sun.prism.Texture$WrapMode);
    Code:
       0: new           #57                 // class com/sun/prism/sw/SWArgbPreTexture
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #58                 // Method "<init>":(Lcom/sun/prism/sw/SWArgbPreTexture;Lcom/sun/prism/Texture$WrapMode;)V
       9: areturn
}
