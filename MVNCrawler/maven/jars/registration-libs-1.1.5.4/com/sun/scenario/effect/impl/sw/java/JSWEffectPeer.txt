Compiled from "JSWEffectPeer.java"
public abstract class com.sun.scenario.effect.impl.sw.java.JSWEffectPeer<T extends com.sun.scenario.effect.impl.state.RenderState> extends com.sun.scenario.effect.impl.EffectPeer<T> {
  protected static final int FVALS_A;

  protected static final int FVALS_R;

  protected static final int FVALS_G;

  protected static final int FVALS_B;

  protected com.sun.scenario.effect.impl.sw.java.JSWEffectPeer(com.sun.scenario.effect.FilterContext, com.sun.scenario.effect.impl.Renderer, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method com/sun/scenario/effect/impl/EffectPeer."<init>":(Lcom/sun/scenario/effect/FilterContext;Lcom/sun/scenario/effect/impl/Renderer;Ljava/lang/String;)V
       7: return

  protected final void laccum(int, float, float[]);
    Code:
       0: fload_2
       1: ldc           #2                  // float 255.0f
       3: fdiv
       4: fstore_2
       5: aload_3
       6: iconst_0
       7: dup2
       8: faload
       9: iload_1
      10: bipush        16
      12: ishr
      13: sipush        255
      16: iand
      17: i2f
      18: fload_2
      19: fmul
      20: fadd
      21: fastore
      22: aload_3
      23: iconst_1
      24: dup2
      25: faload
      26: iload_1
      27: bipush        8
      29: ishr
      30: sipush        255
      33: iand
      34: i2f
      35: fload_2
      36: fmul
      37: fadd
      38: fastore
      39: aload_3
      40: iconst_2
      41: dup2
      42: faload
      43: iload_1
      44: sipush        255
      47: iand
      48: i2f
      49: fload_2
      50: fmul
      51: fadd
      52: fastore
      53: aload_3
      54: iconst_3
      55: dup2
      56: faload
      57: iload_1
      58: bipush        24
      60: iushr
      61: i2f
      62: fload_2
      63: fmul
      64: fadd
      65: fastore
      66: return

  protected final void lsample(int[], float, float, int, int, int, float[]);
    Code:
       0: aload         7
       2: iconst_0
       3: fconst_0
       4: fastore
       5: aload         7
       7: iconst_1
       8: fconst_0
       9: fastore
      10: aload         7
      12: iconst_2
      13: fconst_0
      14: fastore
      15: aload         7
      17: iconst_3
      18: fconst_0
      19: fastore
      20: fload_2
      21: iload         4
      23: i2f
      24: fmul
      25: ldc           #4                  // float 0.5f
      27: fadd
      28: fstore_2
      29: fload_3
      30: iload         5
      32: i2f
      33: fmul
      34: ldc           #4                  // float 0.5f
      36: fadd
      37: fstore_3
      38: fload_2
      39: f2i
      40: istore        8
      42: fload_3
      43: f2i
      44: istore        9
      46: fload_2
      47: fconst_0
      48: fcmpl
      49: ifle          203
      52: fload_3
      53: fconst_0
      54: fcmpl
      55: ifle          203
      58: iload         8
      60: iload         4
      62: if_icmpgt     203
      65: iload         9
      67: iload         5
      69: if_icmpgt     203
      72: fload_2
      73: iload         8
      75: i2f
      76: fsub
      77: fstore_2
      78: fload_3
      79: iload         9
      81: i2f
      82: fsub
      83: fstore_3
      84: iload         9
      86: iload         6
      88: imul
      89: iload         8
      91: iadd
      92: istore        10
      94: fload_2
      95: fload_3
      96: fmul
      97: fstore        11
      99: iload         9
     101: iload         5
     103: if_icmpge     146
     106: iload         8
     108: iload         4
     110: if_icmpge     125
     113: aload_0
     114: aload_1
     115: iload         10
     117: iaload
     118: fload         11
     120: aload         7
     122: invokevirtual #5                  // Method laccum:(IF[F)V
     125: iload         8
     127: ifle          146
     130: aload_0
     131: aload_1
     132: iload         10
     134: iconst_1
     135: isub
     136: iaload
     137: fload_3
     138: fload         11
     140: fsub
     141: aload         7
     143: invokevirtual #5                  // Method laccum:(IF[F)V
     146: iload         9
     148: ifle          203
     151: iload         8
     153: iload         4
     155: if_icmpge     175
     158: aload_0
     159: aload_1
     160: iload         10
     162: iload         6
     164: isub
     165: iaload
     166: fload_2
     167: fload         11
     169: fsub
     170: aload         7
     172: invokevirtual #5                  // Method laccum:(IF[F)V
     175: iload         8
     177: ifle          203
     180: aload_0
     181: aload_1
     182: iload         10
     184: iload         6
     186: isub
     187: iconst_1
     188: isub
     189: iaload
     190: fconst_1
     191: fload_2
     192: fsub
     193: fload_3
     194: fsub
     195: fload         11
     197: fadd
     198: aload         7
     200: invokevirtual #5                  // Method laccum:(IF[F)V
     203: return

  protected final void laccumsample(int[], float, float, int, int, int, float, float[]);
    Code:
       0: fload         7
       2: ldc           #2                  // float 255.0f
       4: fmul
       5: fstore        7
       7: fload_2
       8: ldc           #4                  // float 0.5f
      10: fadd
      11: fstore_2
      12: fload_3
      13: ldc           #4                  // float 0.5f
      15: fadd
      16: fstore_3
      17: fload_2
      18: f2i
      19: istore        9
      21: fload_3
      22: f2i
      23: istore        10
      25: fload_2
      26: fconst_0
      27: fcmpl
      28: ifle          194
      31: fload_3
      32: fconst_0
      33: fcmpl
      34: ifle          194
      37: iload         9
      39: iload         4
      41: if_icmpgt     194
      44: iload         10
      46: iload         5
      48: if_icmpgt     194
      51: fload_2
      52: iload         9
      54: i2f
      55: fsub
      56: fstore_2
      57: fload_3
      58: iload         10
      60: i2f
      61: fsub
      62: fstore_3
      63: iload         10
      65: iload         6
      67: imul
      68: iload         9
      70: iadd
      71: istore        11
      73: fload_2
      74: fload_3
      75: fmul
      76: fstore        12
      78: iload         10
      80: iload         5
      82: if_icmpge     131
      85: iload         9
      87: iload         4
      89: if_icmpge     107
      92: aload_0
      93: aload_1
      94: iload         11
      96: iaload
      97: fload         12
      99: fload         7
     101: fmul
     102: aload         8
     104: invokevirtual #5                  // Method laccum:(IF[F)V
     107: iload         9
     109: ifle          131
     112: aload_0
     113: aload_1
     114: iload         11
     116: iconst_1
     117: isub
     118: iaload
     119: fload_3
     120: fload         12
     122: fsub
     123: fload         7
     125: fmul
     126: aload         8
     128: invokevirtual #5                  // Method laccum:(IF[F)V
     131: iload         10
     133: ifle          194
     136: iload         9
     138: iload         4
     140: if_icmpge     163
     143: aload_0
     144: aload_1
     145: iload         11
     147: iload         6
     149: isub
     150: iaload
     151: fload_2
     152: fload         12
     154: fsub
     155: fload         7
     157: fmul
     158: aload         8
     160: invokevirtual #5                  // Method laccum:(IF[F)V
     163: iload         9
     165: ifle          194
     168: aload_0
     169: aload_1
     170: iload         11
     172: iload         6
     174: isub
     175: iconst_1
     176: isub
     177: iaload
     178: fconst_1
     179: fload_2
     180: fsub
     181: fload_3
     182: fsub
     183: fload         12
     185: fadd
     186: fload         7
     188: fmul
     189: aload         8
     191: invokevirtual #5                  // Method laccum:(IF[F)V
     194: return

  protected final void faccum(float[], int, float, float[]);
    Code:
       0: aload         4
       2: iconst_0
       3: dup2
       4: faload
       5: aload_1
       6: iload_2
       7: faload
       8: fload_3
       9: fmul
      10: fadd
      11: fastore
      12: aload         4
      14: iconst_1
      15: dup2
      16: faload
      17: aload_1
      18: iload_2
      19: iconst_1
      20: iadd
      21: faload
      22: fload_3
      23: fmul
      24: fadd
      25: fastore
      26: aload         4
      28: iconst_2
      29: dup2
      30: faload
      31: aload_1
      32: iload_2
      33: iconst_2
      34: iadd
      35: faload
      36: fload_3
      37: fmul
      38: fadd
      39: fastore
      40: aload         4
      42: iconst_3
      43: dup2
      44: faload
      45: aload_1
      46: iload_2
      47: iconst_3
      48: iadd
      49: faload
      50: fload_3
      51: fmul
      52: fadd
      53: fastore
      54: return

  protected final void fsample(float[], float, float, int, int, int, float[]);
    Code:
       0: aload         7
       2: iconst_0
       3: fconst_0
       4: fastore
       5: aload         7
       7: iconst_1
       8: fconst_0
       9: fastore
      10: aload         7
      12: iconst_2
      13: fconst_0
      14: fastore
      15: aload         7
      17: iconst_3
      18: fconst_0
      19: fastore
      20: fload_2
      21: iload         4
      23: i2f
      24: fmul
      25: ldc           #4                  // float 0.5f
      27: fadd
      28: fstore_2
      29: fload_3
      30: iload         5
      32: i2f
      33: fmul
      34: ldc           #4                  // float 0.5f
      36: fadd
      37: fstore_3
      38: fload_2
      39: f2i
      40: istore        8
      42: fload_3
      43: f2i
      44: istore        9
      46: fload_2
      47: fconst_0
      48: fcmpl
      49: ifle          205
      52: fload_3
      53: fconst_0
      54: fcmpl
      55: ifle          205
      58: iload         8
      60: iload         4
      62: if_icmpgt     205
      65: iload         9
      67: iload         5
      69: if_icmpgt     205
      72: fload_2
      73: iload         8
      75: i2f
      76: fsub
      77: fstore_2
      78: fload_3
      79: iload         9
      81: i2f
      82: fsub
      83: fstore_3
      84: iconst_4
      85: iload         9
      87: iload         6
      89: imul
      90: iload         8
      92: iadd
      93: imul
      94: istore        10
      96: fload_2
      97: fload_3
      98: fmul
      99: fstore        11
     101: iload         9
     103: iload         5
     105: if_icmpge     146
     108: iload         8
     110: iload         4
     112: if_icmpge     126
     115: aload_0
     116: aload_1
     117: iload         10
     119: fload         11
     121: aload         7
     123: invokevirtual #6                  // Method faccum:([FIF[F)V
     126: iload         8
     128: ifle          146
     131: aload_0
     132: aload_1
     133: iload         10
     135: iconst_4
     136: isub
     137: fload_3
     138: fload         11
     140: fsub
     141: aload         7
     143: invokevirtual #6                  // Method faccum:([FIF[F)V
     146: iload         9
     148: ifle          205
     151: iload         8
     153: iload         4
     155: if_icmpge     176
     158: aload_0
     159: aload_1
     160: iload         10
     162: iload         6
     164: iconst_4
     165: imul
     166: isub
     167: fload_2
     168: fload         11
     170: fsub
     171: aload         7
     173: invokevirtual #6                  // Method faccum:([FIF[F)V
     176: iload         8
     178: ifle          205
     181: aload_0
     182: aload_1
     183: iload         10
     185: iload         6
     187: iconst_4
     188: imul
     189: isub
     190: iconst_4
     191: isub
     192: fconst_1
     193: fload_2
     194: fsub
     195: fload_3
     196: fsub
     197: fload         11
     199: fadd
     200: aload         7
     202: invokevirtual #6                  // Method faccum:([FIF[F)V
     205: return
}
