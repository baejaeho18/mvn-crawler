Compiled from "AndroidFontFinder.java"
class com.sun.javafx.font.AndroidFontFinder {
  private static final java.lang.String SYSTEM_FONT_NAME;

  private static final float SYSTEM_FONT_SIZE;

  static final java.lang.String fontDescriptor_2_X_Path;

  static final java.lang.String fontDescriptor_4_X_Path;

  static final java.lang.String systemFontsDir;

  com.sun.javafx.font.AndroidFontFinder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.lang.String getSystemFont();
    Code:
       0: ldc           #3                  // String sans serif
       2: areturn

  public static float getSystemFontSize();
    Code:
       0: ldc           #4                  // float 16.0f
       2: freturn

  public static java.lang.String getSystemFontsDir();
    Code:
       0: ldc           #5                  // String /system/fonts
       2: areturn

  private static boolean parse_2_X_SystemDefaultFonts(java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.String>>);
    Code:
       0: ldc           #2                  // class com/sun/javafx/font/AndroidFontFinder
       2: ldc           #6                  // String /com/sun/javafx/font/android_system_fonts.xml
       4: invokevirtual #7                  // Method java/lang/Class.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
       7: astore_3
       8: aload_3
       9: ifnonnull     22
      12: getstatic     #8                  // Field java/lang/System.err:Ljava/io/PrintStream;
      15: ldc           #9                  // String Resource not found: /com/sun/javafx/font/android_system_fonts.xml
      17: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      20: iconst_0
      21: ireturn
      22: aload_3
      23: aload_0
      24: aload_1
      25: aload_2
      26: invokestatic  #11                 // Method parseSystemDefaultFonts:(Ljava/io/InputStream;Ljava/util/HashMap;Ljava/util/HashMap;Ljava/util/HashMap;)Z
      29: ireturn

  private static boolean parse_4_X_SystemDefaultFonts(java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.String>>);
    Code:
       0: new           #12                 // class java/io/File
       3: dup
       4: ldc           #13                 // String /system/etc/system_fonts.xml
       6: invokespecial #14                 // Method java/io/File."<init>":(Ljava/lang/String;)V
       9: astore_3
      10: new           #15                 // class java/io/FileInputStream
      13: dup
      14: aload_3
      15: invokespecial #16                 // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      18: aload_0
      19: aload_1
      20: aload_2
      21: invokestatic  #11                 // Method parseSystemDefaultFonts:(Ljava/io/InputStream;Ljava/util/HashMap;Ljava/util/HashMap;Ljava/util/HashMap;)Z
      24: ireturn
      25: astore        4
      27: getstatic     #8                  // Field java/lang/System.err:Ljava/io/PrintStream;
      30: ldc           #18                 // String File not found: /system/etc/system_fonts.xml
      32: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      35: iconst_0
      36: ireturn
    Exception table:
       from    to  target type
          10    24    25   Class java/io/FileNotFoundException

  private static boolean parseSystemDefaultFonts(java.io.InputStream, java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.String>>);
    Code:
       0: invokestatic  #19                 // Method javax/xml/parsers/SAXParserFactory.newInstance:()Ljavax/xml/parsers/SAXParserFactory;
       3: astore        4
       5: aload         4
       7: invokevirtual #20                 // Method javax/xml/parsers/SAXParserFactory.newSAXParser:()Ljavax/xml/parsers/SAXParser;
      10: astore        5
      12: new           #21                 // class com/sun/javafx/font/AndroidFontFinder$1
      15: dup
      16: aload_1
      17: aload_2
      18: aload_3
      19: invokespecial #22                 // Method com/sun/javafx/font/AndroidFontFinder$1."<init>":(Ljava/util/HashMap;Ljava/util/HashMap;Ljava/util/HashMap;)V
      22: astore        6
      24: aload         5
      26: aload_0
      27: aload         6
      29: invokevirtual #23                 // Method javax/xml/parsers/SAXParser.parse:(Ljava/io/InputStream;Lorg/xml/sax/helpers/DefaultHandler;)V
      32: iconst_1
      33: ireturn
      34: astore        4
      36: getstatic     #8                  // Field java/lang/System.err:Ljava/io/PrintStream;
      39: ldc           #25                 // String Failed to load default fonts descriptor: /system/etc/system_fonts.xml
      41: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      44: goto          62
      47: astore        4
      49: getstatic     #8                  // Field java/lang/System.err:Ljava/io/PrintStream;
      52: ldc           #27                 // String Failed parsing default fonts descriptor;
      54: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      57: aload         4
      59: invokevirtual #28                 // Method java/lang/Exception.printStackTrace:()V
      62: iconst_0
      63: ireturn
    Exception table:
       from    to  target type
           0    33    34   Class java/io/IOException
           0    33    47   Class java/lang/Exception

  public static void populateFontFileNameMap(java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.String>>, java.util.Locale);
    Code:
       0: aload_0
       1: ifnull        12
       4: aload_1
       5: ifnull        12
       8: aload_2
       9: ifnonnull     13
      12: return
      13: aload_3
      14: ifnonnull     21
      17: getstatic     #29                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      20: astore_3
      21: aload_0
      22: aload_1
      23: aload_2
      24: invokestatic  #30                 // Method parse_4_X_SystemDefaultFonts:(Ljava/util/HashMap;Ljava/util/HashMap;Ljava/util/HashMap;)Z
      27: istore        4
      29: iload         4
      31: ifne          41
      34: aload_0
      35: aload_1
      36: aload_2
      37: invokestatic  #31                 // Method parse_2_X_SystemDefaultFonts:(Ljava/util/HashMap;Ljava/util/HashMap;Ljava/util/HashMap;)Z
      40: pop
      41: return

  private static java.lang.Void lambda$static$0();
    Code:
       0: ldc           #32                 // String javafx_font
       2: invokestatic  #33                 // Method com/sun/glass/utils/NativeLibLoader.loadLibrary:(Ljava/lang/String;)V
       5: aconst_null
       6: areturn

  static {};
    Code:
       0: invokedynamic #34,  0             // InvokeDynamic #0:run:()Ljava/security/PrivilegedAction;
       5: invokestatic  #35                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
       8: pop
       9: return
}
