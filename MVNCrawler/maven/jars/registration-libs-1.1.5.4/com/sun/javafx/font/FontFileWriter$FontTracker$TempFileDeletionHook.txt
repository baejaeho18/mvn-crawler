Compiled from "FontFileWriter.java"
class com.sun.javafx.font.FontFileWriter$FontTracker$TempFileDeletionHook {
  private static java.util.HashMap<java.io.File, java.io.RandomAccessFile> files;

  private static java.lang.Thread t;

  static void init();
    Code:
       0: getstatic     #1                  // Field t:Ljava/lang/Thread;
       3: ifnonnull     15
       6: invokedynamic #2,  0              // InvokeDynamic #0:run:()Ljava/security/PrivilegedAction;
      11: invokestatic  #3                  // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      14: pop
      15: return

  private com.sun.javafx.font.FontFileWriter$FontTracker$TempFileDeletionHook();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: return

  static synchronized void add(java.io.File);
    Code:
       0: invokestatic  #5                  // Method init:()V
       3: getstatic     #6                  // Field files:Ljava/util/HashMap;
       6: aload_0
       7: aconst_null
       8: invokevirtual #7                  // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  static synchronized void set(java.io.File, java.io.RandomAccessFile);
    Code:
       0: getstatic     #6                  // Field files:Ljava/util/HashMap;
       3: aload_0
       4: aload_1
       5: invokevirtual #7                  // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: return

  static synchronized void remove(java.io.File);
    Code:
       0: getstatic     #6                  // Field files:Ljava/util/HashMap;
       3: aload_0
       4: invokevirtual #8                  // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
       7: pop
       8: return

  static synchronized void runHooks();
    Code:
       0: getstatic     #6                  // Field files:Ljava/util/HashMap;
       3: invokevirtual #9                  // Method java/util/HashMap.isEmpty:()Z
       6: ifeq          10
       9: return
      10: getstatic     #6                  // Field files:Ljava/util/HashMap;
      13: invokevirtual #10                 // Method java/util/HashMap.entrySet:()Ljava/util/Set;
      16: invokeinterface #11,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      21: astore_0
      22: aload_0
      23: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          82
      31: aload_0
      32: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #14                 // class java/util/Map$Entry
      40: astore_1
      41: aload_1
      42: invokeinterface #15,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      47: ifnull        62
      50: aload_1
      51: invokeinterface #15,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      56: checkcast     #16                 // class java/io/RandomAccessFile
      59: invokevirtual #17                 // Method java/io/RandomAccessFile.close:()V
      62: goto          66
      65: astore_2
      66: aload_1
      67: invokeinterface #19,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      72: checkcast     #20                 // class java/io/File
      75: invokevirtual #21                 // Method java/io/File.delete:()Z
      78: pop
      79: goto          22
      82: return
    Exception table:
       from    to  target type
          41    62    65   Class java/lang/Exception

  private static java.lang.Object lambda$init$1();
    Code:
       0: new           #22                 // class java/lang/Thread
       3: dup
       4: invokedynamic #23,  0             // InvokeDynamic #1:run:()Ljava/lang/Runnable;
       9: invokespecial #24                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
      12: putstatic     #1                  // Field t:Ljava/lang/Thread;
      15: invokestatic  #25                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      18: getstatic     #1                  // Field t:Ljava/lang/Thread;
      21: invokevirtual #26                 // Method java/lang/Runtime.addShutdownHook:(Ljava/lang/Thread;)V
      24: aconst_null
      25: areturn

  private static void lambda$init$0();
    Code:
       0: invokestatic  #27                 // Method runHooks:()V
       3: return

  static {};
    Code:
       0: new           #28                 // class java/util/HashMap
       3: dup
       4: invokespecial #29                 // Method java/util/HashMap."<init>":()V
       7: putstatic     #6                  // Field files:Ljava/util/HashMap;
      10: aconst_null
      11: putstatic     #1                  // Field t:Ljava/lang/Thread;
      14: return
}
