Compiled from "FontFileWriter.java"
class com.sun.javafx.font.FontFileWriter implements com.sun.javafx.font.FontConstants {
  byte[] header;

  int pos;

  int headerPos;

  int writtenBytes;

  com.sun.javafx.font.FontFileWriter$FontTracker tracker;

  java.io.File file;

  java.io.RandomAccessFile raFile;

  public com.sun.javafx.font.FontFileWriter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: invokestatic  #2                  // Method hasTempPermission:()Z
       7: ifne          17
      10: aload_0
      11: invokestatic  #3                  // Method com/sun/javafx/font/FontFileWriter$FontTracker.getTracker:()Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      14: putfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      17: return

  protected void setLength(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
       4: ifnonnull     17
       7: new           #6                  // class java/io/IOException
      10: dup
      11: ldc           #7                  // String File not open
      13: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: invokespecial #9                  // Method checkTracker:(I)V
      22: aload_0
      23: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      26: iload_1
      27: i2l
      28: invokevirtual #10                 // Method java/io/RandomAccessFile.setLength:(J)V
      31: return

  public void seek(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
       4: ifnonnull     17
       7: new           #6                  // class java/io/IOException
      10: dup
      11: ldc           #7                  // String File not open
      13: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: iload_1
      18: aload_0
      19: getfield      #11                 // Field pos:I
      22: if_icmpeq     39
      25: aload_0
      26: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      29: iload_1
      30: i2l
      31: invokevirtual #12                 // Method java/io/RandomAccessFile.seek:(J)V
      34: aload_0
      35: iload_1
      36: putfield      #11                 // Field pos:I
      39: return

  public java.io.File getFile();
    Code:
       0: aload_0
       1: getfield      #13                 // Field file:Ljava/io/File;
       4: areturn

  public java.io.File openFile() throws java.security.PrivilegedActionException;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #11                 // Field pos:I
       5: aload_0
       6: iconst_0
       7: putfield      #14                 // Field writtenBytes:I
      10: aload_0
      11: invokedynamic #15,  0             // InvokeDynamic #0:run:()Ljava/security/PrivilegedExceptionAction;
      16: invokestatic  #16                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      19: checkcast     #17                 // class java/io/File
      22: putfield      #13                 // Field file:Ljava/io/File;
      25: aload_0
      26: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      29: ifnull        43
      32: aload_0
      33: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      36: aload_0
      37: getfield      #13                 // Field file:Ljava/io/File;
      40: invokevirtual #18                 // Method com/sun/javafx/font/FontFileWriter$FontTracker.add:(Ljava/io/File;)V
      43: aload_0
      44: aload_0
      45: invokedynamic #19,  0             // InvokeDynamic #1:run:(Lcom/sun/javafx/font/FontFileWriter;)Ljava/security/PrivilegedExceptionAction;
      50: invokestatic  #16                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      53: checkcast     #20                 // class java/io/RandomAccessFile
      56: putfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      59: aload_0
      60: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      63: ifnull        81
      66: aload_0
      67: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      70: aload_0
      71: getfield      #13                 // Field file:Ljava/io/File;
      74: aload_0
      75: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      78: invokevirtual #21                 // Method com/sun/javafx/font/FontFileWriter$FontTracker.set:(Ljava/io/File;Ljava/io/RandomAccessFile;)V
      81: getstatic     #22                 // Field com/sun/javafx/font/PrismFontFactory.debugFonts:Z
      84: ifeq          105
      87: getstatic     #23                 // Field java/lang/System.err:Ljava/io/PrintStream;
      90: aload_0
      91: getfield      #13                 // Field file:Ljava/io/File;
      94: invokevirtual #24                 // Method java/io/File.getPath:()Ljava/lang/String;
      97: invokedynamic #25,  0             // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
     102: invokevirtual #26                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     105: aload_0
     106: getfield      #13                 // Field file:Ljava/io/File;
     109: areturn

  public void closeFile() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field header:[B
       4: ifnull        31
       7: aload_0
       8: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      11: lconst_0
      12: invokevirtual #12                 // Method java/io/RandomAccessFile.seek:(J)V
      15: aload_0
      16: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      19: aload_0
      20: getfield      #27                 // Field header:[B
      23: invokevirtual #28                 // Method java/io/RandomAccessFile.write:([B)V
      26: aload_0
      27: aconst_null
      28: putfield      #27                 // Field header:[B
      31: aload_0
      32: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      35: ifnull        50
      38: aload_0
      39: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      42: invokevirtual #29                 // Method java/io/RandomAccessFile.close:()V
      45: aload_0
      46: aconst_null
      47: putfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      50: aload_0
      51: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      54: ifnull        68
      57: aload_0
      58: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      61: aload_0
      62: getfield      #13                 // Field file:Ljava/io/File;
      65: invokevirtual #30                 // Method com/sun/javafx/font/FontFileWriter$FontTracker.remove:(Ljava/io/File;)V
      68: return

  public void deleteFile();
    Code:
       0: aload_0
       1: getfield      #13                 // Field file:Ljava/io/File;
       4: ifnull        81
       7: aload_0
       8: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      11: ifnull        25
      14: aload_0
      15: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      18: aload_0
      19: getfield      #14                 // Field writtenBytes:I
      22: invokevirtual #31                 // Method com/sun/javafx/font/FontFileWriter$FontTracker.subBytes:(I)V
      25: aload_0
      26: invokevirtual #32                 // Method closeFile:()V
      29: goto          33
      32: astore_1
      33: aload_0
      34: invokedynamic #34,  0             // InvokeDynamic #3:run:(Lcom/sun/javafx/font/FontFileWriter;)Ljava/security/PrivilegedExceptionAction;
      39: invokestatic  #16                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      42: pop
      43: getstatic     #22                 // Field com/sun/javafx/font/PrismFontFactory.debugFonts:Z
      46: ifeq          67
      49: getstatic     #23                 // Field java/lang/System.err:Ljava/io/PrintStream;
      52: aload_0
      53: getfield      #13                 // Field file:Ljava/io/File;
      56: invokevirtual #24                 // Method java/io/File.getPath:()Ljava/lang/String;
      59: invokedynamic #35,  0             // InvokeDynamic #4:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      64: invokevirtual #26                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      67: goto          71
      70: astore_1
      71: aload_0
      72: aconst_null
      73: putfield      #13                 // Field file:Ljava/io/File;
      76: aload_0
      77: aconst_null
      78: putfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
      81: return
    Exception table:
       from    to  target type
          25    29    32   Class java/lang/Exception
          33    67    70   Class java/lang/Exception

  public boolean isTracking();
    Code:
       0: aload_0
       1: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  private void checkTracker(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
       4: ifnull        56
       7: iload_1
       8: iflt          22
      11: aload_0
      12: getfield      #11                 // Field pos:I
      15: ldc           #37                 // int 33554432
      17: iload_1
      18: isub
      19: if_icmple     32
      22: new           #6                  // class java/io/IOException
      25: dup
      26: ldc           #38                 // String File too big.
      28: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      36: invokevirtual #39                 // Method com/sun/javafx/font/FontFileWriter$FontTracker.getNumBytes:()I
      39: ldc           #40                 // int 335544320
      41: iload_1
      42: isub
      43: if_icmple     56
      46: new           #6                  // class java/io/IOException
      49: dup
      50: ldc           #41                 // String Total files too big.
      52: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: return

  private void checkSize(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
       4: ifnull        30
       7: aload_0
       8: iload_1
       9: invokespecial #9                  // Method checkTracker:(I)V
      12: aload_0
      13: getfield      #4                  // Field tracker:Lcom/sun/javafx/font/FontFileWriter$FontTracker;
      16: iload_1
      17: invokevirtual #42                 // Method com/sun/javafx/font/FontFileWriter$FontTracker.addBytes:(I)V
      20: aload_0
      21: dup
      22: getfield      #14                 // Field writtenBytes:I
      25: iload_1
      26: iadd
      27: putfield      #14                 // Field writtenBytes:I
      30: return

  private void setHeaderPos(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #43                 // Field headerPos:I
       5: return

  public void writeHeader(int, short) throws java.io.IOException;
    Code:
       0: bipush        12
       2: bipush        16
       4: iload_2
       5: imul
       6: iadd
       7: istore_3
       8: aload_0
       9: iload_3
      10: invokespecial #45                 // Method checkSize:(I)V
      13: aload_0
      14: iload_3
      15: newarray       byte
      17: putfield      #27                 // Field header:[B
      20: iload_2
      21: istore        4
      23: iload         4
      25: iload         4
      27: iconst_1
      28: ishr
      29: ior
      30: i2s
      31: istore        4
      33: iload         4
      35: iload         4
      37: iconst_2
      38: ishr
      39: ior
      40: i2s
      41: istore        4
      43: iload         4
      45: iload         4
      47: iconst_4
      48: ishr
      49: ior
      50: i2s
      51: istore        4
      53: iload         4
      55: iload         4
      57: bipush        8
      59: ishr
      60: ior
      61: i2s
      62: istore        4
      64: iload         4
      66: iload         4
      68: iconst_1
      69: ishr
      70: iconst_m1
      71: ixor
      72: iand
      73: i2s
      74: istore        4
      76: iload         4
      78: bipush        16
      80: imul
      81: i2s
      82: istore        5
      84: iconst_0
      85: istore        6
      87: iload         4
      89: iconst_1
      90: if_icmple     110
      93: iload         6
      95: iconst_1
      96: iadd
      97: i2s
      98: istore        6
     100: iload         4
     102: iconst_1
     103: ishr
     104: i2s
     105: istore        4
     107: goto          87
     110: iload_2
     111: bipush        16
     113: imul
     114: iload         5
     116: isub
     117: i2s
     118: istore        7
     120: aload_0
     121: iconst_0
     122: invokespecial #46                 // Method setHeaderPos:(I)V
     125: aload_0
     126: iload_1
     127: invokespecial #47                 // Method writeInt:(I)V
     130: aload_0
     131: iload_2
     132: invokespecial #48                 // Method writeShort:(S)V
     135: aload_0
     136: iload         5
     138: invokespecial #48                 // Method writeShort:(S)V
     141: aload_0
     142: iload         6
     144: invokespecial #48                 // Method writeShort:(S)V
     147: aload_0
     148: iload         7
     150: invokespecial #48                 // Method writeShort:(S)V
     153: return

  public void writeDirectoryEntry(int, int, int, int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: bipush        12
       3: bipush        16
       5: iload_1
       6: imul
       7: iadd
       8: invokespecial #46                 // Method setHeaderPos:(I)V
      11: aload_0
      12: iload_2
      13: invokespecial #47                 // Method writeInt:(I)V
      16: aload_0
      17: iload_3
      18: invokespecial #47                 // Method writeInt:(I)V
      21: aload_0
      22: iload         4
      24: invokespecial #47                 // Method writeInt:(I)V
      27: aload_0
      28: iload         5
      30: invokespecial #47                 // Method writeInt:(I)V
      33: return

  private void writeInt(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field header:[B
       4: aload_0
       5: dup
       6: getfield      #43                 // Field headerPos:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #43                 // Field headerPos:I
      15: iload_1
      16: ldc           #49                 // int -16777216
      18: iand
      19: bipush        24
      21: ishr
      22: i2b
      23: bastore
      24: aload_0
      25: getfield      #27                 // Field header:[B
      28: aload_0
      29: dup
      30: getfield      #43                 // Field headerPos:I
      33: dup_x1
      34: iconst_1
      35: iadd
      36: putfield      #43                 // Field headerPos:I
      39: iload_1
      40: ldc           #50                 // int 16711680
      42: iand
      43: bipush        16
      45: ishr
      46: i2b
      47: bastore
      48: aload_0
      49: getfield      #27                 // Field header:[B
      52: aload_0
      53: dup
      54: getfield      #43                 // Field headerPos:I
      57: dup_x1
      58: iconst_1
      59: iadd
      60: putfield      #43                 // Field headerPos:I
      63: iload_1
      64: ldc           #51                 // int 65280
      66: iand
      67: bipush        8
      69: ishr
      70: i2b
      71: bastore
      72: aload_0
      73: getfield      #27                 // Field header:[B
      76: aload_0
      77: dup
      78: getfield      #43                 // Field headerPos:I
      81: dup_x1
      82: iconst_1
      83: iadd
      84: putfield      #43                 // Field headerPos:I
      87: iload_1
      88: sipush        255
      91: iand
      92: i2b
      93: bastore
      94: return

  private void writeShort(short) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field header:[B
       4: aload_0
       5: dup
       6: getfield      #43                 // Field headerPos:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #43                 // Field headerPos:I
      15: iload_1
      16: ldc           #51                 // int 65280
      18: iand
      19: bipush        8
      21: ishr
      22: i2b
      23: bastore
      24: aload_0
      25: getfield      #27                 // Field header:[B
      28: aload_0
      29: dup
      30: getfield      #43                 // Field headerPos:I
      33: dup_x1
      34: iconst_1
      35: iadd
      36: putfield      #43                 // Field headerPos:I
      39: iload_1
      40: sipush        255
      43: iand
      44: i2b
      45: bastore
      46: return

  public void writeBytes(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #52                 // Method writeBytes:([BII)V
       8: return

  public void writeBytes(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_3
       2: invokespecial #45                 // Method checkSize:(I)V
       5: aload_0
       6: getfield      #5                  // Field raFile:Ljava/io/RandomAccessFile;
       9: aload_1
      10: iload_2
      11: iload_3
      12: invokevirtual #53                 // Method java/io/RandomAccessFile.write:([BII)V
      15: aload_0
      16: dup
      17: getfield      #11                 // Field pos:I
      20: iload_3
      21: iadd
      22: putfield      #11                 // Field pos:I
      25: return

  static boolean hasTempPermission();
    Code:
       0: invokestatic  #54                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: ifnonnull     8
       6: iconst_1
       7: ireturn
       8: aconst_null
       9: astore_0
      10: iconst_0
      11: istore_1
      12: ldc           #55                 // String +JXF
      14: ldc           #56                 // String .tmp
      16: iconst_0
      17: anewarray     #57                 // class java/nio/file/attribute/FileAttribute
      20: invokestatic  #58                 // Method java/nio/file/Files.createTempFile:(Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;
      23: invokeinterface #59,  1           // InterfaceMethod java/nio/file/Path.toFile:()Ljava/io/File;
      28: astore_0
      29: aload_0
      30: invokevirtual #60                 // Method java/io/File.delete:()Z
      33: pop
      34: aconst_null
      35: astore_0
      36: iconst_1
      37: istore_1
      38: goto          42
      41: astore_2
      42: iload_1
      43: ireturn
    Exception table:
       from    to  target type
          12    38    41   Class java/lang/Throwable

  private java.lang.Void lambda$deleteFile$2() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #13                 // Field file:Ljava/io/File;
       4: invokevirtual #60                 // Method java/io/File.delete:()Z
       7: pop
       8: aconst_null
       9: areturn

  private java.io.RandomAccessFile lambda$openFile$1() throws java.lang.Exception;
    Code:
       0: new           #20                 // class java/io/RandomAccessFile
       3: dup
       4: aload_0
       5: getfield      #13                 // Field file:Ljava/io/File;
       8: ldc           #62                 // String rw
      10: invokespecial #63                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
      13: areturn

  private static java.io.File lambda$openFile$0() throws java.lang.Exception;
    Code:
       0: ldc           #55                 // String +JXF
       2: ldc           #56                 // String .tmp
       4: iconst_0
       5: anewarray     #57                 // class java/nio/file/attribute/FileAttribute
       8: invokestatic  #58                 // Method java/nio/file/Files.createTempFile:(Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;
      11: invokeinterface #59,  1           // InterfaceMethod java/nio/file/Path.toFile:()Ljava/io/File;
      16: areturn
      17: astore_0
      18: new           #6                  // class java/io/IOException
      21: dup
      22: ldc           #64                 // String Unable to create temporary file
      24: invokespecial #8                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      27: athrow
    Exception table:
       from    to  target type
           0    16    17   Class java/io/IOException
}
