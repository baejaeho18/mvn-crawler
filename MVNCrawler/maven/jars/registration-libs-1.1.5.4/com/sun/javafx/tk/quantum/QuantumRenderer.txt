Compiled from "QuantumRenderer.java"
final class com.sun.javafx.tk.quantum.QuantumRenderer extends java.util.concurrent.ThreadPoolExecutor {
  private static boolean usePurgatory;

  private static final java.util.concurrent.atomic.AtomicReference<com.sun.javafx.tk.quantum.QuantumRenderer> instanceReference;

  private java.lang.Thread _renderer;

  private java.lang.Throwable _initThrowable;

  private java.util.concurrent.CountDownLatch initLatch;

  static final boolean $assertionsDisabled;

  private com.sun.javafx.tk.quantum.QuantumRenderer();
    Code:
       0: aload_0
       1: iconst_1
       2: iconst_1
       3: lconst_0
       4: getstatic     #4                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       7: new           #5                  // class java/util/concurrent/LinkedBlockingQueue
      10: dup
      11: invokespecial #6                  // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
      14: invokespecial #7                  // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)V
      17: aload_0
      18: aconst_null
      19: putfield      #8                  // Field _initThrowable:Ljava/lang/Throwable;
      22: aload_0
      23: new           #9                  // class java/util/concurrent/CountDownLatch
      26: dup
      27: iconst_1
      28: invokespecial #10                 // Method java/util/concurrent/CountDownLatch."<init>":(I)V
      31: putfield      #2                  // Field initLatch:Ljava/util/concurrent/CountDownLatch;
      34: aload_0
      35: new           #11                 // class com/sun/javafx/tk/quantum/QuantumRenderer$QuantumThreadFactory
      38: dup
      39: aload_0
      40: aconst_null
      41: invokespecial #12                 // Method com/sun/javafx/tk/quantum/QuantumRenderer$QuantumThreadFactory."<init>":(Lcom/sun/javafx/tk/quantum/QuantumRenderer;Lcom/sun/javafx/tk/quantum/QuantumRenderer$1;)V
      44: invokevirtual #13                 // Method setThreadFactory:(Ljava/util/concurrent/ThreadFactory;)V
      47: return

  protected java.lang.Throwable initThrowable();
    Code:
       0: aload_0
       1: getfield      #8                  // Field _initThrowable:Ljava/lang/Throwable;
       4: areturn

  private void setInitThrowable(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field _initThrowable:Ljava/lang/Throwable;
       5: return

  protected void createResourceFactory();
    Code:
       0: new           #9                  // class java/util/concurrent/CountDownLatch
       3: dup
       4: iconst_1
       5: invokespecial #10                 // Method java/util/concurrent/CountDownLatch."<init>":(I)V
       8: astore_1
       9: aload_1
      10: invokedynamic #14,  0             // InvokeDynamic #0:done:(Ljava/util/concurrent/CountDownLatch;)Lcom/sun/javafx/tk/CompletionListener;
      15: astore_2
      16: invokedynamic #15,  0             // InvokeDynamic #1:run:()Ljava/lang/Runnable;
      21: astore_3
      22: new           #16                 // class com/sun/javafx/tk/RenderJob
      25: dup
      26: aload_3
      27: aload_2
      28: invokespecial #17                 // Method com/sun/javafx/tk/RenderJob."<init>":(Ljava/lang/Runnable;Lcom/sun/javafx/tk/CompletionListener;)V
      31: astore        4
      33: aload_0
      34: aload         4
      36: invokevirtual #18                 // Method submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;
      39: pop
      40: aload_1
      41: invokevirtual #19                 // Method java/util/concurrent/CountDownLatch.await:()V
      44: goto          57
      47: astore        5
      49: aload         5
      51: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      54: invokevirtual #22                 // Method java/lang/Throwable.printStackTrace:(Ljava/io/PrintStream;)V
      57: return
    Exception table:
       from    to  target type
          40    44    47   Class java/lang/Throwable

  protected void disposePresentable(com.sun.prism.Presentable);
    Code:
       0: getstatic     #23                 // Field $assertionsDisabled:Z
       3: ifne          27
       6: invokestatic  #24                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: aload_0
      10: getfield      #1                  // Field _renderer:Ljava/lang/Thread;
      13: invokevirtual #25                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      16: ifeq          27
      19: new           #26                 // class java/lang/AssertionError
      22: dup
      23: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
      26: athrow
      27: aload_1
      28: instanceof    #28                 // class com/sun/prism/GraphicsResource
      31: ifeq          64
      34: aload_1
      35: checkcast     #28                 // class com/sun/prism/GraphicsResource
      38: astore_2
      39: aload_2
      40: invokedynamic #29,  0             // InvokeDynamic #2:run:(Lcom/sun/prism/GraphicsResource;)Ljava/lang/Runnable;
      45: astore_3
      46: new           #16                 // class com/sun/javafx/tk/RenderJob
      49: dup
      50: aload_3
      51: aconst_null
      52: invokespecial #17                 // Method com/sun/javafx/tk/RenderJob."<init>":(Ljava/lang/Runnable;Lcom/sun/javafx/tk/CompletionListener;)V
      55: astore        4
      57: aload_0
      58: aload         4
      60: invokevirtual #18                 // Method submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;
      63: pop
      64: return

  protected void stopRenderer();
    Code:
       0: aload_0
       1: invokedynamic #30,  0             // InvokeDynamic #3:run:(Lcom/sun/javafx/tk/quantum/QuantumRenderer;)Ljava/security/PrivilegedAction;
       6: invokestatic  #31                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
       9: pop
      10: getstatic     #32                 // Field com/sun/prism/impl/PrismSettings.verbose:Z
      13: ifeq          24
      16: getstatic     #33                 // Field java/lang/System.out:Ljava/io/PrintStream;
      19: ldc           #34                 // String QuantumRenderer: shutdown
      21: invokevirtual #35                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      24: getstatic     #23                 // Field $assertionsDisabled:Z
      27: ifne          45
      30: aload_0
      31: invokevirtual #36                 // Method isShutdown:()Z
      34: ifne          45
      37: new           #26                 // class java/lang/AssertionError
      40: dup
      41: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
      44: athrow
      45: getstatic     #37                 // Field instanceReference:Ljava/util/concurrent/atomic/AtomicReference;
      48: aconst_null
      49: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      52: return

  protected <T> java.util.concurrent.RunnableFuture<T> newTaskFor(java.lang.Runnable, T);
    Code:
       0: aload_1
       1: checkcast     #16                 // class com/sun/javafx/tk/RenderJob
       4: areturn

  protected java.util.concurrent.Future submitRenderJob(com.sun.javafx.tk.RenderJob);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;
       5: areturn

  public void afterExecute(java.lang.Runnable, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #39                 // Method java/util/concurrent/ThreadPoolExecutor.afterExecute:(Ljava/lang/Runnable;Ljava/lang/Throwable;)V
       6: getstatic     #40                 // Field usePurgatory:Z
       9: ifeq          30
      12: invokestatic  #41                 // Method com/sun/glass/ui/Screen.getMainScreen:()Lcom/sun/glass/ui/Screen;
      15: astore_3
      16: aload_3
      17: invokestatic  #42                 // Method com/sun/scenario/effect/impl/prism/PrFilterContext.getInstance:(Lcom/sun/glass/ui/Screen;)Lcom/sun/scenario/effect/impl/prism/PrFilterContext;
      20: invokestatic  #43                 // Method com/sun/scenario/effect/impl/Renderer.getRenderer:(Lcom/sun/scenario/effect/FilterContext;)Lcom/sun/scenario/effect/impl/Renderer;
      23: astore        4
      25: aload         4
      27: invokevirtual #44                 // Method com/sun/scenario/effect/impl/Renderer.releasePurgatory:()V
      30: return

  void checkRendererIdle();
    Code:
       0: getstatic     #45                 // Field com/sun/prism/impl/PrismSettings.threadCheck:Z
       3: ifeq          146
       6: invokestatic  #46                 // Method com/sun/javafx/tk/quantum/PaintCollector.getInstance:()Lcom/sun/javafx/tk/quantum/PaintCollector;
       9: astore_1
      10: getstatic     #47                 // Field com/sun/javafx/tk/quantum/ViewPainter.renderLock:Ljava/util/concurrent/locks/ReentrantLock;
      13: invokevirtual #48                 // Method java/util/concurrent/locks/ReentrantLock.isLocked:()Z
      16: ifeq          32
      19: getstatic     #47                 // Field com/sun/javafx/tk/quantum/ViewPainter.renderLock:Ljava/util/concurrent/locks/ReentrantLock;
      22: invokevirtual #49                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      25: ifne          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: istore_2
      34: iload_2
      35: ifeq          146
      38: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      41: aload_1
      42: invokevirtual #50                 // Method com/sun/javafx/tk/quantum/PaintCollector.hasDirty:()Z
      45: invokedynamic #51,  0             // InvokeDynamic #4:makeConcatWithConstants:(Z)Ljava/lang/String;
      50: invokevirtual #35                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      53: invokestatic  #52                 // Method com/sun/javafx/tk/quantum/QuantumToolkit.getFxUserThread:()Ljava/lang/Thread;
      56: invokevirtual #53                 // Method java/lang/Thread.getStackTrace:()[Ljava/lang/StackTraceElement;
      59: astore_3
      60: aload_3
      61: arraylength
      62: istore        4
      64: iconst_0
      65: istore        5
      67: iload         5
      69: iload         4
      71: if_icmpge     99
      74: aload_3
      75: iload         5
      77: aaload
      78: astore        6
      80: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      83: aload         6
      85: invokedynamic #54,  0             // InvokeDynamic #5:makeConcatWithConstants:(Ljava/lang/StackTraceElement;)Ljava/lang/String;
      90: invokevirtual #35                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      93: iinc          5, 1
      96: goto          67
      99: aload_0
     100: getfield      #1                  // Field _renderer:Ljava/lang/Thread;
     103: invokevirtual #53                 // Method java/lang/Thread.getStackTrace:()[Ljava/lang/StackTraceElement;
     106: astore_3
     107: aload_3
     108: arraylength
     109: istore        4
     111: iconst_0
     112: istore        5
     114: iload         5
     116: iload         4
     118: if_icmpge     146
     121: aload_3
     122: iload         5
     124: aaload
     125: astore        6
     127: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
     130: aload         6
     132: invokedynamic #55,  0             // InvokeDynamic #6:makeConcatWithConstants:(Ljava/lang/StackTraceElement;)Ljava/lang/String;
     137: invokevirtual #35                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     140: iinc          5, 1
     143: goto          114
     146: return

  public static synchronized com.sun.javafx.tk.quantum.QuantumRenderer getInstance();
    Code:
       0: getstatic     #37                 // Field instanceReference:Ljava/util/concurrent/atomic/AtomicReference;
       3: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       6: ifnonnull     123
       9: ldc           #57                 // class com/sun/javafx/tk/quantum/QuantumRenderer
      11: dup
      12: astore_0
      13: monitorenter
      14: aconst_null
      15: astore_1
      16: new           #57                 // class com/sun/javafx/tk/quantum/QuantumRenderer
      19: dup
      20: invokespecial #58                 // Method "<init>":()V
      23: astore_1
      24: aload_1
      25: invokevirtual #59                 // Method prestartCoreThread:()Z
      28: pop
      29: aload_1
      30: getfield      #2                  // Field initLatch:Ljava/util/concurrent/CountDownLatch;
      33: invokevirtual #19                 // Method java/util/concurrent/CountDownLatch.await:()V
      36: goto          59
      39: astore_2
      40: aload_1
      41: ifnull        49
      44: aload_1
      45: aload_2
      46: invokespecial #3                  // Method setInitThrowable:(Ljava/lang/Throwable;)V
      49: getstatic     #32                 // Field com/sun/prism/impl/PrismSettings.verbose:Z
      52: ifeq          59
      55: aload_2
      56: invokevirtual #60                 // Method java/lang/Throwable.printStackTrace:()V
      59: aload_1
      60: ifnull        106
      63: aload_1
      64: invokevirtual #61                 // Method initThrowable:()Ljava/lang/Throwable;
      67: ifnull        106
      70: getstatic     #62                 // Field com/sun/prism/impl/PrismSettings.noFallback:Z
      73: ifeq          94
      76: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      79: ldc           #63                 // String Cannot initialize a graphics pipeline, and Prism fallback is disabled
      81: invokevirtual #35                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      84: new           #64                 // class java/lang/InternalError
      87: dup
      88: ldc           #65                 // String Could not initialize prism toolkit, and the fallback is disabled.
      90: invokespecial #66                 // Method java/lang/InternalError."<init>":(Ljava/lang/String;)V
      93: athrow
      94: new           #67                 // class java/lang/RuntimeException
      97: dup
      98: aload_1
      99: invokevirtual #61                 // Method initThrowable:()Ljava/lang/Throwable;
     102: invokespecial #68                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     105: athrow
     106: getstatic     #37                 // Field instanceReference:Ljava/util/concurrent/atomic/AtomicReference;
     109: aload_1
     110: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     113: aload_0
     114: monitorexit
     115: goto          123
     118: astore_3
     119: aload_0
     120: monitorexit
     121: aload_3
     122: athrow
     123: getstatic     #37                 // Field instanceReference:Ljava/util/concurrent/atomic/AtomicReference;
     126: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     129: checkcast     #57                 // class com/sun/javafx/tk/quantum/QuantumRenderer
     132: areturn
    Exception table:
       from    to  target type
          16    36    39   Class java/lang/Throwable
          14   115   118   any
         118   121   118   any

  private java.lang.Void lambda$stopRenderer$4();
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method shutdown:()V
       4: aconst_null
       5: areturn

  private static void lambda$disposePresentable$3(com.sun.prism.GraphicsResource);
    Code:
       0: aload_0
       1: invokeinterface #70,  1           // InterfaceMethod com/sun/prism/GraphicsResource.dispose:()V
       6: return

  private static void lambda$createResourceFactory$2();
    Code:
       0: invokestatic  #71                 // Method com/sun/prism/GraphicsPipeline.getDefaultResourceFactory:()Lcom/sun/prism/ResourceFactory;
       3: astore_0
       4: getstatic     #23                 // Field $assertionsDisabled:Z
       7: ifne          22
      10: aload_0
      11: ifnonnull     22
      14: new           #26                 // class java/lang/AssertionError
      17: dup
      18: invokespecial #27                 // Method java/lang/AssertionError."<init>":()V
      21: athrow
      22: return

  private static void lambda$createResourceFactory$1(java.util.concurrent.CountDownLatch, com.sun.javafx.tk.RenderJob);
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method java/util/concurrent/CountDownLatch.countDown:()V
       4: return

  private static java.lang.Boolean lambda$static$0();
    Code:
       0: ldc           #73                 // String decora.purgatory
       2: invokestatic  #74                 // Method java/lang/Boolean.getBoolean:(Ljava/lang/String;)Z
       5: invokestatic  #75                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       8: areturn

  static void access$100(com.sun.javafx.tk.quantum.QuantumRenderer, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method setInitThrowable:(Ljava/lang/Throwable;)V
       5: return

  static java.util.concurrent.CountDownLatch access$200(com.sun.javafx.tk.quantum.QuantumRenderer);
    Code:
       0: aload_0
       1: getfield      #2                  // Field initLatch:Ljava/util/concurrent/CountDownLatch;
       4: areturn

  static java.lang.Thread access$302(com.sun.javafx.tk.quantum.QuantumRenderer, java.lang.Thread);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field _renderer:Ljava/lang/Thread;
       6: areturn

  static java.lang.Thread access$300(com.sun.javafx.tk.quantum.QuantumRenderer);
    Code:
       0: aload_0
       1: getfield      #1                  // Field _renderer:Ljava/lang/Thread;
       4: areturn

  static {};
    Code:
       0: ldc           #57                 // class com/sun/javafx/tk/quantum/QuantumRenderer
       2: invokevirtual #76                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #23                 // Field $assertionsDisabled:Z
      16: invokedynamic #77,  0             // InvokeDynamic #7:run:()Ljava/security/PrivilegedAction;
      21: invokestatic  #31                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      24: checkcast     #78                 // class java/lang/Boolean
      27: invokevirtual #79                 // Method java/lang/Boolean.booleanValue:()Z
      30: putstatic     #40                 // Field usePurgatory:Z
      33: new           #80                 // class java/util/concurrent/atomic/AtomicReference
      36: dup
      37: aconst_null
      38: invokespecial #81                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      41: putstatic     #37                 // Field instanceReference:Ljava/util/concurrent/atomic/AtomicReference;
      44: return
}
