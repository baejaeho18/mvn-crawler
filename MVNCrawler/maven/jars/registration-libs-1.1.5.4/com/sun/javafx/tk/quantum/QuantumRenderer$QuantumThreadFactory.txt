Compiled from "QuantumRenderer.java"
class com.sun.javafx.tk.quantum.QuantumRenderer$QuantumThreadFactory implements java.util.concurrent.ThreadFactory {
  final java.util.concurrent.atomic.AtomicInteger threadNumber;

  static final boolean $assertionsDisabled;

  final com.sun.javafx.tk.quantum.QuantumRenderer this$0;

  private com.sun.javafx.tk.quantum.QuantumRenderer$QuantumThreadFactory(com.sun.javafx.tk.quantum.QuantumRenderer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lcom/sun/javafx/tk/quantum/QuantumRenderer;
       5: aload_0
       6: invokespecial #3                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: new           #4                  // class java/util/concurrent/atomic/AtomicInteger
      13: dup
      14: iconst_0
      15: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      18: putfield      #6                  // Field threadNumber:Ljava/util/concurrent/atomic/AtomicInteger;
      21: return

  public java.lang.Thread newThread(java.lang.Runnable);
    Code:
       0: new           #7                  // class com/sun/javafx/tk/quantum/QuantumRenderer$PipelineRunnable
       3: dup
       4: aload_0
       5: getfield      #2                  // Field this$0:Lcom/sun/javafx/tk/quantum/QuantumRenderer;
       8: aload_1
       9: invokespecial #8                  // Method com/sun/javafx/tk/quantum/QuantumRenderer$PipelineRunnable."<init>":(Lcom/sun/javafx/tk/quantum/QuantumRenderer;Ljava/lang/Runnable;)V
      12: astore_2
      13: aload_0
      14: getfield      #2                  // Field this$0:Lcom/sun/javafx/tk/quantum/QuantumRenderer;
      17: aload_0
      18: aload_2
      19: invokedynamic #9,  0              // InvokeDynamic #0:run:(Lcom/sun/javafx/tk/quantum/QuantumRenderer$QuantumThreadFactory;Lcom/sun/javafx/tk/quantum/QuantumRenderer$PipelineRunnable;)Ljava/security/PrivilegedAction;
      24: invokestatic  #10                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      27: checkcast     #11                 // class java/lang/Thread
      30: invokestatic  #12                 // Method com/sun/javafx/tk/quantum/QuantumRenderer.access$302:(Lcom/sun/javafx/tk/quantum/QuantumRenderer;Ljava/lang/Thread;)Ljava/lang/Thread;
      33: pop
      34: getstatic     #13                 // Field $assertionsDisabled:Z
      37: ifne          59
      40: aload_0
      41: getfield      #6                  // Field threadNumber:Ljava/util/concurrent/atomic/AtomicInteger;
      44: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      47: iconst_1
      48: if_icmpeq     59
      51: new           #15                 // class java/lang/AssertionError
      54: dup
      55: invokespecial #16                 // Method java/lang/AssertionError."<init>":()V
      58: athrow
      59: aload_0
      60: getfield      #2                  // Field this$0:Lcom/sun/javafx/tk/quantum/QuantumRenderer;
      63: invokestatic  #17                 // Method com/sun/javafx/tk/quantum/QuantumRenderer.access$300:(Lcom/sun/javafx/tk/quantum/QuantumRenderer;)Ljava/lang/Thread;
      66: areturn

  private java.lang.Thread lambda$newThread$1(com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable);
    Code:
       0: new           #11                 // class java/lang/Thread
       3: dup
       4: aload_1
       5: invokespecial #18                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
       8: astore_2
       9: aload_2
      10: aload_0
      11: getfield      #6                  // Field threadNumber:Ljava/util/concurrent/atomic/AtomicInteger;
      14: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      17: invokedynamic #20,  0             // InvokeDynamic #1:makeConcatWithConstants:(I)Ljava/lang/String;
      22: invokevirtual #21                 // Method java/lang/Thread.setName:(Ljava/lang/String;)V
      25: aload_2
      26: iconst_1
      27: invokevirtual #22                 // Method java/lang/Thread.setDaemon:(Z)V
      30: aload_2
      31: invokedynamic #23,  0             // InvokeDynamic #2:uncaughtException:()Ljava/lang/Thread$UncaughtExceptionHandler;
      36: invokevirtual #24                 // Method java/lang/Thread.setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
      39: aload_2
      40: areturn

  private static void lambda$newThread$0(java.lang.Thread, java.lang.Throwable);
    Code:
       0: getstatic     #25                 // Field java/lang/System.err:Ljava/io/PrintStream;
       3: aload_0
       4: invokevirtual #26                 // Method java/lang/Thread.getName:()Ljava/lang/String;
       7: aload_1
       8: invokevirtual #27                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #28                 // Method java/lang/Class.getName:()Ljava/lang/String;
      14: invokedynamic #29,  0             // InvokeDynamic #3:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      19: invokevirtual #30                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      22: aload_1
      23: invokevirtual #31                 // Method java/lang/Throwable.printStackTrace:()V
      26: return

  com.sun.javafx.tk.quantum.QuantumRenderer$QuantumThreadFactory(com.sun.javafx.tk.quantum.QuantumRenderer, com.sun.javafx.tk.quantum.QuantumRenderer$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lcom/sun/javafx/tk/quantum/QuantumRenderer;)V
       5: return

  static {};
    Code:
       0: ldc           #32                 // class com/sun/javafx/tk/quantum/QuantumRenderer
       2: invokevirtual #33                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #13                 // Field $assertionsDisabled:Z
      16: return
}
