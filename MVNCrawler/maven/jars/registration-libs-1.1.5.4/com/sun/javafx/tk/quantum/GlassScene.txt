Compiled from "GlassScene.java"
abstract class com.sun.javafx.tk.quantum.GlassScene implements com.sun.javafx.tk.TKScene {
  private com.sun.javafx.tk.quantum.GlassStage stage;

  protected com.sun.javafx.tk.TKSceneListener sceneListener;

  protected com.sun.javafx.tk.TKDragGestureListener dragGestureListener;

  protected com.sun.javafx.tk.TKDragSourceListener dragSourceListener;

  protected com.sun.javafx.tk.TKDropTargetListener dropTargetListener;

  protected javafx.scene.input.InputMethodRequests inputMethodRequests;

  private com.sun.javafx.tk.TKScenePaintListener scenePaintListener;

  private com.sun.javafx.sg.prism.NGNode root;

  private com.sun.javafx.sg.prism.NGCamera camera;

  protected com.sun.prism.paint.Paint fillPaint;

  private volatile boolean entireSceneDirty;

  private boolean doPresent;

  private final java.util.concurrent.atomic.AtomicBoolean painting;

  private final boolean depthBuffer;

  private final boolean msaa;

  com.sun.javafx.tk.quantum.SceneState sceneState;

  private java.security.AccessControlContext accessCtrlCtx;

  private com.sun.javafx.sg.prism.NGLightBase[] lights;

  static final boolean $assertionsDisabled;

  protected com.sun.javafx.tk.quantum.GlassScene(boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field entireSceneDirty:Z
       9: aload_0
      10: iconst_1
      11: putfield      #3                  // Field doPresent:Z
      14: aload_0
      15: new           #4                  // class java/util/concurrent/atomic/AtomicBoolean
      18: dup
      19: iconst_0
      20: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      23: putfield      #6                  // Field painting:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: aload_0
      27: aconst_null
      28: putfield      #7                  // Field accessCtrlCtx:Ljava/security/AccessControlContext;
      31: aload_0
      32: iload_2
      33: putfield      #8                  // Field msaa:Z
      36: aload_0
      37: iload_1
      38: putfield      #9                  // Field depthBuffer:Z
      41: aload_0
      42: new           #10                 // class com/sun/javafx/tk/quantum/SceneState
      45: dup
      46: aload_0
      47: invokespecial #11                 // Method com/sun/javafx/tk/quantum/SceneState."<init>":(Lcom/sun/javafx/tk/quantum/GlassScene;)V
      50: putfield      #12                 // Field sceneState:Lcom/sun/javafx/tk/quantum/SceneState;
      53: return

  public void dispose();
    Code:
       0: getstatic     #13                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #14                 // Field stage:Lcom/sun/javafx/tk/quantum/GlassStage;
      10: ifnull        21
      13: new           #15                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #16                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aconst_null
      23: putfield      #17                 // Field root:Lcom/sun/javafx/sg/prism/NGNode;
      26: aload_0
      27: aconst_null
      28: putfield      #18                 // Field camera:Lcom/sun/javafx/sg/prism/NGCamera;
      31: aload_0
      32: aconst_null
      33: putfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      36: aload_0
      37: aconst_null
      38: putfield      #20                 // Field sceneListener:Lcom/sun/javafx/tk/TKSceneListener;
      41: aload_0
      42: aconst_null
      43: putfield      #21                 // Field dragGestureListener:Lcom/sun/javafx/tk/TKDragGestureListener;
      46: aload_0
      47: aconst_null
      48: putfield      #22                 // Field dragSourceListener:Lcom/sun/javafx/tk/TKDragSourceListener;
      51: aload_0
      52: aconst_null
      53: putfield      #23                 // Field dropTargetListener:Lcom/sun/javafx/tk/TKDropTargetListener;
      56: aload_0
      57: aconst_null
      58: putfield      #24                 // Field inputMethodRequests:Ljavafx/scene/input/InputMethodRequests;
      61: aload_0
      62: aconst_null
      63: putfield      #25                 // Field scenePaintListener:Lcom/sun/javafx/tk/TKScenePaintListener;
      66: aload_0
      67: aconst_null
      68: putfield      #12                 // Field sceneState:Lcom/sun/javafx/tk/quantum/SceneState;
      71: return

  public final java.security.AccessControlContext getAccessControlContext();
    Code:
       0: aload_0
       1: getfield      #7                  // Field accessCtrlCtx:Ljava/security/AccessControlContext;
       4: ifnonnull     17
       7: new           #26                 // class java/lang/RuntimeException
      10: dup
      11: ldc           #27                 // String Scene security context has not been set!
      13: invokespecial #28                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #7                  // Field accessCtrlCtx:Ljava/security/AccessControlContext;
      21: areturn

  public final void setSecurityContext(java.security.AccessControlContext);
    Code:
       0: aload_0
       1: getfield      #7                  // Field accessCtrlCtx:Ljava/security/AccessControlContext;
       4: ifnull        17
       7: new           #26                 // class java/lang/RuntimeException
      10: dup
      11: ldc           #29                 // String Scene security context has been already set!
      13: invokespecial #28                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: invokestatic  #30                 // Method java/security/AccessController.getContext:()Ljava/security/AccessControlContext;
      20: astore_2
      21: aload_0
      22: invokedynamic #31,  0             // InvokeDynamic #0:run:()Ljava/security/PrivilegedAction;
      27: aload_2
      28: aload_1
      29: invokestatic  #32                 // Method com/sun/javafx/tk/quantum/GlassStage.doIntersectionPrivilege:(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;Ljava/security/AccessControlContext;)Ljava/security/AccessControlContext;
      32: putfield      #7                  // Field accessCtrlCtx:Ljava/security/AccessControlContext;
      35: return

  public void waitForRenderingToComplete();
    Code:
       0: invokestatic  #33                 // Method com/sun/javafx/tk/quantum/PaintCollector.getInstance:()Lcom/sun/javafx/tk/quantum/PaintCollector;
       3: invokevirtual #34                 // Method com/sun/javafx/tk/quantum/PaintCollector.waitForRenderingToComplete:()V
       6: return

  public void waitForSynchronization();
    Code:
       0: getstatic     #35                 // Field com/sun/javafx/tk/quantum/ViewPainter.renderLock:Ljava/util/concurrent/locks/ReentrantLock;
       3: invokevirtual #36                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       6: return

  public void releaseSynchronization(boolean);
    Code:
       0: iload_1
       1: ifeq          8
       4: aload_0
       5: invokevirtual #37                 // Method updateSceneState:()V
       8: getstatic     #35                 // Field com/sun/javafx/tk/quantum/ViewPainter.renderLock:Ljava/util/concurrent/locks/ReentrantLock;
      11: invokevirtual #38                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      14: return

  boolean getDepthBuffer();
    Code:
       0: aload_0
       1: getfield      #9                  // Field depthBuffer:Z
       4: ireturn

  boolean isMSAA();
    Code:
       0: aload_0
       1: getfield      #8                  // Field msaa:Z
       4: ireturn

  protected abstract boolean isSynchronous();

  public void setTKSceneListener(com.sun.javafx.tk.TKSceneListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field sceneListener:Lcom/sun/javafx/tk/TKSceneListener;
       5: return

  public synchronized void setTKScenePaintListener(com.sun.javafx.tk.TKScenePaintListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field scenePaintListener:Lcom/sun/javafx/tk/TKScenePaintListener;
       5: return

  public void setTKDropTargetListener(com.sun.javafx.tk.TKDropTargetListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field dropTargetListener:Lcom/sun/javafx/tk/TKDropTargetListener;
       5: return

  public void setTKDragSourceListener(com.sun.javafx.tk.TKDragSourceListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field dragSourceListener:Lcom/sun/javafx/tk/TKDragSourceListener;
       5: return

  public void setTKDragGestureListener(com.sun.javafx.tk.TKDragGestureListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field dragGestureListener:Lcom/sun/javafx/tk/TKDragGestureListener;
       5: return

  public void setInputMethodRequests(javafx.scene.input.InputMethodRequests);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field inputMethodRequests:Ljavafx/scene/input/InputMethodRequests;
       5: return

  public void setRoot(com.sun.javafx.sg.prism.NGNode);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field root:Lcom/sun/javafx/sg/prism/NGNode;
       5: aload_0
       6: invokevirtual #39                 // Method entireSceneNeedsRepaint:()V
       9: return

  protected com.sun.javafx.sg.prism.NGNode getRoot();
    Code:
       0: aload_0
       1: getfield      #17                 // Field root:Lcom/sun/javafx/sg/prism/NGNode;
       4: areturn

  com.sun.javafx.sg.prism.NGCamera getCamera();
    Code:
       0: aload_0
       1: getfield      #18                 // Field camera:Lcom/sun/javafx/sg/prism/NGCamera;
       4: areturn

  public com.sun.javafx.sg.prism.NGLightBase[] getLights();
    Code:
       0: aload_0
       1: getfield      #40                 // Field lights:[Lcom/sun/javafx/sg/prism/NGLightBase;
       4: areturn

  public void setLights(com.sun.javafx.sg.prism.NGLightBase[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #40                 // Field lights:[Lcom/sun/javafx/sg/prism/NGLightBase;
       5: return

  public void setCamera(com.sun.javafx.sg.prism.NGCamera);
    Code:
       0: aload_0
       1: aload_1
       2: ifnonnull     11
       5: getstatic     #41                 // Field com/sun/javafx/sg/prism/NGCamera.INSTANCE:Lcom/sun/javafx/sg/prism/NGCamera;
       8: goto          12
      11: aload_1
      12: putfield      #18                 // Field camera:Lcom/sun/javafx/sg/prism/NGCamera;
      15: aload_0
      16: invokevirtual #39                 // Method entireSceneNeedsRepaint:()V
      19: return

  public void setFillPaint(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #42                 // class com/sun/prism/paint/Paint
       5: putfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
       8: aload_0
       9: invokevirtual #39                 // Method entireSceneNeedsRepaint:()V
      12: return

  public void setCursor(java.lang.Object);
    Code:
       0: return

  public final void markDirty();
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method sceneChanged:()V
       4: return

  public void entireSceneNeedsRepaint();
    Code:
       0: invokestatic  #44                 // Method javafx/application/Platform.isFxApplicationThread:()Z
       3: ifeq          18
       6: aload_0
       7: iconst_1
       8: putfield      #2                  // Field entireSceneDirty:Z
      11: aload_0
      12: invokevirtual #43                 // Method sceneChanged:()V
      15: goto          27
      18: aload_0
      19: invokedynamic #45,  0             // InvokeDynamic #1:run:(Lcom/sun/javafx/tk/quantum/GlassScene;)Ljava/lang/Runnable;
      24: invokestatic  #46                 // Method javafx/application/Platform.runLater:(Ljava/lang/Runnable;)V
      27: return

  public boolean isEntireSceneDirty();
    Code:
       0: aload_0
       1: getfield      #2                  // Field entireSceneDirty:Z
       4: ireturn

  public void clearEntireSceneDirty();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #2                  // Field entireSceneDirty:Z
       5: return

  public com.sun.javafx.tk.TKClipboard createDragboard(boolean);
    Code:
       0: new           #47                 // class com/sun/javafx/tk/quantum/GlassScene$1
       3: dup
       4: aload_0
       5: ldc           #49                 // String DND
       7: invokespecial #50                 // Method com/sun/javafx/tk/quantum/GlassScene$1."<init>":(Lcom/sun/javafx/tk/quantum/GlassScene;Ljava/lang/String;)V
      10: astore_2
      11: aload_2
      12: iload_1
      13: invokestatic  #51                 // Method com/sun/javafx/tk/quantum/QuantumClipboard.getDragboardInstance:(Lcom/sun/glass/ui/ClipboardAssistance;Z)Lcom/sun/javafx/tk/quantum/QuantumClipboard;
      16: areturn

  protected final com.sun.javafx.tk.quantum.GlassStage getStage();
    Code:
       0: aload_0
       1: getfield      #14                 // Field stage:Lcom/sun/javafx/tk/quantum/GlassStage;
       4: areturn

  void setStage(com.sun.javafx.tk.quantum.GlassStage);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field stage:Lcom/sun/javafx/tk/quantum/GlassStage;
       5: aload_0
       6: invokevirtual #43                 // Method sceneChanged:()V
       9: return

  final com.sun.javafx.tk.quantum.SceneState getSceneState();
    Code:
       0: aload_0
       1: getfield      #12                 // Field sceneState:Lcom/sun/javafx/tk/quantum/SceneState;
       4: areturn

  final void updateSceneState();
    Code:
       0: aload_0
       1: getfield      #12                 // Field sceneState:Lcom/sun/javafx/tk/quantum/SceneState;
       4: invokevirtual #52                 // Method com/sun/javafx/tk/quantum/SceneState.update:()V
       7: return

  protected com.sun.glass.ui.View getPlatformView();
    Code:
       0: aconst_null
       1: areturn

  boolean setPainting(boolean);
    Code:
       0: aload_0
       1: getfield      #6                  // Field painting:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iload_1
       5: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicBoolean.getAndSet:(Z)Z
       8: ireturn

  void repaint();
    Code:
       0: return

  final void stageVisible(boolean);
    Code:
       0: iload_1
       1: ifne          17
       4: getstatic     #54                 // Field com/sun/prism/impl/PrismSettings.forceRepaint:Z
       7: ifeq          17
      10: invokestatic  #33                 // Method com/sun/javafx/tk/quantum/PaintCollector.getInstance:()Lcom/sun/javafx/tk/quantum/PaintCollector;
      13: aload_0
      14: invokevirtual #55                 // Method com/sun/javafx/tk/quantum/PaintCollector.removeDirtyScene:(Lcom/sun/javafx/tk/quantum/GlassScene;)V
      17: iload_1
      18: ifeq          28
      21: invokestatic  #33                 // Method com/sun/javafx/tk/quantum/PaintCollector.getInstance:()Lcom/sun/javafx/tk/quantum/PaintCollector;
      24: aload_0
      25: invokevirtual #56                 // Method com/sun/javafx/tk/quantum/PaintCollector.addDirtyScene:(Lcom/sun/javafx/tk/quantum/GlassScene;)V
      28: return

  public void sceneChanged();
    Code:
       0: aload_0
       1: getfield      #14                 // Field stage:Lcom/sun/javafx/tk/quantum/GlassStage;
       4: ifnull        17
       7: invokestatic  #33                 // Method com/sun/javafx/tk/quantum/PaintCollector.getInstance:()Lcom/sun/javafx/tk/quantum/PaintCollector;
      10: aload_0
      11: invokevirtual #56                 // Method com/sun/javafx/tk/quantum/PaintCollector.addDirtyScene:(Lcom/sun/javafx/tk/quantum/GlassScene;)V
      14: goto          24
      17: invokestatic  #33                 // Method com/sun/javafx/tk/quantum/PaintCollector.getInstance:()Lcom/sun/javafx/tk/quantum/PaintCollector;
      20: aload_0
      21: invokevirtual #55                 // Method com/sun/javafx/tk/quantum/PaintCollector.removeDirtyScene:(Lcom/sun/javafx/tk/quantum/GlassScene;)V
      24: return

  public final synchronized void frameRendered();
    Code:
       0: aload_0
       1: getfield      #25                 // Field scenePaintListener:Lcom/sun/javafx/tk/TKScenePaintListener;
       4: ifnull        16
       7: aload_0
       8: getfield      #25                 // Field scenePaintListener:Lcom/sun/javafx/tk/TKScenePaintListener;
      11: invokeinterface #57,  1           // InterfaceMethod com/sun/javafx/tk/TKScenePaintListener.frameRendered:()V
      16: return

  public final synchronized void setDoPresent(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field doPresent:Z
       5: return

  public final synchronized boolean getDoPresent();
    Code:
       0: aload_0
       1: getfield      #3                  // Field doPresent:Z
       4: ireturn

  protected com.sun.prism.paint.Color getClearColor();
    Code:
       0: aload_0
       1: getfield      #14                 // Field stage:Lcom/sun/javafx/tk/quantum/GlassStage;
       4: instanceof    #58                 // class com/sun/javafx/tk/quantum/WindowStage
       7: ifeq          20
      10: aload_0
      11: getfield      #14                 // Field stage:Lcom/sun/javafx/tk/quantum/GlassStage;
      14: checkcast     #58                 // class com/sun/javafx/tk/quantum/WindowStage
      17: goto          21
      20: aconst_null
      21: astore_1
      22: aload_1
      23: ifnull        40
      26: aload_1
      27: invokevirtual #59                 // Method com/sun/javafx/tk/quantum/WindowStage.getPlatformWindow:()Lcom/sun/glass/ui/Window;
      30: invokevirtual #60                 // Method com/sun/glass/ui/Window.isTransparentWindow:()Z
      33: ifeq          40
      36: getstatic     #61                 // Field com/sun/prism/paint/Color.TRANSPARENT:Lcom/sun/prism/paint/Color;
      39: areturn
      40: aload_0
      41: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      44: ifnonnull     51
      47: getstatic     #62                 // Field com/sun/prism/paint/Color.WHITE:Lcom/sun/prism/paint/Color;
      50: areturn
      51: aload_0
      52: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      55: invokevirtual #63                 // Method com/sun/prism/paint/Paint.isOpaque:()Z
      58: ifne          75
      61: aload_1
      62: ifnull        109
      65: aload_1
      66: invokevirtual #59                 // Method com/sun/javafx/tk/quantum/WindowStage.getPlatformWindow:()Lcom/sun/glass/ui/Window;
      69: invokevirtual #64                 // Method com/sun/glass/ui/Window.isUnifiedWindow:()Z
      72: ifeq          109
      75: aload_0
      76: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      79: invokevirtual #65                 // Method com/sun/prism/paint/Paint.getType:()Lcom/sun/prism/paint/Paint$Type;
      82: getstatic     #66                 // Field com/sun/prism/paint/Paint$Type.COLOR:Lcom/sun/prism/paint/Paint$Type;
      85: if_acmpne     96
      88: aload_0
      89: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      92: checkcast     #67                 // class com/sun/prism/paint/Color
      95: areturn
      96: aload_0
      97: getfield      #9                  // Field depthBuffer:Z
     100: ifeq          107
     103: getstatic     #61                 // Field com/sun/prism/paint/Color.TRANSPARENT:Lcom/sun/prism/paint/Color;
     106: areturn
     107: aconst_null
     108: areturn
     109: getstatic     #62                 // Field com/sun/prism/paint/Color.WHITE:Lcom/sun/prism/paint/Color;
     112: areturn

  final com.sun.prism.paint.Paint getCurrentPaint();
    Code:
       0: aload_0
       1: getfield      #14                 // Field stage:Lcom/sun/javafx/tk/quantum/GlassStage;
       4: instanceof    #58                 // class com/sun/javafx/tk/quantum/WindowStage
       7: ifeq          20
      10: aload_0
      11: getfield      #14                 // Field stage:Lcom/sun/javafx/tk/quantum/GlassStage;
      14: checkcast     #58                 // class com/sun/javafx/tk/quantum/WindowStage
      17: goto          21
      20: aconst_null
      21: astore_1
      22: aload_1
      23: ifnull        58
      26: aload_1
      27: invokevirtual #68                 // Method com/sun/javafx/tk/quantum/WindowStage.getStyle:()Ljavafx/stage/StageStyle;
      30: getstatic     #69                 // Field javafx/stage/StageStyle.TRANSPARENT:Ljavafx/stage/StageStyle;
      33: if_acmpne     58
      36: getstatic     #61                 // Field com/sun/prism/paint/Color.TRANSPARENT:Lcom/sun/prism/paint/Color;
      39: aload_0
      40: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      43: invokevirtual #70                 // Method com/sun/prism/paint/Color.equals:(Ljava/lang/Object;)Z
      46: ifeq          53
      49: aconst_null
      50: goto          57
      53: aload_0
      54: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      57: areturn
      58: aload_0
      59: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      62: ifnull        90
      65: aload_0
      66: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      69: invokevirtual #63                 // Method com/sun/prism/paint/Paint.isOpaque:()Z
      72: ifeq          90
      75: aload_0
      76: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      79: invokevirtual #65                 // Method com/sun/prism/paint/Paint.getType:()Lcom/sun/prism/paint/Paint$Type;
      82: getstatic     #66                 // Field com/sun/prism/paint/Paint$Type.COLOR:Lcom/sun/prism/paint/Paint$Type;
      85: if_acmpne     90
      88: aconst_null
      89: areturn
      90: aload_0
      91: getfield      #19                 // Field fillPaint:Lcom/sun/prism/paint/Paint;
      94: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #71                 // Method java/lang/Object.hashCode:()I
       4: invokedynamic #72,  0             // InvokeDynamic #2:makeConcatWithConstants:(I)Ljava/lang/String;
       9: areturn

  private void lambda$entireSceneNeedsRepaint$1();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field entireSceneDirty:Z
       5: aload_0
       6: invokevirtual #43                 // Method sceneChanged:()V
       9: return

  private static java.security.AccessControlContext lambda$setSecurityContext$0();
    Code:
       0: invokestatic  #30                 // Method java/security/AccessController.getContext:()Ljava/security/AccessControlContext;
       3: areturn

  static {};
    Code:
       0: ldc           #73                 // class com/sun/javafx/tk/quantum/GlassScene
       2: invokevirtual #74                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #13                 // Field $assertionsDisabled:Z
      16: return
}
