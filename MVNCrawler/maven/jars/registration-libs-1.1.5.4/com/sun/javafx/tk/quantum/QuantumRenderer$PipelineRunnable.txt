Compiled from "QuantumRenderer.java"
class com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable implements java.lang.Runnable {
  private java.lang.Runnable work;

  final com.sun.javafx.tk.quantum.QuantumRenderer this$0;

  public com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable(com.sun.javafx.tk.quantum.QuantumRenderer, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/sun/javafx/tk/quantum/QuantumRenderer;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field work:Ljava/lang/Runnable;
      14: return

  public void init();
    Code:
       0: invokestatic  #4                  // Method com/sun/prism/GraphicsPipeline.createPipeline:()Lcom/sun/prism/GraphicsPipeline;
       3: ifnonnull     25
       6: ldc           #5                  // String Error initializing QuantumRenderer: no suitable pipeline found
       8: astore_1
       9: getstatic     #6                  // Field java/lang/System.err:Ljava/io/PrintStream;
      12: aload_1
      13: invokevirtual #7                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      16: new           #8                  // class java/lang/RuntimeException
      19: dup
      20: aload_1
      21: invokespecial #9                  // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      24: athrow
      25: invokestatic  #10                 // Method com/sun/prism/GraphicsPipeline.getPipeline:()Lcom/sun/prism/GraphicsPipeline;
      28: invokevirtual #11                 // Method com/sun/prism/GraphicsPipeline.getDeviceDetails:()Ljava/util/Map;
      31: astore_1
      32: aload_1
      33: ifnonnull     44
      36: new           #12                 // class java/util/HashMap
      39: dup
      40: invokespecial #13                 // Method java/util/HashMap."<init>":()V
      43: astore_1
      44: aload_1
      45: getstatic     #14                 // Field com/sun/glass/ui/View$Capability.kHiDPIAwareKey:Ljava/lang/Object;
      48: getstatic     #15                 // Field com/sun/prism/impl/PrismSettings.allowHiDPIScaling:Z
      51: invokestatic  #16                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      54: invokeinterface #17,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      59: pop
      60: invokestatic  #18                 // Method com/sun/glass/ui/Application.getDeviceDetails:()Ljava/util/Map;
      63: astore_2
      64: aload_2
      65: ifnull        75
      68: aload_1
      69: aload_2
      70: invokeinterface #19,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      75: aload_1
      76: invokestatic  #20                 // Method com/sun/glass/ui/Application.setDeviceDetails:(Ljava/util/Map;)V
      79: aload_0
      80: getfield      #1                  // Field this$0:Lcom/sun/javafx/tk/quantum/QuantumRenderer;
      83: invokestatic  #21                 // Method com/sun/javafx/tk/quantum/QuantumRenderer.access$200:(Lcom/sun/javafx/tk/quantum/QuantumRenderer;)Ljava/util/concurrent/CountDownLatch;
      86: invokevirtual #22                 // Method java/util/concurrent/CountDownLatch.countDown:()V
      89: goto          127
      92: astore_1
      93: aload_0
      94: getfield      #1                  // Field this$0:Lcom/sun/javafx/tk/quantum/QuantumRenderer;
      97: aload_1
      98: invokestatic  #24                 // Method com/sun/javafx/tk/quantum/QuantumRenderer.access$100:(Lcom/sun/javafx/tk/quantum/QuantumRenderer;Ljava/lang/Throwable;)V
     101: aload_0
     102: getfield      #1                  // Field this$0:Lcom/sun/javafx/tk/quantum/QuantumRenderer;
     105: invokestatic  #21                 // Method com/sun/javafx/tk/quantum/QuantumRenderer.access$200:(Lcom/sun/javafx/tk/quantum/QuantumRenderer;)Ljava/util/concurrent/CountDownLatch;
     108: invokevirtual #22                 // Method java/util/concurrent/CountDownLatch.countDown:()V
     111: goto          127
     114: astore_3
     115: aload_0
     116: getfield      #1                  // Field this$0:Lcom/sun/javafx/tk/quantum/QuantumRenderer;
     119: invokestatic  #21                 // Method com/sun/javafx/tk/quantum/QuantumRenderer.access$200:(Lcom/sun/javafx/tk/quantum/QuantumRenderer;)Ljava/util/concurrent/CountDownLatch;
     122: invokevirtual #22                 // Method java/util/concurrent/CountDownLatch.countDown:()V
     125: aload_3
     126: athrow
     127: return
    Exception table:
       from    to  target type
           0    79    92   Class java/lang/Throwable
           0    79   114   any
          92   101   114   any

  public void cleanup();
    Code:
       0: invokestatic  #10                 // Method com/sun/prism/GraphicsPipeline.getPipeline:()Lcom/sun/prism/GraphicsPipeline;
       3: astore_1
       4: aload_1
       5: ifnull        12
       8: aload_1
       9: invokevirtual #25                 // Method com/sun/prism/GraphicsPipeline.dispose:()V
      12: return

  public void run();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method init:()V
       4: aload_0
       5: getfield      #3                  // Field work:Ljava/lang/Runnable;
       8: invokeinterface #27,  1           // InterfaceMethod java/lang/Runnable.run:()V
      13: aload_0
      14: invokevirtual #28                 // Method cleanup:()V
      17: goto          27
      20: astore_1
      21: aload_0
      22: invokevirtual #28                 // Method cleanup:()V
      25: aload_1
      26: athrow
      27: return
    Exception table:
       from    to  target type
           0    13    20   any
}
