Compiled from "ViewScene.java"
class com.sun.javafx.tk.quantum.ViewScene extends com.sun.javafx.tk.quantum.GlassScene {
  private static final java.lang.String UNSUPPORTED_FORMAT;

  private com.sun.glass.ui.View platformView;

  private com.sun.javafx.tk.quantum.ViewPainter painter;

  private com.sun.javafx.tk.quantum.PaintRenderJob paintRenderJob;

  public com.sun.javafx.tk.quantum.ViewScene(boolean, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokespecial #1                  // Method com/sun/javafx/tk/quantum/GlassScene."<init>":(ZZ)V
       6: aload_0
       7: invokestatic  #2                  // Method com/sun/glass/ui/Application.GetApplication:()Lcom/sun/glass/ui/Application;
      10: invokevirtual #3                  // Method com/sun/glass/ui/Application.createView:()Lcom/sun/glass/ui/View;
      13: putfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
      16: aload_0
      17: getfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
      20: new           #5                  // class com/sun/javafx/tk/quantum/GlassViewEventHandler
      23: dup
      24: aload_0
      25: invokespecial #6                  // Method com/sun/javafx/tk/quantum/GlassViewEventHandler."<init>":(Lcom/sun/javafx/tk/quantum/ViewScene;)V
      28: invokevirtual #7                  // Method com/sun/glass/ui/View.setEventHandler:(Lcom/sun/glass/ui/View$EventHandler;)V
      31: return

  protected boolean isSynchronous();
    Code:
       0: aload_0
       1: getfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
       4: ifnull        21
       7: aload_0
       8: getfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
      11: instanceof    #9                  // class com/sun/javafx/tk/quantum/PresentingPainter
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  protected com.sun.glass.ui.View getPlatformView();
    Code:
       0: aload_0
       1: getfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
       4: areturn

  com.sun.javafx.tk.quantum.ViewPainter getPainter();
    Code:
       0: aload_0
       1: getfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
       4: areturn

  public void setStage(com.sun.javafx.tk.quantum.GlassStage);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #10                 // Method com/sun/javafx/tk/quantum/GlassScene.setStage:(Lcom/sun/javafx/tk/quantum/GlassStage;)V
       5: aload_1
       6: ifnull        116
       9: aload_1
      10: checkcast     #11                 // class com/sun/javafx/tk/quantum/WindowStage
      13: astore_2
      14: aload_2
      15: invokevirtual #12                 // Method com/sun/javafx/tk/quantum/WindowStage.needsUpdateWindow:()Z
      18: ifne          30
      21: invokestatic  #13                 // Method com/sun/prism/GraphicsPipeline.getPipeline:()Lcom/sun/prism/GraphicsPipeline;
      24: invokevirtual #14                 // Method com/sun/prism/GraphicsPipeline.isUploading:()Z
      27: ifeq          71
      30: invokestatic  #15                 // Method com/sun/glass/ui/Pixels.getNativeFormat:()I
      33: iconst_1
      34: if_icmpne     46
      37: invokestatic  #17                 // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
      40: getstatic     #18                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
      43: if_acmpeq     56
      46: new           #19                 // class java/lang/UnsupportedOperationException
      49: dup
      50: ldc           #21                 // String Transparent windows only supported for BYTE_BGRA_PRE format on LITTLE_ENDIAN machines
      52: invokespecial #22                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: aload_0
      57: new           #23                 // class com/sun/javafx/tk/quantum/UploadingPainter
      60: dup
      61: aload_0
      62: invokespecial #24                 // Method com/sun/javafx/tk/quantum/UploadingPainter."<init>":(Lcom/sun/javafx/tk/quantum/GlassScene;)V
      65: putfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
      68: goto          83
      71: aload_0
      72: new           #9                  // class com/sun/javafx/tk/quantum/PresentingPainter
      75: dup
      76: aload_0
      77: invokespecial #25                 // Method com/sun/javafx/tk/quantum/PresentingPainter."<init>":(Lcom/sun/javafx/tk/quantum/ViewScene;)V
      80: putfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
      83: aload_0
      84: getfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
      87: aload_0
      88: invokevirtual #26                 // Method getRoot:()Lcom/sun/javafx/sg/prism/NGNode;
      91: invokevirtual #27                 // Method com/sun/javafx/tk/quantum/ViewPainter.setRoot:(Lcom/sun/javafx/sg/prism/NGNode;)V
      94: aload_0
      95: new           #28                 // class com/sun/javafx/tk/quantum/PaintRenderJob
      98: dup
      99: aload_0
     100: invokestatic  #29                 // Method com/sun/javafx/tk/quantum/PaintCollector.getInstance:()Lcom/sun/javafx/tk/quantum/PaintCollector;
     103: invokevirtual #30                 // Method com/sun/javafx/tk/quantum/PaintCollector.getRendered:()Lcom/sun/javafx/tk/CompletionListener;
     106: aload_0
     107: getfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
     110: invokespecial #31                 // Method com/sun/javafx/tk/quantum/PaintRenderJob."<init>":(Lcom/sun/javafx/tk/quantum/GlassScene;Lcom/sun/javafx/tk/CompletionListener;Ljava/lang/Runnable;)V
     113: putfield      #32                 // Field paintRenderJob:Lcom/sun/javafx/tk/quantum/PaintRenderJob;
     116: return

  com.sun.javafx.tk.quantum.WindowStage getWindowStage();
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method getStage:()Lcom/sun/javafx/tk/quantum/GlassStage;
       4: checkcast     #11                 // class com/sun/javafx/tk/quantum/WindowStage
       7: areturn

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
       4: ifnull        17
       7: aload_0
       8: invokedynamic #34,  0             // InvokeDynamic #0:get:(Lcom/sun/javafx/tk/quantum/ViewScene;)Ljava/util/function/Supplier;
      13: invokestatic  #35                 // Method com/sun/javafx/tk/quantum/QuantumToolkit.runWithRenderLock:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      16: pop
      17: aload_0
      18: invokespecial #36                 // Method com/sun/javafx/tk/quantum/GlassScene.dispose:()V
      21: return

  public void setRoot(com.sun.javafx.sg.prism.NGNode);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #37                 // Method com/sun/javafx/tk/quantum/GlassScene.setRoot:(Lcom/sun/javafx/sg/prism/NGNode;)V
       5: aload_0
       6: getfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
       9: ifnull        20
      12: aload_0
      13: getfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
      16: aload_1
      17: invokevirtual #27                 // Method com/sun/javafx/tk/quantum/ViewPainter.setRoot:(Lcom/sun/javafx/sg/prism/NGNode;)V
      20: return

  public void setCursor(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #38                 // Method com/sun/javafx/tk/quantum/GlassScene.setCursor:(Ljava/lang/Object;)V
       5: aload_0
       6: aload_1
       7: invokedynamic #39,  0             // InvokeDynamic #1:run:(Lcom/sun/javafx/tk/quantum/ViewScene;Ljava/lang/Object;)Ljava/lang/Runnable;
      12: invokestatic  #40                 // Method com/sun/glass/ui/Application.invokeLater:(Ljava/lang/Runnable;)V
      15: return

  void repaint();
    Code:
       0: aload_0
       1: getfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
       4: ifnonnull     8
       7: return
       8: aload_0
       9: iconst_1
      10: invokevirtual #41                 // Method setPainting:(Z)Z
      13: ifne          29
      16: invokestatic  #42                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
      19: astore_1
      20: aload_1
      21: aload_0
      22: getfield      #32                 // Field paintRenderJob:Lcom/sun/javafx/tk/quantum/PaintRenderJob;
      25: invokevirtual #43                 // Method com/sun/javafx/tk/Toolkit.addRenderJob:(Lcom/sun/javafx/tk/RenderJob;)Ljava/util/concurrent/Future;
      28: pop
      29: return

  public void enableInputMethodEvents(boolean);
    Code:
       0: aload_0
       1: getfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
       4: iload_1
       5: invokevirtual #44                 // Method com/sun/glass/ui/View.enableInputMethodEvents:(Z)V
       8: return

  public void finishInputMethodComposition();
    Code:
       0: aload_0
       1: getfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
       4: invokevirtual #45                 // Method com/sun/glass/ui/View.finishInputMethodComposition:()V
       7: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getPlatformView:()Lcom/sun/glass/ui/View;
       4: astore_1
       5: aload_0
       6: invokevirtual #47                 // Method java/lang/Object.hashCode:()I
       9: aload_1
      10: invokevirtual #48                 // Method com/sun/glass/ui/View.getWidth:()I
      13: aload_1
      14: invokevirtual #49                 // Method com/sun/glass/ui/View.getHeight:()I
      17: invokedynamic #50,  0             // InvokeDynamic #2:makeConcatWithConstants:(III)Ljava/lang/String;
      22: areturn

  void synchroniseOverlayWarning();
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method waitForSynchronization:()V
       4: aload_0
       5: invokevirtual #52                 // Method getWindowStage:()Lcom/sun/javafx/tk/quantum/WindowStage;
       8: invokevirtual #53                 // Method com/sun/javafx/tk/quantum/WindowStage.getWarning:()Lcom/sun/javafx/tk/quantum/OverlayWarning;
      11: astore_1
      12: aload_1
      13: ifnonnull     27
      16: aload_0
      17: getfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
      20: aconst_null
      21: invokevirtual #54                 // Method com/sun/javafx/tk/quantum/ViewPainter.setOverlayRoot:(Lcom/sun/javafx/sg/prism/NGNode;)V
      24: goto          46
      27: aload_0
      28: getfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
      31: aload_1
      32: invokestatic  #55                 // Method com/sun/javafx/scene/NodeHelper.getPeer:(Ljavafx/scene/Node;)Lcom/sun/javafx/sg/prism/NGNode;
      35: invokevirtual #54                 // Method com/sun/javafx/tk/quantum/ViewPainter.setOverlayRoot:(Lcom/sun/javafx/sg/prism/NGNode;)V
      38: aload_1
      39: invokevirtual #56                 // Method com/sun/javafx/tk/quantum/OverlayWarning.updateBounds:()V
      42: aload_1
      43: invokestatic  #57                 // Method com/sun/javafx/scene/NodeHelper.updatePeer:(Ljavafx/scene/Node;)V
      46: aload_0
      47: iconst_1
      48: invokevirtual #58                 // Method releaseSynchronization:(Z)V
      51: aload_0
      52: invokevirtual #59                 // Method entireSceneNeedsRepaint:()V
      55: goto          70
      58: astore_2
      59: aload_0
      60: iconst_1
      61: invokevirtual #58                 // Method releaseSynchronization:(Z)V
      64: aload_0
      65: invokevirtual #59                 // Method entireSceneNeedsRepaint:()V
      68: aload_2
      69: athrow
      70: return
    Exception table:
       from    to  target type
           0    46    58   any

  private void lambda$setCursor$1(java.lang.Object);
    Code:
       0: aload_1
       1: checkcast     #60                 // class com/sun/javafx/cursor/CursorFrame
       4: astore_2
       5: aload_2
       6: invokestatic  #61                 // Method com/sun/javafx/tk/quantum/CursorUtils.getPlatformCursor:(Lcom/sun/javafx/cursor/CursorFrame;)Lcom/sun/glass/ui/Cursor;
       9: astore_3
      10: aload_0
      11: getfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
      14: ifnull        37
      17: aload_0
      18: getfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
      21: invokevirtual #62                 // Method com/sun/glass/ui/View.getWindow:()Lcom/sun/glass/ui/Window;
      24: astore        4
      26: aload         4
      28: ifnull        37
      31: aload         4
      33: aload_3
      34: invokevirtual #63                 // Method com/sun/glass/ui/Window.setCursor:(Lcom/sun/glass/ui/Cursor;)V
      37: return

  private java.lang.Object lambda$dispose$0();
    Code:
       0: aload_0
       1: getfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
       4: invokevirtual #64                 // Method com/sun/glass/ui/View.close:()V
       7: aload_0
       8: aconst_null
       9: putfield      #4                  // Field platformView:Lcom/sun/glass/ui/View;
      12: aload_0
      13: invokevirtual #65                 // Method updateSceneState:()V
      16: aload_0
      17: aconst_null
      18: putfield      #8                  // Field painter:Lcom/sun/javafx/tk/quantum/ViewPainter;
      21: aload_0
      22: aconst_null
      23: putfield      #32                 // Field paintRenderJob:Lcom/sun/javafx/tk/quantum/PaintRenderJob;
      26: aconst_null
      27: areturn
}
