Compiled from "NodeHelper.java"
public abstract class com.sun.javafx.scene.NodeHelper {
  private static com.sun.javafx.scene.NodeHelper$NodeAccessor nodeAccessor;

  protected com.sun.javafx.scene.NodeHelper();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  protected static com.sun.javafx.scene.NodeHelper getHelper(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #3,  2            // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       9: astore_1
      10: aload_1
      11: ifnonnull     57
      14: aload_0
      15: instanceof    #4                  // class javafx/scene/shape/Shape
      18: ifeq          27
      21: ldc           #5                  // String Shape
      23: astore_2
      24: goto          43
      27: aload_0
      28: instanceof    #6                  // class javafx/scene/shape/Shape3D
      31: ifeq          40
      34: ldc           #7                  // String Shape3D
      36: astore_2
      37: goto          43
      40: ldc           #8                  // String Node
      42: astore_2
      43: new           #9                  // class java/lang/UnsupportedOperationException
      46: dup
      47: aload_2
      48: invokedynamic #10,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      53: invokespecial #11                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      56: athrow
      57: aload_1
      58: areturn

  protected static void setHelper(javafx.scene.Node, com.sun.javafx.scene.NodeHelper);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: aload_1
       5: invokeinterface #12,  3           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.setHelper:(Ljavafx/scene/Node;Lcom/sun/javafx/scene/NodeHelper;)V
      10: return

  public static com.sun.javafx.sg.prism.NGNode createPeer(javafx.scene.Node);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: invokevirtual #14                 // Method createPeerImpl:(Ljavafx/scene/Node;)Lcom/sun/javafx/sg/prism/NGNode;
       8: areturn

  public static void markDirty(javafx.scene.Node, com.sun.javafx.scene.DirtyBits);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: aload_1
       6: invokevirtual #15                 // Method markDirtyImpl:(Ljavafx/scene/Node;Lcom/sun/javafx/scene/DirtyBits;)V
       9: return

  public static void updatePeer(javafx.scene.Node);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: invokevirtual #16                 // Method updatePeerImpl:(Ljavafx/scene/Node;)V
       8: return

  public static javafx.geometry.Bounds computeLayoutBounds(javafx.scene.Node);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: invokevirtual #17                 // Method computeLayoutBoundsImpl:(Ljavafx/scene/Node;)Ljavafx/geometry/Bounds;
       8: areturn

  public static com.sun.javafx.geom.BaseBounds computeGeomBounds(javafx.scene.Node, com.sun.javafx.geom.BaseBounds, com.sun.javafx.geom.transform.BaseTransform);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #18                 // Method computeGeomBoundsImpl:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/BaseBounds;Lcom/sun/javafx/geom/transform/BaseTransform;)Lcom/sun/javafx/geom/BaseBounds;
      10: areturn

  public static void transformsChanged(javafx.scene.Node);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: invokevirtual #19                 // Method transformsChangedImpl:(Ljavafx/scene/Node;)V
       8: return

  public static boolean computeContains(javafx.scene.Node, double, double);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: dload_1
       6: dload_3
       7: invokevirtual #20                 // Method computeContainsImpl:(Ljavafx/scene/Node;DD)Z
      10: ireturn

  public static void pickNodeLocal(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #21                 // Method pickNodeLocalImpl:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)V
      10: return

  public static boolean computeIntersects(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #22                 // Method computeIntersectsImpl:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)Z
      10: ireturn

  public static void geomChanged(javafx.scene.Node);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: invokevirtual #23                 // Method geomChangedImpl:(Ljavafx/scene/Node;)V
       8: return

  public static void notifyLayoutBoundsChanged(javafx.scene.Node);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: invokevirtual #24                 // Method notifyLayoutBoundsChangedImpl:(Ljavafx/scene/Node;)V
       8: return

  public static void processCSS(javafx.scene.Node);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method getHelper:(Ljavafx/scene/Node;)Lcom/sun/javafx/scene/NodeHelper;
       4: aload_0
       5: invokevirtual #25                 // Method processCSSImpl:(Ljavafx/scene/Node;)V
       8: return

  protected abstract com.sun.javafx.sg.prism.NGNode createPeerImpl(javafx.scene.Node);

  protected abstract boolean computeContainsImpl(javafx.scene.Node, double, double);

  protected abstract com.sun.javafx.geom.BaseBounds computeGeomBoundsImpl(javafx.scene.Node, com.sun.javafx.geom.BaseBounds, com.sun.javafx.geom.transform.BaseTransform);

  protected void markDirtyImpl(javafx.scene.Node, com.sun.javafx.scene.DirtyBits);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_1
       4: aload_2
       5: invokeinterface #26,  3           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.doMarkDirty:(Ljavafx/scene/Node;Lcom/sun/javafx/scene/DirtyBits;)V
      10: return

  protected void updatePeerImpl(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_1
       4: invokeinterface #27,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.doUpdatePeer:(Ljavafx/scene/Node;)V
       9: return

  protected javafx.geometry.Bounds computeLayoutBoundsImpl(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_1
       4: invokeinterface #28,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.doComputeLayoutBounds:(Ljavafx/scene/Node;)Ljavafx/geometry/Bounds;
       9: areturn

  protected void transformsChangedImpl(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_1
       4: invokeinterface #29,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.doTransformsChanged:(Ljavafx/scene/Node;)V
       9: return

  protected void pickNodeLocalImpl(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_1
       4: aload_2
       5: aload_3
       6: invokeinterface #30,  4           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.doPickNodeLocal:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)V
      11: return

  protected boolean computeIntersectsImpl(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_1
       4: aload_2
       5: aload_3
       6: invokeinterface #31,  4           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.doComputeIntersects:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)Z
      11: ireturn

  protected void geomChangedImpl(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_1
       4: invokeinterface #32,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.doGeomChanged:(Ljavafx/scene/Node;)V
       9: return

  protected void notifyLayoutBoundsChangedImpl(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_1
       4: invokeinterface #33,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.doNotifyLayoutBoundsChanged:(Ljavafx/scene/Node;)V
       9: return

  protected void processCSSImpl(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_1
       4: invokeinterface #34,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.doProcessCSS:(Ljavafx/scene/Node;)V
       9: return

  public static boolean isDirty(javafx.scene.Node, com.sun.javafx.scene.DirtyBits);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: aload_1
       5: invokeinterface #35,  3           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.isDirty:(Ljavafx/scene/Node;Lcom/sun/javafx/scene/DirtyBits;)Z
      10: ireturn

  public static boolean isDirtyEmpty(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #36,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.isDirtyEmpty:(Ljavafx/scene/Node;)Z
       9: ireturn

  public static void syncPeer(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #37,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.syncPeer:(Ljavafx/scene/Node;)V
       9: return

  public static <P extends com.sun.javafx.sg.prism.NGNode> P getPeer(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #38,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.getPeer:(Ljavafx/scene/Node;)Lcom/sun/javafx/sg/prism/NGNode;
       9: areturn

  public static com.sun.javafx.geom.transform.BaseTransform getLeafTransform(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #39,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.getLeafTransform:(Ljavafx/scene/Node;)Lcom/sun/javafx/geom/transform/BaseTransform;
       9: areturn

  public static void layoutBoundsChanged(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #40,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.layoutBoundsChanged:(Ljavafx/scene/Node;)V
       9: return

  public static void setShowMnemonics(javafx.scene.Node, boolean);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: iload_1
       5: invokeinterface #41,  3           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.setShowMnemonics:(Ljavafx/scene/Node;Z)V
      10: return

  public static boolean isShowMnemonics(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #42,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.isShowMnemonics:(Ljavafx/scene/Node;)Z
       9: ireturn

  public static javafx.beans.property.BooleanProperty showMnemonicsProperty(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #43,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.showMnemonicsProperty:(Ljavafx/scene/Node;)Ljavafx/beans/property/BooleanProperty;
       9: areturn

  public static boolean traverse(javafx.scene.Node, com.sun.javafx.scene.traversal.Direction);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: aload_1
       5: invokeinterface #44,  3           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.traverse:(Ljavafx/scene/Node;Lcom/sun/javafx/scene/traversal/Direction;)Z
      10: ireturn

  public static double getPivotX(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #45,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.getPivotX:(Ljavafx/scene/Node;)D
       9: dreturn

  public static double getPivotY(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #46,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.getPivotY:(Ljavafx/scene/Node;)D
       9: dreturn

  public static double getPivotZ(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #47,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.getPivotZ:(Ljavafx/scene/Node;)D
       9: dreturn

  public static void pickNode(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokeinterface #48,  4           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.pickNode:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)V
      11: return

  public static boolean intersects(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokeinterface #49,  4           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.intersects:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/PickRay;Lcom/sun/javafx/scene/input/PickResultChooser;)Z
      11: ireturn

  public static double intersectsBounds(javafx.scene.Node, com.sun.javafx.geom.PickRay);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: aload_1
       5: invokeinterface #50,  3           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.intersectsBounds:(Ljavafx/scene/Node;Lcom/sun/javafx/geom/PickRay;)D
      10: dreturn

  public static void layoutNodeForPrinting(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #51,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.layoutNodeForPrinting:(Ljavafx/scene/Node;)V
       9: return

  public static boolean isDerivedDepthTest(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #52,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.isDerivedDepthTest:(Ljavafx/scene/Node;)Z
       9: ireturn

  public static javafx.scene.SubScene getSubScene(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #53,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.getSubScene:(Ljavafx/scene/Node;)Ljavafx/scene/SubScene;
       9: areturn

  public static com.sun.glass.ui.Accessible getAccessible(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #54,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.getAccessible:(Ljavafx/scene/Node;)Lcom/sun/glass/ui/Accessible;
       9: areturn

  public static void reapplyCSS(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #55,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.reapplyCSS:(Ljavafx/scene/Node;)V
       9: return

  public static boolean isTreeVisible(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #56,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.isTreeVisible:(Ljavafx/scene/Node;)Z
       9: ireturn

  public static javafx.beans.binding.BooleanExpression treeVisibleProperty(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #57,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.treeVisibleProperty:(Ljavafx/scene/Node;)Ljavafx/beans/binding/BooleanExpression;
       9: areturn

  public static boolean isTreeShowing(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #58,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.isTreeShowing:(Ljavafx/scene/Node;)Z
       9: ireturn

  public static javafx.beans.binding.BooleanExpression treeShowingProperty(javafx.scene.Node);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: invokeinterface #59,  2           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.treeShowingProperty:(Ljavafx/scene/Node;)Ljavafx/beans/binding/BooleanExpression;
       9: areturn

  public static java.util.List<javafx.css.Style> getMatchingStyles(javafx.css.CssMetaData, javafx.css.Styleable);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: aload_1
       5: invokeinterface #60,  3           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.getMatchingStyles:(Ljavafx/css/CssMetaData;Ljavafx/css/Styleable;)Ljava/util/List;
      10: areturn

  public static java.util.Map<javafx.css.StyleableProperty<?>, java.util.List<javafx.css.Style>> findStyles(javafx.scene.Node, java.util.Map<javafx.css.StyleableProperty<?>, java.util.List<javafx.css.Style>>);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: aload_0
       4: aload_1
       5: invokeinterface #61,  3           // InterfaceMethod com/sun/javafx/scene/NodeHelper$NodeAccessor.findStyles:(Ljavafx/scene/Node;Ljava/util/Map;)Ljava/util/Map;
      10: areturn

  public static void setNodeAccessor(com.sun.javafx.scene.NodeHelper$NodeAccessor);
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: ifnull        14
       6: new           #62                 // class java/lang/IllegalStateException
       9: dup
      10: invokespecial #63                 // Method java/lang/IllegalStateException."<init>":()V
      13: athrow
      14: aload_0
      15: putstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
      18: return

  public static com.sun.javafx.scene.NodeHelper$NodeAccessor getNodeAccessor();
    Code:
       0: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
       3: ifnonnull     14
       6: new           #62                 // class java/lang/IllegalStateException
       9: dup
      10: invokespecial #63                 // Method java/lang/IllegalStateException."<init>":()V
      13: athrow
      14: getstatic     #2                  // Field nodeAccessor:Lcom/sun/javafx/scene/NodeHelper$NodeAccessor;
      17: areturn

  static {};
    Code:
       0: ldc           #64                 // class javafx/scene/Node
       2: invokestatic  #65                 // Method com/sun/javafx/util/Utils.forceInit:(Ljava/lang/Class;)V
       5: return
}
