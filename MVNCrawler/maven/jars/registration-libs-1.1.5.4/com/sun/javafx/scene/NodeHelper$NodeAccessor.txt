Compiled from "NodeHelper.java"
public interface com.sun.javafx.scene.NodeHelper$NodeAccessor {
  public abstract com.sun.javafx.scene.NodeHelper getHelper(javafx.scene.Node);

  public abstract void setHelper(javafx.scene.Node, com.sun.javafx.scene.NodeHelper);

  public abstract void doMarkDirty(javafx.scene.Node, com.sun.javafx.scene.DirtyBits);

  public abstract void doUpdatePeer(javafx.scene.Node);

  public abstract com.sun.javafx.geom.transform.BaseTransform getLeafTransform(javafx.scene.Node);

  public abstract javafx.geometry.Bounds doComputeLayoutBounds(javafx.scene.Node);

  public abstract void doTransformsChanged(javafx.scene.Node);

  public abstract void doPickNodeLocal(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);

  public abstract boolean doComputeIntersects(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);

  public abstract void doGeomChanged(javafx.scene.Node);

  public abstract void doNotifyLayoutBoundsChanged(javafx.scene.Node);

  public abstract void doProcessCSS(javafx.scene.Node);

  public abstract boolean isDirty(javafx.scene.Node, com.sun.javafx.scene.DirtyBits);

  public abstract boolean isDirtyEmpty(javafx.scene.Node);

  public abstract void syncPeer(javafx.scene.Node);

  public abstract <P extends com.sun.javafx.sg.prism.NGNode> P getPeer(javafx.scene.Node);

  public abstract void layoutBoundsChanged(javafx.scene.Node);

  public abstract void setShowMnemonics(javafx.scene.Node, boolean);

  public abstract boolean isShowMnemonics(javafx.scene.Node);

  public abstract javafx.beans.property.BooleanProperty showMnemonicsProperty(javafx.scene.Node);

  public abstract boolean traverse(javafx.scene.Node, com.sun.javafx.scene.traversal.Direction);

  public abstract double getPivotX(javafx.scene.Node);

  public abstract double getPivotY(javafx.scene.Node);

  public abstract double getPivotZ(javafx.scene.Node);

  public abstract void pickNode(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);

  public abstract boolean intersects(javafx.scene.Node, com.sun.javafx.geom.PickRay, com.sun.javafx.scene.input.PickResultChooser);

  public abstract double intersectsBounds(javafx.scene.Node, com.sun.javafx.geom.PickRay);

  public abstract void layoutNodeForPrinting(javafx.scene.Node);

  public abstract boolean isDerivedDepthTest(javafx.scene.Node);

  public abstract javafx.scene.SubScene getSubScene(javafx.scene.Node);

  public abstract void setLabeledBy(javafx.scene.Node, javafx.scene.Node);

  public abstract com.sun.glass.ui.Accessible getAccessible(javafx.scene.Node);

  public abstract void reapplyCSS(javafx.scene.Node);

  public abstract boolean isTreeVisible(javafx.scene.Node);

  public abstract javafx.beans.binding.BooleanExpression treeVisibleProperty(javafx.scene.Node);

  public abstract boolean isTreeShowing(javafx.scene.Node);

  public abstract javafx.beans.binding.BooleanExpression treeShowingProperty(javafx.scene.Node);

  public abstract java.util.List<javafx.css.Style> getMatchingStyles(javafx.css.CssMetaData, javafx.css.Styleable);

  public abstract java.util.Map<javafx.css.StyleableProperty<?>, java.util.List<javafx.css.Style>> findStyles(javafx.scene.Node, java.util.Map<javafx.css.StyleableProperty<?>, java.util.List<javafx.css.Style>>);
}
