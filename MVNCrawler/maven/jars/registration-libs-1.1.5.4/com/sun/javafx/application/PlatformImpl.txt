Compiled from "PlatformImpl.java"
public class com.sun.javafx.application.PlatformImpl {
  private static java.util.concurrent.atomic.AtomicBoolean initialized;

  private static java.util.concurrent.atomic.AtomicBoolean platformExit;

  private static java.util.concurrent.atomic.AtomicBoolean toolkitExit;

  private static java.util.concurrent.CountDownLatch startupLatch;

  private static java.util.concurrent.atomic.AtomicBoolean listenersRegistered;

  private static com.sun.javafx.tk.TKListener toolkitListener;

  private static volatile boolean implicitExit;

  private static boolean taskbarApplication;

  private static boolean contextual2DNavigation;

  private static java.util.concurrent.atomic.AtomicInteger pendingRunnables;

  private static java.util.concurrent.atomic.AtomicInteger numWindows;

  private static volatile boolean firstWindowShown;

  private static volatile boolean lastWindowClosed;

  private static java.util.concurrent.atomic.AtomicBoolean reallyIdle;

  private static java.util.Set<com.sun.javafx.application.PlatformImpl$FinishListener> finishListeners;

  private static final java.lang.Object runLaterLock;

  private static java.lang.Boolean isGraphicsSupported;

  private static java.lang.Boolean isControlsSupported;

  private static java.lang.Boolean isMediaSupported;

  private static java.lang.Boolean isWebSupported;

  private static java.lang.Boolean isSWTSupported;

  private static java.lang.Boolean isSwingSupported;

  private static java.lang.Boolean isFXMLSupported;

  private static java.lang.Boolean hasTwoLevelFocus;

  private static java.lang.Boolean hasVirtualKeyboard;

  private static java.lang.Boolean hasTouch;

  private static java.lang.Boolean hasMultiTouch;

  private static java.lang.Boolean hasPointer;

  private static boolean isThreadMerged;

  private static java.lang.String applicationType;

  private static javafx.beans.property.BooleanProperty accessibilityActive;

  private static java.util.concurrent.CountDownLatch allNestedLoopsExitedLatch;

  private static final boolean verbose;

  private static final boolean DEBUG;

  private static final javafx.util.FXPermission FXCANVAS_PERMISSION;

  private static final java.util.concurrent.CountDownLatch platformExitLatch;

  private static boolean isModena;

  private static boolean isCaspian;

  private static java.lang.String accessibilityTheme;

  public com.sun.javafx.application.PlatformImpl();
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: return

  public static void setTaskbarApplication(boolean);
    Code:
       0: iload_0
       1: putstatic     #6                  // Field taskbarApplication:Z
       4: return

  public static boolean isTaskbarApplication();
    Code:
       0: getstatic     #6                  // Field taskbarApplication:Z
       3: ireturn

  public static void setApplicationName(java.lang.Class);
    Code:
       0: aload_0
       1: invokedynamic #7,  0              // InvokeDynamic #0:run:(Ljava/lang/Class;)Ljava/lang/Runnable;
       6: invokestatic  #8                  // Method runLater:(Ljava/lang/Runnable;)V
       9: return

  public static boolean isContextual2DNavigation();
    Code:
       0: getstatic     #9                  // Field contextual2DNavigation:Z
       3: ireturn

  public static void startup(java.lang.Runnable);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #10                 // Method startup:(Ljava/lang/Runnable;Z)V
       5: return

  public static void startup(java.lang.Runnable, boolean);
    Code:
       0: getstatic     #2                  // Field platformExit:Ljava/util/concurrent/atomic/AtomicBoolean;
       3: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       6: ifeq          19
       9: new           #12                 // class java/lang/IllegalStateException
      12: dup
      13: ldc           #13                 // String Platform.exit has been called
      15: invokespecial #14                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: getstatic     #15                 // Field initialized:Ljava/util/concurrent/atomic/AtomicBoolean;
      22: iconst_1
      23: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicBoolean.getAndSet:(Z)Z
      26: ifeq          48
      29: iload_1
      30: ifeq          43
      33: new           #12                 // class java/lang/IllegalStateException
      36: dup
      37: ldc           #17                 // String Toolkit already initialized
      39: invokespecial #14                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_0
      44: invokestatic  #8                  // Method runLater:(Ljava/lang/Runnable;)V
      47: return
      48: invokedynamic #18,  0             // InvokeDynamic #1:run:()Ljava/security/PrivilegedAction;
      53: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      56: pop
      57: getstatic     #20                 // Field DEBUG:Z
      60: ifeq          77
      63: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      66: getstatic     #22                 // Field applicationType:Ljava/lang/String;
      69: invokedynamic #23,  0             // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      74: invokevirtual #24                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      77: ldc           #25                 // String FXCanvas
      79: getstatic     #22                 // Field applicationType:Ljava/lang/String;
      82: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      85: ifeq          91
      88: invokestatic  #27                 // Method initFXCanvas:()V
      91: getstatic     #6                  // Field taskbarApplication:Z
      94: ifne          106
      97: invokedynamic #28,  0             // InvokeDynamic #3:run:()Ljava/security/PrivilegedAction;
     102: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
     105: pop
     106: new           #29                 // class com/sun/javafx/application/PlatformImpl$1
     109: dup
     110: invokespecial #30                 // Method com/sun/javafx/application/PlatformImpl$1."<init>":()V
     113: putstatic     #31                 // Field toolkitListener:Lcom/sun/javafx/tk/TKListener;
     116: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     119: getstatic     #31                 // Field toolkitListener:Lcom/sun/javafx/tk/TKListener;
     122: invokevirtual #33                 // Method com/sun/javafx/tk/Toolkit.addTkListener:(Lcom/sun/javafx/tk/TKListener;)V
     125: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     128: aload_0
     129: invokedynamic #34,  0             // InvokeDynamic #4:run:(Ljava/lang/Runnable;)Ljava/lang/Runnable;
     134: invokevirtual #35                 // Method com/sun/javafx/tk/Toolkit.startup:(Ljava/lang/Runnable;)V
     137: getstatic     #36                 // Field isThreadMerged:Z
     140: ifeq          146
     143: invokestatic  #37                 // Method installFwEventQueue:()V
     146: return

  private static void initDeviceDetailsFXCanvas();
    Code:
       0: invokedynamic #38,  0             // InvokeDynamic #5:run:()Ljava/security/PrivilegedAction;
       5: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
       8: checkcast     #39                 // class java/lang/Long
      11: invokevirtual #40                 // Method java/lang/Long.longValue:()J
      14: lstore_1
      15: lload_1
      16: lconst_0
      17: lcmp
      18: ifeq          65
      21: invokestatic  #41                 // Method com/sun/glass/ui/Application.getDeviceDetails:()Ljava/util/Map;
      24: astore_3
      25: aload_3
      26: ifnonnull     41
      29: new           #42                 // class java/util/HashMap
      32: dup
      33: invokespecial #43                 // Method java/util/HashMap."<init>":()V
      36: astore_3
      37: aload_3
      38: invokestatic  #44                 // Method com/sun/glass/ui/Application.setDeviceDetails:(Ljava/util/Map;)V
      41: aload_3
      42: ldc           #45                 // String javafx.embed.eventProc
      44: invokeinterface #46,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      49: ifnonnull     65
      52: aload_3
      53: ldc           #45                 // String javafx.embed.eventProc
      55: lload_1
      56: invokestatic  #47                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      59: invokeinterface #48,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      64: pop
      65: return

  private static void addExportsToFXCanvas(java.lang.Class<?>);
    Code:
       0: iconst_5
       1: anewarray     #49                 // class java/lang/String
       4: dup
       5: iconst_0
       6: ldc           #50                 // String com.sun.glass.ui
       8: aastore
       9: dup
      10: iconst_1
      11: ldc           #51                 // String com.sun.javafx.cursor
      13: aastore
      14: dup
      15: iconst_2
      16: ldc           #52                 // String com.sun.javafx.embed
      18: aastore
      19: dup
      20: iconst_3
      21: ldc           #53                 // String com.sun.javafx.stage
      23: aastore
      24: dup
      25: iconst_4
      26: ldc           #54                 // String com.sun.javafx.tk
      28: aastore
      29: astore_1
      30: getstatic     #20                 // Field DEBUG:Z
      33: ifeq          48
      36: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      39: aload_0
      40: invokedynamic #55,  0             // InvokeDynamic #6:makeConcatWithConstants:(Ljava/lang/Class;)Ljava/lang/String;
      45: invokevirtual #24                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      48: ldc           #56                 // class com/sun/javafx/application/PlatformImpl
      50: invokestatic  #57                 // Method com/sun/javafx/util/ModuleHelper.getModule:(Ljava/lang/Class;)Ljava/lang/Object;
      53: astore_2
      54: aload_0
      55: invokestatic  #57                 // Method com/sun/javafx/util/ModuleHelper.getModule:(Ljava/lang/Class;)Ljava/lang/Object;
      58: astore_3
      59: aload_1
      60: astore        4
      62: aload         4
      64: arraylength
      65: istore        5
      67: iconst_0
      68: istore        6
      70: iload         6
      72: iload         5
      74: if_icmpge     118
      77: aload         4
      79: iload         6
      81: aaload
      82: astore        7
      84: getstatic     #20                 // Field DEBUG:Z
      87: ifeq          105
      90: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      93: aload         7
      95: aload_2
      96: aload_3
      97: invokedynamic #58,  0             // InvokeDynamic #7:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;
     102: invokevirtual #24                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     105: aload_2
     106: aload         7
     108: aload_3
     109: invokestatic  #59                 // Method com/sun/javafx/util/ModuleHelper.addExports:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V
     112: iinc          6, 1
     115: goto          70
     118: return

  private static void initFXCanvas();
    Code:
       0: invokestatic  #60                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
       3: astore_0
       4: aload_0
       5: ifnull        32
       8: aload_0
       9: getstatic     #61                 // Field FXCANVAS_PERMISSION:Ljavafx/util/FXPermission;
      12: invokevirtual #62                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      15: goto          32
      18: astore_1
      19: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      22: ldc           #64                 // String FXCanvas: no permission to access JavaFX internals
      24: invokevirtual #24                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      27: aload_1
      28: invokevirtual #65                 // Method java/lang/SecurityException.printStackTrace:()V
      31: return
      32: invokedynamic #66,  0             // InvokeDynamic #8:test:()Ljava/util/function/Predicate;
      37: astore_1
      38: invokedynamic #67,  0             // InvokeDynamic #9:run:()Ljava/security/PrivilegedAction;
      43: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      46: checkcast     #68                 // class java/lang/StackWalker
      49: astore_2
      50: aload_2
      51: aload_1
      52: invokedynamic #69,  0             // InvokeDynamic #10:apply:(Ljava/util/function/Predicate;)Ljava/util/function/Function;
      57: invokevirtual #70                 // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      60: checkcast     #71                 // class java/util/Optional
      63: astore_3
      64: aload_3
      65: invokevirtual #72                 // Method java/util/Optional.isPresent:()Z
      68: ifeq          125
      71: aload_3
      72: invokevirtual #73                 // Method java/util/Optional.get:()Ljava/lang/Object;
      75: checkcast     #74                 // class java/lang/StackWalker$StackFrame
      78: invokeinterface #75,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getDeclaringClass:()Ljava/lang/Class;
      83: astore        4
      85: getstatic     #20                 // Field DEBUG:Z
      88: ifeq          104
      91: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      94: aload         4
      96: invokedynamic #76,  0             // InvokeDynamic #11:makeConcatWithConstants:(Ljava/lang/Class;)Ljava/lang/String;
     101: invokevirtual #24                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     104: ldc           #77                 // String javafx.embed.swt.FXCanvas
     106: aload         4
     108: invokevirtual #78                 // Method java/lang/Class.getName:()Ljava/lang/String;
     111: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     114: ifeq          125
     117: invokestatic  #79                 // Method initDeviceDetailsFXCanvas:()V
     120: aload         4
     122: invokestatic  #80                 // Method addExportsToFXCanvas:(Ljava/lang/Class;)V
     125: return
    Exception table:
       from    to  target type
           8    15    18   Class java/lang/SecurityException

  private static void installFwEventQueue();
    Code:
       0: ldc           #81                 // String installFwEventQueue
       2: invokestatic  #82                 // Method invokeSwingFXUtilsMethod:(Ljava/lang/String;)V
       5: return

  private static void removeFwEventQueue();
    Code:
       0: ldc           #83                 // String removeFwEventQueue
       2: invokestatic  #82                 // Method invokeSwingFXUtilsMethod:(Ljava/lang/String;)V
       5: return

  private static void invokeSwingFXUtilsMethod(java.lang.String);
    Code:
       0: ldc           #84                 // String com.sun.javafx.embed.swing.SwingFXUtilsImpl
       2: invokestatic  #85                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       5: astore_1
       6: aload_1
       7: aload_0
       8: iconst_0
       9: anewarray     #86                 // class java/lang/Class
      12: invokevirtual #87                 // Method java/lang/Class.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      15: astore_2
      16: invokestatic  #88                 // Method waitForStart:()V
      19: aload_2
      20: aconst_null
      21: iconst_0
      22: anewarray     #89                 // class java/lang/Object
      25: invokevirtual #90                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      28: pop
      29: goto          53
      32: astore_1
      33: new           #94                 // class java/lang/RuntimeException
      36: dup
      37: ldc           #95                 // String Property javafx.embed.singleThread is not supported
      39: invokespecial #96                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: astore_1
      44: new           #94                 // class java/lang/RuntimeException
      47: dup
      48: aload_1
      49: invokespecial #98                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      52: athrow
      53: return
    Exception table:
       from    to  target type
           0    29    32   Class java/lang/ClassNotFoundException
           0    29    32   Class java/lang/NoSuchMethodException
           0    29    32   Class java/lang/IllegalAccessException
           0    29    43   Class java/lang/reflect/InvocationTargetException

  private static void waitForStart();
    Code:
       0: getstatic     #99                 // Field startupLatch:Ljava/util/concurrent/CountDownLatch;
       3: invokevirtual #100                // Method java/util/concurrent/CountDownLatch.getCount:()J
       6: lconst_0
       7: lcmp
       8: ifle          25
      11: getstatic     #99                 // Field startupLatch:Ljava/util/concurrent/CountDownLatch;
      14: invokevirtual #101                // Method java/util/concurrent/CountDownLatch.await:()V
      17: goto          25
      20: astore_0
      21: aload_0
      22: invokevirtual #103                // Method java/lang/InterruptedException.printStackTrace:()V
      25: return
    Exception table:
       from    to  target type
          11    17    20   Class java/lang/InterruptedException

  public static boolean isFxApplicationThread();
    Code:
       0: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
       3: invokevirtual #104                // Method com/sun/javafx/tk/Toolkit.isFxUserThread:()Z
       6: ireturn

  public static void runLater(java.lang.Runnable);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #105                // Method runLater:(Ljava/lang/Runnable;Z)V
       5: return

  private static void runLater(java.lang.Runnable, boolean);
    Code:
       0: getstatic     #15                 // Field initialized:Ljava/util/concurrent/atomic/AtomicBoolean;
       3: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       6: ifne          19
       9: new           #12                 // class java/lang/IllegalStateException
      12: dup
      13: ldc           #106                // String Toolkit not initialized
      15: invokespecial #14                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: getstatic     #107                // Field pendingRunnables:Ljava/util/concurrent/atomic/AtomicInteger;
      22: invokevirtual #108                // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      25: pop
      26: invokestatic  #88                 // Method waitForStart:()V
      29: getstatic     #109                // Field runLaterLock:Ljava/lang/Object;
      32: dup
      33: astore_2
      34: monitorenter
      35: iload_1
      36: ifne          58
      39: getstatic     #110                // Field toolkitExit:Ljava/util/concurrent/atomic/AtomicBoolean;
      42: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      45: ifeq          58
      48: getstatic     #107                // Field pendingRunnables:Ljava/util/concurrent/atomic/AtomicInteger;
      51: invokevirtual #111                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      54: pop
      55: aload_2
      56: monitorexit
      57: return
      58: invokestatic  #112                // Method java/security/AccessController.getContext:()Ljava/security/AccessControlContext;
      61: astore_3
      62: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
      65: aload_0
      66: aload_3
      67: invokedynamic #113,  0            // InvokeDynamic #12:run:(Ljava/lang/Runnable;Ljava/security/AccessControlContext;)Ljava/lang/Runnable;
      72: invokevirtual #114                // Method com/sun/javafx/tk/Toolkit.defer:(Ljava/lang/Runnable;)V
      75: aload_2
      76: monitorexit
      77: goto          87
      80: astore        4
      82: aload_2
      83: monitorexit
      84: aload         4
      86: athrow
      87: return
    Exception table:
       from    to  target type
          35    57    80   any
          58    77    80   any
          80    84    80   any

  public static void runAndWait(java.lang.Runnable);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #115                // Method runAndWait:(Ljava/lang/Runnable;Z)V
       5: return

  private static void runAndWait(java.lang.Runnable, boolean);
    Code:
       0: invokestatic  #116                // Method isFxApplicationThread:()Z
       3: ifeq          31
       6: aload_0
       7: invokeinterface #117,  1          // InterfaceMethod java/lang/Runnable.run:()V
      12: goto          86
      15: astore_2
      16: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
      19: ldc           #119                // String Exception in runnable
      21: invokevirtual #24                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      24: aload_2
      25: invokevirtual #120                // Method java/lang/Throwable.printStackTrace:()V
      28: goto          86
      31: new           #121                // class java/util/concurrent/CountDownLatch
      34: dup
      35: iconst_1
      36: invokespecial #122                // Method java/util/concurrent/CountDownLatch."<init>":(I)V
      39: astore_2
      40: aload_0
      41: aload_2
      42: invokedynamic #123,  0            // InvokeDynamic #13:run:(Ljava/lang/Runnable;Ljava/util/concurrent/CountDownLatch;)Ljava/lang/Runnable;
      47: iload_1
      48: invokestatic  #105                // Method runLater:(Ljava/lang/Runnable;Z)V
      51: iload_1
      52: ifne          74
      55: getstatic     #110                // Field toolkitExit:Ljava/util/concurrent/atomic/AtomicBoolean;
      58: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      61: ifeq          74
      64: new           #12                 // class java/lang/IllegalStateException
      67: dup
      68: ldc           #124                // String Toolkit has exited
      70: invokespecial #14                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      73: athrow
      74: aload_2
      75: invokevirtual #101                // Method java/util/concurrent/CountDownLatch.await:()V
      78: goto          86
      81: astore_3
      82: aload_3
      83: invokevirtual #103                // Method java/lang/InterruptedException.printStackTrace:()V
      86: return
    Exception table:
       from    to  target type
           6    12    15   Class java/lang/Throwable
          74    78    81   Class java/lang/InterruptedException

  public static void setImplicitExit(boolean);
    Code:
       0: iload_0
       1: putstatic     #125                // Field implicitExit:Z
       4: invokestatic  #3                  // Method checkIdle:()V
       7: return

  public static boolean isImplicitExit();
    Code:
       0: getstatic     #125                // Field implicitExit:Z
       3: ireturn

  public static void addListener(com.sun.javafx.application.PlatformImpl$FinishListener);
    Code:
       0: getstatic     #126                // Field listenersRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
       3: iconst_1
       4: invokevirtual #127                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       7: getstatic     #128                // Field finishListeners:Ljava/util/Set;
      10: aload_0
      11: invokeinterface #129,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      16: pop
      17: return

  public static void removeListener(com.sun.javafx.application.PlatformImpl$FinishListener);
    Code:
       0: getstatic     #128                // Field finishListeners:Ljava/util/Set;
       3: aload_0
       4: invokeinterface #130,  2          // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
       9: pop
      10: getstatic     #126                // Field listenersRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
      13: getstatic     #128                // Field finishListeners:Ljava/util/Set;
      16: invokeinterface #131,  1          // InterfaceMethod java/util/Set.isEmpty:()Z
      21: ifne          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: invokevirtual #127                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      32: getstatic     #126                // Field listenersRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
      35: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      38: ifne          44
      41: invokestatic  #3                  // Method checkIdle:()V
      44: return

  private static void notifyFinishListeners(boolean);
    Code:
       0: getstatic     #126                // Field listenersRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
       3: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       6: ifeq          65
       9: getstatic     #128                // Field finishListeners:Ljava/util/Set;
      12: invokeinterface #132,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      17: astore_1
      18: aload_1
      19: invokeinterface #133,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          62
      27: aload_1
      28: invokeinterface #134,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #135                // class com/sun/javafx/application/PlatformImpl$FinishListener
      36: astore_2
      37: iload_0
      38: ifeq          50
      41: aload_2
      42: invokeinterface #136,  1          // InterfaceMethod com/sun/javafx/application/PlatformImpl$FinishListener.exitCalled:()V
      47: goto          59
      50: aload_2
      51: getstatic     #125                // Field implicitExit:Z
      54: invokeinterface #137,  2          // InterfaceMethod com/sun/javafx/application/PlatformImpl$FinishListener.idle:(Z)V
      59: goto          18
      62: goto          83
      65: getstatic     #125                // Field implicitExit:Z
      68: ifne          80
      71: getstatic     #2                  // Field platformExit:Ljava/util/concurrent/atomic/AtomicBoolean;
      74: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      77: ifeq          83
      80: invokestatic  #138                // Method tkExit:()V
      83: return

  private static void checkIdle();
    Code:
       0: getstatic     #15                 // Field initialized:Ljava/util/concurrent/atomic/AtomicBoolean;
       3: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       6: ifne          10
       9: return
      10: invokestatic  #116                // Method isFxApplicationThread:()Z
      13: ifne          25
      16: invokedynamic #139,  0            // InvokeDynamic #14:run:()Ljava/lang/Runnable;
      21: invokestatic  #8                  // Method runLater:(Ljava/lang/Runnable;)V
      24: return
      25: iconst_0
      26: istore_0
      27: ldc           #56                 // class com/sun/javafx/application/PlatformImpl
      29: dup
      30: astore_1
      31: monitorenter
      32: getstatic     #4                  // Field numWindows:Ljava/util/concurrent/atomic/AtomicInteger;
      35: invokevirtual #140                // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      38: istore_2
      39: iload_2
      40: ifle          61
      43: iconst_1
      44: putstatic     #141                // Field firstWindowShown:Z
      47: iconst_0
      48: putstatic     #142                // Field lastWindowClosed:Z
      51: getstatic     #143                // Field reallyIdle:Ljava/util/concurrent/atomic/AtomicBoolean;
      54: iconst_0
      55: invokevirtual #127                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      58: goto          75
      61: iload_2
      62: ifne          75
      65: getstatic     #141                // Field firstWindowShown:Z
      68: ifeq          75
      71: iconst_1
      72: putstatic     #142                // Field lastWindowClosed:Z
      75: getstatic     #142                // Field lastWindowClosed:Z
      78: ifeq          135
      81: getstatic     #107                // Field pendingRunnables:Ljava/util/concurrent/atomic/AtomicInteger;
      84: invokevirtual #140                // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      87: ifne          135
      90: getstatic     #110                // Field toolkitExit:Ljava/util/concurrent/atomic/AtomicBoolean;
      93: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      96: ifne          108
      99: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     102: invokevirtual #144                // Method com/sun/javafx/tk/Toolkit.isNestedLoopRunning:()Z
     105: ifne          135
     108: getstatic     #143                // Field reallyIdle:Ljava/util/concurrent/atomic/AtomicBoolean;
     111: iconst_1
     112: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicBoolean.getAndSet:(Z)Z
     115: ifeq          127
     118: iconst_1
     119: istore_0
     120: iconst_0
     121: putstatic     #142                // Field lastWindowClosed:Z
     124: goto          135
     127: invokedynamic #145,  0            // InvokeDynamic #15:run:()Ljava/lang/Runnable;
     132: invokestatic  #8                  // Method runLater:(Ljava/lang/Runnable;)V
     135: aload_1
     136: monitorexit
     137: goto          145
     140: astore_3
     141: aload_1
     142: monitorexit
     143: aload_3
     144: athrow
     145: iload_0
     146: ifeq          153
     149: iconst_0
     150: invokestatic  #146                // Method notifyFinishListeners:(Z)V
     153: return
    Exception table:
       from    to  target type
          32   137   140   any
         140   143   140   any

  static java.util.concurrent.CountDownLatch test_getPlatformExitLatch();
    Code:
       0: getstatic     #147                // Field platformExitLatch:Ljava/util/concurrent/CountDownLatch;
       3: areturn

  public static void tkExit();
    Code:
       0: getstatic     #110                // Field toolkitExit:Ljava/util/concurrent/atomic/AtomicBoolean;
       3: iconst_1
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicBoolean.getAndSet:(Z)Z
       7: ifeq          11
      10: return
      11: getstatic     #15                 // Field initialized:Ljava/util/concurrent/atomic/AtomicBoolean;
      14: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      17: ifeq          95
      20: getstatic     #2                  // Field platformExit:Ljava/util/concurrent/atomic/AtomicBoolean;
      23: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      26: ifeq          58
      29: invokedynamic #148,  0            // InvokeDynamic #16:run:()Ljava/lang/Runnable;
      34: iconst_1
      35: invokestatic  #115                // Method runAndWait:(Ljava/lang/Runnable;Z)V
      38: getstatic     #1                  // Field allNestedLoopsExitedLatch:Ljava/util/concurrent/CountDownLatch;
      41: invokevirtual #101                // Method java/util/concurrent/CountDownLatch.await:()V
      44: goto          58
      47: astore_0
      48: new           #94                 // class java/lang/RuntimeException
      51: dup
      52: ldc           #149                // String Could not exit all nested event loops
      54: invokespecial #96                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: invokedynamic #150,  0            // InvokeDynamic #17:run:()Ljava/lang/Runnable;
      63: iconst_1
      64: invokestatic  #115                // Method runAndWait:(Ljava/lang/Runnable;Z)V
      67: getstatic     #36                 // Field isThreadMerged:Z
      70: ifeq          76
      73: invokestatic  #151                // Method removeFwEventQueue:()V
      76: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
      79: getstatic     #31                 // Field toolkitListener:Lcom/sun/javafx/tk/TKListener;
      82: invokevirtual #152                // Method com/sun/javafx/tk/Toolkit.removeTkListener:(Lcom/sun/javafx/tk/TKListener;)V
      85: aconst_null
      86: putstatic     #31                 // Field toolkitListener:Lcom/sun/javafx/tk/TKListener;
      89: getstatic     #147                // Field platformExitLatch:Ljava/util/concurrent/CountDownLatch;
      92: invokevirtual #153                // Method java/util/concurrent/CountDownLatch.countDown:()V
      95: return
    Exception table:
       from    to  target type
          38    44    47   Class java/lang/InterruptedException

  public static javafx.beans.property.BooleanProperty accessibilityActiveProperty();
    Code:
       0: getstatic     #154                // Field accessibilityActive:Ljavafx/beans/property/BooleanProperty;
       3: areturn

  public static void exit();
    Code:
       0: getstatic     #2                  // Field platformExit:Ljava/util/concurrent/atomic/AtomicBoolean;
       3: iconst_1
       4: invokevirtual #127                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       7: iconst_1
       8: invokestatic  #146                // Method notifyFinishListeners:(Z)V
      11: return

  private static java.lang.Boolean checkForClass(java.lang.String);
    Code:
       0: aload_0
       1: iconst_0
       2: ldc           #56                 // class com/sun/javafx/application/PlatformImpl
       4: invokevirtual #155                // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
       7: invokestatic  #156                // Method java/lang/Class.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;
      10: pop
      11: getstatic     #157                // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      14: areturn
      15: astore_1
      16: getstatic     #158                // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
      19: areturn
    Exception table:
       from    to  target type
           0    14    15   Class java/lang/ClassNotFoundException

  public static boolean isSupported(javafx.application.ConditionalFeature);
    Code:
       0: aload_0
       1: invokestatic  #159                // Method isSupportedImpl:(Ljavafx/application/ConditionalFeature;)Z
       4: istore_1
       5: iload_1
       6: ifeq          39
       9: aload_0
      10: getstatic     #160                // Field javafx/application/ConditionalFeature.TRANSPARENT_WINDOW:Ljavafx/application/ConditionalFeature;
      13: if_acmpne     39
      16: invokestatic  #60                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
      19: astore_2
      20: aload_2
      21: ifnull        37
      24: aload_2
      25: getstatic     #161                // Field com/sun/javafx/FXPermissions.CREATE_TRANSPARENT_WINDOW_PERMISSION:Ljavafx/util/FXPermission;
      28: invokevirtual #62                 // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
      31: goto          37
      34: astore_3
      35: iconst_0
      36: ireturn
      37: iconst_1
      38: ireturn
      39: iload_1
      40: ireturn
    Exception table:
       from    to  target type
          24    31    34   Class java/lang/SecurityException

  public static void setDefaultPlatformUserAgentStylesheet();
    Code:
       0: ldc           #163                // String MODENA
       2: invokestatic  #164                // Method setPlatformUserAgentStylesheet:(Ljava/lang/String;)V
       5: return

  public static boolean isModena();
    Code:
       0: getstatic     #165                // Field isModena:Z
       3: ireturn

  public static boolean isCaspian();
    Code:
       0: getstatic     #166                // Field isCaspian:Z
       3: ireturn

  public static void setPlatformUserAgentStylesheet(java.lang.String);
    Code:
       0: invokestatic  #116                // Method isFxApplicationThread:()Z
       3: ifeq          13
       6: aload_0
       7: invokestatic  #167                // Method _setPlatformUserAgentStylesheet:(Ljava/lang/String;)V
      10: goto          22
      13: aload_0
      14: invokedynamic #168,  0            // InvokeDynamic #18:run:(Ljava/lang/String;)Ljava/lang/Runnable;
      19: invokestatic  #8                  // Method runLater:(Ljava/lang/Runnable;)V
      22: return

  public static boolean setAccessibilityTheme(java.lang.String);
    Code:
       0: getstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
       3: ifnull        19
       6: invokestatic  #170                // Method com/sun/javafx/css/StyleManager.getInstance:()Lcom/sun/javafx/css/StyleManager;
       9: getstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
      12: invokevirtual #171                // Method com/sun/javafx/css/StyleManager.removeUserAgentStylesheet:(Ljava/lang/String;)V
      15: aconst_null
      16: putstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
      19: aload_0
      20: invokestatic  #172                // Method _setAccessibilityTheme:(Ljava/lang/String;)V
      23: getstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
      26: ifnull        40
      29: invokestatic  #170                // Method com/sun/javafx/css/StyleManager.getInstance:()Lcom/sun/javafx/css/StyleManager;
      32: getstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
      35: invokevirtual #173                // Method com/sun/javafx/css/StyleManager.addUserAgentStylesheet:(Ljava/lang/String;)V
      38: iconst_1
      39: ireturn
      40: iconst_0
      41: ireturn

  private static void _setAccessibilityTheme(java.lang.String);
    Code:
       0: invokedynamic #174,  0            // InvokeDynamic #19:run:()Ljava/security/PrivilegedAction;
       5: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
       8: checkcast     #49                 // class java/lang/String
      11: astore_1
      12: invokestatic  #175                // Method isCaspian:()Z
      15: ifeq          34
      18: aload_0
      19: ifnonnull     26
      22: aload_1
      23: ifnull        344
      26: ldc           #176                // String com/sun/javafx/scene/control/skin/caspian/highcontrast.css
      28: putstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
      31: goto          344
      34: invokestatic  #177                // Method isModena:()Z
      37: ifeq          344
      40: aload_1
      41: ifnull        183
      44: aload_1
      45: invokevirtual #178                // Method java/lang/String.toUpperCase:()Ljava/lang/String;
      48: astore_2
      49: iconst_m1
      50: istore_3
      51: aload_2
      52: invokevirtual #179                // Method java/lang/String.hashCode:()I
      55: lookupswitch  { // 3
           -1565401492: 116
           -1464590025: 102
            1347075275: 88
               default: 127
          }
      88: aload_2
      89: ldc           #180                // String BLACKONWHITE
      91: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      94: ifeq          127
      97: iconst_0
      98: istore_3
      99: goto          127
     102: aload_2
     103: ldc           #181                // String WHITEONBLACK
     105: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     108: ifeq          127
     111: iconst_1
     112: istore_3
     113: goto          127
     116: aload_2
     117: ldc           #182                // String YELLOWONBLACK
     119: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     122: ifeq          127
     125: iconst_2
     126: istore_3
     127: iload_3
     128: tableswitch   { // 0 to 2
                     0: 156
                     1: 164
                     2: 172
               default: 180
          }
     156: ldc           #183                // String com/sun/javafx/scene/control/skin/modena/blackOnWhite.css
     158: putstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
     161: goto          180
     164: ldc           #184                // String com/sun/javafx/scene/control/skin/modena/whiteOnBlack.css
     166: putstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
     169: goto          180
     172: ldc           #185                // String com/sun/javafx/scene/control/skin/modena/yellowOnBlack.css
     174: putstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
     177: goto          180
     180: goto          344
     183: aload_0
     184: ifnull        344
     187: aload_0
     188: astore_2
     189: iconst_m1
     190: istore_3
     191: aload_2
     192: invokevirtual #179                // Method java/lang/String.hashCode:()I
     195: lookupswitch  { // 4
            -333003905: 250
            -313720919: 236
            -311851826: 264
            -311851825: 278
               default: 289
          }
     236: aload_2
     237: ldc           #186                // String High Contrast White
     239: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     242: ifeq          289
     245: iconst_0
     246: istore_3
     247: goto          289
     250: aload_2
     251: ldc           #187                // String High Contrast Black
     253: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     256: ifeq          289
     259: iconst_1
     260: istore_3
     261: goto          289
     264: aload_2
     265: ldc           #188                // String High Contrast #1
     267: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     270: ifeq          289
     273: iconst_2
     274: istore_3
     275: goto          289
     278: aload_2
     279: ldc           #189                // String High Contrast #2
     281: invokevirtual #26                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     284: ifeq          289
     287: iconst_3
     288: istore_3
     289: iload_3
     290: tableswitch   { // 0 to 3
                     0: 320
                     1: 328
                     2: 336
                     3: 336
               default: 344
          }
     320: ldc           #183                // String com/sun/javafx/scene/control/skin/modena/blackOnWhite.css
     322: putstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
     325: goto          344
     328: ldc           #184                // String com/sun/javafx/scene/control/skin/modena/whiteOnBlack.css
     330: putstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
     333: goto          344
     336: ldc           #185                // String com/sun/javafx/scene/control/skin/modena/yellowOnBlack.css
     338: putstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
     341: goto          344
     344: return

  private static void _setPlatformUserAgentStylesheet(java.lang.String);
    Code:
       0: iconst_0
       1: dup
       2: putstatic     #166                // Field isCaspian:Z
       5: putstatic     #165                // Field isModena:Z
       8: invokedynamic #190,  0            // InvokeDynamic #20:run:()Ljava/security/PrivilegedAction;
      13: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      16: checkcast     #49                 // class java/lang/String
      19: astore_1
      20: aload_1
      21: ifnull        26
      24: aload_1
      25: astore_0
      26: new           #191                // class java/util/ArrayList
      29: dup
      30: invokespecial #192                // Method java/util/ArrayList."<init>":()V
      33: astore_2
      34: ldc           #193                // String CASPIAN
      36: aload_0
      37: invokevirtual #194                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      40: ifeq          161
      43: iconst_1
      44: putstatic     #166                // Field isCaspian:Z
      47: aload_2
      48: ldc           #195                // String com/sun/javafx/scene/control/skin/caspian/caspian.css
      50: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      55: pop
      56: getstatic     #197                // Field javafx/application/ConditionalFeature.INPUT_TOUCH:Ljavafx/application/ConditionalFeature;
      59: invokestatic  #198                // Method isSupported:(Ljavafx/application/ConditionalFeature;)Z
      62: ifeq          104
      65: aload_2
      66: ldc           #199                // String com/sun/javafx/scene/control/skin/caspian/embedded.css
      68: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      73: pop
      74: invokestatic  #200                // Method com/sun/javafx/util/Utils.isQVGAScreen:()Z
      77: ifeq          89
      80: aload_2
      81: ldc           #201                // String com/sun/javafx/scene/control/skin/caspian/embedded-qvga.css
      83: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      88: pop
      89: invokestatic  #202                // Method com/sun/javafx/PlatformUtil.isAndroid:()Z
      92: ifeq          104
      95: aload_2
      96: ldc           #203                // String com/sun/javafx/scene/control/skin/caspian/android.css
      98: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     103: pop
     104: getstatic     #204                // Field javafx/application/ConditionalFeature.TWO_LEVEL_FOCUS:Ljavafx/application/ConditionalFeature;
     107: invokestatic  #198                // Method isSupported:(Ljavafx/application/ConditionalFeature;)Z
     110: ifeq          122
     113: aload_2
     114: ldc           #205                // String com/sun/javafx/scene/control/skin/caspian/two-level-focus.css
     116: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     121: pop
     122: getstatic     #206                // Field javafx/application/ConditionalFeature.VIRTUAL_KEYBOARD:Ljavafx/application/ConditionalFeature;
     125: invokestatic  #198                // Method isSupported:(Ljavafx/application/ConditionalFeature;)Z
     128: ifeq          140
     131: aload_2
     132: ldc           #207                // String com/sun/javafx/scene/control/skin/caspian/fxvk.css
     134: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     139: pop
     140: getstatic     #160                // Field javafx/application/ConditionalFeature.TRANSPARENT_WINDOW:Ljavafx/application/ConditionalFeature;
     143: invokestatic  #198                // Method isSupported:(Ljavafx/application/ConditionalFeature;)Z
     146: ifne          296
     149: aload_2
     150: ldc           #208                // String com/sun/javafx/scene/control/skin/caspian/caspian-no-transparency.css
     152: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     157: pop
     158: goto          296
     161: ldc           #163                // String MODENA
     163: aload_0
     164: invokevirtual #194                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     167: ifeq          288
     170: iconst_1
     171: putstatic     #165                // Field isModena:Z
     174: aload_2
     175: ldc           #209                // String com/sun/javafx/scene/control/skin/modena/modena.css
     177: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     182: pop
     183: getstatic     #197                // Field javafx/application/ConditionalFeature.INPUT_TOUCH:Ljavafx/application/ConditionalFeature;
     186: invokestatic  #198                // Method isSupported:(Ljavafx/application/ConditionalFeature;)Z
     189: ifeq          201
     192: aload_2
     193: ldc           #210                // String com/sun/javafx/scene/control/skin/modena/touch.css
     195: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     200: pop
     201: invokestatic  #211                // Method com/sun/javafx/PlatformUtil.isEmbedded:()Z
     204: ifeq          216
     207: aload_2
     208: ldc           #212                // String com/sun/javafx/scene/control/skin/modena/modena-embedded-performance.css
     210: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     215: pop
     216: invokestatic  #202                // Method com/sun/javafx/PlatformUtil.isAndroid:()Z
     219: ifeq          231
     222: aload_2
     223: ldc           #213                // String com/sun/javafx/scene/control/skin/modena/android.css
     225: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     230: pop
     231: getstatic     #204                // Field javafx/application/ConditionalFeature.TWO_LEVEL_FOCUS:Ljavafx/application/ConditionalFeature;
     234: invokestatic  #198                // Method isSupported:(Ljavafx/application/ConditionalFeature;)Z
     237: ifeq          249
     240: aload_2
     241: ldc           #214                // String com/sun/javafx/scene/control/skin/modena/two-level-focus.css
     243: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     248: pop
     249: getstatic     #206                // Field javafx/application/ConditionalFeature.VIRTUAL_KEYBOARD:Ljavafx/application/ConditionalFeature;
     252: invokestatic  #198                // Method isSupported:(Ljavafx/application/ConditionalFeature;)Z
     255: ifeq          267
     258: aload_2
     259: ldc           #207                // String com/sun/javafx/scene/control/skin/caspian/fxvk.css
     261: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     266: pop
     267: getstatic     #160                // Field javafx/application/ConditionalFeature.TRANSPARENT_WINDOW:Ljavafx/application/ConditionalFeature;
     270: invokestatic  #198                // Method isSupported:(Ljavafx/application/ConditionalFeature;)Z
     273: ifne          296
     276: aload_2
     277: ldc           #215                // String com/sun/javafx/scene/control/skin/modena/modena-no-transparency.css
     279: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     284: pop
     285: goto          296
     288: aload_2
     289: aload_0
     290: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     295: pop
     296: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     299: invokevirtual #216                // Method com/sun/javafx/tk/Toolkit.getThemeName:()Ljava/lang/String;
     302: invokestatic  #172                // Method _setAccessibilityTheme:(Ljava/lang/String;)V
     305: getstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
     308: ifnull        321
     311: aload_2
     312: getstatic     #169                // Field accessibilityTheme:Ljava/lang/String;
     315: invokeinterface #196,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     320: pop
     321: aload_2
     322: invokedynamic #217,  0            // InvokeDynamic #21:run:(Ljava/util/List;)Ljava/security/PrivilegedAction;
     327: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
     330: pop
     331: return

  public static void addNoTransparencyStylesheetToScene(javafx.scene.Scene);
    Code:
       0: invokestatic  #175                // Method isCaspian:()Z
       3: ifeq          19
       6: aload_0
       7: invokedynamic #218,  0            // InvokeDynamic #22:run:(Ljavafx/scene/Scene;)Ljava/security/PrivilegedAction;
      12: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      15: pop
      16: goto          35
      19: invokestatic  #177                // Method isModena:()Z
      22: ifeq          35
      25: aload_0
      26: invokedynamic #219,  0            // InvokeDynamic #23:run:(Ljavafx/scene/Scene;)Ljava/security/PrivilegedAction;
      31: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      34: pop
      35: return

  private static boolean isSupportedImpl(javafx.application.ConditionalFeature);
    Code:
       0: getstatic     #220                // Field com/sun/javafx/application/PlatformImpl$2.$SwitchMap$javafx$application$ConditionalFeature:[I
       3: aload_0
       4: invokevirtual #221                // Method javafx/application/ConditionalFeature.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 12
                     1: 72
                     2: 93
                     3: 114
                     4: 159
                     5: 204
                     6: 225
                     7: 271
                     8: 317
                     9: 338
                    10: 359
                    11: 380
                    12: 401
               default: 422
          }
      72: getstatic     #222                // Field isGraphicsSupported:Ljava/lang/Boolean;
      75: ifnonnull     86
      78: ldc           #223                // String javafx.stage.Stage
      80: invokestatic  #224                // Method checkForClass:(Ljava/lang/String;)Ljava/lang/Boolean;
      83: putstatic     #222                // Field isGraphicsSupported:Ljava/lang/Boolean;
      86: getstatic     #222                // Field isGraphicsSupported:Ljava/lang/Boolean;
      89: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
      92: ireturn
      93: getstatic     #226                // Field isControlsSupported:Ljava/lang/Boolean;
      96: ifnonnull     107
      99: ldc           #227                // String javafx.scene.control.Control
     101: invokestatic  #224                // Method checkForClass:(Ljava/lang/String;)Ljava/lang/Boolean;
     104: putstatic     #226                // Field isControlsSupported:Ljava/lang/Boolean;
     107: getstatic     #226                // Field isControlsSupported:Ljava/lang/Boolean;
     110: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     113: ireturn
     114: getstatic     #228                // Field isMediaSupported:Ljava/lang/Boolean;
     117: ifnonnull     152
     120: ldc           #229                // String javafx.scene.media.MediaView
     122: invokestatic  #224                // Method checkForClass:(Ljava/lang/String;)Ljava/lang/Boolean;
     125: putstatic     #228                // Field isMediaSupported:Ljava/lang/Boolean;
     128: getstatic     #228                // Field isMediaSupported:Ljava/lang/Boolean;
     131: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     134: ifeq          152
     137: invokestatic  #211                // Method com/sun/javafx/PlatformUtil.isEmbedded:()Z
     140: ifeq          152
     143: invokedynamic #230,  0            // InvokeDynamic #24:run:()Ljava/security/PrivilegedAction;
     148: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
     151: pop
     152: getstatic     #228                // Field isMediaSupported:Ljava/lang/Boolean;
     155: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     158: ireturn
     159: getstatic     #231                // Field isWebSupported:Ljava/lang/Boolean;
     162: ifnonnull     197
     165: ldc           #232                // String javafx.scene.web.WebView
     167: invokestatic  #224                // Method checkForClass:(Ljava/lang/String;)Ljava/lang/Boolean;
     170: putstatic     #231                // Field isWebSupported:Ljava/lang/Boolean;
     173: getstatic     #231                // Field isWebSupported:Ljava/lang/Boolean;
     176: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     179: ifeq          197
     182: invokestatic  #211                // Method com/sun/javafx/PlatformUtil.isEmbedded:()Z
     185: ifeq          197
     188: invokedynamic #233,  0            // InvokeDynamic #25:run:()Ljava/security/PrivilegedAction;
     193: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
     196: pop
     197: getstatic     #231                // Field isWebSupported:Ljava/lang/Boolean;
     200: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     203: ireturn
     204: getstatic     #234                // Field isSWTSupported:Ljava/lang/Boolean;
     207: ifnonnull     218
     210: ldc           #77                 // String javafx.embed.swt.FXCanvas
     212: invokestatic  #224                // Method checkForClass:(Ljava/lang/String;)Ljava/lang/Boolean;
     215: putstatic     #234                // Field isSWTSupported:Ljava/lang/Boolean;
     218: getstatic     #234                // Field isSWTSupported:Ljava/lang/Boolean;
     221: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     224: ireturn
     225: getstatic     #235                // Field isSwingSupported:Ljava/lang/Boolean;
     228: ifnonnull     264
     231: ldc           #236                // String javax.swing.JComponent
     233: invokestatic  #224                // Method checkForClass:(Ljava/lang/String;)Ljava/lang/Boolean;
     236: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     239: ifeq          257
     242: ldc           #237                // String javafx.embed.swing.JFXPanel
     244: invokestatic  #224                // Method checkForClass:(Ljava/lang/String;)Ljava/lang/Boolean;
     247: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     250: ifeq          257
     253: iconst_1
     254: goto          258
     257: iconst_0
     258: invokestatic  #238                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     261: putstatic     #235                // Field isSwingSupported:Ljava/lang/Boolean;
     264: getstatic     #235                // Field isSwingSupported:Ljava/lang/Boolean;
     267: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     270: ireturn
     271: getstatic     #239                // Field isFXMLSupported:Ljava/lang/Boolean;
     274: ifnonnull     310
     277: ldc           #240                // String javafx.fxml.FXMLLoader
     279: invokestatic  #224                // Method checkForClass:(Ljava/lang/String;)Ljava/lang/Boolean;
     282: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     285: ifeq          303
     288: ldc           #241                // String javax.xml.stream.XMLInputFactory
     290: invokestatic  #224                // Method checkForClass:(Ljava/lang/String;)Ljava/lang/Boolean;
     293: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     296: ifeq          303
     299: iconst_1
     300: goto          304
     303: iconst_0
     304: invokestatic  #238                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     307: putstatic     #239                // Field isFXMLSupported:Ljava/lang/Boolean;
     310: getstatic     #239                // Field isFXMLSupported:Ljava/lang/Boolean;
     313: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     316: ireturn
     317: getstatic     #242                // Field hasTwoLevelFocus:Ljava/lang/Boolean;
     320: ifnonnull     331
     323: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     326: aload_0
     327: invokevirtual #243                // Method com/sun/javafx/tk/Toolkit.isSupported:(Ljavafx/application/ConditionalFeature;)Z
     330: ireturn
     331: getstatic     #242                // Field hasTwoLevelFocus:Ljava/lang/Boolean;
     334: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     337: ireturn
     338: getstatic     #244                // Field hasVirtualKeyboard:Ljava/lang/Boolean;
     341: ifnonnull     352
     344: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     347: aload_0
     348: invokevirtual #243                // Method com/sun/javafx/tk/Toolkit.isSupported:(Ljavafx/application/ConditionalFeature;)Z
     351: ireturn
     352: getstatic     #244                // Field hasVirtualKeyboard:Ljava/lang/Boolean;
     355: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     358: ireturn
     359: getstatic     #245                // Field hasTouch:Ljava/lang/Boolean;
     362: ifnonnull     373
     365: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     368: aload_0
     369: invokevirtual #243                // Method com/sun/javafx/tk/Toolkit.isSupported:(Ljavafx/application/ConditionalFeature;)Z
     372: ireturn
     373: getstatic     #245                // Field hasTouch:Ljava/lang/Boolean;
     376: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     379: ireturn
     380: getstatic     #246                // Field hasMultiTouch:Ljava/lang/Boolean;
     383: ifnonnull     394
     386: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     389: aload_0
     390: invokevirtual #243                // Method com/sun/javafx/tk/Toolkit.isSupported:(Ljavafx/application/ConditionalFeature;)Z
     393: ireturn
     394: getstatic     #246                // Field hasMultiTouch:Ljava/lang/Boolean;
     397: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     400: ireturn
     401: getstatic     #247                // Field hasPointer:Ljava/lang/Boolean;
     404: ifnonnull     415
     407: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     410: aload_0
     411: invokevirtual #243                // Method com/sun/javafx/tk/Toolkit.isSupported:(Ljavafx/application/ConditionalFeature;)Z
     414: ireturn
     415: getstatic     #247                // Field hasPointer:Ljava/lang/Boolean;
     418: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     421: ireturn
     422: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
     425: aload_0
     426: invokevirtual #243                // Method com/sun/javafx/tk/Toolkit.isSupported:(Ljavafx/application/ConditionalFeature;)Z
     429: ireturn

  private static java.lang.Void lambda$isSupportedImpl$24();
    Code:
       0: ldc           #248                // String com.sun.javafx.experimental.embedded.web
       2: ldc           #249                // String false
       4: invokestatic  #250                // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: astore_0
       8: aload_0
       9: invokestatic  #251                // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
      12: putstatic     #231                // Field isWebSupported:Ljava/lang/Boolean;
      15: aconst_null
      16: areturn

  private static java.lang.Void lambda$isSupportedImpl$23();
    Code:
       0: ldc           #252                // String com.sun.javafx.experimental.embedded.media
       2: ldc           #249                // String false
       4: invokestatic  #250                // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: astore_0
       8: aload_0
       9: invokestatic  #251                // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
      12: putstatic     #228                // Field isMediaSupported:Ljava/lang/Boolean;
      15: aconst_null
      16: areturn

  private static java.lang.Object lambda$addNoTransparencyStylesheetToScene$22(javafx.scene.Scene);
    Code:
       0: invokestatic  #170                // Method com/sun/javafx/css/StyleManager.getInstance:()Lcom/sun/javafx/css/StyleManager;
       3: aload_0
       4: ldc           #215                // String com/sun/javafx/scene/control/skin/modena/modena-no-transparency.css
       6: invokevirtual #253                // Method com/sun/javafx/css/StyleManager.addUserAgentStylesheet:(Ljavafx/scene/Scene;Ljava/lang/String;)V
       9: aconst_null
      10: areturn

  private static java.lang.Object lambda$addNoTransparencyStylesheetToScene$21(javafx.scene.Scene);
    Code:
       0: invokestatic  #170                // Method com/sun/javafx/css/StyleManager.getInstance:()Lcom/sun/javafx/css/StyleManager;
       3: aload_0
       4: ldc           #208                // String com/sun/javafx/scene/control/skin/caspian/caspian-no-transparency.css
       6: invokevirtual #253                // Method com/sun/javafx/css/StyleManager.addUserAgentStylesheet:(Ljavafx/scene/Scene;Ljava/lang/String;)V
       9: aconst_null
      10: areturn

  private static java.lang.Object lambda$_setPlatformUserAgentStylesheet$20(java.util.List);
    Code:
       0: invokestatic  #170                // Method com/sun/javafx/css/StyleManager.getInstance:()Lcom/sun/javafx/css/StyleManager;
       3: aload_0
       4: invokevirtual #254                // Method com/sun/javafx/css/StyleManager.setUserAgentStylesheets:(Ljava/util/List;)V
       7: aconst_null
       8: areturn

  private static java.lang.String lambda$_setPlatformUserAgentStylesheet$19();
    Code:
       0: ldc           #255                // String javafx.userAgentStylesheetUrl
       2: invokestatic  #256                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: areturn

  private static java.lang.String lambda$_setAccessibilityTheme$18();
    Code:
       0: ldc_w         #257                // String com.sun.javafx.highContrastTheme
       3: invokestatic  #256                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  private static void lambda$setPlatformUserAgentStylesheet$17(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #167                // Method _setPlatformUserAgentStylesheet:(Ljava/lang/String;)V
       4: return

  private static void lambda$tkExit$16();
    Code:
       0: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
       3: invokevirtual #258                // Method com/sun/javafx/tk/Toolkit.exit:()V
       6: return

  private static void lambda$tkExit$15();
    Code:
       0: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
       3: invokevirtual #144                // Method com/sun/javafx/tk/Toolkit.isNestedLoopRunning:()Z
       6: ifeq          18
       9: invokestatic  #32                 // Method com/sun/javafx/tk/Toolkit.getToolkit:()Lcom/sun/javafx/tk/Toolkit;
      12: invokevirtual #259                // Method com/sun/javafx/tk/Toolkit.exitAllNestedEventLoops:()V
      15: goto          24
      18: getstatic     #1                  // Field allNestedLoopsExitedLatch:Ljava/util/concurrent/CountDownLatch;
      21: invokevirtual #153                // Method java/util/concurrent/CountDownLatch.countDown:()V
      24: return

  private static void lambda$checkIdle$14();
    Code:
       0: return

  private static void lambda$checkIdle$13();
    Code:
       0: return

  private static void lambda$runAndWait$12(java.lang.Runnable, java.util.concurrent.CountDownLatch);
    Code:
       0: aload_0
       1: invokeinterface #117,  1          // InterfaceMethod java/lang/Runnable.run:()V
       6: aload_1
       7: invokevirtual #153                // Method java/util/concurrent/CountDownLatch.countDown:()V
      10: goto          20
      13: astore_2
      14: aload_1
      15: invokevirtual #153                // Method java/util/concurrent/CountDownLatch.countDown:()V
      18: aload_2
      19: athrow
      20: return
    Exception table:
       from    to  target type
           0     6    13   any

  private static void lambda$runLater$11(java.lang.Runnable, java.security.AccessControlContext);
    Code:
       0: aload_0
       1: invokedynamic #260,  0            // InvokeDynamic #26:run:(Ljava/lang/Runnable;)Ljava/security/PrivilegedAction;
       6: aload_1
       7: invokestatic  #261                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;
      10: pop
      11: getstatic     #107                // Field pendingRunnables:Ljava/util/concurrent/atomic/AtomicInteger;
      14: invokevirtual #111                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      17: pop
      18: invokestatic  #3                  // Method checkIdle:()V
      21: goto          37
      24: astore_2
      25: getstatic     #107                // Field pendingRunnables:Ljava/util/concurrent/atomic/AtomicInteger;
      28: invokevirtual #111                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      31: pop
      32: invokestatic  #3                  // Method checkIdle:()V
      35: aload_2
      36: athrow
      37: return
    Exception table:
       from    to  target type
           0    11    24   any

  private static java.lang.Void lambda$runLater$10(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokeinterface #117,  1          // InterfaceMethod java/lang/Runnable.run:()V
       6: aconst_null
       7: areturn

  private static java.util.Optional lambda$initFXCanvas$9(java.util.function.Predicate, java.util.stream.Stream);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #262,  2          // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
       7: invokeinterface #263,  1          // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      12: areturn

  private static java.lang.StackWalker lambda$initFXCanvas$8();
    Code:
       0: getstatic     #264                // Field java/lang/StackWalker$Option.RETAIN_CLASS_REFERENCE:Ljava/lang/StackWalker$Option;
       3: invokestatic  #265                // Method java/lang/StackWalker.getInstance:(Ljava/lang/StackWalker$Option;)Ljava/lang/StackWalker;
       6: areturn

  private static boolean lambda$initFXCanvas$7(java.lang.StackWalker$StackFrame);
    Code:
       0: aload_0
       1: invokeinterface #266,  1          // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: ldc_w         #267                // String javafx.application.
       9: invokevirtual #268                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      12: ifne          34
      15: aload_0
      16: invokeinterface #266,  1          // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
      21: ldc_w         #269                // String com.sun.javafx.application.
      24: invokevirtual #268                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      27: ifne          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  private static java.lang.Long lambda$initDeviceDetailsFXCanvas$6();
    Code:
       0: ldc           #45                 // String javafx.embed.eventProc
       2: lconst_0
       3: invokestatic  #270                // Method java/lang/Long.getLong:(Ljava/lang/String;J)Ljava/lang/Long;
       6: areturn

  private static void lambda$startup$5(java.lang.Runnable);
    Code:
       0: getstatic     #99                 // Field startupLatch:Ljava/util/concurrent/CountDownLatch;
       3: invokevirtual #153                // Method java/util/concurrent/CountDownLatch.countDown:()V
       6: aload_0
       7: invokeinterface #117,  1          // InterfaceMethod java/lang/Runnable.run:()V
      12: return

  private static java.lang.Void lambda$startup$4();
    Code:
       0: ldc_w         #271                // String glass.taskbarApplication
       3: ldc           #249                // String false
       5: invokestatic  #272                // Method java/lang/System.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       8: pop
       9: aconst_null
      10: areturn

  private static java.lang.Void lambda$startup$3();
    Code:
       0: ldc_w         #273                // String com.sun.javafx.application.type
       3: invokestatic  #256                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       6: putstatic     #22                 // Field applicationType:Ljava/lang/String;
       9: getstatic     #22                 // Field applicationType:Ljava/lang/String;
      12: ifnonnull     21
      15: ldc_w         #274                // String
      18: putstatic     #22                 // Field applicationType:Ljava/lang/String;
      21: ldc_w         #275                // String com.sun.javafx.isContextual2DNavigation
      24: invokestatic  #276                // Method java/lang/Boolean.getBoolean:(Ljava/lang/String;)Z
      27: putstatic     #9                  // Field contextual2DNavigation:Z
      30: ldc_w         #277                // String com.sun.javafx.twoLevelFocus
      33: invokestatic  #256                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      36: astore_0
      37: aload_0
      38: ifnull        48
      41: aload_0
      42: invokestatic  #251                // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
      45: putstatic     #242                // Field hasTwoLevelFocus:Ljava/lang/Boolean;
      48: ldc_w         #278                // String com.sun.javafx.virtualKeyboard
      51: invokestatic  #256                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      54: astore_0
      55: aload_0
      56: ifnull        116
      59: aload_0
      60: ldc_w         #279                // String none
      63: invokevirtual #194                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      66: ifeq          79
      69: iconst_0
      70: invokestatic  #238                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      73: putstatic     #244                // Field hasVirtualKeyboard:Ljava/lang/Boolean;
      76: goto          116
      79: aload_0
      80: ldc_w         #280                // String javafx
      83: invokevirtual #194                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      86: ifeq          99
      89: iconst_1
      90: invokestatic  #238                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      93: putstatic     #244                // Field hasVirtualKeyboard:Ljava/lang/Boolean;
      96: goto          116
      99: aload_0
     100: ldc_w         #281                // String native
     103: invokevirtual #194                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     106: ifeq          116
     109: iconst_1
     110: invokestatic  #238                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     113: putstatic     #244                // Field hasVirtualKeyboard:Ljava/lang/Boolean;
     116: ldc_w         #282                // String com.sun.javafx.touch
     119: invokestatic  #256                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     122: astore_0
     123: aload_0
     124: ifnull        134
     127: aload_0
     128: invokestatic  #251                // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     131: putstatic     #245                // Field hasTouch:Ljava/lang/Boolean;
     134: ldc_w         #283                // String com.sun.javafx.multiTouch
     137: invokestatic  #256                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     140: astore_0
     141: aload_0
     142: ifnull        152
     145: aload_0
     146: invokestatic  #251                // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     149: putstatic     #246                // Field hasMultiTouch:Ljava/lang/Boolean;
     152: ldc_w         #284                // String com.sun.javafx.pointer
     155: invokestatic  #256                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     158: astore_0
     159: aload_0
     160: ifnull        170
     163: aload_0
     164: invokestatic  #251                // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     167: putstatic     #247                // Field hasPointer:Ljava/lang/Boolean;
     170: ldc_w         #285                // String javafx.embed.singleThread
     173: invokestatic  #256                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     176: astore_0
     177: aload_0
     178: ifnull        225
     181: aload_0
     182: invokestatic  #251                // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
     185: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     188: putstatic     #36                 // Field isThreadMerged:Z
     191: getstatic     #36                 // Field isThreadMerged:Z
     194: ifeq          225
     197: getstatic     #286                // Field javafx/application/ConditionalFeature.SWING:Ljavafx/application/ConditionalFeature;
     200: invokestatic  #198                // Method isSupported:(Ljavafx/application/ConditionalFeature;)Z
     203: ifne          225
     206: iconst_0
     207: putstatic     #36                 // Field isThreadMerged:Z
     210: getstatic     #287                // Field verbose:Z
     213: ifeq          225
     216: getstatic     #21                 // Field java/lang/System.err:Ljava/io/PrintStream;
     219: ldc_w         #288                // String WARNING: javafx.embed.singleThread ignored (javafx.swing module not found)
     222: invokevirtual #24                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     225: aconst_null
     226: areturn

  private static void lambda$setApplicationName$2(java.lang.Class);
    Code:
       0: invokestatic  #289                // Method com/sun/glass/ui/Application.GetApplication:()Lcom/sun/glass/ui/Application;
       3: aload_0
       4: invokevirtual #78                 // Method java/lang/Class.getName:()Ljava/lang/String;
       7: invokevirtual #290                // Method com/sun/glass/ui/Application.setName:(Ljava/lang/String;)V
      10: return

  private static java.lang.Boolean lambda$static$1();
    Code:
       0: ldc_w         #291                // String com.sun.javafx.application.debug
       3: invokestatic  #276                // Method java/lang/Boolean.getBoolean:(Ljava/lang/String;)Z
       6: invokestatic  #238                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       9: areturn

  private static java.lang.Boolean lambda$static$0();
    Code:
       0: ldc_w         #292                // String javafx.verbose
       3: invokestatic  #276                // Method java/lang/Boolean.getBoolean:(Ljava/lang/String;)Z
       6: invokestatic  #238                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       9: areturn

  static java.util.concurrent.atomic.AtomicInteger access$000();
    Code:
       0: getstatic     #4                  // Field numWindows:Ljava/util/concurrent/atomic/AtomicInteger;
       3: areturn

  static void access$100();
    Code:
       0: invokestatic  #3                  // Method checkIdle:()V
       3: return

  static java.util.concurrent.atomic.AtomicBoolean access$200();
    Code:
       0: getstatic     #2                  // Field platformExit:Ljava/util/concurrent/atomic/AtomicBoolean;
       3: areturn

  static java.util.concurrent.CountDownLatch access$300();
    Code:
       0: getstatic     #1                  // Field allNestedLoopsExitedLatch:Ljava/util/concurrent/CountDownLatch;
       3: areturn

  static {};
    Code:
       0: new           #293                // class java/util/concurrent/atomic/AtomicBoolean
       3: dup
       4: iconst_0
       5: invokespecial #294                // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
       8: putstatic     #15                 // Field initialized:Ljava/util/concurrent/atomic/AtomicBoolean;
      11: new           #293                // class java/util/concurrent/atomic/AtomicBoolean
      14: dup
      15: iconst_0
      16: invokespecial #294                // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      19: putstatic     #2                  // Field platformExit:Ljava/util/concurrent/atomic/AtomicBoolean;
      22: new           #293                // class java/util/concurrent/atomic/AtomicBoolean
      25: dup
      26: iconst_0
      27: invokespecial #294                // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      30: putstatic     #110                // Field toolkitExit:Ljava/util/concurrent/atomic/AtomicBoolean;
      33: new           #121                // class java/util/concurrent/CountDownLatch
      36: dup
      37: iconst_1
      38: invokespecial #122                // Method java/util/concurrent/CountDownLatch."<init>":(I)V
      41: putstatic     #99                 // Field startupLatch:Ljava/util/concurrent/CountDownLatch;
      44: new           #293                // class java/util/concurrent/atomic/AtomicBoolean
      47: dup
      48: iconst_0
      49: invokespecial #294                // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      52: putstatic     #126                // Field listenersRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
      55: aconst_null
      56: putstatic     #31                 // Field toolkitListener:Lcom/sun/javafx/tk/TKListener;
      59: iconst_1
      60: putstatic     #125                // Field implicitExit:Z
      63: iconst_1
      64: putstatic     #6                  // Field taskbarApplication:Z
      67: new           #295                // class java/util/concurrent/atomic/AtomicInteger
      70: dup
      71: iconst_0
      72: invokespecial #296                // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      75: putstatic     #107                // Field pendingRunnables:Ljava/util/concurrent/atomic/AtomicInteger;
      78: new           #295                // class java/util/concurrent/atomic/AtomicInteger
      81: dup
      82: iconst_0
      83: invokespecial #296                // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      86: putstatic     #4                  // Field numWindows:Ljava/util/concurrent/atomic/AtomicInteger;
      89: iconst_0
      90: putstatic     #141                // Field firstWindowShown:Z
      93: iconst_0
      94: putstatic     #142                // Field lastWindowClosed:Z
      97: new           #293                // class java/util/concurrent/atomic/AtomicBoolean
     100: dup
     101: iconst_0
     102: invokespecial #294                // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
     105: putstatic     #143                // Field reallyIdle:Ljava/util/concurrent/atomic/AtomicBoolean;
     108: new           #297                // class java/util/concurrent/CopyOnWriteArraySet
     111: dup
     112: invokespecial #298                // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
     115: putstatic     #128                // Field finishListeners:Ljava/util/Set;
     118: new           #89                 // class java/lang/Object
     121: dup
     122: invokespecial #5                  // Method java/lang/Object."<init>":()V
     125: putstatic     #109                // Field runLaterLock:Ljava/lang/Object;
     128: iconst_0
     129: putstatic     #36                 // Field isThreadMerged:Z
     132: ldc_w         #274                // String
     135: putstatic     #22                 // Field applicationType:Ljava/lang/String;
     138: new           #299                // class javafx/beans/property/SimpleBooleanProperty
     141: dup
     142: invokespecial #300                // Method javafx/beans/property/SimpleBooleanProperty."<init>":()V
     145: putstatic     #154                // Field accessibilityActive:Ljavafx/beans/property/BooleanProperty;
     148: new           #121                // class java/util/concurrent/CountDownLatch
     151: dup
     152: iconst_1
     153: invokespecial #122                // Method java/util/concurrent/CountDownLatch."<init>":(I)V
     156: putstatic     #1                  // Field allNestedLoopsExitedLatch:Ljava/util/concurrent/CountDownLatch;
     159: invokedynamic #301,  0            // InvokeDynamic #27:run:()Ljava/security/PrivilegedAction;
     164: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
     167: checkcast     #302                // class java/lang/Boolean
     170: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     173: putstatic     #287                // Field verbose:Z
     176: invokedynamic #303,  0            // InvokeDynamic #28:run:()Ljava/security/PrivilegedAction;
     181: invokestatic  #19                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
     184: checkcast     #302                // class java/lang/Boolean
     187: invokevirtual #225                // Method java/lang/Boolean.booleanValue:()Z
     190: putstatic     #20                 // Field DEBUG:Z
     193: new           #304                // class javafx/util/FXPermission
     196: dup
     197: ldc_w         #305                // String accessFXCanvasInternals
     200: invokespecial #306                // Method javafx/util/FXPermission."<init>":(Ljava/lang/String;)V
     203: putstatic     #61                 // Field FXCANVAS_PERMISSION:Ljavafx/util/FXPermission;
     206: new           #121                // class java/util/concurrent/CountDownLatch
     209: dup
     210: iconst_1
     211: invokespecial #122                // Method java/util/concurrent/CountDownLatch."<init>":(I)V
     214: putstatic     #147                // Field platformExitLatch:Ljava/util/concurrent/CountDownLatch;
     217: iconst_0
     218: putstatic     #165                // Field isModena:Z
     221: iconst_0
     222: putstatic     #166                // Field isCaspian:Z
     225: return
}
