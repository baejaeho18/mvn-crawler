Compiled from "AbstractAsyncOperation.java"
public abstract class com.sun.javafx.runtime.async.AbstractAsyncOperation<V> implements com.sun.javafx.runtime.async.AsyncOperation, java.util.concurrent.Callable<V> {
  protected final java.util.concurrent.FutureTask<V> future;

  protected final com.sun.javafx.runtime.async.AsyncOperationListener listener;

  private int progressGranularity;

  private int progressMax;

  private int lastProgress;

  private int progressIncrement;

  private int nextProgress;

  private int bytesRead;

  protected com.sun.javafx.runtime.async.AbstractAsyncOperation(com.sun.javafx.runtime.async.AsyncOperationListener<V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        100
       7: putfield      #2                  // Field progressGranularity:I
      10: aload_0
      11: aload_1
      12: putfield      #3                  // Field listener:Lcom/sun/javafx/runtime/async/AsyncOperationListener;
      15: aload_0
      16: invokedynamic #4,  0              // InvokeDynamic #0:call:(Lcom/sun/javafx/runtime/async/AbstractAsyncOperation;)Ljava/util/concurrent/Callable;
      21: astore_2
      22: new           #5                  // class com/sun/javafx/runtime/async/AbstractAsyncOperation$1
      25: dup
      26: aload_0
      27: aload_1
      28: invokespecial #6                  // Method com/sun/javafx/runtime/async/AbstractAsyncOperation$1."<init>":(Lcom/sun/javafx/runtime/async/AbstractAsyncOperation;Lcom/sun/javafx/runtime/async/AsyncOperationListener;)V
      31: astore_3
      32: aload_0
      33: new           #7                  // class com/sun/javafx/runtime/async/AbstractAsyncOperation$2
      36: dup
      37: aload_0
      38: aload_2
      39: aload_3
      40: invokespecial #8                  // Method com/sun/javafx/runtime/async/AbstractAsyncOperation$2."<init>":(Lcom/sun/javafx/runtime/async/AbstractAsyncOperation;Ljava/util/concurrent/Callable;Ljava/lang/Runnable;)V
      43: putfield      #9                  // Field future:Ljava/util/concurrent/FutureTask;
      46: return

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #9                  // Field future:Ljava/util/concurrent/FutureTask;
       4: invokevirtual #10                 // Method java/util/concurrent/FutureTask.isCancelled:()Z
       7: ireturn

  public boolean isDone();
    Code:
       0: aload_0
       1: getfield      #9                  // Field future:Ljava/util/concurrent/FutureTask;
       4: invokevirtual #11                 // Method java/util/concurrent/FutureTask.isDone:()Z
       7: ireturn

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #9                  // Field future:Ljava/util/concurrent/FutureTask;
       4: iconst_1
       5: invokevirtual #12                 // Method java/util/concurrent/FutureTask.cancel:(Z)Z
       8: pop
       9: return

  public void start();
    Code:
       0: invokestatic  #13                 // Method com/sun/javafx/runtime/async/BackgroundExecutor.getExecutor:()Ljava/util/concurrent/ExecutorService;
       3: aload_0
       4: getfield      #9                  // Field future:Ljava/util/concurrent/FutureTask;
       7: invokeinterface #14,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      12: return

  protected void notifyProgress();
    Code:
       0: aload_0
       1: getfield      #15                 // Field lastProgress:I
       4: istore_1
       5: aload_0
       6: getfield      #16                 // Field progressMax:I
       9: istore_2
      10: aload_0
      11: iload_1
      12: iload_2
      13: invokedynamic #17,  0             // InvokeDynamic #1:run:(Lcom/sun/javafx/runtime/async/AbstractAsyncOperation;II)Ljava/lang/Runnable;
      18: invokestatic  #18                 // Method javafx/application/Platform.runLater:(Ljava/lang/Runnable;)V
      21: return

  protected void addProgress(int);
    Code:
       0: aload_0
       1: dup
       2: getfield      #19                 // Field bytesRead:I
       5: iload_1
       6: iadd
       7: putfield      #19                 // Field bytesRead:I
      10: aload_0
      11: getfield      #19                 // Field bytesRead:I
      14: aload_0
      15: getfield      #20                 // Field nextProgress:I
      18: if_icmple     53
      21: aload_0
      22: aload_0
      23: getfield      #19                 // Field bytesRead:I
      26: putfield      #15                 // Field lastProgress:I
      29: aload_0
      30: invokevirtual #21                 // Method notifyProgress:()V
      33: aload_0
      34: aload_0
      35: getfield      #15                 // Field lastProgress:I
      38: aload_0
      39: getfield      #22                 // Field progressIncrement:I
      42: idiv
      43: iconst_1
      44: iadd
      45: aload_0
      46: getfield      #22                 // Field progressIncrement:I
      49: imul
      50: putfield      #20                 // Field nextProgress:I
      53: return

  protected int getProgressMax();
    Code:
       0: aload_0
       1: getfield      #16                 // Field progressMax:I
       4: ireturn

  protected void setProgressMax(int);
    Code:
       0: iload_1
       1: ifne          15
       4: aload_0
       5: aload_0
       6: getfield      #2                  // Field progressGranularity:I
       9: putfield      #22                 // Field progressIncrement:I
      12: goto          59
      15: iload_1
      16: iconst_m1
      17: if_icmpne     31
      20: aload_0
      21: aload_0
      22: getfield      #2                  // Field progressGranularity:I
      25: putfield      #22                 // Field progressIncrement:I
      28: goto          59
      31: aload_0
      32: iload_1
      33: putfield      #16                 // Field progressMax:I
      36: aload_0
      37: iload_1
      38: aload_0
      39: getfield      #2                  // Field progressGranularity:I
      42: idiv
      43: putfield      #22                 // Field progressIncrement:I
      46: aload_0
      47: getfield      #22                 // Field progressIncrement:I
      50: iconst_1
      51: if_icmpge     59
      54: aload_0
      55: iconst_1
      56: putfield      #22                 // Field progressIncrement:I
      59: aload_0
      60: aload_0
      61: getfield      #15                 // Field lastProgress:I
      64: aload_0
      65: getfield      #22                 // Field progressIncrement:I
      68: idiv
      69: iconst_1
      70: iadd
      71: aload_0
      72: getfield      #22                 // Field progressIncrement:I
      75: imul
      76: putfield      #20                 // Field nextProgress:I
      79: aload_0
      80: invokevirtual #21                 // Method notifyProgress:()V
      83: return

  protected int getProgressGranularity();
    Code:
       0: aload_0
       1: getfield      #2                  // Field progressGranularity:I
       4: ireturn

  protected void setProgressGranularity(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field progressGranularity:I
       5: aload_0
       6: aload_0
       7: getfield      #16                 // Field progressMax:I
      10: iload_1
      11: idiv
      12: putfield      #22                 // Field progressIncrement:I
      15: aload_0
      16: aload_0
      17: getfield      #15                 // Field lastProgress:I
      20: aload_0
      21: getfield      #22                 // Field progressIncrement:I
      24: idiv
      25: iconst_1
      26: iadd
      27: aload_0
      28: getfield      #22                 // Field progressIncrement:I
      31: imul
      32: putfield      #20                 // Field nextProgress:I
      35: aload_0
      36: invokevirtual #21                 // Method notifyProgress:()V
      39: return

  private void lambda$notifyProgress$1(int, int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field listener:Lcom/sun/javafx/runtime/async/AsyncOperationListener;
       4: iload_1
       5: iload_2
       6: invokeinterface #23,  3           // InterfaceMethod com/sun/javafx/runtime/async/AsyncOperationListener.onProgress:(II)V
      11: return

  private java.lang.Object lambda$new$0() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method call:()Ljava/lang/Object;
       4: areturn
}
