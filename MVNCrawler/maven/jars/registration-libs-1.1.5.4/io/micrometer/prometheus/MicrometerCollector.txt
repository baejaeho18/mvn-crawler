Compiled from "MicrometerCollector.java"
class io.micrometer.prometheus.MicrometerCollector extends io.prometheus.client.Collector {
  private final io.micrometer.core.instrument.Meter$Id id;

  private final java.util.Map<java.util.List<java.lang.String>, io.micrometer.prometheus.MicrometerCollector$Child> children;

  private final java.lang.String conventionName;

  private final java.util.List<java.lang.String> tagKeys;

  private final io.micrometer.prometheus.PrometheusConfig config;

  public io.micrometer.prometheus.MicrometerCollector(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.config.NamingConvention, io.micrometer.prometheus.PrometheusConfig);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/prometheus/client/Collector."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #10                 // Field children:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: putfield      #16                 // Field id:Lio/micrometer/core/instrument/Meter$Id;
      20: aload_0
      21: aload_1
      22: aload_2
      23: invokevirtual #20                 // Method io/micrometer/core/instrument/Meter$Id.getConventionName:(Lio/micrometer/core/instrument/config/NamingConvention;)Ljava/lang/String;
      26: putfield      #26                 // Field conventionName:Ljava/lang/String;
      29: aload_0
      30: aload_1
      31: aload_2
      32: invokevirtual #30                 // Method io/micrometer/core/instrument/Meter$Id.getConventionTags:(Lio/micrometer/core/instrument/config/NamingConvention;)Ljava/util/List;
      35: invokeinterface #34,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      40: invokedynamic #40,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      45: invokeinterface #44,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      50: invokestatic  #50                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      53: invokeinterface #56,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      58: checkcast     #35                 // class java/util/List
      61: putfield      #60                 // Field tagKeys:Ljava/util/List;
      64: aload_0
      65: aload_3
      66: putfield      #64                 // Field config:Lio/micrometer/prometheus/PrometheusConfig;
      69: return

  public void add(java.util.List<java.lang.String>, io.micrometer.prometheus.MicrometerCollector$Child);
    Code:
       0: aload_0
       1: getfield      #10                 // Field children:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #68,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public void remove(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field children:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #74,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #10                 // Field children:Ljava/util/Map;
       4: invokeinterface #78,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
       9: ireturn

  public java.util.List<java.lang.String> getTagKeys();
    Code:
       0: aload_0
       1: getfield      #60                 // Field tagKeys:Ljava/util/List;
       4: areturn

  public java.util.List<io.prometheus.client.Collector$MetricFamilySamples> collect();
    Code:
       0: aload_0
       1: getfield      #64                 // Field config:Lio/micrometer/prometheus/PrometheusConfig;
       4: invokeinterface #82,  1           // InterfaceMethod io/micrometer/prometheus/PrometheusConfig.descriptions:()Z
       9: ifeq          33
      12: aload_0
      13: getfield      #16                 // Field id:Lio/micrometer/core/instrument/Meter$Id;
      16: invokevirtual #87                 // Method io/micrometer/core/instrument/Meter$Id.getDescription:()Ljava/lang/String;
      19: invokestatic  #91                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      22: ldc           #97                 // String
      24: invokevirtual #99                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #102                // class java/lang/String
      30: goto          35
      33: ldc           #97                 // String
      35: astore_1
      36: new           #104                // class java/util/HashMap
      39: dup
      40: invokespecial #106                // Method java/util/HashMap."<init>":()V
      43: astore_2
      44: aload_0
      45: getfield      #10                 // Field children:Ljava/util/Map;
      48: invokeinterface #107,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      53: invokeinterface #111,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      58: astore_3
      59: aload_3
      60: invokeinterface #117,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      65: ifeq          108
      68: aload_3
      69: invokeinterface #122,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      74: checkcast     #126                // class io/micrometer/prometheus/MicrometerCollector$Child
      77: astore        4
      79: aload         4
      81: aload_0
      82: getfield      #26                 // Field conventionName:Ljava/lang/String;
      85: aload_0
      86: getfield      #60                 // Field tagKeys:Ljava/util/List;
      89: invokeinterface #128,  3          // InterfaceMethod io/micrometer/prometheus/MicrometerCollector$Child.samples:(Ljava/lang/String;Ljava/util/List;)Ljava/util/stream/Stream;
      94: aload_2
      95: invokedynamic #132,  0            // InvokeDynamic #1:accept:(Ljava/util/Map;)Ljava/util/function/Consumer;
     100: invokeinterface #136,  2          // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
     105: goto          59
     108: aload_2
     109: invokeinterface #107,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     114: invokeinterface #140,  1          // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
     119: aload_1
     120: invokedynamic #141,  0            // InvokeDynamic #2:apply:(Ljava/lang/String;)Ljava/util/function/Function;
     125: invokeinterface #44,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     130: invokestatic  #50                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
     133: invokeinterface #56,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     138: checkcast     #35                 // class java/util/List
     141: areturn

  private static io.prometheus.client.Collector$MetricFamilySamples lambda$collect$2(java.lang.String, io.micrometer.prometheus.MicrometerCollector$Family);
    Code:
       0: new           #144                // class io/prometheus/client/Collector$MetricFamilySamples
       3: dup
       4: aload_1
       5: getfield      #146                // Field io/micrometer/prometheus/MicrometerCollector$Family.conventionName:Ljava/lang/String;
       8: aload_1
       9: getfield      #149                // Field io/micrometer/prometheus/MicrometerCollector$Family.type:Lio/prometheus/client/Collector$Type;
      12: aload_0
      13: aload_1
      14: getfield      #153                // Field io/micrometer/prometheus/MicrometerCollector$Family.samples:Ljava/util/List;
      17: invokespecial #155                // Method io/prometheus/client/Collector$MetricFamilySamples."<init>":(Ljava/lang/String;Lio/prometheus/client/Collector$Type;Ljava/lang/String;Ljava/util/List;)V
      20: areturn

  private static void lambda$collect$1(java.util.Map, io.micrometer.prometheus.MicrometerCollector$Family);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #158                // Method io/micrometer/prometheus/MicrometerCollector$Family.getConventionName:()Ljava/lang/String;
       5: aload_1
       6: invokedynamic #160,  0            // InvokeDynamic #3:apply:(Lio/micrometer/prometheus/MicrometerCollector$Family;)Ljava/util/function/BiFunction;
      11: invokeinterface #163,  3          // InterfaceMethod java/util/Map.compute:(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      16: pop
      17: return

  private static io.micrometer.prometheus.MicrometerCollector$Family lambda$collect$0(io.micrometer.prometheus.MicrometerCollector$Family, java.lang.String, io.micrometer.prometheus.MicrometerCollector$Family);
    Code:
       0: aload_2
       1: ifnull        15
       4: aload_2
       5: aload_0
       6: getfield      #153                // Field io/micrometer/prometheus/MicrometerCollector$Family.samples:Ljava/util/List;
       9: invokevirtual #167                // Method io/micrometer/prometheus/MicrometerCollector$Family.addSamples:(Ljava/util/Collection;)Lio/micrometer/prometheus/MicrometerCollector$Family;
      12: goto          16
      15: aload_0
      16: areturn
}
