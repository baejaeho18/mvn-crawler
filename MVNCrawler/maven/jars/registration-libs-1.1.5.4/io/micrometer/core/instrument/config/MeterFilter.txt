Compiled from "MeterFilter.java"
public interface io.micrometer.core.instrument.config.MeterFilter {
  public static io.micrometer.core.instrument.config.MeterFilter commonTags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: new           #1                  // class io/micrometer/core/instrument/config/MeterFilter$1
       3: dup
       4: aload_0
       5: invokespecial #3                  // Method io/micrometer/core/instrument/config/MeterFilter$1."<init>":(Ljava/lang/Iterable;)V
       8: areturn

  public static io.micrometer.core.instrument.config.MeterFilter renameTag(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: new           #7                  // class io/micrometer/core/instrument/config/MeterFilter$2
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #9                  // Method io/micrometer/core/instrument/config/MeterFilter$2."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      10: areturn

  public static io.micrometer.core.instrument.config.MeterFilter ignoreTags(java.lang.String...);
    Code:
       0: new           #12                 // class io/micrometer/core/instrument/config/MeterFilter$3
       3: dup
       4: aload_0
       5: invokespecial #14                 // Method io/micrometer/core/instrument/config/MeterFilter$3."<init>":([Ljava/lang/String;)V
       8: areturn

  public static io.micrometer.core.instrument.config.MeterFilter replaceTagValues(java.lang.String, java.util.function.Function<java.lang.String, java.lang.String>, java.lang.String...);
    Code:
       0: new           #17                 // class io/micrometer/core/instrument/config/MeterFilter$4
       3: dup
       4: aload_0
       5: aload_2
       6: aload_1
       7: invokespecial #19                 // Method io/micrometer/core/instrument/config/MeterFilter$4."<init>":(Ljava/lang/String;[Ljava/lang/String;Ljava/util/function/Function;)V
      10: areturn

  public static io.micrometer.core.instrument.config.MeterFilter denyUnless(java.util.function.Predicate<io.micrometer.core.instrument.Meter$Id>);
    Code:
       0: new           #22                 // class io/micrometer/core/instrument/config/MeterFilter$5
       3: dup
       4: aload_0
       5: invokespecial #24                 // Method io/micrometer/core/instrument/config/MeterFilter$5."<init>":(Ljava/util/function/Predicate;)V
       8: areturn

  public static io.micrometer.core.instrument.config.MeterFilter accept(java.util.function.Predicate<io.micrometer.core.instrument.Meter$Id>);
    Code:
       0: new           #27                 // class io/micrometer/core/instrument/config/MeterFilter$6
       3: dup
       4: aload_0
       5: invokespecial #29                 // Method io/micrometer/core/instrument/config/MeterFilter$6."<init>":(Ljava/util/function/Predicate;)V
       8: areturn

  public static io.micrometer.core.instrument.config.MeterFilter deny(java.util.function.Predicate<io.micrometer.core.instrument.Meter$Id>);
    Code:
       0: new           #30                 // class io/micrometer/core/instrument/config/MeterFilter$7
       3: dup
       4: aload_0
       5: invokespecial #32                 // Method io/micrometer/core/instrument/config/MeterFilter$7."<init>":(Ljava/util/function/Predicate;)V
       8: areturn

  public static io.micrometer.core.instrument.config.MeterFilter accept();
    Code:
       0: invokedynamic #33,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
       5: invokestatic  #37                 // InterfaceMethod accept:(Ljava/util/function/Predicate;)Lio/micrometer/core/instrument/config/MeterFilter;
       8: areturn

  public static io.micrometer.core.instrument.config.MeterFilter deny();
    Code:
       0: invokedynamic #43,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
       5: invokestatic  #44                 // InterfaceMethod deny:(Ljava/util/function/Predicate;)Lio/micrometer/core/instrument/config/MeterFilter;
       8: areturn

  public static io.micrometer.core.instrument.config.MeterFilter maximumAllowableMetrics(int);
    Code:
       0: new           #47                 // class io/micrometer/core/instrument/config/MeterFilter$8
       3: dup
       4: iload_0
       5: invokespecial #49                 // Method io/micrometer/core/instrument/config/MeterFilter$8."<init>":(I)V
       8: areturn

  public static io.micrometer.core.instrument.config.MeterFilter maximumAllowableTags(java.lang.String, java.lang.String, int, io.micrometer.core.instrument.config.MeterFilter);
    Code:
       0: new           #52                 // class io/micrometer/core/instrument/config/MeterFilter$9
       3: dup
       4: iload_2
       5: aload_3
       6: aload_0
       7: aload_1
       8: invokespecial #54                 // Method io/micrometer/core/instrument/config/MeterFilter$9."<init>":(ILio/micrometer/core/instrument/config/MeterFilter;Ljava/lang/String;Ljava/lang/String;)V
      11: areturn

  public static io.micrometer.core.instrument.config.MeterFilter denyNameStartsWith(java.lang.String);
    Code:
       0: aload_0
       1: invokedynamic #57,  0             // InvokeDynamic #2:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
       6: invokestatic  #44                 // InterfaceMethod deny:(Ljava/util/function/Predicate;)Lio/micrometer/core/instrument/config/MeterFilter;
       9: areturn

  public static io.micrometer.core.instrument.config.MeterFilter acceptNameStartsWith(java.lang.String);
    Code:
       0: aload_0
       1: invokedynamic #60,  0             // InvokeDynamic #3:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
       6: invokestatic  #37                 // InterfaceMethod accept:(Ljava/util/function/Predicate;)Lio/micrometer/core/instrument/config/MeterFilter;
       9: areturn

  public static io.micrometer.core.instrument.config.MeterFilter maxExpected(java.lang.String, java.time.Duration);
    Code:
       0: new           #61                 // class io/micrometer/core/instrument/config/MeterFilter$10
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #63                 // Method io/micrometer/core/instrument/config/MeterFilter$10."<init>":(Ljava/lang/String;Ljava/time/Duration;)V
       9: areturn

  public static io.micrometer.core.instrument.config.MeterFilter maxExpected(java.lang.String, long);
    Code:
       0: aload_0
       1: lload_1
       2: l2d
       3: invokestatic  #66                 // InterfaceMethod maxExpected:(Ljava/lang/String;D)Lio/micrometer/core/instrument/config/MeterFilter;
       6: areturn

  public static io.micrometer.core.instrument.config.MeterFilter maxExpected(java.lang.String, double);
    Code:
       0: new           #70                 // class io/micrometer/core/instrument/config/MeterFilter$11
       3: dup
       4: aload_0
       5: dload_1
       6: invokespecial #72                 // Method io/micrometer/core/instrument/config/MeterFilter$11."<init>":(Ljava/lang/String;D)V
       9: areturn

  public static io.micrometer.core.instrument.config.MeterFilter minExpected(java.lang.String, java.time.Duration);
    Code:
       0: new           #75                 // class io/micrometer/core/instrument/config/MeterFilter$12
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #77                 // Method io/micrometer/core/instrument/config/MeterFilter$12."<init>":(Ljava/lang/String;Ljava/time/Duration;)V
       9: areturn

  public static io.micrometer.core.instrument.config.MeterFilter minExpected(java.lang.String, long);
    Code:
       0: aload_0
       1: lload_1
       2: l2d
       3: invokestatic  #78                 // InterfaceMethod minExpected:(Ljava/lang/String;D)Lio/micrometer/core/instrument/config/MeterFilter;
       6: areturn

  public static io.micrometer.core.instrument.config.MeterFilter minExpected(java.lang.String, double);
    Code:
       0: new           #81                 // class io/micrometer/core/instrument/config/MeterFilter$13
       3: dup
       4: aload_0
       5: dload_1
       6: invokespecial #83                 // Method io/micrometer/core/instrument/config/MeterFilter$13."<init>":(Ljava/lang/String;D)V
       9: areturn

  public default io.micrometer.core.instrument.config.MeterFilterReply accept(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: getstatic     #84                 // Field io/micrometer/core/instrument/config/MeterFilterReply.NEUTRAL:Lio/micrometer/core/instrument/config/MeterFilterReply;
       3: areturn

  public default io.micrometer.core.instrument.Meter$Id map(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_1
       1: areturn

  public default io.micrometer.core.instrument.distribution.DistributionStatisticConfig configure(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig);
    Code:
       0: aload_2
       1: areturn

  private static boolean lambda$acceptNameStartsWith$3(java.lang.String, io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_1
       1: invokevirtual #90                 // Method io/micrometer/core/instrument/Meter$Id.getName:()Ljava/lang/String;
       4: aload_0
       5: invokevirtual #96                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       8: ireturn

  private static boolean lambda$denyNameStartsWith$2(java.lang.String, io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_1
       1: invokevirtual #90                 // Method io/micrometer/core/instrument/Meter$Id.getName:()Ljava/lang/String;
       4: aload_0
       5: invokevirtual #96                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       8: ireturn

  private static boolean lambda$deny$1(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: iconst_1
       1: ireturn

  private static boolean lambda$accept$0(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: iconst_1
       1: ireturn
}
