Compiled from "UptimeMetrics.java"
public class io.micrometer.core.instrument.binder.system.UptimeMetrics implements io.micrometer.core.instrument.binder.MeterBinder {
  private final java.lang.management.RuntimeMXBean runtimeMXBean;

  private final java.lang.Iterable<io.micrometer.core.instrument.Tag> tags;

  public io.micrometer.core.instrument.binder.system.UptimeMetrics();
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method java/util/Collections.emptyList:()Ljava/util/List;
       4: invokespecial #7                  // Method "<init>":(Ljava/lang/Iterable;)V
       7: return

  public io.micrometer.core.instrument.binder.system.UptimeMetrics(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method java/lang/management/ManagementFactory.getRuntimeMXBean:()Ljava/lang/management/RuntimeMXBean;
       4: aload_1
       5: invokespecial #19                 // Method "<init>":(Ljava/lang/management/RuntimeMXBean;Ljava/lang/Iterable;)V
       8: return

  io.micrometer.core.instrument.binder.system.UptimeMetrics(java.lang.management.RuntimeMXBean, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokespecial #22                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #27                 // Field runtimeMXBean:Ljava/lang/management/RuntimeMXBean;
       9: aload_0
      10: aload_2
      11: putfield      #31                 // Field tags:Ljava/lang/Iterable;
      14: return

  public void bindTo(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: ldc           #35                 // String process.uptime
       2: aload_0
       3: getfield      #27                 // Field runtimeMXBean:Ljava/lang/management/RuntimeMXBean;
       6: getstatic     #37                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       9: invokedynamic #43,  0             // InvokeDynamic #0:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
      14: invokestatic  #47                 // InterfaceMethod io/micrometer/core/instrument/TimeGauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/concurrent/TimeUnit;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/TimeGauge$Builder;
      17: aload_0
      18: getfield      #31                 // Field tags:Ljava/lang/Iterable;
      21: invokevirtual #53                 // Method io/micrometer/core/instrument/TimeGauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/TimeGauge$Builder;
      24: ldc           #58                 // String The uptime of the Java virtual machine
      26: invokevirtual #60                 // Method io/micrometer/core/instrument/TimeGauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/TimeGauge$Builder;
      29: aload_1
      30: invokevirtual #64                 // Method io/micrometer/core/instrument/TimeGauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/TimeGauge;
      33: pop
      34: ldc           #68                 // String process.start.time
      36: aload_0
      37: getfield      #27                 // Field runtimeMXBean:Ljava/lang/management/RuntimeMXBean;
      40: getstatic     #37                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      43: invokedynamic #70,  0             // InvokeDynamic #1:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
      48: invokestatic  #47                 // InterfaceMethod io/micrometer/core/instrument/TimeGauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/concurrent/TimeUnit;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/TimeGauge$Builder;
      51: aload_0
      52: getfield      #31                 // Field tags:Ljava/lang/Iterable;
      55: invokevirtual #53                 // Method io/micrometer/core/instrument/TimeGauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/TimeGauge$Builder;
      58: ldc           #71                 // String Start time of the process since unix epoch.
      60: invokevirtual #60                 // Method io/micrometer/core/instrument/TimeGauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/TimeGauge$Builder;
      63: aload_1
      64: invokevirtual #64                 // Method io/micrometer/core/instrument/TimeGauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/TimeGauge;
      67: pop
      68: return
}
