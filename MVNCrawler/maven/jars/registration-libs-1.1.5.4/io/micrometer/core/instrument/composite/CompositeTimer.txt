Compiled from "CompositeTimer.java"
class io.micrometer.core.instrument.composite.CompositeTimer extends io.micrometer.core.instrument.composite.AbstractCompositeMeter<io.micrometer.core.instrument.Timer> implements io.micrometer.core.instrument.Timer {
  private final io.micrometer.core.instrument.Clock clock;

  private final io.micrometer.core.instrument.distribution.DistributionStatisticConfig distributionStatisticConfig;

  private final io.micrometer.core.instrument.distribution.pause.PauseDetector pauseDetector;

  io.micrometer.core.instrument.composite.CompositeTimer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Clock, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/micrometer/core/instrument/composite/AbstractCompositeMeter."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
       5: aload_0
       6: aload_2
       7: putfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
      10: aload_0
      11: aload_3
      12: putfield      #13                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      15: aload_0
      16: aload         4
      18: putfield      #17                 // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
      21: return

  public void record(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokedynamic #21,  0             // InvokeDynamic #0:accept:(JLjava/util/concurrent/TimeUnit;)Ljava/util/function/Consumer;
       8: invokevirtual #25                 // Method forEachChild:(Ljava/util/function/Consumer;)V
      11: return

  public void record(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #29,  0             // InvokeDynamic #1:accept:(Ljava/time/Duration;)Ljava/util/function/Consumer;
       7: invokevirtual #25                 // Method forEachChild:(Ljava/util/function/Consumer;)V
      10: return

  public <T> T record(java.util.function.Supplier<T>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
       4: invokeinterface #32,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
       9: lstore_2
      10: aload_1
      11: invokeinterface #38,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      16: astore        4
      18: aload_0
      19: getfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
      22: invokeinterface #32,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      27: lstore        5
      29: aload_0
      30: lload         5
      32: lload_2
      33: lsub
      34: getstatic     #44                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      37: invokevirtual #50                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      40: aload         4
      42: areturn
      43: astore        7
      45: aload_0
      46: getfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
      49: invokeinterface #32,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      54: lstore        8
      56: aload_0
      57: lload         8
      59: lload_2
      60: lsub
      61: getstatic     #44                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      64: invokevirtual #50                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      67: aload         7
      69: athrow
    Exception table:
       from    to  target type
          10    18    43   any
          43    45    43   any

  public <T> T recordCallable(java.util.concurrent.Callable<T>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
       4: invokeinterface #32,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
       9: lstore_2
      10: aload_1
      11: invokeinterface #54,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      16: astore        4
      18: aload_0
      19: getfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
      22: invokeinterface #32,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      27: lstore        5
      29: aload_0
      30: lload         5
      32: lload_2
      33: lsub
      34: getstatic     #44                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      37: invokevirtual #50                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      40: aload         4
      42: areturn
      43: astore        7
      45: aload_0
      46: getfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
      49: invokeinterface #32,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      54: lstore        8
      56: aload_0
      57: lload         8
      59: lload_2
      60: lsub
      61: getstatic     #44                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      64: invokevirtual #50                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      67: aload         7
      69: athrow
    Exception table:
       from    to  target type
          10    18    43   any
          43    45    43   any

  public void record(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
       4: invokeinterface #32,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
       9: lstore_2
      10: aload_1
      11: invokeinterface #59,  1           // InterfaceMethod java/lang/Runnable.run:()V
      16: aload_0
      17: getfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
      20: invokeinterface #32,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      25: lstore        4
      27: aload_0
      28: lload         4
      30: lload_2
      31: lsub
      32: getstatic     #44                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      35: invokevirtual #50                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      38: goto          68
      41: astore        6
      43: aload_0
      44: getfield      #7                  // Field clock:Lio/micrometer/core/instrument/Clock;
      47: invokeinterface #32,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      52: lstore        7
      54: aload_0
      55: lload         7
      57: lload_2
      58: lsub
      59: getstatic     #44                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      62: invokevirtual #50                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      65: aload         6
      67: athrow
      68: return
    Exception table:
       from    to  target type
          10    16    41   any
          41    43    41   any

  public long count();
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method firstChild:()Lio/micrometer/core/instrument/Meter;
       4: checkcast     #69                 // class io/micrometer/core/instrument/Timer
       7: invokeinterface #71,  1           // InterfaceMethod io/micrometer/core/instrument/Timer.count:()J
      12: lreturn

  public double totalTime(java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method firstChild:()Lio/micrometer/core/instrument/Meter;
       4: checkcast     #69                 // class io/micrometer/core/instrument/Timer
       7: aload_1
       8: invokeinterface #74,  2           // InterfaceMethod io/micrometer/core/instrument/Timer.totalTime:(Ljava/util/concurrent/TimeUnit;)D
      13: dreturn

  public double max(java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method firstChild:()Lio/micrometer/core/instrument/Meter;
       4: checkcast     #69                 // class io/micrometer/core/instrument/Timer
       7: aload_1
       8: invokeinterface #78,  2           // InterfaceMethod io/micrometer/core/instrument/Timer.max:(Ljava/util/concurrent/TimeUnit;)D
      13: dreturn

  public io.micrometer.core.instrument.distribution.HistogramSnapshot takeSnapshot();
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method firstChild:()Lio/micrometer/core/instrument/Meter;
       4: checkcast     #69                 // class io/micrometer/core/instrument/Timer
       7: invokeinterface #81,  1           // InterfaceMethod io/micrometer/core/instrument/Timer.takeSnapshot:()Lio/micrometer/core/instrument/distribution/HistogramSnapshot;
      12: areturn

  public java.util.concurrent.TimeUnit baseTimeUnit();
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method firstChild:()Lio/micrometer/core/instrument/Meter;
       4: checkcast     #69                 // class io/micrometer/core/instrument/Timer
       7: invokeinterface #85,  1           // InterfaceMethod io/micrometer/core/instrument/Timer.baseTimeUnit:()Ljava/util/concurrent/TimeUnit;
      12: areturn

  io.micrometer.core.instrument.Timer newNoopMeter();
    Code:
       0: new           #89                 // class io/micrometer/core/instrument/noop/NoopTimer
       3: dup
       4: aload_0
       5: invokevirtual #91                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
       8: invokespecial #95                 // Method io/micrometer/core/instrument/noop/NoopTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
      11: areturn

  io.micrometer.core.instrument.Timer registerNewMeter(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: invokevirtual #91                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
       4: invokevirtual #96                 // Method io/micrometer/core/instrument/Meter$Id.getName:()Ljava/lang/String;
       7: invokestatic  #102                // InterfaceMethod io/micrometer/core/instrument/Timer.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
      10: aload_0
      11: invokevirtual #91                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
      14: invokevirtual #106                // Method io/micrometer/core/instrument/Meter$Id.getTagsAsIterable:()Ljava/lang/Iterable;
      17: invokevirtual #110                // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
      20: aload_0
      21: invokevirtual #91                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
      24: invokevirtual #116                // Method io/micrometer/core/instrument/Meter$Id.getDescription:()Ljava/lang/String;
      27: invokevirtual #119                // Method io/micrometer/core/instrument/Timer$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
      30: aload_0
      31: getfield      #13                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      34: invokevirtual #122                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.getMaximumExpectedValueAsDouble:()Ljava/lang/Double;
      37: invokevirtual #128                // Method java/lang/Double.longValue:()J
      40: invokestatic  #133                // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      43: invokevirtual #139                // Method io/micrometer/core/instrument/Timer$Builder.maximumExpectedValue:(Ljava/time/Duration;)Lio/micrometer/core/instrument/Timer$Builder;
      46: aload_0
      47: getfield      #13                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      50: invokevirtual #143                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.getMinimumExpectedValueAsDouble:()Ljava/lang/Double;
      53: invokevirtual #128                // Method java/lang/Double.longValue:()J
      56: invokestatic  #133                // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      59: invokevirtual #146                // Method io/micrometer/core/instrument/Timer$Builder.minimumExpectedValue:(Ljava/time/Duration;)Lio/micrometer/core/instrument/Timer$Builder;
      62: aload_0
      63: getfield      #13                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      66: invokevirtual #149                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.getPercentiles:()[D
      69: invokevirtual #153                // Method io/micrometer/core/instrument/Timer$Builder.publishPercentiles:([D)Lio/micrometer/core/instrument/Timer$Builder;
      72: aload_0
      73: getfield      #13                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      76: invokevirtual #157                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.isPercentileHistogram:()Ljava/lang/Boolean;
      79: invokevirtual #161                // Method io/micrometer/core/instrument/Timer$Builder.publishPercentileHistogram:(Ljava/lang/Boolean;)Lio/micrometer/core/instrument/Timer$Builder;
      82: aload_0
      83: getfield      #13                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      86: invokevirtual #165                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.getBufferLength:()Ljava/lang/Integer;
      89: invokevirtual #169                // Method io/micrometer/core/instrument/Timer$Builder.distributionStatisticBufferLength:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/Timer$Builder;
      92: aload_0
      93: getfield      #13                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      96: invokevirtual #173                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.getExpiry:()Ljava/time/Duration;
      99: invokevirtual #177                // Method io/micrometer/core/instrument/Timer$Builder.distributionStatisticExpiry:(Ljava/time/Duration;)Lio/micrometer/core/instrument/Timer$Builder;
     102: aload_0
     103: getfield      #13                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
     106: invokevirtual #180                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.getPercentilePrecision:()Ljava/lang/Integer;
     109: invokevirtual #183                // Method io/micrometer/core/instrument/Timer$Builder.percentilePrecision:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/Timer$Builder;
     112: aload_0
     113: getfield      #17                 // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
     116: invokevirtual #186                // Method io/micrometer/core/instrument/Timer$Builder.pauseDetector:(Lio/micrometer/core/instrument/distribution/pause/PauseDetector;)Lio/micrometer/core/instrument/Timer$Builder;
     119: astore_2
     120: aload_0
     121: getfield      #13                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
     124: invokevirtual #189                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.getServiceLevelObjectiveBoundaries:()[D
     127: astore_3
     128: aload_3
     129: ifnull        175
     132: aload_3
     133: arraylength
     134: anewarray     #134                // class java/time/Duration
     137: astore        4
     139: iconst_0
     140: istore        5
     142: iload         5
     144: aload_3
     145: arraylength
     146: if_icmpge     168
     149: aload         4
     151: iload         5
     153: aload_3
     154: iload         5
     156: daload
     157: d2l
     158: invokestatic  #133                // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
     161: aastore
     162: iinc          5, 1
     165: goto          142
     168: aload_2
     169: aload         4
     171: invokevirtual #192                // Method io/micrometer/core/instrument/Timer$Builder.sla:([Ljava/time/Duration;)Lio/micrometer/core/instrument/Timer$Builder;
     174: astore_2
     175: aload_2
     176: aload_1
     177: invokevirtual #196                // Method io/micrometer/core/instrument/Timer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
     180: areturn

  io.micrometer.core.instrument.Meter registerNewMeter(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #200                // Method registerNewMeter:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
       5: areturn

  io.micrometer.core.instrument.Meter newNoopMeter();
    Code:
       0: aload_0
       1: invokevirtual #203                // Method newNoopMeter:()Lio/micrometer/core/instrument/Timer;
       4: areturn

  private static void lambda$record$1(java.time.Duration, io.micrometer.core.instrument.Timer);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #207,  2          // InterfaceMethod io/micrometer/core/instrument/Timer.record:(Ljava/time/Duration;)V
       7: return

  private static void lambda$record$0(long, java.util.concurrent.TimeUnit, io.micrometer.core.instrument.Timer);
    Code:
       0: aload_3
       1: lload_0
       2: aload_2
       3: invokeinterface #210,  4          // InterfaceMethod io/micrometer/core/instrument/Timer.record:(JLjava/util/concurrent/TimeUnit;)V
       8: return
}
