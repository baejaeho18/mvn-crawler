Compiled from "OkHttpMetricsEventListener.java"
public class io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener extends okhttp3.EventListener {
  public static final java.lang.String URI_PATTERN;

  private static final boolean REQUEST_TAG_CLASS_EXISTS;

  private final io.micrometer.core.instrument.MeterRegistry registry;

  private final java.lang.String requestsMetricName;

  private final java.util.function.Function<okhttp3.Request, java.lang.String> urlMapper;

  private final java.lang.Iterable<io.micrometer.core.instrument.Tag> extraTags;

  final java.util.concurrent.ConcurrentMap<okhttp3.Call, io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$CallState> callState;

  private static java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class<?>...);
    Code:
       0: ldc           #1                  // class okhttp3/Request
       2: aload_0
       3: aload_1
       4: invokevirtual #3                  // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
       7: areturn
       8: astore_2
       9: aconst_null
      10: areturn
    Exception table:
       from    to  target type
           0     7     8   Class java/lang/NoSuchMethodException

  io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener(io.micrometer.core.instrument.MeterRegistry, java.lang.String, java.util.function.Function<okhttp3.Request, java.lang.String>, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokespecial #11                 // Method okhttp3/EventListener."<init>":()V
       4: aload_0
       5: new           #17                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #19                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #20                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: aload_1
      17: putfield      #26                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      20: aload_0
      21: aload_2
      22: putfield      #30                 // Field requestsMetricName:Ljava/lang/String;
      25: aload_0
      26: aload_3
      27: putfield      #34                 // Field urlMapper:Ljava/util/function/Function;
      30: aload_0
      31: aload         4
      33: putfield      #38                 // Field extraTags:Ljava/lang/Iterable;
      36: return

  public static io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$Builder builder(io.micrometer.core.instrument.MeterRegistry, java.lang.String);
    Code:
       0: new           #42                 // class io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$Builder
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #44                 // Method io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$Builder."<init>":(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;)V
       9: areturn

  public void callStart(okhttp3.Call);
    Code:
       0: aload_0
       1: getfield      #20                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: new           #47                 // class io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState
       8: dup
       9: aload_0
      10: getfield      #26                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      13: invokevirtual #49                 // Method io/micrometer/core/instrument/MeterRegistry.config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
      16: invokevirtual #55                 // Method io/micrometer/core/instrument/MeterRegistry$Config.clock:()Lio/micrometer/core/instrument/Clock;
      19: invokeinterface #61,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      24: aload_1
      25: invokeinterface #67,  1           // InterfaceMethod okhttp3/Call.request:()Lokhttp3/Request;
      30: invokespecial #73                 // Method io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState."<init>":(JLokhttp3/Request;)V
      33: invokeinterface #76,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: return

  public void callFailed(okhttp3.Call, java.io.IOException);
    Code:
       0: aload_0
       1: getfield      #20                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #82,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #47                 // class io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState
      13: astore_3
      14: aload_3
      15: ifnull        28
      18: aload_3
      19: aload_2
      20: putfield      #86                 // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.exception:Ljava/io/IOException;
      23: aload_0
      24: aload_3
      25: invokespecial #90                 // Method time:(Lio/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState;)V
      28: return

  public void callEnd(okhttp3.Call);
    Code:
       0: aload_0
       1: getfield      #20                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #82,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: return

  public void responseHeadersEnd(okhttp3.Call, okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #20                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #82,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #47                 // class io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState
      13: astore_3
      14: aload_3
      15: ifnull        28
      18: aload_3
      19: aload_2
      20: putfield      #94                 // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
      23: aload_0
      24: aload_3
      25: invokespecial #90                 // Method time:(Lio/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState;)V
      28: return

  private void time(io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$CallState);
    Code:
       0: aload_1
       1: getfield      #98                 // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.request:Lokhttp3/Request;
       4: astore_2
       5: aload_2
       6: ifnull        13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: istore_3
      15: aload_1
      16: getfield      #94                 // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
      19: ifnull        53
      22: aload_1
      23: getfield      #94                 // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
      26: invokevirtual #101                // Method okhttp3/Response.code:()I
      29: sipush        404
      32: if_icmpeq     48
      35: aload_1
      36: getfield      #94                 // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
      39: invokevirtual #101                // Method okhttp3/Response.code:()I
      42: sipush        301
      45: if_icmpne     53
      48: ldc           #107                // String NOT_FOUND
      50: goto          66
      53: aload_0
      54: getfield      #34                 // Field urlMapper:Ljava/util/function/Function;
      57: aload_2
      58: invokeinterface #109,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      63: checkcast     #114                // class java/lang/String
      66: astore        4
      68: iload_3
      69: ifeq          80
      72: aload_0
      73: aload_2
      74: invokespecial #116                // Method getRequestTags:(Lokhttp3/Request;)Lio/micrometer/core/instrument/Tags;
      77: goto          83
      80: invokestatic  #120                // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
      83: astore        5
      85: aload_0
      86: getfield      #38                 // Field extraTags:Ljava/lang/Iterable;
      89: bipush        8
      91: anewarray     #114                // class java/lang/String
      94: dup
      95: iconst_0
      96: ldc           #126                // String method
      98: aastore
      99: dup
     100: iconst_1
     101: iload_3
     102: ifeq          112
     105: aload_2
     106: invokevirtual #128                // Method okhttp3/Request.method:()Ljava/lang/String;
     109: goto          114
     112: ldc           #131                // String UNKNOWN
     114: aastore
     115: dup
     116: iconst_2
     117: ldc           #133                // String uri
     119: aastore
     120: dup
     121: iconst_3
     122: iload_3
     123: ifeq          131
     126: aload         4
     128: goto          133
     131: ldc           #131                // String UNKNOWN
     133: aastore
     134: dup
     135: iconst_4
     136: ldc           #135                // String status
     138: aastore
     139: dup
     140: iconst_5
     141: aload_0
     142: aload_1
     143: getfield      #94                 // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
     146: aload_1
     147: getfield      #86                 // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.exception:Ljava/io/IOException;
     150: invokespecial #137                // Method getStatusMessage:(Lokhttp3/Response;Ljava/io/IOException;)Ljava/lang/String;
     153: aastore
     154: dup
     155: bipush        6
     157: ldc           #141                // String host
     159: aastore
     160: dup
     161: bipush        7
     163: iload_3
     164: ifeq          177
     167: aload_2
     168: invokevirtual #143                // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
     171: invokevirtual #147                // Method okhttp3/HttpUrl.host:()Ljava/lang/String;
     174: goto          179
     177: ldc           #131                // String UNKNOWN
     179: aastore
     180: invokestatic  #151                // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
     183: invokestatic  #155                // Method io/micrometer/core/instrument/Tags.concat:(Ljava/lang/Iterable;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
     186: aload         5
     188: invokevirtual #159                // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
     191: astore        6
     193: aload_0
     194: getfield      #30                 // Field requestsMetricName:Ljava/lang/String;
     197: invokestatic  #163                // InterfaceMethod io/micrometer/core/instrument/Timer.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     200: aload         6
     202: invokevirtual #169                // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
     205: ldc           #175                // String Timer of OkHttp operation
     207: invokevirtual #177                // Method io/micrometer/core/instrument/Timer$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     210: aload_0
     211: getfield      #26                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
     214: invokevirtual #180                // Method io/micrometer/core/instrument/Timer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
     217: aload_0
     218: getfield      #26                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
     221: invokevirtual #49                 // Method io/micrometer/core/instrument/MeterRegistry.config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
     224: invokevirtual #55                 // Method io/micrometer/core/instrument/MeterRegistry$Config.clock:()Lio/micrometer/core/instrument/Clock;
     227: invokeinterface #61,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
     232: aload_1
     233: getfield      #184                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.startTime:J
     236: lsub
     237: getstatic     #188                // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
     240: invokeinterface #194,  4          // InterfaceMethod io/micrometer/core/instrument/Timer.record:(JLjava/util/concurrent/TimeUnit;)V
     245: return

  private io.micrometer.core.instrument.Tags getRequestTags(okhttp3.Request);
    Code:
       0: getstatic     #198                // Field REQUEST_TAG_CLASS_EXISTS:Z
       3: ifeq          22
       6: aload_1
       7: ldc           #121                // class io/micrometer/core/instrument/Tags
       9: invokevirtual #202                // Method okhttp3/Request.tag:(Ljava/lang/Class;)Ljava/lang/Object;
      12: checkcast     #121                // class io/micrometer/core/instrument/Tags
      15: astore_2
      16: aload_2
      17: ifnull        22
      20: aload_2
      21: areturn
      22: aload_1
      23: invokevirtual #206                // Method okhttp3/Request.tag:()Ljava/lang/Object;
      26: astore_2
      27: aload_2
      28: instanceof    #121                // class io/micrometer/core/instrument/Tags
      31: ifeq          39
      34: aload_2
      35: checkcast     #121                // class io/micrometer/core/instrument/Tags
      38: areturn
      39: invokestatic  #120                // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
      42: areturn

  private java.lang.String getStatusMessage(okhttp3.Response, java.io.IOException);
    Code:
       0: aload_2
       1: ifnull        7
       4: ldc           #209                // String IO_ERROR
       6: areturn
       7: aload_1
       8: ifnonnull     14
      11: ldc           #211                // String CLIENT_ERROR
      13: areturn
      14: aload_1
      15: invokevirtual #101                // Method okhttp3/Response.code:()I
      18: invokestatic  #213                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      21: areturn

  static {};
    Code:
       0: ldc           #219                // String tag
       2: iconst_1
       3: anewarray     #4                  // class java/lang/Class
       6: dup
       7: iconst_0
       8: ldc           #4                  // class java/lang/Class
      10: aastore
      11: invokestatic  #220                // Method getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      14: ifnull        21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: putstatic     #198                // Field REQUEST_TAG_CLASS_EXISTS:Z
      25: return
}
