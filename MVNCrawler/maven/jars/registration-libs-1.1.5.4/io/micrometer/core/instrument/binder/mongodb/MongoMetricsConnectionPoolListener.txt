Compiled from "MongoMetricsConnectionPoolListener.java"
public class io.micrometer.core.instrument.binder.mongodb.MongoMetricsConnectionPoolListener extends com.mongodb.event.ConnectionPoolListenerAdapter {
  private static final java.lang.String METRIC_PREFIX;

  private final java.util.Map<com.mongodb.connection.ServerId, java.util.concurrent.atomic.AtomicInteger> poolSize;

  private final java.util.Map<com.mongodb.connection.ServerId, java.util.concurrent.atomic.AtomicInteger> checkedOutCount;

  private final java.util.Map<com.mongodb.connection.ServerId, java.util.concurrent.atomic.AtomicInteger> waitQueueSize;

  private final java.util.Map<com.mongodb.connection.ServerId, java.util.List<io.micrometer.core.instrument.Meter>> meters;

  private final io.micrometer.core.instrument.MeterRegistry registry;

  public io.micrometer.core.instrument.binder.mongodb.MongoMetricsConnectionPoolListener(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/mongodb/event/ConnectionPoolListenerAdapter."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #10                 // Field poolSize:Ljava/util/Map;
      15: aload_0
      16: new           #7                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #16                 // Field checkedOutCount:Ljava/util/Map;
      26: aload_0
      27: new           #7                  // class java/util/concurrent/ConcurrentHashMap
      30: dup
      31: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      34: putfield      #19                 // Field waitQueueSize:Ljava/util/Map;
      37: aload_0
      38: new           #7                  // class java/util/concurrent/ConcurrentHashMap
      41: dup
      42: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      45: putfield      #22                 // Field meters:Ljava/util/Map;
      48: aload_0
      49: aload_1
      50: putfield      #25                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      53: return

  public void connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent);
    Code:
       0: new           #29                 // class java/util/ArrayList
       3: dup
       4: invokespecial #31                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_2
       9: aload_0
      10: aload_1
      11: invokevirtual #32                 // Method com/mongodb/event/ConnectionPoolOpenedEvent.getServerId:()Lcom/mongodb/connection/ServerId;
      14: ldc           #38                 // String mongodb.driver.pool.size
      16: ldc           #40                 // String the current size of the connection pool, including idle and and in-use members
      18: aload_0
      19: getfield      #10                 // Field poolSize:Ljava/util/Map;
      22: invokespecial #42                 // Method registerGauge:(Lcom/mongodb/connection/ServerId;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lio/micrometer/core/instrument/Gauge;
      25: invokeinterface #46,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      30: pop
      31: aload_2
      32: aload_0
      33: aload_1
      34: invokevirtual #32                 // Method com/mongodb/event/ConnectionPoolOpenedEvent.getServerId:()Lcom/mongodb/connection/ServerId;
      37: ldc           #52                 // String mongodb.driver.pool.checkedout
      39: ldc           #54                 // String the count of connections that are currently in use
      41: aload_0
      42: getfield      #16                 // Field checkedOutCount:Ljava/util/Map;
      45: invokespecial #42                 // Method registerGauge:(Lcom/mongodb/connection/ServerId;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lio/micrometer/core/instrument/Gauge;
      48: invokeinterface #46,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      53: pop
      54: aload_2
      55: aload_0
      56: aload_1
      57: invokevirtual #32                 // Method com/mongodb/event/ConnectionPoolOpenedEvent.getServerId:()Lcom/mongodb/connection/ServerId;
      60: ldc           #56                 // String mongodb.driver.pool.waitqueuesize
      62: ldc           #58                 // String the current size of the wait queue for a connection from the pool
      64: aload_0
      65: getfield      #19                 // Field waitQueueSize:Ljava/util/Map;
      68: invokespecial #42                 // Method registerGauge:(Lcom/mongodb/connection/ServerId;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lio/micrometer/core/instrument/Gauge;
      71: invokeinterface #46,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      76: pop
      77: aload_0
      78: getfield      #22                 // Field meters:Ljava/util/Map;
      81: aload_1
      82: invokevirtual #32                 // Method com/mongodb/event/ConnectionPoolOpenedEvent.getServerId:()Lcom/mongodb/connection/ServerId;
      85: aload_2
      86: invokeinterface #60,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      91: pop
      92: return

  public void connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent);
    Code:
       0: aload_1
       1: invokevirtual #66                 // Method com/mongodb/event/ConnectionPoolClosedEvent.getServerId:()Lcom/mongodb/connection/ServerId;
       4: astore_2
       5: aload_0
       6: getfield      #22                 // Field meters:Ljava/util/Map;
       9: aload_2
      10: invokeinterface #69,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #47                 // class java/util/List
      18: invokeinterface #73,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      23: astore_3
      24: aload_3
      25: invokeinterface #77,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          57
      33: aload_3
      34: invokeinterface #83,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #87                 // class io/micrometer/core/instrument/Meter
      42: astore        4
      44: aload_0
      45: getfield      #25                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      48: aload         4
      50: invokevirtual #89                 // Method io/micrometer/core/instrument/MeterRegistry.remove:(Lio/micrometer/core/instrument/Meter;)Lio/micrometer/core/instrument/Meter;
      53: pop
      54: goto          24
      57: aload_0
      58: getfield      #22                 // Field meters:Ljava/util/Map;
      61: aload_2
      62: invokeinterface #95,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      67: pop
      68: aload_0
      69: getfield      #10                 // Field poolSize:Ljava/util/Map;
      72: aload_2
      73: invokeinterface #95,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      78: pop
      79: aload_0
      80: getfield      #16                 // Field checkedOutCount:Ljava/util/Map;
      83: aload_2
      84: invokeinterface #95,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      89: pop
      90: aload_0
      91: getfield      #19                 // Field waitQueueSize:Ljava/util/Map;
      94: aload_2
      95: invokeinterface #95,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     100: pop
     101: return

  public void connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent);
    Code:
       0: aload_0
       1: getfield      #16                 // Field checkedOutCount:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #97                 // Method com/mongodb/event/ConnectionCheckedOutEvent.getConnectionId:()Lcom/mongodb/connection/ConnectionId;
       8: invokevirtual #103                // Method com/mongodb/connection/ConnectionId.getServerId:()Lcom/mongodb/connection/ServerId;
      11: invokeinterface #69,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #106                // class java/util/concurrent/atomic/AtomicInteger
      19: invokevirtual #108                // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      22: pop
      23: return

  public void connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent);
    Code:
       0: aload_0
       1: getfield      #16                 // Field checkedOutCount:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #112                // Method com/mongodb/event/ConnectionCheckedInEvent.getConnectionId:()Lcom/mongodb/connection/ConnectionId;
       8: invokevirtual #103                // Method com/mongodb/connection/ConnectionId.getServerId:()Lcom/mongodb/connection/ServerId;
      11: invokeinterface #69,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #106                // class java/util/concurrent/atomic/AtomicInteger
      19: invokevirtual #115                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      22: pop
      23: return

  public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent);
    Code:
       0: aload_0
       1: getfield      #19                 // Field waitQueueSize:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #118                // Method com/mongodb/event/ConnectionPoolWaitQueueEnteredEvent.getServerId:()Lcom/mongodb/connection/ServerId;
       8: invokeinterface #69,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #106                // class java/util/concurrent/atomic/AtomicInteger
      16: invokevirtual #108                // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      19: pop
      20: return

  public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent);
    Code:
       0: aload_0
       1: getfield      #19                 // Field waitQueueSize:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #121                // Method com/mongodb/event/ConnectionPoolWaitQueueExitedEvent.getServerId:()Lcom/mongodb/connection/ServerId;
       8: invokeinterface #69,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #106                // class java/util/concurrent/atomic/AtomicInteger
      16: invokevirtual #115                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      19: pop
      20: return

  public void connectionAdded(com.mongodb.event.ConnectionAddedEvent);
    Code:
       0: aload_0
       1: getfield      #10                 // Field poolSize:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #124                // Method com/mongodb/event/ConnectionAddedEvent.getConnectionId:()Lcom/mongodb/connection/ConnectionId;
       8: invokevirtual #103                // Method com/mongodb/connection/ConnectionId.getServerId:()Lcom/mongodb/connection/ServerId;
      11: invokeinterface #69,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #106                // class java/util/concurrent/atomic/AtomicInteger
      19: invokevirtual #108                // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      22: pop
      23: return

  public void connectionRemoved(com.mongodb.event.ConnectionRemovedEvent);
    Code:
       0: aload_0
       1: getfield      #10                 // Field poolSize:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #127                // Method com/mongodb/event/ConnectionRemovedEvent.getConnectionId:()Lcom/mongodb/connection/ConnectionId;
       8: invokevirtual #103                // Method com/mongodb/connection/ConnectionId.getServerId:()Lcom/mongodb/connection/ServerId;
      11: invokeinterface #69,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #106                // class java/util/concurrent/atomic/AtomicInteger
      19: invokevirtual #115                // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      22: pop
      23: return

  private io.micrometer.core.instrument.Gauge registerGauge(com.mongodb.connection.ServerId, java.lang.String, java.lang.String, java.util.Map<com.mongodb.connection.ServerId, java.util.concurrent.atomic.AtomicInteger>);
    Code:
       0: aload         4
       2: aload_1
       3: new           #106                // class java/util/concurrent/atomic/AtomicInteger
       6: dup
       7: invokespecial #130                // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      10: invokeinterface #60,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: aload_2
      17: aload         4
      19: aload_1
      20: invokedynamic #131,  0            // InvokeDynamic #0:applyAsDouble:(Lcom/mongodb/connection/ServerId;)Ljava/util/function/ToDoubleFunction;
      25: invokestatic  #135                // InterfaceMethod io/micrometer/core/instrument/Gauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge$Builder;
      28: aload_3
      29: invokevirtual #141                // Method io/micrometer/core/instrument/Gauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      32: ldc           #147                // String cluster.id
      34: aload_1
      35: invokevirtual #149                // Method com/mongodb/connection/ServerId.getClusterId:()Lcom/mongodb/connection/ClusterId;
      38: invokevirtual #155                // Method com/mongodb/connection/ClusterId.getValue:()Ljava/lang/String;
      41: invokevirtual #161                // Method io/micrometer/core/instrument/Gauge$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      44: ldc           #165                // String server.address
      46: aload_1
      47: invokevirtual #167                // Method com/mongodb/connection/ServerId.getAddress:()Lcom/mongodb/ServerAddress;
      50: invokevirtual #171                // Method com/mongodb/ServerAddress.toString:()Ljava/lang/String;
      53: invokevirtual #161                // Method io/micrometer/core/instrument/Gauge$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      56: aload_0
      57: getfield      #25                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      60: invokevirtual #176                // Method io/micrometer/core/instrument/Gauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Gauge;
      63: areturn

  private static double lambda$registerGauge$0(com.mongodb.connection.ServerId, java.util.Map);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #69,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #106                // class java/util/concurrent/atomic/AtomicInteger
      10: invokevirtual #180                // Method java/util/concurrent/atomic/AtomicInteger.doubleValue:()D
      13: dreturn
}
