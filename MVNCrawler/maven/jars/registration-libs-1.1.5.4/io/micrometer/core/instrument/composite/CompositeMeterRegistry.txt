Compiled from "CompositeMeterRegistry.java"
public class io.micrometer.core.instrument.composite.CompositeMeterRegistry extends io.micrometer.core.instrument.MeterRegistry {
  private final java.util.concurrent.atomic.AtomicBoolean registriesLock;

  private final java.util.Set<io.micrometer.core.instrument.MeterRegistry> registries;

  private final java.util.Set<io.micrometer.core.instrument.MeterRegistry> unmodifiableRegistries;

  volatile java.util.Set<io.micrometer.core.instrument.MeterRegistry> nonCompositeDescendants;

  private final java.util.concurrent.atomic.AtomicBoolean parentLock;

  private volatile java.util.Set<io.micrometer.core.instrument.composite.CompositeMeterRegistry> parents;

  public io.micrometer.core.instrument.composite.CompositeMeterRegistry();
    Code:
       0: aload_0
       1: getstatic     #1                  // Field io/micrometer/core/instrument/Clock.SYSTEM:Lio/micrometer/core/instrument/Clock;
       4: invokespecial #7                  // Method "<init>":(Lio/micrometer/core/instrument/Clock;)V
       7: return

  public io.micrometer.core.instrument.composite.CompositeMeterRegistry(io.micrometer.core.instrument.Clock);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #13                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
       5: invokespecial #19                 // Method "<init>":(Lio/micrometer/core/instrument/Clock;Ljava/lang/Iterable;)V
       8: return

  public io.micrometer.core.instrument.composite.CompositeMeterRegistry(io.micrometer.core.instrument.Clock, java.lang.Iterable<io.micrometer.core.instrument.MeterRegistry>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #22                 // Method io/micrometer/core/instrument/MeterRegistry."<init>":(Lio/micrometer/core/instrument/Clock;)V
       5: aload_0
       6: new           #25                 // class java/util/concurrent/atomic/AtomicBoolean
       9: dup
      10: iconst_0
      11: invokespecial #27                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      14: putfield      #30                 // Field registriesLock:Ljava/util/concurrent/atomic/AtomicBoolean;
      17: aload_0
      18: new           #34                 // class java/util/IdentityHashMap
      21: dup
      22: invokespecial #36                 // Method java/util/IdentityHashMap."<init>":()V
      25: invokestatic  #39                 // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
      28: putfield      #43                 // Field registries:Ljava/util/Set;
      31: aload_0
      32: aload_0
      33: getfield      #43                 // Field registries:Ljava/util/Set;
      36: invokestatic  #47                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      39: putfield      #51                 // Field unmodifiableRegistries:Ljava/util/Set;
      42: aload_0
      43: invokestatic  #13                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
      46: putfield      #54                 // Field nonCompositeDescendants:Ljava/util/Set;
      49: aload_0
      50: new           #25                 // class java/util/concurrent/atomic/AtomicBoolean
      53: dup
      54: iconst_0
      55: invokespecial #27                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      58: putfield      #57                 // Field parentLock:Ljava/util/concurrent/atomic/AtomicBoolean;
      61: aload_0
      62: new           #34                 // class java/util/IdentityHashMap
      65: dup
      66: invokespecial #36                 // Method java/util/IdentityHashMap."<init>":()V
      69: invokestatic  #39                 // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
      72: putfield      #60                 // Field parents:Ljava/util/Set;
      75: aload_0
      76: invokevirtual #63                 // Method config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
      79: getstatic     #67                 // Field io/micrometer/core/instrument/config/NamingConvention.identity:Lio/micrometer/core/instrument/config/NamingConvention;
      82: invokevirtual #73                 // Method io/micrometer/core/instrument/MeterRegistry$Config.namingConvention:(Lio/micrometer/core/instrument/config/NamingConvention;)Lio/micrometer/core/instrument/MeterRegistry$Config;
      85: aload_0
      86: invokedynamic #79,  0             // InvokeDynamic #0:accept:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)Ljava/util/function/Consumer;
      91: invokevirtual #83                 // Method io/micrometer/core/instrument/MeterRegistry$Config.onMeterAdded:(Ljava/util/function/Consumer;)Lio/micrometer/core/instrument/MeterRegistry$Config;
      94: aload_0
      95: invokedynamic #87,  0             // InvokeDynamic #1:accept:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)Ljava/util/function/Consumer;
     100: invokevirtual #88                 // Method io/micrometer/core/instrument/MeterRegistry$Config.onMeterRemoved:(Ljava/util/function/Consumer;)Lio/micrometer/core/instrument/MeterRegistry$Config;
     103: pop
     104: aload_2
     105: aload_0
     106: invokedynamic #91,  0             // InvokeDynamic #2:accept:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)Ljava/util/function/Consumer;
     111: invokeinterface #92,  2           // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V
     116: return

  protected io.micrometer.core.instrument.Timer newTimer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: new           #98                 // class io/micrometer/core/instrument/composite/CompositeTimer
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #100                // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_2
      10: aload_3
      11: invokespecial #103                // Method io/micrometer/core/instrument/composite/CompositeTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;)V
      14: areturn

  protected io.micrometer.core.instrument.DistributionSummary newDistributionSummary(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, double);
    Code:
       0: new           #106                // class io/micrometer/core/instrument/composite/CompositeDistributionSummary
       3: dup
       4: aload_1
       5: aload_2
       6: dload_3
       7: invokespecial #108                // Method io/micrometer/core/instrument/composite/CompositeDistributionSummary."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;D)V
      10: areturn

  protected io.micrometer.core.instrument.Counter newCounter(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: new           #111                // class io/micrometer/core/instrument/composite/CompositeCounter
       3: dup
       4: aload_1
       5: invokespecial #113                // Method io/micrometer/core/instrument/composite/CompositeCounter."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
       8: areturn

  protected io.micrometer.core.instrument.LongTaskTimer newLongTaskTimer(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: new           #116                // class io/micrometer/core/instrument/composite/CompositeLongTaskTimer
       3: dup
       4: aload_1
       5: invokespecial #118                // Method io/micrometer/core/instrument/composite/CompositeLongTaskTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
       8: areturn

  protected <T> io.micrometer.core.instrument.Gauge newGauge(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: new           #119                // class io/micrometer/core/instrument/composite/CompositeGauge
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokespecial #121                // Method io/micrometer/core/instrument/composite/CompositeGauge."<init>":(Lio/micrometer/core/instrument/Meter$Id;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)V
      10: areturn

  protected <T> io.micrometer.core.instrument.TimeGauge newTimeGauge(io.micrometer.core.instrument.Meter$Id, T, java.util.concurrent.TimeUnit, java.util.function.ToDoubleFunction<T>);
    Code:
       0: new           #124                // class io/micrometer/core/instrument/composite/CompositeTimeGauge
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: invokespecial #126                // Method io/micrometer/core/instrument/composite/CompositeTimeGauge."<init>":(Lio/micrometer/core/instrument/Meter$Id;Ljava/lang/Object;Ljava/util/concurrent/TimeUnit;Ljava/util/function/ToDoubleFunction;)V
      12: areturn

  protected <T> io.micrometer.core.instrument.FunctionTimer newFunctionTimer(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToLongFunction<T>, java.util.function.ToDoubleFunction<T>, java.util.concurrent.TimeUnit);
    Code:
       0: new           #129                // class io/micrometer/core/instrument/composite/CompositeFunctionTimer
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokespecial #131                // Method io/micrometer/core/instrument/composite/CompositeFunctionTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Ljava/lang/Object;Ljava/util/function/ToLongFunction;Ljava/util/function/ToDoubleFunction;Ljava/util/concurrent/TimeUnit;)V
      14: areturn

  protected <T> io.micrometer.core.instrument.FunctionCounter newFunctionCounter(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: new           #134                // class io/micrometer/core/instrument/composite/CompositeFunctionCounter
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokespecial #136                // Method io/micrometer/core/instrument/composite/CompositeFunctionCounter."<init>":(Lio/micrometer/core/instrument/Meter$Id;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)V
      10: areturn

  protected java.util.concurrent.TimeUnit getBaseTimeUnit();
    Code:
       0: getstatic     #137                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       3: areturn

  protected io.micrometer.core.instrument.distribution.DistributionStatisticConfig defaultHistogramConfig();
    Code:
       0: getstatic     #143                // Field io/micrometer/core/instrument/distribution/DistributionStatisticConfig.NONE:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       3: areturn

  protected io.micrometer.core.instrument.Meter newMeter(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Meter$Type, java.lang.Iterable<io.micrometer.core.instrument.Measurement>);
    Code:
       0: new           #149                // class io/micrometer/core/instrument/composite/CompositeCustomMeter
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokespecial #151                // Method io/micrometer/core/instrument/composite/CompositeCustomMeter."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Meter$Type;Ljava/lang/Iterable;)V
      10: areturn

  public io.micrometer.core.instrument.composite.CompositeMeterRegistry add(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #30                 // Field registriesLock:Ljava/util/concurrent/atomic/AtomicBoolean;
       5: aload_0
       6: aload_1
       7: invokedynamic #154,  0            // InvokeDynamic #3:run:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;Lio/micrometer/core/instrument/MeterRegistry;)Ljava/lang/Runnable;
      12: invokespecial #158                // Method lock:(Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/lang/Runnable;)V
      15: aload_0
      16: areturn

  private void forbidSelfContainingComposite(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     15
       5: new           #162                // class java/lang/IllegalArgumentException
       8: dup
       9: ldc           #164                // String Adding a composite meter registry to itself is not allowed!
      11: invokespecial #166                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: aload_1
      16: instanceof    #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      19: ifeq          40
      22: aload_1
      23: checkcast     #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      26: invokevirtual #169                // Method getRegistries:()Ljava/util/Set;
      29: aload_0
      30: invokedynamic #172,  0            // InvokeDynamic #4:accept:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)Ljava/util/function/Consumer;
      35: invokeinterface #173,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      40: return

  public io.micrometer.core.instrument.composite.CompositeMeterRegistry remove(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #30                 // Field registriesLock:Ljava/util/concurrent/atomic/AtomicBoolean;
       5: aload_0
       6: aload_1
       7: invokedynamic #176,  0            // InvokeDynamic #5:run:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;Lio/micrometer/core/instrument/MeterRegistry;)Ljava/lang/Runnable;
      12: invokespecial #158                // Method lock:(Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/lang/Runnable;)V
      15: aload_0
      16: areturn

  private void removeParent(io.micrometer.core.instrument.composite.CompositeMeterRegistry);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #57                 // Field parentLock:Ljava/util/concurrent/atomic/AtomicBoolean;
       5: aload_0
       6: aload_1
       7: invokedynamic #177,  0            // InvokeDynamic #6:run:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)Ljava/lang/Runnable;
      12: invokespecial #158                // Method lock:(Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/lang/Runnable;)V
      15: return

  private void addParent(io.micrometer.core.instrument.composite.CompositeMeterRegistry);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #57                 // Field parentLock:Ljava/util/concurrent/atomic/AtomicBoolean;
       5: aload_0
       6: aload_1
       7: invokedynamic #180,  0            // InvokeDynamic #7:run:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)Ljava/lang/Runnable;
      12: invokespecial #158                // Method lock:(Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/lang/Runnable;)V
      15: return

  private void lock(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable);
    Code:
       0: aload_1
       1: iconst_0
       2: iconst_1
       3: invokevirtual #181                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       6: ifeq          0
       9: aload_2
      10: invokeinterface #185,  1          // InterfaceMethod java/lang/Runnable.run:()V
      15: aload_1
      16: iconst_0
      17: invokevirtual #189                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      20: goto          31
      23: astore_3
      24: aload_1
      25: iconst_0
      26: invokevirtual #189                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      29: aload_3
      30: athrow
      31: return
    Exception table:
       from    to  target type
           9    15    23   any

  private void updateDescendants();
    Code:
       0: new           #34                 // class java/util/IdentityHashMap
       3: dup
       4: invokespecial #36                 // Method java/util/IdentityHashMap."<init>":()V
       7: invokestatic  #39                 // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
      10: astore_1
      11: aload_0
      12: getfield      #43                 // Field registries:Ljava/util/Set;
      15: invokeinterface #192,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      20: astore_2
      21: aload_2
      22: invokeinterface #196,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          75
      30: aload_2
      31: invokeinterface #202,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #23                 // class io/micrometer/core/instrument/MeterRegistry
      39: astore_3
      40: aload_3
      41: instanceof    #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      44: ifeq          64
      47: aload_1
      48: aload_3
      49: checkcast     #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      52: getfield      #54                 // Field nonCompositeDescendants:Ljava/util/Set;
      55: invokeinterface #206,  2          // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      60: pop
      61: goto          72
      64: aload_1
      65: aload_3
      66: invokeinterface #210,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      71: pop
      72: goto          21
      75: new           #34                 // class java/util/IdentityHashMap
      78: dup
      79: invokespecial #36                 // Method java/util/IdentityHashMap."<init>":()V
      82: invokestatic  #39                 // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
      85: astore_2
      86: aload_2
      87: aload_0
      88: getfield      #54                 // Field nonCompositeDescendants:Ljava/util/Set;
      91: invokeinterface #206,  2          // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      96: pop
      97: aload_2
      98: aload_1
      99: invokeinterface #214,  2          // InterfaceMethod java/util/Set.removeAll:(Ljava/util/Collection;)Z
     104: pop
     105: new           #34                 // class java/util/IdentityHashMap
     108: dup
     109: invokespecial #36                 // Method java/util/IdentityHashMap."<init>":()V
     112: invokestatic  #39                 // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
     115: astore_3
     116: aload_3
     117: aload_1
     118: invokeinterface #206,  2          // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
     123: pop
     124: aload_3
     125: aload_0
     126: getfield      #54                 // Field nonCompositeDescendants:Ljava/util/Set;
     129: invokeinterface #214,  2          // InterfaceMethod java/util/Set.removeAll:(Ljava/util/Collection;)Z
     134: pop
     135: aload_2
     136: invokeinterface #217,  1          // InterfaceMethod java/util/Set.isEmpty:()Z
     141: ifeq          153
     144: aload_3
     145: invokeinterface #217,  1          // InterfaceMethod java/util/Set.isEmpty:()Z
     150: ifne          240
     153: aload_0
     154: invokevirtual #220                // Method getMeters:()Ljava/util/List;
     157: invokeinterface #224,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     162: astore        4
     164: aload         4
     166: invokeinterface #196,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     171: ifeq          240
     174: aload         4
     176: invokeinterface #202,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     181: checkcast     #227                // class io/micrometer/core/instrument/Meter
     184: astore        5
     186: aload         5
     188: instanceof    #229                // class io/micrometer/core/instrument/composite/CompositeMeter
     191: ifeq          237
     194: aload         5
     196: checkcast     #229                // class io/micrometer/core/instrument/composite/CompositeMeter
     199: astore        6
     201: aload_2
     202: aload         6
     204: dup
     205: invokestatic  #231                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
     208: pop
     209: invokedynamic #237,  0            // InvokeDynamic #8:accept:(Lio/micrometer/core/instrument/composite/CompositeMeter;)Ljava/util/function/Consumer;
     214: invokeinterface #173,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
     219: aload_3
     220: aload         6
     222: dup
     223: invokestatic  #231                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
     226: pop
     227: invokedynamic #240,  0            // InvokeDynamic #9:accept:(Lio/micrometer/core/instrument/composite/CompositeMeter;)Ljava/util/function/Consumer;
     232: invokeinterface #173,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
     237: goto          164
     240: aload_0
     241: aload_1
     242: putfield      #54                 // Field nonCompositeDescendants:Ljava/util/Set;
     245: aload_0
     246: aload_0
     247: getfield      #57                 // Field parentLock:Ljava/util/concurrent/atomic/AtomicBoolean;
     250: aload_0
     251: invokedynamic #241,  0            // InvokeDynamic #10:run:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)Ljava/lang/Runnable;
     256: invokespecial #158                // Method lock:(Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/lang/Runnable;)V
     259: return

  public java.util.Set<io.micrometer.core.instrument.MeterRegistry> getRegistries();
    Code:
       0: aload_0
       1: getfield      #51                 // Field unmodifiableRegistries:Ljava/util/Set;
       4: areturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #43                 // Field registries:Ljava/util/Set;
       4: invokedynamic #244,  0            // InvokeDynamic #11:accept:()Ljava/util/function/Consumer;
       9: invokeinterface #173,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      14: aload_0
      15: invokespecial #247                // Method io/micrometer/core/instrument/MeterRegistry.close:()V
      18: return

  private void lambda$updateDescendants$9();
    Code:
       0: aload_0
       1: getfield      #60                 // Field parents:Ljava/util/Set;
       4: invokedynamic #250,  0            // InvokeDynamic #12:accept:()Ljava/util/function/Consumer;
       9: invokeinterface #173,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      14: return

  private void lambda$addParent$8(io.micrometer.core.instrument.composite.CompositeMeterRegistry);
    Code:
       0: aload_0
       1: getfield      #60                 // Field parents:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #210,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  private void lambda$removeParent$7(io.micrometer.core.instrument.composite.CompositeMeterRegistry);
    Code:
       0: aload_0
       1: getfield      #60                 // Field parents:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #251,  2          // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      10: pop
      11: return

  private void lambda$remove$6(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_1
       1: instanceof    #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
       4: ifeq          15
       7: aload_1
       8: checkcast     #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      11: aload_0
      12: invokespecial #254                // Method removeParent:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)V
      15: aload_0
      16: getfield      #43                 // Field registries:Ljava/util/Set;
      19: aload_1
      20: invokeinterface #251,  2          // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      25: ifeq          32
      28: aload_0
      29: invokespecial #258                // Method updateDescendants:()V
      32: return

  private void lambda$add$5(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #261                // Method forbidSelfContainingComposite:(Lio/micrometer/core/instrument/MeterRegistry;)V
       5: aload_1
       6: instanceof    #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
       9: ifeq          20
      12: aload_1
      13: checkcast     #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      16: aload_0
      17: invokespecial #265                // Method addParent:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)V
      20: aload_0
      21: getfield      #43                 // Field registries:Ljava/util/Set;
      24: aload_1
      25: invokeinterface #210,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      30: ifeq          37
      33: aload_0
      34: invokespecial #258                // Method updateDescendants:()V
      37: return

  private void lambda$new$4(io.micrometer.core.instrument.Meter);
    Code:
       0: aload_1
       1: instanceof    #229                // class io/micrometer/core/instrument/composite/CompositeMeter
       4: ifeq          22
       7: aload_0
       8: aload_0
       9: getfield      #30                 // Field registriesLock:Ljava/util/concurrent/atomic/AtomicBoolean;
      12: aload_0
      13: aload_1
      14: invokedynamic #268,  0            // InvokeDynamic #13:run:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;Lio/micrometer/core/instrument/Meter;)Ljava/lang/Runnable;
      19: invokespecial #158                // Method lock:(Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/lang/Runnable;)V
      22: return

  private void lambda$new$3(io.micrometer.core.instrument.Meter);
    Code:
       0: aload_0
       1: getfield      #54                 // Field nonCompositeDescendants:Ljava/util/Set;
       4: aload_1
       5: invokedynamic #271,  0            // InvokeDynamic #14:accept:(Lio/micrometer/core/instrument/Meter;)Ljava/util/function/Consumer;
      10: invokeinterface #173,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      15: return

  private static void lambda$new$2(io.micrometer.core.instrument.Meter, io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #274                // Method io/micrometer/core/instrument/MeterRegistry.remove:(Lio/micrometer/core/instrument/Meter;)Lio/micrometer/core/instrument/Meter;
       5: pop
       6: return

  private void lambda$new$1(io.micrometer.core.instrument.Meter);
    Code:
       0: aload_1
       1: instanceof    #229                // class io/micrometer/core/instrument/composite/CompositeMeter
       4: ifeq          22
       7: aload_0
       8: aload_0
       9: getfield      #30                 // Field registriesLock:Ljava/util/concurrent/atomic/AtomicBoolean;
      12: aload_0
      13: aload_1
      14: invokedynamic #277,  0            // InvokeDynamic #15:run:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;Lio/micrometer/core/instrument/Meter;)Ljava/lang/Runnable;
      19: invokespecial #158                // Method lock:(Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/lang/Runnable;)V
      22: return

  private void lambda$new$0(io.micrometer.core.instrument.Meter);
    Code:
       0: aload_0
       1: getfield      #54                 // Field nonCompositeDescendants:Ljava/util/Set;
       4: aload_1
       5: checkcast     #229                // class io/micrometer/core/instrument/composite/CompositeMeter
       8: dup
       9: invokestatic  #231                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      12: pop
      13: invokedynamic #240,  0            // InvokeDynamic #9:accept:(Lio/micrometer/core/instrument/composite/CompositeMeter;)Ljava/util/function/Consumer;
      18: invokeinterface #173,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      23: return
}
