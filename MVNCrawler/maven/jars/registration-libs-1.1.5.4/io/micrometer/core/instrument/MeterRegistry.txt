Compiled from "MeterRegistry.java"
public abstract class io.micrometer.core.instrument.MeterRegistry {
  protected final io.micrometer.core.instrument.Clock clock;

  private final java.lang.Object meterMapLock;

  private volatile io.micrometer.core.instrument.config.MeterFilter[] filters;

  private final java.util.List<java.util.function.Consumer<io.micrometer.core.instrument.Meter>> meterAddedListeners;

  private final java.util.List<java.util.function.Consumer<io.micrometer.core.instrument.Meter>> meterRemovedListeners;

  private final io.micrometer.core.instrument.MeterRegistry$Config config;

  private final io.micrometer.core.instrument.MeterRegistry$More more;

  private final java.util.Map<io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Meter> meterMap;

  private final java.util.Map<io.micrometer.core.instrument.Meter$Id, java.util.Set<io.micrometer.core.instrument.Meter$Id>> syntheticAssociations;

  private final java.util.concurrent.atomic.AtomicBoolean closed;

  private io.micrometer.core.instrument.distribution.pause.PauseDetector pauseDetector;

  private io.micrometer.core.instrument.config.NamingConvention namingConvention;

  protected io.micrometer.core.instrument.MeterRegistry(io.micrometer.core.instrument.Clock);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #31                 // class java/lang/Object
       8: dup
       9: invokespecial #30                 // Method java/lang/Object."<init>":()V
      12: putfield      #36                 // Field meterMapLock:Ljava/lang/Object;
      15: aload_0
      16: iconst_0
      17: anewarray     #40                 // class io/micrometer/core/instrument/config/MeterFilter
      20: putfield      #26                 // Field filters:[Lio/micrometer/core/instrument/config/MeterFilter;
      23: aload_0
      24: new           #42                 // class java/util/concurrent/CopyOnWriteArrayList
      27: dup
      28: invokespecial #44                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      31: putfield      #23                 // Field meterAddedListeners:Ljava/util/List;
      34: aload_0
      35: new           #42                 // class java/util/concurrent/CopyOnWriteArrayList
      38: dup
      39: invokespecial #44                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      42: putfield      #19                 // Field meterRemovedListeners:Ljava/util/List;
      45: aload_0
      46: new           #45                 // class io/micrometer/core/instrument/MeterRegistry$Config
      49: dup
      50: aload_0
      51: invokespecial #47                 // Method io/micrometer/core/instrument/MeterRegistry$Config."<init>":(Lio/micrometer/core/instrument/MeterRegistry;)V
      54: putfield      #50                 // Field config:Lio/micrometer/core/instrument/MeterRegistry$Config;
      57: aload_0
      58: new           #54                 // class io/micrometer/core/instrument/MeterRegistry$More
      61: dup
      62: aload_0
      63: invokespecial #56                 // Method io/micrometer/core/instrument/MeterRegistry$More."<init>":(Lio/micrometer/core/instrument/MeterRegistry;)V
      66: putfield      #57                 // Field more:Lio/micrometer/core/instrument/MeterRegistry$More;
      69: aload_0
      70: new           #61                 // class java/util/concurrent/ConcurrentHashMap
      73: dup
      74: invokespecial #63                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      77: putfield      #64                 // Field meterMap:Ljava/util/Map;
      80: aload_0
      81: new           #68                 // class java/util/HashMap
      84: dup
      85: invokespecial #70                 // Method java/util/HashMap."<init>":()V
      88: putfield      #71                 // Field syntheticAssociations:Ljava/util/Map;
      91: aload_0
      92: new           #74                 // class java/util/concurrent/atomic/AtomicBoolean
      95: dup
      96: iconst_0
      97: invokespecial #76                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
     100: putfield      #79                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
     103: aload_0
     104: new           #83                 // class io/micrometer/core/instrument/distribution/pause/NoPauseDetector
     107: dup
     108: invokespecial #85                 // Method io/micrometer/core/instrument/distribution/pause/NoPauseDetector."<init>":()V
     111: putfield      #11                 // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
     114: aload_0
     115: getstatic     #86                 // Field io/micrometer/core/instrument/config/NamingConvention.snakeCase:Lio/micrometer/core/instrument/config/NamingConvention;
     118: putfield      #15                 // Field namingConvention:Lio/micrometer/core/instrument/config/NamingConvention;
     121: aload_1
     122: invokestatic  #91                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
     125: pop
     126: aload_0
     127: aload_1
     128: putfield      #97                 // Field clock:Lio/micrometer/core/instrument/Clock;
     131: return

  protected abstract <T> io.micrometer.core.instrument.Gauge newGauge(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);

  protected abstract io.micrometer.core.instrument.Counter newCounter(io.micrometer.core.instrument.Meter$Id);

  protected abstract io.micrometer.core.instrument.LongTaskTimer newLongTaskTimer(io.micrometer.core.instrument.Meter$Id);

  protected abstract io.micrometer.core.instrument.Timer newTimer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector);

  protected abstract io.micrometer.core.instrument.DistributionSummary newDistributionSummary(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, double);

  protected abstract io.micrometer.core.instrument.Meter newMeter(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Meter$Type, java.lang.Iterable<io.micrometer.core.instrument.Measurement>);

  protected <T> io.micrometer.core.instrument.TimeGauge newTimeGauge(io.micrometer.core.instrument.Meter$Id, T, java.util.concurrent.TimeUnit, java.util.function.ToDoubleFunction<T>);
    Code:
       0: aload_1
       1: aload_0
       2: invokespecial #1                  // Method getBaseTimeUnitStr:()Ljava/lang/String;
       5: invokevirtual #101                // Method io/micrometer/core/instrument/Meter$Id.withBaseUnit:(Ljava/lang/String;)Lio/micrometer/core/instrument/Meter$Id;
       8: astore        5
      10: aload_0
      11: aload         5
      13: aload_2
      14: aload_0
      15: aload         4
      17: aload_3
      18: invokedynamic #107,  0            // InvokeDynamic #0:applyAsDouble:(Lio/micrometer/core/instrument/MeterRegistry;Ljava/util/function/ToDoubleFunction;Ljava/util/concurrent/TimeUnit;)Ljava/util/function/ToDoubleFunction;
      23: invokevirtual #111                // Method newGauge:(Lio/micrometer/core/instrument/Meter$Id;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge;
      26: astore        6
      28: new           #115                // class io/micrometer/core/instrument/MeterRegistry$1
      31: dup
      32: aload_0
      33: aload         5
      35: aload         6
      37: invokespecial #117                // Method io/micrometer/core/instrument/MeterRegistry$1."<init>":(Lio/micrometer/core/instrument/MeterRegistry;Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Gauge;)V
      40: areturn

  protected abstract <T> io.micrometer.core.instrument.FunctionTimer newFunctionTimer(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToLongFunction<T>, java.util.function.ToDoubleFunction<T>, java.util.concurrent.TimeUnit);

  protected abstract <T> io.micrometer.core.instrument.FunctionCounter newFunctionCounter(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);

  protected java.util.List<io.micrometer.core.instrument.Tag> getConventionTags(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #120                // Method config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
       5: invokevirtual #123                // Method io/micrometer/core/instrument/MeterRegistry$Config.namingConvention:()Lio/micrometer/core/instrument/config/NamingConvention;
       8: invokevirtual #126                // Method io/micrometer/core/instrument/Meter$Id.getConventionTags:(Lio/micrometer/core/instrument/config/NamingConvention;)Ljava/util/List;
      11: areturn

  protected java.lang.String getConventionName(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #120                // Method config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
       5: invokevirtual #123                // Method io/micrometer/core/instrument/MeterRegistry$Config.namingConvention:()Lio/micrometer/core/instrument/config/NamingConvention;
       8: invokevirtual #130                // Method io/micrometer/core/instrument/Meter$Id.getConventionName:(Lio/micrometer/core/instrument/config/NamingConvention;)Ljava/lang/String;
      11: areturn

  protected abstract java.util.concurrent.TimeUnit getBaseTimeUnit();

  protected abstract io.micrometer.core.instrument.distribution.DistributionStatisticConfig defaultHistogramConfig();

  private java.lang.String getBaseTimeUnitStr();
    Code:
       0: aload_0
       1: invokevirtual #134                // Method getBaseTimeUnit:()Ljava/util/concurrent/TimeUnit;
       4: invokevirtual #138                // Method java/util/concurrent/TimeUnit.toString:()Ljava/lang/String;
       7: invokevirtual #143                // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      10: areturn

  io.micrometer.core.instrument.Counter counter(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_0
       1: ldc           #148                // class io/micrometer/core/instrument/Counter
       3: aload_1
       4: aload_0
       5: invokedynamic #150,  0            // InvokeDynamic #1:apply:(Lio/micrometer/core/instrument/MeterRegistry;)Ljava/util/function/Function;
      10: invokedynamic #154,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      15: invokespecial #7                  // Method registerMeterIfNecessary:(Ljava/lang/Class;Lio/micrometer/core/instrument/Meter$Id;Ljava/util/function/Function;Ljava/util/function/Function;)Lio/micrometer/core/instrument/Meter;
      18: checkcast     #148                // class io/micrometer/core/instrument/Counter
      21: areturn

  <T> io.micrometer.core.instrument.Gauge gauge(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: aload_0
       1: ldc           #157                // class io/micrometer/core/instrument/Gauge
       3: aload_1
       4: aload_0
       5: aload_2
       6: aload_3
       7: invokedynamic #159,  0            // InvokeDynamic #3:apply:(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Ljava/util/function/Function;
      12: invokedynamic #162,  0            // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      17: invokespecial #7                  // Method registerMeterIfNecessary:(Ljava/lang/Class;Lio/micrometer/core/instrument/Meter$Id;Ljava/util/function/Function;Ljava/util/function/Function;)Lio/micrometer/core/instrument/Meter;
      20: checkcast     #157                // class io/micrometer/core/instrument/Gauge
      23: areturn

  io.micrometer.core.instrument.Timer timer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: aload_0
       1: ldc           #163                // class io/micrometer/core/instrument/Timer
       3: aload_1
       4: aload_2
       5: aload_0
       6: aload_3
       7: invokedynamic #165,  0            // InvokeDynamic #5:apply:(Lio/micrometer/core/instrument/MeterRegistry;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;)Ljava/util/function/BiFunction;
      12: invokedynamic #168,  0            // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      17: invokespecial #169                // Method registerMeterIfNecessary:(Ljava/lang/Class;Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/util/function/BiFunction;Ljava/util/function/Function;)Lio/micrometer/core/instrument/Meter;
      20: checkcast     #163                // class io/micrometer/core/instrument/Timer
      23: areturn

  io.micrometer.core.instrument.DistributionSummary summary(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, double);
    Code:
       0: aload_0
       1: ldc           #172                // class io/micrometer/core/instrument/DistributionSummary
       3: aload_1
       4: aload_2
       5: aload_0
       6: dload_3
       7: invokedynamic #174,  0            // InvokeDynamic #7:apply:(Lio/micrometer/core/instrument/MeterRegistry;D)Ljava/util/function/BiFunction;
      12: invokedynamic #177,  0            // InvokeDynamic #8:apply:()Ljava/util/function/Function;
      17: invokespecial #169                // Method registerMeterIfNecessary:(Ljava/lang/Class;Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/util/function/BiFunction;Ljava/util/function/Function;)Lio/micrometer/core/instrument/Meter;
      20: checkcast     #172                // class io/micrometer/core/instrument/DistributionSummary
      23: areturn

  io.micrometer.core.instrument.Meter register(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Meter$Type, java.lang.Iterable<io.micrometer.core.instrument.Measurement>);
    Code:
       0: aload_0
       1: ldc           #178                // class io/micrometer/core/instrument/Meter
       3: aload_1
       4: aload_0
       5: aload_2
       6: aload_3
       7: invokedynamic #180,  0            // InvokeDynamic #9:apply:(Lio/micrometer/core/instrument/MeterRegistry;Lio/micrometer/core/instrument/Meter$Type;Ljava/lang/Iterable;)Ljava/util/function/Function;
      12: invokedynamic #183,  0            // InvokeDynamic #10:apply:()Ljava/util/function/Function;
      17: invokespecial #7                  // Method registerMeterIfNecessary:(Ljava/lang/Class;Lio/micrometer/core/instrument/Meter$Id;Ljava/util/function/Function;Ljava/util/function/Function;)Lio/micrometer/core/instrument/Meter;
      20: areturn

  public java.util.List<io.micrometer.core.instrument.Meter> getMeters();
    Code:
       0: new           #184                // class java/util/ArrayList
       3: dup
       4: aload_0
       5: getfield      #64                 // Field meterMap:Ljava/util/Map;
       8: invokeinterface #186,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      13: invokespecial #192                // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      16: invokestatic  #195                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      19: areturn

  public void forEachMeter(java.util.function.Consumer<? super io.micrometer.core.instrument.Meter>);
    Code:
       0: aload_0
       1: getfield      #64                 // Field meterMap:Ljava/util/Map;
       4: invokeinterface #186,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: aload_1
      10: invokeinterface #201,  2          // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      15: return

  public io.micrometer.core.instrument.MeterRegistry$Config config();
    Code:
       0: aload_0
       1: getfield      #50                 // Field config:Lio/micrometer/core/instrument/MeterRegistry$Config;
       4: areturn

  public io.micrometer.core.instrument.search.Search find(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #207                // Method io/micrometer/core/instrument/search/Search.in:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/search/Search;
       4: aload_1
       5: invokevirtual #213                // Method io/micrometer/core/instrument/search/Search.name:(Ljava/lang/String;)Lio/micrometer/core/instrument/search/Search;
       8: areturn

  public io.micrometer.core.instrument.search.RequiredSearch get(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #217                // Method io/micrometer/core/instrument/search/RequiredSearch.in:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/search/RequiredSearch;
       4: aload_1
       5: invokevirtual #222                // Method io/micrometer/core/instrument/search/RequiredSearch.name:(Ljava/lang/String;)Lio/micrometer/core/instrument/search/RequiredSearch;
       8: areturn

  public io.micrometer.core.instrument.Counter counter(java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_1
       1: invokestatic  #225                // InterfaceMethod io/micrometer/core/instrument/Counter.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
       4: aload_2
       5: invokevirtual #229                // Method io/micrometer/core/instrument/Counter$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Counter$Builder;
       8: aload_0
       9: invokevirtual #235                // Method io/micrometer/core/instrument/Counter$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Counter;
      12: areturn

  public io.micrometer.core.instrument.Counter counter(java.lang.String, java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #239                // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       6: invokevirtual #245                // Method counter:(Ljava/lang/String;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Counter;
       9: areturn

  public io.micrometer.core.instrument.DistributionSummary summary(java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_1
       1: invokestatic  #249                // InterfaceMethod io/micrometer/core/instrument/DistributionSummary.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/DistributionSummary$Builder;
       4: aload_2
       5: invokevirtual #252                // Method io/micrometer/core/instrument/DistributionSummary$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/DistributionSummary$Builder;
       8: aload_0
       9: invokevirtual #257                // Method io/micrometer/core/instrument/DistributionSummary$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/DistributionSummary;
      12: areturn

  public io.micrometer.core.instrument.DistributionSummary summary(java.lang.String, java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #239                // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       6: invokevirtual #260                // Method summary:(Ljava/lang/String;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/DistributionSummary;
       9: areturn

  public io.micrometer.core.instrument.Timer timer(java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_1
       1: invokestatic  #264                // InterfaceMethod io/micrometer/core/instrument/Timer.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
       4: aload_2
       5: invokevirtual #267                // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
       8: aload_0
       9: invokevirtual #272                // Method io/micrometer/core/instrument/Timer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
      12: areturn

  public io.micrometer.core.instrument.Timer timer(java.lang.String, java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #239                // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       6: invokevirtual #275                // Method timer:(Ljava/lang/String;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer;
       9: areturn

  public io.micrometer.core.instrument.MeterRegistry$More more();
    Code:
       0: aload_0
       1: getfield      #57                 // Field more:Lio/micrometer/core/instrument/MeterRegistry$More;
       4: areturn

  public <T> T gauge(java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: aload_1
       1: aload_3
       2: aload         4
       4: invokestatic  #279                // InterfaceMethod io/micrometer/core/instrument/Gauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge$Builder;
       7: aload_2
       8: invokevirtual #282                // Method io/micrometer/core/instrument/Gauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Gauge$Builder;
      11: aload_0
      12: invokevirtual #287                // Method io/micrometer/core/instrument/Gauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Gauge;
      15: pop
      16: aload_3
      17: areturn

  public <T extends java.lang.Number> T gauge(java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokedynamic #290,  0            // InvokeDynamic #11:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
       9: invokevirtual #293                // Method gauge:(Ljava/lang/String;Ljava/lang/Iterable;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Ljava/lang/Object;
      12: checkcast     #297                // class java/lang/Number
      15: areturn

  public <T extends java.lang.Number> T gauge(java.lang.String, T);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #299                // Method java/util/Collections.emptyList:()Ljava/util/List;
       5: aload_2
       6: invokevirtual #303                // Method gauge:(Ljava/lang/String;Ljava/lang/Iterable;Ljava/lang/Number;)Ljava/lang/Number;
       9: areturn

  public <T> T gauge(java.lang.String, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #299                // Method java/util/Collections.emptyList:()Ljava/util/List;
       5: aload_2
       6: aload_3
       7: invokevirtual #293                // Method gauge:(Ljava/lang/String;Ljava/lang/Iterable;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Ljava/lang/Object;
      10: areturn

  public <T extends java.util.Collection<?>> T gaugeCollectionSize(java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokedynamic #306,  0            // InvokeDynamic #12:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
       9: invokevirtual #293                // Method gauge:(Ljava/lang/String;Ljava/lang/Iterable;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Ljava/lang/Object;
      12: checkcast     #202                // class java/util/Collection
      15: areturn

  public <T extends java.util.Map<?, ?>> T gaugeMapSize(java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokedynamic #307,  0            // InvokeDynamic #13:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
       9: invokevirtual #293                // Method gauge:(Ljava/lang/String;Ljava/lang/Iterable;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Ljava/lang/Object;
      12: checkcast     #187                // class java/util/Map
      15: areturn

  private <M extends io.micrometer.core.instrument.Meter> M registerMeterIfNecessary(java.lang.Class<M>, io.micrometer.core.instrument.Meter$Id, java.util.function.Function<io.micrometer.core.instrument.Meter$Id, M>, java.util.function.Function<io.micrometer.core.instrument.Meter$Id, M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: aload_3
       5: invokedynamic #308,  0            // InvokeDynamic #14:apply:(Ljava/util/function/Function;)Ljava/util/function/BiFunction;
      10: aload         4
      12: invokespecial #169                // Method registerMeterIfNecessary:(Ljava/lang/Class;Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/util/function/BiFunction;Ljava/util/function/Function;)Lio/micrometer/core/instrument/Meter;
      15: areturn

  private <M extends io.micrometer.core.instrument.Meter> M registerMeterIfNecessary(java.lang.Class<M>, io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, java.util.function.BiFunction<io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, M>, java.util.function.Function<io.micrometer.core.instrument.Meter$Id, M>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #311                // Method getMappedId:(Lio/micrometer/core/instrument/Meter$Id;)Lio/micrometer/core/instrument/Meter$Id;
       5: astore        6
       7: aload_0
       8: aload_3
       9: aload         4
      11: aload_2
      12: aload         6
      14: aload         5
      16: invokespecial #315                // Method getOrCreateMeter:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/util/function/BiFunction;Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Meter$Id;Ljava/util/function/Function;)Lio/micrometer/core/instrument/Meter;
      19: astore        7
      21: aload_1
      22: aload         7
      24: invokevirtual #319                // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      27: ifne          41
      30: new           #325                // class java/lang/IllegalArgumentException
      33: dup
      34: ldc_w         #327                // String There is already a registered meter of a different type with the same name
      37: invokespecial #329                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_1
      42: aload         7
      44: invokevirtual #332                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      47: checkcast     #178                // class io/micrometer/core/instrument/Meter
      50: areturn

  private io.micrometer.core.instrument.Meter$Id getMappedId(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_1
       1: invokevirtual #335                // Method io/micrometer/core/instrument/Meter$Id.syntheticAssociation:()Lio/micrometer/core/instrument/Meter$Id;
       4: ifnull        9
       7: aload_1
       8: areturn
       9: aload_1
      10: astore_2
      11: aload_0
      12: getfield      #26                 // Field filters:[Lio/micrometer/core/instrument/config/MeterFilter;
      15: astore_3
      16: aload_3
      17: arraylength
      18: istore        4
      20: iconst_0
      21: istore        5
      23: iload         5
      25: iload         4
      27: if_icmpge     51
      30: aload_3
      31: iload         5
      33: aaload
      34: astore        6
      36: aload         6
      38: aload_2
      39: invokeinterface #339,  2          // InterfaceMethod io/micrometer/core/instrument/config/MeterFilter.map:(Lio/micrometer/core/instrument/Meter$Id;)Lio/micrometer/core/instrument/Meter$Id;
      44: astore_2
      45: iinc          5, 1
      48: goto          23
      51: aload_2
      52: areturn

  private io.micrometer.core.instrument.Meter getOrCreateMeter(io.micrometer.core.instrument.distribution.DistributionStatisticConfig, java.util.function.BiFunction<io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, ? extends io.micrometer.core.instrument.Meter>, io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Meter$Id, java.util.function.Function<io.micrometer.core.instrument.Meter$Id, ? extends io.micrometer.core.instrument.Meter>);
    Code:
       0: aload_0
       1: getfield      #64                 // Field meterMap:Ljava/util/Map;
       4: aload         4
       6: invokeinterface #342,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #178                // class io/micrometer/core/instrument/Meter
      14: astore        6
      16: aload         6
      18: ifnonnull     283
      21: aload_0
      22: invokevirtual #345                // Method isClosed:()Z
      25: ifeq          41
      28: aload         5
      30: aload         4
      32: invokeinterface #349,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #178                // class io/micrometer/core/instrument/Meter
      40: areturn
      41: aload_0
      42: getfield      #36                 // Field meterMapLock:Ljava/lang/Object;
      45: dup
      46: astore        7
      48: monitorenter
      49: aload_0
      50: getfield      #64                 // Field meterMap:Ljava/util/Map;
      53: aload         4
      55: invokeinterface #342,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      60: checkcast     #178                // class io/micrometer/core/instrument/Meter
      63: astore        6
      65: aload         6
      67: ifnonnull     269
      70: aload_0
      71: aload         4
      73: invokespecial #353                // Method accept:(Lio/micrometer/core/instrument/Meter$Id;)Z
      76: ifne          95
      79: aload         5
      81: aload         4
      83: invokeinterface #349,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      88: checkcast     #178                // class io/micrometer/core/instrument/Meter
      91: aload         7
      93: monitorexit
      94: areturn
      95: aload_1
      96: ifnull        153
      99: aload_0
     100: getfield      #26                 // Field filters:[Lio/micrometer/core/instrument/config/MeterFilter;
     103: astore        8
     105: aload         8
     107: arraylength
     108: istore        9
     110: iconst_0
     111: istore        10
     113: iload         10
     115: iload         9
     117: if_icmpge     153
     120: aload         8
     122: iload         10
     124: aaload
     125: astore        11
     127: aload         11
     129: aload         4
     131: aload_1
     132: invokeinterface #357,  3          // InterfaceMethod io/micrometer/core/instrument/config/MeterFilter.configure:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
     137: astore        12
     139: aload         12
     141: ifnull        147
     144: aload         12
     146: astore_1
     147: iinc          10, 1
     150: goto          113
     153: aload_2
     154: aload         4
     156: aload_1
     157: invokeinterface #361,  3          // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     162: checkcast     #178                // class io/micrometer/core/instrument/Meter
     165: astore        6
     167: aload         4
     169: invokevirtual #335                // Method io/micrometer/core/instrument/Meter$Id.syntheticAssociation:()Lio/micrometer/core/instrument/Meter$Id;
     172: astore        8
     174: aload         8
     176: ifnull        210
     179: aload_0
     180: getfield      #71                 // Field syntheticAssociations:Ljava/util/Map;
     183: aload         8
     185: invokedynamic #366,  0            // InvokeDynamic #15:apply:()Ljava/util/function/Function;
     190: invokeinterface #367,  3          // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
     195: checkcast     #371                // class java/util/Set
     198: astore        9
     200: aload         9
     202: aload         4
     204: invokeinterface #373,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     209: pop
     210: aload_0
     211: getfield      #23                 // Field meterAddedListeners:Ljava/util/List;
     214: invokeinterface #376,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     219: astore        9
     221: aload         9
     223: invokeinterface #382,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     228: ifeq          255
     231: aload         9
     233: invokeinterface #387,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     238: checkcast     #391                // class java/util/function/Consumer
     241: astore        10
     243: aload         10
     245: aload         6
     247: invokeinterface #393,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
     252: goto          221
     255: aload_0
     256: getfield      #64                 // Field meterMap:Ljava/util/Map;
     259: aload         4
     261: aload         6
     263: invokeinterface #396,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     268: pop
     269: aload         7
     271: monitorexit
     272: goto          283
     275: astore        13
     277: aload         7
     279: monitorexit
     280: aload         13
     282: athrow
     283: aload         6
     285: areturn
    Exception table:
       from    to  target type
          49    94   275   any
          95   272   275   any
         275   280   275   any

  private boolean accept(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_0
       1: getfield      #26                 // Field filters:[Lio/micrometer/core/instrument/config/MeterFilter;
       4: astore_2
       5: aload_2
       6: arraylength
       7: istore_3
       8: iconst_0
       9: istore        4
      11: iload         4
      13: iload_3
      14: if_icmpge     59
      17: aload_2
      18: iload         4
      20: aaload
      21: astore        5
      23: aload         5
      25: aload_1
      26: invokeinterface #399,  2          // InterfaceMethod io/micrometer/core/instrument/config/MeterFilter.accept:(Lio/micrometer/core/instrument/Meter$Id;)Lio/micrometer/core/instrument/config/MeterFilterReply;
      31: astore        6
      33: aload         6
      35: getstatic     #402                // Field io/micrometer/core/instrument/config/MeterFilterReply.DENY:Lio/micrometer/core/instrument/config/MeterFilterReply;
      38: if_acmpne     43
      41: iconst_0
      42: ireturn
      43: aload         6
      45: getstatic     #408                // Field io/micrometer/core/instrument/config/MeterFilterReply.ACCEPT:Lio/micrometer/core/instrument/config/MeterFilterReply;
      48: if_acmpne     53
      51: iconst_1
      52: ireturn
      53: iinc          4, 1
      56: goto          11
      59: iconst_1
      60: ireturn

  public io.micrometer.core.instrument.Meter remove(io.micrometer.core.instrument.Meter);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #411,  1          // InterfaceMethod io/micrometer/core/instrument/Meter.getId:()Lio/micrometer/core/instrument/Meter$Id;
       7: invokevirtual #414                // Method remove:(Lio/micrometer/core/instrument/Meter$Id;)Lio/micrometer/core/instrument/Meter;
      10: areturn

  public io.micrometer.core.instrument.Meter remove(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_0
       1: getfield      #64                 // Field meterMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #342,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #178                // class io/micrometer/core/instrument/Meter
      13: astore_2
      14: aload_2
      15: ifnull        164
      18: aload_0
      19: getfield      #36                 // Field meterMapLock:Ljava/lang/Object;
      22: dup
      23: astore_3
      24: monitorenter
      25: aload_0
      26: getfield      #64                 // Field meterMap:Ljava/util/Map;
      29: aload_1
      30: invokeinterface #418,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      35: checkcast     #178                // class io/micrometer/core/instrument/Meter
      38: astore_2
      39: aload_2
      40: ifnull        152
      43: aload_0
      44: getfield      #71                 // Field syntheticAssociations:Ljava/util/Map;
      47: aload_1
      48: invokeinterface #418,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      53: checkcast     #371                // class java/util/Set
      56: astore        4
      58: aload         4
      60: ifnull        104
      63: aload         4
      65: invokeinterface #420,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      70: astore        5
      72: aload         5
      74: invokeinterface #382,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      79: ifeq          104
      82: aload         5
      84: invokeinterface #387,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      89: checkcast     #102                // class io/micrometer/core/instrument/Meter$Id
      92: astore        6
      94: aload_0
      95: aload         6
      97: invokevirtual #414                // Method remove:(Lio/micrometer/core/instrument/Meter$Id;)Lio/micrometer/core/instrument/Meter;
     100: pop
     101: goto          72
     104: aload_0
     105: getfield      #19                 // Field meterRemovedListeners:Ljava/util/List;
     108: invokeinterface #376,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     113: astore        5
     115: aload         5
     117: invokeinterface #382,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     122: ifeq          148
     125: aload         5
     127: invokeinterface #387,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     132: checkcast     #391                // class java/util/function/Consumer
     135: astore        6
     137: aload         6
     139: aload_2
     140: invokeinterface #393,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
     145: goto          115
     148: aload_2
     149: aload_3
     150: monitorexit
     151: areturn
     152: aload_3
     153: monitorexit
     154: goto          164
     157: astore        7
     159: aload_3
     160: monitorexit
     161: aload         7
     163: athrow
     164: aconst_null
     165: areturn
    Exception table:
       from    to  target type
          25   151   157   any
         152   154   157   any
         157   161   157   any

  public void clear();
    Code:
       0: aload_0
       1: getfield      #64                 // Field meterMap:Ljava/util/Map;
       4: invokeinterface #421,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
       9: aload_0
      10: invokedynamic #425,  0            // InvokeDynamic #16:accept:(Lio/micrometer/core/instrument/MeterRegistry;)Ljava/util/function/Consumer;
      15: invokeinterface #428,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      20: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #79                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #429                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          74
      12: aload_0
      13: getfield      #36                 // Field meterMapLock:Ljava/lang/Object;
      16: dup
      17: astore_1
      18: monitorenter
      19: aload_0
      20: getfield      #64                 // Field meterMap:Ljava/util/Map;
      23: invokeinterface #186,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      28: invokeinterface #433,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      33: astore_2
      34: aload_2
      35: invokeinterface #382,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          62
      43: aload_2
      44: invokeinterface #387,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #178                // class io/micrometer/core/instrument/Meter
      52: astore_3
      53: aload_3
      54: invokeinterface #434,  1          // InterfaceMethod io/micrometer/core/instrument/Meter.close:()V
      59: goto          34
      62: aload_1
      63: monitorexit
      64: goto          74
      67: astore        4
      69: aload_1
      70: monitorexit
      71: aload         4
      73: athrow
      74: return
    Exception table:
       from    to  target type
          19    64    67   any
          67    71    67   any

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #79                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #437                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  private static java.util.Set lambda$getOrCreateMeter$6(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: new           #439                // class java/util/HashSet
       3: dup
       4: invokespecial #441                // Method java/util/HashSet."<init>":()V
       7: areturn

  private static io.micrometer.core.instrument.Meter lambda$registerMeterIfNecessary$5(java.util.function.Function, io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #349,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #178                // class io/micrometer/core/instrument/Meter
      10: areturn

  private io.micrometer.core.instrument.Meter lambda$register$4(io.micrometer.core.instrument.Meter$Type, java.lang.Iterable, io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_0
       1: aload_3
       2: aload_1
       3: aload_2
       4: invokevirtual #442                // Method newMeter:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Meter$Type;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Meter;
       7: areturn

  private io.micrometer.core.instrument.DistributionSummary lambda$summary$3(double, io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig);
    Code:
       0: aload_0
       1: aload_3
       2: aload         4
       4: aload_0
       5: invokevirtual #446                // Method defaultHistogramConfig:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       8: invokevirtual #450                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.merge:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      11: dload_1
      12: invokevirtual #456                // Method newDistributionSummary:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;D)Lio/micrometer/core/instrument/DistributionSummary;
      15: areturn

  private io.micrometer.core.instrument.Timer lambda$timer$2(io.micrometer.core.instrument.distribution.pause.PauseDetector, io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig);
    Code:
       0: aload_2
       1: aload_0
       2: invokespecial #1                  // Method getBaseTimeUnitStr:()Ljava/lang/String;
       5: invokevirtual #101                // Method io/micrometer/core/instrument/Meter$Id.withBaseUnit:(Ljava/lang/String;)Lio/micrometer/core/instrument/Meter$Id;
       8: astore        4
      10: aload_0
      11: aload         4
      13: aload_3
      14: aload_0
      15: invokevirtual #446                // Method defaultHistogramConfig:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      18: invokevirtual #450                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.merge:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      21: aload_1
      22: invokevirtual #460                // Method newTimer:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;)Lio/micrometer/core/instrument/Timer;
      25: areturn

  private io.micrometer.core.instrument.Gauge lambda$gauge$1(java.lang.Object, java.util.function.ToDoubleFunction, io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_0
       1: aload_3
       2: aload_1
       3: aload_2
       4: invokevirtual #111                // Method newGauge:(Lio/micrometer/core/instrument/Meter$Id;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge;
       7: areturn

  private double lambda$newTimeGauge$0(java.util.function.ToDoubleFunction, java.util.concurrent.TimeUnit, java.lang.Object);
    Code:
       0: aload_1
       1: aload_3
       2: invokeinterface #464,  2          // InterfaceMethod java/util/function/ToDoubleFunction.applyAsDouble:(Ljava/lang/Object;)D
       7: aload_2
       8: aload_0
       9: invokevirtual #134                // Method getBaseTimeUnit:()Ljava/util/concurrent/TimeUnit;
      12: invokestatic  #469                // Method io/micrometer/core/instrument/util/TimeUtils.convert:(DLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/TimeUnit;)D
      15: dreturn

  static io.micrometer.core.instrument.config.MeterFilter[] access$000(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #26                 // Field filters:[Lio/micrometer/core/instrument/config/MeterFilter;
       4: areturn

  static io.micrometer.core.instrument.config.MeterFilter[] access$002(io.micrometer.core.instrument.MeterRegistry, io.micrometer.core.instrument.config.MeterFilter[]);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #26                 // Field filters:[Lio/micrometer/core/instrument/config/MeterFilter;
       6: areturn

  static java.util.List access$100(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #23                 // Field meterAddedListeners:Ljava/util/List;
       4: areturn

  static java.util.List access$200(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #19                 // Field meterRemovedListeners:Ljava/util/List;
       4: areturn

  static io.micrometer.core.instrument.config.NamingConvention access$302(io.micrometer.core.instrument.MeterRegistry, io.micrometer.core.instrument.config.NamingConvention);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #15                 // Field namingConvention:Lio/micrometer/core/instrument/config/NamingConvention;
       6: areturn

  static io.micrometer.core.instrument.config.NamingConvention access$300(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #15                 // Field namingConvention:Lio/micrometer/core/instrument/config/NamingConvention;
       4: areturn

  static io.micrometer.core.instrument.distribution.pause.PauseDetector access$402(io.micrometer.core.instrument.MeterRegistry, io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #11                 // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
       6: areturn

  static io.micrometer.core.instrument.distribution.pause.PauseDetector access$400(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #11                 // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
       4: areturn

  static io.micrometer.core.instrument.Meter access$500(io.micrometer.core.instrument.MeterRegistry, java.lang.Class, io.micrometer.core.instrument.Meter$Id, java.util.function.Function, java.util.function.Function);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokespecial #7                  // Method registerMeterIfNecessary:(Ljava/lang/Class;Lio/micrometer/core/instrument/Meter$Id;Ljava/util/function/Function;Ljava/util/function/Function;)Lio/micrometer/core/instrument/Meter;
       9: areturn

  static java.lang.String access$600(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method getBaseTimeUnitStr:()Ljava/lang/String;
       4: areturn
}
