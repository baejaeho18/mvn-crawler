Compiled from "MicrometerHttpClientInterceptor.java"
public class io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpClientInterceptor {
  private static final java.lang.String METER_NAME;

  private final java.util.Map<org.apache.http.protocol.HttpContext, io.micrometer.core.instrument.Timer$Sample> timerByHttpContext;

  private final org.apache.http.HttpRequestInterceptor requestInterceptor;

  private final org.apache.http.HttpResponseInterceptor responseInterceptor;

  public io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpClientInterceptor(io.micrometer.core.instrument.MeterRegistry, java.util.function.Function<org.apache.http.HttpRequest, java.lang.String>, java.lang.Iterable<io.micrometer.core.instrument.Tag>, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #10                 // Field timerByHttpContext:Ljava/util/Map;
      15: aload_0
      16: aload_0
      17: aload_1
      18: aload_2
      19: invokedynamic #16,  0             // InvokeDynamic #0:process:(Lio/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpClientInterceptor;Lio/micrometer/core/instrument/MeterRegistry;Ljava/util/function/Function;)Lorg/apache/http/HttpRequestInterceptor;
      24: putfield      #20                 // Field requestInterceptor:Lorg/apache/http/HttpRequestInterceptor;
      27: aload_0
      28: aload_0
      29: aload_1
      30: iload         4
      32: aload_3
      33: invokedynamic #24,  0             // InvokeDynamic #1:process:(Lio/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpClientInterceptor;Lio/micrometer/core/instrument/MeterRegistry;ZLjava/lang/Iterable;)Lorg/apache/http/HttpResponseInterceptor;
      38: putfield      #27                 // Field responseInterceptor:Lorg/apache/http/HttpResponseInterceptor;
      41: return

  public io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpClientInterceptor(io.micrometer.core.instrument.MeterRegistry, java.lang.Iterable<io.micrometer.core.instrument.Tag>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: new           #31                 // class io/micrometer/core/instrument/binder/httpcomponents/DefaultUriMapper
       5: dup
       6: invokespecial #33                 // Method io/micrometer/core/instrument/binder/httpcomponents/DefaultUriMapper."<init>":()V
       9: aload_2
      10: iload_3
      11: invokespecial #34                 // Method "<init>":(Lio/micrometer/core/instrument/MeterRegistry;Ljava/util/function/Function;Ljava/lang/Iterable;Z)V
      14: return

  public org.apache.http.HttpRequestInterceptor getRequestInterceptor();
    Code:
       0: aload_0
       1: getfield      #20                 // Field requestInterceptor:Lorg/apache/http/HttpRequestInterceptor;
       4: areturn

  public org.apache.http.HttpResponseInterceptor getResponseInterceptor();
    Code:
       0: aload_0
       1: getfield      #27                 // Field responseInterceptor:Lorg/apache/http/HttpResponseInterceptor;
       4: areturn

  private void lambda$new$1(io.micrometer.core.instrument.MeterRegistry, boolean, java.lang.Iterable, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field timerByHttpContext:Ljava/util/Map;
       4: aload         5
       6: invokeinterface #37,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #43                 // class io/micrometer/core/instrument/Timer$Sample
      14: astore        6
      16: aload         6
      18: aload_1
      19: ldc           #45                 // String httpcomponents.httpclient.request
      21: invokestatic  #47                 // InterfaceMethod io/micrometer/core/instrument/Timer.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
      24: ldc           #53                 // String status
      26: aload         4
      28: invokeinterface #55,  1           // InterfaceMethod org/apache/http/HttpResponse.getStatusLine:()Lorg/apache/http/StatusLine;
      33: invokeinterface #61,  1           // InterfaceMethod org/apache/http/StatusLine.getStatusCode:()I
      38: invokestatic  #67                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      41: invokevirtual #73                 // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
      44: iload_2
      45: ifeq          56
      48: aload         5
      50: invokestatic  #79                 // Method io/micrometer/core/instrument/binder/httpcomponents/HttpContextUtils.generateTagsForRoute:(Lorg/apache/http/protocol/HttpContext;)Lio/micrometer/core/instrument/Tags;
      53: goto          59
      56: invokestatic  #85                 // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
      59: invokevirtual #91                 // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
      62: aload_3
      63: invokevirtual #91                 // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
      66: invokevirtual #95                 // Method io/micrometer/core/instrument/Timer$Sample.stop:(Lio/micrometer/core/instrument/MeterRegistry;Lio/micrometer/core/instrument/Timer$Builder;)J
      69: pop2
      70: return

  private void lambda$new$0(io.micrometer.core.instrument.MeterRegistry, java.util.function.Function, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field timerByHttpContext:Ljava/util/Map;
       4: aload         4
       6: aload_1
       7: invokestatic  #99                 // InterfaceMethod io/micrometer/core/instrument/Timer.start:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer$Sample;
      10: iconst_4
      11: anewarray     #103                // class java/lang/String
      14: dup
      15: iconst_0
      16: ldc           #105                // String method
      18: aastore
      19: dup
      20: iconst_1
      21: aload_3
      22: invokeinterface #107,  1          // InterfaceMethod org/apache/http/HttpRequest.getRequestLine:()Lorg/apache/http/RequestLine;
      27: invokeinterface #113,  1          // InterfaceMethod org/apache/http/RequestLine.getMethod:()Ljava/lang/String;
      32: aastore
      33: dup
      34: iconst_2
      35: ldc           #119                // String uri
      37: aastore
      38: dup
      39: iconst_3
      40: aload_2
      41: aload_3
      42: invokeinterface #121,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      47: checkcast     #103                // class java/lang/String
      50: aastore
      51: invokevirtual #126                // Method io/micrometer/core/instrument/Timer$Sample.tags:([Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Sample;
      54: invokeinterface #129,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      59: pop
      60: return
}
