Compiled from "DistributionSummary.java"
public class io.micrometer.core.instrument.DistributionSummary$Builder {
  private final java.lang.String name;

  private io.micrometer.core.instrument.Tags tags;

  private io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder distributionConfigBuilder;

  private java.lang.String description;

  private java.lang.String baseUnit;

  private double scale;

  private io.micrometer.core.instrument.DistributionSummary$Builder(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #12                 // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
       8: putfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      11: aload_0
      12: invokestatic  #22                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.builder:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      15: putfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      18: aload_0
      19: dconst_1
      20: putfield      #32                 // Field scale:D
      23: aload_0
      24: aload_1
      25: putfield      #36                 // Field name:Ljava/lang/String;
      28: return

  public io.micrometer.core.instrument.DistributionSummary$Builder tags(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #40                 // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       5: invokevirtual #44                 // Method tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/DistributionSummary$Builder;
       8: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder tags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: invokevirtual #47                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
       9: putfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      12: aload_0
      13: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder tag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: aload_2
       7: invokevirtual #51                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      10: putfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aload_0
      14: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder description(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #54                 // Field description:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder baseUnit(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #57                 // Field baseUnit:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder publishPercentiles(double...);
    Code:
       0: aload_0
       1: getfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #60                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentiles:([D)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder percentilePrecision(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #66                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentilePrecision:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder publishPercentileHistogram();
    Code:
       0: aload_0
       1: iconst_1
       2: invokestatic  #70                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: invokevirtual #76                 // Method publishPercentileHistogram:(Ljava/lang/Boolean;)Lio/micrometer/core/instrument/DistributionSummary$Builder;
       8: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder publishPercentileHistogram(java.lang.Boolean);
    Code:
       0: aload_0
       1: getfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #80                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentilesHistogram:(Ljava/lang/Boolean;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder sla(long...);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: aload_0
       5: goto          26
       8: aload_0
       9: aload_1
      10: invokestatic  #84                 // Method java/util/Arrays.stream:([J)Ljava/util/stream/LongStream;
      13: invokeinterface #90,  1           // InterfaceMethod java/util/stream/LongStream.asDoubleStream:()Ljava/util/stream/DoubleStream;
      18: invokeinterface #96,  1           // InterfaceMethod java/util/stream/DoubleStream.toArray:()[D
      23: invokevirtual #102                // Method sla:([D)Lio/micrometer/core/instrument/DistributionSummary$Builder;
      26: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder sla(double...);
    Code:
       0: aload_0
       1: getfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #106                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.sla:([D)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder minimumExpectedValue(java.lang.Long);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: aload_0
       5: goto          20
       8: aload_0
       9: aload_1
      10: invokevirtual #108                // Method java/lang/Long.longValue:()J
      13: l2d
      14: invokestatic  #114                // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      17: invokevirtual #119                // Method minimumExpectedValue:(Ljava/lang/Double;)Lio/micrometer/core/instrument/DistributionSummary$Builder;
      20: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder minimumExpectedValue(java.lang.Double);
    Code:
       0: aload_0
       1: getfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #123                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.minimumExpectedValue:(Ljava/lang/Double;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder maximumExpectedValue(java.lang.Long);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: aload_0
       5: goto          20
       8: aload_0
       9: aload_1
      10: invokevirtual #108                // Method java/lang/Long.longValue:()J
      13: l2d
      14: invokestatic  #114                // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      17: invokevirtual #126                // Method maximumExpectedValue:(Ljava/lang/Double;)Lio/micrometer/core/instrument/DistributionSummary$Builder;
      20: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder maximumExpectedValue(java.lang.Double);
    Code:
       0: aload_0
       1: getfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #129                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.maximumExpectedValue:(Ljava/lang/Double;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder distributionStatisticExpiry(java.time.Duration);
    Code:
       0: aload_0
       1: getfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #131                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.expiry:(Ljava/time/Duration;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder distributionStatisticBufferLength(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #135                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.bufferLength:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder scale(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #32                 // Field scale:D
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.DistributionSummary register(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_1
       1: new           #138                // class io/micrometer/core/instrument/Meter$Id
       4: dup
       5: aload_0
       6: getfield      #36                 // Field name:Ljava/lang/String;
       9: aload_0
      10: getfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aload_0
      14: getfield      #57                 // Field baseUnit:Ljava/lang/String;
      17: aload_0
      18: getfield      #54                 // Field description:Ljava/lang/String;
      21: getstatic     #140                // Field io/micrometer/core/instrument/Meter$Type.DISTRIBUTION_SUMMARY:Lio/micrometer/core/instrument/Meter$Type;
      24: invokespecial #146                // Method io/micrometer/core/instrument/Meter$Id."<init>":(Ljava/lang/String;Lio/micrometer/core/instrument/Tags;Ljava/lang/String;Ljava/lang/String;Lio/micrometer/core/instrument/Meter$Type;)V
      27: aload_0
      28: getfield      #28                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      31: invokevirtual #149                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.build:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      34: aload_0
      35: getfield      #32                 // Field scale:D
      38: invokevirtual #153                // Method io/micrometer/core/instrument/MeterRegistry.summary:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;D)Lio/micrometer/core/instrument/DistributionSummary;
      41: areturn

  io.micrometer.core.instrument.DistributionSummary$Builder(java.lang.String, io.micrometer.core.instrument.DistributionSummary$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljava/lang/String;)V
       5: return
}
