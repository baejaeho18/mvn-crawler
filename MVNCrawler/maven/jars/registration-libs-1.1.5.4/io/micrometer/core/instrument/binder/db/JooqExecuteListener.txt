Compiled from "JooqExecuteListener.java"
class io.micrometer.core.instrument.binder.db.JooqExecuteListener extends org.jooq.impl.DefaultExecuteListener {
  private final io.micrometer.core.instrument.MeterRegistry registry;

  private final java.lang.Iterable<io.micrometer.core.instrument.Tag> tags;

  private final java.util.function.Supplier<java.lang.Iterable<io.micrometer.core.instrument.Tag>> queryTagsSupplier;

  private final java.lang.Object sampleLock;

  private final java.util.Map<org.jooq.ExecuteContext, io.micrometer.core.instrument.Timer$Sample> sampleByExecuteContext;

  public io.micrometer.core.instrument.binder.db.JooqExecuteListener(io.micrometer.core.instrument.MeterRegistry, java.lang.Iterable<io.micrometer.core.instrument.Tag>, java.util.function.Supplier<java.lang.Iterable<io.micrometer.core.instrument.Tag>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/jooq/impl/DefaultExecuteListener."<init>":()V
       4: aload_0
       5: new           #7                  // class java/lang/Object
       8: dup
       9: invokespecial #9                  // Method java/lang/Object."<init>":()V
      12: putfield      #10                 // Field sampleLock:Ljava/lang/Object;
      15: aload_0
      16: new           #16                 // class java/util/HashMap
      19: dup
      20: invokespecial #18                 // Method java/util/HashMap."<init>":()V
      23: putfield      #19                 // Field sampleByExecuteContext:Ljava/util/Map;
      26: aload_0
      27: aload_1
      28: putfield      #23                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      31: aload_0
      32: aload_2
      33: putfield      #27                 // Field tags:Ljava/lang/Iterable;
      36: aload_0
      37: aload_3
      38: putfield      #31                 // Field queryTagsSupplier:Ljava/util/function/Supplier;
      41: return

  public void start(org.jooq.ExecuteContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #35                 // Method startTimer:(Lorg/jooq/ExecuteContext;)V
       5: return

  public void executeStart(org.jooq.ExecuteContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #35                 // Method startTimer:(Lorg/jooq/ExecuteContext;)V
       5: return

  private void startTimer(org.jooq.ExecuteContext);
    Code:
       0: aload_0
       1: getfield      #23                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
       4: invokestatic  #39                 // InterfaceMethod io/micrometer/core/instrument/Timer.start:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer$Sample;
       7: astore_2
       8: aload_0
       9: getfield      #10                 // Field sampleLock:Ljava/lang/Object;
      12: dup
      13: astore_3
      14: monitorenter
      15: aload_0
      16: getfield      #19                 // Field sampleByExecuteContext:Ljava/util/Map;
      19: aload_1
      20: aload_2
      21: invokeinterface #45,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: pop
      27: aload_3
      28: monitorexit
      29: goto          39
      32: astore        4
      34: aload_3
      35: monitorexit
      36: aload         4
      38: athrow
      39: return
    Exception table:
       from    to  target type
          15    29    32   any
          32    36    32   any

  public void executeEnd(org.jooq.ExecuteContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #51                 // Method stopTimerIfStillRunning:(Lorg/jooq/ExecuteContext;)V
       5: return

  public void end(org.jooq.ExecuteContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #51                 // Method stopTimerIfStillRunning:(Lorg/jooq/ExecuteContext;)V
       5: return

  private void stopTimerIfStillRunning(org.jooq.ExecuteContext);
    Code:
       0: aload_0
       1: getfield      #31                 // Field queryTagsSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #54,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: checkcast     #60                 // class java/lang/Iterable
      12: astore_2
      13: aload_2
      14: ifnonnull     18
      17: return
      18: aload_0
      19: getfield      #10                 // Field sampleLock:Ljava/lang/Object;
      22: dup
      23: astore        4
      25: monitorenter
      26: aload_0
      27: getfield      #19                 // Field sampleByExecuteContext:Ljava/util/Map;
      30: aload_1
      31: invokeinterface #62,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #66                 // class io/micrometer/core/instrument/Timer$Sample
      39: astore_3
      40: aload         4
      42: monitorexit
      43: goto          54
      46: astore        5
      48: aload         4
      50: monitorexit
      51: aload         5
      53: athrow
      54: aload_3
      55: ifnonnull     59
      58: return
      59: ldc           #68                 // String none
      61: astore        4
      63: ldc           #68                 // String none
      65: astore        5
      67: aload_1
      68: invokeinterface #70,  1           // InterfaceMethod org/jooq/ExecuteContext.exception:()Ljava/lang/RuntimeException;
      73: astore        6
      75: aload         6
      77: ifnull        185
      80: aload         6
      82: instanceof    #76                 // class org/jooq/exception/DataAccessException
      85: ifeq          152
      88: aload         6
      90: checkcast     #76                 // class org/jooq/exception/DataAccessException
      93: astore        7
      95: aload         7
      97: invokevirtual #78                 // Method org/jooq/exception/DataAccessException.sqlStateClass:()Lorg/jooq/exception/SQLStateClass;
     100: invokevirtual #82                 // Method org/jooq/exception/SQLStateClass.name:()Ljava/lang/String;
     103: invokevirtual #88                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     106: bipush        95
     108: bipush        32
     110: invokevirtual #93                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
     113: astore        4
     115: aload         7
     117: invokevirtual #97                 // Method org/jooq/exception/DataAccessException.sqlStateSubclass:()Lorg/jooq/exception/SQLStateSubclass;
     120: invokevirtual #101                // Method org/jooq/exception/SQLStateSubclass.name:()Ljava/lang/String;
     123: invokevirtual #88                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     126: bipush        95
     128: bipush        32
     130: invokevirtual #93                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
     133: astore        5
     135: aload         5
     137: ldc           #104                // String no subclass
     139: invokevirtual #106                // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     142: ifeq          149
     145: ldc           #68                 // String none
     147: astore        5
     149: goto          185
     152: aload         6
     154: invokevirtual #110                // Method java/lang/Object.getClass:()Ljava/lang/Class;
     157: invokevirtual #114                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
     160: astore        7
     162: aload         7
     164: invokestatic  #119                // Method io/micrometer/core/instrument/util/StringUtils.isNotBlank:(Ljava/lang/String;)Z
     167: ifeq          175
     170: aload         7
     172: goto          183
     175: aload         6
     177: invokevirtual #110                // Method java/lang/Object.getClass:()Ljava/lang/Class;
     180: invokevirtual #125                // Method java/lang/Class.getName:()Ljava/lang/String;
     183: astore        4
     185: aload_3
     186: ldc           #128                // String jooq.query
     188: invokestatic  #130                // InterfaceMethod io/micrometer/core/instrument/Timer.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     191: ldc           #134                // String Execution time of a SQL query performed with JOOQ
     193: invokevirtual #136                // Method io/micrometer/core/instrument/Timer$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     196: aload_2
     197: invokevirtual #141                // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
     200: ldc           #144                // String type
     202: aload_1
     203: invokeinterface #146,  1          // InterfaceMethod org/jooq/ExecuteContext.type:()Lorg/jooq/ExecuteType;
     208: invokevirtual #149                // Method org/jooq/ExecuteType.name:()Ljava/lang/String;
     211: invokevirtual #88                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
     214: invokevirtual #152                // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     217: ldc           #156                // String exception
     219: aload         4
     221: invokevirtual #152                // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     224: ldc           #157                // String exception.subclass
     226: aload         5
     228: invokevirtual #152                // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     231: aload_0
     232: getfield      #27                 // Field tags:Ljava/lang/Iterable;
     235: invokevirtual #141                // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
     238: aload_0
     239: getfield      #23                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
     242: invokevirtual #159                // Method io/micrometer/core/instrument/Timer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
     245: invokevirtual #163                // Method io/micrometer/core/instrument/Timer$Sample.stop:(Lio/micrometer/core/instrument/Timer;)J
     248: pop2
     249: return
    Exception table:
       from    to  target type
          26    43    46   any
          46    51    46   any
}
