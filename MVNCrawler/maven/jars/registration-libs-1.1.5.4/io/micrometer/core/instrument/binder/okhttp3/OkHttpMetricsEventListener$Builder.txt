Compiled from "OkHttpMetricsEventListener.java"
public class io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$Builder {
  private final io.micrometer.core.instrument.MeterRegistry registry;

  private final java.lang.String name;

  private java.util.function.Function<okhttp3.Request, java.lang.String> uriMapper;

  private java.lang.Iterable<io.micrometer.core.instrument.Tag> tags;

  io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$Builder(io.micrometer.core.instrument.MeterRegistry, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokedynamic #9,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      10: putfield      #13                 // Field uriMapper:Ljava/util/function/Function;
      13: aload_0
      14: invokestatic  #19                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      17: putfield      #25                 // Field tags:Ljava/lang/Iterable;
      20: aload_0
      21: aload_1
      22: putfield      #29                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      25: aload_0
      26: aload_2
      27: putfield      #33                 // Field name:Ljava/lang/String;
      30: return

  public io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$Builder tags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field tags:Ljava/lang/Iterable;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$Builder uriMapper(java.util.function.Function<okhttp3.Request, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field uriMapper:Ljava/util/function/Function;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener build();
    Code:
       0: new           #1                  // class io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener
       3: dup
       4: aload_0
       5: getfield      #29                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
       8: aload_0
       9: getfield      #33                 // Field name:Ljava/lang/String;
      12: aload_0
      13: getfield      #13                 // Field uriMapper:Ljava/util/function/Function;
      16: aload_0
      17: getfield      #25                 // Field tags:Ljava/lang/Iterable;
      20: invokespecial #37                 // Method io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener."<init>":(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/util/function/Function;Ljava/lang/Iterable;)V
      23: areturn

  private static java.lang.String lambda$new$0(okhttp3.Request);
    Code:
       0: aload_0
       1: ldc           #40                 // String URI_PATTERN
       3: invokevirtual #42                 // Method okhttp3/Request.header:(Ljava/lang/String;)Ljava/lang/String;
       6: invokestatic  #48                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
       9: ldc           #54                 // String none
      11: invokevirtual #56                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #60                 // class java/lang/String
      17: areturn
}
