Compiled from "CompositeFunctionTimer.java"
class io.micrometer.core.instrument.composite.CompositeFunctionTimer<T> extends io.micrometer.core.instrument.composite.AbstractCompositeMeter<io.micrometer.core.instrument.FunctionTimer> implements io.micrometer.core.instrument.FunctionTimer {
  private final java.lang.ref.WeakReference<T> ref;

  private final java.util.function.ToLongFunction<T> countFunction;

  private final java.util.function.ToDoubleFunction<T> totalTimeFunction;

  private final java.util.concurrent.TimeUnit totalTimeFunctionUnit;

  io.micrometer.core.instrument.composite.CompositeFunctionTimer(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToLongFunction<T>, java.util.function.ToDoubleFunction<T>, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/micrometer/core/instrument/composite/AbstractCompositeMeter."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
       5: aload_0
       6: new           #7                  // class java/lang/ref/WeakReference
       9: dup
      10: aload_2
      11: invokespecial #9                  // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
      14: putfield      #12                 // Field ref:Ljava/lang/ref/WeakReference;
      17: aload_0
      18: aload_3
      19: putfield      #18                 // Field countFunction:Ljava/util/function/ToLongFunction;
      22: aload_0
      23: aload         4
      25: putfield      #22                 // Field totalTimeFunction:Ljava/util/function/ToDoubleFunction;
      28: aload_0
      29: aload         5
      31: putfield      #26                 // Field totalTimeFunctionUnit:Ljava/util/concurrent/TimeUnit;
      34: return

  public double count();
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method firstChild:()Lio/micrometer/core/instrument/Meter;
       4: checkcast     #34                 // class io/micrometer/core/instrument/FunctionTimer
       7: invokeinterface #36,  1           // InterfaceMethod io/micrometer/core/instrument/FunctionTimer.count:()D
      12: dreturn

  public double totalTime(java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method firstChild:()Lio/micrometer/core/instrument/Meter;
       4: checkcast     #34                 // class io/micrometer/core/instrument/FunctionTimer
       7: aload_1
       8: invokeinterface #40,  2           // InterfaceMethod io/micrometer/core/instrument/FunctionTimer.totalTime:(Ljava/util/concurrent/TimeUnit;)D
      13: dreturn

  public java.util.concurrent.TimeUnit baseTimeUnit();
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method firstChild:()Lio/micrometer/core/instrument/Meter;
       4: checkcast     #34                 // class io/micrometer/core/instrument/FunctionTimer
       7: invokeinterface #44,  1           // InterfaceMethod io/micrometer/core/instrument/FunctionTimer.baseTimeUnit:()Ljava/util/concurrent/TimeUnit;
      12: areturn

  io.micrometer.core.instrument.FunctionTimer newNoopMeter();
    Code:
       0: new           #48                 // class io/micrometer/core/instrument/noop/NoopFunctionTimer
       3: dup
       4: aload_0
       5: invokevirtual #50                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
       8: invokespecial #54                 // Method io/micrometer/core/instrument/noop/NoopFunctionTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
      11: areturn

  io.micrometer.core.instrument.FunctionTimer registerNewMeter(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #12                 // Field ref:Ljava/lang/ref/WeakReference;
       4: invokevirtual #55                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
       7: astore_2
       8: aload_2
       9: ifnonnull     14
      12: aconst_null
      13: areturn
      14: aload_0
      15: invokevirtual #50                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
      18: invokevirtual #59                 // Method io/micrometer/core/instrument/Meter$Id.getName:()Ljava/lang/String;
      21: aload_2
      22: aload_0
      23: getfield      #18                 // Field countFunction:Ljava/util/function/ToLongFunction;
      26: aload_0
      27: getfield      #22                 // Field totalTimeFunction:Ljava/util/function/ToDoubleFunction;
      30: aload_0
      31: getfield      #26                 // Field totalTimeFunctionUnit:Ljava/util/concurrent/TimeUnit;
      34: invokestatic  #65                 // InterfaceMethod io/micrometer/core/instrument/FunctionTimer.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToLongFunction;Ljava/util/function/ToDoubleFunction;Ljava/util/concurrent/TimeUnit;)Lio/micrometer/core/instrument/FunctionTimer$Builder;
      37: aload_0
      38: invokevirtual #50                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
      41: invokevirtual #69                 // Method io/micrometer/core/instrument/Meter$Id.getTagsAsIterable:()Ljava/lang/Iterable;
      44: invokevirtual #73                 // Method io/micrometer/core/instrument/FunctionTimer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/FunctionTimer$Builder;
      47: aload_0
      48: invokevirtual #50                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
      51: invokevirtual #79                 // Method io/micrometer/core/instrument/Meter$Id.getDescription:()Ljava/lang/String;
      54: invokevirtual #82                 // Method io/micrometer/core/instrument/FunctionTimer$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/FunctionTimer$Builder;
      57: aload_1
      58: invokevirtual #86                 // Method io/micrometer/core/instrument/FunctionTimer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/FunctionTimer;
      61: areturn

  io.micrometer.core.instrument.Meter registerNewMeter(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #90                 // Method registerNewMeter:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/FunctionTimer;
       5: areturn

  io.micrometer.core.instrument.Meter newNoopMeter();
    Code:
       0: aload_0
       1: invokevirtual #93                 // Method newNoopMeter:()Lio/micrometer/core/instrument/FunctionTimer;
       4: areturn
}
