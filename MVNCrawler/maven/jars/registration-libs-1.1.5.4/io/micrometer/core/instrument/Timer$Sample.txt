Compiled from "Timer.java"
public class io.micrometer.core.instrument.Timer$Sample {
  private io.micrometer.core.instrument.Tags tags;

  private final long startTime;

  private final io.micrometer.core.instrument.Clock clock;

  io.micrometer.core.instrument.Timer$Sample(io.micrometer.core.instrument.Clock);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #7                  // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
       8: putfield      #13                 // Field tags:Lio/micrometer/core/instrument/Tags;
      11: aload_0
      12: aload_1
      13: putfield      #19                 // Field clock:Lio/micrometer/core/instrument/Clock;
      16: aload_0
      17: aload_1
      18: invokeinterface #23,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      23: putfield      #29                 // Field startTime:J
      26: return

  public long stop(io.micrometer.core.instrument.Timer);
    Code:
       0: aload_0
       1: getfield      #19                 // Field clock:Lio/micrometer/core/instrument/Clock;
       4: invokeinterface #23,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
       9: aload_0
      10: getfield      #29                 // Field startTime:J
      13: lsub
      14: lstore_2
      15: aload_1
      16: lload_2
      17: getstatic     #33                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      20: invokeinterface #39,  4           // InterfaceMethod io/micrometer/core/instrument/Timer.record:(JLjava/util/concurrent/TimeUnit;)V
      25: lload_2
      26: lreturn

  public long stop(io.micrometer.core.instrument.MeterRegistry, io.micrometer.core.instrument.Timer$Builder);
    Code:
       0: aload_0
       1: aload_2
       2: aload_0
       3: getfield      #13                 // Field tags:Lio/micrometer/core/instrument/Tags;
       6: invokevirtual #45                 // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
       9: aload_1
      10: invokevirtual #50                 // Method io/micrometer/core/instrument/Timer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
      13: invokevirtual #54                 // Method stop:(Lio/micrometer/core/instrument/Timer;)J
      16: lreturn

  public io.micrometer.core.instrument.Timer$Sample tags(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #58                 // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       5: invokevirtual #62                 // Method tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Sample;
       8: areturn

  public io.micrometer.core.instrument.Timer$Sample tags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #13                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: invokevirtual #65                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
       9: putfield      #13                 // Field tags:Lio/micrometer/core/instrument/Tags;
      12: aload_0
      13: areturn
}
