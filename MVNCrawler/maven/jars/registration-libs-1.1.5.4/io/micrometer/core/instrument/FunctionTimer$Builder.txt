Compiled from "FunctionTimer.java"
public class io.micrometer.core.instrument.FunctionTimer$Builder<T> {
  private final java.lang.String name;

  private final java.util.function.ToLongFunction<T> countFunction;

  private final java.util.function.ToDoubleFunction<T> totalTimeFunction;

  private final java.util.concurrent.TimeUnit totalTimeFunctionUnit;

  private io.micrometer.core.instrument.Tags tags;

  private final T obj;

  private java.lang.String description;

  private io.micrometer.core.instrument.FunctionTimer$Builder(java.lang.String, T, java.util.function.ToLongFunction<T>, java.util.function.ToDoubleFunction<T>, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #12                 // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
       8: putfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      11: aload_0
      12: aload_1
      13: putfield      #22                 // Field name:Ljava/lang/String;
      16: aload_0
      17: aload_2
      18: putfield      #26                 // Field obj:Ljava/lang/Object;
      21: aload_0
      22: aload_3
      23: putfield      #30                 // Field countFunction:Ljava/util/function/ToLongFunction;
      26: aload_0
      27: aload         4
      29: putfield      #34                 // Field totalTimeFunction:Ljava/util/function/ToDoubleFunction;
      32: aload_0
      33: aload         5
      35: putfield      #38                 // Field totalTimeFunctionUnit:Ljava/util/concurrent/TimeUnit;
      38: return

  public io.micrometer.core.instrument.FunctionTimer$Builder<T> tags(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #42                 // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       5: invokevirtual #46                 // Method tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/FunctionTimer$Builder;
       8: areturn

  public io.micrometer.core.instrument.FunctionTimer$Builder<T> tags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: invokevirtual #49                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
       9: putfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      12: aload_0
      13: areturn

  public io.micrometer.core.instrument.FunctionTimer$Builder<T> tag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: aload_2
       7: invokevirtual #53                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      10: putfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aload_0
      14: areturn

  public io.micrometer.core.instrument.FunctionTimer$Builder<T> description(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #56                 // Field description:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.FunctionTimer register(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_1
       1: invokevirtual #59                 // Method io/micrometer/core/instrument/MeterRegistry.more:()Lio/micrometer/core/instrument/MeterRegistry$More;
       4: new           #65                 // class io/micrometer/core/instrument/Meter$Id
       7: dup
       8: aload_0
       9: getfield      #22                 // Field name:Ljava/lang/String;
      12: aload_0
      13: getfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      16: aconst_null
      17: aload_0
      18: getfield      #56                 // Field description:Ljava/lang/String;
      21: getstatic     #67                 // Field io/micrometer/core/instrument/Meter$Type.TIMER:Lio/micrometer/core/instrument/Meter$Type;
      24: invokespecial #73                 // Method io/micrometer/core/instrument/Meter$Id."<init>":(Ljava/lang/String;Lio/micrometer/core/instrument/Tags;Ljava/lang/String;Ljava/lang/String;Lio/micrometer/core/instrument/Meter$Type;)V
      27: aload_0
      28: getfield      #26                 // Field obj:Ljava/lang/Object;
      31: aload_0
      32: getfield      #30                 // Field countFunction:Ljava/util/function/ToLongFunction;
      35: aload_0
      36: getfield      #34                 // Field totalTimeFunction:Ljava/util/function/ToDoubleFunction;
      39: aload_0
      40: getfield      #38                 // Field totalTimeFunctionUnit:Ljava/util/concurrent/TimeUnit;
      43: invokevirtual #76                 // Method io/micrometer/core/instrument/MeterRegistry$More.timer:(Lio/micrometer/core/instrument/Meter$Id;Ljava/lang/Object;Ljava/util/function/ToLongFunction;Ljava/util/function/ToDoubleFunction;Ljava/util/concurrent/TimeUnit;)Lio/micrometer/core/instrument/FunctionTimer;
      46: areturn

  io.micrometer.core.instrument.FunctionTimer$Builder(java.lang.String, java.lang.Object, java.util.function.ToLongFunction, java.util.function.ToDoubleFunction, java.util.concurrent.TimeUnit, io.micrometer.core.instrument.FunctionTimer$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokespecial #1                  // Method "<init>":(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToLongFunction;Ljava/util/function/ToDoubleFunction;Ljava/util/concurrent/TimeUnit;)V
      11: return
}
