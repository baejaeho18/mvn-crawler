Compiled from "PoolingHttpClientConnectionManagerMetricsBinder.java"
public class io.micrometer.core.instrument.binder.httpcomponents.PoolingHttpClientConnectionManagerMetricsBinder implements io.micrometer.core.instrument.binder.MeterBinder {
  private final org.apache.http.pool.ConnPoolControl<org.apache.http.conn.routing.HttpRoute> connPoolControl;

  private final java.lang.Iterable<io.micrometer.core.instrument.Tag> tags;

  public io.micrometer.core.instrument.binder.httpcomponents.PoolingHttpClientConnectionManagerMetricsBinder(org.apache.http.pool.ConnPoolControl<org.apache.http.conn.routing.HttpRoute>, java.lang.String, java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1                  // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       7: invokespecial #7                  // Method "<init>":(Lorg/apache/http/pool/ConnPoolControl;Ljava/lang/String;Ljava/lang/Iterable;)V
      10: return

  public io.micrometer.core.instrument.binder.httpcomponents.PoolingHttpClientConnectionManagerMetricsBinder(org.apache.http.pool.ConnPoolControl<org.apache.http.conn.routing.HttpRoute>, java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokespecial #13                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #18                 // Field connPoolControl:Lorg/apache/http/pool/ConnPoolControl;
       9: aload_0
      10: aload_3
      11: iconst_2
      12: anewarray     #22                 // class java/lang/String
      15: dup
      16: iconst_0
      17: ldc           #24                 // String httpclient
      19: aastore
      20: dup
      21: iconst_1
      22: aload_2
      23: aastore
      24: invokestatic  #26                 // Method io/micrometer/core/instrument/Tags.concat:(Ljava/lang/Iterable;[Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      27: putfield      #30                 // Field tags:Ljava/lang/Iterable;
      30: return

  public void bindTo(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #34                 // Method registerTotalMetrics:(Lio/micrometer/core/instrument/MeterRegistry;)V
       5: return

  private void registerTotalMetrics(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: ldc           #38                 // String httpcomponents.httpclient.pool.total.max
       2: aload_0
       3: getfield      #18                 // Field connPoolControl:Lorg/apache/http/pool/ConnPoolControl;
       6: invokedynamic #40,  0             // InvokeDynamic #0:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
      11: invokestatic  #44                 // InterfaceMethod io/micrometer/core/instrument/Gauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge$Builder;
      14: ldc           #50                 // String The configured maximum number of allowed persistent connections for all routes.
      16: invokevirtual #52                 // Method io/micrometer/core/instrument/Gauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      19: aload_0
      20: getfield      #30                 // Field tags:Ljava/lang/Iterable;
      23: invokevirtual #58                 // Method io/micrometer/core/instrument/Gauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Gauge$Builder;
      26: aload_1
      27: invokevirtual #61                 // Method io/micrometer/core/instrument/Gauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Gauge;
      30: pop
      31: ldc           #65                 // String httpcomponents.httpclient.pool.total.connections
      33: aload_0
      34: getfield      #18                 // Field connPoolControl:Lorg/apache/http/pool/ConnPoolControl;
      37: invokedynamic #67,  0             // InvokeDynamic #1:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
      42: invokestatic  #44                 // InterfaceMethod io/micrometer/core/instrument/Gauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge$Builder;
      45: ldc           #68                 // String The number of persistent and available connections for all routes.
      47: invokevirtual #52                 // Method io/micrometer/core/instrument/Gauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      50: aload_0
      51: getfield      #30                 // Field tags:Ljava/lang/Iterable;
      54: invokevirtual #58                 // Method io/micrometer/core/instrument/Gauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Gauge$Builder;
      57: ldc           #70                 // String state
      59: ldc           #72                 // String available
      61: invokevirtual #74                 // Method io/micrometer/core/instrument/Gauge$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      64: aload_1
      65: invokevirtual #61                 // Method io/micrometer/core/instrument/Gauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Gauge;
      68: pop
      69: ldc           #65                 // String httpcomponents.httpclient.pool.total.connections
      71: aload_0
      72: getfield      #18                 // Field connPoolControl:Lorg/apache/http/pool/ConnPoolControl;
      75: invokedynamic #78,  0             // InvokeDynamic #2:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
      80: invokestatic  #44                 // InterfaceMethod io/micrometer/core/instrument/Gauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge$Builder;
      83: ldc           #79                 // String The number of persistent and leased connections for all routes.
      85: invokevirtual #52                 // Method io/micrometer/core/instrument/Gauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      88: aload_0
      89: getfield      #30                 // Field tags:Ljava/lang/Iterable;
      92: invokevirtual #58                 // Method io/micrometer/core/instrument/Gauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Gauge$Builder;
      95: ldc           #70                 // String state
      97: ldc           #81                 // String leased
      99: invokevirtual #74                 // Method io/micrometer/core/instrument/Gauge$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
     102: aload_1
     103: invokevirtual #61                 // Method io/micrometer/core/instrument/Gauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Gauge;
     106: pop
     107: ldc           #83                 // String httpcomponents.httpclient.pool.total.pending
     109: aload_0
     110: getfield      #18                 // Field connPoolControl:Lorg/apache/http/pool/ConnPoolControl;
     113: invokedynamic #85,  0             // InvokeDynamic #3:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
     118: invokestatic  #44                 // InterfaceMethod io/micrometer/core/instrument/Gauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge$Builder;
     121: ldc           #86                 // String The number of connection requests being blocked awaiting a free connection for all routes.
     123: invokevirtual #52                 // Method io/micrometer/core/instrument/Gauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
     126: aload_0
     127: getfield      #30                 // Field tags:Ljava/lang/Iterable;
     130: invokevirtual #58                 // Method io/micrometer/core/instrument/Gauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Gauge$Builder;
     133: aload_1
     134: invokevirtual #61                 // Method io/micrometer/core/instrument/Gauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Gauge;
     137: pop
     138: ldc           #88                 // String httpcomponents.httpclient.pool.route.max.default
     140: aload_0
     141: getfield      #18                 // Field connPoolControl:Lorg/apache/http/pool/ConnPoolControl;
     144: invokedynamic #90,  0             // InvokeDynamic #4:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
     149: invokestatic  #44                 // InterfaceMethod io/micrometer/core/instrument/Gauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge$Builder;
     152: ldc           #91                 // String The configured default maximum number of allowed persistent connections per route.
     154: invokevirtual #52                 // Method io/micrometer/core/instrument/Gauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
     157: aload_0
     158: getfield      #30                 // Field tags:Ljava/lang/Iterable;
     161: invokevirtual #58                 // Method io/micrometer/core/instrument/Gauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Gauge$Builder;
     164: aload_1
     165: invokevirtual #61                 // Method io/micrometer/core/instrument/Gauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Gauge;
     168: pop
     169: return

  private static double lambda$registerTotalMetrics$3(org.apache.http.pool.ConnPoolControl);
    Code:
       0: aload_0
       1: invokeinterface #93,  1           // InterfaceMethod org/apache/http/pool/ConnPoolControl.getTotalStats:()Lorg/apache/http/pool/PoolStats;
       6: invokevirtual #99                 // Method org/apache/http/pool/PoolStats.getPending:()I
       9: i2d
      10: dreturn

  private static double lambda$registerTotalMetrics$2(org.apache.http.pool.ConnPoolControl);
    Code:
       0: aload_0
       1: invokeinterface #93,  1           // InterfaceMethod org/apache/http/pool/ConnPoolControl.getTotalStats:()Lorg/apache/http/pool/PoolStats;
       6: invokevirtual #105                // Method org/apache/http/pool/PoolStats.getLeased:()I
       9: i2d
      10: dreturn

  private static double lambda$registerTotalMetrics$1(org.apache.http.pool.ConnPoolControl);
    Code:
       0: aload_0
       1: invokeinterface #93,  1           // InterfaceMethod org/apache/http/pool/ConnPoolControl.getTotalStats:()Lorg/apache/http/pool/PoolStats;
       6: invokevirtual #108                // Method org/apache/http/pool/PoolStats.getAvailable:()I
       9: i2d
      10: dreturn

  private static double lambda$registerTotalMetrics$0(org.apache.http.pool.ConnPoolControl);
    Code:
       0: aload_0
       1: invokeinterface #93,  1           // InterfaceMethod org/apache/http/pool/ConnPoolControl.getTotalStats:()Lorg/apache/http/pool/PoolStats;
       6: invokevirtual #111                // Method org/apache/http/pool/PoolStats.getMax:()I
       9: i2d
      10: dreturn
}
