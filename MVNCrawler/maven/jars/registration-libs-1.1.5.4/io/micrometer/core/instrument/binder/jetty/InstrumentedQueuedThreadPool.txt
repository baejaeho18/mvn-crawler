Compiled from "InstrumentedQueuedThreadPool.java"
public class io.micrometer.core.instrument.binder.jetty.InstrumentedQueuedThreadPool extends org.eclipse.jetty.util.thread.QueuedThreadPool {
  private final io.micrometer.core.instrument.MeterRegistry registry;

  private final java.lang.Iterable<io.micrometer.core.instrument.Tag> tags;

  public io.micrometer.core.instrument.binder.jetty.InstrumentedQueuedThreadPool(io.micrometer.core.instrument.MeterRegistry, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/eclipse/jetty/util/thread/QueuedThreadPool."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #7                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
       9: aload_0
      10: aload_2
      11: putfield      #13                 // Field tags:Ljava/lang/Iterable;
      14: return

  protected void doStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #17                 // Method org/eclipse/jetty/util/thread/QueuedThreadPool.doStart:()V
       4: new           #20                 // class io/micrometer/core/instrument/binder/jetty/JettyServerThreadPoolMetrics
       7: dup
       8: aload_0
       9: aload_0
      10: getfield      #13                 // Field tags:Ljava/lang/Iterable;
      13: invokespecial #22                 // Method io/micrometer/core/instrument/binder/jetty/JettyServerThreadPoolMetrics."<init>":(Lorg/eclipse/jetty/util/thread/ThreadPool;Ljava/lang/Iterable;)V
      16: astore_1
      17: aload_1
      18: aload_0
      19: getfield      #7                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      22: invokevirtual #25                 // Method io/micrometer/core/instrument/binder/jetty/JettyServerThreadPoolMetrics.bindTo:(Lio/micrometer/core/instrument/MeterRegistry;)V
      25: return
}
