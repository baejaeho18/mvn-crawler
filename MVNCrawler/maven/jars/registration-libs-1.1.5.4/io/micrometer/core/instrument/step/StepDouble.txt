Compiled from "StepDouble.java"
public class io.micrometer.core.instrument.step.StepDouble extends io.micrometer.core.instrument.step.StepValue<java.lang.Double> {
  private final java.util.concurrent.atomic.DoubleAdder current;

  public io.micrometer.core.instrument.step.StepDouble(io.micrometer.core.instrument.Clock, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokespecial #1                  // Method io/micrometer/core/instrument/step/StepValue."<init>":(Lio/micrometer/core/instrument/Clock;J)V
       6: aload_0
       7: new           #7                  // class java/util/concurrent/atomic/DoubleAdder
      10: dup
      11: invokespecial #9                  // Method java/util/concurrent/atomic/DoubleAdder."<init>":()V
      14: putfield      #12                 // Field current:Ljava/util/concurrent/atomic/DoubleAdder;
      17: return

  protected java.util.function.Supplier<java.lang.Double> valueSupplier();
    Code:
       0: aload_0
       1: getfield      #12                 // Field current:Ljava/util/concurrent/atomic/DoubleAdder;
       4: dup
       5: invokestatic  #18                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: invokedynamic #24,  0             // InvokeDynamic #0:get:(Ljava/util/concurrent/atomic/DoubleAdder;)Ljava/util/function/Supplier;
      14: areturn

  protected java.lang.Double noValue();
    Code:
       0: dconst_0
       1: invokestatic  #28                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
       4: areturn

  public java.util.concurrent.atomic.DoubleAdder getCurrent();
    Code:
       0: aload_0
       1: getfield      #12                 // Field current:Ljava/util/concurrent/atomic/DoubleAdder;
       4: areturn

  protected java.lang.Object noValue();
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method noValue:()Ljava/lang/Double;
       4: areturn
}
