Compiled from "MicrometerHttpRequestExecutor.java"
public class io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpRequestExecutor$Builder {
  private final io.micrometer.core.instrument.MeterRegistry registry;

  private int waitForContinue;

  private java.lang.Iterable<io.micrometer.core.instrument.Tag> tags;

  private java.util.function.Function<org.apache.http.HttpRequest, java.lang.String> uriMapper;

  private boolean exportTagsForRoute;

  io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpRequestExecutor$Builder(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: sipush        3000
       8: putfield      #9                  // Field waitForContinue:I
      11: aload_0
      12: invokestatic  #15                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      15: putfield      #21                 // Field tags:Ljava/lang/Iterable;
      18: aload_0
      19: new           #25                 // class io/micrometer/core/instrument/binder/httpcomponents/DefaultUriMapper
      22: dup
      23: invokespecial #27                 // Method io/micrometer/core/instrument/binder/httpcomponents/DefaultUriMapper."<init>":()V
      26: putfield      #28                 // Field uriMapper:Ljava/util/function/Function;
      29: aload_0
      30: iconst_0
      31: putfield      #32                 // Field exportTagsForRoute:Z
      34: aload_0
      35: aload_1
      36: putfield      #36                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      39: return

  public io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpRequestExecutor$Builder waitForContinue(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field waitForContinue:I
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpRequestExecutor$Builder tags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field tags:Ljava/lang/Iterable;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpRequestExecutor$Builder uriMapper(java.util.function.Function<org.apache.http.HttpRequest, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field uriMapper:Ljava/util/function/Function;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpRequestExecutor$Builder exportTagsForRoute(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field exportTagsForRoute:Z
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpRequestExecutor build();
    Code:
       0: new           #40                 // class io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor
       3: dup
       4: aload_0
       5: getfield      #9                  // Field waitForContinue:I
       8: aload_0
       9: getfield      #36                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      12: aload_0
      13: getfield      #28                 // Field uriMapper:Ljava/util/function/Function;
      16: aload_0
      17: getfield      #21                 // Field tags:Ljava/lang/Iterable;
      20: aload_0
      21: getfield      #32                 // Field exportTagsForRoute:Z
      24: aconst_null
      25: invokespecial #42                 // Method io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor."<init>":(ILio/micrometer/core/instrument/MeterRegistry;Ljava/util/function/Function;Ljava/lang/Iterable;ZLio/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor$1;)V
      28: areturn
}
