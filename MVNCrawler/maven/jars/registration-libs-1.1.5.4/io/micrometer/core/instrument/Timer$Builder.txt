Compiled from "Timer.java"
public class io.micrometer.core.instrument.Timer$Builder {
  private final java.lang.String name;

  private io.micrometer.core.instrument.Tags tags;

  private final io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder distributionConfigBuilder;

  private java.lang.String description;

  private io.micrometer.core.instrument.distribution.pause.PauseDetector pauseDetector;

  private io.micrometer.core.instrument.Timer$Builder(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #12                 // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
       8: putfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      11: aload_0
      12: aload_1
      13: putfield      #22                 // Field name:Ljava/lang/String;
      16: aload_0
      17: new           #26                 // class io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder
      20: dup
      21: invokespecial #28                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder."<init>":()V
      24: putfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      27: aload_0
      28: lconst_1
      29: invokestatic  #33                 // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
      32: invokevirtual #39                 // Method minimumExpectedValue:(Ljava/time/Duration;)Lio/micrometer/core/instrument/Timer$Builder;
      35: pop
      36: aload_0
      37: ldc2_w        #43                 // long 30l
      40: invokestatic  #45                 // Method java/time/Duration.ofSeconds:(J)Ljava/time/Duration;
      43: invokevirtual #48                 // Method maximumExpectedValue:(Ljava/time/Duration;)Lio/micrometer/core/instrument/Timer$Builder;
      46: pop
      47: return

  public io.micrometer.core.instrument.Timer$Builder tags(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #51                 // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       5: invokevirtual #55                 // Method tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
       8: areturn

  public io.micrometer.core.instrument.Timer$Builder tags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: invokevirtual #58                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
       9: putfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      12: aload_0
      13: areturn

  public io.micrometer.core.instrument.Timer$Builder tag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: aload_2
       7: invokevirtual #62                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      10: putfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aload_0
      14: areturn

  public io.micrometer.core.instrument.Timer$Builder publishPercentiles(double...);
    Code:
       0: aload_0
       1: getfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #65                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentiles:([D)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder percentilePrecision(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #69                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentilePrecision:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder publishPercentileHistogram();
    Code:
       0: aload_0
       1: iconst_1
       2: invokestatic  #73                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: invokevirtual #79                 // Method publishPercentileHistogram:(Ljava/lang/Boolean;)Lio/micrometer/core/instrument/Timer$Builder;
       8: areturn

  public io.micrometer.core.instrument.Timer$Builder publishPercentileHistogram(java.lang.Boolean);
    Code:
       0: aload_0
       1: getfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #83                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentilesHistogram:(Ljava/lang/Boolean;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder sla(java.time.Duration...);
    Code:
       0: aload_1
       1: ifnull        31
       4: aload_0
       5: getfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: aload_1
       9: invokestatic  #87                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      12: invokedynamic #93,  0             // InvokeDynamic #0:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
      17: invokeinterface #97,  2           // InterfaceMethod java/util/stream/Stream.mapToDouble:(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/DoubleStream;
      22: invokeinterface #103,  1          // InterfaceMethod java/util/stream/DoubleStream.toArray:()[D
      27: invokevirtual #109                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.sla:([D)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      30: pop
      31: aload_0
      32: areturn

  public io.micrometer.core.instrument.Timer$Builder minimumExpectedValue(java.time.Duration);
    Code:
       0: aload_1
       1: ifnull        20
       4: aload_0
       5: getfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: aload_1
       9: invokevirtual #112                // Method java/time/Duration.toNanos:()J
      12: l2d
      13: invokestatic  #116                // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      16: invokevirtual #121                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.minimumExpectedValue:(Ljava/lang/Double;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      19: pop
      20: aload_0
      21: areturn

  public io.micrometer.core.instrument.Timer$Builder maximumExpectedValue(java.time.Duration);
    Code:
       0: aload_1
       1: ifnull        20
       4: aload_0
       5: getfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: aload_1
       9: invokevirtual #112                // Method java/time/Duration.toNanos:()J
      12: l2d
      13: invokestatic  #116                // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      16: invokevirtual #124                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.maximumExpectedValue:(Ljava/lang/Double;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      19: pop
      20: aload_0
      21: areturn

  public io.micrometer.core.instrument.Timer$Builder distributionStatisticExpiry(java.time.Duration);
    Code:
       0: aload_0
       1: getfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #126                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.expiry:(Ljava/time/Duration;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder distributionStatisticBufferLength(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #130                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.bufferLength:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder pauseDetector(io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #133                // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.Timer$Builder description(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #137                // Field description:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.Timer register(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_1
       1: new           #140                // class io/micrometer/core/instrument/Meter$Id
       4: dup
       5: aload_0
       6: getfield      #22                 // Field name:Ljava/lang/String;
       9: aload_0
      10: getfield      #18                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aconst_null
      14: aload_0
      15: getfield      #137                // Field description:Ljava/lang/String;
      18: getstatic     #142                // Field io/micrometer/core/instrument/Meter$Type.TIMER:Lio/micrometer/core/instrument/Meter$Type;
      21: invokespecial #148                // Method io/micrometer/core/instrument/Meter$Id."<init>":(Ljava/lang/String;Lio/micrometer/core/instrument/Tags;Ljava/lang/String;Ljava/lang/String;Lio/micrometer/core/instrument/Meter$Type;)V
      24: aload_0
      25: getfield      #29                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      28: invokevirtual #151                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.build:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      31: aload_0
      32: getfield      #133                // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
      35: ifnonnull     48
      38: aload_1
      39: invokevirtual #155                // Method io/micrometer/core/instrument/MeterRegistry.config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
      42: invokevirtual #161                // Method io/micrometer/core/instrument/MeterRegistry$Config.pauseDetector:()Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
      45: goto          52
      48: aload_0
      49: getfield      #133                // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
      52: invokevirtual #166                // Method io/micrometer/core/instrument/MeterRegistry.timer:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;)Lio/micrometer/core/instrument/Timer;
      55: areturn

  io.micrometer.core.instrument.Timer$Builder(java.lang.String, io.micrometer.core.instrument.Timer$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljava/lang/String;)V
       5: return
}
