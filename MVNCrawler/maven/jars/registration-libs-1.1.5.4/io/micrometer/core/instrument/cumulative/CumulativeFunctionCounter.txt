Compiled from "CumulativeFunctionCounter.java"
public class io.micrometer.core.instrument.cumulative.CumulativeFunctionCounter<T> extends io.micrometer.core.instrument.AbstractMeter implements io.micrometer.core.instrument.FunctionCounter {
  private final java.lang.ref.WeakReference<T> ref;

  private final java.util.function.ToDoubleFunction<T> f;

  private volatile double last;

  public io.micrometer.core.instrument.cumulative.CumulativeFunctionCounter(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/micrometer/core/instrument/AbstractMeter."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
       5: aload_0
       6: new           #7                  // class java/lang/ref/WeakReference
       9: dup
      10: aload_2
      11: invokespecial #9                  // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
      14: putfield      #12                 // Field ref:Ljava/lang/ref/WeakReference;
      17: aload_0
      18: aload_3
      19: putfield      #18                 // Field f:Ljava/util/function/ToDoubleFunction;
      22: return

  public double count();
    Code:
       0: aload_0
       1: getfield      #12                 // Field ref:Ljava/lang/ref/WeakReference;
       4: invokevirtual #22                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
       7: astore_1
       8: aload_1
       9: ifnull        30
      12: aload_0
      13: aload_0
      14: getfield      #18                 // Field f:Ljava/util/function/ToDoubleFunction;
      17: aload_1
      18: invokeinterface #26,  2           // InterfaceMethod java/util/function/ToDoubleFunction.applyAsDouble:(Ljava/lang/Object;)D
      23: dup2_x1
      24: putfield      #32                 // Field last:D
      27: goto          34
      30: aload_0
      31: getfield      #32                 // Field last:D
      34: dreturn
}
