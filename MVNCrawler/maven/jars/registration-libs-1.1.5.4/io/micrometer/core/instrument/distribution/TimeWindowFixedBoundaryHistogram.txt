Compiled from "TimeWindowFixedBoundaryHistogram.java"
public class io.micrometer.core.instrument.distribution.TimeWindowFixedBoundaryHistogram extends io.micrometer.core.instrument.distribution.AbstractTimeWindowHistogram<io.micrometer.core.instrument.distribution.TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram, java.lang.Void> {
  private final double[] buckets;

  public io.micrometer.core.instrument.distribution.TimeWindowFixedBoundaryHistogram(io.micrometer.core.instrument.Clock, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ldc           #7                  // class io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram
       5: iload_3
       6: invokespecial #9                  // Method io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram."<init>":(Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Class;Z)V
       9: aload_0
      10: getfield      #15                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      13: iload_3
      14: invokevirtual #19                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.getHistogramBuckets:(Z)Ljava/util/NavigableSet;
      17: astore        4
      19: aload_0
      20: getfield      #15                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      23: invokevirtual #25                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.isPercentileHistogram:()Ljava/lang/Boolean;
      26: astore        5
      28: aload         5
      30: ifnull        56
      33: aload         5
      35: invokevirtual #29                 // Method java/lang/Boolean.booleanValue:()Z
      38: ifeq          56
      41: aload         4
      43: aload_0
      44: getfield      #15                 // Field distributionStatisticConfig:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      47: invokestatic  #35                 // Method io/micrometer/core/instrument/distribution/PercentileHistogramBuckets.buckets:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;)Ljava/util/NavigableSet;
      50: invokeinterface #40,  2           // InterfaceMethod java/util/NavigableSet.addAll:(Ljava/util/Collection;)Z
      55: pop
      56: aload_0
      57: aload         4
      59: invokeinterface #46,  1           // InterfaceMethod java/util/NavigableSet.stream:()Ljava/util/stream/Stream;
      64: invokedynamic #50,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      69: invokeinterface #54,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      74: invokedynamic #60,  0             // InvokeDynamic #1:applyAsDouble:()Ljava/util/function/ToDoubleFunction;
      79: invokeinterface #64,  2           // InterfaceMethod java/util/stream/Stream.mapToDouble:(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/DoubleStream;
      84: invokeinterface #68,  1           // InterfaceMethod java/util/stream/DoubleStream.toArray:()[D
      89: putfield      #1                  // Field buckets:[D
      92: aload_0
      93: invokevirtual #74                 // Method initRingBuffer:()V
      96: return

  io.micrometer.core.instrument.distribution.TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram newBucket();
    Code:
       0: new           #7                  // class io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram
       3: dup
       4: aload_0
       5: invokespecial #78                 // Method io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram."<init>":(Lio/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram;)V
       8: areturn

  void recordLong(io.micrometer.core.instrument.distribution.TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram, long);
    Code:
       0: aload_1
       1: lload_2
       2: invokevirtual #81                 // Method io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram.record:(J)V
       5: return

  final void recordDouble(io.micrometer.core.instrument.distribution.TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram, double);
    Code:
       0: aload_0
       1: aload_1
       2: dload_2
       3: invokestatic  #85                 // Method java/lang/Math.ceil:(D)D
       6: d2l
       7: invokevirtual #91                 // Method recordLong:(Lio/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram;J)V
      10: return

  void resetBucket(io.micrometer.core.instrument.distribution.TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram);
    Code:
       0: aload_1
       1: invokevirtual #95                 // Method io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram.reset:()V
       4: return

  java.lang.Void newAccumulatedHistogram(io.micrometer.core.instrument.distribution.TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram[]);
    Code:
       0: aconst_null
       1: areturn

  void accumulate();
    Code:
       0: return

  void resetAccumulatedHistogram();
    Code:
       0: return

  double valueAtPercentile(double);
    Code:
       0: dconst_0
       1: dreturn

  double countAtValue(double);
    Code:
       0: aload_0
       1: invokevirtual #98                 // Method currentHistogram:()Ljava/lang/Object;
       4: checkcast     #7                  // class io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram
       7: dload_1
       8: invokevirtual #102                // Method io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram.countAtValue:(D)J
      11: l2d
      12: dreturn

  void outputSummary(java.io.PrintStream, double);
    Code:
       0: aload_1
       1: ldc           #106                // String %14s %10s\n\n
       3: iconst_2
       4: anewarray     #108                // class java/lang/Object
       7: dup
       8: iconst_0
       9: ldc           #110                // String Bucket
      11: aastore
      12: dup
      13: iconst_1
      14: ldc           #112                // String TotalCount
      16: aastore
      17: invokevirtual #114                // Method java/io/PrintStream.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;
      20: pop
      21: ldc           #120                // String %14.1f %10d\n
      23: astore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: aload_0
      31: getfield      #1                  // Field buckets:[D
      34: arraylength
      35: if_icmpge     94
      38: aload_1
      39: getstatic     #122                // Field java/util/Locale.US:Ljava/util/Locale;
      42: aload         4
      44: iconst_2
      45: anewarray     #108                // class java/lang/Object
      48: dup
      49: iconst_0
      50: aload_0
      51: getfield      #1                  // Field buckets:[D
      54: iload         5
      56: daload
      57: dload_2
      58: ddiv
      59: invokestatic  #128                // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      62: aastore
      63: dup
      64: iconst_1
      65: aload_0
      66: invokevirtual #98                 // Method currentHistogram:()Ljava/lang/Object;
      69: checkcast     #7                  // class io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram
      72: getfield      #134                // Field io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram.values:Ljava/util/concurrent/atomic/AtomicLongArray;
      75: iload         5
      77: invokevirtual #138                // Method java/util/concurrent/atomic/AtomicLongArray.get:(I)J
      80: invokestatic  #144                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      83: aastore
      84: invokevirtual #149                // Method java/io/PrintStream.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;
      87: pop
      88: iinc          5, 1
      91: goto          28
      94: aload_1
      95: bipush        10
      97: invokevirtual #152                // Method java/io/PrintStream.write:(I)V
     100: return

  public void recordDouble(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokespecial #156                // Method io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordDouble:(D)V
       5: return

  public void recordLong(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #160                // Method io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong:(J)V
       5: return

  java.lang.Object newAccumulatedHistogram(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #162                // class "[Lio/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram;"
       5: invokevirtual #164                // Method newAccumulatedHistogram:([Lio/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram;)Ljava/lang/Void;
       8: areturn

  void resetBucket(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #7                  // class io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram
       5: invokevirtual #168                // Method resetBucket:(Lio/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram;)V
       8: return

  void recordDouble(java.lang.Object, double);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #7                  // class io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram
       5: dload_2
       6: invokevirtual #172                // Method recordDouble:(Lio/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram;D)V
       9: return

  void recordLong(java.lang.Object, long);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #7                  // class io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram
       5: lload_2
       6: invokevirtual #91                 // Method recordLong:(Lio/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram;J)V
       9: return

  java.lang.Object newBucket();
    Code:
       0: aload_0
       1: invokevirtual #175                // Method newBucket:()Lio/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram$FixedBoundaryHistogram;
       4: areturn

  static double[] access$000(io.micrometer.core.instrument.distribution.TimeWindowFixedBoundaryHistogram);
    Code:
       0: aload_0
       1: getfield      #1                  // Field buckets:[D
       4: areturn
}
