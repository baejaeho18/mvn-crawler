Compiled from "AbstractTimer.java"
public abstract class io.micrometer.core.instrument.AbstractTimer extends io.micrometer.core.instrument.AbstractMeter implements io.micrometer.core.instrument.Timer {
  private static java.util.Map<io.micrometer.core.instrument.distribution.pause.PauseDetector, org.LatencyUtils.PauseDetector> pauseDetectorCache;

  protected final io.micrometer.core.instrument.Clock clock;

  protected final io.micrometer.core.instrument.distribution.Histogram histogram;

  private final java.util.concurrent.TimeUnit baseTimeUnit;

  private org.LatencyUtils.IntervalEstimator intervalEstimator;

  private org.LatencyUtils.PauseDetector pauseDetector;

  protected io.micrometer.core.instrument.AbstractTimer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Clock, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: iconst_0
       9: invokespecial #1                  // Method "<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;Ljava/util/concurrent/TimeUnit;Z)V
      12: return

  protected io.micrometer.core.instrument.AbstractTimer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Clock, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector, java.util.concurrent.TimeUnit, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method io/micrometer/core/instrument/AbstractMeter."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
       5: aload_0
       6: aconst_null
       7: putfield      #12                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
      10: aload_0
      11: aload_2
      12: putfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
      15: aload_0
      16: aload         5
      18: putfield      #20                 // Field baseTimeUnit:Ljava/util/concurrent/TimeUnit;
      21: aload_0
      22: aload         4
      24: invokespecial #24                 // Method initPauseDetector:(Lio/micrometer/core/instrument/distribution/pause/PauseDetector;)V
      27: aload_3
      28: invokevirtual #28                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.isPublishingPercentiles:()Z
      31: ifeq          52
      34: aload_0
      35: new           #34                 // class io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram
      38: dup
      39: aload_2
      40: aload_3
      41: iload         6
      43: invokespecial #36                 // Method io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram."<init>":(Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Z)V
      46: putfield      #39                 // Field histogram:Lio/micrometer/core/instrument/distribution/Histogram;
      49: goto          84
      52: aload_3
      53: invokevirtual #43                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.isPublishingHistogram:()Z
      56: ifeq          77
      59: aload_0
      60: new           #46                 // class io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram
      63: dup
      64: aload_2
      65: aload_3
      66: iload         6
      68: invokespecial #48                 // Method io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram."<init>":(Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Z)V
      71: putfield      #39                 // Field histogram:Lio/micrometer/core/instrument/distribution/Histogram;
      74: goto          84
      77: aload_0
      78: getstatic     #49                 // Field io/micrometer/core/instrument/distribution/NoopHistogram.INSTANCE:Lio/micrometer/core/instrument/distribution/NoopHistogram;
      81: putfield      #39                 // Field histogram:Lio/micrometer/core/instrument/distribution/Histogram;
      84: return

  private void initPauseDetector(io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: aload_0
       1: getstatic     #55                 // Field pauseDetectorCache:Ljava/util/Map;
       4: aload_1
       5: invokedynamic #59,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      10: invokeinterface #63,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      15: checkcast     #69                 // class org/LatencyUtils/PauseDetector
      18: putfield      #71                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
      21: aload_0
      22: getfield      #71                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
      25: instanceof    #75                 // class org/LatencyUtils/SimplePauseDetector
      28: ifeq          65
      31: aload_0
      32: new           #77                 // class org/LatencyUtils/TimeCappedMovingAverageIntervalEstimator
      35: dup
      36: sipush        128
      39: ldc2_w        #79                 // long 10000000000l
      42: aload_0
      43: getfield      #71                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
      46: invokespecial #81                 // Method org/LatencyUtils/TimeCappedMovingAverageIntervalEstimator."<init>":(IJLorg/LatencyUtils/PauseDetector;)V
      49: putfield      #12                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
      52: aload_0
      53: getfield      #71                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
      56: aload_0
      57: invokedynamic #84,  0             // InvokeDynamic #1:handlePauseEvent:(Lio/micrometer/core/instrument/AbstractTimer;)Lorg/LatencyUtils/PauseDetectorListener;
      62: invokevirtual #88                 // Method org/LatencyUtils/PauseDetector.addListener:(Lorg/LatencyUtils/PauseDetectorListener;)V
      65: return

  private void recordValueWithExpectedInterval(long, long);
    Code:
       0: aload_0
       1: lload_1
       2: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       5: invokevirtual #97                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
       8: lload_3
       9: lconst_0
      10: lcmp
      11: ifgt          15
      14: return
      15: lload_1
      16: lload_3
      17: lsub
      18: lstore        5
      20: lload         5
      22: lload_3
      23: lcmp
      24: iflt          45
      27: aload_0
      28: lload         5
      30: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      33: invokevirtual #97                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      36: lload         5
      38: lload_3
      39: lsub
      40: lstore        5
      42: goto          20
      45: return

  public <T> T recordCallable(java.util.concurrent.Callable<T>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
       4: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
       9: lstore_2
      10: aload_1
      11: invokeinterface #107,  1          // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      16: astore        4
      18: aload_0
      19: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
      22: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      27: lstore        5
      29: aload_0
      30: lload         5
      32: lload_2
      33: lsub
      34: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      37: invokevirtual #97                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      40: aload         4
      42: areturn
      43: astore        7
      45: aload_0
      46: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
      49: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      54: lstore        8
      56: aload_0
      57: lload         8
      59: lload_2
      60: lsub
      61: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      64: invokevirtual #97                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      67: aload         7
      69: athrow
    Exception table:
       from    to  target type
          10    18    43   any
          43    45    43   any

  public <T> T record(java.util.function.Supplier<T>);
    Code:
       0: aload_0
       1: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
       4: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
       9: lstore_2
      10: aload_1
      11: invokeinterface #113,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      16: astore        4
      18: aload_0
      19: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
      22: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      27: lstore        5
      29: aload_0
      30: lload         5
      32: lload_2
      33: lsub
      34: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      37: invokevirtual #97                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      40: aload         4
      42: areturn
      43: astore        7
      45: aload_0
      46: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
      49: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      54: lstore        8
      56: aload_0
      57: lload         8
      59: lload_2
      60: lsub
      61: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      64: invokevirtual #97                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      67: aload         7
      69: athrow
    Exception table:
       from    to  target type
          10    18    43   any
          43    45    43   any

  public void record(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
       4: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
       9: lstore_2
      10: aload_1
      11: invokeinterface #118,  1          // InterfaceMethod java/lang/Runnable.run:()V
      16: aload_0
      17: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
      20: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      25: lstore        4
      27: aload_0
      28: lload         4
      30: lload_2
      31: lsub
      32: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      35: invokevirtual #97                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      38: goto          68
      41: astore        6
      43: aload_0
      44: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
      47: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      52: lstore        7
      54: aload_0
      55: lload         7
      57: lload_2
      58: lsub
      59: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      62: invokevirtual #97                 // Method record:(JLjava/util/concurrent/TimeUnit;)V
      65: aload         6
      67: athrow
      68: return
    Exception table:
       from    to  target type
          10    16    41   any
          41    43    41   any

  public final void record(long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          52
       6: aload_0
       7: getfield      #39                 // Field histogram:Lio/micrometer/core/instrument/distribution/Histogram;
      10: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      13: lload_1
      14: aload_3
      15: invokevirtual #124                // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      18: invokeinterface #128,  3          // InterfaceMethod io/micrometer/core/instrument/distribution/Histogram.recordLong:(J)V
      23: aload_0
      24: lload_1
      25: aload_3
      26: invokevirtual #134                // Method recordNonNegative:(JLjava/util/concurrent/TimeUnit;)V
      29: aload_0
      30: getfield      #12                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
      33: ifnull        52
      36: aload_0
      37: getfield      #12                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
      40: aload_0
      41: getfield      #16                 // Field clock:Lio/micrometer/core/instrument/Clock;
      44: invokeinterface #101,  1          // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      49: invokevirtual #137                // Method org/LatencyUtils/IntervalEstimator.recordInterval:(J)V
      52: return

  protected abstract void recordNonNegative(long, java.util.concurrent.TimeUnit);

  public io.micrometer.core.instrument.distribution.HistogramSnapshot takeSnapshot();
    Code:
       0: aload_0
       1: getfield      #39                 // Field histogram:Lio/micrometer/core/instrument/distribution/Histogram;
       4: aload_0
       5: invokevirtual #142                // Method count:()J
       8: aload_0
       9: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      12: invokevirtual #145                // Method totalTime:(Ljava/util/concurrent/TimeUnit;)D
      15: aload_0
      16: getstatic     #92                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      19: invokevirtual #149                // Method max:(Ljava/util/concurrent/TimeUnit;)D
      22: invokeinterface #152,  7          // InterfaceMethod io/micrometer/core/instrument/distribution/Histogram.takeSnapshot:(JDD)Lio/micrometer/core/instrument/distribution/HistogramSnapshot;
      27: areturn

  public java.util.concurrent.TimeUnit baseTimeUnit();
    Code:
       0: aload_0
       1: getfield      #20                 // Field baseTimeUnit:Ljava/util/concurrent/TimeUnit;
       4: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #156                // Method io/micrometer/core/instrument/util/MeterEquivalence.equals:(Lio/micrometer/core/instrument/Meter;Ljava/lang/Object;)Z
       5: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokestatic  #162                // Method io/micrometer/core/instrument/util/MeterEquivalence.hashCode:(Lio/micrometer/core/instrument/Meter;)I
       4: ireturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #39                 // Field histogram:Lio/micrometer/core/instrument/distribution/Histogram;
       4: invokeinterface #166,  1          // InterfaceMethod io/micrometer/core/instrument/distribution/Histogram.close:()V
       9: aload_0
      10: getfield      #71                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
      13: ifnull        23
      16: aload_0
      17: getfield      #71                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
      20: invokevirtual #169                // Method org/LatencyUtils/PauseDetector.shutdown:()V
      23: return

  private void lambda$initPauseDetector$1(long, long);
    Code:
       0: aload_0
       1: getfield      #12                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
       4: ifnull        39
       7: aload_0
       8: getfield      #12                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
      11: lload_3
      12: invokevirtual #172                // Method org/LatencyUtils/IntervalEstimator.getEstimatedInterval:(J)J
      15: lstore        5
      17: lload_1
      18: lload         5
      20: lsub
      21: lstore        7
      23: lload         7
      25: lload         5
      27: lcmp
      28: iflt          39
      31: aload_0
      32: lload         7
      34: lload         5
      36: invokespecial #176                // Method recordValueWithExpectedInterval:(JJ)V
      39: return

  private static org.LatencyUtils.PauseDetector lambda$initPauseDetector$0(io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: aload_0
       1: instanceof    #180                // class io/micrometer/core/instrument/distribution/pause/ClockDriftPauseDetector
       4: ifeq          36
       7: aload_0
       8: checkcast     #180                // class io/micrometer/core/instrument/distribution/pause/ClockDriftPauseDetector
      11: astore_1
      12: new           #75                 // class org/LatencyUtils/SimplePauseDetector
      15: dup
      16: aload_1
      17: invokevirtual #182                // Method io/micrometer/core/instrument/distribution/pause/ClockDriftPauseDetector.getSleepInterval:()Ljava/time/Duration;
      20: invokevirtual #186                // Method java/time/Duration.toNanos:()J
      23: aload_1
      24: invokevirtual #191                // Method io/micrometer/core/instrument/distribution/pause/ClockDriftPauseDetector.getPauseThreshold:()Ljava/time/Duration;
      27: invokevirtual #186                // Method java/time/Duration.toNanos:()J
      30: iconst_1
      31: iconst_0
      32: invokespecial #194                // Method org/LatencyUtils/SimplePauseDetector."<init>":(JJIZ)V
      35: areturn
      36: aconst_null
      37: areturn

  static {};
    Code:
       0: new           #197                // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #199                // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #55                 // Field pauseDetectorCache:Ljava/util/Map;
      10: return
}
