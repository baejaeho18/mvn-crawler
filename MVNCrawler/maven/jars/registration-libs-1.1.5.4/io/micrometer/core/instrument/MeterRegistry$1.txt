Compiled from "MeterRegistry.java"
class io.micrometer.core.instrument.MeterRegistry$1 implements io.micrometer.core.instrument.TimeGauge {
  final io.micrometer.core.instrument.Meter$Id val$withUnit;

  final io.micrometer.core.instrument.Gauge val$gauge;

  final io.micrometer.core.instrument.MeterRegistry this$0;

  io.micrometer.core.instrument.MeterRegistry$1();
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/micrometer/core/instrument/MeterRegistry;
       5: aload_0
       6: aload_2
       7: putfield      #7                  // Field val$withUnit:Lio/micrometer/core/instrument/Meter$Id;
      10: aload_0
      11: aload_3
      12: putfield      #11                 // Field val$gauge:Lio/micrometer/core/instrument/Gauge;
      15: aload_0
      16: invokespecial #15                 // Method java/lang/Object."<init>":()V
      19: return

  public io.micrometer.core.instrument.Meter$Id getId();
    Code:
       0: aload_0
       1: getfield      #7                  // Field val$withUnit:Lio/micrometer/core/instrument/Meter$Id;
       4: areturn

  public double value();
    Code:
       0: aload_0
       1: getfield      #11                 // Field val$gauge:Lio/micrometer/core/instrument/Gauge;
       4: invokeinterface #21,  1           // InterfaceMethod io/micrometer/core/instrument/Gauge.value:()D
       9: dreturn

  public java.util.concurrent.TimeUnit baseTimeUnit();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/micrometer/core/instrument/MeterRegistry;
       4: invokevirtual #27                 // Method io/micrometer/core/instrument/MeterRegistry.getBaseTimeUnit:()Ljava/util/concurrent/TimeUnit;
       7: areturn
}
