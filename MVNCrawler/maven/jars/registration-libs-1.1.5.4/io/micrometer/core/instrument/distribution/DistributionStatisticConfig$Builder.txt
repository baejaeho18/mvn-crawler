Compiled from "DistributionStatisticConfig.java"
public class io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder {
  private final io.micrometer.core.instrument.distribution.DistributionStatisticConfig config;

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class io/micrometer/core/instrument/distribution/DistributionStatisticConfig
       8: dup
       9: invokespecial #9                  // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig."<init>":()V
      12: putfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      15: return

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilesHistogram(java.lang.Boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #16                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$002:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Boolean;)Ljava/lang/Boolean;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentiles(double...);
    Code:
       0: aload_0
       1: getfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #20                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$102:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;[D)[D
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilePrecision(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #24                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$202:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Integer;)Ljava/lang/Integer;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder sla(double...);
    Code:
       0: aload_0
       1: getfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #28                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$302:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;[D)[D
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder sla(long...);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: aload_0
       5: goto          26
       8: aload_0
       9: aload_1
      10: invokestatic  #31                 // InterfaceMethod java/util/stream/LongStream.of:([J)Ljava/util/stream/LongStream;
      13: invokeinterface #37,  1           // InterfaceMethod java/util/stream/LongStream.asDoubleStream:()Ljava/util/stream/DoubleStream;
      18: invokeinterface #41,  1           // InterfaceMethod java/util/stream/DoubleStream.toArray:()[D
      23: invokevirtual #47                 // Method sla:([D)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      26: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder minimumExpectedValue(java.lang.Long);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: aload_0
       5: goto          20
       8: aload_0
       9: aload_1
      10: invokevirtual #51                 // Method java/lang/Long.longValue:()J
      13: l2d
      14: invokestatic  #57                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      17: invokevirtual #63                 // Method minimumExpectedValue:(Ljava/lang/Double;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      20: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder minimumExpectedValue(java.lang.Double);
    Code:
       0: aload_0
       1: getfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #67                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$402:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Double;)Ljava/lang/Double;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder maximumExpectedValue(java.lang.Long);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: aload_0
       5: goto          20
       8: aload_0
       9: aload_1
      10: invokevirtual #51                 // Method java/lang/Long.longValue:()J
      13: l2d
      14: invokestatic  #57                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      17: invokevirtual #71                 // Method maximumExpectedValue:(Ljava/lang/Double;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      20: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder maximumExpectedValue(java.lang.Double);
    Code:
       0: aload_0
       1: getfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #74                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$502:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Double;)Ljava/lang/Double;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder expiry(java.time.Duration);
    Code:
       0: aload_0
       1: getfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #77                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$602:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/time/Duration;)Ljava/time/Duration;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder bufferLength(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #81                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$702:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Integer;)Ljava/lang/Integer;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig build();
    Code:
       0: aload_0
       1: getfield      #10                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: areturn
}
