Compiled from "CountedAspect.java"
public class io.micrometer.core.aop.CountedAspect {
  private static final java.lang.String RESULT_TAG;

  private static final java.lang.String EXCEPTION_TAG;

  private final io.micrometer.core.instrument.MeterRegistry meterRegistry;

  private final java.util.function.Function<org.aspectj.lang.ProceedingJoinPoint, java.lang.Iterable<io.micrometer.core.instrument.Tag>> tagsBasedOnJoinPoint;

  public io.micrometer.core.aop.CountedAspect(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #1,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       7: invokespecial #5                  // Method "<init>":(Lio/micrometer/core/instrument/MeterRegistry;Ljava/util/function/Function;)V
      10: return

  public io.micrometer.core.aop.CountedAspect(io.micrometer.core.instrument.MeterRegistry, java.util.function.Function<org.aspectj.lang.ProceedingJoinPoint, java.lang.Iterable<io.micrometer.core.instrument.Tag>>);
    Code:
       0: aload_0
       1: invokespecial #11                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #16                 // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
       9: aload_0
      10: aload_2
      11: putfield      #20                 // Field tagsBasedOnJoinPoint:Ljava/util/function/Function;
      14: return

  public java.lang.Object interceptAndRecord(org.aspectj.lang.ProceedingJoinPoint, io.micrometer.core.annotation.Counted) throws java.lang.Throwable;
    Code:
       0: aload_1
       1: invokeinterface #24,  1           // InterfaceMethod org/aspectj/lang/ProceedingJoinPoint.proceed:()Ljava/lang/Object;
       6: astore_3
       7: aload_2
       8: invokeinterface #30,  1           // InterfaceMethod io/micrometer/core/annotation/Counted.recordFailuresOnly:()Z
      13: ifne          26
      16: aload_0
      17: aload_1
      18: aload_2
      19: ldc           #36                 // String none
      21: ldc           #38                 // String success
      23: invokespecial #40                 // Method record:(Lorg/aspectj/lang/ProceedingJoinPoint;Lio/micrometer/core/annotation/Counted;Ljava/lang/String;Ljava/lang/String;)V
      26: aload_3
      27: areturn
      28: astore_3
      29: aload_0
      30: aload_1
      31: aload_2
      32: aload_3
      33: invokevirtual #46                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      36: invokevirtual #50                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      39: ldc           #56                 // String failure
      41: invokespecial #40                 // Method record:(Lorg/aspectj/lang/ProceedingJoinPoint;Lio/micrometer/core/annotation/Counted;Ljava/lang/String;Ljava/lang/String;)V
      44: aload_3
      45: athrow
    Exception table:
       from    to  target type
           0    27    28   Class java/lang/Throwable

  private void record(org.aspectj.lang.ProceedingJoinPoint, io.micrometer.core.annotation.Counted, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #58                 // Method counter:(Lorg/aspectj/lang/ProceedingJoinPoint;Lio/micrometer/core/annotation/Counted;)Lio/micrometer/core/instrument/Counter$Builder;
       6: ldc           #62                 // String exception
       8: aload_3
       9: invokevirtual #64                 // Method io/micrometer/core/instrument/Counter$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
      12: ldc           #70                 // String result
      14: aload         4
      16: invokevirtual #64                 // Method io/micrometer/core/instrument/Counter$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
      19: aload_2
      20: invokeinterface #72,  1           // InterfaceMethod io/micrometer/core/annotation/Counted.extraTags:()[Ljava/lang/String;
      25: invokevirtual #76                 // Method io/micrometer/core/instrument/Counter$Builder.tags:([Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
      28: aload_0
      29: getfield      #16                 // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
      32: invokevirtual #80                 // Method io/micrometer/core/instrument/Counter$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Counter;
      35: invokeinterface #84,  1           // InterfaceMethod io/micrometer/core/instrument/Counter.increment:()V
      40: return

  private io.micrometer.core.instrument.Counter$Builder counter(org.aspectj.lang.ProceedingJoinPoint, io.micrometer.core.annotation.Counted);
    Code:
       0: aload_2
       1: invokeinterface #89,  1           // InterfaceMethod io/micrometer/core/annotation/Counted.value:()Ljava/lang/String;
       6: invokestatic  #92                 // InterfaceMethod io/micrometer/core/instrument/Counter.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
       9: aload_0
      10: getfield      #20                 // Field tagsBasedOnJoinPoint:Ljava/util/function/Function;
      13: aload_1
      14: invokeinterface #96,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #101                // class java/lang/Iterable
      22: invokevirtual #103                // Method io/micrometer/core/instrument/Counter$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Counter$Builder;
      25: astore_3
      26: aload_2
      27: invokeinterface #106,  1          // InterfaceMethod io/micrometer/core/annotation/Counted.description:()Ljava/lang/String;
      32: astore        4
      34: aload         4
      36: invokevirtual #109                // Method java/lang/String.isEmpty:()Z
      39: ifne          49
      42: aload_3
      43: aload         4
      45: invokevirtual #114                // Method io/micrometer/core/instrument/Counter$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
      48: pop
      49: aload_3
      50: areturn

  private static java.lang.Iterable lambda$new$0(org.aspectj.lang.ProceedingJoinPoint);
    Code:
       0: iconst_4
       1: anewarray     #110                // class java/lang/String
       4: dup
       5: iconst_0
       6: ldc           #116                // String class
       8: aastore
       9: dup
      10: iconst_1
      11: aload_0
      12: invokeinterface #118,  1          // InterfaceMethod org/aspectj/lang/ProceedingJoinPoint.getStaticPart:()Lorg/aspectj/lang/JoinPoint$StaticPart;
      17: invokeinterface #122,  1          // InterfaceMethod org/aspectj/lang/JoinPoint$StaticPart.getSignature:()Lorg/aspectj/lang/Signature;
      22: invokeinterface #128,  1          // InterfaceMethod org/aspectj/lang/Signature.getDeclaringTypeName:()Ljava/lang/String;
      27: aastore
      28: dup
      29: iconst_2
      30: ldc           #133                // String method
      32: aastore
      33: dup
      34: iconst_3
      35: aload_0
      36: invokeinterface #118,  1          // InterfaceMethod org/aspectj/lang/ProceedingJoinPoint.getStaticPart:()Lorg/aspectj/lang/JoinPoint$StaticPart;
      41: invokeinterface #122,  1          // InterfaceMethod org/aspectj/lang/JoinPoint$StaticPart.getSignature:()Lorg/aspectj/lang/Signature;
      46: invokeinterface #135,  1          // InterfaceMethod org/aspectj/lang/Signature.getName:()Ljava/lang/String;
      51: aastore
      52: invokestatic  #138                // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      55: areturn
}
