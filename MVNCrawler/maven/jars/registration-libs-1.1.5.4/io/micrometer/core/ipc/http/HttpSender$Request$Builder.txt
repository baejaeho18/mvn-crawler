Compiled from "HttpSender.java"
public class io.micrometer.core.ipc.http.HttpSender$Request$Builder {
  private static final java.lang.String APPLICATION_JSON;

  private static final java.lang.String TEXT_PLAIN;

  private final java.net.URL url;

  private final io.micrometer.core.ipc.http.HttpSender sender;

  private byte[] entity;

  private io.micrometer.core.ipc.http.HttpSender$Method method;

  private java.util.Map<java.lang.String, java.lang.String> requestHeaders;

  io.micrometer.core.ipc.http.HttpSender$Request$Builder(java.lang.String, io.micrometer.core.ipc.http.HttpSender);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: newarray       byte
       8: putfield      #7                  // Field entity:[B
      11: aload_0
      12: new           #13                 // class java/util/LinkedHashMap
      15: dup
      16: invokespecial #15                 // Method java/util/LinkedHashMap."<init>":()V
      19: putfield      #16                 // Field requestHeaders:Ljava/util/Map;
      22: aload_0
      23: aload_1
      24: invokestatic  #20                 // Method java/net/URI.create:(Ljava/lang/String;)Ljava/net/URI;
      27: invokevirtual #26                 // Method java/net/URI.toURL:()Ljava/net/URL;
      30: putfield      #30                 // Field url:Ljava/net/URL;
      33: goto          46
      36: astore_3
      37: new           #36                 // class java/io/UncheckedIOException
      40: dup
      41: aload_3
      42: invokespecial #38                 // Method java/io/UncheckedIOException."<init>":(Ljava/io/IOException;)V
      45: athrow
      46: aload_0
      47: aload_2
      48: putfield      #41                 // Field sender:Lio/micrometer/core/ipc/http/HttpSender;
      51: return
    Exception table:
       from    to  target type
          22    33    36   Class java/net/MalformedURLException

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder withHeader(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #16                 // Field requestHeaders:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #45,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: aload_0
      13: areturn

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder withBasicAuthentication(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: ifnull        88
       4: aload_1
       5: invokestatic  #51                 // Method io/micrometer/core/instrument/util/StringUtils.isNotBlank:(Ljava/lang/String;)Z
       8: ifeq          88
      11: invokestatic  #57                 // Method java/util/Base64.getEncoder:()Ljava/util/Base64$Encoder;
      14: new           #63                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_1
      22: invokevirtual #66                 // Method java/lang/String.trim:()Ljava/lang/String;
      25: invokevirtual #72                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #76                 // String :
      30: invokevirtual #72                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_2
      34: ifnonnull     42
      37: ldc           #78                 // String
      39: goto          46
      42: aload_2
      43: invokevirtual #66                 // Method java/lang/String.trim:()Ljava/lang/String;
      46: invokevirtual #72                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: invokevirtual #80                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: getstatic     #83                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      55: invokevirtual #89                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      58: invokevirtual #93                 // Method java/util/Base64$Encoder.encodeToString:([B)Ljava/lang/String;
      61: astore_3
      62: aload_0
      63: ldc           #99                 // String Authorization
      65: new           #63                 // class java/lang/StringBuilder
      68: dup
      69: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
      72: ldc           #101                // String Basic
      74: invokevirtual #72                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: aload_3
      78: invokevirtual #72                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: invokevirtual #80                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokevirtual #103                // Method withHeader:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
      87: pop
      88: aload_0
      89: areturn

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder withJsonContent(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #107                // String application/json
       3: aload_1
       4: invokevirtual #109                // Method withContent:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: areturn

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder withPlainText(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #112                // String text/plain
       3: aload_1
       4: invokevirtual #109                // Method withContent:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: areturn

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder withContent(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #83                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       6: invokevirtual #89                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
       9: invokevirtual #114                // Method withContent:(Ljava/lang/String;[B)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
      12: areturn

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder withContent(java.lang.String, byte[]);
    Code:
       0: aload_0
       1: ldc           #117                // String Content-Type
       3: aload_1
       4: invokevirtual #103                // Method withHeader:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: pop
       8: aload_0
       9: aload_2
      10: putfield      #7                  // Field entity:[B
      13: aload_0
      14: areturn

  public io.micrometer.core.ipc.http.HttpSender$Request$Builder acceptJson();
    Code:
       0: aload_0
       1: ldc           #107                // String application/json
       3: invokevirtual #119                // Method accept:(Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       6: areturn

  public io.micrometer.core.ipc.http.HttpSender$Request$Builder accept(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #123                // String Accept
       3: aload_1
       4: invokevirtual #103                // Method withHeader:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: areturn

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder withMethod(io.micrometer.core.ipc.http.HttpSender$Method);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #125                // Field method:Lio/micrometer/core/ipc/http/HttpSender$Method;
       5: aload_0
       6: areturn

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder compress() throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc           #129                // String Content-Encoding
       3: ldc           #131                // String gzip
       5: invokevirtual #103                // Method withHeader:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       8: pop
       9: aload_0
      10: aload_0
      11: getfield      #7                  // Field entity:[B
      14: invokestatic  #133                // Method gzip:([B)[B
      17: putfield      #7                  // Field entity:[B
      20: aload_0
      21: areturn

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder compressWhen(java.util.function.Supplier<java.lang.Boolean>) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #136,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       6: checkcast     #142                // class java/lang/Boolean
       9: invokevirtual #144                // Method java/lang/Boolean.booleanValue:()Z
      12: ifeq          20
      15: aload_0
      16: invokevirtual #148                // Method compress:()Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
      19: areturn
      20: aload_0
      21: areturn

  private static byte[] gzip(byte[]) throws java.io.IOException;
    Code:
       0: new           #152                // class java/io/ByteArrayOutputStream
       3: dup
       4: aload_0
       5: arraylength
       6: invokespecial #154                // Method java/io/ByteArrayOutputStream."<init>":(I)V
       9: astore_1
      10: new           #157                // class java/util/zip/GZIPOutputStream
      13: dup
      14: aload_1
      15: invokespecial #159                // Method java/util/zip/GZIPOutputStream."<init>":(Ljava/io/OutputStream;)V
      18: astore_2
      19: aload_2
      20: aload_0
      21: invokevirtual #162                // Method java/util/zip/GZIPOutputStream.write:([B)V
      24: aload_2
      25: invokevirtual #166                // Method java/util/zip/GZIPOutputStream.close:()V
      28: goto          49
      31: astore_3
      32: aload_2
      33: invokevirtual #166                // Method java/util/zip/GZIPOutputStream.close:()V
      36: goto          47
      39: astore        4
      41: aload_3
      42: aload         4
      44: invokevirtual #171                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      47: aload_3
      48: athrow
      49: aload_1
      50: invokevirtual #175                // Method java/io/ByteArrayOutputStream.toByteArray:()[B
      53: areturn
    Exception table:
       from    to  target type
          19    24    31   Class java/lang/Throwable
          32    36    39   Class java/lang/Throwable

  public final io.micrometer.core.ipc.http.HttpSender$Request$Builder print();
    Code:
       0: getstatic     #179                // Field java/lang/System.out:Ljava/io/PrintStream;
       3: new           #185                // class io/micrometer/core/ipc/http/HttpSender$Request
       6: dup
       7: aload_0
       8: getfield      #30                 // Field url:Ljava/net/URL;
      11: aload_0
      12: getfield      #7                  // Field entity:[B
      15: aload_0
      16: getfield      #125                // Field method:Lio/micrometer/core/ipc/http/HttpSender$Method;
      19: aload_0
      20: getfield      #16                 // Field requestHeaders:Ljava/util/Map;
      23: invokespecial #187                // Method io/micrometer/core/ipc/http/HttpSender$Request."<init>":(Ljava/net/URL;[BLio/micrometer/core/ipc/http/HttpSender$Method;Ljava/util/Map;)V
      26: invokevirtual #190                // Method java/io/PrintStream.println:(Ljava/lang/Object;)V
      29: aload_0
      30: areturn

  public io.micrometer.core.ipc.http.HttpSender$Response send() throws java.lang.Throwable;
    Code:
       0: aload_0
       1: getfield      #41                 // Field sender:Lio/micrometer/core/ipc/http/HttpSender;
       4: new           #185                // class io/micrometer/core/ipc/http/HttpSender$Request
       7: dup
       8: aload_0
       9: getfield      #30                 // Field url:Ljava/net/URL;
      12: aload_0
      13: getfield      #7                  // Field entity:[B
      16: aload_0
      17: getfield      #125                // Field method:Lio/micrometer/core/ipc/http/HttpSender$Method;
      20: aload_0
      21: getfield      #16                 // Field requestHeaders:Ljava/util/Map;
      24: invokespecial #187                // Method io/micrometer/core/ipc/http/HttpSender$Request."<init>":(Ljava/net/URL;[BLio/micrometer/core/ipc/http/HttpSender$Method;Ljava/util/Map;)V
      27: invokeinterface #196,  2          // InterfaceMethod io/micrometer/core/ipc/http/HttpSender.send:(Lio/micrometer/core/ipc/http/HttpSender$Request;)Lio/micrometer/core/ipc/http/HttpSender$Response;
      32: areturn
}
