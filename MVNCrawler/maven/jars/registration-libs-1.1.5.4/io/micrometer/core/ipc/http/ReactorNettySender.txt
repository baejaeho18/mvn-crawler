Compiled from "ReactorNettySender.java"
public class io.micrometer.core.ipc.http.ReactorNettySender implements io.micrometer.core.ipc.http.HttpSender {
  private final reactor.netty.http.client.HttpClient httpClient;

  public io.micrometer.core.ipc.http.ReactorNettySender(reactor.netty.http.client.HttpClient);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #7                  // Field httpClient:Lreactor/netty/http/client/HttpClient;
       9: return

  public io.micrometer.core.ipc.http.ReactorNettySender();
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method reactor/netty/http/client/HttpClient.create:()Lreactor/netty/http/client/HttpClient;
       4: invokespecial #19                 // Method "<init>":(Lreactor/netty/http/client/HttpClient;)V
       7: return

  public io.micrometer.core.ipc.http.HttpSender$Response send(io.micrometer.core.ipc.http.HttpSender$Request);
    Code:
       0: aload_0
       1: getfield      #7                  // Field httpClient:Lreactor/netty/http/client/HttpClient;
       4: aload_0
       5: aload_1
       6: invokevirtual #22                 // Method io/micrometer/core/ipc/http/HttpSender$Request.getMethod:()Lio/micrometer/core/ipc/http/HttpSender$Method;
       9: invokespecial #28                 // Method toNettyHttpMethod:(Lio/micrometer/core/ipc/http/HttpSender$Method;)Lio/netty/handler/codec/http/HttpMethod;
      12: invokevirtual #32                 // Method reactor/netty/http/client/HttpClient.request:(Lio/netty/handler/codec/http/HttpMethod;)Lreactor/netty/http/client/HttpClient$RequestSender;
      15: aload_1
      16: invokevirtual #36                 // Method io/micrometer/core/ipc/http/HttpSender$Request.getUrl:()Ljava/net/URL;
      19: invokevirtual #40                 // Method java/net/URL.toString:()Ljava/lang/String;
      22: invokeinterface #46,  2           // InterfaceMethod reactor/netty/http/client/HttpClient$RequestSender.uri:(Ljava/lang/String;)Lreactor/netty/http/client/HttpClient$UriConfiguration;
      27: checkcast     #47                 // class reactor/netty/http/client/HttpClient$RequestSender
      30: aload_1
      31: invokedynamic #52,  0             // InvokeDynamic #0:apply:(Lio/micrometer/core/ipc/http/HttpSender$Request;)Ljava/util/function/BiFunction;
      36: invokeinterface #56,  2           // InterfaceMethod reactor/netty/http/client/HttpClient$RequestSender.send:(Ljava/util/function/BiFunction;)Lreactor/netty/http/client/HttpClient$ResponseReceiver;
      41: invokedynamic #60,  0             // InvokeDynamic #1:apply:()Ljava/util/function/BiFunction;
      46: invokeinterface #63,  2           // InterfaceMethod reactor/netty/http/client/HttpClient$ResponseReceiver.responseSingle:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      51: invokevirtual #69                 // Method reactor/core/publisher/Mono.block:()Ljava/lang/Object;
      54: checkcast     #75                 // class reactor/util/function/Tuple2
      57: astore_2
      58: new           #77                 // class io/micrometer/core/ipc/http/HttpSender$Response
      61: dup
      62: aload_2
      63: invokevirtual #79                 // Method reactor/util/function/Tuple2.getT1:()Ljava/lang/Object;
      66: checkcast     #82                 // class java/lang/Integer
      69: invokevirtual #84                 // Method java/lang/Integer.intValue:()I
      72: aload_2
      73: invokevirtual #88                 // Method reactor/util/function/Tuple2.getT2:()Ljava/lang/Object;
      76: checkcast     #91                 // class java/lang/String
      79: invokespecial #93                 // Method io/micrometer/core/ipc/http/HttpSender$Response."<init>":(ILjava/lang/String;)V
      82: areturn

  private io.netty.handler.codec.http.HttpMethod toNettyHttpMethod(io.micrometer.core.ipc.http.HttpSender$Method);
    Code:
       0: getstatic     #96                 // Field io/micrometer/core/ipc/http/ReactorNettySender$1.$SwitchMap$io$micrometer$core$ipc$http$HttpSender$Method:[I
       3: aload_1
       4: invokevirtual #102                // Method io/micrometer/core/ipc/http/HttpSender$Method.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 6
                     1: 48
                     2: 52
                     3: 56
                     4: 60
                     5: 64
                     6: 68
               default: 72
          }
      48: getstatic     #107                // Field io/netty/handler/codec/http/HttpMethod.PUT:Lio/netty/handler/codec/http/HttpMethod;
      51: areturn
      52: getstatic     #113                // Field io/netty/handler/codec/http/HttpMethod.POST:Lio/netty/handler/codec/http/HttpMethod;
      55: areturn
      56: getstatic     #116                // Field io/netty/handler/codec/http/HttpMethod.HEAD:Lio/netty/handler/codec/http/HttpMethod;
      59: areturn
      60: getstatic     #119                // Field io/netty/handler/codec/http/HttpMethod.GET:Lio/netty/handler/codec/http/HttpMethod;
      63: areturn
      64: getstatic     #122                // Field io/netty/handler/codec/http/HttpMethod.DELETE:Lio/netty/handler/codec/http/HttpMethod;
      67: areturn
      68: getstatic     #125                // Field io/netty/handler/codec/http/HttpMethod.OPTIONS:Lio/netty/handler/codec/http/HttpMethod;
      71: areturn
      72: new           #128                // class java/lang/UnsupportedOperationException
      75: dup
      76: new           #130                // class java/lang/StringBuilder
      79: dup
      80: invokespecial #132                // Method java/lang/StringBuilder."<init>":()V
      83: ldc           #133                // String http method
      85: invokevirtual #135                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: aload_1
      89: invokevirtual #139                // Method io/micrometer/core/ipc/http/HttpSender$Method.toString:()Ljava/lang/String;
      92: invokevirtual #135                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: ldc           #140                // String  is not supported by the reactor netty client
      97: invokevirtual #135                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: invokevirtual #142                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     103: invokespecial #143                // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
     106: athrow

  private static reactor.core.publisher.Mono lambda$send$1(reactor.netty.http.client.HttpClientResponse, reactor.netty.ByteBufMono);
    Code:
       0: aload_0
       1: invokeinterface #146,  1          // InterfaceMethod reactor/netty/http/client/HttpClientResponse.status:()Lio/netty/handler/codec/http/HttpResponseStatus;
       6: invokevirtual #152                // Method io/netty/handler/codec/http/HttpResponseStatus.code:()I
       9: invokestatic  #157                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      12: invokestatic  #161                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      15: aload_1
      16: invokevirtual #165                // Method reactor/netty/ByteBufMono.asString:()Lreactor/core/publisher/Mono;
      19: ldc           #171                // String
      21: invokevirtual #173                // Method reactor/core/publisher/Mono.defaultIfEmpty:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      24: invokevirtual #176                // Method reactor/core/publisher/Mono.zipWith:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      27: areturn

  private static org.reactivestreams.Publisher lambda$send$0(io.micrometer.core.ipc.http.HttpSender$Request, reactor.netty.http.client.HttpClientRequest, reactor.netty.NettyOutbound);
    Code:
       0: aload_0
       1: invokevirtual #180                // Method io/micrometer/core/ipc/http/HttpSender$Request.getRequestHeaders:()Ljava/util/Map;
       4: aload_1
       5: dup
       6: invokestatic  #184                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: invokedynamic #190,  0            // InvokeDynamic #2:accept:(Lreactor/netty/http/client/HttpClientRequest;)Ljava/util/function/BiConsumer;
      15: invokeinterface #194,  2          // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      20: aload_2
      21: aload_0
      22: invokevirtual #200                // Method io/micrometer/core/ipc/http/HttpSender$Request.getEntity:()[B
      25: invokestatic  #161                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      28: invokeinterface #204,  2          // InterfaceMethod reactor/netty/NettyOutbound.sendByteArray:(Lorg/reactivestreams/Publisher;)Lreactor/netty/NettyOutbound;
      33: areturn
}
