Compiled from "HttpSender.java"
public interface io.micrometer.core.ipc.http.HttpSender {
  public abstract io.micrometer.core.ipc.http.HttpSender$Response send(io.micrometer.core.ipc.http.HttpSender$Request) throws java.lang.Throwable;

  public default io.micrometer.core.ipc.http.HttpSender$Request$Builder post(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #1,  2            // InterfaceMethod newRequest:(Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: getstatic     #7                  // Field io/micrometer/core/ipc/http/HttpSender$Method.POST:Lio/micrometer/core/ipc/http/HttpSender$Method;
      10: invokevirtual #13                 // Method io/micrometer/core/ipc/http/HttpSender$Request$Builder.withMethod:(Lio/micrometer/core/ipc/http/HttpSender$Method;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
      13: areturn

  public default io.micrometer.core.ipc.http.HttpSender$Request$Builder head(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #1,  2            // InterfaceMethod newRequest:(Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: getstatic     #19                 // Field io/micrometer/core/ipc/http/HttpSender$Method.HEAD:Lio/micrometer/core/ipc/http/HttpSender$Method;
      10: invokevirtual #13                 // Method io/micrometer/core/ipc/http/HttpSender$Request$Builder.withMethod:(Lio/micrometer/core/ipc/http/HttpSender$Method;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
      13: areturn

  public default io.micrometer.core.ipc.http.HttpSender$Request$Builder put(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #1,  2            // InterfaceMethod newRequest:(Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: getstatic     #22                 // Field io/micrometer/core/ipc/http/HttpSender$Method.PUT:Lio/micrometer/core/ipc/http/HttpSender$Method;
      10: invokevirtual #13                 // Method io/micrometer/core/ipc/http/HttpSender$Request$Builder.withMethod:(Lio/micrometer/core/ipc/http/HttpSender$Method;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
      13: areturn

  public default io.micrometer.core.ipc.http.HttpSender$Request$Builder get(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #1,  2            // InterfaceMethod newRequest:(Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: getstatic     #25                 // Field io/micrometer/core/ipc/http/HttpSender$Method.GET:Lio/micrometer/core/ipc/http/HttpSender$Method;
      10: invokevirtual #13                 // Method io/micrometer/core/ipc/http/HttpSender$Request$Builder.withMethod:(Lio/micrometer/core/ipc/http/HttpSender$Method;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
      13: areturn

  public default io.micrometer.core.ipc.http.HttpSender$Request$Builder delete(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #1,  2            // InterfaceMethod newRequest:(Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: getstatic     #28                 // Field io/micrometer/core/ipc/http/HttpSender$Method.DELETE:Lio/micrometer/core/ipc/http/HttpSender$Method;
      10: invokevirtual #13                 // Method io/micrometer/core/ipc/http/HttpSender$Request$Builder.withMethod:(Lio/micrometer/core/ipc/http/HttpSender$Method;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
      13: areturn

  public default io.micrometer.core.ipc.http.HttpSender$Request$Builder options(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #1,  2            // InterfaceMethod newRequest:(Ljava/lang/String;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
       7: getstatic     #31                 // Field io/micrometer/core/ipc/http/HttpSender$Method.OPTIONS:Lio/micrometer/core/ipc/http/HttpSender$Method;
      10: invokevirtual #13                 // Method io/micrometer/core/ipc/http/HttpSender$Request$Builder.withMethod:(Lio/micrometer/core/ipc/http/HttpSender$Method;)Lio/micrometer/core/ipc/http/HttpSender$Request$Builder;
      13: areturn

  public default io.micrometer.core.ipc.http.HttpSender$Request$Builder newRequest(java.lang.String);
    Code:
       0: new           #14                 // class io/micrometer/core/ipc/http/HttpSender$Request$Builder
       3: dup
       4: aload_1
       5: aload_0
       6: invokespecial #34                 // Method io/micrometer/core/ipc/http/HttpSender$Request$Builder."<init>":(Ljava/lang/String;Lio/micrometer/core/ipc/http/HttpSender;)V
       9: areturn
}
