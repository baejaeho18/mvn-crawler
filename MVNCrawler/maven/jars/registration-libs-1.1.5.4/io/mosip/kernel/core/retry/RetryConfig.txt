Compiled from "RetryConfig.java"
public class io.mosip.kernel.core.retry.RetryConfig {
  private static final org.slf4j.Logger logger;

  private static final java.lang.String DEFAULT_RETRYABLE_EXCEPTIONS;

  private static final java.lang.String DEFAULT_NONRETRYABLE_EXCEPTIONS;

  private org.springframework.core.env.Environment environment;

  public io.mosip.kernel.core.retry.RetryConfig();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public org.springframework.retry.RetryPolicy retryPolicy(int, boolean);
    Code:
       0: iload_1
       1: iconst_1
       2: iadd
       3: istore_3
       4: aload_0
       5: invokevirtual #3                  // Method getRetryableExceptionsFromConfig:()Ljava/util/Map;
       8: astore        4
      10: new           #4                  // class org/springframework/retry/policy/SimpleRetryPolicy
      13: dup
      14: iload_3
      15: aload         4
      17: iload_2
      18: iconst_0
      19: invokespecial #5                  // Method org/springframework/retry/policy/SimpleRetryPolicy."<init>":(ILjava/util/Map;ZZ)V
      22: astore        5
      24: aload_0
      25: invokevirtual #6                  // Method getNonRetryableExceptionsFromConfig:()Ljava/util/Map;
      28: astore        6
      30: new           #4                  // class org/springframework/retry/policy/SimpleRetryPolicy
      33: dup
      34: iload_3
      35: aload         6
      37: iload_2
      38: iconst_1
      39: invokespecial #5                  // Method org/springframework/retry/policy/SimpleRetryPolicy."<init>":(ILjava/util/Map;ZZ)V
      42: astore        7
      44: new           #7                  // class org/springframework/retry/policy/CompositeRetryPolicy
      47: dup
      48: invokespecial #8                  // Method org/springframework/retry/policy/CompositeRetryPolicy."<init>":()V
      51: astore        8
      53: aload         8
      55: iconst_0
      56: invokevirtual #9                  // Method org/springframework/retry/policy/CompositeRetryPolicy.setOptimistic:(Z)V
      59: aload         8
      61: iconst_2
      62: anewarray     #10                 // class org/springframework/retry/RetryPolicy
      65: dup
      66: iconst_0
      67: aload         5
      69: aastore
      70: dup
      71: iconst_1
      72: aload         7
      74: aastore
      75: invokevirtual #11                 // Method org/springframework/retry/policy/CompositeRetryPolicy.setPolicies:([Lorg/springframework/retry/RetryPolicy;)V
      78: aload         8
      80: areturn

  protected java.util.Map<java.lang.Class<? extends java.lang.Throwable>, java.lang.Boolean> getRetryableExceptionsFromConfig();
    Code:
       0: aload_0
       1: ldc           #12                 // String kernel.retry.retryable.exceptions
       3: getstatic     #13                 // Field DEFAULT_RETRYABLE_EXCEPTIONS:Ljava/lang/String;
       6: iconst_1
       7: invokevirtual #14                 // Method getExceptionsMapFromConfig:(Ljava/lang/String;Ljava/lang/String;Z)Ljava/util/Map;
      10: areturn

  private java.util.Map<java.lang.Class<? extends java.lang.Throwable>, java.lang.Boolean> getNonRetryableExceptionsFromConfig();
    Code:
       0: aload_0
       1: ldc           #15                 // String kernel.retry.nonretryable.exceptions
       3: getstatic     #16                 // Field DEFAULT_NONRETRYABLE_EXCEPTIONS:Ljava/lang/String;
       6: iconst_0
       7: invokevirtual #14                 // Method getExceptionsMapFromConfig:(Ljava/lang/String;Ljava/lang/String;Z)Ljava/util/Map;
      10: areturn

  private java.util.Map<java.lang.Class<? extends java.lang.Throwable>, java.lang.Boolean> getExceptionsMapFromConfig(java.lang.String, java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #17                 // Field environment:Lorg/springframework/core/env/Environment;
       4: aload_1
       5: aload_2
       6: invokeinterface #18,  3           // InterfaceMethod org/springframework/core/env/Environment.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      11: astore        4
      13: aload         4
      15: ldc           #19                 // String ,
      17: invokevirtual #20                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      20: invokestatic  #21                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      23: invokedynamic #22,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      28: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      33: aload_0
      34: invokedynamic #24,  0             // InvokeDynamic #1:apply:(Lio/mosip/kernel/core/retry/RetryConfig;)Ljava/util/function/Function;
      39: invokeinterface #25,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      44: invokedynamic #26,  0             // InvokeDynamic #2:test:()Ljava/util/function/Predicate;
      49: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      54: invokedynamic #27,  0             // InvokeDynamic #3:test:()Ljava/util/function/Predicate;
      59: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      64: invokedynamic #28,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      69: invokeinterface #25,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      74: invokestatic  #29                 // InterfaceMethod java/util/function/Function.identity:()Ljava/util/function/Function;
      77: iload_3
      78: invokedynamic #30,  0             // InvokeDynamic #5:apply:(Z)Ljava/util/function/Function;
      83: invokestatic  #31                 // Method java/util/stream/Collectors.toMap:(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;
      86: invokeinterface #32,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      91: checkcast     #33                 // class java/util/Map
      94: areturn

  public org.springframework.retry.backoff.BackOffPolicy backOffPolicy(long, double, long);
    Code:
       0: new           #34                 // class org/springframework/retry/backoff/ExponentialBackOffPolicy
       3: dup
       4: invokespecial #35                 // Method org/springframework/retry/backoff/ExponentialBackOffPolicy."<init>":()V
       7: astore        7
       9: aload         7
      11: lload_1
      12: invokevirtual #36                 // Method org/springframework/retry/backoff/ExponentialBackOffPolicy.setInitialInterval:(J)V
      15: aload         7
      17: dload_3
      18: invokevirtual #37                 // Method org/springframework/retry/backoff/ExponentialBackOffPolicy.setMultiplier:(D)V
      21: aload         7
      23: lload         5
      25: invokevirtual #38                 // Method org/springframework/retry/backoff/ExponentialBackOffPolicy.setMaxInterval:(J)V
      28: aload         7
      30: areturn

  public org.springframework.retry.support.RetryTemplate retryTemplate(org.springframework.retry.RetryPolicy, org.springframework.retry.backoff.BackOffPolicy, org.springframework.retry.RetryListener);
    Code:
       0: new           #39                 // class org/springframework/retry/support/RetryTemplate
       3: dup
       4: invokespecial #40                 // Method org/springframework/retry/support/RetryTemplate."<init>":()V
       7: astore        4
       9: aload         4
      11: aload_1
      12: invokevirtual #41                 // Method org/springframework/retry/support/RetryTemplate.setRetryPolicy:(Lorg/springframework/retry/RetryPolicy;)V
      15: aload         4
      17: aload_2
      18: invokevirtual #42                 // Method org/springframework/retry/support/RetryTemplate.setBackOffPolicy:(Lorg/springframework/retry/backoff/BackOffPolicy;)V
      21: aload         4
      23: iconst_1
      24: invokevirtual #43                 // Method org/springframework/retry/support/RetryTemplate.setThrowLastExceptionOnExhausted:(Z)V
      27: aload         4
      29: iconst_1
      30: anewarray     #44                 // class org/springframework/retry/RetryListener
      33: dup
      34: iconst_0
      35: aload_3
      36: aastore
      37: invokevirtual #45                 // Method org/springframework/retry/support/RetryTemplate.setListeners:([Lorg/springframework/retry/RetryListener;)V
      40: aload         4
      42: areturn

  private static java.lang.Boolean lambda$getExceptionsMapFromConfig$4(boolean, java.lang.Class);
    Code:
       0: iload_0
       1: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       4: areturn

  private static java.lang.Class lambda$getExceptionsMapFromConfig$3(java.lang.Class);
    Code:
       0: aload_0
       1: areturn

  private static boolean lambda$getExceptionsMapFromConfig$2(java.lang.Class);
    Code:
       0: ldc           #47                 // class java/lang/Throwable
       2: aload_0
       3: invokevirtual #48                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       6: ireturn

  private java.lang.Class lambda$getExceptionsMapFromConfig$1(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #49                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       4: areturn
       5: astore_2
       6: getstatic     #51                 // Field logger:Lorg/slf4j/Logger;
       9: ldc           #52                 // String
      11: iconst_4
      12: anewarray     #53                 // class java/lang/Object
      15: dup
      16: iconst_0
      17: aload_0
      18: invokevirtual #54                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: invokevirtual #55                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      24: aastore
      25: dup
      26: iconst_1
      27: ldc           #56                 // String getExceptionsMapFromConfig
      29: aastore
      30: dup
      31: iconst_2
      32: aload_2
      33: invokevirtual #57                 // Method java/lang/ClassNotFoundException.getMessage:()Ljava/lang/String;
      36: aastore
      37: dup
      38: iconst_3
      39: aload_2
      40: aastore
      41: invokeinterface #58,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
      46: aconst_null
      47: areturn
    Exception table:
       from    to  target type
           0     4     5   Class java/lang/ClassNotFoundException

  private static boolean lambda$getExceptionsMapFromConfig$0(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method java/lang/String.isEmpty:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  static {};
    Code:
       0: ldc           #60                 // class io/mosip/kernel/core/exception/ExceptionUtils
       2: invokestatic  #61                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #51                 // Field logger:Lorg/slf4j/Logger;
       8: ldc           #62                 // class java/lang/Exception
      10: invokevirtual #63                 // Method java/lang/Class.getName:()Ljava/lang/String;
      13: putstatic     #13                 // Field DEFAULT_RETRYABLE_EXCEPTIONS:Ljava/lang/String;
      16: ldc           #64                 // class java/lang/Runtime
      18: invokevirtual #63                 // Method java/lang/Class.getName:()Ljava/lang/String;
      21: putstatic     #16                 // Field DEFAULT_NONRETRYABLE_EXCEPTIONS:Ljava/lang/String;
      24: return
}
