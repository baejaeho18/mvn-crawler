Compiled from "InFlightMetadataCollector.java"
public interface org.hibernate.boot.spi.InFlightMetadataCollector extends org.hibernate.engine.spi.Mapping,org.hibernate.boot.spi.MetadataImplementor {
  public abstract void addEntityBinding(org.hibernate.mapping.PersistentClass) throws org.hibernate.DuplicateMappingException;

  public abstract java.util.Map<java.lang.String, org.hibernate.mapping.PersistentClass> getEntityBindingMap();

  public abstract void addImport(java.lang.String, java.lang.String) throws org.hibernate.DuplicateMappingException;

  public abstract void addCollectionBinding(org.hibernate.mapping.Collection) throws org.hibernate.DuplicateMappingException;

  public abstract org.hibernate.mapping.Table addTable(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean);

  public abstract org.hibernate.mapping.Table addDenormalizedTable(java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, org.hibernate.mapping.Table) throws org.hibernate.DuplicateMappingException;

  public abstract void addNamedQuery(org.hibernate.engine.spi.NamedQueryDefinition) throws org.hibernate.DuplicateMappingException;

  public abstract void addNamedNativeQuery(org.hibernate.engine.spi.NamedSQLQueryDefinition) throws org.hibernate.DuplicateMappingException;

  public abstract void addResultSetMapping(org.hibernate.engine.ResultSetMappingDefinition) throws org.hibernate.DuplicateMappingException;

  public abstract void addNamedProcedureCallDefinition(org.hibernate.cfg.annotations.NamedProcedureCallDefinition) throws org.hibernate.DuplicateMappingException;

  public abstract void addNamedEntityGraph(org.hibernate.cfg.annotations.NamedEntityGraphDefinition);

  public abstract void addTypeDefinition(org.hibernate.boot.model.TypeDefinition);

  public abstract void addFilterDefinition(org.hibernate.engine.spi.FilterDefinition);

  public abstract void addAuxiliaryDatabaseObject(org.hibernate.boot.model.relational.AuxiliaryDatabaseObject);

  public abstract void addFetchProfile(org.hibernate.mapping.FetchProfile);

  public abstract org.hibernate.type.TypeResolver getTypeResolver();

  public abstract org.hibernate.boot.model.relational.Database getDatabase();

  public abstract void addIdentifierGenerator(org.hibernate.boot.model.IdentifierGeneratorDefinition);

  public abstract void addAttributeConverter(org.hibernate.cfg.AttributeConverterDefinition);

  public abstract void addAttributeConverter(java.lang.Class<? extends javax.persistence.AttributeConverter>);

  public abstract org.hibernate.boot.spi.AttributeConverterAutoApplyHandler getAttributeConverterAutoApplyHandler();

  public abstract void addSecondPass(org.hibernate.cfg.SecondPass);

  public abstract void addSecondPass(org.hibernate.cfg.SecondPass, boolean);

  public abstract void addTableNameBinding(org.hibernate.boot.model.naming.Identifier, org.hibernate.mapping.Table);

  public abstract void addTableNameBinding(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.hibernate.mapping.Table);

  public abstract java.lang.String getLogicalTableName(org.hibernate.mapping.Table);

  public abstract java.lang.String getPhysicalTableName(org.hibernate.boot.model.naming.Identifier);

  public abstract java.lang.String getPhysicalTableName(java.lang.String);

  public abstract void addColumnNameBinding(org.hibernate.mapping.Table, org.hibernate.boot.model.naming.Identifier, org.hibernate.mapping.Column);

  public abstract void addColumnNameBinding(org.hibernate.mapping.Table, java.lang.String, org.hibernate.mapping.Column);

  public abstract java.lang.String getPhysicalColumnName(org.hibernate.mapping.Table, org.hibernate.boot.model.naming.Identifier) throws org.hibernate.MappingException;

  public abstract java.lang.String getPhysicalColumnName(org.hibernate.mapping.Table, java.lang.String) throws org.hibernate.MappingException;

  public abstract java.lang.String getLogicalColumnName(org.hibernate.mapping.Table, org.hibernate.boot.model.naming.Identifier);

  public abstract java.lang.String getLogicalColumnName(org.hibernate.mapping.Table, java.lang.String);

  public abstract void addDefaultIdentifierGenerator(org.hibernate.boot.model.IdentifierGeneratorDefinition);

  public abstract void addDefaultQuery(org.hibernate.engine.spi.NamedQueryDefinition);

  public abstract void addDefaultNamedNativeQuery(org.hibernate.engine.spi.NamedSQLQueryDefinition);

  public abstract void addDefaultResultSetMapping(org.hibernate.engine.ResultSetMappingDefinition);

  public abstract void addDefaultNamedProcedureCallDefinition(org.hibernate.cfg.annotations.NamedProcedureCallDefinition);

  public abstract void addAnyMetaDef(org.hibernate.annotations.AnyMetaDef);

  public abstract org.hibernate.annotations.AnyMetaDef getAnyMetaDef(java.lang.String);

  public abstract org.hibernate.cfg.AnnotatedClassType addClassType(org.hibernate.annotations.common.reflection.XClass);

  public abstract org.hibernate.cfg.AnnotatedClassType getClassType(org.hibernate.annotations.common.reflection.XClass);

  public abstract void addMappedSuperclass(java.lang.Class, org.hibernate.mapping.MappedSuperclass);

  public abstract org.hibernate.mapping.MappedSuperclass getMappedSuperclass(java.lang.Class);

  public abstract org.hibernate.cfg.PropertyData getPropertyAnnotatedWithMapsId(org.hibernate.annotations.common.reflection.XClass, java.lang.String);

  public abstract void addPropertyAnnotatedWithMapsId(org.hibernate.annotations.common.reflection.XClass, org.hibernate.cfg.PropertyData);

  public abstract void addPropertyAnnotatedWithMapsIdSpecj(org.hibernate.annotations.common.reflection.XClass, org.hibernate.cfg.PropertyData, java.lang.String);

  public abstract void addToOneAndIdProperty(org.hibernate.annotations.common.reflection.XClass, org.hibernate.cfg.PropertyData);

  public abstract org.hibernate.cfg.PropertyData getPropertyAnnotatedWithIdAndToOne(org.hibernate.annotations.common.reflection.XClass, java.lang.String);

  public abstract boolean isInSecondPass();

  public abstract org.hibernate.boot.spi.NaturalIdUniqueKeyBinder locateNaturalIdUniqueKeyBinder(java.lang.String);

  public abstract void registerNaturalIdUniqueKeyBinder(java.lang.String, org.hibernate.boot.spi.NaturalIdUniqueKeyBinder);

  public abstract org.hibernate.boot.internal.ClassmateContext getClassmateContext();

  public abstract void addDelayedPropertyReferenceHandler(org.hibernate.boot.spi.InFlightMetadataCollector$DelayedPropertyReferenceHandler);

  public abstract void addPropertyReference(java.lang.String, java.lang.String);

  public abstract void addUniquePropertyReference(java.lang.String, java.lang.String);

  public abstract void addPropertyReferencedAssociation(java.lang.String, java.lang.String, java.lang.String);

  public abstract java.lang.String getPropertyReferencedAssociation(java.lang.String, java.lang.String);

  public abstract void addMappedBy(java.lang.String, java.lang.String, java.lang.String);

  public abstract java.lang.String getFromMappedBy(java.lang.String, java.lang.String);

  public abstract void addUniqueConstraints(org.hibernate.mapping.Table, java.util.List);

  public abstract void addUniqueConstraintHolders(org.hibernate.mapping.Table, java.util.List<org.hibernate.cfg.UniqueConstraintHolder>);

  public abstract void addJpaIndexHolders(org.hibernate.mapping.Table, java.util.List<org.hibernate.cfg.JPAIndexHolder>);

  public abstract org.hibernate.boot.spi.InFlightMetadataCollector$EntityTableXref getEntityTableXref(java.lang.String);

  public abstract org.hibernate.boot.spi.InFlightMetadataCollector$EntityTableXref addEntityTableXref(java.lang.String, org.hibernate.boot.model.naming.Identifier, org.hibernate.mapping.Table, org.hibernate.boot.spi.InFlightMetadataCollector$EntityTableXref);

  public abstract java.util.Map<java.lang.String, org.hibernate.mapping.Join> getJoins(java.lang.String);
}
