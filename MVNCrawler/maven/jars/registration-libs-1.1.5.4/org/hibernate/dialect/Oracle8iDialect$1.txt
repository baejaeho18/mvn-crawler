Compiled from "Oracle8iDialect.java"
final class org.hibernate.dialect.Oracle8iDialect$1 extends org.hibernate.dialect.pagination.AbstractLimitHandler {
  org.hibernate.dialect.Oracle8iDialect$1();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/hibernate/dialect/pagination/AbstractLimitHandler."<init>":()V
       4: return

  public java.lang.String processSql(java.lang.String, org.hibernate.engine.spi.RowSelection);
    Code:
       0: aload_2
       1: invokestatic  #2                  // Method org/hibernate/dialect/pagination/LimitHelper.hasFirstRow:(Lorg/hibernate/engine/spi/RowSelection;)Z
       4: istore_3
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/String.trim:()Ljava/lang/String;
       9: astore_1
      10: iconst_0
      11: istore        4
      13: aload_1
      14: getstatic     #4                  // Field java/util/Locale.ROOT:Ljava/util/Locale;
      17: invokevirtual #5                  // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      20: ldc           #6                  // String  for update
      22: invokevirtual #7                  // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      25: ifeq          44
      28: aload_1
      29: iconst_0
      30: aload_1
      31: invokevirtual #8                  // Method java/lang/String.length:()I
      34: bipush        11
      36: isub
      37: invokevirtual #9                  // Method java/lang/String.substring:(II)Ljava/lang/String;
      40: astore_1
      41: iconst_1
      42: istore        4
      44: new           #10                 // class java/lang/StringBuilder
      47: dup
      48: aload_1
      49: invokevirtual #8                  // Method java/lang/String.length:()I
      52: bipush        100
      54: iadd
      55: invokespecial #11                 // Method java/lang/StringBuilder."<init>":(I)V
      58: astore        5
      60: iload_3
      61: ifeq          75
      64: aload         5
      66: ldc           #12                 // String select * from ( select row_.*, rownum rownum_ from (
      68: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: pop
      72: goto          83
      75: aload         5
      77: ldc           #14                 // String select * from (
      79: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: pop
      83: aload         5
      85: aload_1
      86: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: pop
      90: iload_3
      91: ifeq          105
      94: aload         5
      96: ldc           #15                 // String  ) row_ ) where rownum_ <= ? and rownum_ > ?
      98: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: pop
     102: goto          113
     105: aload         5
     107: ldc           #16                 // String  ) where rownum <= ?
     109: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: pop
     113: iload         4
     115: ifeq          126
     118: aload         5
     120: ldc           #6                  // String  for update
     122: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     125: pop
     126: aload         5
     128: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     131: areturn

  public boolean supportsLimit();
    Code:
       0: iconst_1
       1: ireturn

  public boolean bindLimitParametersInReverseOrder();
    Code:
       0: iconst_1
       1: ireturn

  public boolean useMaxForLimit();
    Code:
       0: iconst_1
       1: ireturn
}
