Compiled from "SQLServer2012LimitHandler.java"
public class org.hibernate.dialect.pagination.SQLServer2012LimitHandler extends org.hibernate.dialect.pagination.SQLServer2005LimitHandler {
  private boolean usedOffsetFetch;

  public org.hibernate.dialect.pagination.SQLServer2012LimitHandler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/hibernate/dialect/pagination/SQLServer2005LimitHandler."<init>":()V
       4: return

  public boolean supportsLimit();
    Code:
       0: iconst_1
       1: ireturn

  public boolean supportsVariableLimit();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.String processSql(java.lang.String, org.hibernate.engine.spi.RowSelection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method hasOrderBy:(Ljava/lang/String;)Z
       5: ifeq          30
       8: aload_0
       9: aload_2
      10: invokestatic  #3                  // Method org/hibernate/dialect/pagination/LimitHelper.useLimit:(Lorg/hibernate/dialect/pagination/LimitHandler;Lorg/hibernate/engine/spi/RowSelection;)Z
      13: ifne          18
      16: aload_1
      17: areturn
      18: aload_0
      19: aload_2
      20: aload_1
      21: aload_0
      22: aload_1
      23: invokespecial #4                  // Method getInsertPosition:(Ljava/lang/String;)I
      26: invokespecial #5                  // Method applyOffsetFetch:(Lorg/hibernate/engine/spi/RowSelection;Ljava/lang/String;I)Ljava/lang/String;
      29: areturn
      30: aload_0
      31: aload_1
      32: aload_2
      33: invokespecial #6                  // Method org/hibernate/dialect/pagination/SQLServer2005LimitHandler.processSql:(Ljava/lang/String;Lorg/hibernate/engine/spi/RowSelection;)Ljava/lang/String;
      36: areturn

  public boolean useMaxForLimit();
    Code:
       0: aload_0
       1: getfield      #7                  // Field usedOffsetFetch:Z
       4: ifeq          11
       7: iconst_0
       8: goto          15
      11: aload_0
      12: invokespecial #8                  // Method org/hibernate/dialect/pagination/SQLServer2005LimitHandler.useMaxForLimit:()Z
      15: ireturn

  public int convertToFirstRowValue(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field usedOffsetFetch:Z
       4: ifeq          9
       7: iload_1
       8: ireturn
       9: aload_0
      10: iload_1
      11: invokespecial #9                  // Method org/hibernate/dialect/pagination/SQLServer2005LimitHandler.convertToFirstRowValue:(I)I
      14: ireturn

  public int bindLimitParametersAtEndOfQuery(org.hibernate.engine.spi.RowSelection, java.sql.PreparedStatement, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field usedOffsetFetch:Z
       4: ifeq          28
       7: aload_1
       8: invokestatic  #10                 // Method org/hibernate/dialect/pagination/LimitHelper.hasFirstRow:(Lorg/hibernate/engine/spi/RowSelection;)Z
      11: ifne          28
      14: aload_2
      15: iload_3
      16: aload_0
      17: aload_1
      18: invokevirtual #11                 // Method getMaxOrLimit:(Lorg/hibernate/engine/spi/RowSelection;)I
      21: invokeinterface #12,  3           // InterfaceMethod java/sql/PreparedStatement.setInt:(II)V
      26: iconst_1
      27: ireturn
      28: aload_0
      29: aload_1
      30: aload_2
      31: iload_3
      32: invokespecial #13                 // Method org/hibernate/dialect/pagination/SQLServer2005LimitHandler.bindLimitParametersAtEndOfQuery:(Lorg/hibernate/engine/spi/RowSelection;Ljava/sql/PreparedStatement;I)I
      35: ireturn

  private java.lang.String getOffsetFetch(org.hibernate.engine.spi.RowSelection);
    Code:
       0: aload_1
       1: invokestatic  #10                 // Method org/hibernate/dialect/pagination/LimitHelper.hasFirstRow:(Lorg/hibernate/engine/spi/RowSelection;)Z
       4: ifne          10
       7: ldc           #14                 // String  offset 0 rows fetch next ? rows only
       9: areturn
      10: ldc           #15                 // String  offset ? rows fetch next ? rows only
      12: areturn

  private int getInsertPosition(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #16                 // Method java/lang/String.length:()I
       4: iconst_1
       5: isub
       6: istore_2
       7: iload_2
       8: ifle          50
      11: aload_1
      12: iload_2
      13: invokevirtual #17                 // Method java/lang/String.charAt:(I)C
      16: istore_3
      17: iload_3
      18: bipush        59
      20: if_icmpeq     44
      23: iload_3
      24: bipush        32
      26: if_icmpeq     44
      29: iload_3
      30: bipush        13
      32: if_icmpeq     44
      35: iload_3
      36: bipush        10
      38: if_icmpeq     44
      41: goto          50
      44: iinc          2, -1
      47: goto          7
      50: iload_2
      51: iconst_1
      52: iadd
      53: ireturn

  private java.lang.String applyOffsetFetch(org.hibernate.engine.spi.RowSelection, java.lang.String, int);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #7                  // Field usedOffsetFetch:Z
       5: new           #18                 // class java/lang/StringBuilder
       8: dup
       9: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      12: astore        4
      14: aload         4
      16: aload_2
      17: iconst_0
      18: iload_3
      19: invokevirtual #20                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      22: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: pop
      26: aload         4
      28: aload_0
      29: aload_1
      30: invokespecial #22                 // Method getOffsetFetch:(Lorg/hibernate/engine/spi/RowSelection;)Ljava/lang/String;
      33: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: pop
      37: iload_3
      38: aload_2
      39: invokevirtual #16                 // Method java/lang/String.length:()I
      42: if_icmple     58
      45: aload         4
      47: aload_2
      48: iload_3
      49: iconst_1
      50: isub
      51: invokevirtual #23                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      54: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: pop
      58: aload         4
      60: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: areturn

  private boolean hasOrderBy(java.lang.String);
    Code:
       0: iconst_0
       1: istore_2
       2: iconst_0
       3: istore_3
       4: iload_3
       5: aload_1
       6: invokevirtual #16                 // Method java/lang/String.length:()I
       9: if_icmpge     70
      12: aload_1
      13: iload_3
      14: invokevirtual #17                 // Method java/lang/String.charAt:(I)C
      17: istore        4
      19: iload         4
      21: bipush        40
      23: if_icmpne     32
      26: iinc          2, 1
      29: goto          42
      32: iload         4
      34: bipush        41
      36: if_icmpne     42
      39: iinc          2, -1
      42: iload_2
      43: ifne          64
      46: aload_1
      47: iload_3
      48: invokevirtual #23                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      51: invokevirtual #25                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      54: ldc           #26                 // String order by
      56: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      59: ifeq          64
      62: iconst_1
      63: ireturn
      64: iinc          3, 1
      67: goto          4
      70: iconst_0
      71: ireturn
}
