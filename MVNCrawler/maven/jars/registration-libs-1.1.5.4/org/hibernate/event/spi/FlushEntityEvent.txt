Compiled from "FlushEntityEvent.java"
public class org.hibernate.event.spi.FlushEntityEvent extends org.hibernate.event.spi.AbstractEvent {
  private java.lang.Object entity;

  private java.lang.Object[] propertyValues;

  private java.lang.Object[] databaseSnapshot;

  private int[] dirtyProperties;

  private boolean hasDirtyCollection;

  private boolean dirtyCheckPossible;

  private boolean dirtyCheckHandledByInterceptor;

  private org.hibernate.engine.spi.EntityEntry entityEntry;

  public org.hibernate.event.spi.FlushEntityEvent(org.hibernate.event.spi.EventSource, java.lang.Object, org.hibernate.engine.spi.EntityEntry);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/hibernate/event/spi/AbstractEvent."<init>":(Lorg/hibernate/event/spi/EventSource;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field entity:Ljava/lang/Object;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field entityEntry:Lorg/hibernate/engine/spi/EntityEntry;
      15: return

  public org.hibernate.engine.spi.EntityEntry getEntityEntry();
    Code:
       0: aload_0
       1: getfield      #3                  // Field entityEntry:Lorg/hibernate/engine/spi/EntityEntry;
       4: areturn

  public java.lang.Object[] getDatabaseSnapshot();
    Code:
       0: aload_0
       1: getfield      #4                  // Field databaseSnapshot:[Ljava/lang/Object;
       4: areturn

  public void setDatabaseSnapshot(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field databaseSnapshot:[Ljava/lang/Object;
       5: return

  public boolean hasDatabaseSnapshot();
    Code:
       0: aload_0
       1: getfield      #4                  // Field databaseSnapshot:[Ljava/lang/Object;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isDirtyCheckHandledByInterceptor();
    Code:
       0: aload_0
       1: getfield      #5                  // Field dirtyCheckHandledByInterceptor:Z
       4: ireturn

  public void setDirtyCheckHandledByInterceptor(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field dirtyCheckHandledByInterceptor:Z
       5: return

  public boolean isDirtyCheckPossible();
    Code:
       0: aload_0
       1: getfield      #6                  // Field dirtyCheckPossible:Z
       4: ireturn

  public void setDirtyCheckPossible(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field dirtyCheckPossible:Z
       5: return

  public int[] getDirtyProperties();
    Code:
       0: aload_0
       1: getfield      #7                  // Field dirtyProperties:[I
       4: areturn

  public void setDirtyProperties(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field dirtyProperties:[I
       5: return

  public boolean hasDirtyCollection();
    Code:
       0: aload_0
       1: getfield      #8                  // Field hasDirtyCollection:Z
       4: ireturn

  public void setHasDirtyCollection(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field hasDirtyCollection:Z
       5: return

  public java.lang.Object[] getPropertyValues();
    Code:
       0: aload_0
       1: getfield      #9                  // Field propertyValues:[Ljava/lang/Object;
       4: areturn

  public void setPropertyValues(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field propertyValues:[Ljava/lang/Object;
       5: return

  public java.lang.Object getEntity();
    Code:
       0: aload_0
       1: getfield      #2                  // Field entity:Ljava/lang/Object;
       4: areturn
}
