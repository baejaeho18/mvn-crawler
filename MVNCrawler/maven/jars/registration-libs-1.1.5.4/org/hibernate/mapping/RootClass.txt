Compiled from "RootClass.java"
public class org.hibernate.mapping.RootClass extends org.hibernate.mapping.PersistentClass implements org.hibernate.mapping.TableOwner {
  private static final org.hibernate.internal.CoreMessageLogger LOG;

  public static final java.lang.String DEFAULT_IDENTIFIER_COLUMN_NAME;

  public static final java.lang.String DEFAULT_DISCRIMINATOR_COLUMN_NAME;

  private org.hibernate.mapping.Property identifierProperty;

  private org.hibernate.mapping.KeyValue identifier;

  private org.hibernate.mapping.Property version;

  private boolean polymorphic;

  private java.lang.String cacheConcurrencyStrategy;

  private java.lang.String cacheRegionName;

  private java.lang.String naturalIdCacheRegionName;

  private boolean lazyPropertiesCacheable;

  private org.hibernate.mapping.Value discriminator;

  private boolean mutable;

  private boolean embeddedIdentifier;

  private boolean explicitPolymorphism;

  private java.lang.Class entityPersisterClass;

  private boolean forceDiscriminator;

  private java.lang.String where;

  private org.hibernate.mapping.Table table;

  private boolean discriminatorInsertable;

  private int nextSubclassId;

  private org.hibernate.mapping.Property declaredIdentifierProperty;

  private org.hibernate.mapping.Property declaredVersion;

  private boolean cachingExplicitlyRequested;

  public org.hibernate.mapping.RootClass(org.hibernate.boot.spi.MetadataBuildingContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/hibernate/mapping/PersistentClass."<init>":(Lorg/hibernate/boot/spi/MetadataBuildingContext;)V
       5: aload_0
       6: iconst_1
       7: putfield      #2                  // Field lazyPropertiesCacheable:Z
      10: aload_0
      11: iconst_1
      12: putfield      #3                  // Field mutable:Z
      15: aload_0
      16: iconst_1
      17: putfield      #4                  // Field discriminatorInsertable:Z
      20: return

  int nextSubclassId();
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field nextSubclassId:I
       5: iconst_1
       6: iadd
       7: dup_x1
       8: putfield      #5                  // Field nextSubclassId:I
      11: ireturn

  public int getSubclassId();
    Code:
       0: iconst_0
       1: ireturn

  public void setTable(org.hibernate.mapping.Table);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field table:Lorg/hibernate/mapping/Table;
       5: return

  public org.hibernate.mapping.Table getTable();
    Code:
       0: aload_0
       1: getfield      #6                  // Field table:Lorg/hibernate/mapping/Table;
       4: areturn

  public org.hibernate.mapping.Property getIdentifierProperty();
    Code:
       0: aload_0
       1: getfield      #7                  // Field identifierProperty:Lorg/hibernate/mapping/Property;
       4: areturn

  public org.hibernate.mapping.Property getDeclaredIdentifierProperty();
    Code:
       0: aload_0
       1: getfield      #8                  // Field declaredIdentifierProperty:Lorg/hibernate/mapping/Property;
       4: areturn

  public void setDeclaredIdentifierProperty(org.hibernate.mapping.Property);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field declaredIdentifierProperty:Lorg/hibernate/mapping/Property;
       5: return

  public org.hibernate.mapping.KeyValue getIdentifier();
    Code:
       0: aload_0
       1: getfield      #9                  // Field identifier:Lorg/hibernate/mapping/KeyValue;
       4: areturn

  public boolean hasIdentifierProperty();
    Code:
       0: aload_0
       1: getfield      #7                  // Field identifierProperty:Lorg/hibernate/mapping/Property;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public org.hibernate.mapping.Value getDiscriminator();
    Code:
       0: aload_0
       1: getfield      #10                 // Field discriminator:Lorg/hibernate/mapping/Value;
       4: areturn

  public boolean isInherited();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isPolymorphic();
    Code:
       0: aload_0
       1: getfield      #11                 // Field polymorphic:Z
       4: ireturn

  public void setPolymorphic(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field polymorphic:Z
       5: return

  public org.hibernate.mapping.RootClass getRootClass();
    Code:
       0: aload_0
       1: areturn

  public java.util.Iterator getPropertyClosureIterator();
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method getPropertyIterator:()Ljava/util/Iterator;
       4: areturn

  public java.util.Iterator getTableClosureIterator();
    Code:
       0: new           #13                 // class org/hibernate/internal/util/collections/SingletonIterator
       3: dup
       4: aload_0
       5: invokevirtual #14                 // Method getTable:()Lorg/hibernate/mapping/Table;
       8: invokespecial #15                 // Method org/hibernate/internal/util/collections/SingletonIterator."<init>":(Ljava/lang/Object;)V
      11: areturn

  public java.util.Iterator getKeyClosureIterator();
    Code:
       0: new           #13                 // class org/hibernate/internal/util/collections/SingletonIterator
       3: dup
       4: aload_0
       5: invokevirtual #16                 // Method getKey:()Lorg/hibernate/mapping/KeyValue;
       8: invokespecial #15                 // Method org/hibernate/internal/util/collections/SingletonIterator."<init>":(Ljava/lang/Object;)V
      11: areturn

  public void addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #17                 // Method org/hibernate/mapping/PersistentClass.addSubclass:(Lorg/hibernate/mapping/Subclass;)V
       5: aload_0
       6: iconst_1
       7: invokevirtual #18                 // Method setPolymorphic:(Z)V
      10: return

  public boolean isExplicitPolymorphism();
    Code:
       0: aload_0
       1: getfield      #19                 // Field explicitPolymorphism:Z
       4: ireturn

  public org.hibernate.mapping.Property getVersion();
    Code:
       0: aload_0
       1: getfield      #20                 // Field version:Lorg/hibernate/mapping/Property;
       4: areturn

  public org.hibernate.mapping.Property getDeclaredVersion();
    Code:
       0: aload_0
       1: getfield      #21                 // Field declaredVersion:Lorg/hibernate/mapping/Property;
       4: areturn

  public void setDeclaredVersion(org.hibernate.mapping.Property);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field declaredVersion:Lorg/hibernate/mapping/Property;
       5: return

  public void setVersion(org.hibernate.mapping.Property);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field version:Lorg/hibernate/mapping/Property;
       5: return

  public boolean isVersioned();
    Code:
       0: aload_0
       1: getfield      #20                 // Field version:Lorg/hibernate/mapping/Property;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isMutable();
    Code:
       0: aload_0
       1: getfield      #3                  // Field mutable:Z
       4: ireturn

  public boolean hasEmbeddedIdentifier();
    Code:
       0: aload_0
       1: getfield      #22                 // Field embeddedIdentifier:Z
       4: ireturn

  public java.lang.Class getEntityPersisterClass();
    Code:
       0: aload_0
       1: getfield      #23                 // Field entityPersisterClass:Ljava/lang/Class;
       4: areturn

  public org.hibernate.mapping.Table getRootTable();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getTable:()Lorg/hibernate/mapping/Table;
       4: areturn

  public void setEntityPersisterClass(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field entityPersisterClass:Ljava/lang/Class;
       5: return

  public org.hibernate.mapping.PersistentClass getSuperclass();
    Code:
       0: aconst_null
       1: areturn

  public org.hibernate.mapping.KeyValue getKey();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getIdentifier:()Lorg/hibernate/mapping/KeyValue;
       4: areturn

  public void setDiscriminator(org.hibernate.mapping.Value);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field discriminator:Lorg/hibernate/mapping/Value;
       5: return

  public void setEmbeddedIdentifier(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field embeddedIdentifier:Z
       5: return

  public void setExplicitPolymorphism(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #19                 // Field explicitPolymorphism:Z
       5: return

  public void setIdentifier(org.hibernate.mapping.KeyValue);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field identifier:Lorg/hibernate/mapping/KeyValue;
       5: return

  public void setIdentifierProperty(org.hibernate.mapping.Property);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field identifierProperty:Lorg/hibernate/mapping/Property;
       5: aload_1
       6: aload_0
       7: invokevirtual #25                 // Method org/hibernate/mapping/Property.setPersistentClass:(Lorg/hibernate/mapping/PersistentClass;)V
      10: return

  public void setMutable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field mutable:Z
       5: return

  public boolean isDiscriminatorInsertable();
    Code:
       0: aload_0
       1: getfield      #4                  // Field discriminatorInsertable:Z
       4: ireturn

  public void setDiscriminatorInsertable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field discriminatorInsertable:Z
       5: return

  public boolean isForceDiscriminator();
    Code:
       0: aload_0
       1: getfield      #26                 // Field forceDiscriminator:Z
       4: ireturn

  public void setForceDiscriminator(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field forceDiscriminator:Z
       5: return

  public java.lang.String getWhere();
    Code:
       0: aload_0
       1: getfield      #27                 // Field where:Ljava/lang/String;
       4: areturn

  public void setWhere(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field where:Ljava/lang/String;
       5: return

  public void validate(org.hibernate.engine.spi.Mapping) throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #28                 // Method org/hibernate/mapping/PersistentClass.validate:(Lorg/hibernate/engine/spi/Mapping;)V
       5: aload_0
       6: invokevirtual #24                 // Method getIdentifier:()Lorg/hibernate/mapping/KeyValue;
       9: aload_1
      10: invokeinterface #29,  2           // InterfaceMethod org/hibernate/mapping/KeyValue.isValid:(Lorg/hibernate/engine/spi/Mapping;)Z
      15: ifne          70
      18: new           #30                 // class org/hibernate/MappingException
      21: dup
      22: new           #31                 // class java/lang/StringBuilder
      25: dup
      26: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
      29: ldc           #33                 // String identifier mapping has wrong number of columns:
      31: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_0
      35: invokevirtual #35                 // Method getEntityName:()Ljava/lang/String;
      38: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: ldc           #36                 // String  type:
      43: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_0
      47: invokevirtual #24                 // Method getIdentifier:()Lorg/hibernate/mapping/KeyValue;
      50: invokeinterface #37,  1           // InterfaceMethod org/hibernate/mapping/KeyValue.getType:()Lorg/hibernate/type/Type;
      55: invokeinterface #38,  1           // InterfaceMethod org/hibernate/type/Type.getName:()Ljava/lang/String;
      60: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: invokespecial #40                 // Method org/hibernate/MappingException."<init>":(Ljava/lang/String;)V
      69: athrow
      70: aload_0
      71: invokespecial #41                 // Method checkCompositeIdentifier:()V
      74: return

  private void checkCompositeIdentifier();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getIdentifier:()Lorg/hibernate/mapping/KeyValue;
       4: instanceof    #42                 // class org/hibernate/mapping/Component
       7: ifeq          107
      10: aload_0
      11: invokevirtual #24                 // Method getIdentifier:()Lorg/hibernate/mapping/KeyValue;
      14: checkcast     #42                 // class org/hibernate/mapping/Component
      17: astore_1
      18: aload_1
      19: invokevirtual #43                 // Method org/hibernate/mapping/Component.isDynamic:()Z
      22: ifne          107
      25: aload_1
      26: invokevirtual #44                 // Method org/hibernate/mapping/Component.getComponentClass:()Ljava/lang/Class;
      29: astore_2
      30: aload_2
      31: ifnull        107
      34: aload_2
      35: invokevirtual #45                 // Method java/lang/Class.getName:()Ljava/lang/String;
      38: astore_3
      39: aload_2
      40: invokestatic  #46                 // Method org/hibernate/internal/util/ReflectHelper.overridesEquals:(Ljava/lang/Class;)Z
      43: ifne          55
      46: getstatic     #47                 // Field LOG:Lorg/hibernate/internal/CoreMessageLogger;
      49: aload_3
      50: invokeinterface #48,  2           // InterfaceMethod org/hibernate/internal/CoreMessageLogger.compositeIdClassDoesNotOverrideEquals:(Ljava/lang/String;)V
      55: aload_2
      56: invokestatic  #49                 // Method org/hibernate/internal/util/ReflectHelper.overridesHashCode:(Ljava/lang/Class;)Z
      59: ifne          71
      62: getstatic     #47                 // Field LOG:Lorg/hibernate/internal/CoreMessageLogger;
      65: aload_3
      66: invokeinterface #50,  2           // InterfaceMethod org/hibernate/internal/CoreMessageLogger.compositeIdClassDoesNotOverrideHashCode:(Ljava/lang/String;)V
      71: ldc           #51                 // class java/io/Serializable
      73: aload_2
      74: invokevirtual #52                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      77: ifne          107
      80: new           #30                 // class org/hibernate/MappingException
      83: dup
      84: new           #31                 // class java/lang/StringBuilder
      87: dup
      88: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
      91: ldc           #53                 // String Composite-id class must implement Serializable:
      93: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      96: aload_3
      97: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     103: invokespecial #40                 // Method org/hibernate/MappingException."<init>":(Ljava/lang/String;)V
     106: athrow
     107: return

  public java.lang.String getCacheConcurrencyStrategy();
    Code:
       0: aload_0
       1: getfield      #54                 // Field cacheConcurrencyStrategy:Ljava/lang/String;
       4: areturn

  public void setCacheConcurrencyStrategy(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #54                 // Field cacheConcurrencyStrategy:Ljava/lang/String;
       5: return

  public java.lang.String getCacheRegionName();
    Code:
       0: aload_0
       1: getfield      #55                 // Field cacheRegionName:Ljava/lang/String;
       4: ifnonnull     14
       7: aload_0
       8: invokevirtual #35                 // Method getEntityName:()Ljava/lang/String;
      11: goto          18
      14: aload_0
      15: getfield      #55                 // Field cacheRegionName:Ljava/lang/String;
      18: areturn

  public void setCacheRegionName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #55                 // Field cacheRegionName:Ljava/lang/String;
       5: return

  public java.lang.String getNaturalIdCacheRegionName();
    Code:
       0: aload_0
       1: getfield      #56                 // Field naturalIdCacheRegionName:Ljava/lang/String;
       4: areturn

  public void setNaturalIdCacheRegionName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #56                 // Field naturalIdCacheRegionName:Ljava/lang/String;
       5: return

  public boolean isLazyPropertiesCacheable();
    Code:
       0: aload_0
       1: getfield      #2                  // Field lazyPropertiesCacheable:Z
       4: ireturn

  public void setLazyPropertiesCacheable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field lazyPropertiesCacheable:Z
       5: return

  public boolean isJoinedSubclass();
    Code:
       0: iconst_0
       1: ireturn

  public java.util.Set getSynchronizedTables();
    Code:
       0: aload_0
       1: getfield      #57                 // Field synchronizedTables:Ljava/util/Set;
       4: areturn

  public java.util.Set<org.hibernate.mapping.Table> getIdentityTables();
    Code:
       0: new           #58                 // class java/util/HashSet
       3: dup
       4: invokespecial #59                 // Method java/util/HashSet."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #60                 // Method getSubclassClosureIterator:()Ljava/util/Iterator;
      12: astore_2
      13: aload_2
      14: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          63
      22: aload_2
      23: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #63                 // class org/hibernate/mapping/PersistentClass
      31: astore_3
      32: aload_3
      33: invokevirtual #64                 // Method org/hibernate/mapping/PersistentClass.isAbstract:()Ljava/lang/Boolean;
      36: ifnull        49
      39: aload_3
      40: invokevirtual #64                 // Method org/hibernate/mapping/PersistentClass.isAbstract:()Ljava/lang/Boolean;
      43: invokevirtual #65                 // Method java/lang/Boolean.booleanValue:()Z
      46: ifne          60
      49: aload_1
      50: aload_3
      51: invokevirtual #66                 // Method org/hibernate/mapping/PersistentClass.getIdentityTable:()Lorg/hibernate/mapping/Table;
      54: invokeinterface #67,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      59: pop
      60: goto          13
      63: aload_1
      64: areturn

  public java.lang.Object accept(org.hibernate.mapping.PersistentClassVisitor);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #68,  2           // InterfaceMethod org/hibernate/mapping/PersistentClassVisitor.accept:(Lorg/hibernate/mapping/RootClass;)Ljava/lang/Object;
       7: areturn

  public void setCachingExplicitlyRequested(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #69                 // Field cachingExplicitlyRequested:Z
       5: return

  public boolean isCachingExplicitlyRequested();
    Code:
       0: aload_0
       1: getfield      #69                 // Field cachingExplicitlyRequested:Z
       4: ireturn

  static {};
    Code:
       0: ldc           #70                 // class org/hibernate/mapping/RootClass
       2: invokestatic  #71                 // Method org/hibernate/internal/CoreLogging.messageLogger:(Ljava/lang/Class;)Lorg/hibernate/internal/CoreMessageLogger;
       5: putstatic     #47                 // Field LOG:Lorg/hibernate/internal/CoreMessageLogger;
       8: return
}
