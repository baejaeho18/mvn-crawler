Compiled from "BufferedInputFilter.java"
public class org.apache.coyote.http11.filters.BufferedInputFilter implements org.apache.coyote.http11.InputFilter,org.apache.tomcat.util.net.ApplicationBufferHandler {
  private static final java.lang.String ENCODING_NAME;

  private static final org.apache.tomcat.util.buf.ByteChunk ENCODING;

  private java.nio.ByteBuffer buffered;

  private java.nio.ByteBuffer tempRead;

  private org.apache.coyote.InputBuffer buffer;

  private boolean hasRead;

  public org.apache.coyote.http11.filters.BufferedInputFilter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field hasRead:Z
       9: return

  public void setLimit(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
       4: ifnonnull     23
       7: aload_0
       8: iload_1
       9: invokestatic  #4                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      12: putfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      15: aload_0
      16: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      19: invokevirtual #5                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      22: pop
      23: return

  public void setRequest(org.apache.coyote.Request);
    Code:
       0: aload_0
       1: getfield      #6                  // Field buffer:Lorg/apache/coyote/InputBuffer;
       4: aload_0
       5: invokeinterface #7,  2            // InterfaceMethod org/apache/coyote/InputBuffer.doRead:(Lorg/apache/tomcat/util/net/ApplicationBufferHandler;)I
      10: iflt          79
      13: aload_0
      14: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      17: invokevirtual #8                  // Method java/nio/ByteBuffer.mark:()Ljava/nio/Buffer;
      20: aload_0
      21: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      24: invokevirtual #9                  // Method java/nio/ByteBuffer.limit:()I
      27: invokevirtual #10                 // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
      30: aload_0
      31: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      34: invokevirtual #11                 // Method java/nio/ByteBuffer.capacity:()I
      37: invokevirtual #12                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;
      40: pop
      41: aload_0
      42: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      45: aload_0
      46: getfield      #13                 // Field tempRead:Ljava/nio/ByteBuffer;
      49: invokevirtual #14                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      52: pop
      53: aload_0
      54: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      57: aload_0
      58: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      61: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
      64: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      67: invokevirtual #17                 // Method java/nio/Buffer.reset:()Ljava/nio/Buffer;
      70: pop
      71: aload_0
      72: aconst_null
      73: putfield      #13                 // Field tempRead:Ljava/nio/ByteBuffer;
      76: goto          0
      79: goto          93
      82: astore_2
      83: new           #20                 // class java/lang/IllegalStateException
      86: dup
      87: ldc           #21                 // String Request body too large for buffer
      89: invokespecial #22                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      92: athrow
      93: return
    Exception table:
       from    to  target type
           0    79    82   Class java/io/IOException
           0    79    82   Class java/nio/BufferOverflowException

  public int doRead(org.apache.tomcat.util.buf.ByteChunk) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isFinished:()Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_1
      10: aload_0
      11: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      14: invokevirtual #24                 // Method java/nio/ByteBuffer.array:()[B
      17: aload_0
      18: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      21: invokevirtual #25                 // Method java/nio/ByteBuffer.arrayOffset:()I
      24: aload_0
      25: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      28: invokevirtual #15                 // Method java/nio/ByteBuffer.position:()I
      31: iadd
      32: aload_0
      33: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      36: invokevirtual #26                 // Method java/nio/ByteBuffer.remaining:()I
      39: invokevirtual #27                 // Method org/apache/tomcat/util/buf/ByteChunk.setBytes:([BII)V
      42: aload_0
      43: iconst_1
      44: putfield      #2                  // Field hasRead:Z
      47: aload_1
      48: invokevirtual #28                 // Method org/apache/tomcat/util/buf/ByteChunk.getLength:()I
      51: ireturn

  public int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isFinished:()Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_1
      10: aload_0
      11: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      14: invokeinterface #29,  2           // InterfaceMethod org/apache/tomcat/util/net/ApplicationBufferHandler.setByteBuffer:(Ljava/nio/ByteBuffer;)V
      19: aload_0
      20: iconst_1
      21: putfield      #2                  // Field hasRead:Z
      24: aload_0
      25: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      28: invokevirtual #26                 // Method java/nio/ByteBuffer.remaining:()I
      31: ireturn

  public void setBuffer(org.apache.coyote.InputBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field buffer:Lorg/apache/coyote/InputBuffer;
       5: return

  public void recycle();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
       4: ifnull        40
       7: aload_0
       8: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      11: invokevirtual #11                 // Method java/nio/ByteBuffer.capacity:()I
      14: ldc           #30                 // int 65536
      16: if_icmple     27
      19: aload_0
      20: aconst_null
      21: putfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      24: goto          40
      27: aload_0
      28: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      31: iconst_0
      32: invokevirtual #31                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      35: iconst_0
      36: invokevirtual #12                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;
      39: pop
      40: aload_0
      41: iconst_0
      42: putfield      #2                  // Field hasRead:Z
      45: aload_0
      46: aconst_null
      47: putfield      #6                  // Field buffer:Lorg/apache/coyote/InputBuffer;
      50: return

  public org.apache.tomcat.util.buf.ByteChunk getEncodingName();
    Code:
       0: getstatic     #32                 // Field ENCODING:Lorg/apache/tomcat/util/buf/ByteChunk;
       3: areturn

  public long end() throws java.io.IOException;
    Code:
       0: lconst_0
       1: lreturn

  public int available();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
       4: invokevirtual #26                 // Method java/nio/ByteBuffer.remaining:()I
       7: ireturn

  public boolean isFinished();
    Code:
       0: aload_0
       1: getfield      #2                  // Field hasRead:Z
       4: ifne          17
       7: aload_0
       8: getfield      #3                  // Field buffered:Ljava/nio/ByteBuffer;
      11: invokevirtual #26                 // Method java/nio/ByteBuffer.remaining:()I
      14: ifgt          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public void setByteBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field tempRead:Ljava/nio/ByteBuffer;
       5: return

  public java.nio.ByteBuffer getByteBuffer();
    Code:
       0: aload_0
       1: getfield      #13                 // Field tempRead:Ljava/nio/ByteBuffer;
       4: areturn

  public void expand(int);
    Code:
       0: return

  static {};
    Code:
       0: new           #33                 // class org/apache/tomcat/util/buf/ByteChunk
       3: dup
       4: invokespecial #34                 // Method org/apache/tomcat/util/buf/ByteChunk."<init>":()V
       7: putstatic     #32                 // Field ENCODING:Lorg/apache/tomcat/util/buf/ByteChunk;
      10: getstatic     #32                 // Field ENCODING:Lorg/apache/tomcat/util/buf/ByteChunk;
      13: ldc           #35                 // String buffered
      15: getstatic     #36                 // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;
      18: invokevirtual #37                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      21: iconst_0
      22: ldc           #35                 // String buffered
      24: invokevirtual #38                 // Method java/lang/String.length:()I
      27: invokevirtual #27                 // Method org/apache/tomcat/util/buf/ByteChunk.setBytes:([BII)V
      30: return
}
