Compiled from "AbstractCircuitBreaker.java"
public abstract class org.apache.commons.lang3.concurrent.AbstractCircuitBreaker<T> implements org.apache.commons.lang3.concurrent.CircuitBreaker<T> {
  public static final java.lang.String PROPERTY_NAME;

  protected final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State> state;

  private final java.beans.PropertyChangeSupport changeSupport;

  public org.apache.commons.lang3.concurrent.AbstractCircuitBreaker();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: getstatic     #3                  // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;
      12: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      15: putfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      18: aload_0
      19: new           #6                  // class java/beans/PropertyChangeSupport
      22: dup
      23: aload_0
      24: invokespecial #7                  // Method java/beans/PropertyChangeSupport."<init>":(Ljava/lang/Object;)V
      27: putfield      #8                  // Field changeSupport:Ljava/beans/PropertyChangeSupport;
      30: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #10                 // class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State
      10: invokestatic  #11                 // Method isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z
      13: ireturn

  public boolean isClosed();
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method isOpen:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public abstract boolean checkState();

  public abstract boolean incrementAndCheckState(T);

  public void close();
    Code:
       0: aload_0
       1: getstatic     #3                  // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;
       4: invokevirtual #13                 // Method changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V
       7: return

  public void open();
    Code:
       0: aload_0
       1: getstatic     #14                 // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;
       4: invokevirtual #13                 // Method changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V
       7: return

  protected static boolean isOpen(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State);
    Code:
       0: aload_0
       1: getstatic     #14                 // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;
       4: if_acmpne     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  protected void changeState(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State);
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: invokevirtual #15                 // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;
       8: aload_1
       9: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      12: ifeq          40
      15: aload_0
      16: getfield      #8                  // Field changeSupport:Ljava/beans/PropertyChangeSupport;
      19: ldc           #17                 // String open
      21: aload_1
      22: invokestatic  #11                 // Method isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z
      25: ifne          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: aload_1
      34: invokestatic  #11                 // Method isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z
      37: invokevirtual #18                 // Method java/beans/PropertyChangeSupport.firePropertyChange:(Ljava/lang/String;ZZ)V
      40: return

  public void addChangeListener(java.beans.PropertyChangeListener);
    Code:
       0: aload_0
       1: getfield      #8                  // Field changeSupport:Ljava/beans/PropertyChangeSupport;
       4: aload_1
       5: invokevirtual #19                 // Method java/beans/PropertyChangeSupport.addPropertyChangeListener:(Ljava/beans/PropertyChangeListener;)V
       8: return

  public void removeChangeListener(java.beans.PropertyChangeListener);
    Code:
       0: aload_0
       1: getfield      #8                  // Field changeSupport:Ljava/beans/PropertyChangeSupport;
       4: aload_1
       5: invokevirtual #20                 // Method java/beans/PropertyChangeSupport.removePropertyChangeListener:(Ljava/beans/PropertyChangeListener;)V
       8: return
}
