Compiled from "EventCountCircuitBreaker.java"
public class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker extends org.apache.commons.lang3.concurrent.AbstractCircuitBreaker<java.lang.Integer> {
  private static final java.util.Map<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy> STRATEGY_MAP;

  private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData> checkIntervalData;

  private final int openingThreshold;

  private final long openingInterval;

  private final int closingThreshold;

  private final long closingInterval;

  public org.apache.commons.lang3.concurrent.EventCountCircuitBreaker(int, long, java.util.concurrent.TimeUnit, int, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData
      12: dup
      13: iconst_0
      14: lconst_0
      15: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData."<init>":(IJ)V
      18: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      21: putfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;
      24: aload_0
      25: iload_1
      26: putfield      #7                  // Field openingThreshold:I
      29: aload_0
      30: aload         4
      32: lload_2
      33: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      36: putfield      #9                  // Field openingInterval:J
      39: aload_0
      40: iload         5
      42: putfield      #10                 // Field closingThreshold:I
      45: aload_0
      46: aload         8
      48: lload         6
      50: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      53: putfield      #11                 // Field closingInterval:J
      56: return

  public org.apache.commons.lang3.concurrent.EventCountCircuitBreaker(int, long, java.util.concurrent.TimeUnit, int);
    Code:
       0: aload_0
       1: iload_1
       2: lload_2
       3: aload         4
       5: iload         5
       7: lload_2
       8: aload         4
      10: invokespecial #12                 // Method "<init>":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V
      13: return

  public org.apache.commons.lang3.concurrent.EventCountCircuitBreaker(int, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: iload_1
       2: lload_2
       3: aload         4
       5: iload_1
       6: invokespecial #13                 // Method "<init>":(IJLjava/util/concurrent/TimeUnit;I)V
       9: return

  public int getOpeningThreshold();
    Code:
       0: aload_0
       1: getfield      #7                  // Field openingThreshold:I
       4: ireturn

  public long getOpeningInterval();
    Code:
       0: aload_0
       1: getfield      #9                  // Field openingInterval:J
       4: lreturn

  public int getClosingThreshold();
    Code:
       0: aload_0
       1: getfield      #10                 // Field closingThreshold:I
       4: ireturn

  public long getClosingInterval();
    Code:
       0: aload_0
       1: getfield      #11                 // Field closingInterval:J
       4: lreturn

  public boolean checkState();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #14                 // Method performStateCheck:(I)Z
       5: ireturn

  public boolean incrementAndCheckState(java.lang.Integer) throws org.apache.commons.lang3.concurrent.CircuitBreakingException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #14                 // Method performStateCheck:(I)Z
       5: ireturn

  public boolean incrementAndCheckState();
    Code:
       0: aload_0
       1: iconst_1
       2: invokestatic  #15                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: invokevirtual #16                 // Method incrementAndCheckState:(Ljava/lang/Integer;)Z
       8: ireturn

  public void open();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.open:()V
       4: aload_0
       5: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;
       8: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData
      11: dup
      12: iconst_0
      13: aload_0
      14: invokevirtual #18                 // Method now:()J
      17: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData."<init>":(IJ)V
      20: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      23: return

  public void close();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.close:()V
       4: aload_0
       5: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;
       8: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData
      11: dup
      12: iconst_0
      13: aload_0
      14: invokevirtual #18                 // Method now:()J
      17: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData."<init>":(IJ)V
      20: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      23: return

  private boolean performStateCheck(int);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method now:()J
       4: lstore        5
       6: aload_0
       7: getfield      #21                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      10: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      13: checkcast     #23                 // class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State
      16: astore        4
      18: aload_0
      19: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;
      22: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      25: checkcast     #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData
      28: astore_2
      29: aload_0
      30: iload_1
      31: aload_2
      32: aload         4
      34: lload         5
      36: invokespecial #24                 // Method nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;
      39: astore_3
      40: aload_0
      41: aload_2
      42: aload_3
      43: invokespecial #25                 // Method updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z
      46: ifeq          0
      49: aload         4
      51: invokestatic  #26                 // Method stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;
      54: aload_0
      55: aload_2
      56: aload_3
      57: invokevirtual #27                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z
      60: ifeq          76
      63: aload         4
      65: invokevirtual #28                 // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;
      68: astore        4
      70: aload_0
      71: aload         4
      73: invokespecial #29                 // Method changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V
      76: aload         4
      78: invokestatic  #30                 // Method isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z
      81: ifne          88
      84: iconst_1
      85: goto          89
      88: iconst_0
      89: ireturn

  private boolean updateCheckIntervalData(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData);
    Code:
       0: aload_1
       1: aload_2
       2: if_acmpeq     17
       5: aload_0
       6: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;
       9: aload_1
      10: aload_2
      11: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  private void changeStateAndStartNewCheckInterval(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #32                 // Method changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V
       5: aload_0
       6: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;
       9: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData
      12: dup
      13: iconst_0
      14: aload_0
      15: invokevirtual #18                 // Method now:()J
      18: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData."<init>":(IJ)V
      21: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      24: return

  private org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData nextCheckIntervalData(int, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State, long);
    Code:
       0: aload_3
       1: invokestatic  #26                 // Method stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;
       4: aload_0
       5: aload_2
       6: lload         4
       8: invokevirtual #33                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z
      11: ifeq          29
      14: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData
      17: dup
      18: iload_1
      19: lload         4
      21: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData."<init>":(IJ)V
      24: astore        6
      26: goto          36
      29: aload_2
      30: iload_1
      31: invokevirtual #34                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;
      34: astore        6
      36: aload         6
      38: areturn

  long now();
    Code:
       0: invokestatic  #35                 // Method java/lang/System.nanoTime:()J
       3: lreturn

  private static org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy stateStrategy(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State);
    Code:
       0: getstatic     #36                 // Field STRATEGY_MAP:Ljava/util/Map;
       3: aload_0
       4: invokeinterface #37,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #38                 // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy
      12: areturn

  private static java.util.Map<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy> createStrategyMap();
    Code:
       0: new           #39                 // class java/util/EnumMap
       3: dup
       4: ldc_w         #23                 // class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State
       7: invokespecial #40                 // Method java/util/EnumMap."<init>":(Ljava/lang/Class;)V
      10: astore_0
      11: aload_0
      12: getstatic     #41                 // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;
      15: new           #42                 // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed
      18: dup
      19: aconst_null
      20: invokespecial #43                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed."<init>":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V
      23: invokeinterface #44,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      28: pop
      29: aload_0
      30: getstatic     #45                 // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;
      33: new           #46                 // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen
      36: dup
      37: aconst_null
      38: invokespecial #47                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen."<init>":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V
      41: invokeinterface #44,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      46: pop
      47: aload_0
      48: areturn

  public boolean incrementAndCheckState(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #48                 // class java/lang/Integer
       5: invokevirtual #16                 // Method incrementAndCheckState:(Ljava/lang/Integer;)Z
       8: ireturn

  static {};
    Code:
       0: invokestatic  #49                 // Method createStrategyMap:()Ljava/util/Map;
       3: putstatic     #36                 // Field STRATEGY_MAP:Ljava/util/Map;
       6: return
}
