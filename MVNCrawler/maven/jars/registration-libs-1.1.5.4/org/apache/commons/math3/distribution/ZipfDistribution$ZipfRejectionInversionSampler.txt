Compiled from "ZipfDistribution.java"
final class org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler {
  private final double exponent;

  private final int numberOfElements;

  private final double hIntegralX1;

  private final double hIntegralNumberOfElements;

  private final double s;

  org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler(int, double);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_2
       6: putfield      #2                  // Field exponent:D
       9: aload_0
      10: iload_1
      11: putfield      #3                  // Field numberOfElements:I
      14: aload_0
      15: aload_0
      16: ldc2_w        #4                  // double 1.5d
      19: invokespecial #6                  // Method hIntegral:(D)D
      22: dconst_1
      23: dsub
      24: putfield      #7                  // Field hIntegralX1:D
      27: aload_0
      28: aload_0
      29: iload_1
      30: i2d
      31: ldc2_w        #8                  // double 0.5d
      34: dadd
      35: invokespecial #6                  // Method hIntegral:(D)D
      38: putfield      #10                 // Field hIntegralNumberOfElements:D
      41: aload_0
      42: ldc2_w        #11                 // double 2.0d
      45: aload_0
      46: aload_0
      47: ldc2_w        #13                 // double 2.5d
      50: invokespecial #6                  // Method hIntegral:(D)D
      53: aload_0
      54: ldc2_w        #11                 // double 2.0d
      57: invokespecial #15                 // Method h:(D)D
      60: dsub
      61: invokespecial #16                 // Method hIntegralInverse:(D)D
      64: dsub
      65: putfield      #17                 // Field s:D
      68: return

  int sample(org.apache.commons.math3.random.RandomGenerator);
    Code:
       0: aload_0
       1: getfield      #10                 // Field hIntegralNumberOfElements:D
       4: aload_1
       5: invokeinterface #18,  1           // InterfaceMethod org/apache/commons/math3/random/RandomGenerator.nextDouble:()D
      10: aload_0
      11: getfield      #7                  // Field hIntegralX1:D
      14: aload_0
      15: getfield      #10                 // Field hIntegralNumberOfElements:D
      18: dsub
      19: dmul
      20: dadd
      21: dstore_2
      22: aload_0
      23: dload_2
      24: invokespecial #16                 // Method hIntegralInverse:(D)D
      27: dstore        4
      29: dload         4
      31: ldc2_w        #8                  // double 0.5d
      34: dadd
      35: d2i
      36: istore        6
      38: iload         6
      40: iconst_1
      41: if_icmpge     50
      44: iconst_1
      45: istore        6
      47: goto          65
      50: iload         6
      52: aload_0
      53: getfield      #3                  // Field numberOfElements:I
      56: if_icmple     65
      59: aload_0
      60: getfield      #3                  // Field numberOfElements:I
      63: istore        6
      65: iload         6
      67: i2d
      68: dload         4
      70: dsub
      71: aload_0
      72: getfield      #17                 // Field s:D
      75: dcmpg
      76: ifle          103
      79: dload_2
      80: aload_0
      81: iload         6
      83: i2d
      84: ldc2_w        #8                  // double 0.5d
      87: dadd
      88: invokespecial #6                  // Method hIntegral:(D)D
      91: aload_0
      92: iload         6
      94: i2d
      95: invokespecial #15                 // Method h:(D)D
      98: dsub
      99: dcmpl
     100: iflt          106
     103: iload         6
     105: ireturn
     106: goto          0

  private double hIntegral(double);
    Code:
       0: dload_1
       1: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
       4: dstore_3
       5: dconst_1
       6: aload_0
       7: getfield      #2                  // Field exponent:D
      10: dsub
      11: dload_3
      12: dmul
      13: invokestatic  #20                 // Method helper2:(D)D
      16: dload_3
      17: dmul
      18: dreturn

  private double h(double);
    Code:
       0: aload_0
       1: getfield      #2                  // Field exponent:D
       4: dneg
       5: dload_1
       6: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
       9: dmul
      10: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      13: dreturn

  private double hIntegralInverse(double);
    Code:
       0: dload_1
       1: dconst_1
       2: aload_0
       3: getfield      #2                  // Field exponent:D
       6: dsub
       7: dmul
       8: dstore_3
       9: dload_3
      10: ldc2_w        #22                 // double -1.0d
      13: dcmpg
      14: ifge          21
      17: ldc2_w        #22                 // double -1.0d
      20: dstore_3
      21: dload_3
      22: invokestatic  #24                 // Method helper1:(D)D
      25: dload_1
      26: dmul
      27: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      30: dreturn

  static double helper1(double);
    Code:
       0: dload_0
       1: invokestatic  #25                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       4: ldc2_w        #26                 // double 1.0E-8d
       7: dcmpl
       8: ifle          18
      11: dload_0
      12: invokestatic  #28                 // Method org/apache/commons/math3/util/FastMath.log1p:(D)D
      15: dload_0
      16: ddiv
      17: dreturn
      18: dconst_1
      19: dload_0
      20: ldc2_w        #8                  // double 0.5d
      23: dload_0
      24: ldc2_w        #29                 // double 0.3333333333333333d
      27: dload_0
      28: ldc2_w        #31                 // double 0.25d
      31: dmul
      32: dsub
      33: dmul
      34: dsub
      35: dmul
      36: dsub
      37: dreturn

  static double helper2(double);
    Code:
       0: dload_0
       1: invokestatic  #25                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       4: ldc2_w        #26                 // double 1.0E-8d
       7: dcmpl
       8: ifle          18
      11: dload_0
      12: invokestatic  #33                 // Method org/apache/commons/math3/util/FastMath.expm1:(D)D
      15: dload_0
      16: ddiv
      17: dreturn
      18: dconst_1
      19: dload_0
      20: ldc2_w        #8                  // double 0.5d
      23: dmul
      24: dconst_1
      25: dload_0
      26: ldc2_w        #29                 // double 0.3333333333333333d
      29: dmul
      30: dconst_1
      31: dload_0
      32: ldc2_w        #31                 // double 0.25d
      35: dmul
      36: dadd
      37: dmul
      38: dadd
      39: dmul
      40: dadd
      41: dreturn
}
