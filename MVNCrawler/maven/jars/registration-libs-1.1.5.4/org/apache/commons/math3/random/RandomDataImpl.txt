Compiled from "RandomDataImpl.java"
public class org.apache.commons.math3.random.RandomDataImpl implements org.apache.commons.math3.random.RandomData,java.io.Serializable {
  private static final long serialVersionUID;

  private final org.apache.commons.math3.random.RandomDataGenerator delegate;

  public org.apache.commons.math3.random.RandomDataImpl();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/apache/commons/math3/random/RandomDataGenerator
       8: dup
       9: invokespecial #3                  // Method org/apache/commons/math3/random/RandomDataGenerator."<init>":()V
      12: putfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
      15: return

  public org.apache.commons.math3.random.RandomDataImpl(org.apache.commons.math3.random.RandomGenerator);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/apache/commons/math3/random/RandomDataGenerator
       8: dup
       9: aload_1
      10: invokespecial #5                  // Method org/apache/commons/math3/random/RandomDataGenerator."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
      13: putfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
      16: return

  org.apache.commons.math3.random.RandomDataGenerator getDelegate();
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: areturn

  public java.lang.String nextHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: iload_1
       5: invokevirtual #6                  // Method org/apache/commons/math3/random/RandomDataGenerator.nextHexString:(I)Ljava/lang/String;
       8: areturn

  public int nextInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: iload_1
       5: iload_2
       6: invokevirtual #7                  // Method org/apache/commons/math3/random/RandomDataGenerator.nextInt:(II)I
       9: ireturn

  public long nextLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: lload_1
       5: lload_3
       6: invokevirtual #8                  // Method org/apache/commons/math3/random/RandomDataGenerator.nextLong:(JJ)J
       9: lreturn

  public java.lang.String nextSecureHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: iload_1
       5: invokevirtual #9                  // Method org/apache/commons/math3/random/RandomDataGenerator.nextSecureHexString:(I)Ljava/lang/String;
       8: areturn

  public int nextSecureInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: iload_1
       5: iload_2
       6: invokevirtual #10                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextSecureInt:(II)I
       9: ireturn

  public long nextSecureLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: lload_1
       5: lload_3
       6: invokevirtual #11                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextSecureLong:(JJ)J
       9: lreturn

  public long nextPoisson(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: invokevirtual #12                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextPoisson:(D)J
       8: lreturn

  public double nextGaussian(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: dload_3
       6: invokevirtual #13                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextGaussian:(DD)D
       9: dreturn

  public double nextExponential(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: invokevirtual #14                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextExponential:(D)D
       8: dreturn

  public double nextUniform(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: dload_3
       6: invokevirtual #15                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextUniform:(DD)D
       9: dreturn

  public double nextUniform(double, double, boolean) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: dload_3
       6: iload         5
       8: invokevirtual #16                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextUniform:(DDZ)D
      11: dreturn

  public double nextBeta(double, double);
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: dload_3
       6: invokevirtual #17                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextBeta:(DD)D
       9: dreturn

  public int nextBinomial(int, double);
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: iload_1
       5: dload_2
       6: invokevirtual #18                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextBinomial:(ID)I
       9: ireturn

  public double nextCauchy(double, double);
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: dload_3
       6: invokevirtual #19                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextCauchy:(DD)D
       9: dreturn

  public double nextChiSquare(double);
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: invokevirtual #20                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextChiSquare:(D)D
       8: dreturn

  public double nextF(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: dload_3
       6: invokevirtual #21                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextF:(DD)D
       9: dreturn

  public double nextGamma(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: dload_3
       6: invokevirtual #22                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextGamma:(DD)D
       9: dreturn

  public int nextHypergeometric(int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: iload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #23                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextHypergeometric:(III)I
      10: ireturn

  public int nextPascal(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: iload_1
       5: dload_2
       6: invokevirtual #24                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextPascal:(ID)I
       9: ireturn

  public double nextT(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: invokevirtual #25                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextT:(D)D
       8: dreturn

  public double nextWeibull(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: dload_1
       5: dload_3
       6: invokevirtual #26                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextWeibull:(DD)D
       9: dreturn

  public int nextZipf(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: iload_1
       5: dload_2
       6: invokevirtual #27                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextZipf:(ID)I
       9: ireturn

  public void reSeed(long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: lload_1
       5: invokevirtual #28                 // Method org/apache/commons/math3/random/RandomDataGenerator.reSeed:(J)V
       8: return

  public void reSeedSecure();
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: invokevirtual #29                 // Method org/apache/commons/math3/random/RandomDataGenerator.reSeedSecure:()V
       7: return

  public void reSeedSecure(long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: lload_1
       5: invokevirtual #30                 // Method org/apache/commons/math3/random/RandomDataGenerator.reSeedSecure:(J)V
       8: return

  public void reSeed();
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: invokevirtual #31                 // Method org/apache/commons/math3/random/RandomDataGenerator.reSeed:()V
       7: return

  public void setSecureAlgorithm(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: aload_1
       5: aload_2
       6: invokevirtual #32                 // Method org/apache/commons/math3/random/RandomDataGenerator.setSecureAlgorithm:(Ljava/lang/String;Ljava/lang/String;)V
       9: return

  public int[] nextPermutation(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: iload_1
       5: iload_2
       6: invokevirtual #33                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextPermutation:(II)[I
       9: areturn

  public java.lang.Object[] nextSample(java.util.Collection<?>, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field delegate:Lorg/apache/commons/math3/random/RandomDataGenerator;
       4: aload_1
       5: iload_2
       6: invokevirtual #34                 // Method org/apache/commons/math3/random/RandomDataGenerator.nextSample:(Ljava/util/Collection;I)[Ljava/lang/Object;
       9: areturn

  public double nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_1
       1: aload_0
       2: dconst_0
       3: dconst_1
       4: invokevirtual #35                 // Method nextUniform:(DD)D
       7: invokeinterface #36,  3           // InterfaceMethod org/apache/commons/math3/distribution/RealDistribution.inverseCumulativeProbability:(D)D
      12: dreturn

  public int nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_1
       1: aload_0
       2: dconst_0
       3: dconst_1
       4: invokevirtual #35                 // Method nextUniform:(DD)D
       7: invokeinterface #37,  3           // InterfaceMethod org/apache/commons/math3/distribution/IntegerDistribution.inverseCumulativeProbability:(D)I
      12: ireturn
}
