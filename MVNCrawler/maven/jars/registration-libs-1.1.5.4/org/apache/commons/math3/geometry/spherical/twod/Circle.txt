Compiled from "Circle.java"
public class org.apache.commons.math3.geometry.spherical.twod.Circle implements org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>, org.apache.commons.math3.geometry.partitioning.Embedding<org.apache.commons.math3.geometry.spherical.twod.Sphere2D, org.apache.commons.math3.geometry.spherical.oned.Sphere1D> {
  private org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole;

  private org.apache.commons.math3.geometry.euclidean.threed.Vector3D x;

  private org.apache.commons.math3.geometry.euclidean.threed.Vector3D y;

  private final double tolerance;

  public org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #7                  // Method reset:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
       9: aload_0
      10: dload_2
      11: putfield      #2                  // Field tolerance:D
      14: return

  public org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.spherical.twod.S2Point, org.apache.commons.math3.geometry.spherical.twod.S2Point, double);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #8                  // Method org/apache/commons/math3/geometry/spherical/twod/S2Point.getVector:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       9: aload_2
      10: invokevirtual #8                  // Method org/apache/commons/math3/geometry/spherical/twod/S2Point.getVector:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      13: invokevirtual #9                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.crossProduct:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      16: invokevirtual #7                  // Method reset:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      19: aload_0
      20: dload_3
      21: putfield      #2                  // Field tolerance:D
      24: return

  private org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field x:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      14: aload_0
      15: aload_3
      16: putfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      19: aload_0
      20: dload         4
      22: putfield      #2                  // Field tolerance:D
      25: return

  public org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.spherical.twod.Circle);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: aload_1
       6: getfield      #4                  // Field x:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       9: aload_1
      10: getfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      13: aload_1
      14: getfield      #2                  // Field tolerance:D
      17: invokespecial #1                  // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;D)V
      20: return

  public org.apache.commons.math3.geometry.spherical.twod.Circle copySelf();
    Code:
       0: new           #10                 // class org/apache/commons/math3/geometry/spherical/twod/Circle
       3: dup
       4: aload_0
       5: invokespecial #11                 // Method "<init>":(Lorg/apache/commons/math3/geometry/spherical/twod/Circle;)V
       8: areturn

  public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #12                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.normalize:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: putfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: aload_0
       9: aload_1
      10: invokevirtual #13                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.orthogonal:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      13: putfield      #4                  // Field x:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      16: aload_0
      17: aload_1
      18: aload_0
      19: getfield      #4                  // Field x:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      22: invokestatic  #14                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.crossProduct:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      25: invokevirtual #12                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.normalize:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      28: putfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      31: return

  public void revertSelf();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: invokevirtual #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.negate:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: putfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      11: aload_0
      12: aload_0
      13: getfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      16: invokevirtual #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.negate:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      19: putfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      22: return

  public org.apache.commons.math3.geometry.spherical.twod.Circle getReverse();
    Code:
       0: new           #10                 // class org/apache/commons/math3/geometry/spherical/twod/Circle
       3: dup
       4: aload_0
       5: getfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokevirtual #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.negate:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      11: aload_0
      12: getfield      #4                  // Field x:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      15: aload_0
      16: getfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      19: invokevirtual #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.negate:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      22: aload_0
      23: getfield      #2                  // Field tolerance:D
      26: invokespecial #1                  // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;D)V
      29: areturn

  public org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D> project(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #16                 // Method toSubSpace:(Lorg/apache/commons/math3/geometry/Point;)Lorg/apache/commons/math3/geometry/spherical/oned/S1Point;
       6: invokevirtual #17                 // Method toSpace:(Lorg/apache/commons/math3/geometry/Point;)Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;
       9: areturn

  public double getTolerance();
    Code:
       0: aload_0
       1: getfield      #2                  // Field tolerance:D
       4: dreturn

  public org.apache.commons.math3.geometry.spherical.oned.S1Point toSubSpace(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>);
    Code:
       0: new           #18                 // class org/apache/commons/math3/geometry/spherical/oned/S1Point
       3: dup
       4: aload_0
       5: aload_1
       6: checkcast     #19                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
       9: invokevirtual #8                  // Method org/apache/commons/math3/geometry/spherical/twod/S2Point.getVector:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      12: invokevirtual #20                 // Method getPhase:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
      15: invokespecial #21                 // Method org/apache/commons/math3/geometry/spherical/oned/S1Point."<init>":(D)V
      18: areturn

  public double getPhase(org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: ldc2_w        #22                 // double 3.141592653589793d
       3: aload_1
       4: aload_0
       5: getfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokevirtual #24                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      11: dneg
      12: aload_1
      13: aload_0
      14: getfield      #4                  // Field x:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      17: invokevirtual #24                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      20: dneg
      21: invokestatic  #25                 // Method org/apache/commons/math3/util/FastMath.atan2:(DD)D
      24: dadd
      25: dreturn

  public org.apache.commons.math3.geometry.spherical.twod.S2Point toSpace(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.oned.Sphere1D>);
    Code:
       0: new           #19                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
       3: dup
       4: aload_0
       5: aload_1
       6: checkcast     #18                 // class org/apache/commons/math3/geometry/spherical/oned/S1Point
       9: invokevirtual #26                 // Method org/apache/commons/math3/geometry/spherical/oned/S1Point.getAlpha:()D
      12: invokevirtual #27                 // Method getPointAt:(D)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      15: invokespecial #28                 // Method org/apache/commons/math3/geometry/spherical/twod/S2Point."<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      18: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double);
    Code:
       0: new           #29                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       3: dup
       4: dload_1
       5: invokestatic  #30                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
       8: aload_0
       9: getfield      #4                  // Field x:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      12: dload_1
      13: invokestatic  #31                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      16: aload_0
      17: getfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      20: invokespecial #32                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      23: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getXAxis();
    Code:
       0: aload_0
       1: getfield      #4                  // Field x:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getYAxis();
    Code:
       0: aload_0
       1: getfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole();
    Code:
       0: aload_0
       1: getfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.spherical.oned.Arc getInsideArc(org.apache.commons.math3.geometry.spherical.twod.Circle);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: invokevirtual #20                 // Method getPhase:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
       8: dstore_2
       9: ldc2_w        #33                 // double 1.5707963267948966d
      12: dstore        4
      14: new           #35                 // class org/apache/commons/math3/geometry/spherical/oned/Arc
      17: dup
      18: dload_2
      19: ldc2_w        #33                 // double 1.5707963267948966d
      22: dsub
      23: dload_2
      24: ldc2_w        #33                 // double 1.5707963267948966d
      27: dadd
      28: aload_0
      29: getfield      #2                  // Field tolerance:D
      32: invokespecial #36                 // Method org/apache/commons/math3/geometry/spherical/oned/Arc."<init>":(DDD)V
      35: areturn

  public org.apache.commons.math3.geometry.spherical.twod.SubCircle wholeHyperplane();
    Code:
       0: new           #37                 // class org/apache/commons/math3/geometry/spherical/twod/SubCircle
       3: dup
       4: aload_0
       5: new           #38                 // class org/apache/commons/math3/geometry/spherical/oned/ArcsSet
       8: dup
       9: aload_0
      10: getfield      #2                  // Field tolerance:D
      13: invokespecial #39                 // Method org/apache/commons/math3/geometry/spherical/oned/ArcsSet."<init>":(D)V
      16: invokespecial #40                 // Method org/apache/commons/math3/geometry/spherical/twod/SubCircle."<init>":(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;Lorg/apache/commons/math3/geometry/partitioning/Region;)V
      19: areturn

  public org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet wholeSpace();
    Code:
       0: new           #41                 // class org/apache/commons/math3/geometry/spherical/twod/SphericalPolygonsSet
       3: dup
       4: aload_0
       5: getfield      #2                  // Field tolerance:D
       8: invokespecial #42                 // Method org/apache/commons/math3/geometry/spherical/twod/SphericalPolygonsSet."<init>":(D)V
      11: areturn

  public double getOffset(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #19                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
       5: invokevirtual #8                  // Method org/apache/commons/math3/geometry/spherical/twod/S2Point.getVector:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokevirtual #43                 // Method getOffset:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
      11: dreturn

  public double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: getfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: aload_1
       5: invokestatic  #44                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.angle:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
       8: ldc2_w        #33                 // double 1.5707963267948966d
      11: dsub
      12: dreturn

  public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>);
    Code:
       0: aload_1
       1: checkcast     #10                 // class org/apache/commons/math3/geometry/spherical/twod/Circle
       4: astore_2
       5: aload_0
       6: getfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       9: aload_2
      10: getfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      13: invokestatic  #45                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
      16: dconst_0
      17: dcmpl
      18: iflt          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public static org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.spherical.twod.Sphere2D, org.apache.commons.math3.geometry.spherical.oned.Sphere1D> getTransform(org.apache.commons.math3.geometry.euclidean.threed.Rotation);
    Code:
       0: new           #46                 // class org/apache/commons/math3/geometry/spherical/twod/Circle$CircleTransform
       3: dup
       4: aload_0
       5: invokespecial #47                 // Method org/apache/commons/math3/geometry/spherical/twod/Circle$CircleTransform."<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Rotation;)V
       8: areturn

  public org.apache.commons.math3.geometry.partitioning.Region wholeSpace();
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method wholeSpace:()Lorg/apache/commons/math3/geometry/spherical/twod/SphericalPolygonsSet;
       4: areturn

  public org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method wholeHyperplane:()Lorg/apache/commons/math3/geometry/spherical/twod/SubCircle;
       4: areturn

  public org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf();
    Code:
       0: aload_0
       1: invokevirtual #50                 // Method copySelf:()Lorg/apache/commons/math3/geometry/spherical/twod/Circle;
       4: areturn

  public org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method toSpace:(Lorg/apache/commons/math3/geometry/Point;)Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;
       5: areturn

  public org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method toSubSpace:(Lorg/apache/commons/math3/geometry/Point;)Lorg/apache/commons/math3/geometry/spherical/oned/S1Point;
       5: areturn

  static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$000(org.apache.commons.math3.geometry.spherical.twod.Circle);
    Code:
       0: aload_0
       1: getfield      #5                  // Field pole:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.spherical.twod.Circle);
    Code:
       0: aload_0
       1: getfield      #4                  // Field x:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.spherical.twod.Circle);
    Code:
       0: aload_0
       1: getfield      #3                  // Field y:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  static double access$300(org.apache.commons.math3.geometry.spherical.twod.Circle);
    Code:
       0: aload_0
       1: getfield      #2                  // Field tolerance:D
       4: dreturn

  org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.spherical.twod.Circle$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: dload         4
       6: invokespecial #1                  // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;D)V
       9: return
}
