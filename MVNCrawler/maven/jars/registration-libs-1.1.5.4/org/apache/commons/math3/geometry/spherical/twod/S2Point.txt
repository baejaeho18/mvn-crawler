Compiled from "S2Point.java"
public class org.apache.commons.math3.geometry.spherical.twod.S2Point implements org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D> {
  public static final org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_I;

  public static final org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_J;

  public static final org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_K;

  public static final org.apache.commons.math3.geometry.spherical.twod.S2Point MINUS_I;

  public static final org.apache.commons.math3.geometry.spherical.twod.S2Point MINUS_J;

  public static final org.apache.commons.math3.geometry.spherical.twod.S2Point MINUS_K;

  public static final org.apache.commons.math3.geometry.spherical.twod.S2Point NaN;

  private static final long serialVersionUID;

  private final double theta;

  private final double phi;

  private final org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector;

  public org.apache.commons.math3.geometry.spherical.twod.S2Point(double, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: dload_1
       4: dload_3
       5: invokestatic  #1                  // Method vector:(DD)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      11: return

  public org.apache.commons.math3.geometry.spherical.twod.S2Point(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getY:()D
       5: aload_1
       6: invokevirtual #4                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getX:()D
       9: invokestatic  #5                  // Method org/apache/commons/math3/util/FastMath.atan2:(DD)D
      12: getstatic     #6                  // Field org/apache/commons/math3/geometry/euclidean/threed/Vector3D.PLUS_K:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      15: aload_1
      16: invokestatic  #7                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.angle:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
      19: aload_1
      20: invokevirtual #8                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.normalize:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      23: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      26: return

  private org.apache.commons.math3.geometry.spherical.twod.S2Point(double, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #10                 // Field theta:D
       9: aload_0
      10: dload_3
      11: putfield      #11                 // Field phi:D
      14: aload_0
      15: aload         5
      17: putfield      #12                 // Field vector:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      20: return

  private static org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector(double, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: dload_2
       1: dconst_0
       2: dcmpg
       3: iflt          14
       6: dload_2
       7: ldc2_w        #13                 // double 3.141592653589793d
      10: dcmpl
      11: ifle          36
      14: new           #15                 // class org/apache/commons/math3/exception/OutOfRangeException
      17: dup
      18: dload_2
      19: invokestatic  #16                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      22: iconst_0
      23: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: ldc2_w        #13                 // double 3.141592653589793d
      29: invokestatic  #16                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      32: invokespecial #18                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      35: athrow
      36: dload_0
      37: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      40: dstore        4
      42: dload_0
      43: invokestatic  #20                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      46: dstore        6
      48: dload_2
      49: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      52: dstore        8
      54: dload_2
      55: invokestatic  #20                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      58: dstore        10
      60: new           #21                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      63: dup
      64: dload         4
      66: dload         10
      68: dmul
      69: dload         6
      71: dload         10
      73: dmul
      74: dload         8
      76: invokespecial #22                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DDD)V
      79: areturn

  public double getTheta();
    Code:
       0: aload_0
       1: getfield      #10                 // Field theta:D
       4: dreturn

  public double getPhi();
    Code:
       0: aload_0
       1: getfield      #11                 // Field phi:D
       4: dreturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector();
    Code:
       0: aload_0
       1: getfield      #12                 // Field vector:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.Space getSpace();
    Code:
       0: invokestatic  #23                 // Method org/apache/commons/math3/geometry/spherical/twod/Sphere2D.getInstance:()Lorg/apache/commons/math3/geometry/spherical/twod/Sphere2D;
       3: areturn

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #10                 // Field theta:D
       4: invokestatic  #24                 // Method java/lang/Double.isNaN:(D)Z
       7: ifne          20
      10: aload_0
      11: getfield      #11                 // Field phi:D
      14: invokestatic  #24                 // Method java/lang/Double.isNaN:(D)Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public org.apache.commons.math3.geometry.spherical.twod.S2Point negate();
    Code:
       0: new           #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
       3: dup
       4: aload_0
       5: getfield      #10                 // Field theta:D
       8: dneg
       9: ldc2_w        #13                 // double 3.141592653589793d
      12: aload_0
      13: getfield      #11                 // Field phi:D
      16: dsub
      17: aload_0
      18: getfield      #12                 // Field vector:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      21: invokevirtual #26                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.negate:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      24: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      27: areturn

  public double distance(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
       5: invokestatic  #27                 // Method distance:(Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;)D
       8: dreturn

  public static double distance(org.apache.commons.math3.geometry.spherical.twod.S2Point, org.apache.commons.math3.geometry.spherical.twod.S2Point);
    Code:
       0: aload_0
       1: getfield      #12                 // Field vector:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: aload_1
       5: getfield      #12                 // Field vector:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokestatic  #7                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.angle:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
      11: dreturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
      11: ifeq          61
      14: aload_1
      15: checkcast     #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
      18: astore_2
      19: aload_2
      20: invokevirtual #28                 // Method isNaN:()Z
      23: ifeq          31
      26: aload_0
      27: invokevirtual #28                 // Method isNaN:()Z
      30: ireturn
      31: aload_0
      32: getfield      #10                 // Field theta:D
      35: aload_2
      36: getfield      #10                 // Field theta:D
      39: dcmpl
      40: ifne          59
      43: aload_0
      44: getfield      #11                 // Field phi:D
      47: aload_2
      48: getfield      #11                 // Field phi:D
      51: dcmpl
      52: ifne          59
      55: iconst_1
      56: goto          60
      59: iconst_0
      60: ireturn
      61: iconst_0
      62: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method isNaN:()Z
       4: ifeq          11
       7: sipush        542
      10: ireturn
      11: sipush        134
      14: bipush        37
      16: aload_0
      17: getfield      #10                 // Field theta:D
      20: invokestatic  #29                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      23: imul
      24: aload_0
      25: getfield      #11                 // Field phi:D
      28: invokestatic  #29                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      31: iadd
      32: imul
      33: ireturn

  static {};
    Code:
       0: new           #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
       3: dup
       4: dconst_0
       5: ldc2_w        #30                 // double 1.5707963267948966d
       8: getstatic     #32                 // Field org/apache/commons/math3/geometry/euclidean/threed/Vector3D.PLUS_I:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      11: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      14: putstatic     #33                 // Field PLUS_I:Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;
      17: new           #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
      20: dup
      21: ldc2_w        #30                 // double 1.5707963267948966d
      24: ldc2_w        #30                 // double 1.5707963267948966d
      27: getstatic     #34                 // Field org/apache/commons/math3/geometry/euclidean/threed/Vector3D.PLUS_J:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      30: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      33: putstatic     #35                 // Field PLUS_J:Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;
      36: new           #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
      39: dup
      40: dconst_0
      41: dconst_0
      42: getstatic     #6                  // Field org/apache/commons/math3/geometry/euclidean/threed/Vector3D.PLUS_K:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      45: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      48: putstatic     #36                 // Field PLUS_K:Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;
      51: new           #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
      54: dup
      55: ldc2_w        #13                 // double 3.141592653589793d
      58: ldc2_w        #30                 // double 1.5707963267948966d
      61: getstatic     #37                 // Field org/apache/commons/math3/geometry/euclidean/threed/Vector3D.MINUS_I:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      64: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      67: putstatic     #38                 // Field MINUS_I:Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;
      70: new           #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
      73: dup
      74: ldc2_w        #39                 // double 4.71238898038469d
      77: ldc2_w        #30                 // double 1.5707963267948966d
      80: getstatic     #41                 // Field org/apache/commons/math3/geometry/euclidean/threed/Vector3D.MINUS_J:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      83: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      86: putstatic     #42                 // Field MINUS_J:Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;
      89: new           #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
      92: dup
      93: dconst_0
      94: ldc2_w        #13                 // double 3.141592653589793d
      97: getstatic     #43                 // Field org/apache/commons/math3/geometry/euclidean/threed/Vector3D.MINUS_K:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
     100: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
     103: putstatic     #44                 // Field MINUS_K:Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;
     106: new           #25                 // class org/apache/commons/math3/geometry/spherical/twod/S2Point
     109: dup
     110: ldc2_w        #45                 // double NaNd
     113: ldc2_w        #45                 // double NaNd
     116: getstatic     #47                 // Field org/apache/commons/math3/geometry/euclidean/threed/Vector3D.NaN:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
     119: invokespecial #2                  // Method "<init>":(DDLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
     122: putstatic     #48                 // Field NaN:Lorg/apache/commons/math3/geometry/spherical/twod/S2Point;
     125: return
}
