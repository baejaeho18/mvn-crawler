Compiled from "DiagonalMatrix.java"
public class org.apache.commons.math3.linear.DiagonalMatrix extends org.apache.commons.math3.linear.AbstractRealMatrix implements java.io.Serializable {
  private static final long serialVersionUID;

  private final double[] data;

  public org.apache.commons.math3.linear.DiagonalMatrix(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_1
       3: invokespecial #1                  // Method org/apache/commons/math3/linear/AbstractRealMatrix."<init>":(II)V
       6: aload_0
       7: iload_1
       8: newarray       double
      10: putfield      #2                  // Field data:[D
      13: return

  public org.apache.commons.math3.linear.DiagonalMatrix(double[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokespecial #3                  // Method "<init>":([DZ)V
       6: return

  public org.apache.commons.math3.linear.DiagonalMatrix(double[], boolean) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/apache/commons/math3/linear/AbstractRealMatrix."<init>":()V
       4: aload_1
       5: invokestatic  #5                  // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
       8: aload_0
       9: iload_2
      10: ifeq          23
      13: aload_1
      14: invokevirtual #6                  // Method "[D".clone:()Ljava/lang/Object;
      17: checkcast     #7                  // class "[D"
      20: goto          24
      23: aload_1
      24: putfield      #2                  // Field data:[D
      27: return

  public org.apache.commons.math3.linear.RealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpeq     15
       5: new           #8                  // class org/apache/commons/math3/exception/DimensionMismatchException
       8: dup
       9: iload_1
      10: iload_2
      11: invokespecial #9                  // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      14: athrow
      15: new           #10                 // class org/apache/commons/math3/linear/DiagonalMatrix
      18: dup
      19: iload_1
      20: invokespecial #11                 // Method "<init>":(I)V
      23: areturn

  public org.apache.commons.math3.linear.RealMatrix copy();
    Code:
       0: new           #10                 // class org/apache/commons/math3/linear/DiagonalMatrix
       3: dup
       4: aload_0
       5: getfield      #2                  // Field data:[D
       8: invokespecial #12                 // Method "<init>":([D)V
      11: areturn

  public org.apache.commons.math3.linear.DiagonalMatrix add(org.apache.commons.math3.linear.DiagonalMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #13                 // Method org/apache/commons/math3/linear/MatrixUtils.checkAdditionCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
       5: aload_0
       6: invokevirtual #14                 // Method getRowDimension:()I
       9: istore_2
      10: iload_2
      11: newarray       double
      13: astore_3
      14: iconst_0
      15: istore        4
      17: iload         4
      19: iload_2
      20: if_icmpge     48
      23: aload_3
      24: iload         4
      26: aload_0
      27: getfield      #2                  // Field data:[D
      30: iload         4
      32: daload
      33: aload_1
      34: getfield      #2                  // Field data:[D
      37: iload         4
      39: daload
      40: dadd
      41: dastore
      42: iinc          4, 1
      45: goto          17
      48: new           #10                 // class org/apache/commons/math3/linear/DiagonalMatrix
      51: dup
      52: aload_3
      53: iconst_0
      54: invokespecial #3                  // Method "<init>":([DZ)V
      57: areturn

  public org.apache.commons.math3.linear.DiagonalMatrix subtract(org.apache.commons.math3.linear.DiagonalMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #15                 // Method org/apache/commons/math3/linear/MatrixUtils.checkSubtractionCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
       5: aload_0
       6: invokevirtual #14                 // Method getRowDimension:()I
       9: istore_2
      10: iload_2
      11: newarray       double
      13: astore_3
      14: iconst_0
      15: istore        4
      17: iload         4
      19: iload_2
      20: if_icmpge     48
      23: aload_3
      24: iload         4
      26: aload_0
      27: getfield      #2                  // Field data:[D
      30: iload         4
      32: daload
      33: aload_1
      34: getfield      #2                  // Field data:[D
      37: iload         4
      39: daload
      40: dsub
      41: dastore
      42: iinc          4, 1
      45: goto          17
      48: new           #10                 // class org/apache/commons/math3/linear/DiagonalMatrix
      51: dup
      52: aload_3
      53: iconst_0
      54: invokespecial #3                  // Method "<init>":([DZ)V
      57: areturn

  public org.apache.commons.math3.linear.DiagonalMatrix multiply(org.apache.commons.math3.linear.DiagonalMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #16                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMultiplicationCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
       5: aload_0
       6: invokevirtual #14                 // Method getRowDimension:()I
       9: istore_2
      10: iload_2
      11: newarray       double
      13: astore_3
      14: iconst_0
      15: istore        4
      17: iload         4
      19: iload_2
      20: if_icmpge     48
      23: aload_3
      24: iload         4
      26: aload_0
      27: getfield      #2                  // Field data:[D
      30: iload         4
      32: daload
      33: aload_1
      34: getfield      #2                  // Field data:[D
      37: iload         4
      39: daload
      40: dmul
      41: dastore
      42: iinc          4, 1
      45: goto          17
      48: new           #10                 // class org/apache/commons/math3/linear/DiagonalMatrix
      51: dup
      52: aload_3
      53: iconst_0
      54: invokespecial #3                  // Method "<init>":([DZ)V
      57: areturn

  public org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_1
       1: instanceof    #10                 // class org/apache/commons/math3/linear/DiagonalMatrix
       4: ifeq          16
       7: aload_0
       8: aload_1
       9: checkcast     #10                 // class org/apache/commons/math3/linear/DiagonalMatrix
      12: invokevirtual #17                 // Method multiply:(Lorg/apache/commons/math3/linear/DiagonalMatrix;)Lorg/apache/commons/math3/linear/DiagonalMatrix;
      15: areturn
      16: aload_0
      17: aload_1
      18: invokestatic  #16                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMultiplicationCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
      21: aload_1
      22: invokeinterface #18,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrix.getRowDimension:()I
      27: istore_2
      28: aload_1
      29: invokeinterface #19,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrix.getColumnDimension:()I
      34: istore_3
      35: iload_2
      36: iload_3
      37: multianewarray #20,  2            // class "[[D"
      41: astore        4
      43: iconst_0
      44: istore        5
      46: iload         5
      48: iload_2
      49: if_icmpge     99
      52: iconst_0
      53: istore        6
      55: iload         6
      57: iload_3
      58: if_icmpge     93
      61: aload         4
      63: iload         5
      65: aaload
      66: iload         6
      68: aload_0
      69: getfield      #2                  // Field data:[D
      72: iload         5
      74: daload
      75: aload_1
      76: iload         5
      78: iload         6
      80: invokeinterface #21,  3           // InterfaceMethod org/apache/commons/math3/linear/RealMatrix.getEntry:(II)D
      85: dmul
      86: dastore
      87: iinc          6, 1
      90: goto          55
      93: iinc          5, 1
      96: goto          46
      99: new           #22                 // class org/apache/commons/math3/linear/Array2DRowRealMatrix
     102: dup
     103: aload         4
     105: iconst_0
     106: invokespecial #23                 // Method org/apache/commons/math3/linear/Array2DRowRealMatrix."<init>":([[DZ)V
     109: areturn

  public double[][] getData();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getRowDimension:()I
       4: istore_1
       5: iload_1
       6: iload_1
       7: multianewarray #20,  2            // class "[[D"
      11: astore_2
      12: iconst_0
      13: istore_3
      14: iload_3
      15: iload_1
      16: if_icmpge     36
      19: aload_2
      20: iload_3
      21: aaload
      22: iload_3
      23: aload_0
      24: getfield      #2                  // Field data:[D
      27: iload_3
      28: daload
      29: dastore
      30: iinc          3, 1
      33: goto          14
      36: aload_2
      37: areturn

  public double[] getDataRef();
    Code:
       0: aload_0
       1: getfield      #2                  // Field data:[D
       4: areturn

  public double getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #24                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMatrixIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;II)V
       6: iload_1
       7: iload_2
       8: if_icmpne     20
      11: aload_0
      12: getfield      #2                  // Field data:[D
      15: iload_1
      16: daload
      17: goto          21
      20: dconst_0
      21: dreturn

  public void setEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpne     20
       5: aload_0
       6: iload_1
       7: invokestatic  #25                 // Method org/apache/commons/math3/linear/MatrixUtils.checkRowIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
      10: aload_0
      11: getfield      #2                  // Field data:[D
      14: iload_1
      15: dload_3
      16: dastore
      17: goto          25
      20: aload_0
      21: dload_3
      22: invokespecial #26                 // Method ensureZero:(D)V
      25: return

  public void addToEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpne     23
       5: aload_0
       6: iload_1
       7: invokestatic  #25                 // Method org/apache/commons/math3/linear/MatrixUtils.checkRowIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
      10: aload_0
      11: getfield      #2                  // Field data:[D
      14: iload_1
      15: dup2
      16: daload
      17: dload_3
      18: dadd
      19: dastore
      20: goto          28
      23: aload_0
      24: dload_3
      25: invokespecial #26                 // Method ensureZero:(D)V
      28: return

  public void multiplyEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpne     20
       5: aload_0
       6: iload_1
       7: invokestatic  #25                 // Method org/apache/commons/math3/linear/MatrixUtils.checkRowIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
      10: aload_0
      11: getfield      #2                  // Field data:[D
      14: iload_1
      15: dup2
      16: daload
      17: dload_3
      18: dmul
      19: dastore
      20: return

  public int getRowDimension();
    Code:
       0: aload_0
       1: getfield      #2                  // Field data:[D
       4: arraylength
       5: ireturn

  public int getColumnDimension();
    Code:
       0: aload_0
       1: getfield      #2                  // Field data:[D
       4: arraylength
       5: ireturn

  public double[] operate(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: new           #10                 // class org/apache/commons/math3/linear/DiagonalMatrix
       4: dup
       5: aload_1
       6: iconst_0
       7: invokespecial #3                  // Method "<init>":([DZ)V
      10: invokevirtual #17                 // Method multiply:(Lorg/apache/commons/math3/linear/DiagonalMatrix;)Lorg/apache/commons/math3/linear/DiagonalMatrix;
      13: invokevirtual #27                 // Method getDataRef:()[D
      16: areturn

  public double[] preMultiply(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #28                 // Method operate:([D)[D
       5: areturn

  public org.apache.commons.math3.linear.RealVector preMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_1
       1: instanceof    #29                 // class org/apache/commons/math3/linear/ArrayRealVector
       4: ifeq          18
       7: aload_1
       8: checkcast     #29                 // class org/apache/commons/math3/linear/ArrayRealVector
      11: invokevirtual #30                 // Method org/apache/commons/math3/linear/ArrayRealVector.getDataRef:()[D
      14: astore_2
      15: goto          23
      18: aload_1
      19: invokevirtual #31                 // Method org/apache/commons/math3/linear/RealVector.toArray:()[D
      22: astore_2
      23: aload_0
      24: aload_2
      25: invokevirtual #32                 // Method preMultiply:([D)[D
      28: invokestatic  #33                 // Method org/apache/commons/math3/linear/MatrixUtils.createRealVector:([D)Lorg/apache/commons/math3/linear/RealVector;
      31: areturn

  private void ensureZero(double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: dconst_0
       1: dload_1
       2: iconst_1
       3: invokestatic  #34                 // Method org/apache/commons/math3/util/Precision.equals:(DDI)Z
       6: ifne          29
       9: new           #35                 // class org/apache/commons/math3/exception/NumberIsTooLargeException
      12: dup
      13: dload_1
      14: invokestatic  #36                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      17: invokestatic  #37                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      20: iconst_0
      21: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: iconst_1
      25: invokespecial #39                 // Method org/apache/commons/math3/exception/NumberIsTooLargeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Z)V
      28: athrow
      29: return

  public org.apache.commons.math3.linear.DiagonalMatrix inverse() throws org.apache.commons.math3.linear.SingularMatrixException;
    Code:
       0: aload_0
       1: dconst_0
       2: invokevirtual #40                 // Method inverse:(D)Lorg/apache/commons/math3/linear/DiagonalMatrix;
       5: areturn

  public org.apache.commons.math3.linear.DiagonalMatrix inverse(double) throws org.apache.commons.math3.linear.SingularMatrixException;
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #41                 // Method isSingular:(D)Z
       5: ifeq          16
       8: new           #42                 // class org/apache/commons/math3/linear/SingularMatrixException
      11: dup
      12: invokespecial #43                 // Method org/apache/commons/math3/linear/SingularMatrixException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #2                  // Field data:[D
      20: arraylength
      21: newarray       double
      23: astore_3
      24: iconst_0
      25: istore        4
      27: iload         4
      29: aload_0
      30: getfield      #2                  // Field data:[D
      33: arraylength
      34: if_icmpge     56
      37: aload_3
      38: iload         4
      40: dconst_1
      41: aload_0
      42: getfield      #2                  // Field data:[D
      45: iload         4
      47: daload
      48: ddiv
      49: dastore
      50: iinc          4, 1
      53: goto          27
      56: new           #10                 // class org/apache/commons/math3/linear/DiagonalMatrix
      59: dup
      60: aload_3
      61: iconst_0
      62: invokespecial #3                  // Method "<init>":([DZ)V
      65: areturn

  public boolean isSingular(double);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: aload_0
       4: getfield      #2                  // Field data:[D
       7: arraylength
       8: if_icmpge     33
      11: aload_0
      12: getfield      #2                  // Field data:[D
      15: iload_3
      16: daload
      17: dconst_0
      18: dload_1
      19: invokestatic  #44                 // Method org/apache/commons/math3/util/Precision.equals:(DDD)Z
      22: ifeq          27
      25: iconst_1
      26: ireturn
      27: iinc          3, 1
      30: goto          2
      33: iconst_0
      34: ireturn
}
