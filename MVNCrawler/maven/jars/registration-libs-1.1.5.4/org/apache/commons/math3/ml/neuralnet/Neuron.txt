Compiled from "Neuron.java"
public class org.apache.commons.math3.ml.neuralnet.Neuron implements java.io.Serializable {
  private static final long serialVersionUID;

  private final long identifier;

  private final int size;

  private final java.util.concurrent.atomic.AtomicReference<double[]> features;

  private final java.util.concurrent.atomic.AtomicLong numberOfAttemptedUpdates;

  private final java.util.concurrent.atomic.AtomicLong numberOfSuccessfulUpdates;

  org.apache.commons.math3.ml.neuralnet.Neuron(long, double[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: lconst_0
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      13: putfield      #4                  // Field numberOfAttemptedUpdates:Ljava/util/concurrent/atomic/AtomicLong;
      16: aload_0
      17: new           #2                  // class java/util/concurrent/atomic/AtomicLong
      20: dup
      21: lconst_0
      22: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      25: putfield      #5                  // Field numberOfSuccessfulUpdates:Ljava/util/concurrent/atomic/AtomicLong;
      28: aload_0
      29: lload_1
      30: putfield      #6                  // Field identifier:J
      33: aload_0
      34: aload_3
      35: arraylength
      36: putfield      #7                  // Field size:I
      39: aload_0
      40: new           #8                  // class java/util/concurrent/atomic/AtomicReference
      43: dup
      44: aload_3
      45: invokevirtual #9                  // Method "[D".clone:()Ljava/lang/Object;
      48: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      51: putfield      #11                 // Field features:Ljava/util/concurrent/atomic/AtomicReference;
      54: return

  public synchronized org.apache.commons.math3.ml.neuralnet.Neuron copy();
    Code:
       0: new           #12                 // class org/apache/commons/math3/ml/neuralnet/Neuron
       3: dup
       4: aload_0
       5: invokevirtual #13                 // Method getIdentifier:()J
       8: aload_0
       9: invokevirtual #14                 // Method getFeatures:()[D
      12: invokespecial #15                 // Method "<init>":(J[D)V
      15: astore_1
      16: aload_1
      17: getfield      #4                  // Field numberOfAttemptedUpdates:Ljava/util/concurrent/atomic/AtomicLong;
      20: aload_0
      21: getfield      #4                  // Field numberOfAttemptedUpdates:Ljava/util/concurrent/atomic/AtomicLong;
      24: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      27: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      30: aload_1
      31: getfield      #5                  // Field numberOfSuccessfulUpdates:Ljava/util/concurrent/atomic/AtomicLong;
      34: aload_0
      35: getfield      #5                  // Field numberOfSuccessfulUpdates:Ljava/util/concurrent/atomic/AtomicLong;
      38: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      41: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      44: aload_1
      45: areturn

  public long getIdentifier();
    Code:
       0: aload_0
       1: getfield      #6                  // Field identifier:J
       4: lreturn

  public int getSize();
    Code:
       0: aload_0
       1: getfield      #7                  // Field size:I
       4: ireturn

  public double[] getFeatures();
    Code:
       0: aload_0
       1: getfield      #11                 // Field features:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #19                 // class "[D"
      10: invokevirtual #20                 // Method "[D".clone:()Ljava/lang/Object;
      13: checkcast     #19                 // class "[D"
      16: areturn

  public boolean compareAndSetFeatures(double[], double[]);
    Code:
       0: aload_2
       1: arraylength
       2: aload_0
       3: getfield      #7                  // Field size:I
       6: if_icmpeq     23
       9: new           #21                 // class org/apache/commons/math3/exception/DimensionMismatchException
      12: dup
      13: aload_2
      14: arraylength
      15: aload_0
      16: getfield      #7                  // Field size:I
      19: invokespecial #22                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      22: athrow
      23: aload_0
      24: getfield      #11                 // Field features:Ljava/util/concurrent/atomic/AtomicReference;
      27: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      30: checkcast     #19                 // class "[D"
      33: astore_3
      34: aload_0
      35: aload_3
      36: aload_1
      37: invokespecial #23                 // Method containSameValues:([D[D)Z
      40: ifne          45
      43: iconst_0
      44: ireturn
      45: aload_0
      46: getfield      #4                  // Field numberOfAttemptedUpdates:Ljava/util/concurrent/atomic/AtomicLong;
      49: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      52: pop2
      53: aload_0
      54: getfield      #11                 // Field features:Ljava/util/concurrent/atomic/AtomicReference;
      57: aload_3
      58: aload_2
      59: invokevirtual #25                 // Method "[D".clone:()Ljava/lang/Object;
      62: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      65: ifeq          78
      68: aload_0
      69: getfield      #5                  // Field numberOfSuccessfulUpdates:Ljava/util/concurrent/atomic/AtomicLong;
      72: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      75: pop2
      76: iconst_1
      77: ireturn
      78: iconst_0
      79: ireturn

  public long getNumberOfAttemptedUpdates();
    Code:
       0: aload_0
       1: getfield      #4                  // Field numberOfAttemptedUpdates:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getNumberOfSuccessfulUpdates();
    Code:
       0: aload_0
       1: getfield      #5                  // Field numberOfSuccessfulUpdates:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  private boolean containSameValues(double[], double[]);
    Code:
       0: aload_2
       1: arraylength
       2: aload_0
       3: getfield      #7                  // Field size:I
       6: if_icmpeq     23
       9: new           #21                 // class org/apache/commons/math3/exception/DimensionMismatchException
      12: dup
      13: aload_2
      14: arraylength
      15: aload_0
      16: getfield      #7                  // Field size:I
      19: invokespecial #22                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      22: athrow
      23: iconst_0
      24: istore_3
      25: iload_3
      26: aload_0
      27: getfield      #7                  // Field size:I
      30: if_icmpge     53
      33: aload_1
      34: iload_3
      35: daload
      36: aload_2
      37: iload_3
      38: daload
      39: invokestatic  #27                 // Method org/apache/commons/math3/util/Precision.equals:(DD)Z
      42: ifne          47
      45: iconst_0
      46: ireturn
      47: iinc          3, 1
      50: goto          25
      53: iconst_1
      54: ireturn

  private void readObject(java.io.ObjectInputStream);
    Code:
       0: new           #28                 // class java/lang/IllegalStateException
       3: dup
       4: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":()V
       7: athrow

  private java.lang.Object writeReplace();
    Code:
       0: new           #30                 // class org/apache/commons/math3/ml/neuralnet/Neuron$SerializationProxy
       3: dup
       4: aload_0
       5: getfield      #6                  // Field identifier:J
       8: aload_0
       9: getfield      #11                 // Field features:Ljava/util/concurrent/atomic/AtomicReference;
      12: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      15: checkcast     #19                 // class "[D"
      18: invokespecial #31                 // Method org/apache/commons/math3/ml/neuralnet/Neuron$SerializationProxy."<init>":(J[D)V
      21: areturn
}
