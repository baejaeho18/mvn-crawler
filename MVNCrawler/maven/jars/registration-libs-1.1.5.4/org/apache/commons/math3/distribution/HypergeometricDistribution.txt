Compiled from "HypergeometricDistribution.java"
public class org.apache.commons.math3.distribution.HypergeometricDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution {
  private static final long serialVersionUID;

  private final int numberOfSuccesses;

  private final int populationSize;

  private final int sampleSize;

  private double numericalVariance;

  private boolean numericalVarianceIsCalculated;

  public org.apache.commons.math3.distribution.HypergeometricDistribution(int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: new           #1                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #2                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: iload_1
       9: iload_2
      10: iload_3
      11: invokespecial #3                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;III)V
      14: return

  public org.apache.commons.math3.distribution.HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator, int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method org/apache/commons/math3/distribution/AbstractIntegerDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: aload_0
       6: ldc2_w        #5                  // double NaNd
       9: putfield      #7                  // Field numericalVariance:D
      12: aload_0
      13: iconst_0
      14: putfield      #8                  // Field numericalVarianceIsCalculated:Z
      17: iload_2
      18: ifgt          36
      21: new           #9                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      24: dup
      25: getstatic     #10                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.POPULATION_SIZE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      28: iload_2
      29: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      32: invokespecial #12                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      35: athrow
      36: iload_3
      37: ifge          55
      40: new           #13                 // class org/apache/commons/math3/exception/NotPositiveException
      43: dup
      44: getstatic     #14                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.NUMBER_OF_SUCCESSES:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      47: iload_3
      48: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      51: invokespecial #15                 // Method org/apache/commons/math3/exception/NotPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      54: athrow
      55: iload         4
      57: ifge          76
      60: new           #13                 // class org/apache/commons/math3/exception/NotPositiveException
      63: dup
      64: getstatic     #16                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.NUMBER_OF_SAMPLES:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      67: iload         4
      69: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      72: invokespecial #15                 // Method org/apache/commons/math3/exception/NotPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      75: athrow
      76: iload_3
      77: iload_2
      78: if_icmple     101
      81: new           #17                 // class org/apache/commons/math3/exception/NumberIsTooLargeException
      84: dup
      85: getstatic     #18                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      88: iload_3
      89: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      92: iload_2
      93: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      96: iconst_1
      97: invokespecial #19                 // Method org/apache/commons/math3/exception/NumberIsTooLargeException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
     100: athrow
     101: iload         4
     103: iload_2
     104: if_icmple     128
     107: new           #17                 // class org/apache/commons/math3/exception/NumberIsTooLargeException
     110: dup
     111: getstatic     #20                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
     114: iload         4
     116: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     119: iload_2
     120: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     123: iconst_1
     124: invokespecial #19                 // Method org/apache/commons/math3/exception/NumberIsTooLargeException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
     127: athrow
     128: aload_0
     129: iload_3
     130: putfield      #21                 // Field numberOfSuccesses:I
     133: aload_0
     134: iload_2
     135: putfield      #22                 // Field populationSize:I
     138: aload_0
     139: iload         4
     141: putfield      #23                 // Field sampleSize:I
     144: return

  public double cumulativeProbability(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #22                 // Field populationSize:I
       5: aload_0
       6: getfield      #21                 // Field numberOfSuccesses:I
       9: aload_0
      10: getfield      #23                 // Field sampleSize:I
      13: invokespecial #24                 // Method getDomain:(III)[I
      16: astore        4
      18: iload_1
      19: aload         4
      21: iconst_0
      22: iaload
      23: if_icmpge     31
      26: dconst_0
      27: dstore_2
      28: goto          55
      31: iload_1
      32: aload         4
      34: iconst_1
      35: iaload
      36: if_icmplt     44
      39: dconst_1
      40: dstore_2
      41: goto          55
      44: aload_0
      45: aload         4
      47: iconst_0
      48: iaload
      49: iload_1
      50: iconst_1
      51: invokespecial #25                 // Method innerCumulativeProbability:(III)D
      54: dstore_2
      55: dload_2
      56: dreturn

  private int[] getDomain(int, int, int);
    Code:
       0: iconst_2
       1: newarray       int
       3: dup
       4: iconst_0
       5: aload_0
       6: iload_1
       7: iload_2
       8: iload_3
       9: invokespecial #26                 // Method getLowerDomain:(III)I
      12: iastore
      13: dup
      14: iconst_1
      15: aload_0
      16: iload_2
      17: iload_3
      18: invokespecial #27                 // Method getUpperDomain:(II)I
      21: iastore
      22: areturn

  private int getLowerDomain(int, int, int);
    Code:
       0: iconst_0
       1: iload_2
       2: iload_1
       3: iload_3
       4: isub
       5: isub
       6: invokestatic  #28                 // Method org/apache/commons/math3/util/FastMath.max:(II)I
       9: ireturn

  public int getNumberOfSuccesses();
    Code:
       0: aload_0
       1: getfield      #21                 // Field numberOfSuccesses:I
       4: ireturn

  public int getPopulationSize();
    Code:
       0: aload_0
       1: getfield      #22                 // Field populationSize:I
       4: ireturn

  public int getSampleSize();
    Code:
       0: aload_0
       1: getfield      #23                 // Field sampleSize:I
       4: ireturn

  private int getUpperDomain(int, int);
    Code:
       0: iload_2
       1: iload_1
       2: invokestatic  #29                 // Method org/apache/commons/math3/util/FastMath.min:(II)I
       5: ireturn

  public double probability(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #30                 // Method logProbability:(I)D
       5: dstore_2
       6: dload_2
       7: ldc2_w        #31                 // double -Infinityd
      10: dcmpl
      11: ifne          18
      14: dconst_0
      15: goto          22
      18: dload_2
      19: invokestatic  #33                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      22: dreturn

  public double logProbability(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #22                 // Field populationSize:I
       5: aload_0
       6: getfield      #21                 // Field numberOfSuccesses:I
       9: aload_0
      10: getfield      #23                 // Field sampleSize:I
      13: invokespecial #24                 // Method getDomain:(III)[I
      16: astore        4
      18: iload_1
      19: aload         4
      21: iconst_0
      22: iaload
      23: if_icmplt     34
      26: iload_1
      27: aload         4
      29: iconst_1
      30: iaload
      31: if_icmple     41
      34: ldc2_w        #31                 // double -Infinityd
      37: dstore_2
      38: goto          136
      41: aload_0
      42: getfield      #23                 // Field sampleSize:I
      45: i2d
      46: aload_0
      47: getfield      #22                 // Field populationSize:I
      50: i2d
      51: ddiv
      52: dstore        5
      54: aload_0
      55: getfield      #22                 // Field populationSize:I
      58: aload_0
      59: getfield      #23                 // Field sampleSize:I
      62: isub
      63: i2d
      64: aload_0
      65: getfield      #22                 // Field populationSize:I
      68: i2d
      69: ddiv
      70: dstore        7
      72: iload_1
      73: aload_0
      74: getfield      #21                 // Field numberOfSuccesses:I
      77: dload         5
      79: dload         7
      81: invokestatic  #34                 // Method org/apache/commons/math3/distribution/SaddlePointExpansion.logBinomialProbability:(IIDD)D
      84: dstore        9
      86: aload_0
      87: getfield      #23                 // Field sampleSize:I
      90: iload_1
      91: isub
      92: aload_0
      93: getfield      #22                 // Field populationSize:I
      96: aload_0
      97: getfield      #21                 // Field numberOfSuccesses:I
     100: isub
     101: dload         5
     103: dload         7
     105: invokestatic  #34                 // Method org/apache/commons/math3/distribution/SaddlePointExpansion.logBinomialProbability:(IIDD)D
     108: dstore        11
     110: aload_0
     111: getfield      #23                 // Field sampleSize:I
     114: aload_0
     115: getfield      #22                 // Field populationSize:I
     118: dload         5
     120: dload         7
     122: invokestatic  #34                 // Method org/apache/commons/math3/distribution/SaddlePointExpansion.logBinomialProbability:(IIDD)D
     125: dstore        13
     127: dload         9
     129: dload         11
     131: dadd
     132: dload         13
     134: dsub
     135: dstore_2
     136: dload_2
     137: dreturn

  public double upperCumulativeProbability(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #22                 // Field populationSize:I
       5: aload_0
       6: getfield      #21                 // Field numberOfSuccesses:I
       9: aload_0
      10: getfield      #23                 // Field sampleSize:I
      13: invokespecial #24                 // Method getDomain:(III)[I
      16: astore        4
      18: iload_1
      19: aload         4
      21: iconst_0
      22: iaload
      23: if_icmpgt     31
      26: dconst_1
      27: dstore_2
      28: goto          55
      31: iload_1
      32: aload         4
      34: iconst_1
      35: iaload
      36: if_icmple     44
      39: dconst_0
      40: dstore_2
      41: goto          55
      44: aload_0
      45: aload         4
      47: iconst_1
      48: iaload
      49: iload_1
      50: iconst_m1
      51: invokespecial #25                 // Method innerCumulativeProbability:(III)D
      54: dstore_2
      55: dload_2
      56: dreturn

  private double innerCumulativeProbability(int, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #35                 // Method probability:(I)D
       5: dstore        4
       7: iload_1
       8: iload_2
       9: if_icmpeq     29
      12: iload_1
      13: iload_3
      14: iadd
      15: istore_1
      16: dload         4
      18: aload_0
      19: iload_1
      20: invokevirtual #35                 // Method probability:(I)D
      23: dadd
      24: dstore        4
      26: goto          7
      29: dload         4
      31: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method getSampleSize:()I
       4: i2d
       5: aload_0
       6: invokevirtual #37                 // Method getNumberOfSuccesses:()I
       9: i2d
      10: aload_0
      11: invokevirtual #38                 // Method getPopulationSize:()I
      14: i2d
      15: ddiv
      16: dmul
      17: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: getfield      #8                  // Field numericalVarianceIsCalculated:Z
       4: ifne          20
       7: aload_0
       8: aload_0
       9: invokevirtual #39                 // Method calculateNumericalVariance:()D
      12: putfield      #7                  // Field numericalVariance:D
      15: aload_0
      16: iconst_1
      17: putfield      #8                  // Field numericalVarianceIsCalculated:Z
      20: aload_0
      21: getfield      #7                  // Field numericalVariance:D
      24: dreturn

  protected double calculateNumericalVariance();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method getPopulationSize:()I
       4: i2d
       5: dstore_1
       6: aload_0
       7: invokevirtual #37                 // Method getNumberOfSuccesses:()I
      10: i2d
      11: dstore_3
      12: aload_0
      13: invokevirtual #36                 // Method getSampleSize:()I
      16: i2d
      17: dstore        5
      19: dload         5
      21: dload_3
      22: dmul
      23: dload_1
      24: dload         5
      26: dsub
      27: dmul
      28: dload_1
      29: dload_3
      30: dsub
      31: dmul
      32: dload_1
      33: dload_1
      34: dmul
      35: dload_1
      36: dconst_1
      37: dsub
      38: dmul
      39: ddiv
      40: dreturn

  public int getSupportLowerBound();
    Code:
       0: iconst_0
       1: aload_0
       2: invokevirtual #36                 // Method getSampleSize:()I
       5: aload_0
       6: invokevirtual #37                 // Method getNumberOfSuccesses:()I
       9: iadd
      10: aload_0
      11: invokevirtual #38                 // Method getPopulationSize:()I
      14: isub
      15: invokestatic  #28                 // Method org/apache/commons/math3/util/FastMath.max:(II)I
      18: ireturn

  public int getSupportUpperBound();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method getNumberOfSuccesses:()I
       4: aload_0
       5: invokevirtual #36                 // Method getSampleSize:()I
       8: invokestatic  #29                 // Method org/apache/commons/math3/util/FastMath.min:(II)I
      11: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
