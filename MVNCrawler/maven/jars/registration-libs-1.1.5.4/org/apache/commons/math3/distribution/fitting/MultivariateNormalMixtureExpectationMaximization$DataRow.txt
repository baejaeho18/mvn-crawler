Compiled from "MultivariateNormalMixtureExpectationMaximization.java"
class org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow implements java.lang.Comparable<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow> {
  private final double[] row;

  private java.lang.Double mean;

  org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow(double[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field row:[D
       9: aload_0
      10: dconst_0
      11: invokestatic  #3                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      14: putfield      #4                  // Field mean:Ljava/lang/Double;
      17: iconst_0
      18: istore_2
      19: iload_2
      20: aload_1
      21: arraylength
      22: if_icmpge     49
      25: aload_0
      26: aload_0
      27: getfield      #4                  // Field mean:Ljava/lang/Double;
      30: invokevirtual #5                  // Method java/lang/Double.doubleValue:()D
      33: aload_1
      34: iload_2
      35: daload
      36: dadd
      37: invokestatic  #3                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      40: putfield      #4                  // Field mean:Ljava/lang/Double;
      43: iinc          2, 1
      46: goto          19
      49: aload_0
      50: aload_0
      51: getfield      #4                  // Field mean:Ljava/lang/Double;
      54: invokevirtual #5                  // Method java/lang/Double.doubleValue:()D
      57: aload_1
      58: arraylength
      59: i2d
      60: ddiv
      61: invokestatic  #3                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      64: putfield      #4                  // Field mean:Ljava/lang/Double;
      67: return

  public int compareTo(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow);
    Code:
       0: aload_0
       1: getfield      #4                  // Field mean:Ljava/lang/Double;
       4: aload_1
       5: getfield      #4                  // Field mean:Ljava/lang/Double;
       8: invokevirtual #6                  // Method java/lang/Double.compareTo:(Ljava/lang/Double;)I
      11: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #7                  // class org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization$DataRow
      11: ifeq          29
      14: aload_0
      15: getfield      #2                  // Field row:[D
      18: aload_1
      19: checkcast     #7                  // class org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization$DataRow
      22: getfield      #2                  // Field row:[D
      25: invokestatic  #8                  // Method org/apache/commons/math3/util/MathArrays.equals:([D[D)Z
      28: ireturn
      29: iconst_0
      30: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field row:[D
       4: invokestatic  #9                  // Method java/util/Arrays.hashCode:([D)I
       7: ireturn

  public double[] getRow();
    Code:
       0: aload_0
       1: getfield      #2                  // Field row:[D
       4: areturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #7                  // class org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization$DataRow
       5: invokevirtual #10                 // Method compareTo:(Lorg/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization$DataRow;)I
       8: ireturn
}
