Compiled from "AbstractCurveFitter.java"
public class org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction {
  private final org.apache.commons.math3.analysis.ParametricUnivariateFunction f;

  private final double[] points;

  public org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction(org.apache.commons.math3.analysis.ParametricUnivariateFunction, java.util.Collection<org.apache.commons.math3.fitting.WeightedObservedPoint>);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #1                  // Field f:Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;
       9: aload_2
      10: invokeinterface #4,  1            // InterfaceMethod java/util/Collection.size:()I
      15: istore_3
      16: aload_0
      17: iload_3
      18: newarray       double
      20: putfield      #2                  // Field points:[D
      23: iconst_0
      24: istore        4
      26: aload_2
      27: invokeinterface #5,  1            // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      32: astore        5
      34: aload         5
      36: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      41: ifeq          74
      44: aload         5
      46: invokeinterface #7,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      51: checkcast     #8                  // class org/apache/commons/math3/fitting/WeightedObservedPoint
      54: astore        6
      56: aload_0
      57: getfield      #2                  // Field points:[D
      60: iload         4
      62: iinc          4, 1
      65: aload         6
      67: invokevirtual #9                  // Method org/apache/commons/math3/fitting/WeightedObservedPoint.getX:()D
      70: dastore
      71: goto          34
      74: return

  public org.apache.commons.math3.analysis.MultivariateVectorFunction getModelFunction();
    Code:
       0: new           #10                 // class org/apache/commons/math3/fitting/AbstractCurveFitter$TheoreticalValuesFunction$1
       3: dup
       4: aload_0
       5: invokespecial #11                 // Method org/apache/commons/math3/fitting/AbstractCurveFitter$TheoreticalValuesFunction$1."<init>":(Lorg/apache/commons/math3/fitting/AbstractCurveFitter$TheoreticalValuesFunction;)V
       8: areturn

  public org.apache.commons.math3.analysis.MultivariateMatrixFunction getModelFunctionJacobian();
    Code:
       0: new           #12                 // class org/apache/commons/math3/fitting/AbstractCurveFitter$TheoreticalValuesFunction$2
       3: dup
       4: aload_0
       5: invokespecial #13                 // Method org/apache/commons/math3/fitting/AbstractCurveFitter$TheoreticalValuesFunction$2."<init>":(Lorg/apache/commons/math3/fitting/AbstractCurveFitter$TheoreticalValuesFunction;)V
       8: areturn

  static double[] access$000(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction);
    Code:
       0: aload_0
       1: getfield      #2                  // Field points:[D
       4: areturn

  static org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction);
    Code:
       0: aload_0
       1: getfield      #1                  // Field f:Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;
       4: areturn
}
