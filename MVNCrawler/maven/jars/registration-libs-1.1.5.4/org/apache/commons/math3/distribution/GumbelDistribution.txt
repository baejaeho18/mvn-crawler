Compiled from "GumbelDistribution.java"
public class org.apache.commons.math3.distribution.GumbelDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  private static final long serialVersionUID;

  private static final double EULER;

  private final double mu;

  private final double beta;

  public org.apache.commons.math3.distribution.GumbelDistribution(double, double);
    Code:
       0: aload_0
       1: new           #1                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #2                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: invokespecial #3                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DD)V
      13: return

  public org.apache.commons.math3.distribution.GumbelDistribution(org.apache.commons.math3.random.RandomGenerator, double, double);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: dload         4
       7: dconst_0
       8: dcmpg
       9: ifgt          28
      12: new           #5                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      15: dup
      16: getstatic     #6                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.SCALE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      19: dload         4
      21: invokestatic  #7                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      24: invokespecial #8                  // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      27: athrow
      28: aload_0
      29: dload         4
      31: putfield      #9                  // Field beta:D
      34: aload_0
      35: dload_2
      36: putfield      #10                 // Field mu:D
      39: return

  public double getLocation();
    Code:
       0: aload_0
       1: getfield      #10                 // Field mu:D
       4: dreturn

  public double getScale();
    Code:
       0: aload_0
       1: getfield      #9                  // Field beta:D
       4: dreturn

  public double density(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #10                 // Field mu:D
       5: dsub
       6: aload_0
       7: getfield      #9                  // Field beta:D
      10: ddiv
      11: dstore_3
      12: dload_3
      13: dneg
      14: invokestatic  #11                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      17: dstore        5
      19: dload_3
      20: dneg
      21: dload         5
      23: dsub
      24: invokestatic  #11                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      27: aload_0
      28: getfield      #9                  // Field beta:D
      31: ddiv
      32: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #10                 // Field mu:D
       5: dsub
       6: aload_0
       7: getfield      #9                  // Field beta:D
      10: ddiv
      11: dstore_3
      12: dload_3
      13: dneg
      14: invokestatic  #11                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      17: dneg
      18: invokestatic  #11                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      21: dreturn

  public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: iflt          12
       6: dload_1
       7: dconst_1
       8: dcmpl
       9: ifle          32
      12: new           #12                 // class org/apache/commons/math3/exception/OutOfRangeException
      15: dup
      16: dload_1
      17: invokestatic  #7                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      20: dconst_0
      21: invokestatic  #7                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      24: dconst_1
      25: invokestatic  #7                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      28: invokespecial #13                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      31: athrow
      32: dload_1
      33: dconst_0
      34: dcmpl
      35: ifne          42
      38: ldc2_w        #14                 // double -Infinityd
      41: dreturn
      42: dload_1
      43: dconst_1
      44: dcmpl
      45: ifne          52
      48: ldc2_w        #16                 // double Infinityd
      51: dreturn
      52: aload_0
      53: getfield      #10                 // Field mu:D
      56: dload_1
      57: invokestatic  #18                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      60: dneg
      61: invokestatic  #18                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      64: aload_0
      65: getfield      #9                  // Field beta:D
      68: dmul
      69: dsub
      70: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: getfield      #10                 // Field mu:D
       4: ldc2_w        #19                 // double 0.5778636748954609d
       7: aload_0
       8: getfield      #9                  // Field beta:D
      11: dmul
      12: dadd
      13: dreturn

  public double getNumericalVariance();
    Code:
       0: ldc2_w        #21                 // double 1.6449340668482264d
       3: aload_0
       4: getfield      #9                  // Field beta:D
       7: aload_0
       8: getfield      #9                  // Field beta:D
      11: dmul
      12: dmul
      13: dreturn

  public double getSupportLowerBound();
    Code:
       0: ldc2_w        #14                 // double -Infinityd
       3: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #16                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
