Compiled from "CMAESOptimizer.java"
class org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction {
  private final boolean isRepairMode;

  final org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0;

  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
       5: aload_0
       6: invokespecial #3                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: iconst_1
      11: putfield      #4                  // Field isRepairMode:Z
      14: return

  public org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair value(double[]);
    Code:
       0: dconst_0
       1: dstore        4
       3: aload_0
       4: getfield      #4                  // Field isRepairMode:Z
       7: ifeq          39
      10: aload_0
      11: aload_1
      12: invokespecial #1                  // Method repair:([D)[D
      15: astore        6
      17: aload_0
      18: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
      21: aload         6
      23: invokevirtual #5                  // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.computeObjectiveValue:([D)D
      26: dstore_2
      27: aload_0
      28: aload_1
      29: aload         6
      31: invokespecial #6                  // Method penalty:([D[D)D
      34: dstore        4
      36: goto          48
      39: aload_0
      40: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
      43: aload_1
      44: invokevirtual #5                  // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.computeObjectiveValue:([D)D
      47: dstore_2
      48: aload_0
      49: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
      52: invokestatic  #7                  // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.access$400:(Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;)Z
      55: ifeq          62
      58: dload_2
      59: goto          64
      62: dload_2
      63: dneg
      64: dstore_2
      65: aload_0
      66: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
      69: invokestatic  #7                  // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.access$400:(Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;)Z
      72: ifeq          80
      75: dload         4
      77: goto          83
      80: dload         4
      82: dneg
      83: dstore        4
      85: new           #8                  // class org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer$ValuePenaltyPair
      88: dup
      89: dload_2
      90: dload         4
      92: invokespecial #9                  // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer$ValuePenaltyPair."<init>":(DD)V
      95: areturn

  public boolean isFeasible(double[]);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
       4: invokevirtual #10                 // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.getLowerBound:()[D
       7: astore_2
       8: aload_0
       9: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
      12: invokevirtual #11                 // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.getUpperBound:()[D
      15: astore_3
      16: iconst_0
      17: istore        4
      19: iload         4
      21: aload_1
      22: arraylength
      23: if_icmpge     60
      26: aload_1
      27: iload         4
      29: daload
      30: aload_2
      31: iload         4
      33: daload
      34: dcmpg
      35: ifge          40
      38: iconst_0
      39: ireturn
      40: aload_1
      41: iload         4
      43: daload
      44: aload_3
      45: iload         4
      47: daload
      48: dcmpl
      49: ifle          54
      52: iconst_0
      53: ireturn
      54: iinc          4, 1
      57: goto          19
      60: iconst_1
      61: ireturn

  private double[] repair(double[]);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
       4: invokevirtual #10                 // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.getLowerBound:()[D
       7: astore_2
       8: aload_0
       9: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
      12: invokevirtual #11                 // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.getUpperBound:()[D
      15: astore_3
      16: aload_1
      17: arraylength
      18: newarray       double
      20: astore        4
      22: iconst_0
      23: istore        5
      25: iload         5
      27: aload_1
      28: arraylength
      29: if_icmpge     95
      32: aload_1
      33: iload         5
      35: daload
      36: aload_2
      37: iload         5
      39: daload
      40: dcmpg
      41: ifge          56
      44: aload         4
      46: iload         5
      48: aload_2
      49: iload         5
      51: daload
      52: dastore
      53: goto          89
      56: aload_1
      57: iload         5
      59: daload
      60: aload_3
      61: iload         5
      63: daload
      64: dcmpl
      65: ifle          80
      68: aload         4
      70: iload         5
      72: aload_3
      73: iload         5
      75: daload
      76: dastore
      77: goto          89
      80: aload         4
      82: iload         5
      84: aload_1
      85: iload         5
      87: daload
      88: dastore
      89: iinc          5, 1
      92: goto          25
      95: aload         4
      97: areturn

  private double penalty(double[], double[]);
    Code:
       0: dconst_0
       1: dstore_3
       2: iconst_0
       3: istore        5
       5: iload         5
       7: aload_1
       8: arraylength
       9: if_icmpge     37
      12: aload_1
      13: iload         5
      15: daload
      16: aload_2
      17: iload         5
      19: daload
      20: dsub
      21: invokestatic  #12                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      24: dstore        6
      26: dload_3
      27: dload         6
      29: dadd
      30: dstore_3
      31: iinc          5, 1
      34: goto          5
      37: aload_0
      38: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;
      41: invokestatic  #7                  // Method org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.access$400:(Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer;)Z
      44: ifeq          51
      47: dload_3
      48: goto          53
      51: dload_3
      52: dneg
      53: dreturn

  static double[] access$200(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction, double[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method repair:([D)[D
       5: areturn
}
