Compiled from "PolynomialSplineFunction.java"
public class org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction,org.apache.commons.math3.analysis.DifferentiableUnivariateFunction {
  private final double[] knots;

  private final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials;

  private final int n;

  public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction(double[], org.apache.commons.math3.analysis.polynomials.PolynomialFunction[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnull        12
       8: aload_2
       9: ifnonnull     20
      12: new           #2                  // class org/apache/commons/math3/exception/NullArgumentException
      15: dup
      16: invokespecial #3                  // Method org/apache/commons/math3/exception/NullArgumentException."<init>":()V
      19: athrow
      20: aload_1
      21: arraylength
      22: iconst_2
      23: if_icmpge     47
      26: new           #4                  // class org/apache/commons/math3/exception/NumberIsTooSmallException
      29: dup
      30: getstatic     #5                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      33: iconst_2
      34: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      37: aload_1
      38: arraylength
      39: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      42: iconst_0
      43: invokespecial #7                  // Method org/apache/commons/math3/exception/NumberIsTooSmallException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
      46: athrow
      47: aload_1
      48: arraylength
      49: iconst_1
      50: isub
      51: aload_2
      52: arraylength
      53: if_icmpeq     68
      56: new           #8                  // class org/apache/commons/math3/exception/DimensionMismatchException
      59: dup
      60: aload_2
      61: arraylength
      62: aload_1
      63: arraylength
      64: invokespecial #9                  // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      67: athrow
      68: aload_1
      69: invokestatic  #10                 // Method org/apache/commons/math3/util/MathArrays.checkOrder:([D)V
      72: aload_0
      73: aload_1
      74: arraylength
      75: iconst_1
      76: isub
      77: putfield      #11                 // Field n:I
      80: aload_0
      81: aload_0
      82: getfield      #11                 // Field n:I
      85: iconst_1
      86: iadd
      87: newarray       double
      89: putfield      #12                 // Field knots:[D
      92: aload_1
      93: iconst_0
      94: aload_0
      95: getfield      #12                 // Field knots:[D
      98: iconst_0
      99: aload_0
     100: getfield      #11                 // Field n:I
     103: iconst_1
     104: iadd
     105: invokestatic  #13                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     108: aload_0
     109: aload_0
     110: getfield      #11                 // Field n:I
     113: anewarray     #14                 // class org/apache/commons/math3/analysis/polynomials/PolynomialFunction
     116: putfield      #15                 // Field polynomials:[Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;
     119: aload_2
     120: iconst_0
     121: aload_0
     122: getfield      #15                 // Field polynomials:[Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;
     125: iconst_0
     126: aload_0
     127: getfield      #11                 // Field n:I
     130: invokestatic  #13                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     133: return

  public double value(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #12                 // Field knots:[D
       5: iconst_0
       6: daload
       7: dcmpg
       8: iflt          25
      11: dload_1
      12: aload_0
      13: getfield      #12                 // Field knots:[D
      16: aload_0
      17: getfield      #11                 // Field n:I
      20: daload
      21: dcmpl
      22: ifle          58
      25: new           #16                 // class org/apache/commons/math3/exception/OutOfRangeException
      28: dup
      29: dload_1
      30: invokestatic  #17                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      33: aload_0
      34: getfield      #12                 // Field knots:[D
      37: iconst_0
      38: daload
      39: invokestatic  #17                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      42: aload_0
      43: getfield      #12                 // Field knots:[D
      46: aload_0
      47: getfield      #11                 // Field n:I
      50: daload
      51: invokestatic  #17                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      54: invokespecial #18                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      57: athrow
      58: aload_0
      59: getfield      #12                 // Field knots:[D
      62: dload_1
      63: invokestatic  #19                 // Method java/util/Arrays.binarySearch:([DD)I
      66: istore_3
      67: iload_3
      68: ifge          76
      71: iload_3
      72: ineg
      73: iconst_2
      74: isub
      75: istore_3
      76: iload_3
      77: aload_0
      78: getfield      #15                 // Field polynomials:[Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;
      81: arraylength
      82: if_icmplt     88
      85: iinc          3, -1
      88: aload_0
      89: getfield      #15                 // Field polynomials:[Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;
      92: iload_3
      93: aaload
      94: dload_1
      95: aload_0
      96: getfield      #12                 // Field knots:[D
      99: iload_3
     100: daload
     101: dsub
     102: invokevirtual #20                 // Method org/apache/commons/math3/analysis/polynomials/PolynomialFunction.value:(D)D
     105: dreturn

  public org.apache.commons.math3.analysis.UnivariateFunction derivative();
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method polynomialSplineDerivative:()Lorg/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction;
       4: areturn

  public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction polynomialSplineDerivative();
    Code:
       0: aload_0
       1: getfield      #11                 // Field n:I
       4: anewarray     #14                 // class org/apache/commons/math3/analysis/polynomials/PolynomialFunction
       7: astore_1
       8: iconst_0
       9: istore_2
      10: iload_2
      11: aload_0
      12: getfield      #11                 // Field n:I
      15: if_icmpge     36
      18: aload_1
      19: iload_2
      20: aload_0
      21: getfield      #15                 // Field polynomials:[Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;
      24: iload_2
      25: aaload
      26: invokevirtual #22                 // Method org/apache/commons/math3/analysis/polynomials/PolynomialFunction.polynomialDerivative:()Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;
      29: aastore
      30: iinc          2, 1
      33: goto          10
      36: new           #23                 // class org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction
      39: dup
      40: aload_0
      41: getfield      #12                 // Field knots:[D
      44: aload_1
      45: invokespecial #24                 // Method "<init>":([D[Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;)V
      48: areturn

  public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure);
    Code:
       0: aload_1
       1: invokevirtual #25                 // Method org/apache/commons/math3/analysis/differentiation/DerivativeStructure.getValue:()D
       4: dstore_2
       5: dload_2
       6: aload_0
       7: getfield      #12                 // Field knots:[D
      10: iconst_0
      11: daload
      12: dcmpg
      13: iflt          30
      16: dload_2
      17: aload_0
      18: getfield      #12                 // Field knots:[D
      21: aload_0
      22: getfield      #11                 // Field n:I
      25: daload
      26: dcmpl
      27: ifle          63
      30: new           #16                 // class org/apache/commons/math3/exception/OutOfRangeException
      33: dup
      34: dload_2
      35: invokestatic  #17                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      38: aload_0
      39: getfield      #12                 // Field knots:[D
      42: iconst_0
      43: daload
      44: invokestatic  #17                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      47: aload_0
      48: getfield      #12                 // Field knots:[D
      51: aload_0
      52: getfield      #11                 // Field n:I
      55: daload
      56: invokestatic  #17                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      59: invokespecial #18                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      62: athrow
      63: aload_0
      64: getfield      #12                 // Field knots:[D
      67: dload_2
      68: invokestatic  #19                 // Method java/util/Arrays.binarySearch:([DD)I
      71: istore        4
      73: iload         4
      75: ifge          85
      78: iload         4
      80: ineg
      81: iconst_2
      82: isub
      83: istore        4
      85: iload         4
      87: aload_0
      88: getfield      #15                 // Field polynomials:[Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;
      91: arraylength
      92: if_icmplt     98
      95: iinc          4, -1
      98: aload_0
      99: getfield      #15                 // Field polynomials:[Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;
     102: iload         4
     104: aaload
     105: aload_1
     106: aload_0
     107: getfield      #12                 // Field knots:[D
     110: iload         4
     112: daload
     113: invokevirtual #26                 // Method org/apache/commons/math3/analysis/differentiation/DerivativeStructure.subtract:(D)Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;
     116: invokevirtual #27                 // Method org/apache/commons/math3/analysis/polynomials/PolynomialFunction.value:(Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;)Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;
     119: areturn

  public int getN();
    Code:
       0: aload_0
       1: getfield      #11                 // Field n:I
       4: ireturn

  public org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] getPolynomials();
    Code:
       0: aload_0
       1: getfield      #11                 // Field n:I
       4: anewarray     #14                 // class org/apache/commons/math3/analysis/polynomials/PolynomialFunction
       7: astore_1
       8: aload_0
       9: getfield      #15                 // Field polynomials:[Lorg/apache/commons/math3/analysis/polynomials/PolynomialFunction;
      12: iconst_0
      13: aload_1
      14: iconst_0
      15: aload_0
      16: getfield      #11                 // Field n:I
      19: invokestatic  #13                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      22: aload_1
      23: areturn

  public double[] getKnots();
    Code:
       0: aload_0
       1: getfield      #11                 // Field n:I
       4: iconst_1
       5: iadd
       6: newarray       double
       8: astore_1
       9: aload_0
      10: getfield      #12                 // Field knots:[D
      13: iconst_0
      14: aload_1
      15: iconst_0
      16: aload_0
      17: getfield      #11                 // Field n:I
      20: iconst_1
      21: iadd
      22: invokestatic  #13                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      25: aload_1
      26: areturn

  public boolean isValidPoint(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #12                 // Field knots:[D
       5: iconst_0
       6: daload
       7: dcmpg
       8: iflt          25
      11: dload_1
      12: aload_0
      13: getfield      #12                 // Field knots:[D
      16: aload_0
      17: getfield      #11                 // Field n:I
      20: daload
      21: dcmpl
      22: ifle          27
      25: iconst_0
      26: ireturn
      27: iconst_1
      28: ireturn
}
