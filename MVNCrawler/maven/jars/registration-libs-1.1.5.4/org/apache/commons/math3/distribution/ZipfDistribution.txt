Compiled from "ZipfDistribution.java"
public class org.apache.commons.math3.distribution.ZipfDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution {
  private static final long serialVersionUID;

  private final int numberOfElements;

  private final double exponent;

  private double numericalMean;

  private boolean numericalMeanIsCalculated;

  private double numericalVariance;

  private boolean numericalVarianceIsCalculated;

  private transient org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler sampler;

  public org.apache.commons.math3.distribution.ZipfDistribution(int, double);
    Code:
       0: aload_0
       1: new           #1                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #2                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: iload_1
       9: dload_2
      10: invokespecial #3                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;ID)V
      13: return

  public org.apache.commons.math3.distribution.ZipfDistribution(org.apache.commons.math3.random.RandomGenerator, int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method org/apache/commons/math3/distribution/AbstractIntegerDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: aload_0
       6: ldc2_w        #5                  // double NaNd
       9: putfield      #7                  // Field numericalMean:D
      12: aload_0
      13: iconst_0
      14: putfield      #8                  // Field numericalMeanIsCalculated:Z
      17: aload_0
      18: ldc2_w        #5                  // double NaNd
      21: putfield      #9                  // Field numericalVariance:D
      24: aload_0
      25: iconst_0
      26: putfield      #10                 // Field numericalVarianceIsCalculated:Z
      29: iload_2
      30: ifgt          48
      33: new           #11                 // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      36: dup
      37: getstatic     #12                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.DIMENSION:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      40: iload_2
      41: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      44: invokespecial #14                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      47: athrow
      48: dload_3
      49: dconst_0
      50: dcmpg
      51: ifgt          69
      54: new           #11                 // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      57: dup
      58: getstatic     #15                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.EXPONENT:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      61: dload_3
      62: invokestatic  #16                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      65: invokespecial #14                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      68: athrow
      69: aload_0
      70: iload_2
      71: putfield      #17                 // Field numberOfElements:I
      74: aload_0
      75: dload_3
      76: putfield      #18                 // Field exponent:D
      79: return

  public int getNumberOfElements();
    Code:
       0: aload_0
       1: getfield      #17                 // Field numberOfElements:I
       4: ireturn

  public double getExponent();
    Code:
       0: aload_0
       1: getfield      #18                 // Field exponent:D
       4: dreturn

  public double probability(int);
    Code:
       0: iload_1
       1: ifle          12
       4: iload_1
       5: aload_0
       6: getfield      #17                 // Field numberOfElements:I
       9: if_icmple     14
      12: dconst_0
      13: dreturn
      14: dconst_1
      15: iload_1
      16: i2d
      17: aload_0
      18: getfield      #18                 // Field exponent:D
      21: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      24: ddiv
      25: aload_0
      26: aload_0
      27: getfield      #17                 // Field numberOfElements:I
      30: aload_0
      31: getfield      #18                 // Field exponent:D
      34: invokespecial #20                 // Method generalizedHarmonic:(ID)D
      37: ddiv
      38: dreturn

  public double logProbability(int);
    Code:
       0: iload_1
       1: ifle          12
       4: iload_1
       5: aload_0
       6: getfield      #17                 // Field numberOfElements:I
       9: if_icmple     16
      12: ldc2_w        #21                 // double -Infinityd
      15: dreturn
      16: iload_1
      17: i2d
      18: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      21: dneg
      22: aload_0
      23: getfield      #18                 // Field exponent:D
      26: dmul
      27: aload_0
      28: aload_0
      29: getfield      #17                 // Field numberOfElements:I
      32: aload_0
      33: getfield      #18                 // Field exponent:D
      36: invokespecial #20                 // Method generalizedHarmonic:(ID)D
      39: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      42: dsub
      43: dreturn

  public double cumulativeProbability(int);
    Code:
       0: iload_1
       1: ifgt          6
       4: dconst_0
       5: dreturn
       6: iload_1
       7: aload_0
       8: getfield      #17                 // Field numberOfElements:I
      11: if_icmplt     16
      14: dconst_1
      15: dreturn
      16: aload_0
      17: iload_1
      18: aload_0
      19: getfield      #18                 // Field exponent:D
      22: invokespecial #20                 // Method generalizedHarmonic:(ID)D
      25: aload_0
      26: aload_0
      27: getfield      #17                 // Field numberOfElements:I
      30: aload_0
      31: getfield      #18                 // Field exponent:D
      34: invokespecial #20                 // Method generalizedHarmonic:(ID)D
      37: ddiv
      38: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: getfield      #8                  // Field numericalMeanIsCalculated:Z
       4: ifne          20
       7: aload_0
       8: aload_0
       9: invokevirtual #24                 // Method calculateNumericalMean:()D
      12: putfield      #7                  // Field numericalMean:D
      15: aload_0
      16: iconst_1
      17: putfield      #8                  // Field numericalMeanIsCalculated:Z
      20: aload_0
      21: getfield      #7                  // Field numericalMean:D
      24: dreturn

  protected double calculateNumericalMean();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getNumberOfElements:()I
       4: istore_1
       5: aload_0
       6: invokevirtual #26                 // Method getExponent:()D
       9: dstore_2
      10: aload_0
      11: iload_1
      12: dload_2
      13: dconst_1
      14: dsub
      15: invokespecial #20                 // Method generalizedHarmonic:(ID)D
      18: dstore        4
      20: aload_0
      21: iload_1
      22: dload_2
      23: invokespecial #20                 // Method generalizedHarmonic:(ID)D
      26: dstore        6
      28: dload         4
      30: dload         6
      32: ddiv
      33: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: getfield      #10                 // Field numericalVarianceIsCalculated:Z
       4: ifne          20
       7: aload_0
       8: aload_0
       9: invokevirtual #27                 // Method calculateNumericalVariance:()D
      12: putfield      #9                  // Field numericalVariance:D
      15: aload_0
      16: iconst_1
      17: putfield      #10                 // Field numericalVarianceIsCalculated:Z
      20: aload_0
      21: getfield      #9                  // Field numericalVariance:D
      24: dreturn

  protected double calculateNumericalVariance();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getNumberOfElements:()I
       4: istore_1
       5: aload_0
       6: invokevirtual #26                 // Method getExponent:()D
       9: dstore_2
      10: aload_0
      11: iload_1
      12: dload_2
      13: ldc2_w        #28                 // double 2.0d
      16: dsub
      17: invokespecial #20                 // Method generalizedHarmonic:(ID)D
      20: dstore        4
      22: aload_0
      23: iload_1
      24: dload_2
      25: dconst_1
      26: dsub
      27: invokespecial #20                 // Method generalizedHarmonic:(ID)D
      30: dstore        6
      32: aload_0
      33: iload_1
      34: dload_2
      35: invokespecial #20                 // Method generalizedHarmonic:(ID)D
      38: dstore        8
      40: dload         4
      42: dload         8
      44: ddiv
      45: dload         6
      47: dload         6
      49: dmul
      50: dload         8
      52: dload         8
      54: dmul
      55: ddiv
      56: dsub
      57: dreturn

  private double generalizedHarmonic(int, double);
    Code:
       0: dconst_0
       1: dstore        4
       3: iload_1
       4: istore        6
       6: iload         6
       8: ifle          31
      11: dload         4
      13: dconst_1
      14: iload         6
      16: i2d
      17: dload_2
      18: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      21: ddiv
      22: dadd
      23: dstore        4
      25: iinc          6, -1
      28: goto          6
      31: dload         4
      33: dreturn

  public int getSupportLowerBound();
    Code:
       0: iconst_1
       1: ireturn

  public int getSupportUpperBound();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getNumberOfElements:()I
       4: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn

  public int sample();
    Code:
       0: aload_0
       1: getfield      #30                 // Field sampler:Lorg/apache/commons/math3/distribution/ZipfDistribution$ZipfRejectionInversionSampler;
       4: ifnonnull     26
       7: aload_0
       8: new           #31                 // class org/apache/commons/math3/distribution/ZipfDistribution$ZipfRejectionInversionSampler
      11: dup
      12: aload_0
      13: getfield      #17                 // Field numberOfElements:I
      16: aload_0
      17: getfield      #18                 // Field exponent:D
      20: invokespecial #32                 // Method org/apache/commons/math3/distribution/ZipfDistribution$ZipfRejectionInversionSampler."<init>":(ID)V
      23: putfield      #30                 // Field sampler:Lorg/apache/commons/math3/distribution/ZipfDistribution$ZipfRejectionInversionSampler;
      26: aload_0
      27: getfield      #30                 // Field sampler:Lorg/apache/commons/math3/distribution/ZipfDistribution$ZipfRejectionInversionSampler;
      30: aload_0
      31: getfield      #33                 // Field random:Lorg/apache/commons/math3/random/RandomGenerator;
      34: invokevirtual #34                 // Method org/apache/commons/math3/distribution/ZipfDistribution$ZipfRejectionInversionSampler.sample:(Lorg/apache/commons/math3/random/RandomGenerator;)I
      37: ireturn
}
