Compiled from "BaseAbstractUnivariateIntegrator.java"
public abstract class org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator implements org.apache.commons.math3.analysis.integration.UnivariateIntegrator {
  public static final double DEFAULT_ABSOLUTE_ACCURACY;

  public static final double DEFAULT_RELATIVE_ACCURACY;

  public static final int DEFAULT_MIN_ITERATIONS_COUNT;

  public static final int DEFAULT_MAX_ITERATIONS_COUNT;

  protected org.apache.commons.math3.util.Incrementor iterations;

  private org.apache.commons.math3.util.IntegerSequence$Incrementor count;

  private final double absoluteAccuracy;

  private final double relativeAccuracy;

  private final int minimalIterationCount;

  private org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations;

  private org.apache.commons.math3.analysis.UnivariateFunction function;

  private double min;

  private double max;

  protected org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #2                  // Field relativeAccuracy:D
       9: aload_0
      10: dload_3
      11: putfield      #3                  // Field absoluteAccuracy:D
      14: iload         5
      16: ifgt          32
      19: new           #4                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      22: dup
      23: iload         5
      25: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: invokespecial #6                  // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Ljava/lang/Number;)V
      31: athrow
      32: iload         6
      34: iload         5
      36: if_icmpgt     58
      39: new           #7                  // class org/apache/commons/math3/exception/NumberIsTooSmallException
      42: dup
      43: iload         6
      45: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      48: iload         5
      50: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      53: iconst_0
      54: invokespecial #8                  // Method org/apache/commons/math3/exception/NumberIsTooSmallException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Z)V
      57: athrow
      58: aload_0
      59: iload         5
      61: putfield      #9                  // Field minimalIterationCount:I
      64: aload_0
      65: invokestatic  #10                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.create:()Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      68: iload         6
      70: invokevirtual #11                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.withMaximalCount:(I)Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      73: putfield      #12                 // Field count:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      76: aload_0
      77: getfield      #12                 // Field count:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      80: invokestatic  #13                 // Method org/apache/commons/math3/util/Incrementor.wrap:(Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;)Lorg/apache/commons/math3/util/Incrementor;
      83: astore        7
      85: aload_0
      86: aload         7
      88: putfield      #14                 // Field iterations:Lorg/apache/commons/math3/util/Incrementor;
      91: aload_0
      92: invokestatic  #10                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.create:()Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      95: putfield      #15                 // Field evaluations:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      98: return

  protected org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator(double, double);
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: iconst_3
       4: ldc           #16                 // int 2147483647
       6: invokespecial #17                 // Method "<init>":(DDII)V
       9: return

  protected org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException;
    Code:
       0: aload_0
       1: ldc2_w        #18                 // double 1.0E-6d
       4: ldc2_w        #20                 // double 1.0E-15d
       7: iload_1
       8: iload_2
       9: invokespecial #17                 // Method "<init>":(DDII)V
      12: return

  public double getRelativeAccuracy();
    Code:
       0: aload_0
       1: getfield      #2                  // Field relativeAccuracy:D
       4: dreturn

  public double getAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #3                  // Field absoluteAccuracy:D
       4: dreturn

  public int getMinimalIterationCount();
    Code:
       0: aload_0
       1: getfield      #9                  // Field minimalIterationCount:I
       4: ireturn

  public int getMaximalIterationCount();
    Code:
       0: aload_0
       1: getfield      #12                 // Field count:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
       4: invokevirtual #22                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.getMaximalCount:()I
       7: ireturn

  public int getEvaluations();
    Code:
       0: aload_0
       1: getfield      #15                 // Field evaluations:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
       4: invokevirtual #23                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.getCount:()I
       7: ireturn

  public int getIterations();
    Code:
       0: aload_0
       1: getfield      #12                 // Field count:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
       4: invokevirtual #23                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.getCount:()I
       7: ireturn

  protected void incrementCount() throws org.apache.commons.math3.exception.MaxCountExceededException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field count:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
       4: invokevirtual #24                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.increment:()V
       7: return

  protected double getMin();
    Code:
       0: aload_0
       1: getfield      #25                 // Field min:D
       4: dreturn

  protected double getMax();
    Code:
       0: aload_0
       1: getfield      #26                 // Field max:D
       4: dreturn

  protected double computeObjectiveValue(double) throws org.apache.commons.math3.exception.TooManyEvaluationsException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field evaluations:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
       4: invokevirtual #24                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.increment:()V
       7: goto          23
      10: astore_3
      11: new           #28                 // class org/apache/commons/math3/exception/TooManyEvaluationsException
      14: dup
      15: aload_3
      16: invokevirtual #29                 // Method org/apache/commons/math3/exception/MaxCountExceededException.getMax:()Ljava/lang/Number;
      19: invokespecial #30                 // Method org/apache/commons/math3/exception/TooManyEvaluationsException."<init>":(Ljava/lang/Number;)V
      22: athrow
      23: aload_0
      24: getfield      #31                 // Field function:Lorg/apache/commons/math3/analysis/UnivariateFunction;
      27: dload_1
      28: invokeinterface #32,  3           // InterfaceMethod org/apache/commons/math3/analysis/UnivariateFunction.value:(D)D
      33: dreturn
    Exception table:
       from    to  target type
           0     7    10   Class org/apache/commons/math3/exception/MaxCountExceededException

  protected void setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_2
       1: invokestatic  #33                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
       4: dload_3
       5: dload         5
       7: invokestatic  #34                 // Method org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.verifyInterval:(DD)V
      10: aload_0
      11: dload_3
      12: putfield      #25                 // Field min:D
      15: aload_0
      16: dload         5
      18: putfield      #26                 // Field max:D
      21: aload_0
      22: aload_2
      23: putfield      #31                 // Field function:Lorg/apache/commons/math3/analysis/UnivariateFunction;
      26: aload_0
      27: aload_0
      28: getfield      #15                 // Field evaluations:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      31: iload_1
      32: invokevirtual #11                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.withMaximalCount:(I)Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      35: iconst_0
      36: invokevirtual #35                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.withStart:(I)Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      39: putfield      #15                 // Field evaluations:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      42: aload_0
      43: aload_0
      44: getfield      #12                 // Field count:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      47: iconst_0
      48: invokevirtual #35                 // Method org/apache/commons/math3/util/IntegerSequence$Incrementor.withStart:(I)Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      51: putfield      #12                 // Field count:Lorg/apache/commons/math3/util/IntegerSequence$Incrementor;
      54: return

  public double integrate(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: dload_3
       4: dload         5
       6: invokevirtual #36                 // Method setup:(ILorg/apache/commons/math3/analysis/UnivariateFunction;DD)V
       9: aload_0
      10: invokevirtual #37                 // Method doIntegrate:()D
      13: dreturn

  protected abstract double doIntegrate() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException;
}
