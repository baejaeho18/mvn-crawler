Compiled from "LogNormalDistribution.java"
public class org.apache.commons.math3.distribution.LogNormalDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private static final double SQRT2PI;

  private static final double SQRT2;

  private final double scale;

  private final double shape;

  private final double logShapePlusHalfLog2Pi;

  private final double solverAbsoluteAccuracy;

  public org.apache.commons.math3.distribution.LogNormalDistribution();
    Code:
       0: aload_0
       1: dconst_0
       2: dconst_1
       3: invokespecial #1                  // Method "<init>":(DD)V
       6: return

  public org.apache.commons.math3.distribution.LogNormalDistribution(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #2                  // double 1.0E-9d
       6: invokespecial #4                  // Method "<init>":(DDD)V
       9: return

  public org.apache.commons.math3.distribution.LogNormalDistribution(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: new           #5                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #6                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokespecial #7                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      15: return

  public org.apache.commons.math3.distribution.LogNormalDistribution(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: dload_2
       3: dload         4
       5: ldc2_w        #2                  // double 1.0E-9d
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      11: return

  public org.apache.commons.math3.distribution.LogNormalDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: dload         4
       7: dconst_0
       8: dcmpg
       9: ifgt          28
      12: new           #9                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      15: dup
      16: getstatic     #10                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.SHAPE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      19: dload         4
      21: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      24: invokespecial #12                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      27: athrow
      28: aload_0
      29: dload_2
      30: putfield      #13                 // Field scale:D
      33: aload_0
      34: dload         4
      36: putfield      #14                 // Field shape:D
      39: aload_0
      40: dload         4
      42: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      45: ldc2_w        #16                 // double 0.5d
      48: ldc2_w        #18                 // double 6.283185307179586d
      51: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      54: dmul
      55: dadd
      56: putfield      #20                 // Field logShapePlusHalfLog2Pi:D
      59: aload_0
      60: dload         6
      62: putfield      #21                 // Field solverAbsoluteAccuracy:D
      65: return

  public double getScale();
    Code:
       0: aload_0
       1: getfield      #13                 // Field scale:D
       4: dreturn

  public double getShape();
    Code:
       0: aload_0
       1: getfield      #14                 // Field shape:D
       4: dreturn

  public double density(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifgt          8
       6: dconst_0
       7: dreturn
       8: dload_1
       9: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      12: aload_0
      13: getfield      #13                 // Field scale:D
      16: dsub
      17: dstore_3
      18: dload_3
      19: aload_0
      20: getfield      #14                 // Field shape:D
      23: ddiv
      24: dstore        5
      26: ldc2_w        #22                 // double -0.5d
      29: dload         5
      31: dmul
      32: dload         5
      34: dmul
      35: invokestatic  #24                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      38: aload_0
      39: getfield      #14                 // Field shape:D
      42: getstatic     #25                 // Field SQRT2PI:D
      45: dmul
      46: dload_1
      47: dmul
      48: ddiv
      49: dreturn

  public double logDensity(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifgt          10
       6: ldc2_w        #26                 // double -Infinityd
       9: dreturn
      10: dload_1
      11: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      14: dstore_3
      15: dload_3
      16: aload_0
      17: getfield      #13                 // Field scale:D
      20: dsub
      21: dstore        5
      23: dload         5
      25: aload_0
      26: getfield      #14                 // Field shape:D
      29: ddiv
      30: dstore        7
      32: ldc2_w        #22                 // double -0.5d
      35: dload         7
      37: dmul
      38: dload         7
      40: dmul
      41: aload_0
      42: getfield      #20                 // Field logShapePlusHalfLog2Pi:D
      45: dload_3
      46: dadd
      47: dsub
      48: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifgt          8
       6: dconst_0
       7: dreturn
       8: dload_1
       9: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      12: aload_0
      13: getfield      #13                 // Field scale:D
      16: dsub
      17: dstore_3
      18: dload_3
      19: invokestatic  #28                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      22: ldc2_w        #29                 // double 40.0d
      25: aload_0
      26: getfield      #14                 // Field shape:D
      29: dmul
      30: dcmpl
      31: ifle          46
      34: dload_3
      35: dconst_0
      36: dcmpg
      37: ifge          44
      40: dconst_0
      41: goto          45
      44: dconst_1
      45: dreturn
      46: ldc2_w        #16                 // double 0.5d
      49: ldc2_w        #16                 // double 0.5d
      52: dload_3
      53: aload_0
      54: getfield      #14                 // Field shape:D
      57: getstatic     #31                 // Field SQRT2:D
      60: dmul
      61: ddiv
      62: invokestatic  #32                 // Method org/apache/commons/math3/special/Erf.erf:(D)D
      65: dmul
      66: dadd
      67: dreturn

  public double cumulativeProbability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: invokevirtual #33                 // Method probability:(DD)D
       6: dreturn

  public double probability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: dload_1
       1: dload_3
       2: dcmpl
       3: ifle          26
       6: new           #34                 // class org/apache/commons/math3/exception/NumberIsTooLargeException
       9: dup
      10: getstatic     #35                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      13: dload_1
      14: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      17: dload_3
      18: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      21: iconst_1
      22: invokespecial #36                 // Method org/apache/commons/math3/exception/NumberIsTooLargeException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
      25: athrow
      26: dload_1
      27: dconst_0
      28: dcmpg
      29: ifle          38
      32: dload_3
      33: dconst_0
      34: dcmpg
      35: ifgt          45
      38: aload_0
      39: dload_1
      40: dload_3
      41: invokespecial #37                 // Method org/apache/commons/math3/distribution/AbstractRealDistribution.probability:(DD)D
      44: dreturn
      45: aload_0
      46: getfield      #14                 // Field shape:D
      49: getstatic     #31                 // Field SQRT2:D
      52: dmul
      53: dstore        5
      55: dload_1
      56: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      59: aload_0
      60: getfield      #13                 // Field scale:D
      63: dsub
      64: dload         5
      66: ddiv
      67: dstore        7
      69: dload_3
      70: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      73: aload_0
      74: getfield      #13                 // Field scale:D
      77: dsub
      78: dload         5
      80: ddiv
      81: dstore        9
      83: ldc2_w        #16                 // double 0.5d
      86: dload         7
      88: dload         9
      90: invokestatic  #38                 // Method org/apache/commons/math3/special/Erf.erf:(DD)D
      93: dmul
      94: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #21                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: getfield      #14                 // Field shape:D
       4: dstore_1
       5: aload_0
       6: getfield      #13                 // Field scale:D
       9: dload_1
      10: dload_1
      11: dmul
      12: ldc2_w        #39                 // double 2.0d
      15: ddiv
      16: dadd
      17: invokestatic  #24                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      20: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: getfield      #14                 // Field shape:D
       4: dstore_1
       5: dload_1
       6: dload_1
       7: dmul
       8: dstore_3
       9: dload_3
      10: invokestatic  #41                 // Method org/apache/commons/math3/util/FastMath.expm1:(D)D
      13: ldc2_w        #39                 // double 2.0d
      16: aload_0
      17: getfield      #13                 // Field scale:D
      20: dmul
      21: dload_3
      22: dadd
      23: invokestatic  #24                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      26: dmul
      27: dreturn

  public double getSupportLowerBound();
    Code:
       0: dconst_0
       1: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #42                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn

  public double sample();
    Code:
       0: aload_0
       1: getfield      #44                 // Field random:Lorg/apache/commons/math3/random/RandomGenerator;
       4: invokeinterface #45,  1           // InterfaceMethod org/apache/commons/math3/random/RandomGenerator.nextGaussian:()D
       9: dstore_1
      10: aload_0
      11: getfield      #13                 // Field scale:D
      14: aload_0
      15: getfield      #14                 // Field shape:D
      18: dload_1
      19: dmul
      20: dadd
      21: invokestatic  #24                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      24: dreturn

  static {};
    Code:
       0: ldc2_w        #18                 // double 6.283185307179586d
       3: invokestatic  #46                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
       6: putstatic     #25                 // Field SQRT2PI:D
       9: ldc2_w        #39                 // double 2.0d
      12: invokestatic  #46                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      15: putstatic     #31                 // Field SQRT2:D
      18: return
}
