Compiled from "CurveFitter.java"
class org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction implements org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction {
  private final org.apache.commons.math3.analysis.ParametricUnivariateFunction f;

  final org.apache.commons.math3.optimization.fitting.CurveFitter this$0;

  org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter, org.apache.commons.math3.analysis.ParametricUnivariateFunction);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lorg/apache/commons/math3/optimization/fitting/CurveFitter;
       5: aload_0
       6: invokespecial #3                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_2
      11: putfield      #1                  // Field f:Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;
      14: return

  public org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian();
    Code:
       0: new           #4                  // class org/apache/commons/math3/optimization/fitting/CurveFitter$OldTheoreticalValuesFunction$1
       3: dup
       4: aload_0
       5: invokespecial #5                  // Method org/apache/commons/math3/optimization/fitting/CurveFitter$OldTheoreticalValuesFunction$1."<init>":(Lorg/apache/commons/math3/optimization/fitting/CurveFitter$OldTheoreticalValuesFunction;)V
       8: areturn

  public double[] value(double[]);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optimization/fitting/CurveFitter;
       4: invokestatic  #6                  // Method org/apache/commons/math3/optimization/fitting/CurveFitter.access$000:(Lorg/apache/commons/math3/optimization/fitting/CurveFitter;)Ljava/util/List;
       7: invokeinterface #7,  1            // InterfaceMethod java/util/List.size:()I
      12: newarray       double
      14: astore_2
      15: iconst_0
      16: istore_3
      17: aload_0
      18: getfield      #2                  // Field this$0:Lorg/apache/commons/math3/optimization/fitting/CurveFitter;
      21: invokestatic  #6                  // Method org/apache/commons/math3/optimization/fitting/CurveFitter.access$000:(Lorg/apache/commons/math3/optimization/fitting/CurveFitter;)Ljava/util/List;
      24: invokeinterface #8,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      29: astore        4
      31: aload         4
      33: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      38: ifeq          77
      41: aload         4
      43: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      48: checkcast     #11                 // class org/apache/commons/math3/optimization/fitting/WeightedObservedPoint
      51: astore        5
      53: aload_2
      54: iload_3
      55: iinc          3, 1
      58: aload_0
      59: getfield      #1                  // Field f:Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;
      62: aload         5
      64: invokevirtual #12                 // Method org/apache/commons/math3/optimization/fitting/WeightedObservedPoint.getX:()D
      67: aload_1
      68: invokeinterface #13,  4           // InterfaceMethod org/apache/commons/math3/analysis/ParametricUnivariateFunction.value:(D[D)D
      73: dastore
      74: goto          31
      77: aload_2
      78: areturn

  static org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction);
    Code:
       0: aload_0
       1: getfield      #1                  // Field f:Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;
       4: areturn
}
