Compiled from "OpenMapRealMatrix.java"
public class org.apache.commons.math3.linear.OpenMapRealMatrix extends org.apache.commons.math3.linear.AbstractRealMatrix implements org.apache.commons.math3.linear.SparseRealMatrix,java.io.Serializable {
  private static final long serialVersionUID;

  private final int rows;

  private final int columns;

  private final org.apache.commons.math3.util.OpenIntToDoubleHashMap entries;

  public org.apache.commons.math3.linear.OpenMapRealMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokespecial #1                  // Method org/apache/commons/math3/linear/AbstractRealMatrix."<init>":(II)V
       6: iload_1
       7: i2l
       8: lstore_3
       9: iload_2
      10: i2l
      11: lstore        5
      13: lload_3
      14: lload         5
      16: lmul
      17: ldc2_w        #2                  // long 2147483647l
      20: lcmp
      21: iflt          45
      24: new           #4                  // class org/apache/commons/math3/exception/NumberIsTooLargeException
      27: dup
      28: lload_3
      29: lload         5
      31: lmul
      32: invokestatic  #5                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      35: ldc           #6                  // int 2147483647
      37: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      40: iconst_0
      41: invokespecial #8                  // Method org/apache/commons/math3/exception/NumberIsTooLargeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Z)V
      44: athrow
      45: aload_0
      46: iload_1
      47: putfield      #9                  // Field rows:I
      50: aload_0
      51: iload_2
      52: putfield      #10                 // Field columns:I
      55: aload_0
      56: new           #11                 // class org/apache/commons/math3/util/OpenIntToDoubleHashMap
      59: dup
      60: dconst_0
      61: invokespecial #12                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap."<init>":(D)V
      64: putfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      67: return

  public org.apache.commons.math3.linear.OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method org/apache/commons/math3/linear/AbstractRealMatrix."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #9                  // Field rows:I
       9: putfield      #9                  // Field rows:I
      12: aload_0
      13: aload_1
      14: getfield      #10                 // Field columns:I
      17: putfield      #10                 // Field columns:I
      20: aload_0
      21: new           #11                 // class org/apache/commons/math3/util/OpenIntToDoubleHashMap
      24: dup
      25: aload_1
      26: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      29: invokespecial #15                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap."<init>":(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V
      32: putfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      35: return

  public org.apache.commons.math3.linear.OpenMapRealMatrix copy();
    Code:
       0: new           #16                 // class org/apache/commons/math3/linear/OpenMapRealMatrix
       3: dup
       4: aload_0
       5: invokespecial #17                 // Method "<init>":(Lorg/apache/commons/math3/linear/OpenMapRealMatrix;)V
       8: areturn

  public org.apache.commons.math3.linear.OpenMapRealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: new           #16                 // class org/apache/commons/math3/linear/OpenMapRealMatrix
       3: dup
       4: iload_1
       5: iload_2
       6: invokespecial #18                 // Method "<init>":(II)V
       9: areturn

  public int getColumnDimension();
    Code:
       0: aload_0
       1: getfield      #10                 // Field columns:I
       4: ireturn

  public org.apache.commons.math3.linear.OpenMapRealMatrix add(org.apache.commons.math3.linear.OpenMapRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #19                 // Method org/apache/commons/math3/linear/MatrixUtils.checkAdditionCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
       5: new           #16                 // class org/apache/commons/math3/linear/OpenMapRealMatrix
       8: dup
       9: aload_0
      10: invokespecial #17                 // Method "<init>":(Lorg/apache/commons/math3/linear/OpenMapRealMatrix;)V
      13: astore_2
      14: aload_1
      15: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      18: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      21: astore_3
      22: aload_3
      23: invokevirtual #21                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      26: ifeq          82
      29: aload_3
      30: invokevirtual #22                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      33: aload_3
      34: invokevirtual #23                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      37: aload_0
      38: getfield      #10                 // Field columns:I
      41: idiv
      42: istore        4
      44: aload_3
      45: invokevirtual #23                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      48: iload         4
      50: aload_0
      51: getfield      #10                 // Field columns:I
      54: imul
      55: isub
      56: istore        5
      58: aload_2
      59: iload         4
      61: iload         5
      63: aload_0
      64: iload         4
      66: iload         5
      68: invokevirtual #24                 // Method getEntry:(II)D
      71: aload_3
      72: invokevirtual #25                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      75: dadd
      76: invokevirtual #26                 // Method setEntry:(IID)V
      79: goto          22
      82: aload_2
      83: areturn

  public org.apache.commons.math3.linear.OpenMapRealMatrix subtract(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #16                 // class org/apache/commons/math3/linear/OpenMapRealMatrix
       5: invokevirtual #27                 // Method subtract:(Lorg/apache/commons/math3/linear/OpenMapRealMatrix;)Lorg/apache/commons/math3/linear/OpenMapRealMatrix;
       8: areturn
       9: astore_2
      10: aload_0
      11: aload_1
      12: invokespecial #29                 // Method org/apache/commons/math3/linear/AbstractRealMatrix.subtract:(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;
      15: checkcast     #16                 // class org/apache/commons/math3/linear/OpenMapRealMatrix
      18: areturn
    Exception table:
       from    to  target type
           0     8     9   Class java/lang/ClassCastException

  public org.apache.commons.math3.linear.OpenMapRealMatrix subtract(org.apache.commons.math3.linear.OpenMapRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #19                 // Method org/apache/commons/math3/linear/MatrixUtils.checkAdditionCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
       5: new           #16                 // class org/apache/commons/math3/linear/OpenMapRealMatrix
       8: dup
       9: aload_0
      10: invokespecial #17                 // Method "<init>":(Lorg/apache/commons/math3/linear/OpenMapRealMatrix;)V
      13: astore_2
      14: aload_1
      15: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      18: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      21: astore_3
      22: aload_3
      23: invokevirtual #21                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      26: ifeq          82
      29: aload_3
      30: invokevirtual #22                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      33: aload_3
      34: invokevirtual #23                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      37: aload_0
      38: getfield      #10                 // Field columns:I
      41: idiv
      42: istore        4
      44: aload_3
      45: invokevirtual #23                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      48: iload         4
      50: aload_0
      51: getfield      #10                 // Field columns:I
      54: imul
      55: isub
      56: istore        5
      58: aload_2
      59: iload         4
      61: iload         5
      63: aload_0
      64: iload         4
      66: iload         5
      68: invokevirtual #24                 // Method getEntry:(II)D
      71: aload_3
      72: invokevirtual #25                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      75: dsub
      76: invokevirtual #26                 // Method setEntry:(IID)V
      79: goto          22
      82: aload_2
      83: areturn

  public org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #16                 // class org/apache/commons/math3/linear/OpenMapRealMatrix
       5: invokevirtual #30                 // Method multiply:(Lorg/apache/commons/math3/linear/OpenMapRealMatrix;)Lorg/apache/commons/math3/linear/OpenMapRealMatrix;
       8: areturn
       9: astore_2
      10: aload_0
      11: aload_1
      12: invokestatic  #31                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMultiplicationCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
      15: aload_1
      16: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrix.getColumnDimension:()I
      21: istore_3
      22: new           #33                 // class org/apache/commons/math3/linear/BlockRealMatrix
      25: dup
      26: aload_0
      27: getfield      #9                  // Field rows:I
      30: iload_3
      31: invokespecial #34                 // Method org/apache/commons/math3/linear/BlockRealMatrix."<init>":(II)V
      34: astore        4
      36: aload_0
      37: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      40: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      43: astore        5
      45: aload         5
      47: invokevirtual #21                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      50: ifeq          130
      53: aload         5
      55: invokevirtual #22                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      58: aload         5
      60: invokevirtual #25                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      63: dstore        6
      65: aload         5
      67: invokevirtual #23                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      70: istore        8
      72: iload         8
      74: aload_0
      75: getfield      #10                 // Field columns:I
      78: idiv
      79: istore        9
      81: iload         8
      83: aload_0
      84: getfield      #10                 // Field columns:I
      87: irem
      88: istore        10
      90: iconst_0
      91: istore        11
      93: iload         11
      95: iload_3
      96: if_icmpge     127
      99: aload         4
     101: iload         9
     103: iload         11
     105: dload         6
     107: aload_1
     108: iload         10
     110: iload         11
     112: invokeinterface #35,  3           // InterfaceMethod org/apache/commons/math3/linear/RealMatrix.getEntry:(II)D
     117: dmul
     118: invokevirtual #36                 // Method org/apache/commons/math3/linear/BlockRealMatrix.addToEntry:(IID)V
     121: iinc          11, 1
     124: goto          93
     127: goto          45
     130: aload         4
     132: areturn
    Exception table:
       from    to  target type
           0     8     9   Class java/lang/ClassCastException

  public org.apache.commons.math3.linear.OpenMapRealMatrix multiply(org.apache.commons.math3.linear.OpenMapRealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #31                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMultiplicationCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
       5: aload_1
       6: invokevirtual #37                 // Method getColumnDimension:()I
       9: istore_2
      10: new           #16                 // class org/apache/commons/math3/linear/OpenMapRealMatrix
      13: dup
      14: aload_0
      15: getfield      #9                  // Field rows:I
      18: iload_2
      19: invokespecial #18                 // Method "<init>":(II)V
      22: astore_3
      23: aload_0
      24: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      27: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      30: astore        4
      32: aload         4
      34: invokevirtual #21                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      37: ifeq          183
      40: aload         4
      42: invokevirtual #22                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      45: aload         4
      47: invokevirtual #25                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      50: dstore        5
      52: aload         4
      54: invokevirtual #23                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      57: istore        7
      59: iload         7
      61: aload_0
      62: getfield      #10                 // Field columns:I
      65: idiv
      66: istore        8
      68: iload         7
      70: aload_0
      71: getfield      #10                 // Field columns:I
      74: irem
      75: istore        9
      77: iconst_0
      78: istore        10
      80: iload         10
      82: iload_2
      83: if_icmpge     180
      86: aload_1
      87: iload         9
      89: iload         10
      91: invokespecial #38                 // Method computeKey:(II)I
      94: istore        11
      96: aload_1
      97: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
     100: iload         11
     102: invokevirtual #39                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.containsKey:(I)Z
     105: ifeq          174
     108: aload_3
     109: iload         8
     111: iload         10
     113: invokespecial #38                 // Method computeKey:(II)I
     116: istore        12
     118: aload_3
     119: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
     122: iload         12
     124: invokevirtual #40                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.get:(I)D
     127: dload         5
     129: aload_1
     130: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
     133: iload         11
     135: invokevirtual #40                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.get:(I)D
     138: dmul
     139: dadd
     140: dstore        13
     142: dload         13
     144: dconst_0
     145: dcmpl
     146: ifne          162
     149: aload_3
     150: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
     153: iload         12
     155: invokevirtual #41                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.remove:(I)D
     158: pop2
     159: goto          174
     162: aload_3
     163: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
     166: iload         12
     168: dload         13
     170: invokevirtual #42                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.put:(ID)D
     173: pop2
     174: iinc          10, 1
     177: goto          80
     180: goto          32
     183: aload_3
     184: areturn

  public double getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #43                 // Method org/apache/commons/math3/linear/MatrixUtils.checkRowIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
       5: aload_0
       6: iload_2
       7: invokestatic  #44                 // Method org/apache/commons/math3/linear/MatrixUtils.checkColumnIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
      10: aload_0
      11: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      14: aload_0
      15: iload_1
      16: iload_2
      17: invokespecial #38                 // Method computeKey:(II)I
      20: invokevirtual #40                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.get:(I)D
      23: dreturn

  public int getRowDimension();
    Code:
       0: aload_0
       1: getfield      #9                  // Field rows:I
       4: ireturn

  public void setEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #43                 // Method org/apache/commons/math3/linear/MatrixUtils.checkRowIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
       5: aload_0
       6: iload_2
       7: invokestatic  #44                 // Method org/apache/commons/math3/linear/MatrixUtils.checkColumnIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
      10: dload_3
      11: dconst_0
      12: dcmpl
      13: ifne          33
      16: aload_0
      17: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      20: aload_0
      21: iload_1
      22: iload_2
      23: invokespecial #38                 // Method computeKey:(II)I
      26: invokevirtual #41                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.remove:(I)D
      29: pop2
      30: goto          48
      33: aload_0
      34: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      37: aload_0
      38: iload_1
      39: iload_2
      40: invokespecial #38                 // Method computeKey:(II)I
      43: dload_3
      44: invokevirtual #42                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.put:(ID)D
      47: pop2
      48: return

  public void addToEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #43                 // Method org/apache/commons/math3/linear/MatrixUtils.checkRowIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
       5: aload_0
       6: iload_2
       7: invokestatic  #44                 // Method org/apache/commons/math3/linear/MatrixUtils.checkColumnIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
      10: aload_0
      11: iload_1
      12: iload_2
      13: invokespecial #38                 // Method computeKey:(II)I
      16: istore        5
      18: aload_0
      19: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      22: iload         5
      24: invokevirtual #40                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.get:(I)D
      27: dload_3
      28: dadd
      29: dstore        6
      31: dload         6
      33: dconst_0
      34: dcmpl
      35: ifne          51
      38: aload_0
      39: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      42: iload         5
      44: invokevirtual #41                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.remove:(I)D
      47: pop2
      48: goto          63
      51: aload_0
      52: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      55: iload         5
      57: dload         6
      59: invokevirtual #42                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.put:(ID)D
      62: pop2
      63: return

  public void multiplyEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #43                 // Method org/apache/commons/math3/linear/MatrixUtils.checkRowIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
       5: aload_0
       6: iload_2
       7: invokestatic  #44                 // Method org/apache/commons/math3/linear/MatrixUtils.checkColumnIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;I)V
      10: aload_0
      11: iload_1
      12: iload_2
      13: invokespecial #38                 // Method computeKey:(II)I
      16: istore        5
      18: aload_0
      19: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      22: iload         5
      24: invokevirtual #40                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.get:(I)D
      27: dload_3
      28: dmul
      29: dstore        6
      31: dload         6
      33: dconst_0
      34: dcmpl
      35: ifne          51
      38: aload_0
      39: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      42: iload         5
      44: invokevirtual #41                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.remove:(I)D
      47: pop2
      48: goto          63
      51: aload_0
      52: getfield      #13                 // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      55: iload         5
      57: dload         6
      59: invokevirtual #42                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.put:(ID)D
      62: pop2
      63: return

  private int computeKey(int, int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #10                 // Field columns:I
       5: imul
       6: iload_2
       7: iadd
       8: ireturn

  public org.apache.commons.math3.linear.RealMatrix copy();
    Code:
       0: aload_0
       1: invokevirtual #45                 // Method copy:()Lorg/apache/commons/math3/linear/OpenMapRealMatrix;
       4: areturn

  public org.apache.commons.math3.linear.RealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #46                 // Method createMatrix:(II)Lorg/apache/commons/math3/linear/OpenMapRealMatrix;
       6: areturn

  public org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #47                 // Method subtract:(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/OpenMapRealMatrix;
       5: areturn
}
