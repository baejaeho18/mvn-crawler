Compiled from "MVMap.java"
public class org.h2.mvstore.MVMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.concurrent.ConcurrentMap<K, V> {
  protected org.h2.mvstore.MVStore store;

  protected volatile org.h2.mvstore.Page root;

  protected volatile long writeVersion;

  private int id;

  private long createVersion;

  private final org.h2.mvstore.type.DataType keyType;

  private final org.h2.mvstore.type.DataType valueType;

  private final org.h2.mvstore.ConcurrentArrayList<org.h2.mvstore.Page> oldRoots;

  private volatile boolean closed;

  private boolean readOnly;

  private boolean isVolatile;

  protected org.h2.mvstore.MVMap(org.h2.mvstore.type.DataType, org.h2.mvstore.type.DataType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/AbstractMap."<init>":()V
       4: aload_0
       5: new           #2                  // class org/h2/mvstore/ConcurrentArrayList
       8: dup
       9: invokespecial #3                  // Method org/h2/mvstore/ConcurrentArrayList."<init>":()V
      12: putfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field keyType:Lorg/h2/mvstore/type/DataType;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field valueType:Lorg/h2/mvstore/type/DataType;
      25: return

  static java.lang.String getMapRootKey(int);
    Code:
       0: new           #7                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #9                  // String root.
       9: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: iload_0
      13: invokestatic  #11                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      16: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      22: areturn

  static java.lang.String getMapKey(int);
    Code:
       0: new           #7                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #13                 // String map.
       9: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: iload_0
      13: invokestatic  #11                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      16: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      22: areturn

  protected void init(org.h2.mvstore.MVStore, int, long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
       5: aload_0
       6: iload_2
       7: putfield      #15                 // Field id:I
      10: aload_0
      11: lload_3
      12: putfield      #16                 // Field createVersion:J
      15: aload_0
      16: aload_1
      17: invokevirtual #17                 // Method org/h2/mvstore/MVStore.getCurrentVersion:()J
      20: putfield      #18                 // Field writeVersion:J
      23: aload_0
      24: aload_0
      25: ldc2_w        #19                 // long -1l
      28: invokestatic  #21                 // Method org/h2/mvstore/Page.createEmpty:(Lorg/h2/mvstore/MVMap;J)Lorg/h2/mvstore/Page;
      31: putfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      34: return

  public synchronized V put(K, V);
    Code:
       0: aload_2
       1: ifnull        8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #23                 // String The value may not be null
      11: iconst_0
      12: anewarray     #24                 // class java/lang/Object
      15: invokestatic  #25                 // Method org/h2/mvstore/DataUtils.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      18: aload_0
      19: invokevirtual #26                 // Method beforeWrite:()V
      22: aload_0
      23: getfield      #18                 // Field writeVersion:J
      26: lstore_3
      27: aload_0
      28: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      31: lload_3
      32: invokevirtual #27                 // Method org/h2/mvstore/Page.copy:(J)Lorg/h2/mvstore/Page;
      35: astore        5
      37: aload_0
      38: aload         5
      40: lload_3
      41: invokevirtual #28                 // Method splitRootIfNeeded:(Lorg/h2/mvstore/Page;J)Lorg/h2/mvstore/Page;
      44: astore        5
      46: aload_0
      47: aload         5
      49: lload_3
      50: aload_1
      51: aload_2
      52: invokevirtual #29                 // Method put:(Lorg/h2/mvstore/Page;JLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      55: astore        6
      57: aload_0
      58: aload         5
      60: invokevirtual #30                 // Method newRoot:(Lorg/h2/mvstore/Page;)V
      63: aload         6
      65: areturn

  protected org.h2.mvstore.Page splitRootIfNeeded(org.h2.mvstore.Page, long);
    Code:
       0: aload_1
       1: invokevirtual #31                 // Method org/h2/mvstore/Page.getMemory:()I
       4: aload_0
       5: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
       8: invokevirtual #32                 // Method org/h2/mvstore/MVStore.getPageSplitSize:()I
      11: if_icmple     22
      14: aload_1
      15: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
      18: iconst_1
      19: if_icmpgt     24
      22: aload_1
      23: areturn
      24: aload_1
      25: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
      28: iconst_2
      29: idiv
      30: istore        4
      32: aload_1
      33: invokevirtual #34                 // Method org/h2/mvstore/Page.getTotalCount:()J
      36: lstore        5
      38: aload_1
      39: iload         4
      41: invokevirtual #35                 // Method org/h2/mvstore/Page.getKey:(I)Ljava/lang/Object;
      44: astore        7
      46: aload_1
      47: iload         4
      49: invokevirtual #36                 // Method org/h2/mvstore/Page.split:(I)Lorg/h2/mvstore/Page;
      52: astore        8
      54: iconst_1
      55: anewarray     #24                 // class java/lang/Object
      58: dup
      59: iconst_0
      60: aload         7
      62: aastore
      63: astore        9
      65: iconst_2
      66: anewarray     #37                 // class org/h2/mvstore/Page$PageReference
      69: dup
      70: iconst_0
      71: new           #37                 // class org/h2/mvstore/Page$PageReference
      74: dup
      75: aload_1
      76: aload_1
      77: invokevirtual #38                 // Method org/h2/mvstore/Page.getPos:()J
      80: aload_1
      81: invokevirtual #34                 // Method org/h2/mvstore/Page.getTotalCount:()J
      84: invokespecial #39                 // Method org/h2/mvstore/Page$PageReference."<init>":(Lorg/h2/mvstore/Page;JJ)V
      87: aastore
      88: dup
      89: iconst_1
      90: new           #37                 // class org/h2/mvstore/Page$PageReference
      93: dup
      94: aload         8
      96: aload         8
      98: invokevirtual #38                 // Method org/h2/mvstore/Page.getPos:()J
     101: aload         8
     103: invokevirtual #34                 // Method org/h2/mvstore/Page.getTotalCount:()J
     106: invokespecial #39                 // Method org/h2/mvstore/Page$PageReference."<init>":(Lorg/h2/mvstore/Page;JJ)V
     109: aastore
     110: astore        10
     112: aload_0
     113: lload_2
     114: aload         9
     116: aconst_null
     117: aload         10
     119: lload         5
     121: iconst_0
     122: invokestatic  #40                 // Method org/h2/mvstore/Page.create:(Lorg/h2/mvstore/MVMap;J[Ljava/lang/Object;[Ljava/lang/Object;[Lorg/h2/mvstore/Page$PageReference;JI)Lorg/h2/mvstore/Page;
     125: astore_1
     126: aload_1
     127: areturn

  protected java.lang.Object put(org.h2.mvstore.Page, long, java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: aload         4
       3: invokevirtual #41                 // Method org/h2/mvstore/Page.binarySearch:(Ljava/lang/Object;)I
       6: istore        6
       8: aload_1
       9: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
      12: ifeq          48
      15: iload         6
      17: ifge          39
      20: iload         6
      22: ineg
      23: iconst_1
      24: isub
      25: istore        6
      27: aload_1
      28: iload         6
      30: aload         4
      32: aload         5
      34: invokevirtual #43                 // Method org/h2/mvstore/Page.insertLeaf:(ILjava/lang/Object;Ljava/lang/Object;)V
      37: aconst_null
      38: areturn
      39: aload_1
      40: iload         6
      42: aload         5
      44: invokevirtual #44                 // Method org/h2/mvstore/Page.setValue:(ILjava/lang/Object;)Ljava/lang/Object;
      47: areturn
      48: iload         6
      50: ifge          63
      53: iload         6
      55: ineg
      56: iconst_1
      57: isub
      58: istore        6
      60: goto          66
      63: iinc          6, 1
      66: aload_1
      67: iload         6
      69: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
      72: lload_2
      73: invokevirtual #27                 // Method org/h2/mvstore/Page.copy:(J)Lorg/h2/mvstore/Page;
      76: astore        7
      78: aload         7
      80: invokevirtual #31                 // Method org/h2/mvstore/Page.getMemory:()I
      83: aload_0
      84: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
      87: invokevirtual #32                 // Method org/h2/mvstore/MVStore.getPageSplitSize:()I
      90: if_icmple     158
      93: aload         7
      95: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
      98: iconst_1
      99: if_icmple     158
     102: aload         7
     104: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
     107: iconst_2
     108: idiv
     109: istore        8
     111: aload         7
     113: iload         8
     115: invokevirtual #35                 // Method org/h2/mvstore/Page.getKey:(I)Ljava/lang/Object;
     118: astore        9
     120: aload         7
     122: iload         8
     124: invokevirtual #36                 // Method org/h2/mvstore/Page.split:(I)Lorg/h2/mvstore/Page;
     127: astore        10
     129: aload_1
     130: iload         6
     132: aload         10
     134: invokevirtual #46                 // Method org/h2/mvstore/Page.setChild:(ILorg/h2/mvstore/Page;)V
     137: aload_1
     138: iload         6
     140: aload         9
     142: aload         7
     144: invokevirtual #47                 // Method org/h2/mvstore/Page.insertNode:(ILjava/lang/Object;Lorg/h2/mvstore/Page;)V
     147: aload_0
     148: aload_1
     149: lload_2
     150: aload         4
     152: aload         5
     154: invokevirtual #29                 // Method put:(Lorg/h2/mvstore/Page;JLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     157: areturn
     158: aload_0
     159: aload         7
     161: lload_2
     162: aload         4
     164: aload         5
     166: invokevirtual #29                 // Method put:(Lorg/h2/mvstore/Page;JLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     169: astore        8
     171: aload_1
     172: iload         6
     174: aload         7
     176: invokevirtual #46                 // Method org/h2/mvstore/Page.setChild:(ILorg/h2/mvstore/Page;)V
     179: aload         8
     181: areturn

  public K firstKey();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #48                 // Method getFirstLast:(Z)Ljava/lang/Object;
       5: areturn

  public K lastKey();
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #48                 // Method getFirstLast:(Z)Ljava/lang/Object;
       5: areturn

  public K getKey(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          16
       6: lload_1
       7: aload_0
       8: invokevirtual #49                 // Method size:()I
      11: i2l
      12: lcmp
      13: iflt          18
      16: aconst_null
      17: areturn
      18: aload_0
      19: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      22: astore_3
      23: lconst_0
      24: lstore        4
      26: aload_3
      27: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
      30: ifeq          58
      33: lload_1
      34: lload         4
      36: aload_3
      37: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
      40: i2l
      41: ladd
      42: lcmp
      43: iflt          48
      46: aconst_null
      47: areturn
      48: aload_3
      49: lload_1
      50: lload         4
      52: lsub
      53: l2i
      54: invokevirtual #35                 // Method org/h2/mvstore/Page.getKey:(I)Ljava/lang/Object;
      57: areturn
      58: iconst_0
      59: istore        6
      61: aload_0
      62: aload_3
      63: invokevirtual #50                 // Method getChildPageCount:(Lorg/h2/mvstore/Page;)I
      66: istore        7
      68: iload         6
      70: iload         7
      72: if_icmpge     109
      75: aload_3
      76: iload         6
      78: invokevirtual #51                 // Method org/h2/mvstore/Page.getCounts:(I)J
      81: lstore        8
      83: lload_1
      84: lload         8
      86: lload         4
      88: ladd
      89: lcmp
      90: ifge          96
      93: goto          109
      96: lload         4
      98: lload         8
     100: ladd
     101: lstore        4
     103: iinc          6, 1
     106: goto          68
     109: iload         6
     111: iload         7
     113: if_icmpne     118
     116: aconst_null
     117: areturn
     118: aload_3
     119: iload         6
     121: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
     124: astore_3
     125: goto          26

  public java.util.List<K> keyList();
    Code:
       0: new           #52                 // class org/h2/mvstore/MVMap$1
       3: dup
       4: aload_0
       5: invokespecial #53                 // Method org/h2/mvstore/MVMap$1."<init>":(Lorg/h2/mvstore/MVMap;)V
       8: areturn

  public long getKeyIndex(K);
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method size:()I
       4: ifne          11
       7: ldc2_w        #19                 // long -1l
      10: lreturn
      11: aload_0
      12: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      15: astore_2
      16: lconst_0
      17: lstore_3
      18: aload_2
      19: aload_1
      20: invokevirtual #41                 // Method org/h2/mvstore/Page.binarySearch:(Ljava/lang/Object;)I
      23: istore        5
      25: aload_2
      26: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
      29: ifeq          50
      32: iload         5
      34: ifge          44
      37: lload_3
      38: lneg
      39: iload         5
      41: i2l
      42: ladd
      43: lreturn
      44: lload_3
      45: iload         5
      47: i2l
      48: ladd
      49: lreturn
      50: iload         5
      52: ifge          65
      55: iload         5
      57: ineg
      58: iconst_1
      59: isub
      60: istore        5
      62: goto          68
      65: iinc          5, 1
      68: iconst_0
      69: istore        6
      71: iload         6
      73: iload         5
      75: if_icmpge     93
      78: lload_3
      79: aload_2
      80: iload         6
      82: invokevirtual #51                 // Method org/h2/mvstore/Page.getCounts:(I)J
      85: ladd
      86: lstore_3
      87: iinc          6, 1
      90: goto          71
      93: aload_2
      94: iload         5
      96: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
      99: astore_2
     100: goto          18

  protected K getFirstLast(boolean);
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method size:()I
       4: ifne          9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      13: astore_2
      14: aload_2
      15: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
      18: ifeq          40
      21: aload_2
      22: iload_1
      23: ifeq          30
      26: iconst_0
      27: goto          36
      30: aload_2
      31: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
      34: iconst_1
      35: isub
      36: invokevirtual #35                 // Method org/h2/mvstore/Page.getKey:(I)Ljava/lang/Object;
      39: areturn
      40: aload_2
      41: iload_1
      42: ifeq          49
      45: iconst_0
      46: goto          56
      49: aload_0
      50: aload_2
      51: invokevirtual #50                 // Method getChildPageCount:(Lorg/h2/mvstore/Page;)I
      54: iconst_1
      55: isub
      56: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
      59: astore_2
      60: goto          14

  public K higherKey(K);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_1
       4: invokevirtual #54                 // Method getMinMax:(Ljava/lang/Object;ZZ)Ljava/lang/Object;
       7: areturn

  public K ceilingKey(K);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokevirtual #54                 // Method getMinMax:(Ljava/lang/Object;ZZ)Ljava/lang/Object;
       7: areturn

  public K floorKey(K);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: iconst_0
       4: invokevirtual #54                 // Method getMinMax:(Ljava/lang/Object;ZZ)Ljava/lang/Object;
       7: areturn

  public K lowerKey(K);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: iconst_1
       4: invokevirtual #54                 // Method getMinMax:(Ljava/lang/Object;ZZ)Ljava/lang/Object;
       7: areturn

  protected K getMinMax(K, boolean, boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       5: aload_1
       6: iload_2
       7: iload_3
       8: invokespecial #55                 // Method getMinMax:(Lorg/h2/mvstore/Page;Ljava/lang/Object;ZZ)Ljava/lang/Object;
      11: areturn

  private K getMinMax(org.h2.mvstore.Page, K, boolean, boolean);
    Code:
       0: aload_1
       1: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
       4: ifeq          79
       7: aload_1
       8: aload_2
       9: invokevirtual #41                 // Method org/h2/mvstore/Page.binarySearch:(Ljava/lang/Object;)I
      12: istore        5
      14: iload         5
      16: ifge          37
      19: iload         5
      21: ineg
      22: iload_3
      23: ifeq          30
      26: iconst_2
      27: goto          31
      30: iconst_1
      31: isub
      32: istore        5
      34: goto          56
      37: iload         4
      39: ifeq          56
      42: iload         5
      44: iload_3
      45: ifeq          52
      48: iconst_m1
      49: goto          53
      52: iconst_1
      53: iadd
      54: istore        5
      56: iload         5
      58: iflt          70
      61: iload         5
      63: aload_1
      64: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
      67: if_icmplt     72
      70: aconst_null
      71: areturn
      72: aload_1
      73: iload         5
      75: invokevirtual #35                 // Method org/h2/mvstore/Page.getKey:(I)Ljava/lang/Object;
      78: areturn
      79: aload_1
      80: aload_2
      81: invokevirtual #41                 // Method org/h2/mvstore/Page.binarySearch:(Ljava/lang/Object;)I
      84: istore        5
      86: iload         5
      88: ifge          101
      91: iload         5
      93: ineg
      94: iconst_1
      95: isub
      96: istore        5
      98: goto          104
     101: iinc          5, 1
     104: iload         5
     106: iflt          119
     109: iload         5
     111: aload_0
     112: aload_1
     113: invokevirtual #50                 // Method getChildPageCount:(Lorg/h2/mvstore/Page;)I
     116: if_icmplt     121
     119: aconst_null
     120: areturn
     121: aload_0
     122: aload_1
     123: iload         5
     125: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
     128: aload_2
     129: iload_3
     130: iload         4
     132: invokespecial #55                 // Method getMinMax:(Lorg/h2/mvstore/Page;Ljava/lang/Object;ZZ)Ljava/lang/Object;
     135: astore        6
     137: aload         6
     139: ifnull        145
     142: aload         6
     144: areturn
     145: iload         5
     147: iload_3
     148: ifeq          155
     151: iconst_m1
     152: goto          156
     155: iconst_1
     156: iadd
     157: istore        5
     159: goto          104

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       5: aload_1
       6: invokevirtual #56                 // Method binarySearch:(Lorg/h2/mvstore/Page;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  protected java.lang.Object binarySearch(org.h2.mvstore.Page, java.lang.Object);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #41                 // Method org/h2/mvstore/Page.binarySearch:(Ljava/lang/Object;)I
       5: istore_3
       6: aload_1
       7: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
      10: ifne          41
      13: iload_3
      14: ifge          25
      17: iload_3
      18: ineg
      19: iconst_1
      20: isub
      21: istore_3
      22: goto          28
      25: iinc          3, 1
      28: aload_1
      29: iload_3
      30: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
      33: astore_1
      34: aload_0
      35: aload_1
      36: aload_2
      37: invokevirtual #56                 // Method binarySearch:(Lorg/h2/mvstore/Page;Ljava/lang/Object;)Ljava/lang/Object;
      40: areturn
      41: iload_3
      42: iflt          51
      45: aload_1
      46: iload_3
      47: invokevirtual #57                 // Method org/h2/mvstore/Page.getValue:(I)Ljava/lang/Object;
      50: areturn
      51: aconst_null
      52: areturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: ifnull        12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public synchronized void clear();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method beforeWrite:()V
       4: aload_0
       5: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       8: invokevirtual #59                 // Method org/h2/mvstore/Page.removeAllRecursive:()V
      11: aload_0
      12: aload_0
      13: aload_0
      14: getfield      #18                 // Field writeVersion:J
      17: invokestatic  #21                 // Method org/h2/mvstore/Page.createEmpty:(Lorg/h2/mvstore/MVMap;J)Lorg/h2/mvstore/Page;
      20: invokevirtual #30                 // Method newRoot:(Lorg/h2/mvstore/Page;)V
      23: return

  void close();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #60                 // Field closed:Z
       5: return

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #60                 // Field closed:Z
       4: ireturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method beforeWrite:()V
       4: aload_0
       5: aload_1
       6: invokevirtual #58                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: astore_2
      10: aload_2
      11: ifnonnull     16
      14: aconst_null
      15: areturn
      16: aload_0
      17: getfield      #18                 // Field writeVersion:J
      20: lstore_3
      21: aload_0
      22: dup
      23: astore        5
      25: monitorenter
      26: aload_0
      27: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      30: lload_3
      31: invokevirtual #27                 // Method org/h2/mvstore/Page.copy:(J)Lorg/h2/mvstore/Page;
      34: astore        6
      36: aload_0
      37: aload         6
      39: lload_3
      40: aload_1
      41: invokevirtual #61                 // Method remove:(Lorg/h2/mvstore/Page;JLjava/lang/Object;)Ljava/lang/Object;
      44: astore_2
      45: aload         6
      47: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
      50: ifne          79
      53: aload         6
      55: invokevirtual #34                 // Method org/h2/mvstore/Page.getTotalCount:()J
      58: lconst_0
      59: lcmp
      60: ifne          79
      63: aload         6
      65: invokevirtual #62                 // Method org/h2/mvstore/Page.removePage:()V
      68: aload_0
      69: aload         6
      71: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      74: invokestatic  #21                 // Method org/h2/mvstore/Page.createEmpty:(Lorg/h2/mvstore/MVMap;J)Lorg/h2/mvstore/Page;
      77: astore        6
      79: aload_0
      80: aload         6
      82: invokevirtual #30                 // Method newRoot:(Lorg/h2/mvstore/Page;)V
      85: aload         5
      87: monitorexit
      88: goto          99
      91: astore        7
      93: aload         5
      95: monitorexit
      96: aload         7
      98: athrow
      99: aload_2
     100: areturn
    Exception table:
       from    to  target type
          26    88    91   any
          91    96    91   any

  public synchronized V putIfAbsent(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: astore_3
       6: aload_3
       7: ifnonnull     17
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokevirtual #64                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_3
      18: areturn

  public synchronized boolean remove(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: astore_3
       6: aload_0
       7: aload_3
       8: aload_2
       9: invokevirtual #65                 // Method areValuesEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
      12: ifeq          23
      15: aload_0
      16: aload_1
      17: invokevirtual #66                 // Method remove:(Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: iconst_1
      22: ireturn
      23: iconst_0
      24: ireturn

  public boolean areValuesEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: aload_2
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        15
      11: aload_2
      12: ifnonnull     17
      15: iconst_0
      16: ireturn
      17: aload_0
      18: getfield      #6                  // Field valueType:Lorg/h2/mvstore/type/DataType;
      21: aload_1
      22: aload_2
      23: invokeinterface #67,  3           // InterfaceMethod org/h2/mvstore/type/DataType.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
      28: ifne          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: ireturn

  public synchronized boolean replace(K, V, V);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: astore        4
       7: aload_0
       8: aload         4
      10: aload_2
      11: invokevirtual #65                 // Method areValuesEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
      14: ifeq          26
      17: aload_0
      18: aload_1
      19: aload_3
      20: invokevirtual #64                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      23: pop
      24: iconst_1
      25: ireturn
      26: iconst_0
      27: ireturn

  public synchronized V replace(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: astore_3
       6: aload_3
       7: ifnull        19
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokevirtual #64                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_3
      18: areturn
      19: aconst_null
      20: areturn

  protected java.lang.Object remove(org.h2.mvstore.Page, long, java.lang.Object);
    Code:
       0: aload_1
       1: aload         4
       3: invokevirtual #41                 // Method org/h2/mvstore/Page.binarySearch:(Ljava/lang/Object;)I
       6: istore        5
       8: aconst_null
       9: astore        6
      11: aload_1
      12: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
      15: ifeq          40
      18: iload         5
      20: iflt          37
      23: aload_1
      24: iload         5
      26: invokevirtual #57                 // Method org/h2/mvstore/Page.getValue:(I)Ljava/lang/Object;
      29: astore        6
      31: aload_1
      32: iload         5
      34: invokevirtual #68                 // Method org/h2/mvstore/Page.remove:(I)V
      37: aload         6
      39: areturn
      40: iload         5
      42: ifge          55
      45: iload         5
      47: ineg
      48: iconst_1
      49: isub
      50: istore        5
      52: goto          58
      55: iinc          5, 1
      58: aload_1
      59: iload         5
      61: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
      64: astore        7
      66: aload         7
      68: lload_2
      69: invokevirtual #27                 // Method org/h2/mvstore/Page.copy:(J)Lorg/h2/mvstore/Page;
      72: astore        8
      74: aload_0
      75: aload         8
      77: lload_2
      78: aload         4
      80: invokevirtual #61                 // Method remove:(Lorg/h2/mvstore/Page;JLjava/lang/Object;)Ljava/lang/Object;
      83: astore        6
      85: aload         6
      87: ifnull        100
      90: aload         8
      92: invokevirtual #34                 // Method org/h2/mvstore/Page.getTotalCount:()J
      95: lconst_0
      96: lcmp
      97: ifeq          111
     100: aload_1
     101: iload         5
     103: aload         8
     105: invokevirtual #46                 // Method org/h2/mvstore/Page.setChild:(ILorg/h2/mvstore/Page;)V
     108: goto          140
     111: aload_1
     112: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
     115: ifne          134
     118: aload_1
     119: iload         5
     121: aload         8
     123: invokevirtual #46                 // Method org/h2/mvstore/Page.setChild:(ILorg/h2/mvstore/Page;)V
     126: aload         8
     128: invokevirtual #62                 // Method org/h2/mvstore/Page.removePage:()V
     131: goto          140
     134: aload_1
     135: iload         5
     137: invokevirtual #68                 // Method org/h2/mvstore/Page.remove:(I)V
     140: aload         6
     142: areturn

  protected void newRoot(org.h2.mvstore.Page);
    Code:
       0: aload_0
       1: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       4: aload_1
       5: if_acmpeq     73
       8: aload_0
       9: invokevirtual #69                 // Method removeUnusedOldVersions:()V
      12: aload_0
      13: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      16: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      19: aload_1
      20: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      23: lcmp
      24: ifeq          68
      27: aload_0
      28: getfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
      31: invokevirtual #70                 // Method org/h2/mvstore/ConcurrentArrayList.peekLast:()Ljava/lang/Object;
      34: checkcast     #71                 // class org/h2/mvstore/Page
      37: astore_2
      38: aload_2
      39: ifnull        57
      42: aload_2
      43: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      46: aload_0
      47: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      50: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      53: lcmp
      54: ifeq          68
      57: aload_0
      58: getfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
      61: aload_0
      62: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      65: invokevirtual #72                 // Method org/h2/mvstore/ConcurrentArrayList.add:(Ljava/lang/Object;)V
      68: aload_0
      69: aload_1
      70: putfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      73: return

  int compare(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field keyType:Lorg/h2/mvstore/type/DataType;
       4: aload_1
       5: aload_2
       6: invokeinterface #67,  3           // InterfaceMethod org/h2/mvstore/type/DataType.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
      11: ireturn

  public org.h2.mvstore.type.DataType getKeyType();
    Code:
       0: aload_0
       1: getfield      #5                  // Field keyType:Lorg/h2/mvstore/type/DataType;
       4: areturn

  public org.h2.mvstore.type.DataType getValueType();
    Code:
       0: aload_0
       1: getfield      #6                  // Field valueType:Lorg/h2/mvstore/type/DataType;
       4: areturn

  org.h2.mvstore.Page readPage(long);
    Code:
       0: aload_0
       1: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
       4: aload_0
       5: lload_1
       6: invokevirtual #73                 // Method org/h2/mvstore/MVStore.readPage:(Lorg/h2/mvstore/MVMap;J)Lorg/h2/mvstore/Page;
       9: areturn

  void setRootPos(long, long);
    Code:
       0: aload_0
       1: lload_1
       2: lconst_0
       3: lcmp
       4: ifne          17
       7: aload_0
       8: ldc2_w        #19                 // long -1l
      11: invokestatic  #21                 // Method org/h2/mvstore/Page.createEmpty:(Lorg/h2/mvstore/MVMap;J)Lorg/h2/mvstore/Page;
      14: goto          22
      17: aload_0
      18: lload_1
      19: invokevirtual #74                 // Method readPage:(J)Lorg/h2/mvstore/Page;
      22: putfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      25: aload_0
      26: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      29: lload_3
      30: invokevirtual #75                 // Method org/h2/mvstore/Page.setVersion:(J)V
      33: return

  public java.util.Iterator<K> keyIterator(K);
    Code:
       0: new           #76                 // class org/h2/mvstore/Cursor
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       9: aload_1
      10: invokespecial #77                 // Method org/h2/mvstore/Cursor."<init>":(Lorg/h2/mvstore/MVMap;Lorg/h2/mvstore/Page;Ljava/lang/Object;)V
      13: areturn

  boolean rewrite(java.util.Set<java.lang.Integer>);
    Code:
       0: aload_0
       1: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
       4: invokevirtual #17                 // Method org/h2/mvstore/MVStore.getCurrentVersion:()J
       7: lconst_1
       8: lsub
       9: lstore_2
      10: lload_2
      11: aload_0
      12: getfield      #16                 // Field createVersion:J
      15: lcmp
      16: ifge          21
      19: iconst_1
      20: ireturn
      21: aload_0
      22: lload_2
      23: invokevirtual #78                 // Method openVersion:(J)Lorg/h2/mvstore/MVMap;
      26: astore        4
      28: goto          35
      31: astore        5
      33: iconst_1
      34: ireturn
      35: aload_0
      36: aload         4
      38: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      41: aload_1
      42: invokespecial #80                 // Method rewrite:(Lorg/h2/mvstore/Page;Ljava/util/Set;)I
      45: pop
      46: iconst_1
      47: ireturn
      48: astore        5
      50: aload         5
      52: invokevirtual #82                 // Method java/lang/IllegalStateException.getMessage:()Ljava/lang/String;
      55: invokestatic  #83                 // Method org/h2/mvstore/DataUtils.getErrorCode:(Ljava/lang/String;)I
      58: bipush        9
      60: if_icmpne     65
      63: iconst_0
      64: ireturn
      65: aload         5
      67: athrow
    Exception table:
       from    to  target type
          21    28    31   Class java/lang/IllegalArgumentException
          35    47    48   Class java/lang/IllegalStateException

  private int rewrite(org.h2.mvstore.Page, java.util.Set<java.lang.Integer>);
    Code:
       0: aload_1
       1: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
       4: ifeq          74
       7: aload_1
       8: invokevirtual #38                 // Method org/h2/mvstore/Page.getPos:()J
      11: lstore_3
      12: lload_3
      13: invokestatic  #84                 // Method org/h2/mvstore/DataUtils.getPageChunkId:(J)I
      16: istore        5
      18: aload_2
      19: iload         5
      21: invokestatic  #85                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: invokeinterface #86,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      29: ifne          34
      32: iconst_0
      33: ireturn
      34: aload_1
      35: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
      38: ifle          72
      41: aload_1
      42: iconst_0
      43: invokevirtual #35                 // Method org/h2/mvstore/Page.getKey:(I)Ljava/lang/Object;
      46: astore        6
      48: aload_0
      49: aload         6
      51: invokevirtual #58                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
      54: astore        7
      56: aload         7
      58: ifnull        72
      61: aload_0
      62: aload         6
      64: aload         7
      66: aload         7
      68: invokevirtual #87                 // Method replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      71: pop
      72: iconst_1
      73: ireturn
      74: iconst_0
      75: istore_3
      76: iconst_0
      77: istore        4
      79: iload         4
      81: aload_0
      82: aload_1
      83: invokevirtual #50                 // Method getChildPageCount:(Lorg/h2/mvstore/Page;)I
      86: if_icmpge     156
      89: aload_1
      90: iload         4
      92: invokevirtual #88                 // Method org/h2/mvstore/Page.getChildPagePos:(I)J
      95: lstore        5
      97: lload         5
      99: lconst_0
     100: lcmp
     101: ifeq          136
     104: lload         5
     106: invokestatic  #89                 // Method org/h2/mvstore/DataUtils.getPageType:(J)I
     109: ifne          136
     112: lload         5
     114: invokestatic  #84                 // Method org/h2/mvstore/DataUtils.getPageChunkId:(J)I
     117: istore        7
     119: aload_2
     120: iload         7
     122: invokestatic  #85                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     125: invokeinterface #86,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     130: ifne          136
     133: goto          150
     136: iload_3
     137: aload_0
     138: aload_1
     139: iload         4
     141: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
     144: aload_2
     145: invokespecial #80                 // Method rewrite:(Lorg/h2/mvstore/Page;Ljava/util/Set;)I
     148: iadd
     149: istore_3
     150: iinc          4, 1
     153: goto          79
     156: iload_3
     157: ifne          244
     160: aload_1
     161: invokevirtual #38                 // Method org/h2/mvstore/Page.getPos:()J
     164: lstore        4
     166: lload         4
     168: invokestatic  #84                 // Method org/h2/mvstore/DataUtils.getPageChunkId:(J)I
     171: istore        6
     173: aload_2
     174: iload         6
     176: invokestatic  #85                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     179: invokeinterface #86,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     184: ifeq          244
     187: aload_1
     188: astore        7
     190: aload         7
     192: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
     195: ifne          209
     198: aload         7
     200: iconst_0
     201: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
     204: astore        7
     206: goto          190
     209: aload         7
     211: iconst_0
     212: invokevirtual #35                 // Method org/h2/mvstore/Page.getKey:(I)Ljava/lang/Object;
     215: astore        8
     217: aload_0
     218: aload         8
     220: invokevirtual #58                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
     223: astore        9
     225: aload         9
     227: ifnull        241
     230: aload_0
     231: aload         8
     233: aload         9
     235: aload         9
     237: invokevirtual #87                 // Method replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     240: pop
     241: iinc          3, 1
     244: iload_3
     245: ireturn

  public org.h2.mvstore.Cursor<K, V> cursor(K);
    Code:
       0: new           #76                 // class org/h2/mvstore/Cursor
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       9: aload_1
      10: invokespecial #77                 // Method org/h2/mvstore/Cursor."<init>":(Lorg/h2/mvstore/MVMap;Lorg/h2/mvstore/Page;Ljava/lang/Object;)V
      13: areturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: astore_1
       2: aload_0
       3: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       6: astore_2
       7: new           #90                 // class org/h2/mvstore/MVMap$2
      10: dup
      11: aload_0
      12: aload_1
      13: aload_2
      14: invokespecial #91                 // Method org/h2/mvstore/MVMap$2."<init>":(Lorg/h2/mvstore/MVMap;Lorg/h2/mvstore/MVMap;Lorg/h2/mvstore/Page;)V
      17: areturn

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: astore_1
       2: aload_0
       3: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       6: astore_2
       7: new           #92                 // class org/h2/mvstore/MVMap$3
      10: dup
      11: aload_0
      12: aload_1
      13: aload_2
      14: invokespecial #93                 // Method org/h2/mvstore/MVMap$3."<init>":(Lorg/h2/mvstore/MVMap;Lorg/h2/mvstore/MVMap;Lorg/h2/mvstore/Page;)V
      17: areturn

  public org.h2.mvstore.Page getRoot();
    Code:
       0: aload_0
       1: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       4: areturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
       4: aload_0
       5: getfield      #15                 // Field id:I
       8: invokevirtual #94                 // Method org/h2/mvstore/MVStore.getMapName:(I)Ljava/lang/String;
      11: areturn

  public org.h2.mvstore.MVStore getStore();
    Code:
       0: aload_0
       1: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
       4: areturn

  public int getId();
    Code:
       0: aload_0
       1: getfield      #15                 // Field id:I
       4: ireturn

  void rollbackTo(long);
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method beforeWrite:()V
       4: lload_1
       5: aload_0
       6: getfield      #16                 // Field createVersion:J
       9: lcmp
      10: ifgt          16
      13: goto          78
      16: aload_0
      17: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      20: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      23: lload_1
      24: lcmp
      25: iflt          78
      28: aload_0
      29: getfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
      32: invokevirtual #70                 // Method org/h2/mvstore/ConcurrentArrayList.peekLast:()Ljava/lang/Object;
      35: checkcast     #71                 // class org/h2/mvstore/Page
      38: astore_3
      39: aload_3
      40: ifnonnull     46
      43: goto          78
      46: aload_0
      47: getfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
      50: aload_3
      51: invokevirtual #95                 // Method org/h2/mvstore/ConcurrentArrayList.removeLast:(Ljava/lang/Object;)Z
      54: pop
      55: aload_0
      56: aload_3
      57: putfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      60: aload_0
      61: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      64: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      67: lload_1
      68: lcmp
      69: ifge          75
      72: goto          78
      75: goto          28
      78: return

  void removeUnusedOldVersions();
    Code:
       0: aload_0
       1: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
       4: invokevirtual #96                 // Method org/h2/mvstore/MVStore.getOldestVersionToKeep:()J
       7: lstore_1
       8: lload_1
       9: ldc2_w        #19                 // long -1l
      12: lcmp
      13: ifne          17
      16: return
      17: aload_0
      18: getfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
      21: invokevirtual #70                 // Method org/h2/mvstore/ConcurrentArrayList.peekLast:()Ljava/lang/Object;
      24: checkcast     #71                 // class org/h2/mvstore/Page
      27: astore_3
      28: aload_0
      29: getfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
      32: invokevirtual #97                 // Method org/h2/mvstore/ConcurrentArrayList.peekFirst:()Ljava/lang/Object;
      35: checkcast     #71                 // class org/h2/mvstore/Page
      38: astore        4
      40: aload         4
      42: ifnull        77
      45: aload         4
      47: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      50: lload_1
      51: lcmp
      52: ifge          77
      55: aload         4
      57: aload_3
      58: if_acmpne     64
      61: goto          77
      64: aload_0
      65: getfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
      68: aload         4
      70: invokevirtual #98                 // Method org/h2/mvstore/ConcurrentArrayList.removeFirst:(Ljava/lang/Object;)Z
      73: pop
      74: goto          28
      77: return

  public boolean isReadOnly();
    Code:
       0: aload_0
       1: getfield      #99                 // Field readOnly:Z
       4: ireturn

  public void setVolatile(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #100                // Field isVolatile:Z
       5: return

  public boolean isVolatile();
    Code:
       0: aload_0
       1: getfield      #100                // Field isVolatile:Z
       4: ireturn

  protected void beforeWrite();
    Code:
       0: aload_0
       1: getfield      #60                 // Field closed:Z
       4: ifeq          18
       7: iconst_4
       8: ldc           #101                // String This map is closed
      10: iconst_0
      11: anewarray     #24                 // class java/lang/Object
      14: invokestatic  #102                // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
      17: athrow
      18: aload_0
      19: getfield      #99                 // Field readOnly:Z
      22: ifeq          31
      25: ldc           #103                // String This map is read-only
      27: invokestatic  #104                // Method org/h2/mvstore/DataUtils.newUnsupportedOperationException:(Ljava/lang/String;)Ljava/lang/UnsupportedOperationException;
      30: athrow
      31: aload_0
      32: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
      35: aload_0
      36: invokevirtual #105                // Method org/h2/mvstore/MVStore.beforeWrite:(Lorg/h2/mvstore/MVMap;)V
      39: return

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #15                 // Field id:I
       4: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ireturn

  public int size();
    Code:
       0: aload_0
       1: invokevirtual #106                // Method sizeAsLong:()J
       4: lstore_1
       5: lload_1
       6: ldc2_w        #107                // long 2147483647l
       9: lcmp
      10: ifle          18
      13: ldc           #109                // int 2147483647
      15: goto          20
      18: lload_1
      19: l2i
      20: ireturn

  public long sizeAsLong();
    Code:
       0: aload_0
       1: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       4: invokevirtual #34                 // Method org/h2/mvstore/Page.getTotalCount:()J
       7: lreturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       4: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
       7: ifeq          24
      10: aload_0
      11: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      14: invokevirtual #33                 // Method org/h2/mvstore/Page.getKeyCount:()I
      17: ifne          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public long getCreateVersion();
    Code:
       0: aload_0
       1: getfield      #16                 // Field createVersion:J
       4: lreturn

  protected void removePage(long, int);
    Code:
       0: aload_0
       1: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
       4: aload_0
       5: lload_1
       6: iload_3
       7: invokevirtual #110                // Method org/h2/mvstore/MVStore.removePage:(Lorg/h2/mvstore/MVMap;JI)V
      10: return

  public org.h2.mvstore.MVMap<K, V> openVersion(long);
    Code:
       0: aload_0
       1: getfield      #99                 // Field readOnly:Z
       4: ifeq          13
       7: ldc           #111                // String This map is read-only; need to call the method on the writable map
       9: invokestatic  #104                // Method org/h2/mvstore/DataUtils.newUnsupportedOperationException:(Ljava/lang/String;)Ljava/lang/UnsupportedOperationException;
      12: athrow
      13: lload_1
      14: aload_0
      15: getfield      #16                 // Field createVersion:J
      18: lcmp
      19: iflt          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ldc           #112                // String Unknown version {0}; this map was created in version is {1}
      29: iconst_2
      30: anewarray     #24                 // class java/lang/Object
      33: dup
      34: iconst_0
      35: lload_1
      36: invokestatic  #113                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      39: aastore
      40: dup
      41: iconst_1
      42: aload_0
      43: getfield      #16                 // Field createVersion:J
      46: invokestatic  #113                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      49: aastore
      50: invokestatic  #25                 // Method org/h2/mvstore/DataUtils.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      53: aconst_null
      54: astore_3
      55: aload_0
      56: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      59: astore        4
      61: lload_1
      62: aload         4
      64: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      67: lcmp
      68: iflt          115
      71: lload_1
      72: aload_0
      73: getfield      #18                 // Field writeVersion:J
      76: lcmp
      77: ifeq          109
      80: aload         4
      82: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
      85: lconst_0
      86: lcmp
      87: ifge          109
      90: lload_1
      91: aload_0
      92: getfield      #16                 // Field createVersion:J
      95: lcmp
      96: ifle          109
      99: aload_0
     100: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
     103: invokevirtual #114                // Method org/h2/mvstore/MVStore.getFileStore:()Lorg/h2/mvstore/FileStore;
     106: ifnonnull     115
     109: aload         4
     111: astore_3
     112: goto          210
     115: aload_0
     116: getfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
     119: invokevirtual #97                 // Method org/h2/mvstore/ConcurrentArrayList.peekFirst:()Ljava/lang/Object;
     122: checkcast     #71                 // class org/h2/mvstore/Page
     125: astore        5
     127: aload         5
     129: ifnull        142
     132: lload_1
     133: aload         5
     135: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
     138: lcmp
     139: ifge          156
     142: aload_0
     143: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
     146: lload_1
     147: aload_0
     148: getfield      #15                 // Field id:I
     151: aload_0
     152: invokevirtual #115                // Method org/h2/mvstore/MVStore.openMapVersion:(JILorg/h2/mvstore/MVMap;)Lorg/h2/mvstore/MVMap;
     155: areturn
     156: aload_0
     157: getfield      #4                  // Field oldRoots:Lorg/h2/mvstore/ConcurrentArrayList;
     160: invokevirtual #116                // Method org/h2/mvstore/ConcurrentArrayList.iterator:()Ljava/util/Iterator;
     163: astore        6
     165: aload         6
     167: invokeinterface #117,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     172: ifeq          207
     175: aload         6
     177: invokeinterface #118,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     182: checkcast     #71                 // class org/h2/mvstore/Page
     185: astore        7
     187: aload         7
     189: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
     192: lload_1
     193: lcmp
     194: ifle          200
     197: goto          207
     200: aload         7
     202: astore        5
     204: goto          165
     207: aload         5
     209: astore_3
     210: aload_0
     211: invokevirtual #119                // Method openReadOnly:()Lorg/h2/mvstore/MVMap;
     214: astore        5
     216: aload         5
     218: aload_3
     219: putfield      #22                 // Field root:Lorg/h2/mvstore/Page;
     222: aload         5
     224: areturn

  org.h2.mvstore.MVMap<K, V> openReadOnly();
    Code:
       0: new           #120                // class org/h2/mvstore/MVMap
       3: dup
       4: aload_0
       5: getfield      #5                  // Field keyType:Lorg/h2/mvstore/type/DataType;
       8: aload_0
       9: getfield      #6                  // Field valueType:Lorg/h2/mvstore/type/DataType;
      12: invokespecial #121                // Method "<init>":(Lorg/h2/mvstore/type/DataType;Lorg/h2/mvstore/type/DataType;)V
      15: astore_1
      16: aload_1
      17: iconst_1
      18: putfield      #99                 // Field readOnly:Z
      21: aload_1
      22: aload_0
      23: getfield      #14                 // Field store:Lorg/h2/mvstore/MVStore;
      26: aload_0
      27: getfield      #15                 // Field id:I
      30: aload_0
      31: getfield      #16                 // Field createVersion:J
      34: invokevirtual #122                // Method init:(Lorg/h2/mvstore/MVStore;IJ)V
      37: aload_1
      38: aload_0
      39: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      42: putfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      45: aload_1
      46: areturn

  public long getVersion();
    Code:
       0: aload_0
       1: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
       4: invokevirtual #63                 // Method org/h2/mvstore/Page.getVersion:()J
       7: lreturn

  protected int getChildPageCount(org.h2.mvstore.Page);
    Code:
       0: aload_1
       1: invokevirtual #123                // Method org/h2/mvstore/Page.getRawChildPageCount:()I
       4: ireturn

  public java.lang.String getType();
    Code:
       0: aconst_null
       1: areturn

  java.lang.String asString(java.lang.String);
    Code:
       0: new           #7                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
       7: astore_2
       8: aload_1
       9: ifnull        19
      12: aload_2
      13: ldc           #124                // String name
      15: aload_1
      16: invokestatic  #125                // Method org/h2/mvstore/DataUtils.appendMap:(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V
      19: aload_0
      20: getfield      #16                 // Field createVersion:J
      23: lconst_0
      24: lcmp
      25: ifeq          38
      28: aload_2
      29: ldc           #126                // String createVersion
      31: aload_0
      32: getfield      #16                 // Field createVersion:J
      35: invokestatic  #127                // Method org/h2/mvstore/DataUtils.appendMap:(Ljava/lang/StringBuilder;Ljava/lang/String;J)V
      38: aload_0
      39: invokevirtual #128                // Method getType:()Ljava/lang/String;
      42: astore_3
      43: aload_3
      44: ifnull        54
      47: aload_2
      48: ldc           #129                // String type
      50: aload_3
      51: invokestatic  #125                // Method org/h2/mvstore/DataUtils.appendMap:(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V
      54: aload_2
      55: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      58: areturn

  void setWriteVersion(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #18                 // Field writeVersion:J
       5: return

  void copyFrom(org.h2.mvstore.MVMap<K, V>);
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method beforeWrite:()V
       4: aload_0
       5: aload_0
       6: aload_1
       7: getfield      #22                 // Field root:Lorg/h2/mvstore/Page;
      10: aconst_null
      11: invokespecial #130                // Method copy:(Lorg/h2/mvstore/Page;Lorg/h2/mvstore/CursorPos;)Lorg/h2/mvstore/Page;
      14: invokevirtual #30                 // Method newRoot:(Lorg/h2/mvstore/Page;)V
      17: return

  private org.h2.mvstore.Page copy(org.h2.mvstore.Page, org.h2.mvstore.CursorPos);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field writeVersion:J
       5: aload_1
       6: invokestatic  #131                // Method org/h2/mvstore/Page.create:(Lorg/h2/mvstore/MVMap;JLorg/h2/mvstore/Page;)Lorg/h2/mvstore/Page;
       9: astore_3
      10: aload_1
      11: invokevirtual #42                 // Method org/h2/mvstore/Page.isLeaf:()Z
      14: ifeq          101
      17: aload_3
      18: astore        4
      20: aload_2
      21: astore        5
      23: aload         5
      25: ifnull        98
      28: aload         5
      30: getfield      #132                // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
      33: aload         5
      35: getfield      #133                // Field org/h2/mvstore/CursorPos.index:I
      38: aload         4
      40: invokevirtual #46                 // Method org/h2/mvstore/Page.setChild:(ILorg/h2/mvstore/Page;)V
      43: aload         5
      45: aload         5
      47: getfield      #132                // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
      50: aload_0
      51: getfield      #18                 // Field writeVersion:J
      54: invokevirtual #27                 // Method org/h2/mvstore/Page.copy:(J)Lorg/h2/mvstore/Page;
      57: putfield      #132                // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
      60: aload         5
      62: getfield      #132                // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
      65: astore        4
      67: aload         5
      69: getfield      #134                // Field org/h2/mvstore/CursorPos.parent:Lorg/h2/mvstore/CursorPos;
      72: ifnonnull     88
      75: aload_0
      76: aload         5
      78: getfield      #132                // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
      81: invokevirtual #30                 // Method newRoot:(Lorg/h2/mvstore/Page;)V
      84: aload_0
      85: invokevirtual #26                 // Method beforeWrite:()V
      88: aload         5
      90: getfield      #134                // Field org/h2/mvstore/CursorPos.parent:Lorg/h2/mvstore/CursorPos;
      93: astore        5
      95: goto          23
      98: goto          199
     101: iconst_0
     102: istore        4
     104: iload         4
     106: aload_0
     107: aload_3
     108: invokevirtual #50                 // Method getChildPageCount:(Lorg/h2/mvstore/Page;)I
     111: if_icmpge     127
     114: aload_3
     115: iload         4
     117: aconst_null
     118: invokevirtual #46                 // Method org/h2/mvstore/Page.setChild:(ILorg/h2/mvstore/Page;)V
     121: iinc          4, 1
     124: goto          104
     127: new           #135                // class org/h2/mvstore/CursorPos
     130: dup
     131: aload_3
     132: iconst_0
     133: aload_2
     134: invokespecial #136                // Method org/h2/mvstore/CursorPos."<init>":(Lorg/h2/mvstore/Page;ILorg/h2/mvstore/CursorPos;)V
     137: astore        4
     139: iconst_0
     140: istore        5
     142: iload         5
     144: aload_0
     145: aload_3
     146: invokevirtual #50                 // Method getChildPageCount:(Lorg/h2/mvstore/Page;)I
     149: if_icmpge     193
     152: aload         4
     154: iload         5
     156: putfield      #133                // Field org/h2/mvstore/CursorPos.index:I
     159: aload_1
     160: iload         5
     162: invokevirtual #88                 // Method org/h2/mvstore/Page.getChildPagePos:(I)J
     165: lstore        6
     167: lload         6
     169: lconst_0
     170: lcmp
     171: ifeq          187
     174: aload_0
     175: aload_1
     176: iload         5
     178: invokevirtual #45                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
     181: aload         4
     183: invokespecial #130                // Method copy:(Lorg/h2/mvstore/Page;Lorg/h2/mvstore/CursorPos;)Lorg/h2/mvstore/Page;
     186: pop
     187: iinc          5, 1
     190: goto          142
     193: aload         4
     195: getfield      #132                // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
     198: astore_3
     199: aload_3
     200: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #137                // Method asString:(Ljava/lang/String;)Ljava/lang/String;
       5: areturn
}
