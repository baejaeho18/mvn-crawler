Compiled from "Cursor.java"
public class org.h2.mvstore.Cursor<K, V> implements java.util.Iterator<K> {
  private final org.h2.mvstore.MVMap<K, ?> map;

  private final K from;

  private org.h2.mvstore.CursorPos pos;

  private K current;

  private K last;

  private V currentValue;

  private V lastValue;

  private org.h2.mvstore.Page lastPage;

  private final org.h2.mvstore.Page root;

  private boolean initialized;

  org.h2.mvstore.Cursor(org.h2.mvstore.MVMap<K, ?>, org.h2.mvstore.Page, K);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field map:Lorg/h2/mvstore/MVMap;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field root:Lorg/h2/mvstore/Page;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field from:Ljava/lang/Object;
      19: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #5                  // Field initialized:Z
       4: ifne          28
       7: aload_0
       8: aload_0
       9: getfield      #3                  // Field root:Lorg/h2/mvstore/Page;
      12: aload_0
      13: getfield      #4                  // Field from:Ljava/lang/Object;
      16: invokespecial #6                  // Method min:(Lorg/h2/mvstore/Page;Ljava/lang/Object;)V
      19: aload_0
      20: iconst_1
      21: putfield      #5                  // Field initialized:Z
      24: aload_0
      25: invokespecial #7                  // Method fetchNext:()V
      28: aload_0
      29: getfield      #8                  // Field current:Ljava/lang/Object;
      32: ifnull        39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ireturn

  public K next();
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method hasNext:()Z
       4: pop
       5: aload_0
       6: getfield      #8                  // Field current:Ljava/lang/Object;
       9: astore_1
      10: aload_0
      11: aload_0
      12: getfield      #8                  // Field current:Ljava/lang/Object;
      15: putfield      #10                 // Field last:Ljava/lang/Object;
      18: aload_0
      19: aload_0
      20: getfield      #11                 // Field currentValue:Ljava/lang/Object;
      23: putfield      #12                 // Field lastValue:Ljava/lang/Object;
      26: aload_0
      27: aload_0
      28: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      31: ifnonnull     38
      34: aconst_null
      35: goto          45
      38: aload_0
      39: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      42: getfield      #14                 // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
      45: putfield      #15                 // Field lastPage:Lorg/h2/mvstore/Page;
      48: aload_0
      49: invokespecial #7                  // Method fetchNext:()V
      52: aload_1
      53: areturn

  public K getKey();
    Code:
       0: aload_0
       1: getfield      #10                 // Field last:Ljava/lang/Object;
       4: areturn

  public V getValue();
    Code:
       0: aload_0
       1: getfield      #12                 // Field lastValue:Ljava/lang/Object;
       4: areturn

  org.h2.mvstore.Page getPage();
    Code:
       0: aload_0
       1: getfield      #15                 // Field lastPage:Lorg/h2/mvstore/Page;
       4: areturn

  public void skip(long);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method hasNext:()Z
       4: ifne          8
       7: return
       8: lload_1
       9: ldc2_w        #16                 // long 10l
      12: lcmp
      13: ifge          34
      16: lload_1
      17: dup2
      18: lconst_1
      19: lsub
      20: lstore_1
      21: lconst_0
      22: lcmp
      23: ifle          33
      26: aload_0
      27: invokespecial #7                  // Method fetchNext:()V
      30: goto          16
      33: return
      34: aload_0
      35: getfield      #2                  // Field map:Lorg/h2/mvstore/MVMap;
      38: aload_0
      39: getfield      #8                  // Field current:Ljava/lang/Object;
      42: invokevirtual #18                 // Method org/h2/mvstore/MVMap.getKeyIndex:(Ljava/lang/Object;)J
      45: lstore_3
      46: aload_0
      47: getfield      #2                  // Field map:Lorg/h2/mvstore/MVMap;
      50: lload_3
      51: lload_1
      52: ladd
      53: invokevirtual #19                 // Method org/h2/mvstore/MVMap.getKey:(J)Ljava/lang/Object;
      56: astore        5
      58: aload_0
      59: aconst_null
      60: putfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      63: aload_0
      64: aload_0
      65: getfield      #3                  // Field root:Lorg/h2/mvstore/Page;
      68: aload         5
      70: invokespecial #6                  // Method min:(Lorg/h2/mvstore/Page;Ljava/lang/Object;)V
      73: aload_0
      74: invokespecial #7                  // Method fetchNext:()V
      77: return

  public void remove();
    Code:
       0: ldc           #20                 // String Removing is not supported
       2: invokestatic  #21                 // Method org/h2/mvstore/DataUtils.newUnsupportedOperationException:(Ljava/lang/String;)Ljava/lang/UnsupportedOperationException;
       5: athrow

  private void min(org.h2.mvstore.Page, K);
    Code:
       0: aload_1
       1: invokevirtual #22                 // Method org/h2/mvstore/Page.isLeaf:()Z
       4: ifeq          50
       7: aload_2
       8: ifnonnull     15
      11: iconst_0
      12: goto          20
      15: aload_1
      16: aload_2
      17: invokevirtual #23                 // Method org/h2/mvstore/Page.binarySearch:(Ljava/lang/Object;)I
      20: istore_3
      21: iload_3
      22: ifge          30
      25: iload_3
      26: ineg
      27: iconst_1
      28: isub
      29: istore_3
      30: aload_0
      31: new           #24                 // class org/h2/mvstore/CursorPos
      34: dup
      35: aload_1
      36: iload_3
      37: aload_0
      38: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      41: invokespecial #25                 // Method org/h2/mvstore/CursorPos."<init>":(Lorg/h2/mvstore/Page;ILorg/h2/mvstore/CursorPos;)V
      44: putfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      47: goto          107
      50: aload_2
      51: ifnonnull     58
      54: iconst_m1
      55: goto          63
      58: aload_1
      59: aload_2
      60: invokevirtual #23                 // Method org/h2/mvstore/Page.binarySearch:(Ljava/lang/Object;)I
      63: istore_3
      64: iload_3
      65: ifge          76
      68: iload_3
      69: ineg
      70: iconst_1
      71: isub
      72: istore_3
      73: goto          79
      76: iinc          3, 1
      79: aload_0
      80: new           #24                 // class org/h2/mvstore/CursorPos
      83: dup
      84: aload_1
      85: iload_3
      86: iconst_1
      87: iadd
      88: aload_0
      89: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      92: invokespecial #25                 // Method org/h2/mvstore/CursorPos."<init>":(Lorg/h2/mvstore/Page;ILorg/h2/mvstore/CursorPos;)V
      95: putfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      98: aload_1
      99: iload_3
     100: invokevirtual #26                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
     103: astore_1
     104: goto          0
     107: return

  private void fetchNext();
    Code:
       0: aload_0
       1: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
       4: ifnull        150
       7: aload_0
       8: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      11: getfield      #27                 // Field org/h2/mvstore/CursorPos.index:I
      14: aload_0
      15: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      18: getfield      #14                 // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
      21: invokevirtual #28                 // Method org/h2/mvstore/Page.getKeyCount:()I
      24: if_icmpge     73
      27: aload_0
      28: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      31: dup
      32: getfield      #27                 // Field org/h2/mvstore/CursorPos.index:I
      35: dup_x1
      36: iconst_1
      37: iadd
      38: putfield      #27                 // Field org/h2/mvstore/CursorPos.index:I
      41: istore_1
      42: aload_0
      43: aload_0
      44: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      47: getfield      #14                 // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
      50: iload_1
      51: invokevirtual #29                 // Method org/h2/mvstore/Page.getKey:(I)Ljava/lang/Object;
      54: putfield      #8                  // Field current:Ljava/lang/Object;
      57: aload_0
      58: aload_0
      59: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      62: getfield      #14                 // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
      65: iload_1
      66: invokevirtual #30                 // Method org/h2/mvstore/Page.getValue:(I)Ljava/lang/Object;
      69: putfield      #11                 // Field currentValue:Ljava/lang/Object;
      72: return
      73: aload_0
      74: aload_0
      75: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      78: getfield      #31                 // Field org/h2/mvstore/CursorPos.parent:Lorg/h2/mvstore/CursorPos;
      81: putfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      84: aload_0
      85: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      88: ifnonnull     94
      91: goto          150
      94: aload_0
      95: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
      98: getfield      #27                 // Field org/h2/mvstore/CursorPos.index:I
     101: aload_0
     102: getfield      #2                  // Field map:Lorg/h2/mvstore/MVMap;
     105: aload_0
     106: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
     109: getfield      #14                 // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
     112: invokevirtual #32                 // Method org/h2/mvstore/MVMap.getChildPageCount:(Lorg/h2/mvstore/Page;)I
     115: if_icmpge     0
     118: aload_0
     119: aload_0
     120: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
     123: getfield      #14                 // Field org/h2/mvstore/CursorPos.page:Lorg/h2/mvstore/Page;
     126: aload_0
     127: getfield      #13                 // Field pos:Lorg/h2/mvstore/CursorPos;
     130: dup
     131: getfield      #27                 // Field org/h2/mvstore/CursorPos.index:I
     134: dup_x1
     135: iconst_1
     136: iadd
     137: putfield      #27                 // Field org/h2/mvstore/CursorPos.index:I
     140: invokevirtual #26                 // Method org/h2/mvstore/Page.getChildPage:(I)Lorg/h2/mvstore/Page;
     143: aconst_null
     144: invokespecial #6                  // Method min:(Lorg/h2/mvstore/Page;Ljava/lang/Object;)V
     147: goto          0
     150: aload_0
     151: aconst_null
     152: putfield      #8                  // Field current:Ljava/lang/Object;
     155: return
}
