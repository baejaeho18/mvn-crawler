Compiled from "TransactionStore.java"
public class org.h2.mvstore.db.TransactionStore {
  final org.h2.mvstore.MVStore store;

  final org.h2.mvstore.MVMap<java.lang.Integer, java.lang.Object[]> preparedTransactions;

  final org.h2.mvstore.MVMap<java.lang.Long, java.lang.Object[]> undoLog;

  final java.util.concurrent.locks.ReentrantReadWriteLock rwLock;

  private final java.util.HashMap<java.lang.Integer, org.h2.mvstore.MVMap<java.lang.Object, org.h2.mvstore.db.TransactionStore$VersionedValue>> maps;

  private final org.h2.mvstore.type.DataType dataType;

  private final java.util.BitSet openTransactions;

  private boolean init;

  private int maxTransactionId;

  private int nextTempMapId;

  public org.h2.mvstore.db.TransactionStore(org.h2.mvstore.MVStore);
    Code:
       0: aload_0
       1: aload_1
       2: new           #1                  // class org/h2/mvstore/type/ObjectDataType
       5: dup
       6: invokespecial #2                  // Method org/h2/mvstore/type/ObjectDataType."<init>":()V
       9: invokespecial #3                  // Method "<init>":(Lorg/h2/mvstore/MVStore;Lorg/h2/mvstore/type/DataType;)V
      12: return

  public org.h2.mvstore.db.TransactionStore(org.h2.mvstore.MVStore, org.h2.mvstore.type.DataType);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/util/concurrent/locks/ReentrantReadWriteLock
       8: dup
       9: invokespecial #6                  // Method java/util/concurrent/locks/ReentrantReadWriteLock."<init>":()V
      12: putfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      15: aload_0
      16: new           #8                  // class java/util/HashMap
      19: dup
      20: invokespecial #9                  // Method java/util/HashMap."<init>":()V
      23: putfield      #10                 // Field maps:Ljava/util/HashMap;
      26: aload_0
      27: new           #11                 // class java/util/BitSet
      30: dup
      31: invokespecial #12                 // Method java/util/BitSet."<init>":()V
      34: putfield      #13                 // Field openTransactions:Ljava/util/BitSet;
      37: aload_0
      38: ldc           #14                 // int 65535
      40: putfield      #15                 // Field maxTransactionId:I
      43: aload_0
      44: aload_1
      45: putfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      48: aload_0
      49: aload_2
      50: putfield      #17                 // Field dataType:Lorg/h2/mvstore/type/DataType;
      53: aload_0
      54: aload_1
      55: ldc           #18                 // String openTransactions
      57: new           #19                 // class org/h2/mvstore/MVMap$Builder
      60: dup
      61: invokespecial #20                 // Method org/h2/mvstore/MVMap$Builder."<init>":()V
      64: invokevirtual #21                 // Method org/h2/mvstore/MVStore.openMap:(Ljava/lang/String;Lorg/h2/mvstore/MVMap$MapBuilder;)Lorg/h2/mvstore/MVMap;
      67: putfield      #22                 // Field preparedTransactions:Lorg/h2/mvstore/MVMap;
      70: new           #23                 // class org/h2/mvstore/db/TransactionStore$VersionedValueType
      73: dup
      74: aload_2
      75: invokespecial #24                 // Method org/h2/mvstore/db/TransactionStore$VersionedValueType."<init>":(Lorg/h2/mvstore/type/DataType;)V
      78: astore_3
      79: new           #25                 // class org/h2/mvstore/db/TransactionStore$ArrayType
      82: dup
      83: iconst_3
      84: anewarray     #26                 // class org/h2/mvstore/type/DataType
      87: dup
      88: iconst_0
      89: new           #1                  // class org/h2/mvstore/type/ObjectDataType
      92: dup
      93: invokespecial #2                  // Method org/h2/mvstore/type/ObjectDataType."<init>":()V
      96: aastore
      97: dup
      98: iconst_1
      99: aload_2
     100: aastore
     101: dup
     102: iconst_2
     103: aload_3
     104: aastore
     105: invokespecial #27                 // Method org/h2/mvstore/db/TransactionStore$ArrayType."<init>":([Lorg/h2/mvstore/type/DataType;)V
     108: astore        4
     110: new           #19                 // class org/h2/mvstore/MVMap$Builder
     113: dup
     114: invokespecial #20                 // Method org/h2/mvstore/MVMap$Builder."<init>":()V
     117: aload         4
     119: invokevirtual #28                 // Method org/h2/mvstore/MVMap$Builder.valueType:(Lorg/h2/mvstore/type/DataType;)Lorg/h2/mvstore/MVMap$Builder;
     122: astore        5
     124: aload_0
     125: aload_1
     126: ldc           #29                 // String undoLog
     128: aload         5
     130: invokevirtual #21                 // Method org/h2/mvstore/MVStore.openMap:(Ljava/lang/String;Lorg/h2/mvstore/MVMap$MapBuilder;)Lorg/h2/mvstore/MVMap;
     133: putfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
     136: aload_0
     137: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
     140: invokevirtual #31                 // Method org/h2/mvstore/MVMap.getValueType:()Lorg/h2/mvstore/type/DataType;
     143: aload         4
     145: if_acmpeq     160
     148: bipush        100
     150: ldc           #32                 // String Undo map open with a different value type
     152: iconst_0
     153: anewarray     #33                 // class java/lang/Object
     156: invokestatic  #34                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
     159: athrow
     160: return

  public synchronized void init();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #35                 // Field init:Z
       5: aload_0
       6: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
       9: invokevirtual #36                 // Method org/h2/mvstore/MVStore.getMapNames:()Ljava/util/Set;
      12: invokeinterface #37,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      17: astore_1
      18: aload_1
      19: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          63
      27: aload_1
      28: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #40                 // class java/lang/String
      36: astore_2
      37: aload_2
      38: ldc           #41                 // String temp.
      40: invokevirtual #42                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      43: ifeq          60
      46: aload_0
      47: aload_2
      48: invokevirtual #43                 // Method openTempMap:(Ljava/lang/String;)Lorg/h2/mvstore/MVMap;
      51: astore_3
      52: aload_0
      53: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      56: aload_3
      57: invokevirtual #44                 // Method org/h2/mvstore/MVStore.removeMap:(Lorg/h2/mvstore/MVMap;)V
      60: goto          18
      63: aload_0
      64: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      67: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      70: invokevirtual #46                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
      73: aload_0
      74: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      77: invokevirtual #47                 // Method org/h2/mvstore/MVMap.size:()I
      80: ifle          134
      83: aload_0
      84: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      87: invokevirtual #48                 // Method org/h2/mvstore/MVMap.keySet:()Ljava/util/Set;
      90: invokeinterface #37,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      95: astore_1
      96: aload_1
      97: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     102: ifeq          134
     105: aload_1
     106: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     111: checkcast     #49                 // class java/lang/Long
     114: astore_2
     115: aload_2
     116: invokevirtual #50                 // Method java/lang/Long.longValue:()J
     119: invokestatic  #51                 // Method getTransactionId:(J)I
     122: istore_3
     123: aload_0
     124: getfield      #13                 // Field openTransactions:Ljava/util/BitSet;
     127: iload_3
     128: invokevirtual #52                 // Method java/util/BitSet.set:(I)V
     131: goto          96
     134: aload_0
     135: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     138: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     141: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     144: goto          162
     147: astore        4
     149: aload_0
     150: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     153: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     156: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     159: aload         4
     161: athrow
     162: return
    Exception table:
       from    to  target type
          73   134   147   any
         147   149   147   any

  public void setMaxTransactionId(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field maxTransactionId:I
       5: return

  static long getOperationId(int, long);
    Code:
       0: iload_0
       1: iflt          14
       4: iload_0
       5: ldc           #54                 // int 16777216
       7: if_icmpge     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ldc           #55                 // String Transaction id out of range: {0}
      17: iconst_1
      18: anewarray     #33                 // class java/lang/Object
      21: dup
      22: iconst_0
      23: iload_0
      24: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: aastore
      28: invokestatic  #57                 // Method org/h2/mvstore/DataUtils.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      31: lload_1
      32: lconst_0
      33: lcmp
      34: iflt          49
      37: lload_1
      38: ldc2_w        #58                 // long 1099511627776l
      41: lcmp
      42: ifge          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ldc           #60                 // String Transaction log id out of range: {0}
      52: iconst_1
      53: anewarray     #33                 // class java/lang/Object
      56: dup
      57: iconst_0
      58: lload_1
      59: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      62: aastore
      63: invokestatic  #57                 // Method org/h2/mvstore/DataUtils.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      66: iload_0
      67: i2l
      68: bipush        40
      70: lshl
      71: lload_1
      72: lor
      73: lreturn

  static int getTransactionId(long);
    Code:
       0: lload_0
       1: bipush        40
       3: lushr
       4: l2i
       5: ireturn

  static long getLogId(long);
    Code:
       0: lload_0
       1: ldc2_w        #62                 // long 1099511627775l
       4: land
       5: lreturn

  public java.util.List<org.h2.mvstore.db.TransactionStore$Transaction> getOpenTransactions();
    Code:
       0: aload_0
       1: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #64                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
       7: invokevirtual #65                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
      10: invokestatic  #66                 // Method org/h2/util/New.arrayList:()Ljava/util/ArrayList;
      13: astore_1
      14: aload_0
      15: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      18: invokevirtual #67                 // Method org/h2/mvstore/MVMap.firstKey:()Ljava/lang/Object;
      21: checkcast     #49                 // class java/lang/Long
      24: astore_2
      25: aload_2
      26: ifnull        192
      29: aload_2
      30: invokevirtual #50                 // Method java/lang/Long.longValue:()J
      33: invokestatic  #51                 // Method getTransactionId:(J)I
      36: istore_3
      37: aload_0
      38: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      41: iload_3
      42: iconst_1
      43: iadd
      44: lconst_0
      45: invokestatic  #68                 // Method getOperationId:(IJ)J
      48: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      51: invokevirtual #69                 // Method org/h2/mvstore/MVMap.lowerKey:(Ljava/lang/Object;)Ljava/lang/Object;
      54: checkcast     #49                 // class java/lang/Long
      57: astore_2
      58: aload_2
      59: invokevirtual #50                 // Method java/lang/Long.longValue:()J
      62: invokestatic  #70                 // Method getLogId:(J)J
      65: lconst_1
      66: ladd
      67: lstore        4
      69: aload_0
      70: getfield      #22                 // Field preparedTransactions:Lorg/h2/mvstore/MVMap;
      73: iload_3
      74: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      77: invokevirtual #71                 // Method org/h2/mvstore/MVMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      80: checkcast     #72                 // class "[Ljava/lang/Object;"
      83: astore        6
      85: aload         6
      87: ifnonnull     123
      90: aload_0
      91: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      94: iload_3
      95: lconst_0
      96: invokestatic  #68                 // Method getOperationId:(IJ)J
      99: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     102: invokevirtual #73                 // Method org/h2/mvstore/MVMap.containsKey:(Ljava/lang/Object;)Z
     105: ifeq          114
     108: iconst_1
     109: istore        7
     111: goto          117
     114: iconst_3
     115: istore        7
     117: aconst_null
     118: astore        8
     120: goto          144
     123: aload         6
     125: iconst_0
     126: aaload
     127: checkcast     #74                 // class java/lang/Integer
     130: invokevirtual #75                 // Method java/lang/Integer.intValue:()I
     133: istore        7
     135: aload         6
     137: iconst_1
     138: aaload
     139: checkcast     #40                 // class java/lang/String
     142: astore        8
     144: new           #76                 // class org/h2/mvstore/db/TransactionStore$Transaction
     147: dup
     148: aload_0
     149: iload_3
     150: iload         7
     152: aload         8
     154: lload         4
     156: invokespecial #77                 // Method org/h2/mvstore/db/TransactionStore$Transaction."<init>":(Lorg/h2/mvstore/db/TransactionStore;IILjava/lang/String;J)V
     159: astore        9
     161: aload_1
     162: aload         9
     164: invokevirtual #78                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     167: pop
     168: aload_0
     169: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
     172: iload_3
     173: iconst_1
     174: iadd
     175: lconst_0
     176: invokestatic  #68                 // Method getOperationId:(IJ)J
     179: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     182: invokevirtual #79                 // Method org/h2/mvstore/MVMap.ceilingKey:(Ljava/lang/Object;)Ljava/lang/Object;
     185: checkcast     #49                 // class java/lang/Long
     188: astore_2
     189: goto          25
     192: aload_1
     193: astore_3
     194: aload_0
     195: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     198: invokevirtual #64                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     201: invokevirtual #80                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     204: aload_3
     205: areturn
     206: astore        10
     208: aload_0
     209: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     212: invokevirtual #64                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     215: invokevirtual #80                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     218: aload         10
     220: athrow
    Exception table:
       from    to  target type
          10   194   206   any
         206   208   206   any

  public synchronized void close();
    Code:
       0: aload_0
       1: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
       4: invokevirtual #81                 // Method org/h2/mvstore/MVStore.commit:()J
       7: pop2
       8: return

  public synchronized org.h2.mvstore.db.TransactionStore$Transaction begin();
    Code:
       0: aload_0
       1: getfield      #35                 // Field init:Z
       4: ifne          19
       7: bipush        103
       9: ldc           #82                 // String Not initialized
      11: iconst_0
      12: anewarray     #33                 // class java/lang/Object
      15: invokestatic  #34                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
      18: athrow
      19: aload_0
      20: getfield      #13                 // Field openTransactions:Ljava/util/BitSet;
      23: iconst_1
      24: invokevirtual #83                 // Method java/util/BitSet.nextClearBit:(I)I
      27: istore_1
      28: iload_1
      29: aload_0
      30: getfield      #15                 // Field maxTransactionId:I
      33: if_icmple     57
      36: bipush        102
      38: ldc           #84                 // String There are {0} open transactions
      40: iconst_1
      41: anewarray     #33                 // class java/lang/Object
      44: dup
      45: iconst_0
      46: iload_1
      47: iconst_1
      48: isub
      49: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      52: aastore
      53: invokestatic  #34                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
      56: athrow
      57: aload_0
      58: getfield      #13                 // Field openTransactions:Ljava/util/BitSet;
      61: iload_1
      62: invokevirtual #52                 // Method java/util/BitSet.set:(I)V
      65: iconst_1
      66: istore_2
      67: new           #76                 // class org/h2/mvstore/db/TransactionStore$Transaction
      70: dup
      71: aload_0
      72: iload_1
      73: iload_2
      74: aconst_null
      75: lconst_0
      76: invokespecial #77                 // Method org/h2/mvstore/db/TransactionStore$Transaction."<init>":(Lorg/h2/mvstore/db/TransactionStore;IILjava/lang/String;J)V
      79: areturn

  synchronized void storeTransaction(org.h2.mvstore.db.TransactionStore$Transaction);
    Code:
       0: aload_1
       1: invokevirtual #85                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getStatus:()I
       4: iconst_2
       5: if_icmpeq     15
       8: aload_1
       9: invokevirtual #86                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getName:()Ljava/lang/String;
      12: ifnull        53
      15: iconst_2
      16: anewarray     #33                 // class java/lang/Object
      19: dup
      20: iconst_0
      21: aload_1
      22: invokevirtual #85                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getStatus:()I
      25: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: aastore
      29: dup
      30: iconst_1
      31: aload_1
      32: invokevirtual #86                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getName:()Ljava/lang/String;
      35: aastore
      36: astore_2
      37: aload_0
      38: getfield      #22                 // Field preparedTransactions:Lorg/h2/mvstore/MVMap;
      41: aload_1
      42: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
      45: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      48: aload_2
      49: invokevirtual #88                 // Method org/h2/mvstore/MVMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      52: pop
      53: return

  void log(org.h2.mvstore.db.TransactionStore$Transaction, long, int, java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
       4: lload_2
       5: invokestatic  #68                 // Method getOperationId:(IJ)J
       8: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      11: astore        7
      13: iconst_3
      14: anewarray     #33                 // class java/lang/Object
      17: dup
      18: iconst_0
      19: iload         4
      21: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: aastore
      25: dup
      26: iconst_1
      27: aload         5
      29: aastore
      30: dup
      31: iconst_2
      32: aload         6
      34: aastore
      35: astore        8
      37: aload_0
      38: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      41: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      44: invokevirtual #46                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
      47: lload_2
      48: lconst_0
      49: lcmp
      50: ifne          87
      53: aload_0
      54: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      57: aload         7
      59: invokevirtual #73                 // Method org/h2/mvstore/MVMap.containsKey:(Ljava/lang/Object;)Z
      62: ifeq          87
      65: bipush        102
      67: ldc           #89                 // String An old transaction with the same id is still open: {0}
      69: iconst_1
      70: anewarray     #33                 // class java/lang/Object
      73: dup
      74: iconst_0
      75: aload_1
      76: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
      79: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      82: aastore
      83: invokestatic  #34                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
      86: athrow
      87: aload_0
      88: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      91: aload         7
      93: aload         8
      95: invokevirtual #88                 // Method org/h2/mvstore/MVMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      98: pop
      99: aload_0
     100: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     103: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     106: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     109: goto          127
     112: astore        9
     114: aload_0
     115: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     118: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     121: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     124: aload         9
     126: athrow
     127: return
    Exception table:
       from    to  target type
          47    99   112   any
         112   114   112   any

  public void logUndo(org.h2.mvstore.db.TransactionStore$Transaction, long);
    Code:
       0: aload_1
       1: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
       4: lload_2
       5: invokestatic  #68                 // Method getOperationId:(IJ)J
       8: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      11: astore        4
      13: aload_0
      14: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      17: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      20: invokevirtual #46                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
      23: aload_0
      24: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      27: aload         4
      29: invokevirtual #90                 // Method org/h2/mvstore/MVMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      32: checkcast     #72                 // class "[Ljava/lang/Object;"
      35: astore        5
      37: aload         5
      39: ifnonnull     64
      42: bipush        103
      44: ldc           #91                 // String Transaction {0} was concurrently rolled back
      46: iconst_1
      47: anewarray     #33                 // class java/lang/Object
      50: dup
      51: iconst_0
      52: aload_1
      53: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
      56: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      59: aastore
      60: invokestatic  #34                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
      63: athrow
      64: aload_0
      65: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      68: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      71: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
      74: goto          92
      77: astore        6
      79: aload_0
      80: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      83: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      86: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
      89: aload         6
      91: athrow
      92: return
    Exception table:
       from    to  target type
          23    64    77   any
          77    79    77   any

  synchronized <K, V> void removeMap(org.h2.mvstore.db.TransactionStore$TransactionMap<K, V>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field maps:Ljava/util/HashMap;
       4: aload_1
       5: getfield      #92                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.mapId:I
       8: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: invokevirtual #93                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: aload_0
      16: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      19: aload_1
      20: getfield      #94                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.map:Lorg/h2/mvstore/MVMap;
      23: invokevirtual #44                 // Method org/h2/mvstore/MVStore.removeMap:(Lorg/h2/mvstore/MVMap;)V
      26: return

  void commit(org.h2.mvstore.db.TransactionStore$Transaction, long);
    Code:
       0: aload_0
       1: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
       4: invokevirtual #95                 // Method org/h2/mvstore/MVStore.isClosed:()Z
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      15: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      18: invokevirtual #46                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
      21: aload_1
      22: invokevirtual #85                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getStatus:()I
      25: istore        4
      27: aload_1
      28: iconst_3
      29: invokevirtual #96                 // Method org/h2/mvstore/db/TransactionStore$Transaction.setStatus:(I)V
      32: lconst_0
      33: lstore        5
      35: lload         5
      37: lload_2
      38: lcmp
      39: ifge          248
      42: aload_1
      43: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
      46: lload         5
      48: invokestatic  #68                 // Method getOperationId:(IJ)J
      51: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      54: astore        7
      56: aload_0
      57: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      60: aload         7
      62: invokevirtual #71                 // Method org/h2/mvstore/MVMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      65: checkcast     #72                 // class "[Ljava/lang/Object;"
      68: astore        8
      70: aload         8
      72: ifnonnull     127
      75: aload_0
      76: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      79: aload         7
      81: invokevirtual #79                 // Method org/h2/mvstore/MVMap.ceilingKey:(Ljava/lang/Object;)Ljava/lang/Object;
      84: checkcast     #49                 // class java/lang/Long
      87: astore        7
      89: aload         7
      91: ifnull        248
      94: aload         7
      96: invokevirtual #50                 // Method java/lang/Long.longValue:()J
      99: invokestatic  #51                 // Method getTransactionId:(J)I
     102: aload_1
     103: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
     106: if_icmpeq     112
     109: goto          248
     112: aload         7
     114: invokevirtual #50                 // Method java/lang/Long.longValue:()J
     117: invokestatic  #70                 // Method getLogId:(J)J
     120: lconst_1
     121: lsub
     122: lstore        5
     124: goto          239
     127: aload         8
     129: iconst_0
     130: aaload
     131: checkcast     #74                 // class java/lang/Integer
     134: invokevirtual #75                 // Method java/lang/Integer.intValue:()I
     137: istore        9
     139: aload_0
     140: iload         9
     142: invokevirtual #97                 // Method openMap:(I)Lorg/h2/mvstore/MVMap;
     145: astore        10
     147: aload         10
     149: ifnull        229
     152: aload         8
     154: iconst_1
     155: aaload
     156: astore        11
     158: aload         10
     160: aload         11
     162: invokevirtual #71                 // Method org/h2/mvstore/MVMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     165: checkcast     #98                 // class org/h2/mvstore/db/TransactionStore$VersionedValue
     168: astore        12
     170: aload         12
     172: ifnull        229
     175: aload         12
     177: getfield      #99                 // Field org/h2/mvstore/db/TransactionStore$VersionedValue.operationId:J
     180: aload         7
     182: invokevirtual #50                 // Method java/lang/Long.longValue:()J
     185: lcmp
     186: ifne          229
     189: aload         12
     191: getfield      #100                // Field org/h2/mvstore/db/TransactionStore$VersionedValue.value:Ljava/lang/Object;
     194: ifnonnull     208
     197: aload         10
     199: aload         11
     201: invokevirtual #90                 // Method org/h2/mvstore/MVMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     204: pop
     205: goto          229
     208: aload         10
     210: aload         11
     212: new           #98                 // class org/h2/mvstore/db/TransactionStore$VersionedValue
     215: dup
     216: lconst_0
     217: aload         12
     219: getfield      #100                // Field org/h2/mvstore/db/TransactionStore$VersionedValue.value:Ljava/lang/Object;
     222: invokespecial #101                // Method org/h2/mvstore/db/TransactionStore$VersionedValue."<init>":(JLjava/lang/Object;)V
     225: invokevirtual #88                 // Method org/h2/mvstore/MVMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     228: pop
     229: aload_0
     230: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
     233: aload         7
     235: invokevirtual #90                 // Method org/h2/mvstore/MVMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     238: pop
     239: lload         5
     241: lconst_1
     242: ladd
     243: lstore        5
     245: goto          35
     248: aload_0
     249: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     252: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     255: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     258: goto          276
     261: astore        13
     263: aload_0
     264: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     267: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     270: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     273: aload         13
     275: athrow
     276: aload_0
     277: aload_1
     278: iload         4
     280: invokevirtual #102                // Method endTransaction:(Lorg/h2/mvstore/db/TransactionStore$Transaction;I)V
     283: return
    Exception table:
       from    to  target type
          27   248   261   any
         261   263   261   any

  synchronized <K> org.h2.mvstore.MVMap<K, org.h2.mvstore.db.TransactionStore$VersionedValue> openMap(java.lang.String, org.h2.mvstore.type.DataType, org.h2.mvstore.type.DataType);
    Code:
       0: aload_2
       1: ifnonnull     12
       4: new           #1                  // class org/h2/mvstore/type/ObjectDataType
       7: dup
       8: invokespecial #2                  // Method org/h2/mvstore/type/ObjectDataType."<init>":()V
      11: astore_2
      12: aload_3
      13: ifnonnull     24
      16: new           #1                  // class org/h2/mvstore/type/ObjectDataType
      19: dup
      20: invokespecial #2                  // Method org/h2/mvstore/type/ObjectDataType."<init>":()V
      23: astore_3
      24: new           #23                 // class org/h2/mvstore/db/TransactionStore$VersionedValueType
      27: dup
      28: aload_3
      29: invokespecial #24                 // Method org/h2/mvstore/db/TransactionStore$VersionedValueType."<init>":(Lorg/h2/mvstore/type/DataType;)V
      32: astore        4
      34: new           #19                 // class org/h2/mvstore/MVMap$Builder
      37: dup
      38: invokespecial #20                 // Method org/h2/mvstore/MVMap$Builder."<init>":()V
      41: aload_2
      42: invokevirtual #103                // Method org/h2/mvstore/MVMap$Builder.keyType:(Lorg/h2/mvstore/type/DataType;)Lorg/h2/mvstore/MVMap$Builder;
      45: aload         4
      47: invokevirtual #28                 // Method org/h2/mvstore/MVMap$Builder.valueType:(Lorg/h2/mvstore/type/DataType;)Lorg/h2/mvstore/MVMap$Builder;
      50: astore        6
      52: aload_0
      53: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      56: aload_1
      57: aload         6
      59: invokevirtual #21                 // Method org/h2/mvstore/MVStore.openMap:(Ljava/lang/String;Lorg/h2/mvstore/MVMap$MapBuilder;)Lorg/h2/mvstore/MVMap;
      62: astore        5
      64: aload         5
      66: astore        7
      68: aload_0
      69: getfield      #10                 // Field maps:Ljava/util/HashMap;
      72: aload         5
      74: invokevirtual #104                // Method org/h2/mvstore/MVMap.getId:()I
      77: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      80: aload         7
      82: invokevirtual #105                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      85: pop
      86: aload         5
      88: areturn

  synchronized org.h2.mvstore.MVMap<java.lang.Object, org.h2.mvstore.db.TransactionStore$VersionedValue> openMap(int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field maps:Ljava/util/HashMap;
       4: iload_1
       5: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokevirtual #106                // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #107                // class org/h2/mvstore/MVMap
      14: astore_2
      15: aload_2
      16: ifnull        21
      19: aload_2
      20: areturn
      21: aload_0
      22: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      25: iload_1
      26: invokevirtual #108                // Method org/h2/mvstore/MVStore.getMapName:(I)Ljava/lang/String;
      29: astore_3
      30: aload_3
      31: ifnonnull     36
      34: aconst_null
      35: areturn
      36: new           #23                 // class org/h2/mvstore/db/TransactionStore$VersionedValueType
      39: dup
      40: aload_0
      41: getfield      #17                 // Field dataType:Lorg/h2/mvstore/type/DataType;
      44: invokespecial #24                 // Method org/h2/mvstore/db/TransactionStore$VersionedValueType."<init>":(Lorg/h2/mvstore/type/DataType;)V
      47: astore        4
      49: new           #19                 // class org/h2/mvstore/MVMap$Builder
      52: dup
      53: invokespecial #20                 // Method org/h2/mvstore/MVMap$Builder."<init>":()V
      56: aload_0
      57: getfield      #17                 // Field dataType:Lorg/h2/mvstore/type/DataType;
      60: invokevirtual #103                // Method org/h2/mvstore/MVMap$Builder.keyType:(Lorg/h2/mvstore/type/DataType;)Lorg/h2/mvstore/MVMap$Builder;
      63: aload         4
      65: invokevirtual #28                 // Method org/h2/mvstore/MVMap$Builder.valueType:(Lorg/h2/mvstore/type/DataType;)Lorg/h2/mvstore/MVMap$Builder;
      68: astore        5
      70: aload_0
      71: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      74: aload_3
      75: aload         5
      77: invokevirtual #21                 // Method org/h2/mvstore/MVStore.openMap:(Ljava/lang/String;Lorg/h2/mvstore/MVMap$MapBuilder;)Lorg/h2/mvstore/MVMap;
      80: astore_2
      81: aload_0
      82: getfield      #10                 // Field maps:Ljava/util/HashMap;
      85: iload_1
      86: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      89: aload_2
      90: invokevirtual #105                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      93: pop
      94: aload_2
      95: areturn

  synchronized org.h2.mvstore.MVMap<java.lang.Object, java.lang.Integer> createTempMap();
    Code:
       0: new           #109                // class java/lang/StringBuilder
       3: dup
       4: invokespecial #110                // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #41                 // String temp.
       9: invokevirtual #111                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: dup
      14: getfield      #112                // Field nextTempMapId:I
      17: dup_x1
      18: iconst_1
      19: iadd
      20: putfield      #112                // Field nextTempMapId:I
      23: invokevirtual #113                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      26: invokevirtual #114                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: astore_1
      30: aload_0
      31: aload_1
      32: invokevirtual #43                 // Method openTempMap:(Ljava/lang/String;)Lorg/h2/mvstore/MVMap;
      35: areturn

  org.h2.mvstore.MVMap<java.lang.Object, java.lang.Integer> openTempMap(java.lang.String);
    Code:
       0: new           #19                 // class org/h2/mvstore/MVMap$Builder
       3: dup
       4: invokespecial #20                 // Method org/h2/mvstore/MVMap$Builder."<init>":()V
       7: aload_0
       8: getfield      #17                 // Field dataType:Lorg/h2/mvstore/type/DataType;
      11: invokevirtual #103                // Method org/h2/mvstore/MVMap$Builder.keyType:(Lorg/h2/mvstore/type/DataType;)Lorg/h2/mvstore/MVMap$Builder;
      14: astore_2
      15: aload_0
      16: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      19: aload_1
      20: aload_2
      21: invokevirtual #21                 // Method org/h2/mvstore/MVStore.openMap:(Ljava/lang/String;Lorg/h2/mvstore/MVMap$MapBuilder;)Lorg/h2/mvstore/MVMap;
      24: areturn

  synchronized void endTransaction(org.h2.mvstore.db.TransactionStore$Transaction, int);
    Code:
       0: iload_2
       1: iconst_2
       2: if_icmpne     20
       5: aload_0
       6: getfield      #22                 // Field preparedTransactions:Lorg/h2/mvstore/MVMap;
       9: aload_1
      10: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
      13: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      16: invokevirtual #90                 // Method org/h2/mvstore/MVMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: aload_1
      21: iconst_0
      22: invokevirtual #96                 // Method org/h2/mvstore/db/TransactionStore$Transaction.setStatus:(I)V
      25: aload_0
      26: getfield      #13                 // Field openTransactions:Ljava/util/BitSet;
      29: aload_1
      30: getfield      #115                // Field org/h2/mvstore/db/TransactionStore$Transaction.transactionId:I
      33: invokevirtual #116                // Method java/util/BitSet.clear:(I)V
      36: iload_2
      37: iconst_2
      38: if_icmpeq     51
      41: aload_0
      42: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      45: invokevirtual #117                // Method org/h2/mvstore/MVStore.getAutoCommitDelay:()I
      48: ifne          60
      51: aload_0
      52: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      55: invokevirtual #81                 // Method org/h2/mvstore/MVStore.commit:()J
      58: pop2
      59: return
      60: aload_0
      61: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      64: invokevirtual #118                // Method org/h2/mvstore/MVMap.isEmpty:()Z
      67: ifeq          105
      70: aload_0
      71: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      74: invokevirtual #119                // Method org/h2/mvstore/MVStore.getUnsavedMemory:()I
      77: istore_3
      78: aload_0
      79: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
      82: invokevirtual #120                // Method org/h2/mvstore/MVStore.getAutoCommitMemory:()I
      85: istore        4
      87: iload_3
      88: iconst_4
      89: imul
      90: iload         4
      92: iconst_3
      93: imul
      94: if_icmple     105
      97: aload_0
      98: getfield      #16                 // Field store:Lorg/h2/mvstore/MVStore;
     101: invokevirtual #81                 // Method org/h2/mvstore/MVStore.commit:()J
     104: pop2
     105: return

  void rollbackTo(org.h2.mvstore.db.TransactionStore$Transaction, long, long);
    Code:
       0: aload_0
       1: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
       7: invokevirtual #46                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
      10: lload_2
      11: lconst_1
      12: lsub
      13: lstore        6
      15: lload         6
      17: lload         4
      19: lcmp
      20: iflt          193
      23: aload_1
      24: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
      27: lload         6
      29: invokestatic  #68                 // Method getOperationId:(IJ)J
      32: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      35: astore        8
      37: aload_0
      38: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      41: aload         8
      43: invokevirtual #71                 // Method org/h2/mvstore/MVMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      46: checkcast     #72                 // class "[Ljava/lang/Object;"
      49: astore        9
      51: aload         9
      53: ifnonnull     108
      56: aload_0
      57: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
      60: aload         8
      62: invokevirtual #121                // Method org/h2/mvstore/MVMap.floorKey:(Ljava/lang/Object;)Ljava/lang/Object;
      65: checkcast     #49                 // class java/lang/Long
      68: astore        8
      70: aload         8
      72: ifnull        193
      75: aload         8
      77: invokevirtual #50                 // Method java/lang/Long.longValue:()J
      80: invokestatic  #51                 // Method getTransactionId:(J)I
      83: aload_1
      84: invokevirtual #87                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
      87: if_icmpeq     93
      90: goto          193
      93: aload         8
      95: invokevirtual #50                 // Method java/lang/Long.longValue:()J
      98: invokestatic  #70                 // Method getLogId:(J)J
     101: lconst_1
     102: ladd
     103: lstore        6
     105: goto          184
     108: aload         9
     110: iconst_0
     111: aaload
     112: checkcast     #74                 // class java/lang/Integer
     115: invokevirtual #75                 // Method java/lang/Integer.intValue:()I
     118: istore        10
     120: aload_0
     121: iload         10
     123: invokevirtual #97                 // Method openMap:(I)Lorg/h2/mvstore/MVMap;
     126: astore        11
     128: aload         11
     130: ifnull        174
     133: aload         9
     135: iconst_1
     136: aaload
     137: astore        12
     139: aload         9
     141: iconst_2
     142: aaload
     143: checkcast     #98                 // class org/h2/mvstore/db/TransactionStore$VersionedValue
     146: astore        13
     148: aload         13
     150: ifnonnull     164
     153: aload         11
     155: aload         12
     157: invokevirtual #90                 // Method org/h2/mvstore/MVMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     160: pop
     161: goto          174
     164: aload         11
     166: aload         12
     168: aload         13
     170: invokevirtual #88                 // Method org/h2/mvstore/MVMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     173: pop
     174: aload_0
     175: getfield      #30                 // Field undoLog:Lorg/h2/mvstore/MVMap;
     178: aload         8
     180: invokevirtual #90                 // Method org/h2/mvstore/MVMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     183: pop
     184: lload         6
     186: lconst_1
     187: lsub
     188: lstore        6
     190: goto          15
     193: aload_0
     194: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     197: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     200: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     203: goto          221
     206: astore        14
     208: aload_0
     209: getfield      #7                  // Field rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     212: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     215: invokevirtual #53                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     218: aload         14
     220: athrow
     221: return
    Exception table:
       from    to  target type
          10   193   206   any
         206   208   206   any

  java.util.Iterator<org.h2.mvstore.db.TransactionStore$Change> getChanges(org.h2.mvstore.db.TransactionStore$Transaction, long, long);
    Code:
       0: new           #122                // class org/h2/mvstore/db/TransactionStore$1
       3: dup
       4: aload_0
       5: lload_2
       6: lload         4
       8: aload_1
       9: invokespecial #123                // Method org/h2/mvstore/db/TransactionStore$1."<init>":(Lorg/h2/mvstore/db/TransactionStore;JJLorg/h2/mvstore/db/TransactionStore$Transaction;)V
      12: areturn
}
