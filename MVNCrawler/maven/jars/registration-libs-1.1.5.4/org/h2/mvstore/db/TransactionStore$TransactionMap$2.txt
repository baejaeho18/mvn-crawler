Compiled from "TransactionStore.java"
class org.h2.mvstore.db.TransactionStore$TransactionMap$2 implements java.util.Iterator<java.util.Map$Entry<K, V>> {
  private java.util.Map$Entry<K, V> current;

  private K currentKey;

  private org.h2.mvstore.Cursor<K, org.h2.mvstore.db.TransactionStore$VersionedValue> cursor;

  final java.lang.Object val$from;

  final java.lang.Object val$to;

  final org.h2.mvstore.db.TransactionStore$TransactionMap this$0;

  org.h2.mvstore.db.TransactionStore$TransactionMap$2(org.h2.mvstore.db.TransactionStore$TransactionMap, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$from:Ljava/lang/Object;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$to:Ljava/lang/Object;
      15: aload_0
      16: invokespecial #4                  // Method java/lang/Object."<init>":()V
      19: aload_0
      20: aload_0
      21: getfield      #2                  // Field val$from:Ljava/lang/Object;
      24: putfield      #5                  // Field currentKey:Ljava/lang/Object;
      27: aload_0
      28: aload_0
      29: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
      32: getfield      #6                  // Field org/h2/mvstore/db/TransactionStore$TransactionMap.map:Lorg/h2/mvstore/MVMap;
      35: aload_0
      36: getfield      #5                  // Field currentKey:Ljava/lang/Object;
      39: invokevirtual #7                  // Method org/h2/mvstore/MVMap.cursor:(Ljava/lang/Object;)Lorg/h2/mvstore/Cursor;
      42: putfield      #8                  // Field cursor:Lorg/h2/mvstore/Cursor;
      45: aload_0
      46: invokespecial #9                  // Method fetchNext:()V
      49: return

  private void fetchNext();
    Code:
       0: aload_0
       1: getfield      #8                  // Field cursor:Lorg/h2/mvstore/Cursor;
       4: invokevirtual #10                 // Method org/h2/mvstore/Cursor.hasNext:()Z
       7: ifeq          347
      10: aload_0
      11: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
      14: getfield      #11                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      17: getfield      #12                 // Field org/h2/mvstore/db/TransactionStore$Transaction.store:Lorg/h2/mvstore/db/TransactionStore;
      20: getfield      #13                 // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      23: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      26: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
      29: aload_0
      30: getfield      #8                  // Field cursor:Lorg/h2/mvstore/Cursor;
      33: invokevirtual #16                 // Method org/h2/mvstore/Cursor.next:()Ljava/lang/Object;
      36: astore_1
      37: goto          156
      40: astore_2
      41: aload_2
      42: invokevirtual #18                 // Method java/lang/IllegalStateException.getMessage:()Ljava/lang/String;
      45: invokestatic  #19                 // Method org/h2/mvstore/DataUtils.getErrorCode:(Ljava/lang/String;)I
      48: bipush        9
      50: if_icmpne     154
      53: aload_0
      54: aload_0
      55: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
      58: getfield      #6                  // Field org/h2/mvstore/db/TransactionStore$TransactionMap.map:Lorg/h2/mvstore/MVMap;
      61: aload_0
      62: getfield      #5                  // Field currentKey:Ljava/lang/Object;
      65: invokevirtual #7                  // Method org/h2/mvstore/MVMap.cursor:(Ljava/lang/Object;)Lorg/h2/mvstore/Cursor;
      68: putfield      #8                  // Field cursor:Lorg/h2/mvstore/Cursor;
      71: aload_0
      72: getfield      #8                  // Field cursor:Lorg/h2/mvstore/Cursor;
      75: invokevirtual #10                 // Method org/h2/mvstore/Cursor.hasNext:()Z
      78: ifne          103
      81: aload_0
      82: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
      85: getfield      #11                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      88: getfield      #12                 // Field org/h2/mvstore/db/TransactionStore$Transaction.store:Lorg/h2/mvstore/db/TransactionStore;
      91: getfield      #13                 // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      94: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      97: invokevirtual #20                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     100: goto          347
     103: aload_0
     104: getfield      #8                  // Field cursor:Lorg/h2/mvstore/Cursor;
     107: invokevirtual #16                 // Method org/h2/mvstore/Cursor.next:()Ljava/lang/Object;
     110: pop
     111: aload_0
     112: getfield      #8                  // Field cursor:Lorg/h2/mvstore/Cursor;
     115: invokevirtual #10                 // Method org/h2/mvstore/Cursor.hasNext:()Z
     118: ifne          143
     121: aload_0
     122: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
     125: getfield      #11                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
     128: getfield      #12                 // Field org/h2/mvstore/db/TransactionStore$Transaction.store:Lorg/h2/mvstore/db/TransactionStore;
     131: getfield      #13                 // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     134: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     137: invokevirtual #20                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     140: goto          347
     143: aload_0
     144: getfield      #8                  // Field cursor:Lorg/h2/mvstore/Cursor;
     147: invokevirtual #16                 // Method org/h2/mvstore/Cursor.next:()Ljava/lang/Object;
     150: astore_1
     151: goto          156
     154: aload_2
     155: athrow
     156: aload_1
     157: astore_2
     158: aload_0
     159: getfield      #3                  // Field val$to:Ljava/lang/Object;
     162: ifnull        210
     165: aload_0
     166: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
     169: getfield      #6                  // Field org/h2/mvstore/db/TransactionStore$TransactionMap.map:Lorg/h2/mvstore/MVMap;
     172: invokevirtual #21                 // Method org/h2/mvstore/MVMap.getKeyType:()Lorg/h2/mvstore/type/DataType;
     175: aload_1
     176: aload_0
     177: getfield      #3                  // Field val$to:Ljava/lang/Object;
     180: invokeinterface #22,  3           // InterfaceMethod org/h2/mvstore/type/DataType.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
     185: ifle          210
     188: aload_0
     189: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
     192: getfield      #11                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
     195: getfield      #12                 // Field org/h2/mvstore/db/TransactionStore$Transaction.store:Lorg/h2/mvstore/db/TransactionStore;
     198: getfield      #13                 // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     201: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     204: invokevirtual #20                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     207: goto          347
     210: aload_0
     211: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
     214: getfield      #6                  // Field org/h2/mvstore/db/TransactionStore$TransactionMap.map:Lorg/h2/mvstore/MVMap;
     217: aload_2
     218: invokevirtual #23                 // Method org/h2/mvstore/MVMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     221: checkcast     #24                 // class org/h2/mvstore/db/TransactionStore$VersionedValue
     224: astore_3
     225: aload_0
     226: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
     229: aload_2
     230: aload_0
     231: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
     234: getfield      #25                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.readLogId:J
     237: aload_3
     238: invokevirtual #26                 // Method org/h2/mvstore/db/TransactionStore$TransactionMap.getValue:(Ljava/lang/Object;JLorg/h2/mvstore/db/TransactionStore$VersionedValue;)Lorg/h2/mvstore/db/TransactionStore$VersionedValue;
     241: astore_3
     242: aload_3
     243: ifnull        298
     246: aload_3
     247: getfield      #27                 // Field org/h2/mvstore/db/TransactionStore$VersionedValue.value:Ljava/lang/Object;
     250: ifnull        298
     253: aload_3
     254: getfield      #27                 // Field org/h2/mvstore/db/TransactionStore$VersionedValue.value:Ljava/lang/Object;
     257: astore        4
     259: aload_0
     260: new           #28                 // class org/h2/mvstore/DataUtils$MapEntry
     263: dup
     264: aload_2
     265: aload         4
     267: invokespecial #29                 // Method org/h2/mvstore/DataUtils$MapEntry."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     270: putfield      #30                 // Field current:Ljava/util/Map$Entry;
     273: aload_0
     274: aload_2
     275: putfield      #5                  // Field currentKey:Ljava/lang/Object;
     278: aload_0
     279: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
     282: getfield      #11                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
     285: getfield      #12                 // Field org/h2/mvstore/db/TransactionStore$Transaction.store:Lorg/h2/mvstore/db/TransactionStore;
     288: getfield      #13                 // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     291: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     294: invokevirtual #20                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     297: return
     298: aload_0
     299: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
     302: getfield      #11                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
     305: getfield      #12                 // Field org/h2/mvstore/db/TransactionStore$Transaction.store:Lorg/h2/mvstore/db/TransactionStore;
     308: getfield      #13                 // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     311: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     314: invokevirtual #20                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     317: goto          344
     320: astore        5
     322: aload_0
     323: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore$TransactionMap;
     326: getfield      #11                 // Field org/h2/mvstore/db/TransactionStore$TransactionMap.transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
     329: getfield      #12                 // Field org/h2/mvstore/db/TransactionStore$Transaction.store:Lorg/h2/mvstore/db/TransactionStore;
     332: getfield      #13                 // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     335: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     338: invokevirtual #20                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     341: aload         5
     343: athrow
     344: goto          0
     347: aload_0
     348: aconst_null
     349: putfield      #30                 // Field current:Ljava/util/Map$Entry;
     352: aload_0
     353: aconst_null
     354: putfield      #5                  // Field currentKey:Ljava/lang/Object;
     357: return
    Exception table:
       from    to  target type
          29    37    40   Class java/lang/IllegalStateException
          29    81   320   any
         103   121   320   any
         143   188   320   any
         210   278   320   any
         320   322   320   any

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #30                 // Field current:Ljava/util/Map$Entry;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.util.Map$Entry<K, V> next();
    Code:
       0: aload_0
       1: getfield      #30                 // Field current:Ljava/util/Map$Entry;
       4: astore_1
       5: aload_0
       6: invokespecial #9                  // Method fetchNext:()V
       9: aload_1
      10: areturn

  public void remove();
    Code:
       0: ldc           #31                 // String Removing is not supported
       2: invokestatic  #32                 // Method org/h2/mvstore/DataUtils.newUnsupportedOperationException:(Ljava/lang/String;)Ljava/lang/UnsupportedOperationException;
       5: athrow

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method next:()Ljava/util/Map$Entry;
       4: areturn
}
