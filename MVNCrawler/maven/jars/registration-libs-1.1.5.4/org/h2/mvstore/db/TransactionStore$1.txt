Compiled from "TransactionStore.java"
class org.h2.mvstore.db.TransactionStore$1 implements java.util.Iterator<org.h2.mvstore.db.TransactionStore$Change> {
  private long logId;

  private org.h2.mvstore.db.TransactionStore$Change current;

  final long val$maxLogId;

  final long val$toLogId;

  final org.h2.mvstore.db.TransactionStore$Transaction val$t;

  final org.h2.mvstore.db.TransactionStore this$0;

  org.h2.mvstore.db.TransactionStore$1(org.h2.mvstore.db.TransactionStore, long, long, org.h2.mvstore.db.TransactionStore$Transaction);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore;
       5: aload_0
       6: lload_2
       7: putfield      #2                  // Field val$maxLogId:J
      10: aload_0
      11: lload         4
      13: putfield      #3                  // Field val$toLogId:J
      16: aload_0
      17: aload         6
      19: putfield      #4                  // Field val$t:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      22: aload_0
      23: invokespecial #5                  // Method java/lang/Object."<init>":()V
      26: aload_0
      27: aload_0
      28: getfield      #2                  // Field val$maxLogId:J
      31: lconst_1
      32: lsub
      33: putfield      #6                  // Field logId:J
      36: aload_0
      37: invokespecial #7                  // Method fetchNext:()V
      40: return

  private void fetchNext();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore;
       4: getfield      #8                  // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       7: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      10: invokevirtual #10                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
      13: aload_0
      14: getfield      #6                  // Field logId:J
      17: aload_0
      18: getfield      #3                  // Field val$toLogId:J
      21: lcmp
      22: iflt          232
      25: aload_0
      26: getfield      #4                  // Field val$t:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      29: invokevirtual #11                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
      32: aload_0
      33: getfield      #6                  // Field logId:J
      36: invokestatic  #12                 // Method org/h2/mvstore/db/TransactionStore.getOperationId:(IJ)J
      39: invokestatic  #13                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      42: astore_1
      43: aload_0
      44: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore;
      47: getfield      #14                 // Field org/h2/mvstore/db/TransactionStore.undoLog:Lorg/h2/mvstore/MVMap;
      50: aload_1
      51: invokevirtual #15                 // Method org/h2/mvstore/MVMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      54: checkcast     #16                 // class "[Ljava/lang/Object;"
      57: astore_2
      58: aload_0
      59: dup
      60: getfield      #6                  // Field logId:J
      63: lconst_1
      64: lsub
      65: putfield      #6                  // Field logId:J
      68: aload_2
      69: ifnonnull     125
      72: aload_0
      73: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore;
      76: getfield      #14                 // Field org/h2/mvstore/db/TransactionStore.undoLog:Lorg/h2/mvstore/MVMap;
      79: aload_1
      80: invokevirtual #17                 // Method org/h2/mvstore/MVMap.floorKey:(Ljava/lang/Object;)Ljava/lang/Object;
      83: checkcast     #18                 // class java/lang/Long
      86: astore_1
      87: aload_1
      88: ifnull        232
      91: aload_1
      92: invokevirtual #19                 // Method java/lang/Long.longValue:()J
      95: invokestatic  #20                 // Method org/h2/mvstore/db/TransactionStore.getTransactionId:(J)I
      98: aload_0
      99: getfield      #4                  // Field val$t:Lorg/h2/mvstore/db/TransactionStore$Transaction;
     102: invokevirtual #11                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
     105: if_icmpeq     111
     108: goto          232
     111: aload_0
     112: aload_1
     113: invokevirtual #19                 // Method java/lang/Long.longValue:()J
     116: invokestatic  #21                 // Method org/h2/mvstore/db/TransactionStore.getLogId:(J)J
     119: putfield      #6                  // Field logId:J
     122: goto          13
     125: aload_2
     126: iconst_0
     127: aaload
     128: checkcast     #22                 // class java/lang/Integer
     131: invokevirtual #23                 // Method java/lang/Integer.intValue:()I
     134: istore_3
     135: aload_0
     136: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore;
     139: iload_3
     140: invokevirtual #24                 // Method org/h2/mvstore/db/TransactionStore.openMap:(I)Lorg/h2/mvstore/MVMap;
     143: astore        4
     145: aload         4
     147: ifnonnull     153
     150: goto          229
     153: aload_0
     154: new           #25                 // class org/h2/mvstore/db/TransactionStore$Change
     157: dup
     158: invokespecial #26                 // Method org/h2/mvstore/db/TransactionStore$Change."<init>":()V
     161: putfield      #27                 // Field current:Lorg/h2/mvstore/db/TransactionStore$Change;
     164: aload_0
     165: getfield      #27                 // Field current:Lorg/h2/mvstore/db/TransactionStore$Change;
     168: aload         4
     170: invokevirtual #28                 // Method org/h2/mvstore/MVMap.getName:()Ljava/lang/String;
     173: putfield      #29                 // Field org/h2/mvstore/db/TransactionStore$Change.mapName:Ljava/lang/String;
     176: aload_0
     177: getfield      #27                 // Field current:Lorg/h2/mvstore/db/TransactionStore$Change;
     180: aload_2
     181: iconst_1
     182: aaload
     183: putfield      #30                 // Field org/h2/mvstore/db/TransactionStore$Change.key:Ljava/lang/Object;
     186: aload_2
     187: iconst_2
     188: aaload
     189: checkcast     #31                 // class org/h2/mvstore/db/TransactionStore$VersionedValue
     192: astore        5
     194: aload_0
     195: getfield      #27                 // Field current:Lorg/h2/mvstore/db/TransactionStore$Change;
     198: aload         5
     200: ifnonnull     207
     203: aconst_null
     204: goto          212
     207: aload         5
     209: getfield      #32                 // Field org/h2/mvstore/db/TransactionStore$VersionedValue.value:Ljava/lang/Object;
     212: putfield      #33                 // Field org/h2/mvstore/db/TransactionStore$Change.value:Ljava/lang/Object;
     215: aload_0
     216: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore;
     219: getfield      #8                  // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     222: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     225: invokevirtual #34                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     228: return
     229: goto          13
     232: aload_0
     233: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore;
     236: getfield      #8                  // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     239: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     242: invokevirtual #34                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     245: goto          266
     248: astore        6
     250: aload_0
     251: getfield      #1                  // Field this$0:Lorg/h2/mvstore/db/TransactionStore;
     254: getfield      #8                  // Field org/h2/mvstore/db/TransactionStore.rwLock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     257: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
     260: invokevirtual #34                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
     263: aload         6
     265: athrow
     266: aload_0
     267: aconst_null
     268: putfield      #27                 // Field current:Lorg/h2/mvstore/db/TransactionStore$Change;
     271: return
    Exception table:
       from    to  target type
          13   215   248   any
         229   232   248   any
         248   250   248   any

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #27                 // Field current:Lorg/h2/mvstore/db/TransactionStore$Change;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public org.h2.mvstore.db.TransactionStore$Change next();
    Code:
       0: aload_0
       1: getfield      #27                 // Field current:Lorg/h2/mvstore/db/TransactionStore$Change;
       4: ifnonnull     13
       7: ldc           #35                 // String no data
       9: invokestatic  #36                 // Method org/h2/mvstore/DataUtils.newUnsupportedOperationException:(Ljava/lang/String;)Ljava/lang/UnsupportedOperationException;
      12: athrow
      13: aload_0
      14: getfield      #27                 // Field current:Lorg/h2/mvstore/db/TransactionStore$Change;
      17: astore_1
      18: aload_0
      19: invokespecial #7                  // Method fetchNext:()V
      22: aload_1
      23: areturn

  public void remove();
    Code:
       0: ldc           #37                 // String remove
       2: invokestatic  #36                 // Method org/h2/mvstore/DataUtils.newUnsupportedOperationException:(Ljava/lang/String;)Ljava/lang/UnsupportedOperationException;
       5: athrow

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method next:()Lorg/h2/mvstore/db/TransactionStore$Change;
       4: areturn
}
