Compiled from "MVTableEngine.java"
class org.h2.mvstore.db.MVTableEngine$MVInDoubtTransaction implements org.h2.store.InDoubtTransaction {
  private final org.h2.mvstore.MVStore store;

  private final org.h2.mvstore.db.TransactionStore$Transaction transaction;

  private int state;

  org.h2.mvstore.db.MVTableEngine$MVInDoubtTransaction(org.h2.mvstore.MVStore, org.h2.mvstore.db.TransactionStore$Transaction);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field state:I
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field store:Lorg/h2/mvstore/MVStore;
      14: aload_0
      15: aload_2
      16: putfield      #4                  // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      19: return

  public void setState(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpne     15
       5: aload_0
       6: getfield      #4                  // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
       9: invokevirtual #5                  // Method org/h2/mvstore/db/TransactionStore$Transaction.commit:()V
      12: goto          22
      15: aload_0
      16: getfield      #4                  // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      19: invokevirtual #6                  // Method org/h2/mvstore/db/TransactionStore$Transaction.rollback:()V
      22: aload_0
      23: getfield      #3                  // Field store:Lorg/h2/mvstore/MVStore;
      26: invokevirtual #7                  // Method org/h2/mvstore/MVStore.commit:()J
      29: pop2
      30: aload_0
      31: iload_1
      32: putfield      #2                  // Field state:I
      35: return

  public java.lang.String getState();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: tableswitch   { // 0 to 2
                     0: 32
                     1: 35
                     2: 38
               default: 41
          }
      32: ldc           #8                  // String IN_DOUBT
      34: areturn
      35: ldc           #9                  // String COMMIT
      37: areturn
      38: ldc           #10                 // String ROLLBACK
      40: areturn
      41: new           #11                 // class java/lang/StringBuilder
      44: dup
      45: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      48: ldc           #13                 // String state=
      50: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: aload_0
      54: getfield      #2                  // Field state:I
      57: invokevirtual #15                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      60: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: invokestatic  #17                 // Method org/h2/message/DbException.throwInternalError:(Ljava/lang/String;)Ljava/lang/RuntimeException;
      66: athrow

  public java.lang.String getTransactionName();
    Code:
       0: aload_0
       1: getfield      #4                  // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
       4: invokevirtual #18                 // Method org/h2/mvstore/db/TransactionStore$Transaction.getName:()Ljava/lang/String;
       7: areturn
}
