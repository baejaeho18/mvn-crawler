Compiled from "MVRTreeMap.java"
class org.h2.mvstore.rtree.MVRTreeMap$2 extends org.h2.mvstore.rtree.MVRTreeMap$RTreeCursor {
  final org.h2.mvstore.rtree.MVRTreeMap this$0;

  org.h2.mvstore.rtree.MVRTreeMap$2(org.h2.mvstore.rtree.MVRTreeMap, org.h2.mvstore.Page, org.h2.mvstore.rtree.SpatialKey);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/h2/mvstore/rtree/MVRTreeMap;
       5: aload_0
       6: aload_2
       7: aload_3
       8: invokespecial #2                  // Method org/h2/mvstore/rtree/MVRTreeMap$RTreeCursor."<init>":(Lorg/h2/mvstore/Page;Lorg/h2/mvstore/rtree/SpatialKey;)V
      11: return

  protected boolean check(boolean, org.h2.mvstore.rtree.SpatialKey, org.h2.mvstore.rtree.SpatialKey);
    Code:
       0: iload_1
       1: ifeq          17
       4: aload_0
       5: getfield      #1                  // Field this$0:Lorg/h2/mvstore/rtree/MVRTreeMap;
       8: getfield      #3                  // Field org/h2/mvstore/rtree/MVRTreeMap.keyType:Lorg/h2/mvstore/rtree/SpatialDataType;
      11: aload_2
      12: aload_3
      13: invokevirtual #4                  // Method org/h2/mvstore/rtree/SpatialDataType.isInside:(Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ireturn
      17: aload_0
      18: getfield      #1                  // Field this$0:Lorg/h2/mvstore/rtree/MVRTreeMap;
      21: getfield      #3                  // Field org/h2/mvstore/rtree/MVRTreeMap.keyType:Lorg/h2/mvstore/rtree/SpatialDataType;
      24: aload_2
      25: aload_3
      26: invokevirtual #5                  // Method org/h2/mvstore/rtree/SpatialDataType.isOverlap:(Ljava/lang/Object;Ljava/lang/Object;)Z
      29: ireturn
}
