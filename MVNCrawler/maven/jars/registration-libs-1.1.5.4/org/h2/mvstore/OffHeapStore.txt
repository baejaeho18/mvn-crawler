Compiled from "OffHeapStore.java"
public class org.h2.mvstore.OffHeapStore extends org.h2.mvstore.FileStore {
  private final java.util.TreeMap<java.lang.Long, java.nio.ByteBuffer> memory;

  public org.h2.mvstore.OffHeapStore();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/h2/mvstore/FileStore."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/TreeMap
       8: dup
       9: invokespecial #3                  // Method java/util/TreeMap."<init>":()V
      12: putfield      #4                  // Field memory:Ljava/util/TreeMap;
      15: return

  public void open(java.lang.String, boolean, char[]);
    Code:
       0: aload_0
       1: getfield      #4                  // Field memory:Ljava/util/TreeMap;
       4: invokevirtual #5                  // Method java/util/TreeMap.clear:()V
       7: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #4                  // Field memory:Ljava/util/TreeMap;
       4: invokevirtual #6                  // Method java/util/TreeMap.toString:()Ljava/lang/String;
       7: areturn

  public java.nio.ByteBuffer readFully(long, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field memory:Ljava/util/TreeMap;
       4: lload_1
       5: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       8: invokevirtual #8                  // Method java/util/TreeMap.floorEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;
      11: astore        4
      13: aload         4
      15: ifnonnull     36
      18: iconst_1
      19: ldc           #9                  // String Could not read from position {0}
      21: iconst_1
      22: anewarray     #10                 // class java/lang/Object
      25: dup
      26: iconst_0
      27: lload_1
      28: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      31: aastore
      32: invokestatic  #11                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
      35: athrow
      36: aload_0
      37: getfield      #12                 // Field readCount:Ljava/util/concurrent/atomic/AtomicLong;
      40: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      43: pop2
      44: aload_0
      45: getfield      #14                 // Field readBytes:Ljava/util/concurrent/atomic/AtomicLong;
      48: iload_3
      49: i2l
      50: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      53: pop2
      54: aload         4
      56: invokeinterface #16,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      61: checkcast     #17                 // class java/nio/ByteBuffer
      64: astore        5
      66: aload         5
      68: invokevirtual #18                 // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
      71: astore        6
      73: lload_1
      74: aload         4
      76: invokeinterface #19,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      81: checkcast     #20                 // class java/lang/Long
      84: invokevirtual #21                 // Method java/lang/Long.longValue:()J
      87: lsub
      88: l2i
      89: istore        7
      91: aload         6
      93: iload         7
      95: invokevirtual #22                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      98: pop
      99: aload         6
     101: iload_3
     102: iload         7
     104: iadd
     105: invokevirtual #23                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     108: pop
     109: aload         6
     111: invokevirtual #24                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
     114: areturn

  public void free(long, int);
    Code:
       0: aload_0
       1: getfield      #25                 // Field freeSpace:Lorg/h2/mvstore/FreeSpaceBitSet;
       4: lload_1
       5: iload_3
       6: invokevirtual #26                 // Method org/h2/mvstore/FreeSpaceBitSet.free:(JI)V
       9: aload_0
      10: getfield      #4                  // Field memory:Ljava/util/TreeMap;
      13: lload_1
      14: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      17: invokevirtual #27                 // Method java/util/TreeMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #17                 // class java/nio/ByteBuffer
      23: astore        4
      25: aload         4
      27: ifnonnull     33
      30: goto          60
      33: aload         4
      35: invokevirtual #28                 // Method java/nio/ByteBuffer.remaining:()I
      38: iload_3
      39: if_icmpeq     60
      42: iconst_1
      43: ldc           #29                 // String Partial remove is not supported at position {0}
      45: iconst_1
      46: anewarray     #10                 // class java/lang/Object
      49: dup
      50: iconst_0
      51: lload_1
      52: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      55: aastore
      56: invokestatic  #11                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
      59: athrow
      60: return

  public void writeFully(long, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #30                 // Field fileSize:J
       5: lload_1
       6: aload_3
       7: invokevirtual #28                 // Method java/nio/ByteBuffer.remaining:()I
      10: i2l
      11: ladd
      12: invokestatic  #31                 // Method java/lang/Math.max:(JJ)J
      15: putfield      #30                 // Field fileSize:J
      18: aload_0
      19: getfield      #4                  // Field memory:Ljava/util/TreeMap;
      22: lload_1
      23: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      26: invokevirtual #8                  // Method java/util/TreeMap.floorEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;
      29: astore        4
      31: aload         4
      33: ifnonnull     43
      36: aload_0
      37: lload_1
      38: aload_3
      39: invokespecial #32                 // Method writeNewEntry:(JLjava/nio/ByteBuffer;)V
      42: return
      43: aload         4
      45: invokeinterface #19,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      50: checkcast     #20                 // class java/lang/Long
      53: invokevirtual #21                 // Method java/lang/Long.longValue:()J
      56: lstore        5
      58: aload         4
      60: invokeinterface #16,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      65: checkcast     #17                 // class java/nio/ByteBuffer
      68: astore        7
      70: aload         7
      72: invokevirtual #33                 // Method java/nio/ByteBuffer.capacity:()I
      75: istore        8
      77: aload_3
      78: invokevirtual #28                 // Method java/nio/ByteBuffer.remaining:()I
      81: istore        9
      83: lload         5
      85: lload_1
      86: lcmp
      87: ifne          148
      90: iload         8
      92: iload         9
      94: if_icmpeq     115
      97: iconst_1
      98: ldc           #34                 // String Could not write to position {0}; partial overwrite is not supported
     100: iconst_1
     101: anewarray     #10                 // class java/lang/Object
     104: dup
     105: iconst_0
     106: lload_1
     107: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     110: aastore
     111: invokestatic  #11                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
     114: athrow
     115: aload_0
     116: getfield      #35                 // Field writeCount:Ljava/util/concurrent/atomic/AtomicLong;
     119: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
     122: pop2
     123: aload_0
     124: getfield      #36                 // Field writeBytes:Ljava/util/concurrent/atomic/AtomicLong;
     127: iload         9
     129: i2l
     130: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
     133: pop2
     134: aload         7
     136: invokevirtual #37                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
     139: pop
     140: aload         7
     142: aload_3
     143: invokevirtual #38                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
     146: pop
     147: return
     148: lload         5
     150: iload         8
     152: i2l
     153: ladd
     154: lload_1
     155: lcmp
     156: ifle          177
     159: iconst_1
     160: ldc           #34                 // String Could not write to position {0}; partial overwrite is not supported
     162: iconst_1
     163: anewarray     #10                 // class java/lang/Object
     166: dup
     167: iconst_0
     168: lload_1
     169: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     172: aastore
     173: invokestatic  #11                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
     176: athrow
     177: aload_0
     178: lload_1
     179: aload_3
     180: invokespecial #32                 // Method writeNewEntry:(JLjava/nio/ByteBuffer;)V
     183: return

  private void writeNewEntry(long, java.nio.ByteBuffer);
    Code:
       0: aload_3
       1: invokevirtual #28                 // Method java/nio/ByteBuffer.remaining:()I
       4: istore        4
       6: aload_0
       7: getfield      #35                 // Field writeCount:Ljava/util/concurrent/atomic/AtomicLong;
      10: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      13: pop2
      14: aload_0
      15: getfield      #36                 // Field writeBytes:Ljava/util/concurrent/atomic/AtomicLong;
      18: iload         4
      20: i2l
      21: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      24: pop2
      25: iload         4
      27: invokestatic  #39                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      30: astore        5
      32: aload         5
      34: aload_3
      35: invokevirtual #38                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      38: pop
      39: aload         5
      41: invokevirtual #37                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      44: pop
      45: aload_0
      46: getfield      #4                  // Field memory:Ljava/util/TreeMap;
      49: lload_1
      50: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      53: aload         5
      55: invokevirtual #40                 // Method java/util/TreeMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      58: pop
      59: return

  public void truncate(long);
    Code:
       0: aload_0
       1: getfield      #35                 // Field writeCount:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: pop2
       8: lload_1
       9: lconst_0
      10: lcmp
      11: ifne          27
      14: aload_0
      15: lconst_0
      16: putfield      #30                 // Field fileSize:J
      19: aload_0
      20: getfield      #4                  // Field memory:Ljava/util/TreeMap;
      23: invokevirtual #5                  // Method java/util/TreeMap.clear:()V
      26: return
      27: aload_0
      28: lload_1
      29: putfield      #30                 // Field fileSize:J
      32: aload_0
      33: getfield      #4                  // Field memory:Ljava/util/TreeMap;
      36: invokevirtual #41                 // Method java/util/TreeMap.keySet:()Ljava/util/Set;
      39: invokeinterface #42,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      44: astore_3
      45: aload_3
      46: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      51: ifeq          134
      54: aload_3
      55: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      60: checkcast     #20                 // class java/lang/Long
      63: invokevirtual #21                 // Method java/lang/Long.longValue:()J
      66: lstore        4
      68: lload         4
      70: lload_1
      71: lcmp
      72: ifge          78
      75: goto          134
      78: aload_0
      79: getfield      #4                  // Field memory:Ljava/util/TreeMap;
      82: lload         4
      84: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      87: invokevirtual #45                 // Method java/util/TreeMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      90: checkcast     #17                 // class java/nio/ByteBuffer
      93: astore        6
      95: aload         6
      97: invokevirtual #33                 // Method java/nio/ByteBuffer.capacity:()I
     100: i2l
     101: lload_1
     102: lcmp
     103: ifle          125
     106: iconst_1
     107: ldc           #46                 // String Could not truncate to {0}; partial truncate is not supported
     109: iconst_1
     110: anewarray     #10                 // class java/lang/Object
     113: dup
     114: iconst_0
     115: lload         4
     117: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     120: aastore
     121: invokestatic  #11                 // Method org/h2/mvstore/DataUtils.newIllegalStateException:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;
     124: athrow
     125: aload_3
     126: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.remove:()V
     131: goto          45
     134: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #4                  // Field memory:Ljava/util/TreeMap;
       4: invokevirtual #5                  // Method java/util/TreeMap.clear:()V
       7: return

  public void sync();
    Code:
       0: return

  public int getDefaultRetentionTime();
    Code:
       0: iconst_0
       1: ireturn
}
