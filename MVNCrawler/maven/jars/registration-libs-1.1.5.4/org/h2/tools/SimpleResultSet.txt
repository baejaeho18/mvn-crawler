Compiled from "SimpleResultSet.java"
public class org.h2.tools.SimpleResultSet implements java.sql.ResultSet,java.sql.ResultSetMetaData,org.h2.jdbc.JdbcResultSetBackwardsCompat {
  private java.util.ArrayList<java.lang.Object[]> rows;

  private java.lang.Object[] currentRow;

  private int rowId;

  private boolean wasNull;

  private org.h2.tools.SimpleRowSource source;

  private java.util.ArrayList<org.h2.tools.SimpleResultSet$Column> columns;

  private boolean autoClose;

  public org.h2.tools.SimpleResultSet();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #2                  // Field rowId:I
       9: aload_0
      10: invokestatic  #3                  // Method org/h2/util/New.arrayList:()Ljava/util/ArrayList;
      13: putfield      #4                  // Field columns:Ljava/util/ArrayList;
      16: aload_0
      17: iconst_1
      18: putfield      #5                  // Field autoClose:Z
      21: aload_0
      22: invokestatic  #3                  // Method org/h2/util/New.arrayList:()Ljava/util/ArrayList;
      25: putfield      #6                  // Field rows:Ljava/util/ArrayList;
      28: return

  public org.h2.tools.SimpleResultSet(org.h2.tools.SimpleRowSource);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #2                  // Field rowId:I
       9: aload_0
      10: invokestatic  #3                  // Method org/h2/util/New.arrayList:()Ljava/util/ArrayList;
      13: putfield      #4                  // Field columns:Ljava/util/ArrayList;
      16: aload_0
      17: iconst_1
      18: putfield      #5                  // Field autoClose:Z
      21: aload_0
      22: aload_1
      23: putfield      #7                  // Field source:Lorg/h2/tools/SimpleRowSource;
      26: return

  public void addColumn(java.lang.String, int, int, int);
    Code:
       0: iload_2
       1: invokestatic  #8                  // Method org/h2/value/DataType.convertSQLTypeToValueType:(I)I
       4: istore        5
       6: aload_0
       7: aload_1
       8: iload_2
       9: iload         5
      11: invokestatic  #9                  // Method org/h2/value/DataType.getDataType:(I)Lorg/h2/value/DataType;
      14: getfield      #10                 // Field org/h2/value/DataType.name:Ljava/lang/String;
      17: iload_3
      18: iload         4
      20: invokevirtual #11                 // Method addColumn:(Ljava/lang/String;ILjava/lang/String;II)V
      23: return

  public void addColumn(java.lang.String, int, java.lang.String, int, int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field rows:Ljava/util/ArrayList;
       4: ifnull        27
       7: aload_0
       8: getfield      #6                  // Field rows:Ljava/util/ArrayList;
      11: invokevirtual #12                 // Method java/util/ArrayList.isEmpty:()Z
      14: ifne          27
      17: new           #13                 // class java/lang/IllegalStateException
      20: dup
      21: ldc           #14                 // String Cannot add a column after adding rows
      23: invokespecial #15                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: aload_1
      28: ifnonnull     59
      31: new           #16                 // class java/lang/StringBuilder
      34: dup
      35: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
      38: ldc           #18                 // String C
      40: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload_0
      44: getfield      #4                  // Field columns:Ljava/util/ArrayList;
      47: invokevirtual #20                 // Method java/util/ArrayList.size:()I
      50: iconst_1
      51: iadd
      52: invokevirtual #21                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      55: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      58: astore_1
      59: new           #23                 // class org/h2/tools/SimpleResultSet$Column
      62: dup
      63: invokespecial #24                 // Method org/h2/tools/SimpleResultSet$Column."<init>":()V
      66: astore        6
      68: aload         6
      70: aload_1
      71: putfield      #25                 // Field org/h2/tools/SimpleResultSet$Column.name:Ljava/lang/String;
      74: aload         6
      76: iload_2
      77: putfield      #26                 // Field org/h2/tools/SimpleResultSet$Column.sqlType:I
      80: aload         6
      82: iload         4
      84: putfield      #27                 // Field org/h2/tools/SimpleResultSet$Column.precision:I
      87: aload         6
      89: iload         5
      91: putfield      #28                 // Field org/h2/tools/SimpleResultSet$Column.scale:I
      94: aload         6
      96: aload_3
      97: putfield      #29                 // Field org/h2/tools/SimpleResultSet$Column.sqlTypeName:Ljava/lang/String;
     100: aload_0
     101: getfield      #4                  // Field columns:Ljava/util/ArrayList;
     104: aload         6
     106: invokevirtual #30                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     109: pop
     110: return

  public void addRow(java.lang.Object...);
    Code:
       0: aload_0
       1: getfield      #6                  // Field rows:Ljava/util/ArrayList;
       4: ifnonnull     17
       7: new           #13                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #31                 // String Cannot add a row when using RowSource
      13: invokespecial #15                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #6                  // Field rows:Ljava/util/ArrayList;
      21: aload_1
      22: invokevirtual #30                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      25: pop
      26: return

  public int getConcurrency();
    Code:
       0: sipush        1007
       3: ireturn

  public int getFetchDirection();
    Code:
       0: sipush        1000
       3: ireturn

  public int getFetchSize();
    Code:
       0: iconst_0
       1: ireturn

  public int getRow();
    Code:
       0: aload_0
       1: getfield      #32                 // Field currentRow:[Ljava/lang/Object;
       4: ifnonnull     11
       7: iconst_0
       8: goto          17
      11: aload_0
      12: getfield      #2                  // Field rowId:I
      15: iconst_1
      16: iadd
      17: ireturn

  public int getType();
    Code:
       0: aload_0
       1: getfield      #5                  // Field autoClose:Z
       4: ifeq          11
       7: sipush        1003
      10: ireturn
      11: sipush        1004
      14: ireturn

  public void close();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #32                 // Field currentRow:[Ljava/lang/Object;
       5: aload_0
       6: aconst_null
       7: putfield      #6                  // Field rows:Ljava/util/ArrayList;
      10: aload_0
      11: aconst_null
      12: putfield      #4                  // Field columns:Ljava/util/ArrayList;
      15: aload_0
      16: iconst_m1
      17: putfield      #2                  // Field rowId:I
      20: aload_0
      21: getfield      #7                  // Field source:Lorg/h2/tools/SimpleRowSource;
      24: ifnull        41
      27: aload_0
      28: getfield      #7                  // Field source:Lorg/h2/tools/SimpleRowSource;
      31: invokeinterface #33,  1           // InterfaceMethod org/h2/tools/SimpleRowSource.close:()V
      36: aload_0
      37: aconst_null
      38: putfield      #7                  // Field source:Lorg/h2/tools/SimpleRowSource;
      41: return

  public boolean next() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field source:Lorg/h2/tools/SimpleRowSource;
       4: ifnull        39
       7: aload_0
       8: dup
       9: getfield      #2                  // Field rowId:I
      12: iconst_1
      13: iadd
      14: putfield      #2                  // Field rowId:I
      17: aload_0
      18: aload_0
      19: getfield      #7                  // Field source:Lorg/h2/tools/SimpleRowSource;
      22: invokeinterface #34,  1           // InterfaceMethod org/h2/tools/SimpleRowSource.readRow:()[Ljava/lang/Object;
      27: putfield      #32                 // Field currentRow:[Ljava/lang/Object;
      30: aload_0
      31: getfield      #32                 // Field currentRow:[Ljava/lang/Object;
      34: ifnull        109
      37: iconst_1
      38: ireturn
      39: aload_0
      40: getfield      #6                  // Field rows:Ljava/util/ArrayList;
      43: ifnull        109
      46: aload_0
      47: getfield      #2                  // Field rowId:I
      50: aload_0
      51: getfield      #6                  // Field rows:Ljava/util/ArrayList;
      54: invokevirtual #20                 // Method java/util/ArrayList.size:()I
      57: if_icmpge     109
      60: aload_0
      61: dup
      62: getfield      #2                  // Field rowId:I
      65: iconst_1
      66: iadd
      67: putfield      #2                  // Field rowId:I
      70: aload_0
      71: getfield      #2                  // Field rowId:I
      74: aload_0
      75: getfield      #6                  // Field rows:Ljava/util/ArrayList;
      78: invokevirtual #20                 // Method java/util/ArrayList.size:()I
      81: if_icmpge     104
      84: aload_0
      85: aload_0
      86: getfield      #6                  // Field rows:Ljava/util/ArrayList;
      89: aload_0
      90: getfield      #2                  // Field rowId:I
      93: invokevirtual #35                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      96: checkcast     #36                 // class "[Ljava/lang/Object;"
      99: putfield      #32                 // Field currentRow:[Ljava/lang/Object;
     102: iconst_1
     103: ireturn
     104: aload_0
     105: aconst_null
     106: putfield      #32                 // Field currentRow:[Ljava/lang/Object;
     109: aload_0
     110: getfield      #5                  // Field autoClose:Z
     113: ifeq          120
     116: aload_0
     117: invokevirtual #37                 // Method close:()V
     120: iconst_0
     121: ireturn

  public void beforeFirst() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field autoClose:Z
       4: ifeq          13
       7: ldc           #38                 // int 90128
       9: invokestatic  #39                 // Method org/h2/message/DbException.get:(I)Lorg/h2/message/DbException;
      12: athrow
      13: aload_0
      14: iconst_m1
      15: putfield      #2                  // Field rowId:I
      18: aload_0
      19: getfield      #7                  // Field source:Lorg/h2/tools/SimpleRowSource;
      22: ifnull        34
      25: aload_0
      26: getfield      #7                  // Field source:Lorg/h2/tools/SimpleRowSource;
      29: invokeinterface #40,  1           // InterfaceMethod org/h2/tools/SimpleRowSource.reset:()V
      34: return

  public boolean wasNull();
    Code:
       0: aload_0
       1: getfield      #41                 // Field wasNull:Z
       4: ireturn

  public int findColumn(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: ifnull        51
       4: aload_0
       5: getfield      #4                  // Field columns:Ljava/util/ArrayList;
       8: ifnull        51
      11: iconst_0
      12: istore_2
      13: aload_0
      14: getfield      #4                  // Field columns:Ljava/util/ArrayList;
      17: invokevirtual #20                 // Method java/util/ArrayList.size:()I
      20: istore_3
      21: iload_2
      22: iload_3
      23: if_icmpge     51
      26: aload_1
      27: aload_0
      28: iload_2
      29: invokespecial #42                 // Method getColumn:(I)Lorg/h2/tools/SimpleResultSet$Column;
      32: getfield      #25                 // Field org/h2/tools/SimpleResultSet$Column.name:Ljava/lang/String;
      35: invokevirtual #43                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      38: ifeq          45
      41: iload_2
      42: iconst_1
      43: iadd
      44: ireturn
      45: iinc          2, 1
      48: goto          21
      51: ldc           #44                 // int 42122
      53: aload_1
      54: invokestatic  #45                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      57: invokevirtual #46                 // Method org/h2/message/DbException.getSQLException:()Ljava/sql/SQLException;
      60: athrow

  public java.sql.ResultSetMetaData getMetaData();
    Code:
       0: aload_0
       1: areturn

  public java.sql.SQLWarning getWarnings();
    Code:
       0: aconst_null
       1: areturn

  public java.sql.Statement getStatement();
    Code:
       0: aconst_null
       1: areturn

  public void clearWarnings();
    Code:
       0: return

  public java.sql.Array getArray(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: checkcast     #36                 // class "[Ljava/lang/Object;"
       8: checkcast     #36                 // class "[Ljava/lang/Object;"
      11: astore_2
      12: aload_2
      13: ifnonnull     20
      16: aconst_null
      17: goto          28
      20: new           #48                 // class org/h2/tools/SimpleResultSet$SimpleArray
      23: dup
      24: aload_2
      25: invokespecial #49                 // Method org/h2/tools/SimpleResultSet$SimpleArray."<init>":([Ljava/lang/Object;)V
      28: areturn

  public java.sql.Array getArray(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #51                 // Method getArray:(I)Ljava/sql/Array;
       9: areturn

  public java.io.InputStream getAsciiStream(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.io.InputStream getAsciiStream(java.lang.String) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.math.BigDecimal getBigDecimal(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnull        29
      10: aload_2
      11: instanceof    #53                 // class java/math/BigDecimal
      14: ifne          29
      17: new           #53                 // class java/math/BigDecimal
      20: dup
      21: aload_2
      22: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
      25: invokespecial #55                 // Method java/math/BigDecimal."<init>":(Ljava/lang/String;)V
      28: astore_2
      29: aload_2
      30: checkcast     #53                 // class java/math/BigDecimal
      33: areturn

  public java.math.BigDecimal getBigDecimal(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #56                 // Method getBigDecimal:(I)Ljava/math/BigDecimal;
       9: areturn

  public java.math.BigDecimal getBigDecimal(int, int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.math.BigDecimal getBigDecimal(java.lang.String, int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.io.InputStream getBinaryStream(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: invokestatic  #57                 // Method asInputStream:(Ljava/lang/Object;)Ljava/io/InputStream;
       8: areturn

  private static java.io.InputStream asInputStream(java.lang.Object) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: instanceof    #58                 // class java/sql/Blob
      10: ifeq          23
      13: aload_0
      14: checkcast     #58                 // class java/sql/Blob
      17: invokeinterface #59,  1           // InterfaceMethod java/sql/Blob.getBinaryStream:()Ljava/io/InputStream;
      22: areturn
      23: aload_0
      24: checkcast     #60                 // class java/io/InputStream
      27: areturn

  public java.io.InputStream getBinaryStream(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #61                 // Method getBinaryStream:(I)Ljava/io/InputStream;
       9: areturn

  public java.sql.Blob getBlob(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: checkcast     #58                 // class java/sql/Blob
       8: areturn

  public java.sql.Blob getBlob(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #62                 // Method getBlob:(I)Ljava/sql/Blob;
       9: areturn

  public boolean getBoolean(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnonnull     12
      10: iconst_0
      11: ireturn
      12: aload_2
      13: instanceof    #63                 // class java/lang/Boolean
      16: ifeq          27
      19: aload_2
      20: checkcast     #63                 // class java/lang/Boolean
      23: invokevirtual #64                 // Method java/lang/Boolean.booleanValue:()Z
      26: ireturn
      27: aload_2
      28: instanceof    #65                 // class java/lang/Number
      31: ifeq          129
      34: aload_2
      35: checkcast     #65                 // class java/lang/Number
      38: astore_3
      39: aload_3
      40: instanceof    #66                 // class java/lang/Double
      43: ifne          53
      46: aload_3
      47: instanceof    #67                 // class java/lang/Float
      50: ifeq          68
      53: aload_3
      54: invokevirtual #68                 // Method java/lang/Number.doubleValue:()D
      57: dconst_0
      58: dcmpl
      59: ifeq          66
      62: iconst_1
      63: goto          67
      66: iconst_0
      67: ireturn
      68: aload_3
      69: instanceof    #53                 // class java/math/BigDecimal
      72: ifeq          91
      75: aload_3
      76: checkcast     #53                 // class java/math/BigDecimal
      79: invokevirtual #69                 // Method java/math/BigDecimal.signum:()I
      82: ifeq          89
      85: iconst_1
      86: goto          90
      89: iconst_0
      90: ireturn
      91: aload_3
      92: instanceof    #70                 // class java/math/BigInteger
      95: ifeq          114
      98: aload_3
      99: checkcast     #70                 // class java/math/BigInteger
     102: invokevirtual #71                 // Method java/math/BigInteger.signum:()I
     105: ifeq          112
     108: iconst_1
     109: goto          113
     112: iconst_0
     113: ireturn
     114: aload_3
     115: invokevirtual #72                 // Method java/lang/Number.longValue:()J
     118: lconst_0
     119: lcmp
     120: ifeq          127
     123: iconst_1
     124: goto          128
     127: iconst_0
     128: ireturn
     129: aload_2
     130: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
     133: iconst_0
     134: iconst_1
     135: invokestatic  #73                 // Method org/h2/util/Utils.parseBoolean:(Ljava/lang/String;ZZ)Z
     138: ireturn

  public boolean getBoolean(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #74                 // Method getBoolean:(I)Z
       9: ireturn

  public byte getByte(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnull        25
      10: aload_2
      11: instanceof    #65                 // class java/lang/Number
      14: ifne          25
      17: aload_2
      18: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
      21: invokestatic  #75                 // Method java/lang/Byte.decode:(Ljava/lang/String;)Ljava/lang/Byte;
      24: astore_2
      25: aload_2
      26: ifnonnull     33
      29: iconst_0
      30: goto          40
      33: aload_2
      34: checkcast     #65                 // class java/lang/Number
      37: invokevirtual #76                 // Method java/lang/Number.byteValue:()B
      40: ireturn

  public byte getByte(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #77                 // Method getByte:(I)B
       9: ireturn

  public byte[] getBytes(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnull        17
      10: aload_2
      11: instanceof    #78                 // class "[B"
      14: ifeq          25
      17: aload_2
      18: checkcast     #78                 // class "[B"
      21: checkcast     #78                 // class "[B"
      24: areturn
      25: aload_2
      26: instanceof    #79                 // class java/util/UUID
      29: ifeq          40
      32: aload_2
      33: checkcast     #79                 // class java/util/UUID
      36: invokestatic  #80                 // Method org/h2/util/Bits.uuidToBytes:(Ljava/util/UUID;)[B
      39: areturn
      40: aload_2
      41: aconst_null
      42: invokestatic  #81                 // Method org/h2/util/JdbcUtils.serialize:(Ljava/lang/Object;Lorg/h2/store/DataHandler;)[B
      45: areturn

  public byte[] getBytes(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #82                 // Method getBytes:(I)[B
       9: areturn

  public java.io.Reader getCharacterStream(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: invokestatic  #83                 // Method asReader:(Ljava/lang/Object;)Ljava/io/Reader;
       8: areturn

  private static java.io.Reader asReader(java.lang.Object) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: instanceof    #84                 // class java/sql/Clob
      10: ifeq          23
      13: aload_0
      14: checkcast     #84                 // class java/sql/Clob
      17: invokeinterface #85,  1           // InterfaceMethod java/sql/Clob.getCharacterStream:()Ljava/io/Reader;
      22: areturn
      23: aload_0
      24: checkcast     #86                 // class java/io/Reader
      27: areturn

  public java.io.Reader getCharacterStream(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #87                 // Method getCharacterStream:(I)Ljava/io/Reader;
       9: areturn

  public java.sql.Clob getClob(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: checkcast     #84                 // class java/sql/Clob
       8: astore_2
       9: aload_2
      10: ifnonnull     17
      13: aconst_null
      14: goto          18
      17: aload_2
      18: areturn

  public java.sql.Clob getClob(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #88                 // Method getClob:(I)Ljava/sql/Clob;
       9: areturn

  public java.sql.Date getDate(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: checkcast     #89                 // class java/sql/Date
       8: areturn

  public java.sql.Date getDate(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #90                 // Method getDate:(I)Ljava/sql/Date;
       9: areturn

  public java.sql.Date getDate(int, java.util.Calendar) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.Date getDate(java.lang.String, java.util.Calendar) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public double getDouble(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnull        25
      10: aload_2
      11: instanceof    #65                 // class java/lang/Number
      14: ifne          25
      17: aload_2
      18: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
      21: invokestatic  #91                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D
      24: dreturn
      25: aload_2
      26: ifnonnull     33
      29: dconst_0
      30: goto          40
      33: aload_2
      34: checkcast     #65                 // class java/lang/Number
      37: invokevirtual #68                 // Method java/lang/Number.doubleValue:()D
      40: dreturn

  public double getDouble(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #92                 // Method getDouble:(I)D
       9: dreturn

  public float getFloat(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnull        25
      10: aload_2
      11: instanceof    #65                 // class java/lang/Number
      14: ifne          25
      17: aload_2
      18: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
      21: invokestatic  #93                 // Method java/lang/Float.parseFloat:(Ljava/lang/String;)F
      24: freturn
      25: aload_2
      26: ifnonnull     33
      29: fconst_0
      30: goto          40
      33: aload_2
      34: checkcast     #65                 // class java/lang/Number
      37: invokevirtual #94                 // Method java/lang/Number.floatValue:()F
      40: freturn

  public float getFloat(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #95                 // Method getFloat:(I)F
       9: freturn

  public int getInt(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnull        25
      10: aload_2
      11: instanceof    #65                 // class java/lang/Number
      14: ifne          25
      17: aload_2
      18: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
      21: invokestatic  #96                 // Method java/lang/Integer.decode:(Ljava/lang/String;)Ljava/lang/Integer;
      24: astore_2
      25: aload_2
      26: ifnonnull     33
      29: iconst_0
      30: goto          40
      33: aload_2
      34: checkcast     #65                 // class java/lang/Number
      37: invokevirtual #97                 // Method java/lang/Number.intValue:()I
      40: ireturn

  public int getInt(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #98                 // Method getInt:(I)I
       9: ireturn

  public long getLong(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnull        25
      10: aload_2
      11: instanceof    #65                 // class java/lang/Number
      14: ifne          25
      17: aload_2
      18: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
      21: invokestatic  #99                 // Method java/lang/Long.decode:(Ljava/lang/String;)Ljava/lang/Long;
      24: astore_2
      25: aload_2
      26: ifnonnull     33
      29: lconst_0
      30: goto          40
      33: aload_2
      34: checkcast     #65                 // class java/lang/Number
      37: invokevirtual #72                 // Method java/lang/Number.longValue:()J
      40: lreturn

  public long getLong(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #100                // Method getLong:(I)J
       9: lreturn

  public java.io.Reader getNCharacterStream(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.io.Reader getNCharacterStream(java.lang.String) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.NClob getNClob(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.NClob getNClob(java.lang.String) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.lang.String getNString(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #101                // Method getString:(I)Ljava/lang/String;
       5: areturn

  public java.lang.String getNString(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #102                // Method getString:(Ljava/lang/String;)Ljava/lang/String;
       5: areturn

  public java.lang.Object getObject(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: areturn

  public java.lang.Object getObject(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #103                // Method getObject:(I)Ljava/lang/Object;
       9: areturn

  public <T> T getObject(int, java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #104                // Method wasNull:()Z
       4: ifeq          9
       7: aconst_null
       8: areturn
       9: aload_2
      10: ldc_w         #53                 // class java/math/BigDecimal
      13: if_acmpne     26
      16: aload_2
      17: aload_0
      18: iload_1
      19: invokevirtual #56                 // Method getBigDecimal:(I)Ljava/math/BigDecimal;
      22: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      25: areturn
      26: aload_2
      27: ldc_w         #70                 // class java/math/BigInteger
      30: if_acmpne     46
      33: aload_2
      34: aload_0
      35: iload_1
      36: invokevirtual #56                 // Method getBigDecimal:(I)Ljava/math/BigDecimal;
      39: invokevirtual #106                // Method java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;
      42: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      45: areturn
      46: aload_2
      47: ldc_w         #107                // class java/lang/String
      50: if_acmpne     63
      53: aload_2
      54: aload_0
      55: iload_1
      56: invokevirtual #101                // Method getString:(I)Ljava/lang/String;
      59: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      62: areturn
      63: aload_2
      64: ldc_w         #63                 // class java/lang/Boolean
      67: if_acmpne     83
      70: aload_2
      71: aload_0
      72: iload_1
      73: invokevirtual #74                 // Method getBoolean:(I)Z
      76: invokestatic  #108                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      79: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      82: areturn
      83: aload_2
      84: ldc_w         #109                // class java/lang/Byte
      87: if_acmpne     103
      90: aload_2
      91: aload_0
      92: iload_1
      93: invokevirtual #77                 // Method getByte:(I)B
      96: invokestatic  #110                // Method java/lang/Byte.valueOf:(B)Ljava/lang/Byte;
      99: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     102: areturn
     103: aload_2
     104: ldc_w         #111                // class java/lang/Short
     107: if_acmpne     123
     110: aload_2
     111: aload_0
     112: iload_1
     113: invokevirtual #112                // Method getShort:(I)S
     116: invokestatic  #113                // Method java/lang/Short.valueOf:(S)Ljava/lang/Short;
     119: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     122: areturn
     123: aload_2
     124: ldc_w         #114                // class java/lang/Integer
     127: if_acmpne     143
     130: aload_2
     131: aload_0
     132: iload_1
     133: invokevirtual #98                 // Method getInt:(I)I
     136: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     139: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     142: areturn
     143: aload_2
     144: ldc_w         #116                // class java/lang/Long
     147: if_acmpne     163
     150: aload_2
     151: aload_0
     152: iload_1
     153: invokevirtual #100                // Method getLong:(I)J
     156: invokestatic  #117                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     159: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     162: areturn
     163: aload_2
     164: ldc_w         #67                 // class java/lang/Float
     167: if_acmpne     183
     170: aload_2
     171: aload_0
     172: iload_1
     173: invokevirtual #95                 // Method getFloat:(I)F
     176: invokestatic  #118                // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
     179: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     182: areturn
     183: aload_2
     184: ldc_w         #66                 // class java/lang/Double
     187: if_acmpne     203
     190: aload_2
     191: aload_0
     192: iload_1
     193: invokevirtual #92                 // Method getDouble:(I)D
     196: invokestatic  #119                // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
     199: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     202: areturn
     203: aload_2
     204: ldc_w         #89                 // class java/sql/Date
     207: if_acmpne     220
     210: aload_2
     211: aload_0
     212: iload_1
     213: invokevirtual #90                 // Method getDate:(I)Ljava/sql/Date;
     216: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     219: areturn
     220: aload_2
     221: ldc_w         #120                // class java/sql/Time
     224: if_acmpne     237
     227: aload_2
     228: aload_0
     229: iload_1
     230: invokevirtual #121                // Method getTime:(I)Ljava/sql/Time;
     233: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     236: areturn
     237: aload_2
     238: ldc_w         #122                // class java/sql/Timestamp
     241: if_acmpne     254
     244: aload_2
     245: aload_0
     246: iload_1
     247: invokevirtual #123                // Method getTimestamp:(I)Ljava/sql/Timestamp;
     250: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     253: areturn
     254: aload_2
     255: ldc_w         #79                 // class java/util/UUID
     258: if_acmpne     271
     261: aload_2
     262: aload_0
     263: iload_1
     264: invokevirtual #103                // Method getObject:(I)Ljava/lang/Object;
     267: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     270: areturn
     271: aload_2
     272: ldc_w         #78                 // class "[B"
     275: if_acmpne     288
     278: aload_2
     279: aload_0
     280: iload_1
     281: invokevirtual #82                 // Method getBytes:(I)[B
     284: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     287: areturn
     288: aload_2
     289: ldc_w         #124                // class java/sql/Array
     292: if_acmpne     305
     295: aload_2
     296: aload_0
     297: iload_1
     298: invokevirtual #51                 // Method getArray:(I)Ljava/sql/Array;
     301: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     304: areturn
     305: aload_2
     306: ldc_w         #58                 // class java/sql/Blob
     309: if_acmpne     322
     312: aload_2
     313: aload_0
     314: iload_1
     315: invokevirtual #62                 // Method getBlob:(I)Ljava/sql/Blob;
     318: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     321: areturn
     322: aload_2
     323: ldc_w         #84                 // class java/sql/Clob
     326: if_acmpne     339
     329: aload_2
     330: aload_0
     331: iload_1
     332: invokevirtual #88                 // Method getClob:(I)Ljava/sql/Clob;
     335: invokevirtual #105                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     338: areturn
     339: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
     342: athrow

  public <T> T getObject(java.lang.String, java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: aload_2
       7: invokevirtual #125                // Method getObject:(ILjava/lang/Class;)Ljava/lang/Object;
      10: areturn

  public java.lang.Object getObject(int, java.util.Map<java.lang.String, java.lang.Class<?>>) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.lang.Object getObject(java.lang.String, java.util.Map<java.lang.String, java.lang.Class<?>>) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.Ref getRef(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.Ref getRef(java.lang.String) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.RowId getRowId(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.RowId getRowId(java.lang.String) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public short getShort(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnull        25
      10: aload_2
      11: instanceof    #65                 // class java/lang/Number
      14: ifne          25
      17: aload_2
      18: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
      21: invokestatic  #126                // Method java/lang/Short.decode:(Ljava/lang/String;)Ljava/lang/Short;
      24: astore_2
      25: aload_2
      26: ifnonnull     33
      29: iconst_0
      30: goto          40
      33: aload_2
      34: checkcast     #65                 // class java/lang/Number
      37: invokevirtual #127                // Method java/lang/Number.shortValue:()S
      40: ireturn

  public short getShort(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #112                // Method getShort:(I)S
       9: ireturn

  public java.sql.SQLXML getSQLXML(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.SQLXML getSQLXML(java.lang.String) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.lang.String getString(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnonnull     12
      10: aconst_null
      11: areturn
      12: aload_0
      13: getfield      #4                  // Field columns:Ljava/util/ArrayList;
      16: iload_1
      17: iconst_1
      18: isub
      19: invokevirtual #35                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      22: checkcast     #23                 // class org/h2/tools/SimpleResultSet$Column
      25: getfield      #26                 // Field org/h2/tools/SimpleResultSet$Column.sqlType:I
      28: lookupswitch  { // 1
                  2005: 48
               default: 70
          }
      48: aload_2
      49: checkcast     #84                 // class java/sql/Clob
      52: astore_3
      53: aload_3
      54: lconst_1
      55: aload_3
      56: invokeinterface #128,  1          // InterfaceMethod java/sql/Clob.length:()J
      61: invokestatic  #129                // Method org/h2/util/MathUtils.convertLongToInt:(J)I
      64: invokeinterface #130,  4          // InterfaceMethod java/sql/Clob.getSubString:(JI)Ljava/lang/String;
      69: areturn
      70: aload_2
      71: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
      74: areturn

  public java.lang.String getString(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #101                // Method getString:(I)Ljava/lang/String;
       9: areturn

  public java.sql.Time getTime(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: checkcast     #120                // class java/sql/Time
       8: areturn

  public java.sql.Time getTime(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #121                // Method getTime:(I)Ljava/sql/Time;
       9: areturn

  public java.sql.Time getTime(int, java.util.Calendar) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.Time getTime(java.lang.String, java.util.Calendar) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.Timestamp getTimestamp(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #47                 // Method get:(I)Ljava/lang/Object;
       5: checkcast     #122                // class java/sql/Timestamp
       8: areturn

  public java.sql.Timestamp getTimestamp(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       6: invokevirtual #123                // Method getTimestamp:(I)Ljava/sql/Timestamp;
       9: areturn

  public java.sql.Timestamp getTimestamp(int, java.util.Calendar) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.sql.Timestamp getTimestamp(java.lang.String, java.util.Calendar) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.io.InputStream getUnicodeStream(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.io.InputStream getUnicodeStream(java.lang.String) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.net.URL getURL(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.net.URL getURL(java.lang.String) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void updateArray(int, java.sql.Array) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateArray(java.lang.String, java.sql.Array) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateAsciiStream(int, java.io.InputStream) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateAsciiStream(java.lang.String, java.io.InputStream) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateAsciiStream(int, java.io.InputStream, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateAsciiStream(java.lang.String, java.io.InputStream, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateAsciiStream(int, java.io.InputStream, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateAsciiStream(java.lang.String, java.io.InputStream, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateBigDecimal(int, java.math.BigDecimal) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateBigDecimal(java.lang.String, java.math.BigDecimal) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateBinaryStream(int, java.io.InputStream) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateBinaryStream(java.lang.String, java.io.InputStream) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateBinaryStream(int, java.io.InputStream, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateBinaryStream(java.lang.String, java.io.InputStream, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateBinaryStream(int, java.io.InputStream, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateBinaryStream(java.lang.String, java.io.InputStream, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateBlob(int, java.sql.Blob) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateBlob(java.lang.String, java.sql.Blob) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateBlob(int, java.io.InputStream) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateBlob(java.lang.String, java.io.InputStream) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateBlob(int, java.io.InputStream, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateBlob(java.lang.String, java.io.InputStream, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateBoolean(int, boolean) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #108                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       6: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       9: return

  public void updateBoolean(java.lang.String, boolean) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #108                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       6: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       9: return

  public void updateByte(int, byte) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #110                // Method java/lang/Byte.valueOf:(B)Ljava/lang/Byte;
       6: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       9: return

  public void updateByte(java.lang.String, byte) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #110                // Method java/lang/Byte.valueOf:(B)Ljava/lang/Byte;
       6: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       9: return

  public void updateBytes(int, byte[]) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateBytes(java.lang.String, byte[]) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateCharacterStream(int, java.io.Reader) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateCharacterStream(java.lang.String, java.io.Reader) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateCharacterStream(int, java.io.Reader, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateCharacterStream(java.lang.String, java.io.Reader, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateCharacterStream(int, java.io.Reader, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateCharacterStream(java.lang.String, java.io.Reader, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateClob(int, java.sql.Clob) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateClob(java.lang.String, java.sql.Clob) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateClob(int, java.io.Reader) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateClob(java.lang.String, java.io.Reader) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateClob(int, java.io.Reader, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateClob(java.lang.String, java.io.Reader, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateDate(int, java.sql.Date) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateDate(java.lang.String, java.sql.Date) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateDouble(int, double) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: dload_2
       3: invokestatic  #119                // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
       6: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       9: return

  public void updateDouble(java.lang.String, double) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: dload_2
       3: invokestatic  #119                // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
       6: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       9: return

  public void updateFloat(int, float) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: fload_2
       3: invokestatic  #118                // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
       6: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       9: return

  public void updateFloat(java.lang.String, float) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: fload_2
       3: invokestatic  #118                // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
       6: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       9: return

  public void updateInt(int, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       6: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       9: return

  public void updateInt(java.lang.String, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       6: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       9: return

  public void updateLong(int, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: lload_2
       3: invokestatic  #117                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       6: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       9: return

  public void updateLong(java.lang.String, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokestatic  #117                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       6: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       9: return

  public void updateNCharacterStream(int, java.io.Reader) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateNCharacterStream(java.lang.String, java.io.Reader) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateNCharacterStream(int, java.io.Reader, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateNCharacterStream(java.lang.String, java.io.Reader, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateNClob(int, java.sql.NClob) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateNClob(java.lang.String, java.sql.NClob) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateNClob(int, java.io.Reader) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateNClob(java.lang.String, java.io.Reader) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateNClob(int, java.io.Reader, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateNClob(java.lang.String, java.io.Reader, long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateNString(int, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateNString(java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateNull(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aconst_null
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateNull(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateObject(int, java.lang.Object) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateObject(java.lang.String, java.lang.Object) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateObject(int, java.lang.Object, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateObject(java.lang.String, java.lang.Object, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateRef(int, java.sql.Ref) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateRef(java.lang.String, java.sql.Ref) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateRowId(int, java.sql.RowId) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateRowId(java.lang.String, java.sql.RowId) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateShort(int, short) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #113                // Method java/lang/Short.valueOf:(S)Ljava/lang/Short;
       6: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       9: return

  public void updateShort(java.lang.String, short) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #113                // Method java/lang/Short.valueOf:(S)Ljava/lang/Short;
       6: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       9: return

  public void updateSQLXML(int, java.sql.SQLXML) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateSQLXML(java.lang.String, java.sql.SQLXML) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateString(int, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateString(java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateTime(int, java.sql.Time) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateTime(java.lang.String, java.sql.Time) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void updateTimestamp(int, java.sql.Timestamp) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #131                // Method update:(ILjava/lang/Object;)V
       6: return

  public void updateTimestamp(java.lang.String, java.sql.Timestamp) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #132                // Method update:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public int getColumnCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field columns:Ljava/util/ArrayList;
       4: invokevirtual #20                 // Method java/util/ArrayList.size:()I
       7: ireturn

  public int getColumnDisplaySize(int);
    Code:
       0: bipush        15
       2: ireturn

  public int getColumnType(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: isub
       4: invokespecial #42                 // Method getColumn:(I)Lorg/h2/tools/SimpleResultSet$Column;
       7: getfield      #26                 // Field org/h2/tools/SimpleResultSet$Column.sqlType:I
      10: ireturn

  public int getPrecision(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: isub
       4: invokespecial #42                 // Method getColumn:(I)Lorg/h2/tools/SimpleResultSet$Column;
       7: getfield      #27                 // Field org/h2/tools/SimpleResultSet$Column.precision:I
      10: ireturn

  public int getScale(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: isub
       4: invokespecial #42                 // Method getColumn:(I)Lorg/h2/tools/SimpleResultSet$Column;
       7: getfield      #28                 // Field org/h2/tools/SimpleResultSet$Column.scale:I
      10: ireturn

  public int isNullable(int);
    Code:
       0: iconst_2
       1: ireturn

  public boolean isAutoIncrement(int);
    Code:
       0: iconst_0
       1: ireturn

  public boolean isCaseSensitive(int);
    Code:
       0: iconst_1
       1: ireturn

  public boolean isCurrency(int);
    Code:
       0: iconst_0
       1: ireturn

  public boolean isDefinitelyWritable(int);
    Code:
       0: iconst_0
       1: ireturn

  public boolean isReadOnly(int);
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSearchable(int);
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSigned(int);
    Code:
       0: iconst_1
       1: ireturn

  public boolean isWritable(int);
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getCatalogName(int);
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getColumnClassName(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #133                // Method org/h2/value/DataType.getValueTypeFromResultSet:(Ljava/sql/ResultSetMetaData;I)I
       5: istore_2
       6: iload_2
       7: invokestatic  #134                // Method org/h2/value/DataType.getTypeClassName:(I)Ljava/lang/String;
      10: areturn

  public java.lang.String getColumnLabel(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: isub
       4: invokespecial #42                 // Method getColumn:(I)Lorg/h2/tools/SimpleResultSet$Column;
       7: getfield      #25                 // Field org/h2/tools/SimpleResultSet$Column.name:Ljava/lang/String;
      10: areturn

  public java.lang.String getColumnName(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #135                // Method getColumnLabel:(I)Ljava/lang/String;
       5: areturn

  public java.lang.String getColumnTypeName(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: isub
       4: invokespecial #42                 // Method getColumn:(I)Lorg/h2/tools/SimpleResultSet$Column;
       7: getfield      #29                 // Field org/h2/tools/SimpleResultSet$Column.sqlTypeName:Ljava/lang/String;
      10: areturn

  public java.lang.String getSchemaName(int);
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getTableName(int);
    Code:
       0: aconst_null
       1: areturn

  public void afterLast() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void cancelRowUpdates() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void deleteRow() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void insertRow() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void moveToCurrentRow() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void moveToInsertRow() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void refreshRow() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void updateRow() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean first() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean isAfterLast() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean isBeforeFirst() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean isFirst() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean isLast() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean last() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean previous() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean rowDeleted() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean rowInserted() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean rowUpdated() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void setFetchDirection(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void setFetchSize(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean absolute(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean relative(int) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public java.lang.String getCursorName() throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  private void update(int, java.lang.Object) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #136                // Method checkColumnIndex:(I)V
       5: aload_0
       6: getfield      #32                 // Field currentRow:[Ljava/lang/Object;
       9: iload_1
      10: iconst_1
      11: isub
      12: aload_2
      13: aastore
      14: return

  private void update(java.lang.String, java.lang.Object) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #32                 // Field currentRow:[Ljava/lang/Object;
       4: aload_0
       5: aload_1
       6: invokevirtual #50                 // Method findColumn:(Ljava/lang/String;)I
       9: iconst_1
      10: isub
      11: aload_2
      12: aastore
      13: return

  static java.sql.SQLException getUnsupportedException();
    Code:
       0: ldc           #137                // int 50100
       2: invokestatic  #39                 // Method org/h2/message/DbException.get:(I)Lorg/h2/message/DbException;
       5: invokevirtual #46                 // Method org/h2/message/DbException.getSQLException:()Ljava/sql/SQLException;
       8: areturn

  private void checkColumnIndex(int) throws java.sql.SQLException;
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     16
       5: iload_1
       6: aload_0
       7: getfield      #4                  // Field columns:Ljava/util/ArrayList;
      10: invokevirtual #20                 // Method java/util/ArrayList.size:()I
      13: if_icmple     29
      16: ldc           #138                // String columnIndex
      18: iload_1
      19: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      22: invokestatic  #139                // Method org/h2/message/DbException.getInvalidValueException:(Ljava/lang/String;Ljava/lang/Object;)Lorg/h2/message/DbException;
      25: invokevirtual #46                 // Method org/h2/message/DbException.getSQLException:()Ljava/sql/SQLException;
      28: athrow
      29: return

  private java.lang.Object get(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #32                 // Field currentRow:[Ljava/lang/Object;
       4: ifnonnull     17
       7: sipush        2000
      10: invokestatic  #39                 // Method org/h2/message/DbException.get:(I)Lorg/h2/message/DbException;
      13: invokevirtual #46                 // Method org/h2/message/DbException.getSQLException:()Ljava/sql/SQLException;
      16: athrow
      17: aload_0
      18: iload_1
      19: invokespecial #136                // Method checkColumnIndex:(I)V
      22: iinc          1, -1
      25: iload_1
      26: aload_0
      27: getfield      #32                 // Field currentRow:[Ljava/lang/Object;
      30: arraylength
      31: if_icmpge     43
      34: aload_0
      35: getfield      #32                 // Field currentRow:[Ljava/lang/Object;
      38: iload_1
      39: aaload
      40: goto          44
      43: aconst_null
      44: astore_2
      45: aload_0
      46: aload_2
      47: ifnonnull     54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: putfield      #41                 // Field wasNull:Z
      58: aload_2
      59: areturn

  private org.h2.tools.SimpleResultSet$Column getColumn(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: iadd
       4: invokespecial #136                // Method checkColumnIndex:(I)V
       7: aload_0
       8: getfield      #4                  // Field columns:Ljava/util/ArrayList;
      11: iload_1
      12: invokevirtual #35                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      15: checkcast     #23                 // class org/h2/tools/SimpleResultSet$Column
      18: areturn

  public int getHoldability();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #6                  // Field rows:Ljava/util/ArrayList;
       4: ifnonnull     18
       7: aload_0
       8: getfield      #7                  // Field source:Lorg/h2/tools/SimpleRowSource;
      11: ifnonnull     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException;
    Code:
       0: invokestatic  #52                 // Method getUnsupportedException:()Ljava/sql/SQLException;
       3: athrow

  public void setAutoClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field autoClose:Z
       5: return

  public boolean getAutoClose();
    Code:
       0: aload_0
       1: getfield      #5                  // Field autoClose:Z
       4: ireturn
}
