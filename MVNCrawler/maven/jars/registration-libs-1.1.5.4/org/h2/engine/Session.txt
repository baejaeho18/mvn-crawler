Compiled from "Session.java"
public class org.h2.engine.Session extends org.h2.engine.SessionWithState {
  public static final int LOG_WRITTEN;

  private static final java.lang.String SYSTEM_IDENTIFIER_PREFIX;

  private static int nextSerialId;

  private final int serialId;

  private final org.h2.engine.Database database;

  private org.h2.engine.ConnectionInfo connectionInfo;

  private final org.h2.engine.User user;

  private final int id;

  private final java.util.ArrayList<org.h2.table.Table> locks;

  private final org.h2.engine.UndoLog undoLog;

  private boolean autoCommit;

  private java.util.Random random;

  private int lockTimeout;

  private org.h2.value.Value lastIdentity;

  private org.h2.value.Value lastScopeIdentity;

  private org.h2.value.Value lastTriggerIdentity;

  private org.h2.engine.GeneratedKeys generatedKeys;

  private int firstUncommittedLog;

  private int firstUncommittedPos;

  private java.util.HashMap<java.lang.String, org.h2.engine.Session$Savepoint> savepoints;

  private java.util.HashMap<java.lang.String, org.h2.table.Table> localTempTables;

  private java.util.HashMap<java.lang.String, org.h2.index.Index> localTempTableIndexes;

  private java.util.HashMap<java.lang.String, org.h2.constraint.Constraint> localTempTableConstraints;

  private long throttleNs;

  private long lastThrottle;

  private org.h2.command.Command currentCommand;

  private boolean allowLiterals;

  private java.lang.String currentSchemaName;

  private java.lang.String[] schemaSearchPath;

  private org.h2.message.Trace trace;

  private java.util.HashMap<java.lang.String, org.h2.value.Value> removeLobMap;

  private int systemIdentifier;

  private java.util.HashMap<java.lang.String, org.h2.engine.Procedure> procedures;

  private boolean undoLogEnabled;

  private boolean redoLogBinary;

  private boolean autoCommitAtTransactionEnd;

  private java.lang.String currentTransactionName;

  private volatile long cancelAtNs;

  private boolean closed;

  private final long sessionStart;

  private long transactionStart;

  private long currentCommandStart;

  private java.util.HashMap<java.lang.String, org.h2.value.Value> variables;

  private java.util.HashSet<org.h2.result.ResultInterface> temporaryResults;

  private int queryTimeout;

  private boolean commitOrRollbackDisabled;

  private org.h2.table.Table waitForLock;

  private java.lang.Thread waitForLockThread;

  private int modificationId;

  private int objectId;

  private final int queryCacheSize;

  private org.h2.util.SmallLRUCache<java.lang.String, org.h2.command.Command> queryCache;

  private long modificationMetaID;

  private org.h2.table.SubQueryInfo subQueryInfo;

  private int parsingView;

  private final java.util.Deque<java.lang.String> viewNameStack;

  private int preparingQueryExpression;

  private volatile org.h2.util.SmallLRUCache<java.lang.Object, org.h2.index.ViewIndex> viewIndexCache;

  private java.util.HashMap<java.lang.Object, org.h2.index.ViewIndex> subQueryIndexCache;

  private boolean joinBatchEnabled;

  private boolean forceJoinOrder;

  private boolean lazyQueryExecution;

  private org.h2.util.ColumnNamerConfiguration columnNamerConfiguration;

  private java.util.HashSet<org.h2.table.Table> tablesToAnalyze;

  private java.util.LinkedList<org.h2.engine.Session$TimeoutValue> temporaryResultLobs;

  private java.util.ArrayList<org.h2.value.Value> temporaryLobs;

  private org.h2.mvstore.db.TransactionStore$Transaction transaction;

  private long startStatement;

  static final boolean $assertionsDisabled;

  public org.h2.engine.Session(org.h2.engine.Database, org.h2.engine.User, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/h2/engine/SessionWithState."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field nextSerialId:I
       8: dup
       9: iconst_1
      10: iadd
      11: putstatic     #2                  // Field nextSerialId:I
      14: putfield      #3                  // Field serialId:I
      17: aload_0
      18: invokestatic  #4                  // Method org/h2/util/New.arrayList:()Ljava/util/ArrayList;
      21: putfield      #5                  // Field locks:Ljava/util/ArrayList;
      24: aload_0
      25: iconst_1
      26: putfield      #6                  // Field autoCommit:Z
      29: aload_0
      30: lconst_0
      31: invokestatic  #7                  // Method org/h2/value/ValueLong.get:(J)Lorg/h2/value/ValueLong;
      34: putfield      #8                  // Field lastIdentity:Lorg/h2/value/Value;
      37: aload_0
      38: lconst_0
      39: invokestatic  #7                  // Method org/h2/value/ValueLong.get:(J)Lorg/h2/value/ValueLong;
      42: putfield      #9                  // Field lastScopeIdentity:Lorg/h2/value/Value;
      45: aload_0
      46: iconst_m1
      47: putfield      #10                 // Field firstUncommittedLog:I
      50: aload_0
      51: iconst_m1
      52: putfield      #11                 // Field firstUncommittedPos:I
      55: aload_0
      56: iconst_1
      57: putfield      #12                 // Field undoLogEnabled:Z
      60: aload_0
      61: iconst_1
      62: putfield      #13                 // Field redoLogBinary:Z
      65: aload_0
      66: invokestatic  #14                 // Method java/lang/System.currentTimeMillis:()J
      69: putfield      #15                 // Field sessionStart:J
      72: aload_0
      73: ldc2_w        #16                 // long -1l
      76: putfield      #18                 // Field modificationMetaID:J
      79: aload_0
      80: new           #19                 // class java/util/ArrayDeque
      83: dup
      84: invokespecial #20                 // Method java/util/ArrayDeque."<init>":()V
      87: putfield      #21                 // Field viewNameStack:Ljava/util/Deque;
      90: aload_0
      91: ldc2_w        #16                 // long -1l
      94: putfield      #22                 // Field startStatement:J
      97: aload_0
      98: aload_1
      99: putfield      #23                 // Field database:Lorg/h2/engine/Database;
     102: aload_0
     103: aload_1
     104: invokevirtual #24                 // Method org/h2/engine/Database.getSettings:()Lorg/h2/engine/DbSettings;
     107: getfield      #25                 // Field org/h2/engine/DbSettings.maxQueryTimeout:I
     110: putfield      #26                 // Field queryTimeout:I
     113: aload_0
     114: aload_1
     115: invokevirtual #24                 // Method org/h2/engine/Database.getSettings:()Lorg/h2/engine/DbSettings;
     118: getfield      #27                 // Field org/h2/engine/DbSettings.queryCacheSize:I
     121: putfield      #28                 // Field queryCacheSize:I
     124: aload_0
     125: new           #29                 // class org/h2/engine/UndoLog
     128: dup
     129: aload_0
     130: invokespecial #30                 // Method org/h2/engine/UndoLog."<init>":(Lorg/h2/engine/Session;)V
     133: putfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
     136: aload_0
     137: aload_2
     138: putfield      #32                 // Field user:Lorg/h2/engine/User;
     141: aload_0
     142: iload_3
     143: putfield      #33                 // Field id:I
     146: aload_1
     147: bipush        6
     149: invokestatic  #34                 // Method org/h2/command/dml/SetTypes.getTypeName:(I)Ljava/lang/String;
     152: invokevirtual #35                 // Method org/h2/engine/Database.findSetting:(Ljava/lang/String;)Lorg/h2/engine/Setting;
     155: astore        4
     157: aload_0
     158: aload         4
     160: ifnonnull     169
     163: sipush        2000
     166: goto          174
     169: aload         4
     171: invokevirtual #36                 // Method org/h2/engine/Setting.getIntValue:()I
     174: putfield      #37                 // Field lockTimeout:I
     177: aload_0
     178: ldc           #38                 // String PUBLIC
     180: putfield      #39                 // Field currentSchemaName:Ljava/lang/String;
     183: aload_0
     184: invokestatic  #40                 // Method org/h2/util/ColumnNamerConfiguration.getDefault:()Lorg/h2/util/ColumnNamerConfiguration;
     187: putfield      #41                 // Field columnNamerConfiguration:Lorg/h2/util/ColumnNamerConfiguration;
     190: return

  public void setLazyQueryExecution(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #42                 // Field lazyQueryExecution:Z
       5: return

  public boolean isLazyQueryExecution();
    Code:
       0: aload_0
       1: getfield      #42                 // Field lazyQueryExecution:Z
       4: ireturn

  public void setForceJoinOrder(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #43                 // Field forceJoinOrder:Z
       5: return

  public boolean isForceJoinOrder();
    Code:
       0: aload_0
       1: getfield      #43                 // Field forceJoinOrder:Z
       4: ireturn

  public void setJoinBatchEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #44                 // Field joinBatchEnabled:Z
       5: return

  public boolean isJoinBatchEnabled();
    Code:
       0: aload_0
       1: getfield      #44                 // Field joinBatchEnabled:Z
       4: ireturn

  public org.h2.result.Row createRow(org.h2.value.Value[], int);
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: aload_1
       5: iload_2
       6: invokevirtual #45                 // Method org/h2/engine/Database.createRow:([Lorg/h2/value/Value;I)Lorg/h2/result/Row;
       9: areturn

  public void pushSubQueryInfo(int[], org.h2.table.TableFilter[], int, org.h2.result.SortOrder);
    Code:
       0: aload_0
       1: new           #46                 // class org/h2/table/SubQueryInfo
       4: dup
       5: aload_0
       6: getfield      #47                 // Field subQueryInfo:Lorg/h2/table/SubQueryInfo;
       9: aload_1
      10: aload_2
      11: iload_3
      12: aload         4
      14: invokespecial #48                 // Method org/h2/table/SubQueryInfo."<init>":(Lorg/h2/table/SubQueryInfo;[I[Lorg/h2/table/TableFilter;ILorg/h2/result/SortOrder;)V
      17: putfield      #47                 // Field subQueryInfo:Lorg/h2/table/SubQueryInfo;
      20: return

  public void popSubQueryInfo();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #47                 // Field subQueryInfo:Lorg/h2/table/SubQueryInfo;
       5: invokevirtual #49                 // Method org/h2/table/SubQueryInfo.getUpper:()Lorg/h2/table/SubQueryInfo;
       8: putfield      #47                 // Field subQueryInfo:Lorg/h2/table/SubQueryInfo;
      11: return

  public org.h2.table.SubQueryInfo getSubQueryInfo();
    Code:
       0: aload_0
       1: getfield      #47                 // Field subQueryInfo:Lorg/h2/table/SubQueryInfo;
       4: areturn

  public void setParsingCreateView(boolean, java.lang.String);
    Code:
       0: aload_0
       1: dup
       2: getfield      #50                 // Field parsingView:I
       5: iload_1
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_m1
      14: iadd
      15: putfield      #50                 // Field parsingView:I
      18: getstatic     #51                 // Field $assertionsDisabled:Z
      21: ifne          39
      24: aload_0
      25: getfield      #50                 // Field parsingView:I
      28: ifge          39
      31: new           #52                 // class java/lang/AssertionError
      34: dup
      35: invokespecial #53                 // Method java/lang/AssertionError."<init>":()V
      38: athrow
      39: iload_1
      40: ifeq          56
      43: aload_0
      44: getfield      #21                 // Field viewNameStack:Ljava/util/Deque;
      47: aload_2
      48: invokeinterface #54,  2           // InterfaceMethod java/util/Deque.push:(Ljava/lang/Object;)V
      53: goto          96
      56: getstatic     #51                 // Field $assertionsDisabled:Z
      59: ifne          86
      62: aload_2
      63: aload_0
      64: getfield      #21                 // Field viewNameStack:Ljava/util/Deque;
      67: invokeinterface #55,  1           // InterfaceMethod java/util/Deque.peek:()Ljava/lang/Object;
      72: invokevirtual #56                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      75: ifne          86
      78: new           #52                 // class java/lang/AssertionError
      81: dup
      82: invokespecial #53                 // Method java/lang/AssertionError."<init>":()V
      85: athrow
      86: aload_0
      87: getfield      #21                 // Field viewNameStack:Ljava/util/Deque;
      90: invokeinterface #57,  1           // InterfaceMethod java/util/Deque.pop:()Ljava/lang/Object;
      95: pop
      96: return

  public java.lang.String getParsingCreateViewName();
    Code:
       0: aload_0
       1: getfield      #21                 // Field viewNameStack:Ljava/util/Deque;
       4: invokeinterface #58,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
       9: ifeq          14
      12: aconst_null
      13: areturn
      14: aload_0
      15: getfield      #21                 // Field viewNameStack:Ljava/util/Deque;
      18: invokeinterface #55,  1           // InterfaceMethod java/util/Deque.peek:()Ljava/lang/Object;
      23: checkcast     #59                 // class java/lang/String
      26: areturn

  public boolean isParsingCreateView();
    Code:
       0: getstatic     #51                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #50                 // Field parsingView:I
      10: ifge          21
      13: new           #52                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #53                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #50                 // Field parsingView:I
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public void optimizeQueryExpression(org.h2.command.dml.Query);
    Code:
       0: aload_0
       1: getfield      #47                 // Field subQueryInfo:Lorg/h2/table/SubQueryInfo;
       4: astore_2
       5: aload_0
       6: aconst_null
       7: putfield      #47                 // Field subQueryInfo:Lorg/h2/table/SubQueryInfo;
      10: aload_0
      11: dup
      12: getfield      #60                 // Field preparingQueryExpression:I
      15: iconst_1
      16: iadd
      17: putfield      #60                 // Field preparingQueryExpression:I
      20: aload_1
      21: invokevirtual #61                 // Method org/h2/command/dml/Query.prepare:()V
      24: aload_0
      25: aload_2
      26: putfield      #47                 // Field subQueryInfo:Lorg/h2/table/SubQueryInfo;
      29: aload_0
      30: dup
      31: getfield      #60                 // Field preparingQueryExpression:I
      34: iconst_1
      35: isub
      36: putfield      #60                 // Field preparingQueryExpression:I
      39: goto          60
      42: astore_3
      43: aload_0
      44: aload_2
      45: putfield      #47                 // Field subQueryInfo:Lorg/h2/table/SubQueryInfo;
      48: aload_0
      49: dup
      50: getfield      #60                 // Field preparingQueryExpression:I
      53: iconst_1
      54: isub
      55: putfield      #60                 // Field preparingQueryExpression:I
      58: aload_3
      59: athrow
      60: return
    Exception table:
       from    to  target type
          20    24    42   any
          42    43    42   any

  public boolean isPreparingQueryExpression();
    Code:
       0: getstatic     #51                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #60                 // Field preparingQueryExpression:I
      10: ifge          21
      13: new           #52                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #53                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #60                 // Field preparingQueryExpression:I
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public java.util.ArrayList<java.lang.String> getClusterServers();
    Code:
       0: new           #62                 // class java/util/ArrayList
       3: dup
       4: invokespecial #63                 // Method java/util/ArrayList."<init>":()V
       7: areturn

  public boolean setCommitOrRollbackDisabled(boolean);
    Code:
       0: aload_0
       1: getfield      #64                 // Field commitOrRollbackDisabled:Z
       4: istore_2
       5: aload_0
       6: iload_1
       7: putfield      #64                 // Field commitOrRollbackDisabled:Z
      10: iload_2
      11: ireturn

  private void initVariables();
    Code:
       0: aload_0
       1: getfield      #65                 // Field variables:Ljava/util/HashMap;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      12: invokevirtual #66                 // Method org/h2/engine/Database.newStringMap:()Ljava/util/HashMap;
      15: putfield      #65                 // Field variables:Ljava/util/HashMap;
      18: return

  public void setVariable(java.lang.String, org.h2.value.Value);
    Code:
       0: aload_0
       1: invokespecial #67                 // Method initVariables:()V
       4: aload_0
       5: dup
       6: getfield      #68                 // Field modificationId:I
       9: iconst_1
      10: iadd
      11: putfield      #68                 // Field modificationId:I
      14: aload_2
      15: getstatic     #69                 // Field org/h2/value/ValueNull.INSTANCE:Lorg/h2/value/ValueNull;
      18: if_acmpne     36
      21: aload_0
      22: getfield      #65                 // Field variables:Ljava/util/HashMap;
      25: aload_1
      26: invokevirtual #70                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #71                 // class org/h2/value/Value
      32: astore_3
      33: goto          59
      36: aload_2
      37: aload_0
      38: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      41: iconst_m1
      42: invokevirtual #72                 // Method org/h2/value/Value.copy:(Lorg/h2/store/DataHandler;I)Lorg/h2/value/Value;
      45: astore_2
      46: aload_0
      47: getfield      #65                 // Field variables:Ljava/util/HashMap;
      50: aload_1
      51: aload_2
      52: invokevirtual #73                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      55: checkcast     #71                 // class org/h2/value/Value
      58: astore_3
      59: aload_3
      60: ifnull        67
      63: aload_3
      64: invokevirtual #74                 // Method org/h2/value/Value.remove:()V
      67: return

  public org.h2.value.Value getVariable(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #67                 // Method initVariables:()V
       4: aload_0
       5: getfield      #65                 // Field variables:Ljava/util/HashMap;
       8: aload_1
       9: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #71                 // class org/h2/value/Value
      15: astore_2
      16: aload_2
      17: ifnonnull     26
      20: getstatic     #69                 // Field org/h2/value/ValueNull.INSTANCE:Lorg/h2/value/ValueNull;
      23: goto          27
      26: aload_2
      27: areturn

  public java.lang.String[] getVariableNames();
    Code:
       0: aload_0
       1: getfield      #65                 // Field variables:Ljava/util/HashMap;
       4: ifnonnull     12
       7: iconst_0
       8: anewarray     #59                 // class java/lang/String
      11: areturn
      12: aload_0
      13: getfield      #65                 // Field variables:Ljava/util/HashMap;
      16: invokevirtual #76                 // Method java/util/HashMap.keySet:()Ljava/util/Set;
      19: aload_0
      20: getfield      #65                 // Field variables:Ljava/util/HashMap;
      23: invokevirtual #77                 // Method java/util/HashMap.size:()I
      26: anewarray     #59                 // class java/lang/String
      29: invokeinterface #78,  2           // InterfaceMethod java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      34: checkcast     #79                 // class "[Ljava/lang/String;"
      37: areturn

  public org.h2.table.Table findLocalTempTable(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
       4: ifnonnull     9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
      13: aload_1
      14: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #81                 // class org/h2/table/Table
      20: areturn

  public java.util.ArrayList<org.h2.table.Table> getLocalTempTables();
    Code:
       0: aload_0
       1: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
       4: ifnonnull     11
       7: invokestatic  #4                  // Method org/h2/util/New.arrayList:()Ljava/util/ArrayList;
      10: areturn
      11: new           #62                 // class java/util/ArrayList
      14: dup
      15: aload_0
      16: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
      19: invokevirtual #82                 // Method java/util/HashMap.values:()Ljava/util/Collection;
      22: invokespecial #83                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      25: areturn

  public void addLocalTempTable(org.h2.table.Table);
    Code:
       0: aload_0
       1: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      12: invokevirtual #66                 // Method org/h2/engine/Database.newStringMap:()Ljava/util/HashMap;
      15: putfield      #80                 // Field localTempTables:Ljava/util/HashMap;
      18: aload_0
      19: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
      22: aload_1
      23: invokevirtual #84                 // Method org/h2/table/Table.getName:()Ljava/lang/String;
      26: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      29: ifnull        67
      32: ldc           #85                 // int 42101
      34: new           #86                 // class java/lang/StringBuilder
      37: dup
      38: invokespecial #87                 // Method java/lang/StringBuilder."<init>":()V
      41: aload_1
      42: invokevirtual #88                 // Method org/h2/table/Table.getSQL:()Ljava/lang/String;
      45: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: ldc           #90                 // String  AS
      50: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: aload_1
      54: invokevirtual #84                 // Method org/h2/table/Table.getName:()Ljava/lang/String;
      57: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: invokevirtual #91                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: invokestatic  #92                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      66: athrow
      67: aload_0
      68: dup
      69: getfield      #68                 // Field modificationId:I
      72: iconst_1
      73: iadd
      74: putfield      #68                 // Field modificationId:I
      77: aload_0
      78: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
      81: aload_1
      82: invokevirtual #84                 // Method org/h2/table/Table.getName:()Ljava/lang/String;
      85: aload_1
      86: invokevirtual #73                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      89: pop
      90: return

  public void removeLocalTempTable(org.h2.table.Table);
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: aload_0
       5: invokevirtual #93                 // Method org/h2/engine/Database.lockMeta:(Lorg/h2/engine/Session;)Z
       8: pop
       9: aload_0
      10: dup
      11: getfield      #68                 // Field modificationId:I
      14: iconst_1
      15: iadd
      16: putfield      #68                 // Field modificationId:I
      19: aload_0
      20: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
      23: aload_1
      24: invokevirtual #84                 // Method org/h2/table/Table.getName:()Ljava/lang/String;
      27: invokevirtual #70                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      30: pop
      31: aload_0
      32: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      35: dup
      36: astore_2
      37: monitorenter
      38: aload_1
      39: aload_0
      40: invokevirtual #94                 // Method org/h2/table/Table.removeChildrenAndResources:(Lorg/h2/engine/Session;)V
      43: aload_2
      44: monitorexit
      45: goto          53
      48: astore_3
      49: aload_2
      50: monitorexit
      51: aload_3
      52: athrow
      53: return
    Exception table:
       from    to  target type
          38    45    48   any
          48    51    48   any

  public org.h2.index.Index findLocalTempTableIndex(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
       4: ifnonnull     9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
      13: aload_1
      14: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #96                 // class org/h2/index/Index
      20: areturn

  public java.util.HashMap<java.lang.String, org.h2.index.Index> getLocalTempTableIndexes();
    Code:
       0: aload_0
       1: getfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
       4: ifnonnull     15
       7: new           #97                 // class java/util/HashMap
      10: dup
      11: invokespecial #98                 // Method java/util/HashMap."<init>":()V
      14: areturn
      15: aload_0
      16: getfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
      19: areturn

  public void addLocalTempTableIndex(org.h2.index.Index);
    Code:
       0: aload_0
       1: getfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      12: invokevirtual #66                 // Method org/h2/engine/Database.newStringMap:()Ljava/util/HashMap;
      15: putfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
      18: aload_0
      19: getfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
      22: aload_1
      23: invokeinterface #99,  1           // InterfaceMethod org/h2/index/Index.getName:()Ljava/lang/String;
      28: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      31: ifnull        46
      34: ldc           #100                // int 42111
      36: aload_1
      37: invokeinterface #101,  1          // InterfaceMethod org/h2/index/Index.getSQL:()Ljava/lang/String;
      42: invokestatic  #92                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      45: athrow
      46: aload_0
      47: getfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
      50: aload_1
      51: invokeinterface #99,  1           // InterfaceMethod org/h2/index/Index.getName:()Ljava/lang/String;
      56: aload_1
      57: invokevirtual #73                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      60: pop
      61: return

  public void removeLocalTempTableIndex(org.h2.index.Index);
    Code:
       0: aload_0
       1: getfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
       4: ifnull        45
       7: aload_0
       8: getfield      #95                 // Field localTempTableIndexes:Ljava/util/HashMap;
      11: aload_1
      12: invokeinterface #99,  1           // InterfaceMethod org/h2/index/Index.getName:()Ljava/lang/String;
      17: invokevirtual #70                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: aload_0
      22: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      25: dup
      26: astore_2
      27: monitorenter
      28: aload_1
      29: aload_0
      30: invokeinterface #102,  2          // InterfaceMethod org/h2/index/Index.removeChildrenAndResources:(Lorg/h2/engine/Session;)V
      35: aload_2
      36: monitorexit
      37: goto          45
      40: astore_3
      41: aload_2
      42: monitorexit
      43: aload_3
      44: athrow
      45: return
    Exception table:
       from    to  target type
          28    37    40   any
          40    43    40   any

  public org.h2.constraint.Constraint findLocalTempTableConstraint(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
       4: ifnonnull     9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
      13: aload_1
      14: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #104                // class org/h2/constraint/Constraint
      20: areturn

  public java.util.HashMap<java.lang.String, org.h2.constraint.Constraint> getLocalTempTableConstraints();
    Code:
       0: aload_0
       1: getfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
       4: ifnonnull     15
       7: new           #97                 // class java/util/HashMap
      10: dup
      11: invokespecial #98                 // Method java/util/HashMap."<init>":()V
      14: areturn
      15: aload_0
      16: getfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
      19: areturn

  public void addLocalTempTableConstraint(org.h2.constraint.Constraint);
    Code:
       0: aload_0
       1: getfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      12: invokevirtual #66                 // Method org/h2/engine/Database.newStringMap:()Ljava/util/HashMap;
      15: putfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
      18: aload_1
      19: invokevirtual #105                // Method org/h2/constraint/Constraint.getName:()Ljava/lang/String;
      22: astore_2
      23: aload_0
      24: getfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
      27: aload_2
      28: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      31: ifnull        44
      34: ldc           #106                // int 90045
      36: aload_1
      37: invokevirtual #107                // Method org/h2/constraint/Constraint.getSQL:()Ljava/lang/String;
      40: invokestatic  #92                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      43: athrow
      44: aload_0
      45: getfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
      48: aload_2
      49: aload_1
      50: invokevirtual #73                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      53: pop
      54: return

  void removeLocalTempTableConstraint(org.h2.constraint.Constraint);
    Code:
       0: aload_0
       1: getfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
       4: ifnull        41
       7: aload_0
       8: getfield      #103                // Field localTempTableConstraints:Ljava/util/HashMap;
      11: aload_1
      12: invokevirtual #105                // Method org/h2/constraint/Constraint.getName:()Ljava/lang/String;
      15: invokevirtual #70                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: aload_0
      20: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      23: dup
      24: astore_2
      25: monitorenter
      26: aload_1
      27: aload_0
      28: invokevirtual #108                // Method org/h2/constraint/Constraint.removeChildrenAndResources:(Lorg/h2/engine/Session;)V
      31: aload_2
      32: monitorexit
      33: goto          41
      36: astore_3
      37: aload_2
      38: monitorexit
      39: aload_3
      40: athrow
      41: return
    Exception table:
       from    to  target type
          26    33    36   any
          36    39    36   any

  public boolean getAutoCommit();
    Code:
       0: aload_0
       1: getfield      #6                  // Field autoCommit:Z
       4: ireturn

  public org.h2.engine.User getUser();
    Code:
       0: aload_0
       1: getfield      #32                 // Field user:Lorg/h2/engine/User;
       4: areturn

  public void setAutoCommit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field autoCommit:Z
       5: return

  public int getLockTimeout();
    Code:
       0: aload_0
       1: getfield      #37                 // Field lockTimeout:I
       4: ireturn

  public void setLockTimeout(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field lockTimeout:I
       5: return

  public synchronized org.h2.command.CommandInterface prepareCommand(java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #109                // Method prepareLocal:(Ljava/lang/String;)Lorg/h2/command/Command;
       5: areturn

  public org.h2.command.Prepared prepare(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokevirtual #110                // Method prepare:(Ljava/lang/String;ZZ)Lorg/h2/command/Prepared;
       7: areturn

  public org.h2.command.Prepared prepare(java.lang.String, boolean, boolean);
    Code:
       0: new           #111                // class org/h2/command/Parser
       3: dup
       4: aload_0
       5: invokespecial #112                // Method org/h2/command/Parser."<init>":(Lorg/h2/engine/Session;)V
       8: astore        4
      10: aload         4
      12: iload_2
      13: invokevirtual #113                // Method org/h2/command/Parser.setRightsChecked:(Z)V
      16: aload         4
      18: iload_3
      19: invokevirtual #114                // Method org/h2/command/Parser.setLiteralsChecked:(Z)V
      22: aload         4
      24: aload_1
      25: invokevirtual #115                // Method org/h2/command/Parser.prepare:(Ljava/lang/String;)Lorg/h2/command/Prepared;
      28: areturn

  public org.h2.command.Command prepareLocal(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #116                // Field closed:Z
       4: ifeq          15
       7: ldc           #117                // int 90067
       9: ldc           #118                // String session closed
      11: invokestatic  #92                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      14: athrow
      15: aload_0
      16: getfield      #28                 // Field queryCacheSize:I
      19: ifle          112
      22: aload_0
      23: getfield      #119                // Field queryCache:Lorg/h2/util/SmallLRUCache;
      26: ifnonnull     54
      29: aload_0
      30: aload_0
      31: getfield      #28                 // Field queryCacheSize:I
      34: invokestatic  #120                // Method org/h2/util/SmallLRUCache.newInstance:(I)Lorg/h2/util/SmallLRUCache;
      37: putfield      #119                // Field queryCache:Lorg/h2/util/SmallLRUCache;
      40: aload_0
      41: aload_0
      42: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      45: invokevirtual #121                // Method org/h2/engine/Database.getModificationMetaId:()J
      48: putfield      #18                 // Field modificationMetaID:J
      51: goto          112
      54: aload_0
      55: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      58: invokevirtual #121                // Method org/h2/engine/Database.getModificationMetaId:()J
      61: lstore_3
      62: lload_3
      63: aload_0
      64: getfield      #18                 // Field modificationMetaID:J
      67: lcmp
      68: ifeq          83
      71: aload_0
      72: getfield      #119                // Field queryCache:Lorg/h2/util/SmallLRUCache;
      75: invokevirtual #122                // Method org/h2/util/SmallLRUCache.clear:()V
      78: aload_0
      79: lload_3
      80: putfield      #18                 // Field modificationMetaID:J
      83: aload_0
      84: getfield      #119                // Field queryCache:Lorg/h2/util/SmallLRUCache;
      87: aload_1
      88: invokevirtual #123                // Method org/h2/util/SmallLRUCache.get:(Ljava/lang/Object;)Ljava/lang/Object;
      91: checkcast     #124                // class org/h2/command/Command
      94: astore_2
      95: aload_2
      96: ifnull        112
      99: aload_2
     100: invokevirtual #125                // Method org/h2/command/Command.canReuse:()Z
     103: ifeq          112
     106: aload_2
     107: invokevirtual #126                // Method org/h2/command/Command.reuse:()V
     110: aload_2
     111: areturn
     112: new           #111                // class org/h2/command/Parser
     115: dup
     116: aload_0
     117: invokespecial #112                // Method org/h2/command/Parser."<init>":(Lorg/h2/engine/Session;)V
     120: astore_3
     121: aload_3
     122: aload_1
     123: invokevirtual #127                // Method org/h2/command/Parser.prepareCommand:(Ljava/lang/String;)Lorg/h2/command/Command;
     126: astore_2
     127: aload_0
     128: aconst_null
     129: putfield      #128                // Field subQueryIndexCache:Ljava/util/HashMap;
     132: goto          145
     135: astore        5
     137: aload_0
     138: aconst_null
     139: putfield      #128                // Field subQueryIndexCache:Ljava/util/HashMap;
     142: aload         5
     144: athrow
     145: aload_2
     146: invokevirtual #129                // Method org/h2/command/Command.prepareJoinBatch:()V
     149: aload_0
     150: getfield      #119                // Field queryCache:Lorg/h2/util/SmallLRUCache;
     153: ifnull        173
     156: aload_2
     157: invokevirtual #130                // Method org/h2/command/Command.isCacheable:()Z
     160: ifeq          173
     163: aload_0
     164: getfield      #119                // Field queryCache:Lorg/h2/util/SmallLRUCache;
     167: aload_1
     168: aload_2
     169: invokevirtual #131                // Method org/h2/util/SmallLRUCache.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     172: pop
     173: aload_2
     174: areturn
    Exception table:
       from    to  target type
         121   127   135   any
         135   137   135   any

  public org.h2.engine.Database getDatabase();
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: areturn

  public int getPowerOffCount();
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #132                // Method org/h2/engine/Database.getPowerOffCount:()I
       7: ireturn

  public void setPowerOffCount(int);
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: iload_1
       5: invokevirtual #133                // Method org/h2/engine/Database.setPowerOffCount:(I)V
       8: return

  public void commit(boolean);
    Code:
       0: aload_0
       1: invokespecial #134                // Method checkCommitRollback:()V
       4: aload_0
       5: aconst_null
       6: putfield      #135                // Field currentTransactionName:Ljava/lang/String;
       9: aload_0
      10: lconst_0
      11: putfield      #136                // Field transactionStart:J
      14: aload_0
      15: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      18: ifnull        87
      21: aload_0
      22: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      25: invokevirtual #138                // Method java/util/ArrayList.isEmpty:()Z
      28: ifne          75
      31: aload_0
      32: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      35: invokevirtual #139                // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      38: astore_2
      39: aload_2
      40: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      45: ifeq          75
      48: aload_2
      49: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: checkcast     #81                 // class org/h2/table/Table
      57: astore_3
      58: aload_3
      59: instanceof    #142                // class org/h2/mvstore/db/MVTable
      62: ifeq          72
      65: aload_3
      66: checkcast     #142                // class org/h2/mvstore/db/MVTable
      69: invokevirtual #143                // Method org/h2/mvstore/db/MVTable.commit:()V
      72: goto          39
      75: aload_0
      76: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      79: invokevirtual #144                // Method org/h2/mvstore/db/TransactionStore$Transaction.commit:()V
      82: aload_0
      83: aconst_null
      84: putfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      87: aload_0
      88: invokevirtual #145                // Method containsUncommitted:()Z
      91: ifeq          102
      94: aload_0
      95: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      98: aload_0
      99: invokevirtual #146                // Method org/h2/engine/Database.commit:(Lorg/h2/engine/Session;)V
     102: aload_0
     103: iconst_1
     104: invokespecial #147                // Method removeTemporaryLobs:(Z)V
     107: aload_0
     108: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
     111: invokevirtual #148                // Method org/h2/engine/UndoLog.size:()I
     114: ifle          240
     117: aload_0
     118: getfield      #23                 // Field database:Lorg/h2/engine/Database;
     121: invokevirtual #149                // Method org/h2/engine/Database.isMultiVersion:()Z
     124: ifeq          233
     127: invokestatic  #4                  // Method org/h2/util/New.arrayList:()Ljava/util/ArrayList;
     130: astore_2
     131: aload_0
     132: getfield      #23                 // Field database:Lorg/h2/engine/Database;
     135: dup
     136: astore_3
     137: monitorenter
     138: aload_0
     139: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
     142: invokevirtual #148                // Method org/h2/engine/UndoLog.size:()I
     145: ifle          183
     148: aload_0
     149: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
     152: invokevirtual #150                // Method org/h2/engine/UndoLog.getLast:()Lorg/h2/engine/UndoLogRecord;
     155: astore        4
     157: aload         4
     159: invokevirtual #151                // Method org/h2/engine/UndoLogRecord.commit:()V
     162: aload_2
     163: aload         4
     165: invokevirtual #152                // Method org/h2/engine/UndoLogRecord.getRow:()Lorg/h2/result/Row;
     168: invokevirtual #153                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     171: pop
     172: aload_0
     173: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
     176: iconst_0
     177: invokevirtual #154                // Method org/h2/engine/UndoLog.removeLast:(Z)V
     180: goto          138
     183: aload_2
     184: invokevirtual #139                // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
     187: astore        4
     189: aload         4
     191: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     196: ifeq          221
     199: aload         4
     201: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     206: checkcast     #155                // class org/h2/result/Row
     209: astore        5
     211: aload         5
     213: invokeinterface #156,  1          // InterfaceMethod org/h2/result/Row.commit:()V
     218: goto          189
     221: aload_3
     222: monitorexit
     223: goto          233
     226: astore        6
     228: aload_3
     229: monitorexit
     230: aload         6
     232: athrow
     233: aload_0
     234: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
     237: invokevirtual #157                // Method org/h2/engine/UndoLog.clear:()V
     240: iload_1
     241: ifne          266
     244: aload_0
     245: iconst_0
     246: invokespecial #158                // Method cleanTempTables:(Z)V
     249: aload_0
     250: getfield      #159                // Field autoCommitAtTransactionEnd:Z
     253: ifeq          266
     256: aload_0
     257: iconst_1
     258: putfield      #6                  // Field autoCommit:Z
     261: aload_0
     262: iconst_0
     263: putfield      #159                // Field autoCommitAtTransactionEnd:Z
     266: aload_0
     267: invokevirtual #160                // Method getDatabase:()Lorg/h2/engine/Database;
     270: invokevirtual #24                 // Method org/h2/engine/Database.getSettings:()Lorg/h2/engine/DbSettings;
     273: getfield      #161                // Field org/h2/engine/DbSettings.analyzeSample:I
     276: bipush        10
     278: idiv
     279: istore_2
     280: aload_0
     281: getfield      #162                // Field tablesToAnalyze:Ljava/util/HashSet;
     284: ifnull        334
     287: aload_0
     288: getfield      #162                // Field tablesToAnalyze:Ljava/util/HashSet;
     291: invokevirtual #163                // Method java/util/HashSet.iterator:()Ljava/util/Iterator;
     294: astore_3
     295: aload_3
     296: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     301: ifeq          326
     304: aload_3
     305: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     310: checkcast     #81                 // class org/h2/table/Table
     313: astore        4
     315: aload_0
     316: aload         4
     318: iload_2
     319: iconst_0
     320: invokestatic  #164                // Method org/h2/command/ddl/Analyze.analyzeTable:(Lorg/h2/engine/Session;Lorg/h2/table/Table;IZ)V
     323: goto          295
     326: aload_0
     327: getfield      #23                 // Field database:Lorg/h2/engine/Database;
     330: aload_0
     331: invokevirtual #165                // Method org/h2/engine/Database.unlockMeta:(Lorg/h2/engine/Session;)V
     334: aload_0
     335: aconst_null
     336: putfield      #162                // Field tablesToAnalyze:Ljava/util/HashSet;
     339: aload_0
     340: invokespecial #166                // Method endTransaction:()V
     343: return
    Exception table:
       from    to  target type
         138   223   226   any
         226   230   226   any

  private void removeTemporaryLobs(boolean);
    Code:
       0: getstatic     #167                // Field org/h2/engine/SysProperties.CHECK2:Z
       3: ifeq          38
       6: aload_0
       7: aload_0
       8: invokevirtual #160                // Method getDatabase:()Lorg/h2/engine/Database;
      11: invokevirtual #168                // Method org/h2/engine/Database.getLobSession:()Lorg/h2/engine/Session;
      14: if_acmpne     38
      17: aload_0
      18: invokestatic  #169                // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      21: ifne          38
      24: aload_0
      25: invokevirtual #160                // Method getDatabase:()Lorg/h2/engine/Database;
      28: invokestatic  #169                // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      31: ifne          38
      34: invokestatic  #170                // Method org/h2/message/DbException.throwInternalError:()Ljava/lang/RuntimeException;
      37: athrow
      38: aload_0
      39: getfield      #171                // Field temporaryLobs:Ljava/util/ArrayList;
      42: ifnull        93
      45: aload_0
      46: getfield      #171                // Field temporaryLobs:Ljava/util/ArrayList;
      49: invokevirtual #139                // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      52: astore_2
      53: aload_2
      54: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          86
      62: aload_2
      63: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      68: checkcast     #71                 // class org/h2/value/Value
      71: astore_3
      72: aload_3
      73: invokevirtual #172                // Method org/h2/value/Value.isLinkedToTable:()Z
      76: ifne          83
      79: aload_3
      80: invokevirtual #74                 // Method org/h2/value/Value.remove:()V
      83: goto          53
      86: aload_0
      87: getfield      #171                // Field temporaryLobs:Ljava/util/ArrayList;
      90: invokevirtual #173                // Method java/util/ArrayList.clear:()V
      93: aload_0
      94: getfield      #174                // Field temporaryResultLobs:Ljava/util/LinkedList;
      97: ifnull        202
     100: aload_0
     101: getfield      #174                // Field temporaryResultLobs:Ljava/util/LinkedList;
     104: invokevirtual #175                // Method java/util/LinkedList.isEmpty:()Z
     107: ifne          202
     110: invokestatic  #176                // Method java/lang/System.nanoTime:()J
     113: getstatic     #177                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     116: aload_0
     117: getfield      #23                 // Field database:Lorg/h2/engine/Database;
     120: invokevirtual #24                 // Method org/h2/engine/Database.getSettings:()Lorg/h2/engine/DbSettings;
     123: getfield      #178                // Field org/h2/engine/DbSettings.lobTimeout:I
     126: i2l
     127: invokevirtual #179                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
     130: lsub
     131: lstore_2
     132: aload_0
     133: getfield      #174                // Field temporaryResultLobs:Ljava/util/LinkedList;
     136: invokevirtual #175                // Method java/util/LinkedList.isEmpty:()Z
     139: ifne          202
     142: aload_0
     143: getfield      #174                // Field temporaryResultLobs:Ljava/util/LinkedList;
     146: invokevirtual #180                // Method java/util/LinkedList.getFirst:()Ljava/lang/Object;
     149: checkcast     #181                // class org/h2/engine/Session$TimeoutValue
     152: astore        4
     154: iload_1
     155: ifeq          171
     158: aload         4
     160: getfield      #182                // Field org/h2/engine/Session$TimeoutValue.created:J
     163: lload_2
     164: lcmp
     165: iflt          171
     168: goto          202
     171: aload_0
     172: getfield      #174                // Field temporaryResultLobs:Ljava/util/LinkedList;
     175: invokevirtual #183                // Method java/util/LinkedList.removeFirst:()Ljava/lang/Object;
     178: checkcast     #181                // class org/h2/engine/Session$TimeoutValue
     181: getfield      #184                // Field org/h2/engine/Session$TimeoutValue.value:Lorg/h2/value/Value;
     184: astore        5
     186: aload         5
     188: invokevirtual #172                // Method org/h2/value/Value.isLinkedToTable:()Z
     191: ifne          199
     194: aload         5
     196: invokevirtual #74                 // Method org/h2/value/Value.remove:()V
     199: goto          132
     202: return

  private void checkCommitRollback();
    Code:
       0: aload_0
       1: getfield      #64                 // Field commitOrRollbackDisabled:Z
       4: ifeq          23
       7: aload_0
       8: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      11: invokevirtual #138                // Method java/util/ArrayList.isEmpty:()Z
      14: ifne          23
      17: ldc           #185                // int 90058
      19: invokestatic  #186                // Method org/h2/message/DbException.get:(I)Lorg/h2/message/DbException;
      22: athrow
      23: return

  private void endTransaction();
    Code:
       0: aload_0
       1: getfield      #187                // Field removeLobMap:Ljava/util/HashMap;
       4: ifnull        78
       7: aload_0
       8: getfield      #187                // Field removeLobMap:Ljava/util/HashMap;
      11: invokevirtual #77                 // Method java/util/HashMap.size:()I
      14: ifle          78
      17: aload_0
      18: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      21: invokevirtual #188                // Method org/h2/engine/Database.getMvStore:()Lorg/h2/mvstore/db/MVTableEngine$Store;
      24: ifnonnull     34
      27: aload_0
      28: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      31: invokevirtual #189                // Method org/h2/engine/Database.flush:()V
      34: aload_0
      35: getfield      #187                // Field removeLobMap:Ljava/util/HashMap;
      38: invokevirtual #82                 // Method java/util/HashMap.values:()Ljava/util/Collection;
      41: invokeinterface #190,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      46: astore_1
      47: aload_1
      48: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      53: ifeq          73
      56: aload_1
      57: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      62: checkcast     #71                 // class org/h2/value/Value
      65: astore_2
      66: aload_2
      67: invokevirtual #74                 // Method org/h2/value/Value.remove:()V
      70: goto          47
      73: aload_0
      74: aconst_null
      75: putfield      #187                // Field removeLobMap:Ljava/util/HashMap;
      78: aload_0
      79: invokespecial #191                // Method unlockAll:()V
      82: return

  public void rollback();
    Code:
       0: aload_0
       1: invokespecial #134                // Method checkCommitRollback:()V
       4: aload_0
       5: aconst_null
       6: putfield      #135                // Field currentTransactionName:Ljava/lang/String;
       9: aload_0
      10: lconst_0
      11: putfield      #136                // Field transactionStart:J
      14: iconst_0
      15: istore_1
      16: aload_0
      17: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
      20: invokevirtual #148                // Method org/h2/engine/UndoLog.size:()I
      23: ifle          34
      26: aload_0
      27: aconst_null
      28: iconst_0
      29: invokevirtual #192                // Method rollbackTo:(Lorg/h2/engine/Session$Savepoint;Z)V
      32: iconst_1
      33: istore_1
      34: aload_0
      35: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      38: ifnull        61
      41: aload_0
      42: aconst_null
      43: iconst_0
      44: invokevirtual #192                // Method rollbackTo:(Lorg/h2/engine/Session$Savepoint;Z)V
      47: iconst_1
      48: istore_1
      49: aload_0
      50: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      53: invokevirtual #144                // Method org/h2/mvstore/db/TransactionStore$Transaction.commit:()V
      56: aload_0
      57: aconst_null
      58: putfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      61: aload_0
      62: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      65: invokevirtual #138                // Method java/util/ArrayList.isEmpty:()Z
      68: ifeq          75
      71: iload_1
      72: ifeq          83
      75: aload_0
      76: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      79: aload_0
      80: invokevirtual #146                // Method org/h2/engine/Database.commit:(Lorg/h2/engine/Session;)V
      83: aload_0
      84: iconst_0
      85: invokespecial #158                // Method cleanTempTables:(Z)V
      88: aload_0
      89: getfield      #159                // Field autoCommitAtTransactionEnd:Z
      92: ifeq          105
      95: aload_0
      96: iconst_1
      97: putfield      #6                  // Field autoCommit:Z
     100: aload_0
     101: iconst_0
     102: putfield      #159                // Field autoCommitAtTransactionEnd:Z
     105: aload_0
     106: invokespecial #166                // Method endTransaction:()V
     109: return

  public void rollbackTo(org.h2.engine.Session$Savepoint, boolean);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: iconst_0
       5: goto          12
       8: aload_1
       9: getfield      #193                // Field org/h2/engine/Session$Savepoint.logIndex:I
      12: istore_3
      13: aload_0
      14: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
      17: invokevirtual #148                // Method org/h2/engine/UndoLog.size:()I
      20: iload_3
      21: if_icmple     50
      24: aload_0
      25: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
      28: invokevirtual #150                // Method org/h2/engine/UndoLog.getLast:()Lorg/h2/engine/UndoLogRecord;
      31: astore        4
      33: aload         4
      35: aload_0
      36: invokevirtual #194                // Method org/h2/engine/UndoLogRecord.undo:(Lorg/h2/engine/Session;)V
      39: aload_0
      40: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
      43: iload_2
      44: invokevirtual #154                // Method org/h2/engine/UndoLog.removeLast:(Z)V
      47: goto          13
      50: aload_0
      51: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      54: ifnull        228
      57: aload_1
      58: ifnonnull     65
      61: lconst_0
      62: goto          69
      65: aload_1
      66: getfield      #195                // Field org/h2/engine/Session$Savepoint.transactionSavepoint:J
      69: lstore        4
      71: aload_0
      72: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      75: invokevirtual #188                // Method org/h2/engine/Database.getMvStore:()Lorg/h2/mvstore/db/MVTableEngine$Store;
      78: invokevirtual #196                // Method org/h2/mvstore/db/MVTableEngine$Store.getTables:()Ljava/util/HashMap;
      81: astore        6
      83: aload_0
      84: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      87: lload         4
      89: invokevirtual #197                // Method org/h2/mvstore/db/TransactionStore$Transaction.getChanges:(J)Ljava/util/Iterator;
      92: astore        7
      94: aload         7
      96: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     101: ifeq          228
     104: aload         7
     106: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     111: checkcast     #198                // class org/h2/mvstore/db/TransactionStore$Change
     114: astore        8
     116: aload         6
     118: aload         8
     120: getfield      #199                // Field org/h2/mvstore/db/TransactionStore$Change.mapName:Ljava/lang/String;
     123: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     126: checkcast     #142                // class org/h2/mvstore/db/MVTable
     129: astore        9
     131: aload         9
     133: ifnull        225
     136: aload         8
     138: getfield      #200                // Field org/h2/mvstore/db/TransactionStore$Change.key:Ljava/lang/Object;
     141: checkcast     #201                // class org/h2/value/ValueLong
     144: invokevirtual #202                // Method org/h2/value/ValueLong.getLong:()J
     147: lstore        10
     149: aload         8
     151: getfield      #203                // Field org/h2/mvstore/db/TransactionStore$Change.value:Ljava/lang/Object;
     154: checkcast     #204                // class org/h2/value/ValueArray
     157: astore        12
     159: aload         12
     161: ifnonnull     180
     164: iconst_0
     165: istore        13
     167: aload         9
     169: aload_0
     170: lload         10
     172: invokevirtual #205                // Method org/h2/mvstore/db/MVTable.getRow:(Lorg/h2/engine/Session;J)Lorg/h2/result/Row;
     175: astore        14
     177: goto          195
     180: iconst_1
     181: istore        13
     183: aload_0
     184: aload         12
     186: invokevirtual #206                // Method org/h2/value/ValueArray.getList:()[Lorg/h2/value/Value;
     189: iconst_m1
     190: invokevirtual #207                // Method createRow:([Lorg/h2/value/Value;I)Lorg/h2/result/Row;
     193: astore        14
     195: aload         14
     197: lload         10
     199: invokeinterface #208,  3          // InterfaceMethod org/h2/result/Row.setKey:(J)V
     204: new           #209                // class org/h2/engine/UndoLogRecord
     207: dup
     208: aload         9
     210: iload         13
     212: aload         14
     214: invokespecial #210                // Method org/h2/engine/UndoLogRecord."<init>":(Lorg/h2/table/Table;SLorg/h2/result/Row;)V
     217: astore        15
     219: aload         15
     221: aload_0
     222: invokevirtual #194                // Method org/h2/engine/UndoLogRecord.undo:(Lorg/h2/engine/Session;)V
     225: goto          94
     228: aload_0
     229: getfield      #211                // Field savepoints:Ljava/util/HashMap;
     232: ifnull        331
     235: aload_0
     236: getfield      #211                // Field savepoints:Ljava/util/HashMap;
     239: invokevirtual #76                 // Method java/util/HashMap.keySet:()Ljava/util/Set;
     242: aload_0
     243: getfield      #211                // Field savepoints:Ljava/util/HashMap;
     246: invokevirtual #77                 // Method java/util/HashMap.size:()I
     249: anewarray     #59                 // class java/lang/String
     252: invokeinterface #78,  2           // InterfaceMethod java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     257: checkcast     #79                 // class "[Ljava/lang/String;"
     260: astore        4
     262: aload         4
     264: astore        5
     266: aload         5
     268: arraylength
     269: istore        6
     271: iconst_0
     272: istore        7
     274: iload         7
     276: iload         6
     278: if_icmpge     331
     281: aload         5
     283: iload         7
     285: aaload
     286: astore        8
     288: aload_0
     289: getfield      #211                // Field savepoints:Ljava/util/HashMap;
     292: aload         8
     294: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     297: checkcast     #212                // class org/h2/engine/Session$Savepoint
     300: astore        9
     302: aload         9
     304: getfield      #193                // Field org/h2/engine/Session$Savepoint.logIndex:I
     307: istore        10
     309: iload         10
     311: iload_3
     312: if_icmple     325
     315: aload_0
     316: getfield      #211                // Field savepoints:Ljava/util/HashMap;
     319: aload         8
     321: invokevirtual #70                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     324: pop
     325: iinc          7, 1
     328: goto          274
     331: return

  public boolean hasPendingTransaction();
    Code:
       0: aload_0
       1: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
       4: invokevirtual #148                // Method org/h2/engine/UndoLog.size:()I
       7: ifle          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public org.h2.engine.Session$Savepoint setSavepoint();
    Code:
       0: new           #212                // class org/h2/engine/Session$Savepoint
       3: dup
       4: invokespecial #213                // Method org/h2/engine/Session$Savepoint."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
      13: invokevirtual #148                // Method org/h2/engine/UndoLog.size:()I
      16: putfield      #193                // Field org/h2/engine/Session$Savepoint.logIndex:I
      19: aload_0
      20: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      23: invokevirtual #188                // Method org/h2/engine/Database.getMvStore:()Lorg/h2/mvstore/db/MVTableEngine$Store;
      26: ifnull        37
      29: aload_1
      30: aload_0
      31: invokevirtual #214                // Method getStatementSavepoint:()J
      34: putfield      #195                // Field org/h2/engine/Session$Savepoint.transactionSavepoint:J
      37: aload_1
      38: areturn

  public int getId();
    Code:
       0: aload_0
       1: getfield      #33                 // Field id:I
       4: ireturn

  public void cancel();
    Code:
       0: aload_0
       1: invokestatic  #176                // Method java/lang/System.nanoTime:()J
       4: putfield      #215                // Field cancelAtNs:J
       7: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #116                // Field closed:Z
       4: ifne          67
       7: aload_0
       8: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      11: invokevirtual #216                // Method org/h2/engine/Database.checkPowerOff:()V
      14: aload_0
      15: invokevirtual #217                // Method rollback:()V
      18: aload_0
      19: iconst_0
      20: invokespecial #147                // Method removeTemporaryLobs:(Z)V
      23: aload_0
      24: iconst_1
      25: invokespecial #158                // Method cleanTempTables:(Z)V
      28: aload_0
      29: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
      32: invokevirtual #157                // Method org/h2/engine/UndoLog.clear:()V
      35: aload_0
      36: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      39: aload_0
      40: invokevirtual #165                // Method org/h2/engine/Database.unlockMeta:(Lorg/h2/engine/Session;)V
      43: aload_0
      44: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      47: aload_0
      48: invokevirtual #218                // Method org/h2/engine/Database.removeSession:(Lorg/h2/engine/Session;)V
      51: aload_0
      52: iconst_1
      53: putfield      #116                // Field closed:Z
      56: goto          67
      59: astore_1
      60: aload_0
      61: iconst_1
      62: putfield      #116                // Field closed:Z
      65: aload_1
      66: athrow
      67: return
    Exception table:
       from    to  target type
           7    51    59   any
          59    60    59   any

  public void addLock(org.h2.table.Table);
    Code:
       0: getstatic     #219                // Field org/h2/engine/SysProperties.CHECK:Z
       3: ifeq          25
       6: aload_0
       7: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      10: aload_1
      11: invokevirtual #220                // Method java/util/ArrayList.contains:(Ljava/lang/Object;)Z
      14: ifeq          25
      17: aload_1
      18: invokevirtual #221                // Method org/h2/table/Table.toString:()Ljava/lang/String;
      21: invokestatic  #222                // Method org/h2/message/DbException.throwInternalError:(Ljava/lang/String;)Ljava/lang/RuntimeException;
      24: pop
      25: aload_0
      26: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      29: aload_1
      30: invokevirtual #153                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      33: pop
      34: return

  public void log(org.h2.table.Table, short, org.h2.result.Row);
    Code:
       0: aload_1
       1: invokevirtual #223                // Method org/h2/table/Table.isMVStore:()Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #12                 // Field undoLogEnabled:Z
      12: ifeq          134
      15: new           #209                // class org/h2/engine/UndoLogRecord
      18: dup
      19: aload_1
      20: iload_2
      21: aload_3
      22: invokespecial #210                // Method org/h2/engine/UndoLogRecord."<init>":(Lorg/h2/table/Table;SLorg/h2/result/Row;)V
      25: astore        4
      27: getstatic     #219                // Field org/h2/engine/SysProperties.CHECK:Z
      30: ifeq          122
      33: aload_0
      34: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      37: invokevirtual #224                // Method org/h2/engine/Database.getLockMode:()I
      40: istore        5
      42: iload         5
      44: ifeq          122
      47: aload_0
      48: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      51: invokevirtual #149                // Method org/h2/engine/Database.isMultiVersion:()Z
      54: ifne          122
      57: aload         4
      59: invokevirtual #225                // Method org/h2/engine/UndoLogRecord.getTable:()Lorg/h2/table/Table;
      62: invokevirtual #226                // Method org/h2/table/Table.getTableType:()Lorg/h2/table/TableType;
      65: astore        6
      67: aload_0
      68: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      71: aload         4
      73: invokevirtual #225                // Method org/h2/engine/UndoLogRecord.getTable:()Lorg/h2/table/Table;
      76: invokevirtual #220                // Method java/util/ArrayList.contains:(Ljava/lang/Object;)Z
      79: ifne          122
      82: getstatic     #227                // Field org/h2/table/TableType.TABLE_LINK:Lorg/h2/table/TableType;
      85: aload         6
      87: if_acmpeq     122
      90: getstatic     #228                // Field org/h2/table/TableType.EXTERNAL_TABLE_ENGINE:Lorg/h2/table/TableType;
      93: aload         6
      95: if_acmpeq     122
      98: new           #86                 // class java/lang/StringBuilder
     101: dup
     102: invokespecial #87                 // Method java/lang/StringBuilder."<init>":()V
     105: ldc           #229                // String
     107: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     110: aload         6
     112: invokevirtual #230                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     115: invokevirtual #91                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     118: invokestatic  #222                // Method org/h2/message/DbException.throwInternalError:(Ljava/lang/String;)Ljava/lang/RuntimeException;
     121: pop
     122: aload_0
     123: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
     126: aload         4
     128: invokevirtual #231                // Method org/h2/engine/UndoLog.add:(Lorg/h2/engine/UndoLogRecord;)V
     131: goto          197
     134: aload_0
     135: getfield      #23                 // Field database:Lorg/h2/engine/Database;
     138: invokevirtual #149                // Method org/h2/engine/Database.isMultiVersion:()Z
     141: ifeq          197
     144: aload_1
     145: invokevirtual #232                // Method org/h2/table/Table.getIndexes:()Ljava/util/ArrayList;
     148: astore        4
     150: aload         4
     152: invokevirtual #139                // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
     155: astore        5
     157: aload         5
     159: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     164: ifeq          191
     167: aload         5
     169: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     174: checkcast     #96                 // class org/h2/index/Index
     177: astore        6
     179: aload         6
     181: iload_2
     182: aload_3
     183: invokeinterface #233,  3          // InterfaceMethod org/h2/index/Index.commit:(ILorg/h2/result/Row;)V
     188: goto          157
     191: aload_3
     192: invokeinterface #156,  1          // InterfaceMethod org/h2/result/Row.commit:()V
     197: return

  public void unlockReadLocks();
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #149                // Method org/h2/engine/Database.isMultiVersion:()Z
       7: ifeq          11
      10: return
      11: iconst_0
      12: istore_1
      13: iload_1
      14: aload_0
      15: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      18: invokevirtual #234                // Method java/util/ArrayList.size:()I
      21: if_icmpge     85
      24: aload_0
      25: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      28: iload_1
      29: invokevirtual #235                // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      32: checkcast     #81                 // class org/h2/table/Table
      35: astore_2
      36: aload_2
      37: invokevirtual #236                // Method org/h2/table/Table.isLockedExclusively:()Z
      40: ifne          79
      43: aload_0
      44: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      47: dup
      48: astore_3
      49: monitorenter
      50: aload_2
      51: aload_0
      52: invokevirtual #237                // Method org/h2/table/Table.unlock:(Lorg/h2/engine/Session;)V
      55: aload_0
      56: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      59: iload_1
      60: invokevirtual #238                // Method java/util/ArrayList.remove:(I)Ljava/lang/Object;
      63: pop
      64: aload_3
      65: monitorexit
      66: goto          76
      69: astore        4
      71: aload_3
      72: monitorexit
      73: aload         4
      75: athrow
      76: iinc          1, -1
      79: iinc          1, 1
      82: goto          13
      85: return
    Exception table:
       from    to  target type
          50    66    69   any
          69    73    69   any

  void unlock(org.h2.table.Table);
    Code:
       0: aload_0
       1: getfield      #5                  // Field locks:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #239                // Method java/util/ArrayList.remove:(Ljava/lang/Object;)Z
       8: pop
       9: return

  private void unlockAll();
    Code:
       0: getstatic     #219                // Field org/h2/engine/SysProperties.CHECK:Z
       3: ifeq          20
       6: aload_0
       7: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
      10: invokevirtual #148                // Method org/h2/engine/UndoLog.size:()I
      13: ifle          20
      16: invokestatic  #170                // Method org/h2/message/DbException.throwInternalError:()Ljava/lang/RuntimeException;
      19: pop
      20: aload_0
      21: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      24: invokevirtual #138                // Method java/util/ArrayList.isEmpty:()Z
      27: ifne          72
      30: aload_0
      31: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      34: invokevirtual #139                // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      37: astore_1
      38: aload_1
      39: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          65
      47: aload_1
      48: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      53: checkcast     #81                 // class org/h2/table/Table
      56: astore_2
      57: aload_2
      58: aload_0
      59: invokevirtual #237                // Method org/h2/table/Table.unlock:(Lorg/h2/engine/Session;)V
      62: goto          38
      65: aload_0
      66: getfield      #5                  // Field locks:Ljava/util/ArrayList;
      69: invokevirtual #173                // Method java/util/ArrayList.clear:()V
      72: aload_0
      73: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      76: aload_0
      77: invokevirtual #240                // Method org/h2/engine/Database.unlockMetaDebug:(Lorg/h2/engine/Session;)V
      80: aload_0
      81: aconst_null
      82: putfield      #211                // Field savepoints:Ljava/util/HashMap;
      85: aload_0
      86: iconst_1
      87: putfield      #241                // Field sessionStateChanged:Z
      90: return

  private void cleanTempTables(boolean);
    Code:
       0: aload_0
       1: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
       4: ifnull        149
       7: aload_0
       8: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
      11: invokevirtual #77                 // Method java/util/HashMap.size:()I
      14: ifle          149
      17: aload_0
      18: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      21: dup
      22: astore_2
      23: monitorenter
      24: aload_0
      25: getfield      #80                 // Field localTempTables:Ljava/util/HashMap;
      28: invokevirtual #82                 // Method java/util/HashMap.values:()Ljava/util/Collection;
      31: invokeinterface #242,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      36: astore_3
      37: aload_3
      38: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          137
      46: aload_3
      47: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      52: checkcast     #81                 // class org/h2/table/Table
      55: astore        4
      57: iload_1
      58: ifne          69
      61: aload         4
      63: invokevirtual #243                // Method org/h2/table/Table.getOnCommitDrop:()Z
      66: ifeq          120
      69: aload_0
      70: dup
      71: getfield      #68                 // Field modificationId:I
      74: iconst_1
      75: iadd
      76: putfield      #68                 // Field modificationId:I
      79: aload         4
      81: invokevirtual #244                // Method org/h2/table/Table.setModified:()V
      84: aload_3
      85: invokeinterface #245,  1          // InterfaceMethod java/util/Iterator.remove:()V
      90: aload_0
      91: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      94: aload_0
      95: invokevirtual #93                 // Method org/h2/engine/Database.lockMeta:(Lorg/h2/engine/Session;)Z
      98: pop
      99: aload         4
     101: aload_0
     102: invokevirtual #94                 // Method org/h2/table/Table.removeChildrenAndResources:(Lorg/h2/engine/Session;)V
     105: iload_1
     106: ifeq          134
     109: aload_0
     110: getfield      #23                 // Field database:Lorg/h2/engine/Database;
     113: aload_0
     114: invokevirtual #146                // Method org/h2/engine/Database.commit:(Lorg/h2/engine/Session;)V
     117: goto          134
     120: aload         4
     122: invokevirtual #246                // Method org/h2/table/Table.getOnCommitTruncate:()Z
     125: ifeq          134
     128: aload         4
     130: aload_0
     131: invokevirtual #247                // Method org/h2/table/Table.truncate:(Lorg/h2/engine/Session;)V
     134: goto          37
     137: aload_2
     138: monitorexit
     139: goto          149
     142: astore        5
     144: aload_2
     145: monitorexit
     146: aload         5
     148: athrow
     149: return
    Exception table:
       from    to  target type
          24   139   142   any
         142   146   142   any

  public java.util.Random getRandom();
    Code:
       0: aload_0
       1: getfield      #248                // Field random:Ljava/util/Random;
       4: ifnonnull     18
       7: aload_0
       8: new           #249                // class java/util/Random
      11: dup
      12: invokespecial #250                // Method java/util/Random."<init>":()V
      15: putfield      #248                // Field random:Ljava/util/Random;
      18: aload_0
      19: getfield      #248                // Field random:Ljava/util/Random;
      22: areturn

  public org.h2.message.Trace getTrace();
    Code:
       0: aload_0
       1: getfield      #251                // Field trace:Lorg/h2/message/Trace;
       4: ifnull        19
       7: aload_0
       8: getfield      #116                // Field closed:Z
      11: ifne          19
      14: aload_0
      15: getfield      #251                // Field trace:Lorg/h2/message/Trace;
      18: areturn
      19: new           #86                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #87                 // Method java/lang/StringBuilder."<init>":()V
      26: ldc           #252                // String jdbc[
      28: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_0
      32: getfield      #33                 // Field id:I
      35: invokevirtual #253                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      38: ldc           #254                // String ]
      40: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: invokevirtual #91                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: astore_1
      47: aload_0
      48: getfield      #116                // Field closed:Z
      51: ifeq          67
      54: new           #255                // class org/h2/message/TraceSystem
      57: dup
      58: aconst_null
      59: invokespecial #256                // Method org/h2/message/TraceSystem."<init>":(Ljava/lang/String;)V
      62: aload_1
      63: invokevirtual #257                // Method org/h2/message/TraceSystem.getTrace:(Ljava/lang/String;)Lorg/h2/message/Trace;
      66: areturn
      67: aload_0
      68: aload_0
      69: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      72: invokevirtual #258                // Method org/h2/engine/Database.getTraceSystem:()Lorg/h2/message/TraceSystem;
      75: aload_1
      76: invokevirtual #257                // Method org/h2/message/TraceSystem.getTrace:(Ljava/lang/String;)Lorg/h2/message/Trace;
      79: putfield      #251                // Field trace:Lorg/h2/message/Trace;
      82: aload_0
      83: getfield      #251                // Field trace:Lorg/h2/message/Trace;
      86: areturn

  public void setLastIdentity(org.h2.value.Value);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field lastIdentity:Lorg/h2/value/Value;
       5: aload_0
       6: aload_1
       7: putfield      #9                  // Field lastScopeIdentity:Lorg/h2/value/Value;
      10: return

  public org.h2.value.Value getLastIdentity();
    Code:
       0: aload_0
       1: getfield      #8                  // Field lastIdentity:Lorg/h2/value/Value;
       4: areturn

  public void setLastScopeIdentity(org.h2.value.Value);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field lastScopeIdentity:Lorg/h2/value/Value;
       5: return

  public org.h2.value.Value getLastScopeIdentity();
    Code:
       0: aload_0
       1: getfield      #9                  // Field lastScopeIdentity:Lorg/h2/value/Value;
       4: areturn

  public void setLastTriggerIdentity(org.h2.value.Value);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #259                // Field lastTriggerIdentity:Lorg/h2/value/Value;
       5: return

  public org.h2.value.Value getLastTriggerIdentity();
    Code:
       0: aload_0
       1: getfield      #259                // Field lastTriggerIdentity:Lorg/h2/value/Value;
       4: areturn

  public org.h2.engine.GeneratedKeys getGeneratedKeys();
    Code:
       0: aload_0
       1: getfield      #260                // Field generatedKeys:Lorg/h2/engine/GeneratedKeys;
       4: ifnonnull     18
       7: aload_0
       8: new           #261                // class org/h2/engine/GeneratedKeys
      11: dup
      12: invokespecial #262                // Method org/h2/engine/GeneratedKeys."<init>":()V
      15: putfield      #260                // Field generatedKeys:Lorg/h2/engine/GeneratedKeys;
      18: aload_0
      19: getfield      #260                // Field generatedKeys:Lorg/h2/engine/GeneratedKeys;
      22: areturn

  public void addLogPos(int, int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field firstUncommittedLog:I
       4: iconst_m1
       5: if_icmpne     18
       8: aload_0
       9: iload_1
      10: putfield      #10                 // Field firstUncommittedLog:I
      13: aload_0
      14: iload_2
      15: putfield      #11                 // Field firstUncommittedPos:I
      18: return

  public int getFirstUncommittedLog();
    Code:
       0: aload_0
       1: getfield      #10                 // Field firstUncommittedLog:I
       4: ireturn

  void setAllCommitted();
    Code:
       0: aload_0
       1: iconst_m1
       2: putfield      #10                 // Field firstUncommittedLog:I
       5: aload_0
       6: iconst_m1
       7: putfield      #11                 // Field firstUncommittedPos:I
      10: return

  public boolean containsUncommitted();
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #188                // Method org/h2/engine/Database.getMvStore:()Lorg/h2/mvstore/db/MVTableEngine$Store;
       7: ifnull        23
      10: aload_0
      11: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      14: ifnull        21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn
      23: aload_0
      24: getfield      #10                 // Field firstUncommittedLog:I
      27: iconst_m1
      28: if_icmpeq     35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: ireturn

  public void addSavepoint(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #211                // Field savepoints:Ljava/util/HashMap;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      12: invokevirtual #66                 // Method org/h2/engine/Database.newStringMap:()Ljava/util/HashMap;
      15: putfield      #211                // Field savepoints:Ljava/util/HashMap;
      18: new           #212                // class org/h2/engine/Session$Savepoint
      21: dup
      22: invokespecial #213                // Method org/h2/engine/Session$Savepoint."<init>":()V
      25: astore_2
      26: aload_2
      27: aload_0
      28: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
      31: invokevirtual #148                // Method org/h2/engine/UndoLog.size:()I
      34: putfield      #193                // Field org/h2/engine/Session$Savepoint.logIndex:I
      37: aload_0
      38: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      41: invokevirtual #188                // Method org/h2/engine/Database.getMvStore:()Lorg/h2/mvstore/db/MVTableEngine$Store;
      44: ifnull        55
      47: aload_2
      48: aload_0
      49: invokevirtual #214                // Method getStatementSavepoint:()J
      52: putfield      #195                // Field org/h2/engine/Session$Savepoint.transactionSavepoint:J
      55: aload_0
      56: getfield      #211                // Field savepoints:Ljava/util/HashMap;
      59: aload_1
      60: aload_2
      61: invokevirtual #73                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      64: pop
      65: return

  public void rollbackToSavepoint(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #134                // Method checkCommitRollback:()V
       4: aload_0
       5: aconst_null
       6: putfield      #135                // Field currentTransactionName:Ljava/lang/String;
       9: aload_0
      10: lconst_0
      11: putfield      #136                // Field transactionStart:J
      14: aload_0
      15: getfield      #211                // Field savepoints:Ljava/util/HashMap;
      18: ifnonnull     29
      21: ldc_w         #263                // int 90063
      24: aload_1
      25: invokestatic  #92                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      28: athrow
      29: aload_0
      30: getfield      #211                // Field savepoints:Ljava/util/HashMap;
      33: aload_1
      34: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #212                // class org/h2/engine/Session$Savepoint
      40: astore_2
      41: aload_2
      42: ifnonnull     53
      45: ldc_w         #263                // int 90063
      48: aload_1
      49: invokestatic  #92                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      52: athrow
      53: aload_0
      54: aload_2
      55: iconst_0
      56: invokevirtual #192                // Method rollbackTo:(Lorg/h2/engine/Session$Savepoint;Z)V
      59: return

  public void prepareCommit(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #145                // Method containsUncommitted:()Z
       4: ifeq          16
       7: aload_0
       8: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      11: aload_0
      12: aload_1
      13: invokevirtual #264                // Method org/h2/engine/Database.prepareCommit:(Lorg/h2/engine/Session;Ljava/lang/String;)V
      16: aload_0
      17: aload_1
      18: putfield      #135                // Field currentTransactionName:Ljava/lang/String;
      21: return

  public void setPreparedTransaction(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #135                // Field currentTransactionName:Ljava/lang/String;
       4: ifnull        37
       7: aload_0
       8: getfield      #135                // Field currentTransactionName:Ljava/lang/String;
      11: aload_1
      12: invokevirtual #56                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      15: ifeq          37
      18: iload_2
      19: ifeq          30
      22: aload_0
      23: iconst_0
      24: invokevirtual #265                // Method commit:(Z)V
      27: goto          136
      30: aload_0
      31: invokevirtual #217                // Method rollback:()V
      34: goto          136
      37: aload_0
      38: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      41: invokevirtual #266                // Method org/h2/engine/Database.getInDoubtTransactions:()Ljava/util/ArrayList;
      44: astore_3
      45: iload_2
      46: ifeq          53
      49: iconst_1
      50: goto          54
      53: iconst_2
      54: istore        4
      56: iconst_0
      57: istore        5
      59: aload_3
      60: ifnull        123
      63: aload_3
      64: invokevirtual #139                // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      67: astore        6
      69: aload         6
      71: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      76: ifeq          123
      79: aload         6
      81: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      86: checkcast     #267                // class org/h2/store/InDoubtTransaction
      89: astore        7
      91: aload         7
      93: invokeinterface #268,  1          // InterfaceMethod org/h2/store/InDoubtTransaction.getTransactionName:()Ljava/lang/String;
      98: aload_1
      99: invokevirtual #56                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     102: ifeq          120
     105: aload         7
     107: iload         4
     109: invokeinterface #269,  2          // InterfaceMethod org/h2/store/InDoubtTransaction.setState:(I)V
     114: iconst_1
     115: istore        5
     117: goto          123
     120: goto          69
     123: iload         5
     125: ifne          136
     128: ldc_w         #270                // int 90129
     131: aload_1
     132: invokestatic  #92                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
     135: athrow
     136: return

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #116                // Field closed:Z
       4: ireturn

  public void setThrottle(int);
    Code:
       0: aload_0
       1: getstatic     #177                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       4: iload_1
       5: i2l
       6: invokevirtual #179                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
       9: putfield      #271                // Field throttleNs:J
      12: return

  public void throttle();
    Code:
       0: aload_0
       1: getfield      #272                // Field currentCommandStart:J
       4: lconst_0
       5: lcmp
       6: ifne          16
       9: aload_0
      10: invokestatic  #14                 // Method java/lang/System.currentTimeMillis:()J
      13: putfield      #272                // Field currentCommandStart:J
      16: aload_0
      17: getfield      #271                // Field throttleNs:J
      20: lconst_0
      21: lcmp
      22: ifne          26
      25: return
      26: invokestatic  #176                // Method java/lang/System.nanoTime:()J
      29: lstore_1
      30: aload_0
      31: getfield      #273                // Field lastThrottle:J
      34: getstatic     #177                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      37: ldc2_w        #274                // long 50l
      40: invokevirtual #179                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      43: ladd
      44: lload_1
      45: lcmp
      46: ifle          50
      49: return
      50: aload_0
      51: lload_1
      52: aload_0
      53: getfield      #271                // Field throttleNs:J
      56: ladd
      57: putfield      #273                // Field lastThrottle:J
      60: getstatic     #276                // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      63: aload_0
      64: getfield      #271                // Field throttleNs:J
      67: invokevirtual #277                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      70: invokestatic  #278                // Method java/lang/Thread.sleep:(J)V
      73: goto          77
      76: astore_3
      77: return
    Exception table:
       from    to  target type
          60    73    76   Class java/lang/Exception

  public void setCurrentCommand(org.h2.command.Command, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #280                // Field currentCommand:Lorg/h2/command/Command;
       5: aload_1
       6: ifnull        24
       9: aload_1
      10: invokevirtual #281                // Method org/h2/command/Command.isQuery:()Z
      13: ifne          24
      16: aload_0
      17: invokevirtual #282                // Method getGeneratedKeys:()Lorg/h2/engine/GeneratedKeys;
      20: aload_2
      21: invokevirtual #283                // Method org/h2/engine/GeneratedKeys.clear:(Ljava/lang/Object;)V
      24: aload_0
      25: getfield      #26                 // Field queryTimeout:I
      28: ifle          63
      31: aload_1
      32: ifnull        63
      35: aload_0
      36: invokestatic  #14                 // Method java/lang/System.currentTimeMillis:()J
      39: putfield      #272                // Field currentCommandStart:J
      42: invokestatic  #176                // Method java/lang/System.nanoTime:()J
      45: lstore_3
      46: aload_0
      47: lload_3
      48: getstatic     #177                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      51: aload_0
      52: getfield      #26                 // Field queryTimeout:I
      55: i2l
      56: invokevirtual #179                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      59: ladd
      60: putfield      #215                // Field cancelAtNs:J
      63: return

  public void checkCanceled();
    Code:
       0: aload_0
       1: invokevirtual #284                // Method throttle:()V
       4: aload_0
       5: getfield      #215                // Field cancelAtNs:J
       8: lconst_0
       9: lcmp
      10: ifne          14
      13: return
      14: invokestatic  #176                // Method java/lang/System.nanoTime:()J
      17: lstore_1
      18: lload_1
      19: aload_0
      20: getfield      #215                // Field cancelAtNs:J
      23: lcmp
      24: iflt          39
      27: aload_0
      28: lconst_0
      29: putfield      #215                // Field cancelAtNs:J
      32: ldc_w         #285                // int 57014
      35: invokestatic  #186                // Method org/h2/message/DbException.get:(I)Lorg/h2/message/DbException;
      38: athrow
      39: return

  public long getCancel();
    Code:
       0: aload_0
       1: getfield      #215                // Field cancelAtNs:J
       4: lreturn

  public org.h2.command.Command getCurrentCommand();
    Code:
       0: aload_0
       1: getfield      #280                // Field currentCommand:Lorg/h2/command/Command;
       4: areturn

  public long getCurrentCommandStart();
    Code:
       0: aload_0
       1: getfield      #272                // Field currentCommandStart:J
       4: lreturn

  public boolean getAllowLiterals();
    Code:
       0: aload_0
       1: getfield      #286                // Field allowLiterals:Z
       4: ireturn

  public void setAllowLiterals(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #286                // Field allowLiterals:Z
       5: return

  public void setCurrentSchema(org.h2.schema.Schema);
    Code:
       0: aload_0
       1: dup
       2: getfield      #68                 // Field modificationId:I
       5: iconst_1
       6: iadd
       7: putfield      #68                 // Field modificationId:I
      10: aload_0
      11: aload_1
      12: invokevirtual #287                // Method org/h2/schema/Schema.getName:()Ljava/lang/String;
      15: putfield      #39                 // Field currentSchemaName:Ljava/lang/String;
      18: return

  public java.lang.String getCurrentSchemaName();
    Code:
       0: aload_0
       1: getfield      #39                 // Field currentSchemaName:Ljava/lang/String;
       4: areturn

  public void setCurrentSchemaName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: aload_1
       5: invokevirtual #288                // Method org/h2/engine/Database.getSchema:(Ljava/lang/String;)Lorg/h2/schema/Schema;
       8: astore_2
       9: aload_0
      10: aload_2
      11: invokevirtual #289                // Method setCurrentSchema:(Lorg/h2/schema/Schema;)V
      14: return

  public org.h2.jdbc.JdbcConnection createConnection(boolean);
    Code:
       0: iload_1
       1: ifeq          11
       4: ldc_w         #290                // String jdbc:columnlist:connection
       7: astore_2
       8: goto          15
      11: ldc_w         #291                // String jdbc:default:connection
      14: astore_2
      15: new           #292                // class org/h2/jdbc/JdbcConnection
      18: dup
      19: aload_0
      20: aload_0
      21: invokevirtual #293                // Method getUser:()Lorg/h2/engine/User;
      24: invokevirtual #294                // Method org/h2/engine/User.getName:()Ljava/lang/String;
      27: aload_2
      28: invokespecial #295                // Method org/h2/jdbc/JdbcConnection."<init>":(Lorg/h2/engine/SessionInterface;Ljava/lang/String;Ljava/lang/String;)V
      31: areturn

  public org.h2.store.DataHandler getDataHandler();
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: areturn

  public void removeAtCommit(org.h2.value.Value);
    Code:
       0: getstatic     #219                // Field org/h2/engine/SysProperties.CHECK:Z
       3: ifeq          21
       6: aload_1
       7: invokevirtual #172                // Method org/h2/value/Value.isLinkedToTable:()Z
      10: ifne          21
      13: aload_1
      14: invokevirtual #296                // Method org/h2/value/Value.toString:()Ljava/lang/String;
      17: invokestatic  #222                // Method org/h2/message/DbException.throwInternalError:(Ljava/lang/String;)Ljava/lang/RuntimeException;
      20: pop
      21: aload_0
      22: getfield      #187                // Field removeLobMap:Ljava/util/HashMap;
      25: ifnonnull     39
      28: aload_0
      29: new           #97                 // class java/util/HashMap
      32: dup
      33: invokespecial #98                 // Method java/util/HashMap."<init>":()V
      36: putfield      #187                // Field removeLobMap:Ljava/util/HashMap;
      39: aload_0
      40: getfield      #187                // Field removeLobMap:Ljava/util/HashMap;
      43: aload_1
      44: invokevirtual #296                // Method org/h2/value/Value.toString:()Ljava/lang/String;
      47: aload_1
      48: invokevirtual #73                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      51: pop
      52: return

  public void removeAtCommitStop(org.h2.value.Value);
    Code:
       0: aload_0
       1: getfield      #187                // Field removeLobMap:Ljava/util/HashMap;
       4: ifnull        19
       7: aload_0
       8: getfield      #187                // Field removeLobMap:Ljava/util/HashMap;
      11: aload_1
      12: invokevirtual #296                // Method org/h2/value/Value.toString:()Ljava/lang/String;
      15: invokevirtual #70                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public java.lang.String getNextSystemIdentifier(java.lang.String);
    Code:
       0: new           #86                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #87                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc_w         #297                // String _
      10: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: aload_0
      14: dup
      15: getfield      #298                // Field systemIdentifier:I
      18: dup_x1
      19: iconst_1
      20: iadd
      21: putfield      #298                // Field systemIdentifier:I
      24: invokevirtual #253                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      27: invokevirtual #91                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: astore_2
      31: aload_1
      32: aload_2
      33: invokevirtual #299                // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      36: ifne          0
      39: aload_2
      40: areturn

  public void addProcedure(org.h2.engine.Procedure);
    Code:
       0: aload_0
       1: getfield      #300                // Field procedures:Ljava/util/HashMap;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      12: invokevirtual #66                 // Method org/h2/engine/Database.newStringMap:()Ljava/util/HashMap;
      15: putfield      #300                // Field procedures:Ljava/util/HashMap;
      18: aload_0
      19: getfield      #300                // Field procedures:Ljava/util/HashMap;
      22: aload_1
      23: invokevirtual #301                // Method org/h2/engine/Procedure.getName:()Ljava/lang/String;
      26: aload_1
      27: invokevirtual #73                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      30: pop
      31: return

  public void removeProcedure(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #300                // Field procedures:Ljava/util/HashMap;
       4: ifnull        16
       7: aload_0
       8: getfield      #300                // Field procedures:Ljava/util/HashMap;
      11: aload_1
      12: invokevirtual #70                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: return

  public org.h2.engine.Procedure getProcedure(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #300                // Field procedures:Ljava/util/HashMap;
       4: ifnonnull     9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #300                // Field procedures:Ljava/util/HashMap;
      13: aload_1
      14: invokevirtual #75                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #302                // class org/h2/engine/Procedure
      20: areturn

  public void setSchemaSearchPath(java.lang.String[]);
    Code:
       0: aload_0
       1: dup
       2: getfield      #68                 // Field modificationId:I
       5: iconst_1
       6: iadd
       7: putfield      #68                 // Field modificationId:I
      10: aload_0
      11: aload_1
      12: putfield      #303                // Field schemaSearchPath:[Ljava/lang/String;
      15: return

  public java.lang.String[] getSchemaSearchPath();
    Code:
       0: aload_0
       1: getfield      #303                // Field schemaSearchPath:[Ljava/lang/String;
       4: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #3                  // Field serialId:I
       4: ireturn

  public java.lang.String toString();
    Code:
       0: new           #86                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #87                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc_w         #304                // String #
      10: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: aload_0
      14: getfield      #3                  // Field serialId:I
      17: invokevirtual #253                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      20: ldc_w         #305                // String  (user:
      23: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #32                 // Field user:Lorg/h2/engine/User;
      30: invokevirtual #294                // Method org/h2/engine/User.getName:()Ljava/lang/String;
      33: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: ldc_w         #306                // String )
      39: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #91                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: areturn

  public void setUndoLogEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field undoLogEnabled:Z
       5: return

  public void setRedoLogBinary(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field redoLogBinary:Z
       5: return

  public boolean isUndoLogEnabled();
    Code:
       0: aload_0
       1: getfield      #12                 // Field undoLogEnabled:Z
       4: ireturn

  public void begin();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #159                // Field autoCommitAtTransactionEnd:Z
       5: aload_0
       6: iconst_0
       7: putfield      #6                  // Field autoCommit:Z
      10: return

  public long getSessionStart();
    Code:
       0: aload_0
       1: getfield      #15                 // Field sessionStart:J
       4: lreturn

  public long getTransactionStart();
    Code:
       0: aload_0
       1: getfield      #136                // Field transactionStart:J
       4: lconst_0
       5: lcmp
       6: ifne          16
       9: aload_0
      10: invokestatic  #14                 // Method java/lang/System.currentTimeMillis:()J
      13: putfield      #136                // Field transactionStart:J
      16: aload_0
      17: getfield      #136                // Field transactionStart:J
      20: lreturn

  public org.h2.table.Table[] getLocks();
    Code:
       0: invokestatic  #4                  // Method org/h2/util/New.arrayList:()Ljava/util/ArrayList;
       3: astore_1
       4: aload_0
       5: getfield      #5                  // Field locks:Ljava/util/ArrayList;
       8: invokevirtual #139                // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          48
      21: aload_2
      22: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #81                 // class org/h2/table/Table
      30: astore_3
      31: aload_1
      32: aload_3
      33: invokevirtual #153                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      36: pop
      37: goto          45
      40: astore        4
      42: goto          48
      45: goto          12
      48: aload_1
      49: iconst_0
      50: anewarray     #81                 // class org/h2/table/Table
      53: invokevirtual #307                // Method java/util/ArrayList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      56: checkcast     #308                // class "[Lorg/h2/table/Table;"
      59: areturn
    Exception table:
       from    to  target type
          31    37    40   Class java/lang/Exception

  public void waitIfExclusiveModeEnabled();
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #168                // Method org/h2/engine/Database.getLobSession:()Lorg/h2/engine/Session;
       7: aload_0
       8: if_acmpne     12
      11: return
      12: aload_0
      13: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      16: invokevirtual #309                // Method org/h2/engine/Database.getExclusiveSession:()Lorg/h2/engine/Session;
      19: astore_1
      20: aload_1
      21: ifnull        55
      24: aload_1
      25: aload_0
      26: if_acmpne     32
      29: goto          55
      32: aload_1
      33: invokestatic  #169                // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      36: ifeq          42
      39: goto          55
      42: ldc2_w        #310                // long 100l
      45: invokestatic  #278                // Method java/lang/Thread.sleep:(J)V
      48: goto          52
      51: astore_2
      52: goto          12
      55: return
    Exception table:
       from    to  target type
          42    48    51   Class java/lang/InterruptedException

  public java.util.Map<java.lang.Object, org.h2.index.ViewIndex> getViewIndexCache(boolean);
    Code:
       0: iload_1
       1: ifeq          27
       4: aload_0
       5: getfield      #128                // Field subQueryIndexCache:Ljava/util/HashMap;
       8: ifnonnull     22
      11: aload_0
      12: new           #97                 // class java/util/HashMap
      15: dup
      16: invokespecial #98                 // Method java/util/HashMap."<init>":()V
      19: putfield      #128                // Field subQueryIndexCache:Ljava/util/HashMap;
      22: aload_0
      23: getfield      #128                // Field subQueryIndexCache:Ljava/util/HashMap;
      26: areturn
      27: aload_0
      28: getfield      #313                // Field viewIndexCache:Lorg/h2/util/SmallLRUCache;
      31: astore_2
      32: aload_2
      33: ifnonnull     47
      36: aload_0
      37: bipush        64
      39: invokestatic  #120                // Method org/h2/util/SmallLRUCache.newInstance:(I)Lorg/h2/util/SmallLRUCache;
      42: dup
      43: astore_2
      44: putfield      #313                // Field viewIndexCache:Lorg/h2/util/SmallLRUCache;
      47: aload_2
      48: areturn

  public void addTemporaryResult(org.h2.result.ResultInterface);
    Code:
       0: aload_1
       1: invokeinterface #314,  1          // InterfaceMethod org/h2/result/ResultInterface.needToClose:()Z
       6: ifne          10
       9: return
      10: aload_0
      11: getfield      #315                // Field temporaryResults:Ljava/util/HashSet;
      14: ifnonnull     28
      17: aload_0
      18: new           #316                // class java/util/HashSet
      21: dup
      22: invokespecial #317                // Method java/util/HashSet."<init>":()V
      25: putfield      #315                // Field temporaryResults:Ljava/util/HashSet;
      28: aload_0
      29: getfield      #315                // Field temporaryResults:Ljava/util/HashSet;
      32: invokevirtual #318                // Method java/util/HashSet.size:()I
      35: bipush        100
      37: if_icmpge     49
      40: aload_0
      41: getfield      #315                // Field temporaryResults:Ljava/util/HashSet;
      44: aload_1
      45: invokevirtual #319                // Method java/util/HashSet.add:(Ljava/lang/Object;)Z
      48: pop
      49: return

  private void closeTemporaryResults();
    Code:
       0: aload_0
       1: getfield      #315                // Field temporaryResults:Ljava/util/HashSet;
       4: ifnull        48
       7: aload_0
       8: getfield      #315                // Field temporaryResults:Ljava/util/HashSet;
      11: invokevirtual #163                // Method java/util/HashSet.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #140,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          43
      24: aload_1
      25: invokeinterface #141,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #320                // class org/h2/result/ResultInterface
      33: astore_2
      34: aload_2
      35: invokeinterface #321,  1          // InterfaceMethod org/h2/result/ResultInterface.close:()V
      40: goto          15
      43: aload_0
      44: aconst_null
      45: putfield      #315                // Field temporaryResults:Ljava/util/HashSet;
      48: return

  public void setQueryTimeout(int);
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #24                 // Method org/h2/engine/Database.getSettings:()Lorg/h2/engine/DbSettings;
       7: getfield      #25                 // Field org/h2/engine/DbSettings.maxQueryTimeout:I
      10: istore_2
      11: iload_2
      12: ifeq          26
      15: iload_2
      16: iload_1
      17: if_icmplt     24
      20: iload_1
      21: ifne          26
      24: iload_2
      25: istore_1
      26: aload_0
      27: iload_1
      28: putfield      #26                 // Field queryTimeout:I
      31: aload_0
      32: lconst_0
      33: putfield      #215                // Field cancelAtNs:J
      36: return

  public int getQueryTimeout();
    Code:
       0: aload_0
       1: getfield      #26                 // Field queryTimeout:I
       4: ireturn

  public void setWaitForLock(org.h2.table.Table, java.lang.Thread);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #322                // Field waitForLock:Lorg/h2/table/Table;
       5: aload_0
       6: aload_2
       7: putfield      #323                // Field waitForLockThread:Ljava/lang/Thread;
      10: return

  public org.h2.table.Table getWaitForLock();
    Code:
       0: aload_0
       1: getfield      #322                // Field waitForLock:Lorg/h2/table/Table;
       4: areturn

  public java.lang.Thread getWaitForLockThread();
    Code:
       0: aload_0
       1: getfield      #323                // Field waitForLockThread:Ljava/lang/Thread;
       4: areturn

  public int getModificationId();
    Code:
       0: aload_0
       1: getfield      #68                 // Field modificationId:I
       4: ireturn

  public boolean isReconnectNeeded(boolean);
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #324                // Method org/h2/engine/Database.isReconnectNeeded:()Z
       7: istore_2
       8: iload_2
       9: ifeq          14
      12: iconst_1
      13: ireturn
      14: iload_1
      15: ifeq          30
      18: aload_0
      19: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      22: invokevirtual #325                // Method org/h2/engine/Database.beforeWriting:()Z
      25: ifeq          32
      28: iconst_0
      29: ireturn
      30: iconst_0
      31: ireturn
      32: goto          0

  public void afterWriting();
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #326                // Method org/h2/engine/Database.afterWriting:()V
       7: return

  public org.h2.engine.SessionInterface reconnect(boolean);
    Code:
       0: aload_0
       1: invokevirtual #327                // Method readSessionState:()V
       4: aload_0
       5: invokevirtual #328                // Method close:()V
       8: invokestatic  #329                // Method org/h2/engine/Engine.getInstance:()Lorg/h2/engine/Engine;
      11: aload_0
      12: getfield      #330                // Field connectionInfo:Lorg/h2/engine/ConnectionInfo;
      15: invokevirtual #331                // Method org/h2/engine/Engine.createSession:(Lorg/h2/engine/ConnectionInfo;)Lorg/h2/engine/Session;
      18: astore_2
      19: aload_2
      20: aload_0
      21: getfield      #332                // Field sessionState:Ljava/util/ArrayList;
      24: putfield      #332                // Field sessionState:Ljava/util/ArrayList;
      27: aload_2
      28: invokevirtual #333                // Method recreateSessionState:()V
      31: iload_1
      32: ifeq          48
      35: aload_2
      36: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      39: invokevirtual #325                // Method org/h2/engine/Database.beforeWriting:()Z
      42: ifne          48
      45: goto          35
      48: aload_2
      49: areturn

  public void setConnectionInfo(org.h2.engine.ConnectionInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #330                // Field connectionInfo:Lorg/h2/engine/ConnectionInfo;
       5: return

  public org.h2.value.Value getTransactionId();
    Code:
       0: aload_0
       1: getfield      #23                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #188                // Method org/h2/engine/Database.getMvStore:()Lorg/h2/mvstore/db/MVTableEngine$Store;
       7: ifnull        36
      10: aload_0
      11: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      14: ifnonnull     21
      17: getstatic     #69                 // Field org/h2/value/ValueNull.INSTANCE:Lorg/h2/value/ValueNull;
      20: areturn
      21: aload_0
      22: invokevirtual #334                // Method getTransaction:()Lorg/h2/mvstore/db/TransactionStore$Transaction;
      25: invokevirtual #335                // Method org/h2/mvstore/db/TransactionStore$Transaction.getId:()I
      28: i2l
      29: invokestatic  #336                // Method java/lang/Long.toString:(J)Ljava/lang/String;
      32: invokestatic  #337                // Method org/h2/value/ValueString.get:(Ljava/lang/String;)Lorg/h2/value/Value;
      35: areturn
      36: aload_0
      37: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      40: invokevirtual #338                // Method org/h2/engine/Database.isPersistent:()Z
      43: ifne          50
      46: getstatic     #69                 // Field org/h2/value/ValueNull.INSTANCE:Lorg/h2/value/ValueNull;
      49: areturn
      50: aload_0
      51: getfield      #31                 // Field undoLog:Lorg/h2/engine/UndoLog;
      54: invokevirtual #148                // Method org/h2/engine/UndoLog.size:()I
      57: ifne          64
      60: getstatic     #69                 // Field org/h2/value/ValueNull.INSTANCE:Lorg/h2/value/ValueNull;
      63: areturn
      64: new           #86                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #87                 // Method java/lang/StringBuilder."<init>":()V
      71: aload_0
      72: getfield      #10                 // Field firstUncommittedLog:I
      75: invokevirtual #253                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      78: ldc_w         #339                // String -
      81: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: aload_0
      85: getfield      #11                 // Field firstUncommittedPos:I
      88: invokevirtual #253                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      91: ldc_w         #339                // String -
      94: invokevirtual #89                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: aload_0
      98: getfield      #33                 // Field id:I
     101: invokevirtual #253                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     104: invokevirtual #91                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: invokestatic  #337                // Method org/h2/value/ValueString.get:(Ljava/lang/String;)Lorg/h2/value/Value;
     110: areturn

  public int nextObjectId();
    Code:
       0: aload_0
       1: dup
       2: getfield      #340                // Field objectId:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #340                // Field objectId:I
      11: ireturn

  public boolean isRedoLogBinaryEnabled();
    Code:
       0: aload_0
       1: getfield      #13                 // Field redoLogBinary:Z
       4: ireturn

  public org.h2.mvstore.db.TransactionStore$Transaction getTransaction();
    Code:
       0: aload_0
       1: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
       4: ifnonnull     61
       7: aload_0
       8: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      11: invokevirtual #188                // Method org/h2/engine/Database.getMvStore:()Lorg/h2/mvstore/db/MVTableEngine$Store;
      14: invokevirtual #341                // Method org/h2/mvstore/db/MVTableEngine$Store.getStore:()Lorg/h2/mvstore/MVStore;
      17: invokevirtual #342                // Method org/h2/mvstore/MVStore.isClosed:()Z
      20: ifeq          37
      23: aload_0
      24: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      27: invokevirtual #343                // Method org/h2/engine/Database.shutdownImmediately:()V
      30: ldc_w         #344                // int 90098
      33: invokestatic  #186                // Method org/h2/message/DbException.get:(I)Lorg/h2/message/DbException;
      36: athrow
      37: aload_0
      38: aload_0
      39: getfield      #23                 // Field database:Lorg/h2/engine/Database;
      42: invokevirtual #188                // Method org/h2/engine/Database.getMvStore:()Lorg/h2/mvstore/db/MVTableEngine$Store;
      45: invokevirtual #345                // Method org/h2/mvstore/db/MVTableEngine$Store.getTransactionStore:()Lorg/h2/mvstore/db/TransactionStore;
      48: invokevirtual #346                // Method org/h2/mvstore/db/TransactionStore.begin:()Lorg/h2/mvstore/db/TransactionStore$Transaction;
      51: putfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      54: aload_0
      55: ldc2_w        #16                 // long -1l
      58: putfield      #22                 // Field startStatement:J
      61: aload_0
      62: getfield      #137                // Field transaction:Lorg/h2/mvstore/db/TransactionStore$Transaction;
      65: areturn

  public long getStatementSavepoint();
    Code:
       0: aload_0
       1: getfield      #22                 // Field startStatement:J
       4: ldc2_w        #16                 // long -1l
       7: lcmp
       8: ifne          22
      11: aload_0
      12: aload_0
      13: invokevirtual #334                // Method getTransaction:()Lorg/h2/mvstore/db/TransactionStore$Transaction;
      16: invokevirtual #347                // Method org/h2/mvstore/db/TransactionStore$Transaction.setSavepoint:()J
      19: putfield      #22                 // Field startStatement:J
      22: aload_0
      23: getfield      #22                 // Field startStatement:J
      26: lreturn

  public void startStatementWithinTransaction();
    Code:
       0: aload_0
       1: ldc2_w        #16                 // long -1l
       4: putfield      #22                 // Field startStatement:J
       7: return

  public void endStatement();
    Code:
       0: aload_0
       1: ldc2_w        #16                 // long -1l
       4: putfield      #22                 // Field startStatement:J
       7: aload_0
       8: invokespecial #348                // Method closeTemporaryResults:()V
      11: return

  public void clearViewIndexCache();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #313                // Field viewIndexCache:Lorg/h2/util/SmallLRUCache;
       5: return

  public void addTemporaryLob(org.h2.value.Value);
    Code:
       0: aload_1
       1: invokevirtual #349                // Method org/h2/value/Value.getType:()I
       4: bipush        16
       6: if_icmpeq     19
       9: aload_1
      10: invokevirtual #349                // Method org/h2/value/Value.getType:()I
      13: bipush        15
      15: if_icmpeq     19
      18: return
      19: aload_1
      20: invokevirtual #350                // Method org/h2/value/Value.getTableId:()I
      23: bipush        -3
      25: if_icmpeq     37
      28: aload_1
      29: invokevirtual #350                // Method org/h2/value/Value.getTableId:()I
      32: bipush        -2
      34: if_icmpne     74
      37: aload_0
      38: getfield      #174                // Field temporaryResultLobs:Ljava/util/LinkedList;
      41: ifnonnull     55
      44: aload_0
      45: new           #351                // class java/util/LinkedList
      48: dup
      49: invokespecial #352                // Method java/util/LinkedList."<init>":()V
      52: putfield      #174                // Field temporaryResultLobs:Ljava/util/LinkedList;
      55: aload_0
      56: getfield      #174                // Field temporaryResultLobs:Ljava/util/LinkedList;
      59: new           #181                // class org/h2/engine/Session$TimeoutValue
      62: dup
      63: aload_1
      64: invokespecial #353                // Method org/h2/engine/Session$TimeoutValue."<init>":(Lorg/h2/value/Value;)V
      67: invokevirtual #354                // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z
      70: pop
      71: goto          101
      74: aload_0
      75: getfield      #171                // Field temporaryLobs:Ljava/util/ArrayList;
      78: ifnonnull     92
      81: aload_0
      82: new           #62                 // class java/util/ArrayList
      85: dup
      86: invokespecial #63                 // Method java/util/ArrayList."<init>":()V
      89: putfield      #171                // Field temporaryLobs:Ljava/util/ArrayList;
      92: aload_0
      93: getfield      #171                // Field temporaryLobs:Ljava/util/ArrayList;
      96: aload_1
      97: invokevirtual #153                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     100: pop
     101: return

  public boolean isRemote();
    Code:
       0: iconst_0
       1: ireturn

  public void markTableForAnalyze(org.h2.table.Table);
    Code:
       0: aload_0
       1: getfield      #162                // Field tablesToAnalyze:Ljava/util/HashSet;
       4: ifnonnull     18
       7: aload_0
       8: new           #316                // class java/util/HashSet
      11: dup
      12: invokespecial #317                // Method java/util/HashSet."<init>":()V
      15: putfield      #162                // Field tablesToAnalyze:Ljava/util/HashSet;
      18: aload_0
      19: getfield      #162                // Field tablesToAnalyze:Ljava/util/HashSet;
      22: aload_1
      23: invokevirtual #319                // Method java/util/HashSet.add:(Ljava/lang/Object;)Z
      26: pop
      27: return

  public org.h2.util.ColumnNamerConfiguration getColumnNamerConfiguration();
    Code:
       0: aload_0
       1: getfield      #41                 // Field columnNamerConfiguration:Lorg/h2/util/ColumnNamerConfiguration;
       4: areturn

  public void setColumnNamerConfiguration(org.h2.util.ColumnNamerConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field columnNamerConfiguration:Lorg/h2/util/ColumnNamerConfiguration;
       5: return

  public boolean isSupportsGeneratedKeys();
    Code:
       0: iconst_1
       1: ireturn

  public void readSessionState();
    Code:
       0: aload_0
       1: invokespecial #355                // Method org/h2/engine/SessionWithState.readSessionState:()V
       4: return

  static {};
    Code:
       0: ldc_w         #356                // class org/h2/engine/Session
       3: invokevirtual #357                // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #51                 // Field $assertionsDisabled:Z
      17: return
}
