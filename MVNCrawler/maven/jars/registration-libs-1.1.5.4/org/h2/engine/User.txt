Compiled from "User.java"
public class org.h2.engine.User extends org.h2.engine.RightOwner {
  private final boolean systemUser;

  private byte[] salt;

  private byte[] passwordHash;

  private boolean admin;

  public org.h2.engine.User(org.h2.engine.Database, int, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: bipush        13
       6: invokespecial #1                  // Method org/h2/engine/RightOwner."<init>":(Lorg/h2/engine/Database;ILjava/lang/String;I)V
       9: aload_0
      10: iload         4
      12: putfield      #2                  // Field systemUser:Z
      15: return

  public void setAdmin(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field admin:Z
       5: return

  public boolean isAdmin();
    Code:
       0: aload_0
       1: getfield      #3                  // Field admin:Z
       4: ireturn

  public void setSaltAndHash(byte[], byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field salt:[B
       5: aload_0
       6: aload_2
       7: putfield      #5                  // Field passwordHash:[B
      10: return

  public void setUserPasswordHash(byte[]);
    Code:
       0: aload_1
       1: ifnull        49
       4: aload_1
       5: arraylength
       6: ifne          22
       9: aload_0
      10: aload_0
      11: aload_1
      12: dup_x1
      13: putfield      #5                  // Field passwordHash:[B
      16: putfield      #4                  // Field salt:[B
      19: goto          49
      22: aload_0
      23: bipush        8
      25: newarray       byte
      27: putfield      #4                  // Field salt:[B
      30: aload_0
      31: getfield      #4                  // Field salt:[B
      34: invokestatic  #6                  // Method org/h2/util/MathUtils.randomBytes:([B)V
      37: aload_0
      38: aload_1
      39: aload_0
      40: getfield      #4                  // Field salt:[B
      43: invokestatic  #7                  // Method org/h2/security/SHA256.getHashWithSalt:([B[B)[B
      46: putfield      #5                  // Field passwordHash:[B
      49: return

  public java.lang.String getCreateSQLForCopy(org.h2.table.Table, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method toString:()Ljava/lang/String;
       4: invokestatic  #9                  // Method org/h2/message/DbException.throwInternalError:(Ljava/lang/String;)Ljava/lang/RuntimeException;
       7: athrow

  public java.lang.String getCreateSQL();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #10                 // Method getCreateSQL:(Z)Ljava/lang/String;
       5: areturn

  public java.lang.String getDropSQL();
    Code:
       0: aconst_null
       1: areturn

  public void checkRight(org.h2.table.Table, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #11                 // Method hasRight:(Lorg/h2/table/Table;I)Z
       6: ifne          19
       9: ldc           #12                 // int 90096
      11: aload_1
      12: invokevirtual #13                 // Method org/h2/table/Table.getSQL:()Ljava/lang/String;
      15: invokestatic  #14                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      18: athrow
      19: return

  public boolean hasRight(org.h2.table.Table, int);
    Code:
       0: iload_2
       1: iconst_1
       2: if_icmpeq     20
       5: aload_0
       6: getfield      #2                  // Field systemUser:Z
       9: ifne          20
      12: aload_1
      13: ifnull        20
      16: aload_1
      17: invokevirtual #15                 // Method org/h2/table/Table.checkWritingAllowed:()V
      20: aload_0
      21: getfield      #3                  // Field admin:Z
      24: ifeq          29
      27: iconst_1
      28: ireturn
      29: aload_0
      30: getfield      #16                 // Field database:Lorg/h2/engine/Database;
      33: invokevirtual #17                 // Method org/h2/engine/Database.getPublicRole:()Lorg/h2/engine/Role;
      36: astore_3
      37: aload_3
      38: aload_1
      39: iload_2
      40: invokevirtual #18                 // Method org/h2/engine/Role.isRightGrantedRecursive:(Lorg/h2/table/Table;I)Z
      43: ifeq          48
      46: iconst_1
      47: ireturn
      48: aload_1
      49: instanceof    #19                 // class org/h2/table/MetaTable
      52: ifne          62
      55: aload_1
      56: instanceof    #20                 // class org/h2/table/RangeTable
      59: ifeq          64
      62: iconst_1
      63: ireturn
      64: aload_1
      65: ifnull        137
      68: aload_0
      69: aconst_null
      70: bipush        16
      72: invokevirtual #11                 // Method hasRight:(Lorg/h2/table/Table;I)Z
      75: ifeq          80
      78: iconst_1
      79: ireturn
      80: aload_1
      81: invokevirtual #21                 // Method org/h2/table/Table.getTableType:()Lorg/h2/table/TableType;
      84: astore        4
      86: getstatic     #22                 // Field org/h2/table/TableType.VIEW:Lorg/h2/table/TableType;
      89: aload         4
      91: if_acmpne     114
      94: aload_1
      95: checkcast     #23                 // class org/h2/table/TableView
      98: astore        5
     100: aload         5
     102: invokevirtual #24                 // Method org/h2/table/TableView.getOwner:()Lorg/h2/engine/User;
     105: aload_0
     106: if_acmpne     111
     109: iconst_1
     110: ireturn
     111: goto          121
     114: aload         4
     116: ifnonnull     121
     119: iconst_1
     120: ireturn
     121: aload_1
     122: invokevirtual #25                 // Method org/h2/table/Table.isTemporary:()Z
     125: ifeq          137
     128: aload_1
     129: invokevirtual #26                 // Method org/h2/table/Table.isGlobalTemporary:()Z
     132: ifne          137
     135: iconst_1
     136: ireturn
     137: aload_0
     138: aload_1
     139: iload_2
     140: invokevirtual #27                 // Method isRightGrantedRecursive:(Lorg/h2/table/Table;I)Z
     143: ireturn

  public java.lang.String getCreateSQL(boolean);
    Code:
       0: new           #28                 // class java/lang/StringBuilder
       3: dup
       4: ldc           #29                 // String CREATE USER IF NOT EXISTS
       6: invokespecial #30                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: astore_2
      10: aload_2
      11: aload_0
      12: invokevirtual #31                 // Method getSQL:()Ljava/lang/String;
      15: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: pop
      19: aload_0
      20: getfield      #33                 // Field comment:Ljava/lang/String;
      23: ifnull        43
      26: aload_2
      27: ldc           #34                 // String  COMMENT
      29: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: aload_0
      33: getfield      #33                 // Field comment:Ljava/lang/String;
      36: invokestatic  #35                 // Method org/h2/util/StringUtils.quoteStringSQL:(Ljava/lang/String;)Ljava/lang/String;
      39: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: pop
      43: iload_1
      44: ifeq          87
      47: aload_2
      48: ldc           #36                 // String  SALT \'
      50: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: aload_0
      54: getfield      #4                  // Field salt:[B
      57: invokestatic  #37                 // Method org/h2/util/StringUtils.convertBytesToHex:([B)Ljava/lang/String;
      60: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: ldc           #38                 // String \' HASH \'
      65: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: aload_0
      69: getfield      #5                  // Field passwordHash:[B
      72: invokestatic  #37                 // Method org/h2/util/StringUtils.convertBytesToHex:([B)Ljava/lang/String;
      75: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: bipush        39
      80: invokevirtual #39                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      83: pop
      84: goto          94
      87: aload_2
      88: ldc           #40                 // String  PASSWORD \'\'
      90: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: pop
      94: aload_0
      95: getfield      #3                  // Field admin:Z
      98: ifeq          108
     101: aload_2
     102: ldc           #41                 // String  ADMIN
     104: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: pop
     108: aload_2
     109: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     112: areturn

  boolean validateUserPasswordHash(byte[]);
    Code:
       0: aload_1
       1: arraylength
       2: ifne          15
       5: aload_0
       6: getfield      #5                  // Field passwordHash:[B
       9: arraylength
      10: ifne          15
      13: iconst_1
      14: ireturn
      15: aload_1
      16: arraylength
      17: ifne          31
      20: aload_0
      21: invokevirtual #43                 // Method getName:()Ljava/lang/String;
      24: iconst_0
      25: newarray       char
      27: invokestatic  #44                 // Method org/h2/security/SHA256.getKeyPasswordHash:(Ljava/lang/String;[C)[B
      30: astore_1
      31: aload_1
      32: aload_0
      33: getfield      #4                  // Field salt:[B
      36: invokestatic  #7                  // Method org/h2/security/SHA256.getHashWithSalt:([B[B)[B
      39: astore_2
      40: aload_2
      41: aload_0
      42: getfield      #5                  // Field passwordHash:[B
      45: invokestatic  #45                 // Method org/h2/util/Utils.compareSecure:([B[B)Z
      48: ireturn

  public void checkAdmin();
    Code:
       0: aload_0
       1: getfield      #3                  // Field admin:Z
       4: ifne          13
       7: ldc           #46                 // int 90040
       9: invokestatic  #47                 // Method org/h2/message/DbException.get:(I)Lorg/h2/message/DbException;
      12: athrow
      13: return

  public void checkSchemaAdmin();
    Code:
       0: aload_0
       1: aconst_null
       2: bipush        16
       4: invokevirtual #11                 // Method hasRight:(Lorg/h2/table/Table;I)Z
       7: ifne          16
      10: ldc           #46                 // int 90040
      12: invokestatic  #47                 // Method org/h2/message/DbException.get:(I)Lorg/h2/message/DbException;
      15: athrow
      16: return

  public int getType();
    Code:
       0: iconst_2
       1: ireturn

  public java.util.ArrayList<org.h2.engine.DbObject> getChildren();
    Code:
       0: invokestatic  #48                 // Method org/h2/util/New.arrayList:()Ljava/util/ArrayList;
       3: astore_1
       4: aload_0
       5: getfield      #16                 // Field database:Lorg/h2/engine/Database;
       8: invokevirtual #49                 // Method org/h2/engine/Database.getAllRights:()Ljava/util/ArrayList;
      11: invokevirtual #50                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      14: astore_2
      15: aload_2
      16: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          51
      24: aload_2
      25: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #53                 // class org/h2/engine/Right
      33: astore_3
      34: aload_3
      35: invokevirtual #54                 // Method org/h2/engine/Right.getGrantee:()Lorg/h2/engine/DbObject;
      38: aload_0
      39: if_acmpne     48
      42: aload_1
      43: aload_3
      44: invokevirtual #55                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      47: pop
      48: goto          15
      51: aload_0
      52: getfield      #16                 // Field database:Lorg/h2/engine/Database;
      55: invokevirtual #56                 // Method org/h2/engine/Database.getAllSchemas:()Ljava/util/ArrayList;
      58: invokevirtual #50                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      61: astore_2
      62: aload_2
      63: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      68: ifeq          98
      71: aload_2
      72: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      77: checkcast     #57                 // class org/h2/schema/Schema
      80: astore_3
      81: aload_3
      82: invokevirtual #58                 // Method org/h2/schema/Schema.getOwner:()Lorg/h2/engine/User;
      85: aload_0
      86: if_acmpne     95
      89: aload_1
      90: aload_3
      91: invokevirtual #55                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      94: pop
      95: goto          62
      98: aload_1
      99: areturn

  public void removeChildrenAndResources(org.h2.engine.Session);
    Code:
       0: aload_0
       1: getfield      #16                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #49                 // Method org/h2/engine/Database.getAllRights:()Ljava/util/ArrayList;
       7: invokevirtual #50                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      10: astore_2
      11: aload_2
      12: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          50
      20: aload_2
      21: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #53                 // class org/h2/engine/Right
      29: astore_3
      30: aload_3
      31: invokevirtual #54                 // Method org/h2/engine/Right.getGrantee:()Lorg/h2/engine/DbObject;
      34: aload_0
      35: if_acmpne     47
      38: aload_0
      39: getfield      #16                 // Field database:Lorg/h2/engine/Database;
      42: aload_1
      43: aload_3
      44: invokevirtual #59                 // Method org/h2/engine/Database.removeDatabaseObject:(Lorg/h2/engine/Session;Lorg/h2/engine/DbObject;)V
      47: goto          11
      50: aload_0
      51: getfield      #16                 // Field database:Lorg/h2/engine/Database;
      54: aload_1
      55: aload_0
      56: invokevirtual #60                 // Method getId:()I
      59: invokevirtual #61                 // Method org/h2/engine/Database.removeMeta:(Lorg/h2/engine/Session;I)V
      62: aload_0
      63: aconst_null
      64: putfield      #4                  // Field salt:[B
      67: aload_0
      68: getfield      #5                  // Field passwordHash:[B
      71: iconst_0
      72: invokestatic  #62                 // Method java/util/Arrays.fill:([BB)V
      75: aload_0
      76: aconst_null
      77: putfield      #5                  // Field passwordHash:[B
      80: aload_0
      81: invokevirtual #63                 // Method invalidate:()V
      84: return

  public void checkRename();
    Code:
       0: return

  public void checkOwnsNoSchemas();
    Code:
       0: aload_0
       1: getfield      #16                 // Field database:Lorg/h2/engine/Database;
       4: invokevirtual #56                 // Method org/h2/engine/Database.getAllSchemas:()Ljava/util/ArrayList;
       7: invokevirtual #50                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      10: astore_1
      11: aload_1
      12: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          65
      20: aload_1
      21: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #57                 // class org/h2/schema/Schema
      29: astore_2
      30: aload_0
      31: aload_2
      32: invokevirtual #58                 // Method org/h2/schema/Schema.getOwner:()Lorg/h2/engine/User;
      35: if_acmpne     62
      38: ldc           #64                 // int 90107
      40: iconst_2
      41: anewarray     #65                 // class java/lang/String
      44: dup
      45: iconst_0
      46: aload_0
      47: invokevirtual #43                 // Method getName:()Ljava/lang/String;
      50: aastore
      51: dup
      52: iconst_1
      53: aload_2
      54: invokevirtual #66                 // Method org/h2/schema/Schema.getName:()Ljava/lang/String;
      57: aastore
      58: invokestatic  #67                 // Method org/h2/message/DbException.get:(I[Ljava/lang/String;)Lorg/h2/message/DbException;
      61: athrow
      62: goto          11
      65: return
}
