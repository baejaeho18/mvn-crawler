Compiled from "Task.java"
public abstract class org.h2.util.Task implements java.lang.Runnable {
  private static final java.util.concurrent.atomic.AtomicInteger counter;

  public volatile boolean stop;

  private volatile java.lang.Object result;

  private volatile boolean finished;

  private java.lang.Thread thread;

  private volatile java.lang.Exception ex;

  public org.h2.util.Task();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public abstract void call() throws java.lang.Exception;

  public void run();
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method call:()V
       4: goto          13
       7: astore_1
       8: aload_0
       9: aload_1
      10: putfield      #4                  // Field ex:Ljava/lang/Exception;
      13: aload_0
      14: iconst_1
      15: putfield      #5                  // Field finished:Z
      18: return
    Exception table:
       from    to  target type
           0     4     7   Class java/lang/Exception

  public org.h2.util.Task execute();
    Code:
       0: aload_0
       1: new           #6                  // class java/lang/StringBuilder
       4: dup
       5: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
       8: aload_0
       9: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      12: invokevirtual #9                  // Method java/lang/Class.getName:()Ljava/lang/String;
      15: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: ldc           #11                 // String :
      20: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: getstatic     #12                 // Field counter:Ljava/util/concurrent/atomic/AtomicInteger;
      26: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      29: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokevirtual #16                 // Method execute:(Ljava/lang/String;)Lorg/h2/util/Task;
      38: areturn

  public org.h2.util.Task execute(java.lang.String);
    Code:
       0: aload_0
       1: new           #17                 // class java/lang/Thread
       4: dup
       5: aload_0
       6: aload_1
       7: invokespecial #18                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      10: putfield      #19                 // Field thread:Ljava/lang/Thread;
      13: aload_0
      14: getfield      #19                 // Field thread:Ljava/lang/Thread;
      17: iconst_1
      18: invokevirtual #20                 // Method java/lang/Thread.setDaemon:(Z)V
      21: aload_0
      22: getfield      #19                 // Field thread:Ljava/lang/Thread;
      25: invokevirtual #21                 // Method java/lang/Thread.start:()V
      28: aload_0
      29: areturn

  public java.lang.Object get();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getException:()Ljava/lang/Exception;
       4: astore_1
       5: aload_1
       6: ifnull        18
       9: new           #23                 // class java/lang/RuntimeException
      12: dup
      13: aload_1
      14: invokespecial #24                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      17: athrow
      18: aload_0
      19: getfield      #25                 // Field result:Ljava/lang/Object;
      22: areturn

  public boolean isFinished();
    Code:
       0: aload_0
       1: getfield      #5                  // Field finished:Z
       4: ireturn

  public java.lang.Exception getException();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method join:()V
       4: aload_0
       5: getfield      #4                  // Field ex:Ljava/lang/Exception;
       8: ifnull        16
      11: aload_0
      12: getfield      #4                  // Field ex:Ljava/lang/Exception;
      15: areturn
      16: aconst_null
      17: areturn

  public void join();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #27                 // Field stop:Z
       5: aload_0
       6: getfield      #19                 // Field thread:Ljava/lang/Thread;
       9: ifnonnull     22
      12: new           #28                 // class java/lang/IllegalStateException
      15: dup
      16: ldc           #29                 // String Thread not started
      18: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: aload_0
      23: getfield      #19                 // Field thread:Ljava/lang/Thread;
      26: invokevirtual #31                 // Method java/lang/Thread.join:()V
      29: goto          33
      32: astore_1
      33: return
    Exception table:
       from    to  target type
          22    29    32   Class java/lang/InterruptedException

  static {};
    Code:
       0: new           #33                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: invokespecial #34                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       7: putstatic     #12                 // Field counter:Ljava/util/concurrent/atomic/AtomicInteger;
      10: return
}
