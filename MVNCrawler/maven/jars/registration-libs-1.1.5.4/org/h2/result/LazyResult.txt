Compiled from "LazyResult.java"
public abstract class org.h2.result.LazyResult implements org.h2.result.ResultInterface {
  private final org.h2.expression.Expression[] expressions;

  private int rowId;

  private org.h2.value.Value[] currentRow;

  private org.h2.value.Value[] nextRow;

  private boolean closed;

  private boolean afterLast;

  private int limit;

  public org.h2.result.LazyResult(org.h2.expression.Expression[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #2                  // Field rowId:I
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
      14: return

  public void setLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field limit:I
       5: return

  public boolean isLazy();
    Code:
       0: iconst_1
       1: ireturn

  public void reset();
    Code:
       0: aload_0
       1: getfield      #5                  // Field closed:Z
       4: ifeq          11
       7: invokestatic  #6                  // Method org/h2/message/DbException.throwInternalError:()Ljava/lang/RuntimeException;
      10: athrow
      11: aload_0
      12: iconst_m1
      13: putfield      #2                  // Field rowId:I
      16: aload_0
      17: iconst_0
      18: putfield      #7                  // Field afterLast:Z
      21: aload_0
      22: aconst_null
      23: putfield      #8                  // Field currentRow:[Lorg/h2/value/Value;
      26: aload_0
      27: aconst_null
      28: putfield      #9                  // Field nextRow:[Lorg/h2/value/Value;
      31: return

  public org.h2.value.Value[] currentRow();
    Code:
       0: aload_0
       1: getfield      #8                  // Field currentRow:[Lorg/h2/value/Value;
       4: areturn

  public boolean next();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method hasNext:()Z
       4: ifeq          32
       7: aload_0
       8: dup
       9: getfield      #2                  // Field rowId:I
      12: iconst_1
      13: iadd
      14: putfield      #2                  // Field rowId:I
      17: aload_0
      18: aload_0
      19: getfield      #9                  // Field nextRow:[Lorg/h2/value/Value;
      22: putfield      #8                  // Field currentRow:[Lorg/h2/value/Value;
      25: aload_0
      26: aconst_null
      27: putfield      #9                  // Field nextRow:[Lorg/h2/value/Value;
      30: iconst_1
      31: ireturn
      32: aload_0
      33: getfield      #7                  // Field afterLast:Z
      36: ifne          59
      39: aload_0
      40: dup
      41: getfield      #2                  // Field rowId:I
      44: iconst_1
      45: iadd
      46: putfield      #2                  // Field rowId:I
      49: aload_0
      50: aconst_null
      51: putfield      #8                  // Field currentRow:[Lorg/h2/value/Value;
      54: aload_0
      55: iconst_1
      56: putfield      #7                  // Field afterLast:Z
      59: iconst_0
      60: ireturn

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #5                  // Field closed:Z
       4: ifne          14
       7: aload_0
       8: getfield      #7                  // Field afterLast:Z
      11: ifeq          16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: getfield      #9                  // Field nextRow:[Lorg/h2/value/Value;
      20: ifnonnull     51
      23: aload_0
      24: getfield      #4                  // Field limit:I
      27: ifle          43
      30: aload_0
      31: getfield      #2                  // Field rowId:I
      34: iconst_1
      35: iadd
      36: aload_0
      37: getfield      #4                  // Field limit:I
      40: if_icmpge     51
      43: aload_0
      44: aload_0
      45: invokevirtual #11                 // Method fetchNextRow:()[Lorg/h2/value/Value;
      48: putfield      #9                  // Field nextRow:[Lorg/h2/value/Value;
      51: aload_0
      52: getfield      #9                  // Field nextRow:[Lorg/h2/value/Value;
      55: ifnull        62
      58: iconst_1
      59: goto          63
      62: iconst_0
      63: ireturn

  protected abstract org.h2.value.Value[] fetchNextRow();

  public boolean isAfterLast();
    Code:
       0: aload_0
       1: getfield      #7                  // Field afterLast:Z
       4: ireturn

  public int getRowId();
    Code:
       0: aload_0
       1: getfield      #2                  // Field rowId:I
       4: ireturn

  public int getRowCount();
    Code:
       0: ldc           #12                 // String Row count is unknown for lazy result.
       2: invokestatic  #13                 // Method org/h2/message/DbException.getUnsupportedException:(Ljava/lang/String;)Lorg/h2/message/DbException;
       5: athrow

  public boolean needToClose();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #5                  // Field closed:Z
       4: ireturn

  public void close();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #5                  // Field closed:Z
       5: return

  public java.lang.String getAlias(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #14                 // Method org/h2/expression/Expression.getAlias:()Ljava/lang/String;
       9: areturn

  public java.lang.String getSchemaName(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #15                 // Method org/h2/expression/Expression.getSchemaName:()Ljava/lang/String;
       9: areturn

  public java.lang.String getTableName(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #16                 // Method org/h2/expression/Expression.getTableName:()Ljava/lang/String;
       9: areturn

  public java.lang.String getColumnName(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #17                 // Method org/h2/expression/Expression.getColumnName:()Ljava/lang/String;
       9: areturn

  public int getColumnType(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #18                 // Method org/h2/expression/Expression.getType:()I
       9: ireturn

  public long getColumnPrecision(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #19                 // Method org/h2/expression/Expression.getPrecision:()J
       9: lreturn

  public int getColumnScale(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #20                 // Method org/h2/expression/Expression.getScale:()I
       9: ireturn

  public int getDisplaySize(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #21                 // Method org/h2/expression/Expression.getDisplaySize:()I
       9: ireturn

  public boolean isAutoIncrement(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #22                 // Method org/h2/expression/Expression.isAutoIncrement:()Z
       9: ireturn

  public int getNullable(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field expressions:[Lorg/h2/expression/Expression;
       4: iload_1
       5: aaload
       6: invokevirtual #23                 // Method org/h2/expression/Expression.getNullable:()I
       9: ireturn

  public void setFetchSize(int);
    Code:
       0: return

  public int getFetchSize();
    Code:
       0: iconst_1
       1: ireturn

  public org.h2.result.ResultInterface createShallowCopy(org.h2.engine.SessionInterface);
    Code:
       0: aconst_null
       1: areturn

  public boolean containsDistinct(org.h2.value.Value[]);
    Code:
       0: invokestatic  #6                  // Method org/h2/message/DbException.throwInternalError:()Ljava/lang/RuntimeException;
       3: athrow
}
