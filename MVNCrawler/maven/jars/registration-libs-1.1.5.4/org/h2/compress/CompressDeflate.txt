Compiled from "CompressDeflate.java"
public class org.h2.compress.CompressDeflate implements org.h2.compress.Compressor {
  private int level;

  private int strategy;

  public org.h2.compress.CompressDeflate();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #2                  // Field level:I
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field strategy:I
      14: return

  public void setOptions(java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: new           #4                  // class java/util/StringTokenizer
       8: dup
       9: aload_1
      10: invokespecial #5                  // Method java/util/StringTokenizer."<init>":(Ljava/lang/String;)V
      13: astore_2
      14: aload_2
      15: invokevirtual #6                  // Method java/util/StringTokenizer.hasMoreElements:()Z
      18: ifeq          112
      21: aload_2
      22: invokevirtual #7                  // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
      25: astore_3
      26: ldc           #8                  // String level
      28: aload_3
      29: invokevirtual #9                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      32: ifne          44
      35: ldc           #10                 // String l
      37: aload_3
      38: invokevirtual #9                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      41: ifeq          58
      44: aload_0
      45: aload_2
      46: invokevirtual #7                  // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
      49: invokestatic  #11                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      52: putfield      #2                  // Field level:I
      55: goto          87
      58: ldc           #12                 // String strategy
      60: aload_3
      61: invokevirtual #9                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      64: ifne          76
      67: ldc           #13                 // String s
      69: aload_3
      70: invokevirtual #9                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      73: ifeq          87
      76: aload_0
      77: aload_2
      78: invokevirtual #7                  // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
      81: invokestatic  #11                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      84: putfield      #3                  // Field strategy:I
      87: new           #14                 // class java/util/zip/Deflater
      90: dup
      91: aload_0
      92: getfield      #2                  // Field level:I
      95: invokespecial #15                 // Method java/util/zip/Deflater."<init>":(I)V
      98: astore        4
     100: aload         4
     102: aload_0
     103: getfield      #3                  // Field strategy:I
     106: invokevirtual #16                 // Method java/util/zip/Deflater.setStrategy:(I)V
     109: goto          14
     112: goto          123
     115: astore_2
     116: ldc           #18                 // int 90102
     118: aload_1
     119: invokestatic  #19                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
     122: athrow
     123: return
    Exception table:
       from    to  target type
           5   112   115   Class java/lang/Exception

  public int compress(byte[], int, byte[], int);
    Code:
       0: new           #14                 // class java/util/zip/Deflater
       3: dup
       4: aload_0
       5: getfield      #2                  // Field level:I
       8: invokespecial #15                 // Method java/util/zip/Deflater."<init>":(I)V
      11: astore        5
      13: aload         5
      15: aload_0
      16: getfield      #3                  // Field strategy:I
      19: invokevirtual #16                 // Method java/util/zip/Deflater.setStrategy:(I)V
      22: aload         5
      24: aload_1
      25: iconst_0
      26: iload_2
      27: invokevirtual #20                 // Method java/util/zip/Deflater.setInput:([BII)V
      30: aload         5
      32: invokevirtual #21                 // Method java/util/zip/Deflater.finish:()V
      35: aload         5
      37: aload_3
      38: iload         4
      40: aload_3
      41: arraylength
      42: iload         4
      44: isub
      45: invokevirtual #22                 // Method java/util/zip/Deflater.deflate:([BII)I
      48: istore        6
      50: iload         6
      52: ifne          75
      55: aload_0
      56: iconst_0
      57: putfield      #3                  // Field strategy:I
      60: aload_0
      61: iconst_m1
      62: putfield      #2                  // Field level:I
      65: aload_0
      66: aload_1
      67: iload_2
      68: aload_3
      69: iload         4
      71: invokevirtual #23                 // Method compress:([BI[BI)I
      74: ireturn
      75: aload         5
      77: invokevirtual #24                 // Method java/util/zip/Deflater.end:()V
      80: iload         4
      82: iload         6
      84: iadd
      85: ireturn

  public int getAlgorithm();
    Code:
       0: iconst_2
       1: ireturn

  public void expand(byte[], int, int, byte[], int, int);
    Code:
       0: new           #25                 // class java/util/zip/Inflater
       3: dup
       4: invokespecial #26                 // Method java/util/zip/Inflater."<init>":()V
       7: astore        7
       9: aload         7
      11: aload_1
      12: iload_2
      13: iload_3
      14: invokevirtual #27                 // Method java/util/zip/Inflater.setInput:([BII)V
      17: aload         7
      19: invokevirtual #28                 // Method java/util/zip/Inflater.finished:()Z
      22: pop
      23: aload         7
      25: aload         4
      27: iload         5
      29: iload         6
      31: invokevirtual #29                 // Method java/util/zip/Inflater.inflate:([BII)I
      34: istore        8
      36: iload         8
      38: iload         6
      40: if_icmpeq     76
      43: new           #30                 // class java/util/zip/DataFormatException
      46: dup
      47: new           #31                 // class java/lang/StringBuilder
      50: dup
      51: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
      54: iload         8
      56: invokevirtual #33                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      59: ldc           #34                 // String
      61: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: iload         6
      66: invokevirtual #33                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      69: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: invokespecial #37                 // Method java/util/zip/DataFormatException."<init>":(Ljava/lang/String;)V
      75: athrow
      76: goto          93
      79: astore        8
      81: ldc           #38                 // int 90104
      83: aload         8
      85: iconst_0
      86: anewarray     #39                 // class java/lang/String
      89: invokestatic  #40                 // Method org/h2/message/DbException.get:(ILjava/lang/Throwable;[Ljava/lang/String;)Lorg/h2/message/DbException;
      92: athrow
      93: aload         7
      95: invokevirtual #41                 // Method java/util/zip/Inflater.end:()V
      98: return
    Exception table:
       from    to  target type
          23    76    79   Class java/util/zip/DataFormatException
}
