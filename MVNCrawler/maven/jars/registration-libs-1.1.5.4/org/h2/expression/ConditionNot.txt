Compiled from "ConditionNot.java"
public class org.h2.expression.ConditionNot extends org.h2.expression.Condition {
  private org.h2.expression.Expression condition;

  public org.h2.expression.ConditionNot(org.h2.expression.Expression);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/h2/expression/Condition."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field condition:Lorg/h2/expression/Expression;
       9: return

  public org.h2.expression.Expression getNotIfPossible(org.h2.engine.Session);
    Code:
       0: aload_0
       1: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
       4: areturn

  public org.h2.value.Value getValue(org.h2.engine.Session);
    Code:
       0: aload_0
       1: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
       4: aload_1
       5: invokevirtual #3                  // Method org/h2/expression/Expression.getValue:(Lorg/h2/engine/Session;)Lorg/h2/value/Value;
       8: astore_2
       9: aload_2
      10: getstatic     #4                  // Field org/h2/value/ValueNull.INSTANCE:Lorg/h2/value/ValueNull;
      13: if_acmpne     18
      16: aload_2
      17: areturn
      18: aload_2
      19: iconst_1
      20: invokevirtual #5                  // Method org/h2/value/Value.convertTo:(I)Lorg/h2/value/Value;
      23: invokevirtual #6                  // Method org/h2/value/Value.negate:()Lorg/h2/value/Value;
      26: areturn

  public void mapColumns(org.h2.table.ColumnResolver, int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
       4: aload_1
       5: iload_2
       6: invokevirtual #7                  // Method org/h2/expression/Expression.mapColumns:(Lorg/h2/table/ColumnResolver;I)V
       9: return

  public org.h2.expression.Expression optimize(org.h2.engine.Session);
    Code:
       0: aload_0
       1: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
       4: aload_1
       5: invokevirtual #8                  // Method org/h2/expression/Expression.getNotIfPossible:(Lorg/h2/engine/Session;)Lorg/h2/expression/Expression;
       8: astore_2
       9: aload_2
      10: ifnull        19
      13: aload_2
      14: aload_1
      15: invokevirtual #9                  // Method org/h2/expression/Expression.optimize:(Lorg/h2/engine/Session;)Lorg/h2/expression/Expression;
      18: areturn
      19: aload_0
      20: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
      23: aload_1
      24: invokevirtual #9                  // Method org/h2/expression/Expression.optimize:(Lorg/h2/engine/Session;)Lorg/h2/expression/Expression;
      27: astore_3
      28: aload_3
      29: invokevirtual #10                 // Method org/h2/expression/Expression.isConstant:()Z
      32: ifeq          67
      35: aload_3
      36: aload_1
      37: invokevirtual #3                  // Method org/h2/expression/Expression.getValue:(Lorg/h2/engine/Session;)Lorg/h2/value/Value;
      40: astore        4
      42: aload         4
      44: getstatic     #4                  // Field org/h2/value/ValueNull.INSTANCE:Lorg/h2/value/ValueNull;
      47: if_acmpne     54
      50: invokestatic  #11                 // Method org/h2/expression/ValueExpression.getNull:()Lorg/h2/expression/ValueExpression;
      53: areturn
      54: aload         4
      56: iconst_1
      57: invokevirtual #5                  // Method org/h2/value/Value.convertTo:(I)Lorg/h2/value/Value;
      60: invokevirtual #6                  // Method org/h2/value/Value.negate:()Lorg/h2/value/Value;
      63: invokestatic  #12                 // Method org/h2/expression/ValueExpression.get:(Lorg/h2/value/Value;)Lorg/h2/expression/ValueExpression;
      66: areturn
      67: aload_0
      68: aload_3
      69: putfield      #2                  // Field condition:Lorg/h2/expression/Expression;
      72: aload_0
      73: areturn

  public void setEvaluatable(org.h2.table.TableFilter, boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
       4: aload_1
       5: iload_2
       6: invokevirtual #13                 // Method org/h2/expression/Expression.setEvaluatable:(Lorg/h2/table/TableFilter;Z)V
       9: return

  public java.lang.String getSQL();
    Code:
       0: new           #14                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #16                 // String (NOT
       9: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
      16: invokevirtual #18                 // Method org/h2/expression/Expression.getSQL:()Ljava/lang/String;
      19: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #19                 // String )
      24: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: areturn

  public void updateAggregate(org.h2.engine.Session);
    Code:
       0: aload_0
       1: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
       4: aload_1
       5: invokevirtual #21                 // Method org/h2/expression/Expression.updateAggregate:(Lorg/h2/engine/Session;)V
       8: return

  public void addFilterConditions(org.h2.table.TableFilter, boolean);
    Code:
       0: iload_2
       1: ifeq          5
       4: return
       5: aload_0
       6: aload_1
       7: iload_2
       8: invokespecial #22                 // Method org/h2/expression/Condition.addFilterConditions:(Lorg/h2/table/TableFilter;Z)V
      11: return

  public boolean isEverything(org.h2.expression.ExpressionVisitor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
       4: aload_1
       5: invokevirtual #23                 // Method org/h2/expression/Expression.isEverything:(Lorg/h2/expression/ExpressionVisitor;)Z
       8: ireturn

  public int getCost();
    Code:
       0: aload_0
       1: getfield      #2                  // Field condition:Lorg/h2/expression/Expression;
       4: invokevirtual #24                 // Method org/h2/expression/Expression.getCost:()I
       7: ireturn

  public int getDisplaySize();
    Code:
       0: aload_0
       1: invokespecial #25                 // Method org/h2/expression/Condition.getDisplaySize:()I
       4: ireturn

  public long getPrecision();
    Code:
       0: aload_0
       1: invokespecial #26                 // Method org/h2/expression/Condition.getPrecision:()J
       4: lreturn

  public int getScale();
    Code:
       0: aload_0
       1: invokespecial #27                 // Method org/h2/expression/Condition.getScale:()I
       4: ireturn

  public int getType();
    Code:
       0: aload_0
       1: invokespecial #28                 // Method org/h2/expression/Condition.getType:()I
       4: ireturn
}
