Compiled from "PageDataOverflow.java"
public class org.h2.index.PageDataOverflow extends org.h2.store.Page {
  static final int START_LAST;

  static final int START_MORE;

  private static final int START_NEXT_OVERFLOW;

  private final org.h2.store.PageStore store;

  private int type;

  private int parentPageId;

  private int nextPage;

  private final org.h2.store.Data data;

  private int start;

  private int size;

  private org.h2.index.PageDataOverflow(org.h2.store.PageStore, int, org.h2.store.Data);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/h2/store/Page."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field store:Lorg/h2/store/PageStore;
       9: aload_0
      10: iload_2
      11: invokevirtual #3                  // Method setPos:(I)V
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field data:Lorg/h2/store/Data;
      19: return

  public static org.h2.store.Page read(org.h2.store.PageStore, org.h2.store.Data, int);
    Code:
       0: new           #5                  // class org/h2/index/PageDataOverflow
       3: dup
       4: aload_0
       5: iload_2
       6: aload_1
       7: invokespecial #6                  // Method "<init>":(Lorg/h2/store/PageStore;ILorg/h2/store/Data;)V
      10: astore_3
      11: aload_3
      12: invokespecial #7                  // Method read:()V
      15: aload_3
      16: areturn

  static org.h2.index.PageDataOverflow create(org.h2.store.PageStore, int, int, int, int, org.h2.store.Data, int, int);
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method org/h2/store/PageStore.createData:()Lorg/h2/store/Data;
       4: astore        8
       6: new           #5                  // class org/h2/index/PageDataOverflow
       9: dup
      10: aload_0
      11: iload_1
      12: aload         8
      14: invokespecial #6                  // Method "<init>":(Lorg/h2/store/PageStore;ILorg/h2/store/Data;)V
      17: astore        9
      19: aload_0
      20: aload         9
      22: aconst_null
      23: invokevirtual #9                  // Method org/h2/store/PageStore.logUndo:(Lorg/h2/store/Page;Lorg/h2/store/Data;)V
      26: aload         8
      28: iload_2
      29: i2b
      30: invokevirtual #10                 // Method org/h2/store/Data.writeByte:(B)V
      33: aload         8
      35: iconst_0
      36: invokevirtual #11                 // Method org/h2/store/Data.writeShortInt:(I)V
      39: aload         8
      41: iload_3
      42: invokevirtual #12                 // Method org/h2/store/Data.writeInt:(I)V
      45: iload_2
      46: iconst_3
      47: if_icmpne     60
      50: aload         8
      52: iload         4
      54: invokevirtual #12                 // Method org/h2/store/Data.writeInt:(I)V
      57: goto          67
      60: aload         8
      62: iload         7
      64: invokevirtual #11                 // Method org/h2/store/Data.writeShortInt:(I)V
      67: aload         9
      69: aload         8
      71: invokevirtual #13                 // Method org/h2/store/Data.length:()I
      74: putfield      #14                 // Field start:I
      77: aload         8
      79: aload         5
      81: invokevirtual #15                 // Method org/h2/store/Data.getBytes:()[B
      84: iload         6
      86: iload         7
      88: invokevirtual #16                 // Method org/h2/store/Data.write:([BII)V
      91: aload         9
      93: iload_2
      94: putfield      #17                 // Field type:I
      97: aload         9
      99: iload_3
     100: putfield      #18                 // Field parentPageId:I
     103: aload         9
     105: iload         4
     107: putfield      #19                 // Field nextPage:I
     110: aload         9
     112: iload         7
     114: putfield      #20                 // Field size:I
     117: aload         9
     119: areturn

  private void read();
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:Lorg/h2/store/Data;
       4: invokevirtual #21                 // Method org/h2/store/Data.reset:()V
       7: aload_0
       8: aload_0
       9: getfield      #4                  // Field data:Lorg/h2/store/Data;
      12: invokevirtual #22                 // Method org/h2/store/Data.readByte:()B
      15: putfield      #17                 // Field type:I
      18: aload_0
      19: getfield      #4                  // Field data:Lorg/h2/store/Data;
      22: invokevirtual #23                 // Method org/h2/store/Data.readShortInt:()S
      25: pop
      26: aload_0
      27: aload_0
      28: getfield      #4                  // Field data:Lorg/h2/store/Data;
      31: invokevirtual #24                 // Method org/h2/store/Data.readInt:()I
      34: putfield      #18                 // Field parentPageId:I
      37: aload_0
      38: getfield      #17                 // Field type:I
      41: bipush        19
      43: if_icmpne     65
      46: aload_0
      47: aload_0
      48: getfield      #4                  // Field data:Lorg/h2/store/Data;
      51: invokevirtual #23                 // Method org/h2/store/Data.readShortInt:()S
      54: putfield      #20                 // Field size:I
      57: aload_0
      58: iconst_0
      59: putfield      #19                 // Field nextPage:I
      62: goto          146
      65: aload_0
      66: getfield      #17                 // Field type:I
      69: iconst_3
      70: if_icmpne     106
      73: aload_0
      74: aload_0
      75: getfield      #4                  // Field data:Lorg/h2/store/Data;
      78: invokevirtual #24                 // Method org/h2/store/Data.readInt:()I
      81: putfield      #19                 // Field nextPage:I
      84: aload_0
      85: aload_0
      86: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
      89: invokevirtual #25                 // Method org/h2/store/PageStore.getPageSize:()I
      92: aload_0
      93: getfield      #4                  // Field data:Lorg/h2/store/Data;
      96: invokevirtual #13                 // Method org/h2/store/Data.length:()I
      99: isub
     100: putfield      #20                 // Field size:I
     103: goto          146
     106: ldc           #26                 // int 90030
     108: new           #27                 // class java/lang/StringBuilder
     111: dup
     112: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
     115: ldc           #29                 // String page:
     117: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     120: aload_0
     121: invokevirtual #31                 // Method getPos:()I
     124: invokevirtual #32                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     127: ldc           #33                 // String  type:
     129: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     132: aload_0
     133: getfield      #17                 // Field type:I
     136: invokevirtual #32                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     139: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     142: invokestatic  #35                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
     145: athrow
     146: aload_0
     147: aload_0
     148: getfield      #4                  // Field data:Lorg/h2/store/Data;
     151: invokevirtual #13                 // Method org/h2/store/Data.length:()I
     154: putfield      #14                 // Field start:I
     157: return

  int readInto(org.h2.store.Data);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #20                 // Field size:I
       5: invokevirtual #36                 // Method org/h2/store/Data.checkCapacity:(I)V
       8: aload_0
       9: getfield      #17                 // Field type:I
      12: bipush        19
      14: if_icmpne     36
      17: aload_1
      18: aload_0
      19: getfield      #4                  // Field data:Lorg/h2/store/Data;
      22: invokevirtual #15                 // Method org/h2/store/Data.getBytes:()[B
      25: bipush        9
      27: aload_0
      28: getfield      #20                 // Field size:I
      31: invokevirtual #16                 // Method org/h2/store/Data.write:([BII)V
      34: iconst_0
      35: ireturn
      36: aload_1
      37: aload_0
      38: getfield      #4                  // Field data:Lorg/h2/store/Data;
      41: invokevirtual #15                 // Method org/h2/store/Data.getBytes:()[B
      44: bipush        11
      46: aload_0
      47: getfield      #20                 // Field size:I
      50: invokevirtual #16                 // Method org/h2/store/Data.write:([BII)V
      53: aload_0
      54: getfield      #19                 // Field nextPage:I
      57: ireturn

  int getNextOverflow();
    Code:
       0: aload_0
       1: getfield      #19                 // Field nextPage:I
       4: ireturn

  private void writeHead();
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:Lorg/h2/store/Data;
       4: aload_0
       5: getfield      #17                 // Field type:I
       8: i2b
       9: invokevirtual #10                 // Method org/h2/store/Data.writeByte:(B)V
      12: aload_0
      13: getfield      #4                  // Field data:Lorg/h2/store/Data;
      16: iconst_0
      17: invokevirtual #11                 // Method org/h2/store/Data.writeShortInt:(I)V
      20: aload_0
      21: getfield      #4                  // Field data:Lorg/h2/store/Data;
      24: aload_0
      25: getfield      #18                 // Field parentPageId:I
      28: invokevirtual #12                 // Method org/h2/store/Data.writeInt:(I)V
      31: return

  public void write();
    Code:
       0: aload_0
       1: invokespecial #37                 // Method writeData:()V
       4: aload_0
       5: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
       8: aload_0
       9: invokevirtual #31                 // Method getPos:()I
      12: aload_0
      13: getfield      #4                  // Field data:Lorg/h2/store/Data;
      16: invokevirtual #38                 // Method org/h2/store/PageStore.writePage:(ILorg/h2/store/Data;)V
      19: return

  private void writeData();
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:Lorg/h2/store/Data;
       4: invokevirtual #21                 // Method org/h2/store/Data.reset:()V
       7: aload_0
       8: invokespecial #39                 // Method writeHead:()V
      11: aload_0
      12: getfield      #17                 // Field type:I
      15: iconst_3
      16: if_icmpne     33
      19: aload_0
      20: getfield      #4                  // Field data:Lorg/h2/store/Data;
      23: aload_0
      24: getfield      #19                 // Field nextPage:I
      27: invokevirtual #12                 // Method org/h2/store/Data.writeInt:(I)V
      30: goto          44
      33: aload_0
      34: getfield      #4                  // Field data:Lorg/h2/store/Data;
      37: aload_0
      38: getfield      #20                 // Field size:I
      41: invokevirtual #11                 // Method org/h2/store/Data.writeShortInt:(I)V
      44: return

  public java.lang.String toString();
    Code:
       0: new           #27                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #40                 // String page[
       9: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #31                 // Method getPos:()I
      16: invokevirtual #32                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: ldc           #41                 // String ] data leaf overflow parent:
      21: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #18                 // Field parentPageId:I
      28: invokevirtual #32                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #42                 // String  next:
      33: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #19                 // Field nextPage:I
      40: invokevirtual #32                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      43: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: areturn

  public int getMemory();
    Code:
       0: bipush        120
       2: aload_0
       3: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
       6: invokevirtual #25                 // Method org/h2/store/PageStore.getPageSize:()I
       9: iadd
      10: iconst_2
      11: ishr
      12: ireturn

  void setParentPageId(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
       4: aload_0
       5: aload_0
       6: getfield      #4                  // Field data:Lorg/h2/store/Data;
       9: invokevirtual #9                  // Method org/h2/store/PageStore.logUndo:(Lorg/h2/store/Page;Lorg/h2/store/Data;)V
      12: aload_0
      13: iload_1
      14: putfield      #18                 // Field parentPageId:I
      17: return

  public void moveTo(org.h2.engine.Session, int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
       4: aload_0
       5: getfield      #18                 // Field parentPageId:I
       8: invokevirtual #43                 // Method org/h2/store/PageStore.getPage:(I)Lorg/h2/store/Page;
      11: astore_3
      12: aload_3
      13: ifnonnull     20
      16: invokestatic  #44                 // Method org/h2/message/DbException.throwInternalError:()Ljava/lang/RuntimeException;
      19: athrow
      20: aconst_null
      21: astore        4
      23: aload_0
      24: getfield      #19                 // Field nextPage:I
      27: ifeq          46
      30: aload_0
      31: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
      34: aload_0
      35: getfield      #19                 // Field nextPage:I
      38: invokevirtual #43                 // Method org/h2/store/PageStore.getPage:(I)Lorg/h2/store/Page;
      41: checkcast     #5                  // class org/h2/index/PageDataOverflow
      44: astore        4
      46: aload_0
      47: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
      50: aload_0
      51: aload_0
      52: getfield      #4                  // Field data:Lorg/h2/store/Data;
      55: invokevirtual #9                  // Method org/h2/store/PageStore.logUndo:(Lorg/h2/store/Page;Lorg/h2/store/Data;)V
      58: aload_0
      59: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
      62: iload_2
      63: aload_0
      64: getfield      #17                 // Field type:I
      67: aload_0
      68: getfield      #18                 // Field parentPageId:I
      71: aload_0
      72: getfield      #19                 // Field nextPage:I
      75: aload_0
      76: getfield      #4                  // Field data:Lorg/h2/store/Data;
      79: aload_0
      80: getfield      #14                 // Field start:I
      83: aload_0
      84: getfield      #20                 // Field size:I
      87: invokestatic  #45                 // Method create:(Lorg/h2/store/PageStore;IIIILorg/h2/store/Data;II)Lorg/h2/index/PageDataOverflow;
      90: astore        5
      92: aload_0
      93: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
      96: aload         5
      98: invokevirtual #46                 // Method org/h2/store/PageStore.update:(Lorg/h2/store/Page;)V
     101: aload         4
     103: ifnull        121
     106: aload         4
     108: iload_2
     109: invokevirtual #47                 // Method setParentPageId:(I)V
     112: aload_0
     113: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
     116: aload         4
     118: invokevirtual #46                 // Method org/h2/store/PageStore.update:(Lorg/h2/store/Page;)V
     121: aload_3
     122: instanceof    #5                  // class org/h2/index/PageDataOverflow
     125: ifeq          147
     128: aload_3
     129: checkcast     #5                  // class org/h2/index/PageDataOverflow
     132: astore        6
     134: aload         6
     136: aload_0
     137: invokevirtual #31                 // Method getPos:()I
     140: iload_2
     141: invokespecial #48                 // Method setNext:(II)V
     144: goto          163
     147: aload_3
     148: checkcast     #49                 // class org/h2/index/PageDataLeaf
     151: astore        6
     153: aload         6
     155: aload_0
     156: invokevirtual #31                 // Method getPos:()I
     159: iload_2
     160: invokevirtual #50                 // Method org/h2/index/PageDataLeaf.setOverflow:(II)V
     163: aload_0
     164: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
     167: aload_3
     168: invokevirtual #46                 // Method org/h2/store/PageStore.update:(Lorg/h2/store/Page;)V
     171: aload_0
     172: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
     175: aload_0
     176: invokevirtual #31                 // Method getPos:()I
     179: invokevirtual #51                 // Method org/h2/store/PageStore.free:(I)V
     182: return

  private void setNext(int, int);
    Code:
       0: getstatic     #52                 // Field org/h2/engine/SysProperties.CHECK:Z
       3: ifeq          46
       6: iload_1
       7: aload_0
       8: getfield      #19                 // Field nextPage:I
      11: if_icmpeq     46
      14: new           #27                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #53                 // String move
      23: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      30: ldc           #55                 // String
      32: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: iload_2
      36: invokevirtual #32                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      39: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokestatic  #56                 // Method org/h2/message/DbException.throwInternalError:(Ljava/lang/String;)Ljava/lang/RuntimeException;
      45: pop
      46: aload_0
      47: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
      50: aload_0
      51: aload_0
      52: getfield      #4                  // Field data:Lorg/h2/store/Data;
      55: invokevirtual #9                  // Method org/h2/store/PageStore.logUndo:(Lorg/h2/store/Page;Lorg/h2/store/Data;)V
      58: aload_0
      59: iload_2
      60: putfield      #19                 // Field nextPage:I
      63: aload_0
      64: getfield      #4                  // Field data:Lorg/h2/store/Data;
      67: bipush        7
      69: iload_2
      70: invokevirtual #57                 // Method org/h2/store/Data.setInt:(II)V
      73: return

  void free();
    Code:
       0: aload_0
       1: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
       4: aload_0
       5: aload_0
       6: getfield      #4                  // Field data:Lorg/h2/store/Data;
       9: invokevirtual #9                  // Method org/h2/store/PageStore.logUndo:(Lorg/h2/store/Page;Lorg/h2/store/Data;)V
      12: aload_0
      13: getfield      #2                  // Field store:Lorg/h2/store/PageStore;
      16: aload_0
      17: invokevirtual #31                 // Method getPos:()I
      20: invokevirtual #51                 // Method org/h2/store/PageStore.free:(I)V
      23: return

  public boolean canRemove();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isStream();
    Code:
       0: iconst_1
       1: ireturn
}
