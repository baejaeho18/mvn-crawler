Compiled from "Sequence.java"
public class org.h2.schema.Sequence extends org.h2.schema.SchemaObjectBase {
  public static final int DEFAULT_CACHE_SIZE;

  private long value;

  private long valueWithMargin;

  private long increment;

  private long cacheSize;

  private long minValue;

  private long maxValue;

  private boolean cycle;

  private boolean belongsToTable;

  private boolean writeWithMargin;

  public org.h2.schema.Sequence(org.h2.schema.Schema, int, java.lang.String, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: lload         4
       6: invokestatic  #1                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       9: lload         6
      11: invokestatic  #1                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      14: aconst_null
      15: aconst_null
      16: aconst_null
      17: iconst_0
      18: iconst_1
      19: invokespecial #2                  // Method "<init>":(Lorg/h2/schema/Schema;ILjava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;ZZ)V
      22: return

  public org.h2.schema.Sequence(org.h2.schema.Schema, int, java.lang.String, java.lang.Long, java.lang.Long, java.lang.Long, java.lang.Long, java.lang.Long, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method org/h2/schema/SchemaObjectBase."<init>":()V
       4: aload_0
       5: aload_1
       6: iload_2
       7: aload_3
       8: bipush        9
      10: invokevirtual #4                  // Method initSchemaObjectBase:(Lorg/h2/schema/Schema;ILjava/lang/String;I)V
      13: aload_0
      14: aload         5
      16: ifnull        27
      19: aload         5
      21: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      24: goto          28
      27: lconst_1
      28: putfield      #6                  // Field increment:J
      31: aload_0
      32: aload         7
      34: ifnull        45
      37: aload         7
      39: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      42: goto          54
      45: aload         4
      47: aload_0
      48: getfield      #6                  // Field increment:J
      51: invokestatic  #7                  // Method getDefaultMinValue:(Ljava/lang/Long;J)J
      54: putfield      #8                  // Field minValue:J
      57: aload_0
      58: aload         8
      60: ifnull        71
      63: aload         8
      65: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      68: goto          80
      71: aload         4
      73: aload_0
      74: getfield      #6                  // Field increment:J
      77: invokestatic  #9                  // Method getDefaultMaxValue:(Ljava/lang/Long;J)J
      80: putfield      #10                 // Field maxValue:J
      83: aload_0
      84: aload         4
      86: ifnull        97
      89: aload         4
      91: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      94: goto          105
      97: aload_0
      98: aload_0
      99: getfield      #6                  // Field increment:J
     102: invokespecial #11                 // Method getDefaultStartValue:(J)J
     105: putfield      #12                 // Field value:J
     108: aload_0
     109: aload_0
     110: getfield      #12                 // Field value:J
     113: putfield      #13                 // Field valueWithMargin:J
     116: aload_0
     117: aload         6
     119: ifnull        134
     122: lconst_1
     123: aload         6
     125: invokevirtual #5                  // Method java/lang/Long.longValue:()J
     128: invokestatic  #14                 // Method java/lang/Math.max:(JJ)J
     131: goto          137
     134: ldc2_w        #15                 // long 32l
     137: putfield      #17                 // Field cacheSize:J
     140: aload_0
     141: iload         9
     143: putfield      #18                 // Field cycle:Z
     146: aload_0
     147: iload         10
     149: putfield      #19                 // Field belongsToTable:Z
     152: aload_0
     153: getfield      #12                 // Field value:J
     156: aload_0
     157: getfield      #8                  // Field minValue:J
     160: aload_0
     161: getfield      #10                 // Field maxValue:J
     164: aload_0
     165: getfield      #6                  // Field increment:J
     168: invokestatic  #20                 // Method isValid:(JJJJ)Z
     171: ifne          228
     174: ldc           #21                 // int 90009
     176: iconst_5
     177: anewarray     #22                 // class java/lang/String
     180: dup
     181: iconst_0
     182: aload_3
     183: aastore
     184: dup
     185: iconst_1
     186: aload_0
     187: getfield      #12                 // Field value:J
     190: invokestatic  #23                 // Method java/lang/String.valueOf:(J)Ljava/lang/String;
     193: aastore
     194: dup
     195: iconst_2
     196: aload_0
     197: getfield      #8                  // Field minValue:J
     200: invokestatic  #23                 // Method java/lang/String.valueOf:(J)Ljava/lang/String;
     203: aastore
     204: dup
     205: iconst_3
     206: aload_0
     207: getfield      #10                 // Field maxValue:J
     210: invokestatic  #23                 // Method java/lang/String.valueOf:(J)Ljava/lang/String;
     213: aastore
     214: dup
     215: iconst_4
     216: aload_0
     217: getfield      #6                  // Field increment:J
     220: invokestatic  #23                 // Method java/lang/String.valueOf:(J)Ljava/lang/String;
     223: aastore
     224: invokestatic  #24                 // Method org/h2/message/DbException.get:(I[Ljava/lang/String;)Lorg/h2/message/DbException;
     227: athrow
     228: return

  public synchronized void modify(java.lang.Long, java.lang.Long, java.lang.Long, java.lang.Long);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: getfield      #12                 // Field value:J
       8: invokestatic  #1                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      11: astore_1
      12: aload_2
      13: ifnonnull     24
      16: aload_0
      17: getfield      #8                  // Field minValue:J
      20: invokestatic  #1                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      23: astore_2
      24: aload_3
      25: ifnonnull     36
      28: aload_0
      29: getfield      #10                 // Field maxValue:J
      32: invokestatic  #1                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      35: astore_3
      36: aload         4
      38: ifnonnull     50
      41: aload_0
      42: getfield      #6                  // Field increment:J
      45: invokestatic  #1                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      48: astore        4
      50: aload_1
      51: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      54: aload_2
      55: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      58: aload_3
      59: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      62: aload         4
      64: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      67: invokestatic  #20                 // Method isValid:(JJJJ)Z
      70: ifne          119
      73: ldc           #21                 // int 90009
      75: iconst_5
      76: anewarray     #22                 // class java/lang/String
      79: dup
      80: iconst_0
      81: aload_0
      82: invokevirtual #25                 // Method getName:()Ljava/lang/String;
      85: aastore
      86: dup
      87: iconst_1
      88: aload_1
      89: invokestatic  #26                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      92: aastore
      93: dup
      94: iconst_2
      95: aload_2
      96: invokestatic  #26                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      99: aastore
     100: dup
     101: iconst_3
     102: aload_3
     103: invokestatic  #26                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     106: aastore
     107: dup
     108: iconst_4
     109: aload         4
     111: invokestatic  #26                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     114: aastore
     115: invokestatic  #24                 // Method org/h2/message/DbException.get:(I[Ljava/lang/String;)Lorg/h2/message/DbException;
     118: athrow
     119: aload_0
     120: aload_1
     121: invokevirtual #5                  // Method java/lang/Long.longValue:()J
     124: putfield      #12                 // Field value:J
     127: aload_0
     128: aload_1
     129: invokevirtual #5                  // Method java/lang/Long.longValue:()J
     132: putfield      #13                 // Field valueWithMargin:J
     135: aload_0
     136: aload_2
     137: invokevirtual #5                  // Method java/lang/Long.longValue:()J
     140: putfield      #8                  // Field minValue:J
     143: aload_0
     144: aload_3
     145: invokevirtual #5                  // Method java/lang/Long.longValue:()J
     148: putfield      #10                 // Field maxValue:J
     151: aload_0
     152: aload         4
     154: invokevirtual #5                  // Method java/lang/Long.longValue:()J
     157: putfield      #6                  // Field increment:J
     160: return

  private static boolean isValid(long, long, long, long);
    Code:
       0: lload_2
       1: lload_0
       2: lcmp
       3: ifgt          57
       6: lload         4
       8: lload_0
       9: lcmp
      10: iflt          57
      13: lload         4
      15: lload_2
      16: lcmp
      17: ifle          57
      20: lload         6
      22: lconst_0
      23: lcmp
      24: ifeq          57
      27: lload         6
      29: invokestatic  #27                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      32: invokevirtual #28                 // Method java/math/BigInteger.abs:()Ljava/math/BigInteger;
      35: lload         4
      37: invokestatic  #27                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      40: lload_2
      41: invokestatic  #27                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      44: invokevirtual #29                 // Method java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
      47: invokevirtual #30                 // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
      50: ifge          57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: ireturn

  private static long getDefaultMinValue(java.lang.Long, long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: lconst_1
       7: goto          13
      10: ldc2_w        #31                 // long -9223372036854775808l
      13: lstore_3
      14: aload_0
      15: ifnull        38
      18: lload_1
      19: lconst_0
      20: lcmp
      21: iflt          38
      24: aload_0
      25: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      28: lload_3
      29: lcmp
      30: ifge          38
      33: aload_0
      34: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      37: lstore_3
      38: lload_3
      39: lreturn

  private static long getDefaultMaxValue(java.lang.Long, long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          12
       6: ldc2_w        #33                 // long 9223372036854775807l
       9: goto          15
      12: ldc2_w        #35                 // long -1l
      15: lstore_3
      16: aload_0
      17: ifnull        40
      20: lload_1
      21: lconst_0
      22: lcmp
      23: ifge          40
      26: aload_0
      27: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      30: lload_3
      31: lcmp
      32: ifle          40
      35: aload_0
      36: invokevirtual #5                  // Method java/lang/Long.longValue:()J
      39: lstore_3
      40: lload_3
      41: lreturn

  private long getDefaultStartValue(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          13
       6: aload_0
       7: getfield      #8                  // Field minValue:J
      10: goto          17
      13: aload_0
      14: getfield      #10                 // Field maxValue:J
      17: lreturn

  public boolean getBelongsToTable();
    Code:
       0: aload_0
       1: getfield      #19                 // Field belongsToTable:Z
       4: ireturn

  public long getIncrement();
    Code:
       0: aload_0
       1: getfield      #6                  // Field increment:J
       4: lreturn

  public long getMinValue();
    Code:
       0: aload_0
       1: getfield      #8                  // Field minValue:J
       4: lreturn

  public long getMaxValue();
    Code:
       0: aload_0
       1: getfield      #10                 // Field maxValue:J
       4: lreturn

  public boolean getCycle();
    Code:
       0: aload_0
       1: getfield      #18                 // Field cycle:Z
       4: ireturn

  public void setCycle(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field cycle:Z
       5: return

  public java.lang.String getDropSQL();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method getBelongsToTable:()Z
       4: ifeq          9
       7: aconst_null
       8: areturn
       9: new           #38                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #40                 // String DROP SEQUENCE IF EXISTS
      18: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: aload_0
      22: invokevirtual #42                 // Method getSQL:()Ljava/lang/String;
      25: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: areturn

  public java.lang.String getCreateSQLForCopy(org.h2.table.Table, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method toString:()Ljava/lang/String;
       4: invokestatic  #45                 // Method org/h2/message/DbException.throwInternalError:(Ljava/lang/String;)Ljava/lang/RuntimeException;
       7: athrow

  public synchronized java.lang.String getCreateSQL();
    Code:
       0: aload_0
       1: getfield      #46                 // Field writeWithMargin:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #13                 // Field valueWithMargin:J
      11: goto          18
      14: aload_0
      15: getfield      #12                 // Field value:J
      18: lstore_1
      19: new           #38                 // class java/lang/StringBuilder
      22: dup
      23: ldc           #47                 // String CREATE SEQUENCE
      25: invokespecial #48                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      28: astore_3
      29: aload_3
      30: aload_0
      31: invokevirtual #42                 // Method getSQL:()Ljava/lang/String;
      34: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: ldc           #49                 // String  START WITH
      39: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: lload_1
      43: invokevirtual #50                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      46: pop
      47: aload_0
      48: getfield      #6                  // Field increment:J
      51: lconst_1
      52: lcmp
      53: ifeq          70
      56: aload_3
      57: ldc           #51                 // String  INCREMENT BY
      59: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_0
      63: getfield      #6                  // Field increment:J
      66: invokevirtual #50                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      69: pop
      70: aload_0
      71: getfield      #8                  // Field minValue:J
      74: lload_1
      75: invokestatic  #1                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      78: aload_0
      79: getfield      #6                  // Field increment:J
      82: invokestatic  #7                  // Method getDefaultMinValue:(Ljava/lang/Long;J)J
      85: lcmp
      86: ifeq          103
      89: aload_3
      90: ldc           #52                 // String  MINVALUE
      92: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: aload_0
      96: getfield      #8                  // Field minValue:J
      99: invokevirtual #50                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     102: pop
     103: aload_0
     104: getfield      #10                 // Field maxValue:J
     107: lload_1
     108: invokestatic  #1                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     111: aload_0
     112: getfield      #6                  // Field increment:J
     115: invokestatic  #9                  // Method getDefaultMaxValue:(Ljava/lang/Long;J)J
     118: lcmp
     119: ifeq          136
     122: aload_3
     123: ldc           #53                 // String  MAXVALUE
     125: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     128: aload_0
     129: getfield      #10                 // Field maxValue:J
     132: invokevirtual #50                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     135: pop
     136: aload_0
     137: getfield      #18                 // Field cycle:Z
     140: ifeq          150
     143: aload_3
     144: ldc           #54                 // String  CYCLE
     146: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: pop
     150: aload_0
     151: getfield      #17                 // Field cacheSize:J
     154: ldc2_w        #15                 // long 32l
     157: lcmp
     158: ifeq          175
     161: aload_3
     162: ldc           #55                 // String  CACHE
     164: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     167: aload_0
     168: getfield      #17                 // Field cacheSize:J
     171: invokevirtual #50                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     174: pop
     175: aload_0
     176: getfield      #19                 // Field belongsToTable:Z
     179: ifeq          189
     182: aload_3
     183: ldc           #56                 // String  BELONGS_TO_TABLE
     185: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     188: pop
     189: aload_3
     190: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     193: areturn

  public long getNext(org.h2.engine.Session);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: dup
       4: astore        5
       6: monitorenter
       7: aload_0
       8: getfield      #6                  // Field increment:J
      11: lconst_0
      12: lcmp
      13: ifle          28
      16: aload_0
      17: getfield      #12                 // Field value:J
      20: aload_0
      21: getfield      #13                 // Field valueWithMargin:J
      24: lcmp
      25: ifge          49
      28: aload_0
      29: getfield      #6                  // Field increment:J
      32: lconst_0
      33: lcmp
      34: ifge          69
      37: aload_0
      38: getfield      #12                 // Field value:J
      41: aload_0
      42: getfield      #13                 // Field valueWithMargin:J
      45: lcmp
      46: ifgt          69
      49: aload_0
      50: dup
      51: getfield      #13                 // Field valueWithMargin:J
      54: aload_0
      55: getfield      #6                  // Field increment:J
      58: aload_0
      59: getfield      #17                 // Field cacheSize:J
      62: lmul
      63: ladd
      64: putfield      #13                 // Field valueWithMargin:J
      67: iconst_1
      68: istore_2
      69: aload_0
      70: getfield      #6                  // Field increment:J
      73: lconst_0
      74: lcmp
      75: ifle          90
      78: aload_0
      79: getfield      #12                 // Field value:J
      82: aload_0
      83: getfield      #10                 // Field maxValue:J
      86: lcmp
      87: ifgt          111
      90: aload_0
      91: getfield      #6                  // Field increment:J
      94: lconst_0
      95: lcmp
      96: ifge          175
      99: aload_0
     100: getfield      #12                 // Field value:J
     103: aload_0
     104: getfield      #8                  // Field minValue:J
     107: lcmp
     108: ifge          175
     111: aload_0
     112: getfield      #18                 // Field cycle:Z
     115: ifeq          165
     118: aload_0
     119: aload_0
     120: getfield      #6                  // Field increment:J
     123: lconst_0
     124: lcmp
     125: ifle          135
     128: aload_0
     129: getfield      #8                  // Field minValue:J
     132: goto          139
     135: aload_0
     136: getfield      #10                 // Field maxValue:J
     139: putfield      #12                 // Field value:J
     142: aload_0
     143: aload_0
     144: getfield      #12                 // Field value:J
     147: aload_0
     148: getfield      #6                  // Field increment:J
     151: aload_0
     152: getfield      #17                 // Field cacheSize:J
     155: lmul
     156: ladd
     157: putfield      #13                 // Field valueWithMargin:J
     160: iconst_1
     161: istore_2
     162: goto          175
     165: ldc           #57                 // int 90006
     167: aload_0
     168: invokevirtual #25                 // Method getName:()Ljava/lang/String;
     171: invokestatic  #58                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
     174: athrow
     175: aload_0
     176: getfield      #12                 // Field value:J
     179: lstore_3
     180: aload_0
     181: dup
     182: getfield      #12                 // Field value:J
     185: aload_0
     186: getfield      #6                  // Field increment:J
     189: ladd
     190: putfield      #12                 // Field value:J
     193: aload         5
     195: monitorexit
     196: goto          207
     199: astore        6
     201: aload         5
     203: monitorexit
     204: aload         6
     206: athrow
     207: iload_2
     208: ifeq          216
     211: aload_0
     212: aload_1
     213: invokevirtual #59                 // Method flush:(Lorg/h2/engine/Session;)V
     216: lload_3
     217: lreturn
    Exception table:
       from    to  target type
           7   196   199   any
         199   204   199   any

  public void flushWithoutMargin();
    Code:
       0: aload_0
       1: getfield      #13                 // Field valueWithMargin:J
       4: aload_0
       5: getfield      #12                 // Field value:J
       8: lcmp
       9: ifeq          25
      12: aload_0
      13: aload_0
      14: getfield      #12                 // Field value:J
      17: putfield      #13                 // Field valueWithMargin:J
      20: aload_0
      21: aconst_null
      22: invokevirtual #59                 // Method flush:(Lorg/h2/engine/Session;)V
      25: return

  public void flush(org.h2.engine.Session);
    Code:
       0: aload_0
       1: invokevirtual #60                 // Method isTemporary:()Z
       4: ifeq          8
       7: return
       8: aload_1
       9: ifnull        23
      12: aload_0
      13: getfield      #61                 // Field database:Lorg/h2/engine/Database;
      16: aload_1
      17: invokevirtual #62                 // Method org/h2/engine/Database.isSysTableLockedBy:(Lorg/h2/engine/Session;)Z
      20: ifne          77
      23: aload_0
      24: getfield      #61                 // Field database:Lorg/h2/engine/Database;
      27: invokevirtual #63                 // Method org/h2/engine/Database.getSystemSession:()Lorg/h2/engine/Session;
      30: astore_2
      31: aload_0
      32: getfield      #61                 // Field database:Lorg/h2/engine/Database;
      35: invokevirtual #64                 // Method org/h2/engine/Database.isMultiThreaded:()Z
      38: ifeq          45
      41: aload_2
      42: goto          49
      45: aload_0
      46: getfield      #61                 // Field database:Lorg/h2/engine/Database;
      49: dup
      50: astore_3
      51: monitorenter
      52: aload_0
      53: aload_2
      54: invokespecial #65                 // Method flushInternal:(Lorg/h2/engine/Session;)V
      57: aload_2
      58: iconst_0
      59: invokevirtual #66                 // Method org/h2/engine/Session.commit:(Z)V
      62: aload_3
      63: monitorexit
      64: goto          74
      67: astore        4
      69: aload_3
      70: monitorexit
      71: aload         4
      73: athrow
      74: goto          115
      77: aload_0
      78: getfield      #61                 // Field database:Lorg/h2/engine/Database;
      81: invokevirtual #64                 // Method org/h2/engine/Database.isMultiThreaded:()Z
      84: ifeq          91
      87: aload_1
      88: goto          95
      91: aload_0
      92: getfield      #61                 // Field database:Lorg/h2/engine/Database;
      95: dup
      96: astore_2
      97: monitorenter
      98: aload_0
      99: aload_1
     100: invokespecial #65                 // Method flushInternal:(Lorg/h2/engine/Session;)V
     103: aload_2
     104: monitorexit
     105: goto          115
     108: astore        5
     110: aload_2
     111: monitorexit
     112: aload         5
     114: athrow
     115: return
    Exception table:
       from    to  target type
          52    64    67   any
          67    71    67   any
          98   105   108   any
         108   112   108   any

  private void flushInternal(org.h2.engine.Session);
    Code:
       0: aload_0
       1: getfield      #61                 // Field database:Lorg/h2/engine/Database;
       4: aload_1
       5: invokevirtual #67                 // Method org/h2/engine/Database.lockMeta:(Lorg/h2/engine/Session;)Z
       8: istore_2
       9: aload_0
      10: iconst_1
      11: putfield      #46                 // Field writeWithMargin:Z
      14: aload_0
      15: getfield      #61                 // Field database:Lorg/h2/engine/Database;
      18: aload_1
      19: aload_0
      20: invokevirtual #68                 // Method org/h2/engine/Database.updateMeta:(Lorg/h2/engine/Session;Lorg/h2/engine/DbObject;)V
      23: aload_0
      24: iconst_0
      25: putfield      #46                 // Field writeWithMargin:Z
      28: goto          39
      31: astore_3
      32: aload_0
      33: iconst_0
      34: putfield      #46                 // Field writeWithMargin:Z
      37: aload_3
      38: athrow
      39: iload_2
      40: ifne          51
      43: aload_0
      44: getfield      #61                 // Field database:Lorg/h2/engine/Database;
      47: aload_1
      48: invokevirtual #69                 // Method org/h2/engine/Database.unlockMeta:(Lorg/h2/engine/Session;)V
      51: return
    Exception table:
       from    to  target type
           9    23    31   any
          31    32    31   any

  public void close();
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method flushWithoutMargin:()V
       4: return

  public int getType();
    Code:
       0: iconst_3
       1: ireturn

  public void removeChildrenAndResources(org.h2.engine.Session);
    Code:
       0: aload_0
       1: getfield      #61                 // Field database:Lorg/h2/engine/Database;
       4: aload_1
       5: aload_0
       6: invokevirtual #71                 // Method getId:()I
       9: invokevirtual #72                 // Method org/h2/engine/Database.removeMeta:(Lorg/h2/engine/Session;I)V
      12: aload_0
      13: invokevirtual #73                 // Method invalidate:()V
      16: return

  public void checkRename();
    Code:
       0: return

  public synchronized long getCurrentValue();
    Code:
       0: aload_0
       1: getfield      #12                 // Field value:J
       4: aload_0
       5: getfield      #6                  // Field increment:J
       8: lsub
       9: lreturn

  public void setBelongsToTable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #19                 // Field belongsToTable:Z
       5: return

  public void setCacheSize(long);
    Code:
       0: aload_0
       1: lconst_1
       2: lload_1
       3: invokestatic  #14                 // Method java/lang/Math.max:(JJ)J
       6: putfield      #17                 // Field cacheSize:J
       9: return

  public long getCacheSize();
    Code:
       0: aload_0
       1: getfield      #17                 // Field cacheSize:J
       4: lreturn
}
