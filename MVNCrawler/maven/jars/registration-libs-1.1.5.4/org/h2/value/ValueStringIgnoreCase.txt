Compiled from "ValueStringIgnoreCase.java"
public class org.h2.value.ValueStringIgnoreCase extends org.h2.value.ValueString {
  private static final org.h2.value.ValueStringIgnoreCase EMPTY;

  private int hash;

  protected org.h2.value.ValueStringIgnoreCase(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/h2/value/ValueString."<init>":(Ljava/lang/String;)V
       5: return

  public int getType();
    Code:
       0: bipush        14
       2: ireturn

  protected int compareSecure(org.h2.value.Value, org.h2.value.CompareMode);
    Code:
       0: aload_1
       1: checkcast     #2                  // class org/h2/value/ValueStringIgnoreCase
       4: astore_3
       5: aload_2
       6: aload_0
       7: getfield      #3                  // Field value:Ljava/lang/String;
      10: aload_3
      11: getfield      #3                  // Field value:Ljava/lang/String;
      14: iconst_1
      15: invokevirtual #4                  // Method org/h2/value/CompareMode.compareString:(Ljava/lang/String;Ljava/lang/String;Z)I
      18: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #5                  // class org/h2/value/ValueString
       4: ifeq          28
       7: aload_0
       8: getfield      #3                  // Field value:Ljava/lang/String;
      11: aload_1
      12: checkcast     #5                  // class org/h2/value/ValueString
      15: getfield      #6                  // Field org/h2/value/ValueString.value:Ljava/lang/String;
      18: invokevirtual #7                  // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #8                  // Field hash:I
       4: ifne          21
       7: aload_0
       8: aload_0
       9: getfield      #3                  // Field value:Ljava/lang/String;
      12: invokevirtual #9                  // Method java/lang/String.toUpperCase:()Ljava/lang/String;
      15: invokevirtual #10                 // Method java/lang/String.hashCode:()I
      18: putfield      #8                  // Field hash:I
      21: aload_0
      22: getfield      #8                  // Field hash:I
      25: ireturn

  public java.lang.String getSQL();
    Code:
       0: new           #11                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #13                 // String CAST(
       9: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #3                  // Field value:Ljava/lang/String;
      16: invokestatic  #15                 // Method org/h2/util/StringUtils.quoteStringSQL:(Ljava/lang/String;)Ljava/lang/String;
      19: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #16                 // String  AS VARCHAR_IGNORECASE)
      24: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: areturn

  public static org.h2.value.ValueStringIgnoreCase get(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method java/lang/String.length:()I
       4: ifne          11
       7: getstatic     #19                 // Field EMPTY:Lorg/h2/value/ValueStringIgnoreCase;
      10: areturn
      11: new           #2                  // class org/h2/value/ValueStringIgnoreCase
      14: dup
      15: aload_0
      16: invokestatic  #20                 // Method org/h2/util/StringUtils.cache:(Ljava/lang/String;)Ljava/lang/String;
      19: invokespecial #21                 // Method "<init>":(Ljava/lang/String;)V
      22: astore_1
      23: aload_0
      24: invokevirtual #18                 // Method java/lang/String.length:()I
      27: getstatic     #22                 // Field org/h2/engine/SysProperties.OBJECT_CACHE_MAX_PER_ELEMENT_SIZE:I
      30: if_icmple     35
      33: aload_1
      34: areturn
      35: aload_1
      36: invokestatic  #23                 // Method org/h2/value/Value.cache:(Lorg/h2/value/Value;)Lorg/h2/value/Value;
      39: checkcast     #2                  // class org/h2/value/ValueStringIgnoreCase
      42: astore_2
      43: aload_2
      44: getfield      #3                  // Field value:Ljava/lang/String;
      47: aload_0
      48: invokevirtual #24                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      51: ifeq          56
      54: aload_2
      55: areturn
      56: aload_1
      57: areturn

  protected org.h2.value.ValueString getNew(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #25                 // Method get:(Ljava/lang/String;)Lorg/h2/value/ValueStringIgnoreCase;
       4: areturn

  protected org.h2.value.Value getNew(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #26                 // Method getNew:(Ljava/lang/String;)Lorg/h2/value/ValueString;
       5: areturn

  static {};
    Code:
       0: new           #2                  // class org/h2/value/ValueStringIgnoreCase
       3: dup
       4: ldc           #27                 // String
       6: invokespecial #21                 // Method "<init>":(Ljava/lang/String;)V
       9: putstatic     #19                 // Field EMPTY:Lorg/h2/value/ValueStringIgnoreCase;
      12: return
}
