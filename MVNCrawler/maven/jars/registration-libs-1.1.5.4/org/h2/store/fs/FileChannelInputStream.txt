Compiled from "FileChannelInputStream.java"
public class org.h2.store.fs.FileChannelInputStream extends java.io.InputStream {
  private final java.nio.channels.FileChannel channel;

  private final boolean closeChannel;

  private java.nio.ByteBuffer buffer;

  private long pos;

  public org.h2.store.fs.FileChannelInputStream(java.nio.channels.FileChannel, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field channel:Ljava/nio/channels/FileChannel;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field closeChannel:Z
      14: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
       4: ifnonnull     15
       7: aload_0
       8: iconst_1
       9: invokestatic  #5                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      12: putfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
      15: aload_0
      16: getfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
      19: invokevirtual #6                  // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      22: pop
      23: aload_0
      24: getfield      #2                  // Field channel:Ljava/nio/channels/FileChannel;
      27: aload_0
      28: getfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
      31: aload_0
      32: dup
      33: getfield      #7                  // Field pos:J
      36: dup2_x1
      37: lconst_1
      38: ladd
      39: putfield      #7                  // Field pos:J
      42: invokevirtual #8                  // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I
      45: istore_1
      46: iload_1
      47: ifge          52
      50: iconst_m1
      51: ireturn
      52: aload_0
      53: getfield      #4                  // Field buffer:Ljava/nio/ByteBuffer;
      56: iconst_0
      57: invokevirtual #9                  // Method java/nio/ByteBuffer.get:(I)B
      60: sipush        255
      63: iand
      64: ireturn

  public int read(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #10                 // Method read:([BII)I
       8: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: iload_2
       2: iload_3
       3: invokestatic  #11                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;
       6: astore        4
       8: aload_0
       9: getfield      #2                  // Field channel:Ljava/nio/channels/FileChannel;
      12: aload         4
      14: aload_0
      15: getfield      #7                  // Field pos:J
      18: invokevirtual #8                  // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I
      21: istore        5
      23: iload         5
      25: iconst_m1
      26: if_icmpne     31
      29: iconst_m1
      30: ireturn
      31: aload_0
      32: dup
      33: getfield      #7                  // Field pos:J
      36: iload         5
      38: i2l
      39: ladd
      40: putfield      #7                  // Field pos:J
      43: iload         5
      45: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field closeChannel:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #2                  // Field channel:Ljava/nio/channels/FileChannel;
      11: invokevirtual #12                 // Method java/nio/channels/FileChannel.close:()V
      14: return
}
