Compiled from "FilePathRetryOnInterrupt.java"
class org.h2.store.fs.FileRetryOnInterrupt$FileLockRetry extends java.nio.channels.FileLock {
  java.nio.channels.FileLock base;

  protected org.h2.store.fs.FileRetryOnInterrupt$FileLockRetry(java.nio.channels.FileLock, java.nio.channels.FileChannel);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokevirtual #1                  // Method java/nio/channels/FileLock.position:()J
       6: aload_1
       7: invokevirtual #2                  // Method java/nio/channels/FileLock.size:()J
      10: aload_1
      11: invokevirtual #3                  // Method java/nio/channels/FileLock.isShared:()Z
      14: invokespecial #4                  // Method java/nio/channels/FileLock."<init>":(Ljava/nio/channels/FileChannel;JJZ)V
      17: aload_0
      18: aload_1
      19: putfield      #5                  // Field base:Ljava/nio/channels/FileLock;
      22: return

  public boolean isValid();
    Code:
       0: aload_0
       1: getfield      #5                  // Field base:Ljava/nio/channels/FileLock;
       4: invokevirtual #6                  // Method java/nio/channels/FileLock.isValid:()Z
       7: ireturn

  public void release() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field base:Ljava/nio/channels/FileLock;
       4: invokevirtual #7                  // Method java/nio/channels/FileLock.release:()V
       7: return
}
