Compiled from "FilePathNioMapped.java"
class org.h2.store.fs.FileNioMapped extends org.h2.store.fs.FileBase {
  private static final long GC_TIMEOUT_MS;

  private final java.lang.String name;

  private final java.nio.channels.FileChannel$MapMode mode;

  private java.io.RandomAccessFile file;

  private java.nio.MappedByteBuffer mapped;

  private long fileLength;

  private int pos;

  org.h2.store.fs.FileNioMapped(java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/h2/store/fs/FileBase."<init>":()V
       4: ldc           #2                  // String r
       6: aload_2
       7: invokevirtual #3                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ifeq          23
      13: aload_0
      14: getstatic     #4                  // Field java/nio/channels/FileChannel$MapMode.READ_ONLY:Ljava/nio/channels/FileChannel$MapMode;
      17: putfield      #5                  // Field mode:Ljava/nio/channels/FileChannel$MapMode;
      20: goto          30
      23: aload_0
      24: getstatic     #6                  // Field java/nio/channels/FileChannel$MapMode.READ_WRITE:Ljava/nio/channels/FileChannel$MapMode;
      27: putfield      #5                  // Field mode:Ljava/nio/channels/FileChannel$MapMode;
      30: aload_0
      31: aload_1
      32: putfield      #7                  // Field name:Ljava/lang/String;
      35: aload_0
      36: new           #8                  // class java/io/RandomAccessFile
      39: dup
      40: aload_1
      41: aload_2
      42: invokespecial #9                  // Method java/io/RandomAccessFile."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      45: putfield      #10                 // Field file:Ljava/io/RandomAccessFile;
      48: aload_0
      49: invokespecial #11                 // Method reMap:()V
      52: return

  private void unMap() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
       4: ifnonnull     8
       7: return
       8: aload_0
       9: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      12: invokevirtual #13                 // Method java/nio/MappedByteBuffer.force:()Ljava/nio/MappedByteBuffer;
      15: pop
      16: iconst_1
      17: istore_1
      18: getstatic     #14                 // Field org/h2/engine/SysProperties.NIO_CLEANER_HACK:Z
      21: ifeq          118
      24: aload_0
      25: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      28: invokevirtual #15                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      31: ldc           #16                 // String cleaner
      33: iconst_0
      34: anewarray     #17                 // class java/lang/Class
      37: invokevirtual #18                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      40: astore_2
      41: aload_2
      42: iconst_1
      43: invokevirtual #19                 // Method java/lang/reflect/Method.setAccessible:(Z)V
      46: aload_2
      47: aload_0
      48: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      51: iconst_0
      52: anewarray     #20                 // class java/lang/Object
      55: invokevirtual #21                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      58: astore_3
      59: aload_3
      60: ifnull        89
      63: aload_3
      64: invokevirtual #15                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      67: ldc           #22                 // String clean
      69: iconst_0
      70: anewarray     #17                 // class java/lang/Class
      73: invokevirtual #18                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      76: astore        4
      78: aload         4
      80: aload_3
      81: iconst_0
      82: anewarray     #20                 // class java/lang/Object
      85: invokevirtual #21                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      88: pop
      89: iconst_0
      90: istore_1
      91: aload_0
      92: aconst_null
      93: putfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      96: goto          118
      99: astore_2
     100: aload_0
     101: aconst_null
     102: putfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
     105: goto          118
     108: astore        5
     110: aload_0
     111: aconst_null
     112: putfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
     115: aload         5
     117: athrow
     118: iload_1
     119: ifeq          187
     122: new           #24                 // class java/lang/ref/WeakReference
     125: dup
     126: aload_0
     127: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
     130: invokespecial #25                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
     133: astore_2
     134: aload_0
     135: aconst_null
     136: putfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
     139: invokestatic  #26                 // Method java/lang/System.nanoTime:()J
     142: lstore_3
     143: aload_2
     144: invokevirtual #27                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
     147: ifnull        187
     150: invokestatic  #26                 // Method java/lang/System.nanoTime:()J
     153: lload_3
     154: lsub
     155: getstatic     #28                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     158: ldc2_w        #29                 // long 10000l
     161: invokevirtual #31                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
     164: lcmp
     165: ifle          178
     168: new           #32                 // class java/io/IOException
     171: dup
     172: ldc           #33                 // String Timeout (10000 ms) reached while trying to GC mapped buffer
     174: invokespecial #34                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     177: athrow
     178: invokestatic  #35                 // Method java/lang/System.gc:()V
     181: invokestatic  #36                 // Method java/lang/Thread.yield:()V
     184: goto          143
     187: return
    Exception table:
       from    to  target type
          24    91    99   Class java/lang/Throwable
          24    91   108   any
          99   100   108   any
         108   110   108   any

  private void reMap() throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
       6: ifnull        18
       9: aload_0
      10: getfield      #37                 // Field pos:I
      13: istore_1
      14: aload_0
      15: invokespecial #38                 // Method unMap:()V
      18: aload_0
      19: aload_0
      20: getfield      #10                 // Field file:Ljava/io/RandomAccessFile;
      23: invokevirtual #39                 // Method java/io/RandomAccessFile.length:()J
      26: putfield      #40                 // Field fileLength:J
      29: aload_0
      30: getfield      #40                 // Field fileLength:J
      33: invokestatic  #41                 // Method checkFileSizeLimit:(J)V
      36: aload_0
      37: aload_0
      38: getfield      #10                 // Field file:Ljava/io/RandomAccessFile;
      41: invokevirtual #42                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      44: aload_0
      45: getfield      #5                  // Field mode:Ljava/nio/channels/FileChannel$MapMode;
      48: lconst_0
      49: aload_0
      50: getfield      #40                 // Field fileLength:J
      53: invokevirtual #43                 // Method java/nio/channels/FileChannel.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;
      56: putfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      59: aload_0
      60: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      63: invokevirtual #44                 // Method java/nio/MappedByteBuffer.limit:()I
      66: istore_2
      67: aload_0
      68: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      71: invokevirtual #45                 // Method java/nio/MappedByteBuffer.capacity:()I
      74: istore_3
      75: iload_2
      76: i2l
      77: aload_0
      78: getfield      #40                 // Field fileLength:J
      81: lcmp
      82: iflt          95
      85: iload_3
      86: i2l
      87: aload_0
      88: getfield      #40                 // Field fileLength:J
      91: lcmp
      92: ifge          143
      95: new           #32                 // class java/io/IOException
      98: dup
      99: new           #46                 // class java/lang/StringBuilder
     102: dup
     103: invokespecial #47                 // Method java/lang/StringBuilder."<init>":()V
     106: ldc           #48                 // String Unable to map: length=
     108: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     111: iload_2
     112: invokevirtual #50                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     115: ldc           #51                 // String  capacity=
     117: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     120: iload_3
     121: invokevirtual #50                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     124: ldc           #52                 // String  length=
     126: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     129: aload_0
     130: getfield      #40                 // Field fileLength:J
     133: invokevirtual #53                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     136: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     139: invokespecial #34                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     142: athrow
     143: getstatic     #55                 // Field org/h2/engine/SysProperties.NIO_LOAD_MAPPED:Z
     146: ifeq          157
     149: aload_0
     150: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
     153: invokevirtual #56                 // Method java/nio/MappedByteBuffer.load:()Ljava/nio/MappedByteBuffer;
     156: pop
     157: aload_0
     158: iload_1
     159: aload_0
     160: getfield      #40                 // Field fileLength:J
     163: l2i
     164: invokestatic  #57                 // Method java/lang/Math.min:(II)I
     167: putfield      #37                 // Field pos:I
     170: return

  private static void checkFileSizeLimit(long) throws java.io.IOException;
    Code:
       0: lload_0
       1: ldc2_w        #58                 // long 2147483647l
       4: lcmp
       5: ifle          18
       8: new           #32                 // class java/io/IOException
      11: dup
      12: ldc           #60                 // String File over 2GB is not supported yet when using this file system
      14: invokespecial #34                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: return

  public void implCloseChannel() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field file:Ljava/io/RandomAccessFile;
       4: ifnull        23
       7: aload_0
       8: invokespecial #38                 // Method unMap:()V
      11: aload_0
      12: getfield      #10                 // Field file:Ljava/io/RandomAccessFile;
      15: invokevirtual #61                 // Method java/io/RandomAccessFile.close:()V
      18: aload_0
      19: aconst_null
      20: putfield      #10                 // Field file:Ljava/io/RandomAccessFile;
      23: return

  public long position();
    Code:
       0: aload_0
       1: getfield      #37                 // Field pos:I
       4: i2l
       5: lreturn

  public java.lang.String toString();
    Code:
       0: new           #46                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #47                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #62                 // String nioMapped:
       9: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #7                  // Field name:Ljava/lang/String;
      16: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      22: areturn

  public synchronized long size() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #40                 // Field fileLength:J
       4: lreturn

  public synchronized int read(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #63                 // Method java/nio/ByteBuffer.remaining:()I
       4: istore_2
       5: iload_2
       6: ifne          11
       9: iconst_0
      10: ireturn
      11: iload_2
      12: i2l
      13: aload_0
      14: getfield      #40                 // Field fileLength:J
      17: aload_0
      18: getfield      #37                 // Field pos:I
      21: i2l
      22: lsub
      23: invokestatic  #64                 // Method java/lang/Math.min:(JJ)J
      26: l2i
      27: istore_2
      28: iload_2
      29: ifgt          34
      32: iconst_m1
      33: ireturn
      34: aload_0
      35: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      38: aload_0
      39: getfield      #37                 // Field pos:I
      42: invokevirtual #65                 // Method java/nio/MappedByteBuffer.position:(I)Ljava/nio/Buffer;
      45: pop
      46: aload_0
      47: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      50: aload_1
      51: invokevirtual #66                 // Method java/nio/ByteBuffer.array:()[B
      54: aload_1
      55: invokevirtual #67                 // Method java/nio/ByteBuffer.arrayOffset:()I
      58: aload_1
      59: invokevirtual #68                 // Method java/nio/ByteBuffer.position:()I
      62: iadd
      63: iload_2
      64: invokevirtual #69                 // Method java/nio/MappedByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      67: pop
      68: aload_1
      69: aload_1
      70: invokevirtual #68                 // Method java/nio/ByteBuffer.position:()I
      73: iload_2
      74: iadd
      75: invokevirtual #70                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      78: pop
      79: aload_0
      80: dup
      81: getfield      #37                 // Field pos:I
      84: iload_2
      85: iadd
      86: putfield      #37                 // Field pos:I
      89: iload_2
      90: ireturn
      91: astore_2
      92: new           #72                 // class java/io/EOFException
      95: dup
      96: ldc           #73                 // String EOF
      98: invokespecial #74                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
     101: astore_3
     102: aload_3
     103: aload_2
     104: invokevirtual #75                 // Method java/io/EOFException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
     107: pop
     108: aload_3
     109: athrow
     110: astore_2
     111: new           #72                 // class java/io/EOFException
     114: dup
     115: ldc           #73                 // String EOF
     117: invokespecial #74                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
     120: astore_3
     121: aload_3
     122: aload_2
     123: invokevirtual #75                 // Method java/io/EOFException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
     126: pop
     127: aload_3
     128: athrow
    Exception table:
       from    to  target type
           0    10    91   Class java/lang/IllegalArgumentException
          11    33    91   Class java/lang/IllegalArgumentException
          34    90    91   Class java/lang/IllegalArgumentException
           0    10   110   Class java/nio/BufferUnderflowException
          11    33   110   Class java/nio/BufferUnderflowException
          34    90   110   Class java/nio/BufferUnderflowException

  public java.nio.channels.FileChannel position(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: invokestatic  #41                 // Method checkFileSizeLimit:(J)V
       4: aload_0
       5: lload_1
       6: l2i
       7: putfield      #37                 // Field pos:I
      10: aload_0
      11: areturn

  public synchronized java.nio.channels.FileChannel truncate(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field mode:Ljava/nio/channels/FileChannel$MapMode;
       4: getstatic     #4                  // Field java/nio/channels/FileChannel$MapMode.READ_ONLY:Ljava/nio/channels/FileChannel$MapMode;
       7: if_acmpne     18
      10: new           #77                 // class java/nio/channels/NonWritableChannelException
      13: dup
      14: invokespecial #78                 // Method java/nio/channels/NonWritableChannelException."<init>":()V
      17: athrow
      18: lload_1
      19: aload_0
      20: invokevirtual #79                 // Method size:()J
      23: lcmp
      24: ifge          32
      27: aload_0
      28: lload_1
      29: invokevirtual #80                 // Method setFileLength:(J)V
      32: aload_0
      33: areturn

  public synchronized void setFileLength(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: invokestatic  #41                 // Method checkFileSizeLimit:(J)V
       4: aload_0
       5: getfield      #37                 // Field pos:I
       8: istore_3
       9: aload_0
      10: invokespecial #38                 // Method unMap:()V
      13: iconst_0
      14: istore        4
      16: aload_0
      17: getfield      #10                 // Field file:Ljava/io/RandomAccessFile;
      20: lload_1
      21: invokevirtual #81                 // Method java/io/RandomAccessFile.setLength:(J)V
      24: goto          61
      27: astore        5
      29: iload         4
      31: bipush        16
      33: if_icmpgt     49
      36: aload         5
      38: invokevirtual #82                 // Method java/io/IOException.toString:()Ljava/lang/String;
      41: ldc           #83                 // String user-mapped section open
      43: invokevirtual #84                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      46: ifne          52
      49: aload         5
      51: athrow
      52: invokestatic  #35                 // Method java/lang/System.gc:()V
      55: iinc          4, 1
      58: goto          16
      61: aload_0
      62: invokespecial #11                 // Method reMap:()V
      65: aload_0
      66: lload_1
      67: iload_3
      68: i2l
      69: invokestatic  #64                 // Method java/lang/Math.min:(JJ)J
      72: l2i
      73: putfield      #37                 // Field pos:I
      76: return
    Exception table:
       from    to  target type
          16    24    27   Class java/io/IOException

  public void force(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
       4: invokevirtual #13                 // Method java/nio/MappedByteBuffer.force:()Ljava/nio/MappedByteBuffer;
       7: pop
       8: aload_0
       9: getfield      #10                 // Field file:Ljava/io/RandomAccessFile;
      12: invokevirtual #85                 // Method java/io/RandomAccessFile.getFD:()Ljava/io/FileDescriptor;
      15: invokevirtual #86                 // Method java/io/FileDescriptor.sync:()V
      18: return

  public synchronized int write(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #63                 // Method java/nio/ByteBuffer.remaining:()I
       4: istore_2
       5: aload_0
       6: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
       9: invokevirtual #45                 // Method java/nio/MappedByteBuffer.capacity:()I
      12: aload_0
      13: getfield      #37                 // Field pos:I
      16: iload_2
      17: iadd
      18: if_icmpge     32
      21: aload_0
      22: aload_0
      23: getfield      #37                 // Field pos:I
      26: iload_2
      27: iadd
      28: i2l
      29: invokevirtual #80                 // Method setFileLength:(J)V
      32: aload_0
      33: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      36: aload_0
      37: getfield      #37                 // Field pos:I
      40: invokevirtual #65                 // Method java/nio/MappedByteBuffer.position:(I)Ljava/nio/Buffer;
      43: pop
      44: aload_0
      45: getfield      #12                 // Field mapped:Ljava/nio/MappedByteBuffer;
      48: aload_1
      49: invokevirtual #87                 // Method java/nio/MappedByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      52: pop
      53: aload_0
      54: dup
      55: getfield      #37                 // Field pos:I
      58: iload_2
      59: iadd
      60: putfield      #37                 // Field pos:I
      63: iload_2
      64: ireturn

  public synchronized java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field file:Ljava/io/RandomAccessFile;
       4: invokevirtual #42                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
       7: lload_1
       8: lload_3
       9: iload         5
      11: invokevirtual #88                 // Method java/nio/channels/FileChannel.tryLock:(JJZ)Ljava/nio/channels/FileLock;
      14: areturn

  public java.nio.channels.SeekableByteChannel truncate(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #89                 // Method truncate:(J)Ljava/nio/channels/FileChannel;
       5: areturn

  public java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #90                 // Method position:(J)Ljava/nio/channels/FileChannel;
       5: areturn
}
