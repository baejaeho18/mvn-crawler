Compiled from "FilePathZip.java"
class org.h2.store.fs.FileZip extends org.h2.store.fs.FileBase {
  private static final byte[] SKIP_BUFFER;

  private final java.util.zip.ZipFile file;

  private final java.util.zip.ZipEntry entry;

  private long pos;

  private java.io.InputStream in;

  private long inPos;

  private final long length;

  private boolean skipUsingRead;

  org.h2.store.fs.FileZip(java.util.zip.ZipFile, java.util.zip.ZipEntry);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/h2/store/fs/FileBase."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field file:Ljava/util/zip/ZipFile;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field entry:Ljava/util/zip/ZipEntry;
      14: aload_0
      15: aload_2
      16: invokevirtual #4                  // Method java/util/zip/ZipEntry.getSize:()J
      19: putfield      #5                  // Field length:J
      22: return

  public long position();
    Code:
       0: aload_0
       1: getfield      #6                  // Field pos:J
       4: lreturn

  public long size();
    Code:
       0: aload_0
       1: getfield      #5                  // Field length:J
       4: lreturn

  public int read(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #7                  // Method seek:()V
       4: aload_0
       5: getfield      #8                  // Field in:Ljava/io/InputStream;
       8: aload_1
       9: invokevirtual #9                  // Method java/nio/ByteBuffer.array:()[B
      12: aload_1
      13: invokevirtual #10                 // Method java/nio/ByteBuffer.arrayOffset:()I
      16: aload_1
      17: invokevirtual #11                 // Method java/nio/ByteBuffer.position:()I
      20: iadd
      21: aload_1
      22: invokevirtual #12                 // Method java/nio/ByteBuffer.remaining:()I
      25: invokevirtual #13                 // Method java/io/InputStream.read:([BII)I
      28: istore_2
      29: iload_2
      30: ifle          66
      33: aload_1
      34: aload_1
      35: invokevirtual #11                 // Method java/nio/ByteBuffer.position:()I
      38: iload_2
      39: iadd
      40: invokevirtual #14                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      43: pop
      44: aload_0
      45: dup
      46: getfield      #6                  // Field pos:J
      49: iload_2
      50: i2l
      51: ladd
      52: putfield      #6                  // Field pos:J
      55: aload_0
      56: dup
      57: getfield      #15                 // Field inPos:J
      60: iload_2
      61: i2l
      62: ladd
      63: putfield      #15                 // Field inPos:J
      66: iload_2
      67: ireturn

  private void seek() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field inPos:J
       4: aload_0
       5: getfield      #6                  // Field pos:J
       8: lcmp
       9: ifle          31
      12: aload_0
      13: getfield      #8                  // Field in:Ljava/io/InputStream;
      16: ifnull        26
      19: aload_0
      20: getfield      #8                  // Field in:Ljava/io/InputStream;
      23: invokevirtual #16                 // Method java/io/InputStream.close:()V
      26: aload_0
      27: aconst_null
      28: putfield      #8                  // Field in:Ljava/io/InputStream;
      31: aload_0
      32: getfield      #8                  // Field in:Ljava/io/InputStream;
      35: ifnonnull     58
      38: aload_0
      39: aload_0
      40: getfield      #2                  // Field file:Ljava/util/zip/ZipFile;
      43: aload_0
      44: getfield      #3                  // Field entry:Ljava/util/zip/ZipEntry;
      47: invokevirtual #17                 // Method java/util/zip/ZipFile.getInputStream:(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;
      50: putfield      #8                  // Field in:Ljava/io/InputStream;
      53: aload_0
      54: lconst_0
      55: putfield      #15                 // Field inPos:J
      58: aload_0
      59: getfield      #15                 // Field inPos:J
      62: aload_0
      63: getfield      #6                  // Field pos:J
      66: lcmp
      67: ifge          157
      70: aload_0
      71: getfield      #6                  // Field pos:J
      74: aload_0
      75: getfield      #15                 // Field inPos:J
      78: lsub
      79: lstore_1
      80: aload_0
      81: getfield      #18                 // Field skipUsingRead:Z
      84: ifne          104
      87: aload_0
      88: getfield      #8                  // Field in:Ljava/io/InputStream;
      91: lload_1
      92: invokestatic  #19                 // Method org/h2/util/IOUtils.skipFully:(Ljava/io/InputStream;J)V
      95: goto          104
      98: astore_3
      99: aload_0
     100: iconst_1
     101: putfield      #18                 // Field skipUsingRead:Z
     104: aload_0
     105: getfield      #18                 // Field skipUsingRead:Z
     108: ifeq          149
     111: lload_1
     112: lconst_0
     113: lcmp
     114: ifle          149
     117: getstatic     #21                 // Field SKIP_BUFFER:[B
     120: arraylength
     121: i2l
     122: lload_1
     123: invokestatic  #22                 // Method java/lang/Math.min:(JJ)J
     126: l2i
     127: istore_3
     128: aload_0
     129: getfield      #8                  // Field in:Ljava/io/InputStream;
     132: getstatic     #21                 // Field SKIP_BUFFER:[B
     135: iconst_0
     136: iload_3
     137: invokevirtual #13                 // Method java/io/InputStream.read:([BII)I
     140: istore_3
     141: lload_1
     142: iload_3
     143: i2l
     144: lsub
     145: lstore_1
     146: goto          111
     149: aload_0
     150: aload_0
     151: getfield      #6                  // Field pos:J
     154: putfield      #15                 // Field inPos:J
     157: return
    Exception table:
       from    to  target type
          87    95    98   Class java/lang/NullPointerException

  public java.nio.channels.FileChannel position(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #6                  // Field pos:J
       5: aload_0
       6: areturn

  public java.nio.channels.FileChannel truncate(long) throws java.io.IOException;
    Code:
       0: new           #23                 // class java/io/IOException
       3: dup
       4: ldc           #24                 // String File is read-only
       6: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void force(boolean) throws java.io.IOException;
    Code:
       0: return

  public int write(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: new           #23                 // class java/io/IOException
       3: dup
       4: ldc           #24                 // String File is read-only
       6: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
       9: athrow

  public synchronized java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException;
    Code:
       0: iload         5
       2: ifeq          25
       5: new           #26                 // class org/h2/store/fs/FileZip$1
       8: dup
       9: aload_0
      10: new           #27                 // class org/h2/store/fs/FakeFileChannel
      13: dup
      14: invokespecial #28                 // Method org/h2/store/fs/FakeFileChannel."<init>":()V
      17: lload_1
      18: lload_3
      19: iload         5
      21: invokespecial #29                 // Method org/h2/store/fs/FileZip$1."<init>":(Lorg/h2/store/fs/FileZip;Ljava/nio/channels/FileChannel;JJZ)V
      24: areturn
      25: aconst_null
      26: areturn

  protected void implCloseChannel() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field in:Ljava/io/InputStream;
       4: ifnull        19
       7: aload_0
       8: getfield      #8                  // Field in:Ljava/io/InputStream;
      11: invokevirtual #16                 // Method java/io/InputStream.close:()V
      14: aload_0
      15: aconst_null
      16: putfield      #8                  // Field in:Ljava/io/InputStream;
      19: aload_0
      20: getfield      #2                  // Field file:Ljava/util/zip/ZipFile;
      23: invokevirtual #30                 // Method java/util/zip/ZipFile.close:()V
      26: return

  public java.nio.channels.SeekableByteChannel truncate(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #31                 // Method truncate:(J)Ljava/nio/channels/FileChannel;
       5: areturn

  public java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #32                 // Method position:(J)Ljava/nio/channels/FileChannel;
       5: areturn

  static {};
    Code:
       0: sipush        1024
       3: newarray       byte
       5: putstatic     #21                 // Field SKIP_BUFFER:[B
       8: return
}
