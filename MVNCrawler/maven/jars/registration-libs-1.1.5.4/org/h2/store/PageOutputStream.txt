Compiled from "PageOutputStream.java"
public class org.h2.store.PageOutputStream {
  private org.h2.store.PageStore store;

  private final org.h2.message.Trace trace;

  private final org.h2.util.BitField exclude;

  private final boolean atEnd;

  private final int minPageId;

  private int trunkPageId;

  private int trunkNext;

  private org.h2.util.IntArray reservedPages;

  private org.h2.store.PageStreamTrunk trunk;

  private int trunkIndex;

  private org.h2.store.PageStreamData data;

  private int reserved;

  private boolean needFlush;

  private boolean writing;

  private int pageCount;

  private int logKey;

  public org.h2.store.PageOutputStream(org.h2.store.PageStore, int, org.h2.util.BitField, int, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/h2/util/IntArray
       8: dup
       9: invokespecial #3                  // Method org/h2/util/IntArray."<init>":()V
      12: putfield      #4                  // Field reservedPages:Lorg/h2/util/IntArray;
      15: aload_0
      16: aload_1
      17: invokevirtual #5                  // Method org/h2/store/PageStore.getTrace:()Lorg/h2/message/Trace;
      20: putfield      #6                  // Field trace:Lorg/h2/message/Trace;
      23: aload_0
      24: aload_1
      25: putfield      #7                  // Field store:Lorg/h2/store/PageStore;
      28: aload_0
      29: iload_2
      30: putfield      #8                  // Field trunkPageId:I
      33: aload_0
      34: aload_3
      35: putfield      #9                  // Field exclude:Lorg/h2/util/BitField;
      38: aload_0
      39: iload         4
      41: iconst_1
      42: isub
      43: putfield      #10                 // Field logKey:I
      46: aload_0
      47: iload         5
      49: putfield      #11                 // Field atEnd:Z
      52: aload_0
      53: iload         5
      55: ifeq          62
      58: iload_2
      59: goto          63
      62: iconst_0
      63: putfield      #12                 // Field minPageId:I
      66: return

  void reserve(int);
    Code:
       0: aload_0
       1: getfield      #13                 // Field reserved:I
       4: iload_1
       5: if_icmpge     115
       8: aload_0
       9: getfield      #7                  // Field store:Lorg/h2/store/PageStore;
      12: invokevirtual #14                 // Method org/h2/store/PageStore.getPageSize:()I
      15: istore_2
      16: iload_2
      17: invokestatic  #15                 // Method org/h2/store/PageStreamData.getCapacity:(I)I
      20: istore_3
      21: iload_2
      22: invokestatic  #16                 // Method org/h2/store/PageStreamTrunk.getPagesAddressed:(I)I
      25: istore        4
      27: iconst_0
      28: istore        5
      30: iconst_0
      31: istore        6
      33: iload         5
      35: iload         4
      37: iconst_1
      38: iadd
      39: iadd
      40: istore        5
      42: iload         6
      44: iload         4
      46: iload_3
      47: imul
      48: iadd
      49: istore        6
      51: iload         6
      53: iload_1
      54: if_icmplt     33
      57: aload_0
      58: getfield      #11                 // Field atEnd:Z
      61: ifeq          71
      64: aload_0
      65: getfield      #8                  // Field trunkPageId:I
      68: goto          72
      71: iconst_0
      72: istore        7
      74: aload_0
      75: getfield      #7                  // Field store:Lorg/h2/store/PageStore;
      78: aload_0
      79: getfield      #4                  // Field reservedPages:Lorg/h2/util/IntArray;
      82: iload         5
      84: aload_0
      85: getfield      #9                  // Field exclude:Lorg/h2/util/BitField;
      88: iload         7
      90: invokevirtual #17                 // Method org/h2/store/PageStore.allocatePages:(Lorg/h2/util/IntArray;ILorg/h2/util/BitField;I)V
      93: aload_0
      94: dup
      95: getfield      #13                 // Field reserved:I
      98: iload         6
     100: iadd
     101: putfield      #13                 // Field reserved:I
     104: aload_0
     105: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
     108: ifnonnull     115
     111: aload_0
     112: invokespecial #19                 // Method initNextData:()V
     115: return

  private void initNextData();
    Code:
       0: aload_0
       1: getfield      #20                 // Field trunk:Lorg/h2/store/PageStreamTrunk;
       4: ifnonnull     11
       7: iconst_m1
       8: goto          29
      11: aload_0
      12: getfield      #20                 // Field trunk:Lorg/h2/store/PageStreamTrunk;
      15: aload_0
      16: dup
      17: getfield      #21                 // Field trunkIndex:I
      20: dup_x1
      21: iconst_1
      22: iadd
      23: putfield      #21                 // Field trunkIndex:I
      26: invokevirtual #22                 // Method org/h2/store/PageStreamTrunk.getPageData:(I)I
      29: istore_1
      30: iload_1
      31: iconst_m1
      32: if_icmpne     200
      35: aload_0
      36: getfield      #8                  // Field trunkPageId:I
      39: istore_2
      40: aload_0
      41: getfield      #23                 // Field trunkNext:I
      44: ifeq          55
      47: aload_0
      48: aload_0
      49: getfield      #23                 // Field trunkNext:I
      52: putfield      #8                  // Field trunkPageId:I
      55: aload_0
      56: getfield      #7                  // Field store:Lorg/h2/store/PageStore;
      59: invokevirtual #14                 // Method org/h2/store/PageStore.getPageSize:()I
      62: invokestatic  #16                 // Method org/h2/store/PageStreamTrunk.getPagesAddressed:(I)I
      65: istore_3
      66: iload_3
      67: newarray       int
      69: astore        4
      71: iconst_0
      72: istore        5
      74: iload         5
      76: iload_3
      77: if_icmpge     100
      80: aload         4
      82: iload         5
      84: aload_0
      85: getfield      #4                  // Field reservedPages:Lorg/h2/util/IntArray;
      88: iload         5
      90: invokevirtual #24                 // Method org/h2/util/IntArray.get:(I)I
      93: iastore
      94: iinc          5, 1
      97: goto          74
     100: aload_0
     101: aload_0
     102: getfield      #4                  // Field reservedPages:Lorg/h2/util/IntArray;
     105: iload_3
     106: invokevirtual #24                 // Method org/h2/util/IntArray.get:(I)I
     109: putfield      #23                 // Field trunkNext:I
     112: aload_0
     113: dup
     114: getfield      #10                 // Field logKey:I
     117: iconst_1
     118: iadd
     119: putfield      #10                 // Field logKey:I
     122: aload_0
     123: aload_0
     124: getfield      #7                  // Field store:Lorg/h2/store/PageStore;
     127: iload_2
     128: aload_0
     129: getfield      #8                  // Field trunkPageId:I
     132: aload_0
     133: getfield      #23                 // Field trunkNext:I
     136: aload_0
     137: getfield      #10                 // Field logKey:I
     140: aload         4
     142: invokestatic  #25                 // Method org/h2/store/PageStreamTrunk.create:(Lorg/h2/store/PageStore;IIII[I)Lorg/h2/store/PageStreamTrunk;
     145: putfield      #20                 // Field trunk:Lorg/h2/store/PageStreamTrunk;
     148: aload_0
     149: iconst_0
     150: putfield      #21                 // Field trunkIndex:I
     153: aload_0
     154: dup
     155: getfield      #26                 // Field pageCount:I
     158: iconst_1
     159: iadd
     160: putfield      #26                 // Field pageCount:I
     163: aload_0
     164: getfield      #20                 // Field trunk:Lorg/h2/store/PageStreamTrunk;
     167: invokevirtual #27                 // Method org/h2/store/PageStreamTrunk.write:()V
     170: aload_0
     171: getfield      #4                  // Field reservedPages:Lorg/h2/util/IntArray;
     174: iconst_0
     175: iload_3
     176: iconst_1
     177: iadd
     178: invokevirtual #28                 // Method org/h2/util/IntArray.removeRange:(II)V
     181: aload_0
     182: getfield      #20                 // Field trunk:Lorg/h2/store/PageStreamTrunk;
     185: aload_0
     186: dup
     187: getfield      #21                 // Field trunkIndex:I
     190: dup_x1
     191: iconst_1
     192: iadd
     193: putfield      #21                 // Field trunkIndex:I
     196: invokevirtual #22                 // Method org/h2/store/PageStreamTrunk.getPageData:(I)I
     199: istore_1
     200: aload_0
     201: aload_0
     202: getfield      #7                  // Field store:Lorg/h2/store/PageStore;
     205: iload_1
     206: aload_0
     207: getfield      #20                 // Field trunk:Lorg/h2/store/PageStreamTrunk;
     210: invokevirtual #29                 // Method org/h2/store/PageStreamTrunk.getPos:()I
     213: aload_0
     214: getfield      #10                 // Field logKey:I
     217: invokestatic  #30                 // Method org/h2/store/PageStreamData.create:(Lorg/h2/store/PageStore;III)Lorg/h2/store/PageStreamData;
     220: putfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
     223: aload_0
     224: dup
     225: getfield      #26                 // Field pageCount:I
     228: iconst_1
     229: iadd
     230: putfield      #26                 // Field pageCount:I
     233: aload_0
     234: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
     237: invokevirtual #31                 // Method org/h2/store/PageStreamData.initWrite:()V
     240: return

  public void write(byte[], int, int);
    Code:
       0: iload_3
       1: ifgt          5
       4: return
       5: aload_0
       6: getfield      #32                 // Field writing:Z
       9: ifeq          18
      12: ldc           #33                 // String writing while still writing
      14: invokestatic  #34                 // Method org/h2/message/DbException.throwInternalError:(Ljava/lang/String;)Ljava/lang/RuntimeException;
      17: pop
      18: aload_0
      19: iload_3
      20: invokevirtual #35                 // Method reserve:(I)V
      23: aload_0
      24: iconst_1
      25: putfield      #32                 // Field writing:Z
      28: iload_3
      29: ifle          82
      32: aload_0
      33: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
      36: aload_1
      37: iload_2
      38: iload_3
      39: invokevirtual #36                 // Method org/h2/store/PageStreamData.write:([BII)I
      42: istore        4
      44: iload         4
      46: iload_3
      47: if_icmpge     58
      50: aload_0
      51: invokespecial #37                 // Method storePage:()V
      54: aload_0
      55: invokespecial #19                 // Method initNextData:()V
      58: aload_0
      59: dup
      60: getfield      #13                 // Field reserved:I
      63: iload         4
      65: isub
      66: putfield      #13                 // Field reserved:I
      69: iload_2
      70: iload         4
      72: iadd
      73: istore_2
      74: iload_3
      75: iload         4
      77: isub
      78: istore_3
      79: goto          28
      82: aload_0
      83: iconst_1
      84: putfield      #38                 // Field needFlush:Z
      87: aload_0
      88: iconst_0
      89: putfield      #32                 // Field writing:Z
      92: goto          105
      95: astore        5
      97: aload_0
      98: iconst_0
      99: putfield      #32                 // Field writing:Z
     102: aload         5
     104: athrow
     105: return
    Exception table:
       from    to  target type
          18    87    95   any
          95    97    95   any

  private void storePage();
    Code:
       0: aload_0
       1: getfield      #6                  // Field trace:Lorg/h2/message/Trace;
       4: invokevirtual #39                 // Method org/h2/message/Trace.isDebugEnabled:()Z
       7: ifeq          39
      10: aload_0
      11: getfield      #6                  // Field trace:Lorg/h2/message/Trace;
      14: new           #40                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #41                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #42                 // String pageOut.storePage
      23: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
      30: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokevirtual #46                 // Method org/h2/message/Trace.debug:(Ljava/lang/String;)V
      39: aload_0
      40: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
      43: invokevirtual #47                 // Method org/h2/store/PageStreamData.write:()V
      46: return

  public void flush();
    Code:
       0: aload_0
       1: getfield      #38                 // Field needFlush:Z
       4: ifeq          16
       7: aload_0
       8: invokespecial #37                 // Method storePage:()V
      11: aload_0
      12: iconst_0
      13: putfield      #38                 // Field needFlush:Z
      16: return

  public void close();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #7                  // Field store:Lorg/h2/store/PageStore;
       5: return

  int getCurrentDataPageId();
    Code:
       0: aload_0
       1: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
       4: invokevirtual #48                 // Method org/h2/store/PageStreamData.getPos:()I
       7: ireturn

  void fillPage();
    Code:
       0: aload_0
       1: getfield      #6                  // Field trace:Lorg/h2/message/Trace;
       4: invokevirtual #39                 // Method org/h2/message/Trace.isDebugEnabled:()Z
       7: ifeq          42
      10: aload_0
      11: getfield      #6                  // Field trace:Lorg/h2/message/Trace;
      14: new           #40                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #41                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #49                 // String pageOut.storePage fill
      23: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
      30: invokevirtual #48                 // Method org/h2/store/PageStreamData.getPos:()I
      33: invokevirtual #50                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      36: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: invokevirtual #46                 // Method org/h2/message/Trace.debug:(Ljava/lang/String;)V
      42: aload_0
      43: aload_0
      44: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
      47: invokevirtual #51                 // Method org/h2/store/PageStreamData.getRemaining:()I
      50: iconst_1
      51: iadd
      52: invokevirtual #35                 // Method reserve:(I)V
      55: aload_0
      56: dup
      57: getfield      #13                 // Field reserved:I
      60: aload_0
      61: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
      64: invokevirtual #51                 // Method org/h2/store/PageStreamData.getRemaining:()I
      67: isub
      68: putfield      #13                 // Field reserved:I
      71: aload_0
      72: getfield      #18                 // Field data:Lorg/h2/store/PageStreamData;
      75: invokevirtual #47                 // Method org/h2/store/PageStreamData.write:()V
      78: aload_0
      79: invokespecial #19                 // Method initNextData:()V
      82: return

  long getSize();
    Code:
       0: aload_0
       1: getfield      #26                 // Field pageCount:I
       4: aload_0
       5: getfield      #7                  // Field store:Lorg/h2/store/PageStore;
       8: invokevirtual #14                 // Method org/h2/store/PageStore.getPageSize:()I
      11: imul
      12: i2l
      13: lreturn

  void free(org.h2.store.PageStreamTrunk);
    Code:
       0: aload_0
       1: dup
       2: getfield      #26                 // Field pageCount:I
       5: aload_1
       6: iconst_0
       7: invokevirtual #52                 // Method org/h2/store/PageStreamTrunk.free:(I)I
      10: isub
      11: putfield      #26                 // Field pageCount:I
      14: return

  void freeReserved();
    Code:
       0: aload_0
       1: getfield      #4                  // Field reservedPages:Lorg/h2/util/IntArray;
       4: invokevirtual #53                 // Method org/h2/util/IntArray.size:()I
       7: ifle          80
      10: aload_0
      11: getfield      #4                  // Field reservedPages:Lorg/h2/util/IntArray;
      14: invokevirtual #53                 // Method org/h2/util/IntArray.size:()I
      17: newarray       int
      19: astore_1
      20: aload_0
      21: getfield      #4                  // Field reservedPages:Lorg/h2/util/IntArray;
      24: aload_1
      25: invokevirtual #54                 // Method org/h2/util/IntArray.toArray:([I)V
      28: aload_0
      29: new           #2                  // class org/h2/util/IntArray
      32: dup
      33: invokespecial #3                  // Method org/h2/util/IntArray."<init>":()V
      36: putfield      #4                  // Field reservedPages:Lorg/h2/util/IntArray;
      39: aload_0
      40: iconst_0
      41: putfield      #13                 // Field reserved:I
      44: aload_1
      45: astore_2
      46: aload_2
      47: arraylength
      48: istore_3
      49: iconst_0
      50: istore        4
      52: iload         4
      54: iload_3
      55: if_icmpge     80
      58: aload_2
      59: iload         4
      61: iaload
      62: istore        5
      64: aload_0
      65: getfield      #7                  // Field store:Lorg/h2/store/PageStore;
      68: iload         5
      70: iconst_0
      71: invokevirtual #55                 // Method org/h2/store/PageStore.free:(IZ)V
      74: iinc          4, 1
      77: goto          52
      80: return

  int getMinPageId();
    Code:
       0: aload_0
       1: getfield      #12                 // Field minPageId:I
       4: ireturn
}
