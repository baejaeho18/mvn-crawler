Compiled from "Delete.java"
public class org.h2.command.dml.Delete extends org.h2.command.Prepared {
  private org.h2.expression.Expression condition;

  private org.h2.table.TableFilter targetTableFilter;

  private org.h2.expression.Expression limitExpr;

  private org.h2.table.TableFilter sourceTableFilter;

  public org.h2.command.dml.Delete(org.h2.engine.Session);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/h2/command/Prepared."<init>":(Lorg/h2/engine/Session;)V
       5: return

  public void setTableFilter(org.h2.table.TableFilter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
       5: return

  public void setCondition(org.h2.expression.Expression);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field condition:Lorg/h2/expression/Expression;
       5: return

  public org.h2.expression.Expression getCondition();
    Code:
       0: aload_0
       1: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
       4: areturn

  public int update();
    Code:
       0: aload_0
       1: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
       4: aload_0
       5: getfield      #4                  // Field session:Lorg/h2/engine/Session;
       8: invokevirtual #5                  // Method org/h2/table/TableFilter.startQuery:(Lorg/h2/engine/Session;)V
      11: aload_0
      12: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
      15: invokevirtual #6                  // Method org/h2/table/TableFilter.reset:()V
      18: aload_0
      19: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
      22: invokevirtual #7                  // Method org/h2/table/TableFilter.getTable:()Lorg/h2/table/Table;
      25: astore_1
      26: aload_0
      27: getfield      #4                  // Field session:Lorg/h2/engine/Session;
      30: invokevirtual #8                  // Method org/h2/engine/Session.getUser:()Lorg/h2/engine/User;
      33: aload_1
      34: iconst_2
      35: invokevirtual #9                  // Method org/h2/engine/User.checkRight:(Lorg/h2/table/Table;I)V
      38: aload_1
      39: aload_0
      40: getfield      #4                  // Field session:Lorg/h2/engine/Session;
      43: iconst_4
      44: iconst_1
      45: invokevirtual #10                 // Method org/h2/table/Table.fire:(Lorg/h2/engine/Session;IZ)V
      48: aload_1
      49: aload_0
      50: getfield      #4                  // Field session:Lorg/h2/engine/Session;
      53: iconst_1
      54: iconst_0
      55: invokevirtual #11                 // Method org/h2/table/Table.lock:(Lorg/h2/engine/Session;ZZ)Z
      58: pop
      59: new           #12                 // class org/h2/result/RowList
      62: dup
      63: aload_0
      64: getfield      #4                  // Field session:Lorg/h2/engine/Session;
      67: invokespecial #13                 // Method org/h2/result/RowList."<init>":(Lorg/h2/engine/Session;)V
      70: astore_2
      71: iconst_m1
      72: istore_3
      73: aload_0
      74: getfield      #14                 // Field limitExpr:Lorg/h2/expression/Expression;
      77: ifnull        107
      80: aload_0
      81: getfield      #14                 // Field limitExpr:Lorg/h2/expression/Expression;
      84: aload_0
      85: getfield      #4                  // Field session:Lorg/h2/engine/Session;
      88: invokevirtual #15                 // Method org/h2/expression/Expression.getValue:(Lorg/h2/engine/Session;)Lorg/h2/value/Value;
      91: astore        4
      93: aload         4
      95: getstatic     #16                 // Field org/h2/value/ValueNull.INSTANCE:Lorg/h2/value/ValueNull;
      98: if_acmpeq     107
     101: aload         4
     103: invokevirtual #17                 // Method org/h2/value/Value.getInt:()I
     106: istore_3
     107: aload_0
     108: iconst_0
     109: invokevirtual #18                 // Method setCurrentRowNumber:(I)V
     112: iconst_0
     113: istore        4
     115: iload_3
     116: ifeq          222
     119: aload_0
     120: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
     123: invokevirtual #19                 // Method org/h2/table/TableFilter.next:()Z
     126: ifeq          222
     129: aload_0
     130: aload_2
     131: invokevirtual #20                 // Method org/h2/result/RowList.size:()I
     134: iconst_1
     135: iadd
     136: invokevirtual #18                 // Method setCurrentRowNumber:(I)V
     139: aload_0
     140: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
     143: ifnull        160
     146: aload_0
     147: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
     150: aload_0
     151: getfield      #4                  // Field session:Lorg/h2/engine/Session;
     154: invokevirtual #21                 // Method org/h2/expression/Expression.getBooleanValue:(Lorg/h2/engine/Session;)Z
     157: ifeq          115
     160: aload_0
     161: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
     164: invokevirtual #22                 // Method org/h2/table/TableFilter.get:()Lorg/h2/result/Row;
     167: astore        5
     169: iconst_0
     170: istore        6
     172: aload_1
     173: invokevirtual #23                 // Method org/h2/table/Table.fireRow:()Z
     176: ifeq          192
     179: aload_1
     180: aload_0
     181: getfield      #4                  // Field session:Lorg/h2/engine/Session;
     184: aload         5
     186: aconst_null
     187: invokevirtual #24                 // Method org/h2/table/Table.fireBeforeRow:(Lorg/h2/engine/Session;Lorg/h2/result/Row;Lorg/h2/result/Row;)Z
     190: istore        6
     192: iload         6
     194: ifne          203
     197: aload_2
     198: aload         5
     200: invokevirtual #25                 // Method org/h2/result/RowList.add:(Lorg/h2/result/Row;)V
     203: iinc          4, 1
     206: iload_3
     207: iflt          219
     210: iload         4
     212: iload_3
     213: if_icmplt     219
     216: goto          222
     219: goto          115
     222: iconst_0
     223: istore        5
     225: aload_2
     226: invokevirtual #26                 // Method org/h2/result/RowList.reset:()V
     229: aload_2
     230: invokevirtual #27                 // Method org/h2/result/RowList.hasNext:()Z
     233: ifeq          281
     236: iinc          5, 1
     239: iload         5
     241: bipush        127
     243: iand
     244: ifne          251
     247: aload_0
     248: invokevirtual #28                 // Method checkCanceled:()V
     251: aload_2
     252: invokevirtual #29                 // Method org/h2/result/RowList.next:()Lorg/h2/result/Row;
     255: astore        6
     257: aload_1
     258: aload_0
     259: getfield      #4                  // Field session:Lorg/h2/engine/Session;
     262: aload         6
     264: invokevirtual #30                 // Method org/h2/table/Table.removeRow:(Lorg/h2/engine/Session;Lorg/h2/result/Row;)V
     267: aload_0
     268: getfield      #4                  // Field session:Lorg/h2/engine/Session;
     271: aload_1
     272: iconst_1
     273: aload         6
     275: invokevirtual #31                 // Method org/h2/engine/Session.log:(Lorg/h2/table/Table;SLorg/h2/result/Row;)V
     278: goto          229
     281: aload_1
     282: invokevirtual #23                 // Method org/h2/table/Table.fireRow:()Z
     285: ifeq          320
     288: aload_2
     289: invokevirtual #26                 // Method org/h2/result/RowList.reset:()V
     292: aload_2
     293: invokevirtual #27                 // Method org/h2/result/RowList.hasNext:()Z
     296: ifeq          320
     299: aload_2
     300: invokevirtual #29                 // Method org/h2/result/RowList.next:()Lorg/h2/result/Row;
     303: astore        6
     305: aload_1
     306: aload_0
     307: getfield      #4                  // Field session:Lorg/h2/engine/Session;
     310: aload         6
     312: aconst_null
     313: iconst_0
     314: invokevirtual #32                 // Method org/h2/table/Table.fireAfterRow:(Lorg/h2/engine/Session;Lorg/h2/result/Row;Lorg/h2/result/Row;Z)V
     317: goto          292
     320: aload_1
     321: aload_0
     322: getfield      #4                  // Field session:Lorg/h2/engine/Session;
     325: iconst_4
     326: iconst_0
     327: invokevirtual #10                 // Method org/h2/table/Table.fire:(Lorg/h2/engine/Session;IZ)V
     330: iload         4
     332: istore        6
     334: aload_2
     335: invokevirtual #33                 // Method org/h2/result/RowList.close:()V
     338: iload         6
     340: ireturn
     341: astore        7
     343: aload_2
     344: invokevirtual #33                 // Method org/h2/result/RowList.close:()V
     347: aload         7
     349: athrow
    Exception table:
       from    to  target type
         107   334   341   any
         341   343   341   any

  public java.lang.String getPlanSQL();
    Code:
       0: new           #34                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #36                 // String DELETE
      11: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_1
      16: ldc           #38                 // String FROM
      18: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: aload_0
      22: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
      25: iconst_0
      26: invokevirtual #39                 // Method org/h2/table/TableFilter.getPlanSQL:(Z)Ljava/lang/String;
      29: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: pop
      33: aload_0
      34: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
      37: ifnull        60
      40: aload_1
      41: ldc           #40                 // String \nWHERE
      43: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_0
      47: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
      50: invokevirtual #41                 // Method org/h2/expression/Expression.getSQL:()Ljava/lang/String;
      53: invokestatic  #42                 // Method org/h2/util/StringUtils.unEnclose:(Ljava/lang/String;)Ljava/lang/String;
      56: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: pop
      60: aload_0
      61: getfield      #14                 // Field limitExpr:Lorg/h2/expression/Expression;
      64: ifnull        92
      67: aload_1
      68: ldc           #43                 // String \nLIMIT (
      70: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: aload_0
      74: getfield      #14                 // Field limitExpr:Lorg/h2/expression/Expression;
      77: invokevirtual #41                 // Method org/h2/expression/Expression.getSQL:()Ljava/lang/String;
      80: invokestatic  #42                 // Method org/h2/util/StringUtils.unEnclose:(Ljava/lang/String;)Ljava/lang/String;
      83: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: bipush        41
      88: invokevirtual #44                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      91: pop
      92: aload_1
      93: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      96: areturn

  public void prepare();
    Code:
       0: aload_0
       1: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
       4: ifnull        68
       7: aload_0
       8: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
      11: aload_0
      12: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
      15: iconst_0
      16: invokevirtual #46                 // Method org/h2/expression/Expression.mapColumns:(Lorg/h2/table/ColumnResolver;I)V
      19: aload_0
      20: getfield      #47                 // Field sourceTableFilter:Lorg/h2/table/TableFilter;
      23: ifnull        38
      26: aload_0
      27: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
      30: aload_0
      31: getfield      #47                 // Field sourceTableFilter:Lorg/h2/table/TableFilter;
      34: iconst_0
      35: invokevirtual #46                 // Method org/h2/expression/Expression.mapColumns:(Lorg/h2/table/ColumnResolver;I)V
      38: aload_0
      39: aload_0
      40: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
      43: aload_0
      44: getfield      #4                  // Field session:Lorg/h2/engine/Session;
      47: invokevirtual #48                 // Method org/h2/expression/Expression.optimize:(Lorg/h2/engine/Session;)Lorg/h2/expression/Expression;
      50: putfield      #3                  // Field condition:Lorg/h2/expression/Expression;
      53: aload_0
      54: getfield      #3                  // Field condition:Lorg/h2/expression/Expression;
      57: aload_0
      58: getfield      #4                  // Field session:Lorg/h2/engine/Session;
      61: aload_0
      62: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
      65: invokevirtual #49                 // Method org/h2/expression/Expression.createIndexConditions:(Lorg/h2/engine/Session;Lorg/h2/table/TableFilter;)V
      68: aload_0
      69: getfield      #47                 // Field sourceTableFilter:Lorg/h2/table/TableFilter;
      72: ifnonnull     90
      75: iconst_1
      76: anewarray     #50                 // class org/h2/table/TableFilter
      79: dup
      80: iconst_0
      81: aload_0
      82: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
      85: aastore
      86: astore_1
      87: goto          109
      90: iconst_2
      91: anewarray     #50                 // class org/h2/table/TableFilter
      94: dup
      95: iconst_0
      96: aload_0
      97: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
     100: aastore
     101: dup
     102: iconst_1
     103: aload_0
     104: getfield      #47                 // Field sourceTableFilter:Lorg/h2/table/TableFilter;
     107: aastore
     108: astore_1
     109: aload_0
     110: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
     113: aload_0
     114: getfield      #4                  // Field session:Lorg/h2/engine/Session;
     117: aload_1
     118: iconst_0
     119: aload_1
     120: invokestatic  #51                 // Method org/h2/expression/ExpressionVisitor.allColumnsForTableFilters:([Lorg/h2/table/TableFilter;)Ljava/util/HashSet;
     123: invokevirtual #52                 // Method org/h2/table/TableFilter.getBestPlanItem:(Lorg/h2/engine/Session;[Lorg/h2/table/TableFilter;ILjava/util/HashSet;)Lorg/h2/table/PlanItem;
     126: astore_2
     127: aload_0
     128: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
     131: aload_2
     132: invokevirtual #53                 // Method org/h2/table/TableFilter.setPlanItem:(Lorg/h2/table/PlanItem;)V
     135: aload_0
     136: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
     139: invokevirtual #54                 // Method org/h2/table/TableFilter.prepare:()V
     142: return

  public boolean isTransactional();
    Code:
       0: iconst_1
       1: ireturn

  public org.h2.result.ResultInterface queryMeta();
    Code:
       0: aconst_null
       1: areturn

  public int getType();
    Code:
       0: bipush        58
       2: ireturn

  public void setLimit(org.h2.expression.Expression);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field limitExpr:Lorg/h2/expression/Expression;
       5: return

  public boolean isCacheable();
    Code:
       0: iconst_1
       1: ireturn

  public void setSourceTableFilter(org.h2.table.TableFilter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #47                 // Field sourceTableFilter:Lorg/h2/table/TableFilter;
       5: return

  public org.h2.table.TableFilter getTableFilter();
    Code:
       0: aload_0
       1: getfield      #2                  // Field targetTableFilter:Lorg/h2/table/TableFilter;
       4: areturn

  public org.h2.table.TableFilter getSourceTableFilter();
    Code:
       0: aload_0
       1: getfield      #47                 // Field sourceTableFilter:Lorg/h2/table/TableFilter;
       4: areturn
}
