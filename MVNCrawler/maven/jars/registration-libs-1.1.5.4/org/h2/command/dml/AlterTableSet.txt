Compiled from "AlterTableSet.java"
public class org.h2.command.dml.AlterTableSet extends org.h2.command.ddl.SchemaCommand {
  private boolean ifTableExists;

  private java.lang.String tableName;

  private final int type;

  private final boolean value;

  private boolean checkExisting;

  public org.h2.command.dml.AlterTableSet(org.h2.engine.Session, org.h2.schema.Schema, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/h2/command/ddl/SchemaCommand."<init>":(Lorg/h2/engine/Session;Lorg/h2/schema/Schema;)V
       6: aload_0
       7: iload_3
       8: putfield      #2                  // Field type:I
      11: aload_0
      12: iload         4
      14: putfield      #3                  // Field value:Z
      17: return

  public void setCheckExisting(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field checkExisting:Z
       5: return

  public boolean isTransactional();
    Code:
       0: iconst_1
       1: ireturn

  public void setIfTableExists(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field ifTableExists:Z
       5: return

  public void setTableName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field tableName:Ljava/lang/String;
       5: return

  public int update();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getSchema:()Lorg/h2/schema/Schema;
       4: aload_0
       5: getfield      #8                  // Field session:Lorg/h2/engine/Session;
       8: aload_0
       9: getfield      #6                  // Field tableName:Ljava/lang/String;
      12: invokevirtual #9                  // Method org/h2/schema/Schema.resolveTableOrView:(Lorg/h2/engine/Session;Ljava/lang/String;)Lorg/h2/table/Table;
      15: astore_1
      16: aload_1
      17: ifnonnull     39
      20: aload_0
      21: getfield      #5                  // Field ifTableExists:Z
      24: ifeq          29
      27: iconst_0
      28: ireturn
      29: ldc           #10                 // int 42102
      31: aload_0
      32: getfield      #6                  // Field tableName:Ljava/lang/String;
      35: invokestatic  #11                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      38: athrow
      39: aload_0
      40: getfield      #8                  // Field session:Lorg/h2/engine/Session;
      43: invokevirtual #12                 // Method org/h2/engine/Session.getUser:()Lorg/h2/engine/User;
      46: aload_1
      47: bipush        15
      49: invokevirtual #13                 // Method org/h2/engine/User.checkRight:(Lorg/h2/table/Table;I)V
      52: aload_1
      53: aload_0
      54: getfield      #8                  // Field session:Lorg/h2/engine/Session;
      57: iconst_1
      58: iconst_1
      59: invokevirtual #14                 // Method org/h2/table/Table.lock:(Lorg/h2/engine/Session;ZZ)Z
      62: pop
      63: aload_0
      64: getfield      #2                  // Field type:I
      67: lookupswitch  { // 1
                    55: 84
               default: 114
          }
      84: aload_1
      85: aload_0
      86: getfield      #8                  // Field session:Lorg/h2/engine/Session;
      89: aload_0
      90: getfield      #3                  // Field value:Z
      93: aload_0
      94: getfield      #3                  // Field value:Z
      97: ifeq          107
     100: aload_0
     101: getfield      #4                  // Field checkExisting:Z
     104: goto          108
     107: iconst_0
     108: invokevirtual #15                 // Method org/h2/table/Table.setCheckForeignKeyConstraints:(Lorg/h2/engine/Session;ZZ)V
     111: goto          140
     114: new           #16                 // class java/lang/StringBuilder
     117: dup
     118: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
     121: ldc           #18                 // String type=
     123: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     126: aload_0
     127: getfield      #2                  // Field type:I
     130: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     133: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     136: invokestatic  #22                 // Method org/h2/message/DbException.throwInternalError:(Ljava/lang/String;)Ljava/lang/RuntimeException;
     139: pop
     140: iconst_0
     141: ireturn

  public int getType();
    Code:
       0: aload_0
       1: getfield      #2                  // Field type:I
       4: ireturn
}
