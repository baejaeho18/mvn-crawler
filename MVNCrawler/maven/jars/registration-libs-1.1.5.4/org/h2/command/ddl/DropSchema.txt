Compiled from "DropSchema.java"
public class org.h2.command.ddl.DropSchema extends org.h2.command.ddl.DefineCommand {
  private java.lang.String schemaName;

  private boolean ifExists;

  private org.h2.constraint.ConstraintActionType dropAction;

  public org.h2.command.ddl.DropSchema(org.h2.engine.Session);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/h2/command/ddl/DefineCommand."<init>":(Lorg/h2/engine/Session;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #2                  // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
      10: invokevirtual #3                  // Method org/h2/engine/Database.getSettings:()Lorg/h2/engine/DbSettings;
      13: getfield      #4                  // Field org/h2/engine/DbSettings.dropRestrict:Z
      16: ifeq          25
      19: getstatic     #5                  // Field org/h2/constraint/ConstraintActionType.RESTRICT:Lorg/h2/constraint/ConstraintActionType;
      22: goto          28
      25: getstatic     #6                  // Field org/h2/constraint/ConstraintActionType.CASCADE:Lorg/h2/constraint/ConstraintActionType;
      28: putfield      #7                  // Field dropAction:Lorg/h2/constraint/ConstraintActionType;
      31: return

  public void setSchemaName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field schemaName:Ljava/lang/String;
       5: return

  public int update();
    Code:
       0: aload_0
       1: getfield      #9                  // Field session:Lorg/h2/engine/Session;
       4: invokevirtual #10                 // Method org/h2/engine/Session.getUser:()Lorg/h2/engine/User;
       7: invokevirtual #11                 // Method org/h2/engine/User.checkSchemaAdmin:()V
      10: aload_0
      11: getfield      #9                  // Field session:Lorg/h2/engine/Session;
      14: iconst_1
      15: invokevirtual #12                 // Method org/h2/engine/Session.commit:(Z)V
      18: aload_0
      19: getfield      #9                  // Field session:Lorg/h2/engine/Session;
      22: invokevirtual #2                  // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
      25: astore_1
      26: aload_1
      27: aload_0
      28: getfield      #8                  // Field schemaName:Ljava/lang/String;
      31: invokevirtual #13                 // Method org/h2/engine/Database.findSchema:(Ljava/lang/String;)Lorg/h2/schema/Schema;
      34: astore_2
      35: aload_2
      36: ifnonnull     56
      39: aload_0
      40: getfield      #14                 // Field ifExists:Z
      43: ifne          190
      46: ldc           #15                 // int 90079
      48: aload_0
      49: getfield      #8                  // Field schemaName:Ljava/lang/String;
      52: invokestatic  #16                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      55: athrow
      56: aload_2
      57: invokevirtual #17                 // Method org/h2/schema/Schema.canDrop:()Z
      60: ifne          73
      63: ldc           #18                 // int 90090
      65: aload_0
      66: getfield      #8                  // Field schemaName:Ljava/lang/String;
      69: invokestatic  #16                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      72: athrow
      73: aload_0
      74: getfield      #7                  // Field dropAction:Lorg/h2/constraint/ConstraintActionType;
      77: getstatic     #5                  // Field org/h2/constraint/ConstraintActionType.RESTRICT:Lorg/h2/constraint/ConstraintActionType;
      80: if_acmpne     181
      83: aload_2
      84: invokevirtual #19                 // Method org/h2/schema/Schema.isEmpty:()Z
      87: ifne          181
      90: new           #20                 // class org/h2/util/StatementBuilder
      93: dup
      94: invokespecial #21                 // Method org/h2/util/StatementBuilder."<init>":()V
      97: astore_3
      98: aload_2
      99: invokevirtual #22                 // Method org/h2/schema/Schema.getAll:()Ljava/util/ArrayList;
     102: invokevirtual #23                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
     105: astore        4
     107: aload         4
     109: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     114: ifeq          150
     117: aload         4
     119: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     124: checkcast     #26                 // class org/h2/schema/SchemaObject
     127: astore        5
     129: aload_3
     130: ldc           #27                 // String ,
     132: invokevirtual #28                 // Method org/h2/util/StatementBuilder.appendExceptFirst:(Ljava/lang/String;)V
     135: aload_3
     136: aload         5
     138: invokeinterface #29,  1           // InterfaceMethod org/h2/schema/SchemaObject.getName:()Ljava/lang/String;
     143: invokevirtual #30                 // Method org/h2/util/StatementBuilder.append:(Ljava/lang/String;)Lorg/h2/util/StatementBuilder;
     146: pop
     147: goto          107
     150: aload_3
     151: invokevirtual #31                 // Method org/h2/util/StatementBuilder.length:()I
     154: ifle          181
     157: ldc           #32                 // int 90107
     159: iconst_2
     160: anewarray     #33                 // class java/lang/String
     163: dup
     164: iconst_0
     165: aload_0
     166: getfield      #8                  // Field schemaName:Ljava/lang/String;
     169: aastore
     170: dup
     171: iconst_1
     172: aload_3
     173: invokevirtual #34                 // Method org/h2/util/StatementBuilder.toString:()Ljava/lang/String;
     176: aastore
     177: invokestatic  #35                 // Method org/h2/message/DbException.get:(I[Ljava/lang/String;)Lorg/h2/message/DbException;
     180: athrow
     181: aload_1
     182: aload_0
     183: getfield      #9                  // Field session:Lorg/h2/engine/Session;
     186: aload_2
     187: invokevirtual #36                 // Method org/h2/engine/Database.removeDatabaseObject:(Lorg/h2/engine/Session;Lorg/h2/engine/DbObject;)V
     190: iconst_0
     191: ireturn

  public void setIfExists(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field ifExists:Z
       5: return

  public void setDropAction(org.h2.constraint.ConstraintActionType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field dropAction:Lorg/h2/constraint/ConstraintActionType;
       5: return

  public int getType();
    Code:
       0: bipush        42
       2: ireturn
}
