Compiled from "CreateTrigger.java"
public class org.h2.command.ddl.CreateTrigger extends org.h2.command.ddl.SchemaCommand {
  private java.lang.String triggerName;

  private boolean ifNotExists;

  private boolean insteadOf;

  private boolean before;

  private int typeMask;

  private boolean rowBased;

  private int queueSize;

  private boolean noWait;

  private java.lang.String tableName;

  private java.lang.String triggerClassName;

  private java.lang.String triggerSource;

  private boolean force;

  private boolean onRollback;

  public org.h2.command.ddl.CreateTrigger(org.h2.engine.Session, org.h2.schema.Schema);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/h2/command/ddl/SchemaCommand."<init>":(Lorg/h2/engine/Session;Lorg/h2/schema/Schema;)V
       6: aload_0
       7: sipush        1024
      10: putfield      #2                  // Field queueSize:I
      13: return

  public void setInsteadOf(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field insteadOf:Z
       5: return

  public void setBefore(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field before:Z
       5: return

  public void setTriggerClassName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field triggerClassName:Ljava/lang/String;
       5: return

  public void setTriggerSource(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field triggerSource:Ljava/lang/String;
       5: return

  public void setTypeMask(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field typeMask:I
       5: return

  public void setRowBased(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field rowBased:Z
       5: return

  public void setQueueSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field queueSize:I
       5: return

  public void setNoWait(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field noWait:Z
       5: return

  public void setTableName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field tableName:Ljava/lang/String;
       5: return

  public void setTriggerName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field triggerName:Ljava/lang/String;
       5: return

  public void setIfNotExists(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field ifNotExists:Z
       5: return

  public int update();
    Code:
       0: aload_0
       1: getfield      #13                 // Field session:Lorg/h2/engine/Session;
       4: iconst_1
       5: invokevirtual #14                 // Method org/h2/engine/Session.commit:(Z)V
       8: aload_0
       9: getfield      #13                 // Field session:Lorg/h2/engine/Session;
      12: invokevirtual #15                 // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
      15: astore_1
      16: aload_0
      17: invokevirtual #16                 // Method getSchema:()Lorg/h2/schema/Schema;
      20: aload_0
      21: getfield      #11                 // Field triggerName:Ljava/lang/String;
      24: invokevirtual #17                 // Method org/h2/schema/Schema.findTrigger:(Ljava/lang/String;)Lorg/h2/schema/TriggerObject;
      27: ifnull        49
      30: aload_0
      31: getfield      #12                 // Field ifNotExists:Z
      34: ifeq          39
      37: iconst_0
      38: ireturn
      39: ldc           #18                 // int 90041
      41: aload_0
      42: getfield      #11                 // Field triggerName:Ljava/lang/String;
      45: invokestatic  #19                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      48: athrow
      49: aload_0
      50: getfield      #7                  // Field typeMask:I
      53: bipush        8
      55: iand
      56: bipush        8
      58: if_icmpne     78
      61: aload_0
      62: getfield      #8                  // Field rowBased:Z
      65: ifeq          78
      68: ldc           #20                 // int 90005
      70: aload_0
      71: getfield      #11                 // Field triggerName:Ljava/lang/String;
      74: invokestatic  #19                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      77: athrow
      78: aload_0
      79: invokevirtual #21                 // Method getObjectId:()I
      82: istore_2
      83: aload_0
      84: invokevirtual #16                 // Method getSchema:()Lorg/h2/schema/Schema;
      87: aload_0
      88: getfield      #13                 // Field session:Lorg/h2/engine/Session;
      91: aload_0
      92: getfield      #10                 // Field tableName:Ljava/lang/String;
      95: invokevirtual #22                 // Method org/h2/schema/Schema.getTableOrView:(Lorg/h2/engine/Session;Ljava/lang/String;)Lorg/h2/table/Table;
      98: astore_3
      99: new           #23                 // class org/h2/schema/TriggerObject
     102: dup
     103: aload_0
     104: invokevirtual #16                 // Method getSchema:()Lorg/h2/schema/Schema;
     107: iload_2
     108: aload_0
     109: getfield      #11                 // Field triggerName:Ljava/lang/String;
     112: aload_3
     113: invokespecial #24                 // Method org/h2/schema/TriggerObject."<init>":(Lorg/h2/schema/Schema;ILjava/lang/String;Lorg/h2/table/Table;)V
     116: astore        4
     118: aload         4
     120: aload_0
     121: getfield      #3                  // Field insteadOf:Z
     124: invokevirtual #25                 // Method org/h2/schema/TriggerObject.setInsteadOf:(Z)V
     127: aload         4
     129: aload_0
     130: getfield      #4                  // Field before:Z
     133: invokevirtual #26                 // Method org/h2/schema/TriggerObject.setBefore:(Z)V
     136: aload         4
     138: aload_0
     139: getfield      #9                  // Field noWait:Z
     142: invokevirtual #27                 // Method org/h2/schema/TriggerObject.setNoWait:(Z)V
     145: aload         4
     147: aload_0
     148: getfield      #2                  // Field queueSize:I
     151: invokevirtual #28                 // Method org/h2/schema/TriggerObject.setQueueSize:(I)V
     154: aload         4
     156: aload_0
     157: getfield      #8                  // Field rowBased:Z
     160: invokevirtual #29                 // Method org/h2/schema/TriggerObject.setRowBased:(Z)V
     163: aload         4
     165: aload_0
     166: getfield      #7                  // Field typeMask:I
     169: invokevirtual #30                 // Method org/h2/schema/TriggerObject.setTypeMask:(I)V
     172: aload         4
     174: aload_0
     175: getfield      #31                 // Field onRollback:Z
     178: invokevirtual #32                 // Method org/h2/schema/TriggerObject.setOnRollback:(Z)V
     181: aload_0
     182: getfield      #5                  // Field triggerClassName:Ljava/lang/String;
     185: ifnull        204
     188: aload         4
     190: aload_0
     191: getfield      #5                  // Field triggerClassName:Ljava/lang/String;
     194: aload_0
     195: getfield      #33                 // Field force:Z
     198: invokevirtual #34                 // Method org/h2/schema/TriggerObject.setTriggerClassName:(Ljava/lang/String;Z)V
     201: goto          217
     204: aload         4
     206: aload_0
     207: getfield      #6                  // Field triggerSource:Ljava/lang/String;
     210: aload_0
     211: getfield      #33                 // Field force:Z
     214: invokevirtual #35                 // Method org/h2/schema/TriggerObject.setTriggerSource:(Ljava/lang/String;Z)V
     217: aload_1
     218: aload_0
     219: getfield      #13                 // Field session:Lorg/h2/engine/Session;
     222: aload         4
     224: invokevirtual #36                 // Method org/h2/engine/Database.addSchemaObject:(Lorg/h2/engine/Session;Lorg/h2/schema/SchemaObject;)V
     227: aload_3
     228: aload         4
     230: invokevirtual #37                 // Method org/h2/table/Table.addTrigger:(Lorg/h2/schema/TriggerObject;)V
     233: iconst_0
     234: ireturn

  public void setForce(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field force:Z
       5: return

  public void setOnRollback(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field onRollback:Z
       5: return

  public int getType();
    Code:
       0: bipush        31
       2: ireturn
}
