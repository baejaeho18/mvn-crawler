Compiled from "DropView.java"
public class org.h2.command.ddl.DropView extends org.h2.command.ddl.SchemaCommand {
  private java.lang.String viewName;

  private boolean ifExists;

  private org.h2.constraint.ConstraintActionType dropAction;

  public org.h2.command.ddl.DropView(org.h2.engine.Session, org.h2.schema.Schema);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/h2/command/ddl/SchemaCommand."<init>":(Lorg/h2/engine/Session;Lorg/h2/schema/Schema;)V
       6: aload_0
       7: aload_1
       8: invokevirtual #2                  // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
      11: invokevirtual #3                  // Method org/h2/engine/Database.getSettings:()Lorg/h2/engine/DbSettings;
      14: getfield      #4                  // Field org/h2/engine/DbSettings.dropRestrict:Z
      17: ifeq          26
      20: getstatic     #5                  // Field org/h2/constraint/ConstraintActionType.RESTRICT:Lorg/h2/constraint/ConstraintActionType;
      23: goto          29
      26: getstatic     #6                  // Field org/h2/constraint/ConstraintActionType.CASCADE:Lorg/h2/constraint/ConstraintActionType;
      29: putfield      #7                  // Field dropAction:Lorg/h2/constraint/ConstraintActionType;
      32: return

  public void setIfExists(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field ifExists:Z
       5: return

  public void setDropAction(org.h2.constraint.ConstraintActionType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field dropAction:Lorg/h2/constraint/ConstraintActionType;
       5: return

  public void setViewName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field viewName:Ljava/lang/String;
       5: return

  public int update();
    Code:
       0: aload_0
       1: getfield      #10                 // Field session:Lorg/h2/engine/Session;
       4: iconst_1
       5: invokevirtual #11                 // Method org/h2/engine/Session.commit:(Z)V
       8: aload_0
       9: invokevirtual #12                 // Method getSchema:()Lorg/h2/schema/Schema;
      12: aload_0
      13: getfield      #10                 // Field session:Lorg/h2/engine/Session;
      16: aload_0
      17: getfield      #9                  // Field viewName:Ljava/lang/String;
      20: invokevirtual #13                 // Method org/h2/schema/Schema.findTableOrView:(Lorg/h2/engine/Session;Ljava/lang/String;)Lorg/h2/table/Table;
      23: astore_1
      24: aload_1
      25: ifnonnull     45
      28: aload_0
      29: getfield      #8                  // Field ifExists:Z
      32: ifne          289
      35: ldc           #14                 // int 90037
      37: aload_0
      38: getfield      #9                  // Field viewName:Ljava/lang/String;
      41: invokestatic  #15                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      44: athrow
      45: getstatic     #16                 // Field org/h2/table/TableType.VIEW:Lorg/h2/table/TableType;
      48: aload_1
      49: invokevirtual #17                 // Method org/h2/table/Table.getTableType:()Lorg/h2/table/TableType;
      52: if_acmpeq     65
      55: ldc           #14                 // int 90037
      57: aload_0
      58: getfield      #9                  // Field viewName:Ljava/lang/String;
      61: invokestatic  #15                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      64: athrow
      65: aload_0
      66: getfield      #10                 // Field session:Lorg/h2/engine/Session;
      69: invokevirtual #18                 // Method org/h2/engine/Session.getUser:()Lorg/h2/engine/User;
      72: aload_1
      73: bipush        15
      75: invokevirtual #19                 // Method org/h2/engine/User.checkRight:(Lorg/h2/table/Table;I)V
      78: aload_0
      79: getfield      #7                  // Field dropAction:Lorg/h2/constraint/ConstraintActionType;
      82: getstatic     #5                  // Field org/h2/constraint/ConstraintActionType.RESTRICT:Lorg/h2/constraint/ConstraintActionType;
      85: if_acmpne     151
      88: aload_1
      89: invokevirtual #20                 // Method org/h2/table/Table.getChildren:()Ljava/util/ArrayList;
      92: invokevirtual #21                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      95: astore_2
      96: aload_2
      97: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     102: ifeq          151
     105: aload_2
     106: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     111: checkcast     #24                 // class org/h2/engine/DbObject
     114: astore_3
     115: aload_3
     116: instanceof    #25                 // class org/h2/table/TableView
     119: ifeq          148
     122: ldc           #26                 // int 90107
     124: iconst_2
     125: anewarray     #27                 // class java/lang/String
     128: dup
     129: iconst_0
     130: aload_0
     131: getfield      #9                  // Field viewName:Ljava/lang/String;
     134: aastore
     135: dup
     136: iconst_1
     137: aload_3
     138: invokeinterface #28,  1           // InterfaceMethod org/h2/engine/DbObject.getName:()Ljava/lang/String;
     143: aastore
     144: invokestatic  #29                 // Method org/h2/message/DbException.get:(I[Ljava/lang/String;)Lorg/h2/message/DbException;
     147: athrow
     148: goto          96
     151: aload_1
     152: checkcast     #25                 // class org/h2/table/TableView
     155: astore_2
     156: new           #30                 // class java/util/ArrayList
     159: dup
     160: aload_2
     161: invokevirtual #31                 // Method org/h2/table/TableView.getTables:()Ljava/util/List;
     164: invokespecial #32                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
     167: astore_3
     168: aload_1
     169: aload_0
     170: getfield      #10                 // Field session:Lorg/h2/engine/Session;
     173: iconst_1
     174: iconst_1
     175: invokevirtual #33                 // Method org/h2/table/Table.lock:(Lorg/h2/engine/Session;ZZ)Z
     178: pop
     179: aload_0
     180: getfield      #10                 // Field session:Lorg/h2/engine/Session;
     183: invokevirtual #2                  // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
     186: aload_0
     187: getfield      #10                 // Field session:Lorg/h2/engine/Session;
     190: aload_1
     191: invokevirtual #34                 // Method org/h2/engine/Database.removeSchemaObject:(Lorg/h2/engine/Session;Lorg/h2/schema/SchemaObject;)V
     194: aload_3
     195: invokevirtual #21                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
     198: astore        4
     200: aload         4
     202: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     207: ifeq          275
     210: aload         4
     212: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     217: checkcast     #35                 // class org/h2/table/Table
     220: astore        5
     222: getstatic     #16                 // Field org/h2/table/TableType.VIEW:Lorg/h2/table/TableType;
     225: aload         5
     227: invokevirtual #17                 // Method org/h2/table/Table.getTableType:()Lorg/h2/table/TableType;
     230: if_acmpne     272
     233: aload         5
     235: checkcast     #25                 // class org/h2/table/TableView
     238: astore        6
     240: aload         6
     242: invokevirtual #36                 // Method org/h2/table/TableView.isTableExpression:()Z
     245: ifeq          272
     248: aload         6
     250: invokevirtual #37                 // Method org/h2/table/TableView.getName:()Ljava/lang/String;
     253: ifnull        272
     256: aload_0
     257: getfield      #10                 // Field session:Lorg/h2/engine/Session;
     260: invokevirtual #2                  // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
     263: aload_0
     264: getfield      #10                 // Field session:Lorg/h2/engine/Session;
     267: aload         6
     269: invokevirtual #34                 // Method org/h2/engine/Database.removeSchemaObject:(Lorg/h2/engine/Session;Lorg/h2/schema/SchemaObject;)V
     272: goto          200
     275: aload_0
     276: getfield      #10                 // Field session:Lorg/h2/engine/Session;
     279: invokevirtual #2                  // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
     282: aload_0
     283: getfield      #10                 // Field session:Lorg/h2/engine/Session;
     286: invokevirtual #38                 // Method org/h2/engine/Database.unlockMeta:(Lorg/h2/engine/Session;)V
     289: iconst_0
     290: ireturn

  public int getType();
    Code:
       0: bipush        48
       2: ireturn
}
