Compiled from "DropTable.java"
public class org.h2.command.ddl.DropTable extends org.h2.command.ddl.SchemaCommand {
  private boolean ifExists;

  private java.lang.String tableName;

  private org.h2.table.Table table;

  private org.h2.command.ddl.DropTable next;

  private org.h2.constraint.ConstraintActionType dropAction;

  public org.h2.command.ddl.DropTable(org.h2.engine.Session, org.h2.schema.Schema);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/h2/command/ddl/SchemaCommand."<init>":(Lorg/h2/engine/Session;Lorg/h2/schema/Schema;)V
       6: aload_0
       7: aload_1
       8: invokevirtual #2                  // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
      11: invokevirtual #3                  // Method org/h2/engine/Database.getSettings:()Lorg/h2/engine/DbSettings;
      14: getfield      #4                  // Field org/h2/engine/DbSettings.dropRestrict:Z
      17: ifeq          26
      20: getstatic     #5                  // Field org/h2/constraint/ConstraintActionType.RESTRICT:Lorg/h2/constraint/ConstraintActionType;
      23: goto          29
      26: getstatic     #6                  // Field org/h2/constraint/ConstraintActionType.CASCADE:Lorg/h2/constraint/ConstraintActionType;
      29: putfield      #7                  // Field dropAction:Lorg/h2/constraint/ConstraintActionType;
      32: return

  public void addNextDropTable(org.h2.command.ddl.DropTable);
    Code:
       0: aload_0
       1: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
       4: ifnonnull     15
       7: aload_0
       8: aload_1
       9: putfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
      12: goto          23
      15: aload_0
      16: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
      19: aload_1
      20: invokevirtual #9                  // Method addNextDropTable:(Lorg/h2/command/ddl/DropTable;)V
      23: return

  public void setIfExists(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field ifExists:Z
       5: aload_0
       6: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
       9: ifnull        20
      12: aload_0
      13: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
      16: iload_1
      17: invokevirtual #11                 // Method setIfExists:(Z)V
      20: return

  public void setTableName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field tableName:Ljava/lang/String;
       5: return

  private void prepareDrop();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #13                 // Method getSchema:()Lorg/h2/schema/Schema;
       5: aload_0
       6: getfield      #14                 // Field session:Lorg/h2/engine/Session;
       9: aload_0
      10: getfield      #12                 // Field tableName:Ljava/lang/String;
      13: invokevirtual #15                 // Method org/h2/schema/Schema.findTableOrView:(Lorg/h2/engine/Session;Ljava/lang/String;)Lorg/h2/table/Table;
      16: putfield      #16                 // Field table:Lorg/h2/table/Table;
      19: aload_0
      20: getfield      #16                 // Field table:Lorg/h2/table/Table;
      23: ifnonnull     43
      26: aload_0
      27: getfield      #10                 // Field ifExists:Z
      30: ifne          303
      33: ldc           #17                 // int 42102
      35: aload_0
      36: getfield      #12                 // Field tableName:Ljava/lang/String;
      39: invokestatic  #18                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      42: athrow
      43: aload_0
      44: getfield      #14                 // Field session:Lorg/h2/engine/Session;
      47: invokevirtual #19                 // Method org/h2/engine/Session.getUser:()Lorg/h2/engine/User;
      50: aload_0
      51: getfield      #16                 // Field table:Lorg/h2/table/Table;
      54: bipush        15
      56: invokevirtual #20                 // Method org/h2/engine/User.checkRight:(Lorg/h2/table/Table;I)V
      59: aload_0
      60: getfield      #16                 // Field table:Lorg/h2/table/Table;
      63: invokevirtual #21                 // Method org/h2/table/Table.canDrop:()Z
      66: ifne          79
      69: ldc           #22                 // int 90118
      71: aload_0
      72: getfield      #12                 // Field tableName:Ljava/lang/String;
      75: invokestatic  #18                 // Method org/h2/message/DbException.get:(ILjava/lang/String;)Lorg/h2/message/DbException;
      78: athrow
      79: aload_0
      80: getfield      #7                  // Field dropAction:Lorg/h2/constraint/ConstraintActionType;
      83: getstatic     #5                  // Field org/h2/constraint/ConstraintActionType.RESTRICT:Lorg/h2/constraint/ConstraintActionType;
      86: if_acmpne     289
      89: new           #23                 // class org/h2/util/StatementBuilder
      92: dup
      93: invokespecial #24                 // Method org/h2/util/StatementBuilder."<init>":()V
      96: astore_1
      97: aload_0
      98: getfield      #16                 // Field table:Lorg/h2/table/Table;
     101: invokevirtual #25                 // Method org/h2/table/Table.getDependentViews:()Ljava/util/concurrent/CopyOnWriteArrayList;
     104: astore_2
     105: aload_2
     106: ifnull        160
     109: aload_2
     110: invokevirtual #26                 // Method java/util/concurrent/CopyOnWriteArrayList.isEmpty:()Z
     113: ifne          160
     116: aload_2
     117: invokevirtual #27                 // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
     120: astore_3
     121: aload_3
     122: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     127: ifeq          160
     130: aload_3
     131: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     136: checkcast     #30                 // class org/h2/table/TableView
     139: astore        4
     141: aload_1
     142: ldc           #31                 // String ,
     144: invokevirtual #32                 // Method org/h2/util/StatementBuilder.appendExceptFirst:(Ljava/lang/String;)V
     147: aload_1
     148: aload         4
     150: invokevirtual #33                 // Method org/h2/table/TableView.getName:()Ljava/lang/String;
     153: invokevirtual #34                 // Method org/h2/util/StatementBuilder.append:(Ljava/lang/String;)Lorg/h2/util/StatementBuilder;
     156: pop
     157: goto          121
     160: aload_0
     161: getfield      #14                 // Field session:Lorg/h2/engine/Session;
     164: invokevirtual #2                  // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
     167: invokevirtual #3                  // Method org/h2/engine/Database.getSettings:()Lorg/h2/engine/DbSettings;
     170: getfield      #35                 // Field org/h2/engine/DbSettings.standardDropTableRestrict:Z
     173: ifeq          258
     176: aload_0
     177: getfield      #16                 // Field table:Lorg/h2/table/Table;
     180: invokevirtual #36                 // Method org/h2/table/Table.getConstraints:()Ljava/util/ArrayList;
     183: astore_3
     184: aload_3
     185: ifnull        258
     188: aload_3
     189: invokeinterface #37,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     194: ifne          258
     197: aload_3
     198: invokeinterface #38,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     203: astore        4
     205: aload         4
     207: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     212: ifeq          258
     215: aload         4
     217: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     222: checkcast     #39                 // class org/h2/constraint/Constraint
     225: astore        5
     227: aload         5
     229: invokevirtual #40                 // Method org/h2/constraint/Constraint.getTable:()Lorg/h2/table/Table;
     232: aload_0
     233: getfield      #16                 // Field table:Lorg/h2/table/Table;
     236: if_acmpeq     255
     239: aload_1
     240: ldc           #31                 // String ,
     242: invokevirtual #32                 // Method org/h2/util/StatementBuilder.appendExceptFirst:(Ljava/lang/String;)V
     245: aload_1
     246: aload         5
     248: invokevirtual #41                 // Method org/h2/constraint/Constraint.getName:()Ljava/lang/String;
     251: invokevirtual #34                 // Method org/h2/util/StatementBuilder.append:(Ljava/lang/String;)Lorg/h2/util/StatementBuilder;
     254: pop
     255: goto          205
     258: aload_1
     259: invokevirtual #42                 // Method org/h2/util/StatementBuilder.length:()I
     262: ifle          289
     265: ldc           #43                 // int 90107
     267: iconst_2
     268: anewarray     #44                 // class java/lang/String
     271: dup
     272: iconst_0
     273: aload_0
     274: getfield      #12                 // Field tableName:Ljava/lang/String;
     277: aastore
     278: dup
     279: iconst_1
     280: aload_1
     281: invokevirtual #45                 // Method org/h2/util/StatementBuilder.toString:()Ljava/lang/String;
     284: aastore
     285: invokestatic  #46                 // Method org/h2/message/DbException.get:(I[Ljava/lang/String;)Lorg/h2/message/DbException;
     288: athrow
     289: aload_0
     290: getfield      #16                 // Field table:Lorg/h2/table/Table;
     293: aload_0
     294: getfield      #14                 // Field session:Lorg/h2/engine/Session;
     297: iconst_1
     298: iconst_1
     299: invokevirtual #47                 // Method org/h2/table/Table.lock:(Lorg/h2/engine/Session;ZZ)Z
     302: pop
     303: aload_0
     304: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
     307: ifnull        317
     310: aload_0
     311: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
     314: invokespecial #48                 // Method prepareDrop:()V
     317: return

  private void executeDrop();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #13                 // Method getSchema:()Lorg/h2/schema/Schema;
       5: aload_0
       6: getfield      #14                 // Field session:Lorg/h2/engine/Session;
       9: aload_0
      10: getfield      #12                 // Field tableName:Ljava/lang/String;
      13: invokevirtual #15                 // Method org/h2/schema/Schema.findTableOrView:(Lorg/h2/engine/Session;Ljava/lang/String;)Lorg/h2/table/Table;
      16: putfield      #16                 // Field table:Lorg/h2/table/Table;
      19: aload_0
      20: getfield      #16                 // Field table:Lorg/h2/table/Table;
      23: ifnull        62
      26: aload_0
      27: getfield      #16                 // Field table:Lorg/h2/table/Table;
      30: invokevirtual #49                 // Method org/h2/table/Table.setModified:()V
      33: aload_0
      34: getfield      #14                 // Field session:Lorg/h2/engine/Session;
      37: invokevirtual #2                  // Method org/h2/engine/Session.getDatabase:()Lorg/h2/engine/Database;
      40: astore_1
      41: aload_1
      42: aload_0
      43: getfield      #14                 // Field session:Lorg/h2/engine/Session;
      46: invokevirtual #50                 // Method org/h2/engine/Database.lockMeta:(Lorg/h2/engine/Session;)Z
      49: pop
      50: aload_1
      51: aload_0
      52: getfield      #14                 // Field session:Lorg/h2/engine/Session;
      55: aload_0
      56: getfield      #16                 // Field table:Lorg/h2/table/Table;
      59: invokevirtual #51                 // Method org/h2/engine/Database.removeSchemaObject:(Lorg/h2/engine/Session;Lorg/h2/schema/SchemaObject;)V
      62: aload_0
      63: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
      66: ifnull        76
      69: aload_0
      70: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
      73: invokespecial #52                 // Method executeDrop:()V
      76: return

  public int update();
    Code:
       0: aload_0
       1: getfield      #14                 // Field session:Lorg/h2/engine/Session;
       4: iconst_1
       5: invokevirtual #53                 // Method org/h2/engine/Session.commit:(Z)V
       8: aload_0
       9: invokespecial #48                 // Method prepareDrop:()V
      12: aload_0
      13: invokespecial #52                 // Method executeDrop:()V
      16: iconst_0
      17: ireturn

  public void setDropAction(org.h2.constraint.ConstraintActionType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field dropAction:Lorg/h2/constraint/ConstraintActionType;
       5: aload_0
       6: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
       9: ifnull        20
      12: aload_0
      13: getfield      #8                  // Field next:Lorg/h2/command/ddl/DropTable;
      16: aload_1
      17: invokevirtual #54                 // Method setDropAction:(Lorg/h2/constraint/ConstraintActionType;)V
      20: return

  public int getType();
    Code:
       0: bipush        44
       2: ireturn
}
