Compiled from "PGPoolingDataSource.java"
public class org.postgresql.ds.PGPoolingDataSource extends org.postgresql.ds.common.BaseDataSource implements javax.sql.DataSource {
  protected static java.util.concurrent.ConcurrentMap<java.lang.String, org.postgresql.ds.PGPoolingDataSource> dataSources;

  protected java.lang.String dataSourceName;

  private int initialConnections;

  private int maxConnections;

  private boolean initialized;

  private java.util.Stack<javax.sql.PooledConnection> available;

  private java.util.Stack<javax.sql.PooledConnection> used;

  private java.lang.Object lock;

  private org.postgresql.ds.PGConnectionPoolDataSource source;

  private javax.sql.ConnectionEventListener connectionEventListener;

  public org.postgresql.ds.PGPoolingDataSource();
    Code:
       0: aload_0
       1: invokespecial #34                 // Method org/postgresql/ds/common/BaseDataSource."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #36                 // Field initialConnections:I
       9: aload_0
      10: iconst_0
      11: putfield      #38                 // Field maxConnections:I
      14: aload_0
      15: iconst_0
      16: putfield      #40                 // Field initialized:Z
      19: aload_0
      20: new           #42                 // class java/util/Stack
      23: dup
      24: invokespecial #43                 // Method java/util/Stack."<init>":()V
      27: putfield      #45                 // Field available:Ljava/util/Stack;
      30: aload_0
      31: new           #42                 // class java/util/Stack
      34: dup
      35: invokespecial #43                 // Method java/util/Stack."<init>":()V
      38: putfield      #47                 // Field used:Ljava/util/Stack;
      41: aload_0
      42: new           #49                 // class java/lang/Object
      45: dup
      46: invokespecial #50                 // Method java/lang/Object."<init>":()V
      49: putfield      #52                 // Field lock:Ljava/lang/Object;
      52: aload_0
      53: new           #10                 // class org/postgresql/ds/PGPoolingDataSource$1
      56: dup
      57: aload_0
      58: invokespecial #55                 // Method org/postgresql/ds/PGPoolingDataSource$1."<init>":(Lorg/postgresql/ds/PGPoolingDataSource;)V
      61: putfield      #57                 // Field connectionEventListener:Ljavax/sql/ConnectionEventListener;
      64: return

  public static org.postgresql.ds.PGPoolingDataSource getDataSource(java.lang.String);
    Code:
       0: getstatic     #63                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
       3: aload_0
       4: invokeinterface #69,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #2                  // class org/postgresql/ds/PGPoolingDataSource
      12: areturn

  public java.lang.String getDescription();
    Code:
       0: new           #74                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #77                 // String Pooling DataSource \'
       9: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #83                 // Field dataSourceName:Ljava/lang/String;
      16: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #85                 // String  from
      21: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #87                 // String PostgreSQL JDBC Driver 42.2.2
      26: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: areturn

  public void setServerName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ifeq          17
       7: new           #94                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #96                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #98                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #100                // Method org/postgresql/ds/common/BaseDataSource.setServerName:(Ljava/lang/String;)V
      22: return

  public void setDatabaseName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ifeq          17
       7: new           #94                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #96                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #98                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #104                // Method org/postgresql/ds/common/BaseDataSource.setDatabaseName:(Ljava/lang/String;)V
      22: return

  public void setUser(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ifeq          17
       7: new           #94                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #96                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #98                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #108                // Method org/postgresql/ds/common/BaseDataSource.setUser:(Ljava/lang/String;)V
      22: return

  public void setPassword(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ifeq          17
       7: new           #94                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #96                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #98                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #112                // Method org/postgresql/ds/common/BaseDataSource.setPassword:(Ljava/lang/String;)V
      22: return

  public void setPortNumber(int);
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ifeq          17
       7: new           #94                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #96                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #98                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: invokespecial #117                // Method org/postgresql/ds/common/BaseDataSource.setPortNumber:(I)V
      22: return

  public int getInitialConnections();
    Code:
       0: aload_0
       1: getfield      #36                 // Field initialConnections:I
       4: ireturn

  public void setInitialConnections(int);
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ifeq          17
       7: new           #94                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #96                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #98                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: putfield      #36                 // Field initialConnections:I
      22: return

  public int getMaxConnections();
    Code:
       0: aload_0
       1: getfield      #38                 // Field maxConnections:I
       4: ireturn

  public void setMaxConnections(int);
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ifeq          17
       7: new           #94                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #96                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #98                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: putfield      #38                 // Field maxConnections:I
      22: return

  public java.lang.String getDataSourceName();
    Code:
       0: aload_0
       1: getfield      #83                 // Field dataSourceName:Ljava/lang/String;
       4: areturn

  public void setDataSourceName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ifeq          17
       7: new           #94                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #96                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #98                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #83                 // Field dataSourceName:Ljava/lang/String;
      21: ifnull        40
      24: aload_1
      25: ifnull        40
      28: aload_1
      29: aload_0
      30: getfield      #83                 // Field dataSourceName:Ljava/lang/String;
      33: invokevirtual #131                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      36: ifeq          40
      39: return
      40: getstatic     #63                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
      43: aload_1
      44: aload_0
      45: invokeinterface #135,  3          // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      50: checkcast     #2                  // class org/postgresql/ds/PGPoolingDataSource
      53: astore_2
      54: aload_2
      55: ifnull        90
      58: new           #137                // class java/lang/IllegalArgumentException
      61: dup
      62: new           #74                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #139                // String DataSource with name \'
      71: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload_1
      75: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: ldc           #141                // String \' already exists!
      80: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokespecial #142                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      89: athrow
      90: aload_0
      91: getfield      #83                 // Field dataSourceName:Ljava/lang/String;
      94: ifnull        110
      97: getstatic     #63                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
     100: aload_0
     101: getfield      #83                 // Field dataSourceName:Ljava/lang/String;
     104: invokeinterface #145,  2          // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     109: pop
     110: aload_0
     111: aload_1
     112: putfield      #83                 // Field dataSourceName:Ljava/lang/String;
     115: return

  public void initialize() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #52                 // Field lock:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: aload_0
       9: invokevirtual #155                // Method createConnectionPool:()Lorg/postgresql/ds/PGConnectionPoolDataSource;
      12: putfield      #157                // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      15: aload_0
      16: getfield      #157                // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      19: aload_0
      20: invokevirtual #163                // Method org/postgresql/ds/PGConnectionPoolDataSource.initializeFrom:(Lorg/postgresql/ds/common/BaseDataSource;)V
      23: goto          48
      26: astore_2
      27: new           #165                // class org/postgresql/util/PSQLException
      30: dup
      31: ldc           #167                // String Failed to setup DataSource.
      33: iconst_0
      34: anewarray     #49                 // class java/lang/Object
      37: invokestatic  #173                // Method org/postgresql/util/GT.tr:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      40: getstatic     #179                // Field org/postgresql/util/PSQLState.UNEXPECTED_ERROR:Lorg/postgresql/util/PSQLState;
      43: aload_2
      44: invokespecial #182                // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;Ljava/lang/Throwable;)V
      47: athrow
      48: aload_0
      49: getfield      #45                 // Field available:Ljava/util/Stack;
      52: invokevirtual #185                // Method java/util/Stack.size:()I
      55: aload_0
      56: getfield      #36                 // Field initialConnections:I
      59: if_icmpge     80
      62: aload_0
      63: getfield      #45                 // Field available:Ljava/util/Stack;
      66: aload_0
      67: getfield      #157                // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      70: invokevirtual #189                // Method org/postgresql/ds/PGConnectionPoolDataSource.getPooledConnection:()Ljavax/sql/PooledConnection;
      73: invokevirtual #192                // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      76: pop
      77: goto          48
      80: aload_0
      81: iconst_1
      82: putfield      #40                 // Field initialized:Z
      85: aload_1
      86: monitorexit
      87: goto          95
      90: astore_3
      91: aload_1
      92: monitorexit
      93: aload_3
      94: athrow
      95: return
    Exception table:
       from    to  target type
          15    23    26   Class java/lang/Exception
           7    87    90   any
          90    93    90   any

  protected boolean isInitialized();
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ireturn

  protected org.postgresql.ds.PGConnectionPoolDataSource createConnectionPool();
    Code:
       0: new           #159                // class org/postgresql/ds/PGConnectionPoolDataSource
       3: dup
       4: invokespecial #199                // Method org/postgresql/ds/PGConnectionPoolDataSource."<init>":()V
       7: areturn

  public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: ifnull        41
       4: aload_1
       5: aload_0
       6: invokevirtual #204                // Method getUser:()Ljava/lang/String;
       9: invokevirtual #131                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      12: ifeq          46
      15: aload_2
      16: ifnonnull     26
      19: aload_0
      20: invokevirtual #207                // Method getPassword:()Ljava/lang/String;
      23: ifnull        41
      26: aload_2
      27: ifnull        46
      30: aload_2
      31: aload_0
      32: invokevirtual #207                // Method getPassword:()Ljava/lang/String;
      35: invokevirtual #131                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      38: ifeq          46
      41: aload_0
      42: invokevirtual #210                // Method getConnection:()Ljava/sql/Connection;
      45: areturn
      46: aload_0
      47: getfield      #40                 // Field initialized:Z
      50: ifne          57
      53: aload_0
      54: invokevirtual #212                // Method initialize:()V
      57: aload_0
      58: aload_1
      59: aload_2
      60: invokespecial #214                // Method org/postgresql/ds/common/BaseDataSource.getConnection:(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;
      63: areturn

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #40                 // Field initialized:Z
       4: ifne          11
       7: aload_0
       8: invokevirtual #212                // Method initialize:()V
      11: aload_0
      12: invokespecial #216                // Method getPooledConnection:()Ljava/sql/Connection;
      15: areturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #52                 // Field lock:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #45                 // Field available:Ljava/util/Stack;
      11: invokevirtual #220                // Method java/util/Stack.isEmpty:()Z
      14: ifne          41
      17: aload_0
      18: getfield      #45                 // Field available:Ljava/util/Stack;
      21: invokevirtual #224                // Method java/util/Stack.pop:()Ljava/lang/Object;
      24: checkcast     #226                // class javax/sql/PooledConnection
      27: astore_2
      28: aload_2
      29: invokeinterface #228,  1          // InterfaceMethod javax/sql/PooledConnection.close:()V
      34: goto          38
      37: astore_3
      38: goto          7
      41: aload_0
      42: aconst_null
      43: putfield      #45                 // Field available:Ljava/util/Stack;
      46: aload_0
      47: getfield      #47                 // Field used:Ljava/util/Stack;
      50: invokevirtual #220                // Method java/util/Stack.isEmpty:()Z
      53: ifne          90
      56: aload_0
      57: getfield      #47                 // Field used:Ljava/util/Stack;
      60: invokevirtual #224                // Method java/util/Stack.pop:()Ljava/lang/Object;
      63: checkcast     #226                // class javax/sql/PooledConnection
      66: astore_2
      67: aload_2
      68: aload_0
      69: getfield      #57                 // Field connectionEventListener:Ljavax/sql/ConnectionEventListener;
      72: invokeinterface #232,  2          // InterfaceMethod javax/sql/PooledConnection.removeConnectionEventListener:(Ljavax/sql/ConnectionEventListener;)V
      77: aload_2
      78: invokeinterface #228,  1          // InterfaceMethod javax/sql/PooledConnection.close:()V
      83: goto          87
      86: astore_3
      87: goto          46
      90: aload_0
      91: aconst_null
      92: putfield      #47                 // Field used:Ljava/util/Stack;
      95: aload_1
      96: monitorexit
      97: goto          107
     100: astore        4
     102: aload_1
     103: monitorexit
     104: aload         4
     106: athrow
     107: aload_0
     108: invokevirtual #235                // Method removeStoredDataSource:()V
     111: return
    Exception table:
       from    to  target type
          28    34    37   Class java/sql/SQLException
          77    83    86   Class java/sql/SQLException
           7    97   100   any
         100   104   100   any

  protected void removeStoredDataSource();
    Code:
       0: getstatic     #63                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
       3: aload_0
       4: getfield      #83                 // Field dataSourceName:Ljava/lang/String;
       7: invokeinterface #145,  2          // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      12: pop
      13: return

  protected void addDataSource(java.lang.String);
    Code:
       0: getstatic     #63                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
       3: aload_1
       4: aload_0
       5: invokeinterface #241,  3          // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: return

  private java.sql.Connection getPooledConnection() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #52                 // Field lock:Ljava/lang/Object;
       6: dup
       7: astore_2
       8: monitorenter
       9: aload_0
      10: getfield      #45                 // Field available:Ljava/util/Stack;
      13: ifnonnull     36
      16: new           #165                // class org/postgresql/util/PSQLException
      19: dup
      20: ldc           #245                // String DataSource has been closed.
      22: iconst_0
      23: anewarray     #49                 // class java/lang/Object
      26: invokestatic  #173                // Method org/postgresql/util/GT.tr:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      29: getstatic     #248                // Field org/postgresql/util/PSQLState.CONNECTION_DOES_NOT_EXIST:Lorg/postgresql/util/PSQLState;
      32: invokespecial #251                // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;)V
      35: athrow
      36: aload_0
      37: getfield      #45                 // Field available:Ljava/util/Stack;
      40: invokevirtual #220                // Method java/util/Stack.isEmpty:()Z
      43: ifne          69
      46: aload_0
      47: getfield      #45                 // Field available:Ljava/util/Stack;
      50: invokevirtual #224                // Method java/util/Stack.pop:()Ljava/lang/Object;
      53: checkcast     #226                // class javax/sql/PooledConnection
      56: astore_1
      57: aload_0
      58: getfield      #47                 // Field used:Ljava/util/Stack;
      61: aload_1
      62: invokevirtual #192                // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      65: pop
      66: goto          127
      69: aload_0
      70: getfield      #38                 // Field maxConnections:I
      73: ifeq          90
      76: aload_0
      77: getfield      #47                 // Field used:Ljava/util/Stack;
      80: invokevirtual #185                // Method java/util/Stack.size:()I
      83: aload_0
      84: getfield      #38                 // Field maxConnections:I
      87: if_icmpge     110
      90: aload_0
      91: getfield      #157                // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      94: invokevirtual #189                // Method org/postgresql/ds/PGConnectionPoolDataSource.getPooledConnection:()Ljavax/sql/PooledConnection;
      97: astore_1
      98: aload_0
      99: getfield      #47                 // Field used:Ljava/util/Stack;
     102: aload_1
     103: invokevirtual #192                // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
     106: pop
     107: goto          127
     110: aload_0
     111: getfield      #52                 // Field lock:Ljava/lang/Object;
     114: ldc2_w        #252                // long 1000l
     117: invokevirtual #257                // Method java/lang/Object.wait:(J)V
     120: goto          36
     123: astore_3
     124: goto          36
     127: aload_2
     128: monitorexit
     129: goto          139
     132: astore        4
     134: aload_2
     135: monitorexit
     136: aload         4
     138: athrow
     139: aload_1
     140: aload_0
     141: getfield      #57                 // Field connectionEventListener:Ljavax/sql/ConnectionEventListener;
     144: invokeinterface #260,  2          // InterfaceMethod javax/sql/PooledConnection.addConnectionEventListener:(Ljavax/sql/ConnectionEventListener;)V
     149: aload_1
     150: invokeinterface #261,  1          // InterfaceMethod javax/sql/PooledConnection.getConnection:()Ljava/sql/Connection;
     155: areturn
    Exception table:
       from    to  target type
         110   120   123   Class java/lang/InterruptedException
           9   129   132   any
         132   136   132   any

  public javax.naming.Reference getReference() throws javax.naming.NamingException;
    Code:
       0: aload_0
       1: invokespecial #268                // Method org/postgresql/ds/common/BaseDataSource.getReference:()Ljavax/naming/Reference;
       4: astore_1
       5: aload_1
       6: new           #270                // class javax/naming/StringRefAddr
       9: dup
      10: ldc_w         #271                // String dataSourceName
      13: aload_0
      14: getfield      #83                 // Field dataSourceName:Ljava/lang/String;
      17: invokespecial #274                // Method javax/naming/StringRefAddr."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      20: invokevirtual #280                // Method javax/naming/Reference.add:(Ljavax/naming/RefAddr;)V
      23: aload_0
      24: getfield      #36                 // Field initialConnections:I
      27: ifle          51
      30: aload_1
      31: new           #270                // class javax/naming/StringRefAddr
      34: dup
      35: ldc_w         #281                // String initialConnections
      38: aload_0
      39: getfield      #36                 // Field initialConnections:I
      42: invokestatic  #286                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      45: invokespecial #274                // Method javax/naming/StringRefAddr."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      48: invokevirtual #280                // Method javax/naming/Reference.add:(Ljavax/naming/RefAddr;)V
      51: aload_0
      52: getfield      #38                 // Field maxConnections:I
      55: ifle          79
      58: aload_1
      59: new           #270                // class javax/naming/StringRefAddr
      62: dup
      63: ldc_w         #287                // String maxConnections
      66: aload_0
      67: getfield      #38                 // Field maxConnections:I
      70: invokestatic  #286                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      73: invokespecial #274                // Method javax/naming/StringRefAddr."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      76: invokevirtual #280                // Method javax/naming/Reference.add:(Ljavax/naming/RefAddr;)V
      79: aload_1
      80: areturn

  public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #295                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: invokevirtual #300                // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       8: ireturn

  public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #295                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: invokevirtual #300                // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       8: ifeq          17
      11: aload_1
      12: aload_0
      13: invokevirtual #308                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      16: areturn
      17: new           #149                // class java/sql/SQLException
      20: dup
      21: new           #74                 // class java/lang/StringBuilder
      24: dup
      25: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
      28: ldc_w         #310                // String Cannot unwrap to
      31: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_1
      35: invokevirtual #313                // Method java/lang/Class.getName:()Ljava/lang/String;
      38: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: invokespecial #314                // Method java/sql/SQLException."<init>":(Ljava/lang/String;)V
      47: athrow

  static java.lang.Object access$000(org.postgresql.ds.PGPoolingDataSource);
    Code:
       0: aload_0
       1: getfield      #52                 // Field lock:Ljava/lang/Object;
       4: areturn

  static java.util.Stack access$100(org.postgresql.ds.PGPoolingDataSource);
    Code:
       0: aload_0
       1: getfield      #45                 // Field available:Ljava/util/Stack;
       4: areturn

  static java.util.Stack access$200(org.postgresql.ds.PGPoolingDataSource);
    Code:
       0: aload_0
       1: getfield      #47                 // Field used:Ljava/util/Stack;
       4: areturn

  static {};
    Code:
       0: new           #324                // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #325                // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #63                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
      10: return
}
