Compiled from "QueryExecutorBase.java"
public abstract class org.postgresql.core.QueryExecutorBase implements org.postgresql.core.QueryExecutor {
  private static final java.util.logging.Logger LOGGER;

  protected final org.postgresql.core.PGStream pgStream;

  private final java.lang.String user;

  private final java.lang.String database;

  private final int cancelSignalTimeout;

  private int cancelPid;

  private int cancelKey;

  private boolean closed;

  private java.lang.String serverVersion;

  private int serverVersionNum;

  private org.postgresql.core.TransactionState transactionState;

  private final boolean reWriteBatchedInserts;

  private final boolean columnSanitiserDisabled;

  private final org.postgresql.jdbc.PreferQueryMode preferQueryMode;

  private org.postgresql.jdbc.AutoSave autoSave;

  private boolean flushCacheOnDeallocate;

  private boolean standardConformingStrings;

  private java.sql.SQLWarning warnings;

  private final java.util.ArrayList<org.postgresql.PGNotification> notifications;

  private final org.postgresql.util.LruCache<java.lang.Object, org.postgresql.core.CachedQuery> statementCache;

  private final org.postgresql.core.CachedQueryCreateAction cachedQueryCreateAction;

  protected org.postgresql.core.QueryExecutorBase(org.postgresql.core.PGStream, java.lang.String, java.lang.String, int, java.util.Properties) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokespecial #59                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #61                 // Field closed:Z
       9: aload_0
      10: iconst_0
      11: putfield      #63                 // Field serverVersionNum:I
      14: aload_0
      15: iconst_1
      16: putfield      #65                 // Field flushCacheOnDeallocate:Z
      19: aload_0
      20: iconst_0
      21: putfield      #67                 // Field standardConformingStrings:Z
      24: aload_0
      25: new           #69                 // class java/util/ArrayList
      28: dup
      29: invokespecial #70                 // Method java/util/ArrayList."<init>":()V
      32: putfield      #72                 // Field notifications:Ljava/util/ArrayList;
      35: aload_0
      36: aload_1
      37: putfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
      40: aload_0
      41: aload_2
      42: putfield      #76                 // Field user:Ljava/lang/String;
      45: aload_0
      46: aload_3
      47: putfield      #78                 // Field database:Ljava/lang/String;
      50: aload_0
      51: iload         4
      53: putfield      #80                 // Field cancelSignalTimeout:I
      56: aload_0
      57: getstatic     #86                 // Field org/postgresql/PGProperty.REWRITE_BATCHED_INSERTS:Lorg/postgresql/PGProperty;
      60: aload         5
      62: invokevirtual #90                 // Method org/postgresql/PGProperty.getBoolean:(Ljava/util/Properties;)Z
      65: putfield      #92                 // Field reWriteBatchedInserts:Z
      68: aload_0
      69: getstatic     #95                 // Field org/postgresql/PGProperty.DISABLE_COLUMN_SANITISER:Lorg/postgresql/PGProperty;
      72: aload         5
      74: invokevirtual #90                 // Method org/postgresql/PGProperty.getBoolean:(Ljava/util/Properties;)Z
      77: putfield      #97                 // Field columnSanitiserDisabled:Z
      80: getstatic     #100                // Field org/postgresql/PGProperty.PREFER_QUERY_MODE:Lorg/postgresql/PGProperty;
      83: aload         5
      85: invokevirtual #104                // Method org/postgresql/PGProperty.get:(Ljava/util/Properties;)Ljava/lang/String;
      88: astore        6
      90: aload_0
      91: aload         6
      93: invokestatic  #110                // Method org/postgresql/jdbc/PreferQueryMode.of:(Ljava/lang/String;)Lorg/postgresql/jdbc/PreferQueryMode;
      96: putfield      #112                // Field preferQueryMode:Lorg/postgresql/jdbc/PreferQueryMode;
      99: aload_0
     100: getstatic     #115                // Field org/postgresql/PGProperty.AUTOSAVE:Lorg/postgresql/PGProperty;
     103: aload         5
     105: invokevirtual #104                // Method org/postgresql/PGProperty.get:(Ljava/util/Properties;)Ljava/lang/String;
     108: invokestatic  #120                // Method org/postgresql/jdbc/AutoSave.of:(Ljava/lang/String;)Lorg/postgresql/jdbc/AutoSave;
     111: putfield      #122                // Field autoSave:Lorg/postgresql/jdbc/AutoSave;
     114: aload_0
     115: new           #124                // class org/postgresql/core/CachedQueryCreateAction
     118: dup
     119: aload_0
     120: invokespecial #127                // Method org/postgresql/core/CachedQueryCreateAction."<init>":(Lorg/postgresql/core/QueryExecutor;)V
     123: putfield      #129                // Field cachedQueryCreateAction:Lorg/postgresql/core/CachedQueryCreateAction;
     126: aload_0
     127: new           #13                 // class org/postgresql/util/LruCache
     130: dup
     131: iconst_0
     132: getstatic     #132                // Field org/postgresql/PGProperty.PREPARED_STATEMENT_CACHE_QUERIES:Lorg/postgresql/PGProperty;
     135: aload         5
     137: invokevirtual #136                // Method org/postgresql/PGProperty.getInt:(Ljava/util/Properties;)I
     140: invokestatic  #142                // Method java/lang/Math.max:(II)I
     143: iconst_0
     144: getstatic     #145                // Field org/postgresql/PGProperty.PREPARED_STATEMENT_CACHE_SIZE_MIB:Lorg/postgresql/PGProperty;
     147: aload         5
     149: invokevirtual #136                // Method org/postgresql/PGProperty.getInt:(Ljava/util/Properties;)I
     152: sipush        1024
     155: imul
     156: sipush        1024
     159: imul
     160: invokestatic  #142                // Method java/lang/Math.max:(II)I
     163: i2l
     164: iconst_0
     165: aload_0
     166: getfield      #129                // Field cachedQueryCreateAction:Lorg/postgresql/core/CachedQueryCreateAction;
     169: new           #9                  // class org/postgresql/core/QueryExecutorBase$1
     172: dup
     173: aload_0
     174: invokespecial #148                // Method org/postgresql/core/QueryExecutorBase$1."<init>":(Lorg/postgresql/core/QueryExecutorBase;)V
     177: invokespecial #151                // Method org/postgresql/util/LruCache."<init>":(IJZLorg/postgresql/util/LruCache$CreateAction;Lorg/postgresql/util/LruCache$EvictAction;)V
     180: putfield      #153                // Field statementCache:Lorg/postgresql/util/LruCache;
     183: return

  protected abstract void sendCloseMessage() throws java.io.IOException;

  public void setNetworkTimeout(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
       4: iload_1
       5: invokevirtual #167                // Method org/postgresql/core/PGStream.setNetworkTimeout:(I)V
       8: return

  public int getNetworkTimeout() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
       4: invokevirtual #172                // Method org/postgresql/core/PGStream.getNetworkTimeout:()I
       7: ireturn

  public org.postgresql.util.HostSpec getHostSpec();
    Code:
       0: aload_0
       1: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
       4: invokevirtual #176                // Method org/postgresql/core/PGStream.getHostSpec:()Lorg/postgresql/util/HostSpec;
       7: areturn

  public java.lang.String getUser();
    Code:
       0: aload_0
       1: getfield      #76                 // Field user:Ljava/lang/String;
       4: areturn

  public java.lang.String getDatabase();
    Code:
       0: aload_0
       1: getfield      #78                 // Field database:Ljava/lang/String;
       4: areturn

  public void setBackendKeyData(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #183                // Field cancelPid:I
       5: aload_0
       6: iload_2
       7: putfield      #185                // Field cancelKey:I
      10: return

  public int getBackendPID();
    Code:
       0: aload_0
       1: getfield      #183                // Field cancelPid:I
       4: ireturn

  public void abort();
    Code:
       0: aload_0
       1: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
       4: invokevirtual #191                // Method org/postgresql/core/PGStream.getSocket:()Ljava/net/Socket;
       7: invokevirtual #196                // Method java/net/Socket.close:()V
      10: goto          14
      13: astore_1
      14: aload_0
      15: iconst_1
      16: putfield      #61                 // Field closed:Z
      19: return
    Exception table:
       from    to  target type
           0    10    13   Class java/io/IOException

  public void close();
    Code:
       0: aload_0
       1: getfield      #61                 // Field closed:Z
       4: ifeq          8
       7: return
       8: getstatic     #198                // Field LOGGER:Ljava/util/logging/Logger;
      11: getstatic     #204                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      14: ldc           #206                // String  FE=> Terminate
      16: invokevirtual #212                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;)V
      19: aload_0
      20: invokevirtual #214                // Method sendCloseMessage:()V
      23: aload_0
      24: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
      27: invokevirtual #217                // Method org/postgresql/core/PGStream.flush:()V
      30: aload_0
      31: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
      34: invokevirtual #218                // Method org/postgresql/core/PGStream.close:()V
      37: goto          53
      40: astore_1
      41: getstatic     #198                // Field LOGGER:Ljava/util/logging/Logger;
      44: getstatic     #204                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      47: ldc           #220                // String Discarding IOException on close:
      49: aload_1
      50: invokevirtual #223                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V
      53: aload_0
      54: iconst_1
      55: putfield      #61                 // Field closed:Z
      58: return
    Exception table:
       from    to  target type
           8    37    40   Class java/io/IOException

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #61                 // Field closed:Z
       4: ireturn

  public void sendQueryCancel() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #183                // Field cancelPid:I
       4: ifgt          8
       7: return
       8: aconst_null
       9: astore_1
      10: getstatic     #198                // Field LOGGER:Ljava/util/logging/Logger;
      13: getstatic     #204                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      16: invokevirtual #232                // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      19: ifeq          57
      22: getstatic     #198                // Field LOGGER:Ljava/util/logging/Logger;
      25: getstatic     #204                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      28: ldc           #234                // String  FE=> CancelRequest(pid={0},ckey={1})
      30: iconst_2
      31: anewarray     #4                  // class java/lang/Object
      34: dup
      35: iconst_0
      36: aload_0
      37: getfield      #183                // Field cancelPid:I
      40: invokestatic  #240                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      43: aastore
      44: dup
      45: iconst_1
      46: aload_0
      47: getfield      #185                // Field cancelKey:I
      50: invokestatic  #240                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      53: aastore
      54: invokevirtual #243                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V
      57: new           #165                // class org/postgresql/core/PGStream
      60: dup
      61: aload_0
      62: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
      65: invokevirtual #247                // Method org/postgresql/core/PGStream.getSocketFactory:()Ljavax/net/SocketFactory;
      68: aload_0
      69: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
      72: invokevirtual #176                // Method org/postgresql/core/PGStream.getHostSpec:()Lorg/postgresql/util/HostSpec;
      75: aload_0
      76: getfield      #80                 // Field cancelSignalTimeout:I
      79: invokespecial #250                // Method org/postgresql/core/PGStream."<init>":(Ljavax/net/SocketFactory;Lorg/postgresql/util/HostSpec;I)V
      82: astore_1
      83: aload_0
      84: getfield      #80                 // Field cancelSignalTimeout:I
      87: ifle          101
      90: aload_1
      91: invokevirtual #191                // Method org/postgresql/core/PGStream.getSocket:()Ljava/net/Socket;
      94: aload_0
      95: getfield      #80                 // Field cancelSignalTimeout:I
      98: invokevirtual #253                // Method java/net/Socket.setSoTimeout:(I)V
     101: aload_1
     102: bipush        16
     104: invokevirtual #256                // Method org/postgresql/core/PGStream.sendInteger4:(I)V
     107: aload_1
     108: sipush        1234
     111: invokevirtual #259                // Method org/postgresql/core/PGStream.sendInteger2:(I)V
     114: aload_1
     115: sipush        5678
     118: invokevirtual #259                // Method org/postgresql/core/PGStream.sendInteger2:(I)V
     121: aload_1
     122: aload_0
     123: getfield      #183                // Field cancelPid:I
     126: invokevirtual #256                // Method org/postgresql/core/PGStream.sendInteger4:(I)V
     129: aload_1
     130: aload_0
     131: getfield      #185                // Field cancelKey:I
     134: invokevirtual #256                // Method org/postgresql/core/PGStream.sendInteger4:(I)V
     137: aload_1
     138: invokevirtual #217                // Method org/postgresql/core/PGStream.flush:()V
     141: aload_1
     142: invokevirtual #262                // Method org/postgresql/core/PGStream.receiveEOF:()V
     145: aload_1
     146: ifnull        205
     149: aload_1
     150: invokevirtual #218                // Method org/postgresql/core/PGStream.close:()V
     153: goto          205
     156: astore_2
     157: goto          205
     160: astore_2
     161: getstatic     #198                // Field LOGGER:Ljava/util/logging/Logger;
     164: getstatic     #204                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
     167: ldc_w         #264                // String Ignoring exception on cancel request:
     170: aload_2
     171: invokevirtual #223                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V
     174: aload_1
     175: ifnull        205
     178: aload_1
     179: invokevirtual #218                // Method org/postgresql/core/PGStream.close:()V
     182: goto          205
     185: astore_2
     186: goto          205
     189: astore_3
     190: aload_1
     191: ifnull        203
     194: aload_1
     195: invokevirtual #218                // Method org/postgresql/core/PGStream.close:()V
     198: goto          203
     201: astore        4
     203: aload_3
     204: athrow
     205: return
    Exception table:
       from    to  target type
         149   153   156   Class java/io/IOException
          10   145   160   Class java/io/IOException
         178   182   185   Class java/io/IOException
          10   145   189   any
         160   174   189   any
         194   198   201   Class java/io/IOException

  public synchronized void addWarning(java.sql.SQLWarning);
    Code:
       0: aload_0
       1: getfield      #272                // Field warnings:Ljava/sql/SQLWarning;
       4: ifnonnull     15
       7: aload_0
       8: aload_1
       9: putfield      #272                // Field warnings:Ljava/sql/SQLWarning;
      12: goto          23
      15: aload_0
      16: getfield      #272                // Field warnings:Ljava/sql/SQLWarning;
      19: aload_1
      20: invokevirtual #277                // Method java/sql/SQLWarning.setNextWarning:(Ljava/sql/SQLWarning;)V
      23: return

  public synchronized void addNotification(org.postgresql.PGNotification);
    Code:
       0: aload_0
       1: getfield      #72                 // Field notifications:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #284                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public synchronized org.postgresql.PGNotification[] getNotifications() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #72                 // Field notifications:Ljava/util/ArrayList;
       4: aload_0
       5: getfield      #72                 // Field notifications:Ljava/util/ArrayList;
       8: invokevirtual #291                // Method java/util/ArrayList.size:()I
      11: anewarray     #293                // class org/postgresql/PGNotification
      14: invokevirtual #297                // Method java/util/ArrayList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      17: checkcast     #299                // class "[Lorg/postgresql/PGNotification;"
      20: astore_1
      21: aload_0
      22: getfield      #72                 // Field notifications:Ljava/util/ArrayList;
      25: invokevirtual #302                // Method java/util/ArrayList.clear:()V
      28: aload_1
      29: areturn

  public synchronized java.sql.SQLWarning getWarnings();
    Code:
       0: aload_0
       1: getfield      #272                // Field warnings:Ljava/sql/SQLWarning;
       4: astore_1
       5: aload_0
       6: aconst_null
       7: putfield      #272                // Field warnings:Ljava/sql/SQLWarning;
      10: aload_1
      11: areturn

  public java.lang.String getServerVersion();
    Code:
       0: aload_0
       1: getfield      #309                // Field serverVersion:Ljava/lang/String;
       4: areturn

  public int getServerVersionNum();
    Code:
       0: aload_0
       1: getfield      #63                 // Field serverVersionNum:I
       4: ifeq          12
       7: aload_0
       8: getfield      #63                 // Field serverVersionNum:I
      11: ireturn
      12: aload_0
      13: aload_0
      14: getfield      #309                // Field serverVersion:Ljava/lang/String;
      17: invokestatic  #316                // Method org/postgresql/core/Utils.parseServerVersionStr:(Ljava/lang/String;)I
      20: dup_x1
      21: putfield      #63                 // Field serverVersionNum:I
      24: ireturn

  public void setServerVersion(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #309                // Field serverVersion:Ljava/lang/String;
       5: return

  public void setServerVersionNum(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #63                 // Field serverVersionNum:I
       5: return

  public synchronized void setTransactionState(org.postgresql.core.TransactionState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #323                // Field transactionState:Lorg/postgresql/core/TransactionState;
       5: return

  public synchronized void setStandardConformingStrings(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #67                 // Field standardConformingStrings:Z
       5: return

  public synchronized boolean getStandardConformingStrings();
    Code:
       0: aload_0
       1: getfield      #67                 // Field standardConformingStrings:Z
       4: ireturn

  public synchronized org.postgresql.core.TransactionState getTransactionState();
    Code:
       0: aload_0
       1: getfield      #323                // Field transactionState:Lorg/postgresql/core/TransactionState;
       4: areturn

  public void setEncoding(org.postgresql.core.Encoding) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
       4: aload_1
       5: invokevirtual #334                // Method org/postgresql/core/PGStream.setEncoding:(Lorg/postgresql/core/Encoding;)V
       8: return

  public org.postgresql.core.Encoding getEncoding();
    Code:
       0: aload_0
       1: getfield      #74                 // Field pgStream:Lorg/postgresql/core/PGStream;
       4: invokevirtual #340                // Method org/postgresql/core/PGStream.getEncoding:()Lorg/postgresql/core/Encoding;
       7: areturn

  public boolean isReWriteBatchedInsertsEnabled();
    Code:
       0: aload_0
       1: getfield      #92                 // Field reWriteBatchedInserts:Z
       4: ireturn

  public final org.postgresql.core.CachedQuery borrowQuery(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #153                // Field statementCache:Lorg/postgresql/util/LruCache;
       4: aload_1
       5: invokevirtual #347                // Method org/postgresql/util/LruCache.borrow:(Ljava/lang/Object;)Lorg/postgresql/util/CanEstimateSize;
       8: checkcast     #349                // class org/postgresql/core/CachedQuery
      11: areturn

  public final org.postgresql.core.CachedQuery borrowCallableQuery(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #153                // Field statementCache:Lorg/postgresql/util/LruCache;
       4: new           #353                // class org/postgresql/core/CallableQueryKey
       7: dup
       8: aload_1
       9: invokespecial #355                // Method org/postgresql/core/CallableQueryKey."<init>":(Ljava/lang/String;)V
      12: invokevirtual #347                // Method org/postgresql/util/LruCache.borrow:(Ljava/lang/Object;)Lorg/postgresql/util/CanEstimateSize;
      15: checkcast     #349                // class org/postgresql/core/CachedQuery
      18: areturn

  public final org.postgresql.core.CachedQuery borrowReturningQuery(java.lang.String, java.lang.String[]) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #153                // Field statementCache:Lorg/postgresql/util/LruCache;
       4: new           #359                // class org/postgresql/core/QueryWithReturningColumnsKey
       7: dup
       8: aload_1
       9: iconst_1
      10: iconst_1
      11: aload_2
      12: invokespecial #362                // Method org/postgresql/core/QueryWithReturningColumnsKey."<init>":(Ljava/lang/String;ZZ[Ljava/lang/String;)V
      15: invokevirtual #347                // Method org/postgresql/util/LruCache.borrow:(Ljava/lang/Object;)Lorg/postgresql/util/CanEstimateSize;
      18: checkcast     #349                // class org/postgresql/core/CachedQuery
      21: areturn

  public org.postgresql.core.CachedQuery borrowQueryByKey(java.lang.Object) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #153                // Field statementCache:Lorg/postgresql/util/LruCache;
       4: aload_1
       5: invokevirtual #347                // Method org/postgresql/util/LruCache.borrow:(Ljava/lang/Object;)Lorg/postgresql/util/CanEstimateSize;
       8: checkcast     #349                // class org/postgresql/core/CachedQuery
      11: areturn

  public void releaseQuery(org.postgresql.core.CachedQuery);
    Code:
       0: aload_0
       1: getfield      #153                // Field statementCache:Lorg/postgresql/util/LruCache;
       4: aload_1
       5: getfield      #372                // Field org/postgresql/core/CachedQuery.key:Ljava/lang/Object;
       8: aload_1
       9: invokevirtual #376                // Method org/postgresql/util/LruCache.put:(Ljava/lang/Object;Lorg/postgresql/util/CanEstimateSize;)V
      12: return

  public final java.lang.Object createQueryKey(java.lang.String, boolean, boolean, java.lang.String...);
    Code:
       0: aload         4
       2: ifnull        11
       5: aload         4
       7: arraylength
       8: ifeq          28
      11: new           #359                // class org/postgresql/core/QueryWithReturningColumnsKey
      14: dup
      15: aload_1
      16: iload_3
      17: iload_2
      18: aload         4
      20: invokespecial #362                // Method org/postgresql/core/QueryWithReturningColumnsKey."<init>":(Ljava/lang/String;ZZ[Ljava/lang/String;)V
      23: astore        5
      25: goto          50
      28: iload_3
      29: ifeq          38
      32: aload_1
      33: astore        5
      35: goto          50
      38: new           #382                // class org/postgresql/core/BaseQueryKey
      41: dup
      42: aload_1
      43: iconst_0
      44: iload_2
      45: invokespecial #385                // Method org/postgresql/core/BaseQueryKey."<init>":(Ljava/lang/String;ZZ)V
      48: astore        5
      50: aload         5
      52: areturn

  public org.postgresql.core.CachedQuery createQueryByKey(java.lang.Object) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #129                // Field cachedQueryCreateAction:Lorg/postgresql/core/CachedQueryCreateAction;
       4: aload_1
       5: invokevirtual #391                // Method org/postgresql/core/CachedQueryCreateAction.create:(Ljava/lang/Object;)Lorg/postgresql/core/CachedQuery;
       8: areturn

  public final org.postgresql.core.CachedQuery createQuery(java.lang.String, boolean, boolean, java.lang.String...) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aload         4
       6: invokevirtual #395                // Method createQueryKey:(Ljava/lang/String;ZZ[Ljava/lang/String;)Ljava/lang/Object;
       9: astore        5
      11: aload_0
      12: aload         5
      14: invokevirtual #397                // Method createQueryByKey:(Ljava/lang/Object;)Lorg/postgresql/core/CachedQuery;
      17: areturn

  public boolean isColumnSanitiserDisabled();
    Code:
       0: aload_0
       1: getfield      #97                 // Field columnSanitiserDisabled:Z
       4: ireturn

  public org.postgresql.jdbc.PreferQueryMode getPreferQueryMode();
    Code:
       0: aload_0
       1: getfield      #112                // Field preferQueryMode:Lorg/postgresql/jdbc/PreferQueryMode;
       4: areturn

  public org.postgresql.jdbc.AutoSave getAutoSave();
    Code:
       0: aload_0
       1: getfield      #122                // Field autoSave:Lorg/postgresql/jdbc/AutoSave;
       4: areturn

  public void setAutoSave(org.postgresql.jdbc.AutoSave);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #122                // Field autoSave:Lorg/postgresql/jdbc/AutoSave;
       5: return

  protected boolean willHealViaReparse(java.sql.SQLException);
    Code:
       0: getstatic     #412                // Field org/postgresql/util/PSQLState.INVALID_SQL_STATEMENT_NAME:Lorg/postgresql/util/PSQLState;
       3: invokevirtual #415                // Method org/postgresql/util/PSQLState.getState:()Ljava/lang/String;
       6: aload_1
       7: invokevirtual #418                // Method java/sql/SQLException.getSQLState:()Ljava/lang/String;
      10: invokevirtual #423                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      13: ifeq          18
      16: iconst_1
      17: ireturn
      18: getstatic     #426                // Field org/postgresql/util/PSQLState.NOT_IMPLEMENTED:Lorg/postgresql/util/PSQLState;
      21: invokevirtual #415                // Method org/postgresql/util/PSQLState.getState:()Ljava/lang/String;
      24: aload_1
      25: invokevirtual #418                // Method java/sql/SQLException.getSQLState:()Ljava/lang/String;
      28: invokevirtual #423                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      31: ifne          36
      34: iconst_0
      35: ireturn
      36: aload_1
      37: instanceof    #428                // class org/postgresql/util/PSQLException
      40: ifne          45
      43: iconst_0
      44: ireturn
      45: aload_1
      46: checkcast     #428                // class org/postgresql/util/PSQLException
      49: astore_2
      50: aload_2
      51: invokevirtual #432                // Method org/postgresql/util/PSQLException.getServerErrorMessage:()Lorg/postgresql/util/ServerErrorMessage;
      54: astore_3
      55: aload_3
      56: ifnonnull     61
      59: iconst_0
      60: ireturn
      61: aload_2
      62: invokevirtual #432                // Method org/postgresql/util/PSQLException.getServerErrorMessage:()Lorg/postgresql/util/ServerErrorMessage;
      65: invokevirtual #437                // Method org/postgresql/util/ServerErrorMessage.getRoutine:()Ljava/lang/String;
      68: astore        4
      70: ldc_w         #439                // String RevalidateCachedQuery
      73: aload         4
      75: invokevirtual #423                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      78: ifne          92
      81: ldc_w         #441                // String RevalidateCachedPlan
      84: aload         4
      86: invokevirtual #423                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      89: ifeq          96
      92: iconst_1
      93: goto          97
      96: iconst_0
      97: ireturn

  public boolean willHealOnRetry(java.sql.SQLException);
    Code:
       0: aload_0
       1: getfield      #122                // Field autoSave:Lorg/postgresql/jdbc/AutoSave;
       4: getstatic     #451                // Field org/postgresql/jdbc/AutoSave.NEVER:Lorg/postgresql/jdbc/AutoSave;
       7: if_acmpne     22
      10: aload_0
      11: invokevirtual #453                // Method getTransactionState:()Lorg/postgresql/core/TransactionState;
      14: getstatic     #458                // Field org/postgresql/core/TransactionState.FAILED:Lorg/postgresql/core/TransactionState;
      17: if_acmpne     22
      20: iconst_0
      21: ireturn
      22: aload_0
      23: aload_1
      24: invokevirtual #460                // Method willHealViaReparse:(Ljava/sql/SQLException;)Z
      27: ireturn

  public boolean isFlushCacheOnDeallocate();
    Code:
       0: aload_0
       1: getfield      #65                 // Field flushCacheOnDeallocate:Z
       4: ireturn

  public void setFlushCacheOnDeallocate(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #65                 // Field flushCacheOnDeallocate:Z
       5: return

  protected boolean hasNotifications();
    Code:
       0: aload_0
       1: getfield      #72                 // Field notifications:Ljava/util/ArrayList;
       4: invokevirtual #291                // Method java/util/ArrayList.size:()I
       7: ifle          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static {};
    Code:
       0: ldc           #2                  // class org/postgresql/core/QueryExecutorBase
       2: invokevirtual #469                // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #473                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: putstatic     #198                // Field LOGGER:Ljava/util/logging/Logger;
      11: return
}
