Compiled from "V3PGReplicationStream.java"
public class org.postgresql.core.v3.replication.V3PGReplicationStream implements org.postgresql.replication.PGReplicationStream {
  private static final java.util.logging.Logger LOGGER;

  public static final long POSTGRES_EPOCH_2000_01_01;

  private final org.postgresql.copy.CopyDual copyDual;

  private final long updateInterval;

  private final org.postgresql.replication.ReplicationType replicationType;

  private long lastStatusUpdate;

  private boolean closeFlag;

  private org.postgresql.replication.LogSequenceNumber lastServerLSN;

  private org.postgresql.replication.LogSequenceNumber lastReceiveLSN;

  private org.postgresql.replication.LogSequenceNumber lastAppliedLSN;

  private org.postgresql.replication.LogSequenceNumber lastFlushedLSN;

  public org.postgresql.core.v3.replication.V3PGReplicationStream(org.postgresql.copy.CopyDual, org.postgresql.replication.LogSequenceNumber, long, org.postgresql.replication.ReplicationType);
    Code:
       0: aload_0
       1: invokespecial #33                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #35                 // Field closeFlag:Z
       9: aload_0
      10: getstatic     #40                 // Field org/postgresql/replication/LogSequenceNumber.INVALID_LSN:Lorg/postgresql/replication/LogSequenceNumber;
      13: putfield      #42                 // Field lastServerLSN:Lorg/postgresql/replication/LogSequenceNumber;
      16: aload_0
      17: getstatic     #40                 // Field org/postgresql/replication/LogSequenceNumber.INVALID_LSN:Lorg/postgresql/replication/LogSequenceNumber;
      20: putfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
      23: aload_0
      24: getstatic     #40                 // Field org/postgresql/replication/LogSequenceNumber.INVALID_LSN:Lorg/postgresql/replication/LogSequenceNumber;
      27: putfield      #46                 // Field lastAppliedLSN:Lorg/postgresql/replication/LogSequenceNumber;
      30: aload_0
      31: getstatic     #40                 // Field org/postgresql/replication/LogSequenceNumber.INVALID_LSN:Lorg/postgresql/replication/LogSequenceNumber;
      34: putfield      #48                 // Field lastFlushedLSN:Lorg/postgresql/replication/LogSequenceNumber;
      37: aload_0
      38: aload_1
      39: putfield      #50                 // Field copyDual:Lorg/postgresql/copy/CopyDual;
      42: aload_0
      43: lload_3
      44: putfield      #52                 // Field updateInterval:J
      47: aload_0
      48: invokestatic  #58                 // Method java/lang/System.currentTimeMillis:()J
      51: lload_3
      52: lsub
      53: putfield      #60                 // Field lastStatusUpdate:J
      56: aload_0
      57: aload_2
      58: putfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
      61: aload_0
      62: aload         5
      64: putfield      #62                 // Field replicationType:Lorg/postgresql/replication/ReplicationType;
      67: return

  public java.nio.ByteBuffer read() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokespecial #73                 // Method checkClose:()V
       4: aconst_null
       5: astore_1
       6: aload_1
       7: ifnonnull     31
      10: aload_0
      11: getfield      #50                 // Field copyDual:Lorg/postgresql/copy/CopyDual;
      14: invokeinterface #81,  1           // InterfaceMethod org/postgresql/copy/CopyDual.isActive:()Z
      19: ifeq          31
      22: aload_0
      23: iconst_1
      24: invokespecial #85                 // Method readInternal:(Z)Ljava/nio/ByteBuffer;
      27: astore_1
      28: goto          6
      31: aload_1
      32: areturn

  public java.nio.ByteBuffer readPending() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokespecial #73                 // Method checkClose:()V
       4: aload_0
       5: iconst_0
       6: invokespecial #85                 // Method readInternal:(Z)Ljava/nio/ByteBuffer;
       9: areturn

  public org.postgresql.replication.LogSequenceNumber getLastReceiveLSN();
    Code:
       0: aload_0
       1: getfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
       4: areturn

  public org.postgresql.replication.LogSequenceNumber getLastFlushedLSN();
    Code:
       0: aload_0
       1: getfield      #48                 // Field lastFlushedLSN:Lorg/postgresql/replication/LogSequenceNumber;
       4: areturn

  public org.postgresql.replication.LogSequenceNumber getLastAppliedLSN();
    Code:
       0: aload_0
       1: getfield      #46                 // Field lastAppliedLSN:Lorg/postgresql/replication/LogSequenceNumber;
       4: areturn

  public void setFlushedLSN(org.postgresql.replication.LogSequenceNumber);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #48                 // Field lastFlushedLSN:Lorg/postgresql/replication/LogSequenceNumber;
       5: return

  public void setAppliedLSN(org.postgresql.replication.LogSequenceNumber);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field lastAppliedLSN:Lorg/postgresql/replication/LogSequenceNumber;
       5: return

  public void forceUpdateStatus() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokespecial #73                 // Method checkClose:()V
       4: aload_0
       5: aload_0
       6: getfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
       9: aload_0
      10: getfield      #48                 // Field lastFlushedLSN:Lorg/postgresql/replication/LogSequenceNumber;
      13: aload_0
      14: getfield      #46                 // Field lastAppliedLSN:Lorg/postgresql/replication/LogSequenceNumber;
      17: iconst_1
      18: invokespecial #102                // Method updateStatusInternal:(Lorg/postgresql/replication/LogSequenceNumber;Lorg/postgresql/replication/LogSequenceNumber;Lorg/postgresql/replication/LogSequenceNumber;Z)V
      21: return

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #35                 // Field closeFlag:Z
       4: ifne          19
       7: aload_0
       8: getfield      #50                 // Field copyDual:Lorg/postgresql/copy/CopyDual;
      11: invokeinterface #81,  1           // InterfaceMethod org/postgresql/copy/CopyDual.isActive:()Z
      16: ifne          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  private java.nio.ByteBuffer readInternal(boolean) throws java.sql.SQLException;
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #50                 // Field copyDual:Lorg/postgresql/copy/CopyDual;
       6: invokeinterface #81,  1           // InterfaceMethod org/postgresql/copy/CopyDual.isActive:()Z
      11: ifeq          139
      14: iload_2
      15: ifne          25
      18: aload_0
      19: invokespecial #106                // Method isTimeUpdate:()Z
      22: ifeq          29
      25: aload_0
      26: invokespecial #109                // Method timeUpdateStatus:()V
      29: aload_0
      30: iload_1
      31: invokespecial #112                // Method receiveNextData:(Z)Ljava/nio/ByteBuffer;
      34: astore_3
      35: aload_3
      36: ifnonnull     41
      39: aconst_null
      40: areturn
      41: aload_3
      42: invokevirtual #116                // Method java/nio/ByteBuffer.get:()B
      45: istore        4
      47: iload         4
      49: lookupswitch  { // 2
                   107: 76
                   119: 102
               default: 108
          }
      76: aload_0
      77: aload_3
      78: invokespecial #120                // Method processKeepAliveMessage:(Ljava/nio/ByteBuffer;)Z
      81: istore_2
      82: iload_2
      83: aload_0
      84: getfield      #52                 // Field updateInterval:J
      87: lconst_0
      88: lcmp
      89: ifne          96
      92: iconst_1
      93: goto          97
      96: iconst_0
      97: ior
      98: istore_2
      99: goto          136
     102: aload_0
     103: aload_3
     104: invokespecial #124                // Method processXLogData:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
     107: areturn
     108: new           #126                // class org/postgresql/util/PSQLException
     111: dup
     112: ldc           #128                // String Unexpected packet type during replication: {0}
     114: iconst_1
     115: anewarray     #4                  // class java/lang/Object
     118: dup
     119: iconst_0
     120: iload         4
     122: invokestatic  #134                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     125: aastore
     126: invokestatic  #140                // Method org/postgresql/util/GT.tr:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     129: getstatic     #146                // Field org/postgresql/util/PSQLState.PROTOCOL_VIOLATION:Lorg/postgresql/util/PSQLState;
     132: invokespecial #149                // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;)V
     135: athrow
     136: goto          2
     139: aconst_null
     140: areturn

  private java.nio.ByteBuffer receiveNextData(boolean) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #50                 // Field copyDual:Lorg/postgresql/copy/CopyDual;
       4: iload_1
       5: invokeinterface #158,  2          // InterfaceMethod org/postgresql/copy/CopyDual.readFromCopy:(Z)[B
      10: astore_2
      11: aload_2
      12: ifnull        20
      15: aload_2
      16: invokestatic  #162                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      19: areturn
      20: aconst_null
      21: areturn
      22: astore_2
      23: aload_2
      24: invokevirtual #168                // Method org/postgresql/util/PSQLException.getCause:()Ljava/lang/Throwable;
      27: instanceof    #170                // class java/net/SocketTimeoutException
      30: ifeq          35
      33: aconst_null
      34: areturn
      35: aload_2
      36: athrow
    Exception table:
       from    to  target type
           0    19    22   Class org/postgresql/util/PSQLException
          20    21    22   Class org/postgresql/util/PSQLException

  private boolean isTimeUpdate();
    Code:
       0: aload_0
       1: getfield      #52                 // Field updateInterval:J
       4: lconst_0
       5: lcmp
       6: ifne          11
       9: iconst_0
      10: ireturn
      11: invokestatic  #58                 // Method java/lang/System.currentTimeMillis:()J
      14: aload_0
      15: getfield      #60                 // Field lastStatusUpdate:J
      18: lsub
      19: lstore_1
      20: lload_1
      21: aload_0
      22: getfield      #52                 // Field updateInterval:J
      25: lcmp
      26: iflt          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  private void timeUpdateStatus() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
       5: aload_0
       6: getfield      #48                 // Field lastFlushedLSN:Lorg/postgresql/replication/LogSequenceNumber;
       9: aload_0
      10: getfield      #46                 // Field lastAppliedLSN:Lorg/postgresql/replication/LogSequenceNumber;
      13: iconst_0
      14: invokespecial #102                // Method updateStatusInternal:(Lorg/postgresql/replication/LogSequenceNumber;Lorg/postgresql/replication/LogSequenceNumber;Lorg/postgresql/replication/LogSequenceNumber;Z)V
      17: return

  private void updateStatusInternal(org.postgresql.replication.LogSequenceNumber, org.postgresql.replication.LogSequenceNumber, org.postgresql.replication.LogSequenceNumber, boolean) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: invokespecial #178                // Method prepareUpdateStatus:(Lorg/postgresql/replication/LogSequenceNumber;Lorg/postgresql/replication/LogSequenceNumber;Lorg/postgresql/replication/LogSequenceNumber;Z)[B
       9: astore        5
      11: aload_0
      12: getfield      #50                 // Field copyDual:Lorg/postgresql/copy/CopyDual;
      15: aload         5
      17: iconst_0
      18: aload         5
      20: arraylength
      21: invokeinterface #182,  4          // InterfaceMethod org/postgresql/copy/CopyDual.writeToCopy:([BII)V
      26: aload_0
      27: getfield      #50                 // Field copyDual:Lorg/postgresql/copy/CopyDual;
      30: invokeinterface #185,  1          // InterfaceMethod org/postgresql/copy/CopyDual.flushCopy:()V
      35: aload_0
      36: invokestatic  #58                 // Method java/lang/System.currentTimeMillis:()J
      39: putfield      #60                 // Field lastStatusUpdate:J
      42: return

  private byte[] prepareUpdateStatus(org.postgresql.replication.LogSequenceNumber, org.postgresql.replication.LogSequenceNumber, org.postgresql.replication.LogSequenceNumber, boolean);
    Code:
       0: bipush        34
       2: invokestatic  #192                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
       5: astore        5
       7: invokestatic  #58                 // Method java/lang/System.currentTimeMillis:()J
      10: lstore        6
      12: getstatic     #198                // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
      15: lload         6
      17: ldc2_w        #14                 // long 946684800000l
      20: lsub
      21: getstatic     #198                // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
      24: invokevirtual #202                // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      27: lstore        8
      29: getstatic     #204                // Field LOGGER:Ljava/util/logging/Logger;
      32: getstatic     #210                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      35: invokevirtual #216                // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      38: ifeq          89
      41: getstatic     #204                // Field LOGGER:Ljava/util/logging/Logger;
      44: getstatic     #210                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      47: ldc           #218                // String  FE=> StandbyStatusUpdate(received: {0}, flushed: {1}, applied: {2}, clock: {3})
      49: iconst_4
      50: anewarray     #4                  // class java/lang/Object
      53: dup
      54: iconst_0
      55: aload_1
      56: invokevirtual #222                // Method org/postgresql/replication/LogSequenceNumber.asString:()Ljava/lang/String;
      59: aastore
      60: dup
      61: iconst_1
      62: aload_2
      63: invokevirtual #222                // Method org/postgresql/replication/LogSequenceNumber.asString:()Ljava/lang/String;
      66: aastore
      67: dup
      68: iconst_2
      69: aload_3
      70: invokevirtual #222                // Method org/postgresql/replication/LogSequenceNumber.asString:()Ljava/lang/String;
      73: aastore
      74: dup
      75: iconst_3
      76: new           #224                // class java/util/Date
      79: dup
      80: lload         6
      82: invokespecial #227                // Method java/util/Date."<init>":(J)V
      85: aastore
      86: invokevirtual #231                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V
      89: aload         5
      91: bipush        114
      93: invokevirtual #235                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      96: pop
      97: aload         5
      99: aload_1
     100: invokevirtual #238                // Method org/postgresql/replication/LogSequenceNumber.asLong:()J
     103: invokevirtual #242                // Method java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;
     106: pop
     107: aload         5
     109: aload_2
     110: invokevirtual #238                // Method org/postgresql/replication/LogSequenceNumber.asLong:()J
     113: invokevirtual #242                // Method java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;
     116: pop
     117: aload         5
     119: aload_3
     120: invokevirtual #238                // Method org/postgresql/replication/LogSequenceNumber.asLong:()J
     123: invokevirtual #242                // Method java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;
     126: pop
     127: aload         5
     129: lload         8
     131: invokevirtual #242                // Method java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;
     134: pop
     135: iload         4
     137: ifeq          150
     140: aload         5
     142: iconst_1
     143: invokevirtual #235                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     146: pop
     147: goto          168
     150: aload         5
     152: aload_1
     153: getstatic     #40                 // Field org/postgresql/replication/LogSequenceNumber.INVALID_LSN:Lorg/postgresql/replication/LogSequenceNumber;
     156: if_acmpne     163
     159: iconst_1
     160: goto          164
     163: iconst_0
     164: invokevirtual #235                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
     167: pop
     168: aload_0
     169: lload         6
     171: putfield      #60                 // Field lastStatusUpdate:J
     174: aload         5
     176: invokevirtual #246                // Method java/nio/ByteBuffer.array:()[B
     179: areturn

  private boolean processKeepAliveMessage(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #252                // Method java/nio/ByteBuffer.getLong:()J
       5: invokestatic  #256                // Method org/postgresql/replication/LogSequenceNumber.valueOf:(J)Lorg/postgresql/replication/LogSequenceNumber;
       8: putfield      #42                 // Field lastServerLSN:Lorg/postgresql/replication/LogSequenceNumber;
      11: aload_0
      12: getfield      #42                 // Field lastServerLSN:Lorg/postgresql/replication/LogSequenceNumber;
      15: invokevirtual #238                // Method org/postgresql/replication/LogSequenceNumber.asLong:()J
      18: aload_0
      19: getfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
      22: invokevirtual #238                // Method org/postgresql/replication/LogSequenceNumber.asLong:()J
      25: lcmp
      26: ifle          37
      29: aload_0
      30: aload_0
      31: getfield      #42                 // Field lastServerLSN:Lorg/postgresql/replication/LogSequenceNumber;
      34: putfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
      37: aload_1
      38: invokevirtual #252                // Method java/nio/ByteBuffer.getLong:()J
      41: lstore_2
      42: aload_1
      43: invokevirtual #116                // Method java/nio/ByteBuffer.get:()B
      46: ifeq          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: istore        4
      56: getstatic     #204                // Field LOGGER:Ljava/util/logging/Logger;
      59: getstatic     #210                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      62: invokevirtual #216                // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      65: ifeq          130
      68: new           #224                // class java/util/Date
      71: dup
      72: getstatic     #259                // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      75: lload_2
      76: getstatic     #198                // Field java/util/concurrent/TimeUnit.MICROSECONDS:Ljava/util/concurrent/TimeUnit;
      79: invokevirtual #202                // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      82: ldc2_w        #14                 // long 946684800000l
      85: ladd
      86: invokespecial #227                // Method java/util/Date."<init>":(J)V
      89: astore        5
      91: getstatic     #204                // Field LOGGER:Ljava/util/logging/Logger;
      94: getstatic     #210                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      97: ldc_w         #261                // String   <=BE Keepalive(lastServerWal: {0}, clock: {1} needReply: {2})
     100: iconst_3
     101: anewarray     #4                  // class java/lang/Object
     104: dup
     105: iconst_0
     106: aload_0
     107: getfield      #42                 // Field lastServerLSN:Lorg/postgresql/replication/LogSequenceNumber;
     110: invokevirtual #222                // Method org/postgresql/replication/LogSequenceNumber.asString:()Ljava/lang/String;
     113: aastore
     114: dup
     115: iconst_1
     116: aload         5
     118: aastore
     119: dup
     120: iconst_2
     121: iload         4
     123: invokestatic  #266                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     126: aastore
     127: invokevirtual #231                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V
     130: iload         4
     132: ireturn

  private java.nio.ByteBuffer processXLogData(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: invokevirtual #252                // Method java/nio/ByteBuffer.getLong:()J
       4: lstore_2
       5: aload_0
       6: aload_1
       7: invokevirtual #252                // Method java/nio/ByteBuffer.getLong:()J
      10: invokestatic  #256                // Method org/postgresql/replication/LogSequenceNumber.valueOf:(J)Lorg/postgresql/replication/LogSequenceNumber;
      13: putfield      #42                 // Field lastServerLSN:Lorg/postgresql/replication/LogSequenceNumber;
      16: aload_1
      17: invokevirtual #252                // Method java/nio/ByteBuffer.getLong:()J
      20: lstore        4
      22: getstatic     #273                // Field org/postgresql/core/v3/replication/V3PGReplicationStream$1.$SwitchMap$org$postgresql$replication$ReplicationType:[I
      25: aload_0
      26: getfield      #62                 // Field replicationType:Lorg/postgresql/replication/ReplicationType;
      29: invokevirtual #279                // Method org/postgresql/replication/ReplicationType.ordinal:()I
      32: iaload
      33: lookupswitch  { // 2
                     1: 60
                     2: 71
               default: 94
          }
      60: aload_0
      61: lload_2
      62: invokestatic  #256                // Method org/postgresql/replication/LogSequenceNumber.valueOf:(J)Lorg/postgresql/replication/LogSequenceNumber;
      65: putfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
      68: goto          94
      71: aload_1
      72: invokevirtual #282                // Method java/nio/ByteBuffer.limit:()I
      75: aload_1
      76: invokevirtual #285                // Method java/nio/ByteBuffer.position:()I
      79: isub
      80: istore        6
      82: aload_0
      83: lload_2
      84: iload         6
      86: i2l
      87: ladd
      88: invokestatic  #256                // Method org/postgresql/replication/LogSequenceNumber.valueOf:(J)Lorg/postgresql/replication/LogSequenceNumber;
      91: putfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
      94: getstatic     #204                // Field LOGGER:Ljava/util/logging/Logger;
      97: getstatic     #210                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
     100: invokevirtual #216                // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
     103: ifeq          150
     106: getstatic     #204                // Field LOGGER:Ljava/util/logging/Logger;
     109: getstatic     #210                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
     112: ldc_w         #287                // String   <=BE XLogData(currWal: {0}, lastServerWal: {1}, clock: {2})
     115: iconst_3
     116: anewarray     #4                  // class java/lang/Object
     119: dup
     120: iconst_0
     121: aload_0
     122: getfield      #44                 // Field lastReceiveLSN:Lorg/postgresql/replication/LogSequenceNumber;
     125: invokevirtual #222                // Method org/postgresql/replication/LogSequenceNumber.asString:()Ljava/lang/String;
     128: aastore
     129: dup
     130: iconst_1
     131: aload_0
     132: getfield      #42                 // Field lastServerLSN:Lorg/postgresql/replication/LogSequenceNumber;
     135: invokevirtual #222                // Method org/postgresql/replication/LogSequenceNumber.asString:()Ljava/lang/String;
     138: aastore
     139: dup
     140: iconst_2
     141: lload         4
     143: invokestatic  #292                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     146: aastore
     147: invokevirtual #231                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V
     150: aload_1
     151: invokevirtual #295                // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
     154: areturn

  private void checkClose() throws org.postgresql.util.PSQLException;
    Code:
       0: aload_0
       1: invokevirtual #299                // Method isClosed:()Z
       4: ifeq          28
       7: new           #126                // class org/postgresql/util/PSQLException
      10: dup
      11: ldc_w         #301                // String This replication stream has been closed.
      14: iconst_0
      15: anewarray     #4                  // class java/lang/Object
      18: invokestatic  #140                // Method org/postgresql/util/GT.tr:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      21: getstatic     #304                // Field org/postgresql/util/PSQLState.CONNECTION_DOES_NOT_EXIST:Lorg/postgresql/util/PSQLState;
      24: invokespecial #149                // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;)V
      27: athrow
      28: return

  public void close() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #299                // Method isClosed:()Z
       4: ifeq          8
       7: return
       8: getstatic     #204                // Field LOGGER:Ljava/util/logging/Logger;
      11: getstatic     #210                // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      14: ldc_w         #307                // String  FE=> StopReplication
      17: invokevirtual #310                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;)V
      20: aload_0
      21: getfield      #50                 // Field copyDual:Lorg/postgresql/copy/CopyDual;
      24: invokeinterface #313,  1          // InterfaceMethod org/postgresql/copy/CopyDual.endCopy:()J
      29: pop2
      30: aload_0
      31: iconst_1
      32: putfield      #35                 // Field closeFlag:Z
      35: return

  static {};
    Code:
       0: ldc           #2                  // class org/postgresql/core/v3/replication/V3PGReplicationStream
       2: invokevirtual #319                // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #323                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: putstatic     #204                // Field LOGGER:Ljava/util/logging/Logger;
      11: return
}
