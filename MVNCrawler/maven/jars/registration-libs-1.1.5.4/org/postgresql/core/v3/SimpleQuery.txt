Compiled from "SimpleQuery.java"
class org.postgresql.core.v3.SimpleQuery implements org.postgresql.core.Query {
  private static final java.util.logging.Logger LOGGER;

  private java.util.Map<java.lang.String, java.lang.Integer> resultSetColumnNameIndexMap;

  private final org.postgresql.core.NativeQuery nativeQuery;

  private final org.postgresql.core.v3.TypeTransferModeRegistry transferModeRegistry;

  private java.lang.String statementName;

  private byte[] encodedStatementName;

  private org.postgresql.core.Field[] fields;

  private boolean needUpdateFieldFormats;

  private boolean hasBinaryFields;

  private boolean portalDescribed;

  private boolean statementDescribed;

  private final boolean sanitiserDisabled;

  private java.lang.ref.PhantomReference<?> cleanupRef;

  private int[] preparedTypes;

  private java.util.BitSet unspecifiedParams;

  private short deallocateEpoch;

  private java.lang.Integer cachedMaxResultRowSize;

  static final org.postgresql.core.v3.SimpleParameterList NO_PARAMETERS;

  static final boolean $assertionsDisabled;

  org.postgresql.core.v3.SimpleQuery(org.postgresql.core.v3.SimpleQuery);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #46                 // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       5: aload_1
       6: getfield      #48                 // Field transferModeRegistry:Lorg/postgresql/core/v3/TypeTransferModeRegistry;
       9: aload_1
      10: getfield      #50                 // Field sanitiserDisabled:Z
      13: invokespecial #53                 // Method "<init>":(Lorg/postgresql/core/NativeQuery;Lorg/postgresql/core/v3/TypeTransferModeRegistry;Z)V
      16: return

  org.postgresql.core.v3.SimpleQuery(org.postgresql.core.NativeQuery, org.postgresql.core.v3.TypeTransferModeRegistry, boolean);
    Code:
       0: aload_0
       1: invokespecial #59                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #46                 // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       9: aload_0
      10: aload_2
      11: putfield      #48                 // Field transferModeRegistry:Lorg/postgresql/core/v3/TypeTransferModeRegistry;
      14: aload_0
      15: iload_3
      16: putfield      #50                 // Field sanitiserDisabled:Z
      19: return

  public org.postgresql.core.ParameterList createParameterList();
    Code:
       0: aload_0
       1: getfield      #46                 // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: getfield      #67                 // Field org/postgresql/core/NativeQuery.bindPositions:[I
       7: arraylength
       8: ifne          15
      11: getstatic     #69                 // Field NO_PARAMETERS:Lorg/postgresql/core/v3/SimpleParameterList;
      14: areturn
      15: new           #71                 // class org/postgresql/core/v3/SimpleParameterList
      18: dup
      19: aload_0
      20: invokevirtual #75                 // Method getBindCount:()I
      23: aload_0
      24: getfield      #48                 // Field transferModeRegistry:Lorg/postgresql/core/v3/TypeTransferModeRegistry;
      27: invokespecial #78                 // Method org/postgresql/core/v3/SimpleParameterList."<init>":(ILorg/postgresql/core/v3/TypeTransferModeRegistry;)V
      30: areturn

  public java.lang.String toString(org.postgresql.core.ParameterList);
    Code:
       0: aload_0
       1: getfield      #46                 // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: aload_1
       5: invokevirtual #82                 // Method org/postgresql/core/NativeQuery.toString:(Lorg/postgresql/core/ParameterList;)Ljava/lang/String;
       8: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #86                 // Method toString:(Lorg/postgresql/core/ParameterList;)Ljava/lang/String;
       5: areturn

  public void close();
    Code:
       0: aload_0
       1: invokevirtual #90                 // Method unprepare:()V
       4: return

  public org.postgresql.core.v3.SimpleQuery[] getSubqueries();
    Code:
       0: aconst_null
       1: areturn

  public int getMaxResultRowSize();
    Code:
       0: aload_0
       1: getfield      #95                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
       4: ifnull        15
       7: aload_0
       8: getfield      #95                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      11: invokevirtual #100                // Method java/lang/Integer.intValue:()I
      14: ireturn
      15: aload_0
      16: getfield      #102                // Field statementDescribed:Z
      19: ifne          32
      22: new           #104                // class java/lang/IllegalStateException
      25: dup
      26: ldc           #106                // String Cannot estimate result row size on a statement that is not described
      28: invokespecial #109                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: iconst_0
      33: istore_1
      34: aload_0
      35: getfield      #111                // Field fields:[Lorg/postgresql/core/Field;
      38: ifnull        100
      41: aload_0
      42: getfield      #111                // Field fields:[Lorg/postgresql/core/Field;
      45: astore_2
      46: aload_2
      47: arraylength
      48: istore_3
      49: iconst_0
      50: istore        4
      52: iload         4
      54: iload_3
      55: if_icmpge     100
      58: aload_2
      59: iload         4
      61: aaload
      62: astore        5
      64: aload         5
      66: invokevirtual #117                // Method org/postgresql/core/Field.getLength:()I
      69: istore        6
      71: iload         6
      73: iconst_1
      74: if_icmplt     84
      77: iload         6
      79: ldc           #118                // int 65535
      81: if_icmplt     89
      84: iconst_m1
      85: istore_1
      86: goto          100
      89: iload_1
      90: iload         6
      92: iadd
      93: istore_1
      94: iinc          4, 1
      97: goto          52
     100: aload_0
     101: iload_1
     102: invokestatic  #122                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     105: putfield      #95                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
     108: iload_1
     109: ireturn

  public java.lang.String getNativeSql();
    Code:
       0: aload_0
       1: getfield      #46                 // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: getfield      #131                // Field org/postgresql/core/NativeQuery.nativeSql:Ljava/lang/String;
       7: areturn

  void setStatementName(java.lang.String, short);
    Code:
       0: getstatic     #135                // Field $assertionsDisabled:Z
       3: ifne          20
       6: aload_1
       7: ifnonnull     20
      10: new           #137                // class java/lang/AssertionError
      13: dup
      14: ldc           #139                // String statement name should not be null
      16: invokespecial #142                // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      19: athrow
      20: aload_0
      21: aload_1
      22: putfield      #144                // Field statementName:Ljava/lang/String;
      25: aload_0
      26: aload_1
      27: invokestatic  #150                // Method org/postgresql/core/Utils.encodeUTF8:(Ljava/lang/String;)[B
      30: putfield      #152                // Field encodedStatementName:[B
      33: aload_0
      34: iload_2
      35: putfield      #154                // Field deallocateEpoch:S
      38: return

  void setPrepareTypes(int[]);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_1
       4: arraylength
       5: if_icmpge     48
       8: aload_1
       9: iload_2
      10: iaload
      11: istore_3
      12: iload_3
      13: ifne          42
      16: aload_0
      17: getfield      #158                // Field unspecifiedParams:Ljava/util/BitSet;
      20: ifnonnull     34
      23: aload_0
      24: new           #160                // class java/util/BitSet
      27: dup
      28: invokespecial #161                // Method java/util/BitSet."<init>":()V
      31: putfield      #158                // Field unspecifiedParams:Ljava/util/BitSet;
      34: aload_0
      35: getfield      #158                // Field unspecifiedParams:Ljava/util/BitSet;
      38: iload_2
      39: invokevirtual #165                // Method java/util/BitSet.set:(I)V
      42: iinc          2, 1
      45: goto          2
      48: aload_0
      49: getfield      #167                // Field preparedTypes:[I
      52: ifnonnull     67
      55: aload_0
      56: aload_1
      57: invokevirtual #172                // Method "[I".clone:()Ljava/lang/Object;
      60: checkcast     #168                // class "[I"
      63: putfield      #167                // Field preparedTypes:[I
      66: return
      67: aload_1
      68: iconst_0
      69: aload_0
      70: getfield      #167                // Field preparedTypes:[I
      73: iconst_0
      74: aload_1
      75: arraylength
      76: invokestatic  #178                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      79: return

  int[] getPrepareTypes();
    Code:
       0: aload_0
       1: getfield      #167                // Field preparedTypes:[I
       4: areturn

  java.lang.String getStatementName();
    Code:
       0: aload_0
       1: getfield      #144                // Field statementName:Ljava/lang/String;
       4: areturn

  boolean isPreparedFor(int[], short);
    Code:
       0: aload_0
       1: getfield      #144                // Field statementName:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #167                // Field preparedTypes:[I
      11: ifnonnull     16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: getfield      #154                // Field deallocateEpoch:S
      20: iload_2
      21: if_icmpeq     26
      24: iconst_0
      25: ireturn
      26: getstatic     #135                // Field $assertionsDisabled:Z
      29: ifne          78
      32: aload_1
      33: arraylength
      34: aload_0
      35: getfield      #167                // Field preparedTypes:[I
      38: arraylength
      39: if_icmpeq     78
      42: new           #137                // class java/lang/AssertionError
      45: dup
      46: ldc           #188                // String paramTypes:%1$d preparedTypes:%2$d
      48: iconst_2
      49: anewarray     #4                  // class java/lang/Object
      52: dup
      53: iconst_0
      54: aload_1
      55: arraylength
      56: invokestatic  #122                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      59: aastore
      60: dup
      61: iconst_1
      62: aload_0
      63: getfield      #167                // Field preparedTypes:[I
      66: arraylength
      67: invokestatic  #122                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      70: aastore
      71: invokestatic  #194                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      74: invokespecial #142                // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      77: athrow
      78: aload_0
      79: getfield      #158                // Field unspecifiedParams:Ljava/util/BitSet;
      82: astore_3
      83: iconst_0
      84: istore        4
      86: iload         4
      88: aload_1
      89: arraylength
      90: if_icmpge     226
      93: aload_1
      94: iload         4
      96: iaload
      97: istore        5
      99: aload_0
     100: getfield      #167                // Field preparedTypes:[I
     103: iload         4
     105: iaload
     106: istore        6
     108: iload         5
     110: iload         6
     112: if_icmpeq     220
     115: iload         5
     117: ifne          133
     120: aload_3
     121: ifnull        133
     124: aload_3
     125: iload         4
     127: invokevirtual #198                // Method java/util/BitSet.get:(I)Z
     130: ifne          220
     133: getstatic     #200                // Field LOGGER:Ljava/util/logging/Logger;
     136: getstatic     #206                // Field java/util/logging/Level.FINER:Ljava/util/logging/Level;
     139: invokevirtual #212                // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
     142: ifeq          218
     145: getstatic     #200                // Field LOGGER:Ljava/util/logging/Logger;
     148: getstatic     #206                // Field java/util/logging/Level.FINER:Ljava/util/logging/Level;
     151: ldc           #214                // String Statement {0} does not match new parameter types. Will have to un-prepare it and parse once again. To avoid performance issues, use the same data type for the same bind position. Bind index (1-based) is {1}, preparedType was {2} (after describe {3}), current bind type is {4}
     153: iconst_5
     154: anewarray     #4                  // class java/lang/Object
     157: dup
     158: iconst_0
     159: aload_0
     160: getfield      #144                // Field statementName:Ljava/lang/String;
     163: aastore
     164: dup
     165: iconst_1
     166: iload         4
     168: iconst_1
     169: iadd
     170: invokestatic  #122                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     173: aastore
     174: dup
     175: iconst_2
     176: aload_3
     177: ifnull        193
     180: aload_3
     181: iload         4
     183: invokevirtual #198                // Method java/util/BitSet.get:(I)Z
     186: ifeq          193
     189: iconst_0
     190: goto          195
     193: iload         6
     195: invokestatic  #221                // Method org/postgresql/core/Oid.toString:(I)Ljava/lang/String;
     198: aastore
     199: dup
     200: iconst_3
     201: iload         6
     203: invokestatic  #221                // Method org/postgresql/core/Oid.toString:(I)Ljava/lang/String;
     206: aastore
     207: dup
     208: iconst_4
     209: iload         5
     211: invokestatic  #221                // Method org/postgresql/core/Oid.toString:(I)Ljava/lang/String;
     214: aastore
     215: invokevirtual #225                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V
     218: iconst_0
     219: ireturn
     220: iinc          4, 1
     223: goto          86
     226: iconst_1
     227: ireturn

  boolean hasUnresolvedTypes();
    Code:
       0: aload_0
       1: getfield      #167                // Field preparedTypes:[I
       4: ifnonnull     9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: getfield      #158                // Field unspecifiedParams:Ljava/util/BitSet;
      13: ifnull        30
      16: aload_0
      17: getfield      #158                // Field unspecifiedParams:Ljava/util/BitSet;
      20: invokevirtual #232                // Method java/util/BitSet.isEmpty:()Z
      23: ifne          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  byte[] getEncodedStatementName();
    Code:
       0: aload_0
       1: getfield      #152                // Field encodedStatementName:[B
       4: areturn

  void setFields(org.postgresql.core.Field[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #111                // Field fields:[Lorg/postgresql/core/Field;
       5: aload_0
       6: aconst_null
       7: putfield      #238                // Field resultSetColumnNameIndexMap:Ljava/util/Map;
      10: aload_0
      11: aconst_null
      12: putfield      #95                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      15: aload_0
      16: aload_1
      17: ifnull        24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: putfield      #240                // Field needUpdateFieldFormats:Z
      28: aload_0
      29: iconst_0
      30: putfield      #242                // Field hasBinaryFields:Z
      33: return

  org.postgresql.core.Field[] getFields();
    Code:
       0: aload_0
       1: getfield      #111                // Field fields:[Lorg/postgresql/core/Field;
       4: areturn

  boolean needUpdateFieldFormats();
    Code:
       0: aload_0
       1: getfield      #240                // Field needUpdateFieldFormats:Z
       4: ifeq          14
       7: aload_0
       8: iconst_0
       9: putfield      #240                // Field needUpdateFieldFormats:Z
      12: iconst_1
      13: ireturn
      14: iconst_0
      15: ireturn

  public void resetNeedUpdateFieldFormats();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #111                // Field fields:[Lorg/postgresql/core/Field;
       5: ifnull        12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putfield      #240                // Field needUpdateFieldFormats:Z
      16: return

  public boolean hasBinaryFields();
    Code:
       0: aload_0
       1: getfield      #242                // Field hasBinaryFields:Z
       4: ireturn

  public void setHasBinaryFields(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #242                // Field hasBinaryFields:Z
       5: return

  boolean isPortalDescribed();
    Code:
       0: aload_0
       1: getfield      #250                // Field portalDescribed:Z
       4: ireturn

  void setPortalDescribed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #250                // Field portalDescribed:Z
       5: aload_0
       6: aconst_null
       7: putfield      #95                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      10: return

  public boolean isStatementDescribed();
    Code:
       0: aload_0
       1: getfield      #102                // Field statementDescribed:Z
       4: ireturn

  void setStatementDescribed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #102                // Field statementDescribed:Z
       5: aload_0
       6: aconst_null
       7: putfield      #95                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      10: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokevirtual #255                // Method getNativeSql:()Ljava/lang/String;
       4: invokevirtual #256                // Method java/lang/String.isEmpty:()Z
       7: ireturn

  void setCleanupRef(java.lang.ref.PhantomReference<?>);
    Code:
       0: aload_0
       1: getfield      #260                // Field cleanupRef:Ljava/lang/ref/PhantomReference;
       4: ifnull        22
       7: aload_0
       8: getfield      #260                // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      11: invokevirtual #265                // Method java/lang/ref/PhantomReference.clear:()V
      14: aload_0
      15: getfield      #260                // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      18: invokevirtual #268                // Method java/lang/ref/PhantomReference.enqueue:()Z
      21: pop
      22: aload_0
      23: aload_1
      24: putfield      #260                // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      27: return

  void unprepare();
    Code:
       0: aload_0
       1: getfield      #260                // Field cleanupRef:Ljava/lang/ref/PhantomReference;
       4: ifnull        27
       7: aload_0
       8: getfield      #260                // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      11: invokevirtual #265                // Method java/lang/ref/PhantomReference.clear:()V
      14: aload_0
      15: getfield      #260                // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      18: invokevirtual #268                // Method java/lang/ref/PhantomReference.enqueue:()Z
      21: pop
      22: aload_0
      23: aconst_null
      24: putfield      #260                // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      27: aload_0
      28: getfield      #158                // Field unspecifiedParams:Ljava/util/BitSet;
      31: ifnull        41
      34: aload_0
      35: getfield      #158                // Field unspecifiedParams:Ljava/util/BitSet;
      38: invokevirtual #269                // Method java/util/BitSet.clear:()V
      41: aload_0
      42: aconst_null
      43: putfield      #144                // Field statementName:Ljava/lang/String;
      46: aload_0
      47: aconst_null
      48: putfield      #152                // Field encodedStatementName:[B
      51: aload_0
      52: aconst_null
      53: putfield      #111                // Field fields:[Lorg/postgresql/core/Field;
      56: aload_0
      57: aconst_null
      58: putfield      #238                // Field resultSetColumnNameIndexMap:Ljava/util/Map;
      61: aload_0
      62: iconst_0
      63: putfield      #250                // Field portalDescribed:Z
      66: aload_0
      67: iconst_0
      68: putfield      #102                // Field statementDescribed:Z
      71: aload_0
      72: aconst_null
      73: putfield      #95                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      76: return

  public int getBatchSize();
    Code:
       0: iconst_1
       1: ireturn

  org.postgresql.core.NativeQuery getNativeQuery();
    Code:
       0: aload_0
       1: getfield      #46                 // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: areturn

  public final int getBindCount();
    Code:
       0: aload_0
       1: getfield      #46                 // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: getfield      #67                 // Field org/postgresql/core/NativeQuery.bindPositions:[I
       7: arraylength
       8: aload_0
       9: invokevirtual #274                // Method getBatchSize:()I
      12: imul
      13: ireturn

  public java.util.Map<java.lang.String, java.lang.Integer> getResultSetColumnNameIndexMap();
    Code:
       0: aload_0
       1: getfield      #238                // Field resultSetColumnNameIndexMap:Ljava/util/Map;
       4: astore_1
       5: aload_1
       6: ifnonnull     40
       9: aload_0
      10: getfield      #111                // Field fields:[Lorg/postgresql/core/Field;
      13: ifnull        40
      16: aload_0
      17: getfield      #111                // Field fields:[Lorg/postgresql/core/Field;
      20: aload_0
      21: getfield      #50                 // Field sanitiserDisabled:Z
      24: invokestatic  #282                // Method org/postgresql/jdbc/PgResultSet.createColumnNameIndexMap:([Lorg/postgresql/core/Field;Z)Ljava/util/Map;
      27: astore_1
      28: aload_0
      29: getfield      #144                // Field statementName:Ljava/lang/String;
      32: ifnull        40
      35: aload_0
      36: aload_1
      37: putfield      #238                // Field resultSetColumnNameIndexMap:Ljava/util/Map;
      40: aload_1
      41: areturn

  public org.postgresql.core.SqlCommand getSqlCommand();
    Code:
       0: aload_0
       1: getfield      #46                 // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: invokevirtual #290                // Method org/postgresql/core/NativeQuery.getCommand:()Lorg/postgresql/core/SqlCommand;
       7: areturn

  public org.postgresql.core.Query[] getSubqueries();
    Code:
       0: aload_0
       1: invokevirtual #293                // Method getSubqueries:()[Lorg/postgresql/core/v3/SimpleQuery;
       4: areturn

  static {};
    Code:
       0: ldc           #2                  // class org/postgresql/core/v3/SimpleQuery
       2: invokevirtual #299                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #135                // Field $assertionsDisabled:Z
      16: ldc           #2                  // class org/postgresql/core/v3/SimpleQuery
      18: invokevirtual #302                // Method java/lang/Class.getName:()Ljava/lang/String;
      21: invokestatic  #306                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
      24: putstatic     #200                // Field LOGGER:Ljava/util/logging/Logger;
      27: new           #71                 // class org/postgresql/core/v3/SimpleParameterList
      30: dup
      31: iconst_0
      32: aconst_null
      33: invokespecial #78                 // Method org/postgresql/core/v3/SimpleParameterList."<init>":(ILorg/postgresql/core/v3/TypeTransferModeRegistry;)V
      36: putstatic     #69                 // Field NO_PARAMETERS:Lorg/postgresql/core/v3/SimpleParameterList;
      39: return
}
