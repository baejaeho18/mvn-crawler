Compiled from "QueryExecutor.java"
public interface org.postgresql.core.QueryExecutor extends org.postgresql.core.v3.TypeTransferModeRegistry {
  public static final int QUERY_ONESHOT;

  public static final int QUERY_NO_METADATA;

  public static final int QUERY_NO_RESULTS;

  public static final int QUERY_FORWARD_CURSOR;

  public static final int QUERY_SUPPRESS_BEGIN;

  public static final int QUERY_DESCRIBE_ONLY;

  public static final int QUERY_BOTH_ROWS_AND_STATUS;

  public static final int QUERY_FORCE_DESCRIBE_PORTAL;

  public static final int QUERY_DISALLOW_BATCHING;

  public static final int QUERY_NO_BINARY_TRANSFER;

  public static final int QUERY_EXECUTE_AS_SIMPLE;

  public abstract void execute(org.postgresql.core.Query, org.postgresql.core.ParameterList, org.postgresql.core.ResultHandler, int, int, int) throws java.sql.SQLException;

  public abstract void execute(org.postgresql.core.Query[], org.postgresql.core.ParameterList[], org.postgresql.jdbc.BatchResultHandler, int, int, int) throws java.sql.SQLException;

  public abstract void fetch(org.postgresql.core.ResultCursor, org.postgresql.core.ResultHandler, int) throws java.sql.SQLException;

  public abstract org.postgresql.core.Query createSimpleQuery(java.lang.String) throws java.sql.SQLException;

  public abstract boolean isReWriteBatchedInsertsEnabled();

  public abstract org.postgresql.core.CachedQuery createQuery(java.lang.String, boolean, boolean, java.lang.String...) throws java.sql.SQLException;

  public abstract java.lang.Object createQueryKey(java.lang.String, boolean, boolean, java.lang.String...);

  public abstract org.postgresql.core.CachedQuery createQueryByKey(java.lang.Object) throws java.sql.SQLException;

  public abstract org.postgresql.core.CachedQuery borrowQueryByKey(java.lang.Object) throws java.sql.SQLException;

  public abstract org.postgresql.core.CachedQuery borrowQuery(java.lang.String) throws java.sql.SQLException;

  public abstract org.postgresql.core.CachedQuery borrowCallableQuery(java.lang.String) throws java.sql.SQLException;

  public abstract org.postgresql.core.CachedQuery borrowReturningQuery(java.lang.String, java.lang.String[]) throws java.sql.SQLException;

  public abstract void releaseQuery(org.postgresql.core.CachedQuery);

  public abstract org.postgresql.core.Query wrap(java.util.List<org.postgresql.core.NativeQuery>);

  public abstract void processNotifies() throws java.sql.SQLException;

  public abstract void processNotifies(int) throws java.sql.SQLException;

  public abstract org.postgresql.core.ParameterList createFastpathParameters(int);

  public abstract byte[] fastpathCall(int, org.postgresql.core.ParameterList, boolean) throws java.sql.SQLException;

  public abstract org.postgresql.copy.CopyOperation startCopy(java.lang.String, boolean) throws java.sql.SQLException;

  public abstract int getProtocolVersion();

  public abstract void setBinaryReceiveOids(java.util.Set<java.lang.Integer>);

  public abstract void setBinarySendOids(java.util.Set<java.lang.Integer>);

  public abstract boolean getIntegerDateTimes();

  public abstract org.postgresql.util.HostSpec getHostSpec();

  public abstract java.lang.String getUser();

  public abstract java.lang.String getDatabase();

  public abstract void sendQueryCancel() throws java.sql.SQLException;

  public abstract int getBackendPID();

  public abstract void abort();

  public abstract void close();

  public abstract boolean isClosed();

  public abstract java.lang.String getServerVersion();

  public abstract org.postgresql.PGNotification[] getNotifications() throws java.sql.SQLException;

  public abstract java.sql.SQLWarning getWarnings();

  public abstract int getServerVersionNum();

  public abstract org.postgresql.core.TransactionState getTransactionState();

  public abstract boolean getStandardConformingStrings();

  public abstract java.util.TimeZone getTimeZone();

  public abstract org.postgresql.core.Encoding getEncoding();

  public abstract java.lang.String getApplicationName();

  public abstract boolean isColumnSanitiserDisabled();

  public abstract org.postgresql.jdbc.PreferQueryMode getPreferQueryMode();

  public abstract org.postgresql.jdbc.AutoSave getAutoSave();

  public abstract void setAutoSave(org.postgresql.jdbc.AutoSave);

  public abstract boolean willHealOnRetry(java.sql.SQLException);

  public abstract void setFlushCacheOnDeallocate(boolean);

  public abstract org.postgresql.core.ReplicationProtocol getReplicationProtocol();

  public abstract void setNetworkTimeout(int) throws java.io.IOException;

  public abstract int getNetworkTimeout() throws java.io.IOException;
}
