Compiled from "SharedTimer.java"
public class org.postgresql.util.SharedTimer {
  private static final java.util.concurrent.atomic.AtomicInteger timerCount;

  private static final java.util.logging.Logger LOGGER;

  private volatile java.util.Timer timer;

  private final java.util.concurrent.atomic.AtomicInteger refCount;

  public org.postgresql.util.SharedTimer();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #18                 // Field timer:Ljava/util/Timer;
       9: aload_0
      10: new           #20                 // class java/util/concurrent/atomic/AtomicInteger
      13: dup
      14: iconst_0
      15: invokespecial #23                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      18: putfield      #25                 // Field refCount:Ljava/util/concurrent/atomic/AtomicInteger;
      21: return

  public int getRefCount();
    Code:
       0: aload_0
       1: getfield      #25                 // Field refCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn

  public synchronized java.util.Timer getTimer();
    Code:
       0: aload_0
       1: getfield      #18                 // Field timer:Ljava/util/Timer;
       4: ifnonnull     79
       7: getstatic     #36                 // Field timerCount:Ljava/util/concurrent/atomic/AtomicInteger;
      10: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      13: istore_1
      14: invokestatic  #45                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      17: invokevirtual #49                 // Method java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;
      20: astore_2
      21: invokestatic  #45                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      24: aconst_null
      25: invokevirtual #53                 // Method java/lang/Thread.setContextClassLoader:(Ljava/lang/ClassLoader;)V
      28: aload_0
      29: new           #55                 // class java/util/Timer
      32: dup
      33: new           #57                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #58                 // Method java/lang/StringBuilder."<init>":()V
      40: ldc           #60                 // String PostgreSQL-JDBC-SharedTimer-
      42: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: iload_1
      46: invokevirtual #67                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: invokevirtual #71                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: iconst_1
      53: invokespecial #74                 // Method java/util/Timer."<init>":(Ljava/lang/String;Z)V
      56: putfield      #18                 // Field timer:Ljava/util/Timer;
      59: invokestatic  #45                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      62: aload_2
      63: invokevirtual #53                 // Method java/lang/Thread.setContextClassLoader:(Ljava/lang/ClassLoader;)V
      66: goto          79
      69: astore_3
      70: invokestatic  #45                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      73: aload_2
      74: invokevirtual #53                 // Method java/lang/Thread.setContextClassLoader:(Ljava/lang/ClassLoader;)V
      77: aload_3
      78: athrow
      79: aload_0
      80: getfield      #25                 // Field refCount:Ljava/util/concurrent/atomic/AtomicInteger;
      83: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      86: pop
      87: aload_0
      88: getfield      #18                 // Field timer:Ljava/util/Timer;
      91: areturn
    Exception table:
       from    to  target type
          21    59    69   any

  public synchronized void releaseTimer();
    Code:
       0: aload_0
       1: getfield      #25                 // Field refCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #86                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: istore_1
       8: iload_1
       9: ifle          26
      12: getstatic     #88                 // Field LOGGER:Ljava/util/logging/Logger;
      15: getstatic     #94                 // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      18: ldc           #96                 // String Outstanding references still exist so not closing shared Timer
      20: invokevirtual #102                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;)V
      23: goto          82
      26: iload_1
      27: ifne          63
      30: getstatic     #88                 // Field LOGGER:Ljava/util/logging/Logger;
      33: getstatic     #94                 // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
      36: ldc           #104                // String No outstanding references to shared Timer, will cancel and close it
      38: invokevirtual #102                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;)V
      41: aload_0
      42: getfield      #18                 // Field timer:Ljava/util/Timer;
      45: ifnull        82
      48: aload_0
      49: getfield      #18                 // Field timer:Ljava/util/Timer;
      52: invokevirtual #107                // Method java/util/Timer.cancel:()V
      55: aload_0
      56: aconst_null
      57: putfield      #18                 // Field timer:Ljava/util/Timer;
      60: goto          82
      63: getstatic     #88                 // Field LOGGER:Ljava/util/logging/Logger;
      66: getstatic     #110                // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      69: ldc           #112                // String releaseTimer() called too many times; there is probably a bug in the calling code
      71: invokevirtual #102                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;)V
      74: aload_0
      75: getfield      #25                 // Field refCount:Ljava/util/concurrent/atomic/AtomicInteger;
      78: iconst_0
      79: invokevirtual #115                // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      82: return

  static {};
    Code:
       0: new           #20                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: iconst_0
       5: invokespecial #23                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
       8: putstatic     #36                 // Field timerCount:Ljava/util/concurrent/atomic/AtomicInteger;
      11: ldc           #2                  // class org/postgresql/util/SharedTimer
      13: invokevirtual #122                // Method java/lang/Class.getName:()Ljava/lang/String;
      16: invokestatic  #126                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
      19: putstatic     #88                 // Field LOGGER:Ljava/util/logging/Logger;
      22: return
}
