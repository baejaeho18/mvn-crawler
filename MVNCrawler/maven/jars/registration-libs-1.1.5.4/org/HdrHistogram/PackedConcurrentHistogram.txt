Compiled from "PackedConcurrentHistogram.java"
public class org.HdrHistogram.PackedConcurrentHistogram extends org.HdrHistogram.ConcurrentHistogram {
  static final boolean $assertionsDisabled;

  org.HdrHistogram.ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset allocateArray(int, int);
    Code:
       0: new           #1                  // class org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset
       3: dup
       4: iload_1
       5: iload_2
       6: invokespecial #2                  // Method org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset."<init>":(II)V
       9: areturn

  void clearCounts();
    Code:
       0: aload_0
       1: getfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #4                  // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: getstatic     #5                  // Field $assertionsDisabled:Z
      10: ifne          37
      13: aload_0
      14: getfield      #6                  // Field countsArrayLength:I
      17: aload_0
      18: getfield      #7                  // Field activeCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      21: invokeinterface #8,  1            // InterfaceMethod org/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset.length:()I
      26: if_icmpeq     37
      29: new           #9                  // class java/lang/AssertionError
      32: dup
      33: invokespecial #10                 // Method java/lang/AssertionError."<init>":()V
      36: athrow
      37: getstatic     #5                  // Field $assertionsDisabled:Z
      40: ifne          67
      43: aload_0
      44: getfield      #6                  // Field countsArrayLength:I
      47: aload_0
      48: getfield      #11                 // Field inactiveCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      51: invokeinterface #8,  1            // InterfaceMethod org/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset.length:()I
      56: if_icmpeq     67
      59: new           #9                  // class java/lang/AssertionError
      62: dup
      63: invokespecial #10                 // Method java/lang/AssertionError."<init>":()V
      66: athrow
      67: iconst_0
      68: istore_1
      69: iload_1
      70: aload_0
      71: getfield      #7                  // Field activeCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      74: invokeinterface #8,  1            // InterfaceMethod org/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset.length:()I
      79: if_icmpge     110
      82: aload_0
      83: getfield      #7                  // Field activeCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      86: iload_1
      87: lconst_0
      88: invokeinterface #12,  4           // InterfaceMethod org/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset.lazySet:(IJ)V
      93: aload_0
      94: getfield      #11                 // Field inactiveCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      97: iload_1
      98: lconst_0
      99: invokeinterface #12,  4           // InterfaceMethod org/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset.lazySet:(IJ)V
     104: iinc          1, 1
     107: goto          69
     110: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     113: aload_0
     114: lconst_0
     115: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.set:(Ljava/lang/Object;J)V
     118: aload_0
     119: getfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
     122: invokevirtual #15                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
     125: goto          138
     128: astore_2
     129: aload_0
     130: getfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
     133: invokevirtual #15                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
     136: aload_2
     137: athrow
     138: return
    Exception table:
       from    to  target type
           0   118   128   any

  public org.HdrHistogram.PackedConcurrentHistogram copy();
    Code:
       0: new           #16                 // class org/HdrHistogram/PackedConcurrentHistogram
       3: dup
       4: aload_0
       5: invokespecial #17                 // Method "<init>":(Lorg/HdrHistogram/AbstractHistogram;)V
       8: astore_1
       9: aload_1
      10: aload_0
      11: invokevirtual #18                 // Method add:(Lorg/HdrHistogram/AbstractHistogram;)V
      14: aload_1
      15: areturn

  public org.HdrHistogram.PackedConcurrentHistogram copyCorrectedForCoordinatedOmission(long);
    Code:
       0: new           #16                 // class org/HdrHistogram/PackedConcurrentHistogram
       3: dup
       4: aload_0
       5: invokespecial #17                 // Method "<init>":(Lorg/HdrHistogram/AbstractHistogram;)V
       8: astore_3
       9: aload_3
      10: aload_0
      11: lload_1
      12: invokevirtual #19                 // Method addWhileCorrectingForCoordinatedOmission:(Lorg/HdrHistogram/AbstractHistogram;J)V
      15: aload_3
      16: areturn

  public long getTotalCount();
    Code:
       0: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.get:(Ljava/lang/Object;)J
       7: lreturn

  void setTotalCount(long);
    Code:
       0: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: lload_1
       5: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.set:(Ljava/lang/Object;J)V
       8: return

  void incrementTotalCount();
    Code:
       0: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.incrementAndGet:(Ljava/lang/Object;)J
       7: pop2
       8: return

  void addToTotalCount(long);
    Code:
       0: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: lload_1
       5: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
       8: pop2
       9: return

  int _getEstimatedFootprintInBytes();
    Code:
       0: aload_0
       1: getfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #4                  // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: sipush        128
      10: aload_0
      11: getfield      #7                  // Field activeCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      14: invokeinterface #23,  1           // InterfaceMethod org/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset.getEstimatedFootprintInBytes:()I
      19: iadd
      20: aload_0
      21: getfield      #11                 // Field inactiveCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      24: invokeinterface #23,  1           // InterfaceMethod org/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset.getEstimatedFootprintInBytes:()I
      29: iadd
      30: istore_1
      31: aload_0
      32: getfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
      35: invokevirtual #15                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      38: iload_1
      39: ireturn
      40: astore_2
      41: aload_0
      42: getfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
      45: invokevirtual #15                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      48: aload_2
      49: athrow
    Exception table:
       from    to  target type
           0    31    40   any

  public org.HdrHistogram.PackedConcurrentHistogram(int);
    Code:
       0: aload_0
       1: lconst_1
       2: ldc2_w        #24                 // long 2l
       5: iload_1
       6: invokespecial #26                 // Method "<init>":(JJI)V
       9: aload_0
      10: iconst_1
      11: invokevirtual #27                 // Method setAutoResize:(Z)V
      14: return

  public org.HdrHistogram.PackedConcurrentHistogram(long, int);
    Code:
       0: aload_0
       1: lconst_1
       2: lload_1
       3: iload_3
       4: invokespecial #26                 // Method "<init>":(JJI)V
       7: return

  public org.HdrHistogram.PackedConcurrentHistogram(long, long, int);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: iload         5
       5: iconst_1
       6: invokespecial #28                 // Method "<init>":(JJIZ)V
       9: return

  public org.HdrHistogram.PackedConcurrentHistogram(org.HdrHistogram.AbstractHistogram);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokespecial #29                 // Method "<init>":(Lorg/HdrHistogram/AbstractHistogram;Z)V
       6: return

  org.HdrHistogram.PackedConcurrentHistogram(org.HdrHistogram.AbstractHistogram, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #30                 // Method org/HdrHistogram/ConcurrentHistogram."<init>":(Lorg/HdrHistogram/AbstractHistogram;Z)V
       6: iload_2
       7: ifeq          42
      10: aload_0
      11: new           #1                  // class org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset
      14: dup
      15: aload_0
      16: getfield      #6                  // Field countsArrayLength:I
      19: iconst_0
      20: invokespecial #2                  // Method org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset."<init>":(II)V
      23: putfield      #7                  // Field activeCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      26: aload_0
      27: new           #1                  // class org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset
      30: dup
      31: aload_0
      32: getfield      #6                  // Field countsArrayLength:I
      35: iconst_0
      36: invokespecial #2                  // Method org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset."<init>":(II)V
      39: putfield      #11                 // Field inactiveCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      42: aload_0
      43: bipush        8
      45: putfield      #31                 // Field wordSizeInBytes:I
      48: return

  org.HdrHistogram.PackedConcurrentHistogram(long, long, int, boolean);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: iload         5
       5: iconst_0
       6: invokespecial #32                 // Method org/HdrHistogram/ConcurrentHistogram."<init>":(JJIZ)V
       9: iload         6
      11: ifeq          46
      14: aload_0
      15: new           #1                  // class org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset
      18: dup
      19: aload_0
      20: getfield      #6                  // Field countsArrayLength:I
      23: iconst_0
      24: invokespecial #2                  // Method org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset."<init>":(II)V
      27: putfield      #7                  // Field activeCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      30: aload_0
      31: new           #1                  // class org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset
      34: dup
      35: aload_0
      36: getfield      #6                  // Field countsArrayLength:I
      39: iconst_0
      40: invokespecial #2                  // Method org/HdrHistogram/PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset."<init>":(II)V
      43: putfield      #11                 // Field inactiveCounts:Lorg/HdrHistogram/ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset;
      46: aload_0
      47: bipush        8
      49: putfield      #31                 // Field wordSizeInBytes:I
      52: return

  public static org.HdrHistogram.PackedConcurrentHistogram decodeFromByteBuffer(java.nio.ByteBuffer, long);
    Code:
       0: aload_0
       1: ldc           #16                 // class org/HdrHistogram/PackedConcurrentHistogram
       3: lload_1
       4: invokestatic  #33                 // Method decodeFromByteBuffer:(Ljava/nio/ByteBuffer;Ljava/lang/Class;J)Lorg/HdrHistogram/AbstractHistogram;
       7: checkcast     #16                 // class org/HdrHistogram/PackedConcurrentHistogram
      10: areturn

  public static org.HdrHistogram.PackedConcurrentHistogram decodeFromCompressedByteBuffer(java.nio.ByteBuffer, long) throws java.util.zip.DataFormatException;
    Code:
       0: aload_0
       1: ldc           #16                 // class org/HdrHistogram/PackedConcurrentHistogram
       3: lload_1
       4: invokestatic  #34                 // Method decodeFromCompressedByteBuffer:(Ljava/nio/ByteBuffer;Ljava/lang/Class;J)Lorg/HdrHistogram/AbstractHistogram;
       7: checkcast     #16                 // class org/HdrHistogram/PackedConcurrentHistogram
      10: areturn

  public static org.HdrHistogram.PackedConcurrentHistogram fromString(java.lang.String) throws java.util.zip.DataFormatException;
    Code:
       0: aload_0
       1: invokestatic  #35                 // Method org/HdrHistogram/Base64Helper.parseBase64Binary:(Ljava/lang/String;)[B
       4: invokestatic  #36                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
       7: lconst_0
       8: invokestatic  #37                 // Method decodeFromCompressedByteBuffer:(Ljava/nio/ByteBuffer;J)Lorg/HdrHistogram/PackedConcurrentHistogram;
      11: areturn

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_0
       5: new           #39                 // class org/HdrHistogram/WriterReaderPhaser
       8: dup
       9: invokespecial #40                 // Method org/HdrHistogram/WriterReaderPhaser."<init>":()V
      12: putfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
      15: return

  synchronized void fillBufferFromCountsArray(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #4                  // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: aload_0
       8: aload_1
       9: invokespecial #41                 // Method org/HdrHistogram/ConcurrentHistogram.fillBufferFromCountsArray:(Ljava/nio/ByteBuffer;)V
      12: aload_0
      13: getfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
      16: invokevirtual #15                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      19: goto          32
      22: astore_2
      23: aload_0
      24: getfield      #3                  // Field wrp:Lorg/HdrHistogram/WriterReaderPhaser;
      27: invokevirtual #15                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      30: aload_2
      31: athrow
      32: return
    Exception table:
       from    to  target type
           0    12    22   any

  public org.HdrHistogram.ConcurrentHistogram copyCorrectedForCoordinatedOmission(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #42                 // Method copyCorrectedForCoordinatedOmission:(J)Lorg/HdrHistogram/PackedConcurrentHistogram;
       5: areturn

  public org.HdrHistogram.ConcurrentHistogram copy();
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method copy:()Lorg/HdrHistogram/PackedConcurrentHistogram;
       4: areturn

  public org.HdrHistogram.Histogram copyCorrectedForCoordinatedOmission(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #42                 // Method copyCorrectedForCoordinatedOmission:(J)Lorg/HdrHistogram/PackedConcurrentHistogram;
       5: areturn

  public org.HdrHistogram.Histogram copy();
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method copy:()Lorg/HdrHistogram/PackedConcurrentHistogram;
       4: areturn

  public org.HdrHistogram.AbstractHistogram copyCorrectedForCoordinatedOmission(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #42                 // Method copyCorrectedForCoordinatedOmission:(J)Lorg/HdrHistogram/PackedConcurrentHistogram;
       5: areturn

  public org.HdrHistogram.AbstractHistogram copy();
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method copy:()Lorg/HdrHistogram/PackedConcurrentHistogram;
       4: areturn

  static {};
    Code:
       0: ldc           #16                 // class org/HdrHistogram/PackedConcurrentHistogram
       2: invokevirtual #44                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #5                  // Field $assertionsDisabled:Z
      16: return
}
