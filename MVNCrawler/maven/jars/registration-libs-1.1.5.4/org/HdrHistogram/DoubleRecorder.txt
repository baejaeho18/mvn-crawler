Compiled from "DoubleRecorder.java"
public class org.HdrHistogram.DoubleRecorder implements org.HdrHistogram.DoubleValueRecorder {
  private static java.util.concurrent.atomic.AtomicLong instanceIdSequencer;

  private final long instanceId;

  private final org.HdrHistogram.WriterReaderPhaser recordingPhaser;

  private volatile org.HdrHistogram.ConcurrentDoubleHistogram activeHistogram;

  private org.HdrHistogram.ConcurrentDoubleHistogram inactiveHistogram;

  public org.HdrHistogram.DoubleRecorder(int, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field instanceIdSequencer:Ljava/util/concurrent/atomic/AtomicLong;
       8: invokevirtual #3                  // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
      11: putfield      #4                  // Field instanceId:J
      14: aload_0
      15: new           #5                  // class org/HdrHistogram/WriterReaderPhaser
      18: dup
      19: invokespecial #6                  // Method org/HdrHistogram/WriterReaderPhaser."<init>":()V
      22: putfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      25: aload_0
      26: iload_2
      27: ifeq          46
      30: new           #8                  // class org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram
      33: dup
      34: aload_0
      35: getfield      #4                  // Field instanceId:J
      38: iload_1
      39: aconst_null
      40: invokespecial #9                  // Method org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram."<init>":(JILorg/HdrHistogram/DoubleRecorder$1;)V
      43: goto          59
      46: new           #10                 // class org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram
      49: dup
      50: aload_0
      51: getfield      #4                  // Field instanceId:J
      54: iload_1
      55: aconst_null
      56: invokespecial #11                 // Method org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram."<init>":(JILorg/HdrHistogram/DoubleRecorder$1;)V
      59: putfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      62: aload_0
      63: aconst_null
      64: putfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      67: aload_0
      68: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      71: invokestatic  #14                 // Method java/lang/System.currentTimeMillis:()J
      74: invokevirtual #15                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.setStartTimeStamp:(J)V
      77: return

  public org.HdrHistogram.DoubleRecorder(int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokespecial #16                 // Method "<init>":(IZ)V
       6: return

  public org.HdrHistogram.DoubleRecorder(long, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field instanceIdSequencer:Ljava/util/concurrent/atomic/AtomicLong;
       8: invokevirtual #3                  // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
      11: putfield      #4                  // Field instanceId:J
      14: aload_0
      15: new           #5                  // class org/HdrHistogram/WriterReaderPhaser
      18: dup
      19: invokespecial #6                  // Method org/HdrHistogram/WriterReaderPhaser."<init>":()V
      22: putfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      25: aload_0
      26: new           #10                 // class org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram
      29: dup
      30: aload_0
      31: getfield      #4                  // Field instanceId:J
      34: lload_1
      35: iload_3
      36: aconst_null
      37: invokespecial #17                 // Method org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram."<init>":(JJILorg/HdrHistogram/DoubleRecorder$1;)V
      40: putfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      43: aload_0
      44: aconst_null
      45: putfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      48: aload_0
      49: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      52: invokestatic  #14                 // Method java/lang/System.currentTimeMillis:()J
      55: invokevirtual #15                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.setStartTimeStamp:(J)V
      58: return

  public void recordValue(double);
    Code:
       0: aload_0
       1: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #18                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionEnter:()J
       7: lstore_3
       8: aload_0
       9: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      12: dload_1
      13: invokevirtual #19                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.recordValue:(D)V
      16: aload_0
      17: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      20: lload_3
      21: invokevirtual #20                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      24: goto          40
      27: astore        5
      29: aload_0
      30: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      33: lload_3
      34: invokevirtual #20                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      37: aload         5
      39: athrow
      40: return
    Exception table:
       from    to  target type
           8    16    27   any
          27    29    27   any

  public void recordValueWithCount(double, long) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #18                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionEnter:()J
       7: lstore        5
       9: aload_0
      10: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      13: dload_1
      14: lload_3
      15: invokevirtual #21                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.recordValueWithCount:(DJ)V
      18: aload_0
      19: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      22: lload         5
      24: invokevirtual #20                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      27: goto          44
      30: astore        7
      32: aload_0
      33: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      36: lload         5
      38: invokevirtual #20                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      41: aload         7
      43: athrow
      44: return
    Exception table:
       from    to  target type
           9    18    30   any
          30    32    30   any

  public void recordValueWithExpectedInterval(double, double) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #18                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionEnter:()J
       7: lstore        5
       9: aload_0
      10: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      13: dload_1
      14: dload_3
      15: invokevirtual #22                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.recordValueWithExpectedInterval:(DD)V
      18: aload_0
      19: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      22: lload         5
      24: invokevirtual #20                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      27: goto          44
      30: astore        7
      32: aload_0
      33: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      36: lload         5
      38: invokevirtual #20                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      41: aload         7
      43: athrow
      44: return
    Exception table:
       from    to  target type
           9    18    30   any
          30    32    30   any

  public synchronized org.HdrHistogram.DoubleHistogram getIntervalHistogram();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #23                 // Method getIntervalHistogram:(Lorg/HdrHistogram/DoubleHistogram;)Lorg/HdrHistogram/DoubleHistogram;
       5: areturn

  public synchronized org.HdrHistogram.DoubleHistogram getIntervalHistogram(org.HdrHistogram.DoubleHistogram);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #24                 // Method getIntervalHistogram:(Lorg/HdrHistogram/DoubleHistogram;Z)Lorg/HdrHistogram/DoubleHistogram;
       6: areturn

  public synchronized org.HdrHistogram.DoubleHistogram getIntervalHistogram(org.HdrHistogram.DoubleHistogram, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #25                 // Method validateFitAsReplacementHistogram:(Lorg/HdrHistogram/DoubleHistogram;Z)V
       6: aload_0
       7: aload_1
       8: checkcast     #26                 // class org/HdrHistogram/ConcurrentDoubleHistogram
      11: putfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      14: aload_0
      15: invokespecial #27                 // Method performIntervalSample:()V
      18: aload_0
      19: getfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      22: astore_3
      23: aload_0
      24: aconst_null
      25: putfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      28: aload_3
      29: areturn

  public synchronized void getIntervalHistogramInto(org.HdrHistogram.DoubleHistogram);
    Code:
       0: aload_0
       1: invokespecial #27                 // Method performIntervalSample:()V
       4: aload_0
       5: getfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
       8: aload_1
       9: invokevirtual #28                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.copyInto:(Lorg/HdrHistogram/DoubleHistogram;)V
      12: return

  public synchronized void reset();
    Code:
       0: aload_0
       1: invokespecial #27                 // Method performIntervalSample:()V
       4: aload_0
       5: invokespecial #27                 // Method performIntervalSample:()V
       8: return

  private void performIntervalSample();
    Code:
       0: aload_0
       1: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #29                 // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: aload_0
       8: getfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      11: ifnonnull     92
      14: aload_0
      15: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      18: instanceof    #10                 // class org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram
      21: ifeq          46
      24: aload_0
      25: new           #10                 // class org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram
      28: dup
      29: aload_0
      30: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      33: checkcast     #10                 // class org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram
      36: aconst_null
      37: invokespecial #30                 // Method org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram."<init>":(Lorg/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram;Lorg/HdrHistogram/DoubleRecorder$1;)V
      40: putfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      43: goto          92
      46: aload_0
      47: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      50: instanceof    #8                  // class org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram
      53: ifeq          82
      56: aload_0
      57: new           #8                  // class org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram
      60: dup
      61: aload_0
      62: getfield      #4                  // Field instanceId:J
      65: aload_0
      66: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      69: invokevirtual #31                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.getNumberOfSignificantValueDigits:()I
      72: aconst_null
      73: invokespecial #9                  // Method org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram."<init>":(JILorg/HdrHistogram/DoubleRecorder$1;)V
      76: putfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      79: goto          92
      82: new           #32                 // class java/lang/IllegalStateException
      85: dup
      86: ldc           #33                 // String Unexpected internal histogram type for activeHistogram
      88: invokespecial #34                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      91: athrow
      92: aload_0
      93: getfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      96: invokevirtual #35                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.reset:()V
      99: aload_0
     100: getfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
     103: astore_1
     104: aload_0
     105: aload_0
     106: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
     109: putfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
     112: aload_0
     113: aload_1
     114: putfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
     117: invokestatic  #14                 // Method java/lang/System.currentTimeMillis:()J
     120: lstore_2
     121: aload_0
     122: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
     125: lload_2
     126: invokevirtual #15                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.setStartTimeStamp:(J)V
     129: aload_0
     130: getfield      #13                 // Field inactiveHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
     133: lload_2
     134: invokevirtual #36                 // Method org/HdrHistogram/ConcurrentDoubleHistogram.setEndTimeStamp:(J)V
     137: aload_0
     138: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
     141: ldc2_w        #37                 // long 500000l
     144: invokevirtual #39                 // Method org/HdrHistogram/WriterReaderPhaser.flipPhase:(J)V
     147: aload_0
     148: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
     151: invokevirtual #40                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
     154: goto          169
     157: astore        4
     159: aload_0
     160: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
     163: invokevirtual #40                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
     166: aload         4
     168: athrow
     169: return
    Exception table:
       from    to  target type
           0   147   157   any
         157   159   157   any

  private void validateFitAsReplacementHistogram(org.HdrHistogram.DoubleHistogram, boolean);
    Code:
       0: iconst_1
       1: istore_3
       2: aload_1
       3: ifnonnull     11
       6: iconst_0
       7: istore_3
       8: goto          82
      11: aload_1
      12: instanceof    #10                 // class org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram
      15: ifeq          48
      18: iload_2
      19: ifeq          43
      22: aload_1
      23: checkcast     #10                 // class org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram
      26: invokestatic  #41                 // Method org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram.access$400:(Lorg/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram;)J
      29: aload_0
      30: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      33: checkcast     #10                 // class org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram
      36: invokestatic  #41                 // Method org/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram.access$400:(Lorg/HdrHistogram/DoubleRecorder$InternalConcurrentDoubleHistogram;)J
      39: lcmp
      40: ifne          48
      43: iconst_0
      44: istore_3
      45: goto          82
      48: aload_1
      49: instanceof    #8                  // class org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram
      52: ifeq          82
      55: iload_2
      56: ifeq          80
      59: aload_1
      60: checkcast     #8                  // class org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram
      63: invokestatic  #42                 // Method org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram.access$500:(Lorg/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram;)J
      66: aload_0
      67: getfield      #12                 // Field activeHistogram:Lorg/HdrHistogram/ConcurrentDoubleHistogram;
      70: checkcast     #8                  // class org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram
      73: invokestatic  #42                 // Method org/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram.access$500:(Lorg/HdrHistogram/DoubleRecorder$PackedInternalConcurrentDoubleHistogram;)J
      76: lcmp
      77: ifne          82
      80: iconst_0
      81: istore_3
      82: iload_3
      83: ifeq          124
      86: new           #43                 // class java/lang/IllegalArgumentException
      89: dup
      90: new           #44                 // class java/lang/StringBuilder
      93: dup
      94: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      97: ldc           #46                 // String replacement histogram must have been obtained via a previous getIntervalHistogram() call from this
      99: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     102: aload_0
     103: invokevirtual #48                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     106: invokevirtual #49                 // Method java/lang/Class.getName:()Ljava/lang/String;
     109: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: ldc           #50                 // String  instance
     114: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: invokevirtual #51                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     120: invokespecial #52                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     123: athrow
     124: return

  static {};
    Code:
       0: new           #53                 // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: lconst_1
       5: invokespecial #54                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
       8: putstatic     #2                  // Field instanceIdSequencer:Ljava/util/concurrent/atomic/AtomicLong;
      11: return
}
