Compiled from "ShortCountsHistogram.java"
public class org.HdrHistogram.ShortCountsHistogram extends org.HdrHistogram.AbstractHistogram {
  long totalCount;

  short[] counts;

  int normalizingIndexOffset;

  long getCountAtIndex(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field counts:[S
       4: aload_0
       5: iload_1
       6: aload_0
       7: getfield      #2                  // Field normalizingIndexOffset:I
      10: aload_0
      11: getfield      #3                  // Field countsArrayLength:I
      14: invokevirtual #4                  // Method normalizeIndex:(III)I
      17: saload
      18: i2l
      19: lreturn

  long getCountAtNormalizedIndex(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field counts:[S
       4: iload_1
       5: saload
       6: i2l
       7: lreturn

  void incrementCountAtIndex(int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_0
       3: getfield      #2                  // Field normalizingIndexOffset:I
       6: aload_0
       7: getfield      #3                  // Field countsArrayLength:I
      10: invokevirtual #4                  // Method normalizeIndex:(III)I
      13: istore_2
      14: aload_0
      15: getfield      #1                  // Field counts:[S
      18: iload_2
      19: saload
      20: istore_3
      21: iload_3
      22: iconst_1
      23: iadd
      24: i2s
      25: istore        4
      27: iload         4
      29: ifge          42
      32: new           #5                  // class java/lang/IllegalStateException
      35: dup
      36: ldc           #6                  // String would overflow short integer count
      38: invokespecial #7                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_0
      43: getfield      #1                  // Field counts:[S
      46: iload_2
      47: iload         4
      49: sastore
      50: return

  void addToCountAtIndex(int, long);
    Code:
       0: aload_0
       1: iload_1
       2: aload_0
       3: getfield      #2                  // Field normalizingIndexOffset:I
       6: aload_0
       7: getfield      #3                  // Field countsArrayLength:I
      10: invokevirtual #4                  // Method normalizeIndex:(III)I
      13: istore        4
      15: aload_0
      16: getfield      #1                  // Field counts:[S
      19: iload         4
      21: saload
      22: i2l
      23: lstore        5
      25: lload         5
      27: lload_2
      28: ladd
      29: lstore        7
      31: lload         7
      33: ldc2_w        #9                  // long -32768l
      36: lcmp
      37: iflt          49
      40: lload         7
      42: ldc2_w        #11                 // long 32767l
      45: lcmp
      46: ifle          59
      49: new           #5                  // class java/lang/IllegalStateException
      52: dup
      53: ldc           #6                  // String would overflow short integer count
      55: invokespecial #7                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      58: athrow
      59: aload_0
      60: getfield      #1                  // Field counts:[S
      63: iload         4
      65: lload         7
      67: l2i
      68: i2s
      69: sastore
      70: return

  void setCountAtIndex(int, long);
    Code:
       0: aload_0
       1: aload_0
       2: iload_1
       3: aload_0
       4: getfield      #2                  // Field normalizingIndexOffset:I
       7: aload_0
       8: getfield      #3                  // Field countsArrayLength:I
      11: invokevirtual #4                  // Method normalizeIndex:(III)I
      14: lload_2
      15: invokevirtual #13                 // Method setCountAtNormalizedIndex:(IJ)V
      18: return

  void setCountAtNormalizedIndex(int, long);
    Code:
       0: lload_2
       1: lconst_0
       2: lcmp
       3: iflt          14
       6: lload_2
       7: ldc2_w        #11                 // long 32767l
      10: lcmp
      11: ifle          24
      14: new           #5                  // class java/lang/IllegalStateException
      17: dup
      18: ldc           #6                  // String would overflow short integer count
      20: invokespecial #7                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: getfield      #1                  // Field counts:[S
      28: iload_1
      29: lload_2
      30: l2i
      31: i2s
      32: sastore
      33: return

  int getNormalizingIndexOffset();
    Code:
       0: aload_0
       1: getfield      #2                  // Field normalizingIndexOffset:I
       4: ireturn

  void setNormalizingIndexOffset(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field normalizingIndexOffset:I
       5: return

  void setIntegerToDoubleValueConversionRatio(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #14                 // Method nonConcurrentSetIntegerToDoubleValueConversionRatio:(D)V
       5: return

  void shiftNormalizingIndexByOffset(int, boolean, double);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #15                 // Method nonConcurrentNormalizingIndexShift:(IZ)V
       6: return

  void clearCounts();
    Code:
       0: aload_0
       1: getfield      #1                  // Field counts:[S
       4: iconst_0
       5: invokestatic  #16                 // Method java/util/Arrays.fill:([SS)V
       8: aload_0
       9: lconst_0
      10: putfield      #17                 // Field totalCount:J
      13: return

  public org.HdrHistogram.ShortCountsHistogram copy();
    Code:
       0: new           #18                 // class org/HdrHistogram/ShortCountsHistogram
       3: dup
       4: aload_0
       5: invokespecial #19                 // Method "<init>":(Lorg/HdrHistogram/AbstractHistogram;)V
       8: astore_1
       9: aload_1
      10: aload_0
      11: invokevirtual #20                 // Method add:(Lorg/HdrHistogram/AbstractHistogram;)V
      14: aload_1
      15: areturn

  public org.HdrHistogram.ShortCountsHistogram copyCorrectedForCoordinatedOmission(long);
    Code:
       0: new           #18                 // class org/HdrHistogram/ShortCountsHistogram
       3: dup
       4: aload_0
       5: invokespecial #19                 // Method "<init>":(Lorg/HdrHistogram/AbstractHistogram;)V
       8: astore_3
       9: aload_3
      10: aload_0
      11: lload_1
      12: invokevirtual #21                 // Method addWhileCorrectingForCoordinatedOmission:(Lorg/HdrHistogram/AbstractHistogram;J)V
      15: aload_3
      16: areturn

  public long getTotalCount();
    Code:
       0: aload_0
       1: getfield      #17                 // Field totalCount:J
       4: lreturn

  void setTotalCount(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #17                 // Field totalCount:J
       5: return

  void incrementTotalCount();
    Code:
       0: aload_0
       1: dup
       2: getfield      #17                 // Field totalCount:J
       5: lconst_1
       6: ladd
       7: putfield      #17                 // Field totalCount:J
      10: return

  void addToTotalCount(long);
    Code:
       0: aload_0
       1: dup
       2: getfield      #17                 // Field totalCount:J
       5: lload_1
       6: ladd
       7: putfield      #17                 // Field totalCount:J
      10: return

  int _getEstimatedFootprintInBytes();
    Code:
       0: sipush        512
       3: iconst_2
       4: aload_0
       5: getfield      #1                  // Field counts:[S
       8: arraylength
       9: imul
      10: iadd
      11: ireturn

  void resize(long);
    Code:
       0: aload_0
       1: iconst_0
       2: aload_0
       3: getfield      #2                  // Field normalizingIndexOffset:I
       6: aload_0
       7: getfield      #3                  // Field countsArrayLength:I
      10: invokevirtual #4                  // Method normalizeIndex:(III)I
      13: istore_3
      14: aload_0
      15: lload_1
      16: invokevirtual #22                 // Method establishSize:(J)V
      19: aload_0
      20: getfield      #3                  // Field countsArrayLength:I
      23: aload_0
      24: getfield      #1                  // Field counts:[S
      27: arraylength
      28: isub
      29: istore        4
      31: aload_0
      32: aload_0
      33: getfield      #1                  // Field counts:[S
      36: aload_0
      37: getfield      #3                  // Field countsArrayLength:I
      40: invokestatic  #23                 // Method java/util/Arrays.copyOf:([SI)[S
      43: putfield      #1                  // Field counts:[S
      46: iload_3
      47: ifeq          94
      50: iload_3
      51: iload         4
      53: iadd
      54: istore        5
      56: aload_0
      57: getfield      #3                  // Field countsArrayLength:I
      60: iload         4
      62: isub
      63: iload_3
      64: isub
      65: istore        6
      67: aload_0
      68: getfield      #1                  // Field counts:[S
      71: iload_3
      72: aload_0
      73: getfield      #1                  // Field counts:[S
      76: iload         5
      78: iload         6
      80: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      83: aload_0
      84: getfield      #1                  // Field counts:[S
      87: iload_3
      88: iload         5
      90: iconst_0
      91: invokestatic  #25                 // Method java/util/Arrays.fill:([SIIS)V
      94: return

  public org.HdrHistogram.ShortCountsHistogram(int);
    Code:
       0: aload_0
       1: lconst_1
       2: ldc2_w        #26                 // long 2l
       5: iload_1
       6: invokespecial #28                 // Method "<init>":(JJI)V
       9: aload_0
      10: iconst_1
      11: invokevirtual #29                 // Method setAutoResize:(Z)V
      14: return

  public org.HdrHistogram.ShortCountsHistogram(long, int);
    Code:
       0: aload_0
       1: lconst_1
       2: lload_1
       3: iload_3
       4: invokespecial #28                 // Method "<init>":(JJI)V
       7: return

  public org.HdrHistogram.ShortCountsHistogram(long, long, int);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: iload         5
       5: invokespecial #30                 // Method org/HdrHistogram/AbstractHistogram."<init>":(JJI)V
       8: aload_0
       9: aload_0
      10: getfield      #3                  // Field countsArrayLength:I
      13: newarray       short
      15: putfield      #1                  // Field counts:[S
      18: aload_0
      19: iconst_2
      20: putfield      #31                 // Field wordSizeInBytes:I
      23: return

  public org.HdrHistogram.ShortCountsHistogram(org.HdrHistogram.AbstractHistogram);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #32                 // Method org/HdrHistogram/AbstractHistogram."<init>":(Lorg/HdrHistogram/AbstractHistogram;)V
       5: aload_0
       6: aload_0
       7: getfield      #3                  // Field countsArrayLength:I
      10: newarray       short
      12: putfield      #1                  // Field counts:[S
      15: aload_0
      16: iconst_2
      17: putfield      #31                 // Field wordSizeInBytes:I
      20: return

  public static org.HdrHistogram.ShortCountsHistogram decodeFromByteBuffer(java.nio.ByteBuffer, long);
    Code:
       0: aload_0
       1: ldc           #18                 // class org/HdrHistogram/ShortCountsHistogram
       3: lload_1
       4: invokestatic  #33                 // Method decodeFromByteBuffer:(Ljava/nio/ByteBuffer;Ljava/lang/Class;J)Lorg/HdrHistogram/AbstractHistogram;
       7: checkcast     #18                 // class org/HdrHistogram/ShortCountsHistogram
      10: areturn

  public static org.HdrHistogram.ShortCountsHistogram decodeFromCompressedByteBuffer(java.nio.ByteBuffer, long) throws java.util.zip.DataFormatException;
    Code:
       0: aload_0
       1: ldc           #18                 // class org/HdrHistogram/ShortCountsHistogram
       3: lload_1
       4: invokestatic  #34                 // Method decodeFromCompressedByteBuffer:(Ljava/nio/ByteBuffer;Ljava/lang/Class;J)Lorg/HdrHistogram/AbstractHistogram;
       7: checkcast     #18                 // class org/HdrHistogram/ShortCountsHistogram
      10: areturn

  public static org.HdrHistogram.ShortCountsHistogram fromString(java.lang.String) throws java.util.zip.DataFormatException;
    Code:
       0: aload_0
       1: invokestatic  #35                 // Method org/HdrHistogram/Base64Helper.parseBase64Binary:(Ljava/lang/String;)[B
       4: invokestatic  #36                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
       7: lconst_0
       8: invokestatic  #37                 // Method decodeFromCompressedByteBuffer:(Ljava/nio/ByteBuffer;J)Lorg/HdrHistogram/ShortCountsHistogram;
      11: areturn

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: return

  public org.HdrHistogram.AbstractHistogram copyCorrectedForCoordinatedOmission(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #39                 // Method copyCorrectedForCoordinatedOmission:(J)Lorg/HdrHistogram/ShortCountsHistogram;
       5: areturn

  public org.HdrHistogram.AbstractHistogram copy();
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method copy:()Lorg/HdrHistogram/ShortCountsHistogram;
       4: areturn
}
