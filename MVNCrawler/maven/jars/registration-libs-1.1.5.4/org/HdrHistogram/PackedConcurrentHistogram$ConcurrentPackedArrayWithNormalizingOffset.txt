Compiled from "PackedConcurrentHistogram.java"
class org.HdrHistogram.PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset implements org.HdrHistogram.ConcurrentHistogram$ConcurrentArrayWithNormalizingOffset,java.io.Serializable {
  private org.HdrHistogram.packedarray.ConcurrentPackedLongArray packedCounts;

  private int normalizingIndexOffset;

  private double doubleToIntegerValueConversionRatio;

  org.HdrHistogram.PackedConcurrentHistogram$ConcurrentPackedArrayWithNormalizingOffset(int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/HdrHistogram/packedarray/ConcurrentPackedLongArray
       8: dup
       9: iload_1
      10: invokespecial #3                  // Method org/HdrHistogram/packedarray/ConcurrentPackedLongArray."<init>":(I)V
      13: putfield      #4                  // Field packedCounts:Lorg/HdrHistogram/packedarray/ConcurrentPackedLongArray;
      16: aload_0
      17: iload_2
      18: putfield      #5                  // Field normalizingIndexOffset:I
      21: return

  public int getNormalizingIndexOffset();
    Code:
       0: aload_0
       1: getfield      #5                  // Field normalizingIndexOffset:I
       4: ireturn

  public void setNormalizingIndexOffset(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field normalizingIndexOffset:I
       5: return

  public double getDoubleToIntegerValueConversionRatio();
    Code:
       0: aload_0
       1: getfield      #6                  // Field doubleToIntegerValueConversionRatio:D
       4: dreturn

  public void setDoubleToIntegerValueConversionRatio(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #6                  // Field doubleToIntegerValueConversionRatio:D
       5: return

  public long get(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field packedCounts:Lorg/HdrHistogram/packedarray/ConcurrentPackedLongArray;
       4: iload_1
       5: invokevirtual #7                  // Method org/HdrHistogram/packedarray/ConcurrentPackedLongArray.get:(I)J
       8: lreturn

  public void atomicIncrement(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field packedCounts:Lorg/HdrHistogram/packedarray/ConcurrentPackedLongArray;
       4: iload_1
       5: invokevirtual #8                  // Method org/HdrHistogram/packedarray/ConcurrentPackedLongArray.increment:(I)V
       8: return

  public void atomicAdd(int, long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field packedCounts:Lorg/HdrHistogram/packedarray/ConcurrentPackedLongArray;
       4: iload_1
       5: lload_2
       6: invokevirtual #9                  // Method org/HdrHistogram/packedarray/ConcurrentPackedLongArray.add:(IJ)V
       9: return

  public void lazySet(int, long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field packedCounts:Lorg/HdrHistogram/packedarray/ConcurrentPackedLongArray;
       4: iload_1
       5: lload_2
       6: invokevirtual #10                 // Method org/HdrHistogram/packedarray/ConcurrentPackedLongArray.set:(IJ)V
       9: return

  public int length();
    Code:
       0: aload_0
       1: getfield      #4                  // Field packedCounts:Lorg/HdrHistogram/packedarray/ConcurrentPackedLongArray;
       4: invokevirtual #11                 // Method org/HdrHistogram/packedarray/ConcurrentPackedLongArray.length:()I
       7: ireturn

  public int getEstimatedFootprintInBytes();
    Code:
       0: sipush        128
       3: bipush        8
       5: aload_0
       6: getfield      #4                  // Field packedCounts:Lorg/HdrHistogram/packedarray/ConcurrentPackedLongArray;
       9: invokevirtual #12                 // Method org/HdrHistogram/packedarray/ConcurrentPackedLongArray.getPhysicalLength:()I
      12: imul
      13: iadd
      14: ireturn
}
