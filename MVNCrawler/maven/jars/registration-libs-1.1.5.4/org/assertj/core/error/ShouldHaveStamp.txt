Compiled from "ShouldHaveStamp.java"
public class org.assertj.core.error.ShouldHaveStamp extends org.assertj.core.error.BasicErrorMessageFactory {
  private static final java.lang.String SHOULD_HAVE_STAMP;

  private org.assertj.core.error.ShouldHaveStamp(java.util.concurrent.atomic.AtomicStampedReference<?>, int);
    Code:
       0: aload_0
       1: ldc           #9                  // String %nExpecting%n  <%s>%nto have stamp:%n  <%s>%nbut had:%n  <%s>
       3: iconst_3
       4: anewarray     #13                 // class java/lang/Object
       7: dup
       8: iconst_0
       9: aload_1
      10: aastore
      11: dup
      12: iconst_1
      13: iload_2
      14: invokestatic  #19                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      17: aastore
      18: dup
      19: iconst_2
      20: aload_1
      21: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicStampedReference.getStamp:()I
      24: invokestatic  #19                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: aastore
      28: invokespecial #28                 // Method org/assertj/core/error/BasicErrorMessageFactory."<init>":(Ljava/lang/String;[Ljava/lang/Object;)V
      31: return

  public static org.assertj.core.error.ErrorMessageFactory shouldHaveStamp(java.util.concurrent.atomic.AtomicStampedReference<?>, int);
    Code:
       0: new           #2                  // class org/assertj/core/error/ShouldHaveStamp
       3: dup
       4: aload_0
       5: iload_1
       6: invokespecial #39                 // Method "<init>":(Ljava/util/concurrent/atomic/AtomicStampedReference;I)V
       9: areturn
}
