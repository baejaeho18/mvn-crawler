Compiled from "Longs.java"
public class org.assertj.core.internal.Longs extends org.assertj.core.internal.Numbers<java.lang.Long> {
  private static final org.assertj.core.internal.Longs INSTANCE;

  public static org.assertj.core.internal.Longs instance();
    Code:
       0: getstatic     #12                 // Field INSTANCE:Lorg/assertj/core/internal/Longs;
       3: areturn

  org.assertj.core.internal.Longs();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method org/assertj/core/internal/Numbers."<init>":()V
       4: return

  public org.assertj.core.internal.Longs(org.assertj.core.internal.ComparisonStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #21                 // Method org/assertj/core/internal/Numbers."<init>":(Lorg/assertj/core/internal/ComparisonStrategy;)V
       5: return

  protected java.lang.Long zero();
    Code:
       0: lconst_0
       1: invokestatic  #31                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       4: areturn

  protected java.lang.Long one();
    Code:
       0: lconst_1
       1: invokestatic  #31                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       4: areturn

  protected java.lang.Long absDiff(java.lang.Long, java.lang.Long);
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method java/lang/Long.longValue:()J
       4: aload_2
       5: invokevirtual #38                 // Method java/lang/Long.longValue:()J
       8: lsub
       9: invokestatic  #44                 // Method java/lang/Math.abs:(J)J
      12: invokestatic  #31                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      15: areturn

  protected boolean isGreaterThan(java.lang.Long, java.lang.Long);
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method java/lang/Long.longValue:()J
       4: aload_2
       5: invokevirtual #38                 // Method java/lang/Long.longValue:()J
       8: lcmp
       9: ifle          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  protected boolean isGreaterThan(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #27                 // class java/lang/Long
       5: aload_2
       6: checkcast     #27                 // class java/lang/Long
       9: invokevirtual #53                 // Method isGreaterThan:(Ljava/lang/Long;Ljava/lang/Long;)Z
      12: ireturn

  protected java.lang.Number absDiff(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #27                 // class java/lang/Long
       5: aload_2
       6: checkcast     #27                 // class java/lang/Long
       9: invokevirtual #56                 // Method absDiff:(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;
      12: areturn

  protected java.lang.Number one();
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method one:()Ljava/lang/Long;
       4: areturn

  protected java.lang.Number zero();
    Code:
       0: aload_0
       1: invokevirtual #61                 // Method zero:()Ljava/lang/Long;
       4: areturn

  static {};
    Code:
       0: new           #2                  // class org/assertj/core/internal/Longs
       3: dup
       4: invokespecial #63                 // Method "<init>":()V
       7: putstatic     #12                 // Field INSTANCE:Lorg/assertj/core/internal/Longs;
      10: return
}
