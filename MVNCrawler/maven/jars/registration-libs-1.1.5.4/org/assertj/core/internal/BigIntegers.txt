Compiled from "BigIntegers.java"
public class org.assertj.core.internal.BigIntegers extends org.assertj.core.internal.Numbers<java.math.BigInteger> {
  private static final org.assertj.core.internal.BigIntegers INSTANCE;

  public static org.assertj.core.internal.BigIntegers instance();
    Code:
       0: getstatic     #12                 // Field INSTANCE:Lorg/assertj/core/internal/BigIntegers;
       3: areturn

  org.assertj.core.internal.BigIntegers();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method org/assertj/core/internal/Numbers."<init>":()V
       4: return

  public org.assertj.core.internal.BigIntegers(org.assertj.core.internal.ComparisonStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #21                 // Method org/assertj/core/internal/Numbers."<init>":(Lorg/assertj/core/internal/ComparisonStrategy;)V
       5: return

  protected java.math.BigInteger zero();
    Code:
       0: getstatic     #31                 // Field java/math/BigInteger.ZERO:Ljava/math/BigInteger;
       3: areturn

  protected java.math.BigInteger one();
    Code:
       0: getstatic     #35                 // Field java/math/BigInteger.ONE:Ljava/math/BigInteger;
       3: areturn

  protected java.math.BigInteger absDiff(java.math.BigInteger, java.math.BigInteger);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #41                 // Method java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
       5: invokevirtual #44                 // Method java/math/BigInteger.abs:()Ljava/math/BigInteger;
       8: areturn

  protected boolean isGreaterThan(java.math.BigInteger, java.math.BigInteger);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #41                 // Method java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
       5: aload_0
       6: invokevirtual #50                 // Method zero:()Ljava/math/BigInteger;
       9: invokevirtual #54                 // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
      12: ifle          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  protected boolean isGreaterThan(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #27                 // class java/math/BigInteger
       5: aload_2
       6: checkcast     #27                 // class java/math/BigInteger
       9: invokevirtual #58                 // Method isGreaterThan:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Z
      12: ireturn

  protected java.lang.Number absDiff(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #27                 // class java/math/BigInteger
       5: aload_2
       6: checkcast     #27                 // class java/math/BigInteger
       9: invokevirtual #61                 // Method absDiff:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;
      12: areturn

  protected java.lang.Number one();
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method one:()Ljava/math/BigInteger;
       4: areturn

  protected java.lang.Number zero();
    Code:
       0: aload_0
       1: invokevirtual #50                 // Method zero:()Ljava/math/BigInteger;
       4: areturn

  static {};
    Code:
       0: new           #2                  // class org/assertj/core/internal/BigIntegers
       3: dup
       4: invokespecial #66                 // Method "<init>":()V
       7: putstatic     #12                 // Field INSTANCE:Lorg/assertj/core/internal/BigIntegers;
      10: return
}
