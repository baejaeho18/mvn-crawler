Compiled from "Integers.java"
public class org.assertj.core.internal.Integers extends org.assertj.core.internal.Numbers<java.lang.Integer> {
  private static final org.assertj.core.internal.Integers INSTANCE;

  public static org.assertj.core.internal.Integers instance();
    Code:
       0: getstatic     #12                 // Field INSTANCE:Lorg/assertj/core/internal/Integers;
       3: areturn

  org.assertj.core.internal.Integers();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method org/assertj/core/internal/Numbers."<init>":()V
       4: return

  public org.assertj.core.internal.Integers(org.assertj.core.internal.ComparisonStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #21                 // Method org/assertj/core/internal/Numbers."<init>":(Lorg/assertj/core/internal/ComparisonStrategy;)V
       5: return

  protected java.lang.Integer zero();
    Code:
       0: iconst_0
       1: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       4: areturn

  protected java.lang.Integer one();
    Code:
       0: iconst_1
       1: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       4: areturn

  protected java.lang.Integer absDiff(java.lang.Integer, java.lang.Integer);
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
       4: aload_2
       5: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
       8: isub
       9: invokestatic  #44                 // Method java/lang/Math.abs:(I)I
      12: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      15: areturn

  protected boolean isGreaterThan(java.lang.Integer, java.lang.Integer);
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
       4: aload_2
       5: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
       8: if_icmple     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  protected boolean isGreaterThan(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #27                 // class java/lang/Integer
       5: aload_2
       6: checkcast     #27                 // class java/lang/Integer
       9: invokevirtual #53                 // Method isGreaterThan:(Ljava/lang/Integer;Ljava/lang/Integer;)Z
      12: ireturn

  protected java.lang.Number absDiff(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #27                 // class java/lang/Integer
       5: aload_2
       6: checkcast     #27                 // class java/lang/Integer
       9: invokevirtual #56                 // Method absDiff:(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;
      12: areturn

  protected java.lang.Number one();
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method one:()Ljava/lang/Integer;
       4: areturn

  protected java.lang.Number zero();
    Code:
       0: aload_0
       1: invokevirtual #61                 // Method zero:()Ljava/lang/Integer;
       4: areturn

  static {};
    Code:
       0: new           #2                  // class org/assertj/core/internal/Integers
       3: dup
       4: invokespecial #63                 // Method "<init>":()V
       7: putstatic     #12                 // Field INSTANCE:Lorg/assertj/core/internal/Integers;
      10: return
}
