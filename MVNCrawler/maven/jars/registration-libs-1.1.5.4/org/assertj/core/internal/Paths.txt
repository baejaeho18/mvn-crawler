Compiled from "Paths.java"
public class org.assertj.core.internal.Paths {
  private static final java.lang.String FAILED_TO_RESOLVE_ARGUMENT_REAL_PATH;

  private static final java.lang.String FAILED_TO_RESOLVE_ACTUAL_REAL_PATH;

  public static final java.lang.String IOERROR_FORMAT;

  private static final org.assertj.core.internal.Paths INSTANCE;

  org.assertj.core.internal.Diff diff;

  org.assertj.core.internal.BinaryDiff binaryDiff;

  org.assertj.core.internal.Failures failures;

  private org.assertj.core.internal.NioFilesWrapper nioFilesWrapper;

  public static org.assertj.core.internal.Paths instance();
    Code:
       0: getstatic     #30                 // Field INSTANCE:Lorg/assertj/core/internal/Paths;
       3: areturn

  org.assertj.core.internal.Paths(org.assertj.core.internal.NioFilesWrapper);
    Code:
       0: aload_0
       1: invokespecial #35                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #37                 // class org/assertj/core/internal/Diff
       8: dup
       9: invokespecial #38                 // Method org/assertj/core/internal/Diff."<init>":()V
      12: putfield      #40                 // Field diff:Lorg/assertj/core/internal/Diff;
      15: aload_0
      16: new           #42                 // class org/assertj/core/internal/BinaryDiff
      19: dup
      20: invokespecial #43                 // Method org/assertj/core/internal/BinaryDiff."<init>":()V
      23: putfield      #45                 // Field binaryDiff:Lorg/assertj/core/internal/BinaryDiff;
      26: aload_0
      27: invokestatic  #50                 // Method org/assertj/core/internal/Failures.instance:()Lorg/assertj/core/internal/Failures;
      30: putfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      33: aload_0
      34: aload_1
      35: putfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
      38: return

  private org.assertj.core.internal.Paths();
    Code:
       0: aload_0
       1: invokestatic  #60                 // Method org/assertj/core/internal/NioFilesWrapper.instance:()Lorg/assertj/core/internal/NioFilesWrapper;
       4: invokespecial #62                 // Method "<init>":(Lorg/assertj/core/internal/NioFilesWrapper;)V
       7: return

  public void assertIsReadable(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #70                 // Method assertExists:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
      11: aload_0
      12: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
      15: aload_2
      16: invokevirtual #74                 // Method org/assertj/core/internal/NioFilesWrapper.isReadable:(Ljava/nio/file/Path;)Z
      19: ifne          35
      22: aload_0
      23: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      26: aload_1
      27: aload_2
      28: invokestatic  #80                 // Method org/assertj/core/error/ShouldBeReadable.shouldBeReadable:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      31: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      34: athrow
      35: return

  public void assertIsWritable(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #70                 // Method assertExists:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
      11: aload_0
      12: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
      15: aload_2
      16: invokevirtual #92                 // Method org/assertj/core/internal/NioFilesWrapper.isWritable:(Ljava/nio/file/Path;)Z
      19: ifne          35
      22: aload_0
      23: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      26: aload_1
      27: aload_2
      28: invokestatic  #97                 // Method org/assertj/core/error/ShouldBeWritable.shouldBeWritable:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      31: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      34: athrow
      35: return

  public void assertIsExecutable(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #70                 // Method assertExists:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
      11: aload_0
      12: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
      15: aload_2
      16: invokevirtual #101                // Method org/assertj/core/internal/NioFilesWrapper.isExecutable:(Ljava/nio/file/Path;)Z
      19: ifne          35
      22: aload_0
      23: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      26: aload_1
      27: aload_2
      28: invokestatic  #106                // Method org/assertj/core/error/ShouldBeExecutable.shouldBeExecutable:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      31: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      34: athrow
      35: return

  public void assertExists(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_0
       6: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
       9: aload_2
      10: iconst_0
      11: anewarray     #108                // class java/nio/file/LinkOption
      14: invokevirtual #112                // Method org/assertj/core/internal/NioFilesWrapper.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      17: ifne          33
      20: aload_0
      21: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      24: aload_1
      25: aload_2
      26: invokestatic  #117                // Method org/assertj/core/error/ShouldExist.shouldExist:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      29: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      32: athrow
      33: return

  public void assertExistsNoFollowLinks(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_0
       6: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
       9: aload_2
      10: iconst_1
      11: anewarray     #108                // class java/nio/file/LinkOption
      14: dup
      15: iconst_0
      16: getstatic     #122                // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      19: aastore
      20: invokevirtual #112                // Method org/assertj/core/internal/NioFilesWrapper.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      23: ifne          39
      26: aload_0
      27: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      30: aload_1
      31: aload_2
      32: invokestatic  #125                // Method org/assertj/core/error/ShouldExist.shouldExistNoFollowLinks:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      35: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      38: athrow
      39: return

  public void assertDoesNotExist(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_0
       6: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
       9: aload_2
      10: iconst_1
      11: anewarray     #108                // class java/nio/file/LinkOption
      14: dup
      15: iconst_0
      16: getstatic     #122                // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      19: aastore
      20: invokevirtual #129                // Method org/assertj/core/internal/NioFilesWrapper.notExists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      23: ifne          39
      26: aload_0
      27: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      30: aload_1
      31: aload_2
      32: invokestatic  #134                // Method org/assertj/core/error/ShouldNotExist.shouldNotExist:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      35: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      38: athrow
      39: return

  public void assertIsRegularFile(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #70                 // Method assertExists:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       6: aload_0
       7: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
      10: aload_2
      11: invokevirtual #138                // Method org/assertj/core/internal/NioFilesWrapper.isRegularFile:(Ljava/nio/file/Path;)Z
      14: ifne          30
      17: aload_0
      18: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      21: aload_1
      22: aload_2
      23: invokestatic  #143                // Method org/assertj/core/error/ShouldBeRegularFile.shouldBeRegularFile:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      26: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      29: athrow
      30: return

  public void assertIsDirectory(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #70                 // Method assertExists:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       6: aload_0
       7: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
      10: aload_2
      11: invokevirtual #147                // Method org/assertj/core/internal/NioFilesWrapper.isDirectory:(Ljava/nio/file/Path;)Z
      14: ifne          30
      17: aload_0
      18: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      21: aload_1
      22: aload_2
      23: invokestatic  #152                // Method org/assertj/core/error/ShouldBeDirectory.shouldBeDirectory:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      26: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      29: athrow
      30: return

  public void assertIsSymbolicLink(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #155                // Method assertExistsNoFollowLinks:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       6: aload_0
       7: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
      10: aload_2
      11: invokevirtual #158                // Method org/assertj/core/internal/NioFilesWrapper.isSymbolicLink:(Ljava/nio/file/Path;)Z
      14: ifne          30
      17: aload_0
      18: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      21: aload_1
      22: aload_2
      23: invokestatic  #163                // Method org/assertj/core/error/ShouldBeSymbolicLink.shouldBeSymbolicLink:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      26: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      29: athrow
      30: return

  public void assertIsAbsolute(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_2
       6: invokeinterface #170,  1          // InterfaceMethod java/nio/file/Path.isAbsolute:()Z
      11: ifne          27
      14: aload_0
      15: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      18: aload_1
      19: aload_2
      20: invokestatic  #175                // Method org/assertj/core/error/ShouldBeAbsolutePath.shouldBeAbsolutePath:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      23: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      26: athrow
      27: return

  public void assertIsRelative(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_2
       6: invokeinterface #170,  1          // InterfaceMethod java/nio/file/Path.isAbsolute:()Z
      11: ifeq          27
      14: aload_0
      15: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      18: aload_1
      19: aload_2
      20: invokestatic  #181                // Method org/assertj/core/error/ShouldBeRelativePath.shouldBeRelativePath:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      23: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      26: athrow
      27: return

  public void assertIsNormalized(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_2
       6: invokeinterface #186,  1          // InterfaceMethod java/nio/file/Path.normalize:()Ljava/nio/file/Path;
      11: aload_2
      12: invokeinterface #190,  2          // InterfaceMethod java/nio/file/Path.equals:(Ljava/lang/Object;)Z
      17: ifne          33
      20: aload_0
      21: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      24: aload_1
      25: aload_2
      26: invokestatic  #195                // Method org/assertj/core/error/ShouldBeNormalized.shouldBeNormalized:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      29: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      32: athrow
      33: return

  public void assertIsCanonical(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_2
       6: aload_2
       7: iconst_0
       8: anewarray     #108                // class java/nio/file/LinkOption
      11: invokeinterface #202,  2          // InterfaceMethod java/nio/file/Path.toRealPath:([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;
      16: invokeinterface #190,  2          // InterfaceMethod java/nio/file/Path.equals:(Ljava/lang/Object;)Z
      21: ifne          37
      24: aload_0
      25: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      28: aload_1
      29: aload_2
      30: invokestatic  #207                // Method org/assertj/core/error/ShouldBeCanonicalPath.shouldBeCanonicalPath:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      33: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      36: athrow
      37: goto          52
      40: astore_3
      41: new           #209                // class org/assertj/core/api/exception/PathsException
      44: dup
      45: ldc           #12                 // String failed to resolve actual real path
      47: aload_3
      48: invokespecial #212                // Method org/assertj/core/api/exception/PathsException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      51: athrow
      52: return
    Exception table:
       from    to  target type
           5    37    40   Class java/io/IOException

  public void assertHasParent(org.assertj.core.api.AssertionInfo, java.nio.file.Path, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_3
       6: invokestatic  #220                // Method checkExpectedParentPathIsNotNull:(Ljava/nio/file/Path;)V
       9: aload_2
      10: iconst_0
      11: anewarray     #108                // class java/nio/file/LinkOption
      14: invokeinterface #202,  2          // InterfaceMethod java/nio/file/Path.toRealPath:([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;
      19: astore        4
      21: goto          38
      24: astore        5
      26: new           #209                // class org/assertj/core/api/exception/PathsException
      29: dup
      30: ldc           #12                 // String failed to resolve actual real path
      32: aload         5
      34: invokespecial #212                // Method org/assertj/core/api/exception/PathsException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      37: athrow
      38: aload_3
      39: iconst_0
      40: anewarray     #108                // class java/nio/file/LinkOption
      43: invokeinterface #202,  2          // InterfaceMethod java/nio/file/Path.toRealPath:([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;
      48: astore        5
      50: goto          67
      53: astore        6
      55: new           #209                // class org/assertj/core/api/exception/PathsException
      58: dup
      59: ldc           #9                  // String failed to resolve argument real path
      61: aload         6
      63: invokespecial #212                // Method org/assertj/core/api/exception/PathsException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      66: athrow
      67: aload         4
      69: invokeinterface #223,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      74: astore        6
      76: aload         6
      78: ifnonnull     95
      81: aload_0
      82: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      85: aload_1
      86: aload_2
      87: aload_3
      88: invokestatic  #229                // Method org/assertj/core/error/ShouldHaveParent.shouldHaveParent:(Ljava/nio/file/Path;Ljava/nio/file/Path;)Lorg/assertj/core/error/ShouldHaveParent;
      91: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      94: athrow
      95: aload         6
      97: aload         5
      99: invokeinterface #190,  2          // InterfaceMethod java/nio/file/Path.equals:(Ljava/lang/Object;)Z
     104: ifne          123
     107: aload_0
     108: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
     111: aload_1
     112: aload_2
     113: aload         6
     115: aload_3
     116: invokestatic  #232                // Method org/assertj/core/error/ShouldHaveParent.shouldHaveParent:(Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;)Lorg/assertj/core/error/ShouldHaveParent;
     119: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
     122: athrow
     123: return
    Exception table:
       from    to  target type
           9    21    24   Class java/io/IOException
          38    50    53   Class java/io/IOException

  public void assertHasParentRaw(org.assertj.core.api.AssertionInfo, java.nio.file.Path, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_3
       6: invokestatic  #220                // Method checkExpectedParentPathIsNotNull:(Ljava/nio/file/Path;)V
       9: aload_2
      10: invokeinterface #223,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      15: astore        4
      17: aload         4
      19: ifnonnull     36
      22: aload_0
      23: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      26: aload_1
      27: aload_2
      28: aload_3
      29: invokestatic  #229                // Method org/assertj/core/error/ShouldHaveParent.shouldHaveParent:(Ljava/nio/file/Path;Ljava/nio/file/Path;)Lorg/assertj/core/error/ShouldHaveParent;
      32: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      35: athrow
      36: aload         4
      38: aload_3
      39: invokeinterface #190,  2          // InterfaceMethod java/nio/file/Path.equals:(Ljava/lang/Object;)Z
      44: ifne          63
      47: aload_0
      48: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      51: aload_1
      52: aload_2
      53: aload         4
      55: aload_3
      56: invokestatic  #232                // Method org/assertj/core/error/ShouldHaveParent.shouldHaveParent:(Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;)Lorg/assertj/core/error/ShouldHaveParent;
      59: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      62: athrow
      63: return

  public void assertHasNoParent(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_2
       6: iconst_0
       7: anewarray     #108                // class java/nio/file/LinkOption
      10: invokeinterface #202,  2          // InterfaceMethod java/nio/file/Path.toRealPath:([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;
      15: astore_3
      16: aload_3
      17: invokeinterface #223,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      22: ifnull        38
      25: aload_0
      26: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      29: aload_1
      30: aload_2
      31: invokestatic  #244                // Method org/assertj/core/error/ShouldHaveNoParent.shouldHaveNoParent:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ShouldHaveNoParent;
      34: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      37: athrow
      38: goto          53
      41: astore_3
      42: new           #209                // class org/assertj/core/api/exception/PathsException
      45: dup
      46: ldc           #12                 // String failed to resolve actual real path
      48: aload_3
      49: invokespecial #212                // Method org/assertj/core/api/exception/PathsException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      52: athrow
      53: return
    Exception table:
       from    to  target type
           5    38    41   Class java/io/IOException

  public void assertHasNoParentRaw(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_2
       6: invokeinterface #223,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      11: ifnull        27
      14: aload_0
      15: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      18: aload_1
      19: aload_2
      20: invokestatic  #244                // Method org/assertj/core/error/ShouldHaveNoParent.shouldHaveNoParent:(Ljava/nio/file/Path;)Lorg/assertj/core/error/ShouldHaveNoParent;
      23: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      26: athrow
      27: return

  public void assertStartsWith(org.assertj.core.api.AssertionInfo, java.nio.file.Path, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_3
       6: invokestatic  #249                // Method assertExpectedStartPathIsNotNull:(Ljava/nio/file/Path;)V
       9: aload_2
      10: iconst_0
      11: anewarray     #108                // class java/nio/file/LinkOption
      14: invokeinterface #202,  2          // InterfaceMethod java/nio/file/Path.toRealPath:([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;
      19: astore        4
      21: goto          38
      24: astore        5
      26: new           #209                // class org/assertj/core/api/exception/PathsException
      29: dup
      30: ldc           #12                 // String failed to resolve actual real path
      32: aload         5
      34: invokespecial #212                // Method org/assertj/core/api/exception/PathsException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      37: athrow
      38: aload_3
      39: iconst_0
      40: anewarray     #108                // class java/nio/file/LinkOption
      43: invokeinterface #202,  2          // InterfaceMethod java/nio/file/Path.toRealPath:([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;
      48: astore        5
      50: goto          67
      53: astore        6
      55: new           #209                // class org/assertj/core/api/exception/PathsException
      58: dup
      59: ldc           #9                  // String failed to resolve argument real path
      61: aload         6
      63: invokespecial #212                // Method org/assertj/core/api/exception/PathsException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      66: athrow
      67: aload         4
      69: aload         5
      71: invokeinterface #252,  2          // InterfaceMethod java/nio/file/Path.startsWith:(Ljava/nio/file/Path;)Z
      76: ifne          93
      79: aload_0
      80: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      83: aload_1
      84: aload_2
      85: aload_3
      86: invokestatic  #258                // Method org/assertj/core/error/ShouldStartWithPath.shouldStartWith:(Ljava/nio/file/Path;Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      89: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      92: athrow
      93: return
    Exception table:
       from    to  target type
           9    21    24   Class java/io/IOException
          38    50    53   Class java/io/IOException

  public void assertStartsWithRaw(org.assertj.core.api.AssertionInfo, java.nio.file.Path, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_3
       6: invokestatic  #249                // Method assertExpectedStartPathIsNotNull:(Ljava/nio/file/Path;)V
       9: aload_2
      10: aload_3
      11: invokeinterface #252,  2          // InterfaceMethod java/nio/file/Path.startsWith:(Ljava/nio/file/Path;)Z
      16: ifne          33
      19: aload_0
      20: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      23: aload_1
      24: aload_2
      25: aload_3
      26: invokestatic  #258                // Method org/assertj/core/error/ShouldStartWithPath.shouldStartWith:(Ljava/nio/file/Path;Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      29: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      32: athrow
      33: return

  public void assertEndsWith(org.assertj.core.api.AssertionInfo, java.nio.file.Path, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_3
       6: invokestatic  #266                // Method assertExpectedEndPathIsNotNull:(Ljava/nio/file/Path;)V
       9: aload_2
      10: iconst_0
      11: anewarray     #108                // class java/nio/file/LinkOption
      14: invokeinterface #202,  2          // InterfaceMethod java/nio/file/Path.toRealPath:([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;
      19: astore        4
      21: aload         4
      23: aload_3
      24: invokeinterface #186,  1          // InterfaceMethod java/nio/file/Path.normalize:()Ljava/nio/file/Path;
      29: invokeinterface #269,  2          // InterfaceMethod java/nio/file/Path.endsWith:(Ljava/nio/file/Path;)Z
      34: ifne          51
      37: aload_0
      38: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      41: aload_1
      42: aload_2
      43: aload_3
      44: invokestatic  #274                // Method org/assertj/core/error/ShouldEndWithPath.shouldEndWith:(Ljava/nio/file/Path;Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      47: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      50: athrow
      51: goto          68
      54: astore        4
      56: new           #209                // class org/assertj/core/api/exception/PathsException
      59: dup
      60: ldc           #12                 // String failed to resolve actual real path
      62: aload         4
      64: invokespecial #212                // Method org/assertj/core/api/exception/PathsException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      67: athrow
      68: return
    Exception table:
       from    to  target type
           9    51    54   Class java/io/IOException

  public void assertEndsWithRaw(org.assertj.core.api.AssertionInfo, java.nio.file.Path, java.nio.file.Path);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_3
       6: invokestatic  #266                // Method assertExpectedEndPathIsNotNull:(Ljava/nio/file/Path;)V
       9: aload_2
      10: aload_3
      11: invokeinterface #269,  2          // InterfaceMethod java/nio/file/Path.endsWith:(Ljava/nio/file/Path;)Z
      16: ifne          33
      19: aload_0
      20: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      23: aload_1
      24: aload_2
      25: aload_3
      26: invokestatic  #274                // Method org/assertj/core/error/ShouldEndWithPath.shouldEndWith:(Ljava/nio/file/Path;Ljava/nio/file/Path;)Lorg/assertj/core/error/ErrorMessageFactory;
      29: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      32: athrow
      33: return

  public void assertHasFileName(org.assertj.core.api.AssertionInfo, java.nio.file.Path, java.lang.String);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #67                 // Method assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
       5: aload_3
       6: ldc_w         #280                // String expected fileName should not be null
       9: invokestatic  #286                // Method org/assertj/core/util/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: pop
      13: aload_2
      14: invokeinterface #289,  1          // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;
      19: aload_3
      20: invokeinterface #292,  2          // InterfaceMethod java/nio/file/Path.endsWith:(Ljava/lang/String;)Z
      25: ifne          42
      28: aload_0
      29: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      32: aload_1
      33: aload_2
      34: aload_3
      35: invokestatic  #298                // Method org/assertj/core/error/ShouldHaveName.shouldHaveName:(Ljava/nio/file/Path;Ljava/lang/String;)Lorg/assertj/core/error/ShouldHaveName;
      38: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      41: athrow
      42: return

  private static void assertNotNull(org.assertj.core.api.AssertionInfo, java.nio.file.Path);
    Code:
       0: invokestatic  #304                // Method org/assertj/core/internal/Objects.instance:()Lorg/assertj/core/internal/Objects;
       3: aload_0
       4: aload_1
       5: invokevirtual #307                // Method org/assertj/core/internal/Objects.assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;)V
       8: return

  private static void checkExpectedParentPathIsNotNull(java.nio.file.Path);
    Code:
       0: aload_0
       1: ldc_w         #309                // String expected parent path should not be null
       4: invokestatic  #286                // Method org/assertj/core/util/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: return

  private static void assertExpectedStartPathIsNotNull(java.nio.file.Path);
    Code:
       0: aload_0
       1: ldc_w         #311                // String the expected start path should not be null
       4: invokestatic  #286                // Method org/assertj/core/util/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: return

  private static void assertExpectedEndPathIsNotNull(java.nio.file.Path);
    Code:
       0: aload_0
       1: ldc_w         #313                // String the expected end path should not be null
       4: invokestatic  #286                // Method org/assertj/core/util/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: return

  public void assertHasContent(org.assertj.core.api.AssertionInfo, java.nio.file.Path, java.lang.String, java.nio.charset.Charset);
    Code:
       0: aload_3
       1: ldc_w         #317                // String The text to compare to should not be null
       4: invokestatic  #286                // Method org/assertj/core/util/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokevirtual #319                // Method assertIsReadable:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
      14: aload_0
      15: getfield      #40                 // Field diff:Lorg/assertj/core/internal/Diff;
      18: aload_2
      19: aload_3
      20: aload         4
      22: invokevirtual #322                // Method org/assertj/core/internal/Diff.diff:(Ljava/nio/file/Path;Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/util/List;
      25: astore        5
      27: aload         5
      29: invokeinterface #327,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      34: ifeq          38
      37: return
      38: aload_0
      39: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      42: aload_1
      43: aload_2
      44: aload         4
      46: aload         5
      48: invokestatic  #333                // Method org/assertj/core/error/ShouldHaveContent.shouldHaveContent:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Ljava/util/List;)Lorg/assertj/core/error/ErrorMessageFactory;
      51: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      54: athrow
      55: astore        5
      57: new           #341                // class java/io/UncheckedIOException
      60: dup
      61: ldc_w         #343                // String Unable to verify text contents of path:<%s>
      64: iconst_1
      65: anewarray     #4                  // class java/lang/Object
      68: dup
      69: iconst_0
      70: aload_2
      71: aastore
      72: invokestatic  #347                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      75: aload         5
      77: invokespecial #350                // Method java/io/UncheckedIOException."<init>":(Ljava/lang/String;Ljava/io/IOException;)V
      80: athrow
    Exception table:
       from    to  target type
          14    37    55   Class java/io/IOException
          38    55    55   Class java/io/IOException

  public void assertHasBinaryContent(org.assertj.core.api.AssertionInfo, java.nio.file.Path, byte[]);
    Code:
       0: aload_3
       1: ldc_w         #359                // String The binary content to compare to should not be null
       4: invokestatic  #286                // Method org/assertj/core/util/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokevirtual #319                // Method assertIsReadable:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
      14: aload_0
      15: getfield      #45                 // Field binaryDiff:Lorg/assertj/core/internal/BinaryDiff;
      18: aload_2
      19: aload_3
      20: invokevirtual #362                // Method org/assertj/core/internal/BinaryDiff.diff:(Ljava/nio/file/Path;[B)Lorg/assertj/core/internal/BinaryDiffResult;
      23: astore        4
      25: aload         4
      27: invokevirtual #367                // Method org/assertj/core/internal/BinaryDiffResult.hasNoDiff:()Z
      30: ifeq          34
      33: return
      34: aload_0
      35: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      38: aload_1
      39: aload_2
      40: aload         4
      42: invokestatic  #373                // Method org/assertj/core/error/ShouldHaveBinaryContent.shouldHaveBinaryContent:(Ljava/nio/file/Path;Lorg/assertj/core/internal/BinaryDiffResult;)Lorg/assertj/core/error/ErrorMessageFactory;
      45: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      48: athrow
      49: astore        4
      51: new           #341                // class java/io/UncheckedIOException
      54: dup
      55: ldc_w         #377                // String Unable to verify binary contents of path:<%s>
      58: iconst_1
      59: anewarray     #4                  // class java/lang/Object
      62: dup
      63: iconst_0
      64: aload_2
      65: aastore
      66: invokestatic  #347                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      69: aload         4
      71: invokespecial #350                // Method java/io/UncheckedIOException."<init>":(Ljava/lang/String;Ljava/io/IOException;)V
      74: athrow
    Exception table:
       from    to  target type
          14    33    49   Class java/io/IOException
          34    49    49   Class java/io/IOException

  public void assertHasSameContentAs(org.assertj.core.api.AssertionInfo, java.nio.file.Path, java.nio.charset.Charset, java.nio.file.Path, java.nio.charset.Charset);
    Code:
       0: aload         4
       2: ldc_w         #383                // String The given Path to compare actual content to should not be null
       5: invokestatic  #286                // Method org/assertj/core/util/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       8: pop
       9: aload_0
      10: getfield      #54                 // Field nioFilesWrapper:Lorg/assertj/core/internal/NioFilesWrapper;
      13: aload         4
      15: invokevirtual #74                 // Method org/assertj/core/internal/NioFilesWrapper.isReadable:(Ljava/nio/file/Path;)Z
      18: ldc_w         #385                // String The given Path <%s> to compare actual content to should be readable
      21: iconst_1
      22: anewarray     #4                  // class java/lang/Object
      25: dup
      26: iconst_0
      27: aload         4
      29: aastore
      30: invokestatic  #389                // Method org/assertj/core/util/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      33: aload_0
      34: aload_1
      35: aload_2
      36: invokevirtual #319                // Method assertIsReadable:(Lorg/assertj/core/api/AssertionInfo;Ljava/nio/file/Path;)V
      39: aload_0
      40: getfield      #40                 // Field diff:Lorg/assertj/core/internal/Diff;
      43: aload_2
      44: aload_3
      45: aload         4
      47: aload         5
      49: invokevirtual #392                // Method org/assertj/core/internal/Diff.diff:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/util/List;
      52: astore        6
      54: aload         6
      56: invokeinterface #327,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      61: ifeq          65
      64: return
      65: aload_0
      66: getfield      #52                 // Field failures:Lorg/assertj/core/internal/Failures;
      69: aload_1
      70: aload_2
      71: aload         4
      73: aload         6
      75: invokestatic  #398                // Method org/assertj/core/error/ShouldHaveSameContent.shouldHaveSameContent:(Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/util/List;)Lorg/assertj/core/error/ErrorMessageFactory;
      78: invokevirtual #84                 // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      81: athrow
      82: astore        6
      84: new           #341                // class java/io/UncheckedIOException
      87: dup
      88: ldc_w         #400                // String Unable to compare contents of paths:<%s> and:<%s>
      91: iconst_2
      92: anewarray     #4                  // class java/lang/Object
      95: dup
      96: iconst_0
      97: aload_2
      98: aastore
      99: dup
     100: iconst_1
     101: aload         4
     103: aastore
     104: invokestatic  #347                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     107: aload         6
     109: invokespecial #350                // Method java/io/UncheckedIOException."<init>":(Ljava/lang/String;Ljava/io/IOException;)V
     112: athrow
    Exception table:
       from    to  target type
          39    64    82   Class java/io/IOException
          65    82    82   Class java/io/IOException

  static {};
    Code:
       0: new           #2                  // class org/assertj/core/internal/Paths
       3: dup
       4: invokespecial #404                // Method "<init>":()V
       7: putstatic     #30                 // Field INSTANCE:Lorg/assertj/core/internal/Paths;
      10: return
}
