Compiled from "NioFilesWrapper.java"
public class org.assertj.core.internal.NioFilesWrapper {
  private static final org.assertj.core.internal.NioFilesWrapper INSTANCE;

  public static org.assertj.core.internal.NioFilesWrapper instance();
    Code:
       0: getstatic     #11                 // Field INSTANCE:Lorg/assertj/core/internal/NioFilesWrapper;
       3: areturn

  org.assertj.core.internal.NioFilesWrapper();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method java/lang/Object."<init>":()V
       4: return

  public boolean isRegularFile(java.nio.file.Path);
    Code:
       0: aload_1
       1: iconst_0
       2: anewarray     #21                 // class java/nio/file/LinkOption
       5: invokestatic  #26                 // Method java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
       8: ireturn

  public boolean isSymbolicLink(java.nio.file.Path);
    Code:
       0: aload_1
       1: invokestatic  #31                 // Method java/nio/file/Files.isSymbolicLink:(Ljava/nio/file/Path;)Z
       4: ireturn

  public boolean isDirectory(java.nio.file.Path);
    Code:
       0: aload_1
       1: iconst_0
       2: anewarray     #21                 // class java/nio/file/LinkOption
       5: invokestatic  #34                 // Method java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
       8: ireturn

  public boolean exists(java.nio.file.Path, java.nio.file.LinkOption...);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #37                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
       5: ireturn

  public boolean notExists(java.nio.file.Path, java.nio.file.LinkOption...);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #42                 // Method java/nio/file/Files.notExists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
       5: ireturn

  public boolean isReadable(java.nio.file.Path);
    Code:
       0: aload_1
       1: invokestatic  #45                 // Method java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z
       4: ireturn

  public boolean isWritable(java.nio.file.Path);
    Code:
       0: aload_1
       1: invokestatic  #48                 // Method java/nio/file/Files.isWritable:(Ljava/nio/file/Path;)Z
       4: ireturn

  public boolean isExecutable(java.nio.file.Path);
    Code:
       0: aload_1
       1: invokestatic  #51                 // Method java/nio/file/Files.isExecutable:(Ljava/nio/file/Path;)Z
       4: ireturn

  static {};
    Code:
       0: new           #2                  // class org/assertj/core/internal/NioFilesWrapper
       3: dup
       4: invokespecial #53                 // Method "<init>":()V
       7: putstatic     #11                 // Field INSTANCE:Lorg/assertj/core/internal/NioFilesWrapper;
      10: return
}
