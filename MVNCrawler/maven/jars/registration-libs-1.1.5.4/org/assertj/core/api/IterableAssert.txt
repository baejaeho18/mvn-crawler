Compiled from "IterableAssert.java"
public class org.assertj.core.api.IterableAssert<ELEMENT> extends org.assertj.core.api.FactoryBasedNavigableIterableAssert<org.assertj.core.api.IterableAssert<ELEMENT>, java.lang.Iterable<? extends ELEMENT>, ELEMENT, org.assertj.core.api.ObjectAssert<ELEMENT>> {
  public org.assertj.core.api.IterableAssert(java.lang.Iterable<? extends ELEMENT>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #2                  // class org/assertj/core/api/IterableAssert
       4: new           #13                 // class org/assertj/core/api/ObjectAssertFactory
       7: dup
       8: invokespecial #16                 // Method org/assertj/core/api/ObjectAssertFactory."<init>":()V
      11: invokespecial #19                 // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert."<init>":(Ljava/lang/Iterable;Ljava/lang/Class;Lorg/assertj/core/api/AssertFactory;)V
      14: return

  public org.assertj.core.api.IterableAssert(java.util.Iterator<? extends ELEMENT>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #30                 // Method toLazyIterable:(Ljava/util/Iterator;)Ljava/lang/Iterable;
       5: invokespecial #32                 // Method "<init>":(Ljava/lang/Iterable;)V
       8: return

  public org.assertj.core.api.IterableAssert<ELEMENT> isEqualTo(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #61                 // Method org/assertj/core/internal/Objects.assertEqual:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Object;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #68                 // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isEqualTo:(Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isInstanceOf(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #75                 // Method org/assertj/core/internal/Objects.assertIsInstanceOf:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Class;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #78                 // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isInstanceOfAny(java.lang.Class<?>...);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #87                 // Method org/assertj/core/internal/Objects.assertIsInstanceOfAny:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;[Ljava/lang/Class;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #90                 // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isInstanceOfAny:([Ljava/lang/Class;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isOfAnyClassIn(java.lang.Class<?>...);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #97                 // Method org/assertj/core/internal/Objects.assertIsOfAnyClassIn:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;[Ljava/lang/Class;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #99                 // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isOfAnyClassIn:([Ljava/lang/Class;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isExactlyInstanceOf(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #103                // Method org/assertj/core/internal/Objects.assertIsExactlyInstanceOf:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Class;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #105                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isExactlyInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isNotInstanceOf(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #109                // Method org/assertj/core/internal/Objects.assertIsNotInstanceOf:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Class;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #111                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isNotInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isNotInstanceOfAny(java.lang.Class<?>...);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #115                // Method org/assertj/core/internal/Objects.assertIsNotInstanceOfAny:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;[Ljava/lang/Class;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #117                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isNotInstanceOfAny:([Ljava/lang/Class;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isNotOfAnyClassIn(java.lang.Class<?>...);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #121                // Method org/assertj/core/internal/Objects.assertIsNotOfAnyClassIn:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;[Ljava/lang/Class;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #123                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isNotOfAnyClassIn:([Ljava/lang/Class;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isNotExactlyInstanceOf(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #127                // Method org/assertj/core/internal/Objects.assertIsNotExactlyInstanceOf:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Class;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #129                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isNotExactlyInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isSameAs(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #133                // Method org/assertj/core/internal/Objects.assertSame:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Object;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #135                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isSameAs:(Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public org.assertj.core.api.IterableAssert<ELEMENT> isNotSameAs(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifeq          37
      10: aload_0
      11: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      14: aload_0
      15: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      18: aload_0
      19: invokespecial #51                 // Method asLazyIterable:()Lorg/assertj/core/api/IterableAssert$LazyIterable;
      22: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      25: aload_1
      26: invokevirtual #139                // Method org/assertj/core/internal/Objects.assertNotSame:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Object;)V
      29: aload_0
      30: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      33: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #141                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isNotSameAs:(Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
      42: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      45: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> startsWith(ELEMENT...);
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: instanceof    #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: ifne          19
      10: aload_0
      11: aload_1
      12: invokespecial #147                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.startsWith:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
      15: checkcast     #2                  // class org/assertj/core/api/IterableAssert
      18: areturn
      19: aload_0
      20: getfield      #43                 // Field objects:Lorg/assertj/core/internal/Objects;
      23: aload_0
      24: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
      27: aload_0
      28: getfield      #39                 // Field actual:Ljava/lang/Object;
      31: invokevirtual #151                // Method org/assertj/core/internal/Objects.assertNotNull:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;)V
      34: aload_1
      35: invokestatic  #157                // Method org/assertj/core/internal/CommonValidations.checkIsNotNull:([Ljava/lang/Object;)V
      38: aload_0
      39: getfield      #39                 // Field actual:Ljava/lang/Object;
      42: checkcast     #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
      45: invokestatic  #55                 // Method org/assertj/core/api/IterableAssert$LazyIterable.access$000:(Lorg/assertj/core/api/IterableAssert$LazyIterable;)Ljava/util/Iterator;
      48: astore_2
      49: aload_1
      50: arraylength
      51: ifne          73
      54: aload_2
      55: invokeinterface #163,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      60: ifeq          73
      63: new           #165                // class java/lang/AssertionError
      66: dup
      67: ldc           #167                // String actual is not empty
      69: invokespecial #170                // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      72: athrow
      73: iconst_0
      74: istore_3
      75: aload_2
      76: invokeinterface #163,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      81: ifeq          140
      84: iload_3
      85: aload_1
      86: arraylength
      87: if_icmplt     93
      90: goto          140
      93: aload_0
      94: getfield      #174                // Field iterables:Lorg/assertj/core/internal/Iterables;
      97: invokevirtual #180                // Method org/assertj/core/internal/Iterables.getComparisonStrategy:()Lorg/assertj/core/internal/ComparisonStrategy;
     100: aload_2
     101: invokeinterface #184,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     106: aload_1
     107: iload_3
     108: iinc          3, 1
     111: aaload
     112: invokeinterface #190,  3          // InterfaceMethod org/assertj/core/internal/ComparisonStrategy.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
     117: ifeq          123
     120: goto          75
     123: aload_0
     124: aload_0
     125: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
     128: aload_0
     129: getfield      #39                 // Field actual:Ljava/lang/Object;
     132: checkcast     #192                // class java/lang/Iterable
     135: aload_1
     136: invokespecial #196                // Method actualDoesNotStartWithSequence:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/lang/AssertionError;
     139: athrow
     140: aload_1
     141: arraylength
     142: iload_3
     143: if_icmple     163
     146: aload_0
     147: aload_0
     148: getfield      #47                 // Field info:Lorg/assertj/core/api/WritableAssertionInfo;
     151: aload_0
     152: getfield      #39                 // Field actual:Ljava/lang/Object;
     155: checkcast     #192                // class java/lang/Iterable
     158: aload_1
     159: invokespecial #196                // Method actualDoesNotStartWithSequence:(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/lang/AssertionError;
     162: athrow
     163: aload_0
     164: getfield      #65                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
     167: checkcast     #2                  // class org/assertj/core/api/IterableAssert
     170: areturn

  private java.lang.AssertionError actualDoesNotStartWithSequence(org.assertj.core.api.AssertionInfo, java.lang.Iterable<?>, java.lang.Object[]);
    Code:
       0: invokestatic  #208                // Method org/assertj/core/internal/Failures.instance:()Lorg/assertj/core/internal/Failures;
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload_0
       7: getfield      #174                // Field iterables:Lorg/assertj/core/internal/Iterables;
      10: invokevirtual #180                // Method org/assertj/core/internal/Iterables.getComparisonStrategy:()Lorg/assertj/core/internal/ComparisonStrategy;
      13: invokestatic  #214                // Method org/assertj/core/error/ShouldStartWith.shouldStartWith:(Ljava/lang/Object;Ljava/lang/Object;Lorg/assertj/core/internal/ComparisonStrategy;)Lorg/assertj/core/error/ErrorMessageFactory;
      16: invokevirtual #218                // Method org/assertj/core/internal/Failures.failure:(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/error/ErrorMessageFactory;)Ljava/lang/AssertionError;
      19: areturn

  private org.assertj.core.api.IterableAssert$LazyIterable asLazyIterable();
    Code:
       0: aload_0
       1: getfield      #39                 // Field actual:Ljava/lang/Object;
       4: checkcast     #8                  // class org/assertj/core/api/IterableAssert$LazyIterable
       7: areturn

  private static <T> java.lang.Iterable<T> toIterable(java.util.Iterator<T>);
    Code:
       0: new           #223                // class java/util/ArrayList
       3: dup
       4: invokespecial #224                // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: invokeinterface #163,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          31
      17: aload_1
      18: aload_0
      19: invokeinterface #184,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      24: invokevirtual #228                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      27: pop
      28: goto          8
      31: aload_1
      32: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> contains(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #235                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.contains:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> containsOnly(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #239                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.containsOnly:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> containsOnlyOnce(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #242                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.containsOnlyOnce:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> containsExactly(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #245                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.containsExactly:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> containsExactlyInAnyOrder(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #248                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.containsExactlyInAnyOrder:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> containsAnyOf(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #251                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.containsAnyOf:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> isSubsetOf(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #254                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.isSubsetOf:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> containsSequence(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #257                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.containsSequence:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> doesNotContainSequence(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #260                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.doesNotContainSequence:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> containsSubsequence(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #263                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.containsSubsequence:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> doesNotContainSubsequence(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #266                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.doesNotContainSubsequence:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> doesNotContain(ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #269                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.doesNotContain:([Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       5: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       8: areturn

  public final org.assertj.core.api.IterableAssert<ELEMENT> endsWith(ELEMENT, ELEMENT...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #274                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.endsWith:(Ljava/lang/Object;[Ljava/lang/Object;)Lorg/assertj/core/api/AbstractIterableAssert;
       6: checkcast     #2                  // class org/assertj/core/api/IterableAssert
       9: areturn

  public final <EXCEPTION extends java.lang.Exception> org.assertj.core.api.AbstractListAssert<?, java.util.List<? extends java.lang.Object>, java.lang.Object, org.assertj.core.api.ObjectAssert<java.lang.Object>> flatExtracting(org.assertj.core.api.iterable.ThrowingExtractor<? super ELEMENT, ?, EXCEPTION>...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #281                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.flatExtracting:([Lorg/assertj/core/api/iterable/ThrowingExtractor;)Lorg/assertj/core/api/AbstractListAssert;
       5: areturn

  public final org.assertj.core.api.AbstractListAssert<?, java.util.List<? extends java.lang.Object>, java.lang.Object, org.assertj.core.api.ObjectAssert<java.lang.Object>> flatExtracting(org.assertj.core.api.iterable.Extractor<? super ELEMENT, ?>...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #287                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.flatExtracting:([Lorg/assertj/core/api/iterable/Extractor;)Lorg/assertj/core/api/AbstractListAssert;
       5: areturn

  public final org.assertj.core.api.AbstractListAssert<?, java.util.List<? extends org.assertj.core.groups.Tuple>, org.assertj.core.groups.Tuple, org.assertj.core.api.ObjectAssert<org.assertj.core.groups.Tuple>> extracting(java.util.function.Function<ELEMENT, ?>...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #293                // Method org/assertj/core/api/FactoryBasedNavigableIterableAssert.extracting:([Ljava/util/function/Function;)Lorg/assertj/core/api/AbstractListAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isSameAs(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #297                // Method isSameAs:(Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isOfAnyClassIn(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #299                // Method isOfAnyClassIn:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isNotSameAs(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #301                // Method isNotSameAs:(Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isNotOfAnyClassIn(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #303                // Method isNotOfAnyClassIn:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isNotInstanceOfAny(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #305                // Method isNotInstanceOfAny:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isNotInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #307                // Method isNotInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isNotExactlyInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #309                // Method isNotExactlyInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isInstanceOfAny(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #311                // Method isInstanceOfAny:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #313                // Method isInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isExactlyInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #315                // Method isExactlyInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isEqualTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #317                // Method isEqualTo:(Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert containsAnyOf(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #319                // Method containsAnyOf:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert endsWith(java.lang.Object, java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #321                // Method endsWith:(Ljava/lang/Object;[Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       6: areturn

  public org.assertj.core.api.AbstractIterableAssert startsWith(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #323                // Method startsWith:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert doesNotContain(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #325                // Method doesNotContain:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert doesNotContainSubsequence(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #327                // Method doesNotContainSubsequence:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert containsSubsequence(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #329                // Method containsSubsequence:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert doesNotContainSequence(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #331                // Method doesNotContainSequence:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert containsSequence(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #333                // Method containsSequence:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert isSubsetOf(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #335                // Method isSubsetOf:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert containsExactlyInAnyOrder(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #337                // Method containsExactlyInAnyOrder:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert containsExactly(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #339                // Method containsExactly:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert containsOnlyOnce(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #341                // Method containsOnlyOnce:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert containsOnly(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #343                // Method containsOnly:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractIterableAssert contains(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #345                // Method contains:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert containsAnyOf(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #319                // Method containsAnyOf:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert isSubsetOf(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #335                // Method isSubsetOf:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert endsWith(java.lang.Object, java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #321                // Method endsWith:(Ljava/lang/Object;[Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       6: areturn

  public org.assertj.core.api.ObjectEnumerableAssert startsWith(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #323                // Method startsWith:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert doesNotContain(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #325                // Method doesNotContain:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert doesNotContainSubsequence(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #327                // Method doesNotContainSubsequence:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert containsSubsequence(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #329                // Method containsSubsequence:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert doesNotContainSequence(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #331                // Method doesNotContainSequence:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert containsSequence(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #333                // Method containsSequence:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert containsExactlyInAnyOrder(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #337                // Method containsExactlyInAnyOrder:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert containsExactly(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #339                // Method containsExactly:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert containsOnlyOnce(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #341                // Method containsOnlyOnce:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert containsOnly(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #343                // Method containsOnly:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.ObjectEnumerableAssert contains(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #345                // Method contains:([Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isNotOfAnyClassIn(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #303                // Method isNotOfAnyClassIn:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isOfAnyClassIn(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #299                // Method isOfAnyClassIn:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isNotExactlyInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #309                // Method isNotExactlyInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isExactlyInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #315                // Method isExactlyInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isNotInstanceOfAny(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #305                // Method isNotInstanceOfAny:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isNotInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #307                // Method isNotInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isInstanceOfAny(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #311                // Method isInstanceOfAny:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #313                // Method isInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isNotSameAs(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #301                // Method isNotSameAs:(Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isSameAs(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #297                // Method isSameAs:(Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.AbstractAssert isEqualTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #317                // Method isEqualTo:(Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isNotOfAnyClassIn(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #303                // Method isNotOfAnyClassIn:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isOfAnyClassIn(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #299                // Method isOfAnyClassIn:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isNotExactlyInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #309                // Method isNotExactlyInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isExactlyInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #315                // Method isExactlyInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isNotInstanceOfAny(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #305                // Method isNotInstanceOfAny:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isNotInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #307                // Method isNotInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isInstanceOfAny(java.lang.Class[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #311                // Method isInstanceOfAny:([Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isInstanceOf(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #313                // Method isInstanceOf:(Ljava/lang/Class;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isNotSameAs(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #301                // Method isNotSameAs:(Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isSameAs(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #297                // Method isSameAs:(Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  public org.assertj.core.api.Assert isEqualTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #317                // Method isEqualTo:(Ljava/lang/Object;)Lorg/assertj/core/api/IterableAssert;
       5: areturn

  static java.lang.Iterable access$100(java.util.Iterator);
    Code:
       0: aload_0
       1: invokestatic  #356                // Method toIterable:(Ljava/util/Iterator;)Ljava/lang/Iterable;
       4: areturn
}
