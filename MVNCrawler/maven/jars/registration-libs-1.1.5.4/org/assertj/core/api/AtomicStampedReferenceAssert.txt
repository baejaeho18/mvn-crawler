Compiled from "AtomicStampedReferenceAssert.java"
public class org.assertj.core.api.AtomicStampedReferenceAssert<VALUE> extends org.assertj.core.api.AbstractAtomicReferenceAssert<org.assertj.core.api.AtomicStampedReferenceAssert<VALUE>, VALUE, java.util.concurrent.atomic.AtomicStampedReference<VALUE>> {
  public org.assertj.core.api.AtomicStampedReferenceAssert(java.util.concurrent.atomic.AtomicStampedReference<VALUE>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #2                  // class org/assertj/core/api/AtomicStampedReferenceAssert
       4: iconst_1
       5: invokespecial #11                 // Method org/assertj/core/api/AbstractAtomicReferenceAssert."<init>":(Ljava/lang/Object;Ljava/lang/Class;Z)V
       8: return

  public org.assertj.core.api.AtomicStampedReferenceAssert<VALUE> hasReference(VALUE);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #22                 // Method org/assertj/core/api/AbstractAtomicReferenceAssert.hasReference:(Ljava/lang/Object;)Lorg/assertj/core/api/AbstractAtomicReferenceAssert;
       5: checkcast     #2                  // class org/assertj/core/api/AtomicStampedReferenceAssert
       8: areturn

  protected VALUE getReference();
    Code:
       0: aload_0
       1: getfield      #29                 // Field actual:Ljava/lang/Object;
       4: checkcast     #31                 // class java/util/concurrent/atomic/AtomicStampedReference
       7: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicStampedReference.getReference:()Ljava/lang/Object;
      10: areturn

  public org.assertj.core.api.AtomicStampedReferenceAssert<VALUE> hasStamp(int);
    Code:
       0: aload_0
       1: getfield      #29                 // Field actual:Ljava/lang/Object;
       4: checkcast     #31                 // class java/util/concurrent/atomic/AtomicStampedReference
       7: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicStampedReference.getStamp:()I
      10: istore_2
      11: iload_2
      12: iload_1
      13: if_icmpeq     31
      16: aload_0
      17: aload_0
      18: getfield      #29                 // Field actual:Ljava/lang/Object;
      21: checkcast     #31                 // class java/util/concurrent/atomic/AtomicStampedReference
      24: iload_1
      25: invokestatic  #45                 // Method org/assertj/core/error/ShouldHaveStamp.shouldHaveStamp:(Ljava/util/concurrent/atomic/AtomicStampedReference;I)Lorg/assertj/core/error/ErrorMessageFactory;
      28: invokevirtual #49                 // Method throwAssertionError:(Lorg/assertj/core/error/ErrorMessageFactory;)V
      31: aload_0
      32: areturn

  public org.assertj.core.api.AbstractAtomicReferenceAssert hasReference(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #54                 // Method hasReference:(Ljava/lang/Object;)Lorg/assertj/core/api/AtomicStampedReferenceAssert;
       5: areturn
}
