Compiled from "AbstractAtomicFieldUpdaterAssert.java"
public abstract class org.assertj.core.api.AbstractAtomicFieldUpdaterAssert<SELF extends org.assertj.core.api.AbstractAtomicFieldUpdaterAssert<SELF, VALUE, ATOMIC, OBJECT>, VALUE, ATOMIC, OBJECT> extends org.assertj.core.api.AbstractObjectAssert<SELF, ATOMIC> {
  private final boolean expectedNullAllowed;

  public org.assertj.core.api.AbstractAtomicFieldUpdaterAssert(ATOMIC, java.lang.Class<?>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #13                 // Method org/assertj/core/api/AbstractObjectAssert."<init>":(Ljava/lang/Object;Ljava/lang/Class;)V
       6: aload_0
       7: iload_3
       8: putfield      #15                 // Field expectedNullAllowed:Z
      11: return

  public SELF hasValue(VALUE, OBJECT);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #30                 // Method validate:(Ljava/lang/Object;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #34                 // Method getActualValue:(Ljava/lang/Object;)Ljava/lang/Object;
      10: astore_3
      11: aload_0
      12: getfield      #38                 // Field objects:Lorg/assertj/core/internal/Objects;
      15: invokevirtual #44                 // Method org/assertj/core/internal/Objects.getComparisonStrategy:()Lorg/assertj/core/internal/ComparisonStrategy;
      18: aload_3
      19: aload_1
      20: invokeinterface #50,  3           // InterfaceMethod org/assertj/core/internal/ComparisonStrategy.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
      25: ifne          42
      28: aload_0
      29: aload_0
      30: getfield      #52                 // Field actual:Ljava/lang/Object;
      33: aload_3
      34: aload_1
      35: aload_2
      36: invokestatic  #58                 // Method org/assertj/core/error/ShouldHaveValue.shouldHaveValue:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lorg/assertj/core/error/ErrorMessageFactory;
      39: invokevirtual #62                 // Method throwAssertionError:(Lorg/assertj/core/error/ErrorMessageFactory;)V
      42: aload_0
      43: getfield      #68                 // Field myself:Lorg/assertj/core/api/AbstractAssert;
      46: checkcast     #2                  // class org/assertj/core/api/AbstractAtomicFieldUpdaterAssert
      49: areturn

  protected abstract VALUE getActualValue(OBJECT);

  protected void validate(VALUE);
    Code:
       0: aload_0
       1: invokevirtual #77                 // Method isNotNull:()Lorg/assertj/core/api/AbstractAssert;
       4: pop
       5: aload_0
       6: getfield      #15                 // Field expectedNullAllowed:Z
       9: ifne          17
      12: aload_0
      13: aload_1
      14: invokespecial #80                 // Method checkNotNull:(Ljava/lang/Object;)V
      17: return

  private void checkNotNull(VALUE);
    Code:
       0: aload_1
       1: ifnull        8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #82                 // String The expected value should not be <null>.
      11: iconst_0
      12: anewarray     #64                 // class java/lang/Object
      15: invokestatic  #88                 // Method org/assertj/core/util/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      18: return
}
