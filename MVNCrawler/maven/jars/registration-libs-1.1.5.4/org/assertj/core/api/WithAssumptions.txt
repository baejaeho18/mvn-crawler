Compiled from "WithAssumptions.java"
public interface org.assertj.core.api.WithAssumptions {
  public default <T> org.assertj.core.api.ProxyableObjectArrayAssert<T> assumeThat(T[]);
    Code:
       0: aload_1
       1: invokestatic  #17                 // Method org/assertj/core/api/Assumptions.assumeThat:([Ljava/lang/Object;)Lorg/assertj/core/api/ProxyableObjectArrayAssert;
       4: areturn

  public default <K, V> org.assertj.core.api.AbstractMapAssert<?, ?, K, V> assumeThat(java.util.Map<K, V>);
    Code:
       0: aload_1
       1: invokestatic  #25                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/Map;)Lorg/assertj/core/api/AbstractMapAssert;
       4: areturn

  public default org.assertj.core.api.AbstractShortAssert<?> assumeThat(short);
    Code:
       0: iload_1
       1: invokestatic  #30                 // Method org/assertj/core/api/Assumptions.assumeThat:(S)Lorg/assertj/core/api/AbstractShortAssert;
       4: areturn

  public default org.assertj.core.api.AbstractLongAssert<?> assumeThat(long);
    Code:
       0: lload_1
       1: invokestatic  #34                 // Method org/assertj/core/api/Assumptions.assumeThat:(J)Lorg/assertj/core/api/AbstractLongAssert;
       4: areturn

  public default org.assertj.core.api.AbstractLongAssert<?> assumeThat(java.lang.Long);
    Code:
       0: aload_1
       1: invokestatic  #38                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Long;)Lorg/assertj/core/api/AbstractLongAssert;
       4: areturn

  public default org.assertj.core.api.AbstractLongArrayAssert<?> assumeThat(long[]);
    Code:
       0: aload_1
       1: invokestatic  #42                 // Method org/assertj/core/api/Assumptions.assumeThat:([J)Lorg/assertj/core/api/AbstractLongArrayAssert;
       4: areturn

  public default <T> org.assertj.core.api.ProxyableObjectAssert<T> assumeThat(T);
    Code:
       0: aload_1
       1: invokestatic  #46                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Object;)Lorg/assertj/core/api/ProxyableObjectAssert;
       4: areturn

  public default org.assertj.core.api.AbstractCharSequenceAssert<?, java.lang.String> assumeThat(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #51                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/String;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
       4: areturn

  public default org.assertj.core.api.AbstractDateAssert<?> assumeThat(java.util.Date);
    Code:
       0: aload_1
       1: invokestatic  #55                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/Date;)Lorg/assertj/core/api/AbstractDateAssert;
       4: areturn

  public default org.assertj.core.api.AbstractThrowableAssert<?, ? extends java.lang.Throwable> assumeThat(java.lang.Throwable);
    Code:
       0: aload_1
       1: invokestatic  #59                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Throwable;)Lorg/assertj/core/api/AbstractThrowableAssert;
       4: areturn

  public default org.assertj.core.api.AbstractBigDecimalAssert<?> assumeThat(java.math.BigDecimal);
    Code:
       0: aload_1
       1: invokestatic  #63                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/math/BigDecimal;)Lorg/assertj/core/api/AbstractBigDecimalAssert;
       4: areturn

  public default org.assertj.core.api.AbstractBigIntegerAssert<?> assumeThat(java.math.BigInteger);
    Code:
       0: aload_1
       1: invokestatic  #67                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/math/BigInteger;)Lorg/assertj/core/api/AbstractBigIntegerAssert;
       4: areturn

  public default org.assertj.core.api.AtomicBooleanAssert assumeThat(java.util.concurrent.atomic.AtomicBoolean);
    Code:
       0: aload_1
       1: invokestatic  #71                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicBoolean;)Lorg/assertj/core/api/AtomicBooleanAssert;
       4: areturn

  public default org.assertj.core.api.AtomicIntegerAssert assumeThat(java.util.concurrent.atomic.AtomicInteger);
    Code:
       0: aload_1
       1: invokestatic  #75                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicInteger;)Lorg/assertj/core/api/AtomicIntegerAssert;
       4: areturn

  public default org.assertj.core.api.AtomicIntegerArrayAssert assumeThat(java.util.concurrent.atomic.AtomicIntegerArray);
    Code:
       0: aload_1
       1: invokestatic  #79                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicIntegerArray;)Lorg/assertj/core/api/AtomicIntegerArrayAssert;
       4: areturn

  public default <OBJECT> org.assertj.core.api.AtomicIntegerFieldUpdaterAssert<OBJECT> assumeThat(java.util.concurrent.atomic.AtomicIntegerFieldUpdater<OBJECT>);
    Code:
       0: aload_1
       1: invokestatic  #83                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;)Lorg/assertj/core/api/AtomicIntegerFieldUpdaterAssert;
       4: areturn

  public default org.assertj.core.api.AtomicLongAssert assumeThat(java.util.concurrent.atomic.AtomicLong);
    Code:
       0: aload_1
       1: invokestatic  #88                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicLong;)Lorg/assertj/core/api/AtomicLongAssert;
       4: areturn

  public default org.assertj.core.api.AtomicLongArrayAssert assumeThat(java.util.concurrent.atomic.AtomicLongArray);
    Code:
       0: aload_1
       1: invokestatic  #92                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicLongArray;)Lorg/assertj/core/api/AtomicLongArrayAssert;
       4: areturn

  public default <OBJECT> org.assertj.core.api.AtomicLongFieldUpdaterAssert<OBJECT> assumeThat(java.util.concurrent.atomic.AtomicLongFieldUpdater<OBJECT>);
    Code:
       0: aload_1
       1: invokestatic  #96                 // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;)Lorg/assertj/core/api/AtomicLongFieldUpdaterAssert;
       4: areturn

  public default <VALUE> org.assertj.core.api.AtomicReferenceAssert<VALUE> assumeThat(java.util.concurrent.atomic.AtomicReference<VALUE>);
    Code:
       0: aload_1
       1: invokestatic  #101                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicReference;)Lorg/assertj/core/api/AtomicReferenceAssert;
       4: areturn

  public default <ELEMENT> org.assertj.core.api.AtomicReferenceArrayAssert<ELEMENT> assumeThat(java.util.concurrent.atomic.AtomicReferenceArray<ELEMENT>);
    Code:
       0: aload_1
       1: invokestatic  #106                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)Lorg/assertj/core/api/AtomicReferenceArrayAssert;
       4: areturn

  public default <FIELD, OBJECT> org.assertj.core.api.AtomicReferenceFieldUpdaterAssert<FIELD, OBJECT> assumeThat(java.util.concurrent.atomic.AtomicReferenceFieldUpdater<OBJECT, FIELD>);
    Code:
       0: aload_1
       1: invokestatic  #111                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;)Lorg/assertj/core/api/AtomicReferenceFieldUpdaterAssert;
       4: areturn

  public default <VALUE> org.assertj.core.api.AtomicMarkableReferenceAssert<VALUE> assumeThat(java.util.concurrent.atomic.AtomicMarkableReference<VALUE>);
    Code:
       0: aload_1
       1: invokestatic  #116                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicMarkableReference;)Lorg/assertj/core/api/AtomicMarkableReferenceAssert;
       4: areturn

  public default <VALUE> org.assertj.core.api.AtomicStampedReferenceAssert<VALUE> assumeThat(java.util.concurrent.atomic.AtomicStampedReference<VALUE>);
    Code:
       0: aload_1
       1: invokestatic  #121                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/atomic/AtomicStampedReference;)Lorg/assertj/core/api/AtomicStampedReferenceAssert;
       4: areturn

  public default org.assertj.core.api.AbstractCharSequenceAssert<?, ? extends java.lang.CharSequence> assumeThat(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokestatic  #126                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/CharSequence;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
       4: areturn

  public default org.assertj.core.api.AbstractShortArrayAssert<?> assumeThat(short[]);
    Code:
       0: aload_1
       1: invokestatic  #130                // Method org/assertj/core/api/Assumptions.assumeThat:([S)Lorg/assertj/core/api/AbstractShortArrayAssert;
       4: areturn

  public default org.assertj.core.api.AbstractShortAssert<?> assumeThat(java.lang.Short);
    Code:
       0: aload_1
       1: invokestatic  #134                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Short;)Lorg/assertj/core/api/AbstractShortAssert;
       4: areturn

  public default org.assertj.core.api.AbstractClassAssert<?> assumeThat(java.lang.Class<?>);
    Code:
       0: aload_1
       1: invokestatic  #138                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Class;)Lorg/assertj/core/api/AbstractClassAssert;
       4: areturn

  public default org.assertj.core.api.AbstractCharacterAssert<?> assumeThat(java.lang.Character);
    Code:
       0: aload_1
       1: invokestatic  #143                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Character;)Lorg/assertj/core/api/AbstractCharacterAssert;
       4: areturn

  public default org.assertj.core.api.AbstractCharArrayAssert<?> assumeThat(char[]);
    Code:
       0: aload_1
       1: invokestatic  #147                // Method org/assertj/core/api/Assumptions.assumeThat:([C)Lorg/assertj/core/api/AbstractCharArrayAssert;
       4: areturn

  public default org.assertj.core.api.AbstractCharacterAssert<?> assumeThat(char);
    Code:
       0: iload_1
       1: invokestatic  #151                // Method org/assertj/core/api/Assumptions.assumeThat:(C)Lorg/assertj/core/api/AbstractCharacterAssert;
       4: areturn

  public default <T extends java.lang.Comparable<? super T>> org.assertj.core.api.AbstractComparableAssert<?, T> assumeThat(T);
    Code:
       0: aload_1
       1: invokestatic  #155                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Comparable;)Lorg/assertj/core/api/AbstractComparableAssert;
       4: areturn

  public default <ELEMENT> org.assertj.core.api.ProxyableIterableAssert<ELEMENT> assumeThat(java.lang.Iterable<? extends ELEMENT>);
    Code:
       0: aload_1
       1: invokestatic  #159                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Iterable;)Lorg/assertj/core/api/ProxyableIterableAssert;
       4: areturn

  public default <ELEMENT> org.assertj.core.api.ProxyableIterableAssert<ELEMENT> assumeThat(java.util.Iterator<? extends ELEMENT>);
    Code:
       0: aload_1
       1: invokestatic  #164                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/Iterator;)Lorg/assertj/core/api/ProxyableIterableAssert;
       4: areturn

  public default org.assertj.core.api.AbstractBooleanAssert<?> assumeThat(java.lang.Boolean);
    Code:
       0: aload_1
       1: invokestatic  #169                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Boolean;)Lorg/assertj/core/api/AbstractBooleanAssert;
       4: areturn

  public default org.assertj.core.api.AbstractBooleanArrayAssert<?> assumeThat(boolean[]);
    Code:
       0: aload_1
       1: invokestatic  #173                // Method org/assertj/core/api/Assumptions.assumeThat:([Z)Lorg/assertj/core/api/AbstractBooleanArrayAssert;
       4: areturn

  public default org.assertj.core.api.AbstractByteAssert<?> assumeThat(byte);
    Code:
       0: iload_1
       1: invokestatic  #177                // Method org/assertj/core/api/Assumptions.assumeThat:(B)Lorg/assertj/core/api/AbstractByteAssert;
       4: areturn

  public default org.assertj.core.api.AbstractByteAssert<?> assumeThat(java.lang.Byte);
    Code:
       0: aload_1
       1: invokestatic  #181                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Byte;)Lorg/assertj/core/api/AbstractByteAssert;
       4: areturn

  public default org.assertj.core.api.AbstractByteArrayAssert<?> assumeThat(byte[]);
    Code:
       0: aload_1
       1: invokestatic  #185                // Method org/assertj/core/api/Assumptions.assumeThat:([B)Lorg/assertj/core/api/AbstractByteArrayAssert;
       4: areturn

  public default org.assertj.core.api.AbstractBooleanAssert<?> assumeThat(boolean);
    Code:
       0: iload_1
       1: invokestatic  #189                // Method org/assertj/core/api/Assumptions.assumeThat:(Z)Lorg/assertj/core/api/AbstractBooleanAssert;
       4: areturn

  public default org.assertj.core.api.AbstractFloatAssert<?> assumeThat(float);
    Code:
       0: fload_1
       1: invokestatic  #193                // Method org/assertj/core/api/Assumptions.assumeThat:(F)Lorg/assertj/core/api/AbstractFloatAssert;
       4: areturn

  public default org.assertj.core.api.AbstractInputStreamAssert<?, ? extends java.io.InputStream> assumeThat(java.io.InputStream);
    Code:
       0: aload_1
       1: invokestatic  #197                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/io/InputStream;)Lorg/assertj/core/api/AbstractInputStreamAssert;
       4: areturn

  public default org.assertj.core.api.AbstractFileAssert<?> assumeThat(java.io.File);
    Code:
       0: aload_1
       1: invokestatic  #201                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/io/File;)Lorg/assertj/core/api/AbstractFileAssert;
       4: areturn

  public default <RESULT> org.assertj.core.api.AbstractFutureAssert<?, ? extends java.util.concurrent.Future<? extends RESULT>, RESULT> assumeThat(java.util.concurrent.Future<RESULT>);
    Code:
       0: aload_1
       1: invokestatic  #205                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/Future;)Lorg/assertj/core/api/AbstractFutureAssert;
       4: areturn

  public default org.assertj.core.api.AbstractPathAssert<?> assumeThat(java.nio.file.Path);
    Code:
       0: aload_1
       1: invokestatic  #210                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/nio/file/Path;)Lorg/assertj/core/api/AbstractPathAssert;
       4: areturn

  public default org.assertj.core.api.AbstractIntArrayAssert<?> assumeThat(int[]);
    Code:
       0: aload_1
       1: invokestatic  #214                // Method org/assertj/core/api/Assumptions.assumeThat:([I)Lorg/assertj/core/api/AbstractIntArrayAssert;
       4: areturn

  public default org.assertj.core.api.AbstractFloatAssert<?> assumeThat(java.lang.Float);
    Code:
       0: aload_1
       1: invokestatic  #218                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Float;)Lorg/assertj/core/api/AbstractFloatAssert;
       4: areturn

  public default org.assertj.core.api.AbstractIntegerAssert<?> assumeThat(int);
    Code:
       0: iload_1
       1: invokestatic  #222                // Method org/assertj/core/api/Assumptions.assumeThat:(I)Lorg/assertj/core/api/AbstractIntegerAssert;
       4: areturn

  public default org.assertj.core.api.AbstractFloatArrayAssert<?> assumeThat(float[]);
    Code:
       0: aload_1
       1: invokestatic  #226                // Method org/assertj/core/api/Assumptions.assumeThat:([F)Lorg/assertj/core/api/AbstractFloatArrayAssert;
       4: areturn

  public default org.assertj.core.api.AbstractIntegerAssert<?> assumeThat(java.lang.Integer);
    Code:
       0: aload_1
       1: invokestatic  #230                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Integer;)Lorg/assertj/core/api/AbstractIntegerAssert;
       4: areturn

  public default org.assertj.core.api.AbstractDoubleAssert<?> assumeThat(double);
    Code:
       0: dload_1
       1: invokestatic  #234                // Method org/assertj/core/api/Assumptions.assumeThat:(D)Lorg/assertj/core/api/AbstractDoubleAssert;
       4: areturn

  public default org.assertj.core.api.AbstractDoubleAssert<?> assumeThat(java.lang.Double);
    Code:
       0: aload_1
       1: invokestatic  #238                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/lang/Double;)Lorg/assertj/core/api/AbstractDoubleAssert;
       4: areturn

  public default <ELEMENT> org.assertj.core.api.FactoryBasedNavigableListAssert<org.assertj.core.api.ProxyableListAssert<ELEMENT>, java.util.List<? extends ELEMENT>, ELEMENT, org.assertj.core.api.ObjectAssert<ELEMENT>> assumeThat(java.util.List<? extends ELEMENT>);
    Code:
       0: aload_1
       1: invokestatic  #242                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/List;)Lorg/assertj/core/api/FactoryBasedNavigableListAssert;
       4: areturn

  public default <ELEMENT> org.assertj.core.api.AbstractListAssert<?, java.util.List<? extends ELEMENT>, ELEMENT, org.assertj.core.api.ObjectAssert<ELEMENT>> assumeThat(java.util.stream.Stream<? extends ELEMENT>);
    Code:
       0: aload_1
       1: invokestatic  #248                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/stream/Stream;)Lorg/assertj/core/api/AbstractListAssert;
       4: areturn

  public default org.assertj.core.api.AbstractListAssert<?, java.util.List<? extends java.lang.Double>, java.lang.Double, org.assertj.core.api.ObjectAssert<java.lang.Double>> assumeThat(java.util.stream.DoubleStream);
    Code:
       0: aload_1
       1: invokestatic  #254                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/stream/DoubleStream;)Lorg/assertj/core/api/AbstractListAssert;
       4: areturn

  public default org.assertj.core.api.AbstractListAssert<?, java.util.List<? extends java.lang.Long>, java.lang.Long, org.assertj.core.api.ObjectAssert<java.lang.Long>> assumeThat(java.util.stream.LongStream);
    Code:
       0: aload_1
       1: invokestatic  #259                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/stream/LongStream;)Lorg/assertj/core/api/AbstractListAssert;
       4: areturn

  public default org.assertj.core.api.AbstractListAssert<?, java.util.List<? extends java.lang.Integer>, java.lang.Integer, org.assertj.core.api.ObjectAssert<java.lang.Integer>> assumeThat(java.util.stream.IntStream);
    Code:
       0: aload_1
       1: invokestatic  #264                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/stream/IntStream;)Lorg/assertj/core/api/AbstractListAssert;
       4: areturn

  public default org.assertj.core.api.AbstractDoubleArrayAssert<?> assumeThat(double[]);
    Code:
       0: aload_1
       1: invokestatic  #269                // Method org/assertj/core/api/Assumptions.assumeThat:([D)Lorg/assertj/core/api/AbstractDoubleArrayAssert;
       4: areturn

  public default org.assertj.core.api.AbstractZonedDateTimeAssert<?> assumeThat(java.time.ZonedDateTime);
    Code:
       0: aload_1
       1: invokestatic  #273                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/time/ZonedDateTime;)Lorg/assertj/core/api/AbstractZonedDateTimeAssert;
       4: areturn

  public default <RESULT> org.assertj.core.api.CompletableFutureAssert<RESULT> assumeThat(java.util.concurrent.CompletableFuture<RESULT>);
    Code:
       0: aload_1
       1: invokestatic  #278                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/CompletableFuture;)Lorg/assertj/core/api/CompletableFutureAssert;
       4: areturn

  public default <RESULT> org.assertj.core.api.CompletableFutureAssert<RESULT> assumeThat(java.util.concurrent.CompletionStage<RESULT>);
    Code:
       0: aload_1
       1: invokestatic  #284                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/concurrent/CompletionStage;)Lorg/assertj/core/api/CompletableFutureAssert;
       4: areturn

  public default <VALUE> org.assertj.core.api.OptionalAssert<VALUE> assumeThat(java.util.Optional<VALUE>);
    Code:
       0: aload_1
       1: invokestatic  #289                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/Optional;)Lorg/assertj/core/api/OptionalAssert;
       4: areturn

  public default org.assertj.core.api.OptionalDoubleAssert assumeThat(java.util.OptionalDouble);
    Code:
       0: aload_1
       1: invokestatic  #295                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/OptionalDouble;)Lorg/assertj/core/api/OptionalDoubleAssert;
       4: areturn

  public default org.assertj.core.api.OptionalIntAssert assumeThat(java.util.OptionalInt);
    Code:
       0: aload_1
       1: invokestatic  #300                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/OptionalInt;)Lorg/assertj/core/api/OptionalIntAssert;
       4: areturn

  public default org.assertj.core.api.OptionalLongAssert assumeThat(java.util.OptionalLong);
    Code:
       0: aload_1
       1: invokestatic  #305                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/OptionalLong;)Lorg/assertj/core/api/OptionalLongAssert;
       4: areturn

  public default org.assertj.core.api.AbstractLocalDateTimeAssert<?> assumeThat(java.time.LocalDateTime);
    Code:
       0: aload_1
       1: invokestatic  #310                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/time/LocalDateTime;)Lorg/assertj/core/api/AbstractLocalDateTimeAssert;
       4: areturn

  public default org.assertj.core.api.AbstractLocalDateAssert<?> assumeThat(java.time.LocalDate);
    Code:
       0: aload_1
       1: invokestatic  #315                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/time/LocalDate;)Lorg/assertj/core/api/AbstractLocalDateAssert;
       4: areturn

  public default org.assertj.core.api.AbstractLocalTimeAssert<?> assumeThat(java.time.LocalTime);
    Code:
       0: aload_1
       1: invokestatic  #320                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/time/LocalTime;)Lorg/assertj/core/api/AbstractLocalTimeAssert;
       4: areturn

  public default org.assertj.core.api.AbstractInstantAssert<?> assumeThat(java.time.Instant);
    Code:
       0: aload_1
       1: invokestatic  #325                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/time/Instant;)Lorg/assertj/core/api/AbstractInstantAssert;
       4: areturn

  public default org.assertj.core.api.AbstractOffsetTimeAssert<?> assumeThat(java.time.OffsetTime);
    Code:
       0: aload_1
       1: invokestatic  #330                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/time/OffsetTime;)Lorg/assertj/core/api/AbstractOffsetTimeAssert;
       4: areturn

  public default org.assertj.core.api.AbstractOffsetDateTimeAssert<?> assumeThat(java.time.OffsetDateTime);
    Code:
       0: aload_1
       1: invokestatic  #335                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/time/OffsetDateTime;)Lorg/assertj/core/api/AbstractOffsetDateTimeAssert;
       4: areturn

  public default org.assertj.core.api.AbstractThrowableAssert<?, ? extends java.lang.Throwable> assumeThatThrownBy(org.assertj.core.api.ThrowableAssert$ThrowingCallable);
    Code:
       0: aload_1
       1: invokestatic  #341                // Method org/assertj/core/api/Assumptions.assumeThatThrownBy:(Lorg/assertj/core/api/ThrowableAssert$ThrowingCallable;)Lorg/assertj/core/api/AbstractThrowableAssert;
       4: areturn

  public default org.assertj.core.api.AbstractThrowableAssert<?, ? extends java.lang.Throwable> assumeThatCode(org.assertj.core.api.ThrowableAssert$ThrowingCallable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #350                // Method org/assertj/core/api/Assertions.catchThrowable:(Lorg/assertj/core/api/ThrowableAssert$ThrowingCallable;)Ljava/lang/Throwable;
       5: invokeinterface #351,  2          // InterfaceMethod assumeThat:(Ljava/lang/Throwable;)Lorg/assertj/core/api/AbstractThrowableAssert;
      10: areturn

  public default <T> org.assertj.core.api.ProxyablePredicateAssert<T> assumeThat(java.util.function.Predicate<T>);
    Code:
       0: aload_1
       1: invokestatic  #355                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/function/Predicate;)Lorg/assertj/core/api/ProxyablePredicateAssert;
       4: areturn

  public default org.assertj.core.api.IntPredicateAssert assumeThat(java.util.function.IntPredicate);
    Code:
       0: aload_1
       1: invokestatic  #361                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/function/IntPredicate;)Lorg/assertj/core/api/IntPredicateAssert;
       4: areturn

  public default org.assertj.core.api.LongPredicateAssert assumeThat(java.util.function.LongPredicate);
    Code:
       0: aload_1
       1: invokestatic  #366                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/function/LongPredicate;)Lorg/assertj/core/api/LongPredicateAssert;
       4: areturn

  public default org.assertj.core.api.DoublePredicateAssert assumeThat(java.util.function.DoublePredicate);
    Code:
       0: aload_1
       1: invokestatic  #371                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/util/function/DoublePredicate;)Lorg/assertj/core/api/DoublePredicateAssert;
       4: areturn

  public default org.assertj.core.api.AbstractUrlAssert<?> assumeThat(java.net.URL);
    Code:
       0: aload_1
       1: invokestatic  #376                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/net/URL;)Lorg/assertj/core/api/AbstractUrlAssert;
       4: areturn

  public default org.assertj.core.api.AbstractUriAssert<?> assumeThat(java.net.URI);
    Code:
       0: aload_1
       1: invokestatic  #381                // Method org/assertj/core/api/Assumptions.assumeThat:(Ljava/net/URI;)Lorg/assertj/core/api/AbstractUriAssert;
       4: areturn
}
