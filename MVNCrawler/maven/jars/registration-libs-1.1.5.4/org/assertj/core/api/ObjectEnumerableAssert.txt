Compiled from "ObjectEnumerableAssert.java"
public interface org.assertj.core.api.ObjectEnumerableAssert<SELF extends org.assertj.core.api.ObjectEnumerableAssert<SELF, ELEMENT>, ELEMENT> extends org.assertj.core.api.EnumerableAssert<SELF, ELEMENT> {
  public abstract SELF contains(ELEMENT...);

  public abstract SELF containsOnly(ELEMENT...);

  public abstract SELF containsOnlyNulls();

  public abstract SELF containsOnlyOnce(ELEMENT...);

  public abstract SELF containsExactly(ELEMENT...);

  public abstract SELF containsExactlyInAnyOrder(ELEMENT...);

  public abstract SELF containsExactlyInAnyOrderElementsOf(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF containsSequence(ELEMENT...);

  public abstract SELF containsSequence(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF doesNotContainSequence(ELEMENT...);

  public abstract SELF doesNotContainSequence(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF containsSubsequence(ELEMENT...);

  public abstract SELF containsSubsequence(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF doesNotContainSubsequence(ELEMENT...);

  public abstract SELF doesNotContainSubsequence(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF doesNotContain(ELEMENT...);

  public abstract SELF doesNotHaveDuplicates();

  public abstract SELF startsWith(ELEMENT...);

  public abstract SELF endsWith(ELEMENT, ELEMENT...);

  public abstract SELF endsWith(ELEMENT[]);

  public abstract SELF containsNull();

  public abstract SELF doesNotContainNull();

  public abstract SELF are(org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF areNot(org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF have(org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF doNotHave(org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF areAtLeast(int, org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF areAtLeastOne(org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF areAtMost(int, org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF areExactly(int, org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF haveAtLeastOne(org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF haveAtLeast(int, org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF haveAtMost(int, org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF haveExactly(int, org.assertj.core.api.Condition<? super ELEMENT>);

  public abstract SELF containsAll(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF hasOnlyElementsOfTypes(java.lang.Class<?>...);

  public abstract SELF hasAtLeastOneElementOfType(java.lang.Class<?>);

  public abstract SELF hasOnlyElementsOfType(java.lang.Class<?>);

  public abstract SELF doesNotHaveAnyElementsOfTypes(java.lang.Class<?>...);

  public abstract SELF containsExactlyElementsOf(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF containsOnlyElementsOf(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF hasSameElementsAs(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF doesNotContainAnyElementsOf(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF isSubsetOf(java.lang.Iterable<? extends ELEMENT>);

  public abstract SELF isSubsetOf(ELEMENT...);

  public abstract SELF allMatch(java.util.function.Predicate<? super ELEMENT>);

  public abstract SELF allMatch(java.util.function.Predicate<? super ELEMENT>, java.lang.String);

  public abstract SELF allSatisfy(java.util.function.Consumer<? super ELEMENT>);

  public abstract SELF anyMatch(java.util.function.Predicate<? super ELEMENT>);

  public abstract SELF anySatisfy(java.util.function.Consumer<? super ELEMENT>);

  public abstract SELF containsAnyOf(ELEMENT...);

  public abstract SELF containsAnyElementsOf(java.lang.Iterable<ELEMENT>);

  public abstract SELF noneMatch(java.util.function.Predicate<? super ELEMENT>);
}
