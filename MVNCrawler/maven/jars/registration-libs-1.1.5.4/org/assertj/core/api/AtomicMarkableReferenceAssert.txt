Compiled from "AtomicMarkableReferenceAssert.java"
public class org.assertj.core.api.AtomicMarkableReferenceAssert<VALUE> extends org.assertj.core.api.AbstractAtomicReferenceAssert<org.assertj.core.api.AtomicMarkableReferenceAssert<VALUE>, VALUE, java.util.concurrent.atomic.AtomicMarkableReference<VALUE>> {
  public org.assertj.core.api.AtomicMarkableReferenceAssert(java.util.concurrent.atomic.AtomicMarkableReference<VALUE>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #2                  // class org/assertj/core/api/AtomicMarkableReferenceAssert
       4: iconst_1
       5: invokespecial #11                 // Method org/assertj/core/api/AbstractAtomicReferenceAssert."<init>":(Ljava/lang/Object;Ljava/lang/Class;Z)V
       8: return

  public org.assertj.core.api.AtomicMarkableReferenceAssert<VALUE> hasReference(VALUE);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #22                 // Method org/assertj/core/api/AbstractAtomicReferenceAssert.hasReference:(Ljava/lang/Object;)Lorg/assertj/core/api/AbstractAtomicReferenceAssert;
       5: checkcast     #2                  // class org/assertj/core/api/AtomicMarkableReferenceAssert
       8: areturn

  protected VALUE getReference();
    Code:
       0: aload_0
       1: getfield      #29                 // Field actual:Ljava/lang/Object;
       4: checkcast     #31                 // class java/util/concurrent/atomic/AtomicMarkableReference
       7: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      10: areturn

  public org.assertj.core.api.AtomicMarkableReferenceAssert<VALUE> isMarked();
    Code:
       0: aload_0
       1: getfield      #29                 // Field actual:Ljava/lang/Object;
       4: checkcast     #31                 // class java/util/concurrent/atomic/AtomicMarkableReference
       7: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
      10: istore_1
      11: iload_1
      12: ifne          29
      15: aload_0
      16: aload_0
      17: getfield      #29                 // Field actual:Ljava/lang/Object;
      20: checkcast     #31                 // class java/util/concurrent/atomic/AtomicMarkableReference
      23: invokestatic  #44                 // Method org/assertj/core/error/ShouldBeMarked.shouldBeMarked:(Ljava/util/concurrent/atomic/AtomicMarkableReference;)Lorg/assertj/core/error/ErrorMessageFactory;
      26: invokevirtual #48                 // Method throwAssertionError:(Lorg/assertj/core/error/ErrorMessageFactory;)V
      29: aload_0
      30: areturn

  public org.assertj.core.api.AtomicMarkableReferenceAssert<VALUE> isNotMarked();
    Code:
       0: aload_0
       1: getfield      #29                 // Field actual:Ljava/lang/Object;
       4: checkcast     #31                 // class java/util/concurrent/atomic/AtomicMarkableReference
       7: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
      10: istore_1
      11: iload_1
      12: ifeq          29
      15: aload_0
      16: aload_0
      17: getfield      #29                 // Field actual:Ljava/lang/Object;
      20: checkcast     #31                 // class java/util/concurrent/atomic/AtomicMarkableReference
      23: invokestatic  #54                 // Method org/assertj/core/error/ShouldBeMarked.shouldNotBeMarked:(Ljava/util/concurrent/atomic/AtomicMarkableReference;)Lorg/assertj/core/error/ErrorMessageFactory;
      26: invokevirtual #48                 // Method throwAssertionError:(Lorg/assertj/core/error/ErrorMessageFactory;)V
      29: aload_0
      30: areturn

  public org.assertj.core.api.AbstractAtomicReferenceAssert hasReference(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #56                 // Method hasReference:(Ljava/lang/Object;)Lorg/assertj/core/api/AtomicMarkableReferenceAssert;
       5: areturn
}
