Compiled from "DynamicType.java"
public interface org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> {
  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> visit(org.modelmapper.internal.bytebuddy.asm.AsmVisitorWrapper);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> name(java.lang.String);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> modifiers(org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForType...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> modifiers(java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForType>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> modifiers(int);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> merge(org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForType...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> merge(java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForType>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> attribute(org.modelmapper.internal.bytebuddy.implementation.attribute.TypeAttributeAppender);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> annotateType(java.lang.annotation.Annotation...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> annotateType(java.util.List<? extends java.lang.annotation.Annotation>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> annotateType(org.modelmapper.internal.bytebuddy.description.annotation.AnnotationDescription...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> annotateType(java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.annotation.AnnotationDescription>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition$Optional<T> implement(java.lang.reflect.Type...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition$Optional<T> implement(java.util.List<? extends java.lang.reflect.Type>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition$Optional<T> implement(org.modelmapper.internal.bytebuddy.description.type.TypeDefinition...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition$Optional<T> implement(java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.type.TypeDefinition>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> initializer(org.modelmapper.internal.bytebuddy.implementation.bytecode.ByteCodeAppender);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> initializer(org.modelmapper.internal.bytebuddy.implementation.LoadedTypeInitializer);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String, java.lang.reflect.Type...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String, java.util.List<? extends java.lang.reflect.Type>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String, org.modelmapper.internal.bytebuddy.description.type.TypeDefinition...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String, java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.type.TypeDefinition>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> transform(org.modelmapper.internal.bytebuddy.matcher.ElementMatcher<? super org.modelmapper.internal.bytebuddy.description.type.TypeDescription$Generic>, org.modelmapper.internal.bytebuddy.dynamic.Transformer<org.modelmapper.internal.bytebuddy.description.type.TypeVariableToken>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, java.lang.reflect.Type, org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForField...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, java.lang.reflect.Type, java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForField>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, java.lang.reflect.Type, int);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, org.modelmapper.internal.bytebuddy.description.type.TypeDefinition, org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForField...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, org.modelmapper.internal.bytebuddy.description.type.TypeDefinition, java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForField>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, org.modelmapper.internal.bytebuddy.description.type.TypeDefinition, int);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> define(java.lang.reflect.Field);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> define(org.modelmapper.internal.bytebuddy.description.field.FieldDescription);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> serialVersionUid(long);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Valuable<T> field(org.modelmapper.internal.bytebuddy.matcher.ElementMatcher<? super org.modelmapper.internal.bytebuddy.description.field.FieldDescription>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Valuable<T> field(org.modelmapper.internal.bytebuddy.matcher.LatentMatcher<? super org.modelmapper.internal.bytebuddy.description.field.FieldDescription>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> ignoreAlso(org.modelmapper.internal.bytebuddy.matcher.ElementMatcher<? super org.modelmapper.internal.bytebuddy.description.method.MethodDescription>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> ignoreAlso(org.modelmapper.internal.bytebuddy.matcher.LatentMatcher<? super org.modelmapper.internal.bytebuddy.description.method.MethodDescription>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, java.lang.reflect.Type, org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForMethod...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, java.lang.reflect.Type, java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForMethod>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, java.lang.reflect.Type, int);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, org.modelmapper.internal.bytebuddy.description.type.TypeDefinition, org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForMethod...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, org.modelmapper.internal.bytebuddy.description.type.TypeDefinition, java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForMethod>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, org.modelmapper.internal.bytebuddy.description.type.TypeDefinition, int);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineConstructor(org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForMethod...);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineConstructor(java.util.Collection<? extends org.modelmapper.internal.bytebuddy.description.modifier.ModifierContributor$ForMethod>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineConstructor(int);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> define(java.lang.reflect.Method);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> define(java.lang.reflect.Constructor<?>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> define(org.modelmapper.internal.bytebuddy.description.method.MethodDescription);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> defineProperty(java.lang.String, java.lang.reflect.Type);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> defineProperty(java.lang.String, java.lang.reflect.Type, boolean);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> defineProperty(java.lang.String, org.modelmapper.internal.bytebuddy.description.type.TypeDefinition);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> defineProperty(java.lang.String, org.modelmapper.internal.bytebuddy.description.type.TypeDefinition, boolean);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> method(org.modelmapper.internal.bytebuddy.matcher.ElementMatcher<? super org.modelmapper.internal.bytebuddy.description.method.MethodDescription>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> constructor(org.modelmapper.internal.bytebuddy.matcher.ElementMatcher<? super org.modelmapper.internal.bytebuddy.description.method.MethodDescription>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> invokable(org.modelmapper.internal.bytebuddy.matcher.ElementMatcher<? super org.modelmapper.internal.bytebuddy.description.method.MethodDescription>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> invokable(org.modelmapper.internal.bytebuddy.matcher.LatentMatcher<? super org.modelmapper.internal.bytebuddy.description.method.MethodDescription>);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> withHashCodeEquals();

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Builder<T> withToString();

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Unloaded<T> make();

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Unloaded<T> make(org.modelmapper.internal.bytebuddy.dynamic.TypeResolutionStrategy);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Unloaded<T> make(org.modelmapper.internal.bytebuddy.pool.TypePool);

  public abstract org.modelmapper.internal.bytebuddy.dynamic.DynamicType$Unloaded<T> make(org.modelmapper.internal.bytebuddy.dynamic.TypeResolutionStrategy, org.modelmapper.internal.bytebuddy.pool.TypePool);
}
