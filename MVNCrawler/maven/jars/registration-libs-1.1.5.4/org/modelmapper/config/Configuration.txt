Compiled from "Configuration.java"
public interface org.modelmapper.config.Configuration {
  public abstract <T> org.modelmapper.config.Configuration addValueReader(org.modelmapper.spi.ValueReader<T>);

  public abstract <T> org.modelmapper.config.Configuration addValueWriter(org.modelmapper.spi.ValueWriter<T>);

  public abstract org.modelmapper.config.Configuration copy();

  public abstract java.util.List<org.modelmapper.spi.ConditionalConverter<?, ?>> getConverters();

  public abstract org.modelmapper.spi.NameTokenizer getDestinationNameTokenizer();

  public abstract org.modelmapper.spi.NameTransformer getDestinationNameTransformer();

  public abstract org.modelmapper.spi.NamingConvention getDestinationNamingConvention();

  public abstract org.modelmapper.config.Configuration$AccessLevel getFieldAccessLevel();

  public abstract org.modelmapper.spi.MatchingStrategy getMatchingStrategy();

  public abstract org.modelmapper.config.Configuration$AccessLevel getMethodAccessLevel();

  public abstract org.modelmapper.Condition<?, ?> getPropertyCondition();

  public abstract org.modelmapper.Provider<?> getProvider();

  public abstract org.modelmapper.spi.NameTokenizer getSourceNameTokenizer();

  public abstract org.modelmapper.spi.NameTransformer getSourceNameTransformer();

  public abstract org.modelmapper.spi.NamingConvention getSourceNamingConvention();

  public abstract java.util.List<org.modelmapper.spi.ValueReader<?>> getValueReaders();

  public abstract java.util.List<org.modelmapper.spi.ValueWriter<?>> getValueWriters();

  public abstract boolean isAmbiguityIgnored();

  public abstract boolean isFieldMatchingEnabled();

  public abstract boolean isFullTypeMatchingRequired();

  public abstract boolean isImplicitMappingEnabled();

  public abstract boolean isSkipNullEnabled();

  public abstract boolean isUseOSGiClassLoaderBridging();

  public abstract boolean isDeepCopyEnabled();

  public abstract org.modelmapper.config.Configuration setAmbiguityIgnored(boolean);

  public abstract org.modelmapper.config.Configuration setDestinationNameTokenizer(org.modelmapper.spi.NameTokenizer);

  public abstract org.modelmapper.config.Configuration setDestinationNameTransformer(org.modelmapper.spi.NameTransformer);

  public abstract org.modelmapper.config.Configuration setDestinationNamingConvention(org.modelmapper.spi.NamingConvention);

  public abstract org.modelmapper.config.Configuration setFieldAccessLevel(org.modelmapper.config.Configuration$AccessLevel);

  public abstract org.modelmapper.config.Configuration setFieldMatchingEnabled(boolean);

  public abstract org.modelmapper.config.Configuration setFullTypeMatchingRequired(boolean);

  public abstract org.modelmapper.config.Configuration setImplicitMappingEnabled(boolean);

  public abstract org.modelmapper.config.Configuration setSkipNullEnabled(boolean);

  public abstract org.modelmapper.config.Configuration setDeepCopyEnabled(boolean);

  public abstract org.modelmapper.config.Configuration setUseOSGiClassLoaderBridging(boolean);

  public abstract org.modelmapper.config.Configuration setMatchingStrategy(org.modelmapper.spi.MatchingStrategy);

  public abstract org.modelmapper.config.Configuration setMethodAccessLevel(org.modelmapper.config.Configuration$AccessLevel);

  public abstract org.modelmapper.config.Configuration setPropertyCondition(org.modelmapper.Condition<?, ?>);

  public abstract org.modelmapper.config.Configuration setProvider(org.modelmapper.Provider<?>);

  public abstract org.modelmapper.config.Configuration setSourceNameTokenizer(org.modelmapper.spi.NameTokenizer);

  public abstract org.modelmapper.config.Configuration setSourceNameTransformer(org.modelmapper.spi.NameTransformer);

  public abstract org.modelmapper.config.Configuration setSourceNamingConvention(org.modelmapper.spi.NamingConvention);
}
