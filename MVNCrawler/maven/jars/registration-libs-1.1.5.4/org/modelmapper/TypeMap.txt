Compiled from "TypeMap.java"
public interface org.modelmapper.TypeMap<S, D> {
  public abstract org.modelmapper.TypeMap<S, D> addMappings(org.modelmapper.PropertyMap<S, D>);

  public abstract org.modelmapper.Condition<?, ?> getCondition();

  public abstract org.modelmapper.Converter<S, D> getConverter();

  public abstract java.lang.Class<D> getDestinationType();

  public abstract java.util.List<org.modelmapper.spi.Mapping> getMappings();

  public abstract java.lang.String getName();

  public abstract org.modelmapper.Converter<S, D> getPostConverter();

  public abstract org.modelmapper.Converter<S, D> getPreConverter();

  public abstract org.modelmapper.Condition<?, ?> getPropertyCondition();

  public abstract org.modelmapper.Converter<?, ?> getPropertyConverter();

  public abstract org.modelmapper.Provider<?> getPropertyProvider();

  public abstract org.modelmapper.Provider<D> getProvider();

  public abstract java.lang.Class<S> getSourceType();

  public abstract java.util.List<org.modelmapper.spi.PropertyInfo> getUnmappedProperties();

  public abstract D map(S);

  public abstract void map(S, D);

  public abstract org.modelmapper.TypeMap<S, D> setCondition(org.modelmapper.Condition<?, ?>);

  public abstract org.modelmapper.TypeMap<S, D> setConverter(org.modelmapper.Converter<S, D>);

  public abstract org.modelmapper.TypeMap<S, D> setPostConverter(org.modelmapper.Converter<S, D>);

  public abstract org.modelmapper.TypeMap<S, D> setPreConverter(org.modelmapper.Converter<S, D>);

  public abstract org.modelmapper.TypeMap<S, D> setPropertyCondition(org.modelmapper.Condition<?, ?>);

  public abstract org.modelmapper.TypeMap<S, D> setPropertyConverter(org.modelmapper.Converter<?, ?>);

  public abstract org.modelmapper.TypeMap<S, D> setPropertyProvider(org.modelmapper.Provider<?>);

  public abstract org.modelmapper.TypeMap<S, D> setProvider(org.modelmapper.Provider<D>);

  public abstract void validate();

  public abstract <V> org.modelmapper.TypeMap<S, D> addMapping(org.modelmapper.spi.SourceGetter<S>, org.modelmapper.spi.DestinationSetter<D, V>);

  public abstract org.modelmapper.TypeMap<S, D> addMappings(org.modelmapper.ExpressionMap<S, D>);

  public abstract <DS extends S, DD extends D> org.modelmapper.TypeMap<S, D> include(java.lang.Class<DS>, java.lang.Class<DD>);

  public abstract org.modelmapper.TypeMap<S, D> includeBase(java.lang.Class<? super S>, java.lang.Class<? super D>);

  public abstract <P> org.modelmapper.TypeMap<S, D> include(org.modelmapper.spi.TypeSafeSourceGetter<S, P>, java.lang.Class<P>);

  public abstract org.modelmapper.TypeMap<S, D> implicitMappings();
}
