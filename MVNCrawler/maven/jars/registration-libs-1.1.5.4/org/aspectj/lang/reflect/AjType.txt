Compiled from "AjType.java"
public interface org.aspectj.lang.reflect.AjType<T> extends java.lang.reflect.Type, java.lang.reflect.AnnotatedElement {
  public abstract java.lang.String getName();

  public abstract java.lang.Package getPackage();

  public abstract org.aspectj.lang.reflect.AjType<?>[] getInterfaces();

  public abstract int getModifiers();

  public abstract java.lang.Class<T> getJavaClass();

  public abstract org.aspectj.lang.reflect.AjType<?> getSupertype();

  public abstract java.lang.reflect.Type getGenericSupertype();

  public abstract java.lang.reflect.Method getEnclosingMethod();

  public abstract java.lang.reflect.Constructor getEnclosingConstructor();

  public abstract org.aspectj.lang.reflect.AjType<?> getEnclosingType();

  public abstract org.aspectj.lang.reflect.AjType<?> getDeclaringType();

  public abstract org.aspectj.lang.reflect.PerClause getPerClause();

  public abstract org.aspectj.lang.reflect.AjType<?>[] getAjTypes();

  public abstract org.aspectj.lang.reflect.AjType<?>[] getDeclaredAjTypes();

  public abstract java.lang.reflect.Constructor getConstructor(org.aspectj.lang.reflect.AjType<?>...) throws java.lang.NoSuchMethodException;

  public abstract java.lang.reflect.Constructor[] getConstructors();

  public abstract java.lang.reflect.Constructor getDeclaredConstructor(org.aspectj.lang.reflect.AjType<?>...) throws java.lang.NoSuchMethodException;

  public abstract java.lang.reflect.Constructor[] getDeclaredConstructors();

  public abstract java.lang.reflect.Field getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException;

  public abstract java.lang.reflect.Field[] getDeclaredFields();

  public abstract java.lang.reflect.Field getField(java.lang.String) throws java.lang.NoSuchFieldException;

  public abstract java.lang.reflect.Field[] getFields();

  public abstract java.lang.reflect.Method getDeclaredMethod(java.lang.String, org.aspectj.lang.reflect.AjType<?>...) throws java.lang.NoSuchMethodException;

  public abstract java.lang.reflect.Method getMethod(java.lang.String, org.aspectj.lang.reflect.AjType<?>...) throws java.lang.NoSuchMethodException;

  public abstract java.lang.reflect.Method[] getDeclaredMethods();

  public abstract java.lang.reflect.Method[] getMethods();

  public abstract org.aspectj.lang.reflect.Pointcut getDeclaredPointcut(java.lang.String) throws org.aspectj.lang.reflect.NoSuchPointcutException;

  public abstract org.aspectj.lang.reflect.Pointcut getPointcut(java.lang.String) throws org.aspectj.lang.reflect.NoSuchPointcutException;

  public abstract org.aspectj.lang.reflect.Pointcut[] getDeclaredPointcuts();

  public abstract org.aspectj.lang.reflect.Pointcut[] getPointcuts();

  public abstract org.aspectj.lang.reflect.Advice[] getDeclaredAdvice(org.aspectj.lang.reflect.AdviceKind...);

  public abstract org.aspectj.lang.reflect.Advice[] getAdvice(org.aspectj.lang.reflect.AdviceKind...);

  public abstract org.aspectj.lang.reflect.Advice getAdvice(java.lang.String) throws org.aspectj.lang.reflect.NoSuchAdviceException;

  public abstract org.aspectj.lang.reflect.Advice getDeclaredAdvice(java.lang.String) throws org.aspectj.lang.reflect.NoSuchAdviceException;

  public abstract org.aspectj.lang.reflect.InterTypeMethodDeclaration getDeclaredITDMethod(java.lang.String, org.aspectj.lang.reflect.AjType<?>, org.aspectj.lang.reflect.AjType<?>...) throws java.lang.NoSuchMethodException;

  public abstract org.aspectj.lang.reflect.InterTypeMethodDeclaration[] getDeclaredITDMethods();

  public abstract org.aspectj.lang.reflect.InterTypeMethodDeclaration getITDMethod(java.lang.String, org.aspectj.lang.reflect.AjType<?>, org.aspectj.lang.reflect.AjType<?>...) throws java.lang.NoSuchMethodException;

  public abstract org.aspectj.lang.reflect.InterTypeMethodDeclaration[] getITDMethods();

  public abstract org.aspectj.lang.reflect.InterTypeConstructorDeclaration getDeclaredITDConstructor(org.aspectj.lang.reflect.AjType<?>, org.aspectj.lang.reflect.AjType<?>...) throws java.lang.NoSuchMethodException;

  public abstract org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] getDeclaredITDConstructors();

  public abstract org.aspectj.lang.reflect.InterTypeConstructorDeclaration getITDConstructor(org.aspectj.lang.reflect.AjType<?>, org.aspectj.lang.reflect.AjType<?>...) throws java.lang.NoSuchMethodException;

  public abstract org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] getITDConstructors();

  public abstract org.aspectj.lang.reflect.InterTypeFieldDeclaration getDeclaredITDField(java.lang.String, org.aspectj.lang.reflect.AjType<?>) throws java.lang.NoSuchFieldException;

  public abstract org.aspectj.lang.reflect.InterTypeFieldDeclaration[] getDeclaredITDFields();

  public abstract org.aspectj.lang.reflect.InterTypeFieldDeclaration getITDField(java.lang.String, org.aspectj.lang.reflect.AjType<?>) throws java.lang.NoSuchFieldException;

  public abstract org.aspectj.lang.reflect.InterTypeFieldDeclaration[] getITDFields();

  public abstract org.aspectj.lang.reflect.DeclareErrorOrWarning[] getDeclareErrorOrWarnings();

  public abstract org.aspectj.lang.reflect.DeclareParents[] getDeclareParents();

  public abstract org.aspectj.lang.reflect.DeclareSoft[] getDeclareSofts();

  public abstract org.aspectj.lang.reflect.DeclareAnnotation[] getDeclareAnnotations();

  public abstract org.aspectj.lang.reflect.DeclarePrecedence[] getDeclarePrecedence();

  public abstract T[] getEnumConstants();

  public abstract java.lang.reflect.TypeVariable<java.lang.Class<T>>[] getTypeParameters();

  public abstract boolean isEnum();

  public abstract boolean isInstance(java.lang.Object);

  public abstract boolean isInterface();

  public abstract boolean isLocalClass();

  public abstract boolean isMemberClass();

  public abstract boolean isArray();

  public abstract boolean isPrimitive();

  public abstract boolean isAspect();

  public abstract boolean isMemberAspect();

  public abstract boolean isPrivileged();
}
