Compiled from "HasMemberTypePatternForPerThisMatching.java"
public class org.aspectj.weaver.patterns.HasMemberTypePatternForPerThisMatching extends org.aspectj.weaver.patterns.HasMemberTypePattern {
  public org.aspectj.weaver.patterns.HasMemberTypePatternForPerThisMatching(org.aspectj.weaver.patterns.SignaturePattern);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/aspectj/weaver/patterns/HasMemberTypePattern."<init>":(Lorg/aspectj/weaver/patterns/SignaturePattern;)V
       5: return

  protected boolean hasMethod(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method org/aspectj/weaver/patterns/HasMemberTypePattern.hasMethod:(Lorg/aspectj/weaver/ResolvedType;)Z
       5: istore_2
       6: iload_2
       7: ifeq          12
      10: iconst_1
      11: ireturn
      12: aload_1
      13: invokevirtual #3                  // Method org/aspectj/weaver/ResolvedType.getInterTypeMungersIncludingSupers:()Ljava/util/List;
      16: astore_3
      17: aload_3
      18: invokeinterface #4,  1            // InterfaceMethod java/util/List.size:()I
      23: ifeq          28
      26: iconst_1
      27: ireturn
      28: iconst_0
      29: ireturn

  public void write(org.aspectj.weaver.CompressingDataOutputStream) throws java.io.IOException;
    Code:
       0: new           #5                  // class java/lang/IllegalAccessError
       3: dup
       4: ldc           #6                  // String Should never be called, these are transient and don\'t get serialized
       6: invokespecial #7                  // Method java/lang/IllegalAccessError."<init>":(Ljava/lang/String;)V
       9: athrow
}
