Compiled from "ExactTypePattern.java"
public class org.aspectj.weaver.patterns.ExactTypePattern extends org.aspectj.weaver.patterns.TypePattern {
  protected org.aspectj.weaver.UnresolvedType type;

  protected transient org.aspectj.weaver.ResolvedType resolvedType;

  public boolean checked;

  public boolean isVoid;

  public static final java.util.Map<java.lang.String, java.lang.Class<?>> primitiveTypesMap;

  public static final java.util.Map<java.lang.String, java.lang.Class<?>> boxedPrimitivesMap;

  private static final java.util.Map<java.lang.String, java.lang.Class<?>> boxedTypesMap;

  private static final byte EXACT_VERSION;

  protected boolean matchesSubtypes(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/aspectj/weaver/patterns/TypePattern.matchesSubtypes:(Lorg/aspectj/weaver/ResolvedType;)Z
       5: istore_2
       6: iload_2
       7: ifeq          12
      10: iload_2
      11: ireturn
      12: aload_1
      13: invokevirtual #2                  // Method org/aspectj/weaver/ResolvedType.isArray:()Z
      16: ifeq          74
      19: aload_0
      20: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      23: invokevirtual #4                  // Method org/aspectj/weaver/UnresolvedType.isArray:()Z
      26: ifeq          74
      29: aload_1
      30: invokevirtual #5                  // Method org/aspectj/weaver/ResolvedType.getComponentType:()Lorg/aspectj/weaver/UnresolvedType;
      33: aload_1
      34: invokevirtual #6                  // Method org/aspectj/weaver/ResolvedType.getWorld:()Lorg/aspectj/weaver/World;
      37: invokevirtual #7                  // Method org/aspectj/weaver/UnresolvedType.resolve:(Lorg/aspectj/weaver/World;)Lorg/aspectj/weaver/ResolvedType;
      40: astore_3
      41: aload_0
      42: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      45: invokevirtual #8                  // Method org/aspectj/weaver/UnresolvedType.getComponentType:()Lorg/aspectj/weaver/UnresolvedType;
      48: astore        4
      50: new           #9                  // class org/aspectj/weaver/patterns/ExactTypePattern
      53: dup
      54: aload         4
      56: aload_0
      57: getfield      #10                 // Field includeSubtypes:Z
      60: iconst_0
      61: invokespecial #11                 // Method "<init>":(Lorg/aspectj/weaver/UnresolvedType;ZZ)V
      64: astore        5
      66: aload         5
      68: aload_3
      69: aload_1
      70: invokevirtual #12                 // Method matchesSubtypes:(Lorg/aspectj/weaver/ResolvedType;Lorg/aspectj/weaver/ResolvedType;)Z
      73: ireturn
      74: iload_2
      75: ireturn

  public org.aspectj.weaver.patterns.ExactTypePattern(org.aspectj.weaver.UnresolvedType, boolean, boolean);
    Code:
       0: aload_0
       1: iload_2
       2: iload_3
       3: invokespecial #13                 // Method org/aspectj/weaver/patterns/TypePattern."<init>":(ZZ)V
       6: aload_0
       7: iconst_0
       8: putfield      #14                 // Field checked:Z
      11: aload_0
      12: iconst_0
      13: putfield      #15                 // Field isVoid:Z
      16: aload_0
      17: aload_1
      18: putfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      21: return

  public boolean isArray();
    Code:
       0: aload_0
       1: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
       4: invokevirtual #4                  // Method org/aspectj/weaver/UnresolvedType.isArray:()Z
       7: ireturn

  protected boolean couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #16                 // Method org/aspectj/weaver/patterns/TypePattern.couldEverMatchSameTypesAs:(Lorg/aspectj/weaver/patterns/TypePattern;)Z
       5: ifeq          10
       8: iconst_1
       9: ireturn
      10: aload_1
      11: invokevirtual #17                 // Method org/aspectj/weaver/patterns/TypePattern.getExactType:()Lorg/aspectj/weaver/UnresolvedType;
      14: astore_2
      15: aload_2
      16: invokestatic  #18                 // Method org/aspectj/weaver/ResolvedType.isMissing:(Lorg/aspectj/weaver/UnresolvedType;)Z
      19: ifne          31
      22: aload_0
      23: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      26: aload_2
      27: invokevirtual #19                 // Method org/aspectj/weaver/UnresolvedType.equals:(Ljava/lang/Object;)Z
      30: ireturn
      31: aload_1
      32: instanceof    #20                 // class org/aspectj/weaver/patterns/WildTypePattern
      35: ifeq          72
      38: aload_1
      39: checkcast     #20                 // class org/aspectj/weaver/patterns/WildTypePattern
      42: astore_3
      43: aload_3
      44: invokevirtual #21                 // Method org/aspectj/weaver/patterns/WildTypePattern.getNamePatterns:()[Lorg/aspectj/weaver/patterns/NamePattern;
      47: iconst_0
      48: aaload
      49: invokevirtual #22                 // Method org/aspectj/weaver/patterns/NamePattern.maybeGetSimpleName:()Ljava/lang/String;
      52: astore        4
      54: aload         4
      56: ifnull        72
      59: aload_0
      60: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      63: invokevirtual #23                 // Method org/aspectj/weaver/UnresolvedType.getName:()Ljava/lang/String;
      66: aload         4
      68: invokevirtual #24                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      71: ireturn
      72: iconst_1
      73: ireturn

  protected boolean matchesExactly(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
       4: aload_1
       5: invokevirtual #19                 // Method org/aspectj/weaver/UnresolvedType.equals:(Ljava/lang/Object;)Z
       8: istore_2
       9: iload_2
      10: ifne          39
      13: aload_1
      14: invokevirtual #25                 // Method org/aspectj/weaver/ResolvedType.isParameterizedType:()Z
      17: ifne          27
      20: aload_1
      21: invokevirtual #26                 // Method org/aspectj/weaver/ResolvedType.isGenericType:()Z
      24: ifeq          39
      27: aload_0
      28: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      31: aload_1
      32: invokevirtual #27                 // Method org/aspectj/weaver/ResolvedType.getRawType:()Lorg/aspectj/weaver/ResolvedType;
      35: invokevirtual #19                 // Method org/aspectj/weaver/UnresolvedType.equals:(Ljava/lang/Object;)Z
      38: istore_2
      39: iload_2
      40: ifne          59
      43: aload_1
      44: invokevirtual #28                 // Method org/aspectj/weaver/ResolvedType.isTypeVariableReference:()Z
      47: ifeq          59
      50: aload_0
      51: aload_1
      52: checkcast     #29                 // class org/aspectj/weaver/TypeVariableReferenceType
      55: invokespecial #30                 // Method matchesTypeVariable:(Lorg/aspectj/weaver/TypeVariableReferenceType;)Z
      58: istore_2
      59: iload_2
      60: ifne          65
      63: iconst_0
      64: ireturn
      65: aload_0
      66: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      69: aload_1
      70: invokevirtual #6                  // Method org/aspectj/weaver/ResolvedType.getWorld:()Lorg/aspectj/weaver/World;
      73: invokevirtual #32                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.resolve:(Lorg/aspectj/weaver/World;)V
      76: iconst_0
      77: istore_3
      78: aload_1
      79: getfield      #33                 // Field org/aspectj/weaver/ResolvedType.temporaryAnnotationTypes:[Lorg/aspectj/weaver/ResolvedType;
      82: ifnull        104
      85: aload_0
      86: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      89: aload_1
      90: aload_1
      91: getfield      #33                 // Field org/aspectj/weaver/ResolvedType.temporaryAnnotationTypes:[Lorg/aspectj/weaver/ResolvedType;
      94: invokevirtual #34                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.matches:(Lorg/aspectj/weaver/AnnotatedElement;[Lorg/aspectj/weaver/ResolvedType;)Lorg/aspectj/util/FuzzyBoolean;
      97: invokevirtual #35                 // Method org/aspectj/util/FuzzyBoolean.alwaysTrue:()Z
     100: istore_3
     101: goto          116
     104: aload_0
     105: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
     108: aload_1
     109: invokevirtual #36                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.matches:(Lorg/aspectj/weaver/AnnotatedElement;)Lorg/aspectj/util/FuzzyBoolean;
     112: invokevirtual #35                 // Method org/aspectj/util/FuzzyBoolean.alwaysTrue:()Z
     115: istore_3
     116: iload_2
     117: ifeq          128
     120: iload_3
     121: ifeq          128
     124: iconst_1
     125: goto          129
     128: iconst_0
     129: ireturn

  private boolean matchesTypeVariable(org.aspectj.weaver.TypeVariableReferenceType);
    Code:
       0: aload_0
       1: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
       4: aload_1
       5: invokeinterface #37,  1           // InterfaceMethod org/aspectj/weaver/TypeVariableReference.getTypeVariable:()Lorg/aspectj/weaver/TypeVariable;
      10: invokevirtual #38                 // Method org/aspectj/weaver/TypeVariable.getFirstBound:()Lorg/aspectj/weaver/UnresolvedType;
      13: invokevirtual #19                 // Method org/aspectj/weaver/UnresolvedType.equals:(Ljava/lang/Object;)Z
      16: ireturn

  protected boolean matchesExactly(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
       4: aload_1
       5: invokevirtual #19                 // Method org/aspectj/weaver/UnresolvedType.equals:(Ljava/lang/Object;)Z
       8: istore_3
       9: iload_3
      10: ifne          39
      13: aload_1
      14: invokevirtual #25                 // Method org/aspectj/weaver/ResolvedType.isParameterizedType:()Z
      17: ifne          27
      20: aload_1
      21: invokevirtual #26                 // Method org/aspectj/weaver/ResolvedType.isGenericType:()Z
      24: ifeq          39
      27: aload_0
      28: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      31: aload_1
      32: invokevirtual #27                 // Method org/aspectj/weaver/ResolvedType.getRawType:()Lorg/aspectj/weaver/ResolvedType;
      35: invokevirtual #19                 // Method org/aspectj/weaver/UnresolvedType.equals:(Ljava/lang/Object;)Z
      38: istore_3
      39: iload_3
      40: ifne          59
      43: aload_1
      44: invokevirtual #28                 // Method org/aspectj/weaver/ResolvedType.isTypeVariableReference:()Z
      47: ifeq          59
      50: aload_0
      51: aload_1
      52: checkcast     #29                 // class org/aspectj/weaver/TypeVariableReferenceType
      55: invokespecial #30                 // Method matchesTypeVariable:(Lorg/aspectj/weaver/TypeVariableReferenceType;)Z
      58: istore_3
      59: aload_0
      60: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      63: aload_1
      64: invokevirtual #6                  // Method org/aspectj/weaver/ResolvedType.getWorld:()Lorg/aspectj/weaver/World;
      67: invokevirtual #32                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.resolve:(Lorg/aspectj/weaver/World;)V
      70: iconst_0
      71: istore        4
      73: aload_2
      74: getfield      #33                 // Field org/aspectj/weaver/ResolvedType.temporaryAnnotationTypes:[Lorg/aspectj/weaver/ResolvedType;
      77: ifnull        100
      80: aload_0
      81: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      84: aload_2
      85: aload_2
      86: getfield      #33                 // Field org/aspectj/weaver/ResolvedType.temporaryAnnotationTypes:[Lorg/aspectj/weaver/ResolvedType;
      89: invokevirtual #34                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.matches:(Lorg/aspectj/weaver/AnnotatedElement;[Lorg/aspectj/weaver/ResolvedType;)Lorg/aspectj/util/FuzzyBoolean;
      92: invokevirtual #35                 // Method org/aspectj/util/FuzzyBoolean.alwaysTrue:()Z
      95: istore        4
      97: goto          113
     100: aload_0
     101: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
     104: aload_2
     105: invokevirtual #36                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.matches:(Lorg/aspectj/weaver/AnnotatedElement;)Lorg/aspectj/util/FuzzyBoolean;
     108: invokevirtual #35                 // Method org/aspectj/util/FuzzyBoolean.alwaysTrue:()Z
     111: istore        4
     113: iload_3
     114: ifeq          126
     117: iload         4
     119: ifeq          126
     122: iconst_1
     123: goto          127
     126: iconst_0
     127: ireturn

  public org.aspectj.weaver.UnresolvedType getType();
    Code:
       0: aload_0
       1: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
       4: areturn

  public org.aspectj.weaver.ResolvedType getResolvedExactType(org.aspectj.weaver.World);
    Code:
       0: aload_0
       1: getfield      #39                 // Field resolvedType:Lorg/aspectj/weaver/ResolvedType;
       4: ifnonnull     19
       7: aload_0
       8: aload_1
       9: aload_0
      10: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      13: invokevirtual #40                 // Method org/aspectj/weaver/World.resolve:(Lorg/aspectj/weaver/UnresolvedType;)Lorg/aspectj/weaver/ResolvedType;
      16: putfield      #39                 // Field resolvedType:Lorg/aspectj/weaver/ResolvedType;
      19: aload_0
      20: getfield      #39                 // Field resolvedType:Lorg/aspectj/weaver/ResolvedType;
      23: areturn

  public boolean isVoid();
    Code:
       0: aload_0
       1: getfield      #14                 // Field checked:Z
       4: ifne          28
       7: aload_0
       8: aload_0
       9: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      12: invokevirtual #41                 // Method org/aspectj/weaver/UnresolvedType.getSignature:()Ljava/lang/String;
      15: ldc           #42                 // String V
      17: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      20: putfield      #15                 // Field isVoid:Z
      23: aload_0
      24: iconst_1
      25: putfield      #14                 // Field checked:Z
      28: aload_0
      29: getfield      #15                 // Field isVoid:Z
      32: ireturn

  public org.aspectj.util.FuzzyBoolean matchesInstanceof(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
       4: aload_1
       5: invokevirtual #6                  // Method org/aspectj/weaver/ResolvedType.getWorld:()Lorg/aspectj/weaver/World;
       8: invokevirtual #32                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.resolve:(Lorg/aspectj/weaver/World;)V
      11: aload_0
      12: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      15: getstatic     #44                 // Field org/aspectj/weaver/ResolvedType.OBJECT:Lorg/aspectj/weaver/UnresolvedType;
      18: invokevirtual #19                 // Method org/aspectj/weaver/UnresolvedType.equals:(Ljava/lang/Object;)Z
      21: ifeq          39
      24: getstatic     #45                 // Field org/aspectj/util/FuzzyBoolean.YES:Lorg/aspectj/util/FuzzyBoolean;
      27: aload_0
      28: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      31: aload_1
      32: invokevirtual #36                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.matches:(Lorg/aspectj/weaver/AnnotatedElement;)Lorg/aspectj/util/FuzzyBoolean;
      35: invokevirtual #46                 // Method org/aspectj/util/FuzzyBoolean.and:(Lorg/aspectj/util/FuzzyBoolean;)Lorg/aspectj/util/FuzzyBoolean;
      38: areturn
      39: aload_0
      40: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      43: aload_1
      44: invokevirtual #6                  // Method org/aspectj/weaver/ResolvedType.getWorld:()Lorg/aspectj/weaver/World;
      47: invokevirtual #7                  // Method org/aspectj/weaver/UnresolvedType.resolve:(Lorg/aspectj/weaver/World;)Lorg/aspectj/weaver/ResolvedType;
      50: astore_2
      51: aload_2
      52: aload_1
      53: invokevirtual #47                 // Method org/aspectj/weaver/ResolvedType.isAssignableFrom:(Lorg/aspectj/weaver/ResolvedType;)Z
      56: ifeq          74
      59: getstatic     #45                 // Field org/aspectj/util/FuzzyBoolean.YES:Lorg/aspectj/util/FuzzyBoolean;
      62: aload_0
      63: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      66: aload_1
      67: invokevirtual #36                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.matches:(Lorg/aspectj/weaver/AnnotatedElement;)Lorg/aspectj/util/FuzzyBoolean;
      70: invokevirtual #46                 // Method org/aspectj/util/FuzzyBoolean.and:(Lorg/aspectj/util/FuzzyBoolean;)Lorg/aspectj/util/FuzzyBoolean;
      73: areturn
      74: aload_0
      75: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      78: invokevirtual #48                 // Method org/aspectj/weaver/UnresolvedType.isPrimitiveType:()Z
      81: ifeq          88
      84: getstatic     #49                 // Field org/aspectj/util/FuzzyBoolean.NO:Lorg/aspectj/util/FuzzyBoolean;
      87: areturn
      88: aload_1
      89: aload_0
      90: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      93: aload_1
      94: invokevirtual #6                  // Method org/aspectj/weaver/ResolvedType.getWorld:()Lorg/aspectj/weaver/World;
      97: invokevirtual #7                  // Method org/aspectj/weaver/UnresolvedType.resolve:(Lorg/aspectj/weaver/World;)Lorg/aspectj/weaver/ResolvedType;
     100: invokevirtual #50                 // Method org/aspectj/weaver/ResolvedType.isCoerceableFrom:(Lorg/aspectj/weaver/ResolvedType;)Z
     103: ifeq          112
     106: getstatic     #51                 // Field org/aspectj/util/FuzzyBoolean.MAYBE:Lorg/aspectj/util/FuzzyBoolean;
     109: goto          115
     112: getstatic     #49                 // Field org/aspectj/util/FuzzyBoolean.NO:Lorg/aspectj/util/FuzzyBoolean;
     115: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #9                  // class org/aspectj/weaver/patterns/ExactTypePattern
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: instanceof    #52                 // class org/aspectj/weaver/patterns/BindingTypePattern
      13: ifeq          18
      16: iconst_0
      17: ireturn
      18: aload_1
      19: checkcast     #9                  // class org/aspectj/weaver/patterns/ExactTypePattern
      22: astore_2
      23: aload_0
      24: getfield      #10                 // Field includeSubtypes:Z
      27: aload_2
      28: getfield      #10                 // Field includeSubtypes:Z
      31: if_icmpeq     36
      34: iconst_0
      35: ireturn
      36: aload_0
      37: getfield      #53                 // Field isVarArgs:Z
      40: aload_2
      41: getfield      #53                 // Field isVarArgs:Z
      44: if_icmpeq     49
      47: iconst_0
      48: ireturn
      49: aload_0
      50: getfield      #54                 // Field typeParameters:Lorg/aspectj/weaver/patterns/TypePatternList;
      53: aload_2
      54: getfield      #54                 // Field typeParameters:Lorg/aspectj/weaver/patterns/TypePatternList;
      57: invokevirtual #55                 // Method org/aspectj/weaver/patterns/TypePatternList.equals:(Ljava/lang/Object;)Z
      60: ifne          65
      63: iconst_0
      64: ireturn
      65: aload_2
      66: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      69: aload_0
      70: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      73: invokevirtual #19                 // Method org/aspectj/weaver/UnresolvedType.equals:(Ljava/lang/Object;)Z
      76: ifeq          97
      79: aload_2
      80: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      83: aload_0
      84: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      87: invokevirtual #56                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      90: ifeq          97
      93: iconst_1
      94: goto          98
      97: iconst_0
      98: ireturn

  public int hashCode();
    Code:
       0: bipush        17
       2: istore_1
       3: bipush        37
       5: iload_1
       6: imul
       7: aload_0
       8: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      11: invokevirtual #57                 // Method org/aspectj/weaver/UnresolvedType.hashCode:()I
      14: iadd
      15: istore_1
      16: bipush        37
      18: iload_1
      19: imul
      20: new           #58                 // class java/lang/Boolean
      23: dup
      24: aload_0
      25: getfield      #10                 // Field includeSubtypes:Z
      28: invokespecial #59                 // Method java/lang/Boolean."<init>":(Z)V
      31: invokevirtual #60                 // Method java/lang/Boolean.hashCode:()I
      34: iadd
      35: istore_1
      36: bipush        37
      38: iload_1
      39: imul
      40: new           #58                 // class java/lang/Boolean
      43: dup
      44: aload_0
      45: getfield      #53                 // Field isVarArgs:Z
      48: invokespecial #59                 // Method java/lang/Boolean."<init>":(Z)V
      51: invokevirtual #60                 // Method java/lang/Boolean.hashCode:()I
      54: iadd
      55: istore_1
      56: bipush        37
      58: iload_1
      59: imul
      60: aload_0
      61: getfield      #54                 // Field typeParameters:Lorg/aspectj/weaver/patterns/TypePatternList;
      64: invokevirtual #61                 // Method org/aspectj/weaver/patterns/TypePatternList.hashCode:()I
      67: iadd
      68: istore_1
      69: bipush        37
      71: iload_1
      72: imul
      73: aload_0
      74: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      77: invokevirtual #62                 // Method java/lang/Object.hashCode:()I
      80: iadd
      81: istore_1
      82: iload_1
      83: ireturn

  public void write(org.aspectj.weaver.CompressingDataOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: iconst_2
       2: invokevirtual #64                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeByte:(I)V
       5: aload_1
       6: iconst_1
       7: invokevirtual #64                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeByte:(I)V
      10: aload_1
      11: aload_0
      12: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      15: invokevirtual #41                 // Method org/aspectj/weaver/UnresolvedType.getSignature:()Ljava/lang/String;
      18: invokevirtual #65                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeCompressedSignature:(Ljava/lang/String;)V
      21: aload_1
      22: aload_0
      23: getfield      #10                 // Field includeSubtypes:Z
      26: invokevirtual #66                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeBoolean:(Z)V
      29: aload_1
      30: aload_0
      31: getfield      #53                 // Field isVarArgs:Z
      34: invokevirtual #66                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeBoolean:(Z)V
      37: aload_0
      38: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      41: aload_1
      42: invokevirtual #67                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.write:(Lorg/aspectj/weaver/CompressingDataOutputStream;)V
      45: aload_0
      46: getfield      #54                 // Field typeParameters:Lorg/aspectj/weaver/patterns/TypePatternList;
      49: aload_1
      50: invokevirtual #68                 // Method org/aspectj/weaver/patterns/TypePatternList.write:(Lorg/aspectj/weaver/CompressingDataOutputStream;)V
      53: aload_0
      54: aload_1
      55: invokevirtual #69                 // Method writeLocation:(Ljava/io/DataOutputStream;)V
      58: return

  public static org.aspectj.weaver.patterns.TypePattern read(org.aspectj.weaver.VersionedDataInputStream, org.aspectj.weaver.ISourceContext) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method org/aspectj/weaver/VersionedDataInputStream.getMajorVersion:()I
       4: iconst_2
       5: if_icmplt     14
       8: aload_0
       9: aload_1
      10: invokestatic  #72                 // Method readTypePattern150:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
      13: areturn
      14: aload_0
      15: aload_1
      16: invokestatic  #73                 // Method readTypePatternOldStyle:(Ljava/io/DataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
      19: areturn

  public static org.aspectj.weaver.patterns.TypePattern readTypePattern150(org.aspectj.weaver.VersionedDataInputStream, org.aspectj.weaver.ISourceContext) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method org/aspectj/weaver/VersionedDataInputStream.readByte:()B
       4: istore_2
       5: iload_2
       6: iconst_1
       7: if_icmple     20
      10: new           #75                 // class org/aspectj/weaver/BCException
      13: dup
      14: ldc           #76                 // String ExactTypePattern was written by a more recent version of AspectJ
      16: invokespecial #77                 // Method org/aspectj/weaver/BCException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: new           #9                  // class org/aspectj/weaver/patterns/ExactTypePattern
      23: dup
      24: aload_0
      25: invokevirtual #78                 // Method org/aspectj/weaver/VersionedDataInputStream.isAtLeast169:()Z
      28: ifeq          38
      31: aload_0
      32: invokevirtual #79                 // Method org/aspectj/weaver/VersionedDataInputStream.readSignatureAsUnresolvedType:()Lorg/aspectj/weaver/UnresolvedType;
      35: goto          42
      38: aload_0
      39: invokestatic  #80                 // Method org/aspectj/weaver/UnresolvedType.read:(Ljava/io/DataInputStream;)Lorg/aspectj/weaver/UnresolvedType;
      42: aload_0
      43: invokevirtual #81                 // Method org/aspectj/weaver/VersionedDataInputStream.readBoolean:()Z
      46: aload_0
      47: invokevirtual #81                 // Method org/aspectj/weaver/VersionedDataInputStream.readBoolean:()Z
      50: invokespecial #11                 // Method "<init>":(Lorg/aspectj/weaver/UnresolvedType;ZZ)V
      53: astore_3
      54: aload_3
      55: aload_0
      56: aload_1
      57: invokestatic  #82                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      60: invokevirtual #83                 // Method org/aspectj/weaver/patterns/TypePattern.setAnnotationTypePattern:(Lorg/aspectj/weaver/patterns/AnnotationTypePattern;)V
      63: aload_3
      64: aload_0
      65: aload_1
      66: invokestatic  #84                 // Method org/aspectj/weaver/patterns/TypePatternList.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePatternList;
      69: invokevirtual #85                 // Method org/aspectj/weaver/patterns/TypePattern.setTypeParameters:(Lorg/aspectj/weaver/patterns/TypePatternList;)V
      72: aload_3
      73: aload_1
      74: aload_0
      75: invokevirtual #86                 // Method org/aspectj/weaver/patterns/TypePattern.readLocation:(Lorg/aspectj/weaver/ISourceContext;Ljava/io/DataInputStream;)V
      78: aload_3
      79: areturn

  public static org.aspectj.weaver.patterns.TypePattern readTypePatternOldStyle(java.io.DataInputStream, org.aspectj.weaver.ISourceContext) throws java.io.IOException;
    Code:
       0: new           #9                  // class org/aspectj/weaver/patterns/ExactTypePattern
       3: dup
       4: aload_0
       5: invokestatic  #80                 // Method org/aspectj/weaver/UnresolvedType.read:(Ljava/io/DataInputStream;)Lorg/aspectj/weaver/UnresolvedType;
       8: aload_0
       9: invokevirtual #87                 // Method java/io/DataInputStream.readBoolean:()Z
      12: iconst_0
      13: invokespecial #11                 // Method "<init>":(Lorg/aspectj/weaver/UnresolvedType;ZZ)V
      16: astore_2
      17: aload_2
      18: aload_1
      19: aload_0
      20: invokevirtual #86                 // Method org/aspectj/weaver/patterns/TypePattern.readLocation:(Lorg/aspectj/weaver/ISourceContext;Ljava/io/DataInputStream;)V
      23: aload_2
      24: areturn

  public java.lang.String toString();
    Code:
       0: new           #88                 // class java/lang/StringBuffer
       3: dup
       4: invokespecial #89                 // Method java/lang/StringBuffer."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      12: getstatic     #90                 // Field org/aspectj/weaver/patterns/AnnotationTypePattern.ANY:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      15: if_acmpeq     44
      18: aload_1
      19: bipush        40
      21: invokevirtual #91                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      24: pop
      25: aload_1
      26: aload_0
      27: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      30: invokevirtual #92                 // Method java/lang/Object.toString:()Ljava/lang/String;
      33: invokevirtual #93                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      36: pop
      37: aload_1
      38: bipush        32
      40: invokevirtual #91                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      43: pop
      44: aload_0
      45: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      48: invokevirtual #94                 // Method org/aspectj/weaver/UnresolvedType.toString:()Ljava/lang/String;
      51: astore_2
      52: aload_0
      53: getfield      #53                 // Field isVarArgs:Z
      56: ifeq          71
      59: aload_2
      60: iconst_0
      61: aload_2
      62: bipush        91
      64: invokevirtual #95                 // Method java/lang/String.lastIndexOf:(I)I
      67: invokevirtual #96                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      70: astore_2
      71: aload_1
      72: aload_2
      73: invokevirtual #93                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      76: pop
      77: aload_0
      78: getfield      #10                 // Field includeSubtypes:Z
      81: ifeq          91
      84: aload_1
      85: bipush        43
      87: invokevirtual #91                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      90: pop
      91: aload_0
      92: getfield      #53                 // Field isVarArgs:Z
      95: ifeq          105
      98: aload_1
      99: ldc           #97                 // String ...
     101: invokevirtual #93                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     104: pop
     105: aload_0
     106: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
     109: getstatic     #90                 // Field org/aspectj/weaver/patterns/AnnotationTypePattern.ANY:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
     112: if_acmpeq     122
     115: aload_1
     116: bipush        41
     118: invokevirtual #91                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
     121: pop
     122: aload_1
     123: invokevirtual #98                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     126: areturn

  public org.aspectj.weaver.patterns.TypePattern resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings, boolean, boolean);
    Code:
       0: new           #75                 // class org/aspectj/weaver/BCException
       3: dup
       4: ldc           #99                 // String trying to re-resolve
       6: invokespecial #77                 // Method org/aspectj/weaver/BCException."<init>":(Ljava/lang/String;)V
       9: athrow

  public org.aspectj.weaver.patterns.TypePattern parameterizeWith(java.util.Map<java.lang.String, org.aspectj.weaver.UnresolvedType>, org.aspectj.weaver.World);
    Code:
       0: aload_0
       1: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
       4: astore_3
       5: aload_0
       6: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
       9: invokevirtual #100                // Method org/aspectj/weaver/UnresolvedType.isTypeVariableReference:()Z
      12: ifeq          62
      15: aload_0
      16: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      19: checkcast     #101                // class org/aspectj/weaver/TypeVariableReference
      22: astore        4
      24: aload         4
      26: invokeinterface #37,  1           // InterfaceMethod org/aspectj/weaver/TypeVariableReference.getTypeVariable:()Lorg/aspectj/weaver/TypeVariable;
      31: invokevirtual #102                // Method org/aspectj/weaver/TypeVariable.getName:()Ljava/lang/String;
      34: astore        5
      36: aload_1
      37: aload         5
      39: invokeinterface #103,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      44: ifeq          59
      47: aload_1
      48: aload         5
      50: invokeinterface #104,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      55: checkcast     #105                // class org/aspectj/weaver/UnresolvedType
      58: astore_3
      59: goto          85
      62: aload_0
      63: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      66: invokevirtual #106                // Method org/aspectj/weaver/UnresolvedType.isParameterizedType:()Z
      69: ifeq          85
      72: aload_2
      73: aload_0
      74: getfield      #3                  // Field type:Lorg/aspectj/weaver/UnresolvedType;
      77: invokevirtual #40                 // Method org/aspectj/weaver/World.resolve:(Lorg/aspectj/weaver/UnresolvedType;)Lorg/aspectj/weaver/ResolvedType;
      80: aload_1
      81: invokevirtual #107                // Method org/aspectj/weaver/ResolvedType.parameterize:(Ljava/util/Map;)Lorg/aspectj/weaver/UnresolvedType;
      84: astore_3
      85: new           #9                  // class org/aspectj/weaver/patterns/ExactTypePattern
      88: dup
      89: aload_3
      90: aload_0
      91: getfield      #10                 // Field includeSubtypes:Z
      94: aload_0
      95: getfield      #53                 // Field isVarArgs:Z
      98: invokespecial #11                 // Method "<init>":(Lorg/aspectj/weaver/UnresolvedType;ZZ)V
     101: astore        4
     103: aload         4
     105: aload_0
     106: getfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
     109: aload_1
     110: aload_2
     111: invokevirtual #108                // Method org/aspectj/weaver/patterns/AnnotationTypePattern.parameterizeWith:(Ljava/util/Map;Lorg/aspectj/weaver/World;)Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
     114: putfield      #31                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
     117: aload         4
     119: aload_0
     120: invokevirtual #109                // Method copyLocationFrom:(Lorg/aspectj/weaver/patterns/PatternNode;)V
     123: aload         4
     125: areturn

  public java.lang.Object accept(org.aspectj.weaver.patterns.PatternNodeVisitor, java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: invokeinterface #110,  3          // InterfaceMethod org/aspectj/weaver/patterns/PatternNodeVisitor.visit:(Lorg/aspectj/weaver/patterns/ExactTypePattern;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  static {};
    Code:
       0: new           #111                // class java/util/HashMap
       3: dup
       4: invokespecial #112                // Method java/util/HashMap."<init>":()V
       7: putstatic     #113                // Field primitiveTypesMap:Ljava/util/Map;
      10: getstatic     #113                // Field primitiveTypesMap:Ljava/util/Map;
      13: ldc           #114                // String int
      15: getstatic     #115                // Field java/lang/Integer.TYPE:Ljava/lang/Class;
      18: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      23: pop
      24: getstatic     #113                // Field primitiveTypesMap:Ljava/util/Map;
      27: ldc           #117                // String short
      29: getstatic     #118                // Field java/lang/Short.TYPE:Ljava/lang/Class;
      32: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: pop
      38: getstatic     #113                // Field primitiveTypesMap:Ljava/util/Map;
      41: ldc           #119                // String long
      43: getstatic     #120                // Field java/lang/Long.TYPE:Ljava/lang/Class;
      46: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      51: pop
      52: getstatic     #113                // Field primitiveTypesMap:Ljava/util/Map;
      55: ldc           #121                // String byte
      57: getstatic     #122                // Field java/lang/Byte.TYPE:Ljava/lang/Class;
      60: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      65: pop
      66: getstatic     #113                // Field primitiveTypesMap:Ljava/util/Map;
      69: ldc           #123                // String char
      71: getstatic     #124                // Field java/lang/Character.TYPE:Ljava/lang/Class;
      74: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      79: pop
      80: getstatic     #113                // Field primitiveTypesMap:Ljava/util/Map;
      83: ldc           #125                // String float
      85: getstatic     #126                // Field java/lang/Float.TYPE:Ljava/lang/Class;
      88: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      93: pop
      94: getstatic     #113                // Field primitiveTypesMap:Ljava/util/Map;
      97: ldc           #127                // String double
      99: getstatic     #128                // Field java/lang/Double.TYPE:Ljava/lang/Class;
     102: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     107: pop
     108: new           #111                // class java/util/HashMap
     111: dup
     112: invokespecial #112                // Method java/util/HashMap."<init>":()V
     115: putstatic     #129                // Field boxedPrimitivesMap:Ljava/util/Map;
     118: getstatic     #129                // Field boxedPrimitivesMap:Ljava/util/Map;
     121: ldc           #130                // String java.lang.Integer
     123: ldc           #131                // class java/lang/Integer
     125: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     130: pop
     131: getstatic     #129                // Field boxedPrimitivesMap:Ljava/util/Map;
     134: ldc           #132                // String java.lang.Short
     136: ldc           #133                // class java/lang/Short
     138: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     143: pop
     144: getstatic     #129                // Field boxedPrimitivesMap:Ljava/util/Map;
     147: ldc           #134                // String java.lang.Long
     149: ldc           #135                // class java/lang/Long
     151: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     156: pop
     157: getstatic     #129                // Field boxedPrimitivesMap:Ljava/util/Map;
     160: ldc           #136                // String java.lang.Byte
     162: ldc           #137                // class java/lang/Byte
     164: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     169: pop
     170: getstatic     #129                // Field boxedPrimitivesMap:Ljava/util/Map;
     173: ldc           #138                // String java.lang.Character
     175: ldc           #139                // class java/lang/Character
     177: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     182: pop
     183: getstatic     #129                // Field boxedPrimitivesMap:Ljava/util/Map;
     186: ldc           #140                // String java.lang.Float
     188: ldc           #141                // class java/lang/Float
     190: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     195: pop
     196: getstatic     #129                // Field boxedPrimitivesMap:Ljava/util/Map;
     199: ldc           #142                // String java.lang.Double
     201: ldc           #143                // class java/lang/Double
     203: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     208: pop
     209: new           #111                // class java/util/HashMap
     212: dup
     213: invokespecial #112                // Method java/util/HashMap."<init>":()V
     216: putstatic     #144                // Field boxedTypesMap:Ljava/util/Map;
     219: getstatic     #144                // Field boxedTypesMap:Ljava/util/Map;
     222: ldc           #114                // String int
     224: ldc           #131                // class java/lang/Integer
     226: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     231: pop
     232: getstatic     #144                // Field boxedTypesMap:Ljava/util/Map;
     235: ldc           #117                // String short
     237: ldc           #133                // class java/lang/Short
     239: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     244: pop
     245: getstatic     #144                // Field boxedTypesMap:Ljava/util/Map;
     248: ldc           #119                // String long
     250: ldc           #135                // class java/lang/Long
     252: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     257: pop
     258: getstatic     #144                // Field boxedTypesMap:Ljava/util/Map;
     261: ldc           #121                // String byte
     263: ldc           #137                // class java/lang/Byte
     265: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     270: pop
     271: getstatic     #144                // Field boxedTypesMap:Ljava/util/Map;
     274: ldc           #123                // String char
     276: ldc           #139                // class java/lang/Character
     278: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     283: pop
     284: getstatic     #144                // Field boxedTypesMap:Ljava/util/Map;
     287: ldc           #125                // String float
     289: ldc           #141                // class java/lang/Float
     291: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     296: pop
     297: getstatic     #144                // Field boxedTypesMap:Ljava/util/Map;
     300: ldc           #127                // String double
     302: ldc           #143                // class java/lang/Double
     304: invokeinterface #116,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     309: pop
     310: return
}
