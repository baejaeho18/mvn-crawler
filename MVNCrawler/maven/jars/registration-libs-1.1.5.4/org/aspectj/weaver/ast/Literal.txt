Compiled from "Literal.java"
public final class org.aspectj.weaver.ast.Literal extends org.aspectj.weaver.ast.Test {
  boolean noTest;

  boolean val;

  public static final org.aspectj.weaver.ast.Literal TRUE;

  public static final org.aspectj.weaver.ast.Literal FALSE;

  private org.aspectj.weaver.ast.Literal(boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/aspectj/weaver/ast/Test."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field val:Z
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field noTest:Z
      14: return

  public void accept(org.aspectj.weaver.ast.ITestVisitor);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #4,  2            // InterfaceMethod org/aspectj/weaver/ast/ITestVisitor.visit:(Lorg/aspectj/weaver/ast/Literal;)V
       7: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #3                  // Field noTest:Z
       4: ifeq          12
       7: ldc           #5                  // String NO_TEST
       9: goto          26
      12: aload_0
      13: getfield      #2                  // Field val:Z
      16: ifeq          24
      19: ldc           #6                  // String TRUE
      21: goto          26
      24: ldc           #7                  // String FALSE
      26: areturn

  static {};
    Code:
       0: new           #8                  // class org/aspectj/weaver/ast/Literal
       3: dup
       4: iconst_1
       5: iconst_0
       6: invokespecial #9                  // Method "<init>":(ZZ)V
       9: putstatic     #10                 // Field TRUE:Lorg/aspectj/weaver/ast/Literal;
      12: new           #8                  // class org/aspectj/weaver/ast/Literal
      15: dup
      16: iconst_0
      17: iconst_0
      18: invokespecial #9                  // Method "<init>":(ZZ)V
      21: putstatic     #11                 // Field FALSE:Lorg/aspectj/weaver/ast/Literal;
      24: return
}
