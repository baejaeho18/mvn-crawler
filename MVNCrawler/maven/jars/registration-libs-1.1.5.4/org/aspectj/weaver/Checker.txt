Compiled from "Checker.java"
public class org.aspectj.weaver.Checker extends org.aspectj.weaver.ShadowMunger {
  private boolean isError;

  private java.lang.String message;

  private volatile int hashCode;

  private org.aspectj.weaver.Checker();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/aspectj/weaver/ShadowMunger."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #2                  // Field hashCode:I
       9: return

  public org.aspectj.weaver.Checker(org.aspectj.weaver.patterns.DeclareErrorOrWarning);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method org/aspectj/weaver/patterns/DeclareErrorOrWarning.getPointcut:()Lorg/aspectj/weaver/patterns/Pointcut;
       5: aload_1
       6: invokevirtual #4                  // Method org/aspectj/weaver/patterns/DeclareErrorOrWarning.getStart:()I
       9: aload_1
      10: invokevirtual #5                  // Method org/aspectj/weaver/patterns/DeclareErrorOrWarning.getEnd:()I
      13: aload_1
      14: invokevirtual #6                  // Method org/aspectj/weaver/patterns/DeclareErrorOrWarning.getSourceContext:()Lorg/aspectj/weaver/ISourceContext;
      17: iconst_2
      18: invokespecial #8                  // Method org/aspectj/weaver/ShadowMunger."<init>":(Lorg/aspectj/weaver/patterns/Pointcut;IILorg/aspectj/weaver/ISourceContext;I)V
      21: aload_0
      22: iconst_m1
      23: putfield      #2                  // Field hashCode:I
      26: aload_0
      27: aload_1
      28: invokevirtual #9                  // Method org/aspectj/weaver/patterns/DeclareErrorOrWarning.getMessage:()Ljava/lang/String;
      31: putfield      #10                 // Field message:Ljava/lang/String;
      34: aload_0
      35: aload_1
      36: invokevirtual #11                 // Method org/aspectj/weaver/patterns/DeclareErrorOrWarning.isError:()Z
      39: putfield      #12                 // Field isError:Z
      42: return

  private org.aspectj.weaver.Checker(org.aspectj.weaver.patterns.Pointcut, int, int, org.aspectj.weaver.ISourceContext, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aload         4
       6: iconst_2
       7: invokespecial #8                  // Method org/aspectj/weaver/ShadowMunger."<init>":(Lorg/aspectj/weaver/patterns/Pointcut;IILorg/aspectj/weaver/ISourceContext;I)V
      10: aload_0
      11: iconst_m1
      12: putfield      #2                  // Field hashCode:I
      15: aload_0
      16: aload         5
      18: putfield      #10                 // Field message:Ljava/lang/String;
      21: aload_0
      22: iload         6
      24: putfield      #12                 // Field isError:Z
      27: return

  public boolean isError();
    Code:
       0: aload_0
       1: getfield      #12                 // Field isError:Z
       4: ireturn

  public java.lang.String getMessage(org.aspectj.weaver.Shadow);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field message:Ljava/lang/String;
       5: aload_1
       6: invokespecial #13                 // Method format:(Ljava/lang/String;Lorg/aspectj/weaver/Shadow;)Ljava/lang/String;
       9: areturn

  public void specializeOn(org.aspectj.weaver.Shadow);
    Code:
       0: new           #14                 // class java/lang/IllegalStateException
       3: dup
       4: ldc           #15                 // String Cannot call specializeOn(...) for a Checker
       6: invokespecial #16                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  public boolean implementOn(org.aspectj.weaver.Shadow);
    Code:
       0: new           #14                 // class java/lang/IllegalStateException
       3: dup
       4: ldc           #17                 // String Cannot call implementOn(...) for a Checker
       6: invokespecial #16                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  public boolean match(org.aspectj.weaver.Shadow, org.aspectj.weaver.World);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #18                 // Method org/aspectj/weaver/ShadowMunger.match:(Lorg/aspectj/weaver/Shadow;Lorg/aspectj/weaver/World;)Z
       6: ifeq          15
       9: aload_2
      10: aload_0
      11: aload_1
      12: invokevirtual #19                 // Method org/aspectj/weaver/World.reportCheckerMatch:(Lorg/aspectj/weaver/Checker;Lorg/aspectj/weaver/Shadow;)V
      15: iconst_0
      16: ireturn

  public int compareTo(java.lang.Object);
    Code:
       0: iconst_0
       1: ireturn

  public boolean mustCheckExceptions();
    Code:
       0: iconst_1
       1: ireturn

  public java.util.Collection<org.aspectj.weaver.ResolvedType> getThrownExceptions();
    Code:
       0: invokestatic  #20                 // Method java/util/Collections.emptyList:()Ljava/util/List;
       3: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #21                 // class org/aspectj/weaver/Checker
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #21                 // class org/aspectj/weaver/Checker
      13: astore_2
      14: aload_2
      15: getfield      #12                 // Field isError:Z
      18: aload_0
      19: getfield      #12                 // Field isError:Z
      22: if_icmpne     60
      25: aload_2
      26: getfield      #22                 // Field pointcut:Lorg/aspectj/weaver/patterns/Pointcut;
      29: ifnonnull     42
      32: aload_0
      33: getfield      #22                 // Field pointcut:Lorg/aspectj/weaver/patterns/Pointcut;
      36: ifnonnull     60
      39: goto          56
      42: aload_2
      43: getfield      #22                 // Field pointcut:Lorg/aspectj/weaver/patterns/Pointcut;
      46: aload_0
      47: getfield      #22                 // Field pointcut:Lorg/aspectj/weaver/patterns/Pointcut;
      50: invokevirtual #23                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      53: ifeq          60
      56: iconst_1
      57: goto          61
      60: iconst_0
      61: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field hashCode:I
       4: iconst_m1
       5: if_icmpne     58
       8: bipush        17
      10: istore_1
      11: bipush        37
      13: iload_1
      14: imul
      15: aload_0
      16: getfield      #12                 // Field isError:Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: iadd
      28: istore_1
      29: bipush        37
      31: iload_1
      32: imul
      33: aload_0
      34: getfield      #22                 // Field pointcut:Lorg/aspectj/weaver/patterns/Pointcut;
      37: ifnonnull     44
      40: iconst_0
      41: goto          51
      44: aload_0
      45: getfield      #22                 // Field pointcut:Lorg/aspectj/weaver/patterns/Pointcut;
      48: invokevirtual #24                 // Method java/lang/Object.hashCode:()I
      51: iadd
      52: istore_1
      53: aload_0
      54: iload_1
      55: putfield      #2                  // Field hashCode:I
      58: aload_0
      59: getfield      #2                  // Field hashCode:I
      62: ireturn

  public org.aspectj.weaver.ShadowMunger parameterizeWith(org.aspectj.weaver.ResolvedType, java.util.Map<java.lang.String, org.aspectj.weaver.UnresolvedType>);
    Code:
       0: new           #21                 // class org/aspectj/weaver/Checker
       3: dup
       4: aload_0
       5: getfield      #22                 // Field pointcut:Lorg/aspectj/weaver/patterns/Pointcut;
       8: aload_2
       9: aload_1
      10: invokevirtual #25                 // Method org/aspectj/weaver/ResolvedType.getWorld:()Lorg/aspectj/weaver/World;
      13: invokevirtual #26                 // Method org/aspectj/weaver/patterns/Pointcut.parameterizeWith:(Ljava/util/Map;Lorg/aspectj/weaver/World;)Lorg/aspectj/weaver/patterns/Pointcut;
      16: aload_0
      17: getfield      #27                 // Field start:I
      20: aload_0
      21: getfield      #28                 // Field end:I
      24: aload_0
      25: getfield      #29                 // Field sourceContext:Lorg/aspectj/weaver/ISourceContext;
      28: aload_0
      29: getfield      #10                 // Field message:Ljava/lang/String;
      32: aload_0
      33: getfield      #12                 // Field isError:Z
      36: invokespecial #30                 // Method "<init>":(Lorg/aspectj/weaver/patterns/Pointcut;IILorg/aspectj/weaver/ISourceContext;Ljava/lang/String;Z)V
      39: astore_3
      40: aload_3
      41: areturn

  public org.aspectj.weaver.ShadowMunger concretize(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.World, org.aspectj.weaver.patterns.PerClause);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #22                 // Field pointcut:Lorg/aspectj/weaver/patterns/Pointcut;
       5: aload_1
       6: aload_0
       7: invokevirtual #31                 // Method getDeclaringType:()Lorg/aspectj/weaver/ResolvedType;
      10: iconst_0
      11: aload_0
      12: invokevirtual #32                 // Method org/aspectj/weaver/patterns/Pointcut.concretize:(Lorg/aspectj/weaver/ResolvedType;Lorg/aspectj/weaver/ResolvedType;ILorg/aspectj/weaver/ShadowMunger;)Lorg/aspectj/weaver/patterns/Pointcut;
      15: putfield      #22                 // Field pointcut:Lorg/aspectj/weaver/patterns/Pointcut;
      18: aload_0
      19: iconst_m1
      20: putfield      #2                  // Field hashCode:I
      23: aload_0
      24: areturn

  public org.aspectj.weaver.ResolvedType getConcreteAspect();
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method getDeclaringType:()Lorg/aspectj/weaver/ResolvedType;
       4: areturn

  private int nextCurly(java.lang.String, int);
    Code:
       0: aload_1
       1: bipush        123
       3: iload_2
       4: invokevirtual #33                 // Method java/lang/String.indexOf:(II)I
       7: istore_3
       8: iload_3
       9: iconst_m1
      10: if_icmpne     15
      13: iconst_m1
      14: ireturn
      15: iload_3
      16: ifne          21
      19: iconst_0
      20: ireturn
      21: aload_1
      22: iload_3
      23: iconst_1
      24: isub
      25: invokevirtual #34                 // Method java/lang/String.charAt:(I)C
      28: bipush        92
      30: if_icmpeq     35
      33: iload_3
      34: ireturn
      35: iload_3
      36: iconst_1
      37: iadd
      38: istore_2
      39: iload_2
      40: aload_1
      41: invokevirtual #35                 // Method java/lang/String.length:()I
      44: if_icmplt     0
      47: iconst_m1
      48: ireturn

  private java.lang.String format(java.lang.String, org.aspectj.weaver.Shadow);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: aload_1
       4: iconst_0
       5: invokespecial #36                 // Method nextCurly:(Ljava/lang/String;I)I
       8: istore        4
      10: iload         4
      12: iconst_m1
      13: if_icmpne     37
      16: aload_1
      17: bipush        123
      19: invokevirtual #37                 // Method java/lang/String.indexOf:(I)I
      22: iconst_m1
      23: if_icmpeq     35
      26: aload_1
      27: ldc           #38                 // String \\{
      29: ldc           #39                 // String {
      31: invokevirtual #40                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
      34: areturn
      35: aload_1
      36: areturn
      37: new           #41                 // class java/lang/StringBuffer
      40: dup
      41: invokespecial #42                 // Method java/lang/StringBuffer."<init>":()V
      44: astore        5
      46: iload         4
      48: iflt          145
      51: iload         4
      53: ifle          76
      56: aload         5
      58: aload_1
      59: iload_3
      60: iload         4
      62: invokevirtual #43                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      65: ldc           #38                 // String \\{
      67: ldc           #39                 // String {
      69: invokevirtual #40                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
      72: invokevirtual #44                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      75: pop
      76: aload_1
      77: bipush        125
      79: iload         4
      81: invokevirtual #33                 // Method java/lang/String.indexOf:(II)I
      84: istore        6
      86: iload         6
      88: iconst_m1
      89: if_icmpne     108
      92: aload         5
      94: bipush        123
      96: invokevirtual #45                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      99: pop
     100: iload         4
     102: iconst_1
     103: iadd
     104: istore_3
     105: goto          129
     108: aload         5
     110: aload_0
     111: aload_1
     112: iload         4
     114: iconst_1
     115: iadd
     116: iload         6
     118: invokevirtual #43                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     121: aload_2
     122: invokespecial #46                 // Method getValue:(Ljava/lang/String;Lorg/aspectj/weaver/Shadow;)Ljava/lang/String;
     125: invokevirtual #44                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     128: pop
     129: iload         6
     131: iconst_1
     132: iadd
     133: istore_3
     134: aload_0
     135: aload_1
     136: iload_3
     137: invokespecial #36                 // Method nextCurly:(Ljava/lang/String;I)I
     140: istore        4
     142: goto          46
     145: aload         5
     147: aload_1
     148: iload_3
     149: aload_1
     150: invokevirtual #35                 // Method java/lang/String.length:()I
     153: invokevirtual #43                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     156: invokevirtual #44                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     159: pop
     160: aload         5
     162: invokevirtual #47                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     165: areturn

  private java.lang.String getValue(java.lang.String, org.aspectj.weaver.Shadow);
    Code:
       0: aload_1
       1: ldc           #48                 // String joinpoint
       3: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          14
       9: aload_2
      10: invokevirtual #50                 // Method org/aspectj/weaver/Shadow.toString:()Ljava/lang/String;
      13: areturn
      14: aload_1
      15: ldc           #51                 // String joinpoint.kind
      17: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      20: ifeq          31
      23: aload_2
      24: invokevirtual #52                 // Method org/aspectj/weaver/Shadow.getKind:()Lorg/aspectj/weaver/Shadow$Kind;
      27: invokevirtual #53                 // Method org/aspectj/weaver/Shadow$Kind.getName:()Ljava/lang/String;
      30: areturn
      31: aload_1
      32: ldc           #54                 // String joinpoint.enclosingclass
      34: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      37: ifeq          48
      40: aload_2
      41: invokevirtual #55                 // Method org/aspectj/weaver/Shadow.getEnclosingType:()Lorg/aspectj/weaver/UnresolvedType;
      44: invokevirtual #56                 // Method org/aspectj/weaver/UnresolvedType.getName:()Ljava/lang/String;
      47: areturn
      48: aload_1
      49: ldc           #57                 // String joinpoint.enclosingmember.name
      51: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      54: ifeq          76
      57: aload_2
      58: invokevirtual #58                 // Method org/aspectj/weaver/Shadow.getEnclosingCodeSignature:()Lorg/aspectj/weaver/Member;
      61: astore_3
      62: aload_3
      63: ifnonnull     69
      66: ldc           #59                 // String
      68: areturn
      69: aload_3
      70: invokeinterface #60,  1           // InterfaceMethod org/aspectj/weaver/Member.getName:()Ljava/lang/String;
      75: areturn
      76: aload_1
      77: ldc           #61                 // String joinpoint.enclosingmember
      79: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      82: ifeq          102
      85: aload_2
      86: invokevirtual #58                 // Method org/aspectj/weaver/Shadow.getEnclosingCodeSignature:()Lorg/aspectj/weaver/Member;
      89: astore_3
      90: aload_3
      91: ifnonnull     97
      94: ldc           #59                 // String
      96: areturn
      97: aload_3
      98: invokevirtual #62                 // Method java/lang/Object.toString:()Ljava/lang/String;
     101: areturn
     102: aload_1
     103: ldc           #63                 // String joinpoint.signature
     105: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     108: ifeq          119
     111: aload_2
     112: invokevirtual #64                 // Method org/aspectj/weaver/Shadow.getSignature:()Lorg/aspectj/weaver/Member;
     115: invokevirtual #62                 // Method java/lang/Object.toString:()Ljava/lang/String;
     118: areturn
     119: aload_1
     120: ldc           #65                 // String joinpoint.signature.declaringtype
     122: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     125: ifeq          141
     128: aload_2
     129: invokevirtual #64                 // Method org/aspectj/weaver/Shadow.getSignature:()Lorg/aspectj/weaver/Member;
     132: invokeinterface #66,  1           // InterfaceMethod org/aspectj/weaver/Member.getDeclaringType:()Lorg/aspectj/weaver/UnresolvedType;
     137: invokevirtual #67                 // Method org/aspectj/weaver/UnresolvedType.toString:()Ljava/lang/String;
     140: areturn
     141: aload_1
     142: ldc           #68                 // String joinpoint.signature.name
     144: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     147: ifeq          160
     150: aload_2
     151: invokevirtual #64                 // Method org/aspectj/weaver/Shadow.getSignature:()Lorg/aspectj/weaver/Member;
     154: invokeinterface #60,  1           // InterfaceMethod org/aspectj/weaver/Member.getName:()Ljava/lang/String;
     159: areturn
     160: aload_1
     161: ldc           #69                 // String joinpoint.sourcelocation.sourcefile
     163: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     166: ifeq          200
     169: aload_2
     170: invokevirtual #70                 // Method org/aspectj/weaver/Shadow.getSourceLocation:()Lorg/aspectj/bridge/ISourceLocation;
     173: astore_3
     174: aload_3
     175: ifnull        197
     178: aload_3
     179: invokeinterface #71,  1           // InterfaceMethod org/aspectj/bridge/ISourceLocation.getSourceFile:()Ljava/io/File;
     184: ifnull        197
     187: aload_3
     188: invokeinterface #71,  1           // InterfaceMethod org/aspectj/bridge/ISourceLocation.getSourceFile:()Ljava/io/File;
     193: invokevirtual #72                 // Method java/io/File.toString:()Ljava/lang/String;
     196: areturn
     197: ldc           #73                 // String UNKNOWN
     199: areturn
     200: aload_1
     201: ldc           #74                 // String joinpoint.sourcelocation.line
     203: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     206: ifeq          231
     209: aload_2
     210: invokevirtual #70                 // Method org/aspectj/weaver/Shadow.getSourceLocation:()Lorg/aspectj/bridge/ISourceLocation;
     213: astore_3
     214: aload_3
     215: ifnull        228
     218: aload_3
     219: invokeinterface #75,  1           // InterfaceMethod org/aspectj/bridge/ISourceLocation.getLine:()I
     224: invokestatic  #76                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     227: areturn
     228: ldc           #77                 // String -1
     230: areturn
     231: aload_1
     232: ldc           #78                 // String advice.aspecttype
     234: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     237: ifeq          248
     240: aload_0
     241: invokevirtual #31                 // Method getDeclaringType:()Lorg/aspectj/weaver/ResolvedType;
     244: invokevirtual #79                 // Method org/aspectj/weaver/ResolvedType.getName:()Ljava/lang/String;
     247: areturn
     248: aload_1
     249: ldc           #80                 // String advice.sourcelocation.line
     251: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     254: ifeq          288
     257: aload_0
     258: invokevirtual #81                 // Method getSourceLocation:()Lorg/aspectj/bridge/ISourceLocation;
     261: astore_3
     262: aload_3
     263: ifnull        285
     266: aload_3
     267: invokeinterface #71,  1           // InterfaceMethod org/aspectj/bridge/ISourceLocation.getSourceFile:()Ljava/io/File;
     272: ifnull        285
     275: aload_3
     276: invokeinterface #75,  1           // InterfaceMethod org/aspectj/bridge/ISourceLocation.getLine:()I
     281: invokestatic  #76                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     284: areturn
     285: ldc           #77                 // String -1
     287: areturn
     288: aload_1
     289: ldc           #82                 // String advice.sourcelocation.sourcefile
     291: invokevirtual #49                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     294: ifeq          328
     297: aload_0
     298: invokevirtual #81                 // Method getSourceLocation:()Lorg/aspectj/bridge/ISourceLocation;
     301: astore_3
     302: aload_3
     303: ifnull        325
     306: aload_3
     307: invokeinterface #71,  1           // InterfaceMethod org/aspectj/bridge/ISourceLocation.getSourceFile:()Ljava/io/File;
     312: ifnull        325
     315: aload_3
     316: invokeinterface #71,  1           // InterfaceMethod org/aspectj/bridge/ISourceLocation.getSourceFile:()Ljava/io/File;
     321: invokevirtual #72                 // Method java/io/File.toString:()Ljava/lang/String;
     324: areturn
     325: ldc           #73                 // String UNKNOWN
     327: areturn
     328: new           #83                 // class java/lang/StringBuilder
     331: dup
     332: invokespecial #84                 // Method java/lang/StringBuilder."<init>":()V
     335: ldc           #85                 // String UNKNOWN_KEY{
     337: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     340: aload_1
     341: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     344: ldc           #87                 // String }
     346: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     349: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     352: areturn
}
