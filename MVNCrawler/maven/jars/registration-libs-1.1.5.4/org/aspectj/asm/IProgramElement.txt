Compiled from "IProgramElement.java"
public interface org.aspectj.asm.IProgramElement extends java.io.Serializable {
  public abstract java.util.List<org.aspectj.asm.IProgramElement> getChildren();

  public abstract void setChildren(java.util.List<org.aspectj.asm.IProgramElement>);

  public abstract void addChild(org.aspectj.asm.IProgramElement);

  public abstract boolean removeChild(org.aspectj.asm.IProgramElement);

  public abstract void setExtraInfo(org.aspectj.asm.IProgramElement$ExtraInformation);

  public abstract org.aspectj.asm.IProgramElement$ExtraInformation getExtraInfo();

  public abstract org.aspectj.asm.IProgramElement getParent();

  public abstract void setParent(org.aspectj.asm.IProgramElement);

  public abstract void setParentTypes(java.util.List<java.lang.String>);

  public abstract java.util.List<java.lang.String> getParentTypes();

  public abstract java.lang.String getName();

  public abstract void setName(java.lang.String);

  public abstract java.lang.String getDetails();

  public abstract void setDetails(java.lang.String);

  public abstract org.aspectj.asm.IProgramElement$Kind getKind();

  public abstract void setKind(org.aspectj.asm.IProgramElement$Kind);

  public abstract java.util.List<org.aspectj.asm.IProgramElement$Modifiers> getModifiers();

  public abstract void setModifiers(int);

  public abstract org.aspectj.asm.IProgramElement$Accessibility getAccessibility();

  public abstract java.lang.String getDeclaringType();

  public abstract java.lang.String getPackageName();

  public abstract void setCorrespondingType(java.lang.String);

  public abstract java.lang.String getCorrespondingType();

  public abstract java.lang.String getCorrespondingType(boolean);

  public abstract java.lang.String toSignatureString();

  public abstract java.lang.String toSignatureString(boolean);

  public abstract void setRunnable(boolean);

  public abstract boolean isRunnable();

  public abstract boolean isImplementor();

  public abstract void setImplementor(boolean);

  public abstract boolean isOverrider();

  public abstract void setOverrider(boolean);

  public abstract org.aspectj.bridge.IMessage getMessage();

  public abstract void setMessage(org.aspectj.bridge.IMessage);

  public abstract org.aspectj.bridge.ISourceLocation getSourceLocation();

  public abstract void setSourceLocation(org.aspectj.bridge.ISourceLocation);

  public abstract java.lang.String toString();

  public abstract java.lang.String getFormalComment();

  public abstract void setFormalComment(java.lang.String);

  public abstract java.lang.String toLinkLabelString();

  public abstract java.lang.String toLinkLabelString(boolean);

  public abstract java.lang.String toLabelString();

  public abstract java.lang.String toLabelString(boolean);

  public abstract java.util.List<java.lang.String> getParameterNames();

  public abstract void setParameterNames(java.util.List<java.lang.String>);

  public abstract java.util.List<char[]> getParameterSignatures();

  public abstract java.util.List<java.lang.String> getParameterSignaturesSourceRefs();

  public abstract void setParameterSignatures(java.util.List<char[]>, java.util.List<java.lang.String>);

  public abstract java.util.List<char[]> getParameterTypes();

  public abstract java.lang.String getHandleIdentifier();

  public abstract java.lang.String getHandleIdentifier(boolean);

  public abstract void setHandleIdentifier(java.lang.String);

  public abstract java.lang.String toLongString();

  public abstract java.lang.String getBytecodeName();

  public abstract java.lang.String getBytecodeSignature();

  public abstract void setBytecodeName(java.lang.String);

  public abstract void setBytecodeSignature(java.lang.String);

  public abstract java.lang.String getSourceSignature();

  public abstract void setSourceSignature(java.lang.String);

  public abstract org.aspectj.asm.IProgramElement walk(org.aspectj.asm.HierarchyWalker);

  public abstract org.aspectj.asm.AsmManager getModel();

  public abstract int getRawModifiers();

  public abstract void setAnnotationStyleDeclaration(boolean);

  public abstract boolean isAnnotationStyleDeclaration();

  public abstract void setAnnotationType(java.lang.String);

  public abstract java.lang.String getAnnotationType();

  public abstract java.lang.String[] getRemovedAnnotationTypes();

  public abstract java.util.Map<java.lang.String, java.util.List<java.lang.String>> getDeclareParentsMap();

  public abstract void setDeclareParentsMap(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);

  public abstract void addFullyQualifiedName(java.lang.String);

  public abstract java.lang.String getFullyQualifiedName();

  public abstract void setAnnotationRemover(boolean);

  public abstract boolean isAnnotationRemover();

  public abstract java.lang.String getCorrespondingTypeSignature();
}
