Compiled from "MockClientHttpRequest.java"
public class org.springframework.mock.http.client.reactive.MockClientHttpRequest extends org.springframework.http.client.reactive.AbstractClientHttpRequest {
  private org.springframework.http.HttpMethod httpMethod;

  private java.net.URI url;

  private final org.springframework.core.io.buffer.DataBufferFactory bufferFactory;

  private reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> body;

  private java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>> writeHandler;

  public org.springframework.mock.http.client.reactive.MockClientHttpRequest(org.springframework.http.HttpMethod, java.lang.String, java.lang.Object...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1                  // Method org/springframework/web/util/UriComponentsBuilder.fromUriString:(Ljava/lang/String;)Lorg/springframework/web/util/UriComponentsBuilder;
       6: aload_3
       7: invokevirtual #2                  // Method org/springframework/web/util/UriComponentsBuilder.buildAndExpand:([Ljava/lang/Object;)Lorg/springframework/web/util/UriComponents;
      10: invokevirtual #3                  // Method org/springframework/web/util/UriComponents.encode:()Lorg/springframework/web/util/UriComponents;
      13: invokevirtual #4                  // Method org/springframework/web/util/UriComponents.toUri:()Ljava/net/URI;
      16: invokespecial #5                  // Method "<init>":(Lorg/springframework/http/HttpMethod;Ljava/net/URI;)V
      19: return

  public org.springframework.mock.http.client.reactive.MockClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method org/springframework/http/client/reactive/AbstractClientHttpRequest."<init>":()V
       4: aload_0
       5: new           #7                  // class org/springframework/core/io/buffer/DefaultDataBufferFactory
       8: dup
       9: invokespecial #8                  // Method org/springframework/core/io/buffer/DefaultDataBufferFactory."<init>":()V
      12: putfield      #9                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      15: aload_0
      16: new           #10                 // class java/lang/IllegalStateException
      19: dup
      20: ldc           #11                 // String The body is not set. Did handling complete with success? Is a custom \"writeHandler\" configured?
      22: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      25: invokestatic  #13                 // Method reactor/core/publisher/Flux.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
      28: putfield      #14                 // Field body:Lreactor/core/publisher/Flux;
      31: aload_0
      32: aload_0
      33: invokespecial #15                 // Method initDefaultWriteHandler:()Ljava/util/function/Function;
      36: putfield      #16                 // Field writeHandler:Ljava/util/function/Function;
      39: aload_0
      40: aload_1
      41: putfield      #17                 // Field httpMethod:Lorg/springframework/http/HttpMethod;
      44: aload_0
      45: aload_2
      46: putfield      #18                 // Field url:Ljava/net/URI;
      49: return

  private java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>> initDefaultWriteHandler();
    Code:
       0: aload_0
       1: invokedynamic #19,  0             // InvokeDynamic #0:apply:(Lorg/springframework/mock/http/client/reactive/MockClientHttpRequest;)Ljava/util/function/Function;
       6: areturn

  public org.springframework.http.HttpMethod getMethod();
    Code:
       0: aload_0
       1: getfield      #17                 // Field httpMethod:Lorg/springframework/http/HttpMethod;
       4: areturn

  public java.net.URI getURI();
    Code:
       0: aload_0
       1: getfield      #18                 // Field url:Ljava/net/URI;
       4: areturn

  public org.springframework.core.io.buffer.DataBufferFactory bufferFactory();
    Code:
       0: aload_0
       1: getfield      #9                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       4: areturn

  public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody();
    Code:
       0: aload_0
       1: getfield      #14                 // Field body:Lreactor/core/publisher/Flux;
       4: areturn

  public void setWriteHandler(java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>>);
    Code:
       0: aload_1
       1: ldc           #20                 // String \'writeHandler\' is required
       3: invokestatic  #21                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #16                 // Field writeHandler:Ljava/util/function/Function;
      11: return

  protected void applyHeaders();
    Code:
       0: return

  protected void applyCookies();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
       4: invokeinterface #23,  1           // InterfaceMethod org/springframework/util/MultiValueMap.values:()Ljava/util/Collection;
       9: invokeinterface #24,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      14: invokedynamic #25,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      19: invokeinterface #26,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      24: aload_0
      25: invokedynamic #27,  0             // InvokeDynamic #2:accept:(Lorg/springframework/mock/http/client/reactive/MockClientHttpRequest;)Ljava/util/function/Consumer;
      30: invokeinterface #28,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      35: return

  public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #29,  0             // InvokeDynamic #3:get:(Lorg/springframework/mock/http/client/reactive/MockClientHttpRequest;Lorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
       8: invokevirtual #30                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #31                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       5: invokedynamic #32,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      10: invokevirtual #33                 // Method reactor/core/publisher/Flux.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      13: invokevirtual #34                 // Method writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      16: areturn

  public reactor.core.publisher.Mono<java.lang.Void> setComplete();
    Code:
       0: aload_0
       1: invokestatic  #35                 // Method reactor/core/publisher/Flux.empty:()Lreactor/core/publisher/Flux;
       4: invokevirtual #34                 // Method writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       7: areturn

  private static org.reactivestreams.Publisher lambda$writeAndFlushWith$4(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: areturn

  private org.reactivestreams.Publisher lambda$writeWith$3(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #36,  0             // InvokeDynamic #5:get:(Lorg/springframework/mock/http/client/reactive/MockClientHttpRequest;Lorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
       7: invokestatic  #37                 // Method reactor/core/publisher/Mono.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      10: areturn

  private reactor.core.publisher.Mono lambda$null$2(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: getfield      #16                 // Field writeHandler:Ljava/util/function/Function;
       4: aload_1
       5: invokestatic  #31                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokeinterface #38,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #39                 // class reactor/core/publisher/Mono
      16: areturn

  private void lambda$applyCookies$1(org.springframework.http.HttpCookie);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
       4: ldc           #42                 // String Cookie
       6: aload_1
       7: invokevirtual #43                 // Method org/springframework/http/HttpCookie.toString:()Ljava/lang/String;
      10: invokevirtual #44                 // Method org/springframework/http/HttpHeaders.add:(Ljava/lang/String;Ljava/lang/String;)V
      13: return

  private reactor.core.publisher.Mono lambda$initDefaultWriteHandler$0(reactor.core.publisher.Flux);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #45                 // Method reactor/core/publisher/Flux.cache:()Lreactor/core/publisher/Flux;
       5: putfield      #14                 // Field body:Lreactor/core/publisher/Flux;
       8: aload_0
       9: getfield      #14                 // Field body:Lreactor/core/publisher/Flux;
      12: invokevirtual #46                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      15: areturn
}
