Compiled from "MockServerHttpRequest.java"
class org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder implements org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder {
  private static final org.springframework.core.io.buffer.DataBufferFactory BUFFER_FACTORY;

  private final org.springframework.http.HttpMethod method;

  private final java.net.URI url;

  private java.lang.String contextPath;

  private final org.springframework.web.util.UriComponentsBuilder queryParamsBuilder;

  private final org.springframework.http.HttpHeaders headers;

  private final org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> cookies;

  private java.net.InetSocketAddress remoteAddress;

  private org.springframework.http.server.reactive.SslInfo sslInfo;

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder(org.springframework.http.HttpMethod, java.net.URI);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // Method org/springframework/web/util/UriComponentsBuilder.newInstance:()Lorg/springframework/web/util/UriComponentsBuilder;
       8: putfield      #3                  // Field queryParamsBuilder:Lorg/springframework/web/util/UriComponentsBuilder;
      11: aload_0
      12: new           #4                  // class org/springframework/http/HttpHeaders
      15: dup
      16: invokespecial #5                  // Method org/springframework/http/HttpHeaders."<init>":()V
      19: putfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
      22: aload_0
      23: new           #7                  // class org/springframework/util/LinkedMultiValueMap
      26: dup
      27: invokespecial #8                  // Method org/springframework/util/LinkedMultiValueMap."<init>":()V
      30: putfield      #9                  // Field cookies:Lorg/springframework/util/MultiValueMap;
      33: aload_0
      34: aload_1
      35: putfield      #10                 // Field method:Lorg/springframework/http/HttpMethod;
      38: aload_0
      39: aload_2
      40: putfield      #11                 // Field url:Ljava/net/URI;
      43: return

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder contextPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field contextPath:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder queryParam(java.lang.String, java.lang.Object...);
    Code:
       0: aload_0
       1: getfield      #3                  // Field queryParamsBuilder:Lorg/springframework/web/util/UriComponentsBuilder;
       4: aload_1
       5: aload_2
       6: invokevirtual #13                 // Method org/springframework/web/util/UriComponentsBuilder.queryParam:(Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/web/util/UriComponentsBuilder;
       9: pop
      10: aload_0
      11: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field queryParamsBuilder:Lorg/springframework/web/util/UriComponentsBuilder;
       4: aload_1
       5: invokevirtual #14                 // Method org/springframework/web/util/UriComponentsBuilder.queryParams:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/web/util/UriComponentsBuilder;
       8: pop
       9: aload_0
      10: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder remoteAddress(java.net.InetSocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field remoteAddress:Ljava/net/InetSocketAddress;
       5: aload_0
       6: areturn

  public void sslInfo(org.springframework.http.server.reactive.SslInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field sslInfo:Lorg/springframework/http/server/reactive/SslInfo;
       5: return

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder cookie(org.springframework.http.HttpCookie...);
    Code:
       0: aload_1
       1: invokestatic  #17                 // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       4: aload_0
       5: invokedynamic #18,  0             // InvokeDynamic #0:accept:(Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$DefaultBodyBuilder;)Ljava/util/function/Consumer;
      10: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      15: aload_0
      16: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder cookies(org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field cookies:Lorg/springframework/util/MultiValueMap;
       4: aload_1
       5: invokeinterface #20,  2           // InterfaceMethod org/springframework/util/MultiValueMap.putAll:(Ljava/util/Map;)V
      10: aload_0
      11: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder header(java.lang.String, java.lang.String...);
    Code:
       0: aload_2
       1: astore_3
       2: aload_3
       3: arraylength
       4: istore        4
       6: iconst_0
       7: istore        5
       9: iload         5
      11: iload         4
      13: if_icmpge     38
      16: aload_3
      17: iload         5
      19: aaload
      20: astore        6
      22: aload_0
      23: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
      26: aload_1
      27: aload         6
      29: invokevirtual #21                 // Method org/springframework/http/HttpHeaders.add:(Ljava/lang/String;Ljava/lang/String;)V
      32: iinc          5, 1
      35: goto          9
      38: aload_0
      39: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder headers(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: aload_1
       5: invokevirtual #22                 // Method org/springframework/http/HttpHeaders.putAll:(Ljava/util/Map;)V
       8: aload_0
       9: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder accept(org.springframework.http.MediaType...);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: aload_1
       5: invokestatic  #23                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       8: invokevirtual #24                 // Method org/springframework/http/HttpHeaders.setAccept:(Ljava/util/List;)V
      11: aload_0
      12: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder acceptCharset(java.nio.charset.Charset...);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: aload_1
       5: invokestatic  #23                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       8: invokevirtual #25                 // Method org/springframework/http/HttpHeaders.setAcceptCharset:(Ljava/util/List;)V
      11: aload_0
      12: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder acceptLanguageAsLocales(java.util.Locale...);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: aload_1
       5: invokestatic  #23                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       8: invokevirtual #26                 // Method org/springframework/http/HttpHeaders.setAcceptLanguageAsLocales:(Ljava/util/List;)V
      11: aload_0
      12: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder contentLength(long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: lload_1
       5: invokevirtual #27                 // Method org/springframework/http/HttpHeaders.setContentLength:(J)V
       8: aload_0
       9: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder contentType(org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: aload_1
       5: invokevirtual #28                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
       8: aload_0
       9: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder ifModifiedSince(long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: lload_1
       5: invokevirtual #29                 // Method org/springframework/http/HttpHeaders.setIfModifiedSince:(J)V
       8: aload_0
       9: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder ifUnmodifiedSince(long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: lload_1
       5: invokevirtual #30                 // Method org/springframework/http/HttpHeaders.setIfUnmodifiedSince:(J)V
       8: aload_0
       9: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder ifNoneMatch(java.lang.String...);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: aload_1
       5: invokestatic  #23                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       8: invokevirtual #31                 // Method org/springframework/http/HttpHeaders.setIfNoneMatch:(Ljava/util/List;)V
      11: aload_0
      12: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder range(org.springframework.http.HttpRange...);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: aload_1
       5: invokestatic  #23                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       8: invokevirtual #32                 // Method org/springframework/http/HttpHeaders.setRange:(Ljava/util/List;)V
      11: aload_0
      12: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest build();
    Code:
       0: aload_0
       1: invokestatic  #33                 // Method reactor/core/publisher/Flux.empty:()Lreactor/core/publisher/Flux;
       4: invokevirtual #34                 // Method body:(Lorg/reactivestreams/Publisher;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest;
       7: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest body(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #35                 // Field BUFFER_FACTORY:Lorg/springframework/core/io/buffer/DataBufferFactory;
       4: aload_1
       5: aload_0
       6: invokespecial #36                 // Method getCharset:()Ljava/nio/charset/Charset;
       9: invokevirtual #37                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      12: invokeinterface #38,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.wrap:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      17: invokestatic  #39                 // Method reactor/core/publisher/Flux.just:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
      20: invokevirtual #34                 // Method body:(Lorg/reactivestreams/Publisher;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest;
      23: areturn

  private java.nio.charset.Charset getCharset();
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #40                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       7: invokestatic  #41                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      10: invokedynamic #42,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      15: invokevirtual #43                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      18: getstatic     #44                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      21: invokevirtual #45                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #46                 // class java/nio/charset/Charset
      27: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest body(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: invokespecial #47                 // Method applyCookiesIfNecessary:()V
       4: new           #48                 // class org/springframework/mock/http/server/reactive/MockServerHttpRequest
       7: dup
       8: aload_0
       9: getfield      #10                 // Field method:Lorg/springframework/http/HttpMethod;
      12: aload_0
      13: invokespecial #49                 // Method getUrlToUse:()Ljava/net/URI;
      16: aload_0
      17: getfield      #12                 // Field contextPath:Ljava/lang/String;
      20: aload_0
      21: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
      24: aload_0
      25: getfield      #9                  // Field cookies:Lorg/springframework/util/MultiValueMap;
      28: aload_0
      29: getfield      #15                 // Field remoteAddress:Ljava/net/InetSocketAddress;
      32: aload_0
      33: getfield      #16                 // Field sslInfo:Lorg/springframework/http/server/reactive/SslInfo;
      36: aload_1
      37: aconst_null
      38: invokespecial #50                 // Method org/springframework/mock/http/server/reactive/MockServerHttpRequest."<init>":(Lorg/springframework/http/HttpMethod;Ljava/net/URI;Ljava/lang/String;Lorg/springframework/http/HttpHeaders;Lorg/springframework/util/MultiValueMap;Ljava/net/InetSocketAddress;Lorg/springframework/http/server/reactive/SslInfo;Lorg/reactivestreams/Publisher;Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$1;)V
      41: areturn

  private void applyCookiesIfNecessary();
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: ldc           #51                 // String Cookie
       6: invokevirtual #52                 // Method org/springframework/http/HttpHeaders.get:(Ljava/lang/Object;)Ljava/util/List;
       9: ifnonnull     47
      12: aload_0
      13: getfield      #9                  // Field cookies:Lorg/springframework/util/MultiValueMap;
      16: invokeinterface #53,  1           // InterfaceMethod org/springframework/util/MultiValueMap.values:()Ljava/util/Collection;
      21: invokeinterface #54,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      26: invokedynamic #55,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      31: invokeinterface #56,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      36: aload_0
      37: invokedynamic #57,  0             // InvokeDynamic #3:accept:(Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$DefaultBodyBuilder;)Ljava/util/function/Consumer;
      42: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      47: return

  private java.net.URI getUrlToUse();
    Code:
       0: aload_0
       1: getfield      #3                  // Field queryParamsBuilder:Lorg/springframework/web/util/UriComponentsBuilder;
       4: iconst_0
       5: anewarray     #58                 // class java/lang/Object
       8: invokevirtual #59                 // Method org/springframework/web/util/UriComponentsBuilder.buildAndExpand:([Ljava/lang/Object;)Lorg/springframework/web/util/UriComponents;
      11: invokevirtual #60                 // Method org/springframework/web/util/UriComponents.encode:()Lorg/springframework/web/util/UriComponents;
      14: invokevirtual #61                 // Method org/springframework/web/util/UriComponents.getQueryParams:()Lorg/springframework/util/MultiValueMap;
      17: astore_1
      18: aload_1
      19: invokeinterface #62,  1           // InterfaceMethod org/springframework/util/MultiValueMap.isEmpty:()Z
      24: ifne          46
      27: aload_0
      28: getfield      #11                 // Field url:Ljava/net/URI;
      31: invokestatic  #63                 // Method org/springframework/web/util/UriComponentsBuilder.fromUri:(Ljava/net/URI;)Lorg/springframework/web/util/UriComponentsBuilder;
      34: aload_1
      35: invokevirtual #14                 // Method org/springframework/web/util/UriComponentsBuilder.queryParams:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/web/util/UriComponentsBuilder;
      38: iconst_1
      39: invokevirtual #64                 // Method org/springframework/web/util/UriComponentsBuilder.build:(Z)Lorg/springframework/web/util/UriComponents;
      42: invokevirtual #65                 // Method org/springframework/web/util/UriComponents.toUri:()Ljava/net/URI;
      45: areturn
      46: aload_0
      47: getfield      #11                 // Field url:Ljava/net/URI;
      50: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder range(org.springframework.http.HttpRange[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #66                 // Method range:([Lorg/springframework/http/HttpRange;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder ifNoneMatch(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #67                 // Method ifNoneMatch:([Ljava/lang/String;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder ifUnmodifiedSince(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #68                 // Method ifUnmodifiedSince:(J)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder ifModifiedSince(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #69                 // Method ifModifiedSince:(J)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder acceptLanguageAsLocales(java.util.Locale[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #70                 // Method acceptLanguageAsLocales:([Ljava/util/Locale;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder acceptCharset(java.nio.charset.Charset[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #71                 // Method acceptCharset:([Ljava/nio/charset/Charset;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder accept(org.springframework.http.MediaType[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #72                 // Method accept:([Lorg/springframework/http/MediaType;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder headers(org.springframework.util.MultiValueMap);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #73                 // Method headers:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder header(java.lang.String, java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #74                 // Method header:(Ljava/lang/String;[Ljava/lang/String;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       6: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder cookies(org.springframework.util.MultiValueMap);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #75                 // Method cookies:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder cookie(org.springframework.http.HttpCookie[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #76                 // Method cookie:([Lorg/springframework/http/HttpCookie;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder remoteAddress(java.net.InetSocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #77                 // Method remoteAddress:(Ljava/net/InetSocketAddress;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder queryParams(org.springframework.util.MultiValueMap);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #78                 // Method queryParams:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder queryParam(java.lang.String, java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #79                 // Method queryParam:(Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       6: areturn

  public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder contextPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #80                 // Method contextPath:(Ljava/lang/String;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
       5: areturn

  private void lambda$applyCookiesIfNecessary$1(org.springframework.http.HttpCookie);
    Code:
       0: aload_0
       1: getfield      #6                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: ldc           #51                 // String Cookie
       6: aload_1
       7: invokevirtual #81                 // Method org/springframework/http/HttpCookie.toString:()Ljava/lang/String;
      10: invokevirtual #21                 // Method org/springframework/http/HttpHeaders.add:(Ljava/lang/String;Ljava/lang/String;)V
      13: return

  private void lambda$cookie$0(org.springframework.http.HttpCookie);
    Code:
       0: aload_0
       1: getfield      #9                  // Field cookies:Lorg/springframework/util/MultiValueMap;
       4: aload_1
       5: invokevirtual #82                 // Method org/springframework/http/HttpCookie.getName:()Ljava/lang/String;
       8: aload_1
       9: invokeinterface #83,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
      14: return

  static {};
    Code:
       0: new           #84                 // class org/springframework/core/io/buffer/DefaultDataBufferFactory
       3: dup
       4: invokespecial #85                 // Method org/springframework/core/io/buffer/DefaultDataBufferFactory."<init>":()V
       7: putstatic     #35                 // Field BUFFER_FACTORY:Lorg/springframework/core/io/buffer/DataBufferFactory;
      10: return
}
