Compiled from "MockServerHttpResponse.java"
public class org.springframework.mock.http.server.reactive.MockServerHttpResponse extends org.springframework.http.server.reactive.AbstractServerHttpResponse {
  private reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> body;

  private java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>> writeHandler;

  public org.springframework.mock.http.server.reactive.MockServerHttpResponse();
    Code:
       0: aload_0
       1: new           #1                  // class org/springframework/core/io/buffer/DefaultDataBufferFactory
       4: dup
       5: invokespecial #2                  // Method org/springframework/core/io/buffer/DefaultDataBufferFactory."<init>":()V
       8: invokespecial #3                  // Method org/springframework/http/server/reactive/AbstractServerHttpResponse."<init>":(Lorg/springframework/core/io/buffer/DataBufferFactory;)V
      11: aload_0
      12: new           #4                  // class java/lang/IllegalStateException
      15: dup
      16: ldc           #5                  // String No content was written nor was setComplete() called on this response.
      18: invokespecial #6                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: invokestatic  #7                  // Method reactor/core/publisher/Flux.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
      24: putfield      #8                  // Field body:Lreactor/core/publisher/Flux;
      27: aload_0
      28: aload_0
      29: invokedynamic #9,  0              // InvokeDynamic #0:apply:(Lorg/springframework/mock/http/server/reactive/MockServerHttpResponse;)Ljava/util/function/Function;
      34: putfield      #10                 // Field writeHandler:Ljava/util/function/Function;
      37: return

  public void setWriteHandler(java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>>);
    Code:
       0: aload_1
       1: ldc           #11                 // String \'writeHandler\' is required
       3: invokestatic  #12                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: new           #4                  // class java/lang/IllegalStateException
      10: dup
      11: ldc           #13                 // String Not available with custom write handler.
      13: invokespecial #6                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: invokestatic  #7                  // Method reactor/core/publisher/Flux.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
      19: putfield      #8                  // Field body:Lreactor/core/publisher/Flux;
      22: aload_0
      23: aload_1
      24: putfield      #10                 // Field writeHandler:Ljava/util/function/Function;
      27: return

  public <T> T getNativeResponse();
    Code:
       0: new           #4                  // class java/lang/IllegalStateException
       3: dup
       4: ldc           #14                 // String This is a mock. No running server, no native response.
       6: invokespecial #6                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  protected void applyStatusCode();
    Code:
       0: return

  protected void applyHeaders();
    Code:
       0: return

  protected void applyCookies();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
       4: invokeinterface #16,  1           // InterfaceMethod org/springframework/util/MultiValueMap.values:()Ljava/util/Collection;
       9: invokeinterface #17,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      14: invokedynamic #18,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      19: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      24: aload_0
      25: invokedynamic #20,  0             // InvokeDynamic #2:accept:(Lorg/springframework/mock/http/server/reactive/MockServerHttpResponse;)Ljava/util/function/Consumer;
      30: invokeinterface #21,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      35: return

  protected reactor.core.publisher.Mono<java.lang.Void> writeWithInternal(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field writeHandler:Ljava/util/function/Function;
       4: aload_1
       5: invokestatic  #22                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokeinterface #23,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #24                 // class reactor/core/publisher/Mono
      16: areturn

  protected reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWithInternal(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field writeHandler:Ljava/util/function/Function;
       4: aload_1
       5: invokestatic  #22                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokedynamic #25,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      13: invokevirtual #26                 // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      16: invokeinterface #23,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #24                 // class reactor/core/publisher/Mono
      24: areturn

  public reactor.core.publisher.Mono<java.lang.Void> setComplete();
    Code:
       0: aload_0
       1: aload_0
       2: invokedynamic #27,  0             // InvokeDynamic #4:get:(Lorg/springframework/mock/http/server/reactive/MockServerHttpResponse;)Ljava/util/function/Supplier;
       7: invokevirtual #28                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      10: areturn

  public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody();
    Code:
       0: aload_0
       1: getfield      #8                  // Field body:Lreactor/core/publisher/Flux;
       4: areturn

  public reactor.core.publisher.Mono<java.lang.String> getBodyAsString();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #30                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       7: invokestatic  #31                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      10: invokedynamic #32,  0             // InvokeDynamic #5:apply:()Ljava/util/function/Function;
      15: invokevirtual #33                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      18: getstatic     #34                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      21: invokevirtual #35                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #36                 // class java/nio/charset/Charset
      27: astore_1
      28: aload_0
      29: invokevirtual #37                 // Method getBody:()Lreactor/core/publisher/Flux;
      32: aload_0
      33: invokevirtual #38                 // Method bufferFactory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      36: invokeinterface #39,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.allocateBuffer:()Lorg/springframework/core/io/buffer/DataBuffer;
      41: invokedynamic #40,  0             // InvokeDynamic #6:apply:()Ljava/util/function/BiFunction;
      46: invokevirtual #41                 // Method reactor/core/publisher/Flux.reduce:(Ljava/lang/Object;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      49: aload_1
      50: invokedynamic #42,  0             // InvokeDynamic #7:apply:(Ljava/nio/charset/Charset;)Ljava/util/function/Function;
      55: invokevirtual #43                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      58: areturn

  private static java.lang.String bufferToString(org.springframework.core.io.buffer.DataBuffer, java.nio.charset.Charset);
    Code:
       0: aload_1
       1: ldc           #44                 // String \'charset\' must not be null
       3: invokestatic  #12                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokeinterface #45,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      12: newarray       byte
      14: astore_2
      15: aload_0
      16: aload_2
      17: invokeinterface #46,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.read:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      22: pop
      23: new           #47                 // class java/lang/String
      26: dup
      27: aload_2
      28: aload_1
      29: invokespecial #48                 // Method java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
      32: areturn

  private static java.lang.String lambda$getBodyAsString$5(java.nio.charset.Charset, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_1
       1: aload_0
       2: invokestatic  #49                 // Method bufferToString:(Lorg/springframework/core/io/buffer/DataBuffer;Ljava/nio/charset/Charset;)Ljava/lang/String;
       5: areturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$getBodyAsString$4(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #50                 // class org/springframework/core/io/buffer/DataBuffer
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: invokeinterface #51,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:([Lorg/springframework/core/io/buffer/DataBuffer;)Lorg/springframework/core/io/buffer/DataBuffer;
      14: pop
      15: aload_1
      16: invokestatic  #52                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      19: pop
      20: aload_0
      21: areturn

  private reactor.core.publisher.Mono lambda$setComplete$3();
    Code:
       0: aload_0
       1: invokedynamic #53,  0             // InvokeDynamic #8:get:(Lorg/springframework/mock/http/server/reactive/MockServerHttpResponse;)Ljava/util/function/Supplier;
       6: invokestatic  #54                 // Method reactor/core/publisher/Mono.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
       9: areturn

  private reactor.core.publisher.Mono lambda$null$2();
    Code:
       0: aload_0
       1: getfield      #10                 // Field writeHandler:Ljava/util/function/Function;
       4: invokestatic  #55                 // Method reactor/core/publisher/Flux.empty:()Lreactor/core/publisher/Flux;
       7: invokeinterface #23,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #24                 // class reactor/core/publisher/Mono
      15: areturn

  private void lambda$applyCookies$1(org.springframework.http.ResponseCookie);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
       4: ldc           #57                 // String Set-Cookie
       6: aload_1
       7: invokevirtual #58                 // Method org/springframework/http/ResponseCookie.toString:()Ljava/lang/String;
      10: invokevirtual #59                 // Method org/springframework/http/HttpHeaders.add:(Ljava/lang/String;Ljava/lang/String;)V
      13: return

  private reactor.core.publisher.Mono lambda$new$0(reactor.core.publisher.Flux);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #60                 // Method reactor/core/publisher/Flux.cache:()Lreactor/core/publisher/Flux;
       5: putfield      #8                  // Field body:Lreactor/core/publisher/Flux;
       8: aload_0
       9: getfield      #8                  // Field body:Lreactor/core/publisher/Flux;
      12: invokevirtual #61                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      15: areturn
}
