Compiled from "MockServerRequest.java"
class org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders implements org.springframework.web.reactive.function.server.ServerRequest$Headers {
  private final org.springframework.http.HttpHeaders headers;

  public org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders(org.springframework.http.HttpHeaders);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #1                  // Field headers:Lorg/springframework/http/HttpHeaders;
       9: return

  private org.springframework.http.HttpHeaders delegate();
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: areturn

  public void header(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: aload_1
       5: aload_2
       6: invokevirtual #3                  // Method org/springframework/http/HttpHeaders.add:(Ljava/lang/String;Ljava/lang/String;)V
       9: return

  public java.util.List<org.springframework.http.MediaType> accept();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method delegate:()Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #5                  // Method org/springframework/http/HttpHeaders.getAccept:()Ljava/util/List;
       7: areturn

  public java.util.List<java.nio.charset.Charset> acceptCharset();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method delegate:()Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #6                  // Method org/springframework/http/HttpHeaders.getAcceptCharset:()Ljava/util/List;
       7: areturn

  public java.util.List<java.util.Locale$LanguageRange> acceptLanguage();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method delegate:()Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #7                  // Method org/springframework/http/HttpHeaders.getAcceptLanguage:()Ljava/util/List;
       7: areturn

  public java.util.OptionalLong contentLength();
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #4                  // Method delegate:()Lorg/springframework/http/HttpHeaders;
       5: invokevirtual #8                  // Method org/springframework/http/HttpHeaders.getContentLength:()J
       8: invokespecial #9                  // Method toOptionalLong:(J)Ljava/util/OptionalLong;
      11: areturn

  public java.util.Optional<org.springframework.http.MediaType> contentType();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method delegate:()Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #10                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       7: invokestatic  #11                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      10: areturn

  public java.net.InetSocketAddress host();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method delegate:()Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #12                 // Method org/springframework/http/HttpHeaders.getHost:()Ljava/net/InetSocketAddress;
       7: areturn

  public java.util.List<org.springframework.http.HttpRange> range();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method delegate:()Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #13                 // Method org/springframework/http/HttpHeaders.getRange:()Ljava/util/List;
       7: areturn

  public java.util.List<java.lang.String> header(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method delegate:()Lorg/springframework/http/HttpHeaders;
       4: aload_1
       5: invokevirtual #14                 // Method org/springframework/http/HttpHeaders.get:(Ljava/lang/Object;)Ljava/util/List;
       8: astore_2
       9: aload_2
      10: ifnull        17
      13: aload_2
      14: goto          20
      17: invokestatic  #15                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      20: areturn

  public org.springframework.http.HttpHeaders asHttpHeaders();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method delegate:()Lorg/springframework/http/HttpHeaders;
       4: invokestatic  #16                 // Method org/springframework/http/HttpHeaders.readOnlyHttpHeaders:(Lorg/springframework/http/HttpHeaders;)Lorg/springframework/http/HttpHeaders;
       7: areturn

  private java.util.OptionalLong toOptionalLong(long);
    Code:
       0: lload_1
       1: ldc2_w        #17                 // long -1l
       4: lcmp
       5: ifeq          15
       8: lload_1
       9: invokestatic  #19                 // Method java/util/OptionalLong.of:(J)Ljava/util/OptionalLong;
      12: goto          18
      15: invokestatic  #20                 // Method java/util/OptionalLong.empty:()Ljava/util/OptionalLong;
      18: areturn

  static org.springframework.http.HttpHeaders access$500(org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: areturn
}
