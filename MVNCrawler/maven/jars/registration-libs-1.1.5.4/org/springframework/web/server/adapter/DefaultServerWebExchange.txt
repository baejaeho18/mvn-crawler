Compiled from "DefaultServerWebExchange.java"
public class org.springframework.web.server.adapter.DefaultServerWebExchange implements org.springframework.web.server.ServerWebExchange {
  private static final java.util.List<org.springframework.http.HttpMethod> SAFE_METHODS;

  private static final org.springframework.core.ResolvableType FORM_DATA_TYPE;

  private static final org.springframework.core.ResolvableType MULTIPART_DATA_TYPE;

  private static final reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> EMPTY_FORM_DATA;

  private static final reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> EMPTY_MULTIPART_DATA;

  private final org.springframework.http.server.reactive.ServerHttpRequest request;

  private final org.springframework.http.server.reactive.ServerHttpResponse response;

  private final java.util.Map<java.lang.String, java.lang.Object> attributes;

  private final reactor.core.publisher.Mono<org.springframework.web.server.WebSession> sessionMono;

  private final org.springframework.web.server.i18n.LocaleContextResolver localeContextResolver;

  private final reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> formDataMono;

  private final reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> multipartDataMono;

  private final org.springframework.context.ApplicationContext applicationContext;

  private volatile boolean notModified;

  private java.util.function.Function<java.lang.String, java.lang.String> urlTransformer;

  public org.springframework.web.server.adapter.DefaultServerWebExchange(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, org.springframework.web.server.session.WebSessionManager, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.web.server.i18n.LocaleContextResolver);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aconst_null
       9: invokespecial #1                  // Method "<init>":(Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;Lorg/springframework/web/server/session/WebSessionManager;Lorg/springframework/http/codec/ServerCodecConfigurer;Lorg/springframework/web/server/i18n/LocaleContextResolver;Lorg/springframework/context/ApplicationContext;)V
      12: return

  org.springframework.web.server.adapter.DefaultServerWebExchange(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, org.springframework.web.server.session.WebSessionManager, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.web.server.i18n.LocaleContextResolver, org.springframework.context.ApplicationContext);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #5                  // Field attributes:Ljava/util/Map;
      15: aload_0
      16: invokedynamic #6,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      21: putfield      #7                  // Field urlTransformer:Ljava/util/function/Function;
      24: aload_1
      25: ldc           #8                  // String \'request\' is required
      27: invokestatic  #9                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      30: aload_2
      31: ldc           #10                 // String \'response\' is required
      33: invokestatic  #9                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      36: aload_3
      37: ldc           #11                 // String \'sessionManager\' is required
      39: invokestatic  #9                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      42: aload         4
      44: ldc           #12                 // String \'codecConfigurer\' is required
      46: invokestatic  #9                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      49: aload         5
      51: ldc           #13                 // String \'localeContextResolver\' is required
      53: invokestatic  #9                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      56: aload_0
      57: aload_1
      58: putfield      #14                 // Field request:Lorg/springframework/http/server/reactive/ServerHttpRequest;
      61: aload_0
      62: aload_2
      63: putfield      #15                 // Field response:Lorg/springframework/http/server/reactive/ServerHttpResponse;
      66: aload_0
      67: aload_3
      68: aload_0
      69: invokeinterface #16,  2           // InterfaceMethod org/springframework/web/server/session/WebSessionManager.getSession:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
      74: invokevirtual #17                 // Method reactor/core/publisher/Mono.cache:()Lreactor/core/publisher/Mono;
      77: putfield      #18                 // Field sessionMono:Lreactor/core/publisher/Mono;
      80: aload_0
      81: aload         5
      83: putfield      #19                 // Field localeContextResolver:Lorg/springframework/web/server/i18n/LocaleContextResolver;
      86: aload_0
      87: aload_1
      88: aload         4
      90: invokestatic  #20                 // Method initFormData:(Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/codec/ServerCodecConfigurer;)Lreactor/core/publisher/Mono;
      93: putfield      #21                 // Field formDataMono:Lreactor/core/publisher/Mono;
      96: aload_0
      97: aload_1
      98: aload         4
     100: invokestatic  #22                 // Method initMultipartData:(Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/codec/ServerCodecConfigurer;)Lreactor/core/publisher/Mono;
     103: putfield      #23                 // Field multipartDataMono:Lreactor/core/publisher/Mono;
     106: aload_0
     107: aload         6
     109: putfield      #24                 // Field applicationContext:Lorg/springframework/context/ApplicationContext;
     112: return

  private static reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> initFormData(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.codec.ServerCodecConfigurer);
    Code:
       0: aload_0
       1: invokeinterface #25,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpRequest.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #26                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore_2
      10: getstatic     #27                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
      13: aload_2
      14: invokevirtual #28                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      17: ifeq          79
      20: aload_1
      21: invokeinterface #29,  1           // InterfaceMethod org/springframework/http/codec/ServerCodecConfigurer.getReaders:()Ljava/util/List;
      26: invokeinterface #30,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      31: invokedynamic #31,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
      36: invokeinterface #32,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      41: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      46: invokedynamic #34,  0             // InvokeDynamic #2:get:()Ljava/util/function/Supplier;
      51: invokevirtual #35                 // Method java/util/Optional.orElseThrow:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      54: checkcast     #36                 // class org/springframework/http/codec/HttpMessageReader
      57: getstatic     #37                 // Field FORM_DATA_TYPE:Lorg/springframework/core/ResolvableType;
      60: aload_0
      61: invokestatic  #38                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      64: invokeinterface #39,  4           // InterfaceMethod org/springframework/http/codec/HttpMessageReader.readMono:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      69: getstatic     #40                 // Field EMPTY_FORM_DATA:Lreactor/core/publisher/Mono;
      72: invokevirtual #41                 // Method reactor/core/publisher/Mono.switchIfEmpty:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      75: invokevirtual #17                 // Method reactor/core/publisher/Mono.cache:()Lreactor/core/publisher/Mono;
      78: areturn
      79: goto          83
      82: astore_2
      83: getstatic     #40                 // Field EMPTY_FORM_DATA:Lreactor/core/publisher/Mono;
      86: areturn
    Exception table:
       from    to  target type
           0    78    82   Class org/springframework/http/InvalidMediaTypeException

  private static reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> initMultipartData(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.codec.ServerCodecConfigurer);
    Code:
       0: aload_0
       1: invokeinterface #25,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpRequest.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #26                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore_2
      10: getstatic     #43                 // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
      13: aload_2
      14: invokevirtual #28                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      17: ifeq          79
      20: aload_1
      21: invokeinterface #29,  1           // InterfaceMethod org/springframework/http/codec/ServerCodecConfigurer.getReaders:()Ljava/util/List;
      26: invokeinterface #30,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      31: invokedynamic #44,  0             // InvokeDynamic #3:test:()Ljava/util/function/Predicate;
      36: invokeinterface #32,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      41: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      46: invokedynamic #45,  0             // InvokeDynamic #4:get:()Ljava/util/function/Supplier;
      51: invokevirtual #35                 // Method java/util/Optional.orElseThrow:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      54: checkcast     #36                 // class org/springframework/http/codec/HttpMessageReader
      57: getstatic     #46                 // Field MULTIPART_DATA_TYPE:Lorg/springframework/core/ResolvableType;
      60: aload_0
      61: invokestatic  #38                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      64: invokeinterface #39,  4           // InterfaceMethod org/springframework/http/codec/HttpMessageReader.readMono:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      69: getstatic     #47                 // Field EMPTY_MULTIPART_DATA:Lreactor/core/publisher/Mono;
      72: invokevirtual #41                 // Method reactor/core/publisher/Mono.switchIfEmpty:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      75: invokevirtual #17                 // Method reactor/core/publisher/Mono.cache:()Lreactor/core/publisher/Mono;
      78: areturn
      79: goto          83
      82: astore_2
      83: getstatic     #47                 // Field EMPTY_MULTIPART_DATA:Lreactor/core/publisher/Mono;
      86: areturn
    Exception table:
       from    to  target type
           0    78    82   Class org/springframework/http/InvalidMediaTypeException

  public org.springframework.http.server.reactive.ServerHttpRequest getRequest();
    Code:
       0: aload_0
       1: getfield      #14                 // Field request:Lorg/springframework/http/server/reactive/ServerHttpRequest;
       4: areturn

  private org.springframework.http.HttpHeaders getRequestHeaders();
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method getRequest:()Lorg/springframework/http/server/reactive/ServerHttpRequest;
       4: invokeinterface #25,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpRequest.getHeaders:()Lorg/springframework/http/HttpHeaders;
       9: areturn

  public org.springframework.http.server.reactive.ServerHttpResponse getResponse();
    Code:
       0: aload_0
       1: getfield      #15                 // Field response:Lorg/springframework/http/server/reactive/ServerHttpResponse;
       4: areturn

  private org.springframework.http.HttpHeaders getResponseHeaders();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getResponse:()Lorg/springframework/http/server/reactive/ServerHttpResponse;
       4: invokeinterface #50,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.getHeaders:()Lorg/springframework/http/HttpHeaders;
       9: areturn

  public java.util.Map<java.lang.String, java.lang.Object> getAttributes();
    Code:
       0: aload_0
       1: getfield      #5                  // Field attributes:Ljava/util/Map;
       4: areturn

  public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> getSession();
    Code:
       0: aload_0
       1: getfield      #18                 // Field sessionMono:Lreactor/core/publisher/Mono;
       4: areturn

  public <T extends java.security.Principal> reactor.core.publisher.Mono<T> getPrincipal();
    Code:
       0: invokestatic  #51                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> getFormData();
    Code:
       0: aload_0
       1: getfield      #21                 // Field formDataMono:Lreactor/core/publisher/Mono;
       4: areturn

  public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> getMultipartData();
    Code:
       0: aload_0
       1: getfield      #23                 // Field multipartDataMono:Lreactor/core/publisher/Mono;
       4: areturn

  public org.springframework.context.i18n.LocaleContext getLocaleContext();
    Code:
       0: aload_0
       1: getfield      #19                 // Field localeContextResolver:Lorg/springframework/web/server/i18n/LocaleContextResolver;
       4: aload_0
       5: invokeinterface #52,  2           // InterfaceMethod org/springframework/web/server/i18n/LocaleContextResolver.resolveLocaleContext:(Lorg/springframework/web/server/ServerWebExchange;)Lorg/springframework/context/i18n/LocaleContext;
      10: areturn

  public org.springframework.context.ApplicationContext getApplicationContext();
    Code:
       0: aload_0
       1: getfield      #24                 // Field applicationContext:Lorg/springframework/context/ApplicationContext;
       4: areturn

  public boolean isNotModified();
    Code:
       0: aload_0
       1: getfield      #53                 // Field notModified:Z
       4: ireturn

  public boolean checkNotModified(java.time.Instant);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #54                 // Method checkNotModified:(Ljava/lang/String;Ljava/time/Instant;)Z
       6: ireturn

  public boolean checkNotModified(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #55                 // Field java/time/Instant.MIN:Ljava/time/Instant;
       5: invokevirtual #54                 // Method checkNotModified:(Ljava/lang/String;Ljava/time/Instant;)Z
       8: ireturn

  public boolean checkNotModified(java.lang.String, java.time.Instant);
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getResponse:()Lorg/springframework/http/server/reactive/ServerHttpResponse;
       4: invokeinterface #56,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.getStatusCode:()Lorg/springframework/http/HttpStatus;
       9: astore_3
      10: aload_0
      11: getfield      #53                 // Field notModified:Z
      14: ifne          31
      17: aload_3
      18: ifnull        36
      21: getstatic     #57                 // Field org/springframework/http/HttpStatus.OK:Lorg/springframework/http/HttpStatus;
      24: aload_3
      25: invokevirtual #58                 // Method org/springframework/http/HttpStatus.equals:(Ljava/lang/Object;)Z
      28: ifne          36
      31: aload_0
      32: getfield      #53                 // Field notModified:Z
      35: ireturn
      36: aload_0
      37: aload_2
      38: invokespecial #59                 // Method validateIfUnmodifiedSince:(Ljava/time/Instant;)Z
      41: ifeq          69
      44: aload_0
      45: getfield      #53                 // Field notModified:Z
      48: ifeq          64
      51: aload_0
      52: invokevirtual #49                 // Method getResponse:()Lorg/springframework/http/server/reactive/ServerHttpResponse;
      55: getstatic     #60                 // Field org/springframework/http/HttpStatus.PRECONDITION_FAILED:Lorg/springframework/http/HttpStatus;
      58: invokeinterface #61,  2           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.setStatusCode:(Lorg/springframework/http/HttpStatus;)Z
      63: pop
      64: aload_0
      65: getfield      #53                 // Field notModified:Z
      68: ireturn
      69: aload_0
      70: aload_1
      71: invokespecial #62                 // Method validateIfNoneMatch:(Ljava/lang/String;)Z
      74: istore        4
      76: iload         4
      78: ifne          87
      81: aload_0
      82: aload_2
      83: invokespecial #63                 // Method validateIfModifiedSince:(Ljava/time/Instant;)Z
      86: pop
      87: getstatic     #64                 // Field SAFE_METHODS:Ljava/util/List;
      90: aload_0
      91: invokevirtual #48                 // Method getRequest:()Lorg/springframework/http/server/reactive/ServerHttpRequest;
      94: invokeinterface #65,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpRequest.getMethod:()Lorg/springframework/http/HttpMethod;
      99: invokeinterface #66,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     104: istore        5
     106: aload_0
     107: getfield      #53                 // Field notModified:Z
     110: ifeq          137
     113: aload_0
     114: invokevirtual #49                 // Method getResponse:()Lorg/springframework/http/server/reactive/ServerHttpResponse;
     117: iload         5
     119: ifeq          128
     122: getstatic     #67                 // Field org/springframework/http/HttpStatus.NOT_MODIFIED:Lorg/springframework/http/HttpStatus;
     125: goto          131
     128: getstatic     #60                 // Field org/springframework/http/HttpStatus.PRECONDITION_FAILED:Lorg/springframework/http/HttpStatus;
     131: invokeinterface #61,  2           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.setStatusCode:(Lorg/springframework/http/HttpStatus;)Z
     136: pop
     137: iload         5
     139: ifeq          206
     142: aload_2
     143: getstatic     #68                 // Field java/time/Instant.EPOCH:Ljava/time/Instant;
     146: invokevirtual #69                 // Method java/time/Instant.isAfter:(Ljava/time/Instant;)Z
     149: ifeq          177
     152: aload_0
     153: invokespecial #70                 // Method getResponseHeaders:()Lorg/springframework/http/HttpHeaders;
     156: invokevirtual #71                 // Method org/springframework/http/HttpHeaders.getLastModified:()J
     159: ldc2_w        #72                 // long -1l
     162: lcmp
     163: ifne          177
     166: aload_0
     167: invokespecial #70                 // Method getResponseHeaders:()Lorg/springframework/http/HttpHeaders;
     170: aload_2
     171: invokevirtual #74                 // Method java/time/Instant.toEpochMilli:()J
     174: invokevirtual #75                 // Method org/springframework/http/HttpHeaders.setLastModified:(J)V
     177: aload_1
     178: invokestatic  #76                 // Method org/springframework/util/StringUtils.hasLength:(Ljava/lang/String;)Z
     181: ifeq          206
     184: aload_0
     185: invokespecial #70                 // Method getResponseHeaders:()Lorg/springframework/http/HttpHeaders;
     188: invokevirtual #77                 // Method org/springframework/http/HttpHeaders.getETag:()Ljava/lang/String;
     191: ifnonnull     206
     194: aload_0
     195: invokespecial #70                 // Method getResponseHeaders:()Lorg/springframework/http/HttpHeaders;
     198: aload_0
     199: aload_1
     200: invokespecial #78                 // Method padEtagIfNecessary:(Ljava/lang/String;)Ljava/lang/String;
     203: invokevirtual #79                 // Method org/springframework/http/HttpHeaders.setETag:(Ljava/lang/String;)V
     206: aload_0
     207: getfield      #53                 // Field notModified:Z
     210: ireturn

  private boolean validateIfUnmodifiedSince(java.time.Instant);
    Code:
       0: aload_1
       1: getstatic     #68                 // Field java/time/Instant.EPOCH:Ljava/time/Instant;
       4: invokevirtual #80                 // Method java/time/Instant.isBefore:(Ljava/time/Instant;)Z
       7: ifeq          12
      10: iconst_0
      11: ireturn
      12: aload_0
      13: invokespecial #81                 // Method getRequestHeaders:()Lorg/springframework/http/HttpHeaders;
      16: invokevirtual #82                 // Method org/springframework/http/HttpHeaders.getIfUnmodifiedSince:()J
      19: lstore_2
      20: lload_2
      21: ldc2_w        #72                 // long -1l
      24: lcmp
      25: ifne          30
      28: iconst_0
      29: ireturn
      30: lload_2
      31: invokestatic  #83                 // Method java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;
      34: astore        4
      36: aload_0
      37: aload         4
      39: aload_1
      40: getstatic     #84                 // Field java/time/temporal/ChronoUnit.SECONDS:Ljava/time/temporal/ChronoUnit;
      43: invokevirtual #85                 // Method java/time/Instant.truncatedTo:(Ljava/time/temporal/TemporalUnit;)Ljava/time/Instant;
      46: invokevirtual #80                 // Method java/time/Instant.isBefore:(Ljava/time/Instant;)Z
      49: putfield      #53                 // Field notModified:Z
      52: iconst_1
      53: ireturn

  private boolean validateIfNoneMatch(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #76                 // Method org/springframework/util/StringUtils.hasLength:(Ljava/lang/String;)Z
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: invokespecial #81                 // Method getRequestHeaders:()Lorg/springframework/http/HttpHeaders;
      13: invokevirtual #86                 // Method org/springframework/http/HttpHeaders.getIfNoneMatch:()Ljava/util/List;
      16: astore_2
      17: goto          23
      20: astore_3
      21: iconst_0
      22: ireturn
      23: aload_2
      24: invokeinterface #88,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      29: ifeq          34
      32: iconst_0
      33: ireturn
      34: aload_0
      35: aload_1
      36: invokespecial #78                 // Method padEtagIfNecessary:(Ljava/lang/String;)Ljava/lang/String;
      39: astore_1
      40: aload_2
      41: invokeinterface #89,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      46: astore_3
      47: aload_3
      48: invokeinterface #90,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      53: ifeq          109
      56: aload_3
      57: invokeinterface #91,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      62: checkcast     #92                 // class java/lang/String
      65: astore        4
      67: aload         4
      69: invokestatic  #76                 // Method org/springframework/util/StringUtils.hasLength:(Ljava/lang/String;)Z
      72: ifeq          106
      75: aload         4
      77: ldc           #93                 // String ^W/
      79: ldc           #94                 // String
      81: invokevirtual #95                 // Method java/lang/String.replaceFirst:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      84: aload_1
      85: ldc           #93                 // String ^W/
      87: ldc           #94                 // String
      89: invokevirtual #95                 // Method java/lang/String.replaceFirst:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      92: invokevirtual #96                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      95: ifeq          106
      98: aload_0
      99: iconst_1
     100: putfield      #53                 // Field notModified:Z
     103: goto          109
     106: goto          47
     109: iconst_1
     110: ireturn
    Exception table:
       from    to  target type
           9    17    20   Class java/lang/IllegalArgumentException

  private java.lang.String padEtagIfNecessary(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #76                 // Method org/springframework/util/StringUtils.hasLength:(Ljava/lang/String;)Z
       4: ifne          9
       7: aload_1
       8: areturn
       9: aload_1
      10: ldc           #97                 // String \"
      12: invokevirtual #98                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      15: ifne          27
      18: aload_1
      19: ldc           #99                 // String W/\"
      21: invokevirtual #98                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      24: ifeq          38
      27: aload_1
      28: ldc           #97                 // String \"
      30: invokevirtual #100                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      33: ifeq          38
      36: aload_1
      37: areturn
      38: new           #101                // class java/lang/StringBuilder
      41: dup
      42: invokespecial #102                // Method java/lang/StringBuilder."<init>":()V
      45: ldc           #97                 // String \"
      47: invokevirtual #103                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: aload_1
      51: invokevirtual #103                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: ldc           #97                 // String \"
      56: invokevirtual #103                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: invokevirtual #104                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: areturn

  private boolean validateIfModifiedSince(java.time.Instant);
    Code:
       0: aload_1
       1: getstatic     #68                 // Field java/time/Instant.EPOCH:Ljava/time/Instant;
       4: invokevirtual #80                 // Method java/time/Instant.isBefore:(Ljava/time/Instant;)Z
       7: ifeq          12
      10: iconst_0
      11: ireturn
      12: aload_0
      13: invokespecial #81                 // Method getRequestHeaders:()Lorg/springframework/http/HttpHeaders;
      16: invokevirtual #105                // Method org/springframework/http/HttpHeaders.getIfModifiedSince:()J
      19: lstore_2
      20: lload_2
      21: ldc2_w        #72                 // long -1l
      24: lcmp
      25: ifne          30
      28: iconst_0
      29: ireturn
      30: aload_0
      31: getstatic     #84                 // Field java/time/temporal/ChronoUnit.SECONDS:Ljava/time/temporal/ChronoUnit;
      34: aload_1
      35: lload_2
      36: invokestatic  #83                 // Method java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;
      39: invokevirtual #106                // Method java/time/temporal/ChronoUnit.between:(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)J
      42: lconst_0
      43: lcmp
      44: iflt          51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: putfield      #53                 // Field notModified:Z
      55: iconst_1
      56: ireturn

  public java.lang.String transformUrl(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field urlTransformer:Ljava/util/function/Function;
       4: aload_1
       5: invokeinterface #107,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #92                 // class java/lang/String
      13: areturn

  public void addUrlTransformer(java.util.function.Function<java.lang.String, java.lang.String>);
    Code:
       0: aload_1
       1: ldc           #108                // String \'encoder\' must not be null
       3: invokestatic  #9                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_0
       8: getfield      #7                  // Field urlTransformer:Ljava/util/function/Function;
      11: aload_1
      12: invokeinterface #109,  2          // InterfaceMethod java/util/function/Function.andThen:(Ljava/util/function/Function;)Ljava/util/function/Function;
      17: putfield      #7                  // Field urlTransformer:Ljava/util/function/Function;
      20: return

  private static java.lang.IllegalStateException lambda$initMultipartData$4();
    Code:
       0: new           #110                // class java/lang/IllegalStateException
       3: dup
       4: ldc           #111                // String No multipart HttpMessageReader.
       6: invokespecial #112                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: areturn

  private static boolean lambda$initMultipartData$3(org.springframework.http.codec.HttpMessageReader);
    Code:
       0: aload_0
       1: getstatic     #46                 // Field MULTIPART_DATA_TYPE:Lorg/springframework/core/ResolvableType;
       4: getstatic     #43                 // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
       7: invokeinterface #113,  3          // InterfaceMethod org/springframework/http/codec/HttpMessageReader.canRead:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;)Z
      12: ireturn

  private static java.lang.IllegalStateException lambda$initFormData$2();
    Code:
       0: new           #110                // class java/lang/IllegalStateException
       3: dup
       4: ldc           #114                // String No form data HttpMessageReader.
       6: invokespecial #112                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: areturn

  private static boolean lambda$initFormData$1(org.springframework.http.codec.HttpMessageReader);
    Code:
       0: aload_0
       1: getstatic     #37                 // Field FORM_DATA_TYPE:Lorg/springframework/core/ResolvableType;
       4: getstatic     #27                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
       7: invokeinterface #113,  3          // InterfaceMethod org/springframework/http/codec/HttpMessageReader.canRead:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;)Z
      12: ireturn

  private static java.lang.String lambda$new$0(java.lang.String);
    Code:
       0: aload_0
       1: areturn

  static {};
    Code:
       0: iconst_2
       1: anewarray     #115                // class org/springframework/http/HttpMethod
       4: dup
       5: iconst_0
       6: getstatic     #116                // Field org/springframework/http/HttpMethod.GET:Lorg/springframework/http/HttpMethod;
       9: aastore
      10: dup
      11: iconst_1
      12: getstatic     #117                // Field org/springframework/http/HttpMethod.HEAD:Lorg/springframework/http/HttpMethod;
      15: aastore
      16: invokestatic  #118                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      19: putstatic     #64                 // Field SAFE_METHODS:Ljava/util/List;
      22: ldc           #119                // class org/springframework/util/MultiValueMap
      24: iconst_2
      25: anewarray     #120                // class java/lang/Class
      28: dup
      29: iconst_0
      30: ldc           #92                 // class java/lang/String
      32: aastore
      33: dup
      34: iconst_1
      35: ldc           #92                 // class java/lang/String
      37: aastore
      38: invokestatic  #121                // Method org/springframework/core/ResolvableType.forClassWithGenerics:(Ljava/lang/Class;[Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      41: putstatic     #37                 // Field FORM_DATA_TYPE:Lorg/springframework/core/ResolvableType;
      44: ldc           #119                // class org/springframework/util/MultiValueMap
      46: iconst_2
      47: anewarray     #120                // class java/lang/Class
      50: dup
      51: iconst_0
      52: ldc           #92                 // class java/lang/String
      54: aastore
      55: dup
      56: iconst_1
      57: ldc           #122                // class org/springframework/http/codec/multipart/Part
      59: aastore
      60: invokestatic  #121                // Method org/springframework/core/ResolvableType.forClassWithGenerics:(Ljava/lang/Class;[Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      63: putstatic     #46                 // Field MULTIPART_DATA_TYPE:Lorg/springframework/core/ResolvableType;
      66: new           #123                // class org/springframework/util/LinkedMultiValueMap
      69: dup
      70: iconst_0
      71: invokespecial #124                // Method org/springframework/util/LinkedMultiValueMap."<init>":(I)V
      74: invokestatic  #125                // Method org/springframework/util/CollectionUtils.unmodifiableMultiValueMap:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/util/MultiValueMap;
      77: invokestatic  #126                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      80: invokevirtual #17                 // Method reactor/core/publisher/Mono.cache:()Lreactor/core/publisher/Mono;
      83: putstatic     #40                 // Field EMPTY_FORM_DATA:Lreactor/core/publisher/Mono;
      86: new           #123                // class org/springframework/util/LinkedMultiValueMap
      89: dup
      90: iconst_0
      91: invokespecial #124                // Method org/springframework/util/LinkedMultiValueMap."<init>":(I)V
      94: invokestatic  #125                // Method org/springframework/util/CollectionUtils.unmodifiableMultiValueMap:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/util/MultiValueMap;
      97: invokestatic  #126                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
     100: invokevirtual #17                 // Method reactor/core/publisher/Mono.cache:()Lreactor/core/publisher/Mono;
     103: putstatic     #47                 // Field EMPTY_MULTIPART_DATA:Lreactor/core/publisher/Mono;
     106: return
}
