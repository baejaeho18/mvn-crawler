Compiled from "AbstractMappingContentNegotiationStrategy.java"
public abstract class org.springframework.web.accept.AbstractMappingContentNegotiationStrategy extends org.springframework.web.accept.MappingMediaTypeFileExtensionResolver implements org.springframework.web.accept.ContentNegotiationStrategy {
  protected final org.apache.commons.logging.Log logger;

  private boolean useRegisteredExtensionsOnly;

  private boolean ignoreUnknownExtensions;

  public org.springframework.web.accept.AbstractMappingContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/web/accept/MappingMediaTypeFileExtensionResolver."<init>":(Ljava/util/Map;)V
       5: aload_0
       6: aload_0
       7: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      10: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      13: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      16: aload_0
      17: iconst_0
      18: putfield      #5                  // Field useRegisteredExtensionsOnly:Z
      21: aload_0
      22: iconst_0
      23: putfield      #6                  // Field ignoreUnknownExtensions:Z
      26: return

  public void setUseRegisteredExtensionsOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field useRegisteredExtensionsOnly:Z
       5: return

  public boolean isUseRegisteredExtensionsOnly();
    Code:
       0: aload_0
       1: getfield      #5                  // Field useRegisteredExtensionsOnly:Z
       4: ireturn

  public void setIgnoreUnknownExtensions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field ignoreUnknownExtensions:Z
       5: return

  public boolean isIgnoreUnknownExtensions();
    Code:
       0: aload_0
       1: getfield      #6                  // Field ignoreUnknownExtensions:Z
       4: ireturn

  public java.util.List<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest) throws org.springframework.web.HttpMediaTypeNotAcceptableException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: aload_1
       4: invokevirtual #7                  // Method getMediaTypeKey:(Lorg/springframework/web/context/request/NativeWebRequest;)Ljava/lang/String;
       7: invokevirtual #8                  // Method resolveMediaTypeKey:(Lorg/springframework/web/context/request/NativeWebRequest;Ljava/lang/String;)Ljava/util/List;
      10: areturn

  public java.util.List<org.springframework.http.MediaType> resolveMediaTypeKey(org.springframework.web.context.request.NativeWebRequest, java.lang.String) throws org.springframework.web.HttpMediaTypeNotAcceptableException;
    Code:
       0: aload_2
       1: invokestatic  #9                  // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
       4: ifeq          50
       7: aload_0
       8: aload_2
       9: invokevirtual #10                 // Method lookupMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      12: astore_3
      13: aload_3
      14: ifnull        28
      17: aload_0
      18: aload_2
      19: aload_3
      20: invokevirtual #11                 // Method handleMatch:(Ljava/lang/String;Lorg/springframework/http/MediaType;)V
      23: aload_3
      24: invokestatic  #12                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      27: areturn
      28: aload_0
      29: aload_1
      30: aload_2
      31: invokevirtual #13                 // Method handleNoMatch:(Lorg/springframework/web/context/request/NativeWebRequest;Ljava/lang/String;)Lorg/springframework/http/MediaType;
      34: astore_3
      35: aload_3
      36: ifnull        50
      39: aload_0
      40: aload_2
      41: aload_3
      42: invokevirtual #14                 // Method addMapping:(Ljava/lang/String;Lorg/springframework/http/MediaType;)V
      45: aload_3
      46: invokestatic  #12                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      49: areturn
      50: getstatic     #15                 // Field MEDIA_TYPE_ALL_LIST:Ljava/util/List;
      53: areturn

  protected abstract java.lang.String getMediaTypeKey(org.springframework.web.context.request.NativeWebRequest);

  protected void handleMatch(java.lang.String, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
       4: invokeinterface #16,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       9: ifeq          54
      12: aload_0
      13: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      16: new           #17                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #19                 // String Requested MediaType=\'
      25: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_2
      29: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      32: ldc           #22                 // String \' based on key=\'
      34: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_1
      38: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: ldc           #23                 // String \'.
      43: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokeinterface #25,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      54: return

  protected org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest, java.lang.String) throws org.springframework.web.HttpMediaTypeNotAcceptableException;
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method isUseRegisteredExtensionsOnly:()Z
       4: ifne          45
       7: new           #17                 // class java/lang/StringBuilder
      10: dup
      11: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      14: ldc           #27                 // String file.
      16: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_2
      20: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      26: invokestatic  #28                 // Method org/springframework/http/MediaTypeFactory.getMediaType:(Ljava/lang/String;)Ljava/util/Optional;
      29: astore_3
      30: aload_3
      31: invokevirtual #29                 // Method java/util/Optional.isPresent:()Z
      34: ifeq          45
      37: aload_3
      38: invokevirtual #30                 // Method java/util/Optional.get:()Ljava/lang/Object;
      41: checkcast     #31                 // class org/springframework/http/MediaType
      44: areturn
      45: aload_0
      46: invokevirtual #32                 // Method isIgnoreUnknownExtensions:()Z
      49: ifeq          54
      52: aconst_null
      53: areturn
      54: new           #33                 // class org/springframework/web/HttpMediaTypeNotAcceptableException
      57: dup
      58: aload_0
      59: invokevirtual #34                 // Method getAllMediaTypes:()Ljava/util/List;
      62: invokespecial #35                 // Method org/springframework/web/HttpMediaTypeNotAcceptableException."<init>":(Ljava/util/List;)V
      65: athrow
}
