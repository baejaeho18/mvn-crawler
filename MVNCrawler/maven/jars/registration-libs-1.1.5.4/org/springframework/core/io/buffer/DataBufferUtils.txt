Compiled from "DataBufferUtils.java"
public abstract class org.springframework.core.io.buffer.DataBufferUtils {
  private static final java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer> RELEASE_CONSUMER;

  public org.springframework.core.io.buffer.DataBufferUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(java.io.InputStream, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: invokedynamic #2,  0              // InvokeDynamic #0:call:(Ljava/io/InputStream;)Ljava/util/concurrent/Callable;
       6: aload_1
       7: iload_2
       8: invokestatic  #3                  // Method readInputStream:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      11: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readInputStream(java.util.concurrent.Callable<java.io.InputStream>, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: ldc           #4                  // String \'inputStreamSupplier\' must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokedynamic #6,  0              // InvokeDynamic #1:call:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;
      12: aload_1
      13: iload_2
      14: invokestatic  #7                  // Method readByteChannel:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      17: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(java.nio.channels.ReadableByteChannel, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: invokedynamic #8,  0              // InvokeDynamic #2:call:(Ljava/nio/channels/ReadableByteChannel;)Ljava/util/concurrent/Callable;
       6: aload_1
       7: iload_2
       8: invokestatic  #7                  // Method readByteChannel:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      11: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readByteChannel(java.util.concurrent.Callable<java.nio.channels.ReadableByteChannel>, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: ldc           #9                  // String \'channelSupplier\' must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #10                 // String \'dataBufferFactory\' must not be null
       9: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: iload_2
      13: ifle          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #11                 // String \'bufferSize\' must be > 0
      23: invokestatic  #12                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      26: aload_0
      27: aload_1
      28: iload_2
      29: invokedynamic #13,  0             // InvokeDynamic #3:apply:(Lorg/springframework/core/io/buffer/DataBufferFactory;I)Ljava/util/function/Function;
      34: invokedynamic #14,  0             // InvokeDynamic #4:accept:()Ljava/util/function/Consumer;
      39: invokestatic  #15                 // Method reactor/core/publisher/Flux.using:(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      42: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(java.nio.channels.AsynchronousFileChannel, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: invokedynamic #16,  0             // InvokeDynamic #5:call:(Ljava/nio/channels/AsynchronousFileChannel;)Ljava/util/concurrent/Callable;
       6: aload_1
       7: iload_2
       8: invokestatic  #17                 // Method readAsynchronousFileChannel:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      11: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(java.nio.channels.AsynchronousFileChannel, long, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: invokedynamic #18,  0             // InvokeDynamic #6:call:(Ljava/nio/channels/AsynchronousFileChannel;)Ljava/util/concurrent/Callable;
       6: lload_1
       7: aload_3
       8: iload         4
      10: invokestatic  #19                 // Method readAsynchronousFileChannel:(Ljava/util/concurrent/Callable;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      13: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: lconst_0
       2: aload_1
       3: iload_2
       4: invokestatic  #19                 // Method readAsynchronousFileChannel:(Ljava/util/concurrent/Callable;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
       7: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, long, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: ldc           #9                  // String \'channelSupplier\' must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_3
       7: ldc           #10                 // String \'dataBufferFactory\' must not be null
       9: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: lload_1
      13: lconst_0
      14: lcmp
      15: iflt          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #20                 // String \'position\' must be >= 0
      25: invokestatic  #12                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      28: iload         4
      30: ifle          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ldc           #11                 // String \'bufferSize\' must be > 0
      40: invokestatic  #12                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      43: aload_3
      44: iload         4
      46: invokeinterface #21,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.allocateBuffer:(I)Lorg/springframework/core/io/buffer/DataBuffer;
      51: astore        5
      53: aload         5
      55: iconst_0
      56: iload         4
      58: invokeinterface #22,  3           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:(II)Ljava/nio/ByteBuffer;
      63: astore        6
      65: aload_0
      66: lload_1
      67: aload_3
      68: iload         4
      70: aload         6
      72: aload         5
      74: invokedynamic #23,  0             // InvokeDynamic #7:apply:(JLorg/springframework/core/io/buffer/DataBufferFactory;ILjava/nio/ByteBuffer;Lorg/springframework/core/io/buffer/DataBuffer;)Ljava/util/function/Function;
      79: invokedynamic #24,  0             // InvokeDynamic #8:accept:()Ljava/util/function/Consumer;
      84: invokestatic  #15                 // Method reactor/core/publisher/Flux.using:(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      87: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(org.springframework.core.io.Resource, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: lconst_0
       2: aload_1
       3: iload_2
       4: invokestatic  #25                 // Method read:(Lorg/springframework/core/io/Resource;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
       7: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(org.springframework.core.io.Resource, long, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: invokeinterface #26,  1           // InterfaceMethod org/springframework/core/io/Resource.isFile:()Z
       6: ifeq          32
       9: aload_0
      10: invokeinterface #27,  1           // InterfaceMethod org/springframework/core/io/Resource.getFile:()Ljava/io/File;
      15: astore        5
      17: aload         5
      19: invokedynamic #28,  0             // InvokeDynamic #9:call:(Ljava/io/File;)Ljava/util/concurrent/Callable;
      24: lload_1
      25: aload_3
      26: iload         4
      28: invokestatic  #19                 // Method readAsynchronousFileChannel:(Ljava/util/concurrent/Callable;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      31: areturn
      32: goto          37
      35: astore        5
      37: aload_0
      38: dup
      39: invokevirtual #30                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      42: pop
      43: invokedynamic #31,  0             // InvokeDynamic #10:call:(Lorg/springframework/core/io/Resource;)Ljava/util/concurrent/Callable;
      48: aload_3
      49: iload         4
      51: invokestatic  #7                  // Method readByteChannel:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      54: astore        5
      56: lload_1
      57: lconst_0
      58: lcmp
      59: ifne          67
      62: aload         5
      64: goto          73
      67: aload         5
      69: lload_1
      70: invokestatic  #32                 // Method skipUntilByteCount:(Lorg/reactivestreams/Publisher;J)Lreactor/core/publisher/Flux;
      73: areturn
    Exception table:
       from    to  target type
           0    31    35   Class java/io/IOException

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.io.OutputStream);
    Code:
       0: aload_0
       1: ldc           #33                 // String \'source\' must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #34                 // String \'outputStream\' must not be null
       9: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_1
      13: invokestatic  #35                 // Method java/nio/channels/Channels.newChannel:(Ljava/io/OutputStream;)Ljava/nio/channels/WritableByteChannel;
      16: astore_2
      17: aload_0
      18: aload_2
      19: invokestatic  #36                 // Method write:(Lorg/reactivestreams/Publisher;Ljava/nio/channels/WritableByteChannel;)Lreactor/core/publisher/Flux;
      22: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.WritableByteChannel);
    Code:
       0: aload_0
       1: ldc           #33                 // String \'source\' must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #37                 // String \'channel\' must not be null
       9: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: invokestatic  #38                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      16: astore_2
      17: aload_2
      18: aload_1
      19: invokedynamic #39,  0             // InvokeDynamic #11:accept:(Lreactor/core/publisher/Flux;Ljava/nio/channels/WritableByteChannel;)Ljava/util/function/Consumer;
      24: invokestatic  #40                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      27: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel, long);
    Code:
       0: aload_0
       1: ldc           #33                 // String \'source\' must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #37                 // String \'channel\' must not be null
       9: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: lload_2
      13: lconst_0
      14: lcmp
      15: iflt          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #20                 // String \'position\' must be >= 0
      25: invokestatic  #12                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      28: aload_0
      29: invokestatic  #38                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      32: astore        4
      34: aload         4
      36: aload_1
      37: lload_2
      38: invokedynamic #41,  0             // InvokeDynamic #12:accept:(Lreactor/core/publisher/Flux;Ljava/nio/channels/AsynchronousFileChannel;J)Ljava/util/function/Consumer;
      43: invokestatic  #40                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      46: areturn

  private static void closeChannel(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: ifnull        23
       4: aload_0
       5: invokeinterface #42,  1           // InterfaceMethod java/nio/channels/Channel.isOpen:()Z
      10: ifeq          23
      13: aload_0
      14: invokeinterface #43,  1           // InterfaceMethod java/nio/channels/Channel.close:()V
      19: goto          23
      22: astore_1
      23: return
    Exception table:
       from    to  target type
          13    19    22   Class java/io/IOException

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> takeUntilByteCount(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, long);
    Code:
       0: aload_0
       1: ldc           #44                 // String Publisher must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: lload_1
       7: lconst_0
       8: lcmp
       9: iflt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #45                 // String \'maxByteCount\' must be a positive number
      19: invokestatic  #12                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      22: new           #46                 // class java/util/concurrent/atomic/AtomicLong
      25: dup
      26: lload_1
      27: invokespecial #47                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      30: astore_3
      31: aload_0
      32: invokestatic  #38                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      35: aload_3
      36: invokedynamic #48,  0             // InvokeDynamic #13:test:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Predicate;
      41: invokevirtual #49                 // Method reactor/core/publisher/Flux.takeWhile:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
      44: aload_3
      45: invokedynamic #50,  0             // InvokeDynamic #14:apply:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Function;
      50: invokevirtual #51                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      53: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> skipUntilByteCount(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, long);
    Code:
       0: aload_0
       1: ldc           #44                 // String Publisher must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: lload_1
       7: lconst_0
       8: lcmp
       9: iflt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #45                 // String \'maxByteCount\' must be a positive number
      19: invokestatic  #12                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      22: new           #46                 // class java/util/concurrent/atomic/AtomicLong
      25: dup
      26: lload_1
      27: invokespecial #47                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      30: astore_3
      31: aload_0
      32: invokestatic  #38                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      35: aload_3
      36: invokedynamic #52,  0             // InvokeDynamic #15:test:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Predicate;
      41: invokevirtual #53                 // Method reactor/core/publisher/Flux.skipUntil:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
      44: aload_3
      45: invokedynamic #54,  0             // InvokeDynamic #16:apply:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Function;
      50: invokevirtual #51                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      53: areturn

  public static <T extends org.springframework.core.io.buffer.DataBuffer> T retain(T);
    Code:
       0: aload_0
       1: instanceof    #55                 // class org/springframework/core/io/buffer/PooledDataBuffer
       4: ifeq          17
       7: aload_0
       8: checkcast     #55                 // class org/springframework/core/io/buffer/PooledDataBuffer
      11: invokeinterface #56,  1           // InterfaceMethod org/springframework/core/io/buffer/PooledDataBuffer.retain:()Lorg/springframework/core/io/buffer/PooledDataBuffer;
      16: areturn
      17: aload_0
      18: areturn

  public static boolean release(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: instanceof    #55                 // class org/springframework/core/io/buffer/PooledDataBuffer
       4: ifeq          23
       7: aload_0
       8: checkcast     #55                 // class org/springframework/core/io/buffer/PooledDataBuffer
      11: invokeinterface #57,  1           // InterfaceMethod org/springframework/core/io/buffer/PooledDataBuffer.release:()Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public static java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer> releaseConsumer();
    Code:
       0: getstatic     #58                 // Field RELEASE_CONSUMER:Ljava/util/function/Consumer;
       3: areturn

  public static reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer> join(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: ldc           #59                 // String \'dataBuffers\' must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokestatic  #38                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      10: invokevirtual #60                 // Method reactor/core/publisher/Flux.collectList:()Lreactor/core/publisher/Mono;
      13: invokedynamic #61,  0             // InvokeDynamic #17:test:()Ljava/util/function/Predicate;
      18: invokevirtual #62                 // Method reactor/core/publisher/Mono.filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      21: invokedynamic #63,  0             // InvokeDynamic #18:apply:()Ljava/util/function/Function;
      26: invokevirtual #64                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      29: areturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$join$17(java.util.List);
    Code:
       0: aload_0
       1: iconst_0
       2: invokeinterface #65,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
       7: checkcast     #66                 // class org/springframework/core/io/buffer/DataBuffer
      10: invokeinterface #67,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.factory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      15: astore_1
      16: aload_1
      17: aload_0
      18: invokeinterface #68,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.join:(Ljava/util/List;)Lorg/springframework/core/io/buffer/DataBuffer;
      23: areturn

  private static boolean lambda$join$16(java.util.List);
    Code:
       0: aload_0
       1: invokeinterface #69,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$skipUntilByteCount$15(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       4: lstore_2
       5: lload_2
       6: lconst_0
       7: lcmp
       8: ifge          46
      11: lload_2
      12: aload_1
      13: invokeinterface #71,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      18: i2l
      19: ladd
      20: l2i
      21: istore        4
      23: aload_0
      24: lconst_0
      25: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      28: aload_1
      29: iload         4
      31: aload_1
      32: invokeinterface #71,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      37: iload         4
      39: isub
      40: invokeinterface #73,  3           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.slice:(II)Lorg/springframework/core/io/buffer/DataBuffer;
      45: areturn
      46: aload_1
      47: areturn

  private static boolean lambda$skipUntilByteCount$14(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_1
       1: invokeinterface #71,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       6: ineg
       7: istore_2
       8: aload_0
       9: iload_2
      10: i2l
      11: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      14: lstore_3
      15: lload_3
      16: lconst_0
      17: lcmp
      18: ifge          23
      21: iconst_1
      22: ireturn
      23: aload_1
      24: invokestatic  #75                 // Method release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      27: pop
      28: iconst_0
      29: ireturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$takeUntilByteCount$13(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       4: lstore_2
       5: lload_2
       6: lconst_0
       7: lcmp
       8: iflt          13
      11: aload_1
      12: areturn
      13: lload_2
      14: aload_1
      15: invokeinterface #71,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      20: i2l
      21: ladd
      22: l2i
      23: istore        4
      25: aload_1
      26: iconst_0
      27: iload         4
      29: invokeinterface #73,  3           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.slice:(II)Lorg/springframework/core/io/buffer/DataBuffer;
      34: areturn

  private static boolean lambda$takeUntilByteCount$12(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_1
       1: invokeinterface #71,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       6: ineg
       7: istore_2
       8: aload_0
       9: iload_2
      10: i2l
      11: invokevirtual #76                 // Method java/util/concurrent/atomic/AtomicLong.getAndAdd:(J)J
      14: lstore_3
      15: lload_3
      16: lconst_0
      17: lcmp
      18: iflt          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  private static void lambda$write$11(reactor.core.publisher.Flux, java.nio.channels.AsynchronousFileChannel, long, reactor.core.publisher.FluxSink);
    Code:
       0: aload_0
       1: new           #77                 // class org/springframework/core/io/buffer/DataBufferUtils$AsynchronousFileChannelWriteCompletionHandler
       4: dup
       5: aload         4
       7: aload_1
       8: lload_2
       9: invokespecial #78                 // Method org/springframework/core/io/buffer/DataBufferUtils$AsynchronousFileChannelWriteCompletionHandler."<init>":(Lreactor/core/publisher/FluxSink;Ljava/nio/channels/AsynchronousFileChannel;J)V
      12: invokevirtual #79                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      15: return

  private static void lambda$write$10(reactor.core.publisher.Flux, java.nio.channels.WritableByteChannel, reactor.core.publisher.FluxSink);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #80,  0             // InvokeDynamic #19:accept:(Ljava/nio/channels/WritableByteChannel;Lreactor/core/publisher/FluxSink;)Ljava/util/function/Consumer;
       8: aload_2
       9: dup
      10: invokevirtual #30                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      13: pop
      14: invokedynamic #81,  0             // InvokeDynamic #20:accept:(Lreactor/core/publisher/FluxSink;)Ljava/util/function/Consumer;
      19: aload_2
      20: dup
      21: invokevirtual #30                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      24: pop
      25: invokedynamic #82,  0             // InvokeDynamic #21:run:(Lreactor/core/publisher/FluxSink;)Ljava/lang/Runnable;
      30: invokevirtual #83                 // Method reactor/core/publisher/Flux.subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
      33: pop
      34: return

  private static void lambda$null$9(java.nio.channels.WritableByteChannel, reactor.core.publisher.FluxSink, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_2
       1: invokeinterface #84,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
       6: astore_3
       7: aload_3
       8: invokevirtual #85                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      11: ifeq          25
      14: aload_0
      15: aload_3
      16: invokeinterface #86,  2           // InterfaceMethod java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I
      21: pop
      22: goto          7
      25: aload_1
      26: aload_2
      27: invokeinterface #87,  2           // InterfaceMethod reactor/core/publisher/FluxSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
      32: pop
      33: goto          44
      36: astore_3
      37: aload_1
      38: aload_3
      39: invokeinterface #88,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      44: return
    Exception table:
       from    to  target type
           0    33    36   Class java/io/IOException

  private static java.nio.channels.AsynchronousFileChannel lambda$read$8(java.io.File) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #89                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
       4: iconst_1
       5: anewarray     #90                 // class java/nio/file/OpenOption
       8: dup
       9: iconst_0
      10: getstatic     #91                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;
      13: aastore
      14: invokestatic  #92                 // Method java/nio/channels/AsynchronousFileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/AsynchronousFileChannel;
      17: areturn

  private static org.reactivestreams.Publisher lambda$readAsynchronousFileChannel$7(long, org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.ByteBuffer, org.springframework.core.io.buffer.DataBuffer, java.nio.channels.AsynchronousFileChannel);
    Code:
       0: aload         6
       2: lload_0
       3: aload_2
       4: iload_3
       5: aload         4
       7: aload         5
       9: invokedynamic #93,  0             // InvokeDynamic #22:accept:(Ljava/nio/channels/AsynchronousFileChannel;JLorg/springframework/core/io/buffer/DataBufferFactory;ILjava/nio/ByteBuffer;Lorg/springframework/core/io/buffer/DataBuffer;)Ljava/util/function/Consumer;
      14: invokestatic  #40                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      17: areturn

  private static void lambda$null$6(java.nio.channels.AsynchronousFileChannel, long, org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.ByteBuffer, org.springframework.core.io.buffer.DataBuffer, reactor.core.publisher.FluxSink);
    Code:
       0: new           #94                 // class org/springframework/core/io/buffer/DataBufferUtils$AsynchronousFileChannelReadCompletionHandler
       3: dup
       4: aload_0
       5: aload         7
       7: lload_1
       8: aload_3
       9: iload         4
      11: invokespecial #95                 // Method org/springframework/core/io/buffer/DataBufferUtils$AsynchronousFileChannelReadCompletionHandler."<init>":(Ljava/nio/channels/AsynchronousFileChannel;Lreactor/core/publisher/FluxSink;JLorg/springframework/core/io/buffer/DataBufferFactory;I)V
      14: astore        8
      16: aload_0
      17: aload         5
      19: lload_1
      20: aload         6
      22: aload         8
      24: invokevirtual #96                 // Method java/nio/channels/AsynchronousFileChannel.read:(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V
      27: return

  private static java.nio.channels.AsynchronousFileChannel lambda$read$5(java.nio.channels.AsynchronousFileChannel) throws java.lang.Exception;
    Code:
       0: aload_0
       1: areturn

  private static java.nio.channels.AsynchronousFileChannel lambda$read$4(java.nio.channels.AsynchronousFileChannel) throws java.lang.Exception;
    Code:
       0: aload_0
       1: areturn

  private static org.reactivestreams.Publisher lambda$readByteChannel$3(org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.channels.ReadableByteChannel);
    Code:
       0: new           #97                 // class org/springframework/core/io/buffer/DataBufferUtils$ReadableByteChannelGenerator
       3: dup
       4: aload_2
       5: aload_0
       6: iload_1
       7: invokespecial #98                 // Method org/springframework/core/io/buffer/DataBufferUtils$ReadableByteChannelGenerator."<init>":(Ljava/nio/channels/ReadableByteChannel;Lorg/springframework/core/io/buffer/DataBufferFactory;I)V
      10: astore_3
      11: aload_3
      12: invokestatic  #99                 // Method reactor/core/publisher/Flux.generate:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      15: areturn

  private static java.nio.channels.ReadableByteChannel lambda$read$2(java.nio.channels.ReadableByteChannel) throws java.lang.Exception;
    Code:
       0: aload_0
       1: areturn

  private static java.nio.channels.ReadableByteChannel lambda$readInputStream$1(java.util.concurrent.Callable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       6: checkcast     #101                // class java/io/InputStream
       9: invokestatic  #102                // Method java/nio/channels/Channels.newChannel:(Ljava/io/InputStream;)Ljava/nio/channels/ReadableByteChannel;
      12: areturn

  private static java.io.InputStream lambda$read$0(java.io.InputStream) throws java.lang.Exception;
    Code:
       0: aload_0
       1: areturn

  static {};
    Code:
       0: invokedynamic #103,  0            // InvokeDynamic #23:accept:()Ljava/util/function/Consumer;
       5: putstatic     #58                 // Field RELEASE_CONSUMER:Ljava/util/function/Consumer;
       8: return
}
