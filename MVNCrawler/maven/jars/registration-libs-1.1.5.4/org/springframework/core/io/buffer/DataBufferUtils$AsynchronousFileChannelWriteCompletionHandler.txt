Compiled from "DataBufferUtils.java"
class org.springframework.core.io.buffer.DataBufferUtils$AsynchronousFileChannelWriteCompletionHandler extends reactor.core.publisher.BaseSubscriber<org.springframework.core.io.buffer.DataBuffer> implements java.nio.channels.CompletionHandler<java.lang.Integer, java.nio.ByteBuffer> {
  private final reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer> sink;

  private final java.nio.channels.AsynchronousFileChannel channel;

  private final java.util.concurrent.atomic.AtomicBoolean completed;

  private final java.util.concurrent.atomic.AtomicLong position;

  private org.springframework.core.io.buffer.DataBuffer dataBuffer;

  public org.springframework.core.io.buffer.DataBufferUtils$AsynchronousFileChannelWriteCompletionHandler(reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/BaseSubscriber."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #4                  // Field completed:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field sink:Lreactor/core/publisher/FluxSink;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field channel:Ljava/nio/channels/AsynchronousFileChannel;
      25: aload_0
      26: new           #7                  // class java/util/concurrent/atomic/AtomicLong
      29: dup
      30: lload_3
      31: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      34: putfield      #9                  // Field position:Ljava/util/concurrent/atomic/AtomicLong;
      37: return

  protected void hookOnSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: lconst_1
       2: invokevirtual #10                 // Method request:(J)V
       5: return

  protected void hookOnNext(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field dataBuffer:Lorg/springframework/core/io/buffer/DataBuffer;
       5: aload_1
       6: invokeinterface #12,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
      11: astore_2
      12: aload_0
      13: getfield      #6                  // Field channel:Ljava/nio/channels/AsynchronousFileChannel;
      16: aload_2
      17: aload_0
      18: getfield      #9                  // Field position:Ljava/util/concurrent/atomic/AtomicLong;
      21: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      24: aload_2
      25: aload_0
      26: invokevirtual #14                 // Method java/nio/channels/AsynchronousFileChannel.write:(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V
      29: return

  protected void hookOnError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #5                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: aload_1
       5: invokeinterface #15,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      10: return

  protected void hookOnComplete();
    Code:
       0: aload_0
       1: getfield      #4                  // Field completed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: aload_0
       9: getfield      #11                 // Field dataBuffer:Lorg/springframework/core/io/buffer/DataBuffer;
      12: ifnonnull     24
      15: aload_0
      16: getfield      #5                  // Field sink:Lreactor/core/publisher/FluxSink;
      19: invokeinterface #17,  1           // InterfaceMethod reactor/core/publisher/FluxSink.complete:()V
      24: return

  public void completed(java.lang.Integer, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #9                  // Field position:Ljava/util/concurrent/atomic/AtomicLong;
       4: aload_1
       5: invokevirtual #18                 // Method java/lang/Integer.intValue:()I
       8: i2l
       9: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      12: lstore_3
      13: aload_2
      14: invokevirtual #20                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      17: ifeq          32
      20: aload_0
      21: getfield      #6                  // Field channel:Ljava/nio/channels/AsynchronousFileChannel;
      24: aload_2
      25: lload_3
      26: aload_2
      27: aload_0
      28: invokevirtual #14                 // Method java/nio/channels/AsynchronousFileChannel.write:(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V
      31: return
      32: aload_0
      33: getfield      #11                 // Field dataBuffer:Lorg/springframework/core/io/buffer/DataBuffer;
      36: ifnull        58
      39: aload_0
      40: getfield      #5                  // Field sink:Lreactor/core/publisher/FluxSink;
      43: aload_0
      44: getfield      #11                 // Field dataBuffer:Lorg/springframework/core/io/buffer/DataBuffer;
      47: invokeinterface #21,  2           // InterfaceMethod reactor/core/publisher/FluxSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
      52: pop
      53: aload_0
      54: aconst_null
      55: putfield      #11                 // Field dataBuffer:Lorg/springframework/core/io/buffer/DataBuffer;
      58: aload_0
      59: getfield      #4                  // Field completed:Ljava/util/concurrent/atomic/AtomicBoolean;
      62: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      65: ifeq          80
      68: aload_0
      69: getfield      #5                  // Field sink:Lreactor/core/publisher/FluxSink;
      72: invokeinterface #17,  1           // InterfaceMethod reactor/core/publisher/FluxSink.complete:()V
      77: goto          85
      80: aload_0
      81: lconst_1
      82: invokevirtual #10                 // Method request:(J)V
      85: return

  public void failed(java.lang.Throwable, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #5                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: aload_1
       5: invokeinterface #15,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      10: return

  protected void hookOnNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #23                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #24                 // Method hookOnNext:(Lorg/springframework/core/io/buffer/DataBuffer;)V
       8: return

  public void failed(java.lang.Throwable, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #25                 // class java/nio/ByteBuffer
       6: invokevirtual #26                 // Method failed:(Ljava/lang/Throwable;Ljava/nio/ByteBuffer;)V
       9: return

  public void completed(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #27                 // class java/lang/Integer
       5: aload_2
       6: checkcast     #25                 // class java/nio/ByteBuffer
       9: invokevirtual #28                 // Method completed:(Ljava/lang/Integer;Ljava/nio/ByteBuffer;)V
      12: return
}
