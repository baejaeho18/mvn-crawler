Compiled from "ResourceDecoder.java"
public class org.springframework.core.codec.ResourceDecoder extends org.springframework.core.codec.AbstractDataBufferDecoder<org.springframework.core.io.Resource> {
  public org.springframework.core.codec.ResourceDecoder();
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #1                  // class org/springframework/util/MimeType
       5: dup
       6: iconst_0
       7: getstatic     #2                  // Field org/springframework/util/MimeTypeUtils.ALL:Lorg/springframework/util/MimeType;
      10: aastore
      11: invokespecial #3                  // Method org/springframework/core/codec/AbstractDataBufferDecoder."<init>":([Lorg/springframework/util/MimeType;)V
      14: return

  public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType);
    Code:
       0: aload_1
       1: invokevirtual #4                  // Method org/springframework/core/ResolvableType.getRawClass:()Ljava/lang/Class;
       4: astore_3
       5: aload_3
       6: ifnull        31
       9: ldc           #5                  // class org/springframework/core/io/Resource
      11: aload_3
      12: invokevirtual #6                  // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      15: ifeq          31
      18: aload_0
      19: aload_1
      20: aload_2
      21: invokespecial #7                  // Method org/springframework/core/codec/AbstractDataBufferDecoder.canDecode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      24: ifeq          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public reactor.core.publisher.Flux<org.springframework.core.io.Resource> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokevirtual #8                  // Method decodeToMono:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Mono;
       9: invokestatic  #9                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      12: areturn

  protected org.springframework.core.io.Resource decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: invokeinterface #10,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       6: newarray       byte
       8: astore        5
      10: aload_1
      11: aload         5
      13: invokeinterface #11,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.read:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      18: pop
      19: aload_1
      20: invokestatic  #12                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      23: pop
      24: aload_2
      25: invokevirtual #4                  // Method org/springframework/core/ResolvableType.getRawClass:()Ljava/lang/Class;
      28: astore        6
      30: aload         6
      32: ifnull        39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ldc           #13                 // String No resource class
      42: invokestatic  #14                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      45: ldc           #15                 // class org/springframework/core/io/InputStreamResource
      47: aload         6
      49: if_acmpne     69
      52: new           #15                 // class org/springframework/core/io/InputStreamResource
      55: dup
      56: new           #16                 // class java/io/ByteArrayInputStream
      59: dup
      60: aload         5
      62: invokespecial #17                 // Method java/io/ByteArrayInputStream."<init>":([B)V
      65: invokespecial #18                 // Method org/springframework/core/io/InputStreamResource."<init>":(Ljava/io/InputStream;)V
      68: areturn
      69: ldc           #5                  // class org/springframework/core/io/Resource
      71: aload         6
      73: invokevirtual #6                  // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      76: ifeq          89
      79: new           #19                 // class org/springframework/core/io/ByteArrayResource
      82: dup
      83: aload         5
      85: invokespecial #20                 // Method org/springframework/core/io/ByteArrayResource."<init>":([B)V
      88: areturn
      89: new           #21                 // class java/lang/IllegalStateException
      92: dup
      93: new           #22                 // class java/lang/StringBuilder
      96: dup
      97: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
     100: ldc           #24                 // String Unsupported resource class:
     102: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     105: aload         6
     107: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     110: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     113: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     116: athrow

  protected java.lang.Object decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokevirtual #29                 // Method decodeDataBuffer:(Lorg/springframework/core/io/buffer/DataBuffer;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lorg/springframework/core/io/Resource;
       9: areturn
}
