Compiled from "AbstractPropertyResolver.java"
public abstract class org.springframework.core.env.AbstractPropertyResolver implements org.springframework.core.env.ConfigurablePropertyResolver {
  protected final org.apache.commons.logging.Log logger;

  private volatile org.springframework.core.convert.support.ConfigurableConversionService conversionService;

  private org.springframework.util.PropertyPlaceholderHelper nonStrictHelper;

  private org.springframework.util.PropertyPlaceholderHelper strictHelper;

  private boolean ignoreUnresolvableNestedPlaceholders;

  private java.lang.String placeholderPrefix;

  private java.lang.String placeholderSuffix;

  private java.lang.String valueSeparator;

  private final java.util.Set<java.lang.String> requiredProperties;

  public org.springframework.core.env.AbstractPropertyResolver();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field ignoreUnresolvableNestedPlaceholders:Z
      20: aload_0
      21: ldc           #7                  // String ${
      23: putfield      #8                  // Field placeholderPrefix:Ljava/lang/String;
      26: aload_0
      27: ldc           #9                  // String }
      29: putfield      #10                 // Field placeholderSuffix:Ljava/lang/String;
      32: aload_0
      33: ldc           #11                 // String :
      35: putfield      #12                 // Field valueSeparator:Ljava/lang/String;
      38: aload_0
      39: new           #13                 // class java/util/LinkedHashSet
      42: dup
      43: invokespecial #14                 // Method java/util/LinkedHashSet."<init>":()V
      46: putfield      #15                 // Field requiredProperties:Ljava/util/Set;
      49: return

  public org.springframework.core.convert.support.ConfigurableConversionService getConversionService();
    Code:
       0: aload_0
       1: getfield      #16                 // Field conversionService:Lorg/springframework/core/convert/support/ConfigurableConversionService;
       4: astore_1
       5: aload_1
       6: ifnonnull     45
       9: aload_0
      10: dup
      11: astore_2
      12: monitorenter
      13: aload_0
      14: getfield      #16                 // Field conversionService:Lorg/springframework/core/convert/support/ConfigurableConversionService;
      17: astore_1
      18: aload_1
      19: ifnonnull     35
      22: new           #17                 // class org/springframework/core/convert/support/DefaultConversionService
      25: dup
      26: invokespecial #18                 // Method org/springframework/core/convert/support/DefaultConversionService."<init>":()V
      29: astore_1
      30: aload_0
      31: aload_1
      32: putfield      #16                 // Field conversionService:Lorg/springframework/core/convert/support/ConfigurableConversionService;
      35: aload_2
      36: monitorexit
      37: goto          45
      40: astore_3
      41: aload_2
      42: monitorexit
      43: aload_3
      44: athrow
      45: aload_1
      46: areturn
    Exception table:
       from    to  target type
          13    37    40   any
          40    43    40   any

  public void setConversionService(org.springframework.core.convert.support.ConfigurableConversionService);
    Code:
       0: aload_1
       1: ldc           #19                 // String ConversionService must not be null
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #16                 // Field conversionService:Lorg/springframework/core/convert/support/ConfigurableConversionService;
      11: return

  public void setPlaceholderPrefix(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #21                 // String \'placeholderPrefix\' must not be null
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #8                  // Field placeholderPrefix:Ljava/lang/String;
      11: return

  public void setPlaceholderSuffix(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #22                 // String \'placeholderSuffix\' must not be null
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #10                 // Field placeholderSuffix:Ljava/lang/String;
      11: return

  public void setValueSeparator(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field valueSeparator:Ljava/lang/String;
       5: return

  public void setIgnoreUnresolvableNestedPlaceholders(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field ignoreUnresolvableNestedPlaceholders:Z
       5: return

  public void setRequiredProperties(java.lang.String...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     38
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload_0
      21: getfield      #15                 // Field requiredProperties:Ljava/util/Set;
      24: aload         5
      26: invokeinterface #23,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      31: pop
      32: iinc          4, 1
      35: goto          8
      38: return

  public void validateRequiredProperties();
    Code:
       0: new           #24                 // class org/springframework/core/env/MissingRequiredPropertiesException
       3: dup
       4: invokespecial #25                 // Method org/springframework/core/env/MissingRequiredPropertiesException."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #15                 // Field requiredProperties:Ljava/util/Set;
      12: invokeinterface #26,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          53
      27: aload_2
      28: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #29                 // class java/lang/String
      36: astore_3
      37: aload_0
      38: aload_3
      39: invokevirtual #30                 // Method getProperty:(Ljava/lang/String;)Ljava/lang/String;
      42: ifnonnull     50
      45: aload_1
      46: aload_3
      47: invokevirtual #31                 // Method org/springframework/core/env/MissingRequiredPropertiesException.addMissingRequiredProperty:(Ljava/lang/String;)V
      50: goto          18
      53: aload_1
      54: invokevirtual #32                 // Method org/springframework/core/env/MissingRequiredPropertiesException.getMissingRequiredProperties:()Ljava/util/Set;
      57: invokeinterface #33,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      62: ifne          67
      65: aload_1
      66: athrow
      67: return

  public boolean containsProperty(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #30                 // Method getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: ifnull        12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public java.lang.String getProperty(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #29                 // class java/lang/String
       4: invokevirtual #34                 // Method getProperty:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
       7: checkcast     #29                 // class java/lang/String
      10: areturn

  public java.lang.String getProperty(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #30                 // Method getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_3
       6: aload_3
       7: ifnull        14
      10: aload_3
      11: goto          15
      14: aload_2
      15: areturn

  public <T> T getProperty(java.lang.String, java.lang.Class<T>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #34                 // Method getProperty:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
       6: astore        4
       8: aload         4
      10: ifnull        18
      13: aload         4
      15: goto          19
      18: aload_3
      19: areturn

  public java.lang.String getRequiredProperty(java.lang.String) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #30                 // Method getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_2
       6: aload_2
       7: ifnonnull     42
      10: new           #35                 // class java/lang/IllegalStateException
      13: dup
      14: new           #36                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #37                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #38                 // String Required key \'
      23: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_1
      27: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: ldc           #40                 // String \' not found
      32: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: invokespecial #42                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_2
      43: areturn

  public <T> T getRequiredProperty(java.lang.String, java.lang.Class<T>) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #34                 // Method getProperty:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
       6: astore_3
       7: aload_3
       8: ifnonnull     43
      11: new           #35                 // class java/lang/IllegalStateException
      14: dup
      15: new           #36                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #37                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #38                 // String Required key \'
      24: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_1
      28: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: ldc           #40                 // String \' not found
      33: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: invokespecial #42                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_3
      44: areturn

  public java.lang.String resolvePlaceholders(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #43                 // Field nonStrictHelper:Lorg/springframework/util/PropertyPlaceholderHelper;
       4: ifnonnull     16
       7: aload_0
       8: aload_0
       9: iconst_1
      10: invokespecial #44                 // Method createPlaceholderHelper:(Z)Lorg/springframework/util/PropertyPlaceholderHelper;
      13: putfield      #43                 // Field nonStrictHelper:Lorg/springframework/util/PropertyPlaceholderHelper;
      16: aload_0
      17: aload_1
      18: aload_0
      19: getfield      #43                 // Field nonStrictHelper:Lorg/springframework/util/PropertyPlaceholderHelper;
      22: invokespecial #45                 // Method doResolvePlaceholders:(Ljava/lang/String;Lorg/springframework/util/PropertyPlaceholderHelper;)Ljava/lang/String;
      25: areturn

  public java.lang.String resolveRequiredPlaceholders(java.lang.String) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: getfield      #46                 // Field strictHelper:Lorg/springframework/util/PropertyPlaceholderHelper;
       4: ifnonnull     16
       7: aload_0
       8: aload_0
       9: iconst_0
      10: invokespecial #44                 // Method createPlaceholderHelper:(Z)Lorg/springframework/util/PropertyPlaceholderHelper;
      13: putfield      #46                 // Field strictHelper:Lorg/springframework/util/PropertyPlaceholderHelper;
      16: aload_0
      17: aload_1
      18: aload_0
      19: getfield      #46                 // Field strictHelper:Lorg/springframework/util/PropertyPlaceholderHelper;
      22: invokespecial #45                 // Method doResolvePlaceholders:(Ljava/lang/String;Lorg/springframework/util/PropertyPlaceholderHelper;)Ljava/lang/String;
      25: areturn

  protected java.lang.String resolveNestedPlaceholders(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field ignoreUnresolvableNestedPlaceholders:Z
       4: ifeq          15
       7: aload_0
       8: aload_1
       9: invokevirtual #47                 // Method resolvePlaceholders:(Ljava/lang/String;)Ljava/lang/String;
      12: goto          20
      15: aload_0
      16: aload_1
      17: invokevirtual #48                 // Method resolveRequiredPlaceholders:(Ljava/lang/String;)Ljava/lang/String;
      20: areturn

  private org.springframework.util.PropertyPlaceholderHelper createPlaceholderHelper(boolean);
    Code:
       0: new           #49                 // class org/springframework/util/PropertyPlaceholderHelper
       3: dup
       4: aload_0
       5: getfield      #8                  // Field placeholderPrefix:Ljava/lang/String;
       8: aload_0
       9: getfield      #10                 // Field placeholderSuffix:Ljava/lang/String;
      12: aload_0
      13: getfield      #12                 // Field valueSeparator:Ljava/lang/String;
      16: iload_1
      17: invokespecial #50                 // Method org/springframework/util/PropertyPlaceholderHelper."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
      20: areturn

  private java.lang.String doResolvePlaceholders(java.lang.String, org.springframework.util.PropertyPlaceholderHelper);
    Code:
       0: aload_2
       1: aload_1
       2: aload_0
       3: invokedynamic #51,  0             // InvokeDynamic #0:resolvePlaceholder:(Lorg/springframework/core/env/AbstractPropertyResolver;)Lorg/springframework/util/PropertyPlaceholderHelper$PlaceholderResolver;
       8: invokevirtual #52                 // Method org/springframework/util/PropertyPlaceholderHelper.replacePlaceholders:(Ljava/lang/String;Lorg/springframework/util/PropertyPlaceholderHelper$PlaceholderResolver;)Ljava/lang/String;
      11: areturn

  protected <T> T convertValueIfNecessary(java.lang.Object, java.lang.Class<T>);
    Code:
       0: aload_2
       1: ifnonnull     6
       4: aload_1
       5: areturn
       6: aload_0
       7: getfield      #16                 // Field conversionService:Lorg/springframework/core/convert/support/ConfigurableConversionService;
      10: astore_3
      11: aload_3
      12: ifnonnull     29
      15: aload_2
      16: aload_1
      17: invokestatic  #53                 // Method org/springframework/util/ClassUtils.isAssignableValue:(Ljava/lang/Class;Ljava/lang/Object;)Z
      20: ifeq          25
      23: aload_1
      24: areturn
      25: invokestatic  #54                 // Method org/springframework/core/convert/support/DefaultConversionService.getSharedInstance:()Lorg/springframework/core/convert/ConversionService;
      28: astore_3
      29: aload_3
      30: aload_1
      31: aload_2
      32: invokeinterface #55,  3           // InterfaceMethod org/springframework/core/convert/ConversionService.convert:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
      37: areturn

  protected abstract java.lang.String getPropertyAsRawString(java.lang.String);
}
