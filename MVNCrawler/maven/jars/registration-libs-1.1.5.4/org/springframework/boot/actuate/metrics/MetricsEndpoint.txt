Compiled from "MetricsEndpoint.java"
public class org.springframework.boot.actuate.metrics.MetricsEndpoint {
  private final io.micrometer.core.instrument.MeterRegistry registry;

  public org.springframework.boot.actuate.metrics.MetricsEndpoint(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
       9: return

  public org.springframework.boot.actuate.metrics.MetricsEndpoint$ListNamesResponse listNames();
    Code:
       0: new           #3                  // class java/util/LinkedHashSet
       3: dup
       4: invokespecial #4                  // Method java/util/LinkedHashSet."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_1
      10: aload_0
      11: getfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      14: invokespecial #5                  // Method collectNames:(Ljava/util/Set;Lio/micrometer/core/instrument/MeterRegistry;)V
      17: new           #6                  // class org/springframework/boot/actuate/metrics/MetricsEndpoint$ListNamesResponse
      20: dup
      21: aload_1
      22: invokespecial #7                  // Method org/springframework/boot/actuate/metrics/MetricsEndpoint$ListNamesResponse."<init>":(Ljava/util/Set;)V
      25: areturn

  private void collectNames(java.util.Set<java.lang.String>, io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_2
       1: instanceof    #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
       4: ifeq          29
       7: aload_2
       8: checkcast     #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      11: invokevirtual #9                  // Method io/micrometer/core/instrument/composite/CompositeMeterRegistry.getRegistries:()Ljava/util/Set;
      14: aload_0
      15: aload_1
      16: invokedynamic #10,  0             // InvokeDynamic #0:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Set;)Ljava/util/function/Consumer;
      21: invokeinterface #11,  2           // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      26: goto          65
      29: aload_2
      30: invokevirtual #12                 // Method io/micrometer/core/instrument/MeterRegistry.getMeters:()Ljava/util/List;
      33: invokeinterface #13,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      38: aload_0
      39: invokedynamic #14,  0             // InvokeDynamic #1:apply:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;)Ljava/util/function/Function;
      44: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      49: aload_1
      50: dup
      51: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      54: pop
      55: invokedynamic #17,  0             // InvokeDynamic #2:accept:(Ljava/util/Set;)Ljava/util/function/Consumer;
      60: invokeinterface #18,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      65: return

  private java.lang.String getName(io.micrometer.core.instrument.Meter);
    Code:
       0: aload_1
       1: invokeinterface #19,  1           // InterfaceMethod io/micrometer/core/instrument/Meter.getId:()Lio/micrometer/core/instrument/Meter$Id;
       6: invokevirtual #20                 // Method io/micrometer/core/instrument/Meter$Id.getName:()Ljava/lang/String;
       9: areturn

  public org.springframework.boot.actuate.metrics.MetricsEndpoint$MetricResponse metric(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_2
       1: ifnull        23
       4: aload_2
       5: invokeinterface #13,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      10: invokedynamic #21,  0             // InvokeDynamic #3:test:()Ljava/util/function/Predicate;
      15: invokeinterface #22,  2           // InterfaceMethod java/util/stream/Stream.allMatch:(Ljava/util/function/Predicate;)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ldc           #23                 // String Each tag parameter must be in the form key:value
      30: invokestatic  #24                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      33: aload_0
      34: aload_2
      35: invokespecial #25                 // Method parseTags:(Ljava/util/List;)Ljava/util/List;
      38: astore_3
      39: new           #26                 // class java/util/ArrayList
      42: dup
      43: invokespecial #27                 // Method java/util/ArrayList."<init>":()V
      46: astore        4
      48: aload_0
      49: aload         4
      51: aload_0
      52: getfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      55: aload_1
      56: aload_3
      57: invokespecial #28                 // Method collectMeters:(Ljava/util/List;Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/lang/Iterable;)V
      60: aload         4
      62: invokeinterface #29,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      67: ifeq          72
      70: aconst_null
      71: areturn
      72: aload_0
      73: aload         4
      75: invokespecial #30                 // Method getSamples:(Ljava/util/List;)Ljava/util/Map;
      78: astore        5
      80: aload_0
      81: aload         4
      83: invokespecial #31                 // Method getAvailableTags:(Ljava/util/List;)Ljava/util/Map;
      86: astore        6
      88: aload_3
      89: aload         6
      91: invokedynamic #32,  0             // InvokeDynamic #4:accept:(Ljava/util/Map;)Ljava/util/function/Consumer;
      96: invokeinterface #33,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
     101: new           #34                 // class org/springframework/boot/actuate/metrics/MetricsEndpoint$MetricResponse
     104: dup
     105: aload_1
     106: aload_0
     107: aload         5
     109: invokedynamic #35,  0             // InvokeDynamic #5:apply:()Ljava/util/function/BiFunction;
     114: invokespecial #36                 // Method asList:(Ljava/util/Map;Ljava/util/function/BiFunction;)Ljava/util/List;
     117: aload_0
     118: aload         6
     120: invokedynamic #37,  0             // InvokeDynamic #6:apply:()Ljava/util/function/BiFunction;
     125: invokespecial #36                 // Method asList:(Ljava/util/Map;Ljava/util/function/BiFunction;)Ljava/util/List;
     128: invokespecial #38                 // Method org/springframework/boot/actuate/metrics/MetricsEndpoint$MetricResponse."<init>":(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V
     131: areturn

  private java.util.List<io.micrometer.core.instrument.Tag> parseTags(java.util.List<java.lang.String>);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #39                 // Method java/util/Collections.emptyList:()Ljava/util/List;
       7: areturn
       8: aload_1
       9: invokeinterface #13,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      14: aload_0
      15: invokedynamic #40,  0             // InvokeDynamic #7:apply:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;)Ljava/util/function/Function;
      20: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      25: invokestatic  #41                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      28: invokeinterface #42,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      33: checkcast     #43                 // class java/util/List
      36: areturn

  private io.micrometer.core.instrument.Tag parseTag(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #44                 // String :
       3: iconst_2
       4: invokevirtual #45                 // Method java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;
       7: astore_2
       8: aload_2
       9: iconst_0
      10: aaload
      11: aload_2
      12: iconst_1
      13: aaload
      14: invokestatic  #46                 // InterfaceMethod io/micrometer/core/instrument/Tag.of:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tag;
      17: areturn

  private void collectMeters(java.util.List<io.micrometer.core.instrument.Meter>, io.micrometer.core.instrument.MeterRegistry, java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_2
       1: instanceof    #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
       4: ifeq          32
       7: aload_2
       8: checkcast     #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      11: invokevirtual #9                  // Method io/micrometer/core/instrument/composite/CompositeMeterRegistry.getRegistries:()Ljava/util/Set;
      14: aload_0
      15: aload_1
      16: aload_3
      17: aload         4
      19: invokedynamic #47,  0             // InvokeDynamic #8:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/List;Ljava/lang/String;Ljava/lang/Iterable;)Ljava/util/function/Consumer;
      24: invokeinterface #11,  2           // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      29: goto          52
      32: aload_1
      33: aload_2
      34: aload_3
      35: invokevirtual #48                 // Method io/micrometer/core/instrument/MeterRegistry.find:(Ljava/lang/String;)Lio/micrometer/core/instrument/search/Search;
      38: aload         4
      40: invokevirtual #49                 // Method io/micrometer/core/instrument/search/Search.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/search/Search;
      43: invokevirtual #50                 // Method io/micrometer/core/instrument/search/Search.meters:()Ljava/util/Collection;
      46: invokeinterface #51,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      51: pop
      52: return

  private java.util.Map<io.micrometer.core.instrument.Statistic, java.lang.Double> getSamples(java.util.List<io.micrometer.core.instrument.Meter>);
    Code:
       0: new           #52                 // class java/util/LinkedHashMap
       3: dup
       4: invokespecial #53                 // Method java/util/LinkedHashMap."<init>":()V
       7: astore_2
       8: aload_1
       9: aload_0
      10: aload_2
      11: invokedynamic #54,  0             // InvokeDynamic #9:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Map;)Ljava/util/function/Consumer;
      16: invokeinterface #33,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      21: aload_2
      22: areturn

  private void mergeMeasurements(java.util.Map<io.micrometer.core.instrument.Statistic, java.lang.Double>, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_2
       1: invokeinterface #55,  1           // InterfaceMethod io/micrometer/core/instrument/Meter.measure:()Ljava/lang/Iterable;
       6: aload_0
       7: aload_1
       8: invokedynamic #56,  0             // InvokeDynamic #10:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Map;)Ljava/util/function/Consumer;
      13: invokeinterface #57,  2           // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V
      18: return

  private java.util.function.BiFunction<java.lang.Double, java.lang.Double, java.lang.Double> mergeFunction(io.micrometer.core.instrument.Statistic);
    Code:
       0: getstatic     #58                 // Field io/micrometer/core/instrument/Statistic.MAX:Lio/micrometer/core/instrument/Statistic;
       3: aload_1
       4: invokevirtual #59                 // Method io/micrometer/core/instrument/Statistic.equals:(Ljava/lang/Object;)Z
       7: ifeq          18
      10: invokedynamic #60,  0             // InvokeDynamic #11:apply:()Ljava/util/function/BiFunction;
      15: goto          23
      18: invokedynamic #61,  0             // InvokeDynamic #12:apply:()Ljava/util/function/BiFunction;
      23: areturn

  private java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getAvailableTags(java.util.List<io.micrometer.core.instrument.Meter>);
    Code:
       0: new           #62                 // class java/util/HashMap
       3: dup
       4: invokespecial #63                 // Method java/util/HashMap."<init>":()V
       7: astore_2
       8: aload_1
       9: aload_0
      10: aload_2
      11: invokedynamic #64,  0             // InvokeDynamic #13:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Map;)Ljava/util/function/Consumer;
      16: invokeinterface #33,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      21: aload_2
      22: areturn

  private void mergeAvailableTags(java.util.Map<java.lang.String, java.util.Set<java.lang.String>>, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_2
       1: invokeinterface #19,  1           // InterfaceMethod io/micrometer/core/instrument/Meter.getId:()Lio/micrometer/core/instrument/Meter$Id;
       6: invokevirtual #65                 // Method io/micrometer/core/instrument/Meter$Id.getTags:()Ljava/util/List;
       9: aload_0
      10: aload_1
      11: invokedynamic #66,  0             // InvokeDynamic #14:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Map;)Ljava/util/function/Consumer;
      16: invokeinterface #33,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      21: return

  private <T> java.util.Set<T> merge(java.util.Set<T>, java.util.Set<T>);
    Code:
       0: new           #67                 // class java/util/HashSet
       3: dup
       4: aload_1
       5: invokeinterface #68,  1           // InterfaceMethod java/util/Set.size:()I
      10: aload_2
      11: invokeinterface #68,  1           // InterfaceMethod java/util/Set.size:()I
      16: iadd
      17: invokespecial #69                 // Method java/util/HashSet."<init>":(I)V
      20: astore_3
      21: aload_3
      22: aload_1
      23: invokeinterface #70,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      28: pop
      29: aload_3
      30: aload_2
      31: invokeinterface #70,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      36: pop
      37: aload_3
      38: areturn

  private <K, V, T> java.util.List<T> asList(java.util.Map<K, V>, java.util.function.BiFunction<K, V, T>);
    Code:
       0: aload_1
       1: invokeinterface #71,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #72,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      11: aload_2
      12: invokedynamic #73,  0             // InvokeDynamic #15:apply:(Ljava/util/function/BiFunction;)Ljava/util/function/Function;
      17: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      22: invokedynamic #74,  0             // InvokeDynamic #16:get:()Ljava/util/function/Supplier;
      27: invokestatic  #75                 // Method java/util/stream/Collectors.toCollection:(Ljava/util/function/Supplier;)Ljava/util/stream/Collector;
      30: invokeinterface #42,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      35: checkcast     #43                 // class java/util/List
      38: areturn

  private static java.lang.Object lambda$asList$8(java.util.function.BiFunction, java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #76,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #77,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      13: invokeinterface #78,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: areturn

  private void lambda$mergeAvailableTags$7(java.util.Map, io.micrometer.core.instrument.Tag);
    Code:
       0: aload_2
       1: invokeinterface #79,  1           // InterfaceMethod io/micrometer/core/instrument/Tag.getValue:()Ljava/lang/String;
       6: invokestatic  #80                 // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
       9: astore_3
      10: aload_1
      11: aload_2
      12: invokeinterface #81,  1           // InterfaceMethod io/micrometer/core/instrument/Tag.getKey:()Ljava/lang/String;
      17: aload_3
      18: aload_0
      19: invokedynamic #82,  0             // InvokeDynamic #17:apply:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;)Ljava/util/function/BiFunction;
      24: invokeinterface #83,  4           // InterfaceMethod java/util/Map.merge:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      29: pop
      30: return

  private void lambda$getAvailableTags$6(java.util.Map, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #84                 // Method mergeAvailableTags:(Ljava/util/Map;Lio/micrometer/core/instrument/Meter;)V
       6: return

  private void lambda$mergeMeasurements$5(java.util.Map, io.micrometer.core.instrument.Measurement);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #85                 // Method io/micrometer/core/instrument/Measurement.getStatistic:()Lio/micrometer/core/instrument/Statistic;
       5: aload_2
       6: invokevirtual #86                 // Method io/micrometer/core/instrument/Measurement.getValue:()D
       9: invokestatic  #87                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      12: aload_0
      13: aload_2
      14: invokevirtual #85                 // Method io/micrometer/core/instrument/Measurement.getStatistic:()Lio/micrometer/core/instrument/Statistic;
      17: invokespecial #88                 // Method mergeFunction:(Lio/micrometer/core/instrument/Statistic;)Ljava/util/function/BiFunction;
      20: invokeinterface #83,  4           // InterfaceMethod java/util/Map.merge:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      25: checkcast     #89                 // class java/lang/Double
      28: pop
      29: return

  private void lambda$getSamples$4(java.util.Map, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #90                 // Method mergeMeasurements:(Ljava/util/Map;Lio/micrometer/core/instrument/Meter;)V
       6: return

  private void lambda$collectMeters$3(java.util.List, java.lang.String, java.lang.Iterable, io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: aload         4
       4: aload_2
       5: aload_3
       6: invokespecial #28                 // Method collectMeters:(Ljava/util/List;Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/lang/Iterable;)V
       9: return

  private static void lambda$metric$2(java.util.Map, io.micrometer.core.instrument.Tag);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #81,  1           // InterfaceMethod io/micrometer/core/instrument/Tag.getKey:()Ljava/lang/String;
       7: invokeinterface #91,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #92                 // class java/util/Set
      15: pop
      16: return

  private static boolean lambda$metric$1(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #44                 // String :
       3: invokevirtual #93                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
       6: ireturn

  private void lambda$collectNames$0(java.util.Set, io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #5                  // Method collectNames:(Ljava/util/Set;Lio/micrometer/core/instrument/MeterRegistry;)V
       6: return
}
