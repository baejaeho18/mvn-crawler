Compiled from "RabbitMetricsAutoConfiguration.java"
public class org.springframework.boot.actuate.autoconfigure.metrics.amqp.RabbitMetricsAutoConfiguration {
  private static final java.lang.String CONNECTION_FACTORY_SUFFIX;

  private final io.micrometer.core.instrument.MeterRegistry registry;

  public org.springframework.boot.actuate.autoconfigure.metrics.amqp.RabbitMetricsAutoConfiguration(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
       9: return

  public void bindConnectionFactoriesToRegistry(java.util.Map<java.lang.String, org.springframework.amqp.rabbit.connection.AbstractConnectionFactory>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #3,  0              // InvokeDynamic #0:accept:(Lorg/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsAutoConfiguration;)Ljava/util/function/BiConsumer;
       7: invokeinterface #4,  2            // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      12: return

  private void bindConnectionFactoryToRegistry(java.lang.String, org.springframework.amqp.rabbit.connection.AbstractConnectionFactory);
    Code:
       0: aload_2
       1: invokevirtual #5                  // Method org/springframework/amqp/rabbit/connection/AbstractConnectionFactory.getRabbitConnectionFactory:()Lcom/rabbitmq/client/ConnectionFactory;
       4: astore_3
       5: aload_0
       6: aload_1
       7: invokespecial #6                  // Method getConnectionFactoryName:(Ljava/lang/String;)Ljava/lang/String;
      10: astore        4
      12: new           #7                  // class org/springframework/boot/actuate/metrics/amqp/RabbitMetrics
      15: dup
      16: aload_3
      17: ldc           #8                  // String name
      19: aload         4
      21: invokestatic  #9                  // Method io/micrometer/core/instrument/Tags.of:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      24: invokespecial #10                 // Method org/springframework/boot/actuate/metrics/amqp/RabbitMetrics."<init>":(Lcom/rabbitmq/client/ConnectionFactory;Ljava/lang/Iterable;)V
      27: aload_0
      28: getfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      31: invokevirtual #11                 // Method org/springframework/boot/actuate/metrics/amqp/RabbitMetrics.bindTo:(Lio/micrometer/core/instrument/MeterRegistry;)V
      34: return

  private java.lang.String getConnectionFactoryName(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #12                 // Method java/lang/String.length:()I
       4: ldc           #14                 // String connectionFactory
       6: invokevirtual #12                 // Method java/lang/String.length:()I
       9: if_icmple     37
      12: aload_1
      13: ldc           #14                 // String connectionFactory
      15: invokestatic  #15                 // Method org/springframework/util/StringUtils.endsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      18: ifeq          37
      21: aload_1
      22: iconst_0
      23: aload_1
      24: invokevirtual #12                 // Method java/lang/String.length:()I
      27: ldc           #14                 // String connectionFactory
      29: invokevirtual #12                 // Method java/lang/String.length:()I
      32: isub
      33: invokevirtual #16                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      36: areturn
      37: aload_1
      38: areturn
}
