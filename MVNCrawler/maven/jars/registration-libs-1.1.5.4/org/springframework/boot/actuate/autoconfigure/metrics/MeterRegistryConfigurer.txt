Compiled from "MeterRegistryConfigurer.java"
class org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryConfigurer {
  private final java.util.Collection<org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer<?>> customizers;

  private final java.util.Collection<io.micrometer.core.instrument.config.MeterFilter> filters;

  private final java.util.Collection<io.micrometer.core.instrument.binder.MeterBinder> binders;

  private final boolean addToGlobalRegistry;

  org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryConfigurer(java.util.Collection<io.micrometer.core.instrument.binder.MeterBinder>, java.util.Collection<io.micrometer.core.instrument.config.MeterFilter>, java.util.Collection<org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer<?>>, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          16
      13: invokestatic  #2                  // Method java/util/Collections.emptyList:()Ljava/util/List;
      16: putfield      #3                  // Field binders:Ljava/util/Collection;
      19: aload_0
      20: aload_2
      21: ifnull        28
      24: aload_2
      25: goto          31
      28: invokestatic  #2                  // Method java/util/Collections.emptyList:()Ljava/util/List;
      31: putfield      #4                  // Field filters:Ljava/util/Collection;
      34: aload_0
      35: aload_3
      36: ifnull        43
      39: aload_3
      40: goto          46
      43: invokestatic  #2                  // Method java/util/Collections.emptyList:()Ljava/util/List;
      46: putfield      #5                  // Field customizers:Ljava/util/Collection;
      49: aload_0
      50: iload         4
      52: putfield      #6                  // Field addToGlobalRegistry:Z
      55: return

  void configure(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method customize:(Lio/micrometer/core/instrument/MeterRegistry;)V
       5: aload_0
       6: aload_1
       7: invokespecial #8                  // Method addFilters:(Lio/micrometer/core/instrument/MeterRegistry;)V
      10: aload_0
      11: aload_1
      12: invokespecial #9                  // Method addBinders:(Lio/micrometer/core/instrument/MeterRegistry;)V
      15: aload_0
      16: getfield      #6                  // Field addToGlobalRegistry:Z
      19: ifeq          33
      22: aload_1
      23: getstatic     #10                 // Field io/micrometer/core/instrument/Metrics.globalRegistry:Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;
      26: if_acmpeq     33
      29: aload_1
      30: invokestatic  #11                 // Method io/micrometer/core/instrument/Metrics.addRegistry:(Lio/micrometer/core/instrument/MeterRegistry;)V
      33: return

  private void customize(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: ldc           #12                 // class org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryCustomizer
       2: aload_0
       3: getfield      #5                  // Field customizers:Ljava/util/Collection;
       6: aload_1
       7: iconst_0
       8: anewarray     #13                 // class java/lang/Object
      11: invokestatic  #14                 // Method org/springframework/boot/util/LambdaSafe.callbacks:(Ljava/lang/Class;Ljava/util/Collection;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/springframework/boot/util/LambdaSafe$Callbacks;
      14: ldc           #15                 // class org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurer
      16: invokevirtual #16                 // Method org/springframework/boot/util/LambdaSafe$Callbacks.withLogger:(Ljava/lang/Class;)Lorg/springframework/boot/util/LambdaSafe$LambdaSafeCallback;
      19: checkcast     #17                 // class org/springframework/boot/util/LambdaSafe$Callbacks
      22: aload_1
      23: invokedynamic #18,  0             // InvokeDynamic #0:accept:(Lio/micrometer/core/instrument/MeterRegistry;)Ljava/util/function/Consumer;
      28: invokevirtual #19                 // Method org/springframework/boot/util/LambdaSafe$Callbacks.invoke:(Ljava/util/function/Consumer;)V
      31: return

  private void addFilters(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #4                  // Field filters:Ljava/util/Collection;
       4: aload_1
       5: invokevirtual #20                 // Method io/micrometer/core/instrument/MeterRegistry.config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
       8: dup
       9: invokevirtual #21                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      12: pop
      13: invokedynamic #22,  0             // InvokeDynamic #1:accept:(Lio/micrometer/core/instrument/MeterRegistry$Config;)Ljava/util/function/Consumer;
      18: invokeinterface #23,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      23: return

  private void addBinders(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #3                  // Field binders:Ljava/util/Collection;
       4: aload_1
       5: invokedynamic #24,  0             // InvokeDynamic #2:accept:(Lio/micrometer/core/instrument/MeterRegistry;)Ljava/util/function/Consumer;
      10: invokeinterface #23,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      15: return

  private static void lambda$addBinders$1(io.micrometer.core.instrument.MeterRegistry, io.micrometer.core.instrument.binder.MeterBinder);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #25,  2           // InterfaceMethod io/micrometer/core/instrument/binder/MeterBinder.bindTo:(Lio/micrometer/core/instrument/MeterRegistry;)V
       7: return

  private static void lambda$customize$0(io.micrometer.core.instrument.MeterRegistry, org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #26,  2           // InterfaceMethod org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryCustomizer.customize:(Lio/micrometer/core/instrument/MeterRegistry;)V
       7: return
}
