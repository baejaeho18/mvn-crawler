Compiled from "DataSourcePoolMetricsAutoConfiguration.java"
public class org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration {
  private static final java.lang.String DATASOURCE_SUFFIX;

  private final io.micrometer.core.instrument.MeterRegistry registry;

  private final java.util.Collection<org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider> metadataProviders;

  public org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration(io.micrometer.core.instrument.MeterRegistry, java.util.Collection<org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field metadataProviders:Ljava/util/Collection;
      14: return

  public void bindDataSourcesToRegistry(java.util.Map<java.lang.String, javax.sql.DataSource>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #4,  0              // InvokeDynamic #0:accept:(Lorg/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfiguration;)Ljava/util/function/BiConsumer;
       7: invokeinterface #5,  2            // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      12: return

  private void bindDataSourceToRegistry(java.lang.String, javax.sql.DataSource);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method getDataSourceName:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_3
       6: new           #7                  // class org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics
       9: dup
      10: aload_2
      11: aload_0
      12: getfield      #3                  // Field metadataProviders:Ljava/util/Collection;
      15: aload_3
      16: invokestatic  #8                  // Method java/util/Collections.emptyList:()Ljava/util/List;
      19: invokespecial #9                  // Method org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics."<init>":(Ljavax/sql/DataSource;Ljava/util/Collection;Ljava/lang/String;Ljava/lang/Iterable;)V
      22: aload_0
      23: getfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      26: invokevirtual #10                 // Method org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics.bindTo:(Lio/micrometer/core/instrument/MeterRegistry;)V
      29: return

  private java.lang.String getDataSourceName(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #11                 // Method java/lang/String.length:()I
       4: ldc           #13                 // String dataSource
       6: invokevirtual #11                 // Method java/lang/String.length:()I
       9: if_icmple     37
      12: aload_1
      13: ldc           #13                 // String dataSource
      15: invokestatic  #14                 // Method org/springframework/util/StringUtils.endsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      18: ifeq          37
      21: aload_1
      22: iconst_0
      23: aload_1
      24: invokevirtual #11                 // Method java/lang/String.length:()I
      27: ldc           #13                 // String dataSource
      29: invokevirtual #11                 // Method java/lang/String.length:()I
      32: isub
      33: invokevirtual #15                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      36: areturn
      37: aload_1
      38: areturn
}
