Compiled from "DataSourcePoolMetrics.java"
public class org.springframework.boot.actuate.metrics.jdbc.DataSourcePoolMetrics implements io.micrometer.core.instrument.binder.MeterBinder {
  private final javax.sql.DataSource dataSource;

  private final org.springframework.boot.actuate.metrics.jdbc.DataSourcePoolMetrics$CachingDataSourcePoolMetadataProvider metadataProvider;

  private final java.lang.Iterable<io.micrometer.core.instrument.Tag> tags;

  public org.springframework.boot.actuate.metrics.jdbc.DataSourcePoolMetrics(javax.sql.DataSource, java.util.Collection<org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider>, java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_1
       2: new           #1                  // class org/springframework/boot/jdbc/metadata/CompositeDataSourcePoolMetadataProvider
       5: dup
       6: aload_2
       7: invokespecial #2                  // Method org/springframework/boot/jdbc/metadata/CompositeDataSourcePoolMetadataProvider."<init>":(Ljava/util/Collection;)V
      10: aload_3
      11: aload         4
      13: invokespecial #3                  // Method "<init>":(Ljavax/sql/DataSource;Lorg/springframework/boot/jdbc/metadata/DataSourcePoolMetadataProvider;Ljava/lang/String;Ljava/lang/Iterable;)V
      16: return

  public org.springframework.boot.actuate.metrics.jdbc.DataSourcePoolMetrics(javax.sql.DataSource, org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider, java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #5                  // String DataSource must not be null
       7: invokestatic  #6                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_2
      11: ldc           #7                  // String MetadataProvider must not be null
      13: invokestatic  #6                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      16: aload_0
      17: aload_1
      18: putfield      #8                  // Field dataSource:Ljavax/sql/DataSource;
      21: aload_0
      22: new           #9                  // class org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics$CachingDataSourcePoolMetadataProvider
      25: dup
      26: aload_2
      27: invokespecial #10                 // Method org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics$CachingDataSourcePoolMetadataProvider."<init>":(Lorg/springframework/boot/jdbc/metadata/DataSourcePoolMetadataProvider;)V
      30: putfield      #11                 // Field metadataProvider:Lorg/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics$CachingDataSourcePoolMetadataProvider;
      33: aload_0
      34: aload         4
      36: iconst_2
      37: anewarray     #12                 // class java/lang/String
      40: dup
      41: iconst_0
      42: ldc           #13                 // String name
      44: aastore
      45: dup
      46: iconst_1
      47: aload_3
      48: aastore
      49: invokestatic  #14                 // Method io/micrometer/core/instrument/Tags.concat:(Ljava/lang/Iterable;[Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      52: putfield      #15                 // Field tags:Ljava/lang/Iterable;
      55: return

  public void bindTo(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #11                 // Field metadataProvider:Lorg/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics$CachingDataSourcePoolMetadataProvider;
       4: aload_0
       5: getfield      #8                  // Field dataSource:Ljavax/sql/DataSource;
       8: invokevirtual #16                 // Method org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics$CachingDataSourcePoolMetadataProvider.getDataSourcePoolMetadata:(Ljavax/sql/DataSource;)Lorg/springframework/boot/jdbc/metadata/DataSourcePoolMetadata;
      11: ifnull        50
      14: aload_0
      15: aload_1
      16: ldc           #17                 // String active
      18: invokedynamic #18,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      23: invokespecial #19                 // Method bindPoolMetadata:(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/util/function/Function;)V
      26: aload_0
      27: aload_1
      28: ldc           #20                 // String max
      30: invokedynamic #21,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      35: invokespecial #19                 // Method bindPoolMetadata:(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/util/function/Function;)V
      38: aload_0
      39: aload_1
      40: ldc           #22                 // String min
      42: invokedynamic #23,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      47: invokespecial #19                 // Method bindPoolMetadata:(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/util/function/Function;)V
      50: return

  private <N extends java.lang.Number> void bindPoolMetadata(io.micrometer.core.instrument.MeterRegistry, java.lang.String, java.util.function.Function<org.springframework.boot.jdbc.metadata.DataSourcePoolMetadata, N>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_0
       4: getfield      #11                 // Field metadataProvider:Lorg/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics$CachingDataSourcePoolMetadataProvider;
       7: aload_3
       8: invokevirtual #24                 // Method org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics$CachingDataSourcePoolMetadataProvider.getValueFunction:(Ljava/util/function/Function;)Ljava/util/function/Function;
      11: invokespecial #25                 // Method bindDataSource:(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/util/function/Function;)V
      14: return

  private <N extends java.lang.Number> void bindDataSource(io.micrometer.core.instrument.MeterRegistry, java.lang.String, java.util.function.Function<javax.sql.DataSource, N>);
    Code:
       0: aload_3
       1: aload_0
       2: getfield      #8                  // Field dataSource:Ljavax/sql/DataSource;
       5: invokeinterface #26,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: ifnull        51
      13: aload_1
      14: new           #27                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #29                 // String jdbc.connections.
      23: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_2
      27: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: aload_0
      34: getfield      #15                 // Field tags:Ljava/lang/Iterable;
      37: aload_0
      38: getfield      #8                  // Field dataSource:Ljavax/sql/DataSource;
      41: aload_3
      42: invokedynamic #32,  0             // InvokeDynamic #3:applyAsDouble:(Ljava/util/function/Function;)Ljava/util/function/ToDoubleFunction;
      47: invokevirtual #33                 // Method io/micrometer/core/instrument/MeterRegistry.gauge:(Ljava/lang/String;Ljava/lang/Iterable;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Ljava/lang/Object;
      50: pop
      51: return

  private static double lambda$bindDataSource$0(java.util.function.Function, javax.sql.DataSource);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #26,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #34                 // class java/lang/Number
      10: invokevirtual #35                 // Method java/lang/Number.doubleValue:()D
      13: dreturn
}
