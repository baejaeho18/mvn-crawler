Compiled from "PoolingDataSourceBean.java"
public class org.springframework.boot.jta.bitronix.PoolingDataSourceBean extends bitronix.tm.resource.jdbc.PoolingDataSource implements org.springframework.beans.factory.BeanNameAware,org.springframework.beans.factory.InitializingBean {
  private static final java.lang.ThreadLocal<org.springframework.boot.jta.bitronix.PoolingDataSourceBean> source;

  private javax.sql.XADataSource dataSource;

  private java.lang.String beanName;

  public org.springframework.boot.jta.bitronix.PoolingDataSourceBean();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method bitronix/tm/resource/jdbc/PoolingDataSource."<init>":()V
       4: aload_0
       5: bipush        10
       7: invokevirtual #4                  // Method setMaxPoolSize:(I)V
      10: aload_0
      11: iconst_1
      12: invokevirtual #5                  // Method setAllowLocalTransactions:(Z)V
      15: aload_0
      16: iconst_1
      17: invokevirtual #6                  // Method setEnableJdbc4ConnectionTest:(Z)V
      20: return

  public synchronized void init();
    Code:
       0: getstatic     #2                  // Field source:Ljava/lang/ThreadLocal;
       3: aload_0
       4: invokevirtual #7                  // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
       7: aload_0
       8: invokespecial #8                  // Method bitronix/tm/resource/jdbc/PoolingDataSource.init:()V
      11: getstatic     #2                  // Field source:Ljava/lang/ThreadLocal;
      14: invokevirtual #9                  // Method java/lang/ThreadLocal.remove:()V
      17: goto          29
      20: astore_1
      21: getstatic     #2                  // Field source:Ljava/lang/ThreadLocal;
      24: invokevirtual #9                  // Method java/lang/ThreadLocal.remove:()V
      27: aload_1
      28: athrow
      29: return
    Exception table:
       from    to  target type
           7    11    20   any

  public void setBeanName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field beanName:Ljava/lang/String;
       5: return

  public void afterPropertiesSet() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method getUniqueName:()Ljava/lang/String;
       4: invokestatic  #12                 // Method org/springframework/util/StringUtils.hasLength:(Ljava/lang/String;)Z
       7: ifne          18
      10: aload_0
      11: aload_0
      12: getfield      #10                 // Field beanName:Ljava/lang/String;
      15: invokevirtual #13                 // Method setUniqueName:(Ljava/lang/String;)V
      18: return

  public void setDataSource(javax.sql.XADataSource);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field dataSource:Ljavax/sql/XADataSource;
       5: aload_0
       6: ldc           #14                 // class org/springframework/boot/jta/bitronix/PoolingDataSourceBean$DirectXADataSource
       8: invokevirtual #15                 // Method java/lang/Class.getName:()Ljava/lang/String;
      11: invokevirtual #16                 // Method setClassName:(Ljava/lang/String;)V
      14: aload_0
      15: new           #17                 // class java/util/Properties
      18: dup
      19: invokespecial #18                 // Method java/util/Properties."<init>":()V
      22: invokevirtual #19                 // Method setDriverProperties:(Ljava/util/Properties;)V
      25: return

  protected final javax.sql.XADataSource getDataSource();
    Code:
       0: aload_0
       1: getfield      #1                  // Field dataSource:Ljavax/sql/XADataSource;
       4: areturn

  public bitronix.tm.resource.common.XAStatefulHolder createPooledConnection(java.lang.Object, bitronix.tm.resource.common.ResourceBean) throws java.lang.Exception;
    Code:
       0: aload_1
       1: instanceof    #14                 // class org/springframework/boot/jta/bitronix/PoolingDataSourceBean$DirectXADataSource
       4: ifeq          15
       7: aload_1
       8: checkcast     #14                 // class org/springframework/boot/jta/bitronix/PoolingDataSourceBean$DirectXADataSource
      11: invokevirtual #20                 // Method org/springframework/boot/jta/bitronix/PoolingDataSourceBean$DirectXADataSource.getDataSource:()Ljavax/sql/XADataSource;
      14: astore_1
      15: aload_0
      16: aload_1
      17: aload_2
      18: invokespecial #21                 // Method bitronix/tm/resource/jdbc/PoolingDataSource.createPooledConnection:(Ljava/lang/Object;Lbitronix/tm/resource/common/ResourceBean;)Lbitronix/tm/resource/common/XAStatefulHolder;
      21: areturn

  public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getParentLogger:()Ljava/util/logging/Logger;
       4: areturn
       5: astore_1
       6: ldc           #25                 // String global
       8: invokestatic  #26                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
      11: areturn
    Exception table:
       from    to  target type
           0     4     5   Class java/lang/Exception

  static java.lang.ThreadLocal access$000();
    Code:
       0: getstatic     #2                  // Field source:Ljava/lang/ThreadLocal;
       3: areturn

  static javax.sql.XADataSource access$100(org.springframework.boot.jta.bitronix.PoolingDataSourceBean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field dataSource:Ljavax/sql/XADataSource;
       4: areturn

  static {};
    Code:
       0: new           #27                 // class java/lang/ThreadLocal
       3: dup
       4: invokespecial #28                 // Method java/lang/ThreadLocal."<init>":()V
       7: putstatic     #2                  // Field source:Ljava/lang/ThreadLocal;
      10: return
}
