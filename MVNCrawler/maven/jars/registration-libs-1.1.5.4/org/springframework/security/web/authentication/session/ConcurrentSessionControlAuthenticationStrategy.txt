Compiled from "ConcurrentSessionControlAuthenticationStrategy.java"
public class org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy implements org.springframework.context.MessageSourceAware,org.springframework.security.web.authentication.session.SessionAuthenticationStrategy {
  protected org.springframework.context.support.MessageSourceAccessor messages;

  private final org.springframework.security.core.session.SessionRegistry sessionRegistry;

  private boolean exceptionIfMaximumExceeded;

  private int maximumSessions;

  public org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy(org.springframework.security.core.session.SessionRegistry);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // Method org/springframework/security/core/SpringSecurityMessageSource.getAccessor:()Lorg/springframework/context/support/MessageSourceAccessor;
       8: putfield      #3                  // Field messages:Lorg/springframework/context/support/MessageSourceAccessor;
      11: aload_0
      12: iconst_0
      13: putfield      #4                  // Field exceptionIfMaximumExceeded:Z
      16: aload_0
      17: iconst_1
      18: putfield      #5                  // Field maximumSessions:I
      21: aload_1
      22: ldc           #6                  // String The sessionRegistry cannot be null
      24: invokestatic  #7                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      27: aload_0
      28: aload_1
      29: putfield      #8                  // Field sessionRegistry:Lorg/springframework/security/core/session/SessionRegistry;
      32: return

  public void onAuthentication(org.springframework.security.core.Authentication, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse);
    Code:
       0: aload_0
       1: getfield      #8                  // Field sessionRegistry:Lorg/springframework/security/core/session/SessionRegistry;
       4: aload_1
       5: invokeinterface #9,  1            // InterfaceMethod org/springframework/security/core/Authentication.getPrincipal:()Ljava/lang/Object;
      10: iconst_0
      11: invokeinterface #10,  3           // InterfaceMethod org/springframework/security/core/session/SessionRegistry.getAllSessions:(Ljava/lang/Object;Z)Ljava/util/List;
      16: astore        4
      18: aload         4
      20: invokeinterface #11,  1           // InterfaceMethod java/util/List.size:()I
      25: istore        5
      27: aload_0
      28: aload_1
      29: invokevirtual #12                 // Method getMaximumSessionsForThisUser:(Lorg/springframework/security/core/Authentication;)I
      32: istore        6
      34: iload         5
      36: iload         6
      38: if_icmpge     42
      41: return
      42: iload         6
      44: iconst_m1
      45: if_icmpne     49
      48: return
      49: iload         5
      51: iload         6
      53: if_icmpne     123
      56: aload_2
      57: iconst_0
      58: invokeinterface #13,  2           // InterfaceMethod javax/servlet/http/HttpServletRequest.getSession:(Z)Ljavax/servlet/http/HttpSession;
      63: astore        7
      65: aload         7
      67: ifnull        123
      70: aload         4
      72: invokeinterface #14,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      77: astore        8
      79: aload         8
      81: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      86: ifeq          123
      89: aload         8
      91: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      96: checkcast     #17                 // class org/springframework/security/core/session/SessionInformation
      99: astore        9
     101: aload         9
     103: invokevirtual #18                 // Method org/springframework/security/core/session/SessionInformation.getSessionId:()Ljava/lang/String;
     106: aload         7
     108: invokeinterface #19,  1           // InterfaceMethod javax/servlet/http/HttpSession.getId:()Ljava/lang/String;
     113: invokevirtual #20                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     116: ifeq          120
     119: return
     120: goto          79
     123: aload_0
     124: aload         4
     126: iload         6
     128: aload_0
     129: getfield      #8                  // Field sessionRegistry:Lorg/springframework/security/core/session/SessionRegistry;
     132: invokevirtual #21                 // Method allowableSessionsExceeded:(Ljava/util/List;ILorg/springframework/security/core/session/SessionRegistry;)V
     135: return

  protected int getMaximumSessionsForThisUser(org.springframework.security.core.Authentication);
    Code:
       0: aload_0
       1: getfield      #5                  // Field maximumSessions:I
       4: ireturn

  protected void allowableSessionsExceeded(java.util.List<org.springframework.security.core.session.SessionInformation>, int, org.springframework.security.core.session.SessionRegistry) throws org.springframework.security.web.authentication.session.SessionAuthenticationException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field exceptionIfMaximumExceeded:Z
       4: ifne          11
       7: aload_1
       8: ifnonnull     41
      11: new           #22                 // class org/springframework/security/web/authentication/session/SessionAuthenticationException
      14: dup
      15: aload_0
      16: getfield      #3                  // Field messages:Lorg/springframework/context/support/MessageSourceAccessor;
      19: ldc           #23                 // String ConcurrentSessionControlAuthenticationStrategy.exceededAllowed
      21: iconst_1
      22: anewarray     #24                 // class java/lang/Object
      25: dup
      26: iconst_0
      27: iload_2
      28: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: aastore
      32: ldc           #26                 // String Maximum sessions of {0} for this principal exceeded
      34: invokevirtual #27                 // Method org/springframework/context/support/MessageSourceAccessor.getMessage:(Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
      37: invokespecial #28                 // Method org/springframework/security/web/authentication/session/SessionAuthenticationException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aconst_null
      42: astore        4
      44: aload_1
      45: invokeinterface #14,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      50: astore        5
      52: aload         5
      54: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          102
      62: aload         5
      64: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      69: checkcast     #17                 // class org/springframework/security/core/session/SessionInformation
      72: astore        6
      74: aload         4
      76: ifnull        95
      79: aload         6
      81: invokevirtual #29                 // Method org/springframework/security/core/session/SessionInformation.getLastRequest:()Ljava/util/Date;
      84: aload         4
      86: invokevirtual #29                 // Method org/springframework/security/core/session/SessionInformation.getLastRequest:()Ljava/util/Date;
      89: invokevirtual #30                 // Method java/util/Date.before:(Ljava/util/Date;)Z
      92: ifeq          99
      95: aload         6
      97: astore        4
      99: goto          52
     102: aload         4
     104: invokevirtual #31                 // Method org/springframework/security/core/session/SessionInformation.expireNow:()V
     107: return

  public void setExceptionIfMaximumExceeded(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field exceptionIfMaximumExceeded:Z
       5: return

  public void setMaximumSessions(int);
    Code:
       0: iload_1
       1: ifeq          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #32                 // String MaximumLogins must be either -1 to allow unlimited logins, or a positive integer to specify a maximum
      11: invokestatic  #33                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      14: aload_0
      15: iload_1
      16: putfield      #5                  // Field maximumSessions:I
      19: return

  public void setMessageSource(org.springframework.context.MessageSource);
    Code:
       0: aload_1
       1: ldc           #34                 // String messageSource cannot be null
       3: invokestatic  #7                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: new           #35                 // class org/springframework/context/support/MessageSourceAccessor
      10: dup
      11: aload_1
      12: invokespecial #36                 // Method org/springframework/context/support/MessageSourceAccessor."<init>":(Lorg/springframework/context/MessageSource;)V
      15: putfield      #3                  // Field messages:Lorg/springframework/context/support/MessageSourceAccessor;
      18: return
}
