Compiled from "AuthorizationWebFilter.java"
public class org.springframework.security.web.server.authorization.AuthorizationWebFilter implements org.springframework.web.server.WebFilter {
  private org.springframework.security.authorization.ReactiveAuthorizationManager<? super org.springframework.web.server.ServerWebExchange> accessDecisionManager;

  public org.springframework.security.web.server.authorization.AuthorizationWebFilter(org.springframework.security.authorization.ReactiveAuthorizationManager<? super org.springframework.web.server.ServerWebExchange>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field accessDecisionManager:Lorg/springframework/security/authorization/ReactiveAuthorizationManager;
       9: return

  public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain);
    Code:
       0: invokestatic  #3                  // Method org/springframework/security/core/context/ReactiveSecurityContextHolder.getContext:()Lreactor/core/publisher/Mono;
       3: invokedynamic #4,  0              // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
       8: invokevirtual #5                  // Method reactor/core/publisher/Mono.filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      11: invokedynamic #6,  0              // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      16: invokevirtual #7                  // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      19: aload_0
      20: aload_1
      21: invokedynamic #8,  0              // InvokeDynamic #2:apply:(Lorg/springframework/security/web/server/authorization/AuthorizationWebFilter;Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Function;
      26: invokevirtual #9                  // Method reactor/core/publisher/Mono.as:(Ljava/util/function/Function;)Ljava/lang/Object;
      29: checkcast     #10                 // class reactor/core/publisher/Mono
      32: aload_2
      33: aload_1
      34: invokeinterface #11,  2           // InterfaceMethod org/springframework/web/server/WebFilterChain.filter:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
      39: invokevirtual #12                 // Method reactor/core/publisher/Mono.switchIfEmpty:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      42: areturn

  private reactor.core.publisher.Mono lambda$filter$1(org.springframework.web.server.ServerWebExchange, reactor.core.publisher.Mono);
    Code:
       0: aload_0
       1: getfield      #2                  // Field accessDecisionManager:Lorg/springframework/security/authorization/ReactiveAuthorizationManager;
       4: aload_2
       5: aload_1
       6: invokeinterface #13,  3           // InterfaceMethod org/springframework/security/authorization/ReactiveAuthorizationManager.verify:(Lreactor/core/publisher/Mono;Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      11: areturn

  private static boolean lambda$filter$0(org.springframework.security.core.context.SecurityContext);
    Code:
       0: aload_0
       1: invokeinterface #14,  1           // InterfaceMethod org/springframework/security/core/context/SecurityContext.getAuthentication:()Lorg/springframework/security/core/Authentication;
       6: ifnull        13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn
}
