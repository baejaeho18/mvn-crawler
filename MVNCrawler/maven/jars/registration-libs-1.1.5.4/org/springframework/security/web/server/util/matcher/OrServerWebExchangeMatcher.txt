Compiled from "OrServerWebExchangeMatcher.java"
public class org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher implements org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher {
  private final java.util.List<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher> matchers;

  public org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher(java.util.List<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String matchers cannot be empty
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field matchers:Ljava/util/List;
      15: return

  public org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #5                  // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       5: invokespecial #6                  // Method "<init>":(Ljava/util/List;)V
       8: return

  public reactor.core.publisher.Mono<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher$MatchResult> matches(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_0
       1: getfield      #4                  // Field matchers:Ljava/util/List;
       4: invokestatic  #7                  // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       7: aload_1
       8: invokedynamic #8,  0              // InvokeDynamic #0:apply:(Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Function;
      13: invokevirtual #9                  // Method reactor/core/publisher/Flux.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      16: invokedynamic #10,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
      21: invokevirtual #11                 // Method reactor/core/publisher/Flux.filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
      24: invokevirtual #12                 // Method reactor/core/publisher/Flux.next:()Lreactor/core/publisher/Mono;
      27: invokestatic  #13                 // Method org/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher$MatchResult.notMatch:()Lreactor/core/publisher/Mono;
      30: invokevirtual #14                 // Method reactor/core/publisher/Mono.switchIfEmpty:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      33: areturn

  public java.lang.String toString();
    Code:
       0: new           #15                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #17                 // String OrServerWebExchangeMatcher{matchers=
       9: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #4                  // Field matchers:Ljava/util/List;
      16: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: bipush        125
      21: invokevirtual #20                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      24: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  private static boolean lambda$matches$1(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher$MatchResult);
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method org/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher$MatchResult.isMatch:()Z
       4: ireturn

  private static org.reactivestreams.Publisher lambda$matches$0(org.springframework.web.server.ServerWebExchange, org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #23,  2           // InterfaceMethod org/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher.matches:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
       7: areturn
}
