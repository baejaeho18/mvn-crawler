Compiled from "MatcherSecurityWebFilterChain.java"
public class org.springframework.security.web.server.MatcherSecurityWebFilterChain implements org.springframework.security.web.server.SecurityWebFilterChain {
  private final org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher matcher;

  private final java.util.List<org.springframework.web.server.WebFilter> filters;

  public org.springframework.security.web.server.MatcherSecurityWebFilterChain(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher, java.util.List<org.springframework.web.server.WebFilter>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String matcher cannot be null
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_2
      11: new           #4                  // class java/lang/StringBuilder
      14: dup
      15: invokespecial #5                  // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #6                  // String filters cannot be null or empty. Got
      20: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_2
      24: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      27: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: invokestatic  #10                 // Method org/springframework/util/Assert.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V
      33: aload_0
      34: aload_1
      35: putfield      #11                 // Field matcher:Lorg/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher;
      38: aload_0
      39: aload_2
      40: putfield      #12                 // Field filters:Ljava/util/List;
      43: return

  public reactor.core.publisher.Mono<java.lang.Boolean> matches(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_0
       1: getfield      #11                 // Field matcher:Lorg/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher;
       4: aload_1
       5: invokeinterface #13,  2           // InterfaceMethod org/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher.matches:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
      10: invokedynamic #14,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      15: invokevirtual #15                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      18: areturn

  public reactor.core.publisher.Flux<org.springframework.web.server.WebFilter> getWebFilters();
    Code:
       0: aload_0
       1: getfield      #12                 // Field filters:Ljava/util/List;
       4: invokestatic  #16                 // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       7: areturn

  private static java.lang.Boolean lambda$matches$0(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher$MatchResult);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method org/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher$MatchResult.isMatch:()Z
       4: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       7: areturn
}
