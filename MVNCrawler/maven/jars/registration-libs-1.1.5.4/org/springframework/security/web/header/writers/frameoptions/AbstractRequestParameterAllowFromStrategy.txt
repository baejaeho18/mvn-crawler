Compiled from "AbstractRequestParameterAllowFromStrategy.java"
abstract class org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy implements org.springframework.security.web.header.writers.frameoptions.AllowFromStrategy {
  private static final java.lang.String DEFAULT_ORIGIN_REQUEST_PARAMETER;

  private java.lang.String allowFromParameterName;

  protected final org.apache.commons.logging.Log log;

  org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #3                  // String x-frames-allow-from
       7: putfield      #4                  // Field allowFromParameterName:Ljava/lang/String;
      10: aload_0
      11: aload_0
      12: invokevirtual #5                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: invokestatic  #6                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      18: putfield      #7                  // Field log:Lorg/apache/commons/logging/Log;
      21: return

  public java.lang.String getAllowFromValue(javax.servlet.http.HttpServletRequest);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #4                  // Field allowFromParameterName:Ljava/lang/String;
       5: invokeinterface #8,  2            // InterfaceMethod javax/servlet/http/HttpServletRequest.getParameter:(Ljava/lang/String;)Ljava/lang/String;
      10: astore_2
      11: aload_0
      12: getfield      #7                  // Field log:Lorg/apache/commons/logging/Log;
      15: invokeinterface #9,  1            // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      20: ifeq          56
      23: aload_0
      24: getfield      #7                  // Field log:Lorg/apache/commons/logging/Log;
      27: new           #10                 // class java/lang/StringBuilder
      30: dup
      31: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      34: ldc           #12                 // String Supplied origin \'
      36: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_2
      40: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: ldc           #14                 // String \'
      45: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: invokeinterface #16,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      56: aload_2
      57: invokestatic  #17                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      60: ifeq          73
      63: aload_0
      64: aload_2
      65: invokevirtual #18                 // Method allowed:(Ljava/lang/String;)Z
      68: ifeq          73
      71: aload_2
      72: areturn
      73: ldc           #19                 // String DENY
      75: areturn

  public void setAllowFromParameterName(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #20                 // String allowFromParameterName cannot be null
       3: invokestatic  #21                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #4                  // Field allowFromParameterName:Ljava/lang/String;
      11: return

  protected abstract boolean allowed(java.lang.String);
}
