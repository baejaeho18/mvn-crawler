Compiled from "WiretapConnector.java"
class org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse extends org.springframework.http.client.reactive.ClientHttpResponseDecorator {
  private final org.springframework.core.io.buffer.DataBuffer buffer;

  private final reactor.core.publisher.MonoProcessor<byte[]> body;

  public org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse(org.springframework.http.client.reactive.ClientHttpResponse);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/http/client/reactive/ClientHttpResponseDecorator."<init>":(Lorg/springframework/http/client/reactive/ClientHttpResponse;)V
       5: aload_0
       6: invokestatic  #2                  // Method reactor/core/publisher/MonoProcessor.create:()Lreactor/core/publisher/MonoProcessor;
       9: putfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
      12: aload_0
      13: invokestatic  #4                  // Method org/springframework/test/web/reactive/server/WiretapConnector.access$000:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      16: invokeinterface #5,  1            // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.allocateBuffer:()Lorg/springframework/core/io/buffer/DataBuffer;
      21: putfield      #6                  // Field buffer:Lorg/springframework/core/io/buffer/DataBuffer;
      24: return

  public reactor.core.publisher.MonoProcessor<byte[]> getContent();
    Code:
       0: aload_0
       1: getfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
       4: areturn

  public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody();
    Code:
       0: aload_0
       1: invokespecial #7                  // Method org/springframework/http/client/reactive/ClientHttpResponseDecorator.getBody:()Lreactor/core/publisher/Flux;
       4: aload_0
       5: getfield      #6                  // Field buffer:Lorg/springframework/core/io/buffer/DataBuffer;
       8: dup
       9: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      12: pop
      13: invokedynamic #9,  0              // InvokeDynamic #0:accept:(Lorg/springframework/core/io/buffer/DataBuffer;)Ljava/util/function/Consumer;
      18: invokevirtual #10                 // Method reactor/core/publisher/Flux.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      21: aload_0
      22: getfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
      25: dup
      26: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      29: pop
      30: invokedynamic #11,  0             // InvokeDynamic #1:accept:(Lreactor/core/publisher/MonoProcessor;)Ljava/util/function/Consumer;
      35: invokevirtual #12                 // Method reactor/core/publisher/Flux.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      38: aload_0
      39: invokedynamic #13,  0             // InvokeDynamic #2:run:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpResponse;)Ljava/lang/Runnable;
      44: invokevirtual #14                 // Method reactor/core/publisher/Flux.doOnCancel:(Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      47: aload_0
      48: invokedynamic #13,  0             // InvokeDynamic #2:run:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpResponse;)Ljava/lang/Runnable;
      53: invokevirtual #15                 // Method reactor/core/publisher/Flux.doOnComplete:(Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      56: areturn

  private void handleOnComplete();
    Code:
       0: aload_0
       1: getfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
       4: invokevirtual #16                 // Method reactor/core/publisher/MonoProcessor.isTerminated:()Z
       7: ifne          41
      10: aload_0
      11: getfield      #6                  // Field buffer:Lorg/springframework/core/io/buffer/DataBuffer;
      14: invokeinterface #17,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      19: newarray       byte
      21: astore_1
      22: aload_0
      23: getfield      #6                  // Field buffer:Lorg/springframework/core/io/buffer/DataBuffer;
      26: aload_1
      27: invokeinterface #18,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.read:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      32: pop
      33: aload_0
      34: getfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
      37: aload_1
      38: invokevirtual #19                 // Method reactor/core/publisher/MonoProcessor.onNext:(Ljava/lang/Object;)V
      41: return

  private static void lambda$getBody$0(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #20                 // class org/springframework/core/io/buffer/DataBuffer
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: invokeinterface #21,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:([Lorg/springframework/core/io/buffer/DataBuffer;)Lorg/springframework/core/io/buffer/DataBuffer;
      14: pop
      15: return
}
