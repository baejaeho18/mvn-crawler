Compiled from "HttpHandlerConnector.java"
public class org.springframework.test.web.reactive.server.HttpHandlerConnector implements org.springframework.http.client.reactive.ClientHttpConnector {
  private static org.apache.commons.logging.Log logger;

  private final org.springframework.http.server.reactive.HttpHandler handler;

  public org.springframework.test.web.reactive.server.HttpHandlerConnector(org.springframework.http.server.reactive.HttpHandler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String HttpHandler is required
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field handler:Lorg/springframework/http/server/reactive/HttpHandler;
      15: return

  public reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse> connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>);
    Code:
       0: invokestatic  #5                  // Method reactor/core/publisher/MonoProcessor.create:()Lreactor/core/publisher/MonoProcessor;
       3: astore        4
       5: new           #6                  // class org/springframework/mock/http/client/reactive/MockClientHttpRequest
       8: dup
       9: aload_1
      10: aload_2
      11: invokespecial #7                  // Method org/springframework/mock/http/client/reactive/MockClientHttpRequest."<init>":(Lorg/springframework/http/HttpMethod;Ljava/net/URI;)V
      14: astore        5
      16: new           #8                  // class org/springframework/mock/http/server/reactive/MockServerHttpResponse
      19: dup
      20: invokespecial #9                  // Method org/springframework/mock/http/server/reactive/MockServerHttpResponse."<init>":()V
      23: astore        6
      25: aload         5
      27: aload_0
      28: aload_1
      29: aload_2
      30: aload         5
      32: aload         6
      34: aload         4
      36: invokedynamic #10,  0             // InvokeDynamic #0:apply:(Lorg/springframework/test/web/reactive/server/HttpHandlerConnector;Lorg/springframework/http/HttpMethod;Ljava/net/URI;Lorg/springframework/mock/http/client/reactive/MockClientHttpRequest;Lorg/springframework/mock/http/server/reactive/MockServerHttpResponse;Lreactor/core/publisher/MonoProcessor;)Ljava/util/function/Function;
      41: invokevirtual #11                 // Method org/springframework/mock/http/client/reactive/MockClientHttpRequest.setWriteHandler:(Ljava/util/function/Function;)V
      44: aload         6
      46: aload_0
      47: aload_1
      48: aload_2
      49: aload         4
      51: aload         6
      53: invokedynamic #12,  0             // InvokeDynamic #1:apply:(Lorg/springframework/test/web/reactive/server/HttpHandlerConnector;Lorg/springframework/http/HttpMethod;Ljava/net/URI;Lreactor/core/publisher/MonoProcessor;Lorg/springframework/mock/http/server/reactive/MockServerHttpResponse;)Ljava/util/function/Function;
      58: invokevirtual #13                 // Method org/springframework/mock/http/server/reactive/MockServerHttpResponse.setWriteHandler:(Ljava/util/function/Function;)V
      61: aload_0
      62: ldc           #14                 // String Writing client request for
      64: aload_1
      65: aload_2
      66: invokespecial #15                 // Method log:(Ljava/lang/String;Lorg/springframework/http/HttpMethod;Ljava/net/URI;)V
      69: aload_3
      70: aload         5
      72: invokeinterface #16,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      77: checkcast     #17                 // class reactor/core/publisher/Mono
      80: invokedynamic #18,  0             // InvokeDynamic #2:accept:()Ljava/util/function/Consumer;
      85: aload         4
      87: dup
      88: invokevirtual #19                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      91: pop
      92: invokedynamic #20,  0             // InvokeDynamic #3:accept:(Lreactor/core/publisher/MonoProcessor;)Ljava/util/function/Consumer;
      97: invokevirtual #21                 // Method reactor/core/publisher/Mono.subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;)Lreactor/core/Disposable;
     100: pop
     101: aload         4
     103: areturn

  private void log(java.lang.String, org.springframework.http.HttpMethod, java.net.URI);
    Code:
       0: getstatic     #22                 // Field logger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #23,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
       8: ifeq          40
      11: getstatic     #22                 // Field logger:Lorg/apache/commons/logging/Log;
      14: ldc           #24                 // String %s %s \"%s\"
      16: iconst_3
      17: anewarray     #25                 // class java/lang/Object
      20: dup
      21: iconst_0
      22: aload_1
      23: aastore
      24: dup
      25: iconst_1
      26: aload_2
      27: aastore
      28: dup
      29: iconst_2
      30: aload_3
      31: aastore
      32: invokestatic  #26                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      35: invokeinterface #27,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      40: return

  private org.springframework.http.server.reactive.ServerHttpRequest adaptRequest(org.springframework.mock.http.client.reactive.MockClientHttpRequest, org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_1
       1: invokevirtual #28                 // Method org/springframework/mock/http/client/reactive/MockClientHttpRequest.getMethod:()Lorg/springframework/http/HttpMethod;
       4: astore_3
       5: aload_1
       6: invokevirtual #29                 // Method org/springframework/mock/http/client/reactive/MockClientHttpRequest.getURI:()Ljava/net/URI;
       9: astore        4
      11: aload_1
      12: invokevirtual #30                 // Method org/springframework/mock/http/client/reactive/MockClientHttpRequest.getHeaders:()Lorg/springframework/http/HttpHeaders;
      15: astore        5
      17: aload_1
      18: invokevirtual #31                 // Method org/springframework/mock/http/client/reactive/MockClientHttpRequest.getCookies:()Lorg/springframework/util/MultiValueMap;
      21: astore        6
      23: aload_3
      24: aload         4
      26: invokestatic  #32                 // Method org/springframework/mock/http/server/reactive/MockServerHttpRequest.method:(Lorg/springframework/http/HttpMethod;Ljava/net/URI;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder;
      29: aload         5
      31: invokeinterface #33,  2           // InterfaceMethod org/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder.headers:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BaseBuilder;
      36: checkcast     #34                 // class org/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder
      39: aload         6
      41: invokeinterface #35,  2           // InterfaceMethod org/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder.cookies:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest$BaseBuilder;
      46: checkcast     #34                 // class org/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder
      49: aload_2
      50: invokeinterface #36,  2           // InterfaceMethod org/springframework/mock/http/server/reactive/MockServerHttpRequest$BodyBuilder.body:(Lorg/reactivestreams/Publisher;)Lorg/springframework/mock/http/server/reactive/MockServerHttpRequest;
      55: areturn

  private org.springframework.http.server.reactive.ServerHttpResponse prepareResponse(org.springframework.http.server.reactive.ServerHttpResponse, org.springframework.http.server.reactive.ServerHttpRequest);
    Code:
       0: aload_2
       1: invokeinterface #37,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpRequest.getMethod:()Lorg/springframework/http/HttpMethod;
       6: getstatic     #38                 // Field org/springframework/http/HttpMethod.HEAD:Lorg/springframework/http/HttpMethod;
       9: if_acmpne     23
      12: new           #39                 // class org/springframework/http/server/reactive/HttpHeadResponseDecorator
      15: dup
      16: aload_1
      17: invokespecial #40                 // Method org/springframework/http/server/reactive/HttpHeadResponseDecorator."<init>":(Lorg/springframework/http/server/reactive/ServerHttpResponse;)V
      20: goto          24
      23: aload_1
      24: areturn

  private org.springframework.http.client.reactive.ClientHttpResponse adaptResponse(org.springframework.mock.http.server.reactive.MockServerHttpResponse, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_1
       1: invokevirtual #41                 // Method org/springframework/mock/http/server/reactive/MockServerHttpResponse.getStatusCode:()Lorg/springframework/http/HttpStatus;
       4: invokestatic  #42                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
       7: getstatic     #43                 // Field org/springframework/http/HttpStatus.OK:Lorg/springframework/http/HttpStatus;
      10: invokevirtual #44                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #45                 // class org/springframework/http/HttpStatus
      16: astore_3
      17: new           #46                 // class org/springframework/mock/http/client/reactive/MockClientHttpResponse
      20: dup
      21: aload_3
      22: invokespecial #47                 // Method org/springframework/mock/http/client/reactive/MockClientHttpResponse."<init>":(Lorg/springframework/http/HttpStatus;)V
      25: astore        4
      27: aload         4
      29: invokevirtual #48                 // Method org/springframework/mock/http/client/reactive/MockClientHttpResponse.getHeaders:()Lorg/springframework/http/HttpHeaders;
      32: aload_1
      33: invokevirtual #49                 // Method org/springframework/mock/http/server/reactive/MockServerHttpResponse.getHeaders:()Lorg/springframework/http/HttpHeaders;
      36: invokevirtual #50                 // Method org/springframework/http/HttpHeaders.putAll:(Ljava/util/Map;)V
      39: aload         4
      41: invokevirtual #51                 // Method org/springframework/mock/http/client/reactive/MockClientHttpResponse.getCookies:()Lorg/springframework/util/MultiValueMap;
      44: aload_1
      45: invokevirtual #52                 // Method org/springframework/mock/http/server/reactive/MockServerHttpResponse.getCookies:()Lorg/springframework/util/MultiValueMap;
      48: invokeinterface #53,  2           // InterfaceMethod org/springframework/util/MultiValueMap.putAll:(Ljava/util/Map;)V
      53: aload         4
      55: aload_2
      56: invokevirtual #54                 // Method org/springframework/mock/http/client/reactive/MockClientHttpResponse.setBody:(Lorg/reactivestreams/Publisher;)V
      59: aload         4
      61: areturn

  private static void lambda$connect$4(java.lang.Void);
    Code:
       0: return

  private reactor.core.publisher.Mono lambda$connect$3(org.springframework.http.HttpMethod, java.net.URI, reactor.core.publisher.MonoProcessor, org.springframework.mock.http.server.reactive.MockServerHttpResponse, reactor.core.publisher.Flux);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokedynamic #55,  0             // InvokeDynamic #4:run:(Lorg/springframework/test/web/reactive/server/HttpHandlerConnector;Lorg/springframework/http/HttpMethod;Ljava/net/URI;Lreactor/core/publisher/MonoProcessor;Lorg/springframework/mock/http/server/reactive/MockServerHttpResponse;Lreactor/core/publisher/Flux;)Ljava/lang/Runnable;
      13: invokestatic  #56                 // Method reactor/core/publisher/Mono.fromRunnable:(Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
      16: areturn

  private void lambda$null$2(org.springframework.http.HttpMethod, java.net.URI, reactor.core.publisher.MonoProcessor, org.springframework.mock.http.server.reactive.MockServerHttpResponse, reactor.core.publisher.Flux);
    Code:
       0: aload_0
       1: ldc           #57                 // String Creating client response for
       3: aload_1
       4: aload_2
       5: invokespecial #15                 // Method log:(Ljava/lang/String;Lorg/springframework/http/HttpMethod;Ljava/net/URI;)V
       8: aload_3
       9: aload_0
      10: aload         4
      12: aload         5
      14: invokespecial #58                 // Method adaptResponse:(Lorg/springframework/mock/http/server/reactive/MockServerHttpResponse;Lreactor/core/publisher/Flux;)Lorg/springframework/http/client/reactive/ClientHttpResponse;
      17: invokevirtual #59                 // Method reactor/core/publisher/MonoProcessor.onNext:(Ljava/lang/Object;)V
      20: return

  private reactor.core.publisher.Mono lambda$connect$1(org.springframework.http.HttpMethod, java.net.URI, org.springframework.mock.http.client.reactive.MockClientHttpRequest, org.springframework.mock.http.server.reactive.MockServerHttpResponse, reactor.core.publisher.MonoProcessor, reactor.core.publisher.Flux);
    Code:
       0: aload_0
       1: ldc           #60                 // String Invoking HttpHandler for
       3: aload_1
       4: aload_2
       5: invokespecial #15                 // Method log:(Ljava/lang/String;Lorg/springframework/http/HttpMethod;Ljava/net/URI;)V
       8: aload_0
       9: aload_3
      10: aload         6
      12: invokespecial #61                 // Method adaptRequest:(Lorg/springframework/mock/http/client/reactive/MockClientHttpRequest;Lorg/reactivestreams/Publisher;)Lorg/springframework/http/server/reactive/ServerHttpRequest;
      15: astore        7
      17: aload_0
      18: aload         4
      20: aload         7
      22: invokespecial #62                 // Method prepareResponse:(Lorg/springframework/http/server/reactive/ServerHttpResponse;Lorg/springframework/http/server/reactive/ServerHttpRequest;)Lorg/springframework/http/server/reactive/ServerHttpResponse;
      25: astore        8
      27: aload_0
      28: getfield      #4                  // Field handler:Lorg/springframework/http/server/reactive/HttpHandler;
      31: aload         7
      33: aload         8
      35: invokeinterface #63,  3           // InterfaceMethod org/springframework/http/server/reactive/HttpHandler.handle:(Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Lreactor/core/publisher/Mono;
      40: invokedynamic #64,  0             // InvokeDynamic #5:accept:()Ljava/util/function/Consumer;
      45: aload         5
      47: dup
      48: invokevirtual #19                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      51: pop
      52: invokedynamic #20,  0             // InvokeDynamic #3:accept:(Lreactor/core/publisher/MonoProcessor;)Ljava/util/function/Consumer;
      57: invokevirtual #21                 // Method reactor/core/publisher/Mono.subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;)Lreactor/core/Disposable;
      60: pop
      61: invokestatic  #65                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      64: areturn

  private static void lambda$null$0(java.lang.Void);
    Code:
       0: return

  static {};
    Code:
       0: ldc           #66                 // class org/springframework/test/web/reactive/server/HttpHandlerConnector
       2: invokestatic  #67                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #22                 // Field logger:Lorg/apache/commons/logging/Log;
       8: return
}
