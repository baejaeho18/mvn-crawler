Compiled from "ContentRequestMatchers.java"
public class org.springframework.test.web.client.match.ContentRequestMatchers {
  private final org.springframework.test.util.XmlExpectationsHelper xmlHelper;

  private final org.springframework.test.util.JsonExpectationsHelper jsonHelper;

  protected org.springframework.test.web.client.match.ContentRequestMatchers();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class org/springframework/test/util/XmlExpectationsHelper
       8: dup
       9: invokespecial #4                  // Method org/springframework/test/util/XmlExpectationsHelper."<init>":()V
      12: putfield      #1                  // Field xmlHelper:Lorg/springframework/test/util/XmlExpectationsHelper;
      15: aload_0
      16: new           #5                  // class org/springframework/test/util/JsonExpectationsHelper
      19: dup
      20: invokespecial #6                  // Method org/springframework/test/util/JsonExpectationsHelper."<init>":()V
      23: putfield      #7                  // Field jsonHelper:Lorg/springframework/test/util/JsonExpectationsHelper;
      26: return

  public org.springframework.test.web.client.RequestMatcher contentType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #8                  // Method org/springframework/http/MediaType.parseMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
       5: invokevirtual #9                  // Method contentType:(Lorg/springframework/http/MediaType;)Lorg/springframework/test/web/client/RequestMatcher;
       8: areturn

  public org.springframework.test.web.client.RequestMatcher contentType(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: invokedynamic #10,  0             // InvokeDynamic #0:match:(Lorg/springframework/http/MediaType;)Lorg/springframework/test/web/client/RequestMatcher;
       6: areturn

  public org.springframework.test.web.client.RequestMatcher contentTypeCompatibleWith(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #8                  // Method org/springframework/http/MediaType.parseMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
       5: invokevirtual #11                 // Method contentTypeCompatibleWith:(Lorg/springframework/http/MediaType;)Lorg/springframework/test/web/client/RequestMatcher;
       8: areturn

  public org.springframework.test.web.client.RequestMatcher contentTypeCompatibleWith(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: invokedynamic #12,  0             // InvokeDynamic #1:match:(Lorg/springframework/http/MediaType;)Lorg/springframework/test/web/client/RequestMatcher;
       6: areturn

  public org.springframework.test.web.client.RequestMatcher string(org.hamcrest.Matcher<? super java.lang.String>);
    Code:
       0: aload_1
       1: invokedynamic #13,  0             // InvokeDynamic #2:match:(Lorg/hamcrest/Matcher;)Lorg/springframework/test/web/client/RequestMatcher;
       6: areturn

  public org.springframework.test.web.client.RequestMatcher string(java.lang.String);
    Code:
       0: aload_1
       1: invokedynamic #14,  0             // InvokeDynamic #3:match:(Ljava/lang/String;)Lorg/springframework/test/web/client/RequestMatcher;
       6: areturn

  public org.springframework.test.web.client.RequestMatcher bytes(byte[]);
    Code:
       0: aload_1
       1: invokedynamic #15,  0             // InvokeDynamic #4:match:([B)Lorg/springframework/test/web/client/RequestMatcher;
       6: areturn

  public org.springframework.test.web.client.RequestMatcher formData(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #16,  0             // InvokeDynamic #5:match:(Lorg/springframework/test/web/client/match/ContentRequestMatchers;Lorg/springframework/util/MultiValueMap;)Lorg/springframework/test/web/client/RequestMatcher;
       7: areturn

  public org.springframework.test.web.client.RequestMatcher xml(java.lang.String);
    Code:
       0: new           #17                 // class org/springframework/test/web/client/match/ContentRequestMatchers$2
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #18                 // Method org/springframework/test/web/client/match/ContentRequestMatchers$2."<init>":(Lorg/springframework/test/web/client/match/ContentRequestMatchers;Ljava/lang/String;)V
       9: areturn

  public org.springframework.test.web.client.RequestMatcher node(org.hamcrest.Matcher<? super org.w3c.dom.Node>);
    Code:
       0: new           #19                 // class org/springframework/test/web/client/match/ContentRequestMatchers$3
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #20                 // Method org/springframework/test/web/client/match/ContentRequestMatchers$3."<init>":(Lorg/springframework/test/web/client/match/ContentRequestMatchers;Lorg/hamcrest/Matcher;)V
       9: areturn

  public org.springframework.test.web.client.RequestMatcher source(org.hamcrest.Matcher<? super javax.xml.transform.Source>);
    Code:
       0: new           #21                 // class org/springframework/test/web/client/match/ContentRequestMatchers$4
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #22                 // Method org/springframework/test/web/client/match/ContentRequestMatchers$4."<init>":(Lorg/springframework/test/web/client/match/ContentRequestMatchers;Lorg/hamcrest/Matcher;)V
       9: areturn

  public org.springframework.test.web.client.RequestMatcher json(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #23                 // Method json:(Ljava/lang/String;Z)Lorg/springframework/test/web/client/RequestMatcher;
       6: areturn

  public org.springframework.test.web.client.RequestMatcher json(java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokedynamic #24,  0             // InvokeDynamic #6:match:(Lorg/springframework/test/web/client/match/ContentRequestMatchers;Ljava/lang/String;Z)Lorg/springframework/test/web/client/RequestMatcher;
       8: areturn

  private void lambda$json$6(java.lang.String, boolean, org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError;
    Code:
       0: aload_3
       1: checkcast     #25                 // class org/springframework/mock/http/client/MockClientHttpRequest
       4: astore        4
       6: aload_0
       7: getfield      #7                  // Field jsonHelper:Lorg/springframework/test/util/JsonExpectationsHelper;
      10: aload_1
      11: aload         4
      13: invokevirtual #26                 // Method org/springframework/mock/http/client/MockClientHttpRequest.getBodyAsString:()Ljava/lang/String;
      16: iload_2
      17: invokevirtual #27                 // Method org/springframework/test/util/JsonExpectationsHelper.assertJsonEqual:(Ljava/lang/String;Ljava/lang/String;Z)V
      20: goto          37
      23: astore        4
      25: new           #29                 // class java/lang/AssertionError
      28: dup
      29: ldc           #30                 // String Failed to parse expected or actual JSON request content
      31: aload         4
      33: invokespecial #31                 // Method java/lang/AssertionError."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      36: athrow
      37: return
    Exception table:
       from    to  target type
           0    20    23   Class java/lang/Exception

  private void lambda$formData$5(org.springframework.util.MultiValueMap, org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError;
    Code:
       0: new           #32                 // class org/springframework/test/web/client/match/ContentRequestMatchers$1
       3: dup
       4: aload_0
       5: aload_2
       6: invokespecial #33                 // Method org/springframework/test/web/client/match/ContentRequestMatchers$1."<init>":(Lorg/springframework/test/web/client/match/ContentRequestMatchers;Lorg/springframework/http/client/ClientHttpRequest;)V
       9: astore_3
      10: new           #34                 // class org/springframework/http/converter/FormHttpMessageConverter
      13: dup
      14: invokespecial #35                 // Method org/springframework/http/converter/FormHttpMessageConverter."<init>":()V
      17: astore        4
      19: ldc           #36                 // String Request content
      21: aload_1
      22: aload         4
      24: aconst_null
      25: aload_3
      26: invokevirtual #37                 // Method org/springframework/http/converter/FormHttpMessageConverter.read:(Ljava/lang/Class;Lorg/springframework/http/HttpInputMessage;)Lorg/springframework/util/MultiValueMap;
      29: invokestatic  #38                 // Method org/springframework/test/util/AssertionErrors.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      32: return

  private static void lambda$bytes$4(byte[], org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError;
    Code:
       0: aload_1
       1: checkcast     #25                 // class org/springframework/mock/http/client/MockClientHttpRequest
       4: astore_2
       5: ldc           #36                 // String Request content
       7: aload_0
       8: aload_2
       9: invokevirtual #39                 // Method org/springframework/mock/http/client/MockClientHttpRequest.getBodyAsBytes:()[B
      12: invokestatic  #38                 // Method org/springframework/test/util/AssertionErrors.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      15: return

  private static void lambda$string$3(java.lang.String, org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError;
    Code:
       0: aload_1
       1: checkcast     #25                 // class org/springframework/mock/http/client/MockClientHttpRequest
       4: astore_2
       5: ldc           #36                 // String Request content
       7: aload_0
       8: aload_2
       9: invokevirtual #26                 // Method org/springframework/mock/http/client/MockClientHttpRequest.getBodyAsString:()Ljava/lang/String;
      12: invokestatic  #38                 // Method org/springframework/test/util/AssertionErrors.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      15: return

  private static void lambda$string$2(org.hamcrest.Matcher, org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError;
    Code:
       0: aload_1
       1: checkcast     #25                 // class org/springframework/mock/http/client/MockClientHttpRequest
       4: astore_2
       5: ldc           #36                 // String Request content
       7: aload_2
       8: invokevirtual #26                 // Method org/springframework/mock/http/client/MockClientHttpRequest.getBodyAsString:()Ljava/lang/String;
      11: aload_0
      12: invokestatic  #40                 // Method org/hamcrest/MatcherAssert.assertThat:(Ljava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;)V
      15: return

  private static void lambda$contentTypeCompatibleWith$1(org.springframework.http.MediaType, org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError;
    Code:
       0: aload_1
       1: invokeinterface #41,  1           // InterfaceMethod org/springframework/http/client/ClientHttpRequest.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #42                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore_2
      10: ldc           #43                 // String Content type not set
      12: aload_2
      13: ifnull        20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: invokestatic  #44                 // Method org/springframework/test/util/AssertionErrors.assertTrue:(Ljava/lang/String;Z)V
      24: aload_2
      25: ifnull        69
      28: new           #45                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #47                 // String Content type [
      37: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_2
      41: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      44: ldc           #50                 // String ] is not compatible with [
      46: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_0
      50: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      53: ldc           #51                 // String ]
      55: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: aload_2
      62: aload_0
      63: invokevirtual #53                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      66: invokestatic  #44                 // Method org/springframework/test/util/AssertionErrors.assertTrue:(Ljava/lang/String;Z)V
      69: return

  private static void lambda$contentType$0(org.springframework.http.MediaType, org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError;
    Code:
       0: aload_1
       1: invokeinterface #41,  1           // InterfaceMethod org/springframework/http/client/ClientHttpRequest.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #42                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore_2
      10: ldc           #43                 // String Content type not set
      12: aload_2
      13: ifnull        20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: invokestatic  #44                 // Method org/springframework/test/util/AssertionErrors.assertTrue:(Ljava/lang/String;Z)V
      24: ldc           #54                 // String Content type
      26: aload_0
      27: aload_2
      28: invokestatic  #38                 // Method org/springframework/test/util/AssertionErrors.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      31: return

  static org.springframework.test.util.XmlExpectationsHelper access$100(org.springframework.test.web.client.match.ContentRequestMatchers);
    Code:
       0: aload_0
       1: getfield      #1                  // Field xmlHelper:Lorg/springframework/test/util/XmlExpectationsHelper;
       4: areturn
}
