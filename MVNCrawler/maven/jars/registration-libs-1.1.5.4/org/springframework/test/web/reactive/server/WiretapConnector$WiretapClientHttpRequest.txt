Compiled from "WiretapConnector.java"
class org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest extends org.springframework.http.client.reactive.ClientHttpRequestDecorator {
  private final org.springframework.core.io.buffer.DataBuffer buffer;

  private final reactor.core.publisher.MonoProcessor<byte[]> body;

  public org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest(org.springframework.http.client.reactive.ClientHttpRequest);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/http/client/reactive/ClientHttpRequestDecorator."<init>":(Lorg/springframework/http/client/reactive/ClientHttpRequest;)V
       5: aload_0
       6: invokestatic  #2                  // Method reactor/core/publisher/MonoProcessor.create:()Lreactor/core/publisher/MonoProcessor;
       9: putfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
      12: aload_0
      13: invokestatic  #4                  // Method org/springframework/test/web/reactive/server/WiretapConnector.access$000:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      16: invokeinterface #5,  1            // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.allocateBuffer:()Lorg/springframework/core/io/buffer/DataBuffer;
      21: putfield      #6                  // Field buffer:Lorg/springframework/core/io/buffer/DataBuffer;
      24: return

  public reactor.core.publisher.MonoProcessor<byte[]> getContent();
    Code:
       0: aload_0
       1: getfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
       4: areturn

  public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       5: aload_0
       6: invokedynamic #8,  0              // InvokeDynamic #0:accept:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/util/function/Consumer;
      11: invokevirtual #9                  // Method reactor/core/publisher/Flux.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      14: aload_0
      15: invokedynamic #10,  0             // InvokeDynamic #1:accept:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/util/function/Consumer;
      20: invokevirtual #11                 // Method reactor/core/publisher/Flux.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      23: aload_0
      24: invokedynamic #12,  0             // InvokeDynamic #2:run:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/lang/Runnable;
      29: invokevirtual #13                 // Method reactor/core/publisher/Flux.doOnCancel:(Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      32: aload_0
      33: invokedynamic #12,  0             // InvokeDynamic #2:run:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/lang/Runnable;
      38: invokevirtual #14                 // Method reactor/core/publisher/Flux.doOnComplete:(Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      41: invokespecial #15                 // Method org/springframework/http/client/reactive/ClientHttpRequestDecorator.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      44: areturn

  public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       5: aload_0
       6: invokedynamic #16,  0             // InvokeDynamic #3:apply:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/util/function/Function;
      11: invokevirtual #17                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      14: aload_0
      15: invokedynamic #10,  0             // InvokeDynamic #1:accept:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/util/function/Consumer;
      20: invokevirtual #11                 // Method reactor/core/publisher/Flux.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      23: aload_0
      24: invokedynamic #12,  0             // InvokeDynamic #2:run:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/lang/Runnable;
      29: invokevirtual #13                 // Method reactor/core/publisher/Flux.doOnCancel:(Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      32: aload_0
      33: invokedynamic #12,  0             // InvokeDynamic #2:run:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/lang/Runnable;
      38: invokevirtual #14                 // Method reactor/core/publisher/Flux.doOnComplete:(Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      41: invokespecial #18                 // Method org/springframework/http/client/reactive/ClientHttpRequestDecorator.writeAndFlushWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      44: areturn

  public reactor.core.publisher.Mono<java.lang.Void> setComplete();
    Code:
       0: aload_0
       1: invokespecial #19                 // Method handleOnComplete:()V
       4: aload_0
       5: invokespecial #20                 // Method org/springframework/http/client/reactive/ClientHttpRequestDecorator.setComplete:()Lreactor/core/publisher/Mono;
       8: areturn

  private void handleOnNext(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: getfield      #6                  // Field buffer:Lorg/springframework/core/io/buffer/DataBuffer;
       4: iconst_1
       5: anewarray     #21                 // class org/springframework/core/io/buffer/DataBuffer
       8: dup
       9: iconst_0
      10: aload_1
      11: aastore
      12: invokeinterface #22,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:([Lorg/springframework/core/io/buffer/DataBuffer;)Lorg/springframework/core/io/buffer/DataBuffer;
      17: pop
      18: return

  private void handleError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
       4: invokevirtual #23                 // Method reactor/core/publisher/MonoProcessor.isTerminated:()Z
       7: ifne          18
      10: aload_0
      11: getfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
      14: aload_1
      15: invokevirtual #24                 // Method reactor/core/publisher/MonoProcessor.onError:(Ljava/lang/Throwable;)V
      18: return

  private void handleOnComplete();
    Code:
       0: aload_0
       1: getfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
       4: invokevirtual #23                 // Method reactor/core/publisher/MonoProcessor.isTerminated:()Z
       7: ifne          41
      10: aload_0
      11: getfield      #6                  // Field buffer:Lorg/springframework/core/io/buffer/DataBuffer;
      14: invokeinterface #25,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      19: newarray       byte
      21: astore_1
      22: aload_0
      23: getfield      #6                  // Field buffer:Lorg/springframework/core/io/buffer/DataBuffer;
      26: aload_1
      27: invokeinterface #26,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.read:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      32: pop
      33: aload_0
      34: getfield      #3                  // Field body:Lreactor/core/publisher/MonoProcessor;
      37: aload_1
      38: invokevirtual #27                 // Method reactor/core/publisher/MonoProcessor.onNext:(Ljava/lang/Object;)V
      41: return

  private reactor.core.publisher.Flux lambda$writeAndFlushWith$0(org.reactivestreams.Publisher);
    Code:
       0: aload_1
       1: invokestatic  #7                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: aload_0
       5: invokedynamic #8,  0              // InvokeDynamic #0:accept:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/util/function/Consumer;
      10: invokevirtual #9                  // Method reactor/core/publisher/Flux.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      13: aload_0
      14: invokedynamic #10,  0             // InvokeDynamic #1:accept:(Lorg/springframework/test/web/reactive/server/WiretapConnector$WiretapClientHttpRequest;)Ljava/util/function/Consumer;
      19: invokevirtual #11                 // Method reactor/core/publisher/Flux.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      22: areturn
}
