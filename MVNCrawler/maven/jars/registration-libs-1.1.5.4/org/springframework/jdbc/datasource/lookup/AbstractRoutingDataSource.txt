Compiled from "AbstractRoutingDataSource.java"
public abstract class org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource extends org.springframework.jdbc.datasource.AbstractDataSource implements org.springframework.beans.factory.InitializingBean {
  private java.util.Map<java.lang.Object, java.lang.Object> targetDataSources;

  private java.lang.Object defaultTargetDataSource;

  private boolean lenientFallback;

  private org.springframework.jdbc.datasource.lookup.DataSourceLookup dataSourceLookup;

  private java.util.Map<java.lang.Object, javax.sql.DataSource> resolvedDataSources;

  private javax.sql.DataSource resolvedDefaultDataSource;

  public org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/jdbc/datasource/AbstractDataSource."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field lenientFallback:Z
       9: aload_0
      10: new           #3                  // class org/springframework/jdbc/datasource/lookup/JndiDataSourceLookup
      13: dup
      14: invokespecial #4                  // Method org/springframework/jdbc/datasource/lookup/JndiDataSourceLookup."<init>":()V
      17: putfield      #5                  // Field dataSourceLookup:Lorg/springframework/jdbc/datasource/lookup/DataSourceLookup;
      20: return

  public void setTargetDataSources(java.util.Map<java.lang.Object, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field targetDataSources:Ljava/util/Map;
       5: return

  public void setDefaultTargetDataSource(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field defaultTargetDataSource:Ljava/lang/Object;
       5: return

  public void setLenientFallback(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field lenientFallback:Z
       5: return

  public void setDataSourceLookup(org.springframework.jdbc.datasource.lookup.DataSourceLookup);
    Code:
       0: aload_0
       1: aload_1
       2: ifnull        9
       5: aload_1
       6: goto          16
       9: new           #3                  // class org/springframework/jdbc/datasource/lookup/JndiDataSourceLookup
      12: dup
      13: invokespecial #4                  // Method org/springframework/jdbc/datasource/lookup/JndiDataSourceLookup."<init>":()V
      16: putfield      #5                  // Field dataSourceLookup:Lorg/springframework/jdbc/datasource/lookup/DataSourceLookup;
      19: return

  public void afterPropertiesSet();
    Code:
       0: aload_0
       1: getfield      #6                  // Field targetDataSources:Ljava/util/Map;
       4: ifnonnull     17
       7: new           #8                  // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #9                  // String Property \'targetDataSources\' is required
      13: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: new           #11                 // class java/util/HashMap
      21: dup
      22: aload_0
      23: getfield      #6                  // Field targetDataSources:Ljava/util/Map;
      26: invokeinterface #12,  1           // InterfaceMethod java/util/Map.size:()I
      31: invokespecial #13                 // Method java/util/HashMap."<init>":(I)V
      34: putfield      #14                 // Field resolvedDataSources:Ljava/util/Map;
      37: aload_0
      38: getfield      #6                  // Field targetDataSources:Ljava/util/Map;
      41: aload_0
      42: invokedynamic #15,  0             // InvokeDynamic #0:accept:(Lorg/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource;)Ljava/util/function/BiConsumer;
      47: invokeinterface #16,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      52: aload_0
      53: getfield      #7                  // Field defaultTargetDataSource:Ljava/lang/Object;
      56: ifnull        71
      59: aload_0
      60: aload_0
      61: aload_0
      62: getfield      #7                  // Field defaultTargetDataSource:Ljava/lang/Object;
      65: invokevirtual #17                 // Method resolveSpecifiedDataSource:(Ljava/lang/Object;)Ljavax/sql/DataSource;
      68: putfield      #18                 // Field resolvedDefaultDataSource:Ljavax/sql/DataSource;
      71: return

  protected java.lang.Object resolveSpecifiedLookupKey(java.lang.Object);
    Code:
       0: aload_1
       1: areturn

  protected javax.sql.DataSource resolveSpecifiedDataSource(java.lang.Object) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_1
       1: instanceof    #19                 // class javax/sql/DataSource
       4: ifeq          12
       7: aload_1
       8: checkcast     #19                 // class javax/sql/DataSource
      11: areturn
      12: aload_1
      13: instanceof    #20                 // class java/lang/String
      16: ifeq          33
      19: aload_0
      20: getfield      #5                  // Field dataSourceLookup:Lorg/springframework/jdbc/datasource/lookup/DataSourceLookup;
      23: aload_1
      24: checkcast     #20                 // class java/lang/String
      27: invokeinterface #21,  2           // InterfaceMethod org/springframework/jdbc/datasource/lookup/DataSourceLookup.getDataSource:(Ljava/lang/String;)Ljavax/sql/DataSource;
      32: areturn
      33: new           #8                  // class java/lang/IllegalArgumentException
      36: dup
      37: new           #22                 // class java/lang/StringBuilder
      40: dup
      41: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      44: ldc           #24                 // String Illegal data source value - only [javax.sql.DataSource] and String supported:
      46: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_1
      50: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      53: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      56: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      59: athrow

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method determineTargetDataSource:()Ljavax/sql/DataSource;
       4: invokeinterface #29,  1           // InterfaceMethod javax/sql/DataSource.getConnection:()Ljava/sql/Connection;
       9: areturn

  public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method determineTargetDataSource:()Ljavax/sql/DataSource;
       4: aload_1
       5: aload_2
       6: invokeinterface #30,  3           // InterfaceMethod javax/sql/DataSource.getConnection:(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;
      11: areturn

  public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #31                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
       5: ifeq          10
       8: aload_0
       9: areturn
      10: aload_0
      11: invokevirtual #28                 // Method determineTargetDataSource:()Ljavax/sql/DataSource;
      14: aload_1
      15: invokeinterface #32,  2           // InterfaceMethod javax/sql/DataSource.unwrap:(Ljava/lang/Class;)Ljava/lang/Object;
      20: areturn

  public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #31                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
       5: ifne          21
       8: aload_0
       9: invokevirtual #28                 // Method determineTargetDataSource:()Ljavax/sql/DataSource;
      12: aload_1
      13: invokeinterface #33,  2           // InterfaceMethod javax/sql/DataSource.isWrapperFor:(Ljava/lang/Class;)Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  protected javax.sql.DataSource determineTargetDataSource();
    Code:
       0: aload_0
       1: getfield      #14                 // Field resolvedDataSources:Ljava/util/Map;
       4: ldc           #34                 // String DataSource router not initialized
       6: invokestatic  #35                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       9: aload_0
      10: invokevirtual #36                 // Method determineCurrentLookupKey:()Ljava/lang/Object;
      13: astore_1
      14: aload_0
      15: getfield      #14                 // Field resolvedDataSources:Ljava/util/Map;
      18: aload_1
      19: invokeinterface #37,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #19                 // class javax/sql/DataSource
      27: astore_2
      28: aload_2
      29: ifnonnull     48
      32: aload_0
      33: getfield      #2                  // Field lenientFallback:Z
      36: ifne          43
      39: aload_1
      40: ifnonnull     48
      43: aload_0
      44: getfield      #18                 // Field resolvedDefaultDataSource:Ljavax/sql/DataSource;
      47: astore_2
      48: aload_2
      49: ifnonnull     84
      52: new           #38                 // class java/lang/IllegalStateException
      55: dup
      56: new           #22                 // class java/lang/StringBuilder
      59: dup
      60: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      63: ldc           #39                 // String Cannot determine target DataSource for lookup key [
      65: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: aload_1
      69: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      72: ldc           #40                 // String ]
      74: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: invokespecial #41                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: aload_2
      85: areturn

  protected abstract java.lang.Object determineCurrentLookupKey();

  private void lambda$afterPropertiesSet$0(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #42                 // Method resolveSpecifiedLookupKey:(Ljava/lang/Object;)Ljava/lang/Object;
       5: astore_3
       6: aload_0
       7: aload_2
       8: invokevirtual #17                 // Method resolveSpecifiedDataSource:(Ljava/lang/Object;)Ljavax/sql/DataSource;
      11: astore        4
      13: aload_0
      14: getfield      #14                 // Field resolvedDataSources:Ljava/util/Map;
      17: aload_3
      18: aload         4
      20: invokeinterface #43,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      25: pop
      26: return
}
