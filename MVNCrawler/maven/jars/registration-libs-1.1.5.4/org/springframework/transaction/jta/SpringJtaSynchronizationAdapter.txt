Compiled from "SpringJtaSynchronizationAdapter.java"
public class org.springframework.transaction.jta.SpringJtaSynchronizationAdapter implements javax.transaction.Synchronization {
  protected static final org.apache.commons.logging.Log logger;

  private final org.springframework.transaction.support.TransactionSynchronization springSynchronization;

  private javax.transaction.UserTransaction jtaTransaction;

  private boolean beforeCompletionCalled;

  public org.springframework.transaction.jta.SpringJtaSynchronizationAdapter(org.springframework.transaction.support.TransactionSynchronization);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field beforeCompletionCalled:Z
       9: aload_1
      10: ldc           #3                  // String TransactionSynchronization must not be null
      12: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field springSynchronization:Lorg/springframework/transaction/support/TransactionSynchronization;
      20: return

  public org.springframework.transaction.jta.SpringJtaSynchronizationAdapter(org.springframework.transaction.support.TransactionSynchronization, javax.transaction.UserTransaction);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method "<init>":(Lorg/springframework/transaction/support/TransactionSynchronization;)V
       5: aload_2
       6: ifnull        29
       9: aload_2
      10: invokevirtual #7                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      13: invokevirtual #8                  // Method java/lang/Class.getName:()Ljava/lang/String;
      16: ldc           #9                  // String weblogic.
      18: invokevirtual #10                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      21: ifne          29
      24: aload_0
      25: aload_2
      26: putfield      #11                 // Field jtaTransaction:Ljavax/transaction/UserTransaction;
      29: return

  public org.springframework.transaction.jta.SpringJtaSynchronizationAdapter(org.springframework.transaction.support.TransactionSynchronization, javax.transaction.TransactionManager);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method "<init>":(Lorg/springframework/transaction/support/TransactionSynchronization;)V
       5: aload_2
       6: ifnull        36
       9: aload_2
      10: invokevirtual #7                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      13: invokevirtual #8                  // Method java/lang/Class.getName:()Ljava/lang/String;
      16: ldc           #9                  // String weblogic.
      18: invokevirtual #10                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      21: ifne          36
      24: aload_0
      25: new           #12                 // class org/springframework/transaction/jta/UserTransactionAdapter
      28: dup
      29: aload_2
      30: invokespecial #13                 // Method org/springframework/transaction/jta/UserTransactionAdapter."<init>":(Ljavax/transaction/TransactionManager;)V
      33: putfield      #11                 // Field jtaTransaction:Ljavax/transaction/UserTransaction;
      36: return

  public void beforeCompletion();
    Code:
       0: invokestatic  #14                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isCurrentTransactionReadOnly:()Z
       3: istore_1
       4: aload_0
       5: getfield      #5                  // Field springSynchronization:Lorg/springframework/transaction/support/TransactionSynchronization;
       8: iload_1
       9: invokeinterface #15,  2           // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.beforeCommit:(Z)V
      14: aload_0
      15: iconst_1
      16: putfield      #2                  // Field beforeCompletionCalled:Z
      19: aload_0
      20: getfield      #5                  // Field springSynchronization:Lorg/springframework/transaction/support/TransactionSynchronization;
      23: invokeinterface #16,  1           // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.beforeCompletion:()V
      28: goto          62
      31: astore_1
      32: aload_0
      33: invokespecial #18                 // Method setRollbackOnlyIfPossible:()V
      36: aload_1
      37: athrow
      38: astore_1
      39: aload_0
      40: invokespecial #18                 // Method setRollbackOnlyIfPossible:()V
      43: aload_1
      44: athrow
      45: astore_2
      46: aload_0
      47: iconst_1
      48: putfield      #2                  // Field beforeCompletionCalled:Z
      51: aload_0
      52: getfield      #5                  // Field springSynchronization:Lorg/springframework/transaction/support/TransactionSynchronization;
      55: invokeinterface #16,  1           // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.beforeCompletion:()V
      60: aload_2
      61: athrow
      62: return
    Exception table:
       from    to  target type
           0    14    31   Class java/lang/RuntimeException
           0    14    38   Class java/lang/Error
           0    14    45   any
          31    46    45   any

  private void setRollbackOnlyIfPossible();
    Code:
       0: aload_0
       1: getfield      #11                 // Field jtaTransaction:Ljavax/transaction/UserTransaction;
       4: ifnull        49
       7: aload_0
       8: getfield      #11                 // Field jtaTransaction:Ljavax/transaction/UserTransaction;
      11: invokeinterface #20,  1           // InterfaceMethod javax/transaction/UserTransaction.setRollbackOnly:()V
      16: goto          59
      19: astore_1
      20: getstatic     #22                 // Field logger:Lorg/apache/commons/logging/Log;
      23: ldc           #23                 // String JTA transaction handle does not support setRollbackOnly method - relying on JTA provider to mark the transaction as rollback-only based on the exception thrown from beforeCompletion
      25: aload_1
      26: invokeinterface #24,  3           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      31: goto          59
      34: astore_1
      35: getstatic     #22                 // Field logger:Lorg/apache/commons/logging/Log;
      38: ldc           #26                 // String Could not set JTA transaction rollback-only
      40: aload_1
      41: invokeinterface #27,  3           // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      46: goto          59
      49: getstatic     #22                 // Field logger:Lorg/apache/commons/logging/Log;
      52: ldc           #28                 // String No JTA transaction handle available and/or running on WebLogic - relying on JTA provider to mark the transaction as rollback-only based on the exception thrown from beforeCompletion
      54: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      59: return
    Exception table:
       from    to  target type
           7    16    19   Class java/lang/UnsupportedOperationException
           7    16    34   Class java/lang/Throwable

  public void afterCompletion(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field beforeCompletionCalled:Z
       4: ifne          16
       7: aload_0
       8: getfield      #5                  // Field springSynchronization:Lorg/springframework/transaction/support/TransactionSynchronization;
      11: invokeinterface #16,  1           // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.beforeCompletion:()V
      16: iload_1
      17: lookupswitch  { // 2
                     3: 44
                     4: 57
               default: 70
          }
      44: aload_0
      45: getfield      #5                  // Field springSynchronization:Lorg/springframework/transaction/support/TransactionSynchronization;
      48: iconst_0
      49: invokeinterface #31,  2           // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.afterCompletion:(I)V
      54: goto          80
      57: aload_0
      58: getfield      #5                  // Field springSynchronization:Lorg/springframework/transaction/support/TransactionSynchronization;
      61: iconst_1
      62: invokeinterface #31,  2           // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.afterCompletion:(I)V
      67: goto          80
      70: aload_0
      71: getfield      #5                  // Field springSynchronization:Lorg/springframework/transaction/support/TransactionSynchronization;
      74: iconst_2
      75: invokeinterface #31,  2           // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.afterCompletion:(I)V
      80: return

  static {};
    Code:
       0: ldc           #32                 // class org/springframework/transaction/jta/SpringJtaSynchronizationAdapter
       2: invokestatic  #33                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #22                 // Field logger:Lorg/apache/commons/logging/Log;
       8: return
}
