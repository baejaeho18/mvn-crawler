Compiled from "AbstractServerHttpResponse.java"
public abstract class org.springframework.http.server.reactive.AbstractServerHttpResponse implements org.springframework.http.server.reactive.ServerHttpResponse {
  private final org.apache.commons.logging.Log logger;

  private final org.springframework.core.io.buffer.DataBufferFactory dataBufferFactory;

  private java.lang.Integer statusCode;

  private final org.springframework.http.HttpHeaders headers;

  private final org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> cookies;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractServerHttpResponse$State> state;

  private final java.util.List<java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>> commitActions;

  public org.springframework.http.server.reactive.AbstractServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/atomic/AtomicReference
      19: dup
      20: getstatic     #6                  // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.NEW:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      23: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      26: putfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      29: aload_0
      30: new           #9                  // class java/util/ArrayList
      33: dup
      34: iconst_4
      35: invokespecial #10                 // Method java/util/ArrayList."<init>":(I)V
      38: putfield      #11                 // Field commitActions:Ljava/util/List;
      41: aload_1
      42: ldc           #12                 // String DataBufferFactory must not be null
      44: invokestatic  #13                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      47: aload_0
      48: aload_1
      49: putfield      #14                 // Field dataBufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      52: aload_0
      53: new           #15                 // class org/springframework/http/HttpHeaders
      56: dup
      57: invokespecial #16                 // Method org/springframework/http/HttpHeaders."<init>":()V
      60: putfield      #17                 // Field headers:Lorg/springframework/http/HttpHeaders;
      63: aload_0
      64: new           #18                 // class org/springframework/util/LinkedMultiValueMap
      67: dup
      68: invokespecial #19                 // Method org/springframework/util/LinkedMultiValueMap."<init>":()V
      71: putfield      #20                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      74: return

  public final org.springframework.core.io.buffer.DataBufferFactory bufferFactory();
    Code:
       0: aload_0
       1: getfield      #14                 // Field dataBufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       4: areturn

  public boolean setStatusCode(org.springframework.http.HttpStatus);
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #22                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: if_acmpne     67
      13: aload_0
      14: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      17: invokeinterface #23,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      22: ifeq          65
      25: aload_0
      26: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      29: new           #24                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #26                 // String HTTP response already committed. Status not set to
      38: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_1
      42: ifnull        52
      45: aload_1
      46: invokevirtual #28                 // Method org/springframework/http/HttpStatus.toString:()Ljava/lang/String;
      49: goto          54
      52: ldc           #29                 // String null
      54: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: invokeinterface #31,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      65: iconst_0
      66: ireturn
      67: aload_0
      68: aload_1
      69: ifnull        82
      72: aload_1
      73: invokevirtual #32                 // Method org/springframework/http/HttpStatus.value:()I
      76: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      79: goto          83
      82: aconst_null
      83: putfield      #34                 // Field statusCode:Ljava/lang/Integer;
      86: iconst_1
      87: ireturn

  public org.springframework.http.HttpStatus getStatusCode();
    Code:
       0: aload_0
       1: getfield      #34                 // Field statusCode:Ljava/lang/Integer;
       4: ifnull        20
       7: aload_0
       8: getfield      #34                 // Field statusCode:Ljava/lang/Integer;
      11: invokevirtual #35                 // Method java/lang/Integer.intValue:()I
      14: invokestatic  #36                 // Method org/springframework/http/HttpStatus.resolve:(I)Lorg/springframework/http/HttpStatus;
      17: goto          21
      20: aconst_null
      21: areturn

  public void setStatusCodeValue(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #34                 // Field statusCode:Ljava/lang/Integer;
       5: return

  public java.lang.Integer getStatusCodeValue();
    Code:
       0: aload_0
       1: getfield      #34                 // Field statusCode:Ljava/lang/Integer;
       4: areturn

  public org.springframework.http.HttpHeaders getHeaders();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #22                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: if_acmpne     23
      13: aload_0
      14: getfield      #17                 // Field headers:Lorg/springframework/http/HttpHeaders;
      17: invokestatic  #37                 // Method org/springframework/http/HttpHeaders.readOnlyHttpHeaders:(Lorg/springframework/http/HttpHeaders;)Lorg/springframework/http/HttpHeaders;
      20: goto          27
      23: aload_0
      24: getfield      #17                 // Field headers:Lorg/springframework/http/HttpHeaders;
      27: areturn

  public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #22                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: if_acmpne     23
      13: aload_0
      14: getfield      #20                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      17: invokestatic  #38                 // Method org/springframework/util/CollectionUtils.unmodifiableMultiValueMap:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/util/MultiValueMap;
      20: goto          27
      23: aload_0
      24: getfield      #20                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      27: areturn

  public void addCookie(org.springframework.http.ResponseCookie);
    Code:
       0: aload_1
       1: ldc           #39                 // String ResponseCookie must not be null
       3: invokestatic  #13                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      10: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      13: getstatic     #22                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      16: if_acmpne     51
      19: new           #40                 // class java/lang/IllegalStateException
      22: dup
      23: new           #24                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #41                 // String Can\'t add the cookie
      32: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_1
      36: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      39: ldc           #43                 // String because the HTTP response has already been committed
      41: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #44                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: aload_0
      52: invokevirtual #45                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
      55: aload_1
      56: invokevirtual #46                 // Method org/springframework/http/ResponseCookie.getName:()Ljava/lang/String;
      59: aload_1
      60: invokeinterface #47,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
      65: return

  public abstract <T> T getNativeResponse();

  public void beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>);
    Code:
       0: aload_0
       1: getfield      #11                 // Field commitActions:Ljava/util/List;
       4: aload_1
       5: invokeinterface #48,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public boolean isCommitted();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #6                  // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.NEW:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: if_acmpeq     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public final reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: new           #49                 // class org/springframework/http/server/reactive/ChannelSendOperator
       3: dup
       4: aload_1
       5: aload_0
       6: invokedynamic #50,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/util/function/Function;
      11: invokespecial #51                 // Method org/springframework/http/server/reactive/ChannelSendOperator."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;)V
      14: areturn

  public final reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);
    Code:
       0: new           #49                 // class org/springframework/http/server/reactive/ChannelSendOperator
       3: dup
       4: aload_1
       5: aload_0
       6: invokedynamic #52,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/util/function/Function;
      11: invokespecial #51                 // Method org/springframework/http/server/reactive/ChannelSendOperator."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;)V
      14: areturn

  public reactor.core.publisher.Mono<java.lang.Void> setComplete();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method isCommitted:()Z
       4: ifne          15
       7: aload_0
       8: aconst_null
       9: invokevirtual #54                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      12: goto          18
      15: invokestatic  #55                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      18: areturn

  protected reactor.core.publisher.Mono<java.lang.Void> doCommit();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #54                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
       5: areturn

  protected reactor.core.publisher.Mono<java.lang.Void> doCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #6                  // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.NEW:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
       7: getstatic     #56                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTING:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: invokevirtual #57                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      13: ifne          43
      16: aload_0
      17: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      20: invokeinterface #58,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      25: ifeq          39
      28: aload_0
      29: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      32: ldc           #59                 // String Skipping doCommit (response already committed).
      34: invokeinterface #60,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      39: invokestatic  #55                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      42: areturn
      43: aload_0
      44: getfield      #11                 // Field commitActions:Ljava/util/List;
      47: aload_0
      48: invokedynamic #61,  0             // InvokeDynamic #2:get:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/util/function/Supplier;
      53: invokeinterface #48,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      58: pop
      59: aload_1
      60: ifnull        74
      63: aload_0
      64: getfield      #11                 // Field commitActions:Ljava/util/List;
      67: aload_1
      68: invokeinterface #48,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      73: pop
      74: aload_0
      75: getfield      #11                 // Field commitActions:Ljava/util/List;
      78: invokeinterface #62,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      83: invokedynamic #63,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      88: invokeinterface #64,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      93: invokestatic  #65                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      96: invokeinterface #66,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     101: checkcast     #67                 // class java/util/List
     104: astore_2
     105: aload_2
     106: invokestatic  #68                 // Method reactor/core/publisher/Flux.concat:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
     109: invokevirtual #69                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
     112: areturn

  protected abstract reactor.core.publisher.Mono<java.lang.Void> writeWithInternal(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);

  protected abstract reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWithInternal(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);

  protected abstract void applyStatusCode();

  protected abstract void applyHeaders();

  protected abstract void applyCookies();

  private reactor.core.publisher.Mono lambda$doCommit$5();
    Code:
       0: aload_0
       1: invokedynamic #70,  0             // InvokeDynamic #4:run:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/lang/Runnable;
       6: invokestatic  #71                 // Method reactor/core/publisher/Mono.fromRunnable:(Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
       9: areturn

  private void lambda$null$4();
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method applyStatusCode:()V
       4: aload_0
       5: invokevirtual #73                 // Method applyHeaders:()V
       8: aload_0
       9: invokevirtual #74                 // Method applyCookies:()V
      12: aload_0
      13: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      16: getstatic     #22                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      19: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      22: return

  private org.reactivestreams.Publisher lambda$writeAndFlushWith$3(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #76,  0             // InvokeDynamic #5:get:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;Lorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
       8: invokevirtual #54                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  private reactor.core.publisher.Mono lambda$null$2(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #77                 // Method writeAndFlushWithInternal:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       5: areturn

  private org.reactivestreams.Publisher lambda$writeWith$1(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #78,  0             // InvokeDynamic #6:get:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;Lorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
       8: invokevirtual #54                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  private reactor.core.publisher.Mono lambda$null$0(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #79                 // Method writeWithInternal:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       5: areturn
}
