Compiled from "UndertowServerHttpResponse.java"
class org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyFlushProcessor extends org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<org.springframework.core.io.buffer.DataBuffer> {
  final org.springframework.http.server.reactive.UndertowServerHttpResponse this$0;

  private org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyFlushProcessor(org.springframework.http.server.reactive.UndertowServerHttpResponse);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       5: aload_0
       6: invokespecial #3                  // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor."<init>":()V
       9: return

  protected org.reactivestreams.Processor<? super org.springframework.core.io.buffer.DataBuffer, java.lang.Void> createWriteProcessor();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       4: invokestatic  #4                  // Method org/springframework/http/server/reactive/UndertowServerHttpResponse.access$100:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Lorg/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor;
       7: areturn

  protected void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       4: invokestatic  #5                  // Method org/springframework/http/server/reactive/UndertowServerHttpResponse.access$200:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Lorg/xnio/channels/StreamSinkChannel;
       7: astore_1
       8: aload_1
       9: ifnull        42
      12: aload_0
      13: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      16: invokeinterface #7,  1            // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      21: ifeq          35
      24: aload_0
      25: getfield      #6                  // Field logger:Lorg/apache/commons/logging/Log;
      28: ldc           #8                  // String flush
      30: invokeinterface #9,  2            // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      35: aload_1
      36: invokeinterface #10,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.flush:()Z
      41: pop
      42: return

  protected void flushingFailed(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method cancel:()V
       4: aload_0
       5: aload_1
       6: invokevirtual #12                 // Method onError:(Ljava/lang/Throwable;)V
       9: return

  protected boolean isWritePossible();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       4: invokestatic  #5                  // Method org/springframework/http/server/reactive/UndertowServerHttpResponse.access$200:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Lorg/xnio/channels/StreamSinkChannel;
       7: astore_1
       8: aload_1
       9: ifnull        20
      12: aload_1
      13: invokeinterface #13,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      18: iconst_1
      19: ireturn
      20: iconst_0
      21: ireturn

  protected boolean isFlushPending();
    Code:
       0: iconst_0
       1: ireturn

  org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyFlushProcessor(org.springframework.http.server.reactive.UndertowServerHttpResponse, org.springframework.http.server.reactive.UndertowServerHttpResponse$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)V
       5: return
}
