Compiled from "WriteResultPublisher.java"
class org.springframework.http.server.reactive.WriteResultPublisher implements org.reactivestreams.Publisher<java.lang.Void> {
  private static final org.apache.commons.logging.Log logger;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.WriteResultPublisher$State> state;

  private volatile org.reactivestreams.Subscriber<? super java.lang.Void> subscriber;

  private volatile boolean completedBeforeSubscribed;

  private volatile java.lang.Throwable errorBeforeSubscribed;

  org.springframework.http.server.reactive.WriteResultPublisher();
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #8                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: getstatic     #9                  // Field org/springframework/http/server/reactive/WriteResultPublisher$State.UNSUBSCRIBED:Lorg/springframework/http/server/reactive/WriteResultPublisher$State;
      12: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      15: putfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      18: return

  public final void subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>);
    Code:
       0: getstatic     #6                  // Field logger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #11,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          45
      11: getstatic     #6                  // Field logger:Lorg/apache/commons/logging/Log;
      14: new           #12                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      25: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      28: ldc           #15                 // String  subscribe:
      30: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_1
      34: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      37: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: invokeinterface #18,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      45: aload_0
      46: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      49: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      52: checkcast     #20                 // class org/springframework/http/server/reactive/WriteResultPublisher$State
      55: aload_0
      56: aload_1
      57: invokevirtual #21                 // Method org/springframework/http/server/reactive/WriteResultPublisher$State.subscribe:(Lorg/springframework/http/server/reactive/WriteResultPublisher;Lorg/reactivestreams/Subscriber;)V
      60: return

  public void publishComplete();
    Code:
       0: getstatic     #6                  // Field logger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #11,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          41
      11: getstatic     #6                  // Field logger:Lorg/apache/commons/logging/Log;
      14: new           #12                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      25: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      28: ldc           #22                 // String  publishComplete
      30: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokeinterface #18,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      41: aload_0
      42: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      45: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      48: checkcast     #20                 // class org/springframework/http/server/reactive/WriteResultPublisher$State
      51: aload_0
      52: invokevirtual #23                 // Method org/springframework/http/server/reactive/WriteResultPublisher$State.publishComplete:(Lorg/springframework/http/server/reactive/WriteResultPublisher;)V
      55: return

  public void publishError(java.lang.Throwable);
    Code:
       0: getstatic     #6                  // Field logger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #11,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          45
      11: getstatic     #6                  // Field logger:Lorg/apache/commons/logging/Log;
      14: new           #12                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      25: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      28: ldc           #24                 // String  publishError:
      30: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_1
      34: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      37: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: invokeinterface #18,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      45: aload_0
      46: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      49: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      52: checkcast     #20                 // class org/springframework/http/server/reactive/WriteResultPublisher$State
      55: aload_0
      56: aload_1
      57: invokevirtual #25                 // Method org/springframework/http/server/reactive/WriteResultPublisher$State.publishError:(Lorg/springframework/http/server/reactive/WriteResultPublisher;Ljava/lang/Throwable;)V
      60: return

  private boolean changeState(org.springframework.http.server.reactive.WriteResultPublisher$State, org.springframework.http.server.reactive.WriteResultPublisher$State);
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: aload_2
       6: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ireturn

  static org.apache.commons.logging.Log access$000();
    Code:
       0: getstatic     #6                  // Field logger:Lorg/apache/commons/logging/Log;
       3: areturn

  static java.util.concurrent.atomic.AtomicReference access$100(org.springframework.http.server.reactive.WriteResultPublisher);
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn

  static boolean access$300(org.springframework.http.server.reactive.WriteResultPublisher, org.springframework.http.server.reactive.WriteResultPublisher$State, org.springframework.http.server.reactive.WriteResultPublisher$State);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method changeState:(Lorg/springframework/http/server/reactive/WriteResultPublisher$State;Lorg/springframework/http/server/reactive/WriteResultPublisher$State;)Z
       6: ireturn

  static org.reactivestreams.Subscriber access$402(org.springframework.http.server.reactive.WriteResultPublisher, org.reactivestreams.Subscriber);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #3                  // Field subscriber:Lorg/reactivestreams/Subscriber;
       6: areturn

  static boolean access$500(org.springframework.http.server.reactive.WriteResultPublisher);
    Code:
       0: aload_0
       1: getfield      #2                  // Field completedBeforeSubscribed:Z
       4: ireturn

  static java.lang.Throwable access$600(org.springframework.http.server.reactive.WriteResultPublisher);
    Code:
       0: aload_0
       1: getfield      #1                  // Field errorBeforeSubscribed:Ljava/lang/Throwable;
       4: areturn

  static boolean access$502(org.springframework.http.server.reactive.WriteResultPublisher, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #2                  // Field completedBeforeSubscribed:Z
       6: ireturn

  static java.lang.Throwable access$602(org.springframework.http.server.reactive.WriteResultPublisher, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field errorBeforeSubscribed:Ljava/lang/Throwable;
       6: areturn

  static org.reactivestreams.Subscriber access$400(org.springframework.http.server.reactive.WriteResultPublisher);
    Code:
       0: aload_0
       1: getfield      #3                  // Field subscriber:Lorg/reactivestreams/Subscriber;
       4: areturn

  static {};
    Code:
       0: ldc           #27                 // class org/springframework/http/server/reactive/WriteResultPublisher
       2: invokestatic  #28                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #6                  // Field logger:Lorg/apache/commons/logging/Log;
       8: return
}
