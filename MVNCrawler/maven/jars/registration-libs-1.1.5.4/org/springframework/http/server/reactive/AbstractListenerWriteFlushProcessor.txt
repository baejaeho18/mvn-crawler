Compiled from "AbstractListenerWriteFlushProcessor.java"
public abstract class org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> implements org.reactivestreams.Processor<org.reactivestreams.Publisher<? extends T>, java.lang.Void> {
  protected final org.apache.commons.logging.Log logger;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State> state;

  private org.reactivestreams.Subscription subscription;

  private volatile boolean subscriberCompleted;

  private final org.springframework.http.server.reactive.WriteResultPublisher resultPublisher;

  public org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor();
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #9                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #11                 // class java/util/concurrent/atomic/AtomicReference
      19: dup
      20: getstatic     #12                 // Field org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.UNSUBSCRIBED:Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State;
      23: invokespecial #13                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      26: putfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      29: aload_0
      30: new           #14                 // class org/springframework/http/server/reactive/WriteResultPublisher
      33: dup
      34: invokespecial #15                 // Method org/springframework/http/server/reactive/WriteResultPublisher."<init>":()V
      37: putfield      #4                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
      40: return

  public final void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      10: aload_0
      11: aload_1
      12: invokevirtual #18                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onSubscribe:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;Lorg/reactivestreams/Subscription;)V
      15: return

  public final void onNext(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #19                 // String Received onNext publisher
       6: invokeinterface #20,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      18: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      21: aload_0
      22: aload_1
      23: invokevirtual #21                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onNext:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;Lorg/reactivestreams/Publisher;)V
      26: return

  public final void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
       4: invokeinterface #22,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       9: ifeq          40
      12: aload_0
      13: getfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
      16: new           #23                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #25                 // String Received onError:
      25: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_1
      29: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      32: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokeinterface #20,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      40: aload_0
      41: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      44: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      47: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      50: aload_0
      51: aload_1
      52: invokevirtual #29                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onError:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;Ljava/lang/Throwable;)V
      55: return

  public final void onComplete();
    Code:
       0: aload_0
       1: getfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #30                 // String Received onComplete
       6: invokeinterface #20,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      18: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      21: aload_0
      22: invokevirtual #31                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onComplete:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;)V
      25: return

  protected final void onFlushPossible();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      10: aload_0
      11: invokevirtual #32                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onFlushPossible:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;)V
      14: return

  protected void cancel();
    Code:
       0: aload_0
       1: getfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #33                 // String Received request to cancel
       6: invokeinterface #20,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
      15: ifnull        27
      18: aload_0
      19: getfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
      22: invokeinterface #34,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      27: return

  public final void subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
       4: aload_1
       5: invokevirtual #35                 // Method org/springframework/http/server/reactive/WriteResultPublisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
       8: return

  protected abstract org.reactivestreams.Processor<? super T, java.lang.Void> createWriteProcessor();

  protected abstract boolean isWritePossible();

  protected abstract void flush() throws java.io.IOException;

  protected abstract boolean isFlushPending();

  protected void flushingFailed(java.lang.Throwable);
    Code:
       0: return

  private boolean changeState(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State, org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: aload_2
       6: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: istore_3
      10: iload_3
      11: ifeq          58
      14: aload_0
      15: getfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
      18: invokeinterface #22,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      23: ifeq          58
      26: aload_0
      27: getfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
      30: new           #23                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      37: aload_1
      38: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      41: ldc           #37                 // String  ->
      43: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_2
      47: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      50: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: invokeinterface #20,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      58: iload_3
      59: ireturn

  private void flushIfPossible();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method isWritePossible:()Z
       4: istore_1
       5: aload_0
       6: getfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
       9: invokeinterface #22,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      14: ifeq          50
      17: aload_0
      18: getfield      #10                 // Field logger:Lorg/apache/commons/logging/Log;
      21: new           #23                 // class java/lang/StringBuilder
      24: dup
      25: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      28: ldc           #39                 // String isWritePossible[
      30: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: iload_1
      34: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      37: ldc           #41                 // String ]
      39: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokeinterface #20,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      50: iload_1
      51: ifeq          58
      54: aload_0
      55: invokevirtual #42                 // Method onFlushPossible:()V
      58: return

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #43                 // class org/reactivestreams/Publisher
       5: invokevirtual #44                 // Method onNext:(Lorg/reactivestreams/Publisher;)V
       8: return

  static boolean access$100(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor, org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State, org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #6                  // Method changeState:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State;Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State;)Z
       6: ireturn

  static org.reactivestreams.Subscription access$202(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor, org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
       6: areturn

  static org.springframework.http.server.reactive.WriteResultPublisher access$300(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: getfield      #4                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
       4: areturn

  static java.util.concurrent.atomic.AtomicReference access$400(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn

  static boolean access$500(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field subscriberCompleted:Z
       4: ireturn

  static void access$600(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method flushIfPossible:()V
       4: return

  static org.reactivestreams.Subscription access$200(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: getfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: areturn

  static boolean access$502(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #2                  // Field subscriberCompleted:Z
       6: ireturn
}
