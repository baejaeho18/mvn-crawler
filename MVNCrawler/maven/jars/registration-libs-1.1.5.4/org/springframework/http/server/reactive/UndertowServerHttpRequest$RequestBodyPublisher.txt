Compiled from "UndertowServerHttpRequest.java"
class org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher extends org.springframework.http.server.reactive.AbstractListenerReadPublisher<org.springframework.core.io.buffer.DataBuffer> {
  private final org.xnio.channels.StreamSourceChannel channel;

  private final org.springframework.core.io.buffer.DataBufferFactory bufferFactory;

  private final io.undertow.connector.ByteBufferPool byteBufferPool;

  public org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher(io.undertow.server.HttpServerExchange, org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/springframework/http/server/reactive/AbstractListenerReadPublisher."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #3                  // Method io/undertow/server/HttpServerExchange.getRequestChannel:()Lorg/xnio/channels/StreamSourceChannel;
       9: putfield      #4                  // Field channel:Lorg/xnio/channels/StreamSourceChannel;
      12: aload_0
      13: aload_2
      14: putfield      #5                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      17: aload_0
      18: aload_1
      19: invokevirtual #6                  // Method io/undertow/server/HttpServerExchange.getConnection:()Lio/undertow/server/ServerConnection;
      22: invokevirtual #7                  // Method io/undertow/server/ServerConnection.getByteBufferPool:()Lio/undertow/connector/ByteBufferPool;
      25: putfield      #8                  // Field byteBufferPool:Lio/undertow/connector/ByteBufferPool;
      28: return

  private void registerListeners(io.undertow.server.HttpServerExchange);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #9,  0              // InvokeDynamic #0:exchangeEvent:(Lorg/springframework/http/server/reactive/UndertowServerHttpRequest$RequestBodyPublisher;)Lio/undertow/server/ExchangeCompletionListener;
       7: invokevirtual #10                 // Method io/undertow/server/HttpServerExchange.addExchangeCompleteListener:(Lio/undertow/server/ExchangeCompletionListener;)Lio/undertow/server/HttpServerExchange;
      10: pop
      11: aload_0
      12: getfield      #4                  // Field channel:Lorg/xnio/channels/StreamSourceChannel;
      15: invokeinterface #11,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.getReadSetter:()Lorg/xnio/ChannelListener$Setter;
      20: aload_0
      21: invokedynamic #12,  0             // InvokeDynamic #1:handleEvent:(Lorg/springframework/http/server/reactive/UndertowServerHttpRequest$RequestBodyPublisher;)Lorg/xnio/ChannelListener;
      26: invokeinterface #13,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      31: aload_0
      32: getfield      #4                  // Field channel:Lorg/xnio/channels/StreamSourceChannel;
      35: invokeinterface #14,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.getCloseSetter:()Lorg/xnio/ChannelListener$Setter;
      40: aload_0
      41: invokedynamic #15,  0             // InvokeDynamic #2:handleEvent:(Lorg/springframework/http/server/reactive/UndertowServerHttpRequest$RequestBodyPublisher;)Lorg/xnio/ChannelListener;
      46: invokeinterface #13,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      51: aload_0
      52: getfield      #4                  // Field channel:Lorg/xnio/channels/StreamSourceChannel;
      55: invokeinterface #16,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.resumeReads:()V
      60: return

  protected void checkOnDataAvailable();
    Code:
       0: aload_0
       1: getfield      #4                  // Field channel:Lorg/xnio/channels/StreamSourceChannel;
       4: invokeinterface #16,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.resumeReads:()V
       9: aload_0
      10: invokevirtual #17                 // Method onDataAvailable:()V
      13: return

  protected void readingPaused();
    Code:
       0: aload_0
       1: getfield      #4                  // Field channel:Lorg/xnio/channels/StreamSourceChannel;
       4: invokeinterface #18,  1           // InterfaceMethod org/xnio/channels/StreamSourceChannel.suspendReads:()V
       9: return

  protected org.springframework.core.io.buffer.DataBuffer read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field byteBufferPool:Lio/undertow/connector/ByteBufferPool;
       4: invokeinterface #19,  1           // InterfaceMethod io/undertow/connector/ByteBufferPool.allocate:()Lio/undertow/connector/PooledByteBuffer;
       9: astore_1
      10: iconst_1
      11: istore_2
      12: aload_1
      13: invokeinterface #20,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.getBuffer:()Ljava/nio/ByteBuffer;
      18: astore_3
      19: aload_0
      20: getfield      #4                  // Field channel:Lorg/xnio/channels/StreamSourceChannel;
      23: aload_3
      24: invokeinterface #21,  2           // InterfaceMethod org/xnio/channels/StreamSourceChannel.read:(Ljava/nio/ByteBuffer;)I
      29: istore        4
      31: aload_0
      32: getfield      #22                 // Field logger:Lorg/apache/commons/logging/Log;
      35: invokeinterface #23,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      40: ifeq          88
      43: aload_0
      44: getfield      #22                 // Field logger:Lorg/apache/commons/logging/Log;
      47: new           #24                 // class java/lang/StringBuilder
      50: dup
      51: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      54: ldc           #26                 // String Channel read returned
      56: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: iload         4
      61: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      64: iload         4
      66: iconst_m1
      67: if_icmpeq     75
      70: ldc           #29                 // String  bytes
      72: goto          77
      75: ldc           #30                 // String
      77: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: invokeinterface #32,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      88: iload         4
      90: ifle          146
      93: aload_3
      94: invokevirtual #33                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      97: pop
      98: aload_0
      99: getfield      #5                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
     102: aload_3
     103: invokeinterface #34,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.wrap:(Ljava/nio/ByteBuffer;)Lorg/springframework/core/io/buffer/DataBuffer;
     108: astore        5
     110: iconst_0
     111: istore_2
     112: new           #35                 // class org/springframework/http/server/reactive/UndertowServerHttpRequest$UndertowDataBuffer
     115: dup
     116: aload         5
     118: aload_1
     119: invokespecial #36                 // Method org/springframework/http/server/reactive/UndertowServerHttpRequest$UndertowDataBuffer."<init>":(Lorg/springframework/core/io/buffer/DataBuffer;Lio/undertow/connector/PooledByteBuffer;)V
     122: astore        6
     124: iload_2
     125: ifeq          143
     128: aload_1
     129: invokeinterface #37,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.isOpen:()Z
     134: ifeq          143
     137: aload_1
     138: invokeinterface #38,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     143: aload         6
     145: areturn
     146: iload         4
     148: iconst_m1
     149: if_icmpne     156
     152: aload_0
     153: invokevirtual #39                 // Method onAllDataRead:()V
     156: aconst_null
     157: astore        5
     159: iload_2
     160: ifeq          178
     163: aload_1
     164: invokeinterface #37,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.isOpen:()Z
     169: ifeq          178
     172: aload_1
     173: invokeinterface #38,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     178: aload         5
     180: areturn
     181: astore        7
     183: iload_2
     184: ifeq          202
     187: aload_1
     188: invokeinterface #37,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.isOpen:()Z
     193: ifeq          202
     196: aload_1
     197: invokeinterface #38,  1           // InterfaceMethod io/undertow/connector/PooledByteBuffer.close:()V
     202: aload         7
     204: athrow
    Exception table:
       from    to  target type
          12   124   181   any
         146   159   181   any
         181   183   181   any

  protected java.lang.Object read() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method read:()Lorg/springframework/core/io/buffer/DataBuffer;
       4: areturn

  private void lambda$registerListeners$2(org.xnio.channels.StreamSourceChannel);
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method onAllDataRead:()V
       4: return

  private void lambda$registerListeners$1(org.xnio.channels.StreamSourceChannel);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method onDataAvailable:()V
       4: return

  private void lambda$registerListeners$0(io.undertow.server.HttpServerExchange, io.undertow.server.ExchangeCompletionListener$NextListener);
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method onAllDataRead:()V
       4: aload_2
       5: invokeinterface #41,  1           // InterfaceMethod io/undertow/server/ExchangeCompletionListener$NextListener.proceed:()V
      10: return

  static void access$000(org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher, io.undertow.server.HttpServerExchange);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method registerListeners:(Lio/undertow/server/HttpServerExchange;)V
       5: return
}
