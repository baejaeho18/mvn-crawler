Compiled from "AbstractJsonHttpMessageConverter.java"
public abstract class org.springframework.http.converter.json.AbstractJsonHttpMessageConverter extends org.springframework.http.converter.AbstractGenericHttpMessageConverter<java.lang.Object> {
  public static final java.nio.charset.Charset DEFAULT_CHARSET;

  private java.lang.String jsonPrefix;

  public org.springframework.http.converter.json.AbstractJsonHttpMessageConverter();
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #1                  // class org/springframework/http/MediaType
       5: dup
       6: iconst_0
       7: getstatic     #2                  // Field org/springframework/http/MediaType.APPLICATION_JSON:Lorg/springframework/http/MediaType;
      10: aastore
      11: dup
      12: iconst_1
      13: new           #1                  // class org/springframework/http/MediaType
      16: dup
      17: ldc           #3                  // String application
      19: ldc           #4                  // String *+json
      21: invokespecial #5                  // Method org/springframework/http/MediaType."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      24: aastore
      25: invokespecial #6                  // Method org/springframework/http/converter/AbstractGenericHttpMessageConverter."<init>":([Lorg/springframework/http/MediaType;)V
      28: aload_0
      29: getstatic     #7                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
      32: invokevirtual #8                  // Method setDefaultCharset:(Ljava/nio/charset/Charset;)V
      35: return

  public void setJsonPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field jsonPrefix:Ljava/lang/String;
       5: return

  public void setPrefixJson(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifeq          10
       5: ldc           #10                 // String )]}\',
       7: goto          11
      10: aconst_null
      11: putfield      #9                  // Field jsonPrefix:Ljava/lang/String;
      14: return

  public final java.lang.Object read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #11                 // Method org/springframework/core/GenericTypeResolver.resolveType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;
       6: aload_3
       7: invokespecial #12                 // Method readResolved:(Ljava/lang/reflect/Type;Lorg/springframework/http/HttpInputMessage;)Ljava/lang/Object;
      10: areturn

  protected final java.lang.Object readInternal(java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #12                 // Method readResolved:(Ljava/lang/reflect/Type;Lorg/springframework/http/HttpInputMessage;)Ljava/lang/Object;
       6: areturn

  private java.lang.Object readResolved(java.lang.reflect.Type, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_2
       1: invokestatic  #13                 // Method getReader:(Lorg/springframework/http/HttpInputMessage;)Ljava/io/Reader;
       4: astore_3
       5: aload_0
       6: aload_1
       7: aload_3
       8: invokevirtual #14                 // Method readInternal:(Ljava/lang/reflect/Type;Ljava/io/Reader;)Ljava/lang/Object;
      11: areturn
      12: astore        4
      14: new           #16                 // class org/springframework/http/converter/HttpMessageNotReadableException
      17: dup
      18: new           #17                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #19                 // String Could not read JSON:
      27: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload         4
      32: invokevirtual #21                 // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      35: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: aload         4
      43: invokespecial #23                 // Method org/springframework/http/converter/HttpMessageNotReadableException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      46: athrow
    Exception table:
       from    to  target type
           5    11    12   Class java/lang/Exception

  protected final void writeInternal(java.lang.Object, java.lang.reflect.Type, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aload_3
       1: invokestatic  #24                 // Method getWriter:(Lorg/springframework/http/HttpOutputMessage;)Ljava/io/Writer;
       4: astore        4
       6: aload_0
       7: getfield      #9                  // Field jsonPrefix:Ljava/lang/String;
      10: ifnull        23
      13: aload         4
      15: aload_0
      16: getfield      #9                  // Field jsonPrefix:Ljava/lang/String;
      19: invokevirtual #25                 // Method java/io/Writer.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
      22: pop
      23: aload_0
      24: aload_1
      25: aload_2
      26: aload         4
      28: invokevirtual #26                 // Method writeInternal:(Ljava/lang/Object;Ljava/lang/reflect/Type;Ljava/io/Writer;)V
      31: goto          69
      34: astore        5
      36: new           #27                 // class org/springframework/http/converter/HttpMessageNotWritableException
      39: dup
      40: new           #17                 // class java/lang/StringBuilder
      43: dup
      44: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      47: ldc           #28                 // String Could not write JSON:
      49: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload         5
      54: invokevirtual #21                 // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      57: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: aload         5
      65: invokespecial #29                 // Method org/springframework/http/converter/HttpMessageNotWritableException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      68: athrow
      69: aload         4
      71: invokevirtual #30                 // Method java/io/Writer.flush:()V
      74: return
    Exception table:
       from    to  target type
          23    31    34   Class java/lang/Exception

  protected abstract java.lang.Object readInternal(java.lang.reflect.Type, java.io.Reader) throws java.lang.Exception;

  protected abstract void writeInternal(java.lang.Object, java.lang.reflect.Type, java.io.Writer) throws java.lang.Exception;

  private static java.io.Reader getReader(org.springframework.http.HttpInputMessage) throws java.io.IOException;
    Code:
       0: new           #31                 // class java/io/InputStreamReader
       3: dup
       4: aload_0
       5: invokeinterface #32,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getBody:()Ljava/io/InputStream;
      10: aload_0
      11: invokeinterface #33,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      16: invokestatic  #34                 // Method getCharset:(Lorg/springframework/http/HttpHeaders;)Ljava/nio/charset/Charset;
      19: invokespecial #35                 // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      22: areturn

  private static java.io.Writer getWriter(org.springframework.http.HttpOutputMessage) throws java.io.IOException;
    Code:
       0: new           #36                 // class java/io/OutputStreamWriter
       3: dup
       4: aload_0
       5: invokeinterface #37,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getBody:()Ljava/io/OutputStream;
      10: aload_0
      11: invokeinterface #38,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      16: invokestatic  #34                 // Method getCharset:(Lorg/springframework/http/HttpHeaders;)Ljava/nio/charset/Charset;
      19: invokespecial #39                 // Method java/io/OutputStreamWriter."<init>":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V
      22: areturn

  private static java.nio.charset.Charset getCharset(org.springframework.http.HttpHeaders);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       4: ifnull        17
       7: aload_0
       8: invokevirtual #40                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      11: invokevirtual #41                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      14: goto          18
      17: aconst_null
      18: astore_1
      19: aload_1
      20: ifnull        27
      23: aload_1
      24: goto          30
      27: getstatic     #7                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
      30: areturn

  static {};
    Code:
       0: getstatic     #42                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       3: putstatic     #7                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       6: return
}
