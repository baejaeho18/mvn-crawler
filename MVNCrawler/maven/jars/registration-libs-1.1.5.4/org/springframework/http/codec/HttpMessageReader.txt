Compiled from "HttpMessageReader.java"
public interface org.springframework.http.codec.HttpMessageReader<T> {
  public abstract java.util.List<org.springframework.http.MediaType> getReadableMediaTypes();

  public abstract boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType);

  public abstract reactor.core.publisher.Flux<T> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);

  public abstract reactor.core.publisher.Mono<T> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);

  public default reactor.core.publisher.Flux<T> read(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: aload         5
       5: invokeinterface #1,  4            // InterfaceMethod read:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      10: areturn

  public default reactor.core.publisher.Mono<T> readMono(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: aload         5
       5: invokeinterface #2,  4            // InterfaceMethod readMono:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      10: areturn
}
