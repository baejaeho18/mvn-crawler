Compiled from "EncoderHttpMessageWriter.java"
public class org.springframework.http.codec.EncoderHttpMessageWriter<T> implements org.springframework.http.codec.HttpMessageWriter<T> {
  private final org.springframework.core.codec.Encoder<T> encoder;

  private final java.util.List<org.springframework.http.MediaType> mediaTypes;

  private final org.springframework.http.MediaType defaultMediaType;

  public org.springframework.http.codec.EncoderHttpMessageWriter(org.springframework.core.codec.Encoder<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String Encoder is required
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      15: aload_0
      16: aload_1
      17: invokeinterface #5,  1            // InterfaceMethod org/springframework/core/codec/Encoder.getEncodableMimeTypes:()Ljava/util/List;
      22: invokestatic  #6                  // Method org/springframework/http/MediaType.asMediaTypes:(Ljava/util/List;)Ljava/util/List;
      25: putfield      #7                  // Field mediaTypes:Ljava/util/List;
      28: aload_0
      29: aload_0
      30: getfield      #7                  // Field mediaTypes:Ljava/util/List;
      33: invokestatic  #8                  // Method initDefaultMediaType:(Ljava/util/List;)Lorg/springframework/http/MediaType;
      36: putfield      #9                  // Field defaultMediaType:Lorg/springframework/http/MediaType;
      39: return

  private static org.springframework.http.MediaType initDefaultMediaType(java.util.List<org.springframework.http.MediaType>);
    Code:
       0: aload_0
       1: invokeinterface #10,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
       6: invokedynamic #11,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      11: invokeinterface #12,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      16: invokeinterface #13,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      21: aconst_null
      22: invokevirtual #14                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      25: checkcast     #15                 // class org/springframework/http/MediaType
      28: areturn

  public org.springframework.core.codec.Encoder<T> getEncoder();
    Code:
       0: aload_0
       1: getfield      #4                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes();
    Code:
       0: aload_0
       1: getfield      #7                  // Field mediaTypes:Ljava/util/List;
       4: areturn

  public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: getfield      #4                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       4: aload_1
       5: aload_2
       6: invokeinterface #16,  3           // InterfaceMethod org/springframework/core/codec/Encoder.canEncode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      11: ireturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload         4
       3: aload_3
       4: invokespecial #17                 // Method updateContentType:(Lorg/springframework/http/ReactiveHttpOutputMessage;Lorg/springframework/http/MediaType;)Lorg/springframework/http/MediaType;
       7: astore        6
       9: aload         4
      11: invokeinterface #18,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      16: astore        7
      18: aload         7
      20: invokevirtual #19                 // Method org/springframework/http/HttpHeaders.getContentLength:()J
      23: lconst_0
      24: lcmp
      25: ifge          63
      28: aload         7
      30: ldc           #21                 // String Transfer-Encoding
      32: invokevirtual #22                 // Method org/springframework/http/HttpHeaders.containsKey:(Ljava/lang/Object;)Z
      35: ifne          63
      38: aload_1
      39: instanceof    #23                 // class reactor/core/publisher/Mono
      42: ifeq          63
      45: aload_1
      46: checkcast     #23                 // class reactor/core/publisher/Mono
      49: aload_0
      50: aload         6
      52: aload         7
      54: invokedynamic #24,  0             // InvokeDynamic #1:accept:(Lorg/springframework/http/codec/EncoderHttpMessageWriter;Lorg/springframework/http/MediaType;Lorg/springframework/http/HttpHeaders;)Ljava/util/function/Consumer;
      59: invokevirtual #25                 // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      62: astore_1
      63: aload_0
      64: getfield      #4                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      67: aload_1
      68: aload         4
      70: invokeinterface #26,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.bufferFactory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      75: aload_2
      76: aload         6
      78: aload         5
      80: invokeinterface #27,  6           // InterfaceMethod org/springframework/core/codec/Encoder.encode:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      85: astore        8
      87: aload_0
      88: aload         6
      90: invokespecial #28                 // Method isStreamingMediaType:(Lorg/springframework/http/MediaType;)Z
      93: ifeq          116
      96: aload         4
      98: aload         8
     100: invokedynamic #29,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
     105: invokevirtual #30                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
     108: invokeinterface #31,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeAndFlushWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
     113: goto          125
     116: aload         4
     118: aload         8
     120: invokeinterface #32,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
     125: areturn

  private org.springframework.http.MediaType updateContentType(org.springframework.http.ReactiveHttpOutputMessage, org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: invokeinterface #18,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #33                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore_3
      10: aload_3
      11: ifnull        16
      14: aload_3
      15: areturn
      16: aload_0
      17: getfield      #9                  // Field defaultMediaType:Lorg/springframework/http/MediaType;
      20: astore        4
      22: aload_2
      23: aload         4
      25: invokestatic  #34                 // Method useFallback:(Lorg/springframework/http/MediaType;Lorg/springframework/http/MediaType;)Z
      28: ifeq          36
      31: aload         4
      33: goto          37
      36: aload_2
      37: astore_3
      38: aload_3
      39: ifnull        59
      42: aload_3
      43: aload         4
      45: invokestatic  #35                 // Method addDefaultCharset:(Lorg/springframework/http/MediaType;Lorg/springframework/http/MediaType;)Lorg/springframework/http/MediaType;
      48: astore_3
      49: aload_1
      50: invokeinterface #18,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      55: aload_3
      56: invokevirtual #36                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      59: aload_3
      60: areturn

  private static boolean useFallback(org.springframework.http.MediaType, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: ifnull        25
       4: aload_0
       5: invokevirtual #37                 // Method org/springframework/http/MediaType.isConcrete:()Z
       8: ifeq          25
      11: aload_0
      12: getstatic     #38                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      15: invokevirtual #39                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      18: ifeq          29
      21: aload_1
      22: ifnull        29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  private static org.springframework.http.MediaType addDefaultCharset(org.springframework.http.MediaType, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
       4: ifnonnull     31
       7: aload_1
       8: ifnull        31
      11: aload_1
      12: invokevirtual #40                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      15: ifnull        31
      18: new           #15                 // class org/springframework/http/MediaType
      21: dup
      22: aload_0
      23: aload_1
      24: invokevirtual #40                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      27: invokespecial #41                 // Method org/springframework/http/MediaType."<init>":(Lorg/springframework/http/MediaType;Ljava/nio/charset/Charset;)V
      30: areturn
      31: aload_0
      32: areturn

  private boolean isStreamingMediaType(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        54
       4: aload_0
       5: getfield      #4                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       8: instanceof    #42                 // class org/springframework/http/codec/HttpMessageEncoder
      11: ifeq          54
      14: aload_0
      15: getfield      #4                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      18: checkcast     #42                 // class org/springframework/http/codec/HttpMessageEncoder
      21: invokeinterface #43,  1           // InterfaceMethod org/springframework/http/codec/HttpMessageEncoder.getStreamingMediaTypes:()Ljava/util/List;
      26: invokeinterface #10,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      31: aload_1
      32: dup
      33: invokevirtual #44                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      36: pop
      37: invokedynamic #45,  0             // InvokeDynamic #3:test:(Lorg/springframework/http/MediaType;)Ljava/util/function/Predicate;
      42: invokeinterface #46,  2           // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      47: ifeq          54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: ireturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: new           #47                 // class java/util/HashMap
       3: dup
       4: invokespecial #48                 // Method java/util/HashMap."<init>":()V
       7: astore        8
       9: aload         8
      11: aload_0
      12: aload_2
      13: aload_3
      14: aload         4
      16: aload         5
      18: aload         6
      20: invokevirtual #49                 // Method getWriteHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      23: invokeinterface #50,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      28: aload         8
      30: aload         7
      32: invokeinterface #50,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      37: aload_0
      38: aload_1
      39: aload_3
      40: aload         4
      42: aload         6
      44: aload         8
      46: invokevirtual #51                 // Method write:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      49: areturn

  protected java.util.Map<java.lang.String, java.lang.Object> getWriteHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #4                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       4: instanceof    #42                 // class org/springframework/http/codec/HttpMessageEncoder
       7: ifeq          34
      10: aload_0
      11: getfield      #4                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      14: checkcast     #42                 // class org/springframework/http/codec/HttpMessageEncoder
      17: astore        6
      19: aload         6
      21: aload_1
      22: aload_2
      23: aload_3
      24: aload         4
      26: aload         5
      28: invokeinterface #52,  6           // InterfaceMethod org/springframework/http/codec/HttpMessageEncoder.getEncodeHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      33: areturn
      34: invokestatic  #53                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      37: areturn

  private void lambda$write$0(org.springframework.http.MediaType, org.springframework.http.HttpHeaders, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       4: aload_3
       5: aload_1
       6: invokeinterface #54,  3           // InterfaceMethod org/springframework/core/codec/Encoder.getContentLength:(Ljava/lang/Object;Lorg/springframework/util/MimeType;)Ljava/lang/Long;
      11: astore        4
      13: aload         4
      15: ifnull        27
      18: aload_2
      19: aload         4
      21: invokevirtual #55                 // Method java/lang/Long.longValue:()J
      24: invokevirtual #56                 // Method org/springframework/http/HttpHeaders.setContentLength:(J)V
      27: return
}
