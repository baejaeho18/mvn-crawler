Compiled from "FormHttpMessageReader.java"
public class org.springframework.http.codec.FormHttpMessageReader implements org.springframework.http.codec.HttpMessageReader<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> {
  public static final java.nio.charset.Charset DEFAULT_CHARSET;

  private static final org.springframework.core.ResolvableType MULTIVALUE_TYPE;

  private java.nio.charset.Charset defaultCharset;

  public org.springframework.http.codec.FormHttpMessageReader();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       8: putfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
      11: return

  public void setDefaultCharset(java.nio.charset.Charset);
    Code:
       0: aload_1
       1: ldc           #4                  // String Charset must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
      11: return

  public java.nio.charset.Charset getDefaultCharset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
       4: areturn

  public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: getstatic     #6                  // Field MULTIVALUE_TYPE:Lorg/springframework/core/ResolvableType;
       3: aload_1
       4: invokevirtual #7                  // Method org/springframework/core/ResolvableType.isAssignableFrom:(Lorg/springframework/core/ResolvableType;)Z
       7: ifne          31
      10: aload_1
      11: invokevirtual #8                  // Method org/springframework/core/ResolvableType.hasUnresolvableGenerics:()Z
      14: ifeq          49
      17: ldc           #9                  // class org/springframework/util/MultiValueMap
      19: aload_1
      20: ldc           #10                 // class java/lang/Object
      22: invokevirtual #11                 // Method org/springframework/core/ResolvableType.resolve:(Ljava/lang/Class;)Ljava/lang/Class;
      25: invokevirtual #12                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      28: ifeq          49
      31: aload_2
      32: ifnull        45
      35: getstatic     #13                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
      38: aload_2
      39: invokevirtual #14                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ireturn

  public reactor.core.publisher.Flux<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #15                 // Method readMono:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
       7: invokestatic  #16                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      10: areturn

  public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_2
       1: invokeinterface #17,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #18                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore        4
      11: aload_0
      12: aload         4
      14: invokespecial #19                 // Method getMediaTypeCharset:(Lorg/springframework/http/MediaType;)Ljava/nio/charset/Charset;
      17: astore        5
      19: aload_2
      20: invokeinterface #20,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getBody:()Lreactor/core/publisher/Flux;
      25: invokestatic  #21                 // Method org/springframework/core/io/buffer/DataBufferUtils.join:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      28: aload_0
      29: aload         5
      31: invokedynamic #22,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/codec/FormHttpMessageReader;Ljava/nio/charset/Charset;)Ljava/util/function/Function;
      36: invokevirtual #23                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      39: areturn

  private java.nio.charset.Charset getMediaTypeCharset(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        16
       4: aload_1
       5: invokevirtual #24                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
       8: ifnull        16
      11: aload_1
      12: invokevirtual #24                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      15: areturn
      16: aload_0
      17: invokevirtual #25                 // Method getDefaultCharset:()Ljava/nio/charset/Charset;
      20: areturn

  private org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> parseFormData(java.nio.charset.Charset, java.lang.String);
    Code:
       0: aload_2
       1: ldc           #26                 // String &
       3: invokestatic  #27                 // Method org/springframework/util/StringUtils.tokenizeToStringArray:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
       6: astore_3
       7: new           #28                 // class org/springframework/util/LinkedMultiValueMap
      10: dup
      11: aload_3
      12: arraylength
      13: invokespecial #29                 // Method org/springframework/util/LinkedMultiValueMap."<init>":(I)V
      16: astore        4
      18: aload_3
      19: astore        5
      21: aload         5
      23: arraylength
      24: istore        6
      26: iconst_0
      27: istore        7
      29: iload         7
      31: iload         6
      33: if_icmpge     130
      36: aload         5
      38: iload         7
      40: aaload
      41: astore        8
      43: aload         8
      45: bipush        61
      47: invokevirtual #30                 // Method java/lang/String.indexOf:(I)I
      50: istore        9
      52: iload         9
      54: iconst_m1
      55: if_icmpne     78
      58: aload         4
      60: aload         8
      62: aload_1
      63: invokevirtual #31                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      66: invokestatic  #32                 // Method java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      69: aconst_null
      70: invokeinterface #33,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
      75: goto          124
      78: aload         8
      80: iconst_0
      81: iload         9
      83: invokevirtual #34                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      86: aload_1
      87: invokevirtual #31                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      90: invokestatic  #32                 // Method java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      93: astore        10
      95: aload         8
      97: iload         9
      99: iconst_1
     100: iadd
     101: invokevirtual #35                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     104: aload_1
     105: invokevirtual #31                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
     108: invokestatic  #32                 // Method java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     111: astore        11
     113: aload         4
     115: aload         10
     117: aload         11
     119: invokeinterface #33,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
     124: iinc          7, 1
     127: goto          29
     130: goto          145
     133: astore        5
     135: new           #37                 // class java/lang/IllegalStateException
     138: dup
     139: aload         5
     141: invokespecial #38                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
     144: athrow
     145: aload         4
     147: areturn
    Exception table:
       from    to  target type
          18   130   133   Class java/io/UnsupportedEncodingException

  public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes();
    Code:
       0: getstatic     #13                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
       3: invokestatic  #39                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
       6: areturn

  private org.springframework.util.MultiValueMap lambda$readMono$0(java.nio.charset.Charset, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #40,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
       7: invokevirtual #41                 // Method java/nio/charset/Charset.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;
      10: astore_3
      11: aload_3
      12: invokevirtual #42                 // Method java/nio/CharBuffer.toString:()Ljava/lang/String;
      15: astore        4
      17: aload_2
      18: invokestatic  #43                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      21: pop
      22: aload_0
      23: aload_1
      24: aload         4
      26: invokespecial #44                 // Method parseFormData:(Ljava/nio/charset/Charset;Ljava/lang/String;)Lorg/springframework/util/MultiValueMap;
      29: areturn

  static {};
    Code:
       0: getstatic     #45                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       3: putstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       6: ldc           #9                  // class org/springframework/util/MultiValueMap
       8: iconst_2
       9: anewarray     #46                 // class java/lang/Class
      12: dup
      13: iconst_0
      14: ldc           #47                 // class java/lang/String
      16: aastore
      17: dup
      18: iconst_1
      19: ldc           #47                 // class java/lang/String
      21: aastore
      22: invokestatic  #48                 // Method org/springframework/core/ResolvableType.forClassWithGenerics:(Ljava/lang/Class;[Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      25: putstatic     #6                  // Field MULTIVALUE_TYPE:Lorg/springframework/core/ResolvableType;
      28: return
}
