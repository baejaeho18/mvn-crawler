Compiled from "ResourceHttpMessageWriter.java"
public class org.springframework.http.codec.ResourceHttpMessageWriter implements org.springframework.http.codec.HttpMessageWriter<org.springframework.core.io.Resource> {
  private static final org.springframework.core.ResolvableType REGION_TYPE;

  private final org.springframework.core.codec.ResourceEncoder encoder;

  private final org.springframework.core.codec.ResourceRegionEncoder regionEncoder;

  private final java.util.List<org.springframework.http.MediaType> mediaTypes;

  public org.springframework.http.codec.ResourceHttpMessageWriter();
    Code:
       0: aload_0
       1: sipush        4096
       4: invokespecial #2                  // Method "<init>":(I)V
       7: return

  public org.springframework.http.codec.ResourceHttpMessageWriter(int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #1                  // class org/springframework/core/codec/ResourceEncoder
       8: dup
       9: iload_1
      10: invokespecial #4                  // Method org/springframework/core/codec/ResourceEncoder."<init>":(I)V
      13: putfield      #5                  // Field encoder:Lorg/springframework/core/codec/ResourceEncoder;
      16: aload_0
      17: new           #6                  // class org/springframework/core/codec/ResourceRegionEncoder
      20: dup
      21: iload_1
      22: invokespecial #7                  // Method org/springframework/core/codec/ResourceRegionEncoder."<init>":(I)V
      25: putfield      #8                  // Field regionEncoder:Lorg/springframework/core/codec/ResourceRegionEncoder;
      28: aload_0
      29: aload_0
      30: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/ResourceEncoder;
      33: invokevirtual #9                  // Method org/springframework/core/codec/ResourceEncoder.getEncodableMimeTypes:()Ljava/util/List;
      36: invokestatic  #10                 // Method org/springframework/http/MediaType.asMediaTypes:(Ljava/util/List;)Ljava/util/List;
      39: putfield      #11                 // Field mediaTypes:Ljava/util/List;
      42: return

  public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/ResourceEncoder;
       4: aload_1
       5: aload_2
       6: invokevirtual #12                 // Method org/springframework/core/codec/ResourceEncoder.canEncode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
       9: ireturn

  public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes();
    Code:
       0: aload_0
       1: getfield      #11                 // Field mediaTypes:Ljava/util/List;
       4: areturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.core.io.Resource>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: invokestatic  #13                 // Method reactor/core/publisher/Mono.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       4: aload_0
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokedynamic #14,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/codec/ResourceHttpMessageWriter;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Ljava/util/function/Function;
      16: invokevirtual #15                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      19: areturn

  private reactor.core.publisher.Mono<java.lang.Void> writeResource(org.springframework.core.io.Resource, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload         4
       2: invokeinterface #16,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       7: astore        6
       9: aload_3
      10: aload_1
      11: invokestatic  #17                 // Method getResourceMediaType:(Lorg/springframework/http/MediaType;Lorg/springframework/core/io/Resource;)Lorg/springframework/http/MediaType;
      14: astore        7
      16: aload         6
      18: aload         7
      20: invokevirtual #18                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      23: aload         6
      25: invokevirtual #19                 // Method org/springframework/http/HttpHeaders.getContentLength:()J
      28: lconst_0
      29: lcmp
      30: ifge          59
      33: aload_0
      34: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/ResourceEncoder;
      37: aload_1
      38: aload_3
      39: invokevirtual #20                 // Method org/springframework/core/codec/ResourceEncoder.getContentLength:(Lorg/springframework/core/io/Resource;Lorg/springframework/util/MimeType;)Ljava/lang/Long;
      42: astore        8
      44: aload         8
      46: ifnull        59
      49: aload         6
      51: aload         8
      53: invokevirtual #21                 // Method java/lang/Long.longValue:()J
      56: invokevirtual #22                 // Method org/springframework/http/HttpHeaders.setContentLength:(J)V
      59: aload_1
      60: aconst_null
      61: aload         4
      63: invokestatic  #23                 // Method zeroCopy:(Lorg/springframework/core/io/Resource;Lorg/springframework/core/io/support/ResourceRegion;Lorg/springframework/http/ReactiveHttpOutputMessage;)Ljava/util/Optional;
      66: aload_0
      67: aload_1
      68: aload         4
      70: aload_2
      71: aload         7
      73: aload         5
      75: invokedynamic #24,  0             // InvokeDynamic #1:get:(Lorg/springframework/http/codec/ResourceHttpMessageWriter;Lorg/springframework/core/io/Resource;Lorg/springframework/http/ReactiveHttpOutputMessage;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Ljava/util/Map;)Ljava/util/function/Supplier;
      80: invokevirtual #25                 // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      83: checkcast     #26                 // class reactor/core/publisher/Mono
      86: areturn

  private static org.springframework.http.MediaType getResourceMediaType(org.springframework.http.MediaType, org.springframework.core.io.Resource);
    Code:
       0: aload_0
       1: ifnull        23
       4: aload_0
       5: invokevirtual #27                 // Method org/springframework/http/MediaType.isConcrete:()Z
       8: ifeq          23
      11: aload_0
      12: getstatic     #28                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      15: invokevirtual #29                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      18: ifne          23
      21: aload_0
      22: areturn
      23: aload_1
      24: invokestatic  #30                 // Method org/springframework/http/MediaTypeFactory.getMediaType:(Lorg/springframework/core/io/Resource;)Ljava/util/Optional;
      27: getstatic     #28                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      30: invokevirtual #31                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #32                 // class org/springframework/http/MediaType
      36: areturn

  private static java.util.Optional<reactor.core.publisher.Mono<java.lang.Void>> zeroCopy(org.springframework.core.io.Resource, org.springframework.core.io.support.ResourceRegion, org.springframework.http.ReactiveHttpOutputMessage);
    Code:
       0: aload_2
       1: instanceof    #33                 // class org/springframework/http/ZeroCopyHttpOutputMessage
       4: ifeq          73
       7: aload_0
       8: invokeinterface #34,  1           // InterfaceMethod org/springframework/core/io/Resource.isFile:()Z
      13: ifeq          73
      16: aload_0
      17: invokeinterface #35,  1           // InterfaceMethod org/springframework/core/io/Resource.getFile:()Ljava/io/File;
      22: astore_3
      23: aload_1
      24: ifnull        34
      27: aload_1
      28: invokevirtual #36                 // Method org/springframework/core/io/support/ResourceRegion.getPosition:()J
      31: goto          35
      34: lconst_0
      35: lstore        4
      37: aload_1
      38: ifnull        48
      41: aload_1
      42: invokevirtual #37                 // Method org/springframework/core/io/support/ResourceRegion.getCount:()J
      45: goto          52
      48: aload_3
      49: invokevirtual #38                 // Method java/io/File.length:()J
      52: lstore        6
      54: aload_2
      55: checkcast     #33                 // class org/springframework/http/ZeroCopyHttpOutputMessage
      58: aload_3
      59: lload         4
      61: lload         6
      63: invokeinterface #39,  6           // InterfaceMethod org/springframework/http/ZeroCopyHttpOutputMessage.writeWith:(Ljava/io/File;JJ)Lreactor/core/publisher/Mono;
      68: invokestatic  #40                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      71: areturn
      72: astore_3
      73: invokestatic  #42                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      76: areturn
    Exception table:
       from    to  target type
          16    71    72   Class java/io/IOException

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.core.io.Resource>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload         6
       2: invokeinterface #43,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.getHeaders:()Lorg/springframework/http/HttpHeaders;
       7: astore        8
       9: aload         8
      11: ldc           #45                 // String Accept-Ranges
      13: ldc           #46                 // String bytes
      15: invokevirtual #47                 // Method org/springframework/http/HttpHeaders.set:(Ljava/lang/String;Ljava/lang/String;)V
      18: aload         5
      20: invokeinterface #48,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpRequest.getHeaders:()Lorg/springframework/http/HttpHeaders;
      25: invokevirtual #49                 // Method org/springframework/http/HttpHeaders.getRange:()Ljava/util/List;
      28: astore        9
      30: goto          54
      33: astore        10
      35: aload         6
      37: getstatic     #51                 // Field org/springframework/http/HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE:Lorg/springframework/http/HttpStatus;
      40: invokeinterface #52,  2           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.setStatusCode:(Lorg/springframework/http/HttpStatus;)Z
      45: pop
      46: aload         6
      48: invokeinterface #53,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.setComplete:()Lreactor/core/publisher/Mono;
      53: areturn
      54: aload_1
      55: invokestatic  #13                 // Method reactor/core/publisher/Mono.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      58: aload_0
      59: aload         9
      61: aload_3
      62: aload         4
      64: aload         6
      66: aload         7
      68: aload         8
      70: invokedynamic #54,  0             // InvokeDynamic #2:apply:(Lorg/springframework/http/codec/ResourceHttpMessageWriter;Ljava/util/List;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/server/reactive/ServerHttpResponse;Ljava/util/Map;Lorg/springframework/http/HttpHeaders;)Ljava/util/function/Function;
      75: invokevirtual #15                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      78: areturn
    Exception table:
       from    to  target type
          18    30    33   Class java/lang/IllegalArgumentException

  private reactor.core.publisher.Mono<java.lang.Void> writeSingleRegion(org.springframework.core.io.support.ResourceRegion, org.springframework.http.ReactiveHttpOutputMessage);
    Code:
       0: aload_1
       1: invokevirtual #55                 // Method org/springframework/core/io/support/ResourceRegion.getResource:()Lorg/springframework/core/io/Resource;
       4: aload_1
       5: aload_2
       6: invokestatic  #23                 // Method zeroCopy:(Lorg/springframework/core/io/Resource;Lorg/springframework/core/io/support/ResourceRegion;Lorg/springframework/http/ReactiveHttpOutputMessage;)Ljava/util/Optional;
       9: aload_0
      10: aload_1
      11: aload_2
      12: invokedynamic #56,  0             // InvokeDynamic #3:get:(Lorg/springframework/http/codec/ResourceHttpMessageWriter;Lorg/springframework/core/io/support/ResourceRegion;Lorg/springframework/http/ReactiveHttpOutputMessage;)Ljava/util/function/Supplier;
      17: invokevirtual #25                 // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      20: checkcast     #26                 // class reactor/core/publisher/Mono
      23: areturn

  private reactor.core.publisher.Mono<java.lang.Void> encodeAndWriteRegions(org.reactivestreams.Publisher<? extends org.springframework.core.io.support.ResourceRegion>, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field regionEncoder:Lorg/springframework/core/codec/ResourceRegionEncoder;
       4: aload_1
       5: aload_3
       6: invokeinterface #57,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.bufferFactory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      11: getstatic     #58                 // Field REGION_TYPE:Lorg/springframework/core/ResolvableType;
      14: aload_2
      15: aload         4
      17: invokevirtual #59                 // Method org/springframework/core/codec/ResourceRegionEncoder.encode:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      20: astore        5
      22: aload_3
      23: aload         5
      25: invokeinterface #60,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      30: areturn

  private reactor.core.publisher.Mono lambda$writeSingleRegion$3(org.springframework.core.io.support.ResourceRegion, org.springframework.http.ReactiveHttpOutputMessage);
    Code:
       0: aload_1
       1: invokestatic  #61                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: astore_3
       5: aload_2
       6: invokeinterface #16,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      11: invokevirtual #62                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      14: astore        4
      16: aload_0
      17: aload_3
      18: aload         4
      20: aload_2
      21: invokestatic  #63                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      24: invokespecial #64                 // Method encodeAndWriteRegions:(Lorg/reactivestreams/Publisher;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      27: areturn

  private reactor.core.publisher.Mono lambda$write$2(java.util.List, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map, org.springframework.http.HttpHeaders, org.springframework.core.io.Resource);
    Code:
       0: aload_1
       1: invokeinterface #65,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       6: ifeq          22
       9: aload_0
      10: aload         7
      12: aload_2
      13: aload_3
      14: aload         4
      16: aload         5
      18: invokespecial #66                 // Method writeResource:(Lorg/springframework/core/io/Resource;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      21: areturn
      22: aload         4
      24: getstatic     #67                 // Field org/springframework/http/HttpStatus.PARTIAL_CONTENT:Lorg/springframework/http/HttpStatus;
      27: invokeinterface #52,  2           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.setStatusCode:(Lorg/springframework/http/HttpStatus;)Z
      32: pop
      33: aload_1
      34: aload         7
      36: invokestatic  #68                 // Method org/springframework/http/HttpRange.toResourceRegions:(Ljava/util/List;Lorg/springframework/core/io/Resource;)Ljava/util/List;
      39: astore        8
      41: aload_3
      42: aload         7
      44: invokestatic  #17                 // Method getResourceMediaType:(Lorg/springframework/http/MediaType;Lorg/springframework/core/io/Resource;)Lorg/springframework/http/MediaType;
      47: astore        9
      49: aload         8
      51: invokeinterface #69,  1           // InterfaceMethod java/util/List.size:()I
      56: iconst_1
      57: if_icmpne     198
      60: aload         8
      62: iconst_0
      63: invokeinterface #70,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      68: checkcast     #71                 // class org/springframework/core/io/support/ResourceRegion
      71: astore        10
      73: aload         6
      75: aload         9
      77: invokevirtual #18                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      80: aload_0
      81: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/ResourceEncoder;
      84: aload         7
      86: aload_3
      87: invokevirtual #20                 // Method org/springframework/core/codec/ResourceEncoder.getContentLength:(Lorg/springframework/core/io/Resource;Lorg/springframework/util/MimeType;)Ljava/lang/Long;
      90: astore        11
      92: aload         11
      94: ifnull        189
      97: aload         10
      99: invokevirtual #36                 // Method org/springframework/core/io/support/ResourceRegion.getPosition:()J
     102: lstore        12
     104: lload         12
     106: aload         10
     108: invokevirtual #37                 // Method org/springframework/core/io/support/ResourceRegion.getCount:()J
     111: ladd
     112: lconst_1
     113: lsub
     114: lstore        14
     116: lload         14
     118: aload         11
     120: invokevirtual #21                 // Method java/lang/Long.longValue:()J
     123: lconst_1
     124: lsub
     125: invokestatic  #72                 // Method java/lang/Math.min:(JJ)J
     128: lstore        14
     130: aload         6
     132: ldc           #73                 // String Content-Range
     134: new           #74                 // class java/lang/StringBuilder
     137: dup
     138: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
     141: ldc           #76                 // String bytes
     143: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     146: lload         12
     148: invokevirtual #78                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     151: bipush        45
     153: invokevirtual #79                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     156: lload         14
     158: invokevirtual #78                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     161: bipush        47
     163: invokevirtual #79                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     166: aload         11
     168: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     171: invokevirtual #81                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     174: invokevirtual #82                 // Method org/springframework/http/HttpHeaders.add:(Ljava/lang/String;Ljava/lang/String;)V
     177: aload         6
     179: lload         14
     181: lload         12
     183: lsub
     184: lconst_1
     185: ladd
     186: invokevirtual #22                 // Method org/springframework/http/HttpHeaders.setContentLength:(J)V
     189: aload_0
     190: aload         10
     192: aload         4
     194: invokespecial #83                 // Method writeSingleRegion:(Lorg/springframework/core/io/support/ResourceRegion;Lorg/springframework/http/ReactiveHttpOutputMessage;)Lreactor/core/publisher/Mono;
     197: areturn
     198: invokestatic  #84                 // Method org/springframework/util/MimeTypeUtils.generateMultipartBoundaryString:()Ljava/lang/String;
     201: astore        10
     203: new           #74                 // class java/lang/StringBuilder
     206: dup
     207: invokespecial #75                 // Method java/lang/StringBuilder."<init>":()V
     210: ldc           #85                 // String multipart/byteranges;boundary=
     212: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     215: aload         10
     217: invokevirtual #77                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     220: invokevirtual #81                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     223: invokestatic  #86                 // Method org/springframework/http/MediaType.parseMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
     226: astore        11
     228: aload         6
     230: aload         11
     232: invokevirtual #18                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
     235: new           #87                 // class java/util/HashMap
     238: dup
     239: aload         5
     241: invokespecial #88                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
     244: astore        12
     246: aload         12
     248: getstatic     #89                 // Field org/springframework/core/codec/ResourceRegionEncoder.BOUNDARY_STRING_HINT:Ljava/lang/String;
     251: aload         10
     253: invokeinterface #90,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     258: pop
     259: aload_0
     260: aload         8
     262: invokestatic  #91                 // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
     265: aload         9
     267: aload         4
     269: aload         12
     271: invokespecial #64                 // Method encodeAndWriteRegions:(Lorg/reactivestreams/Publisher;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
     274: areturn

  private reactor.core.publisher.Mono lambda$writeResource$1(org.springframework.core.io.Resource, org.springframework.http.ReactiveHttpOutputMessage, org.springframework.core.ResolvableType, org.springframework.http.MediaType, java.util.Map);
    Code:
       0: aload_1
       1: invokestatic  #61                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: astore        6
       6: aload_2
       7: invokeinterface #57,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.bufferFactory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      12: astore        7
      14: aload_0
      15: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/ResourceEncoder;
      18: aload         6
      20: aload         7
      22: aload_3
      23: aload         4
      25: aload         5
      27: invokevirtual #92                 // Method org/springframework/core/codec/ResourceEncoder.encode:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      30: astore        8
      32: aload_2
      33: aload         8
      35: invokeinterface #60,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      40: areturn

  private reactor.core.publisher.Mono lambda$write$0(org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map, org.springframework.core.io.Resource);
    Code:
       0: aload_0
       1: aload         5
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload         4
       8: invokespecial #66                 // Method writeResource:(Lorg/springframework/core/io/Resource;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      11: areturn

  static {};
    Code:
       0: ldc           #71                 // class org/springframework/core/io/support/ResourceRegion
       2: invokestatic  #93                 // Method org/springframework/core/ResolvableType.forClass:(Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
       5: putstatic     #58                 // Field REGION_TYPE:Lorg/springframework/core/ResolvableType;
       8: return
}
