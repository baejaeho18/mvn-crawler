Compiled from "SynchronossPartHttpMessageReader.java"
class org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossFilePart extends org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPart implements org.springframework.http.codec.multipart.FilePart {
  private static final java.nio.file.OpenOption[] FILE_CHANNEL_OPTIONS;

  private final java.lang.String filename;

  org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossFilePart(org.springframework.http.HttpHeaders, java.lang.String, org.synchronoss.cloud.nio.stream.storage.StreamStorage, org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: aload         4
       5: invokespecial #1                  // Method org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader$SynchronossPart."<init>":(Lorg/springframework/http/HttpHeaders;Lorg/synchronoss/cloud/nio/stream/storage/StreamStorage;Lorg/springframework/core/io/buffer/DataBufferFactory;)V
       8: aload_0
       9: aload_2
      10: putfield      #2                  // Field filename:Ljava/lang/String;
      13: return

  public java.lang.String filename();
    Code:
       0: aload_0
       1: getfield      #2                  // Field filename:Ljava/lang/String;
       4: areturn

  public reactor.core.publisher.Mono<java.lang.Void> transferTo(java.io.File);
    Code:
       0: aconst_null
       1: astore_2
       2: aconst_null
       3: astore_3
       4: aload_0
       5: invokevirtual #3                  // Method getStorage:()Lorg/synchronoss/cloud/nio/stream/storage/StreamStorage;
       8: invokevirtual #4                  // Method org/synchronoss/cloud/nio/stream/storage/StreamStorage.getInputStream:()Ljava/io/InputStream;
      11: invokestatic  #5                  // Method java/nio/channels/Channels.newChannel:(Ljava/io/InputStream;)Ljava/nio/channels/ReadableByteChannel;
      14: astore_2
      15: aload_1
      16: invokevirtual #6                  // Method java/io/File.toPath:()Ljava/nio/file/Path;
      19: getstatic     #7                  // Field FILE_CHANNEL_OPTIONS:[Ljava/nio/file/OpenOption;
      22: invokestatic  #8                  // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
      25: astore_3
      26: aload_2
      27: instanceof    #9                  // class java/nio/channels/FileChannel
      30: ifeq          43
      33: aload_2
      34: checkcast     #9                  // class java/nio/channels/FileChannel
      37: invokevirtual #10                 // Method java/nio/channels/FileChannel.size:()J
      40: goto          46
      43: ldc2_w        #12                 // long 9223372036854775807l
      46: lstore        4
      48: lconst_0
      49: lstore        6
      51: lload         6
      53: lload         4
      55: lcmp
      56: ifge          93
      59: aload_3
      60: aload_2
      61: lload         6
      63: lload         4
      65: lload         6
      67: lsub
      68: invokevirtual #14                 // Method java/nio/channels/FileChannel.transferFrom:(Ljava/nio/channels/ReadableByteChannel;JJ)J
      71: lstore        8
      73: lload         8
      75: lconst_0
      76: lcmp
      77: ifgt          83
      80: goto          93
      83: lload         6
      85: lload         8
      87: ladd
      88: lstore        6
      90: goto          51
      93: aload_2
      94: ifnull        108
      97: aload_2
      98: invokeinterface #15,  1           // InterfaceMethod java/nio/channels/ReadableByteChannel.close:()V
     103: goto          108
     106: astore        4
     108: aload_3
     109: ifnull        197
     112: aload_3
     113: invokevirtual #17                 // Method java/nio/channels/FileChannel.close:()V
     116: goto          197
     119: astore        4
     121: goto          197
     124: astore        4
     126: aload         4
     128: invokestatic  #18                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
     131: astore        5
     133: aload_2
     134: ifnull        148
     137: aload_2
     138: invokeinterface #15,  1           // InterfaceMethod java/nio/channels/ReadableByteChannel.close:()V
     143: goto          148
     146: astore        6
     148: aload_3
     149: ifnull        161
     152: aload_3
     153: invokevirtual #17                 // Method java/nio/channels/FileChannel.close:()V
     156: goto          161
     159: astore        6
     161: aload         5
     163: areturn
     164: astore        10
     166: aload_2
     167: ifnull        181
     170: aload_2
     171: invokeinterface #15,  1           // InterfaceMethod java/nio/channels/ReadableByteChannel.close:()V
     176: goto          181
     179: astore        11
     181: aload_3
     182: ifnull        194
     185: aload_3
     186: invokevirtual #17                 // Method java/nio/channels/FileChannel.close:()V
     189: goto          194
     192: astore        11
     194: aload         10
     196: athrow
     197: invokestatic  #19                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
     200: areturn
    Exception table:
       from    to  target type
          97   103   106   Class java/io/IOException
         112   116   119   Class java/io/IOException
           4    93   124   Class java/io/IOException
         137   143   146   Class java/io/IOException
         152   156   159   Class java/io/IOException
           4    93   164   any
         124   133   164   any
         170   176   179   Class java/io/IOException
         185   189   192   Class java/io/IOException
         164   166   164   any

  static {};
    Code:
       0: iconst_3
       1: anewarray     #20                 // class java/nio/file/OpenOption
       4: dup
       5: iconst_0
       6: getstatic     #21                 // Field java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;
       9: aastore
      10: dup
      11: iconst_1
      12: getstatic     #22                 // Field java/nio/file/StandardOpenOption.TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;
      15: aastore
      16: dup
      17: iconst_2
      18: getstatic     #23                 // Field java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;
      21: aastore
      22: putstatic     #7                  // Field FILE_CHANNEL_OPTIONS:[Ljava/nio/file/OpenOption;
      25: return
}
