Compiled from "FormHttpMessageWriter.java"
public class org.springframework.http.codec.FormHttpMessageWriter implements org.springframework.http.codec.HttpMessageWriter<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> {
  public static final java.nio.charset.Charset DEFAULT_CHARSET;

  private static final org.springframework.http.MediaType DEFAULT_FORM_DATA_MEDIA_TYPE;

  private static final java.util.List<org.springframework.http.MediaType> MEDIA_TYPES;

  private static final org.springframework.core.ResolvableType MULTIVALUE_TYPE;

  private java.nio.charset.Charset defaultCharset;

  public org.springframework.http.codec.FormHttpMessageWriter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       8: putfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
      11: return

  public void setDefaultCharset(java.nio.charset.Charset);
    Code:
       0: aload_1
       1: ldc           #4                  // String Charset must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
      11: return

  public java.nio.charset.Charset getDefaultCharset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes();
    Code:
       0: getstatic     #6                  // Field MEDIA_TYPES:Ljava/util/List;
       3: areturn

  public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: invokevirtual #7                  // Method org/springframework/core/ResolvableType.getRawClass:()Ljava/lang/Class;
       4: astore_3
       5: aload_3
       6: ifnull        18
       9: ldc           #8                  // class org/springframework/util/MultiValueMap
      11: aload_3
      12: invokevirtual #9                  // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      15: ifne          20
      18: iconst_0
      19: ireturn
      20: getstatic     #10                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
      23: aload_2
      24: invokevirtual #11                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      27: ifeq          32
      30: iconst_1
      31: ireturn
      32: aload_2
      33: ifnonnull     44
      36: getstatic     #12                 // Field MULTIVALUE_TYPE:Lorg/springframework/core/ResolvableType;
      39: aload_1
      40: invokevirtual #13                 // Method org/springframework/core/ResolvableType.isAssignableFrom:(Lorg/springframework/core/ResolvableType;)Z
      43: ireturn
      44: iconst_0
      45: ireturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_3
       1: ifnull        8
       4: aload_3
       5: goto          11
       8: getstatic     #14                 // Field DEFAULT_FORM_DATA_MEDIA_TYPE:Lorg/springframework/http/MediaType;
      11: astore_3
      12: aload_3
      13: invokevirtual #15                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      16: ifnonnull     39
      19: aload_0
      20: invokevirtual #16                 // Method getDefaultCharset:()Ljava/nio/charset/Charset;
      23: astore        6
      25: new           #17                 // class org/springframework/http/MediaType
      28: dup
      29: aload_3
      30: aload         6
      32: invokespecial #18                 // Method org/springframework/http/MediaType."<init>":(Lorg/springframework/http/MediaType;Ljava/nio/charset/Charset;)V
      35: astore_3
      36: goto          45
      39: aload_3
      40: invokevirtual #15                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      43: astore        6
      45: aload         4
      47: invokeinterface #19,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      52: aload_3
      53: invokevirtual #20                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      56: aload_1
      57: invokestatic  #21                 // Method reactor/core/publisher/Mono.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      60: aload_0
      61: aload         6
      63: aload         4
      65: invokedynamic #22,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/codec/FormHttpMessageWriter;Ljava/nio/charset/Charset;Lorg/springframework/http/ReactiveHttpOutputMessage;)Ljava/util/function/Function;
      70: invokevirtual #23                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      73: areturn

  private java.nio.charset.Charset getMediaTypeCharset(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        16
       4: aload_1
       5: invokevirtual #15                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
       8: ifnull        16
      11: aload_1
      12: invokevirtual #15                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      15: areturn
      16: aload_0
      17: invokevirtual #16                 // Method getDefaultCharset:()Ljava/nio/charset/Charset;
      20: areturn

  private java.lang.String serializeForm(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, java.nio.charset.Charset);
    Code:
       0: new           #24                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_3
       8: aload_1
       9: invokeinterface #26,  1           // InterfaceMethod org/springframework/util/MultiValueMap.keySet:()Ljava/util/Set;
      14: invokeinterface #27,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      19: astore        4
      21: aload         4
      23: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          172
      31: aload         4
      33: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #30                 // class java/lang/String
      41: astore        5
      43: aload_1
      44: aload         5
      46: invokeinterface #31,  2           // InterfaceMethod org/springframework/util/MultiValueMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      51: checkcast     #32                 // class java/util/List
      54: invokeinterface #33,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      59: astore        6
      61: aload         6
      63: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      68: ifeq          152
      71: aload         6
      73: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      78: astore        7
      80: aload_3
      81: aload         5
      83: aload_2
      84: invokevirtual #34                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      87: invokestatic  #35                 // Method java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      90: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: pop
      94: aload         7
      96: ifnull        149
      99: aload_3
     100: bipush        61
     102: invokevirtual #37                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     105: pop
     106: ldc           #30                 // class java/lang/String
     108: aload         7
     110: ldc           #38                 // String FormHttpMessageWriter supports String values only. Use MultipartHttpMessageWriter for multipart requests.
     112: invokestatic  #39                 // Method org/springframework/util/Assert.isInstanceOf:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/String;)V
     115: aload_3
     116: aload         7
     118: checkcast     #30                 // class java/lang/String
     121: aload_2
     122: invokevirtual #34                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
     125: invokestatic  #35                 // Method java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     128: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: pop
     132: aload         6
     134: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     139: ifeq          149
     142: aload_3
     143: bipush        38
     145: invokevirtual #37                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     148: pop
     149: goto          61
     152: aload         4
     154: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     159: ifeq          169
     162: aload_3
     163: bipush        38
     165: invokevirtual #37                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     168: pop
     169: goto          21
     172: goto          187
     175: astore        4
     177: new           #41                 // class java/lang/IllegalStateException
     180: dup
     181: aload         4
     183: invokespecial #42                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
     186: athrow
     187: aload_3
     188: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     191: areturn
    Exception table:
       from    to  target type
           8   172   175   Class java/io/UnsupportedEncodingException

  private reactor.core.publisher.Mono lambda$write$0(java.nio.charset.Charset, org.springframework.http.ReactiveHttpOutputMessage, org.springframework.util.MultiValueMap);
    Code:
       0: aload_0
       1: aload_3
       2: aload_1
       3: invokespecial #44                 // Method serializeForm:(Lorg/springframework/util/MultiValueMap;Ljava/nio/charset/Charset;)Ljava/lang/String;
       6: astore        4
       8: aload_1
       9: aload         4
      11: invokevirtual #45                 // Method java/nio/charset/Charset.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;
      14: astore        5
      16: aload_2
      17: invokeinterface #46,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.bufferFactory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      22: aload         5
      24: invokeinterface #47,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.wrap:(Ljava/nio/ByteBuffer;)Lorg/springframework/core/io/buffer/DataBuffer;
      29: astore        6
      31: aload_2
      32: invokeinterface #19,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      37: aload         5
      39: invokevirtual #48                 // Method java/nio/ByteBuffer.remaining:()I
      42: i2l
      43: invokevirtual #49                 // Method org/springframework/http/HttpHeaders.setContentLength:(J)V
      46: aload_2
      47: aload         6
      49: invokestatic  #50                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      52: invokeinterface #51,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      57: areturn

  static {};
    Code:
       0: getstatic     #52                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       3: putstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       6: new           #17                 // class org/springframework/http/MediaType
       9: dup
      10: getstatic     #10                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
      13: getstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
      16: invokespecial #18                 // Method org/springframework/http/MediaType."<init>":(Lorg/springframework/http/MediaType;Ljava/nio/charset/Charset;)V
      19: putstatic     #14                 // Field DEFAULT_FORM_DATA_MEDIA_TYPE:Lorg/springframework/http/MediaType;
      22: getstatic     #10                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
      25: invokestatic  #53                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      28: putstatic     #6                  // Field MEDIA_TYPES:Ljava/util/List;
      31: ldc           #8                  // class org/springframework/util/MultiValueMap
      33: iconst_2
      34: anewarray     #54                 // class java/lang/Class
      37: dup
      38: iconst_0
      39: ldc           #30                 // class java/lang/String
      41: aastore
      42: dup
      43: iconst_1
      44: ldc           #30                 // class java/lang/String
      46: aastore
      47: invokestatic  #55                 // Method org/springframework/core/ResolvableType.forClassWithGenerics:(Ljava/lang/Class;[Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      50: putstatic     #12                 // Field MULTIVALUE_TYPE:Lorg/springframework/core/ResolvableType;
      53: return
}
