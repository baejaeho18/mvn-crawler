Compiled from "ServerSentEventHttpMessageReader.java"
public class org.springframework.http.codec.ServerSentEventHttpMessageReader implements org.springframework.http.codec.HttpMessageReader<java.lang.Object> {
  private static final org.springframework.core.io.buffer.DataBufferFactory bufferFactory;

  private static final org.springframework.core.codec.StringDecoder stringDecoder;

  private static final org.springframework.core.ResolvableType STRING_TYPE;

  private final org.springframework.core.codec.Decoder<?> decoder;

  public org.springframework.http.codec.ServerSentEventHttpMessageReader();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #1                  // Method "<init>":(Lorg/springframework/core/codec/Decoder;)V
       5: return

  public org.springframework.http.codec.ServerSentEventHttpMessageReader(org.springframework.core.codec.Decoder<?>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field decoder:Lorg/springframework/core/codec/Decoder;
       9: return

  public org.springframework.core.codec.Decoder<?> getDecoder();
    Code:
       0: aload_0
       1: getfield      #3                  // Field decoder:Lorg/springframework/core/codec/Decoder;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes();
    Code:
       0: getstatic     #4                  // Field org/springframework/http/MediaType.TEXT_EVENT_STREAM:Lorg/springframework/http/MediaType;
       3: invokestatic  #5                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
       6: areturn

  public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: getstatic     #4                  // Field org/springframework/http/MediaType.TEXT_EVENT_STREAM:Lorg/springframework/http/MediaType;
       3: aload_2
       4: invokevirtual #6                  // Method org/springframework/http/MediaType.includes:(Lorg/springframework/http/MediaType;)Z
       7: ifne          18
      10: aload_0
      11: aload_1
      12: invokespecial #7                  // Method isServerSentEvent:(Lorg/springframework/core/ResolvableType;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  private boolean isServerSentEvent(org.springframework.core.ResolvableType);
    Code:
       0: aload_1
       1: invokevirtual #8                  // Method org/springframework/core/ResolvableType.getRawClass:()Ljava/lang/Class;
       4: astore_2
       5: aload_2
       6: ifnull        22
       9: ldc           #9                  // class org/springframework/http/codec/ServerSentEvent
      11: aload_2
      12: invokevirtual #10                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public reactor.core.publisher.Flux<java.lang.Object> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method isServerSentEvent:(Lorg/springframework/core/ResolvableType;)Z
       5: istore        4
       7: iload         4
       9: ifeq          26
      12: aload_1
      13: iconst_1
      14: newarray       int
      16: dup
      17: iconst_0
      18: iconst_0
      19: iastore
      20: invokevirtual #11                 // Method org/springframework/core/ResolvableType.getGeneric:([I)Lorg/springframework/core/ResolvableType;
      23: goto          27
      26: aload_1
      27: astore        5
      29: getstatic     #12                 // Field stringDecoder:Lorg/springframework/core/codec/StringDecoder;
      32: aload_2
      33: invokeinterface #13,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getBody:()Lreactor/core/publisher/Flux;
      38: getstatic     #14                 // Field STRING_TYPE:Lorg/springframework/core/ResolvableType;
      41: aconst_null
      42: invokestatic  #15                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      45: invokevirtual #16                 // Method org/springframework/core/codec/StringDecoder.decode:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      48: invokedynamic #17,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      53: invokevirtual #18                 // Method reactor/core/publisher/Flux.bufferUntil:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
      56: aload_0
      57: aload         5
      59: iload         4
      61: aload_3
      62: invokedynamic #19,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/codec/ServerSentEventHttpMessageReader;Lorg/springframework/core/ResolvableType;ZLjava/util/Map;)Ljava/util/function/Function;
      67: invokevirtual #20                 // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      70: areturn

  private reactor.core.publisher.Mono<?> buildEvent(java.util.List<java.lang.String>, org.springframework.core.ResolvableType, boolean, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: iload_3
       1: ifeq          10
       4: invokestatic  #21                 // Method org/springframework/http/codec/ServerSentEvent.builder:()Lorg/springframework/http/codec/ServerSentEvent$Builder;
       7: goto          11
      10: aconst_null
      11: astore        5
      13: aconst_null
      14: astore        6
      16: aconst_null
      17: astore        7
      19: aload_1
      20: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      25: astore        8
      27: aload         8
      29: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          240
      37: aload         8
      39: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #25                 // class java/lang/String
      47: astore        9
      49: aload         9
      51: ldc           #26                 // String data:
      53: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      56: ifeq          95
      59: aload         6
      61: ifnull        69
      64: aload         6
      66: goto          76
      69: new           #28                 // class java/lang/StringBuilder
      72: dup
      73: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      76: astore        6
      78: aload         6
      80: aload         9
      82: iconst_5
      83: invokevirtual #30                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      86: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: ldc           #32                 // String \n
      91: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: pop
      95: iload_3
      96: ifeq          237
      99: aload         9
     101: ldc           #33                 // String id:
     103: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     106: ifeq          126
     109: aload         5
     111: aload         9
     113: iconst_3
     114: invokevirtual #30                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     117: invokeinterface #34,  2           // InterfaceMethod org/springframework/http/codec/ServerSentEvent$Builder.id:(Ljava/lang/String;)Lorg/springframework/http/codec/ServerSentEvent$Builder;
     122: pop
     123: goto          237
     126: aload         9
     128: ldc           #35                 // String event:
     130: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     133: ifeq          154
     136: aload         5
     138: aload         9
     140: bipush        6
     142: invokevirtual #30                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     145: invokeinterface #36,  2           // InterfaceMethod org/springframework/http/codec/ServerSentEvent$Builder.event:(Ljava/lang/String;)Lorg/springframework/http/codec/ServerSentEvent$Builder;
     150: pop
     151: goto          237
     154: aload         9
     156: ldc           #37                 // String retry:
     158: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     161: ifeq          191
     164: aload         5
     166: aload         9
     168: bipush        6
     170: invokevirtual #30                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     173: invokestatic  #38                 // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;
     176: invokevirtual #39                 // Method java/lang/Long.longValue:()J
     179: invokestatic  #40                 // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
     182: invokeinterface #41,  2           // InterfaceMethod org/springframework/http/codec/ServerSentEvent$Builder.retry:(Ljava/time/Duration;)Lorg/springframework/http/codec/ServerSentEvent$Builder;
     187: pop
     188: goto          237
     191: aload         9
     193: ldc           #42                 // String :
     195: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     198: ifeq          237
     201: aload         7
     203: ifnull        211
     206: aload         7
     208: goto          218
     211: new           #28                 // class java/lang/StringBuilder
     214: dup
     215: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
     218: astore        7
     220: aload         7
     222: aload         9
     224: iconst_1
     225: invokevirtual #30                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     228: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     231: ldc           #32                 // String \n
     233: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     236: pop
     237: goto          27
     240: aload         6
     242: ifnull        260
     245: aload_0
     246: aload         6
     248: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     251: aload_2
     252: aload         4
     254: invokespecial #44                 // Method decodeData:(Ljava/lang/String;Lorg/springframework/core/ResolvableType;Ljava/util/Map;)Lreactor/core/publisher/Mono;
     257: goto          263
     260: invokestatic  #45                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
     263: astore        8
     265: iload_3
     266: ifeq          311
     269: aload         7
     271: ifnull        298
     274: aload         5
     276: aload         7
     278: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     281: iconst_0
     282: aload         7
     284: invokevirtual #46                 // Method java/lang/StringBuilder.length:()I
     287: iconst_1
     288: isub
     289: invokevirtual #47                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     292: invokeinterface #48,  2           // InterfaceMethod org/springframework/http/codec/ServerSentEvent$Builder.comment:(Ljava/lang/String;)Lorg/springframework/http/codec/ServerSentEvent$Builder;
     297: pop
     298: aload         8
     300: aload         5
     302: invokedynamic #49,  0             // InvokeDynamic #2:apply:(Lorg/springframework/http/codec/ServerSentEvent$Builder;)Ljava/util/function/Function;
     307: invokevirtual #50                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
     310: areturn
     311: aload         8
     313: areturn

  private reactor.core.publisher.Mono<?> decodeData(java.lang.String, org.springframework.core.ResolvableType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: ldc           #25                 // class java/lang/String
       2: aload_2
       3: invokevirtual #51                 // Method org/springframework/core/ResolvableType.resolve:()Ljava/lang/Class;
       6: if_acmpne     24
       9: aload_1
      10: iconst_0
      11: aload_1
      12: invokevirtual #52                 // Method java/lang/String.length:()I
      15: iconst_1
      16: isub
      17: invokevirtual #47                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      20: invokestatic  #53                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      23: areturn
      24: aload_0
      25: getfield      #3                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      28: ifnonnull     44
      31: new           #54                 // class org/springframework/core/codec/CodecException
      34: dup
      35: ldc           #55                 // String No SSE decoder configured and the data is not String.
      37: invokespecial #56                 // Method org/springframework/core/codec/CodecException."<init>":(Ljava/lang/String;)V
      40: invokestatic  #57                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      43: areturn
      44: aload_1
      45: getstatic     #58                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      48: invokevirtual #59                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      51: astore        4
      53: getstatic     #60                 // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      56: aload         4
      58: invokeinterface #61,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.wrap:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      63: invokestatic  #53                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      66: astore        5
      68: aload_0
      69: getfield      #3                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      72: aload         5
      74: aload_2
      75: getstatic     #4                  // Field org/springframework/http/MediaType.TEXT_EVENT_STREAM:Lorg/springframework/http/MediaType;
      78: aload_3
      79: invokeinterface #62,  5           // InterfaceMethod org/springframework/core/codec/Decoder.decodeToMono:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      84: areturn

  public reactor.core.publisher.Mono<java.lang.Object> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: ldc           #25                 // class java/lang/String
       2: aload_1
       3: invokevirtual #8                  // Method org/springframework/core/ResolvableType.getRawClass:()Ljava/lang/Class;
       6: invokevirtual #63                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       9: ifeq          37
      12: aload_2
      13: invokeinterface #13,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getBody:()Lreactor/core/publisher/Flux;
      18: astore        4
      20: getstatic     #12                 // Field stringDecoder:Lorg/springframework/core/codec/StringDecoder;
      23: aload         4
      25: aload_1
      26: aconst_null
      27: aconst_null
      28: invokevirtual #64                 // Method org/springframework/core/codec/StringDecoder.decodeToMono:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      31: ldc           #65                 // class java/lang/Object
      33: invokevirtual #66                 // Method reactor/core/publisher/Mono.cast:(Ljava/lang/Class;)Lreactor/core/publisher/Mono;
      36: areturn
      37: new           #67                 // class java/lang/UnsupportedOperationException
      40: dup
      41: ldc           #68                 // String ServerSentEventHttpMessageReader only supports reading stream of events as a Flux
      43: invokespecial #69                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      46: invokestatic  #57                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      49: areturn

  private static org.springframework.http.codec.ServerSentEvent lambda$buildEvent$2(org.springframework.http.codec.ServerSentEvent$Builder, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #70,  2           // InterfaceMethod org/springframework/http/codec/ServerSentEvent$Builder.data:(Ljava/lang/Object;)Lorg/springframework/http/codec/ServerSentEvent$Builder;
       7: pop
       8: aload_0
       9: invokeinterface #71,  1           // InterfaceMethod org/springframework/http/codec/ServerSentEvent$Builder.build:()Lorg/springframework/http/codec/ServerSentEvent;
      14: areturn

  private org.reactivestreams.Publisher lambda$read$1(org.springframework.core.ResolvableType, boolean, java.util.Map, java.util.List);
    Code:
       0: aload_0
       1: aload         4
       3: aload_1
       4: iload_2
       5: aload_3
       6: invokespecial #72                 // Method buildEvent:(Ljava/util/List;Lorg/springframework/core/ResolvableType;ZLjava/util/Map;)Lreactor/core/publisher/Mono;
       9: areturn

  private static boolean lambda$read$0(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #73                 // String
       3: invokevirtual #74                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       6: ireturn

  static {};
    Code:
       0: new           #75                 // class org/springframework/core/io/buffer/DefaultDataBufferFactory
       3: dup
       4: invokespecial #76                 // Method org/springframework/core/io/buffer/DefaultDataBufferFactory."<init>":()V
       7: putstatic     #60                 // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      10: invokestatic  #77                 // Method org/springframework/core/codec/StringDecoder.textPlainOnly:()Lorg/springframework/core/codec/StringDecoder;
      13: putstatic     #12                 // Field stringDecoder:Lorg/springframework/core/codec/StringDecoder;
      16: ldc           #25                 // class java/lang/String
      18: invokestatic  #78                 // Method org/springframework/core/ResolvableType.forClass:(Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      21: putstatic     #14                 // Field STRING_TYPE:Lorg/springframework/core/ResolvableType;
      24: return
}
