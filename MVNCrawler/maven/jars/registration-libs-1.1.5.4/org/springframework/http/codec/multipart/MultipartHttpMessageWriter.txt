Compiled from "MultipartHttpMessageWriter.java"
public class org.springframework.http.codec.multipart.MultipartHttpMessageWriter implements org.springframework.http.codec.HttpMessageWriter<org.springframework.util.MultiValueMap<java.lang.String, ?>> {
  public static final java.nio.charset.Charset DEFAULT_CHARSET;

  private final java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> partWriters;

  private final org.springframework.http.codec.HttpMessageWriter<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> formWriter;

  private java.nio.charset.Charset charset;

  private final java.util.List<org.springframework.http.MediaType> supportedMediaTypes;

  private final org.springframework.core.io.buffer.DataBufferFactory bufferFactory;

  public org.springframework.http.codec.multipart.MultipartHttpMessageWriter();
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #1                  // class org/springframework/http/codec/HttpMessageWriter
       5: dup
       6: iconst_0
       7: new           #2                  // class org/springframework/http/codec/EncoderHttpMessageWriter
      10: dup
      11: invokestatic  #3                  // Method org/springframework/core/codec/CharSequenceEncoder.textPlainOnly:()Lorg/springframework/core/codec/CharSequenceEncoder;
      14: invokespecial #4                  // Method org/springframework/http/codec/EncoderHttpMessageWriter."<init>":(Lorg/springframework/core/codec/Encoder;)V
      17: aastore
      18: dup
      19: iconst_1
      20: new           #5                  // class org/springframework/http/codec/ResourceHttpMessageWriter
      23: dup
      24: invokespecial #6                  // Method org/springframework/http/codec/ResourceHttpMessageWriter."<init>":()V
      27: aastore
      28: invokestatic  #7                  // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      31: invokespecial #8                  // Method "<init>":(Ljava/util/List;)V
      34: return

  public org.springframework.http.codec.multipart.MultipartHttpMessageWriter(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>);
    Code:
       0: aload_0
       1: aload_1
       2: new           #9                  // class org/springframework/http/codec/FormHttpMessageWriter
       5: dup
       6: invokespecial #10                 // Method org/springframework/http/codec/FormHttpMessageWriter."<init>":()V
       9: invokespecial #11                 // Method "<init>":(Ljava/util/List;Lorg/springframework/http/codec/HttpMessageWriter;)V
      12: return

  public org.springframework.http.codec.multipart.MultipartHttpMessageWriter(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.http.codec.HttpMessageWriter<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #13                 // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       8: putfield      #14                 // Field charset:Ljava/nio/charset/Charset;
      11: aload_0
      12: new           #15                 // class org/springframework/core/io/buffer/DefaultDataBufferFactory
      15: dup
      16: invokespecial #16                 // Method org/springframework/core/io/buffer/DefaultDataBufferFactory."<init>":()V
      19: putfield      #17                 // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      22: aload_0
      23: aload_1
      24: putfield      #18                 // Field partWriters:Ljava/util/List;
      27: aload_0
      28: aload_2
      29: putfield      #19                 // Field formWriter:Lorg/springframework/http/codec/HttpMessageWriter;
      32: aload_0
      33: aload_2
      34: invokestatic  #20                 // Method initMediaTypes:(Lorg/springframework/http/codec/HttpMessageWriter;)Ljava/util/List;
      37: putfield      #21                 // Field supportedMediaTypes:Ljava/util/List;
      40: return

  private static java.util.List<org.springframework.http.MediaType> initMediaTypes(org.springframework.http.codec.HttpMessageWriter<?>);
    Code:
       0: new           #22                 // class java/util/ArrayList
       3: dup
       4: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_1
       9: getstatic     #24                 // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
      12: invokeinterface #25,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      17: pop
      18: aload_0
      19: ifnull        35
      22: aload_1
      23: aload_0
      24: invokeinterface #26,  1           // InterfaceMethod org/springframework/http/codec/HttpMessageWriter.getWritableMediaTypes:()Ljava/util/List;
      29: invokeinterface #27,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      34: pop
      35: aload_1
      36: invokestatic  #28                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      39: areturn

  public void setCharset(java.nio.charset.Charset);
    Code:
       0: aload_1
       1: ldc           #29                 // String Charset must not be null
       3: invokestatic  #30                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #14                 // Field charset:Ljava/nio/charset/Charset;
      11: return

  public java.nio.charset.Charset getCharset();
    Code:
       0: aload_0
       1: getfield      #14                 // Field charset:Ljava/nio/charset/Charset;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes();
    Code:
       0: aload_0
       1: getfield      #21                 // Field supportedMediaTypes:Ljava/util/List;
       4: areturn

  public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: invokevirtual #31                 // Method org/springframework/core/ResolvableType.getRawClass:()Ljava/lang/Class;
       4: astore_3
       5: aload_3
       6: ifnull        49
       9: ldc           #32                 // class org/springframework/util/MultiValueMap
      11: aload_3
      12: invokevirtual #33                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      15: ifeq          49
      18: aload_2
      19: ifnull        45
      22: aload_0
      23: getfield      #21                 // Field supportedMediaTypes:Ljava/util/List;
      26: invokeinterface #34,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      31: aload_2
      32: invokedynamic #35,  0             // InvokeDynamic #0:test:(Lorg/springframework/http/MediaType;)Ljava/util/function/Predicate;
      37: invokeinterface #36,  2           // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ireturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.util.MultiValueMap<java.lang.String, ?>>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: invokestatic  #37                 // Method reactor/core/publisher/Mono.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       4: aload_0
       5: aload_3
       6: aload         4
       8: aload_2
       9: aload         5
      11: invokedynamic #38,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageWriter;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Lorg/springframework/core/ResolvableType;Ljava/util/Map;)Ljava/util/function/Function;
      16: invokevirtual #39                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      19: areturn

  private boolean isMultipart(org.springframework.util.MultiValueMap<java.lang.String, ?>, org.springframework.http.MediaType);
    Code:
       0: aload_2
       1: ifnull        12
       4: getstatic     #24                 // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
       7: aload_2
       8: invokevirtual #40                 // Method org/springframework/http/MediaType.includes:(Lorg/springframework/http/MediaType;)Z
      11: ireturn
      12: aload_1
      13: invokeinterface #41,  1           // InterfaceMethod org/springframework/util/MultiValueMap.keySet:()Ljava/util/Set;
      18: invokeinterface #42,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      23: astore_3
      24: aload_3
      25: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          102
      33: aload_3
      34: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #45                 // class java/lang/String
      42: astore        4
      44: aload_1
      45: aload         4
      47: invokeinterface #46,  2           // InterfaceMethod org/springframework/util/MultiValueMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      52: checkcast     #47                 // class java/util/List
      55: invokeinterface #48,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      60: astore        5
      62: aload         5
      64: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      69: ifeq          99
      72: aload         5
      74: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      79: astore        6
      81: aload         6
      83: ifnull        96
      86: aload         6
      88: instanceof    #45                 // class java/lang/String
      91: ifne          96
      94: iconst_1
      95: ireturn
      96: goto          62
      99: goto          24
     102: iconst_0
     103: ireturn

  private reactor.core.publisher.Mono<java.lang.Void> writeMultipart(org.springframework.util.MultiValueMap<java.lang.String, ?>, org.springframework.http.ReactiveHttpOutputMessage);
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method generateMultipartBoundary:()[B
       4: astore_3
       5: new           #50                 // class java/util/HashMap
       8: dup
       9: iconst_2
      10: invokespecial #51                 // Method java/util/HashMap."<init>":(I)V
      13: astore        4
      15: aload         4
      17: ldc           #52                 // String boundary
      19: new           #45                 // class java/lang/String
      22: dup
      23: aload_3
      24: getstatic     #53                 // Field java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;
      27: invokespecial #54                 // Method java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
      30: invokeinterface #55,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      35: pop
      36: aload         4
      38: ldc           #56                 // String charset
      40: aload_0
      41: invokevirtual #57                 // Method getCharset:()Ljava/nio/charset/Charset;
      44: invokevirtual #58                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      47: invokeinterface #55,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      52: pop
      53: aload_2
      54: invokeinterface #59,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      59: new           #60                 // class org/springframework/http/MediaType
      62: dup
      63: getstatic     #24                 // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
      66: aload         4
      68: invokespecial #61                 // Method org/springframework/http/MediaType."<init>":(Lorg/springframework/http/MediaType;Ljava/util/Map;)V
      71: invokevirtual #62                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      74: aload_1
      75: invokeinterface #63,  1           // InterfaceMethod org/springframework/util/MultiValueMap.entrySet:()Ljava/util/Set;
      80: invokestatic  #64                 // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      83: aload_0
      84: aload_3
      85: invokedynamic #65,  0             // InvokeDynamic #2:apply:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageWriter;[B)Ljava/util/function/Function;
      90: invokevirtual #66                 // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      93: aload_0
      94: aload_3
      95: invokespecial #67                 // Method generateLastLine:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      98: invokestatic  #68                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
     101: invokevirtual #69                 // Method reactor/core/publisher/Flux.concatWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     104: astore        5
     106: aload_2
     107: aload         5
     109: invokeinterface #70,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
     114: areturn

  protected byte[] generateMultipartBoundary();
    Code:
       0: invokestatic  #71                 // Method org/springframework/util/MimeTypeUtils.generateMultipartBoundary:()[B
       3: areturn

  private reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encodePartValues(byte[], java.lang.String, java.util.List<?>);
    Code:
       0: aload_3
       1: invokeinterface #34,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
       6: aload_0
       7: aload_1
       8: aload_2
       9: invokedynamic #72,  0             // InvokeDynamic #3:apply:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageWriter;[BLjava/lang/String;)Ljava/util/function/Function;
      14: invokeinterface #73,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      19: invokestatic  #74                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      22: invokeinterface #75,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      27: checkcast     #76                 // class java/lang/Iterable
      30: invokestatic  #77                 // Method reactor/core/publisher/Flux.concat:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      33: areturn

  private <T> reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encodePart(byte[], java.lang.String, T);
    Code:
       0: new           #78                 // class org/springframework/http/codec/multipart/MultipartHttpMessageWriter$MultipartHttpOutputMessage
       3: dup
       4: aload_0
       5: getfield      #17                 // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       8: aload_0
       9: invokevirtual #57                 // Method getCharset:()Ljava/nio/charset/Charset;
      12: invokespecial #79                 // Method org/springframework/http/codec/multipart/MultipartHttpMessageWriter$MultipartHttpOutputMessage."<init>":(Lorg/springframework/core/io/buffer/DataBufferFactory;Ljava/nio/charset/Charset;)V
      15: astore        4
      17: aload         4
      19: invokevirtual #80                 // Method org/springframework/http/codec/multipart/MultipartHttpMessageWriter$MultipartHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      22: astore        5
      24: aconst_null
      25: astore        7
      27: aload_3
      28: instanceof    #81                 // class org/springframework/http/HttpEntity
      31: ifeq          97
      34: aload_3
      35: checkcast     #81                 // class org/springframework/http/HttpEntity
      38: astore        8
      40: aload         5
      42: aload         8
      44: invokevirtual #82                 // Method org/springframework/http/HttpEntity.getHeaders:()Lorg/springframework/http/HttpHeaders;
      47: invokevirtual #83                 // Method org/springframework/http/HttpHeaders.putAll:(Ljava/util/Map;)V
      50: aload         8
      52: invokevirtual #84                 // Method org/springframework/http/HttpEntity.getBody:()Ljava/lang/Object;
      55: astore        6
      57: aload         6
      59: ifnull        66
      62: iconst_1
      63: goto          67
      66: iconst_0
      67: ldc           #85                 // String MultipartHttpMessageWriter only supports HttpEntity with body
      69: invokestatic  #86                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      72: aload         8
      74: instanceof    #87                 // class org/springframework/http/client/MultipartBodyBuilder$PublisherEntity
      77: ifeq          94
      80: aload         8
      82: checkcast     #87                 // class org/springframework/http/client/MultipartBodyBuilder$PublisherEntity
      85: astore        9
      87: aload         9
      89: invokevirtual #88                 // Method org/springframework/http/client/MultipartBodyBuilder$PublisherEntity.getResolvableType:()Lorg/springframework/core/ResolvableType;
      92: astore        7
      94: goto          100
      97: aload_3
      98: astore        6
     100: aload         7
     102: ifnonnull     115
     105: aload         6
     107: invokevirtual #89                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     110: invokestatic  #90                 // Method org/springframework/core/ResolvableType.forClass:(Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
     113: astore        7
     115: aload         5
     117: ldc           #92                 // String Content-Disposition
     119: invokevirtual #93                 // Method org/springframework/http/HttpHeaders.containsKey:(Ljava/lang/Object;)Z
     122: ifne          196
     125: aload         6
     127: instanceof    #94                 // class org/springframework/core/io/Resource
     130: ifeq          152
     133: aload         5
     135: aload_2
     136: aload         6
     138: checkcast     #94                 // class org/springframework/core/io/Resource
     141: invokeinterface #95,  1           // InterfaceMethod org/springframework/core/io/Resource.getFilename:()Ljava/lang/String;
     146: invokevirtual #96                 // Method org/springframework/http/HttpHeaders.setContentDispositionFormData:(Ljava/lang/String;Ljava/lang/String;)V
     149: goto          196
     152: ldc           #94                 // class org/springframework/core/io/Resource
     154: aload         7
     156: invokevirtual #31                 // Method org/springframework/core/ResolvableType.getRawClass:()Ljava/lang/Class;
     159: invokevirtual #97                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     162: ifeq          189
     165: aload         6
     167: checkcast     #98                 // class org/reactivestreams/Publisher
     170: invokestatic  #37                 // Method reactor/core/publisher/Mono.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
     173: aload         5
     175: aload_2
     176: invokedynamic #99,  0             // InvokeDynamic #4:accept:(Lorg/springframework/http/HttpHeaders;Ljava/lang/String;)Ljava/util/function/Consumer;
     181: invokevirtual #100                // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
     184: astore        6
     186: goto          196
     189: aload         5
     191: aload_2
     192: aconst_null
     193: invokevirtual #96                 // Method org/springframework/http/HttpHeaders.setContentDispositionFormData:(Ljava/lang/String;Ljava/lang/String;)V
     196: aload         5
     198: invokevirtual #101                // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
     201: astore        8
     203: aload         7
     205: astore        9
     207: aload_0
     208: getfield      #18                 // Field partWriters:Ljava/util/List;
     211: invokeinterface #34,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     216: aload         9
     218: aload         8
     220: invokedynamic #102,  0            // InvokeDynamic #5:test:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;)Ljava/util/function/Predicate;
     225: invokeinterface #103,  2          // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
     230: invokeinterface #104,  1          // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
     235: astore        10
     237: aload         10
     239: invokevirtual #105                // Method java/util/Optional.isPresent:()Z
     242: ifne          275
     245: new           #106                // class org/springframework/core/codec/CodecException
     248: dup
     249: new           #107                // class java/lang/StringBuilder
     252: dup
     253: invokespecial #108                // Method java/lang/StringBuilder."<init>":()V
     256: ldc           #109                // String No suitable writer found for part:
     258: invokevirtual #110                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     261: aload_2
     262: invokevirtual #110                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     265: invokevirtual #111                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     268: invokespecial #112                // Method org/springframework/core/codec/CodecException."<init>":(Ljava/lang/String;)V
     271: invokestatic  #113                // Method reactor/core/publisher/Flux.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
     274: areturn
     275: aload         6
     277: instanceof    #98                 // class org/reactivestreams/Publisher
     280: ifeq          291
     283: aload         6
     285: checkcast     #98                 // class org/reactivestreams/Publisher
     288: goto          296
     291: aload         6
     293: invokestatic  #68                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
     296: astore        11
     298: aload         10
     300: invokevirtual #114                // Method java/util/Optional.get:()Ljava/lang/Object;
     303: checkcast     #1                  // class org/springframework/http/codec/HttpMessageWriter
     306: aload         11
     308: aload         7
     310: aload         8
     312: aload         4
     314: invokestatic  #115                // Method java/util/Collections.emptyMap:()Ljava/util/Map;
     317: invokeinterface #116,  6          // InterfaceMethod org/springframework/http/codec/HttpMessageWriter.write:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
     322: astore        12
     324: aload         12
     326: aload         4
     328: dup
     329: invokevirtual #89                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     332: pop
     333: invokedynamic #117,  0            // InvokeDynamic #6:get:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageWriter$MultipartHttpOutputMessage;)Ljava/util/function/Supplier;
     338: invokestatic  #118                // Method reactor/core/publisher/Flux.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
     341: invokevirtual #119                // Method reactor/core/publisher/Mono.thenMany:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     344: astore        13
     346: iconst_3
     347: anewarray     #98                 // class org/reactivestreams/Publisher
     350: dup
     351: iconst_0
     352: aload_0
     353: aload_1
     354: invokespecial #120                // Method generateBoundaryLine:([B)Lorg/springframework/core/io/buffer/DataBuffer;
     357: invokestatic  #68                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
     360: aastore
     361: dup
     362: iconst_1
     363: aload         13
     365: aastore
     366: dup
     367: iconst_2
     368: aload_0
     369: invokespecial #121                // Method generateNewLine:()Lorg/springframework/core/io/buffer/DataBuffer;
     372: invokestatic  #68                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
     375: aastore
     376: invokestatic  #122                // Method reactor/core/publisher/Flux.concat:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     379: areturn

  private org.springframework.core.io.buffer.DataBuffer generateBoundaryLine(byte[]);
    Code:
       0: aload_0
       1: getfield      #17                 // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       4: aload_1
       5: arraylength
       6: iconst_4
       7: iadd
       8: invokeinterface #123,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.allocateBuffer:(I)Lorg/springframework/core/io/buffer/DataBuffer;
      13: astore_2
      14: aload_2
      15: bipush        45
      17: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      22: pop
      23: aload_2
      24: bipush        45
      26: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      31: pop
      32: aload_2
      33: aload_1
      34: invokeinterface #125,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      39: pop
      40: aload_2
      41: bipush        13
      43: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      48: pop
      49: aload_2
      50: bipush        10
      52: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      57: pop
      58: aload_2
      59: areturn

  private org.springframework.core.io.buffer.DataBuffer generateNewLine();
    Code:
       0: aload_0
       1: getfield      #17                 // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       4: iconst_2
       5: invokeinterface #123,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.allocateBuffer:(I)Lorg/springframework/core/io/buffer/DataBuffer;
      10: astore_1
      11: aload_1
      12: bipush        13
      14: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      19: pop
      20: aload_1
      21: bipush        10
      23: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      28: pop
      29: aload_1
      30: areturn

  private org.springframework.core.io.buffer.DataBuffer generateLastLine(byte[]);
    Code:
       0: aload_0
       1: getfield      #17                 // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       4: aload_1
       5: arraylength
       6: bipush        6
       8: iadd
       9: invokeinterface #123,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.allocateBuffer:(I)Lorg/springframework/core/io/buffer/DataBuffer;
      14: astore_2
      15: aload_2
      16: bipush        45
      18: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      23: pop
      24: aload_2
      25: bipush        45
      27: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      32: pop
      33: aload_2
      34: aload_1
      35: invokeinterface #125,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      40: pop
      41: aload_2
      42: bipush        45
      44: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      49: pop
      50: aload_2
      51: bipush        45
      53: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      58: pop
      59: aload_2
      60: bipush        13
      62: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      67: pop
      68: aload_2
      69: bipush        10
      71: invokeinterface #124,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:(B)Lorg/springframework/core/io/buffer/DataBuffer;
      76: pop
      77: aload_2
      78: areturn

  private static boolean lambda$encodePart$5(org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.codec.HttpMessageWriter);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #126,  3          // InterfaceMethod org/springframework/http/codec/HttpMessageWriter.canWrite:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;)Z
       8: ireturn

  private static void lambda$encodePart$4(org.springframework.http.HttpHeaders, java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #94                 // class org/springframework/core/io/Resource
       6: invokeinterface #95,  1           // InterfaceMethod org/springframework/core/io/Resource.getFilename:()Ljava/lang/String;
      11: invokevirtual #96                 // Method org/springframework/http/HttpHeaders.setContentDispositionFormData:(Ljava/lang/String;Ljava/lang/String;)V
      14: return

  private reactor.core.publisher.Flux lambda$encodePartValues$3(byte[], java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #127                // Method encodePart:([BLjava/lang/String;Ljava/lang/Object;)Lreactor/core/publisher/Flux;
       7: areturn

  private org.reactivestreams.Publisher lambda$writeMultipart$2(byte[], java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #128,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       8: checkcast     #45                 // class java/lang/String
      11: aload_2
      12: invokeinterface #129,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      17: checkcast     #47                 // class java/util/List
      20: invokespecial #130                // Method encodePartValues:([BLjava/lang/String;Ljava/util/List;)Lreactor/core/publisher/Flux;
      23: areturn

  private reactor.core.publisher.Mono lambda$write$1(org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, org.springframework.core.ResolvableType, java.util.Map, org.springframework.util.MultiValueMap);
    Code:
       0: aload_0
       1: getfield      #19                 // Field formWriter:Lorg/springframework/http/codec/HttpMessageWriter;
       4: ifnull        17
       7: aload_0
       8: aload         5
      10: aload_1
      11: invokespecial #131                // Method isMultipart:(Lorg/springframework/util/MultiValueMap;Lorg/springframework/http/MediaType;)Z
      14: ifeq          25
      17: aload_0
      18: aload         5
      20: aload_2
      21: invokespecial #132                // Method writeMultipart:(Lorg/springframework/util/MultiValueMap;Lorg/springframework/http/ReactiveHttpOutputMessage;)Lreactor/core/publisher/Mono;
      24: areturn
      25: aload         5
      27: astore        6
      29: aload_0
      30: getfield      #19                 // Field formWriter:Lorg/springframework/http/codec/HttpMessageWriter;
      33: aload         6
      35: invokestatic  #68                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      38: aload_3
      39: aload_1
      40: aload_2
      41: aload         4
      43: invokeinterface #116,  6          // InterfaceMethod org/springframework/http/codec/HttpMessageWriter.write:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      48: areturn

  private static boolean lambda$canWrite$0(org.springframework.http.MediaType, org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #133                // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
       5: ireturn

  static {};
    Code:
       0: getstatic     #134                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       3: putstatic     #13                 // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       6: return
}
