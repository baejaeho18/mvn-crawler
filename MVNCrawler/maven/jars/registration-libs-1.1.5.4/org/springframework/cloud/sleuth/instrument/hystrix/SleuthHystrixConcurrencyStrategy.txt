Compiled from "SleuthHystrixConcurrencyStrategy.java"
public class org.springframework.cloud.sleuth.instrument.hystrix.SleuthHystrixConcurrencyStrategy extends com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy {
  private static final java.lang.String HYSTRIX_COMPONENT;

  private static final org.apache.commons.logging.Log log;

  private final brave.Tracing tracing;

  private final org.springframework.cloud.sleuth.SpanNamer spanNamer;

  private com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy delegate;

  public org.springframework.cloud.sleuth.instrument.hystrix.SleuthHystrixConcurrencyStrategy(brave.Tracing, org.springframework.cloud.sleuth.SpanNamer);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field tracing:Lbrave/Tracing;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field spanNamer:Lorg/springframework/cloud/sleuth/SpanNamer;
      14: aload_0
      15: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
      18: invokevirtual #5                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getConcurrencyStrategy:()Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
      21: putfield      #6                  // Field delegate:Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
      24: aload_0
      25: getfield      #6                  // Field delegate:Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
      28: instanceof    #7                  // class org/springframework/cloud/sleuth/instrument/hystrix/SleuthHystrixConcurrencyStrategy
      31: ifeq          35
      34: return
      35: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
      38: invokevirtual #8                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getCommandExecutionHook:()Lcom/netflix/hystrix/strategy/executionhook/HystrixCommandExecutionHook;
      41: astore_3
      42: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
      45: invokevirtual #9                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getEventNotifier:()Lcom/netflix/hystrix/strategy/eventnotifier/HystrixEventNotifier;
      48: astore        4
      50: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
      53: invokevirtual #10                 // Method com/netflix/hystrix/strategy/HystrixPlugins.getMetricsPublisher:()Lcom/netflix/hystrix/strategy/metrics/HystrixMetricsPublisher;
      56: astore        5
      58: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
      61: invokevirtual #11                 // Method com/netflix/hystrix/strategy/HystrixPlugins.getPropertiesStrategy:()Lcom/netflix/hystrix/strategy/properties/HystrixPropertiesStrategy;
      64: astore        6
      66: aload_0
      67: aload         4
      69: aload         5
      71: aload         6
      73: invokespecial #12                 // Method logCurrentStateOfHysrixPlugins:(Lcom/netflix/hystrix/strategy/eventnotifier/HystrixEventNotifier;Lcom/netflix/hystrix/strategy/metrics/HystrixMetricsPublisher;Lcom/netflix/hystrix/strategy/properties/HystrixPropertiesStrategy;)V
      76: invokestatic  #13                 // Method com/netflix/hystrix/strategy/HystrixPlugins.reset:()V
      79: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
      82: aload_0
      83: invokevirtual #14                 // Method com/netflix/hystrix/strategy/HystrixPlugins.registerConcurrencyStrategy:(Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;)V
      86: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
      89: aload_3
      90: invokevirtual #15                 // Method com/netflix/hystrix/strategy/HystrixPlugins.registerCommandExecutionHook:(Lcom/netflix/hystrix/strategy/executionhook/HystrixCommandExecutionHook;)V
      93: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
      96: aload         4
      98: invokevirtual #16                 // Method com/netflix/hystrix/strategy/HystrixPlugins.registerEventNotifier:(Lcom/netflix/hystrix/strategy/eventnotifier/HystrixEventNotifier;)V
     101: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
     104: aload         5
     106: invokevirtual #17                 // Method com/netflix/hystrix/strategy/HystrixPlugins.registerMetricsPublisher:(Lcom/netflix/hystrix/strategy/metrics/HystrixMetricsPublisher;)V
     109: invokestatic  #4                  // Method com/netflix/hystrix/strategy/HystrixPlugins.getInstance:()Lcom/netflix/hystrix/strategy/HystrixPlugins;
     112: aload         6
     114: invokevirtual #18                 // Method com/netflix/hystrix/strategy/HystrixPlugins.registerPropertiesStrategy:(Lcom/netflix/hystrix/strategy/properties/HystrixPropertiesStrategy;)V
     117: goto          132
     120: astore_3
     121: getstatic     #20                 // Field log:Lorg/apache/commons/logging/Log;
     124: ldc           #21                 // String Failed to register Sleuth Hystrix Concurrency Strategy
     126: aload_3
     127: invokeinterface #22,  3           // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     132: return
    Exception table:
       from    to  target type
          14    34   120   Class java/lang/Exception
          35   117   120   Class java/lang/Exception

  private void logCurrentStateOfHysrixPlugins(com.netflix.hystrix.strategy.eventnotifier.HystrixEventNotifier, com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisher, com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategy);
    Code:
       0: getstatic     #20                 // Field log:Lorg/apache/commons/logging/Log;
       3: invokeinterface #23,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
       8: ifeq          83
      11: getstatic     #20                 // Field log:Lorg/apache/commons/logging/Log;
      14: new           #24                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #26                 // String Current Hystrix plugins configuration is [concurrencyStrategy [
      23: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #6                  // Field delegate:Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
      30: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: ldc           #29                 // String ],eventNotifier [
      35: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_1
      39: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      42: ldc           #30                 // String ],metricPublisher [
      44: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: aload_2
      48: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      51: ldc           #31                 // String ],propertiesStrategy [
      53: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_3
      57: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      60: ldc           #32                 // String ],]
      62: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      68: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      73: getstatic     #20                 // Field log:Lorg/apache/commons/logging/Log;
      76: ldc           #35                 // String Registering Sleuth Hystrix Concurrency Strategy.
      78: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      83: return

  public <T> java.util.concurrent.Callable<T> wrapCallable(java.util.concurrent.Callable<T>);
    Code:
       0: aload_1
       1: instanceof    #36                 // class org/springframework/cloud/sleuth/instrument/async/TraceCallable
       4: ifeq          9
       7: aload_1
       8: areturn
       9: aload_0
      10: getfield      #6                  // Field delegate:Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
      13: ifnull        27
      16: aload_0
      17: getfield      #6                  // Field delegate:Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
      20: aload_1
      21: invokevirtual #37                 // Method com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.wrapCallable:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;
      24: goto          28
      27: aload_1
      28: astore_2
      29: aload_2
      30: instanceof    #36                 // class org/springframework/cloud/sleuth/instrument/async/TraceCallable
      33: ifeq          38
      36: aload_2
      37: areturn
      38: new           #36                 // class org/springframework/cloud/sleuth/instrument/async/TraceCallable
      41: dup
      42: aload_0
      43: getfield      #2                  // Field tracing:Lbrave/Tracing;
      46: aload_0
      47: getfield      #3                  // Field spanNamer:Lorg/springframework/cloud/sleuth/SpanNamer;
      50: aload_2
      51: ldc           #38                 // String hystrix
      53: invokespecial #39                 // Method org/springframework/cloud/sleuth/instrument/async/TraceCallable."<init>":(Lbrave/Tracing;Lorg/springframework/cloud/sleuth/SpanNamer;Ljava/util/concurrent/Callable;Ljava/lang/String;)V
      56: areturn

  public java.util.concurrent.ThreadPoolExecutor getThreadPool(com.netflix.hystrix.HystrixThreadPoolKey, com.netflix.hystrix.strategy.properties.HystrixProperty<java.lang.Integer>, com.netflix.hystrix.strategy.properties.HystrixProperty<java.lang.Integer>, com.netflix.hystrix.strategy.properties.HystrixProperty<java.lang.Integer>, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field delegate:Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: aload         6
      13: invokevirtual #40                 // Method com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.getThreadPool:(Lcom/netflix/hystrix/HystrixThreadPoolKey;Lcom/netflix/hystrix/strategy/properties/HystrixProperty;Lcom/netflix/hystrix/strategy/properties/HystrixProperty;Lcom/netflix/hystrix/strategy/properties/HystrixProperty;Ljava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)Ljava/util/concurrent/ThreadPoolExecutor;
      16: areturn

  public java.util.concurrent.ThreadPoolExecutor getThreadPool(com.netflix.hystrix.HystrixThreadPoolKey, com.netflix.hystrix.HystrixThreadPoolProperties);
    Code:
       0: aload_0
       1: getfield      #6                  // Field delegate:Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
       4: aload_1
       5: aload_2
       6: invokevirtual #41                 // Method com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.getThreadPool:(Lcom/netflix/hystrix/HystrixThreadPoolKey;Lcom/netflix/hystrix/HystrixThreadPoolProperties;)Ljava/util/concurrent/ThreadPoolExecutor;
       9: areturn

  public java.util.concurrent.BlockingQueue<java.lang.Runnable> getBlockingQueue(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field delegate:Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
       4: iload_1
       5: invokevirtual #42                 // Method com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.getBlockingQueue:(I)Ljava/util/concurrent/BlockingQueue;
       8: areturn

  public <T> com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable<T> getRequestVariable(com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle<T>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field delegate:Lcom/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy;
       4: aload_1
       5: invokevirtual #43                 // Method com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.getRequestVariable:(Lcom/netflix/hystrix/strategy/concurrency/HystrixRequestVariableLifecycle;)Lcom/netflix/hystrix/strategy/concurrency/HystrixRequestVariable;
       8: areturn

  static {};
    Code:
       0: ldc           #7                  // class org/springframework/cloud/sleuth/instrument/hystrix/SleuthHystrixConcurrencyStrategy
       2: invokestatic  #44                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #20                 // Field log:Lorg/apache/commons/logging/Log;
       8: return
}
