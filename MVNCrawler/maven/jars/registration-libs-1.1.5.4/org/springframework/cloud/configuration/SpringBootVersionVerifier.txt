Compiled from "SpringBootVersionVerifier.java"
class org.springframework.cloud.configuration.SpringBootVersionVerifier implements org.springframework.cloud.configuration.CompatibilityVerifier {
  private static final org.apache.commons.logging.Log log;

  final java.util.Map<java.lang.String, org.springframework.cloud.configuration.CompatibilityPredicate> ACCEPTED_VERSIONS;

  private final java.util.List<java.lang.String> acceptedVersions;

  org.springframework.cloud.configuration.SpringBootVersionVerifier(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/springframework/cloud/configuration/SpringBootVersionVerifier$1
       8: dup
       9: aload_0
      10: invokespecial #3                  // Method org/springframework/cloud/configuration/SpringBootVersionVerifier$1."<init>":(Lorg/springframework/cloud/configuration/SpringBootVersionVerifier;)V
      13: putfield      #4                  // Field ACCEPTED_VERSIONS:Ljava/util/Map;
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field acceptedVersions:Ljava/util/List;
      21: return

  public org.springframework.cloud.configuration.VerificationResult verify();
    Code:
       0: aload_0
       1: invokespecial #6                  // Method springBootVersionMatches:()Z
       4: istore_1
       5: iload_1
       6: ifeq          13
       9: invokestatic  #7                  // Method org/springframework/cloud/configuration/VerificationResult.compatible:()Lorg/springframework/cloud/configuration/VerificationResult;
      12: areturn
      13: aload_0
      14: invokespecial #8                  // Method errorDescription:()Ljava/lang/String;
      17: aload_0
      18: invokespecial #9                  // Method action:()Ljava/lang/String;
      21: invokestatic  #10                 // Method org/springframework/cloud/configuration/VerificationResult.notCompatible:(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/cloud/configuration/VerificationResult;
      24: areturn

  org.springframework.cloud.configuration.CompatibilityPredicate is1_5();
    Code:
       0: new           #11                 // class org/springframework/cloud/configuration/SpringBootVersionVerifier$2
       3: dup
       4: aload_0
       5: invokespecial #12                 // Method org/springframework/cloud/configuration/SpringBootVersionVerifier$2."<init>":(Lorg/springframework/cloud/configuration/SpringBootVersionVerifier;)V
       8: areturn

  private boolean bootVersionFromManifest(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getVersionFromManifest:()Ljava/lang/String;
       4: astore_2
       5: getstatic     #14                 // Field log:Lorg/apache/commons/logging/Log;
       8: invokeinterface #15,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      13: ifeq          48
      16: getstatic     #14                 // Field log:Lorg/apache/commons/logging/Log;
      19: new           #16                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
      26: ldc           #18                 // String Version found in Boot manifest [
      28: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_2
      32: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: ldc           #20                 // String ]
      37: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      48: aload_2
      49: invokestatic  #23                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      52: ifeq          67
      55: aload_2
      56: aload_1
      57: invokevirtual #24                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      60: ifeq          67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: ireturn

  java.lang.String getVersionFromManifest();
    Code:
       0: invokestatic  #25                 // Method org/springframework/boot/SpringBootVersion.getVersion:()Ljava/lang/String;
       3: areturn

  org.springframework.cloud.configuration.CompatibilityPredicate is2_0();
    Code:
       0: new           #26                 // class org/springframework/cloud/configuration/SpringBootVersionVerifier$3
       3: dup
       4: aload_0
       5: invokespecial #27                 // Method org/springframework/cloud/configuration/SpringBootVersionVerifier$3."<init>":(Lorg/springframework/cloud/configuration/SpringBootVersionVerifier;)V
       8: areturn

  org.springframework.cloud.configuration.CompatibilityPredicate is2_1();
    Code:
       0: new           #28                 // class org/springframework/cloud/configuration/SpringBootVersionVerifier$4
       3: dup
       4: aload_0
       5: invokespecial #29                 // Method org/springframework/cloud/configuration/SpringBootVersionVerifier$4."<init>":(Lorg/springframework/cloud/configuration/SpringBootVersionVerifier;)V
       8: areturn

  private java.lang.String errorDescription();
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method getVersionFromManifest:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: invokestatic  #23                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
       9: ifeq          26
      12: ldc           #30                 // String Spring Boot [%s] is not compatible with this Spring Cloud release train
      14: iconst_1
      15: anewarray     #31                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_1
      21: aastore
      22: invokestatic  #32                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      25: areturn
      26: ldc           #33                 // String Spring Boot is not compatible with this Spring Cloud release train
      28: areturn

  private java.lang.String action();
    Code:
       0: ldc           #34                 // String Change Spring Boot version to one of the following versions %s .\nYou can find the latest Spring Boot versions here [%s]. \nIf you want to learn more about the Spring Cloud Release train compatibility, you can visit this page [%s] and check the [Release Trains] section.\nIf you want to disable this check, just set the property [spring.cloud.compatibility-verifier.enabled=false]
       2: iconst_3
       3: anewarray     #31                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: aload_0
       9: getfield      #5                  // Field acceptedVersions:Ljava/util/List;
      12: aastore
      13: dup
      14: iconst_1
      15: ldc           #35                 // String https://spring.io/projects/spring-boot#learn
      17: aastore
      18: dup
      19: iconst_2
      20: ldc           #36                 // String https://spring.io/projects/spring-cloud#overview
      22: aastore
      23: invokestatic  #32                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      26: areturn

  private boolean springBootVersionMatches();
    Code:
       0: aload_0
       1: getfield      #5                  // Field acceptedVersions:Ljava/util/List;
       4: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          118
      19: aload_1
      20: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #40                 // class java/lang/String
      28: astore_2
      29: aload_0
      30: aload_2
      31: invokespecial #41                 // Method bootVersionFromManifest:(Ljava/lang/String;)Z
      34: ifeq          39
      37: iconst_1
      38: ireturn
      39: aload_0
      40: getfield      #4                  // Field ACCEPTED_VERSIONS:Ljava/util/Map;
      43: aload_0
      44: aload_2
      45: invokespecial #42                 // Method acceptedVersionWithoutX:(Ljava/lang/String;)Ljava/lang/String;
      48: invokeinterface #43,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      53: checkcast     #44                 // class org/springframework/cloud/configuration/CompatibilityPredicate
      56: astore_3
      57: aload_3
      58: ifnull        115
      61: aload_3
      62: invokeinterface #45,  1           // InterfaceMethod org/springframework/cloud/configuration/CompatibilityPredicate.isCompatible:()Z
      67: ifeq          115
      70: getstatic     #14                 // Field log:Lorg/apache/commons/logging/Log;
      73: invokeinterface #15,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      78: ifeq          113
      81: getstatic     #14                 // Field log:Lorg/apache/commons/logging/Log;
      84: new           #16                 // class java/lang/StringBuilder
      87: dup
      88: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
      91: ldc           #46                 // String Predicate [
      93: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      96: aload_3
      97: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     100: ldc           #48                 // String ] was matched
     102: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     105: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     108: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     113: iconst_1
     114: ireturn
     115: goto          10
     118: iconst_0
     119: ireturn

  private java.lang.String acceptedVersionWithoutX(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #49                 // String .x
       3: invokevirtual #50                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
       6: ifeq          21
       9: aload_1
      10: iconst_0
      11: aload_1
      12: ldc           #49                 // String .x
      14: invokevirtual #51                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      17: invokevirtual #52                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      20: areturn
      21: aload_1
      22: areturn

  static {};
    Code:
       0: ldc           #53                 // class org/springframework/cloud/configuration/SpringBootVersionVerifier
       2: invokestatic  #54                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #14                 // Field log:Lorg/apache/commons/logging/Log;
       8: return
}
