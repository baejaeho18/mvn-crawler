Compiled from "BasicPersistentEntity.java"
public class org.springframework.data.mapping.model.BasicPersistentEntity<T, P extends org.springframework.data.mapping.PersistentProperty<P>> implements org.springframework.data.mapping.model.MutablePersistentEntity<T, P> {
  private static final java.lang.String TYPE_MISMATCH;

  private final org.springframework.data.mapping.PreferredConstructor<T, P> constructor;

  private final org.springframework.data.util.TypeInformation<T> information;

  private final java.util.List<P> properties;

  private final java.util.List<P> persistentPropertiesCache;

  private final java.util.Comparator<P> comparator;

  private final java.util.Set<org.springframework.data.mapping.Association<P>> associations;

  private final java.util.Map<java.lang.String, P> propertyCache;

  private final java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.util.Optional<java.lang.annotation.Annotation>> annotationCache;

  private final org.springframework.util.MultiValueMap<java.lang.Class<? extends java.lang.annotation.Annotation>, P> propertyAnnotationCache;

  private P idProperty;

  private P versionProperty;

  private org.springframework.data.mapping.model.PersistentPropertyAccessorFactory propertyAccessorFactory;

  private final org.springframework.data.util.Lazy<org.springframework.data.mapping.Alias> typeAlias;

  public org.springframework.data.mapping.model.BasicPersistentEntity(org.springframework.data.util.TypeInformation<T>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #1                  // Method "<init>":(Lorg/springframework/data/util/TypeInformation;Ljava/util/Comparator;)V
       6: return

  public org.springframework.data.mapping.model.BasicPersistentEntity(org.springframework.data.util.TypeInformation<T>, java.util.Comparator<P>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #3                  // String Information must not be null!
       7: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #5                  // Field information:Lorg/springframework/data/util/TypeInformation;
      15: aload_0
      16: new           #6                  // class java/util/ArrayList
      19: dup
      20: invokespecial #7                  // Method java/util/ArrayList."<init>":()V
      23: putfield      #8                  // Field properties:Ljava/util/List;
      26: aload_0
      27: new           #6                  // class java/util/ArrayList
      30: dup
      31: invokespecial #7                  // Method java/util/ArrayList."<init>":()V
      34: putfield      #9                  // Field persistentPropertiesCache:Ljava/util/List;
      37: aload_0
      38: aload_2
      39: putfield      #10                 // Field comparator:Ljava/util/Comparator;
      42: aload_0
      43: aload_0
      44: invokestatic  #11                 // InterfaceMethod org/springframework/data/mapping/model/PreferredConstructorDiscoverer.discover:(Lorg/springframework/data/mapping/PersistentEntity;)Lorg/springframework/data/mapping/PreferredConstructor;
      47: putfield      #12                 // Field constructor:Lorg/springframework/data/mapping/PreferredConstructor;
      50: aload_0
      51: aload_2
      52: ifnonnull     65
      55: new           #13                 // class java/util/HashSet
      58: dup
      59: invokespecial #14                 // Method java/util/HashSet."<init>":()V
      62: goto          80
      65: new           #15                 // class java/util/TreeSet
      68: dup
      69: new           #16                 // class org/springframework/data/mapping/model/BasicPersistentEntity$AssociationComparator
      72: dup
      73: aload_2
      74: invokespecial #17                 // Method org/springframework/data/mapping/model/BasicPersistentEntity$AssociationComparator."<init>":(Ljava/util/Comparator;)V
      77: invokespecial #18                 // Method java/util/TreeSet."<init>":(Ljava/util/Comparator;)V
      80: putfield      #19                 // Field associations:Ljava/util/Set;
      83: aload_0
      84: new           #20                 // class java/util/HashMap
      87: dup
      88: invokespecial #21                 // Method java/util/HashMap."<init>":()V
      91: putfield      #22                 // Field propertyCache:Ljava/util/Map;
      94: aload_0
      95: new           #20                 // class java/util/HashMap
      98: dup
      99: invokespecial #21                 // Method java/util/HashMap."<init>":()V
     102: putfield      #23                 // Field annotationCache:Ljava/util/Map;
     105: aload_0
     106: new           #24                 // class org/springframework/util/LinkedMultiValueMap
     109: dup
     110: invokespecial #25                 // Method org/springframework/util/LinkedMultiValueMap."<init>":()V
     113: putfield      #26                 // Field propertyAnnotationCache:Lorg/springframework/util/MultiValueMap;
     116: aload_0
     117: getstatic     #27                 // Field org/springframework/data/mapping/model/BeanWrapperPropertyAccessorFactory.INSTANCE:Lorg/springframework/data/mapping/model/BeanWrapperPropertyAccessorFactory;
     120: putfield      #28                 // Field propertyAccessorFactory:Lorg/springframework/data/mapping/model/PersistentPropertyAccessorFactory;
     123: aload_0
     124: aload_0
     125: invokedynamic #29,  0             // InvokeDynamic #0:get:(Lorg/springframework/data/mapping/model/BasicPersistentEntity;)Ljava/util/function/Supplier;
     130: invokestatic  #30                 // Method org/springframework/data/util/Lazy.of:(Ljava/util/function/Supplier;)Lorg/springframework/data/util/Lazy;
     133: putfield      #31                 // Field typeAlias:Lorg/springframework/data/util/Lazy;
     136: return

  public org.springframework.data.mapping.PreferredConstructor<T, P> getPersistenceConstructor();
    Code:
       0: aload_0
       1: getfield      #12                 // Field constructor:Lorg/springframework/data/mapping/PreferredConstructor;
       4: areturn

  public boolean isConstructorArgument(org.springframework.data.mapping.PersistentProperty<?>);
    Code:
       0: aload_0
       1: getfield      #12                 // Field constructor:Lorg/springframework/data/mapping/PreferredConstructor;
       4: ifnull        22
       7: aload_0
       8: getfield      #12                 // Field constructor:Lorg/springframework/data/mapping/PreferredConstructor;
      11: aload_1
      12: invokevirtual #32                 // Method org/springframework/data/mapping/PreferredConstructor.isConstructorParameter:(Lorg/springframework/data/mapping/PersistentProperty;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public boolean isIdProperty(org.springframework.data.mapping.PersistentProperty<?>);
    Code:
       0: aload_0
       1: getfield      #33                 // Field idProperty:Lorg/springframework/data/mapping/PersistentProperty;
       4: ifnull        22
       7: aload_0
       8: getfield      #33                 // Field idProperty:Lorg/springframework/data/mapping/PersistentProperty;
      11: aload_1
      12: invokevirtual #34                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public boolean isVersionProperty(org.springframework.data.mapping.PersistentProperty<?>);
    Code:
       0: aload_0
       1: getfield      #35                 // Field versionProperty:Lorg/springframework/data/mapping/PersistentProperty;
       4: ifnull        22
       7: aload_0
       8: getfield      #35                 // Field versionProperty:Lorg/springframework/data/mapping/PersistentProperty;
      11: aload_1
      12: invokevirtual #34                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method getType:()Ljava/lang/Class;
       4: invokevirtual #37                 // Method java/lang/Class.getName:()Ljava/lang/String;
       7: areturn

  public P getIdProperty();
    Code:
       0: aload_0
       1: getfield      #33                 // Field idProperty:Lorg/springframework/data/mapping/PersistentProperty;
       4: areturn

  public P getVersionProperty();
    Code:
       0: aload_0
       1: getfield      #35                 // Field versionProperty:Lorg/springframework/data/mapping/PersistentProperty;
       4: areturn

  public boolean hasIdProperty();
    Code:
       0: aload_0
       1: getfield      #33                 // Field idProperty:Lorg/springframework/data/mapping/PersistentProperty;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean hasVersionProperty();
    Code:
       0: aload_0
       1: getfield      #35                 // Field versionProperty:Lorg/springframework/data/mapping/PersistentProperty;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void addPersistentProperty(P);
    Code:
       0: aload_1
       1: ldc           #38                 // String Property must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #8                  // Field properties:Ljava/util/List;
      10: aload_1
      11: invokeinterface #39,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      16: ifeq          20
      19: return
      20: aload_0
      21: getfield      #8                  // Field properties:Ljava/util/List;
      24: aload_1
      25: invokeinterface #40,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      30: pop
      31: aload_1
      32: invokeinterface #41,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.isTransient:()Z
      37: ifne          60
      40: aload_1
      41: invokeinterface #42,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.isAssociation:()Z
      46: ifne          60
      49: aload_0
      50: getfield      #9                  // Field persistentPropertiesCache:Ljava/util/List;
      53: aload_1
      54: invokeinterface #40,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      59: pop
      60: aload_0
      61: getfield      #22                 // Field propertyCache:Ljava/util/Map;
      64: aload_1
      65: invokeinterface #43,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getName:()Ljava/lang/String;
      70: invokeinterface #44,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      75: ifne          95
      78: aload_0
      79: getfield      #22                 // Field propertyCache:Ljava/util/Map;
      82: aload_1
      83: invokeinterface #43,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getName:()Ljava/lang/String;
      88: aload_1
      89: invokeinterface #45,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      94: pop
      95: aload_0
      96: aload_1
      97: invokevirtual #46                 // Method returnPropertyIfBetterIdPropertyCandidateOrNull:(Lorg/springframework/data/mapping/PersistentProperty;)Lorg/springframework/data/mapping/PersistentProperty;
     100: astore_2
     101: aload_2
     102: ifnull        110
     105: aload_0
     106: aload_2
     107: putfield      #33                 // Field idProperty:Lorg/springframework/data/mapping/PersistentProperty;
     110: aload_1
     111: invokeinterface #47,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.isVersionProperty:()Z
     116: ifeq          168
     119: aload_0
     120: getfield      #35                 // Field versionProperty:Lorg/springframework/data/mapping/PersistentProperty;
     123: astore_3
     124: aload_3
     125: ifnull        163
     128: new           #48                 // class org/springframework/data/mapping/MappingException
     131: dup
     132: ldc           #49                 // String Attempt to add version property %s but already have property %s registered as version. Check your mapping configuration!
     134: iconst_2
     135: anewarray     #50                 // class java/lang/Object
     138: dup
     139: iconst_0
     140: aload_1
     141: invokeinterface #51,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getField:()Ljava/lang/reflect/Field;
     146: aastore
     147: dup
     148: iconst_1
     149: aload_3
     150: invokeinterface #51,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getField:()Ljava/lang/reflect/Field;
     155: aastore
     156: invokestatic  #52                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     159: invokespecial #53                 // Method org/springframework/data/mapping/MappingException."<init>":(Ljava/lang/String;)V
     162: athrow
     163: aload_0
     164: aload_1
     165: putfield      #35                 // Field versionProperty:Lorg/springframework/data/mapping/PersistentProperty;
     168: return

  protected P returnPropertyIfBetterIdPropertyCandidateOrNull(P);
    Code:
       0: aload_1
       1: invokeinterface #54,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.isIdProperty:()Z
       6: ifne          11
       9: aconst_null
      10: areturn
      11: aload_0
      12: getfield      #33                 // Field idProperty:Lorg/springframework/data/mapping/PersistentProperty;
      15: astore_2
      16: aload_2
      17: ifnull        55
      20: new           #48                 // class org/springframework/data/mapping/MappingException
      23: dup
      24: ldc           #55                 // String Attempt to add id property %s but already have property %s registered as id. Check your mapping configuration!
      26: iconst_2
      27: anewarray     #50                 // class java/lang/Object
      30: dup
      31: iconst_0
      32: aload_1
      33: invokeinterface #51,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getField:()Ljava/lang/reflect/Field;
      38: aastore
      39: dup
      40: iconst_1
      41: aload_2
      42: invokeinterface #51,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getField:()Ljava/lang/reflect/Field;
      47: aastore
      48: invokestatic  #52                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      51: invokespecial #53                 // Method org/springframework/data/mapping/MappingException."<init>":(Ljava/lang/String;)V
      54: athrow
      55: aload_1
      56: areturn

  public void addAssociation(org.springframework.data.mapping.Association<P>);
    Code:
       0: aload_1
       1: ldc           #56                 // String Association must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #19                 // Field associations:Ljava/util/Set;
      10: aload_1
      11: invokeinterface #57,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      16: ifne          30
      19: aload_0
      20: getfield      #19                 // Field associations:Ljava/util/Set;
      23: aload_1
      24: invokeinterface #58,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      29: pop
      30: return

  public P getPersistentProperty(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #22                 // Field propertyCache:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #59,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #60                 // class org/springframework/data/mapping/PersistentProperty
      13: areturn

  public java.lang.Iterable<P> getPersistentProperties(java.lang.Class<? extends java.lang.annotation.Annotation>);
    Code:
       0: aload_1
       1: ldc           #61                 // String Annotation type must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #26                 // Field propertyAnnotationCache:Lorg/springframework/util/MultiValueMap;
      10: aload_1
      11: aload_0
      12: invokedynamic #62,  0             // InvokeDynamic #1:apply:(Lorg/springframework/data/mapping/model/BasicPersistentEntity;)Ljava/util/function/Function;
      17: invokeinterface #63,  3           // InterfaceMethod org/springframework/util/MultiValueMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      22: checkcast     #64                 // class java/lang/Iterable
      25: areturn

  private java.util.List<P> doFindPersistentProperty(java.lang.Class<? extends java.lang.annotation.Annotation>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field properties:Ljava/util/List;
       4: invokeinterface #65,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
       9: aload_1
      10: invokedynamic #66,  0             // InvokeDynamic #2:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      15: invokeinterface #67,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      20: invokestatic  #68                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      23: invokeinterface #69,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      28: checkcast     #70                 // class java/util/List
      31: astore_2
      32: aload_2
      33: invokeinterface #71,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      38: ifne          43
      41: aload_2
      42: areturn
      43: aload_0
      44: getfield      #19                 // Field associations:Ljava/util/Set;
      47: invokeinterface #72,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      52: invokedynamic #73,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      57: invokeinterface #74,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      62: aload_1
      63: invokedynamic #75,  0             // InvokeDynamic #4:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      68: invokeinterface #67,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      73: invokestatic  #68                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      76: invokeinterface #69,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      81: checkcast     #70                 // class java/util/List
      84: areturn

  public java.lang.Class<T> getType();
    Code:
       0: aload_0
       1: getfield      #5                  // Field information:Lorg/springframework/data/util/TypeInformation;
       4: invokeinterface #76,  1           // InterfaceMethod org/springframework/data/util/TypeInformation.getType:()Ljava/lang/Class;
       9: areturn

  public org.springframework.data.mapping.Alias getTypeAlias();
    Code:
       0: aload_0
       1: getfield      #31                 // Field typeAlias:Lorg/springframework/data/util/Lazy;
       4: invokevirtual #77                 // Method org/springframework/data/util/Lazy.get:()Ljava/lang/Object;
       7: checkcast     #78                 // class org/springframework/data/mapping/Alias
      10: areturn

  public org.springframework.data.util.TypeInformation<T> getTypeInformation();
    Code:
       0: aload_0
       1: getfield      #5                  // Field information:Lorg/springframework/data/util/TypeInformation;
       4: areturn

  public void doWithProperties(org.springframework.data.mapping.PropertyHandler<P>);
    Code:
       0: aload_1
       1: ldc           #79                 // String PropertyHandler must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #9                  // Field persistentPropertiesCache:Ljava/util/List;
      10: invokeinterface #80,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          45
      25: aload_2
      26: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #60                 // class org/springframework/data/mapping/PersistentProperty
      34: astore_3
      35: aload_1
      36: aload_3
      37: invokeinterface #83,  2           // InterfaceMethod org/springframework/data/mapping/PropertyHandler.doWithPersistentProperty:(Lorg/springframework/data/mapping/PersistentProperty;)V
      42: goto          16
      45: return

  public void doWithProperties(org.springframework.data.mapping.SimplePropertyHandler);
    Code:
       0: aload_1
       1: ldc           #84                 // String Handler must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #9                  // Field persistentPropertiesCache:Ljava/util/List;
      10: invokeinterface #80,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          45
      25: aload_2
      26: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #60                 // class org/springframework/data/mapping/PersistentProperty
      34: astore_3
      35: aload_1
      36: aload_3
      37: invokeinterface #85,  2           // InterfaceMethod org/springframework/data/mapping/SimplePropertyHandler.doWithPersistentProperty:(Lorg/springframework/data/mapping/PersistentProperty;)V
      42: goto          16
      45: return

  public void doWithAssociations(org.springframework.data.mapping.AssociationHandler<P>);
    Code:
       0: aload_1
       1: ldc           #84                 // String Handler must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #19                 // Field associations:Ljava/util/Set;
      10: invokeinterface #86,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          45
      25: aload_2
      26: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #87                 // class org/springframework/data/mapping/Association
      34: astore_3
      35: aload_1
      36: aload_3
      37: invokeinterface #88,  2           // InterfaceMethod org/springframework/data/mapping/AssociationHandler.doWithAssociation:(Lorg/springframework/data/mapping/Association;)V
      42: goto          16
      45: return

  public void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler);
    Code:
       0: aload_1
       1: ldc           #84                 // String Handler must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #19                 // Field associations:Ljava/util/Set;
      10: invokeinterface #86,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          45
      25: aload_2
      26: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #87                 // class org/springframework/data/mapping/Association
      34: astore_3
      35: aload_1
      36: aload_3
      37: invokeinterface #89,  2           // InterfaceMethod org/springframework/data/mapping/SimpleAssociationHandler.doWithAssociation:(Lorg/springframework/data/mapping/Association;)V
      42: goto          16
      45: return

  public <A extends java.lang.annotation.Annotation> A findAnnotation(java.lang.Class<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #90                 // Method doFindAnnotation:(Ljava/lang/Class;)Ljava/util/Optional;
       5: aconst_null
       6: invokevirtual #91                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #92                 // class java/lang/annotation/Annotation
      12: areturn

  public <A extends java.lang.annotation.Annotation> boolean isAnnotationPresent(java.lang.Class<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #90                 // Method doFindAnnotation:(Ljava/lang/Class;)Ljava/util/Optional;
       5: invokevirtual #93                 // Method java/util/Optional.isPresent:()Z
       8: ireturn

  private <A extends java.lang.annotation.Annotation> java.util.Optional<A> doFindAnnotation(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #23                 // Field annotationCache:Ljava/util/Map;
       4: aload_1
       5: aload_0
       6: invokedynamic #94,  0             // InvokeDynamic #5:apply:(Lorg/springframework/data/mapping/model/BasicPersistentEntity;)Ljava/util/function/Function;
      11: invokeinterface #95,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      16: checkcast     #96                 // class java/util/Optional
      19: areturn

  public void verify();
    Code:
       0: aload_0
       1: getfield      #10                 // Field comparator:Ljava/util/Comparator;
       4: ifnull        33
       7: aload_0
       8: getfield      #8                  // Field properties:Ljava/util/List;
      11: aload_0
      12: getfield      #10                 // Field comparator:Ljava/util/Comparator;
      15: invokeinterface #97,  2           // InterfaceMethod java/util/List.sort:(Ljava/util/Comparator;)V
      20: aload_0
      21: getfield      #9                  // Field persistentPropertiesCache:Ljava/util/List;
      24: aload_0
      25: getfield      #10                 // Field comparator:Ljava/util/Comparator;
      28: invokeinterface #97,  2           // InterfaceMethod java/util/List.sort:(Ljava/util/Comparator;)V
      33: return

  public void setPersistentPropertyAccessorFactory(org.springframework.data.mapping.model.PersistentPropertyAccessorFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field propertyAccessorFactory:Lorg/springframework/data/mapping/model/PersistentPropertyAccessorFactory;
       5: return

  public org.springframework.data.mapping.PersistentPropertyAccessor getPropertyAccessor(java.lang.Object);
    Code:
       0: aload_1
       1: ldc           #98                 // String Target bean must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #36                 // Method getType:()Ljava/lang/Class;
      10: aload_1
      11: invokevirtual #99                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      14: aload_0
      15: aload_1
      16: invokedynamic #100,  0            // InvokeDynamic #6:get:(Lorg/springframework/data/mapping/model/BasicPersistentEntity;Ljava/lang/Object;)Ljava/util/function/Supplier;
      21: invokestatic  #101                // Method org/springframework/util/Assert.isTrue:(ZLjava/util/function/Supplier;)V
      24: aload_0
      25: getfield      #28                 // Field propertyAccessorFactory:Lorg/springframework/data/mapping/model/PersistentPropertyAccessorFactory;
      28: aload_0
      29: aload_1
      30: invokeinterface #102,  3          // InterfaceMethod org/springframework/data/mapping/model/PersistentPropertyAccessorFactory.getPropertyAccessor:(Lorg/springframework/data/mapping/PersistentEntity;Ljava/lang/Object;)Lorg/springframework/data/mapping/PersistentPropertyAccessor;
      35: areturn

  public org.springframework.data.mapping.IdentifierAccessor getIdentifierAccessor(java.lang.Object);
    Code:
       0: aload_1
       1: ldc           #98                 // String Target bean must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #36                 // Method getType:()Ljava/lang/Class;
      10: aload_1
      11: invokevirtual #99                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      14: aload_0
      15: aload_1
      16: invokedynamic #103,  0            // InvokeDynamic #7:get:(Lorg/springframework/data/mapping/model/BasicPersistentEntity;Ljava/lang/Object;)Ljava/util/function/Supplier;
      21: invokestatic  #101                // Method org/springframework/util/Assert.isTrue:(ZLjava/util/function/Supplier;)V
      24: aload_0
      25: invokevirtual #104                // Method hasIdProperty:()Z
      28: ifeq          43
      31: new           #105                // class org/springframework/data/mapping/model/IdPropertyIdentifierAccessor
      34: dup
      35: aload_0
      36: aload_1
      37: invokespecial #106                // Method org/springframework/data/mapping/model/IdPropertyIdentifierAccessor."<init>":(Lorg/springframework/data/mapping/PersistentEntity;Ljava/lang/Object;)V
      40: goto          51
      43: new           #107                // class org/springframework/data/mapping/model/BasicPersistentEntity$AbsentIdentifierAccessor
      46: dup
      47: aload_1
      48: invokespecial #108                // Method org/springframework/data/mapping/model/BasicPersistentEntity$AbsentIdentifierAccessor."<init>":(Ljava/lang/Object;)V
      51: areturn

  public java.util.Iterator<P> iterator();
    Code:
       0: aload_0
       1: getfield      #8                  // Field properties:Ljava/util/List;
       4: invokestatic  #109                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
       7: invokeinterface #80,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: areturn

  private static org.springframework.data.mapping.Alias getAliasFromAnnotation(java.lang.Class<?>);
    Code:
       0: aload_0
       1: ldc           #110                // class org/springframework/data/annotation/TypeAlias
       3: invokestatic  #111                // Method org/springframework/core/annotation/AnnotatedElementUtils.findMergedAnnotation:(Ljava/lang/reflect/AnnotatedElement;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
       6: invokestatic  #112                // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
       9: invokedynamic #113,  0            // InvokeDynamic #8:apply:()Ljava/util/function/Function;
      14: invokevirtual #114                // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      17: invokedynamic #115,  0            // InvokeDynamic #9:test:()Ljava/util/function/Predicate;
      22: invokevirtual #116                // Method java/util/Optional.filter:(Ljava/util/function/Predicate;)Ljava/util/Optional;
      25: astore_1
      26: aload_1
      27: aconst_null
      28: invokevirtual #91                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      31: invokestatic  #117                // Method org/springframework/data/mapping/Alias.ofNullable:(Ljava/lang/Object;)Lorg/springframework/data/mapping/Alias;
      34: areturn

  private java.lang.String lambda$getIdentifierAccessor$5(java.lang.Object);
    Code:
       0: ldc           #119                // String Target bean of type %s is not of type of the persistent entity (%s)!
       2: iconst_2
       3: anewarray     #50                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: aload_1
       9: invokevirtual #120                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      12: invokevirtual #37                 // Method java/lang/Class.getName:()Ljava/lang/String;
      15: aastore
      16: dup
      17: iconst_1
      18: aload_0
      19: invokevirtual #36                 // Method getType:()Ljava/lang/Class;
      22: invokevirtual #37                 // Method java/lang/Class.getName:()Ljava/lang/String;
      25: aastore
      26: invokestatic  #52                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      29: areturn

  private java.lang.String lambda$getPropertyAccessor$4(java.lang.Object);
    Code:
       0: ldc           #119                // String Target bean of type %s is not of type of the persistent entity (%s)!
       2: iconst_2
       3: anewarray     #50                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: aload_1
       9: invokevirtual #120                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      12: invokevirtual #37                 // Method java/lang/Class.getName:()Ljava/lang/String;
      15: aastore
      16: dup
      17: iconst_1
      18: aload_0
      19: invokevirtual #36                 // Method getType:()Ljava/lang/Class;
      22: invokevirtual #37                 // Method java/lang/Class.getName:()Ljava/lang/String;
      25: aastore
      26: invokestatic  #52                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      29: areturn

  private java.util.Optional lambda$doFindAnnotation$3(java.lang.Class);
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method getType:()Ljava/lang/Class;
       4: aload_1
       5: invokestatic  #111                // Method org/springframework/core/annotation/AnnotatedElementUtils.findMergedAnnotation:(Ljava/lang/reflect/AnnotatedElement;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
       8: invokestatic  #112                // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      11: areturn

  private static boolean lambda$doFindPersistentProperty$2(java.lang.Class, org.springframework.data.mapping.PersistentProperty);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #121,  2          // InterfaceMethod org/springframework/data/mapping/PersistentProperty.isAnnotationPresent:(Ljava/lang/Class;)Z
       7: ireturn

  private static boolean lambda$doFindPersistentProperty$1(java.lang.Class, org.springframework.data.mapping.PersistentProperty);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #121,  2          // InterfaceMethod org/springframework/data/mapping/PersistentProperty.isAnnotationPresent:(Ljava/lang/Class;)Z
       7: ireturn

  private org.springframework.data.mapping.Alias lambda$new$0();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method getType:()Ljava/lang/Class;
       4: invokestatic  #122                // Method getAliasFromAnnotation:(Ljava/lang/Class;)Lorg/springframework/data/mapping/Alias;
       7: areturn
}
