Compiled from "CustomConversions.java"
public class org.springframework.data.convert.CustomConversions {
  private static final org.slf4j.Logger LOG;

  private static final java.lang.String READ_CONVERTER_NOT_SIMPLE;

  private static final java.lang.String WRITE_CONVERTER_NOT_SIMPLE;

  private static final java.lang.String NOT_A_CONVERTER;

  private static final java.util.List<java.lang.Object> DEFAULT_CONVERTERS;

  private final org.springframework.data.mapping.model.SimpleTypeHolder simpleTypeHolder;

  private final java.util.List<java.lang.Object> converters;

  private final java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> readingPairs;

  private final java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> writingPairs;

  private final java.util.Set<java.lang.Class<?>> customSimpleTypes;

  private final org.springframework.data.convert.CustomConversions$ConversionTargetsCache customReadTargetTypes;

  private final org.springframework.data.convert.CustomConversions$ConversionTargetsCache customWriteTargetTypes;

  private final java.util.function.Function<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair, java.util.Optional<java.lang.Class<?>>> getReadTarget;

  private java.util.function.Function<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair, java.util.Optional<java.lang.Class<?>>> getWriteTarget;

  private java.util.function.Function<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair, java.util.Optional<java.lang.Class<?>>> getRawWriteTarget;

  public org.springframework.data.convert.CustomConversions(org.springframework.data.convert.CustomConversions$StoreConversions, java.util.Collection<?>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/LinkedHashSet
       8: dup
       9: invokespecial #3                  // Method java/util/LinkedHashSet."<init>":()V
      12: putfield      #4                  // Field readingPairs:Ljava/util/Set;
      15: aload_0
      16: new           #2                  // class java/util/LinkedHashSet
      19: dup
      20: invokespecial #3                  // Method java/util/LinkedHashSet."<init>":()V
      23: putfield      #5                  // Field writingPairs:Ljava/util/Set;
      26: aload_0
      27: new           #6                  // class java/util/HashSet
      30: dup
      31: invokespecial #7                  // Method java/util/HashSet."<init>":()V
      34: putfield      #8                  // Field customSimpleTypes:Ljava/util/Set;
      37: aload_0
      38: new           #9                  // class org/springframework/data/convert/CustomConversions$ConversionTargetsCache
      41: dup
      42: invokespecial #10                 // Method org/springframework/data/convert/CustomConversions$ConversionTargetsCache."<init>":()V
      45: putfield      #11                 // Field customReadTargetTypes:Lorg/springframework/data/convert/CustomConversions$ConversionTargetsCache;
      48: aload_0
      49: new           #9                  // class org/springframework/data/convert/CustomConversions$ConversionTargetsCache
      52: dup
      53: invokespecial #10                 // Method org/springframework/data/convert/CustomConversions$ConversionTargetsCache."<init>":()V
      56: putfield      #12                 // Field customWriteTargetTypes:Lorg/springframework/data/convert/CustomConversions$ConversionTargetsCache;
      59: aload_0
      60: aload_0
      61: invokedynamic #13,  0             // InvokeDynamic #0:apply:(Lorg/springframework/data/convert/CustomConversions;)Ljava/util/function/Function;
      66: putfield      #14                 // Field getReadTarget:Ljava/util/function/Function;
      69: aload_0
      70: aload_0
      71: invokedynamic #15,  0             // InvokeDynamic #1:apply:(Lorg/springframework/data/convert/CustomConversions;)Ljava/util/function/Function;
      76: putfield      #16                 // Field getWriteTarget:Ljava/util/function/Function;
      79: aload_0
      80: aload_0
      81: invokedynamic #17,  0             // InvokeDynamic #2:apply:(Lorg/springframework/data/convert/CustomConversions;)Ljava/util/function/Function;
      86: putfield      #18                 // Field getRawWriteTarget:Ljava/util/function/Function;
      89: aload_1
      90: ldc           #19                 // String StoreConversions must not be null!
      92: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      95: aload_2
      96: ldc           #21                 // String List of converters must not be null!
      98: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
     101: new           #22                 // class java/util/ArrayList
     104: dup
     105: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
     108: astore_3
     109: aload_3
     110: aload_2
     111: invokeinterface #24,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
     116: pop
     117: aload_3
     118: aload_1
     119: invokevirtual #25                 // Method org/springframework/data/convert/CustomConversions$StoreConversions.getStoreConverters:()Ljava/util/Collection;
     122: invokeinterface #24,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
     127: pop
     128: aload_3
     129: getstatic     #26                 // Field DEFAULT_CONVERTERS:Ljava/util/List;
     132: invokeinterface #24,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
     137: pop
     138: aload_3
     139: invokeinterface #27,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     144: aload_1
     145: invokedynamic #28,  0             // InvokeDynamic #3:apply:(Lorg/springframework/data/convert/CustomConversions$StoreConversions;)Ljava/util/function/Function;
     150: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     155: aload_0
     156: invokedynamic #30,  0             // InvokeDynamic #4:accept:(Lorg/springframework/data/convert/CustomConversions;)Ljava/util/function/Consumer;
     161: invokeinterface #31,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
     166: aload_3
     167: invokestatic  #32                 // Method java/util/Collections.reverse:(Ljava/util/List;)V
     170: aload_0
     171: aload_3
     172: invokestatic  #33                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
     175: putfield      #34                 // Field converters:Ljava/util/List;
     178: aload_0
     179: new           #35                 // class org/springframework/data/mapping/model/SimpleTypeHolder
     182: dup
     183: aload_0
     184: getfield      #8                  // Field customSimpleTypes:Ljava/util/Set;
     187: aload_1
     188: invokevirtual #36                 // Method org/springframework/data/convert/CustomConversions$StoreConversions.getStoreTypeHolder:()Lorg/springframework/data/mapping/model/SimpleTypeHolder;
     191: invokespecial #37                 // Method org/springframework/data/mapping/model/SimpleTypeHolder."<init>":(Ljava/util/Set;Lorg/springframework/data/mapping/model/SimpleTypeHolder;)V
     194: putfield      #38                 // Field simpleTypeHolder:Lorg/springframework/data/mapping/model/SimpleTypeHolder;
     197: return

  public org.springframework.data.mapping.model.SimpleTypeHolder getSimpleTypeHolder();
    Code:
       0: aload_0
       1: getfield      #38                 // Field simpleTypeHolder:Lorg/springframework/data/mapping/model/SimpleTypeHolder;
       4: areturn

  public boolean isSimpleType(java.lang.Class<?>);
    Code:
       0: aload_1
       1: ldc           #39                 // String Type must not be null!
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #38                 // Field simpleTypeHolder:Lorg/springframework/data/mapping/model/SimpleTypeHolder;
      10: aload_1
      11: invokevirtual #40                 // Method org/springframework/data/mapping/model/SimpleTypeHolder.isSimpleType:(Ljava/lang/Class;)Z
      14: ireturn

  public void registerConvertersIn(org.springframework.core.convert.converter.ConverterRegistry);
    Code:
       0: aload_1
       1: ldc           #41                 // String ConversionService must not be null!
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #34                 // Field converters:Ljava/util/List;
      10: aload_0
      11: aload_1
      12: invokedynamic #42,  0             // InvokeDynamic #5:accept:(Lorg/springframework/data/convert/CustomConversions;Lorg/springframework/core/convert/converter/ConverterRegistry;)Ljava/util/function/Consumer;
      17: invokeinterface #43,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      22: return

  private void registerConverterIn(java.lang.Object, org.springframework.core.convert.converter.ConverterRegistry);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_1
       3: instanceof    #44                 // class org/springframework/core/convert/converter/Converter
       6: ifeq          26
       9: aload_2
      10: ldc           #44                 // class org/springframework/core/convert/converter/Converter
      12: aload_1
      13: invokevirtual #45                 // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #44                 // class org/springframework/core/convert/converter/Converter
      19: invokeinterface #46,  2           // InterfaceMethod org/springframework/core/convert/converter/ConverterRegistry.addConverter:(Lorg/springframework/core/convert/converter/Converter;)V
      24: iconst_1
      25: istore_3
      26: aload_1
      27: instanceof    #47                 // class org/springframework/core/convert/converter/ConverterFactory
      30: ifeq          50
      33: aload_2
      34: ldc           #47                 // class org/springframework/core/convert/converter/ConverterFactory
      36: aload_1
      37: invokevirtual #45                 // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      40: checkcast     #47                 // class org/springframework/core/convert/converter/ConverterFactory
      43: invokeinterface #48,  2           // InterfaceMethod org/springframework/core/convert/converter/ConverterRegistry.addConverterFactory:(Lorg/springframework/core/convert/converter/ConverterFactory;)V
      48: iconst_1
      49: istore_3
      50: aload_1
      51: instanceof    #49                 // class org/springframework/core/convert/converter/GenericConverter
      54: ifeq          74
      57: aload_2
      58: ldc           #49                 // class org/springframework/core/convert/converter/GenericConverter
      60: aload_1
      61: invokevirtual #45                 // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      64: checkcast     #49                 // class org/springframework/core/convert/converter/GenericConverter
      67: invokeinterface #50,  2           // InterfaceMethod org/springframework/core/convert/converter/ConverterRegistry.addConverter:(Lorg/springframework/core/convert/converter/GenericConverter;)V
      72: iconst_1
      73: istore_3
      74: aload_1
      75: instanceof    #51                 // class org/springframework/data/convert/ConverterBuilder$ConverterAware
      78: ifeq          109
      81: ldc           #51                 // class org/springframework/data/convert/ConverterBuilder$ConverterAware
      83: aload_1
      84: invokevirtual #45                 // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      87: checkcast     #51                 // class org/springframework/data/convert/ConverterBuilder$ConverterAware
      90: invokeinterface #52,  1           // InterfaceMethod org/springframework/data/convert/ConverterBuilder$ConverterAware.getConverters:()Ljava/util/Set;
      95: aload_0
      96: aload_2
      97: invokedynamic #53,  0             // InvokeDynamic #6:accept:(Lorg/springframework/data/convert/CustomConversions;Lorg/springframework/core/convert/converter/ConverterRegistry;)Ljava/util/function/Consumer;
     102: invokeinterface #54,  2           // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
     107: iconst_1
     108: istore_3
     109: iload_3
     110: ifne          134
     113: new           #55                 // class java/lang/IllegalArgumentException
     116: dup
     117: ldc           #57                 // String Converter %s is neither a Spring Converter, GenericConverter or ConverterFactory!
     119: iconst_1
     120: anewarray     #58                 // class java/lang/Object
     123: dup
     124: iconst_0
     125: aload_1
     126: aastore
     127: invokestatic  #59                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     130: invokespecial #60                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     133: athrow
     134: return

  private void register(org.springframework.data.convert.CustomConversions$ConverterRegistration);
    Code:
       0: aload_1
       1: ldc           #61                 // String Converter registration must not be null!
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: invokevirtual #62                 // Method org/springframework/data/convert/CustomConversions$ConverterRegistration.getConvertiblePair:()Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;
      10: astore_2
      11: aload_1
      12: invokevirtual #63                 // Method org/springframework/data/convert/CustomConversions$ConverterRegistration.isReading:()Z
      15: ifeq          78
      18: aload_0
      19: getfield      #4                  // Field readingPairs:Ljava/util/Set;
      22: aload_2
      23: invokeinterface #64,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      28: pop
      29: getstatic     #65                 // Field LOG:Lorg/slf4j/Logger;
      32: invokeinterface #66,  1           // InterfaceMethod org/slf4j/Logger.isWarnEnabled:()Z
      37: ifeq          78
      40: aload_1
      41: invokevirtual #67                 // Method org/springframework/data/convert/CustomConversions$ConverterRegistration.isSimpleSourceType:()Z
      44: ifne          78
      47: getstatic     #65                 // Field LOG:Lorg/slf4j/Logger;
      50: ldc           #68                 // String Registering converter from %s to %s as reading converter although it doesn\'t convert from a store-supported type! You might wanna check you annotation setup at the converter implementation.
      52: iconst_2
      53: anewarray     #58                 // class java/lang/Object
      56: dup
      57: iconst_0
      58: aload_2
      59: invokevirtual #69                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getSourceType:()Ljava/lang/Class;
      62: aastore
      63: dup
      64: iconst_1
      65: aload_2
      66: invokevirtual #70                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getTargetType:()Ljava/lang/Class;
      69: aastore
      70: invokestatic  #59                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      73: invokeinterface #71,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      78: aload_1
      79: invokevirtual #72                 // Method org/springframework/data/convert/CustomConversions$ConverterRegistration.isWriting:()Z
      82: ifeq          159
      85: aload_0
      86: getfield      #5                  // Field writingPairs:Ljava/util/Set;
      89: aload_2
      90: invokeinterface #64,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      95: pop
      96: aload_0
      97: getfield      #8                  // Field customSimpleTypes:Ljava/util/Set;
     100: aload_2
     101: invokevirtual #69                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getSourceType:()Ljava/lang/Class;
     104: invokeinterface #64,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     109: pop
     110: getstatic     #65                 // Field LOG:Lorg/slf4j/Logger;
     113: invokeinterface #66,  1           // InterfaceMethod org/slf4j/Logger.isWarnEnabled:()Z
     118: ifeq          159
     121: aload_1
     122: invokevirtual #73                 // Method org/springframework/data/convert/CustomConversions$ConverterRegistration.isSimpleTargetType:()Z
     125: ifne          159
     128: getstatic     #65                 // Field LOG:Lorg/slf4j/Logger;
     131: ldc           #74                 // String Registering converter from %s to %s as writing converter although it doesn\'t convert to a store-supported type! You might wanna check you annotation setup at the converter implementation.
     133: iconst_2
     134: anewarray     #58                 // class java/lang/Object
     137: dup
     138: iconst_0
     139: aload_2
     140: invokevirtual #69                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getSourceType:()Ljava/lang/Class;
     143: aastore
     144: dup
     145: iconst_1
     146: aload_2
     147: invokevirtual #70                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getTargetType:()Ljava/lang/Class;
     150: aastore
     151: invokestatic  #59                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     154: invokeinterface #71,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     159: return

  public java.util.Optional<java.lang.Class<?>> getCustomWriteTarget(java.lang.Class<?>);
    Code:
       0: aload_1
       1: ldc           #75                 // String Source type must not be null!
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #12                 // Field customWriteTargetTypes:Lorg/springframework/data/convert/CustomConversions$ConversionTargetsCache;
      10: aload_1
      11: aload_0
      12: getfield      #18                 // Field getRawWriteTarget:Ljava/util/function/Function;
      15: invokevirtual #76                 // Method org/springframework/data/convert/CustomConversions$ConversionTargetsCache.computeIfAbsent:(Ljava/lang/Class;Ljava/util/function/Function;)Ljava/util/Optional;
      18: areturn

  public java.util.Optional<java.lang.Class<?>> getCustomWriteTarget(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_1
       1: ldc           #75                 // String Source type must not be null!
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #77                 // String Target type must not be null!
       9: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: getfield      #12                 // Field customWriteTargetTypes:Lorg/springframework/data/convert/CustomConversions$ConversionTargetsCache;
      16: aload_1
      17: aload_2
      18: aload_0
      19: getfield      #16                 // Field getWriteTarget:Ljava/util/function/Function;
      22: invokevirtual #78                 // Method org/springframework/data/convert/CustomConversions$ConversionTargetsCache.computeIfAbsent:(Ljava/lang/Class;Ljava/lang/Class;Ljava/util/function/Function;)Ljava/util/Optional;
      25: areturn

  public boolean hasCustomWriteTarget(java.lang.Class<?>);
    Code:
       0: aload_1
       1: ldc           #75                 // String Source type must not be null!
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokevirtual #79                 // Method getCustomWriteTarget:(Ljava/lang/Class;)Ljava/util/Optional;
      11: invokevirtual #80                 // Method java/util/Optional.isPresent:()Z
      14: ireturn

  public boolean hasCustomWriteTarget(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_1
       1: ldc           #75                 // String Source type must not be null!
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #77                 // String Target type must not be null!
       9: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: aload_1
      14: aload_2
      15: invokevirtual #81                 // Method getCustomWriteTarget:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Optional;
      18: invokevirtual #80                 // Method java/util/Optional.isPresent:()Z
      21: ireturn

  public boolean hasCustomReadTarget(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_1
       1: ldc           #75                 // String Source type must not be null!
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #77                 // String Target type must not be null!
       9: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: aload_1
      14: aload_2
      15: invokespecial #82                 // Method getCustomReadTarget:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Optional;
      18: invokevirtual #80                 // Method java/util/Optional.isPresent:()Z
      21: ireturn

  private java.util.Optional<java.lang.Class<?>> getCustomReadTarget(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #11                 // Field customReadTargetTypes:Lorg/springframework/data/convert/CustomConversions$ConversionTargetsCache;
       4: aload_1
       5: aload_2
       6: aload_0
       7: getfield      #14                 // Field getReadTarget:Ljava/util/function/Function;
      10: invokevirtual #78                 // Method org/springframework/data/convert/CustomConversions$ConversionTargetsCache.computeIfAbsent:(Ljava/lang/Class;Ljava/lang/Class;Ljava/util/function/Function;)Ljava/util/Optional;
      13: areturn

  private java.util.Optional<java.lang.Class<?>> getCustomTarget(java.lang.Class<?>, java.util.Optional<java.lang.Class<?>>, java.util.Collection<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>);
    Code:
       0: aload_1
       1: ldc           #83                 // String Source Class must not be null!
       3: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_3
       7: ldc           #84                 // String Collection of ConvertiblePair must not be null!
       9: invokestatic  #20                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: iconst_2
      13: anewarray     #85                 // class java/util/function/Supplier
      16: dup
      17: iconst_0
      18: aload_2
      19: aload_3
      20: aload_1
      21: invokedynamic #86,  0             // InvokeDynamic #7:get:(Ljava/util/Optional;Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/function/Supplier;
      26: aastore
      27: dup
      28: iconst_1
      29: aload_3
      30: aload_1
      31: aload_2
      32: invokedynamic #87,  0             // InvokeDynamic #8:get:(Ljava/util/Collection;Ljava/lang/Class;Ljava/util/Optional;)Ljava/util/function/Supplier;
      37: aastore
      38: invokestatic  #88                 // InterfaceMethod org/springframework/data/util/Optionals.firstNonEmpty:([Ljava/util/function/Supplier;)Ljava/util/Optional;
      41: areturn

  private static boolean hasAssignableSourceType(org.springframework.core.convert.converter.GenericConverter$ConvertiblePair, java.lang.Class<?>);
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getSourceType:()Ljava/lang/Class;
       4: aload_1
       5: invokevirtual #89                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       8: ireturn

  private static boolean requestTargetTypeIsAssignable(java.util.Optional<java.lang.Class<?>>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method java/util/Optional.isPresent:()Z
       4: ifne          11
       7: iconst_1
       8: goto          39
      11: aload_0
      12: aload_1
      13: dup
      14: invokevirtual #90                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: pop
      18: invokedynamic #91,  0             // InvokeDynamic #9:apply:(Ljava/lang/Class;)Ljava/util/function/Function;
      23: invokevirtual #92                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      26: iconst_0
      27: invokestatic  #93                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      30: invokevirtual #94                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #95                 // class java/lang/Boolean
      36: invokevirtual #96                 // Method java/lang/Boolean.booleanValue:()Z
      39: ireturn

  private static java.util.Optional lambda$getCustomTarget$10(java.util.Collection, java.lang.Class, java.util.Optional);
    Code:
       0: aload_0
       1: invokeinterface #97,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
       6: aload_1
       7: invokedynamic #98,  0             // InvokeDynamic #10:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      12: invokeinterface #99,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      17: invokedynamic #100,  0            // InvokeDynamic #11:apply:()Ljava/util/function/Function;
      22: invokeinterface #101,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      27: aload_2
      28: invokedynamic #102,  0            // InvokeDynamic #12:test:(Ljava/util/Optional;)Ljava/util/function/Predicate;
      33: invokeinterface #99,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      38: invokeinterface #103,  1          // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      43: areturn

  private static boolean lambda$null$9(java.util.Optional, java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #104                // Method requestTargetTypeIsAssignable:(Ljava/util/Optional;Ljava/lang/Class;)Z
       5: ireturn

  private static boolean lambda$null$8(java.lang.Class, org.springframework.core.convert.converter.GenericConverter$ConvertiblePair);
    Code:
       0: aload_1
       1: aload_0
       2: invokestatic  #105                // Method hasAssignableSourceType:(Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;Ljava/lang/Class;)Z
       5: ireturn

  private static java.util.Optional lambda$getCustomTarget$7(java.util.Optional, java.util.Collection, java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #106,  0            // InvokeDynamic #13:test:(Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/function/Predicate;
       8: invokevirtual #107                // Method java/util/Optional.filter:(Ljava/util/function/Predicate;)Ljava/util/Optional;
      11: areturn

  private static boolean lambda$null$6(java.util.Collection, java.lang.Class, java.lang.Class);
    Code:
       0: aload_0
       1: new           #108                // class org/springframework/core/convert/converter/GenericConverter$ConvertiblePair
       4: dup
       5: aload_1
       6: aload_2
       7: invokespecial #109                // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair."<init>":(Ljava/lang/Class;Ljava/lang/Class;)V
      10: invokeinterface #110,  2          // InterfaceMethod java/util/Collection.contains:(Ljava/lang/Object;)Z
      15: ireturn

  private void lambda$registerConverterIn$5(org.springframework.core.convert.converter.ConverterRegistry, org.springframework.core.convert.converter.GenericConverter);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokespecial #111                // Method registerConverterIn:(Ljava/lang/Object;Lorg/springframework/core/convert/converter/ConverterRegistry;)V
       6: return

  private void lambda$registerConvertersIn$4(org.springframework.core.convert.converter.ConverterRegistry, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokespecial #111                // Method registerConverterIn:(Ljava/lang/Object;Lorg/springframework/core/convert/converter/ConverterRegistry;)V
       6: return

  private static java.util.stream.Stream lambda$new$3(org.springframework.data.convert.CustomConversions$StoreConversions, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #112                // Method org/springframework/data/convert/CustomConversions$StoreConversions.getRegistrationsFor:(Ljava/lang/Object;)Lorg/springframework/data/util/Streamable;
       5: invokeinterface #113,  1          // InterfaceMethod org/springframework/data/util/Streamable.stream:()Ljava/util/stream/Stream;
      10: areturn

  private java.util.Optional lambda$new$2(org.springframework.core.convert.converter.GenericConverter$ConvertiblePair);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #69                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getSourceType:()Ljava/lang/Class;
       5: invokestatic  #114                // Method java/util/Optional.empty:()Ljava/util/Optional;
       8: aload_0
       9: getfield      #5                  // Field writingPairs:Ljava/util/Set;
      12: invokespecial #115                // Method getCustomTarget:(Ljava/lang/Class;Ljava/util/Optional;Ljava/util/Collection;)Ljava/util/Optional;
      15: areturn

  private java.util.Optional lambda$new$1(org.springframework.core.convert.converter.GenericConverter$ConvertiblePair);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #69                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getSourceType:()Ljava/lang/Class;
       5: aload_1
       6: invokevirtual #70                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getTargetType:()Ljava/lang/Class;
       9: invokestatic  #116                // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      12: aload_0
      13: getfield      #5                  // Field writingPairs:Ljava/util/Set;
      16: invokespecial #115                // Method getCustomTarget:(Ljava/lang/Class;Ljava/util/Optional;Ljava/util/Collection;)Ljava/util/Optional;
      19: areturn

  private java.util.Optional lambda$new$0(org.springframework.core.convert.converter.GenericConverter$ConvertiblePair);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #69                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getSourceType:()Ljava/lang/Class;
       5: aload_1
       6: invokevirtual #70                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getTargetType:()Ljava/lang/Class;
       9: invokestatic  #116                // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      12: aload_0
      13: getfield      #4                  // Field readingPairs:Ljava/util/Set;
      16: invokespecial #115                // Method getCustomTarget:(Ljava/lang/Class;Ljava/util/Optional;Ljava/util/Collection;)Ljava/util/Optional;
      19: areturn

  static {};
    Code:
       0: ldc           #56                 // class org/springframework/data/convert/CustomConversions
       2: invokestatic  #117                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #65                 // Field LOG:Lorg/slf4j/Logger;
       8: new           #22                 // class java/util/ArrayList
      11: dup
      12: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
      15: astore_0
      16: aload_0
      17: invokestatic  #118                // Method org/springframework/data/convert/JodaTimeConverters.getConvertersToRegister:()Ljava/util/Collection;
      20: invokeinterface #24,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      25: pop
      26: aload_0
      27: invokestatic  #119                // Method org/springframework/data/convert/Jsr310Converters.getConvertersToRegister:()Ljava/util/Collection;
      30: invokeinterface #24,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      35: pop
      36: aload_0
      37: invokestatic  #120                // Method org/springframework/data/convert/ThreeTenBackPortConverters.getConvertersToRegister:()Ljava/util/Collection;
      40: invokeinterface #24,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      45: pop
      46: aload_0
      47: invokestatic  #33                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      50: putstatic     #26                 // Field DEFAULT_CONVERTERS:Ljava/util/List;
      53: return
}
