Compiled from "MethodLookup.java"
public interface org.springframework.data.repository.core.support.MethodLookup {
  public abstract java.util.List<org.springframework.data.repository.core.support.MethodLookup$MethodPredicate> getLookups();

  public default org.springframework.data.repository.core.support.MethodLookup and(org.springframework.data.repository.core.support.MethodLookup);
    Code:
       0: aload_1
       1: ldc           #1                  // String Other method lookup must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokedynamic #3,  0              // InvokeDynamic #0:getLookups:(Lorg/springframework/data/repository/core/support/MethodLookup;Lorg/springframework/data/repository/core/support/MethodLookup;)Lorg/springframework/data/repository/core/support/MethodLookup;
      13: areturn

  private java.util.List lambda$and$0(org.springframework.data.repository.core.support.MethodLookup);
    Code:
       0: aload_0
       1: invokeinterface #4,  1            // InterfaceMethod getLookups:()Ljava/util/List;
       6: invokeinterface #5,  1            // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      11: aload_1
      12: invokeinterface #4,  1            // InterfaceMethod getLookups:()Ljava/util/List;
      17: invokeinterface #5,  1            // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      22: invokestatic  #6                  // InterfaceMethod java/util/stream/Stream.concat:(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;
      25: invokestatic  #7                  // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      28: invokeinterface #8,  2            // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      33: checkcast     #9                  // class java/util/List
      36: areturn
}
