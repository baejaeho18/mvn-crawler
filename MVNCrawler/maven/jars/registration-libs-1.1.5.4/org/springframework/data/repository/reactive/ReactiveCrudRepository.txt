Compiled from "ReactiveCrudRepository.java"
public interface org.springframework.data.repository.reactive.ReactiveCrudRepository<T, ID> extends org.springframework.data.repository.Repository<T, ID> {
  public abstract <S extends T> reactor.core.publisher.Mono<S> save(S);

  public abstract <S extends T> reactor.core.publisher.Flux<S> saveAll(java.lang.Iterable<S>);

  public abstract <S extends T> reactor.core.publisher.Flux<S> saveAll(org.reactivestreams.Publisher<S>);

  public abstract reactor.core.publisher.Mono<T> findById(ID);

  public abstract reactor.core.publisher.Mono<T> findById(org.reactivestreams.Publisher<ID>);

  public abstract reactor.core.publisher.Mono<java.lang.Boolean> existsById(ID);

  public abstract reactor.core.publisher.Mono<java.lang.Boolean> existsById(org.reactivestreams.Publisher<ID>);

  public abstract reactor.core.publisher.Flux<T> findAll();

  public abstract reactor.core.publisher.Flux<T> findAllById(java.lang.Iterable<ID>);

  public abstract reactor.core.publisher.Flux<T> findAllById(org.reactivestreams.Publisher<ID>);

  public abstract reactor.core.publisher.Mono<java.lang.Long> count();

  public abstract reactor.core.publisher.Mono<java.lang.Void> deleteById(ID);

  public abstract reactor.core.publisher.Mono<java.lang.Void> deleteById(org.reactivestreams.Publisher<ID>);

  public abstract reactor.core.publisher.Mono<java.lang.Void> delete(T);

  public abstract reactor.core.publisher.Mono<java.lang.Void> deleteAll(java.lang.Iterable<? extends T>);

  public abstract reactor.core.publisher.Mono<java.lang.Void> deleteAll(org.reactivestreams.Publisher<? extends T>);

  public abstract reactor.core.publisher.Mono<java.lang.Void> deleteAll();
}
