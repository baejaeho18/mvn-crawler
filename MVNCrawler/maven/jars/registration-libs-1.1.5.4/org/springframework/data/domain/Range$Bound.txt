Compiled from "Range.java"
public final class org.springframework.data.domain.Range$Bound<T extends java.lang.Comparable<T>> {
  private static final org.springframework.data.domain.Range$Bound<?> UNBOUNDED;

  private final java.util.Optional<T> value;

  private final boolean inclusive;

  public static <T extends java.lang.Comparable<T>> org.springframework.data.domain.Range$Bound<T> unbounded();
    Code:
       0: getstatic     #1                  // Field UNBOUNDED:Lorg/springframework/data/domain/Range$Bound;
       3: areturn

  public boolean isBounded();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/util/Optional;
       4: invokevirtual #3                  // Method java/util/Optional.isPresent:()Z
       7: ireturn

  public static <T extends java.lang.Comparable<T>> org.springframework.data.domain.Range$Bound<T> inclusive(T);
    Code:
       0: aload_0
       1: ldc           #4                  // String Value must not be null!
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #6                  // class org/springframework/data/domain/Range$Bound
       9: dup
      10: aload_0
      11: invokestatic  #7                  // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      14: iconst_1
      15: invokespecial #8                  // Method "<init>":(Ljava/util/Optional;Z)V
      18: areturn

  public static org.springframework.data.domain.Range$Bound<java.lang.Integer> inclusive(int);
    Code:
       0: iload_0
       1: invokestatic  #9                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       4: invokestatic  #10                 // Method inclusive:(Ljava/lang/Comparable;)Lorg/springframework/data/domain/Range$Bound;
       7: areturn

  public static org.springframework.data.domain.Range$Bound<java.lang.Long> inclusive(long);
    Code:
       0: lload_0
       1: invokestatic  #11                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       4: invokestatic  #10                 // Method inclusive:(Ljava/lang/Comparable;)Lorg/springframework/data/domain/Range$Bound;
       7: areturn

  public static org.springframework.data.domain.Range$Bound<java.lang.Float> inclusive(float);
    Code:
       0: fload_0
       1: invokestatic  #12                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
       4: invokestatic  #10                 // Method inclusive:(Ljava/lang/Comparable;)Lorg/springframework/data/domain/Range$Bound;
       7: areturn

  public static org.springframework.data.domain.Range$Bound<java.lang.Double> inclusive(double);
    Code:
       0: dload_0
       1: invokestatic  #13                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
       4: invokestatic  #10                 // Method inclusive:(Ljava/lang/Comparable;)Lorg/springframework/data/domain/Range$Bound;
       7: areturn

  public static <T extends java.lang.Comparable<T>> org.springframework.data.domain.Range$Bound<T> exclusive(T);
    Code:
       0: aload_0
       1: ldc           #4                  // String Value must not be null!
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #6                  // class org/springframework/data/domain/Range$Bound
       9: dup
      10: aload_0
      11: invokestatic  #7                  // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      14: iconst_0
      15: invokespecial #8                  // Method "<init>":(Ljava/util/Optional;Z)V
      18: areturn

  public static org.springframework.data.domain.Range$Bound<java.lang.Integer> exclusive(int);
    Code:
       0: iload_0
       1: invokestatic  #9                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       4: invokestatic  #14                 // Method exclusive:(Ljava/lang/Comparable;)Lorg/springframework/data/domain/Range$Bound;
       7: areturn

  public static org.springframework.data.domain.Range$Bound<java.lang.Long> exclusive(long);
    Code:
       0: lload_0
       1: invokestatic  #11                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       4: invokestatic  #14                 // Method exclusive:(Ljava/lang/Comparable;)Lorg/springframework/data/domain/Range$Bound;
       7: areturn

  public static org.springframework.data.domain.Range$Bound<java.lang.Float> exclusive(float);
    Code:
       0: fload_0
       1: invokestatic  #12                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
       4: invokestatic  #14                 // Method exclusive:(Ljava/lang/Comparable;)Lorg/springframework/data/domain/Range$Bound;
       7: areturn

  public static org.springframework.data.domain.Range$Bound<java.lang.Double> exclusive(double);
    Code:
       0: dload_0
       1: invokestatic  #13                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
       4: invokestatic  #14                 // Method exclusive:(Ljava/lang/Comparable;)Lorg/springframework/data/domain/Range$Bound;
       7: areturn

  java.lang.String toPrefixString();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method getValue:()Ljava/util/Optional;
       4: invokedynamic #16,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       9: invokevirtual #17                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      12: aload_0
      13: invokedynamic #18,  0             // InvokeDynamic #1:apply:(Lorg/springframework/data/domain/Range$Bound;)Ljava/util/function/Function;
      18: invokevirtual #17                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      21: ldc           #19                 // String unbounded
      23: invokevirtual #20                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #21                 // class java/lang/String
      29: areturn

  java.lang.String toSuffixString();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method getValue:()Ljava/util/Optional;
       4: invokedynamic #16,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       9: invokevirtual #17                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      12: aload_0
      13: invokedynamic #22,  0             // InvokeDynamic #2:apply:(Lorg/springframework/data/domain/Range$Bound;)Ljava/util/function/Function;
      18: invokevirtual #17                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      21: ldc           #19                 // String unbounded
      23: invokevirtual #20                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #21                 // class java/lang/String
      29: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/util/Optional;
       4: invokedynamic #16,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       9: invokevirtual #17                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      12: ldc           #19                 // String unbounded
      14: invokevirtual #20                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #21                 // class java/lang/String
      20: areturn

  public java.util.Optional<T> getValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/util/Optional;
       4: areturn

  public boolean isInclusive();
    Code:
       0: aload_0
       1: getfield      #23                 // Field inclusive:Z
       4: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #6                  // class org/springframework/data/domain/Range$Bound
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #6                  // class org/springframework/data/domain/Range$Bound
      20: astore_2
      21: aload_0
      22: invokevirtual #15                 // Method getValue:()Ljava/util/Optional;
      25: astore_3
      26: aload_2
      27: invokevirtual #15                 // Method getValue:()Ljava/util/Optional;
      30: astore        4
      32: aload_3
      33: ifnonnull     44
      36: aload         4
      38: ifnull        55
      41: goto          53
      44: aload_3
      45: aload         4
      47: invokevirtual #24                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      50: ifne          55
      53: iconst_0
      54: ireturn
      55: aload_0
      56: invokevirtual #25                 // Method isInclusive:()Z
      59: aload_2
      60: invokevirtual #25                 // Method isInclusive:()Z
      63: if_icmpeq     68
      66: iconst_0
      67: ireturn
      68: iconst_1
      69: ireturn

  public int hashCode();
    Code:
       0: bipush        59
       2: istore_1
       3: iconst_1
       4: istore_2
       5: aload_0
       6: invokevirtual #15                 // Method getValue:()Ljava/util/Optional;
       9: astore_3
      10: iload_2
      11: bipush        59
      13: imul
      14: aload_3
      15: ifnonnull     23
      18: bipush        43
      20: goto          27
      23: aload_3
      24: invokevirtual #26                 // Method java/lang/Object.hashCode:()I
      27: iadd
      28: istore_2
      29: iload_2
      30: bipush        59
      32: imul
      33: aload_0
      34: invokevirtual #25                 // Method isInclusive:()Z
      37: ifeq          45
      40: bipush        79
      42: goto          47
      45: bipush        97
      47: iadd
      48: istore_2
      49: iload_2
      50: ireturn

  private org.springframework.data.domain.Range$Bound(java.util.Optional<T>, boolean);
    Code:
       0: aload_0
       1: invokespecial #27                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field value:Ljava/util/Optional;
       9: aload_0
      10: iload_2
      11: putfield      #23                 // Field inclusive:Z
      14: return

  private java.lang.String lambda$toSuffixString$1(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method isInclusive:()Z
       4: ifeq          16
       7: aload_1
       8: ldc           #28                 // String ]
      10: invokevirtual #29                 // Method java/lang/String.concat:(Ljava/lang/String;)Ljava/lang/String;
      13: goto          22
      16: aload_1
      17: ldc           #30                 // String )
      19: invokevirtual #29                 // Method java/lang/String.concat:(Ljava/lang/String;)Ljava/lang/String;
      22: areturn

  private java.lang.String lambda$toPrefixString$0(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method isInclusive:()Z
       4: ifeq          16
       7: ldc           #31                 // String [
       9: aload_1
      10: invokevirtual #29                 // Method java/lang/String.concat:(Ljava/lang/String;)Ljava/lang/String;
      13: goto          22
      16: ldc           #32                 // String (
      18: aload_1
      19: invokevirtual #29                 // Method java/lang/String.concat:(Ljava/lang/String;)Ljava/lang/String;
      22: areturn

  static org.springframework.data.domain.Range$Bound access$000();
    Code:
       0: getstatic     #1                  // Field UNBOUNDED:Lorg/springframework/data/domain/Range$Bound;
       3: areturn

  static {};
    Code:
       0: new           #6                  // class org/springframework/data/domain/Range$Bound
       3: dup
       4: invokestatic  #33                 // Method java/util/Optional.empty:()Ljava/util/Optional;
       7: iconst_1
       8: invokespecial #8                  // Method "<init>":(Ljava/util/Optional;Z)V
      11: putstatic     #1                  // Field UNBOUNDED:Lorg/springframework/data/domain/Range$Bound;
      14: return
}
