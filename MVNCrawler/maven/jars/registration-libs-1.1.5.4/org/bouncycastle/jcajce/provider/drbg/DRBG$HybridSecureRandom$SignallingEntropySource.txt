class org.bouncycastle.jcajce.provider.drbg.DRBG$HybridSecureRandom$SignallingEntropySource implements org.bouncycastle.crypto.prng.EntropySource {
  private final int byteLength;

  private final java.util.concurrent.atomic.AtomicReference entropy;

  private final java.util.concurrent.atomic.AtomicBoolean scheduled;

  final org.bouncycastle.jcajce.provider.drbg.DRBG$HybridSecureRandom this$0;

  org.bouncycastle.jcajce.provider.drbg.DRBG$HybridSecureRandom$SignallingEntropySource(org.bouncycastle.jcajce.provider.drbg.DRBG$HybridSecureRandom, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #75                 // Field this$0:Lorg/bouncycastle/jcajce/provider/drbg/DRBG$HybridSecureRandom;
       5: aload_0
       6: invokespecial #76                 // Method java/lang/Object."<init>":()V
       9: aload_0
      10: new           #41                 // class java/util/concurrent/atomic/AtomicReference
      13: dup
      14: invokespecial #84                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      17: putfield      #74                 // Field entropy:Ljava/util/concurrent/atomic/AtomicReference;
      20: aload_0
      21: new           #40                 // class java/util/concurrent/atomic/AtomicBoolean
      24: dup
      25: iconst_0
      26: invokespecial #81                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      29: putfield      #73                 // Field scheduled:Ljava/util/concurrent/atomic/AtomicBoolean;
      32: aload_0
      33: iload_2
      34: bipush        7
      36: iadd
      37: bipush        8
      39: idiv
      40: putfield      #72                 // Field byteLength:I
      43: return

  public boolean isPredictionResistant();
    Code:
       0: iconst_1
       1: ireturn

  public byte[] getEntropy();
    Code:
       0: aload_0
       1: getfield      #74                 // Field entropy:Ljava/util/concurrent/atomic/AtomicReference;
       4: aconst_null
       5: invokevirtual #85                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #36                 // class "[B"
      11: checkcast     #36                 // class "[B"
      14: astore_1
      15: aload_1
      16: ifnull        28
      19: aload_1
      20: arraylength
      21: aload_0
      22: getfield      #72                 // Field byteLength:I
      25: if_icmpeq     46
      28: aload_0
      29: getfield      #75                 // Field this$0:Lorg/bouncycastle/jcajce/provider/drbg/DRBG$HybridSecureRandom;
      32: invokestatic  #86                 // Method org/bouncycastle/jcajce/provider/drbg/DRBG$HybridSecureRandom.access$500:(Lorg/bouncycastle/jcajce/provider/drbg/DRBG$HybridSecureRandom;)Ljava/security/SecureRandom;
      35: aload_0
      36: getfield      #72                 // Field byteLength:I
      39: invokevirtual #80                 // Method java/security/SecureRandom.generateSeed:(I)[B
      42: astore_1
      43: goto          54
      46: aload_0
      47: getfield      #73                 // Field scheduled:Ljava/util/concurrent/atomic/AtomicBoolean;
      50: iconst_0
      51: invokevirtual #82                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      54: aload_0
      55: getfield      #73                 // Field scheduled:Ljava/util/concurrent/atomic/AtomicBoolean;
      58: iconst_1
      59: invokevirtual #83                 // Method java/util/concurrent/atomic/AtomicBoolean.getAndSet:(Z)Z
      62: ifne          94
      65: new           #38                 // class java/lang/Thread
      68: dup
      69: new           #46                 // class org/bouncycastle/jcajce/provider/drbg/DRBG$HybridSecureRandom$SignallingEntropySource$EntropyGatherer
      72: dup
      73: aload_0
      74: aload_0
      75: getfield      #72                 // Field byteLength:I
      78: invokespecial #87                 // Method org/bouncycastle/jcajce/provider/drbg/DRBG$HybridSecureRandom$SignallingEntropySource$EntropyGatherer."<init>":(Lorg/bouncycastle/jcajce/provider/drbg/DRBG$HybridSecureRandom$SignallingEntropySource;I)V
      81: invokespecial #79                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
      84: astore_2
      85: aload_2
      86: iconst_1
      87: invokevirtual #78                 // Method java/lang/Thread.setDaemon:(Z)V
      90: aload_2
      91: invokevirtual #77                 // Method java/lang/Thread.start:()V
      94: aload_1
      95: areturn

  public int entropySize();
    Code:
       0: aload_0
       1: getfield      #72                 // Field byteLength:I
       4: bipush        8
       6: imul
       7: ireturn

  static int access$600(org.bouncycastle.jcajce.provider.drbg.DRBG$HybridSecureRandom$SignallingEntropySource);
    Code:
       0: aload_0
       1: getfield      #72                 // Field byteLength:I
       4: ireturn

  static java.util.concurrent.atomic.AtomicReference access$700(org.bouncycastle.jcajce.provider.drbg.DRBG$HybridSecureRandom$SignallingEntropySource);
    Code:
       0: aload_0
       1: getfield      #74                 // Field entropy:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn
}
