class org.bouncycastle.est.jcajce.LimitedSSLSocketSource implements org.bouncycastle.est.Source<javax.net.ssl.SSLSession>, org.bouncycastle.est.TLSUniqueProvider, org.bouncycastle.est.LimitedSource {
  protected final javax.net.ssl.SSLSocket socket;

  private final org.bouncycastle.est.jcajce.ChannelBindingProvider bindingProvider;

  private final java.lang.Long absoluteReadLimit;

  public org.bouncycastle.est.jcajce.LimitedSSLSocketSource(javax.net.ssl.SSLSocket, org.bouncycastle.est.jcajce.ChannelBindingProvider, java.lang.Long);
    Code:
       0: aload_0
       1: invokespecial #68                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #65                 // Field socket:Ljavax/net/ssl/SSLSocket;
       9: aload_0
      10: aload_2
      11: putfield      #66                 // Field bindingProvider:Lorg/bouncycastle/est/jcajce/ChannelBindingProvider;
      14: aload_0
      15: aload_3
      16: putfield      #64                 // Field absoluteReadLimit:Ljava/lang/Long;
      19: return

  public java.io.InputStream getInputStream() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #65                 // Field socket:Ljavax/net/ssl/SSLSocket;
       4: invokevirtual #70                 // Method javax/net/ssl/SSLSocket.getInputStream:()Ljava/io/InputStream;
       7: areturn

  public java.io.OutputStream getOutputStream() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #65                 // Field socket:Ljavax/net/ssl/SSLSocket;
       4: invokevirtual #71                 // Method javax/net/ssl/SSLSocket.getOutputStream:()Ljava/io/OutputStream;
       7: areturn

  public javax.net.ssl.SSLSession getSession();
    Code:
       0: aload_0
       1: getfield      #65                 // Field socket:Ljavax/net/ssl/SSLSocket;
       4: invokevirtual #72                 // Method javax/net/ssl/SSLSocket.getSession:()Ljavax/net/ssl/SSLSession;
       7: areturn

  public byte[] getTLSUnique();
    Code:
       0: aload_0
       1: invokevirtual #73                 // Method isTLSUniqueAvailable:()Z
       4: ifeq          23
       7: aload_0
       8: getfield      #66                 // Field bindingProvider:Lorg/bouncycastle/est/jcajce/ChannelBindingProvider;
      11: aload_0
      12: getfield      #65                 // Field socket:Ljavax/net/ssl/SSLSocket;
      15: ldc           #2                  // String tls-unique
      17: invokeinterface #76,  3           // InterfaceMethod org/bouncycastle/est/jcajce/ChannelBindingProvider.getChannelBinding:(Ljava/net/Socket;Ljava/lang/String;)[B
      22: areturn
      23: new           #31                 // class java/lang/IllegalStateException
      26: dup
      27: ldc           #1                  // String No binding provider.
      29: invokespecial #67                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      32: athrow

  public boolean isTLSUniqueAvailable();
    Code:
       0: aload_0
       1: getfield      #66                 // Field bindingProvider:Lorg/bouncycastle/est/jcajce/ChannelBindingProvider;
       4: aload_0
       5: getfield      #65                 // Field socket:Ljavax/net/ssl/SSLSocket;
       8: invokeinterface #75,  2           // InterfaceMethod org/bouncycastle/est/jcajce/ChannelBindingProvider.canAccessChannelBinding:(Ljava/net/Socket;)Z
      13: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #65                 // Field socket:Ljavax/net/ssl/SSLSocket;
       4: invokevirtual #69                 // Method javax/net/ssl/SSLSocket.close:()V
       7: return

  public java.lang.Long getAbsoluteReadLimit();
    Code:
       0: aload_0
       1: getfield      #64                 // Field absoluteReadLimit:Ljava/lang/Long;
       4: areturn

  public java.lang.Object getSession();
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method getSession:()Ljavax/net/ssl/SSLSession;
       4: areturn
}
