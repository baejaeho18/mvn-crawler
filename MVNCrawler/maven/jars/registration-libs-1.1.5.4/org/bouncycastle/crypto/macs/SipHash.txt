public class org.bouncycastle.crypto.macs.SipHash implements org.bouncycastle.crypto.Mac {
  protected final int c;

  protected final int d;

  protected long k0;

  protected long k1;

  protected long v0;

  protected long v1;

  protected long v2;

  protected long v3;

  protected long m;

  protected int wordPos;

  protected int wordCount;

  public org.bouncycastle.crypto.macs.SipHash();
    Code:
       0: aload_0
       1: invokespecial #118                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #112                // Field m:J
       9: aload_0
      10: iconst_0
      11: putfield      #109                // Field wordPos:I
      14: aload_0
      15: iconst_0
      16: putfield      #108                // Field wordCount:I
      19: aload_0
      20: iconst_2
      21: putfield      #106                // Field c:I
      24: aload_0
      25: iconst_4
      26: putfield      #107                // Field d:I
      29: return

  public org.bouncycastle.crypto.macs.SipHash(int, int);
    Code:
       0: aload_0
       1: invokespecial #118                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #112                // Field m:J
       9: aload_0
      10: iconst_0
      11: putfield      #109                // Field wordPos:I
      14: aload_0
      15: iconst_0
      16: putfield      #108                // Field wordCount:I
      19: aload_0
      20: iload_1
      21: putfield      #106                // Field c:I
      24: aload_0
      25: iload_2
      26: putfield      #107                // Field d:I
      29: return

  public java.lang.String getAlgorithmName();
    Code:
       0: new           #71                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #119                // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #4                  // String SipHash-
       9: invokevirtual #122                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #106                // Field c:I
      16: invokevirtual #121                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: ldc           #3                  // String -
      21: invokevirtual #122                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #107                // Field d:I
      28: invokevirtual #121                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: invokevirtual #120                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: areturn

  public int getMacSize();
    Code:
       0: bipush        8
       2: ireturn

  public void init(org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_1
       1: instanceof    #75                 // class org/bouncycastle/crypto/params/KeyParameter
       4: ifne          17
       7: new           #68                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #2                  // String \'params\' must be an instance of KeyParameter
      13: invokespecial #117                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_1
      18: checkcast     #75                 // class org/bouncycastle/crypto/params/KeyParameter
      21: astore_2
      22: aload_2
      23: invokevirtual #128                // Method org/bouncycastle/crypto/params/KeyParameter.getKey:()[B
      26: astore_3
      27: aload_3
      28: arraylength
      29: bipush        16
      31: if_icmpeq     44
      34: new           #68                 // class java/lang/IllegalArgumentException
      37: dup
      38: ldc           #1                  // String \'params\' must be a 128-bit key
      40: invokespecial #117                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      43: athrow
      44: aload_0
      45: aload_3
      46: iconst_0
      47: invokestatic  #130                // Method org/bouncycastle/util/Pack.littleEndianToLong:([BI)J
      50: putfield      #110                // Field k0:J
      53: aload_0
      54: aload_3
      55: bipush        8
      57: invokestatic  #130                // Method org/bouncycastle/util/Pack.littleEndianToLong:([BI)J
      60: putfield      #111                // Field k1:J
      63: aload_0
      64: invokevirtual #125                // Method reset:()V
      67: return

  public void update(byte) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #112                // Field m:J
       5: bipush        8
       7: lushr
       8: putfield      #112                // Field m:J
      11: aload_0
      12: dup
      13: getfield      #112                // Field m:J
      16: iload_1
      17: i2l
      18: ldc2_w        #58                 // long 255l
      21: land
      22: bipush        56
      24: lshl
      25: lor
      26: putfield      #112                // Field m:J
      29: aload_0
      30: dup
      31: getfield      #109                // Field wordPos:I
      34: iconst_1
      35: iadd
      36: dup_x1
      37: putfield      #109                // Field wordPos:I
      40: bipush        8
      42: if_icmpne     54
      45: aload_0
      46: invokevirtual #124                // Method processMessageWord:()V
      49: aload_0
      50: iconst_0
      51: putfield      #109                // Field wordPos:I
      54: return

  public void update(byte[], int, int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException;
    Code:
       0: iconst_0
       1: istore        4
       3: iload_3
       4: bipush        -8
       6: iand
       7: istore        5
       9: aload_0
      10: getfield      #109                // Field wordPos:I
      13: ifne          102
      16: iload         4
      18: iload         5
      20: if_icmpge     45
      23: aload_0
      24: aload_1
      25: iload_2
      26: iload         4
      28: iadd
      29: invokestatic  #130                // Method org/bouncycastle/util/Pack.littleEndianToLong:([BI)J
      32: putfield      #112                // Field m:J
      35: aload_0
      36: invokevirtual #124                // Method processMessageWord:()V
      39: iinc          4, 8
      42: goto          16
      45: iload         4
      47: iload_3
      48: if_icmpge     91
      51: aload_0
      52: dup
      53: getfield      #112                // Field m:J
      56: bipush        8
      58: lushr
      59: putfield      #112                // Field m:J
      62: aload_0
      63: dup
      64: getfield      #112                // Field m:J
      67: aload_1
      68: iload_2
      69: iload         4
      71: iadd
      72: baload
      73: i2l
      74: ldc2_w        #58                 // long 255l
      77: land
      78: bipush        56
      80: lshl
      81: lor
      82: putfield      #112                // Field m:J
      85: iinc          4, 1
      88: goto          45
      91: aload_0
      92: iload_3
      93: iload         5
      95: isub
      96: putfield      #109                // Field wordPos:I
      99: goto          232
     102: aload_0
     103: getfield      #109                // Field wordPos:I
     106: iconst_3
     107: ishl
     108: istore        6
     110: iload         4
     112: iload         5
     114: if_icmpge     161
     117: aload_1
     118: iload_2
     119: iload         4
     121: iadd
     122: invokestatic  #130                // Method org/bouncycastle/util/Pack.littleEndianToLong:([BI)J
     125: lstore        7
     127: aload_0
     128: lload         7
     130: iload         6
     132: lshl
     133: aload_0
     134: getfield      #112                // Field m:J
     137: iload         6
     139: ineg
     140: lushr
     141: lor
     142: putfield      #112                // Field m:J
     145: aload_0
     146: invokevirtual #124                // Method processMessageWord:()V
     149: aload_0
     150: lload         7
     152: putfield      #112                // Field m:J
     155: iinc          4, 8
     158: goto          110
     161: iload         4
     163: iload_3
     164: if_icmpge     232
     167: aload_0
     168: dup
     169: getfield      #112                // Field m:J
     172: bipush        8
     174: lushr
     175: putfield      #112                // Field m:J
     178: aload_0
     179: dup
     180: getfield      #112                // Field m:J
     183: aload_1
     184: iload_2
     185: iload         4
     187: iadd
     188: baload
     189: i2l
     190: ldc2_w        #58                 // long 255l
     193: land
     194: bipush        56
     196: lshl
     197: lor
     198: putfield      #112                // Field m:J
     201: aload_0
     202: dup
     203: getfield      #109                // Field wordPos:I
     206: iconst_1
     207: iadd
     208: dup_x1
     209: putfield      #109                // Field wordPos:I
     212: bipush        8
     214: if_icmpne     226
     217: aload_0
     218: invokevirtual #124                // Method processMessageWord:()V
     221: aload_0
     222: iconst_0
     223: putfield      #109                // Field wordPos:I
     226: iinc          4, 1
     229: goto          161
     232: return

  public long doFinal() throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #112                // Field m:J
       5: bipush        7
       7: aload_0
       8: getfield      #109                // Field wordPos:I
      11: isub
      12: iconst_3
      13: ishl
      14: lushr
      15: putfield      #112                // Field m:J
      18: aload_0
      19: dup
      20: getfield      #112                // Field m:J
      23: bipush        8
      25: lushr
      26: putfield      #112                // Field m:J
      29: aload_0
      30: dup
      31: getfield      #112                // Field m:J
      34: aload_0
      35: getfield      #108                // Field wordCount:I
      38: iconst_3
      39: ishl
      40: aload_0
      41: getfield      #109                // Field wordPos:I
      44: iadd
      45: i2l
      46: ldc2_w        #58                 // long 255l
      49: land
      50: bipush        56
      52: lshl
      53: lor
      54: putfield      #112                // Field m:J
      57: aload_0
      58: invokevirtual #124                // Method processMessageWord:()V
      61: aload_0
      62: dup
      63: getfield      #115                // Field v2:J
      66: ldc2_w        #58                 // long 255l
      69: lxor
      70: putfield      #115                // Field v2:J
      73: aload_0
      74: aload_0
      75: getfield      #107                // Field d:I
      78: invokevirtual #126                // Method applySipRounds:(I)V
      81: aload_0
      82: getfield      #113                // Field v0:J
      85: aload_0
      86: getfield      #114                // Field v1:J
      89: lxor
      90: aload_0
      91: getfield      #115                // Field v2:J
      94: lxor
      95: aload_0
      96: getfield      #116                // Field v3:J
      99: lxor
     100: lstore_1
     101: aload_0
     102: invokevirtual #125                // Method reset:()V
     105: lload_1
     106: lreturn

  public int doFinal(byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: invokevirtual #123                // Method doFinal:()J
       4: lstore_3
       5: lload_3
       6: aload_1
       7: iload_2
       8: invokestatic  #129                // Method org/bouncycastle/util/Pack.longToLittleEndian:(J[BI)V
      11: bipush        8
      13: ireturn

  public void reset();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #110                // Field k0:J
       5: ldc2_w        #64                 // long 8317987319222330741l
       8: lxor
       9: putfield      #113                // Field v0:J
      12: aload_0
      13: aload_0
      14: getfield      #111                // Field k1:J
      17: ldc2_w        #60                 // long 7237128888997146477l
      20: lxor
      21: putfield      #114                // Field v1:J
      24: aload_0
      25: aload_0
      26: getfield      #110                // Field k0:J
      29: ldc2_w        #62                 // long 7816392313619706465l
      32: lxor
      33: putfield      #115                // Field v2:J
      36: aload_0
      37: aload_0
      38: getfield      #111                // Field k1:J
      41: ldc2_w        #66                 // long 8387220255154660723l
      44: lxor
      45: putfield      #116                // Field v3:J
      48: aload_0
      49: lconst_0
      50: putfield      #112                // Field m:J
      53: aload_0
      54: iconst_0
      55: putfield      #109                // Field wordPos:I
      58: aload_0
      59: iconst_0
      60: putfield      #108                // Field wordCount:I
      63: return

  protected void processMessageWord();
    Code:
       0: aload_0
       1: dup
       2: getfield      #108                // Field wordCount:I
       5: iconst_1
       6: iadd
       7: putfield      #108                // Field wordCount:I
      10: aload_0
      11: dup
      12: getfield      #116                // Field v3:J
      15: aload_0
      16: getfield      #112                // Field m:J
      19: lxor
      20: putfield      #116                // Field v3:J
      23: aload_0
      24: aload_0
      25: getfield      #106                // Field c:I
      28: invokevirtual #126                // Method applySipRounds:(I)V
      31: aload_0
      32: dup
      33: getfield      #113                // Field v0:J
      36: aload_0
      37: getfield      #112                // Field m:J
      40: lxor
      41: putfield      #113                // Field v0:J
      44: return

  protected void applySipRounds(int);
    Code:
       0: aload_0
       1: getfield      #113                // Field v0:J
       4: lstore_2
       5: aload_0
       6: getfield      #114                // Field v1:J
       9: lstore        4
      11: aload_0
      12: getfield      #115                // Field v2:J
      15: lstore        6
      17: aload_0
      18: getfield      #116                // Field v3:J
      21: lstore        8
      23: iconst_0
      24: istore        10
      26: iload         10
      28: iload_1
      29: if_icmpge     140
      32: lload_2
      33: lload         4
      35: ladd
      36: lstore_2
      37: lload         6
      39: lload         8
      41: ladd
      42: lstore        6
      44: lload         4
      46: bipush        13
      48: invokestatic  #127                // Method rotateLeft:(JI)J
      51: lstore        4
      53: lload         8
      55: bipush        16
      57: invokestatic  #127                // Method rotateLeft:(JI)J
      60: lstore        8
      62: lload         4
      64: lload_2
      65: lxor
      66: lstore        4
      68: lload         8
      70: lload         6
      72: lxor
      73: lstore        8
      75: lload_2
      76: bipush        32
      78: invokestatic  #127                // Method rotateLeft:(JI)J
      81: lstore_2
      82: lload         6
      84: lload         4
      86: ladd
      87: lstore        6
      89: lload_2
      90: lload         8
      92: ladd
      93: lstore_2
      94: lload         4
      96: bipush        17
      98: invokestatic  #127                // Method rotateLeft:(JI)J
     101: lstore        4
     103: lload         8
     105: bipush        21
     107: invokestatic  #127                // Method rotateLeft:(JI)J
     110: lstore        8
     112: lload         4
     114: lload         6
     116: lxor
     117: lstore        4
     119: lload         8
     121: lload_2
     122: lxor
     123: lstore        8
     125: lload         6
     127: bipush        32
     129: invokestatic  #127                // Method rotateLeft:(JI)J
     132: lstore        6
     134: iinc          10, 1
     137: goto          26
     140: aload_0
     141: lload_2
     142: putfield      #113                // Field v0:J
     145: aload_0
     146: lload         4
     148: putfield      #114                // Field v1:J
     151: aload_0
     152: lload         6
     154: putfield      #115                // Field v2:J
     157: aload_0
     158: lload         8
     160: putfield      #116                // Field v3:J
     163: return

  protected static long rotateLeft(long, int);
    Code:
       0: lload_0
       1: iload_2
       2: lshl
       3: lload_0
       4: iload_2
       5: ineg
       6: lushr
       7: lor
       8: lreturn
}
