public class org.bouncycastle.crypto.generators.Ed448KeyPairGenerator implements org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator {
  private java.security.SecureRandom random;

  public org.bouncycastle.crypto.generators.Ed448KeyPairGenerator();
    Code:
       0: aload_0
       1: invokespecial #34                 // Method java/lang/Object."<init>":()V
       4: return

  public void init(org.bouncycastle.crypto.KeyGenerationParameters);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #36                 // Method org/bouncycastle/crypto/KeyGenerationParameters.getRandom:()Ljava/security/SecureRandom;
       5: putfield      #33                 // Field random:Ljava/security/SecureRandom;
       8: return

  public org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair();
    Code:
       0: new           #19                 // class org/bouncycastle/crypto/params/Ed448PrivateKeyParameters
       3: dup
       4: aload_0
       5: getfield      #33                 // Field random:Ljava/security/SecureRandom;
       8: invokespecial #37                 // Method org/bouncycastle/crypto/params/Ed448PrivateKeyParameters."<init>":(Ljava/security/SecureRandom;)V
      11: astore_1
      12: aload_1
      13: invokevirtual #38                 // Method org/bouncycastle/crypto/params/Ed448PrivateKeyParameters.generatePublicKey:()Lorg/bouncycastle/crypto/params/Ed448PublicKeyParameters;
      16: astore_2
      17: new           #15                 // class org/bouncycastle/crypto/AsymmetricCipherKeyPair
      20: dup
      21: aload_2
      22: aload_1
      23: invokespecial #35                 // Method org/bouncycastle/crypto/AsymmetricCipherKeyPair."<init>":(Lorg/bouncycastle/crypto/params/AsymmetricKeyParameter;Lorg/bouncycastle/crypto/params/AsymmetricKeyParameter;)V
      26: areturn
}
