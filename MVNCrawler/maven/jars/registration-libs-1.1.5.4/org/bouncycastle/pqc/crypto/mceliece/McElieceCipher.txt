public class org.bouncycastle.pqc.crypto.mceliece.McElieceCipher implements org.bouncycastle.pqc.crypto.MessageEncryptor {
  public static final java.lang.String OID;

  private java.security.SecureRandom sr;

  private int n;

  private int k;

  private int t;

  public int maxPlainTextSize;

  public int cipherTextSize;

  private org.bouncycastle.pqc.crypto.mceliece.McElieceKeyParameters key;

  private boolean forEncryption;

  public org.bouncycastle.pqc.crypto.mceliece.McElieceCipher();
    Code:
       0: aload_0
       1: invokespecial #164                // Method java/lang/Object."<init>":()V
       4: return

  public void init(boolean, org.bouncycastle.crypto.CipherParameters);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #159                // Field forEncryption:Z
       5: iload_1
       6: ifeq          83
       9: aload_2
      10: instanceof    #79                 // class org/bouncycastle/crypto/params/ParametersWithRandom
      13: ifeq          54
      16: aload_2
      17: checkcast     #79                 // class org/bouncycastle/crypto/params/ParametersWithRandom
      20: astore_3
      21: aload_0
      22: aload_3
      23: invokevirtual #168                // Method org/bouncycastle/crypto/params/ParametersWithRandom.getRandom:()Ljava/security/SecureRandom;
      26: putfield      #160                // Field sr:Ljava/security/SecureRandom;
      29: aload_0
      30: aload_3
      31: invokevirtual #169                // Method org/bouncycastle/crypto/params/ParametersWithRandom.getParameters:()Lorg/bouncycastle/crypto/CipherParameters;
      34: checkcast     #83                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters
      37: putfield      #161                // Field key:Lorg/bouncycastle/pqc/crypto/mceliece/McElieceKeyParameters;
      40: aload_0
      41: aload_0
      42: getfield      #161                // Field key:Lorg/bouncycastle/pqc/crypto/mceliece/McElieceKeyParameters;
      45: checkcast     #83                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters
      48: invokespecial #171                // Method initCipherEncrypt:(Lorg/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters;)V
      51: goto          102
      54: aload_0
      55: invokestatic  #166                // Method org/bouncycastle/crypto/CryptoServicesRegistrar.getSecureRandom:()Ljava/security/SecureRandom;
      58: putfield      #160                // Field sr:Ljava/security/SecureRandom;
      61: aload_0
      62: aload_2
      63: checkcast     #83                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters
      66: putfield      #161                // Field key:Lorg/bouncycastle/pqc/crypto/mceliece/McElieceKeyParameters;
      69: aload_0
      70: aload_0
      71: getfield      #161                // Field key:Lorg/bouncycastle/pqc/crypto/mceliece/McElieceKeyParameters;
      74: checkcast     #83                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters
      77: invokespecial #171                // Method initCipherEncrypt:(Lorg/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters;)V
      80: goto          102
      83: aload_0
      84: aload_2
      85: checkcast     #82                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters
      88: putfield      #161                // Field key:Lorg/bouncycastle/pqc/crypto/mceliece/McElieceKeyParameters;
      91: aload_0
      92: aload_0
      93: getfield      #161                // Field key:Lorg/bouncycastle/pqc/crypto/mceliece/McElieceKeyParameters;
      96: checkcast     #82                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters
      99: invokespecial #170                // Method initCipherDecrypt:(Lorg/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters;)V
     102: return

  public int getKeySize(org.bouncycastle.pqc.crypto.mceliece.McElieceKeyParameters);
    Code:
       0: aload_1
       1: instanceof    #83                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters
       4: ifeq          15
       7: aload_1
       8: checkcast     #83                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters
      11: invokevirtual #184                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters.getN:()I
      14: ireturn
      15: aload_1
      16: instanceof    #82                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters
      19: ifeq          30
      22: aload_1
      23: checkcast     #82                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters
      26: invokevirtual #175                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getN:()I
      29: ireturn
      30: new           #73                 // class java/lang/IllegalArgumentException
      33: dup
      34: ldc           #3                  // String unsupported type
      36: invokespecial #162                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow

  private void initCipherEncrypt(org.bouncycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #184                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters.getN:()I
       5: putfield      #157                // Field n:I
       8: aload_0
       9: aload_1
      10: invokevirtual #183                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters.getK:()I
      13: putfield      #155                // Field k:I
      16: aload_0
      17: aload_1
      18: invokevirtual #185                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters.getT:()I
      21: putfield      #158                // Field t:I
      24: aload_0
      25: aload_0
      26: getfield      #157                // Field n:I
      29: iconst_3
      30: ishr
      31: putfield      #154                // Field cipherTextSize:I
      34: aload_0
      35: aload_0
      36: getfield      #155                // Field k:I
      39: iconst_3
      40: ishr
      41: putfield      #156                // Field maxPlainTextSize:I
      44: return

  private void initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #175                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getN:()I
       5: putfield      #157                // Field n:I
       8: aload_0
       9: aload_1
      10: invokevirtual #174                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getK:()I
      13: putfield      #155                // Field k:I
      16: aload_0
      17: aload_0
      18: getfield      #155                // Field k:I
      21: iconst_3
      22: ishr
      23: putfield      #156                // Field maxPlainTextSize:I
      26: aload_0
      27: aload_0
      28: getfield      #157                // Field n:I
      31: iconst_3
      32: ishr
      33: putfield      #154                // Field cipherTextSize:I
      36: return

  public byte[] messageEncrypt(byte[]);
    Code:
       0: aload_0
       1: getfield      #159                // Field forEncryption:Z
       4: ifne          17
       7: new           #74                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #2                  // String cipher initialised for decryption
      13: invokespecial #163                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #173                // Method computeMessageRepresentative:([B)Lorg/bouncycastle/pqc/math/linearalgebra/GF2Vector;
      22: astore_2
      23: new           #85                 // class org/bouncycastle/pqc/math/linearalgebra/GF2Vector
      26: dup
      27: aload_0
      28: getfield      #157                // Field n:I
      31: aload_0
      32: getfield      #158                // Field t:I
      35: aload_0
      36: getfield      #160                // Field sr:Ljava/security/SecureRandom;
      39: invokespecial #190                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector."<init>":(IILjava/security/SecureRandom;)V
      42: astore_3
      43: aload_0
      44: getfield      #161                // Field key:Lorg/bouncycastle/pqc/crypto/mceliece/McElieceKeyParameters;
      47: checkcast     #83                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters
      50: invokevirtual #186                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters.getG:()Lorg/bouncycastle/pqc/math/linearalgebra/GF2Matrix;
      53: astore        4
      55: aload         4
      57: aload_2
      58: invokevirtual #187                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.leftMultiply:(Lorg/bouncycastle/pqc/math/linearalgebra/Vector;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;
      61: astore        5
      63: aload         5
      65: aload_3
      66: invokevirtual #198                // Method org/bouncycastle/pqc/math/linearalgebra/Vector.add:(Lorg/bouncycastle/pqc/math/linearalgebra/Vector;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;
      69: checkcast     #85                 // class org/bouncycastle/pqc/math/linearalgebra/GF2Vector
      72: astore        6
      74: aload         6
      76: invokevirtual #189                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector.getEncoded:()[B
      79: areturn

  private org.bouncycastle.pqc.math.linearalgebra.GF2Vector computeMessageRepresentative(byte[]);
    Code:
       0: aload_0
       1: getfield      #156                // Field maxPlainTextSize:I
       4: aload_0
       5: getfield      #155                // Field k:I
       8: bipush        7
      10: iand
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: iadd
      20: newarray       byte
      22: astore_2
      23: aload_1
      24: iconst_0
      25: aload_2
      26: iconst_0
      27: aload_1
      28: arraylength
      29: invokestatic  #165                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      32: aload_2
      33: aload_1
      34: arraylength
      35: iconst_1
      36: bastore
      37: aload_0
      38: getfield      #155                // Field k:I
      41: aload_2
      42: invokestatic  #192                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector.OS2VP:(I[B)Lorg/bouncycastle/pqc/math/linearalgebra/GF2Vector;
      45: areturn

  public byte[] messageDecrypt(byte[]) throws org.bouncycastle.crypto.InvalidCipherTextException;
    Code:
       0: aload_0
       1: getfield      #159                // Field forEncryption:Z
       4: ifeq          17
       7: new           #74                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #2                  // String cipher initialised for decryption
      13: invokespecial #163                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #157                // Field n:I
      21: aload_1
      22: invokestatic  #192                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector.OS2VP:(I[B)Lorg/bouncycastle/pqc/math/linearalgebra/GF2Vector;
      25: astore_2
      26: aload_0
      27: getfield      #161                // Field key:Lorg/bouncycastle/pqc/crypto/mceliece/McElieceKeyParameters;
      30: checkcast     #82                 // class org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters
      33: astore_3
      34: aload_3
      35: invokevirtual #178                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getField:()Lorg/bouncycastle/pqc/math/linearalgebra/GF2mField;
      38: astore        4
      40: aload_3
      41: invokevirtual #181                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getGoppaPoly:()Lorg/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM;
      44: astore        5
      46: aload_3
      47: invokevirtual #177                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getSInv:()Lorg/bouncycastle/pqc/math/linearalgebra/GF2Matrix;
      50: astore        6
      52: aload_3
      53: invokevirtual #179                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getP1:()Lorg/bouncycastle/pqc/math/linearalgebra/Permutation;
      56: astore        7
      58: aload_3
      59: invokevirtual #180                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getP2:()Lorg/bouncycastle/pqc/math/linearalgebra/Permutation;
      62: astore        8
      64: aload_3
      65: invokevirtual #176                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getH:()Lorg/bouncycastle/pqc/math/linearalgebra/GF2Matrix;
      68: astore        9
      70: aload_3
      71: invokevirtual #182                // Method org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.getQInv:()[Lorg/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM;
      74: astore        10
      76: aload         7
      78: aload         8
      80: invokevirtual #197                // Method org/bouncycastle/pqc/math/linearalgebra/Permutation.rightMultiply:(Lorg/bouncycastle/pqc/math/linearalgebra/Permutation;)Lorg/bouncycastle/pqc/math/linearalgebra/Permutation;
      83: astore        11
      85: aload         11
      87: invokevirtual #196                // Method org/bouncycastle/pqc/math/linearalgebra/Permutation.computeInverse:()Lorg/bouncycastle/pqc/math/linearalgebra/Permutation;
      90: astore        12
      92: aload_2
      93: aload         12
      95: invokevirtual #193                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector.multiply:(Lorg/bouncycastle/pqc/math/linearalgebra/Permutation;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;
      98: checkcast     #85                 // class org/bouncycastle/pqc/math/linearalgebra/GF2Vector
     101: astore        13
     103: aload         9
     105: aload         13
     107: invokevirtual #188                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.rightMultiply:(Lorg/bouncycastle/pqc/math/linearalgebra/Vector;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;
     110: checkcast     #85                 // class org/bouncycastle/pqc/math/linearalgebra/GF2Vector
     113: astore        14
     115: aload         14
     117: aload         4
     119: aload         5
     121: aload         10
     123: invokestatic  #195                // Method org/bouncycastle/pqc/math/linearalgebra/GoppaCode.syndromeDecode:(Lorg/bouncycastle/pqc/math/linearalgebra/GF2Vector;Lorg/bouncycastle/pqc/math/linearalgebra/GF2mField;Lorg/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM;[Lorg/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM;)Lorg/bouncycastle/pqc/math/linearalgebra/GF2Vector;
     126: astore        15
     128: aload         13
     130: aload         15
     132: invokevirtual #194                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector.add:(Lorg/bouncycastle/pqc/math/linearalgebra/Vector;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;
     135: checkcast     #85                 // class org/bouncycastle/pqc/math/linearalgebra/GF2Vector
     138: astore        16
     140: aload         16
     142: aload         7
     144: invokevirtual #193                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector.multiply:(Lorg/bouncycastle/pqc/math/linearalgebra/Permutation;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;
     147: checkcast     #85                 // class org/bouncycastle/pqc/math/linearalgebra/GF2Vector
     150: astore        16
     152: aload         15
     154: aload         11
     156: invokevirtual #193                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector.multiply:(Lorg/bouncycastle/pqc/math/linearalgebra/Permutation;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;
     159: checkcast     #85                 // class org/bouncycastle/pqc/math/linearalgebra/GF2Vector
     162: astore        15
     164: aload         16
     166: aload_0
     167: getfield      #155                // Field k:I
     170: invokevirtual #191                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector.extractRightVector:(I)Lorg/bouncycastle/pqc/math/linearalgebra/GF2Vector;
     173: astore        17
     175: aload         6
     177: aload         17
     179: invokevirtual #187                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.leftMultiply:(Lorg/bouncycastle/pqc/math/linearalgebra/Vector;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;
     182: checkcast     #85                 // class org/bouncycastle/pqc/math/linearalgebra/GF2Vector
     185: astore        18
     187: aload_0
     188: aload         18
     190: invokespecial #172                // Method computeMessage:(Lorg/bouncycastle/pqc/math/linearalgebra/GF2Vector;)[B
     193: areturn

  private byte[] computeMessage(org.bouncycastle.pqc.math.linearalgebra.GF2Vector) throws org.bouncycastle.crypto.InvalidCipherTextException;
    Code:
       0: aload_1
       1: invokevirtual #189                // Method org/bouncycastle/pqc/math/linearalgebra/GF2Vector.getEncoded:()[B
       4: astore_2
       5: aload_2
       6: arraylength
       7: iconst_1
       8: isub
       9: istore_3
      10: iload_3
      11: iflt          26
      14: aload_2
      15: iload_3
      16: baload
      17: ifne          26
      20: iinc          3, -1
      23: goto          10
      26: iload_3
      27: iflt          37
      30: aload_2
      31: iload_3
      32: baload
      33: iconst_1
      34: if_icmpeq     47
      37: new           #78                 // class org/bouncycastle/crypto/InvalidCipherTextException
      40: dup
      41: ldc           #1                  // String Bad Padding: invalid ciphertext
      43: invokespecial #167                // Method org/bouncycastle/crypto/InvalidCipherTextException."<init>":(Ljava/lang/String;)V
      46: athrow
      47: iload_3
      48: newarray       byte
      50: astore        4
      52: aload_2
      53: iconst_0
      54: aload         4
      56: iconst_0
      57: iload_3
      58: invokestatic  #165                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      61: aload         4
      63: areturn
}
