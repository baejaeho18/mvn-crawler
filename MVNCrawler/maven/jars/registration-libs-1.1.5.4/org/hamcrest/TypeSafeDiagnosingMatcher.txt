Compiled from "TypeSafeDiagnosingMatcher.java"
public abstract class org.hamcrest.TypeSafeDiagnosingMatcher<T> extends org.hamcrest.BaseMatcher<T> {
  private static final org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER;

  private final java.lang.Class<?> expectedType;

  protected abstract boolean matchesSafely(T, org.hamcrest.Description);

  protected org.hamcrest.TypeSafeDiagnosingMatcher(java.lang.Class<?>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/hamcrest/BaseMatcher."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field expectedType:Ljava/lang/Class;
       9: return

  protected org.hamcrest.TypeSafeDiagnosingMatcher(org.hamcrest.internal.ReflectiveTypeFinder);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/hamcrest/BaseMatcher."<init>":()V
       4: aload_0
       5: aload_1
       6: aload_0
       7: invokevirtual #3                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      10: invokevirtual #4                  // Method org/hamcrest/internal/ReflectiveTypeFinder.findExpectedType:(Ljava/lang/Class;)Ljava/lang/Class;
      13: putfield      #2                  // Field expectedType:Ljava/lang/Class;
      16: return

  protected org.hamcrest.TypeSafeDiagnosingMatcher();
    Code:
       0: aload_0
       1: getstatic     #5                  // Field TYPE_FINDER:Lorg/hamcrest/internal/ReflectiveTypeFinder;
       4: invokespecial #6                  // Method "<init>":(Lorg/hamcrest/internal/ReflectiveTypeFinder;)V
       7: return

  public final boolean matches(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        34
       4: aload_0
       5: getfield      #2                  // Field expectedType:Ljava/lang/Class;
       8: aload_1
       9: invokevirtual #7                  // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      12: ifeq          34
      15: aload_0
      16: aload_1
      17: new           #8                  // class org/hamcrest/Description$NullDescription
      20: dup
      21: invokespecial #9                  // Method org/hamcrest/Description$NullDescription."<init>":()V
      24: invokevirtual #10                 // Method matchesSafely:(Ljava/lang/Object;Lorg/hamcrest/Description;)Z
      27: ifeq          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public final void describeMismatch(java.lang.Object, org.hamcrest.Description);
    Code:
       0: aload_1
       1: ifnull        15
       4: aload_0
       5: getfield      #2                  // Field expectedType:Ljava/lang/Class;
       8: aload_1
       9: invokevirtual #7                  // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      12: ifne          24
      15: aload_0
      16: aload_1
      17: aload_2
      18: invokespecial #11                 // Method org/hamcrest/BaseMatcher.describeMismatch:(Ljava/lang/Object;Lorg/hamcrest/Description;)V
      21: goto          31
      24: aload_0
      25: aload_1
      26: aload_2
      27: invokevirtual #10                 // Method matchesSafely:(Ljava/lang/Object;Lorg/hamcrest/Description;)Z
      30: pop
      31: return

  static {};
    Code:
       0: new           #12                 // class org/hamcrest/internal/ReflectiveTypeFinder
       3: dup
       4: ldc           #13                 // String matchesSafely
       6: iconst_2
       7: iconst_0
       8: invokespecial #14                 // Method org/hamcrest/internal/ReflectiveTypeFinder."<init>":(Ljava/lang/String;II)V
      11: putstatic     #5                  // Field TYPE_FINDER:Lorg/hamcrest/internal/ReflectiveTypeFinder;
      14: return
}
