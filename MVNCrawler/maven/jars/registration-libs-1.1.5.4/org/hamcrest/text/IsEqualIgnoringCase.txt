Compiled from "IsEqualIgnoringCase.java"
public class org.hamcrest.text.IsEqualIgnoringCase extends org.hamcrest.TypeSafeMatcher<java.lang.String> {
  private final java.lang.String string;

  public org.hamcrest.text.IsEqualIgnoringCase(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/hamcrest/TypeSafeMatcher."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #3                  // String Non-null value required by IsEqualIgnoringCase()
      14: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #5                  // Field string:Ljava/lang/String;
      23: return

  public boolean matchesSafely(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field string:Ljava/lang/String;
       4: aload_1
       5: invokevirtual #6                  // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       8: ireturn

  public void describeMismatchSafely(java.lang.String, org.hamcrest.Description);
    Code:
       0: aload_2
       1: ldc           #7                  // String was
       3: invokeinterface #8,  2            // InterfaceMethod org/hamcrest/Description.appendText:(Ljava/lang/String;)Lorg/hamcrest/Description;
       8: aload_1
       9: invokeinterface #8,  2            // InterfaceMethod org/hamcrest/Description.appendText:(Ljava/lang/String;)Lorg/hamcrest/Description;
      14: pop
      15: return

  public void describeTo(org.hamcrest.Description);
    Code:
       0: aload_1
       1: ldc           #9                  // String equalToIgnoringCase(
       3: invokeinterface #8,  2            // InterfaceMethod org/hamcrest/Description.appendText:(Ljava/lang/String;)Lorg/hamcrest/Description;
       8: aload_0
       9: getfield      #5                  // Field string:Ljava/lang/String;
      12: invokeinterface #10,  2           // InterfaceMethod org/hamcrest/Description.appendValue:(Ljava/lang/Object;)Lorg/hamcrest/Description;
      17: ldc           #11                 // String )
      19: invokeinterface #8,  2            // InterfaceMethod org/hamcrest/Description.appendText:(Ljava/lang/String;)Lorg/hamcrest/Description;
      24: pop
      25: return

  public static org.hamcrest.Matcher<java.lang.String> equalToIgnoringCase(java.lang.String);
    Code:
       0: new           #12                 // class org/hamcrest/text/IsEqualIgnoringCase
       3: dup
       4: aload_0
       5: invokespecial #13                 // Method "<init>":(Ljava/lang/String;)V
       8: areturn

  public void describeMismatchSafely(java.lang.Object, org.hamcrest.Description);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #14                 // class java/lang/String
       5: aload_2
       6: invokevirtual #15                 // Method describeMismatchSafely:(Ljava/lang/String;Lorg/hamcrest/Description;)V
       9: return

  public boolean matchesSafely(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #14                 // class java/lang/String
       5: invokevirtual #16                 // Method matchesSafely:(Ljava/lang/String;)Z
       8: ireturn
}
