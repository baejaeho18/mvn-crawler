Compiled from "FailureSummaryAppenderListener.java"
public abstract class net.logstash.logback.appender.listener.FailureSummaryAppenderListener<Event extends ch.qos.logback.core.spi.DeferredProcessingAware> implements net.logstash.logback.appender.listener.TcpAppenderListener<Event> {
  private final java.util.concurrent.atomic.AtomicReference<net.logstash.logback.appender.listener.FailureSummaryAppenderListener$State> appendState;

  private final java.util.concurrent.atomic.AtomicReference<net.logstash.logback.appender.listener.FailureSummaryAppenderListener$State> sendState;

  private final java.util.concurrent.atomic.AtomicReference<net.logstash.logback.appender.listener.FailureSummaryAppenderListener$State> connectState;

  private static final net.logstash.logback.appender.listener.FailureSummaryAppenderListener$State SUCCEEDING_STATE;

  public net.logstash.logback.appender.listener.FailureSummaryAppenderListener();
    Code:
       0: aload_0
       1: invokespecial #38                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #40                 // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: getstatic     #42                 // Field SUCCEEDING_STATE:Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$State;
      12: invokespecial #45                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      15: putfield      #47                 // Field appendState:Ljava/util/concurrent/atomic/AtomicReference;
      18: aload_0
      19: new           #40                 // class java/util/concurrent/atomic/AtomicReference
      22: dup
      23: getstatic     #42                 // Field SUCCEEDING_STATE:Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$State;
      26: invokespecial #45                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      29: putfield      #49                 // Field sendState:Ljava/util/concurrent/atomic/AtomicReference;
      32: aload_0
      33: new           #40                 // class java/util/concurrent/atomic/AtomicReference
      36: dup
      37: getstatic     #42                 // Field SUCCEEDING_STATE:Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$State;
      40: invokespecial #45                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      43: putfield      #51                 // Field connectState:Ljava/util/concurrent/atomic/AtomicReference;
      46: return

  public void appenderStarted(ch.qos.logback.core.Appender<Event>);
    Code:
       0: return

  public void appenderStopped(ch.qos.logback.core.Appender<Event>);
    Code:
       0: return

  public void eventAppended(ch.qos.logback.core.Appender<Event>, Event, long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #47                 // Field appendState:Ljava/util/concurrent/atomic/AtomicReference;
       5: getstatic     #68                 // Field net/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType.APPEND:Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType;
       8: invokespecial #72                 // Method recordSuccess:(Ljava/util/concurrent/atomic/AtomicReference;Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType;)V
      11: return

  public void eventAppendFailed(ch.qos.logback.core.Appender<Event>, Event, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #47                 // Field appendState:Ljava/util/concurrent/atomic/AtomicReference;
       5: aload_3
       6: invokespecial #84                 // Method recordFailure:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)V
       9: return

  public void eventSent(ch.qos.logback.core.Appender<Event>, java.net.Socket, Event, long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #49                 // Field sendState:Ljava/util/concurrent/atomic/AtomicReference;
       5: getstatic     #92                 // Field net/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType.SEND:Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType;
       8: invokespecial #72                 // Method recordSuccess:(Ljava/util/concurrent/atomic/AtomicReference;Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType;)V
      11: return

  public void eventSendFailure(ch.qos.logback.core.Appender<Event>, Event, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #49                 // Field sendState:Ljava/util/concurrent/atomic/AtomicReference;
       5: aload_3
       6: invokespecial #84                 // Method recordFailure:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)V
       9: return

  public void connectionOpened(ch.qos.logback.core.Appender<Event>, java.net.Socket);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #51                 // Field connectState:Ljava/util/concurrent/atomic/AtomicReference;
       5: getstatic     #101                // Field net/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType.CONNECT:Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType;
       8: invokespecial #72                 // Method recordSuccess:(Ljava/util/concurrent/atomic/AtomicReference;Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType;)V
      11: return

  public void connectionFailed(ch.qos.logback.core.Appender<Event>, java.net.InetSocketAddress, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #51                 // Field connectState:Ljava/util/concurrent/atomic/AtomicReference;
       5: aload_3
       6: invokespecial #84                 // Method recordFailure:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)V
       9: return

  public void connectionClosed(ch.qos.logback.core.Appender<Event>, java.net.Socket);
    Code:
       0: return

  private void recordSuccess(java.util.concurrent.atomic.AtomicReference<net.logstash.logback.appender.listener.FailureSummaryAppenderListener$State>, net.logstash.logback.appender.listener.FailureSummaryAppenderListener$CallbackType);
    Code:
       0: aload_1
       1: invokevirtual #112                // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       4: checkcast     #15                 // class net/logstash/logback/appender/listener/FailureSummaryAppenderListener$State
       7: astore_3
       8: aload_3
       9: invokeinterface #116,  1          // InterfaceMethod net/logstash/logback/appender/listener/FailureSummaryAppenderListener$State.isSucceeding:()Z
      14: ifne          41
      17: aload_1
      18: aload_3
      19: getstatic     #42                 // Field SUCCEEDING_STATE:Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$State;
      22: invokevirtual #120                // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      25: ifeq          41
      28: aload_3
      29: checkcast     #12                 // class net/logstash/logback/appender/listener/FailureSummaryAppenderListener$FailingState
      32: astore        4
      34: aload_0
      35: aload         4
      37: aload_2
      38: invokevirtual #124                // Method handleFailureSummary:(Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$FailureSummary;Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$CallbackType;)V
      41: return

  private void recordFailure(java.util.concurrent.atomic.AtomicReference<net.logstash.logback.appender.listener.FailureSummaryAppenderListener$State>, java.lang.Throwable);
    Code:
       0: aload_1
       1: invokevirtual #112                // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       4: checkcast     #15                 // class net/logstash/logback/appender/listener/FailureSummaryAppenderListener$State
       7: astore_3
       8: aload_3
       9: invokeinterface #116,  1          // InterfaceMethod net/logstash/logback/appender/listener/FailureSummaryAppenderListener$State.isSucceeding:()Z
      14: ifeq          41
      17: aload_1
      18: aload_3
      19: new           #12                 // class net/logstash/logback/appender/listener/FailureSummaryAppenderListener$FailingState
      22: dup
      23: aload_2
      24: aconst_null
      25: invokespecial #133                // Method net/logstash/logback/appender/listener/FailureSummaryAppenderListener$FailingState."<init>":(Ljava/lang/Throwable;Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$1;)V
      28: invokevirtual #120                // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      31: ifne          49
      34: aload_0
      35: aload_1
      36: aload_2
      37: invokespecial #84                 // Method recordFailure:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)V
      40: return
      41: aload_3
      42: checkcast     #12                 // class net/logstash/logback/appender/listener/FailureSummaryAppenderListener$FailingState
      45: aload_2
      46: invokestatic  #137                // Method net/logstash/logback/appender/listener/FailureSummaryAppenderListener$FailingState.access$100:(Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$FailingState;Ljava/lang/Throwable;)V
      49: return

  protected abstract void handleFailureSummary(net.logstash.logback.appender.listener.FailureSummaryAppenderListener$FailureSummary, net.logstash.logback.appender.listener.FailureSummaryAppenderListener$CallbackType);

  private static boolean lambda$static$0();
    Code:
       0: iconst_1
       1: ireturn

  static {};
    Code:
       0: invokedynamic #153,  0            // InvokeDynamic #0:isSucceeding:()Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$State;
       5: putstatic     #42                 // Field SUCCEEDING_STATE:Lnet/logstash/logback/appender/listener/FailureSummaryAppenderListener$State;
       8: return
}
