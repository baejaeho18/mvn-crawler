Compiled from "LoggingEventAsyncDisruptorAppender.java"
public class net.logstash.logback.appender.LoggingEventAsyncDisruptorAppender extends net.logstash.logback.appender.DelegatingAsyncDisruptorAppender<ch.qos.logback.classic.spi.ILoggingEvent, net.logstash.logback.appender.listener.AppenderListener<ch.qos.logback.classic.spi.ILoggingEvent>> {
  private boolean includeCallerData;

  public net.logstash.logback.appender.LoggingEventAsyncDisruptorAppender();
    Code:
       0: aload_0
       1: invokespecial #12                 // Method net/logstash/logback/appender/DelegatingAsyncDisruptorAppender."<init>":()V
       4: return

  protected void prepareForDeferredProcessing(ch.qos.logback.classic.spi.ILoggingEvent);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #19                 // Method net/logstash/logback/appender/DelegatingAsyncDisruptorAppender.prepareForDeferredProcessing:(Lch/qos/logback/core/spi/DeferredProcessingAware;)V
       5: aload_0
       6: getfield      #21                 // Field includeCallerData:Z
       9: ifeq          19
      12: aload_1
      13: invokeinterface #27,  1           // InterfaceMethod ch/qos/logback/classic/spi/ILoggingEvent.getCallerData:()[Ljava/lang/StackTraceElement;
      18: pop
      19: return

  public boolean isIncludeCallerData();
    Code:
       0: aload_0
       1: getfield      #21                 // Field includeCallerData:Z
       4: ireturn

  public void setIncludeCallerData(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field includeCallerData:Z
       5: return

  protected void prepareForDeferredProcessing(ch.qos.logback.core.spi.DeferredProcessingAware);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #23                 // class ch/qos/logback/classic/spi/ILoggingEvent
       5: invokevirtual #35                 // Method prepareForDeferredProcessing:(Lch/qos/logback/classic/spi/ILoggingEvent;)V
       8: return
}
