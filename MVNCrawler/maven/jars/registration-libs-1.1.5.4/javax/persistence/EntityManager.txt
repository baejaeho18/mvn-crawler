Compiled from "EntityManager.java"
public interface javax.persistence.EntityManager {
  public abstract void persist(java.lang.Object);

  public abstract <T> T merge(T);

  public abstract void remove(java.lang.Object);

  public abstract <T> T find(java.lang.Class<T>, java.lang.Object);

  public abstract <T> T find(java.lang.Class<T>, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>);

  public abstract <T> T find(java.lang.Class<T>, java.lang.Object, javax.persistence.LockModeType);

  public abstract <T> T find(java.lang.Class<T>, java.lang.Object, javax.persistence.LockModeType, java.util.Map<java.lang.String, java.lang.Object>);

  public abstract <T> T getReference(java.lang.Class<T>, java.lang.Object);

  public abstract void flush();

  public abstract void setFlushMode(javax.persistence.FlushModeType);

  public abstract javax.persistence.FlushModeType getFlushMode();

  public abstract void lock(java.lang.Object, javax.persistence.LockModeType);

  public abstract void lock(java.lang.Object, javax.persistence.LockModeType, java.util.Map<java.lang.String, java.lang.Object>);

  public abstract void refresh(java.lang.Object);

  public abstract void refresh(java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>);

  public abstract void refresh(java.lang.Object, javax.persistence.LockModeType);

  public abstract void refresh(java.lang.Object, javax.persistence.LockModeType, java.util.Map<java.lang.String, java.lang.Object>);

  public abstract void clear();

  public abstract void detach(java.lang.Object);

  public abstract boolean contains(java.lang.Object);

  public abstract javax.persistence.LockModeType getLockMode(java.lang.Object);

  public abstract void setProperty(java.lang.String, java.lang.Object);

  public abstract java.util.Map<java.lang.String, java.lang.Object> getProperties();

  public abstract javax.persistence.Query createQuery(java.lang.String);

  public abstract <T> javax.persistence.TypedQuery<T> createQuery(javax.persistence.criteria.CriteriaQuery<T>);

  public abstract javax.persistence.Query createQuery(javax.persistence.criteria.CriteriaUpdate);

  public abstract javax.persistence.Query createQuery(javax.persistence.criteria.CriteriaDelete);

  public abstract <T> javax.persistence.TypedQuery<T> createQuery(java.lang.String, java.lang.Class<T>);

  public abstract javax.persistence.Query createNamedQuery(java.lang.String);

  public abstract <T> javax.persistence.TypedQuery<T> createNamedQuery(java.lang.String, java.lang.Class<T>);

  public abstract javax.persistence.Query createNativeQuery(java.lang.String);

  public abstract javax.persistence.Query createNativeQuery(java.lang.String, java.lang.Class);

  public abstract javax.persistence.Query createNativeQuery(java.lang.String, java.lang.String);

  public abstract javax.persistence.StoredProcedureQuery createNamedStoredProcedureQuery(java.lang.String);

  public abstract javax.persistence.StoredProcedureQuery createStoredProcedureQuery(java.lang.String);

  public abstract javax.persistence.StoredProcedureQuery createStoredProcedureQuery(java.lang.String, java.lang.Class...);

  public abstract javax.persistence.StoredProcedureQuery createStoredProcedureQuery(java.lang.String, java.lang.String...);

  public abstract void joinTransaction();

  public abstract boolean isJoinedToTransaction();

  public abstract <T> T unwrap(java.lang.Class<T>);

  public abstract java.lang.Object getDelegate();

  public abstract void close();

  public abstract boolean isOpen();

  public abstract javax.persistence.EntityTransaction getTransaction();

  public abstract javax.persistence.EntityManagerFactory getEntityManagerFactory();

  public abstract javax.persistence.criteria.CriteriaBuilder getCriteriaBuilder();

  public abstract javax.persistence.metamodel.Metamodel getMetamodel();

  public abstract <T> javax.persistence.EntityGraph<T> createEntityGraph(java.lang.Class<T>);

  public abstract javax.persistence.EntityGraph<?> createEntityGraph(java.lang.String);

  public abstract javax.persistence.EntityGraph<?> getEntityGraph(java.lang.String);

  public abstract <T> java.util.List<javax.persistence.EntityGraph<? super T>> getEntityGraphs(java.lang.Class<T>);
}
