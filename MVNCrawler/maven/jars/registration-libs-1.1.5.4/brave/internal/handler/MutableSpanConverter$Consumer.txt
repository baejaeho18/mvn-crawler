Compiled from "MutableSpanConverter.java"
final class brave.internal.handler.MutableSpanConverter$Consumer extends java.lang.Enum<brave.internal.handler.MutableSpanConverter$Consumer> implements brave.handler.MutableSpan$TagConsumer<zipkin2.Span$Builder>, brave.handler.MutableSpan$AnnotationConsumer<zipkin2.Span$Builder> {
  public static final brave.internal.handler.MutableSpanConverter$Consumer INSTANCE;

  private static final brave.internal.handler.MutableSpanConverter$Consumer[] $VALUES;

  public static brave.internal.handler.MutableSpanConverter$Consumer[] values();
    Code:
       0: getstatic     #30                 // Field $VALUES:[Lbrave/internal/handler/MutableSpanConverter$Consumer;
       3: invokevirtual #35                 // Method "[Lbrave/internal/handler/MutableSpanConverter$Consumer;".clone:()Ljava/lang/Object;
       6: checkcast     #31                 // class "[Lbrave/internal/handler/MutableSpanConverter$Consumer;"
       9: areturn

  public static brave.internal.handler.MutableSpanConverter$Consumer valueOf(java.lang.String);
    Code:
       0: ldc           #2                  // class brave/internal/handler/MutableSpanConverter$Consumer
       2: aload_0
       3: invokestatic  #40                 // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
       6: checkcast     #2                  // class brave/internal/handler/MutableSpanConverter$Consumer
       9: areturn

  private brave.internal.handler.MutableSpanConverter$Consumer();
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #47                 // Method java/lang/Enum."<init>":(Ljava/lang/String;I)V
       6: return

  public void accept(zipkin2.Span$Builder, java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokevirtual #54                 // Method zipkin2/Span$Builder.putTag:(Ljava/lang/String;Ljava/lang/String;)Lzipkin2/Span$Builder;
       6: pop
       7: return

  public void accept(zipkin2.Span$Builder, long, java.lang.String);
    Code:
       0: aload_1
       1: lload_2
       2: aload         4
       4: invokevirtual #63                 // Method zipkin2/Span$Builder.addAnnotation:(JLjava/lang/String;)Lzipkin2/Span$Builder;
       7: pop
       8: return

  public void accept(java.lang.Object, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #15                 // class zipkin2/Span$Builder
       5: aload_2
       6: aload_3
       7: invokevirtual #68                 // Method accept:(Lzipkin2/Span$Builder;Ljava/lang/String;Ljava/lang/String;)V
      10: return

  public void accept(java.lang.Object, long, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #15                 // class zipkin2/Span$Builder
       5: lload_2
       6: aload         4
       8: invokevirtual #71                 // Method accept:(Lzipkin2/Span$Builder;JLjava/lang/String;)V
      11: return

  static {};
    Code:
       0: new           #2                  // class brave/internal/handler/MutableSpanConverter$Consumer
       3: dup
       4: ldc           #73                 // String INSTANCE
       6: iconst_0
       7: invokespecial #74                 // Method "<init>":(Ljava/lang/String;I)V
      10: putstatic     #76                 // Field INSTANCE:Lbrave/internal/handler/MutableSpanConverter$Consumer;
      13: iconst_1
      14: anewarray     #2                  // class brave/internal/handler/MutableSpanConverter$Consumer
      17: dup
      18: iconst_0
      19: getstatic     #76                 // Field INSTANCE:Lbrave/internal/handler/MutableSpanConverter$Consumer;
      22: aastore
      23: putstatic     #30                 // Field $VALUES:[Lbrave/internal/handler/MutableSpanConverter$Consumer;
      26: return
}
