Compiled from "MutableSpanConverter.java"
public final class brave.internal.handler.MutableSpanConverter {
  final brave.ErrorParser errorParser;

  final java.lang.String localServiceName;

  final java.lang.String localIp;

  final int localPort;

  final zipkin2.Endpoint localEndpoint;

  public brave.internal.handler.MutableSpanConverter(brave.ErrorParser, java.lang.String, java.lang.String, int);
    Code:
       0: aload_0
       1: invokespecial #47                 // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #49                 // class java/lang/NullPointerException
      11: dup
      12: ldc           #51                 // String errorParser == null
      14: invokespecial #54                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #60                 // Field errorParser:Lbrave/ErrorParser;
      23: aload_2
      24: ifnonnull     37
      27: new           #49                 // class java/lang/NullPointerException
      30: dup
      31: ldc           #62                 // String localServiceName == null
      33: invokespecial #54                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: aload_2
      39: putfield      #64                 // Field localServiceName:Ljava/lang/String;
      42: aload_0
      43: aload_3
      44: putfield      #66                 // Field localIp:Ljava/lang/String;
      47: aload_0
      48: iload         4
      50: putfield      #68                 // Field localPort:I
      53: aload_0
      54: invokestatic  #72                 // Method zipkin2/Endpoint.newBuilder:()Lzipkin2/Endpoint$Builder;
      57: aload_2
      58: invokevirtual #76                 // Method zipkin2/Endpoint$Builder.serviceName:(Ljava/lang/String;)Lzipkin2/Endpoint$Builder;
      61: aload_3
      62: invokevirtual #79                 // Method zipkin2/Endpoint$Builder.ip:(Ljava/lang/String;)Lzipkin2/Endpoint$Builder;
      65: iload         4
      67: invokevirtual #83                 // Method zipkin2/Endpoint$Builder.port:(I)Lzipkin2/Endpoint$Builder;
      70: invokevirtual #87                 // Method zipkin2/Endpoint$Builder.build:()Lzipkin2/Endpoint;
      73: putfield      #89                 // Field localEndpoint:Lzipkin2/Endpoint;
      76: return

  void convert(brave.handler.MutableSpan, zipkin2.Span$Builder);
    Code:
       0: aload_2
       1: aload_1
       2: invokevirtual #97                 // Method brave/handler/MutableSpan.name:()Ljava/lang/String;
       5: invokevirtual #100                // Method zipkin2/Span$Builder.name:(Ljava/lang/String;)Lzipkin2/Span$Builder;
       8: pop
       9: aload_1
      10: invokevirtual #104                // Method brave/handler/MutableSpan.startTimestamp:()J
      13: lstore_3
      14: aload_1
      15: invokevirtual #107                // Method brave/handler/MutableSpan.finishTimestamp:()J
      18: lstore        5
      20: aload_2
      21: lload_3
      22: invokevirtual #111                // Method zipkin2/Span$Builder.timestamp:(J)Lzipkin2/Span$Builder;
      25: pop
      26: lload_3
      27: lconst_0
      28: lcmp
      29: ifeq          52
      32: lload         5
      34: lconst_0
      35: lcmp
      36: ifeq          52
      39: aload_2
      40: lload         5
      42: lload_3
      43: lsub
      44: lconst_1
      45: invokestatic  #117                // Method java/lang/Math.max:(JJ)J
      48: invokevirtual #120                // Method zipkin2/Span$Builder.duration:(J)Lzipkin2/Span$Builder;
      51: pop
      52: aload_1
      53: invokevirtual #124                // Method brave/handler/MutableSpan.kind:()Lbrave/Span$Kind;
      56: astore        7
      58: aload         7
      60: ifnull        89
      63: aload         7
      65: invokevirtual #128                // Method brave/Span$Kind.ordinal:()I
      68: invokestatic  #132                // Method zipkin2/Span$Kind.values:()[Lzipkin2/Span$Kind;
      71: arraylength
      72: if_icmpge     89
      75: aload_2
      76: invokestatic  #132                // Method zipkin2/Span$Kind.values:()[Lzipkin2/Span$Kind;
      79: aload         7
      81: invokevirtual #128                // Method brave/Span$Kind.ordinal:()I
      84: aaload
      85: invokevirtual #135                // Method zipkin2/Span$Builder.kind:(Lzipkin2/Span$Kind;)Lzipkin2/Span$Builder;
      88: pop
      89: aload_0
      90: aload_1
      91: invokevirtual #137                // Method brave/handler/MutableSpan.localServiceName:()Ljava/lang/String;
      94: aload_1
      95: invokevirtual #139                // Method brave/handler/MutableSpan.localIp:()Ljava/lang/String;
      98: aload_1
      99: invokevirtual #141                // Method brave/handler/MutableSpan.localPort:()I
     102: aload_2
     103: invokevirtual #145                // Method addLocalEndpoint:(Ljava/lang/String;Ljava/lang/String;ILzipkin2/Span$Builder;)V
     106: aload_1
     107: invokevirtual #148                // Method brave/handler/MutableSpan.remoteServiceName:()Ljava/lang/String;
     110: astore        8
     112: aload_1
     113: invokevirtual #151                // Method brave/handler/MutableSpan.remoteIp:()Ljava/lang/String;
     116: astore        9
     118: aload         8
     120: ifnonnull     128
     123: aload         9
     125: ifnull        156
     128: aload_2
     129: invokestatic  #72                 // Method zipkin2/Endpoint.newBuilder:()Lzipkin2/Endpoint$Builder;
     132: aload         8
     134: invokevirtual #76                 // Method zipkin2/Endpoint$Builder.serviceName:(Ljava/lang/String;)Lzipkin2/Endpoint$Builder;
     137: aload         9
     139: invokevirtual #79                 // Method zipkin2/Endpoint$Builder.ip:(Ljava/lang/String;)Lzipkin2/Endpoint$Builder;
     142: aload_1
     143: invokevirtual #154                // Method brave/handler/MutableSpan.remotePort:()I
     146: invokevirtual #83                 // Method zipkin2/Endpoint$Builder.port:(I)Lzipkin2/Endpoint$Builder;
     149: invokevirtual #87                 // Method zipkin2/Endpoint$Builder.build:()Lzipkin2/Endpoint;
     152: invokevirtual #158                // Method zipkin2/Span$Builder.remoteEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     155: pop
     156: aload_1
     157: ldc           #160                // String error
     159: invokevirtual #164                // Method brave/handler/MutableSpan.tag:(Ljava/lang/String;)Ljava/lang/String;
     162: astore        10
     164: aload         10
     166: ifnonnull     188
     169: aload_1
     170: invokevirtual #167                // Method brave/handler/MutableSpan.error:()Ljava/lang/Throwable;
     173: ifnull        188
     176: aload_0
     177: getfield      #60                 // Field errorParser:Lbrave/ErrorParser;
     180: aload_1
     181: invokevirtual #167                // Method brave/handler/MutableSpan.error:()Ljava/lang/Throwable;
     184: aload_1
     185: invokevirtual #170                // Method brave/ErrorParser.error:(Ljava/lang/Throwable;Lbrave/handler/MutableSpan;)V
     188: aload_1
     189: getstatic     #174                // Field brave/internal/handler/MutableSpanConverter$Consumer.INSTANCE:Lbrave/internal/handler/MutableSpanConverter$Consumer;
     192: aload_2
     193: invokevirtual #178                // Method brave/handler/MutableSpan.forEachTag:(Lbrave/handler/MutableSpan$TagConsumer;Ljava/lang/Object;)V
     196: aload_1
     197: getstatic     #174                // Field brave/internal/handler/MutableSpanConverter$Consumer.INSTANCE:Lbrave/internal/handler/MutableSpanConverter$Consumer;
     200: aload_2
     201: invokevirtual #182                // Method brave/handler/MutableSpan.forEachAnnotation:(Lbrave/handler/MutableSpan$AnnotationConsumer;Ljava/lang/Object;)V
     204: aload_1
     205: invokevirtual #186                // Method brave/handler/MutableSpan.shared:()Z
     208: ifeq          217
     211: aload_2
     212: iconst_1
     213: invokevirtual #189                // Method zipkin2/Span$Builder.shared:(Z)Lzipkin2/Span$Builder;
     216: pop
     217: return

  void addLocalEndpoint(java.lang.String, java.lang.String, int, zipkin2.Span$Builder);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: getfield      #64                 // Field localServiceName:Ljava/lang/String;
       8: astore_1
       9: aload_2
      10: ifnonnull     18
      13: aload_0
      14: getfield      #66                 // Field localIp:Ljava/lang/String;
      17: astore_2
      18: iload_3
      19: ifgt          27
      22: aload_0
      23: getfield      #68                 // Field localPort:I
      26: istore_3
      27: aload_0
      28: getfield      #64                 // Field localServiceName:Ljava/lang/String;
      31: aload_1
      32: invokevirtual #202                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      35: ifeq          84
      38: aload_0
      39: getfield      #66                 // Field localIp:Ljava/lang/String;
      42: ifnonnull     52
      45: aload_2
      46: ifnonnull     84
      49: goto          63
      52: aload_0
      53: getfield      #66                 // Field localIp:Ljava/lang/String;
      56: aload_2
      57: invokevirtual #202                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      60: ifeq          84
      63: aload_0
      64: getfield      #68                 // Field localPort:I
      67: iload_3
      68: if_icmpne     84
      71: aload         4
      73: aload_0
      74: getfield      #89                 // Field localEndpoint:Lzipkin2/Endpoint;
      77: invokevirtual #204                // Method zipkin2/Span$Builder.localEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
      80: pop
      81: goto          108
      84: aload         4
      86: invokestatic  #72                 // Method zipkin2/Endpoint.newBuilder:()Lzipkin2/Endpoint$Builder;
      89: aload_1
      90: invokevirtual #76                 // Method zipkin2/Endpoint$Builder.serviceName:(Ljava/lang/String;)Lzipkin2/Endpoint$Builder;
      93: aload_2
      94: invokevirtual #79                 // Method zipkin2/Endpoint$Builder.ip:(Ljava/lang/String;)Lzipkin2/Endpoint$Builder;
      97: iload_3
      98: invokevirtual #83                 // Method zipkin2/Endpoint$Builder.port:(I)Lzipkin2/Endpoint$Builder;
     101: invokevirtual #87                 // Method zipkin2/Endpoint$Builder.build:()Lzipkin2/Endpoint;
     104: invokevirtual #204                // Method zipkin2/Span$Builder.localEndpoint:(Lzipkin2/Endpoint;)Lzipkin2/Span$Builder;
     107: pop
     108: return
}
