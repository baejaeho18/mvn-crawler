Compiled from "RateLimitingSampler.java"
public class brave.sampler.RateLimitingSampler extends brave.sampler.Sampler {
  static final long NANOS_PER_SECOND;

  static final int NANOS_PER_DECISECOND;

  final brave.sampler.RateLimitingSampler$MaxFunction maxFunction;

  final java.util.concurrent.atomic.AtomicInteger usage;

  final java.util.concurrent.atomic.AtomicLong nextReset;

  public static brave.sampler.Sampler create(int);
    Code:
       0: iload_0
       1: ifge          14
       4: new           #28                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #30                 // String tracesPerSecond < 0
      10: invokespecial #34                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: iload_0
      15: ifne          22
      18: getstatic     #38                 // Field brave/sampler/Sampler.NEVER_SAMPLE:Lbrave/sampler/Sampler;
      21: areturn
      22: new           #2                  // class brave/sampler/RateLimitingSampler
      25: dup
      26: iload_0
      27: invokespecial #41                 // Method "<init>":(I)V
      30: areturn

  brave.sampler.RateLimitingSampler(int);
    Code:
       0: aload_0
       1: invokespecial #45                 // Method brave/sampler/Sampler."<init>":()V
       4: aload_0
       5: new           #47                 // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_0
      10: invokespecial #48                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #50                 // Field usage:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: iload_1
      18: bipush        10
      20: if_icmpge     34
      23: new           #10                 // class brave/sampler/RateLimitingSampler$LessThan10
      26: dup
      27: iload_1
      28: invokespecial #51                 // Method brave/sampler/RateLimitingSampler$LessThan10."<init>":(I)V
      31: goto          42
      34: new           #7                  // class brave/sampler/RateLimitingSampler$AtLeast10
      37: dup
      38: iload_1
      39: invokespecial #52                 // Method brave/sampler/RateLimitingSampler$AtLeast10."<init>":(I)V
      42: putfield      #54                 // Field maxFunction:Lbrave/sampler/RateLimitingSampler$MaxFunction;
      45: invokestatic  #60                 // Method java/lang/System.nanoTime:()J
      48: lstore_2
      49: aload_0
      50: new           #62                 // class java/util/concurrent/atomic/AtomicLong
      53: dup
      54: lload_2
      55: getstatic     #64                 // Field NANOS_PER_SECOND:J
      58: ladd
      59: invokespecial #67                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      62: putfield      #69                 // Field nextReset:Ljava/util/concurrent/atomic/AtomicLong;
      65: return

  public boolean isSampled(long);
    Code:
       0: invokestatic  #60                 // Method java/lang/System.nanoTime:()J
       3: lstore_3
       4: aload_0
       5: getfield      #69                 // Field nextReset:Ljava/util/concurrent/atomic/AtomicLong;
       8: invokevirtual #77                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      11: lstore        5
      13: lload_3
      14: lload         5
      16: lsub
      17: lneg
      18: lstore        7
      20: lload         7
      22: lconst_0
      23: lcmp
      24: ifgt          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: istore        9
      34: iload         9
      36: ifeq          65
      39: aload_0
      40: getfield      #69                 // Field nextReset:Ljava/util/concurrent/atomic/AtomicLong;
      43: lload         5
      45: lload         5
      47: getstatic     #64                 // Field NANOS_PER_SECOND:J
      50: ladd
      51: invokevirtual #81                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      54: ifeq          65
      57: aload_0
      58: getfield      #50                 // Field usage:Ljava/util/concurrent/atomic/AtomicInteger;
      61: iconst_0
      62: invokevirtual #84                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      65: aload_0
      66: getfield      #54                 // Field maxFunction:Lbrave/sampler/RateLimitingSampler$MaxFunction;
      69: iload         9
      71: ifeq          78
      74: lconst_0
      75: goto          80
      78: lload         7
      80: invokevirtual #88                 // Method brave/sampler/RateLimitingSampler$MaxFunction.max:(J)I
      83: istore        10
      85: aload_0
      86: getfield      #50                 // Field usage:Ljava/util/concurrent/atomic/AtomicInteger;
      89: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      92: istore        11
      94: iload         11
      96: iconst_1
      97: iadd
      98: istore        12
     100: iload         12
     102: iload         10
     104: if_icmple     109
     107: iconst_0
     108: ireturn
     109: aload_0
     110: getfield      #50                 // Field usage:Ljava/util/concurrent/atomic/AtomicInteger;
     113: iload         11
     115: iload         12
     117: invokevirtual #94                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     120: ifeq          85
     123: iconst_1
     124: ireturn

  static {};
    Code:
       0: getstatic     #108                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       3: lconst_1
       4: invokevirtual #112                // Method java/util/concurrent/TimeUnit.toNanos:(J)J
       7: putstatic     #64                 // Field NANOS_PER_SECOND:J
      10: getstatic     #64                 // Field NANOS_PER_SECOND:J
      13: ldc2_w        #113                // long 10l
      16: ldiv
      17: l2i
      18: putstatic     #116                // Field NANOS_PER_DECISECOND:I
      21: return
}
