Compiled from "StackLocator.java"
public class org.apache.logging.log4j.util.StackLocator {
  private static final java.lang.StackWalker walker;

  private static final java.lang.StackWalker stackWalker;

  private static final org.apache.logging.log4j.util.StackLocator INSTANCE;

  public static org.apache.logging.log4j.util.StackLocator getInstance();
    Code:
       0: getstatic     #1                  // Field INSTANCE:Lorg/apache/logging/log4j/util/StackLocator;
       3: areturn

  private org.apache.logging.log4j.util.StackLocator();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public java.lang.Class<?> getCallerClass(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #3                  // String
       4: invokevirtual #4                  // Method getCallerClass:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Class;
       7: areturn

  public java.lang.Class<?> getCallerClass(java.lang.String, java.lang.String);
    Code:
       0: getstatic     #5                  // Field walker:Ljava/lang/StackWalker;
       3: aload_1
       4: aload_2
       5: invokedynamic #6,  0              // InvokeDynamic #0:apply:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/function/Function;
      10: invokevirtual #7                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      13: checkcast     #8                  // class java/util/Optional
      16: invokedynamic #9,  0              // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      21: invokevirtual #10                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      24: aconst_null
      25: invokevirtual #11                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #12                 // class java/lang/Class
      31: areturn

  public java.lang.Class<?> getCallerClass(java.lang.Class<?>);
    Code:
       0: getstatic     #5                  // Field walker:Ljava/lang/StackWalker;
       3: aload_1
       4: invokedynamic #13,  0             // InvokeDynamic #2:apply:(Ljava/lang/Class;)Ljava/util/function/Function;
       9: invokevirtual #7                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #8                  // class java/util/Optional
      15: invokedynamic #9,  0              // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      20: invokevirtual #10                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      23: aconst_null
      24: invokevirtual #11                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #12                 // class java/lang/Class
      30: areturn

  public java.lang.Class<?> getCallerClass(int);
    Code:
       0: getstatic     #5                  // Field walker:Ljava/lang/StackWalker;
       3: iload_1
       4: invokedynamic #14,  0             // InvokeDynamic #3:apply:(I)Ljava/util/function/Function;
       9: invokevirtual #7                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #8                  // class java/util/Optional
      15: invokedynamic #9,  0              // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      20: invokevirtual #10                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      23: aconst_null
      24: invokevirtual #11                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #12                 // class java/lang/Class
      30: areturn

  public java.util.Stack<java.lang.Class<?>> getCurrentStackTrace();
    Code:
       0: new           #15                 // class java/util/Stack
       3: dup
       4: invokespecial #16                 // Method java/util/Stack."<init>":()V
       7: astore_1
       8: getstatic     #5                  // Field walker:Ljava/lang/StackWalker;
      11: invokedynamic #17,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      16: invokevirtual #7                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      19: checkcast     #18                 // class java/util/List
      22: astore_2
      23: aload_1
      24: aload_2
      25: invokevirtual #19                 // Method java/util/Stack.addAll:(Ljava/util/Collection;)Z
      28: pop
      29: aload_1
      30: areturn

  public java.lang.StackTraceElement calcLocation(java.lang.String);
    Code:
       0: getstatic     #20                 // Field stackWalker:Ljava/lang/StackWalker;
       3: aload_1
       4: invokedynamic #21,  0             // InvokeDynamic #5:apply:(Ljava/lang/String;)Ljava/util/function/Function;
       9: invokevirtual #7                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #8                  // class java/util/Optional
      15: invokevirtual #22                 // Method java/util/Optional.get:()Ljava/lang/Object;
      18: checkcast     #23                 // class java/lang/StackWalker$StackFrame
      21: invokeinterface #24,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.toStackTraceElement:()Ljava/lang/StackTraceElement;
      26: areturn

  public java.lang.StackTraceElement getStackTraceElement(int);
    Code:
       0: getstatic     #20                 // Field stackWalker:Ljava/lang/StackWalker;
       3: iload_1
       4: invokedynamic #25,  0             // InvokeDynamic #6:apply:(I)Ljava/util/function/Function;
       9: invokevirtual #7                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #8                  // class java/util/Optional
      15: invokevirtual #22                 // Method java/util/Optional.get:()Ljava/lang/Object;
      18: checkcast     #23                 // class java/lang/StackWalker$StackFrame
      21: invokeinterface #24,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.toStackTraceElement:()Ljava/lang/StackTraceElement;
      26: areturn

  private static java.util.Optional lambda$getStackTraceElement$13(int, java.util.stream.Stream);
    Code:
       0: aload_1
       1: iload_0
       2: i2l
       3: invokeinterface #26,  3           // InterfaceMethod java/util/stream/Stream.skip:(J)Ljava/util/stream/Stream;
       8: invokeinterface #27,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      13: areturn

  private static java.util.Optional lambda$calcLocation$12(java.lang.String, java.util.stream.Stream);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #28,  0             // InvokeDynamic #7:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
       7: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      12: aload_0
      13: invokedynamic #30,  0             // InvokeDynamic #8:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      18: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      23: invokeinterface #27,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      28: areturn

  private static boolean lambda$calcLocation$11(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #31,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #32                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ireturn

  private static boolean lambda$calcLocation$10(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #31,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #32                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  private static java.util.List lambda$getCurrentStackTrace$9(java.util.stream.Stream);
    Code:
       0: aload_0
       1: invokedynamic #33,  0             // InvokeDynamic #9:apply:()Ljava/util/function/Function;
       6: invokeinterface #34,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      11: invokestatic  #35                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      14: invokeinterface #36,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      19: checkcast     #18                 // class java/util/List
      22: areturn

  private static java.lang.Class lambda$getCurrentStackTrace$8(java.lang.StackWalker$StackFrame);
    Code:
       0: aload_0
       1: invokeinterface #37,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getDeclaringClass:()Ljava/lang/Class;
       6: areturn

  private static java.util.Optional lambda$getCallerClass$7(int, java.util.stream.Stream);
    Code:
       0: aload_1
       1: iload_0
       2: i2l
       3: invokeinterface #26,  3           // InterfaceMethod java/util/stream/Stream.skip:(J)Ljava/util/stream/Stream;
       8: invokeinterface #27,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      13: areturn

  private static java.util.Optional lambda$getCallerClass$6(java.lang.Class, java.util.stream.Stream);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #38,  0             // InvokeDynamic #10:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
       7: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      12: aload_0
      13: invokedynamic #39,  0             // InvokeDynamic #11:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      18: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      23: invokeinterface #27,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      28: areturn

  private static boolean lambda$getCallerClass$5(java.lang.Class, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #37,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getDeclaringClass:()Ljava/lang/Class;
       6: aload_0
       7: invokevirtual #40                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      10: ireturn

  private static boolean lambda$getCallerClass$4(java.lang.Class, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #37,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getDeclaringClass:()Ljava/lang/Class;
       6: aload_0
       7: invokevirtual #40                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  private static java.util.Optional lambda$getCallerClass$3(java.lang.String, java.lang.String, java.util.stream.Stream);
    Code:
       0: aload_2
       1: aload_0
       2: invokedynamic #41,  0             // InvokeDynamic #12:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
       7: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      12: aload_0
      13: invokedynamic #42,  0             // InvokeDynamic #13:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      18: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      23: aload_1
      24: invokedynamic #43,  0             // InvokeDynamic #14:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      29: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      34: invokeinterface #27,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      39: areturn

  private static boolean lambda$getCallerClass$2(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #31,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #44                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  private static boolean lambda$getCallerClass$1(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #31,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #32                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ireturn

  private static boolean lambda$getCallerClass$0(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #31,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #32                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  static {};
    Code:
       0: getstatic     #45                 // Field java/lang/StackWalker$Option.RETAIN_CLASS_REFERENCE:Ljava/lang/StackWalker$Option;
       3: invokestatic  #46                 // Method java/lang/StackWalker.getInstance:(Ljava/lang/StackWalker$Option;)Ljava/lang/StackWalker;
       6: putstatic     #5                  // Field walker:Ljava/lang/StackWalker;
       9: invokestatic  #47                 // Method java/lang/StackWalker.getInstance:()Ljava/lang/StackWalker;
      12: putstatic     #20                 // Field stackWalker:Ljava/lang/StackWalker;
      15: new           #48                 // class org/apache/logging/log4j/util/StackLocator
      18: dup
      19: invokespecial #49                 // Method "<init>":()V
      22: putstatic     #1                  // Field INSTANCE:Lorg/apache/logging/log4j/util/StackLocator;
      25: return
}
