Compiled from "SecP521R1Field.java"
public class org.bouncycastle.math.ec.custom.sec.SecP521R1Field {
  static final int[] P;

  private static final int P16;

  public org.bouncycastle.math.ec.custom.sec.SecP521R1Field();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void add(int[], int[], int[]);
    Code:
       0: bipush        16
       2: aload_0
       3: aload_1
       4: aload_2
       5: invokestatic  #2                  // Method org/bouncycastle/math/raw/Nat.add:(I[I[I[I)I
       8: aload_0
       9: bipush        16
      11: iaload
      12: iadd
      13: aload_1
      14: bipush        16
      16: iaload
      17: iadd
      18: istore_3
      19: iload_3
      20: sipush        511
      23: if_icmpgt     45
      26: iload_3
      27: sipush        511
      30: if_icmpne     60
      33: bipush        16
      35: aload_2
      36: getstatic     #4                  // Field P:[I
      39: invokestatic  #5                  // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      42: ifeq          60
      45: iload_3
      46: bipush        16
      48: aload_2
      49: invokestatic  #6                  // Method org/bouncycastle/math/raw/Nat.inc:(I[I)I
      52: iadd
      53: istore_3
      54: iload_3
      55: sipush        511
      58: iand
      59: istore_3
      60: aload_2
      61: bipush        16
      63: iload_3
      64: iastore
      65: return

  public static void addOne(int[], int[]);
    Code:
       0: bipush        16
       2: aload_0
       3: aload_1
       4: invokestatic  #7                  // Method org/bouncycastle/math/raw/Nat.inc:(I[I[I)I
       7: aload_0
       8: bipush        16
      10: iaload
      11: iadd
      12: istore_2
      13: iload_2
      14: sipush        511
      17: if_icmpgt     39
      20: iload_2
      21: sipush        511
      24: if_icmpne     54
      27: bipush        16
      29: aload_1
      30: getstatic     #4                  // Field P:[I
      33: invokestatic  #5                  // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      36: ifeq          54
      39: iload_2
      40: bipush        16
      42: aload_1
      43: invokestatic  #6                  // Method org/bouncycastle/math/raw/Nat.inc:(I[I)I
      46: iadd
      47: istore_2
      48: iload_2
      49: sipush        511
      52: iand
      53: istore_2
      54: aload_1
      55: bipush        16
      57: iload_2
      58: iastore
      59: return

  public static int[] fromBigInteger(java.math.BigInteger);
    Code:
       0: sipush        521
       3: aload_0
       4: invokestatic  #8                  // Method org/bouncycastle/math/raw/Nat.fromBigInteger:(ILjava/math/BigInteger;)[I
       7: astore_1
       8: bipush        17
      10: aload_1
      11: getstatic     #4                  // Field P:[I
      14: invokestatic  #5                  // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      17: ifeq          26
      20: bipush        17
      22: aload_1
      23: invokestatic  #9                  // Method org/bouncycastle/math/raw/Nat.zero:(I[I)V
      26: aload_1
      27: areturn

  public static void half(int[], int[]);
    Code:
       0: aload_0
       1: bipush        16
       3: iaload
       4: istore_2
       5: bipush        16
       7: aload_0
       8: iload_2
       9: aload_1
      10: invokestatic  #10                 // Method org/bouncycastle/math/raw/Nat.shiftDownBit:(I[II[I)I
      13: istore_3
      14: aload_1
      15: bipush        16
      17: iload_2
      18: iconst_1
      19: iushr
      20: iload_3
      21: bipush        23
      23: iushr
      24: ior
      25: iastore
      26: return

  public static void inv(int[], int[]);
    Code:
       0: iconst_0
       1: aload_0
       2: invokestatic  #11                 // Method isZero:([I)I
       5: if_icmpeq     18
       8: new           #12                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #13                 // String \'x\' cannot be 0
      14: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: astore_2
      20: bipush        17
      22: invokestatic  #15                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
      25: astore_3
      26: aload_2
      27: aload_3
      28: invokestatic  #16                 // Method square:([I[I)V
      31: aload_3
      32: aload_2
      33: aload_3
      34: invokestatic  #17                 // Method multiply:([I[I[I)V
      37: bipush        17
      39: invokestatic  #15                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
      42: astore        4
      44: aload_3
      45: iconst_2
      46: aload         4
      48: invokestatic  #18                 // Method squareN:([II[I)V
      51: aload         4
      53: aload_3
      54: aload         4
      56: invokestatic  #17                 // Method multiply:([I[I[I)V
      59: bipush        17
      61: invokestatic  #15                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
      64: astore        5
      66: aload         4
      68: iconst_4
      69: aload         5
      71: invokestatic  #18                 // Method squareN:([II[I)V
      74: aload         5
      76: aload         4
      78: aload         5
      80: invokestatic  #17                 // Method multiply:([I[I[I)V
      83: bipush        17
      85: invokestatic  #15                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
      88: astore        6
      90: aload         5
      92: bipush        8
      94: aload         6
      96: invokestatic  #18                 // Method squareN:([II[I)V
      99: aload         6
     101: aload         5
     103: aload         6
     105: invokestatic  #17                 // Method multiply:([I[I[I)V
     108: aload         5
     110: astore        7
     112: aload         6
     114: bipush        16
     116: aload         7
     118: invokestatic  #18                 // Method squareN:([II[I)V
     121: aload         7
     123: aload         6
     125: aload         7
     127: invokestatic  #17                 // Method multiply:([I[I[I)V
     130: aload         6
     132: astore        8
     134: aload         7
     136: bipush        32
     138: aload         8
     140: invokestatic  #18                 // Method squareN:([II[I)V
     143: aload         8
     145: aload         7
     147: aload         8
     149: invokestatic  #17                 // Method multiply:([I[I[I)V
     152: aload         7
     154: astore        9
     156: aload         8
     158: bipush        64
     160: aload         9
     162: invokestatic  #18                 // Method squareN:([II[I)V
     165: aload         9
     167: aload         8
     169: aload         9
     171: invokestatic  #17                 // Method multiply:([I[I[I)V
     174: aload         8
     176: astore        10
     178: aload         9
     180: sipush        128
     183: aload         10
     185: invokestatic  #18                 // Method squareN:([II[I)V
     188: aload         10
     190: aload         9
     192: aload         10
     194: invokestatic  #17                 // Method multiply:([I[I[I)V
     197: aload         9
     199: astore        11
     201: aload         10
     203: sipush        256
     206: aload         11
     208: invokestatic  #18                 // Method squareN:([II[I)V
     211: aload         11
     213: aload         10
     215: aload         11
     217: invokestatic  #17                 // Method multiply:([I[I[I)V
     220: aload         10
     222: astore        12
     224: aload         11
     226: iconst_4
     227: aload         12
     229: invokestatic  #18                 // Method squareN:([II[I)V
     232: aload         12
     234: aload         4
     236: aload         12
     238: invokestatic  #17                 // Method multiply:([I[I[I)V
     241: aload         4
     243: astore        13
     245: aload         12
     247: iconst_2
     248: aload         13
     250: invokestatic  #18                 // Method squareN:([II[I)V
     253: aload         13
     255: aload_3
     256: aload         13
     258: invokestatic  #17                 // Method multiply:([I[I[I)V
     261: aload_3
     262: astore        14
     264: aload         13
     266: aload         14
     268: invokestatic  #16                 // Method square:([I[I)V
     271: aload         14
     273: aload_2
     274: aload         14
     276: invokestatic  #17                 // Method multiply:([I[I[I)V
     279: aload         14
     281: astore        15
     283: aload         15
     285: iconst_2
     286: aload         15
     288: invokestatic  #18                 // Method squareN:([II[I)V
     291: aload_2
     292: aload         15
     294: aload_1
     295: invokestatic  #17                 // Method multiply:([I[I[I)V
     298: return

  public static int isZero(int[]);
    Code:
       0: iconst_0
       1: istore_1
       2: iconst_0
       3: istore_2
       4: iload_2
       5: bipush        17
       7: if_icmpge     22
      10: iload_1
      11: aload_0
      12: iload_2
      13: iaload
      14: ior
      15: istore_1
      16: iinc          2, 1
      19: goto          4
      22: iload_1
      23: iconst_1
      24: iushr
      25: iload_1
      26: iconst_1
      27: iand
      28: ior
      29: istore_1
      30: iload_1
      31: iconst_1
      32: isub
      33: bipush        31
      35: ishr
      36: ireturn

  public static void multiply(int[], int[], int[]);
    Code:
       0: bipush        33
       2: invokestatic  #15                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
       5: astore_3
       6: aload_0
       7: aload_1
       8: aload_3
       9: invokestatic  #19                 // Method implMultiply:([I[I[I)V
      12: aload_3
      13: aload_2
      14: invokestatic  #20                 // Method reduce:([I[I)V
      17: return

  public static void negate(int[], int[]);
    Code:
       0: iconst_0
       1: aload_0
       2: invokestatic  #11                 // Method isZero:([I)I
       5: if_icmpeq     24
       8: bipush        17
      10: getstatic     #4                  // Field P:[I
      13: getstatic     #4                  // Field P:[I
      16: aload_1
      17: invokestatic  #21                 // Method org/bouncycastle/math/raw/Nat.sub:(I[I[I[I)I
      20: pop
      21: goto          35
      24: bipush        17
      26: getstatic     #4                  // Field P:[I
      29: aload_0
      30: aload_1
      31: invokestatic  #21                 // Method org/bouncycastle/math/raw/Nat.sub:(I[I[I[I)I
      34: pop
      35: return

  public static void random(java.security.SecureRandom, int[]);
    Code:
       0: bipush        68
       2: newarray       byte
       4: astore_2
       5: aload_0
       6: aload_2
       7: invokevirtual #22                 // Method java/security/SecureRandom.nextBytes:([B)V
      10: aload_2
      11: iconst_0
      12: aload_1
      13: iconst_0
      14: bipush        17
      16: invokestatic  #23                 // Method org/bouncycastle/util/Pack.littleEndianToInt:([BI[III)V
      19: aload_1
      20: bipush        16
      22: dup2
      23: iaload
      24: i2l
      25: ldc2_w        #24                 // long 511l
      28: land
      29: l2i
      30: iastore
      31: iconst_0
      32: bipush        17
      34: aload_1
      35: getstatic     #4                  // Field P:[I
      38: invokestatic  #26                 // Method org/bouncycastle/math/raw/Nat.lessThan:(I[I[I)I
      41: if_icmpeq     5
      44: return

  public static void randomMult(java.security.SecureRandom, int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #27                 // Method random:(Ljava/security/SecureRandom;[I)V
       5: iconst_0
       6: aload_1
       7: invokestatic  #11                 // Method isZero:([I)I
      10: if_icmpne     0
      13: return

  public static void reduce(int[], int[]);
    Code:
       0: aload_0
       1: bipush        32
       3: iaload
       4: istore_2
       5: bipush        16
       7: aload_0
       8: bipush        16
      10: bipush        9
      12: iload_2
      13: aload_1
      14: iconst_0
      15: invokestatic  #28                 // Method org/bouncycastle/math/raw/Nat.shiftDownBits:(I[IIII[II)I
      18: bipush        23
      20: iushr
      21: istore_3
      22: iload_3
      23: iload_2
      24: bipush        9
      26: iushr
      27: iadd
      28: istore_3
      29: iload_3
      30: bipush        16
      32: aload_0
      33: aload_1
      34: invokestatic  #29                 // Method org/bouncycastle/math/raw/Nat.addTo:(I[I[I)I
      37: iadd
      38: istore_3
      39: iload_3
      40: sipush        511
      43: if_icmpgt     65
      46: iload_3
      47: sipush        511
      50: if_icmpne     80
      53: bipush        16
      55: aload_1
      56: getstatic     #4                  // Field P:[I
      59: invokestatic  #5                  // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      62: ifeq          80
      65: iload_3
      66: bipush        16
      68: aload_1
      69: invokestatic  #6                  // Method org/bouncycastle/math/raw/Nat.inc:(I[I)I
      72: iadd
      73: istore_3
      74: iload_3
      75: sipush        511
      78: iand
      79: istore_3
      80: aload_1
      81: bipush        16
      83: iload_3
      84: iastore
      85: return

  public static void reduce23(int[]);
    Code:
       0: aload_0
       1: bipush        16
       3: iaload
       4: istore_1
       5: bipush        16
       7: iload_1
       8: bipush        9
      10: iushr
      11: aload_0
      12: invokestatic  #30                 // Method org/bouncycastle/math/raw/Nat.addWordTo:(II[I)I
      15: iload_1
      16: sipush        511
      19: iand
      20: iadd
      21: istore_2
      22: iload_2
      23: sipush        511
      26: if_icmpgt     48
      29: iload_2
      30: sipush        511
      33: if_icmpne     63
      36: bipush        16
      38: aload_0
      39: getstatic     #4                  // Field P:[I
      42: invokestatic  #5                  // Method org/bouncycastle/math/raw/Nat.eq:(I[I[I)Z
      45: ifeq          63
      48: iload_2
      49: bipush        16
      51: aload_0
      52: invokestatic  #6                  // Method org/bouncycastle/math/raw/Nat.inc:(I[I)I
      55: iadd
      56: istore_2
      57: iload_2
      58: sipush        511
      61: iand
      62: istore_2
      63: aload_0
      64: bipush        16
      66: iload_2
      67: iastore
      68: return

  public static void square(int[], int[]);
    Code:
       0: bipush        33
       2: invokestatic  #15                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
       5: astore_2
       6: aload_0
       7: aload_2
       8: invokestatic  #31                 // Method implSquare:([I[I)V
      11: aload_2
      12: aload_1
      13: invokestatic  #20                 // Method reduce:([I[I)V
      16: return

  public static void squareN(int[], int, int[]);
    Code:
       0: bipush        33
       2: invokestatic  #15                 // Method org/bouncycastle/math/raw/Nat.create:(I)[I
       5: astore_3
       6: aload_0
       7: aload_3
       8: invokestatic  #31                 // Method implSquare:([I[I)V
      11: aload_3
      12: aload_2
      13: invokestatic  #20                 // Method reduce:([I[I)V
      16: iinc          1, -1
      19: iload_1
      20: ifle          36
      23: aload_2
      24: aload_3
      25: invokestatic  #31                 // Method implSquare:([I[I)V
      28: aload_3
      29: aload_2
      30: invokestatic  #20                 // Method reduce:([I[I)V
      33: goto          16
      36: return

  public static void subtract(int[], int[], int[]);
    Code:
       0: bipush        16
       2: aload_0
       3: aload_1
       4: aload_2
       5: invokestatic  #21                 // Method org/bouncycastle/math/raw/Nat.sub:(I[I[I[I)I
       8: aload_0
       9: bipush        16
      11: iaload
      12: iadd
      13: aload_1
      14: bipush        16
      16: iaload
      17: isub
      18: istore_3
      19: iload_3
      20: ifge          38
      23: iload_3
      24: bipush        16
      26: aload_2
      27: invokestatic  #32                 // Method org/bouncycastle/math/raw/Nat.dec:(I[I)I
      30: iadd
      31: istore_3
      32: iload_3
      33: sipush        511
      36: iand
      37: istore_3
      38: aload_2
      39: bipush        16
      41: iload_3
      42: iastore
      43: return

  public static void twice(int[], int[]);
    Code:
       0: aload_0
       1: bipush        16
       3: iaload
       4: istore_2
       5: bipush        16
       7: aload_0
       8: iload_2
       9: bipush        23
      11: ishl
      12: aload_1
      13: invokestatic  #33                 // Method org/bouncycastle/math/raw/Nat.shiftUpBit:(I[II[I)I
      16: iload_2
      17: iconst_1
      18: ishl
      19: ior
      20: istore_3
      21: aload_1
      22: bipush        16
      24: iload_3
      25: sipush        511
      28: iand
      29: iastore
      30: return

  protected static void implMultiply(int[], int[], int[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #34                 // Method org/bouncycastle/math/raw/Nat512.mul:([I[I[I)V
       6: aload_0
       7: bipush        16
       9: iaload
      10: istore_3
      11: aload_1
      12: bipush        16
      14: iaload
      15: istore        4
      17: aload_2
      18: bipush        32
      20: bipush        16
      22: iload_3
      23: aload_1
      24: iload         4
      26: aload_0
      27: aload_2
      28: bipush        16
      30: invokestatic  #35                 // Method org/bouncycastle/math/raw/Nat.mul31BothAdd:(II[II[I[II)I
      33: iload_3
      34: iload         4
      36: imul
      37: iadd
      38: iastore
      39: return

  protected static void implSquare(int[], int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #36                 // Method org/bouncycastle/math/raw/Nat512.square:([I[I)V
       5: aload_0
       6: bipush        16
       8: iaload
       9: istore_2
      10: aload_1
      11: bipush        32
      13: bipush        16
      15: iload_2
      16: iconst_1
      17: ishl
      18: aload_0
      19: iconst_0
      20: aload_1
      21: bipush        16
      23: invokestatic  #37                 // Method org/bouncycastle/math/raw/Nat.mulWordAddTo:(II[II[II)I
      26: iload_2
      27: iload_2
      28: imul
      29: iadd
      30: iastore
      31: return

  static {};
    Code:
       0: bipush        17
       2: newarray       int
       4: dup
       5: iconst_0
       6: iconst_m1
       7: iastore
       8: dup
       9: iconst_1
      10: iconst_m1
      11: iastore
      12: dup
      13: iconst_2
      14: iconst_m1
      15: iastore
      16: dup
      17: iconst_3
      18: iconst_m1
      19: iastore
      20: dup
      21: iconst_4
      22: iconst_m1
      23: iastore
      24: dup
      25: iconst_5
      26: iconst_m1
      27: iastore
      28: dup
      29: bipush        6
      31: iconst_m1
      32: iastore
      33: dup
      34: bipush        7
      36: iconst_m1
      37: iastore
      38: dup
      39: bipush        8
      41: iconst_m1
      42: iastore
      43: dup
      44: bipush        9
      46: iconst_m1
      47: iastore
      48: dup
      49: bipush        10
      51: iconst_m1
      52: iastore
      53: dup
      54: bipush        11
      56: iconst_m1
      57: iastore
      58: dup
      59: bipush        12
      61: iconst_m1
      62: iastore
      63: dup
      64: bipush        13
      66: iconst_m1
      67: iastore
      68: dup
      69: bipush        14
      71: iconst_m1
      72: iastore
      73: dup
      74: bipush        15
      76: iconst_m1
      77: iastore
      78: dup
      79: bipush        16
      81: sipush        511
      84: iastore
      85: putstatic     #4                  // Field P:[I
      88: return
}
