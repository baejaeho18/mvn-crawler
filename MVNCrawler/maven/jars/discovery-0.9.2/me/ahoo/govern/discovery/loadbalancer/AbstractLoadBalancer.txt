Compiled from "AbstractLoadBalancer.java"
public abstract class me.ahoo.govern.discovery.loadbalancer.AbstractLoadBalancer<Chooser extends me.ahoo.govern.discovery.loadbalancer.LoadBalancer$Chooser> implements me.ahoo.govern.discovery.loadbalancer.LoadBalancer {
  private final java.util.concurrent.ConcurrentHashMap<me.ahoo.govern.discovery.NamespacedServiceId, java.util.concurrent.CompletableFuture<Chooser>> serviceMapChooser;

  private final me.ahoo.govern.discovery.redis.ConsistencyRedisServiceDiscovery serviceDiscovery;

  public me.ahoo.govern.discovery.loadbalancer.AbstractLoadBalancer(me.ahoo.govern.discovery.redis.ConsistencyRedisServiceDiscovery);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #1                  // Field serviceDiscovery:Lme/ahoo/govern/discovery/redis/ConsistencyRedisServiceDiscovery;
       9: aload_0
      10: new           #4                  // class java/util/concurrent/ConcurrentHashMap
      13: dup
      14: invokespecial #5                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      17: putfield      #2                  // Field serviceMapChooser:Ljava/util/concurrent/ConcurrentHashMap;
      20: return

  public java.util.concurrent.CompletableFuture<me.ahoo.govern.discovery.ServiceInstance> choose(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field serviceMapChooser:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: aload_2
       6: invokestatic  #6                  // Method me/ahoo/govern/discovery/NamespacedServiceId.of:(Ljava/lang/String;Ljava/lang/String;)Lme/ahoo/govern/discovery/NamespacedServiceId;
       9: aload_0
      10: aload_1
      11: aload_2
      12: invokedynamic #7,  0              // InvokeDynamic #0:apply:(Lme/ahoo/govern/discovery/loadbalancer/AbstractLoadBalancer;Ljava/lang/String;Ljava/lang/String;)Ljava/util/function/Function;
      17: invokevirtual #8                  // Method java/util/concurrent/ConcurrentHashMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      20: checkcast     #9                  // class java/util/concurrent/CompletableFuture
      23: invokedynamic #10,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      28: invokevirtual #11                 // Method java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
      31: areturn

  protected abstract Chooser createChooser(java.util.List<me.ahoo.govern.discovery.ServiceInstance>);

  private static me.ahoo.govern.discovery.ServiceInstance lambda$choose$2(me.ahoo.govern.discovery.loadbalancer.LoadBalancer$Chooser);
    Code:
       0: aload_0
       1: invokeinterface #12,  1           // InterfaceMethod me/ahoo/govern/discovery/loadbalancer/LoadBalancer$Chooser.choose:()Lme/ahoo/govern/discovery/ServiceInstance;
       6: areturn

  private java.util.concurrent.CompletableFuture lambda$choose$1(java.lang.String, java.lang.String, me.ahoo.govern.discovery.NamespacedServiceId);
    Code:
       0: aload_0
       1: getfield      #1                  // Field serviceDiscovery:Lme/ahoo/govern/discovery/redis/ConsistencyRedisServiceDiscovery;
       4: aload_3
       5: new           #13                 // class me/ahoo/govern/discovery/loadbalancer/AbstractLoadBalancer$Listener
       8: dup
       9: aload_0
      10: aconst_null
      11: invokespecial #14                 // Method me/ahoo/govern/discovery/loadbalancer/AbstractLoadBalancer$Listener."<init>":(Lme/ahoo/govern/discovery/loadbalancer/AbstractLoadBalancer;Lme/ahoo/govern/discovery/loadbalancer/AbstractLoadBalancer$1;)V
      14: invokevirtual #15                 // Method me/ahoo/govern/discovery/redis/ConsistencyRedisServiceDiscovery.addListener:(Lme/ahoo/govern/discovery/NamespacedServiceId;Lme/ahoo/govern/discovery/ServiceChangedListener;)V
      17: aload_0
      18: getfield      #1                  // Field serviceDiscovery:Lme/ahoo/govern/discovery/redis/ConsistencyRedisServiceDiscovery;
      21: aload_1
      22: aload_2
      23: invokevirtual #16                 // Method me/ahoo/govern/discovery/redis/ConsistencyRedisServiceDiscovery.getInstances:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;
      26: aload_0
      27: invokedynamic #17,  0             // InvokeDynamic #2:apply:(Lme/ahoo/govern/discovery/loadbalancer/AbstractLoadBalancer;)Ljava/util/function/Function;
      32: invokevirtual #11                 // Method java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
      35: areturn

  private me.ahoo.govern.discovery.loadbalancer.LoadBalancer$Chooser lambda$null$0(java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method createChooser:(Ljava/util/List;)Lme/ahoo/govern/discovery/loadbalancer/LoadBalancer$Chooser;
       5: areturn

  static java.util.concurrent.ConcurrentHashMap access$000(me.ahoo.govern.discovery.loadbalancer.AbstractLoadBalancer);
    Code:
       0: aload_0
       1: getfield      #2                  // Field serviceMapChooser:Ljava/util/concurrent/ConcurrentHashMap;
       4: areturn

  static me.ahoo.govern.discovery.redis.ConsistencyRedisServiceDiscovery access$100(me.ahoo.govern.discovery.loadbalancer.AbstractLoadBalancer);
    Code:
       0: aload_0
       1: getfield      #1                  // Field serviceDiscovery:Lme/ahoo/govern/discovery/redis/ConsistencyRedisServiceDiscovery;
       4: areturn
}
