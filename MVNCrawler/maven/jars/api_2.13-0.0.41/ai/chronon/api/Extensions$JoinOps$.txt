Compiled from "Extensions.scala"
public class ai.chronon.api.Extensions$JoinOps$ implements java.io.Serializable {
  public static final ai.chronon.api.Extensions$JoinOps$ MODULE$;

  private static final java.util.regex.Pattern identifierRegex;

  public static {};
    Code:
       0: new           #2                  // class ai/chronon/api/Extensions$JoinOps$
       3: dup
       4: invokespecial #19                 // Method "<init>":()V
       7: putstatic     #21                 // Field MODULE$:Lai/chronon/api/Extensions$JoinOps$;
      10: ldc           #23                 // String [a-zA-Z_][a-zA-Z0-9_]*
      12: invokestatic  #29                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      15: putstatic     #31                 // Field identifierRegex:Ljava/util/regex/Pattern;
      18: return

  private java.util.regex.Pattern identifierRegex();
    Code:
       0: getstatic     #31                 // Field identifierRegex:Ljava/util/regex/Pattern;
       3: areturn

  public boolean isIdentifier(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #38                 // Method identifierRegex:()Ljava/util/regex/Pattern;
       4: aload_1
       5: invokevirtual #42                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
       8: invokevirtual #48                 // Method java/util/regex/Matcher.matches:()Z
      11: ireturn

  private java.lang.Object writeReplace();
    Code:
       0: new           #53                 // class scala/runtime/ModuleSerializationProxy
       3: dup
       4: ldc           #2                  // class ai/chronon/api/Extensions$JoinOps$
       6: invokespecial #56                 // Method scala/runtime/ModuleSerializationProxy."<init>":(Ljava/lang/Class;)V
       9: areturn

  public ai.chronon.api.Extensions$JoinOps$();
    Code:
       0: aload_0
       1: invokespecial #57                 // Method java/lang/Object."<init>":()V
       4: return
}
