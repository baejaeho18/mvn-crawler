Compiled from "H2OGBM.scala"
public class ai.h2o.sparkling.ml.algos.H2OGBM extends ai.h2o.sparkling.ml.algos.H2OTreeBasedSupervisedAlgorithm<hex.tree.gbm.GBMModel$GBMParameters> implements ai.h2o.sparkling.ml.params.H2OGBMParams, ai.h2o.sparkling.ml.algos.DistributionBasedH2OTrainFramePreparation {
  private final java.lang.String uid;

  private final org.apache.spark.ml.param.DoubleParam learnRate;

  private final org.apache.spark.ml.param.DoubleParam learnRateAnnealing;

  private final org.apache.spark.ml.param.DoubleParam sampleRate;

  private final org.apache.spark.ml.param.DoubleParam colSampleRate;

  private final org.apache.spark.ml.param.DoubleParam maxAbsLeafnodePred;

  private final org.apache.spark.ml.param.DoubleParam predNoiseBandwidth;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayArrayParam interactionConstraints;

  private final org.apache.spark.ml.param.BooleanParam balanceClasses;

  private final ai.h2o.sparkling.ml.params.NullableFloatArrayParam classSamplingFactors;

  private final org.apache.spark.ml.param.FloatParam maxAfterBalanceSize;

  private final org.apache.spark.ml.param.IntParam maxConfusionMatrixSize;

  private final org.apache.spark.ml.param.IntParam ntrees;

  private final org.apache.spark.ml.param.IntParam maxDepth;

  private final org.apache.spark.ml.param.DoubleParam minRows;

  private final org.apache.spark.ml.param.IntParam nbins;

  private final org.apache.spark.ml.param.IntParam nbinsTopLevel;

  private final org.apache.spark.ml.param.IntParam nbinsCats;

  private final org.apache.spark.ml.param.LongParam seed;

  private final org.apache.spark.ml.param.BooleanParam buildTreeOneNode;

  private final ai.h2o.sparkling.ml.params.NullableDoubleArrayParam sampleRatePerClass;

  private final org.apache.spark.ml.param.DoubleParam colSampleRatePerTree;

  private final org.apache.spark.ml.param.DoubleParam colSampleRateChangePerLevel;

  private final org.apache.spark.ml.param.IntParam scoreTreeInterval;

  private final org.apache.spark.ml.param.DoubleParam minSplitImprovement;

  private final org.apache.spark.ml.param.Param<java.lang.String> histogramType;

  private final org.apache.spark.ml.param.BooleanParam calibrateModel;

  private final org.apache.spark.ml.param.Param<java.lang.String> calibrationMethod;

  private final org.apache.spark.ml.param.BooleanParam checkConstantResponse;

  private final ai.h2o.sparkling.ml.params.NullableStringParam inTrainingCheckpointsDir;

  private final org.apache.spark.ml.param.IntParam inTrainingCheckpointsTreeInterval;

  private final ai.h2o.sparkling.ml.params.NullableStringParam modelId;

  private final org.apache.spark.ml.param.IntParam nfolds;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationModels;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment;

  private final org.apache.spark.ml.param.Param<java.lang.String> distribution;

  private final org.apache.spark.ml.param.DoubleParam tweediePower;

  private final org.apache.spark.ml.param.DoubleParam quantileAlpha;

  private final org.apache.spark.ml.param.DoubleParam huberAlpha;

  private final org.apache.spark.ml.param.Param<java.lang.String> labelCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam weightCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam offsetCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam foldCol;

  private final org.apache.spark.ml.param.Param<java.lang.String> foldAssignment;

  private final org.apache.spark.ml.param.Param<java.lang.String> categoricalEncoding;

  private final org.apache.spark.ml.param.BooleanParam ignoreConstCols;

  private final org.apache.spark.ml.param.BooleanParam scoreEachIteration;

  private final org.apache.spark.ml.param.IntParam stoppingRounds;

  private final org.apache.spark.ml.param.DoubleParam maxRuntimeSecs;

  private final org.apache.spark.ml.param.Param<java.lang.String> stoppingMetric;

  private final org.apache.spark.ml.param.DoubleParam stoppingTolerance;

  private final org.apache.spark.ml.param.IntParam gainsliftBins;

  private final ai.h2o.sparkling.ml.params.NullableStringParam customMetricFunc;

  private final ai.h2o.sparkling.ml.params.NullableStringParam customDistributionFunc;

  private final ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir;

  private final org.apache.spark.ml.param.Param<java.lang.String> aucType;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols;

  private final ai.h2o.sparkling.ml.params.NullableDataFrameParam ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame;

  private final ai.h2o.sparkling.ml.params.DictionaryParam ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints;

  public static org.apache.spark.ml.util.MLReader<ai.h2o.sparkling.ml.algos.H2OGBM> read();
    Code:
       0: getstatic     #102                // Field ai/h2o/sparkling/ml/algos/H2OGBM$.MODULE$:Lai/h2o/sparkling/ml/algos/H2OGBM$;
       3: invokevirtual #104                // Method ai/h2o/sparkling/ml/algos/H2OGBM$.read:()Lorg/apache/spark/ml/util/MLReader;
       6: areturn

  public static java.lang.Object load(java.lang.String);
    Code:
       0: getstatic     #102                // Field ai/h2o/sparkling/ml/algos/H2OGBM$.MODULE$:Lai/h2o/sparkling/ml/algos/H2OGBM$;
       3: aload_0
       4: invokevirtual #109                // Method ai/h2o/sparkling/ml/algos/H2OGBM$.load:(Ljava/lang/String;)Ljava/lang/Object;
       7: areturn

  public void ai$h2o$sparkling$ml$algos$DistributionBasedH2OTrainFramePreparation$$super$prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #118                // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OTrainFramePreparation.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/H2OTrainFramePreparation;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public void prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #126                // InterfaceMethod ai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2OGBMParams$$super$getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #135                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2OGBMParams$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #143                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.reflect.ClassTag<hex.tree.gbm.GBMModel$GBMParameters> paramTag();
    Code:
       0: aload_0
       1: invokestatic  #150                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.paramTag$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Lscala/reflect/ClassTag;
       4: areturn

  public double getLearnRate();
    Code:
       0: aload_0
       1: invokestatic  #156                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getLearnRate$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public double getLearnRateAnnealing();
    Code:
       0: aload_0
       1: invokestatic  #160                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getLearnRateAnnealing$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public double getSampleRate();
    Code:
       0: aload_0
       1: invokestatic  #164                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getSampleRate$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public double getColSampleRate();
    Code:
       0: aload_0
       1: invokestatic  #168                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getColSampleRate$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public double getMaxAbsLeafnodePred();
    Code:
       0: aload_0
       1: invokestatic  #172                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getMaxAbsLeafnodePred$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public double getPredNoiseBandwidth();
    Code:
       0: aload_0
       1: invokestatic  #176                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getPredNoiseBandwidth$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public java.lang.String[][] getInteractionConstraints();
    Code:
       0: aload_0
       1: invokestatic  #182                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getInteractionConstraints$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)[[Ljava/lang/String;
       4: areturn

  public boolean getBalanceClasses();
    Code:
       0: aload_0
       1: invokestatic  #188                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getBalanceClasses$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Z
       4: ireturn

  public float[] getClassSamplingFactors();
    Code:
       0: aload_0
       1: invokestatic  #194                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getClassSamplingFactors$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)[F
       4: areturn

  public float getMaxAfterBalanceSize();
    Code:
       0: aload_0
       1: invokestatic  #200                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getMaxAfterBalanceSize$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)F
       4: freturn

  public int getMaxConfusionMatrixSize();
    Code:
       0: aload_0
       1: invokestatic  #206                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getMaxConfusionMatrixSize$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public int getNtrees();
    Code:
       0: aload_0
       1: invokestatic  #210                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getNtrees$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public int getMaxDepth();
    Code:
       0: aload_0
       1: invokestatic  #214                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getMaxDepth$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public double getMinRows();
    Code:
       0: aload_0
       1: invokestatic  #218                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getMinRows$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public int getNbins();
    Code:
       0: aload_0
       1: invokestatic  #222                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getNbins$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public int getNbinsTopLevel();
    Code:
       0: aload_0
       1: invokestatic  #226                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getNbinsTopLevel$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public int getNbinsCats();
    Code:
       0: aload_0
       1: invokestatic  #230                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getNbinsCats$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public long getSeed();
    Code:
       0: aload_0
       1: invokestatic  #236                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getSeed$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)J
       4: lreturn

  public boolean getBuildTreeOneNode();
    Code:
       0: aload_0
       1: invokestatic  #240                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getBuildTreeOneNode$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Z
       4: ireturn

  public double[] getSampleRatePerClass();
    Code:
       0: aload_0
       1: invokestatic  #246                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getSampleRatePerClass$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)[D
       4: areturn

  public double getColSampleRatePerTree();
    Code:
       0: aload_0
       1: invokestatic  #250                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getColSampleRatePerTree$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public double getColSampleRateChangePerLevel();
    Code:
       0: aload_0
       1: invokestatic  #254                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getColSampleRateChangePerLevel$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public int getScoreTreeInterval();
    Code:
       0: aload_0
       1: invokestatic  #258                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getScoreTreeInterval$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public double getMinSplitImprovement();
    Code:
       0: aload_0
       1: invokestatic  #262                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getMinSplitImprovement$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public java.lang.String getHistogramType();
    Code:
       0: aload_0
       1: invokestatic  #268                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getHistogramType$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public boolean getCalibrateModel();
    Code:
       0: aload_0
       1: invokestatic  #272                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getCalibrateModel$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Z
       4: ireturn

  public java.lang.String getCalibrationMethod();
    Code:
       0: aload_0
       1: invokestatic  #276                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getCalibrationMethod$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public boolean getCheckConstantResponse();
    Code:
       0: aload_0
       1: invokestatic  #280                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getCheckConstantResponse$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Z
       4: ireturn

  public java.lang.String getInTrainingCheckpointsDir();
    Code:
       0: aload_0
       1: invokestatic  #284                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getInTrainingCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public int getInTrainingCheckpointsTreeInterval();
    Code:
       0: aload_0
       1: invokestatic  #288                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getInTrainingCheckpointsTreeInterval$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public java.lang.String getModelId();
    Code:
       0: aload_0
       1: invokestatic  #292                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getModelId$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public int getNfolds();
    Code:
       0: aload_0
       1: invokestatic  #296                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getNfolds$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public boolean getKeepCrossValidationModels();
    Code:
       0: aload_0
       1: invokestatic  #300                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationPredictions();
    Code:
       0: aload_0
       1: invokestatic  #304                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #308                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Z
       4: ireturn

  public java.lang.String getDistribution();
    Code:
       0: aload_0
       1: invokestatic  #312                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getDistribution$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public double getTweediePower();
    Code:
       0: aload_0
       1: invokestatic  #316                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getTweediePower$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public double getQuantileAlpha();
    Code:
       0: aload_0
       1: invokestatic  #320                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getQuantileAlpha$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public double getHuberAlpha();
    Code:
       0: aload_0
       1: invokestatic  #324                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getHuberAlpha$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public java.lang.String getLabelCol();
    Code:
       0: aload_0
       1: invokestatic  #328                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getLabelCol$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getWeightCol();
    Code:
       0: aload_0
       1: invokestatic  #332                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getWeightCol$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getOffsetCol();
    Code:
       0: aload_0
       1: invokestatic  #336                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getOffsetCol$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getFoldCol();
    Code:
       0: aload_0
       1: invokestatic  #340                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getFoldCol$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #344                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getCategoricalEncoding();
    Code:
       0: aload_0
       1: invokestatic  #348                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getCategoricalEncoding$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public boolean getIgnoreConstCols();
    Code:
       0: aload_0
       1: invokestatic  #352                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Z
       4: ireturn

  public boolean getScoreEachIteration();
    Code:
       0: aload_0
       1: invokestatic  #356                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Z
       4: ireturn

  public int getStoppingRounds();
    Code:
       0: aload_0
       1: invokestatic  #360                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getStoppingRounds$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public double getMaxRuntimeSecs();
    Code:
       0: aload_0
       1: invokestatic  #364                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public java.lang.String getStoppingMetric();
    Code:
       0: aload_0
       1: invokestatic  #368                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getStoppingMetric$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public double getStoppingTolerance();
    Code:
       0: aload_0
       1: invokestatic  #372                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getStoppingTolerance$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)D
       4: dreturn

  public int getGainsliftBins();
    Code:
       0: aload_0
       1: invokestatic  #376                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getGainsliftBins$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)I
       4: ireturn

  public java.lang.String getCustomMetricFunc();
    Code:
       0: aload_0
       1: invokestatic  #380                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getCustomMetricFunc$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getCustomDistributionFunc();
    Code:
       0: aload_0
       1: invokestatic  #384                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getCustomDistributionFunc$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getExportCheckpointsDir();
    Code:
       0: aload_0
       1: invokestatic  #388                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getAucType();
    Code:
       0: aload_0
       1: invokestatic  #392                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getAucType$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setLearnRate(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #399                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setLearnRate$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setLearnRateAnnealing(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #404                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setLearnRateAnnealing$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setSampleRate(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #408                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setSampleRate$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setColSampleRate(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #412                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setColSampleRate$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setMaxAbsLeafnodePred(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #416                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setMaxAbsLeafnodePred$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setPredNoiseBandwidth(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #420                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setPredNoiseBandwidth$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setInteractionConstraints(java.lang.String[][]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #426                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setInteractionConstraints$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;[[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setBalanceClasses(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #433                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setBalanceClasses$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Z)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setClassSamplingFactors(float[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #440                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setClassSamplingFactors$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;[F)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setMaxAfterBalanceSize(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #447                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setMaxAfterBalanceSize$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;F)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setMaxConfusionMatrixSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #454                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setMaxConfusionMatrixSize$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setNtrees(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #459                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setNtrees$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setMaxDepth(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #463                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setMaxDepth$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setMinRows(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #467                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setMinRows$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setNbins(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #471                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setNbins$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setNbinsTopLevel(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #475                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setNbinsTopLevel$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setNbinsCats(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #479                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setNbinsCats$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setSeed(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #485                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setSeed$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;J)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setBuildTreeOneNode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #490                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setBuildTreeOneNode$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Z)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setSampleRatePerClass(double[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #496                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setSampleRatePerClass$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;[D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setColSampleRatePerTree(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #501                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setColSampleRatePerTree$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setColSampleRateChangePerLevel(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #505                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setColSampleRateChangePerLevel$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setScoreTreeInterval(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #509                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setScoreTreeInterval$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setMinSplitImprovement(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #513                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setMinSplitImprovement$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setHistogramType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #519                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setHistogramType$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setCalibrateModel(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #523                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setCalibrateModel$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Z)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setCalibrationMethod(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #527                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setCalibrationMethod$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setCheckConstantResponse(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #531                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setCheckConstantResponse$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Z)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setInTrainingCheckpointsDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #535                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setInTrainingCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setInTrainingCheckpointsTreeInterval(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #539                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setInTrainingCheckpointsTreeInterval$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setModelId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #543                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setModelId$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setNfolds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #547                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setNfolds$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setKeepCrossValidationModels(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #551                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Z)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setKeepCrossValidationPredictions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #555                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Z)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setKeepCrossValidationFoldAssignment(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #559                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Z)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setDistribution(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #563                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setDistribution$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setTweediePower(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #567                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setTweediePower$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setQuantileAlpha(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #571                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setQuantileAlpha$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setHuberAlpha(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #575                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setHuberAlpha$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setLabelCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #579                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setLabelCol$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setWeightCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #583                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setWeightCol$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setOffsetCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #587                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setOffsetCol$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #591                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setFoldCol$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setFoldAssignment(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #595                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setCategoricalEncoding(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #599                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setCategoricalEncoding$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setIgnoreConstCols(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #603                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Z)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setScoreEachIteration(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #607                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Z)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setStoppingRounds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #611                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setStoppingRounds$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setMaxRuntimeSecs(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #615                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setStoppingMetric(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #619                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setStoppingMetric$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setStoppingTolerance(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #623                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setStoppingTolerance$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;D)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setGainsliftBins(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #627                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setGainsliftBins$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setCustomMetricFunc(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #631                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setCustomMetricFunc$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setCustomDistributionFunc(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #635                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setCustomDistributionFunc$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setExportCheckpointsDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #639                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGBMParams setAucType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #643                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.setAucType$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #648                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2OGBMParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #652                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getH2OGBMParams$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.String> getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #657                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasIgnoredCols$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #663                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;)Lscala/collection/immutable/Map;
       4: areturn

  public java.lang.String[] getIgnoredCols();
    Code:
       0: aload_0
       1: invokestatic  #669                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)[Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasIgnoredCols setIgnoredCols(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #675                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.setIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/HasIgnoredCols;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getIgnoredColsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #681                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredColsParam$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #687                // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;)Lscala/collection/immutable/Map;
       4: areturn

  public org.apache.spark.sql.Dataset<org.apache.spark.sql.Row> getCalibrationDataFrame();
    Code:
       0: aload_0
       1: invokestatic  #694                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.getCalibrationDataFrame$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;)Lorg/apache/spark/sql/Dataset;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasCalibrationDataFrame setCalibrationDataFrame(org.apache.spark.sql.Dataset<org.apache.spark.sql.Row>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #701                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.setCalibrationDataFrame$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getCalibrationDataFrameParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #707                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.getCalibrationDataFrameParam$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #711                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getMonotoneConstraints();
    Code:
       0: aload_0
       1: invokestatic  #716                // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.getMonotoneConstraints$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;)Lscala/collection/immutable/Map;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasMonotoneConstraints setMonotoneConstraints(scala.collection.immutable.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #723                // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.setMonotoneConstraints$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;Lscala/collection/immutable/Map;)Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getMonotoneConstraintsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #729                // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.getMonotoneConstraintsParam$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public org.apache.spark.ml.param.DoubleParam learnRate();
    Code:
       0: aload_0
       1: getfield      #732                // Field learnRate:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam learnRateAnnealing();
    Code:
       0: aload_0
       1: getfield      #734                // Field learnRateAnnealing:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam sampleRate();
    Code:
       0: aload_0
       1: getfield      #736                // Field sampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleRate();
    Code:
       0: aload_0
       1: getfield      #738                // Field colSampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam maxAbsLeafnodePred();
    Code:
       0: aload_0
       1: getfield      #740                // Field maxAbsLeafnodePred:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam predNoiseBandwidth();
    Code:
       0: aload_0
       1: getfield      #742                // Field predNoiseBandwidth:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringArrayArrayParam interactionConstraints();
    Code:
       0: aload_0
       1: getfield      #745                // Field interactionConstraints:Lai/h2o/sparkling/ml/params/NullableStringArrayArrayParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam balanceClasses();
    Code:
       0: aload_0
       1: getfield      #748                // Field balanceClasses:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableFloatArrayParam classSamplingFactors();
    Code:
       0: aload_0
       1: getfield      #751                // Field classSamplingFactors:Lai/h2o/sparkling/ml/params/NullableFloatArrayParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam maxAfterBalanceSize();
    Code:
       0: aload_0
       1: getfield      #754                // Field maxAfterBalanceSize:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxConfusionMatrixSize();
    Code:
       0: aload_0
       1: getfield      #757                // Field maxConfusionMatrixSize:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam ntrees();
    Code:
       0: aload_0
       1: getfield      #759                // Field ntrees:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxDepth();
    Code:
       0: aload_0
       1: getfield      #761                // Field maxDepth:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam minRows();
    Code:
       0: aload_0
       1: getfield      #763                // Field minRows:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nbins();
    Code:
       0: aload_0
       1: getfield      #765                // Field nbins:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nbinsTopLevel();
    Code:
       0: aload_0
       1: getfield      #767                // Field nbinsTopLevel:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nbinsCats();
    Code:
       0: aload_0
       1: getfield      #769                // Field nbinsCats:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.LongParam seed();
    Code:
       0: aload_0
       1: getfield      #772                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam buildTreeOneNode();
    Code:
       0: aload_0
       1: getfield      #774                // Field buildTreeOneNode:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableDoubleArrayParam sampleRatePerClass();
    Code:
       0: aload_0
       1: getfield      #777                // Field sampleRatePerClass:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleRatePerTree();
    Code:
       0: aload_0
       1: getfield      #779                // Field colSampleRatePerTree:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleRateChangePerLevel();
    Code:
       0: aload_0
       1: getfield      #781                // Field colSampleRateChangePerLevel:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam scoreTreeInterval();
    Code:
       0: aload_0
       1: getfield      #783                // Field scoreTreeInterval:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam minSplitImprovement();
    Code:
       0: aload_0
       1: getfield      #785                // Field minSplitImprovement:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> histogramType();
    Code:
       0: aload_0
       1: getfield      #789                // Field histogramType:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam calibrateModel();
    Code:
       0: aload_0
       1: getfield      #791                // Field calibrateModel:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> calibrationMethod();
    Code:
       0: aload_0
       1: getfield      #793                // Field calibrationMethod:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam checkConstantResponse();
    Code:
       0: aload_0
       1: getfield      #795                // Field checkConstantResponse:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam inTrainingCheckpointsDir();
    Code:
       0: aload_0
       1: getfield      #798                // Field inTrainingCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam inTrainingCheckpointsTreeInterval();
    Code:
       0: aload_0
       1: getfield      #800                // Field inTrainingCheckpointsTreeInterval:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam modelId();
    Code:
       0: aload_0
       1: getfield      #802                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nfolds();
    Code:
       0: aload_0
       1: getfield      #804                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationModels();
    Code:
       0: aload_0
       1: getfield      #806                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions();
    Code:
       0: aload_0
       1: getfield      #808                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: getfield      #810                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> distribution();
    Code:
       0: aload_0
       1: getfield      #812                // Field distribution:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam tweediePower();
    Code:
       0: aload_0
       1: getfield      #814                // Field tweediePower:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam quantileAlpha();
    Code:
       0: aload_0
       1: getfield      #816                // Field quantileAlpha:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam huberAlpha();
    Code:
       0: aload_0
       1: getfield      #818                // Field huberAlpha:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> labelCol();
    Code:
       0: aload_0
       1: getfield      #820                // Field labelCol:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam weightCol();
    Code:
       0: aload_0
       1: getfield      #822                // Field weightCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam offsetCol();
    Code:
       0: aload_0
       1: getfield      #824                // Field offsetCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam foldCol();
    Code:
       0: aload_0
       1: getfield      #826                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> foldAssignment();
    Code:
       0: aload_0
       1: getfield      #828                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> categoricalEncoding();
    Code:
       0: aload_0
       1: getfield      #830                // Field categoricalEncoding:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam ignoreConstCols();
    Code:
       0: aload_0
       1: getfield      #832                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam scoreEachIteration();
    Code:
       0: aload_0
       1: getfield      #834                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam stoppingRounds();
    Code:
       0: aload_0
       1: getfield      #836                // Field stoppingRounds:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam maxRuntimeSecs();
    Code:
       0: aload_0
       1: getfield      #838                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> stoppingMetric();
    Code:
       0: aload_0
       1: getfield      #840                // Field stoppingMetric:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam stoppingTolerance();
    Code:
       0: aload_0
       1: getfield      #842                // Field stoppingTolerance:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam gainsliftBins();
    Code:
       0: aload_0
       1: getfield      #844                // Field gainsliftBins:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam customMetricFunc();
    Code:
       0: aload_0
       1: getfield      #846                // Field customMetricFunc:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam customDistributionFunc();
    Code:
       0: aload_0
       1: getfield      #848                // Field customDistributionFunc:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir();
    Code:
       0: aload_0
       1: getfield      #850                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> aucType();
    Code:
       0: aload_0
       1: getfield      #852                // Field aucType:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$learnRate_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #732                // Field learnRate:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$learnRateAnnealing_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #734                // Field learnRateAnnealing:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$sampleRate_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #736                // Field sampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$colSampleRate_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #738                // Field colSampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$maxAbsLeafnodePred_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #740                // Field maxAbsLeafnodePred:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$predNoiseBandwidth_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #742                // Field predNoiseBandwidth:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$interactionConstraints_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #745                // Field interactionConstraints:Lai/h2o/sparkling/ml/params/NullableStringArrayArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$balanceClasses_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #748                // Field balanceClasses:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$classSamplingFactors_$eq(ai.h2o.sparkling.ml.params.NullableFloatArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #751                // Field classSamplingFactors:Lai/h2o/sparkling/ml/params/NullableFloatArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$maxAfterBalanceSize_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #754                // Field maxAfterBalanceSize:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$maxConfusionMatrixSize_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #757                // Field maxConfusionMatrixSize:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$ntrees_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #759                // Field ntrees:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$maxDepth_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #761                // Field maxDepth:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$minRows_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #763                // Field minRows:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$nbins_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #765                // Field nbins:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$nbinsTopLevel_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #767                // Field nbinsTopLevel:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$nbinsCats_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #769                // Field nbinsCats:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$seed_$eq(org.apache.spark.ml.param.LongParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #772                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$buildTreeOneNode_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #774                // Field buildTreeOneNode:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$sampleRatePerClass_$eq(ai.h2o.sparkling.ml.params.NullableDoubleArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #777                // Field sampleRatePerClass:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$colSampleRatePerTree_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #779                // Field colSampleRatePerTree:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$colSampleRateChangePerLevel_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #781                // Field colSampleRateChangePerLevel:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$scoreTreeInterval_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #783                // Field scoreTreeInterval:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$minSplitImprovement_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #785                // Field minSplitImprovement:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$histogramType_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #789                // Field histogramType:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$calibrateModel_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #791                // Field calibrateModel:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$calibrationMethod_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #793                // Field calibrationMethod:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$checkConstantResponse_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #795                // Field checkConstantResponse:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$inTrainingCheckpointsDir_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #798                // Field inTrainingCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$inTrainingCheckpointsTreeInterval_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #800                // Field inTrainingCheckpointsTreeInterval:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$modelId_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #802                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$nfolds_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #804                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$keepCrossValidationModels_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #806                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$keepCrossValidationPredictions_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #808                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$keepCrossValidationFoldAssignment_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #810                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$distribution_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #812                // Field distribution:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$tweediePower_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #814                // Field tweediePower:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$quantileAlpha_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #816                // Field quantileAlpha:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$huberAlpha_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #818                // Field huberAlpha:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$labelCol_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #820                // Field labelCol:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$weightCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #822                // Field weightCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$offsetCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #824                // Field offsetCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$foldCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #826                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$foldAssignment_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #828                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$categoricalEncoding_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #830                // Field categoricalEncoding:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$ignoreConstCols_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #832                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$scoreEachIteration_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #834                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$stoppingRounds_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #836                // Field stoppingRounds:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$maxRuntimeSecs_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #838                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$stoppingMetric_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #840                // Field stoppingMetric:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$stoppingTolerance_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #842                // Field stoppingTolerance:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$gainsliftBins_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #844                // Field gainsliftBins:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$customMetricFunc_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #846                // Field customMetricFunc:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$customDistributionFunc_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #848                // Field customDistributionFunc:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$exportCheckpointsDir_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #850                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGBMParams$_setter_$aucType_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #852                // Field aucType:Lorg/apache/spark/ml/param/Param;
       5: return

  public ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols();
    Code:
       0: aload_0
       1: getfield      #923                // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasIgnoredCols$_setter_$ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #923                // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       5: return

  public ai.h2o.sparkling.ml.params.NullableDataFrameParam ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame();
    Code:
       0: aload_0
       1: getfield      #928                // Field ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame:Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$_setter_$ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame_$eq(ai.h2o.sparkling.ml.params.NullableDataFrameParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #928                // Field ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame:Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
       5: return

  public ai.h2o.sparkling.ml.params.DictionaryParam ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints();
    Code:
       0: aload_0
       1: getfield      #933                // Field ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints:Lai/h2o/sparkling/ml/params/DictionaryParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasMonotoneConstraints$_setter_$ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints_$eq(ai.h2o.sparkling.ml.params.DictionaryParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #933                // Field ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints:Lai/h2o/sparkling/ml/params/DictionaryParam;
       5: return

  public java.lang.String uid();
    Code:
       0: aload_0
       1: getfield      #937                // Field uid:Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.models.H2OGBMMOJOModel fit(org.apache.spark.sql.Dataset<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #944                // Method ai/h2o/sparkling/ml/algos/H2OTreeBasedSupervisedAlgorithm.fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OTreeBasedSupervisedMOJOModel;
       5: checkcast     #946                // class ai/h2o/sparkling/ml/models/H2OGBMMOJOModel
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithmWithFoldColumn setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #949                // Method setFoldCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: checkcast     #951                // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithmWithFoldColumn
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setOffsetCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #954                // Method setOffsetCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: checkcast     #956                // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setWeightCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #958                // Method setWeightCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: checkcast     #956                // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setLabelCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #960                // Method setLabelCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: checkcast     #956                // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OTreeBasedSupervisedAlgorithm setNtrees(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #963                // Method setNtrees:(I)Lai/h2o/sparkling/ml/params/H2OGBMParams;
       5: checkcast     #5                  // class ai/h2o/sparkling/ml/algos/H2OTreeBasedSupervisedAlgorithm
       8: areturn

  public org.apache.spark.ml.Model fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #966                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OGBMMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #966                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OGBMMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OAlgorithmMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #966                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OGBMMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OSupervisedMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #966                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OGBMMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OTreeBasedSupervisedMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #966                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OGBMMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.algos.H2OGBM(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #937                // Field uid:Ljava/lang/String;
       5: aload_0
       6: getstatic     #976                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
       9: ldc           #15                 // class hex/tree/gbm/GBMModel$GBMParameters
      11: invokevirtual #980                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      14: invokespecial #983                // Method ai/h2o/sparkling/ml/algos/H2OTreeBasedSupervisedAlgorithm."<init>":(Lscala/reflect/ClassTag;)V
      17: aload_0
      18: invokestatic  #987                // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.$init$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;)V
      21: aload_0
      22: invokestatic  #990                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.$init$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;)V
      25: aload_0
      26: invokestatic  #993                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.$init$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)V
      29: aload_0
      30: invokestatic  #996                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGBMParams.$init$:(Lai/h2o/sparkling/ml/params/H2OGBMParams;)V
      33: aload_0
      34: invokestatic  #999                // InterfaceMethod ai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation.$init$:(Lai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation;)V
      37: return

  public ai.h2o.sparkling.ml.algos.H2OGBM();
    Code:
       0: aload_0
       1: getstatic     #1005               // Field org/apache/spark/ml/util/Identifiable$.MODULE$:Lorg/apache/spark/ml/util/Identifiable$;
       4: ldc           #2                  // class ai/h2o/sparkling/ml/algos/H2OGBM
       6: invokevirtual #1010               // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       9: invokevirtual #1014               // Method org/apache/spark/ml/util/Identifiable$.randomUID:(Ljava/lang/String;)Ljava/lang/String;
      12: invokespecial #1016               // Method "<init>":(Ljava/lang/String;)V
      15: return
}
