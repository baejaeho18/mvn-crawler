Compiled from "HasBetaConstraints.scala"
public interface ai.h2o.sparkling.ml.params.HasBetaConstraints extends ai.h2o.sparkling.ml.params.H2OAlgoParamsBase,ai.h2o.sparkling.ml.params.HasDataFrameSerializer {
  public abstract void ai$h2o$sparkling$ml$params$HasBetaConstraints$_setter_$ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints_$eq(ai.h2o.sparkling.ml.params.NullableDataFrameParam);

  public abstract scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasBetaConstraints$$super$getSWtoH2OParamNameMap();

  public abstract ai.h2o.sparkling.ml.params.NullableDataFrameParam ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints();

  public static org.apache.spark.sql.Dataset getBetaConstraints$(ai.h2o.sparkling.ml.params.HasBetaConstraints);
    Code:
       0: aload_0
       1: invokespecial #36                 // InterfaceMethod getBetaConstraints:()Lorg/apache/spark/sql/Dataset;
       4: areturn

  public default org.apache.spark.sql.Dataset<org.apache.spark.sql.Row> getBetaConstraints();
    Code:
       0: getstatic     #44                 // Field ai/h2o/sparkling/utils/DataFrameSerializationWrappers$.MODULE$:Lai/h2o/sparkling/utils/DataFrameSerializationWrappers$;
       3: aload_0
       4: aload_0
       5: invokeinterface #46,  1           // InterfaceMethod ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints:()Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
      10: invokeinterface #50,  2           // InterfaceMethod $:(Lorg/apache/spark/ml/param/Param;)Ljava/lang/Object;
      15: checkcast     #14                 // class ai/h2o/sparkling/utils/DataFrameSerializationWrappers$DataFrameSerializationWrapper
      18: invokevirtual #54                 // Method ai/h2o/sparkling/utils/DataFrameSerializationWrappers$.toDataFrame:(Lai/h2o/sparkling/utils/DataFrameSerializationWrappers$DataFrameSerializationWrapper;)Lorg/apache/spark/sql/Dataset;
      21: areturn

  public static ai.h2o.sparkling.ml.params.HasBetaConstraints setBetaConstraints$(ai.h2o.sparkling.ml.params.HasBetaConstraints, org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #62                 // InterfaceMethod setBetaConstraints:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/params/HasBetaConstraints;
       5: areturn

  public default ai.h2o.sparkling.ml.params.HasBetaConstraints setBetaConstraints(org.apache.spark.sql.Dataset<org.apache.spark.sql.Row>);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #46,  1           // InterfaceMethod ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints:()Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
       7: getstatic     #44                 // Field ai/h2o/sparkling/utils/DataFrameSerializationWrappers$.MODULE$:Lai/h2o/sparkling/utils/DataFrameSerializationWrappers$;
      10: aload_1
      11: invokevirtual #68                 // Method ai/h2o/sparkling/utils/DataFrameSerializationWrappers$.toWrapper:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/utils/DataFrameSerializationWrappers$DataFrameSerializationWrapper;
      14: invokeinterface #72,  3           // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      19: checkcast     #2                  // class ai/h2o/sparkling/ml/params/HasBetaConstraints
      22: areturn

  public static scala.collection.immutable.Map getBetaConstraintsParam$(ai.h2o.sparkling.ml.params.HasBetaConstraints, ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #79                 // InterfaceMethod getBetaConstraintsParam:(Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public default scala.collection.immutable.Map<java.lang.String, java.lang.Object> getBetaConstraintsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: getstatic     #86                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: invokevirtual #90                 // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
       6: getstatic     #86                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: iconst_1
      10: anewarray     #92                 // class scala/Tuple2
      13: dup
      14: iconst_0
      15: getstatic     #95                 // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
      18: getstatic     #86                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      21: ldc           #97                 // String beta_constraints
      23: invokevirtual #101                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
      26: aload_0
      27: aload_0
      28: invokeinterface #36,  1           // InterfaceMethod getBetaConstraints:()Lorg/apache/spark/sql/Dataset;
      33: invokeinterface #105,  2          // InterfaceMethod convertDataFrameToH2OFrameKey:(Lorg/apache/spark/sql/Dataset;)Ljava/lang/String;
      38: invokevirtual #109                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
      41: aastore
      42: checkcast     #111                // class "[Ljava/lang/Object;"
      45: invokevirtual #115                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      48: invokevirtual #121                // Method scala/collection/immutable/Map$.apply:(Lscala/collection/Seq;)Lscala/collection/GenMap;
      51: checkcast     #123                // class scala/collection/immutable/Map
      54: areturn

  public static scala.collection.immutable.Map getSWtoH2OParamNameMap$(ai.h2o.sparkling.ml.params.HasBetaConstraints);
    Code:
       0: aload_0
       1: invokespecial #128                // InterfaceMethod getSWtoH2OParamNameMap:()Lscala/collection/immutable/Map;
       4: areturn

  public default scala.collection.immutable.Map<java.lang.String, java.lang.String> getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokeinterface #131,  1          // InterfaceMethod ai$h2o$sparkling$ml$params$HasBetaConstraints$$super$getSWtoH2OParamNameMap:()Lscala/collection/immutable/Map;
       6: getstatic     #86                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: invokevirtual #90                 // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
      12: getstatic     #86                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      15: iconst_1
      16: anewarray     #92                 // class scala/Tuple2
      19: dup
      20: iconst_0
      21: getstatic     #95                 // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
      24: getstatic     #86                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      27: ldc           #133                // String betaConstraints
      29: invokevirtual #101                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
      32: ldc           #97                 // String beta_constraints
      34: invokevirtual #109                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
      37: aastore
      38: checkcast     #111                // class "[Ljava/lang/Object;"
      41: invokevirtual #115                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      44: invokevirtual #121                // Method scala/collection/immutable/Map$.apply:(Lscala/collection/Seq;)Lscala/collection/GenMap;
      47: invokeinterface #137,  2          // InterfaceMethod scala/collection/immutable/Map.$plus$plus:(Lscala/collection/GenTraversableOnce;)Lscala/collection/immutable/Map;
      52: areturn

  public static void $init$(ai.h2o.sparkling.ml.params.HasBetaConstraints);
    Code:
       0: aload_0
       1: new           #141                // class ai/h2o/sparkling/ml/params/NullableDataFrameParam
       4: dup
       5: aload_0
       6: ldc           #133                // String betaConstraints
       8: ldc           #143                // String Data frame of beta constraints enabling to set special conditions over the model coefficients.
      10: invokespecial #147                // Method ai/h2o/sparkling/ml/params/NullableDataFrameParam."<init>":(Lai/h2o/sparkling/ml/params/HasDataFrameSerializer;Ljava/lang/String;Ljava/lang/String;)V
      13: invokeinterface #149,  2          // InterfaceMethod ai$h2o$sparkling$ml$params$HasBetaConstraints$_setter_$ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints_$eq:(Lai/h2o/sparkling/ml/params/NullableDataFrameParam;)V
      18: aload_0
      19: getstatic     #86                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      22: iconst_1
      23: anewarray     #151                // class org/apache/spark/ml/param/ParamPair
      26: dup
      27: iconst_0
      28: aload_0
      29: invokeinterface #46,  1           // InterfaceMethod ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints:()Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
      34: aconst_null
      35: invokevirtual #155                // Method ai/h2o/sparkling/ml/params/NullableDataFrameParam.$minus$greater:(Ljava/lang/Object;)Lorg/apache/spark/ml/param/ParamPair;
      38: aastore
      39: checkcast     #111                // class "[Ljava/lang/Object;"
      42: invokevirtual #115                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      45: invokeinterface #159,  2          // InterfaceMethod setDefault:(Lscala/collection/Seq;)Lorg/apache/spark/ml/param/Params;
      50: pop
      51: return
}
