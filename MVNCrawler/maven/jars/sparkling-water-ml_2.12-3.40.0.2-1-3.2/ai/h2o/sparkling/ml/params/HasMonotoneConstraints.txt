Compiled from "HasMonotoneConstraints.scala"
public interface ai.h2o.sparkling.ml.params.HasMonotoneConstraints extends ai.h2o.sparkling.ml.params.H2OAlgoParamsBase {
  public abstract void ai$h2o$sparkling$ml$params$HasMonotoneConstraints$_setter_$ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints_$eq(ai.h2o.sparkling.ml.params.DictionaryParam);

  public abstract scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$super$getSWtoH2OParamNameMap();

  public abstract ai.h2o.sparkling.ml.params.DictionaryParam ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints();

  public static scala.collection.immutable.Map getMonotoneConstraints$(ai.h2o.sparkling.ml.params.HasMonotoneConstraints);
    Code:
       0: aload_0
       1: invokespecial #39                 // InterfaceMethod getMonotoneConstraints:()Lscala/collection/immutable/Map;
       4: areturn

  public default scala.collection.immutable.Map<java.lang.String, java.lang.Object> getMonotoneConstraints();
    Code:
       0: getstatic     #47                 // Field scala/collection/JavaConverters$.MODULE$:Lscala/collection/JavaConverters$;
       3: aload_0
       4: aload_0
       5: invokeinterface #49,  1           // InterfaceMethod ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints:()Lai/h2o/sparkling/ml/params/DictionaryParam;
      10: invokeinterface #53,  2           // InterfaceMethod $:(Lorg/apache/spark/ml/param/Param;)Ljava/lang/Object;
      15: checkcast     #55                 // class java/util/Map
      18: invokevirtual #59                 // Method scala/collection/JavaConverters$.mapAsScalaMapConverter:(Ljava/util/Map;)Lscala/collection/convert/Decorators$AsScala;
      21: invokevirtual #63                 // Method scala/collection/convert/Decorators$AsScala.asScala:()Ljava/lang/Object;
      24: checkcast     #65                 // class scala/collection/TraversableOnce
      27: getstatic     #70                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      30: invokevirtual #74                 // Method scala/Predef$.$conforms:()Lscala/Predef$$less$colon$less;
      33: invokeinterface #78,  2           // InterfaceMethod scala/collection/TraversableOnce.toMap:(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
      38: areturn

  public static ai.h2o.sparkling.ml.params.HasMonotoneConstraints setMonotoneConstraints$(ai.h2o.sparkling.ml.params.HasMonotoneConstraints, scala.collection.immutable.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #86                 // InterfaceMethod setMonotoneConstraints:(Lscala/collection/immutable/Map;)Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;
       5: areturn

  public default ai.h2o.sparkling.ml.params.HasMonotoneConstraints setMonotoneConstraints(scala.collection.immutable.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #49,  1           // InterfaceMethod ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints:()Lai/h2o/sparkling/ml/params/DictionaryParam;
       7: getstatic     #47                 // Field scala/collection/JavaConverters$.MODULE$:Lscala/collection/JavaConverters$;
      10: aload_1
      11: invokevirtual #92                 // Method scala/collection/JavaConverters$.mapAsJavaMapConverter:(Lscala/collection/Map;)Lscala/collection/convert/Decorators$AsJava;
      14: invokevirtual #95                 // Method scala/collection/convert/Decorators$AsJava.asJava:()Ljava/lang/Object;
      17: invokeinterface #99,  3           // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      22: checkcast     #2                  // class ai/h2o/sparkling/ml/params/HasMonotoneConstraints
      25: areturn

  public static scala.collection.immutable.Map getMonotoneConstraintsParam$(ai.h2o.sparkling.ml.params.HasMonotoneConstraints, ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #106                // InterfaceMethod getMonotoneConstraintsParam:(Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public default scala.collection.immutable.Map<java.lang.String, java.lang.Object> getMonotoneConstraintsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: getstatic     #70                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: invokevirtual #112                // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
       6: getstatic     #70                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: iconst_1
      10: anewarray     #114                // class scala/Tuple2
      13: dup
      14: iconst_0
      15: getstatic     #117                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
      18: getstatic     #70                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      21: ldc           #119                // String monotone_constraints
      23: invokevirtual #123                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
      26: aload_0
      27: invokeinterface #39,  1           // InterfaceMethod getMonotoneConstraints:()Lscala/collection/immutable/Map;
      32: invokevirtual #127                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
      35: aastore
      36: checkcast     #129                // class "[Ljava/lang/Object;"
      39: invokevirtual #133                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      42: invokevirtual #139                // Method scala/collection/immutable/Map$.apply:(Lscala/collection/Seq;)Lscala/collection/GenMap;
      45: checkcast     #141                // class scala/collection/immutable/Map
      48: areturn

  public static scala.collection.immutable.Map getSWtoH2OParamNameMap$(ai.h2o.sparkling.ml.params.HasMonotoneConstraints);
    Code:
       0: aload_0
       1: invokespecial #145                // InterfaceMethod getSWtoH2OParamNameMap:()Lscala/collection/immutable/Map;
       4: areturn

  public default scala.collection.immutable.Map<java.lang.String, java.lang.String> getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokeinterface #148,  1          // InterfaceMethod ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$super$getSWtoH2OParamNameMap:()Lscala/collection/immutable/Map;
       6: getstatic     #70                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: invokevirtual #112                // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
      12: getstatic     #70                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      15: iconst_1
      16: anewarray     #114                // class scala/Tuple2
      19: dup
      20: iconst_0
      21: getstatic     #117                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
      24: getstatic     #70                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      27: ldc           #150                // String monotoneConstraints
      29: invokevirtual #123                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
      32: ldc           #119                // String monotone_constraints
      34: invokevirtual #127                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
      37: aastore
      38: checkcast     #129                // class "[Ljava/lang/Object;"
      41: invokevirtual #133                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      44: invokevirtual #139                // Method scala/collection/immutable/Map$.apply:(Lscala/collection/Seq;)Lscala/collection/GenMap;
      47: invokeinterface #154,  2          // InterfaceMethod scala/collection/immutable/Map.$plus$plus:(Lscala/collection/GenTraversableOnce;)Lscala/collection/immutable/Map;
      52: areturn

  public static void $init$(ai.h2o.sparkling.ml.params.HasMonotoneConstraints);
    Code:
       0: aload_0
       1: new           #158                // class ai/h2o/sparkling/ml/params/DictionaryParam
       4: dup
       5: aload_0
       6: ldc           #150                // String monotoneConstraints
       8: ldc           #160                // String A key must correspond to a feature name and value could be 1 or -1
      10: invokespecial #164                // Method ai/h2o/sparkling/ml/params/DictionaryParam."<init>":(Lorg/apache/spark/ml/param/Params;Ljava/lang/String;Ljava/lang/String;)V
      13: invokeinterface #166,  2          // InterfaceMethod ai$h2o$sparkling$ml$params$HasMonotoneConstraints$_setter_$ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints_$eq:(Lai/h2o/sparkling/ml/params/DictionaryParam;)V
      18: aload_0
      19: getstatic     #70                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      22: iconst_1
      23: anewarray     #168                // class org/apache/spark/ml/param/ParamPair
      26: dup
      27: iconst_0
      28: aload_0
      29: invokeinterface #49,  1           // InterfaceMethod ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints:()Lai/h2o/sparkling/ml/params/DictionaryParam;
      34: new           #170                // class java/util/HashMap
      37: dup
      38: invokespecial #173                // Method java/util/HashMap."<init>":()V
      41: invokevirtual #177                // Method ai/h2o/sparkling/ml/params/DictionaryParam.$minus$greater:(Ljava/lang/Object;)Lorg/apache/spark/ml/param/ParamPair;
      44: aastore
      45: checkcast     #129                // class "[Ljava/lang/Object;"
      48: invokevirtual #133                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      51: invokeinterface #181,  2          // InterfaceMethod setDefault:(Lscala/collection/Seq;)Lorg/apache/spark/ml/param/Params;
      56: pop
      57: return
}
