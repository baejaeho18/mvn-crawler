Compiled from "H2OKMeansExtras.scala"
public interface ai.h2o.sparkling.ml.algos.H2OKMeansExtras {
  public abstract void ai$h2o$sparkling$ml$algos$H2OKMeansExtras$$super$prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);

  public abstract scala.collection.Seq ai$h2o$sparkling$ml$algos$H2OKMeansExtras$$super$getExcludedCols();

  public abstract java.lang.String getFoldCol();

  public abstract ai.h2o.sparkling.ml.algos.H2OKMeansExtras setFoldCol(java.lang.String);

  public static void prepareH2OTrainFrameForFitting$(ai.h2o.sparkling.ml.algos.H2OKMeansExtras, ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #41                 // InterfaceMethod prepareH2OTrainFrameForFitting:(Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public default void prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #45,  2           // InterfaceMethod ai$h2o$sparkling$ml$algos$H2OKMeansExtras$$super$prepareH2OTrainFrameForFitting:(Lai/h2o/sparkling/H2OFrame;)V
       7: new           #21                 // class scala/collection/mutable/ArrayOps$ofRef
      10: dup
      11: getstatic     #51                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      14: new           #21                 // class scala/collection/mutable/ArrayOps$ofRef
      17: dup
      18: getstatic     #51                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      21: aload_1
      22: invokevirtual #57                 // Method ai/h2o/sparkling/H2OFrame.columns:()[Lai/h2o/sparkling/H2OColumn;
      25: checkcast     #59                 // class "[Ljava/lang/Object;"
      28: invokevirtual #63                 // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      31: invokespecial #67                 // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      34: invokedynamic #90,  0             // InvokeDynamic #0:apply:()Lscala/Function1;
      39: invokevirtual #94                 // Method scala/collection/mutable/ArrayOps$ofRef.filter:(Lscala/Function1;)Ljava/lang/Object;
      42: checkcast     #59                 // class "[Ljava/lang/Object;"
      45: invokevirtual #63                 // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      48: invokespecial #67                 // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      51: invokedynamic #101,  0            // InvokeDynamic #1:apply:()Lscala/Function1;
      56: getstatic     #106                // Field scala/Array$.MODULE$:Lscala/Array$;
      59: getstatic     #111                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      62: ldc           #113                // class java/lang/String
      64: invokevirtual #116                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      67: invokevirtual #120                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
      70: invokevirtual #124                // Method scala/collection/mutable/ArrayOps$ofRef.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      73: checkcast     #126                // class "[Ljava/lang/String;"
      76: astore_2
      77: new           #21                 // class scala/collection/mutable/ArrayOps$ofRef
      80: dup
      81: getstatic     #51                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      84: aload_2
      85: checkcast     #59                 // class "[Ljava/lang/Object;"
      88: invokevirtual #63                 // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      91: invokespecial #67                 // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      94: invokevirtual #130                // Method scala/collection/mutable/ArrayOps$ofRef.nonEmpty:()Z
      97: ifeq          165
     100: new           #132                // class java/lang/IllegalArgumentException
     103: dup
     104: new           #134                // class java/lang/StringBuilder
     107: dup
     108: ldc           #135                // int 249
     110: invokespecial #138                // Method java/lang/StringBuilder."<init>":(I)V
     113: ldc           #140                // String Following columns are of type string: \'
     115: invokevirtual #144                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: new           #21                 // class scala/collection/mutable/ArrayOps$ofRef
     121: dup
     122: getstatic     #51                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
     125: aload_2
     126: checkcast     #59                 // class "[Ljava/lang/Object;"
     129: invokevirtual #63                 // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     132: invokespecial #67                 // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     135: ldc           #146                // String ,
     137: invokevirtual #150                // Method scala/collection/mutable/ArrayOps$ofRef.mkString:(Ljava/lang/String;)Ljava/lang/String;
     140: invokevirtual #144                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     143: ldc           #152                // String \', but
     145: invokevirtual #144                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     148: ldc           #154                // String  H2OKMeans does not accept string columns. However, you can use the \'columnsToCategorical\' methods on H2OKMeans.
     150: invokevirtual #144                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     153: ldc           #156                // String  These methods ensure that string columns are converted to representation H2O-3 understands.
     155: invokevirtual #144                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     158: invokevirtual #159                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     161: invokespecial #162                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     164: athrow
     165: return

  public static scala.collection.Seq getExcludedCols$(ai.h2o.sparkling.ml.algos.H2OKMeansExtras);
    Code:
       0: aload_0
       1: invokespecial #169                // InterfaceMethod getExcludedCols:()Lscala/collection/Seq;
       4: areturn

  public default scala.collection.Seq<java.lang.String> getExcludedCols();
    Code:
       0: aload_0
       1: invokeinterface #172,  1          // InterfaceMethod ai$h2o$sparkling$ml$algos$H2OKMeansExtras$$super$getExcludedCols:()Lscala/collection/Seq;
       6: new           #174                // class scala/collection/immutable/$colon$colon
       9: dup
      10: aload_0
      11: invokeinterface #176,  1          // InterfaceMethod getFoldCol:()Ljava/lang/String;
      16: getstatic     #181                // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      19: invokespecial #184                // Method scala/collection/immutable/$colon$colon."<init>":(Ljava/lang/Object;Lscala/collection/immutable/List;)V
      22: checkcast     #186                // class scala/collection/TraversableLike
      25: invokedynamic #193,  0            // InvokeDynamic #2:apply:()Lscala/Function1;
      30: getstatic     #198                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      33: invokevirtual #201                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      36: invokeinterface #204,  3          // InterfaceMethod scala/collection/TraversableLike.flatMap:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      41: checkcast     #206                // class scala/collection/GenTraversableOnce
      44: getstatic     #198                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      47: invokevirtual #201                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      50: invokeinterface #212,  3          // InterfaceMethod scala/collection/Seq.$plus$plus:(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      55: checkcast     #208                // class scala/collection/Seq
      58: areturn

  public static boolean $anonfun$prepareH2OTrainFrameForFitting$1(ai.h2o.sparkling.H2OColumn);
    Code:
       0: aload_0
       1: invokevirtual #221                // Method ai/h2o/sparkling/H2OColumn.dataType:()Lscala/Enumeration$Value;
       4: getstatic     #226                // Field ai/h2o/sparkling/H2OColumnType$.MODULE$:Lai/h2o/sparkling/H2OColumnType$;
       7: invokevirtual #229                // Method ai/h2o/sparkling/H2OColumnType$.string:()Lscala/Enumeration$Value;
      10: astore_1
      11: dup
      12: ifnonnull     23
      15: pop
      16: aload_1
      17: ifnull        30
      20: goto          34
      23: aload_1
      24: invokevirtual #233                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      27: ifeq          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public static java.lang.String $anonfun$prepareH2OTrainFrameForFitting$2(ai.h2o.sparkling.H2OColumn);
    Code:
       0: aload_0
       1: invokevirtual #238                // Method ai/h2o/sparkling/H2OColumn.name:()Ljava/lang/String;
       4: areturn

  public static scala.collection.Iterable $anonfun$getExcludedCols$1(java.lang.String);
    Code:
       0: getstatic     #244                // Field scala/Option$.MODULE$:Lscala/Option$;
       3: getstatic     #244                // Field scala/Option$.MODULE$:Lscala/Option$;
       6: aload_0
       7: invokevirtual #247                // Method scala/Option$.apply:(Ljava/lang/Object;)Lscala/Option;
      10: invokevirtual #251                // Method scala/Option$.option2Iterable:(Lscala/Option;)Lscala/collection/Iterable;
      13: areturn

  public static void $init$(ai.h2o.sparkling.ml.algos.H2OKMeansExtras);
    Code:
       0: return

  public static java.lang.Object $anonfun$prepareH2OTrainFrameForFitting$1$adapted(ai.h2o.sparkling.H2OColumn);
    Code:
       0: aload_0
       1: invokestatic  #256                // InterfaceMethod $anonfun$prepareH2OTrainFrameForFitting$1:(Lai/h2o/sparkling/H2OColumn;)Z
       4: invokestatic  #262                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       7: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #274,  0            // InvokeDynamic #3:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
