Compiled from "H2ODRF.scala"
public class ai.h2o.sparkling.ml.algos.H2ODRF extends ai.h2o.sparkling.ml.algos.H2OTreeBasedSupervisedAlgorithm<hex.tree.drf.DRFModel$DRFParameters> implements ai.h2o.sparkling.ml.params.H2ODRFParams, ai.h2o.sparkling.ml.algos.DistributionBasedH2OTrainFramePreparation {
  private final java.lang.String uid;

  private final org.apache.spark.ml.param.IntParam mtries;

  private final org.apache.spark.ml.param.BooleanParam binomialDoubleTrees;

  private final org.apache.spark.ml.param.DoubleParam sampleRate;

  private final org.apache.spark.ml.param.BooleanParam balanceClasses;

  private final ai.h2o.sparkling.ml.params.NullableFloatArrayParam classSamplingFactors;

  private final org.apache.spark.ml.param.FloatParam maxAfterBalanceSize;

  private final org.apache.spark.ml.param.IntParam maxConfusionMatrixSize;

  private final org.apache.spark.ml.param.IntParam ntrees;

  private final org.apache.spark.ml.param.IntParam maxDepth;

  private final org.apache.spark.ml.param.DoubleParam minRows;

  private final org.apache.spark.ml.param.IntParam nbins;

  private final org.apache.spark.ml.param.IntParam nbinsTopLevel;

  private final org.apache.spark.ml.param.IntParam nbinsCats;

  private final org.apache.spark.ml.param.LongParam seed;

  private final org.apache.spark.ml.param.BooleanParam buildTreeOneNode;

  private final ai.h2o.sparkling.ml.params.NullableDoubleArrayParam sampleRatePerClass;

  private final org.apache.spark.ml.param.DoubleParam colSampleRatePerTree;

  private final org.apache.spark.ml.param.DoubleParam colSampleRateChangePerLevel;

  private final org.apache.spark.ml.param.IntParam scoreTreeInterval;

  private final org.apache.spark.ml.param.DoubleParam minSplitImprovement;

  private final org.apache.spark.ml.param.Param<java.lang.String> histogramType;

  private final org.apache.spark.ml.param.BooleanParam calibrateModel;

  private final org.apache.spark.ml.param.Param<java.lang.String> calibrationMethod;

  private final org.apache.spark.ml.param.BooleanParam checkConstantResponse;

  private final ai.h2o.sparkling.ml.params.NullableStringParam modelId;

  private final org.apache.spark.ml.param.IntParam nfolds;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationModels;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment;

  private final org.apache.spark.ml.param.Param<java.lang.String> distribution;

  private final org.apache.spark.ml.param.Param<java.lang.String> labelCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam weightCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam offsetCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam foldCol;

  private final org.apache.spark.ml.param.Param<java.lang.String> foldAssignment;

  private final org.apache.spark.ml.param.Param<java.lang.String> categoricalEncoding;

  private final org.apache.spark.ml.param.BooleanParam ignoreConstCols;

  private final org.apache.spark.ml.param.BooleanParam scoreEachIteration;

  private final org.apache.spark.ml.param.IntParam stoppingRounds;

  private final org.apache.spark.ml.param.DoubleParam maxRuntimeSecs;

  private final org.apache.spark.ml.param.Param<java.lang.String> stoppingMetric;

  private final org.apache.spark.ml.param.DoubleParam stoppingTolerance;

  private final org.apache.spark.ml.param.IntParam gainsliftBins;

  private final ai.h2o.sparkling.ml.params.NullableStringParam customMetricFunc;

  private final ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir;

  private final org.apache.spark.ml.param.Param<java.lang.String> aucType;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols;

  private final ai.h2o.sparkling.ml.params.NullableDataFrameParam ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame;

  public static org.apache.spark.ml.util.MLReader<ai.h2o.sparkling.ml.algos.H2ODRF> read();
    Code:
       0: getstatic     #89                 // Field ai/h2o/sparkling/ml/algos/H2ODRF$.MODULE$:Lai/h2o/sparkling/ml/algos/H2ODRF$;
       3: invokevirtual #91                 // Method ai/h2o/sparkling/ml/algos/H2ODRF$.read:()Lorg/apache/spark/ml/util/MLReader;
       6: areturn

  public static java.lang.Object load(java.lang.String);
    Code:
       0: getstatic     #89                 // Field ai/h2o/sparkling/ml/algos/H2ODRF$.MODULE$:Lai/h2o/sparkling/ml/algos/H2ODRF$;
       3: aload_0
       4: invokevirtual #96                 // Method ai/h2o/sparkling/ml/algos/H2ODRF$.load:(Ljava/lang/String;)Ljava/lang/Object;
       7: areturn

  public void ai$h2o$sparkling$ml$algos$DistributionBasedH2OTrainFramePreparation$$super$prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #105                // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OTrainFramePreparation.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/H2OTrainFramePreparation;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public void prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #113                // InterfaceMethod ai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2ODRFParams$$super$getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #122                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2ODRFParams$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #130                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.reflect.ClassTag<hex.tree.drf.DRFModel$DRFParameters> paramTag();
    Code:
       0: aload_0
       1: invokestatic  #137                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.paramTag$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Lscala/reflect/ClassTag;
       4: areturn

  public int getMtries();
    Code:
       0: aload_0
       1: invokestatic  #143                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getMtries$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public boolean getBinomialDoubleTrees();
    Code:
       0: aload_0
       1: invokestatic  #149                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getBinomialDoubleTrees$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public double getSampleRate();
    Code:
       0: aload_0
       1: invokestatic  #155                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getSampleRate$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)D
       4: dreturn

  public boolean getBalanceClasses();
    Code:
       0: aload_0
       1: invokestatic  #159                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getBalanceClasses$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public float[] getClassSamplingFactors();
    Code:
       0: aload_0
       1: invokestatic  #165                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getClassSamplingFactors$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)[F
       4: areturn

  public float getMaxAfterBalanceSize();
    Code:
       0: aload_0
       1: invokestatic  #171                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getMaxAfterBalanceSize$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)F
       4: freturn

  public int getMaxConfusionMatrixSize();
    Code:
       0: aload_0
       1: invokestatic  #175                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getMaxConfusionMatrixSize$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public int getNtrees();
    Code:
       0: aload_0
       1: invokestatic  #179                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getNtrees$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public int getMaxDepth();
    Code:
       0: aload_0
       1: invokestatic  #183                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getMaxDepth$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public double getMinRows();
    Code:
       0: aload_0
       1: invokestatic  #187                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getMinRows$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)D
       4: dreturn

  public int getNbins();
    Code:
       0: aload_0
       1: invokestatic  #191                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getNbins$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public int getNbinsTopLevel();
    Code:
       0: aload_0
       1: invokestatic  #195                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getNbinsTopLevel$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public int getNbinsCats();
    Code:
       0: aload_0
       1: invokestatic  #199                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getNbinsCats$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public long getSeed();
    Code:
       0: aload_0
       1: invokestatic  #205                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getSeed$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)J
       4: lreturn

  public boolean getBuildTreeOneNode();
    Code:
       0: aload_0
       1: invokestatic  #209                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getBuildTreeOneNode$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public double[] getSampleRatePerClass();
    Code:
       0: aload_0
       1: invokestatic  #215                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getSampleRatePerClass$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)[D
       4: areturn

  public double getColSampleRatePerTree();
    Code:
       0: aload_0
       1: invokestatic  #219                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getColSampleRatePerTree$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)D
       4: dreturn

  public double getColSampleRateChangePerLevel();
    Code:
       0: aload_0
       1: invokestatic  #223                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getColSampleRateChangePerLevel$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)D
       4: dreturn

  public int getScoreTreeInterval();
    Code:
       0: aload_0
       1: invokestatic  #227                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getScoreTreeInterval$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public double getMinSplitImprovement();
    Code:
       0: aload_0
       1: invokestatic  #231                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getMinSplitImprovement$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)D
       4: dreturn

  public java.lang.String getHistogramType();
    Code:
       0: aload_0
       1: invokestatic  #237                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getHistogramType$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public boolean getCalibrateModel();
    Code:
       0: aload_0
       1: invokestatic  #241                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getCalibrateModel$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public java.lang.String getCalibrationMethod();
    Code:
       0: aload_0
       1: invokestatic  #245                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getCalibrationMethod$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public boolean getCheckConstantResponse();
    Code:
       0: aload_0
       1: invokestatic  #249                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getCheckConstantResponse$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public java.lang.String getModelId();
    Code:
       0: aload_0
       1: invokestatic  #253                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getModelId$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public int getNfolds();
    Code:
       0: aload_0
       1: invokestatic  #257                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getNfolds$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public boolean getKeepCrossValidationModels();
    Code:
       0: aload_0
       1: invokestatic  #261                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationPredictions();
    Code:
       0: aload_0
       1: invokestatic  #265                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #269                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public java.lang.String getDistribution();
    Code:
       0: aload_0
       1: invokestatic  #273                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getDistribution$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getLabelCol();
    Code:
       0: aload_0
       1: invokestatic  #277                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getLabelCol$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getWeightCol();
    Code:
       0: aload_0
       1: invokestatic  #281                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getWeightCol$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getOffsetCol();
    Code:
       0: aload_0
       1: invokestatic  #285                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getOffsetCol$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getFoldCol();
    Code:
       0: aload_0
       1: invokestatic  #289                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getFoldCol$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #293                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getCategoricalEncoding();
    Code:
       0: aload_0
       1: invokestatic  #297                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getCategoricalEncoding$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public boolean getIgnoreConstCols();
    Code:
       0: aload_0
       1: invokestatic  #301                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public boolean getScoreEachIteration();
    Code:
       0: aload_0
       1: invokestatic  #305                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Z
       4: ireturn

  public int getStoppingRounds();
    Code:
       0: aload_0
       1: invokestatic  #309                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getStoppingRounds$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public double getMaxRuntimeSecs();
    Code:
       0: aload_0
       1: invokestatic  #313                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)D
       4: dreturn

  public java.lang.String getStoppingMetric();
    Code:
       0: aload_0
       1: invokestatic  #317                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getStoppingMetric$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public double getStoppingTolerance();
    Code:
       0: aload_0
       1: invokestatic  #321                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getStoppingTolerance$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)D
       4: dreturn

  public int getGainsliftBins();
    Code:
       0: aload_0
       1: invokestatic  #325                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getGainsliftBins$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)I
       4: ireturn

  public java.lang.String getCustomMetricFunc();
    Code:
       0: aload_0
       1: invokestatic  #329                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getCustomMetricFunc$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getExportCheckpointsDir();
    Code:
       0: aload_0
       1: invokestatic  #333                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getAucType();
    Code:
       0: aload_0
       1: invokestatic  #337                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getAucType$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setMtries(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #344                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setMtries$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setBinomialDoubleTrees(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #351                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setBinomialDoubleTrees$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setSampleRate(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #358                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setSampleRate$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;D)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setBalanceClasses(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #363                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setBalanceClasses$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setClassSamplingFactors(float[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #369                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setClassSamplingFactors$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;[F)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setMaxAfterBalanceSize(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #376                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setMaxAfterBalanceSize$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;F)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setMaxConfusionMatrixSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #381                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setMaxConfusionMatrixSize$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setNtrees(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #385                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setNtrees$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setMaxDepth(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #389                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setMaxDepth$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setMinRows(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #393                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setMinRows$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;D)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setNbins(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #397                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setNbins$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setNbinsTopLevel(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #401                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setNbinsTopLevel$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setNbinsCats(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #405                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setNbinsCats$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setSeed(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #411                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setSeed$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;J)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setBuildTreeOneNode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #416                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setBuildTreeOneNode$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setSampleRatePerClass(double[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #422                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setSampleRatePerClass$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;[D)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setColSampleRatePerTree(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #427                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setColSampleRatePerTree$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;D)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setColSampleRateChangePerLevel(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #431                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setColSampleRateChangePerLevel$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;D)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setScoreTreeInterval(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #435                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setScoreTreeInterval$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setMinSplitImprovement(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #439                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setMinSplitImprovement$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;D)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setHistogramType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #445                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setHistogramType$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setCalibrateModel(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #449                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setCalibrateModel$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setCalibrationMethod(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #453                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setCalibrationMethod$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setCheckConstantResponse(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #457                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setCheckConstantResponse$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setModelId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #461                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setModelId$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setNfolds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #465                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setNfolds$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setKeepCrossValidationModels(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #469                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setKeepCrossValidationPredictions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #473                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setKeepCrossValidationFoldAssignment(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #477                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setDistribution(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #481                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setDistribution$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setLabelCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #485                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setLabelCol$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setWeightCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #489                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setWeightCol$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setOffsetCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #493                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setOffsetCol$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #497                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setFoldCol$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setFoldAssignment(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #501                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setCategoricalEncoding(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #505                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setCategoricalEncoding$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setIgnoreConstCols(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #509                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setScoreEachIteration(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #513                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Z)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setStoppingRounds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #517                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setStoppingRounds$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setMaxRuntimeSecs(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #521                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;D)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setStoppingMetric(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #525                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setStoppingMetric$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setStoppingTolerance(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #529                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setStoppingTolerance$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;D)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setGainsliftBins(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #533                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setGainsliftBins$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setCustomMetricFunc(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #537                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setCustomMetricFunc$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setExportCheckpointsDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #541                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2ODRFParams setAucType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #545                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.setAucType$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #550                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2ODRFParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #554                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getH2ODRFParams$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.String> getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #559                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasIgnoredCols$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #565                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;)Lscala/collection/immutable/Map;
       4: areturn

  public java.lang.String[] getIgnoredCols();
    Code:
       0: aload_0
       1: invokestatic  #571                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)[Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasIgnoredCols setIgnoredCols(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #577                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.setIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/HasIgnoredCols;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getIgnoredColsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #583                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredColsParam$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #587                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;)Lscala/collection/immutable/Map;
       4: areturn

  public org.apache.spark.sql.Dataset<org.apache.spark.sql.Row> getCalibrationDataFrame();
    Code:
       0: aload_0
       1: invokestatic  #594                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.getCalibrationDataFrame$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;)Lorg/apache/spark/sql/Dataset;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasCalibrationDataFrame setCalibrationDataFrame(org.apache.spark.sql.Dataset<org.apache.spark.sql.Row>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #601                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.setCalibrationDataFrame$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getCalibrationDataFrameParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #607                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.getCalibrationDataFrameParam$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public org.apache.spark.ml.param.IntParam mtries();
    Code:
       0: aload_0
       1: getfield      #610                // Field mtries:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam binomialDoubleTrees();
    Code:
       0: aload_0
       1: getfield      #613                // Field binomialDoubleTrees:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam sampleRate();
    Code:
       0: aload_0
       1: getfield      #616                // Field sampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam balanceClasses();
    Code:
       0: aload_0
       1: getfield      #618                // Field balanceClasses:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableFloatArrayParam classSamplingFactors();
    Code:
       0: aload_0
       1: getfield      #621                // Field classSamplingFactors:Lai/h2o/sparkling/ml/params/NullableFloatArrayParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam maxAfterBalanceSize();
    Code:
       0: aload_0
       1: getfield      #624                // Field maxAfterBalanceSize:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxConfusionMatrixSize();
    Code:
       0: aload_0
       1: getfield      #626                // Field maxConfusionMatrixSize:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam ntrees();
    Code:
       0: aload_0
       1: getfield      #628                // Field ntrees:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxDepth();
    Code:
       0: aload_0
       1: getfield      #630                // Field maxDepth:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam minRows();
    Code:
       0: aload_0
       1: getfield      #632                // Field minRows:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nbins();
    Code:
       0: aload_0
       1: getfield      #634                // Field nbins:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nbinsTopLevel();
    Code:
       0: aload_0
       1: getfield      #636                // Field nbinsTopLevel:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nbinsCats();
    Code:
       0: aload_0
       1: getfield      #638                // Field nbinsCats:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.LongParam seed();
    Code:
       0: aload_0
       1: getfield      #641                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam buildTreeOneNode();
    Code:
       0: aload_0
       1: getfield      #643                // Field buildTreeOneNode:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableDoubleArrayParam sampleRatePerClass();
    Code:
       0: aload_0
       1: getfield      #646                // Field sampleRatePerClass:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleRatePerTree();
    Code:
       0: aload_0
       1: getfield      #648                // Field colSampleRatePerTree:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleRateChangePerLevel();
    Code:
       0: aload_0
       1: getfield      #650                // Field colSampleRateChangePerLevel:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam scoreTreeInterval();
    Code:
       0: aload_0
       1: getfield      #652                // Field scoreTreeInterval:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam minSplitImprovement();
    Code:
       0: aload_0
       1: getfield      #654                // Field minSplitImprovement:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> histogramType();
    Code:
       0: aload_0
       1: getfield      #658                // Field histogramType:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam calibrateModel();
    Code:
       0: aload_0
       1: getfield      #660                // Field calibrateModel:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> calibrationMethod();
    Code:
       0: aload_0
       1: getfield      #662                // Field calibrationMethod:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam checkConstantResponse();
    Code:
       0: aload_0
       1: getfield      #664                // Field checkConstantResponse:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam modelId();
    Code:
       0: aload_0
       1: getfield      #667                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nfolds();
    Code:
       0: aload_0
       1: getfield      #669                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationModels();
    Code:
       0: aload_0
       1: getfield      #671                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions();
    Code:
       0: aload_0
       1: getfield      #673                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: getfield      #675                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> distribution();
    Code:
       0: aload_0
       1: getfield      #677                // Field distribution:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> labelCol();
    Code:
       0: aload_0
       1: getfield      #679                // Field labelCol:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam weightCol();
    Code:
       0: aload_0
       1: getfield      #681                // Field weightCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam offsetCol();
    Code:
       0: aload_0
       1: getfield      #683                // Field offsetCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam foldCol();
    Code:
       0: aload_0
       1: getfield      #685                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> foldAssignment();
    Code:
       0: aload_0
       1: getfield      #687                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> categoricalEncoding();
    Code:
       0: aload_0
       1: getfield      #689                // Field categoricalEncoding:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam ignoreConstCols();
    Code:
       0: aload_0
       1: getfield      #691                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam scoreEachIteration();
    Code:
       0: aload_0
       1: getfield      #693                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam stoppingRounds();
    Code:
       0: aload_0
       1: getfield      #695                // Field stoppingRounds:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam maxRuntimeSecs();
    Code:
       0: aload_0
       1: getfield      #697                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> stoppingMetric();
    Code:
       0: aload_0
       1: getfield      #699                // Field stoppingMetric:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam stoppingTolerance();
    Code:
       0: aload_0
       1: getfield      #701                // Field stoppingTolerance:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam gainsliftBins();
    Code:
       0: aload_0
       1: getfield      #703                // Field gainsliftBins:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam customMetricFunc();
    Code:
       0: aload_0
       1: getfield      #705                // Field customMetricFunc:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir();
    Code:
       0: aload_0
       1: getfield      #707                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> aucType();
    Code:
       0: aload_0
       1: getfield      #709                // Field aucType:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$mtries_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #610                // Field mtries:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$binomialDoubleTrees_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #613                // Field binomialDoubleTrees:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$sampleRate_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #616                // Field sampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$balanceClasses_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #618                // Field balanceClasses:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$classSamplingFactors_$eq(ai.h2o.sparkling.ml.params.NullableFloatArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #621                // Field classSamplingFactors:Lai/h2o/sparkling/ml/params/NullableFloatArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$maxAfterBalanceSize_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #624                // Field maxAfterBalanceSize:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$maxConfusionMatrixSize_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #626                // Field maxConfusionMatrixSize:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$ntrees_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #628                // Field ntrees:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$maxDepth_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #630                // Field maxDepth:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$minRows_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #632                // Field minRows:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$nbins_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #634                // Field nbins:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$nbinsTopLevel_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #636                // Field nbinsTopLevel:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$nbinsCats_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #638                // Field nbinsCats:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$seed_$eq(org.apache.spark.ml.param.LongParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #641                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$buildTreeOneNode_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #643                // Field buildTreeOneNode:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$sampleRatePerClass_$eq(ai.h2o.sparkling.ml.params.NullableDoubleArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #646                // Field sampleRatePerClass:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$colSampleRatePerTree_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #648                // Field colSampleRatePerTree:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$colSampleRateChangePerLevel_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #650                // Field colSampleRateChangePerLevel:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$scoreTreeInterval_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #652                // Field scoreTreeInterval:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$minSplitImprovement_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #654                // Field minSplitImprovement:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$histogramType_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #658                // Field histogramType:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$calibrateModel_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #660                // Field calibrateModel:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$calibrationMethod_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #662                // Field calibrationMethod:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$checkConstantResponse_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #664                // Field checkConstantResponse:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$modelId_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #667                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$nfolds_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #669                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$keepCrossValidationModels_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #671                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$keepCrossValidationPredictions_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #673                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$keepCrossValidationFoldAssignment_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #675                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$distribution_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #677                // Field distribution:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$labelCol_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #679                // Field labelCol:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$weightCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #681                // Field weightCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$offsetCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #683                // Field offsetCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$foldCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #685                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$foldAssignment_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #687                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$categoricalEncoding_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #689                // Field categoricalEncoding:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$ignoreConstCols_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #691                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$scoreEachIteration_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #693                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$stoppingRounds_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #695                // Field stoppingRounds:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$maxRuntimeSecs_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #697                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$stoppingMetric_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #699                // Field stoppingMetric:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$stoppingTolerance_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #701                // Field stoppingTolerance:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$gainsliftBins_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #703                // Field gainsliftBins:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$customMetricFunc_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #705                // Field customMetricFunc:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$exportCheckpointsDir_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #707                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2ODRFParams$_setter_$aucType_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #709                // Field aucType:Lorg/apache/spark/ml/param/Param;
       5: return

  public ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols();
    Code:
       0: aload_0
       1: getfield      #769                // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasIgnoredCols$_setter_$ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #769                // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       5: return

  public ai.h2o.sparkling.ml.params.NullableDataFrameParam ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame();
    Code:
       0: aload_0
       1: getfield      #774                // Field ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame:Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$_setter_$ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame_$eq(ai.h2o.sparkling.ml.params.NullableDataFrameParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #774                // Field ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame:Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
       5: return

  public java.lang.String uid();
    Code:
       0: aload_0
       1: getfield      #778                // Field uid:Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.models.H2ODRFMOJOModel fit(org.apache.spark.sql.Dataset<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #785                // Method ai/h2o/sparkling/ml/algos/H2OTreeBasedSupervisedAlgorithm.fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OTreeBasedSupervisedMOJOModel;
       5: checkcast     #787                // class ai/h2o/sparkling/ml/models/H2ODRFMOJOModel
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithmWithFoldColumn setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #790                // Method setFoldCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: checkcast     #792                // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithmWithFoldColumn
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setOffsetCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #795                // Method setOffsetCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: checkcast     #797                // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setWeightCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #799                // Method setWeightCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: checkcast     #797                // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setLabelCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #801                // Method setLabelCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: checkcast     #797                // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OTreeBasedSupervisedAlgorithm setNtrees(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #804                // Method setNtrees:(I)Lai/h2o/sparkling/ml/params/H2ODRFParams;
       5: checkcast     #5                  // class ai/h2o/sparkling/ml/algos/H2OTreeBasedSupervisedAlgorithm
       8: areturn

  public org.apache.spark.ml.Model fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #807                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2ODRFMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #807                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2ODRFMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OAlgorithmMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #807                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2ODRFMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OSupervisedMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #807                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2ODRFMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OTreeBasedSupervisedMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #807                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2ODRFMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.algos.H2ODRF(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #778                // Field uid:Ljava/lang/String;
       5: aload_0
       6: getstatic     #817                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
       9: ldc           #15                 // class hex/tree/drf/DRFModel$DRFParameters
      11: invokevirtual #821                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      14: invokespecial #824                // Method ai/h2o/sparkling/ml/algos/H2OTreeBasedSupervisedAlgorithm."<init>":(Lscala/reflect/ClassTag;)V
      17: aload_0
      18: invokestatic  #828                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.$init$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;)V
      21: aload_0
      22: invokestatic  #831                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.$init$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)V
      25: aload_0
      26: invokestatic  #834                // InterfaceMethod ai/h2o/sparkling/ml/params/H2ODRFParams.$init$:(Lai/h2o/sparkling/ml/params/H2ODRFParams;)V
      29: aload_0
      30: invokestatic  #837                // InterfaceMethod ai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation.$init$:(Lai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation;)V
      33: return

  public ai.h2o.sparkling.ml.algos.H2ODRF();
    Code:
       0: aload_0
       1: getstatic     #843                // Field org/apache/spark/ml/util/Identifiable$.MODULE$:Lorg/apache/spark/ml/util/Identifiable$;
       4: ldc           #2                  // class ai/h2o/sparkling/ml/algos/H2ODRF
       6: invokevirtual #848                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       9: invokevirtual #852                // Method org/apache/spark/ml/util/Identifiable$.randomUID:(Ljava/lang/String;)Ljava/lang/String;
      12: invokespecial #854                // Method "<init>":(Ljava/lang/String;)V
      15: return
}
