Compiled from "H2OAlgoCommonUtils.scala"
public interface ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils extends ai.h2o.sparkling.ml.utils.EstimatorCommonUtils,ai.h2o.sparkling.backend.utils.H2OFrameLifecycle {
  public abstract scala.Option<ai.h2o.sparkling.ml.models.H2OBinaryModel> binaryModel();

  public abstract void binaryModel_$eq(scala.Option<ai.h2o.sparkling.ml.models.H2OBinaryModel>);

  public static ai.h2o.sparkling.ml.models.H2OBinaryModel getBinaryModel$(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils);
    Code:
       0: aload_0
       1: invokespecial #36                 // InterfaceMethod getBinaryModel:()Lai/h2o/sparkling/ml/models/H2OBinaryModel;
       4: areturn

  public default ai.h2o.sparkling.ml.models.H2OBinaryModel getBinaryModel();
    Code:
       0: aload_0
       1: invokeinterface #39,  1           // InterfaceMethod binaryModel:()Lscala/Option;
       6: invokevirtual #45                 // Method scala/Option.isEmpty:()Z
       9: ifeq          22
      12: new           #47                 // class java/lang/IllegalArgumentException
      15: dup
      16: ldc           #49                 // String Algorithm needs to be fit first with the `keepBinaryModels` parameter set to true in order to access binary model.
      18: invokespecial #53                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: aload_0
      23: invokeinterface #39,  1           // InterfaceMethod binaryModel:()Lscala/Option;
      28: invokevirtual #57                 // Method scala/Option.get:()Ljava/lang/Object;
      31: checkcast     #59                 // class ai/h2o/sparkling/ml/models/H2OBinaryModel
      34: areturn

  public static scala.collection.Seq getExcludedCols$(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils);
    Code:
       0: aload_0
       1: invokespecial #66                 // InterfaceMethod getExcludedCols:()Lscala/collection/Seq;
       4: areturn

  public default scala.collection.Seq<java.lang.String> getExcludedCols();
    Code:
       0: getstatic     #73                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
       3: checkcast     #75                 // class scala/collection/Seq
       6: areturn

  public static scala.collection.Seq getAdditionalCols$(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils);
    Code:
       0: aload_0
       1: invokespecial #79                 // InterfaceMethod getAdditionalCols:()Lscala/collection/Seq;
       4: areturn

  public default scala.collection.Seq<java.lang.String> getAdditionalCols();
    Code:
       0: getstatic     #73                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
       3: checkcast     #75                 // class scala/collection/Seq
       6: areturn

  public static scala.collection.Seq getAdditionalValidationCols$(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils);
    Code:
       0: aload_0
       1: invokespecial #83                 // InterfaceMethod getAdditionalValidationCols:()Lscala/collection/Seq;
       4: areturn

  public default scala.collection.Seq<java.lang.String> getAdditionalValidationCols();
    Code:
       0: getstatic     #73                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
       3: checkcast     #75                 // class scala/collection/Seq
       6: areturn

  public abstract java.lang.String[] getInputCols();

  public abstract java.lang.String[] getColumnsToCategorical();

  public static java.lang.String[] getColumnsToString$(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils);
    Code:
       0: aload_0
       1: invokespecial #91                 // InterfaceMethod getColumnsToString:()[Ljava/lang/String;
       4: areturn

  public default java.lang.String[] getColumnsToString();
    Code:
       0: getstatic     #96                 // Field scala/Array$.MODULE$:Lscala/Array$;
       3: getstatic     #101                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
       6: ldc           #103                // class java/lang/String
       8: invokevirtual #107                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      11: invokevirtual #111                // Method scala/Array$.empty:(Lscala/reflect/ClassTag;)Ljava/lang/Object;
      14: checkcast     #113                // class "[Ljava/lang/String;"
      17: areturn

  public abstract double getSplitRatio();

  public abstract ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils setInputCols(java.lang.String[]);

  public abstract org.apache.spark.sql.Dataset<org.apache.spark.sql.Row> getValidationDataFrame();

  public static scala.Tuple2 prepareDatasetForFitting$(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils, org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #128                // InterfaceMethod prepareDatasetForFitting:(Lorg/apache/spark/sql/Dataset;)Lscala/Tuple2;
       5: areturn

  public default scala.Tuple2<ai.h2o.sparkling.H2OFrame, scala.Option<ai.h2o.sparkling.H2OFrame>> prepareDatasetForFitting(org.apache.spark.sql.Dataset<?>);
    Code:
       0: aload_0
       1: invokeinterface #66,  1           // InterfaceMethod getExcludedCols:()Lscala/collection/Seq;
       6: astore_3
       7: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
      10: dup
      11: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      14: aload_0
      15: invokeinterface #137,  1          // InterfaceMethod getInputCols:()[Ljava/lang/String;
      20: checkcast     #139                // class "[Ljava/lang/Object;"
      23: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      26: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      29: invokevirtual #147                // Method scala/collection/mutable/ArrayOps$ofRef.isEmpty:()Z
      32: ifeq          80
      35: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
      38: dup
      39: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      42: aload_1
      43: invokevirtual #152                // Method org/apache/spark/sql/Dataset.columns:()[Ljava/lang/String;
      46: checkcast     #139                // class "[Ljava/lang/Object;"
      49: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      52: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      55: aload_3
      56: invokedynamic #175,  0            // InvokeDynamic #0:apply:(Lscala/collection/Seq;)Lscala/Function1;
      61: invokevirtual #179                // Method scala/collection/mutable/ArrayOps$ofRef.filter:(Lscala/Function1;)Ljava/lang/Object;
      64: checkcast     #113                // class "[Ljava/lang/String;"
      67: astore        4
      69: aload_0
      70: aload         4
      72: invokeinterface #181,  2          // InterfaceMethod setInputCols:([Ljava/lang/String;)Lai/h2o/sparkling/ml/algos/H2OAlgoCommonUtils;
      77: goto          204
      80: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
      83: dup
      84: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      87: aload_0
      88: invokeinterface #137,  1          // InterfaceMethod getInputCols:()[Ljava/lang/String;
      93: checkcast     #139                // class "[Ljava/lang/Object;"
      96: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      99: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     102: aload_1
     103: invokedynamic #189,  0            // InvokeDynamic #1:apply:(Lorg/apache/spark/sql/Dataset;)Lscala/Function1;
     108: invokevirtual #192                // Method scala/collection/mutable/ArrayOps$ofRef.filterNot:(Lscala/Function1;)Ljava/lang/Object;
     111: checkcast     #113                // class "[Ljava/lang/String;"
     114: astore        5
     116: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
     119: dup
     120: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     123: aload         5
     125: checkcast     #139                // class "[Ljava/lang/Object;"
     128: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     131: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     134: invokevirtual #195                // Method scala/collection/mutable/ArrayOps$ofRef.nonEmpty:()Z
     137: ifeq          201
     140: new           #47                 // class java/lang/IllegalArgumentException
     143: dup
     144: new           #197                // class java/lang/StringBuilder
     147: dup
     148: ldc           #198                // int 75
     150: invokespecial #201                // Method java/lang/StringBuilder."<init>":(I)V
     153: ldc           #203                // String The following feature columns are not available on
     155: invokevirtual #207                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     158: ldc           #209                // String  the training dataset: \'
     160: invokevirtual #207                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     163: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
     166: dup
     167: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     170: aload         5
     172: checkcast     #139                // class "[Ljava/lang/Object;"
     175: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     178: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     181: ldc           #211                // String ,
     183: invokevirtual #215                // Method scala/collection/mutable/ArrayOps$ofRef.mkString:(Ljava/lang/String;)Ljava/lang/String;
     186: invokevirtual #207                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     189: ldc           #217                // String \'
     191: invokevirtual #207                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     194: invokevirtual #221                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     197: invokespecial #53                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     200: athrow
     201: getstatic     #227                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
     204: pop
     205: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
     208: dup
     209: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     212: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
     215: dup
     216: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     219: aload_0
     220: invokeinterface #137,  1          // InterfaceMethod getInputCols:()[Ljava/lang/String;
     225: checkcast     #139                // class "[Ljava/lang/Object;"
     228: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     231: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     234: aload_0
     235: invokedynamic #236,  0            // InvokeDynamic #2:apply:(Lai/h2o/sparkling/ml/algos/H2OAlgoCommonUtils;)Lscala/Function1;
     240: getstatic     #96                 // Field scala/Array$.MODULE$:Lscala/Array$;
     243: getstatic     #101                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     246: ldc           #103                // class java/lang/String
     248: invokevirtual #107                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
     251: invokevirtual #240                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
     254: invokevirtual #244                // Method scala/collection/mutable/ArrayOps$ofRef.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     257: checkcast     #139                // class "[Ljava/lang/Object;"
     260: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     263: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     266: invokedynamic #253,  0            // InvokeDynamic #3:apply:()Lscala/Function1;
     271: getstatic     #96                 // Field scala/Array$.MODULE$:Lscala/Array$;
     274: getstatic     #101                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     277: ldc           #255                // class org/apache/spark/sql/Column
     279: invokevirtual #107                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
     282: invokevirtual #240                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
     285: invokevirtual #244                // Method scala/collection/mutable/ArrayOps$ofRef.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     288: checkcast     #257                // class "[Lorg/apache/spark/sql/Column;"
     291: astore        6
     293: aload_3
     294: aload_0
     295: invokedynamic #262,  0            // InvokeDynamic #4:apply:(Lai/h2o/sparkling/ml/algos/H2OAlgoCommonUtils;)Lscala/Function1;
     300: getstatic     #267                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
     303: invokevirtual #270                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
     306: invokeinterface #271,  3          // InterfaceMethod scala/collection/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     311: checkcast     #273                // class scala/collection/TraversableLike
     314: invokedynamic #278,  0            // InvokeDynamic #5:apply:()Lscala/Function1;
     319: getstatic     #267                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
     322: invokevirtual #270                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
     325: invokeinterface #279,  3          // InterfaceMethod scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     330: checkcast     #75                 // class scala/collection/Seq
     333: astore        7
     335: aload_0
     336: invokeinterface #79,  1           // InterfaceMethod getAdditionalCols:()Lscala/collection/Seq;
     341: aload_0
     342: invokedynamic #284,  0            // InvokeDynamic #6:apply:(Lai/h2o/sparkling/ml/algos/H2OAlgoCommonUtils;)Lscala/Function1;
     347: getstatic     #267                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
     350: invokevirtual #270                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
     353: invokeinterface #271,  3          // InterfaceMethod scala/collection/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     358: checkcast     #273                // class scala/collection/TraversableLike
     361: invokedynamic #289,  0            // InvokeDynamic #7:apply:()Lscala/Function1;
     366: getstatic     #267                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
     369: invokevirtual #270                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
     372: invokeinterface #279,  3          // InterfaceMethod scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     377: checkcast     #75                 // class scala/collection/Seq
     380: astore        8
     382: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
     385: dup
     386: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     389: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
     392: dup
     393: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     396: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
     399: dup
     400: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     403: aload         6
     405: checkcast     #139                // class "[Ljava/lang/Object;"
     408: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     411: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     414: aload         7
     416: getstatic     #96                 // Field scala/Array$.MODULE$:Lscala/Array$;
     419: getstatic     #101                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     422: ldc           #255                // class org/apache/spark/sql/Column
     424: invokevirtual #107                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
     427: invokevirtual #240                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
     430: invokevirtual #293                // Method scala/collection/mutable/ArrayOps$ofRef.$plus$plus:(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     433: checkcast     #139                // class "[Ljava/lang/Object;"
     436: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     439: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     442: aload         8
     444: getstatic     #96                 // Field scala/Array$.MODULE$:Lscala/Array$;
     447: getstatic     #101                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     450: ldc           #255                // class org/apache/spark/sql/Column
     452: invokevirtual #107                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
     455: invokevirtual #240                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
     458: invokevirtual #293                // Method scala/collection/mutable/ArrayOps$ofRef.$plus$plus:(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     461: checkcast     #139                // class "[Ljava/lang/Object;"
     464: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     467: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     470: invokevirtual #296                // Method scala/collection/mutable/ArrayOps$ofRef.distinct:()Ljava/lang/Object;
     473: checkcast     #257                // class "[Lorg/apache/spark/sql/Column;"
     476: astore        9
     478: getstatic     #301                // Field ai/h2o/sparkling/H2OContext$.MODULE$:Lai/h2o/sparkling/H2OContext$;
     481: invokedynamic #310,  0            // InvokeDynamic #8:apply:()Lscala/Function0;
     486: invokevirtual #314                // Method ai/h2o/sparkling/H2OContext$.ensure:(Lscala/Function0;)Lai/h2o/sparkling/H2OContext;
     489: astore        10
     491: aload         10
     493: aload_1
     494: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     497: aload         9
     499: checkcast     #139                // class "[Ljava/lang/Object;"
     502: invokevirtual #318                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     505: invokevirtual #322                // Method org/apache/spark/sql/Dataset.select:(Lscala/collection/Seq;)Lorg/apache/spark/sql/Dataset;
     508: invokevirtual #325                // Method org/apache/spark/sql/Dataset.toDF:()Lorg/apache/spark/sql/Dataset;
     511: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     514: aload_0
     515: invokeinterface #137,  1          // InterfaceMethod getInputCols:()[Ljava/lang/String;
     520: checkcast     #139                // class "[Ljava/lang/Object;"
     523: invokevirtual #318                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     526: invokevirtual #331                // Method ai/h2o/sparkling/H2OContext.asH2OFrame:(Lorg/apache/spark/sql/Dataset;Lscala/collection/Seq;)Lai/h2o/sparkling/H2OFrame;
     529: astore        11
     531: aload         11
     533: aload_0
     534: invokeinterface #91,  1           // InterfaceMethod getColumnsToString:()[Ljava/lang/String;
     539: invokevirtual #337                // Method ai/h2o/sparkling/H2OFrame.convertColumnsToStrings:([Ljava/lang/String;)Lai/h2o/sparkling/H2OFrame;
     542: pop
     543: aload         11
     545: aload_0
     546: invokeinterface #339,  1          // InterfaceMethod getColumnsToCategorical:()[Ljava/lang/String;
     551: invokevirtual #342                // Method ai/h2o/sparkling/H2OFrame.convertColumnsToCategorical:([Ljava/lang/String;)Lai/h2o/sparkling/H2OFrame;
     554: pop
     555: aload_0
     556: invokeinterface #344,  1          // InterfaceMethod getValidationDataFrame:()Lorg/apache/spark/sql/Dataset;
     561: astore        12
     563: aload         12
     565: ifnull        720
     568: aload_0
     569: invokeinterface #83,  1           // InterfaceMethod getAdditionalValidationCols:()Lscala/collection/Seq;
     574: aload_0
     575: invokedynamic #349,  0            // InvokeDynamic #9:apply:(Lai/h2o/sparkling/ml/algos/H2OAlgoCommonUtils;)Lscala/Function1;
     580: getstatic     #267                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
     583: invokevirtual #270                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
     586: invokeinterface #271,  3          // InterfaceMethod scala/collection/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     591: checkcast     #273                // class scala/collection/TraversableLike
     594: invokedynamic #354,  0            // InvokeDynamic #10:apply:()Lscala/Function1;
     599: getstatic     #267                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
     602: invokevirtual #270                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
     605: invokeinterface #279,  3          // InterfaceMethod scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     610: checkcast     #75                 // class scala/collection/Seq
     613: astore        15
     615: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
     618: dup
     619: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     622: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
     625: dup
     626: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     629: aload         9
     631: checkcast     #139                // class "[Ljava/lang/Object;"
     634: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     637: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     640: aload         15
     642: getstatic     #96                 // Field scala/Array$.MODULE$:Lscala/Array$;
     645: getstatic     #101                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     648: ldc           #255                // class org/apache/spark/sql/Column
     650: invokevirtual #107                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
     653: invokevirtual #240                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
     656: invokevirtual #293                // Method scala/collection/mutable/ArrayOps$ofRef.$plus$plus:(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     659: checkcast     #139                // class "[Ljava/lang/Object;"
     662: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     665: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     668: invokevirtual #296                // Method scala/collection/mutable/ArrayOps$ofRef.distinct:()Ljava/lang/Object;
     671: checkcast     #257                // class "[Lorg/apache/spark/sql/Column;"
     674: astore        16
     676: aload         10
     678: aload         12
     680: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     683: aload         16
     685: checkcast     #139                // class "[Ljava/lang/Object;"
     688: invokevirtual #318                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     691: invokevirtual #322                // Method org/apache/spark/sql/Dataset.select:(Lscala/collection/Seq;)Lorg/apache/spark/sql/Dataset;
     694: invokevirtual #357                // Method ai/h2o/sparkling/H2OContext.asH2OFrame:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/H2OFrame;
     697: astore        17
     699: new           #359                // class scala/Tuple2
     702: dup
     703: aload         11
     705: new           #361                // class scala/Some
     708: dup
     709: aload         17
     711: invokespecial #364                // Method scala/Some."<init>":(Ljava/lang/Object;)V
     714: invokespecial #367                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     717: goto          817
     720: aload_0
     721: invokeinterface #369,  1          // InterfaceMethod getSplitRatio:()D
     726: dconst_1
     727: dcmpg
     728: ifge          805
     731: aload         11
     733: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     736: iconst_1
     737: newarray       double
     739: dup
     740: iconst_0
     741: aload_0
     742: invokeinterface #369,  1          // InterfaceMethod getSplitRatio:()D
     747: dastore
     748: invokevirtual #373                // Method scala/Predef$.wrapDoubleArray:([D)Lscala/collection/mutable/WrappedArray;
     751: invokevirtual #377                // Method ai/h2o/sparkling/H2OFrame.split:(Lscala/collection/Seq;)[Lai/h2o/sparkling/H2OFrame;
     754: astore        18
     756: aload         18
     758: arraylength
     759: iconst_1
     760: if_icmple     788
     763: new           #359                // class scala/Tuple2
     766: dup
     767: aload         18
     769: iconst_0
     770: aaload
     771: new           #361                // class scala/Some
     774: dup
     775: aload         18
     777: iconst_1
     778: aaload
     779: invokespecial #364                // Method scala/Some."<init>":(Ljava/lang/Object;)V
     782: invokespecial #367                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     785: goto          802
     788: new           #359                // class scala/Tuple2
     791: dup
     792: aload         18
     794: iconst_0
     795: aaload
     796: getstatic     #382                // Field scala/None$.MODULE$:Lscala/None$;
     799: invokespecial #367                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     802: goto          817
     805: new           #359                // class scala/Tuple2
     808: dup
     809: aload         11
     811: getstatic     #382                // Field scala/None$.MODULE$:Lscala/None$;
     814: invokespecial #367                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     817: astore        14
     819: aload         14
     821: ifnull        859
     824: aload         14
     826: invokevirtual #385                // Method scala/Tuple2._1:()Ljava/lang/Object;
     829: checkcast     #333                // class ai/h2o/sparkling/H2OFrame
     832: astore        19
     834: aload         14
     836: invokevirtual #388                // Method scala/Tuple2._2:()Ljava/lang/Object;
     839: checkcast     #41                 // class scala/Option
     842: astore        20
     844: new           #359                // class scala/Tuple2
     847: dup
     848: aload         19
     850: aload         20
     852: invokespecial #367                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     855: astore_2
     856: goto          872
     859: goto          862
     862: new           #390                // class scala/MatchError
     865: dup
     866: aload         14
     868: invokespecial #391                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     871: athrow
     872: aload_2
     873: astore        13
     875: aload         13
     877: invokevirtual #385                // Method scala/Tuple2._1:()Ljava/lang/Object;
     880: checkcast     #333                // class ai/h2o/sparkling/H2OFrame
     883: astore        21
     885: aload         13
     887: invokevirtual #388                // Method scala/Tuple2._2:()Ljava/lang/Object;
     890: checkcast     #41                 // class scala/Option
     893: astore        22
     895: aload_0
     896: aload         21
     898: invokeinterface #395,  2          // InterfaceMethod registerH2OFrameForDeletion:(Lai/h2o/sparkling/H2OFrame;)V
     903: aload_0
     904: aload         22
     906: invokeinterface #397,  2          // InterfaceMethod registerH2OFrameForDeletion:(Lscala/Option;)V
     911: new           #359                // class scala/Tuple2
     914: dup
     915: aload         21
     917: aload         22
     919: invokespecial #367                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     922: areturn

  public static java.lang.String sanitize$(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #423                // InterfaceMethod sanitize:(Ljava/lang/String;)Ljava/lang/String;
       5: areturn

  public default java.lang.String sanitize(java.lang.String);
    Code:
       0: new           #197                // class java/lang/StringBuilder
       3: dup
       4: ldc_w         #425                // int 11
       7: invokespecial #201                // Method java/lang/StringBuilder."<init>":(I)V
      10: bipush        96
      12: invokevirtual #428                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      15: aload_1
      16: invokevirtual #207                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: bipush        96
      21: invokevirtual #428                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      24: invokevirtual #221                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  public static boolean $anonfun$prepareDatasetForFitting$2(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #436                // Method java/lang/String.compareToIgnoreCase:(Ljava/lang/String;)I
       5: iconst_0
       6: if_icmpeq     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public static boolean $anonfun$prepareDatasetForFitting$1(scala.collection.Seq, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #448,  0            // InvokeDynamic #11:apply:(Ljava/lang/String;)Lscala/Function1;
       7: invokeinterface #452,  2          // InterfaceMethod scala/collection/Seq.forall:(Lscala/Function1;)Z
      12: ireturn

  public static boolean $anonfun$prepareDatasetForFitting$3(org.apache.spark.sql.Dataset, java.lang.String);
    Code:
       0: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
       3: dup
       4: getstatic     #135                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: aload_0
       8: invokevirtual #152                // Method org/apache/spark/sql/Dataset.columns:()[Ljava/lang/String;
      11: checkcast     #139                // class "[Ljava/lang/Object;"
      14: invokevirtual #143                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      17: invokespecial #146                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      20: aload_1
      21: invokevirtual #460                // Method scala/collection/mutable/ArrayOps$ofRef.contains:(Ljava/lang/Object;)Z
      24: ireturn

  public static java.lang.String $anonfun$prepareDatasetForFitting$4(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #423,  2          // InterfaceMethod sanitize:(Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public static org.apache.spark.sql.Column $anonfun$prepareDatasetForFitting$5(java.lang.String);
    Code:
       0: getstatic     #465                // Field org/apache/spark/sql/functions$.MODULE$:Lorg/apache/spark/sql/functions$;
       3: aload_0
       4: invokevirtual #467                // Method org/apache/spark/sql/functions$.col:(Ljava/lang/String;)Lorg/apache/spark/sql/Column;
       7: areturn

  public static java.lang.String $anonfun$prepareDatasetForFitting$6(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #423,  2          // InterfaceMethod sanitize:(Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public static org.apache.spark.sql.Column $anonfun$prepareDatasetForFitting$7(java.lang.String);
    Code:
       0: getstatic     #465                // Field org/apache/spark/sql/functions$.MODULE$:Lorg/apache/spark/sql/functions$;
       3: aload_0
       4: invokevirtual #467                // Method org/apache/spark/sql/functions$.col:(Ljava/lang/String;)Lorg/apache/spark/sql/Column;
       7: areturn

  public static java.lang.String $anonfun$prepareDatasetForFitting$8(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #423,  2          // InterfaceMethod sanitize:(Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public static org.apache.spark.sql.Column $anonfun$prepareDatasetForFitting$9(java.lang.String);
    Code:
       0: getstatic     #465                // Field org/apache/spark/sql/functions$.MODULE$:Lorg/apache/spark/sql/functions$;
       3: aload_0
       4: invokevirtual #467                // Method org/apache/spark/sql/functions$.col:(Ljava/lang/String;)Lorg/apache/spark/sql/Column;
       7: areturn

  public static java.lang.String $anonfun$prepareDatasetForFitting$10();
    Code:
       0: ldc_w         #469                // String H2OContext needs to be created in order to train the model. Please create one as H2OContext.getOrCreate().
       3: areturn

  public static java.lang.String $anonfun$prepareDatasetForFitting$11(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #423,  2          // InterfaceMethod sanitize:(Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public static org.apache.spark.sql.Column $anonfun$prepareDatasetForFitting$12(java.lang.String);
    Code:
       0: getstatic     #465                // Field org/apache/spark/sql/functions$.MODULE$:Lorg/apache/spark/sql/functions$;
       3: aload_0
       4: invokevirtual #467                // Method org/apache/spark/sql/functions$.col:(Ljava/lang/String;)Lorg/apache/spark/sql/Column;
       7: areturn

  public static void $init$(ai.h2o.sparkling.ml.algos.H2OAlgoCommonUtils);
    Code:
       0: aload_0
       1: getstatic     #382                // Field scala/None$.MODULE$:Lscala/None$;
       4: invokeinterface #473,  2          // InterfaceMethod binaryModel_$eq:(Lscala/Option;)V
       9: return

  public static java.lang.Object $anonfun$prepareDatasetForFitting$1$adapted(scala.collection.Seq, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #475                // InterfaceMethod $anonfun$prepareDatasetForFitting$1:(Lscala/collection/Seq;Ljava/lang/String;)Z
       5: invokestatic  #481                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       8: areturn

  public static java.lang.Object $anonfun$prepareDatasetForFitting$3$adapted(org.apache.spark.sql.Dataset, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #483                // InterfaceMethod $anonfun$prepareDatasetForFitting$3:(Lorg/apache/spark/sql/Dataset;Ljava/lang/String;)Z
       5: invokestatic  #481                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       8: areturn

  public static java.lang.Object $anonfun$prepareDatasetForFitting$2$adapted(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #485                // InterfaceMethod $anonfun$prepareDatasetForFitting$2:(Ljava/lang/String;Ljava/lang/String;)Z
       5: invokestatic  #481                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       8: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #497,  0            // InvokeDynamic #12:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
