Compiled from "HasBinaryModel.scala"
public interface ai.h2o.sparkling.ml.models.HasBinaryModel {
  public abstract scala.Option<java.lang.String> ai$h2o$sparkling$ml$models$HasBinaryModel$$binaryModelFileName();

  public abstract void ai$h2o$sparkling$ml$models$HasBinaryModel$$binaryModelFileName_$eq(scala.Option<java.lang.String>);

  public static ai.h2o.sparkling.ml.models.HasBinaryModel setBinaryModel$(ai.h2o.sparkling.ml.models.HasBinaryModel, java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #28                 // InterfaceMethod setBinaryModel:(Ljava/io/InputStream;)Lai/h2o/sparkling/ml/models/HasBinaryModel;
       5: areturn

  public default ai.h2o.sparkling.ml.models.HasBinaryModel setBinaryModel(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #32                 // String binaryModel
       4: invokeinterface #35,  3           // InterfaceMethod setBinaryModel:(Ljava/io/InputStream;Ljava/lang/String;)Lai/h2o/sparkling/ml/models/HasBinaryModel;
       9: areturn

  public static ai.h2o.sparkling.ml.models.HasBinaryModel setBinaryModel$(ai.h2o.sparkling.ml.models.HasBinaryModel, java.io.InputStream, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #35                 // InterfaceMethod setBinaryModel:(Ljava/io/InputStream;Ljava/lang/String;)Lai/h2o/sparkling/ml/models/HasBinaryModel;
       6: areturn

  public default ai.h2o.sparkling.ml.models.HasBinaryModel setBinaryModel(java.io.InputStream, java.lang.String);
    Code:
       0: getstatic     #45                 // Field ai/h2o/sparkling/utils/SparkSessionUtils$.MODULE$:Lai/h2o/sparkling/utils/SparkSessionUtils$;
       3: aload_1
       4: aload_2
       5: ldc           #47                 // String .bin
       7: invokevirtual #51                 // Method ai/h2o/sparkling/utils/SparkSessionUtils$.inputStreamToTempFile:(Ljava/io/InputStream;Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;
      10: astore_3
      11: aload_0
      12: aload_3
      13: invokeinterface #54,  2           // InterfaceMethod setBinaryModel:(Ljava/io/File;)Lai/h2o/sparkling/ml/models/HasBinaryModel;
      18: pop
      19: aload_0
      20: areturn

  public static ai.h2o.sparkling.ml.models.HasBinaryModel setBinaryModel$(ai.h2o.sparkling.ml.models.HasBinaryModel, java.io.File);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #54                 // InterfaceMethod setBinaryModel:(Ljava/io/File;)Lai/h2o/sparkling/ml/models/HasBinaryModel;
       5: areturn

  public default ai.h2o.sparkling.ml.models.HasBinaryModel setBinaryModel(java.io.File);
    Code:
       0: getstatic     #45                 // Field ai/h2o/sparkling/utils/SparkSessionUtils$.MODULE$:Lai/h2o/sparkling/utils/SparkSessionUtils$;
       3: invokevirtual #61                 // Method ai/h2o/sparkling/utils/SparkSessionUtils$.active:()Lorg/apache/spark/sql/SparkSession;
       6: astore_2
       7: aload_0
       8: new           #63                 // class scala/Some
      11: dup
      12: aload_1
      13: invokevirtual #69                 // Method java/io/File.getName:()Ljava/lang/String;
      16: invokespecial #73                 // Method scala/Some."<init>":(Ljava/lang/Object;)V
      19: invokeinterface #75,  2           // InterfaceMethod ai$h2o$sparkling$ml$models$HasBinaryModel$$binaryModelFileName_$eq:(Lscala/Option;)V
      24: aload_0
      25: invokeinterface #78,  1           // InterfaceMethod getBinaryModel:()Lscala/Option;
      30: invokevirtual #84                 // Method scala/Option.isDefined:()Z
      33: ifeq          77
      36: aload_0
      37: invokeinterface #78,  1           // InterfaceMethod getBinaryModel:()Lscala/Option;
      42: invokevirtual #88                 // Method scala/Option.get:()Ljava/lang/Object;
      45: checkcast     #65                 // class java/io/File
      48: invokevirtual #91                 // Method java/io/File.exists:()Z
      51: ifeq          77
      54: getstatic     #96                 // Field ai/h2o/sparkling/utils/ScalaUtils$.MODULE$:Lai/h2o/sparkling/utils/ScalaUtils$;
      57: new           #98                 // class java/io/FileInputStream
      60: dup
      61: aload_1
      62: invokespecial #101                // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      65: aload_0
      66: invokedynamic #125,  0            // InvokeDynamic #0:apply:(Lai/h2o/sparkling/ml/models/HasBinaryModel;)Lscala/Function1;
      71: invokevirtual #129                // Method ai/h2o/sparkling/utils/ScalaUtils$.withResource:(Ljava/lang/AutoCloseable;Lscala/Function1;)Ljava/lang/Object;
      74: goto          91
      77: aload_2
      78: invokevirtual #135                // Method org/apache/spark/sql/SparkSession.sparkContext:()Lorg/apache/spark/SparkContext;
      81: aload_1
      82: invokevirtual #138                // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      85: invokevirtual #144                // Method org/apache/spark/SparkContext.addFile:(Ljava/lang/String;)V
      88: getstatic     #150                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      91: pop
      92: aload_0
      93: areturn

  public static scala.Option getBinaryModel$(ai.h2o.sparkling.ml.models.HasBinaryModel);
    Code:
       0: aload_0
       1: invokespecial #78                 // InterfaceMethod getBinaryModel:()Lscala/Option;
       4: areturn

  public default scala.Option<java.io.File> getBinaryModel();
    Code:
       0: aload_0
       1: invokeinterface #157,  1          // InterfaceMethod ai$h2o$sparkling$ml$models$HasBinaryModel$$binaryModelFileName:()Lscala/Option;
       6: invokedynamic #166,  0            // InvokeDynamic #1:apply:()Lscala/Function1;
      11: invokevirtual #170                // Method scala/Option.map:(Lscala/Function1;)Lscala/Option;
      14: areturn

  public static ai.h2o.sparkling.ml.models.HasBinaryModel $anonfun$setBinaryModel$1(ai.h2o.sparkling.ml.models.HasBinaryModel, java.io.FileInputStream);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: invokeinterface #157,  1          // InterfaceMethod ai$h2o$sparkling$ml$models$HasBinaryModel$$binaryModelFileName:()Lscala/Option;
       8: invokevirtual #88                 // Method scala/Option.get:()Ljava/lang/Object;
      11: checkcast     #173                // class java/lang/String
      14: invokeinterface #35,  3           // InterfaceMethod setBinaryModel:(Ljava/io/InputStream;Ljava/lang/String;)Lai/h2o/sparkling/ml/models/HasBinaryModel;
      19: areturn

  public static java.io.File $anonfun$getBinaryModel$1(java.lang.String);
    Code:
       0: new           #65                 // class java/io/File
       3: dup
       4: getstatic     #180                // Field org/apache/spark/SparkFiles$.MODULE$:Lorg/apache/spark/SparkFiles$;
       7: aload_0
       8: invokevirtual #183                // Method org/apache/spark/SparkFiles$.get:(Ljava/lang/String;)Ljava/lang/String;
      11: invokespecial #185                // Method java/io/File."<init>":(Ljava/lang/String;)V
      14: areturn

  public static void $init$(ai.h2o.sparkling.ml.models.HasBinaryModel);
    Code:
       0: aload_0
       1: getstatic     #192                // Field scala/None$.MODULE$:Lscala/None$;
       4: invokeinterface #75,  2           // InterfaceMethod ai$h2o$sparkling$ml$models$HasBinaryModel$$binaryModelFileName_$eq:(Lscala/Option;)V
       9: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #204,  0            // InvokeDynamic #2:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
