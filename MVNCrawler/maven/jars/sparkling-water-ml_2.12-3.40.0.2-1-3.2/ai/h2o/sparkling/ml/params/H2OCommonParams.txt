Compiled from "H2OCommonParams.scala"
public interface ai.h2o.sparkling.ml.params.H2OCommonParams extends ai.h2o.sparkling.ml.params.H2OBaseMOJOParams {
  public abstract void ai$h2o$sparkling$ml$params$H2OCommonParams$_setter_$validationDataFrame_$eq(ai.h2o.sparkling.ml.params.NonSerializableNullableDataFrameParam);

  public abstract void ai$h2o$sparkling$ml$params$H2OCommonParams$_setter_$splitRatio_$eq(org.apache.spark.ml.param.DoubleParam);

  public abstract void ai$h2o$sparkling$ml$params$H2OCommonParams$_setter_$columnsToCategorical_$eq(org.apache.spark.ml.param.StringArrayParam);

  public abstract void ai$h2o$sparkling$ml$params$H2OCommonParams$_setter_$keepBinaryModels_$eq(org.apache.spark.ml.param.BooleanParam);

  public abstract ai.h2o.sparkling.ml.params.NonSerializableNullableDataFrameParam validationDataFrame();

  public abstract org.apache.spark.ml.param.DoubleParam splitRatio();

  public abstract org.apache.spark.ml.param.StringArrayParam columnsToCategorical();

  public abstract org.apache.spark.ml.param.BooleanParam keepBinaryModels();

  public static org.apache.spark.sql.Dataset getValidationDataFrame$(ai.h2o.sparkling.ml.params.H2OCommonParams);
    Code:
       0: aload_0
       1: invokespecial #44                 // InterfaceMethod getValidationDataFrame:()Lorg/apache/spark/sql/Dataset;
       4: areturn

  public default org.apache.spark.sql.Dataset<org.apache.spark.sql.Row> getValidationDataFrame();
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #48,  1           // InterfaceMethod validationDataFrame:()Lai/h2o/sparkling/ml/params/NonSerializableNullableDataFrameParam;
       7: invokeinterface #52,  2           // InterfaceMethod $:(Lorg/apache/spark/ml/param/Param;)Ljava/lang/Object;
      12: checkcast     #54                 // class org/apache/spark/sql/Dataset
      15: areturn

  public static double getSplitRatio$(ai.h2o.sparkling.ml.params.H2OCommonParams);
    Code:
       0: aload_0
       1: invokespecial #61                 // InterfaceMethod getSplitRatio:()D
       4: dreturn

  public default double getSplitRatio();
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #63,  1           // InterfaceMethod splitRatio:()Lorg/apache/spark/ml/param/DoubleParam;
       7: invokeinterface #52,  2           // InterfaceMethod $:(Lorg/apache/spark/ml/param/Param;)Ljava/lang/Object;
      12: invokestatic  #69                 // Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
      15: dreturn

  public static java.lang.String[] getColumnsToCategorical$(ai.h2o.sparkling.ml.params.H2OCommonParams);
    Code:
       0: aload_0
       1: invokespecial #75                 // InterfaceMethod getColumnsToCategorical:()[Ljava/lang/String;
       4: areturn

  public default java.lang.String[] getColumnsToCategorical();
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #77,  1           // InterfaceMethod columnsToCategorical:()Lorg/apache/spark/ml/param/StringArrayParam;
       7: invokeinterface #52,  2           // InterfaceMethod $:(Lorg/apache/spark/ml/param/Param;)Ljava/lang/Object;
      12: checkcast     #79                 // class "[Ljava/lang/String;"
      15: areturn

  public static boolean getKeepBinaryModels$(ai.h2o.sparkling.ml.params.H2OCommonParams);
    Code:
       0: aload_0
       1: invokespecial #85                 // InterfaceMethod getKeepBinaryModels:()Z
       4: ireturn

  public default boolean getKeepBinaryModels();
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #87,  1           // InterfaceMethod keepBinaryModels:()Lorg/apache/spark/ml/param/BooleanParam;
       7: invokeinterface #52,  2           // InterfaceMethod $:(Lorg/apache/spark/ml/param/Param;)Ljava/lang/Object;
      12: invokestatic  #91                 // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
      15: ireturn

  public static ai.h2o.sparkling.ml.params.H2OCommonParams setValidationDataFrame$(ai.h2o.sparkling.ml.params.H2OCommonParams, org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #98                 // InterfaceMethod setValidationDataFrame:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/params/H2OCommonParams;
       5: areturn

  public default ai.h2o.sparkling.ml.params.H2OCommonParams setValidationDataFrame(org.apache.spark.sql.Dataset<org.apache.spark.sql.Row>);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #48,  1           // InterfaceMethod validationDataFrame:()Lai/h2o/sparkling/ml/params/NonSerializableNullableDataFrameParam;
       7: aload_1
       8: invokeinterface #104,  3          // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      13: checkcast     #2                  // class ai/h2o/sparkling/ml/params/H2OCommonParams
      16: areturn

  public static ai.h2o.sparkling.ml.params.H2OCommonParams setSplitRatio$(ai.h2o.sparkling.ml.params.H2OCommonParams, double);
    Code:
       0: aload_0
       1: dload_1
       2: invokespecial #111                // InterfaceMethod setSplitRatio:(D)Lai/h2o/sparkling/ml/params/H2OCommonParams;
       5: areturn

  public default ai.h2o.sparkling.ml.params.H2OCommonParams setSplitRatio(double);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #63,  1           // InterfaceMethod splitRatio:()Lorg/apache/spark/ml/param/DoubleParam;
       7: dload_1
       8: invokestatic  #116                // Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
      11: invokeinterface #104,  3          // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      16: checkcast     #2                  // class ai/h2o/sparkling/ml/params/H2OCommonParams
      19: areturn

  public static ai.h2o.sparkling.ml.params.H2OCommonParams setColumnsToCategorical$(ai.h2o.sparkling.ml.params.H2OCommonParams, java.lang.String, scala.collection.Seq);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #124                // InterfaceMethod setColumnsToCategorical:(Ljava/lang/String;Lscala/collection/Seq;)Lai/h2o/sparkling/ml/params/H2OCommonParams;
       6: areturn

  public default ai.h2o.sparkling.ml.params.H2OCommonParams setColumnsToCategorical(java.lang.String, scala.collection.Seq<java.lang.String>);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #77,  1           // InterfaceMethod columnsToCategorical:()Lorg/apache/spark/ml/param/StringArrayParam;
       7: new           #17                 // class scala/collection/mutable/ArrayOps$ofRef
      10: dup
      11: getstatic     #133                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      14: iconst_1
      15: anewarray     #135                // class java/lang/String
      18: dup
      19: iconst_0
      20: aload_1
      21: aastore
      22: checkcast     #137                // class "[Ljava/lang/Object;"
      25: checkcast     #137                // class "[Ljava/lang/Object;"
      28: invokevirtual #141                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      31: invokespecial #145                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      34: aload_2
      35: getstatic     #150                // Field scala/Array$.MODULE$:Lscala/Array$;
      38: getstatic     #155                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      41: ldc           #135                // class java/lang/String
      43: invokevirtual #159                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      46: invokevirtual #163                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
      49: invokevirtual #167                // Method scala/collection/mutable/ArrayOps$ofRef.$plus$plus:(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      52: invokeinterface #104,  3          // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      57: checkcast     #2                  // class ai/h2o/sparkling/ml/params/H2OCommonParams
      60: areturn

  public static ai.h2o.sparkling.ml.params.H2OCommonParams setColumnsToCategorical$(ai.h2o.sparkling.ml.params.H2OCommonParams, java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #172                // InterfaceMethod setColumnsToCategorical:([Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OCommonParams;
       5: areturn

  public default ai.h2o.sparkling.ml.params.H2OCommonParams setColumnsToCategorical(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #77,  1           // InterfaceMethod columnsToCategorical:()Lorg/apache/spark/ml/param/StringArrayParam;
       7: aload_1
       8: invokeinterface #104,  3          // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      13: checkcast     #2                  // class ai/h2o/sparkling/ml/params/H2OCommonParams
      16: areturn

  public static ai.h2o.sparkling.ml.params.H2OCommonParams setColumnsToCategorical$(ai.h2o.sparkling.ml.params.H2OCommonParams, java.util.ArrayList);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #177                // InterfaceMethod setColumnsToCategorical:(Ljava/util/ArrayList;)Lai/h2o/sparkling/ml/params/H2OCommonParams;
       5: areturn

  public default ai.h2o.sparkling.ml.params.H2OCommonParams setColumnsToCategorical(java.util.ArrayList<java.lang.String>);
    Code:
       0: aload_0
       1: getstatic     #184                // Field scala/collection/JavaConverters$.MODULE$:Lscala/collection/JavaConverters$;
       4: aload_1
       5: invokevirtual #188                // Method scala/collection/JavaConverters$.asScalaBufferConverter:(Ljava/util/List;)Lscala/collection/convert/Decorators$AsScala;
       8: invokevirtual #192                // Method scala/collection/convert/Decorators$AsScala.asScala:()Ljava/lang/Object;
      11: checkcast     #194                // class scala/collection/TraversableOnce
      14: getstatic     #155                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      17: ldc           #135                // class java/lang/String
      19: invokevirtual #159                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      22: invokeinterface #198,  2          // InterfaceMethod scala/collection/TraversableOnce.toArray:(Lscala/reflect/ClassTag;)Ljava/lang/Object;
      27: checkcast     #79                 // class "[Ljava/lang/String;"
      30: invokeinterface #172,  2          // InterfaceMethod setColumnsToCategorical:([Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OCommonParams;
      35: areturn

  public static ai.h2o.sparkling.ml.params.H2OCommonParams setConvertUnknownCategoricalLevelsToNa$(ai.h2o.sparkling.ml.params.H2OCommonParams, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #205                // InterfaceMethod setConvertUnknownCategoricalLevelsToNa:(Z)Lai/h2o/sparkling/ml/params/H2OCommonParams;
       5: areturn

  public default ai.h2o.sparkling.ml.params.H2OCommonParams setConvertUnknownCategoricalLevelsToNa(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #209,  1          // InterfaceMethod convertUnknownCategoricalLevelsToNa:()Lorg/apache/spark/ml/param/BooleanParam;
       7: iload_1
       8: invokestatic  #213                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      11: invokeinterface #104,  3          // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      16: checkcast     #2                  // class ai/h2o/sparkling/ml/params/H2OCommonParams
      19: areturn

  public static ai.h2o.sparkling.ml.params.H2OCommonParams setConvertInvalidNumbersToNa$(ai.h2o.sparkling.ml.params.H2OCommonParams, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #217                // InterfaceMethod setConvertInvalidNumbersToNa:(Z)Lai/h2o/sparkling/ml/params/H2OCommonParams;
       5: areturn

  public default ai.h2o.sparkling.ml.params.H2OCommonParams setConvertInvalidNumbersToNa(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #220,  1          // InterfaceMethod convertInvalidNumbersToNa:()Lorg/apache/spark/ml/param/BooleanParam;
       7: iload_1
       8: invokestatic  #213                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      11: invokeinterface #104,  3          // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      16: checkcast     #2                  // class ai/h2o/sparkling/ml/params/H2OCommonParams
      19: areturn

  public static ai.h2o.sparkling.ml.params.H2OCommonParams setKeepBinaryModels$(ai.h2o.sparkling.ml.params.H2OCommonParams, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #224                // InterfaceMethod setKeepBinaryModels:(Z)Lai/h2o/sparkling/ml/params/H2OCommonParams;
       5: areturn

  public default ai.h2o.sparkling.ml.params.H2OCommonParams setKeepBinaryModels(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #87,  1           // InterfaceMethod keepBinaryModels:()Lorg/apache/spark/ml/param/BooleanParam;
       7: iload_1
       8: invokestatic  #213                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      11: invokeinterface #104,  3          // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      16: checkcast     #2                  // class ai/h2o/sparkling/ml/params/H2OCommonParams
      19: areturn

  public static void $init$(ai.h2o.sparkling.ml.params.H2OCommonParams);
    Code:
       0: aload_0
       1: new           #228                // class ai/h2o/sparkling/ml/params/NonSerializableNullableDataFrameParam
       4: dup
       5: aload_0
       6: ldc           #229                // String validationDataFrame
       8: ldc           #231                // String A data frame dedicated for a validation of the trained model. If the parameters is not set,a validation frame created via the \'splitRatio\' parameter.
      10: invokespecial #234                // Method ai/h2o/sparkling/ml/params/NonSerializableNullableDataFrameParam."<init>":(Lai/h2o/sparkling/ml/params/HasDataFrameSerializer;Ljava/lang/String;Ljava/lang/String;)V
      13: invokeinterface #236,  2          // InterfaceMethod ai$h2o$sparkling$ml$params$H2OCommonParams$_setter_$validationDataFrame_$eq:(Lai/h2o/sparkling/ml/params/NonSerializableNullableDataFrameParam;)V
      18: aload_0
      19: new           #238                // class org/apache/spark/ml/param/DoubleParam
      22: dup
      23: aload_0
      24: ldc           #239                // String splitRatio
      26: ldc           #241                // String Accepts values in range [0, 1.0] which determine how large part of dataset is used for training and for validation. For example, 0.8 -> 80% training 20% validation. This parameter is ignored when validationDataFrame is set.
      28: invokespecial #244                // Method org/apache/spark/ml/param/DoubleParam."<init>":(Lorg/apache/spark/ml/util/Identifiable;Ljava/lang/String;Ljava/lang/String;)V
      31: invokeinterface #246,  2          // InterfaceMethod ai$h2o$sparkling$ml$params$H2OCommonParams$_setter_$splitRatio_$eq:(Lorg/apache/spark/ml/param/DoubleParam;)V
      36: aload_0
      37: new           #248                // class org/apache/spark/ml/param/StringArrayParam
      40: dup
      41: aload_0
      42: ldc           #249                // String columnsToCategorical
      44: ldc           #251                // String List of columns to convert to categorical before modelling
      46: invokespecial #254                // Method org/apache/spark/ml/param/StringArrayParam."<init>":(Lorg/apache/spark/ml/param/Params;Ljava/lang/String;Ljava/lang/String;)V
      49: invokeinterface #256,  2          // InterfaceMethod ai$h2o$sparkling$ml$params$H2OCommonParams$_setter_$columnsToCategorical_$eq:(Lorg/apache/spark/ml/param/StringArrayParam;)V
      54: aload_0
      55: new           #258                // class org/apache/spark/ml/param/BooleanParam
      58: dup
      59: aload_0
      60: ldc_w         #259                // String keepBinaryModels
      63: ldc_w         #261                // String If set to true, all binary models created during execution of the ``fit`` method will be kept in DKV of H2O-3 cluster.
      66: invokespecial #262                // Method org/apache/spark/ml/param/BooleanParam."<init>":(Lorg/apache/spark/ml/util/Identifiable;Ljava/lang/String;Ljava/lang/String;)V
      69: invokeinterface #264,  2          // InterfaceMethod ai$h2o$sparkling$ml$params$H2OCommonParams$_setter_$keepBinaryModels_$eq:(Lorg/apache/spark/ml/param/BooleanParam;)V
      74: aload_0
      75: getstatic     #133                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      78: iconst_4
      79: anewarray     #266                // class org/apache/spark/ml/param/ParamPair
      82: dup
      83: iconst_0
      84: aload_0
      85: invokeinterface #48,  1           // InterfaceMethod validationDataFrame:()Lai/h2o/sparkling/ml/params/NonSerializableNullableDataFrameParam;
      90: aconst_null
      91: invokevirtual #270                // Method ai/h2o/sparkling/ml/params/NonSerializableNullableDataFrameParam.$minus$greater:(Ljava/lang/Object;)Lorg/apache/spark/ml/param/ParamPair;
      94: aastore
      95: dup
      96: iconst_1
      97: aload_0
      98: invokeinterface #63,  1           // InterfaceMethod splitRatio:()Lorg/apache/spark/ml/param/DoubleParam;
     103: dconst_1
     104: invokestatic  #116                // Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
     107: invokevirtual #271                // Method org/apache/spark/ml/param/DoubleParam.$minus$greater:(Ljava/lang/Object;)Lorg/apache/spark/ml/param/ParamPair;
     110: aastore
     111: dup
     112: iconst_2
     113: aload_0
     114: invokeinterface #77,  1           // InterfaceMethod columnsToCategorical:()Lorg/apache/spark/ml/param/StringArrayParam;
     119: getstatic     #150                // Field scala/Array$.MODULE$:Lscala/Array$;
     122: getstatic     #155                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     125: ldc           #135                // class java/lang/String
     127: invokevirtual #159                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
     130: invokevirtual #274                // Method scala/Array$.empty:(Lscala/reflect/ClassTag;)Ljava/lang/Object;
     133: invokevirtual #275                // Method org/apache/spark/ml/param/StringArrayParam.$minus$greater:(Ljava/lang/Object;)Lorg/apache/spark/ml/param/ParamPair;
     136: aastore
     137: dup
     138: iconst_3
     139: aload_0
     140: invokeinterface #87,  1           // InterfaceMethod keepBinaryModels:()Lorg/apache/spark/ml/param/BooleanParam;
     145: iconst_0
     146: invokestatic  #213                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
     149: invokevirtual #276                // Method org/apache/spark/ml/param/BooleanParam.$minus$greater:(Ljava/lang/Object;)Lorg/apache/spark/ml/param/ParamPair;
     152: aastore
     153: checkcast     #137                // class "[Ljava/lang/Object;"
     156: invokevirtual #280                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     159: invokeinterface #284,  2          // InterfaceMethod setDefault:(Lscala/collection/Seq;)Lorg/apache/spark/ml/param/Params;
     164: pop
     165: return
}
