Compiled from "HasPlugValues.scala"
public interface ai.h2o.sparkling.ml.params.HasPlugValues extends ai.h2o.sparkling.ml.params.H2OAlgoParamsBase {
  public abstract void ai$h2o$sparkling$ml$params$HasPlugValues$_setter_$ai$h2o$sparkling$ml$params$HasPlugValues$$plugValues_$eq(ai.h2o.sparkling.ml.params.NullableDictionaryParam<java.lang.Object>);

  public abstract scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasPlugValues$$super$getSWtoH2OParamNameMap();

  public abstract ai.h2o.sparkling.ml.params.NullableDictionaryParam<java.lang.Object> ai$h2o$sparkling$ml$params$HasPlugValues$$plugValues();

  public static scala.collection.immutable.Map getPlugValues$(ai.h2o.sparkling.ml.params.HasPlugValues);
    Code:
       0: aload_0
       1: invokespecial #59                 // InterfaceMethod getPlugValues:()Lscala/collection/immutable/Map;
       4: areturn

  public default scala.collection.immutable.Map<java.lang.String, java.lang.Object> getPlugValues();
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #63,  1           // InterfaceMethod ai$h2o$sparkling$ml$params$HasPlugValues$$plugValues:()Lai/h2o/sparkling/ml/params/NullableDictionaryParam;
       7: invokeinterface #67,  2           // InterfaceMethod $:(Lorg/apache/spark/ml/param/Param;)Ljava/lang/Object;
      12: checkcast     #69                 // class java/util/Map
      15: astore_1
      16: aload_1
      17: ifnonnull     24
      20: aconst_null
      21: goto          48
      24: getstatic     #75                 // Field scala/collection/JavaConverters$.MODULE$:Lscala/collection/JavaConverters$;
      27: aload_1
      28: invokevirtual #79                 // Method scala/collection/JavaConverters$.mapAsScalaMapConverter:(Ljava/util/Map;)Lscala/collection/convert/Decorators$AsScala;
      31: invokevirtual #83                 // Method scala/collection/convert/Decorators$AsScala.asScala:()Ljava/lang/Object;
      34: checkcast     #85                 // class scala/collection/TraversableOnce
      37: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      40: invokevirtual #94                 // Method scala/Predef$.$conforms:()Lscala/Predef$$less$colon$less;
      43: invokeinterface #98,  2           // InterfaceMethod scala/collection/TraversableOnce.toMap:(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
      48: areturn

  public static ai.h2o.sparkling.ml.params.HasPlugValues setPlugValues$(ai.h2o.sparkling.ml.params.HasPlugValues, scala.collection.immutable.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #110                // InterfaceMethod setPlugValues:(Lscala/collection/immutable/Map;)Lai/h2o/sparkling/ml/params/HasPlugValues;
       5: areturn

  public default ai.h2o.sparkling.ml.params.HasPlugValues setPlugValues(scala.collection.immutable.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #63,  1           // InterfaceMethod ai$h2o$sparkling$ml$params$HasPlugValues$$plugValues:()Lai/h2o/sparkling/ml/params/NullableDictionaryParam;
       7: aload_1
       8: ifnonnull     15
      11: aconst_null
      12: goto          25
      15: getstatic     #75                 // Field scala/collection/JavaConverters$.MODULE$:Lscala/collection/JavaConverters$;
      18: aload_1
      19: invokevirtual #116                // Method scala/collection/JavaConverters$.mapAsJavaMapConverter:(Lscala/collection/Map;)Lscala/collection/convert/Decorators$AsJava;
      22: invokevirtual #119                // Method scala/collection/convert/Decorators$AsJava.asJava:()Ljava/lang/Object;
      25: invokeinterface #123,  3          // InterfaceMethod set:(Lorg/apache/spark/ml/param/Param;Ljava/lang/Object;)Lorg/apache/spark/ml/param/Params;
      30: checkcast     #2                  // class ai/h2o/sparkling/ml/params/HasPlugValues
      33: areturn

  private java.lang.String getPlugValuesFrameKey();
    Code:
       0: aload_0
       1: invokeinterface #59,  1           // InterfaceMethod getPlugValues:()Lscala/collection/immutable/Map;
       6: astore_1
       7: aload_1
       8: ifnonnull     15
      11: aconst_null
      12: goto          309
      15: getstatic     #132                // Field ai/h2o/sparkling/utils/SparkSessionUtils$.MODULE$:Lai/h2o/sparkling/utils/SparkSessionUtils$;
      18: invokevirtual #136                // Method ai/h2o/sparkling/utils/SparkSessionUtils$.active:()Lorg/apache/spark/sql/SparkSession;
      21: astore_2
      22: new           #138                // class org/apache/spark/sql/catalyst/expressions/GenericRow
      25: dup
      26: aload_1
      27: invokeinterface #141,  1          // InterfaceMethod scala/collection/immutable/Map.values:()Lscala/collection/Iterable;
      32: getstatic     #146                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      35: invokevirtual #150                // Method scala/reflect/ClassTag$.Any:()Lscala/reflect/ClassTag;
      38: invokeinterface #156,  2          // InterfaceMethod scala/collection/Iterable.toArray:(Lscala/reflect/ClassTag;)Ljava/lang/Object;
      43: checkcast     #158                // class "[Ljava/lang/Object;"
      46: invokespecial #162                // Method org/apache/spark/sql/catalyst/expressions/GenericRow."<init>":([Ljava/lang/Object;)V
      49: astore_3
      50: getstatic     #75                 // Field scala/collection/JavaConverters$.MODULE$:Lscala/collection/JavaConverters$;
      53: new           #164                // class scala/collection/immutable/$colon$colon
      56: dup
      57: aload_3
      58: getstatic     #169                // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      61: invokespecial #172                // Method scala/collection/immutable/$colon$colon."<init>":(Ljava/lang/Object;Lscala/collection/immutable/List;)V
      64: checkcast     #174                // class scala/collection/Seq
      67: invokevirtual #178                // Method scala/collection/JavaConverters$.seqAsJavaListConverter:(Lscala/collection/Seq;)Lscala/collection/convert/Decorators$AsJava;
      70: invokevirtual #119                // Method scala/collection/convert/Decorators$AsJava.asJava:()Ljava/lang/Object;
      73: checkcast     #180                // class java/util/List
      76: astore        4
      78: aload_1
      79: invokedynamic #203,  0            // InvokeDynamic #0:apply:()Lscala/Function1;
      84: getstatic     #208                // Field scala/collection/immutable/Iterable$.MODULE$:Lscala/collection/immutable/Iterable$;
      87: invokevirtual #212                // Method scala/collection/immutable/Iterable$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      90: invokeinterface #216,  3          // InterfaceMethod scala/collection/immutable/Map.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      95: checkcast     #85                 // class scala/collection/TraversableOnce
      98: getstatic     #146                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     101: ldc           #218                // class org/apache/spark/sql/types/StructField
     103: invokevirtual #221                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
     106: invokeinterface #222,  2          // InterfaceMethod scala/collection/TraversableOnce.toArray:(Lscala/reflect/ClassTag;)Ljava/lang/Object;
     111: checkcast     #224                // class "[Lorg/apache/spark/sql/types/StructField;"
     114: astore        5
     116: new           #226                // class org/apache/spark/sql/types/StructType
     119: dup
     120: aload         5
     122: invokespecial #229                // Method org/apache/spark/sql/types/StructType."<init>":([Lorg/apache/spark/sql/types/StructField;)V
     125: astore        6
     127: aload_2
     128: aload         4
     130: aload         6
     132: invokevirtual #235                // Method org/apache/spark/sql/SparkSession.createDataFrame:(Ljava/util/List;Lorg/apache/spark/sql/types/StructType;)Lorg/apache/spark/sql/Dataset;
     135: astore        7
     137: getstatic     #240                // Field ai/h2o/sparkling/H2OContext$.MODULE$:Lai/h2o/sparkling/H2OContext$;
     140: aload_0
     141: invokedynamic #250,  0            // InvokeDynamic #1:apply:(Lai/h2o/sparkling/ml/params/HasPlugValues;)Lscala/Function0;
     146: invokevirtual #254                // Method ai/h2o/sparkling/H2OContext$.ensure:(Lscala/Function0;)Lai/h2o/sparkling/H2OContext;
     149: astore        8
     151: aload         8
     153: aload         7
     155: invokevirtual #260                // Method ai/h2o/sparkling/H2OContext.asH2OFrame:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/H2OFrame;
     158: astore        9
     160: new           #43                 // class scala/collection/mutable/ArrayOps$ofRef
     163: dup
     164: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
     167: new           #43                 // class scala/collection/mutable/ArrayOps$ofRef
     170: dup
     171: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
     174: new           #43                 // class scala/collection/mutable/ArrayOps$ofRef
     177: dup
     178: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
     181: aload         5
     183: checkcast     #158                // class "[Ljava/lang/Object;"
     186: invokevirtual #264                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     189: invokespecial #265                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     192: getstatic     #270                // Field scala/Array$.MODULE$:Lscala/Array$;
     195: getstatic     #146                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     198: ldc_w         #272                // class scala/Tuple2
     201: invokevirtual #221                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
     204: invokevirtual #275                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
     207: invokevirtual #279                // Method scala/collection/mutable/ArrayOps$ofRef.zipWithIndex:(Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     210: checkcast     #158                // class "[Ljava/lang/Object;"
     213: invokevirtual #264                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     216: invokespecial #265                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     219: invokedynamic #286,  0            // InvokeDynamic #2:apply:()Lscala/Function1;
     224: invokevirtual #290                // Method scala/collection/mutable/ArrayOps$ofRef.filter:(Lscala/Function1;)Ljava/lang/Object;
     227: checkcast     #158                // class "[Ljava/lang/Object;"
     230: invokevirtual #264                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
     233: invokespecial #265                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
     236: invokedynamic #295,  0            // InvokeDynamic #3:apply:()Lscala/Function1;
     241: getstatic     #270                // Field scala/Array$.MODULE$:Lscala/Array$;
     244: getstatic     #146                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     247: invokevirtual #298                // Method scala/reflect/ClassTag$.Int:()Lscala/reflect/ClassTag;
     250: invokevirtual #275                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
     253: invokevirtual #299                // Method scala/collection/mutable/ArrayOps$ofRef.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     256: checkcast     #301                // class "[I"
     259: astore        10
     261: new           #38                 // class scala/collection/mutable/ArrayOps$ofInt
     264: dup
     265: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
     268: aload         10
     270: invokevirtual #305                // Method scala/Predef$.intArrayOps:([I)[I
     273: invokespecial #308                // Method scala/collection/mutable/ArrayOps$ofInt."<init>":([I)V
     276: invokevirtual #312                // Method scala/collection/mutable/ArrayOps$ofInt.nonEmpty:()Z
     279: ifeq          292
     282: aload         9
     284: aload         10
     286: invokevirtual #318                // Method ai/h2o/sparkling/H2OFrame.convertColumnsToCategorical:([I)Lai/h2o/sparkling/H2OFrame;
     289: goto          295
     292: getstatic     #324                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
     295: pop
     296: aload_0
     297: aload         9
     299: invokeinterface #328,  2          // InterfaceMethod registerH2OFrameForDeletion:(Lai/h2o/sparkling/H2OFrame;)V
     304: aload         9
     306: invokevirtual #331                // Method ai/h2o/sparkling/H2OFrame.frameId:()Ljava/lang/String;
     309: areturn

  public static scala.collection.immutable.Map getPlugValuesParam$(ai.h2o.sparkling.ml.params.HasPlugValues, ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #359                // InterfaceMethod getPlugValuesParam:(Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public default scala.collection.immutable.Map<java.lang.String, java.lang.Object> getPlugValuesParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: invokevirtual #364                // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
       6: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: iconst_1
      10: anewarray     #272                // class scala/Tuple2
      13: dup
      14: iconst_0
      15: getstatic     #367                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
      18: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      21: ldc_w         #369                // String plug_values
      24: invokevirtual #372                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
      27: aload_0
      28: invokespecial #374                // InterfaceMethod getPlugValuesFrameKey:()Ljava/lang/String;
      31: invokevirtual #378                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
      34: aastore
      35: checkcast     #158                // class "[Ljava/lang/Object;"
      38: invokevirtual #382                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      41: invokevirtual #387                // Method scala/collection/immutable/Map$.apply:(Lscala/collection/Seq;)Lscala/collection/GenMap;
      44: checkcast     #103                // class scala/collection/immutable/Map
      47: areturn

  public static scala.collection.immutable.Map getSWtoH2OParamNameMap$(ai.h2o.sparkling.ml.params.HasPlugValues);
    Code:
       0: aload_0
       1: invokespecial #391                // InterfaceMethod getSWtoH2OParamNameMap:()Lscala/collection/immutable/Map;
       4: areturn

  public default scala.collection.immutable.Map<java.lang.String, java.lang.String> getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokeinterface #394,  1          // InterfaceMethod ai$h2o$sparkling$ml$params$HasPlugValues$$super$getSWtoH2OParamNameMap:()Lscala/collection/immutable/Map;
       6: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: invokevirtual #364                // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
      12: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      15: iconst_1
      16: anewarray     #272                // class scala/Tuple2
      19: dup
      20: iconst_0
      21: getstatic     #367                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
      24: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      27: ldc_w         #395                // String plugValues
      30: invokevirtual #372                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
      33: ldc_w         #369                // String plug_values
      36: invokevirtual #378                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
      39: aastore
      40: checkcast     #158                // class "[Ljava/lang/Object;"
      43: invokevirtual #382                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      46: invokevirtual #387                // Method scala/collection/immutable/Map$.apply:(Lscala/collection/Seq;)Lscala/collection/GenMap;
      49: invokeinterface #399,  2          // InterfaceMethod scala/collection/immutable/Map.$plus$plus:(Lscala/collection/GenTraversableOnce;)Lscala/collection/immutable/Map;
      54: areturn

  public static org.apache.spark.sql.types.StructField $anonfun$getPlugValuesFrameKey$1(scala.Tuple2);
    Code:
       0: aload_0
       1: astore_2
       2: aload_2
       3: ifnull        68
       6: aload_2
       7: invokevirtual #403                // Method scala/Tuple2._1:()Ljava/lang/Object;
      10: checkcast     #352                // class java/lang/String
      13: astore_3
      14: aload_2
      15: invokevirtual #406                // Method scala/Tuple2._2:()Ljava/lang/Object;
      18: astore        4
      20: getstatic     #411                // Field ai/h2o/sparkling/backend/utils/SupportedTypes$.MODULE$:Lai/h2o/sparkling/backend/utils/SupportedTypes$;
      23: invokevirtual #414                // Method ai/h2o/sparkling/backend/utils/SupportedTypes$.simpleByName:()Lscala/collection/immutable/Map;
      26: aload         4
      28: invokevirtual #418                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      31: invokevirtual #423                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      34: invokeinterface #425,  2          // InterfaceMethod scala/collection/immutable/Map.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      39: checkcast     #12                 // class ai/h2o/sparkling/backend/utils/SupportedTypes$SimpleType
      42: invokevirtual #429                // Method ai/h2o/sparkling/backend/utils/SupportedTypes$SimpleType.sparkType:()Lorg/apache/spark/sql/types/DataType;
      45: astore        5
      47: new           #218                // class org/apache/spark/sql/types/StructField
      50: dup
      51: aload_3
      52: aload         5
      54: iconst_0
      55: getstatic     #434                // Field org/apache/spark/sql/types/StructField$.MODULE$:Lorg/apache/spark/sql/types/StructField$;
      58: invokevirtual #438                // Method org/apache/spark/sql/types/StructField$.apply$default$4:()Lorg/apache/spark/sql/types/Metadata;
      61: invokespecial #441                // Method org/apache/spark/sql/types/StructField."<init>":(Ljava/lang/String;Lorg/apache/spark/sql/types/DataType;ZLorg/apache/spark/sql/types/Metadata;)V
      64: astore_1
      65: goto          80
      68: goto          71
      71: new           #443                // class scala/MatchError
      74: dup
      75: aload_2
      76: invokespecial #446                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      79: athrow
      80: aload_1
      81: areturn

  public static java.lang.String $anonfun$getPlugValuesFrameKey$2(ai.h2o.sparkling.ml.params.HasPlugValues);
    Code:
       0: new           #455                // class java/lang/StringBuilder
       3: dup
       4: ldc_w         #456                // int 107
       7: invokespecial #459                // Method java/lang/StringBuilder."<init>":(I)V
      10: ldc_w         #461                // String H2OContext needs to be created in order to train the
      13: invokevirtual #465                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #418                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #423                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      23: invokevirtual #465                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: ldc_w         #467                // String  model.
      29: invokevirtual #465                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: ldc_w         #469                // String Please create one as H2OContext.getOrCreate().
      35: invokevirtual #465                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #472                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: areturn

  public static boolean $anonfun$getPlugValuesFrameKey$3(scala.Tuple2);
    Code:
       0: aload_0
       1: invokevirtual #403                // Method scala/Tuple2._1:()Ljava/lang/Object;
       4: checkcast     #218                // class org/apache/spark/sql/types/StructField
       7: invokevirtual #477                // Method org/apache/spark/sql/types/StructField.dataType:()Lorg/apache/spark/sql/types/DataType;
      10: getstatic     #482                // Field org/apache/spark/sql/types/StringType$.MODULE$:Lorg/apache/spark/sql/types/StringType$;
      13: astore_1
      14: dup
      15: ifnonnull     26
      18: pop
      19: aload_1
      20: ifnull        33
      23: goto          37
      26: aload_1
      27: invokevirtual #486                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      30: ifeq          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  public static int $anonfun$getPlugValuesFrameKey$4(scala.Tuple2);
    Code:
       0: aload_0
       1: invokevirtual #493                // Method scala/Tuple2._2$mcI$sp:()I
       4: ireturn

  public static void $init$(ai.h2o.sparkling.ml.params.HasPlugValues);
    Code:
       0: aload_0
       1: new           #125                // class ai/h2o/sparkling/ml/params/NullableDictionaryParam
       4: dup
       5: aload_0
       6: ldc_w         #395                // String plugValues
       9: ldc_w         #497                // String A map containing values that will be used to impute missing values of the training/validation frame, use with conjunction missingValuesHandling = \"PlugValues\")
      12: getstatic     #502                // Field scala/reflect/ManifestFactory$.MODULE$:Lscala/reflect/ManifestFactory$;
      15: invokevirtual #505                // Method scala/reflect/ManifestFactory$.Any:()Lscala/reflect/Manifest;
      18: invokespecial #508                // Method ai/h2o/sparkling/ml/params/NullableDictionaryParam."<init>":(Lorg/apache/spark/ml/param/Params;Ljava/lang/String;Ljava/lang/String;Lscala/reflect/Manifest;)V
      21: invokeinterface #510,  2          // InterfaceMethod ai$h2o$sparkling$ml$params$HasPlugValues$_setter_$ai$h2o$sparkling$ml$params$HasPlugValues$$plugValues_$eq:(Lai/h2o/sparkling/ml/params/NullableDictionaryParam;)V
      26: aload_0
      27: getstatic     #90                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      30: iconst_1
      31: anewarray     #512                // class org/apache/spark/ml/param/ParamPair
      34: dup
      35: iconst_0
      36: aload_0
      37: invokeinterface #63,  1           // InterfaceMethod ai$h2o$sparkling$ml$params$HasPlugValues$$plugValues:()Lai/h2o/sparkling/ml/params/NullableDictionaryParam;
      42: aconst_null
      43: invokevirtual #516                // Method ai/h2o/sparkling/ml/params/NullableDictionaryParam.$minus$greater:(Ljava/lang/Object;)Lorg/apache/spark/ml/param/ParamPair;
      46: aastore
      47: checkcast     #158                // class "[Ljava/lang/Object;"
      50: invokevirtual #382                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      53: invokeinterface #520,  2          // InterfaceMethod setDefault:(Lscala/collection/Seq;)Lorg/apache/spark/ml/param/Params;
      58: pop
      59: return

  public static java.lang.Object $anonfun$getPlugValuesFrameKey$3$adapted(scala.Tuple2);
    Code:
       0: aload_0
       1: invokestatic  #522                // InterfaceMethod $anonfun$getPlugValuesFrameKey$3:(Lscala/Tuple2;)Z
       4: invokestatic  #528                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       7: areturn

  public static java.lang.Object $anonfun$getPlugValuesFrameKey$4$adapted(scala.Tuple2);
    Code:
       0: aload_0
       1: invokestatic  #530                // InterfaceMethod $anonfun$getPlugValuesFrameKey$4:(Lscala/Tuple2;)I
       4: invokestatic  #534                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       7: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #546,  0            // InvokeDynamic #4:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
