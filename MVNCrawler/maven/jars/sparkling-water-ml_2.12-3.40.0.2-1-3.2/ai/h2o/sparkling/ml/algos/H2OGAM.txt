Compiled from "H2OGAM.scala"
public class ai.h2o.sparkling.ml.algos.H2OGAM extends ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithmWithFoldColumn<hex.gam.GAMModel$GAMParameters> implements ai.h2o.sparkling.ml.params.H2OGAMParams, ai.h2o.sparkling.ml.algos.FamilyBasedH2OTrainFramePreparation {
  private final java.lang.String uid;

  private final org.apache.spark.ml.param.LongParam seed;

  private final org.apache.spark.ml.param.Param<java.lang.String> family;

  private final org.apache.spark.ml.param.DoubleParam tweedieVariancePower;

  private final org.apache.spark.ml.param.DoubleParam tweedieLinkPower;

  private final org.apache.spark.ml.param.DoubleParam theta;

  private final org.apache.spark.ml.param.Param<java.lang.String> solver;

  private final ai.h2o.sparkling.ml.params.NullableDoubleArrayParam alphaValue;

  private final ai.h2o.sparkling.ml.params.NullableDoubleArrayParam lambdaValue;

  private final ai.h2o.sparkling.ml.params.NullableDoubleArrayParam startval;

  private final org.apache.spark.ml.param.BooleanParam lambdaSearch;

  private final org.apache.spark.ml.param.BooleanParam earlyStopping;

  private final org.apache.spark.ml.param.IntParam nlambdas;

  private final org.apache.spark.ml.param.BooleanParam standardize;

  private final org.apache.spark.ml.param.Param<java.lang.String> missingValuesHandling;

  private final org.apache.spark.ml.param.BooleanParam nonNegative;

  private final org.apache.spark.ml.param.IntParam maxIterations;

  private final org.apache.spark.ml.param.DoubleParam betaEpsilon;

  private final org.apache.spark.ml.param.DoubleParam objectiveEpsilon;

  private final org.apache.spark.ml.param.DoubleParam gradientEpsilon;

  private final org.apache.spark.ml.param.DoubleParam objReg;

  private final org.apache.spark.ml.param.Param<java.lang.String> link;

  private final org.apache.spark.ml.param.BooleanParam intercept;

  private final org.apache.spark.ml.param.DoubleParam prior;

  private final org.apache.spark.ml.param.BooleanParam coldStart;

  private final org.apache.spark.ml.param.IntParam maxActivePredictors;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayParam interactions;

  private final org.apache.spark.ml.param.BooleanParam balanceClasses;

  private final ai.h2o.sparkling.ml.params.NullableFloatArrayParam classSamplingFactors;

  private final org.apache.spark.ml.param.FloatParam maxAfterBalanceSize;

  private final org.apache.spark.ml.param.IntParam maxConfusionMatrixSize;

  private final org.apache.spark.ml.param.BooleanParam computePValues;

  private final org.apache.spark.ml.param.BooleanParam removeCollinearCols;

  private final ai.h2o.sparkling.ml.params.NullableIntArrayParam numKnots;

  private final ai.h2o.sparkling.ml.params.NullableIntArrayParam splineOrders;

  private final ai.h2o.sparkling.ml.params.NullableBooleanArrayParam splinesNonNegative;

  private final ai.h2o.sparkling.ml.params.NullableDoubleArrayParam scale;

  private final ai.h2o.sparkling.ml.params.NullableIntArrayParam bs;

  private final org.apache.spark.ml.param.BooleanParam keepGamCols;

  private final org.apache.spark.ml.param.BooleanParam standardizeTpGamCols;

  private final org.apache.spark.ml.param.BooleanParam scaleTpPenaltyMat;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayParam knotIds;

  private final ai.h2o.sparkling.ml.params.NullableStringParam modelId;

  private final org.apache.spark.ml.param.IntParam nfolds;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationModels;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment;

  private final org.apache.spark.ml.param.Param<java.lang.String> labelCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam weightCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam offsetCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam foldCol;

  private final org.apache.spark.ml.param.Param<java.lang.String> foldAssignment;

  private final org.apache.spark.ml.param.BooleanParam ignoreConstCols;

  private final org.apache.spark.ml.param.BooleanParam scoreEachIteration;

  private final org.apache.spark.ml.param.IntParam stoppingRounds;

  private final org.apache.spark.ml.param.DoubleParam maxRuntimeSecs;

  private final org.apache.spark.ml.param.Param<java.lang.String> stoppingMetric;

  private final org.apache.spark.ml.param.DoubleParam stoppingTolerance;

  private final ai.h2o.sparkling.ml.params.NullableStringParam customMetricFunc;

  private final ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir;

  private final org.apache.spark.ml.param.Param<java.lang.String> aucType;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayArrayParam gamCols;

  private final ai.h2o.sparkling.ml.params.NullableDataFrameParam ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols;

  public static org.apache.spark.ml.util.MLReader<ai.h2o.sparkling.ml.algos.H2OGAM> read();
    Code:
       0: getstatic     #107                // Field ai/h2o/sparkling/ml/algos/H2OGAM$.MODULE$:Lai/h2o/sparkling/ml/algos/H2OGAM$;
       3: invokevirtual #109                // Method ai/h2o/sparkling/ml/algos/H2OGAM$.read:()Lorg/apache/spark/ml/util/MLReader;
       6: areturn

  public static java.lang.Object load(java.lang.String);
    Code:
       0: getstatic     #107                // Field ai/h2o/sparkling/ml/algos/H2OGAM$.MODULE$:Lai/h2o/sparkling/ml/algos/H2OGAM$;
       3: aload_0
       4: invokevirtual #114                // Method ai/h2o/sparkling/ml/algos/H2OGAM$.load:(Ljava/lang/String;)Ljava/lang/Object;
       7: areturn

  public void ai$h2o$sparkling$ml$algos$FamilyBasedH2OTrainFramePreparation$$super$prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #123                // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OTrainFramePreparation.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/H2OTrainFramePreparation;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public void prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #131                // InterfaceMethod ai/h2o/sparkling/ml/algos/FamilyBasedH2OTrainFramePreparation.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/FamilyBasedH2OTrainFramePreparation;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2OGAMParams$$super$getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #140                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2OGAMParams$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #148                // InterfaceMethod ai/h2o/sparkling/ml/params/HasGamCols.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasGamCols;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.reflect.ClassTag<hex.gam.GAMModel$GAMParameters> paramTag();
    Code:
       0: aload_0
       1: invokestatic  #155                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.paramTag$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Lscala/reflect/ClassTag;
       4: areturn

  public long getSeed();
    Code:
       0: aload_0
       1: invokestatic  #161                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getSeed$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)J
       4: lreturn

  public java.lang.String getFamily();
    Code:
       0: aload_0
       1: invokestatic  #167                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getFamily$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public double getTweedieVariancePower();
    Code:
       0: aload_0
       1: invokestatic  #173                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getTweedieVariancePower$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public double getTweedieLinkPower();
    Code:
       0: aload_0
       1: invokestatic  #177                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getTweedieLinkPower$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public double getTheta();
    Code:
       0: aload_0
       1: invokestatic  #181                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getTheta$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public java.lang.String getSolver();
    Code:
       0: aload_0
       1: invokestatic  #185                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getSolver$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public double[] getAlphaValue();
    Code:
       0: aload_0
       1: invokestatic  #191                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getAlphaValue$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[D
       4: areturn

  public double[] getLambdaValue();
    Code:
       0: aload_0
       1: invokestatic  #195                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getLambdaValue$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[D
       4: areturn

  public double[] getStartval();
    Code:
       0: aload_0
       1: invokestatic  #199                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getStartval$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[D
       4: areturn

  public boolean getLambdaSearch();
    Code:
       0: aload_0
       1: invokestatic  #205                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getLambdaSearch$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public boolean getEarlyStopping();
    Code:
       0: aload_0
       1: invokestatic  #209                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getEarlyStopping$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public int getNlambdas();
    Code:
       0: aload_0
       1: invokestatic  #215                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getNlambdas$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)I
       4: ireturn

  public boolean getStandardize();
    Code:
       0: aload_0
       1: invokestatic  #219                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getStandardize$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public java.lang.String getMissingValuesHandling();
    Code:
       0: aload_0
       1: invokestatic  #223                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getMissingValuesHandling$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public boolean getNonNegative();
    Code:
       0: aload_0
       1: invokestatic  #227                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getNonNegative$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public int getMaxIterations();
    Code:
       0: aload_0
       1: invokestatic  #231                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getMaxIterations$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)I
       4: ireturn

  public double getBetaEpsilon();
    Code:
       0: aload_0
       1: invokestatic  #235                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getBetaEpsilon$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public double getObjectiveEpsilon();
    Code:
       0: aload_0
       1: invokestatic  #239                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getObjectiveEpsilon$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public double getGradientEpsilon();
    Code:
       0: aload_0
       1: invokestatic  #243                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getGradientEpsilon$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public double getObjReg();
    Code:
       0: aload_0
       1: invokestatic  #247                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getObjReg$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public java.lang.String getLink();
    Code:
       0: aload_0
       1: invokestatic  #251                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getLink$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public boolean getIntercept();
    Code:
       0: aload_0
       1: invokestatic  #255                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getIntercept$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public double getPrior();
    Code:
       0: aload_0
       1: invokestatic  #259                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getPrior$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public boolean getColdStart();
    Code:
       0: aload_0
       1: invokestatic  #263                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getColdStart$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public int getMaxActivePredictors();
    Code:
       0: aload_0
       1: invokestatic  #267                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getMaxActivePredictors$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)I
       4: ireturn

  public java.lang.String[] getInteractions();
    Code:
       0: aload_0
       1: invokestatic  #273                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getInteractions$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[Ljava/lang/String;
       4: areturn

  public boolean getBalanceClasses();
    Code:
       0: aload_0
       1: invokestatic  #277                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getBalanceClasses$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public float[] getClassSamplingFactors();
    Code:
       0: aload_0
       1: invokestatic  #283                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getClassSamplingFactors$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[F
       4: areturn

  public float getMaxAfterBalanceSize();
    Code:
       0: aload_0
       1: invokestatic  #289                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getMaxAfterBalanceSize$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)F
       4: freturn

  public int getMaxConfusionMatrixSize();
    Code:
       0: aload_0
       1: invokestatic  #293                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getMaxConfusionMatrixSize$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)I
       4: ireturn

  public boolean getComputePValues();
    Code:
       0: aload_0
       1: invokestatic  #297                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getComputePValues$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public boolean getRemoveCollinearCols();
    Code:
       0: aload_0
       1: invokestatic  #301                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getRemoveCollinearCols$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public int[] getNumKnots();
    Code:
       0: aload_0
       1: invokestatic  #307                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getNumKnots$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[I
       4: areturn

  public int[] getSplineOrders();
    Code:
       0: aload_0
       1: invokestatic  #311                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getSplineOrders$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[I
       4: areturn

  public boolean[] getSplinesNonNegative();
    Code:
       0: aload_0
       1: invokestatic  #317                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getSplinesNonNegative$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[Z
       4: areturn

  public double[] getScale();
    Code:
       0: aload_0
       1: invokestatic  #321                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getScale$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[D
       4: areturn

  public int[] getBs();
    Code:
       0: aload_0
       1: invokestatic  #325                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getBs$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[I
       4: areturn

  public boolean getKeepGamCols();
    Code:
       0: aload_0
       1: invokestatic  #329                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getKeepGamCols$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public boolean getStandardizeTpGamCols();
    Code:
       0: aload_0
       1: invokestatic  #333                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getStandardizeTpGamCols$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public boolean getScaleTpPenaltyMat();
    Code:
       0: aload_0
       1: invokestatic  #337                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getScaleTpPenaltyMat$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public java.lang.String[] getKnotIds();
    Code:
       0: aload_0
       1: invokestatic  #341                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getKnotIds$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)[Ljava/lang/String;
       4: areturn

  public java.lang.String getModelId();
    Code:
       0: aload_0
       1: invokestatic  #345                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getModelId$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public int getNfolds();
    Code:
       0: aload_0
       1: invokestatic  #349                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getNfolds$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)I
       4: ireturn

  public boolean getKeepCrossValidationModels();
    Code:
       0: aload_0
       1: invokestatic  #353                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationPredictions();
    Code:
       0: aload_0
       1: invokestatic  #357                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #361                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public java.lang.String getLabelCol();
    Code:
       0: aload_0
       1: invokestatic  #365                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getLabelCol$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getWeightCol();
    Code:
       0: aload_0
       1: invokestatic  #369                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getWeightCol$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getOffsetCol();
    Code:
       0: aload_0
       1: invokestatic  #373                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getOffsetCol$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getFoldCol();
    Code:
       0: aload_0
       1: invokestatic  #377                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getFoldCol$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #381                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public boolean getIgnoreConstCols();
    Code:
       0: aload_0
       1: invokestatic  #385                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public boolean getScoreEachIteration();
    Code:
       0: aload_0
       1: invokestatic  #389                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Z
       4: ireturn

  public int getStoppingRounds();
    Code:
       0: aload_0
       1: invokestatic  #393                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getStoppingRounds$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)I
       4: ireturn

  public double getMaxRuntimeSecs();
    Code:
       0: aload_0
       1: invokestatic  #397                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public java.lang.String getStoppingMetric();
    Code:
       0: aload_0
       1: invokestatic  #401                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getStoppingMetric$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public double getStoppingTolerance();
    Code:
       0: aload_0
       1: invokestatic  #405                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getStoppingTolerance$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)D
       4: dreturn

  public java.lang.String getCustomMetricFunc();
    Code:
       0: aload_0
       1: invokestatic  #409                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getCustomMetricFunc$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getExportCheckpointsDir();
    Code:
       0: aload_0
       1: invokestatic  #413                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getAucType();
    Code:
       0: aload_0
       1: invokestatic  #417                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getAucType$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setSeed(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #424                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setSeed$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;J)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setFamily(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #431                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setFamily$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setTweedieVariancePower(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #437                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setTweedieVariancePower$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setTweedieLinkPower(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #442                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setTweedieLinkPower$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setTheta(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #446                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setTheta$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setSolver(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #450                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setSolver$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setAlphaValue(double[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #456                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setAlphaValue$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setLambdaValue(double[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #461                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setLambdaValue$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setStartval(double[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #465                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setStartval$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setLambdaSearch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #471                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setLambdaSearch$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setEarlyStopping(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #476                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setEarlyStopping$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setNlambdas(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #482                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setNlambdas$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;I)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setStandardize(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #487                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setStandardize$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setMissingValuesHandling(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #491                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setMissingValuesHandling$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setNonNegative(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #495                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setNonNegative$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setMaxIterations(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #499                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setMaxIterations$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;I)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setBetaEpsilon(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #503                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setBetaEpsilon$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setObjectiveEpsilon(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #507                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setObjectiveEpsilon$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setGradientEpsilon(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #511                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setGradientEpsilon$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setObjReg(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #515                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setObjReg$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setLink(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #519                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setLink$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setIntercept(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #523                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setIntercept$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setPrior(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #527                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setPrior$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setColdStart(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #531                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setColdStart$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setMaxActivePredictors(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #535                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setMaxActivePredictors$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;I)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setInteractions(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #541                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setInteractions$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setBalanceClasses(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #546                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setBalanceClasses$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setClassSamplingFactors(float[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #552                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setClassSamplingFactors$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[F)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setMaxAfterBalanceSize(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #559                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setMaxAfterBalanceSize$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;F)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setMaxConfusionMatrixSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #564                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setMaxConfusionMatrixSize$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;I)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setComputePValues(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #568                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setComputePValues$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setRemoveCollinearCols(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #572                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setRemoveCollinearCols$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setNumKnots(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #578                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setNumKnots$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[I)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setSplineOrders(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #583                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setSplineOrders$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[I)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setSplinesNonNegative(boolean[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #589                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setSplinesNonNegative$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setScale(double[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #594                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setScale$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setBs(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #598                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setBs$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[I)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setKeepGamCols(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #602                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setKeepGamCols$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setStandardizeTpGamCols(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #606                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setStandardizeTpGamCols$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setScaleTpPenaltyMat(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #610                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setScaleTpPenaltyMat$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setKnotIds(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #614                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setKnotIds$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setModelId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #618                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setModelId$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setNfolds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #622                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setNfolds$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;I)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setKeepCrossValidationModels(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #626                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setKeepCrossValidationPredictions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #630                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setKeepCrossValidationFoldAssignment(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #634                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setLabelCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #638                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setLabelCol$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setWeightCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #642                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setWeightCol$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setOffsetCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #646                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setOffsetCol$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #650                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setFoldCol$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setFoldAssignment(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #654                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setIgnoreConstCols(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #658                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setScoreEachIteration(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #662                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Z)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setStoppingRounds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #666                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setStoppingRounds$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;I)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setMaxRuntimeSecs(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #670                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setStoppingMetric(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #674                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setStoppingMetric$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setStoppingTolerance(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #678                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setStoppingTolerance$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;D)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setCustomMetricFunc(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #682                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setCustomMetricFunc$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setExportCheckpointsDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #686                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OGAMParams setAucType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #690                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.setAucType$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #695                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2OGAMParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #699                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getH2OGAMParams$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.String> getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #704                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasGamCols$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #710                // InterfaceMethod ai/h2o/sparkling/ml/params/HasBetaConstraints.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasBetaConstraints;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.collection.Seq ai$h2o$sparkling$ml$params$HasGamCols$$super$getAdditionalCols();
    Code:
       0: aload_0
       1: invokestatic  #718                // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OAlgoCommonUtils.getAdditionalCols$:(Lai/h2o/sparkling/ml/algos/H2OAlgoCommonUtils;)Lscala/collection/Seq;
       4: areturn

  public java.lang.String[][] getGamCols();
    Code:
       0: aload_0
       1: invokestatic  #724                // InterfaceMethod ai/h2o/sparkling/ml/params/HasGamCols.getGamCols$:(Lai/h2o/sparkling/ml/params/HasGamCols;)[[Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasGamCols setGamCols(java.lang.String[][]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #730                // InterfaceMethod ai/h2o/sparkling/ml/params/HasGamCols.setGamCols$:(Lai/h2o/sparkling/ml/params/HasGamCols;[[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/HasGamCols;
       5: areturn

  public ai.h2o.sparkling.ml.params.HasGamCols setGamCols(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #735                // InterfaceMethod ai/h2o/sparkling/ml/params/HasGamCols.setGamCols$:(Lai/h2o/sparkling/ml/params/HasGamCols;[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/HasGamCols;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getGamColsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #740                // InterfaceMethod ai/h2o/sparkling/ml/params/HasGamCols.getGamColsParam$:(Lai/h2o/sparkling/ml/params/HasGamCols;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.Seq<java.lang.String> getAdditionalCols();
    Code:
       0: aload_0
       1: invokestatic  #745                // InterfaceMethod ai/h2o/sparkling/ml/params/HasGamCols.getAdditionalCols$:(Lai/h2o/sparkling/ml/params/HasGamCols;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasBetaConstraints$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #751                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)Lscala/collection/immutable/Map;
       4: areturn

  public org.apache.spark.sql.Dataset<org.apache.spark.sql.Row> getBetaConstraints();
    Code:
       0: aload_0
       1: invokestatic  #758                // InterfaceMethod ai/h2o/sparkling/ml/params/HasBetaConstraints.getBetaConstraints$:(Lai/h2o/sparkling/ml/params/HasBetaConstraints;)Lorg/apache/spark/sql/Dataset;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasBetaConstraints setBetaConstraints(org.apache.spark.sql.Dataset<org.apache.spark.sql.Row>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #765                // InterfaceMethod ai/h2o/sparkling/ml/params/HasBetaConstraints.setBetaConstraints$:(Lai/h2o/sparkling/ml/params/HasBetaConstraints;Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/params/HasBetaConstraints;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getBetaConstraintsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #771                // InterfaceMethod ai/h2o/sparkling/ml/params/HasBetaConstraints.getBetaConstraintsParam$:(Lai/h2o/sparkling/ml/params/HasBetaConstraints;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasIgnoredCols$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #775                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;)Lscala/collection/immutable/Map;
       4: areturn

  public java.lang.String[] getIgnoredCols();
    Code:
       0: aload_0
       1: invokestatic  #780                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)[Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasIgnoredCols setIgnoredCols(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #786                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.setIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/HasIgnoredCols;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getIgnoredColsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #791                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredColsParam$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public org.apache.spark.ml.param.LongParam seed();
    Code:
       0: aload_0
       1: getfield      #794                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> family();
    Code:
       0: aload_0
       1: getfield      #798                // Field family:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam tweedieVariancePower();
    Code:
       0: aload_0
       1: getfield      #801                // Field tweedieVariancePower:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam tweedieLinkPower();
    Code:
       0: aload_0
       1: getfield      #803                // Field tweedieLinkPower:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam theta();
    Code:
       0: aload_0
       1: getfield      #805                // Field theta:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> solver();
    Code:
       0: aload_0
       1: getfield      #807                // Field solver:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableDoubleArrayParam alphaValue();
    Code:
       0: aload_0
       1: getfield      #810                // Field alphaValue:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableDoubleArrayParam lambdaValue();
    Code:
       0: aload_0
       1: getfield      #812                // Field lambdaValue:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableDoubleArrayParam startval();
    Code:
       0: aload_0
       1: getfield      #814                // Field startval:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam lambdaSearch();
    Code:
       0: aload_0
       1: getfield      #817                // Field lambdaSearch:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam earlyStopping();
    Code:
       0: aload_0
       1: getfield      #819                // Field earlyStopping:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nlambdas();
    Code:
       0: aload_0
       1: getfield      #822                // Field nlambdas:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam standardize();
    Code:
       0: aload_0
       1: getfield      #824                // Field standardize:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> missingValuesHandling();
    Code:
       0: aload_0
       1: getfield      #826                // Field missingValuesHandling:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam nonNegative();
    Code:
       0: aload_0
       1: getfield      #828                // Field nonNegative:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxIterations();
    Code:
       0: aload_0
       1: getfield      #830                // Field maxIterations:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam betaEpsilon();
    Code:
       0: aload_0
       1: getfield      #832                // Field betaEpsilon:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam objectiveEpsilon();
    Code:
       0: aload_0
       1: getfield      #834                // Field objectiveEpsilon:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam gradientEpsilon();
    Code:
       0: aload_0
       1: getfield      #836                // Field gradientEpsilon:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam objReg();
    Code:
       0: aload_0
       1: getfield      #838                // Field objReg:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> link();
    Code:
       0: aload_0
       1: getfield      #840                // Field link:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam intercept();
    Code:
       0: aload_0
       1: getfield      #842                // Field intercept:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam prior();
    Code:
       0: aload_0
       1: getfield      #844                // Field prior:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam coldStart();
    Code:
       0: aload_0
       1: getfield      #846                // Field coldStart:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxActivePredictors();
    Code:
       0: aload_0
       1: getfield      #848                // Field maxActivePredictors:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringArrayParam interactions();
    Code:
       0: aload_0
       1: getfield      #851                // Field interactions:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam balanceClasses();
    Code:
       0: aload_0
       1: getfield      #853                // Field balanceClasses:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableFloatArrayParam classSamplingFactors();
    Code:
       0: aload_0
       1: getfield      #856                // Field classSamplingFactors:Lai/h2o/sparkling/ml/params/NullableFloatArrayParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam maxAfterBalanceSize();
    Code:
       0: aload_0
       1: getfield      #859                // Field maxAfterBalanceSize:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxConfusionMatrixSize();
    Code:
       0: aload_0
       1: getfield      #861                // Field maxConfusionMatrixSize:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam computePValues();
    Code:
       0: aload_0
       1: getfield      #863                // Field computePValues:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam removeCollinearCols();
    Code:
       0: aload_0
       1: getfield      #865                // Field removeCollinearCols:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableIntArrayParam numKnots();
    Code:
       0: aload_0
       1: getfield      #868                // Field numKnots:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableIntArrayParam splineOrders();
    Code:
       0: aload_0
       1: getfield      #870                // Field splineOrders:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableBooleanArrayParam splinesNonNegative();
    Code:
       0: aload_0
       1: getfield      #873                // Field splinesNonNegative:Lai/h2o/sparkling/ml/params/NullableBooleanArrayParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableDoubleArrayParam scale();
    Code:
       0: aload_0
       1: getfield      #875                // Field scale:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableIntArrayParam bs();
    Code:
       0: aload_0
       1: getfield      #877                // Field bs:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepGamCols();
    Code:
       0: aload_0
       1: getfield      #879                // Field keepGamCols:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam standardizeTpGamCols();
    Code:
       0: aload_0
       1: getfield      #881                // Field standardizeTpGamCols:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam scaleTpPenaltyMat();
    Code:
       0: aload_0
       1: getfield      #883                // Field scaleTpPenaltyMat:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringArrayParam knotIds();
    Code:
       0: aload_0
       1: getfield      #885                // Field knotIds:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam modelId();
    Code:
       0: aload_0
       1: getfield      #888                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nfolds();
    Code:
       0: aload_0
       1: getfield      #890                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationModels();
    Code:
       0: aload_0
       1: getfield      #892                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions();
    Code:
       0: aload_0
       1: getfield      #894                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: getfield      #896                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> labelCol();
    Code:
       0: aload_0
       1: getfield      #898                // Field labelCol:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam weightCol();
    Code:
       0: aload_0
       1: getfield      #900                // Field weightCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam offsetCol();
    Code:
       0: aload_0
       1: getfield      #902                // Field offsetCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam foldCol();
    Code:
       0: aload_0
       1: getfield      #904                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> foldAssignment();
    Code:
       0: aload_0
       1: getfield      #906                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam ignoreConstCols();
    Code:
       0: aload_0
       1: getfield      #908                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam scoreEachIteration();
    Code:
       0: aload_0
       1: getfield      #910                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam stoppingRounds();
    Code:
       0: aload_0
       1: getfield      #912                // Field stoppingRounds:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam maxRuntimeSecs();
    Code:
       0: aload_0
       1: getfield      #914                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> stoppingMetric();
    Code:
       0: aload_0
       1: getfield      #916                // Field stoppingMetric:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam stoppingTolerance();
    Code:
       0: aload_0
       1: getfield      #918                // Field stoppingTolerance:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam customMetricFunc();
    Code:
       0: aload_0
       1: getfield      #920                // Field customMetricFunc:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir();
    Code:
       0: aload_0
       1: getfield      #922                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> aucType();
    Code:
       0: aload_0
       1: getfield      #924                // Field aucType:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$seed_$eq(org.apache.spark.ml.param.LongParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #794                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$family_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #798                // Field family:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$tweedieVariancePower_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #801                // Field tweedieVariancePower:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$tweedieLinkPower_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #803                // Field tweedieLinkPower:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$theta_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #805                // Field theta:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$solver_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #807                // Field solver:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$alphaValue_$eq(ai.h2o.sparkling.ml.params.NullableDoubleArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #810                // Field alphaValue:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$lambdaValue_$eq(ai.h2o.sparkling.ml.params.NullableDoubleArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #812                // Field lambdaValue:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$startval_$eq(ai.h2o.sparkling.ml.params.NullableDoubleArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #814                // Field startval:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$lambdaSearch_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #817                // Field lambdaSearch:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$earlyStopping_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #819                // Field earlyStopping:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$nlambdas_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #822                // Field nlambdas:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$standardize_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #824                // Field standardize:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$missingValuesHandling_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #826                // Field missingValuesHandling:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$nonNegative_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #828                // Field nonNegative:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$maxIterations_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #830                // Field maxIterations:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$betaEpsilon_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #832                // Field betaEpsilon:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$objectiveEpsilon_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #834                // Field objectiveEpsilon:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$gradientEpsilon_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #836                // Field gradientEpsilon:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$objReg_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #838                // Field objReg:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$link_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #840                // Field link:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$intercept_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #842                // Field intercept:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$prior_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #844                // Field prior:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$coldStart_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #846                // Field coldStart:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$maxActivePredictors_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #848                // Field maxActivePredictors:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$interactions_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #851                // Field interactions:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$balanceClasses_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #853                // Field balanceClasses:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$classSamplingFactors_$eq(ai.h2o.sparkling.ml.params.NullableFloatArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #856                // Field classSamplingFactors:Lai/h2o/sparkling/ml/params/NullableFloatArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$maxAfterBalanceSize_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #859                // Field maxAfterBalanceSize:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$maxConfusionMatrixSize_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #861                // Field maxConfusionMatrixSize:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$computePValues_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #863                // Field computePValues:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$removeCollinearCols_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #865                // Field removeCollinearCols:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$numKnots_$eq(ai.h2o.sparkling.ml.params.NullableIntArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #868                // Field numKnots:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$splineOrders_$eq(ai.h2o.sparkling.ml.params.NullableIntArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #870                // Field splineOrders:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$splinesNonNegative_$eq(ai.h2o.sparkling.ml.params.NullableBooleanArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #873                // Field splinesNonNegative:Lai/h2o/sparkling/ml/params/NullableBooleanArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$scale_$eq(ai.h2o.sparkling.ml.params.NullableDoubleArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #875                // Field scale:Lai/h2o/sparkling/ml/params/NullableDoubleArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$bs_$eq(ai.h2o.sparkling.ml.params.NullableIntArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #877                // Field bs:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$keepGamCols_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #879                // Field keepGamCols:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$standardizeTpGamCols_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #881                // Field standardizeTpGamCols:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$scaleTpPenaltyMat_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #883                // Field scaleTpPenaltyMat:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$knotIds_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #885                // Field knotIds:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$modelId_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #888                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$nfolds_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #890                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$keepCrossValidationModels_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #892                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$keepCrossValidationPredictions_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #894                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$keepCrossValidationFoldAssignment_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #896                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$labelCol_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #898                // Field labelCol:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$weightCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #900                // Field weightCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$offsetCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #902                // Field offsetCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$foldCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #904                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$foldAssignment_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #906                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$ignoreConstCols_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #908                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$scoreEachIteration_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #910                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$stoppingRounds_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #912                // Field stoppingRounds:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$maxRuntimeSecs_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #914                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$stoppingMetric_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #916                // Field stoppingMetric:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$stoppingTolerance_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #918                // Field stoppingTolerance:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$customMetricFunc_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #920                // Field customMetricFunc:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$exportCheckpointsDir_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #922                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OGAMParams$_setter_$aucType_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #924                // Field aucType:Lorg/apache/spark/ml/param/Param;
       5: return

  public ai.h2o.sparkling.ml.params.NullableStringArrayArrayParam gamCols();
    Code:
       0: aload_0
       1: getfield      #1001               // Field gamCols:Lai/h2o/sparkling/ml/params/NullableStringArrayArrayParam;
       4: areturn

  public void ai$h2o$sparkling$ml$params$HasGamCols$_setter_$gamCols_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1001               // Field gamCols:Lai/h2o/sparkling/ml/params/NullableStringArrayArrayParam;
       5: return

  public ai.h2o.sparkling.ml.params.NullableDataFrameParam ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints();
    Code:
       0: aload_0
       1: getfield      #1006               // Field ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints:Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasBetaConstraints$_setter_$ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints_$eq(ai.h2o.sparkling.ml.params.NullableDataFrameParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1006               // Field ai$h2o$sparkling$ml$params$HasBetaConstraints$$betaConstraints:Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
       5: return

  public ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols();
    Code:
       0: aload_0
       1: getfield      #1010               // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasIgnoredCols$_setter_$ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1010               // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       5: return

  public java.lang.String uid();
    Code:
       0: aload_0
       1: getfield      #1013               // Field uid:Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.models.H2OGAMMOJOModel fit(org.apache.spark.sql.Dataset<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1022               // Method ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm.fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OSupervisedMOJOModel;
       5: checkcast     #1024               // class ai/h2o/sparkling/ml/models/H2OGAMMOJOModel
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithmWithFoldColumn setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1027               // Method setFoldCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: checkcast     #5                  // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithmWithFoldColumn
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setOffsetCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1030               // Method setOffsetCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: checkcast     #1019               // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setWeightCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1032               // Method setWeightCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: checkcast     #1019               // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setLabelCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1034               // Method setLabelCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OGAMParams;
       5: checkcast     #1019               // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public org.apache.spark.ml.Model fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1037               // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OGAMMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1037               // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OGAMMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OAlgorithmMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1037               // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OGAMMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OSupervisedMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1037               // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OGAMMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.algos.H2OGAM(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1013               // Field uid:Ljava/lang/String;
       5: aload_0
       6: getstatic     #1046               // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
       9: ldc           #15                 // class hex/gam/GAMModel$GAMParameters
      11: invokevirtual #1050               // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      14: invokespecial #1053               // Method ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithmWithFoldColumn."<init>":(Lscala/reflect/ClassTag;)V
      17: aload_0
      18: invokestatic  #1057               // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.$init$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)V
      21: aload_0
      22: invokestatic  #1060               // InterfaceMethod ai/h2o/sparkling/ml/params/HasBetaConstraints.$init$:(Lai/h2o/sparkling/ml/params/HasBetaConstraints;)V
      25: aload_0
      26: invokestatic  #1063               // InterfaceMethod ai/h2o/sparkling/ml/params/HasGamCols.$init$:(Lai/h2o/sparkling/ml/params/HasGamCols;)V
      29: aload_0
      30: invokestatic  #1066               // InterfaceMethod ai/h2o/sparkling/ml/params/H2OGAMParams.$init$:(Lai/h2o/sparkling/ml/params/H2OGAMParams;)V
      33: aload_0
      34: invokestatic  #1069               // InterfaceMethod ai/h2o/sparkling/ml/algos/FamilyBasedH2OTrainFramePreparation.$init$:(Lai/h2o/sparkling/ml/algos/FamilyBasedH2OTrainFramePreparation;)V
      37: return

  public ai.h2o.sparkling.ml.algos.H2OGAM();
    Code:
       0: aload_0
       1: getstatic     #1075               // Field org/apache/spark/ml/util/Identifiable$.MODULE$:Lorg/apache/spark/ml/util/Identifiable$;
       4: ldc           #2                  // class ai/h2o/sparkling/ml/algos/H2OGAM
       6: invokevirtual #1080               // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       9: invokevirtual #1084               // Method org/apache/spark/ml/util/Identifiable$.randomUID:(Ljava/lang/String;)Ljava/lang/String;
      12: invokespecial #1086               // Method "<init>":(Ljava/lang/String;)V
      15: return
}
