Compiled from "H2OXGBoost.scala"
public class ai.h2o.sparkling.ml.algos.H2OXGBoost extends ai.h2o.sparkling.ml.algos.H2OTreeBasedSupervisedAlgorithm<hex.tree.xgboost.XGBoostModel$XGBoostParameters> implements ai.h2o.sparkling.ml.params.H2OXGBoostParams, ai.h2o.sparkling.ml.algos.DistributionBasedH2OTrainFramePreparation {
  private final java.lang.String uid;

  private final org.apache.spark.ml.param.IntParam ntrees;

  private final org.apache.spark.ml.param.IntParam maxDepth;

  private final org.apache.spark.ml.param.DoubleParam minRows;

  private final org.apache.spark.ml.param.DoubleParam minChildWeight;

  private final org.apache.spark.ml.param.DoubleParam learnRate;

  private final org.apache.spark.ml.param.DoubleParam eta;

  private final org.apache.spark.ml.param.DoubleParam sampleRate;

  private final org.apache.spark.ml.param.DoubleParam subsample;

  private final org.apache.spark.ml.param.DoubleParam colSampleRate;

  private final org.apache.spark.ml.param.DoubleParam colSampleByLevel;

  private final org.apache.spark.ml.param.DoubleParam colSampleRatePerTree;

  private final org.apache.spark.ml.param.DoubleParam colSampleByTree;

  private final org.apache.spark.ml.param.DoubleParam colSampleByNode;

  private final org.apache.spark.ml.param.FloatParam maxAbsLeafnodePred;

  private final org.apache.spark.ml.param.FloatParam maxDeltaStep;

  private final org.apache.spark.ml.param.IntParam scoreTreeInterval;

  private final org.apache.spark.ml.param.LongParam seed;

  private final org.apache.spark.ml.param.FloatParam minSplitImprovement;

  private final org.apache.spark.ml.param.FloatParam gamma;

  private final org.apache.spark.ml.param.IntParam nthread;

  private final org.apache.spark.ml.param.BooleanParam buildTreeOneNode;

  private final ai.h2o.sparkling.ml.params.NullableStringParam saveMatrixDirectory;

  private final org.apache.spark.ml.param.BooleanParam calibrateModel;

  private final org.apache.spark.ml.param.Param<java.lang.String> calibrationMethod;

  private final org.apache.spark.ml.param.IntParam maxBins;

  private final org.apache.spark.ml.param.IntParam maxLeaves;

  private final org.apache.spark.ml.param.Param<java.lang.String> treeMethod;

  private final org.apache.spark.ml.param.Param<java.lang.String> growPolicy;

  private final org.apache.spark.ml.param.Param<java.lang.String> booster;

  private final org.apache.spark.ml.param.FloatParam regLambda;

  private final org.apache.spark.ml.param.FloatParam regAlpha;

  private final org.apache.spark.ml.param.BooleanParam quietMode;

  private final org.apache.spark.ml.param.Param<java.lang.String> sampleType;

  private final org.apache.spark.ml.param.Param<java.lang.String> normalizeType;

  private final org.apache.spark.ml.param.FloatParam rateDrop;

  private final org.apache.spark.ml.param.BooleanParam oneDrop;

  private final org.apache.spark.ml.param.FloatParam skipDrop;

  private final org.apache.spark.ml.param.Param<java.lang.String> dmatrixType;

  private final org.apache.spark.ml.param.Param<java.lang.String> backend;

  private final ai.h2o.sparkling.ml.params.NullableIntArrayParam gpuId;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayArrayParam interactionConstraints;

  private final org.apache.spark.ml.param.FloatParam scalePosWeight;

  private final ai.h2o.sparkling.ml.params.NullableStringParam evalMetric;

  private final org.apache.spark.ml.param.BooleanParam scoreEvalMetricOnly;

  private final ai.h2o.sparkling.ml.params.NullableStringParam modelId;

  private final org.apache.spark.ml.param.IntParam nfolds;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationModels;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment;

  private final org.apache.spark.ml.param.BooleanParam parallelizeCrossValidation;

  private final org.apache.spark.ml.param.Param<java.lang.String> distribution;

  private final org.apache.spark.ml.param.DoubleParam tweediePower;

  private final org.apache.spark.ml.param.Param<java.lang.String> labelCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam weightCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam offsetCol;

  private final ai.h2o.sparkling.ml.params.NullableStringParam foldCol;

  private final org.apache.spark.ml.param.Param<java.lang.String> foldAssignment;

  private final org.apache.spark.ml.param.Param<java.lang.String> categoricalEncoding;

  private final org.apache.spark.ml.param.BooleanParam ignoreConstCols;

  private final org.apache.spark.ml.param.BooleanParam scoreEachIteration;

  private final org.apache.spark.ml.param.IntParam stoppingRounds;

  private final org.apache.spark.ml.param.DoubleParam maxRuntimeSecs;

  private final org.apache.spark.ml.param.Param<java.lang.String> stoppingMetric;

  private final org.apache.spark.ml.param.DoubleParam stoppingTolerance;

  private final org.apache.spark.ml.param.IntParam gainsliftBins;

  private final ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir;

  private final org.apache.spark.ml.param.Param<java.lang.String> aucType;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols;

  private final ai.h2o.sparkling.ml.params.NullableDataFrameParam ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame;

  private final ai.h2o.sparkling.ml.params.DictionaryParam ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints;

  public static org.apache.spark.ml.util.MLReader<ai.h2o.sparkling.ml.algos.H2OXGBoost> read();
    Code:
       0: getstatic     #112                // Field ai/h2o/sparkling/ml/algos/H2OXGBoost$.MODULE$:Lai/h2o/sparkling/ml/algos/H2OXGBoost$;
       3: invokevirtual #114                // Method ai/h2o/sparkling/ml/algos/H2OXGBoost$.read:()Lorg/apache/spark/ml/util/MLReader;
       6: areturn

  public static java.lang.Object load(java.lang.String);
    Code:
       0: getstatic     #112                // Field ai/h2o/sparkling/ml/algos/H2OXGBoost$.MODULE$:Lai/h2o/sparkling/ml/algos/H2OXGBoost$;
       3: aload_0
       4: invokevirtual #119                // Method ai/h2o/sparkling/ml/algos/H2OXGBoost$.load:(Ljava/lang/String;)Ljava/lang/Object;
       7: areturn

  public void ai$h2o$sparkling$ml$algos$DistributionBasedH2OTrainFramePreparation$$super$prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #128                // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OTrainFramePreparation.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/H2OTrainFramePreparation;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public void prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #136                // InterfaceMethod ai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2OXGBoostParams$$super$getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #145                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2OXGBoostParams$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #153                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.reflect.ClassTag<hex.tree.xgboost.XGBoostModel$XGBoostParameters> paramTag();
    Code:
       0: aload_0
       1: invokestatic  #160                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.paramTag$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Lscala/reflect/ClassTag;
       4: areturn

  public int getNtrees();
    Code:
       0: aload_0
       1: invokestatic  #166                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getNtrees$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)I
       4: ireturn

  public int getMaxDepth();
    Code:
       0: aload_0
       1: invokestatic  #170                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getMaxDepth$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)I
       4: ireturn

  public double getMinRows();
    Code:
       0: aload_0
       1: invokestatic  #176                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getMinRows$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getMinChildWeight();
    Code:
       0: aload_0
       1: invokestatic  #180                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getMinChildWeight$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getLearnRate();
    Code:
       0: aload_0
       1: invokestatic  #184                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getLearnRate$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getEta();
    Code:
       0: aload_0
       1: invokestatic  #188                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getEta$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getSampleRate();
    Code:
       0: aload_0
       1: invokestatic  #192                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getSampleRate$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getSubsample();
    Code:
       0: aload_0
       1: invokestatic  #196                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getSubsample$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getColSampleRate();
    Code:
       0: aload_0
       1: invokestatic  #200                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getColSampleRate$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getColSampleByLevel();
    Code:
       0: aload_0
       1: invokestatic  #204                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getColSampleByLevel$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getColSampleRatePerTree();
    Code:
       0: aload_0
       1: invokestatic  #208                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getColSampleRatePerTree$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getColSampleByTree();
    Code:
       0: aload_0
       1: invokestatic  #212                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getColSampleByTree$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public double getColSampleByNode();
    Code:
       0: aload_0
       1: invokestatic  #216                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getColSampleByNode$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public float getMaxAbsLeafnodePred();
    Code:
       0: aload_0
       1: invokestatic  #222                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getMaxAbsLeafnodePred$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)F
       4: freturn

  public float getMaxDeltaStep();
    Code:
       0: aload_0
       1: invokestatic  #226                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getMaxDeltaStep$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)F
       4: freturn

  public int getScoreTreeInterval();
    Code:
       0: aload_0
       1: invokestatic  #230                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getScoreTreeInterval$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)I
       4: ireturn

  public long getSeed();
    Code:
       0: aload_0
       1: invokestatic  #236                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getSeed$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)J
       4: lreturn

  public float getMinSplitImprovement();
    Code:
       0: aload_0
       1: invokestatic  #240                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getMinSplitImprovement$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)F
       4: freturn

  public float getGamma();
    Code:
       0: aload_0
       1: invokestatic  #244                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getGamma$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)F
       4: freturn

  public int getNthread();
    Code:
       0: aload_0
       1: invokestatic  #248                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getNthread$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)I
       4: ireturn

  public boolean getBuildTreeOneNode();
    Code:
       0: aload_0
       1: invokestatic  #254                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getBuildTreeOneNode$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public java.lang.String getSaveMatrixDirectory();
    Code:
       0: aload_0
       1: invokestatic  #260                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getSaveMatrixDirectory$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public boolean getCalibrateModel();
    Code:
       0: aload_0
       1: invokestatic  #264                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getCalibrateModel$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public java.lang.String getCalibrationMethod();
    Code:
       0: aload_0
       1: invokestatic  #268                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getCalibrationMethod$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public int getMaxBins();
    Code:
       0: aload_0
       1: invokestatic  #272                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getMaxBins$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)I
       4: ireturn

  public int getMaxLeaves();
    Code:
       0: aload_0
       1: invokestatic  #276                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getMaxLeaves$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)I
       4: ireturn

  public java.lang.String getTreeMethod();
    Code:
       0: aload_0
       1: invokestatic  #280                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getTreeMethod$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getGrowPolicy();
    Code:
       0: aload_0
       1: invokestatic  #284                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getGrowPolicy$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getBooster();
    Code:
       0: aload_0
       1: invokestatic  #288                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getBooster$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public float getRegLambda();
    Code:
       0: aload_0
       1: invokestatic  #292                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getRegLambda$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)F
       4: freturn

  public float getRegAlpha();
    Code:
       0: aload_0
       1: invokestatic  #296                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getRegAlpha$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)F
       4: freturn

  public boolean getQuietMode();
    Code:
       0: aload_0
       1: invokestatic  #300                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getQuietMode$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public java.lang.String getSampleType();
    Code:
       0: aload_0
       1: invokestatic  #304                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getSampleType$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getNormalizeType();
    Code:
       0: aload_0
       1: invokestatic  #308                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getNormalizeType$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public float getRateDrop();
    Code:
       0: aload_0
       1: invokestatic  #312                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getRateDrop$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)F
       4: freturn

  public boolean getOneDrop();
    Code:
       0: aload_0
       1: invokestatic  #316                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getOneDrop$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public float getSkipDrop();
    Code:
       0: aload_0
       1: invokestatic  #320                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getSkipDrop$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)F
       4: freturn

  public java.lang.String getDmatrixType();
    Code:
       0: aload_0
       1: invokestatic  #324                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getDmatrixType$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getBackend();
    Code:
       0: aload_0
       1: invokestatic  #328                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getBackend$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public int[] getGpuId();
    Code:
       0: aload_0
       1: invokestatic  #334                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getGpuId$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)[I
       4: areturn

  public java.lang.String[][] getInteractionConstraints();
    Code:
       0: aload_0
       1: invokestatic  #340                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getInteractionConstraints$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)[[Ljava/lang/String;
       4: areturn

  public float getScalePosWeight();
    Code:
       0: aload_0
       1: invokestatic  #344                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getScalePosWeight$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)F
       4: freturn

  public java.lang.String getEvalMetric();
    Code:
       0: aload_0
       1: invokestatic  #348                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getEvalMetric$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public boolean getScoreEvalMetricOnly();
    Code:
       0: aload_0
       1: invokestatic  #352                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getScoreEvalMetricOnly$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public java.lang.String getModelId();
    Code:
       0: aload_0
       1: invokestatic  #356                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getModelId$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public int getNfolds();
    Code:
       0: aload_0
       1: invokestatic  #360                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getNfolds$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)I
       4: ireturn

  public boolean getKeepCrossValidationModels();
    Code:
       0: aload_0
       1: invokestatic  #364                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationPredictions();
    Code:
       0: aload_0
       1: invokestatic  #368                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #372                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public boolean getParallelizeCrossValidation();
    Code:
       0: aload_0
       1: invokestatic  #376                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getParallelizeCrossValidation$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public java.lang.String getDistribution();
    Code:
       0: aload_0
       1: invokestatic  #380                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getDistribution$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public double getTweediePower();
    Code:
       0: aload_0
       1: invokestatic  #384                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getTweediePower$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public java.lang.String getLabelCol();
    Code:
       0: aload_0
       1: invokestatic  #388                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getLabelCol$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getWeightCol();
    Code:
       0: aload_0
       1: invokestatic  #392                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getWeightCol$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getOffsetCol();
    Code:
       0: aload_0
       1: invokestatic  #396                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getOffsetCol$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getFoldCol();
    Code:
       0: aload_0
       1: invokestatic  #400                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getFoldCol$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #404                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getCategoricalEncoding();
    Code:
       0: aload_0
       1: invokestatic  #408                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getCategoricalEncoding$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public boolean getIgnoreConstCols();
    Code:
       0: aload_0
       1: invokestatic  #412                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public boolean getScoreEachIteration();
    Code:
       0: aload_0
       1: invokestatic  #416                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Z
       4: ireturn

  public int getStoppingRounds();
    Code:
       0: aload_0
       1: invokestatic  #420                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getStoppingRounds$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)I
       4: ireturn

  public double getMaxRuntimeSecs();
    Code:
       0: aload_0
       1: invokestatic  #424                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public java.lang.String getStoppingMetric();
    Code:
       0: aload_0
       1: invokestatic  #428                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getStoppingMetric$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public double getStoppingTolerance();
    Code:
       0: aload_0
       1: invokestatic  #432                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getStoppingTolerance$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)D
       4: dreturn

  public int getGainsliftBins();
    Code:
       0: aload_0
       1: invokestatic  #436                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getGainsliftBins$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)I
       4: ireturn

  public java.lang.String getExportCheckpointsDir();
    Code:
       0: aload_0
       1: invokestatic  #440                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getAucType();
    Code:
       0: aload_0
       1: invokestatic  #444                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getAucType$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setNtrees(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #451                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setNtrees$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setMaxDepth(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #456                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setMaxDepth$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setMinRows(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #462                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setMinRows$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setMinChildWeight(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #467                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setMinChildWeight$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setLearnRate(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #471                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setLearnRate$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setEta(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #475                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setEta$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setSampleRate(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #479                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setSampleRate$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setSubsample(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #483                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setSubsample$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setColSampleRate(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #487                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setColSampleRate$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setColSampleByLevel(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #491                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setColSampleByLevel$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setColSampleRatePerTree(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #495                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setColSampleRatePerTree$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setColSampleByTree(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #499                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setColSampleByTree$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setColSampleByNode(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #503                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setColSampleByNode$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setMaxAbsLeafnodePred(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #509                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setMaxAbsLeafnodePred$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;F)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setMaxDeltaStep(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #514                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setMaxDeltaStep$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;F)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setScoreTreeInterval(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #518                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setScoreTreeInterval$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setSeed(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #524                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setSeed$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;J)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setMinSplitImprovement(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #529                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setMinSplitImprovement$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;F)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setGamma(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #533                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setGamma$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;F)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setNthread(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #537                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setNthread$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setBuildTreeOneNode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #543                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setBuildTreeOneNode$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setSaveMatrixDirectory(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #550                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setSaveMatrixDirectory$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setCalibrateModel(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #554                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setCalibrateModel$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setCalibrationMethod(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #558                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setCalibrationMethod$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setMaxBins(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #562                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setMaxBins$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setMaxLeaves(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #566                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setMaxLeaves$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setTreeMethod(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #570                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setTreeMethod$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setGrowPolicy(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #574                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setGrowPolicy$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setBooster(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #578                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setBooster$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setRegLambda(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #582                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setRegLambda$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;F)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setRegAlpha(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #586                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setRegAlpha$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;F)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setQuietMode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #590                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setQuietMode$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setSampleType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #594                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setSampleType$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setNormalizeType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #598                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setNormalizeType$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setRateDrop(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #602                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setRateDrop$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;F)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setOneDrop(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #606                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setOneDrop$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setSkipDrop(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #610                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setSkipDrop$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;F)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setDmatrixType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #614                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setDmatrixType$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setBackend(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #618                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setBackend$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setGpuId(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #624                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setGpuId$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;[I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setInteractionConstraints(java.lang.String[][]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #631                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setInteractionConstraints$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;[[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setScalePosWeight(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #636                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setScalePosWeight$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;F)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setEvalMetric(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #640                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setEvalMetric$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setScoreEvalMetricOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #644                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setScoreEvalMetricOnly$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setModelId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #648                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setModelId$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setNfolds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #652                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setNfolds$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setKeepCrossValidationModels(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #656                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setKeepCrossValidationPredictions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #660                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setKeepCrossValidationFoldAssignment(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #664                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setParallelizeCrossValidation(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #668                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setParallelizeCrossValidation$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setDistribution(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #672                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setDistribution$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setTweediePower(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #676                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setTweediePower$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setLabelCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #680                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setLabelCol$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setWeightCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #684                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setWeightCol$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setOffsetCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #688                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setOffsetCol$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #692                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setFoldCol$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setFoldAssignment(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #696                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setCategoricalEncoding(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #700                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setCategoricalEncoding$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setIgnoreConstCols(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #704                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setScoreEachIteration(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #708                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Z)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setStoppingRounds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #712                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setStoppingRounds$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setMaxRuntimeSecs(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #716                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setStoppingMetric(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #720                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setStoppingMetric$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setStoppingTolerance(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #724                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setStoppingTolerance$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;D)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setGainsliftBins(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #728                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setGainsliftBins$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setExportCheckpointsDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #732                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OXGBoostParams setAucType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #736                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.setAucType$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #741                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2OXGBoostParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #745                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getH2OXGBoostParams$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.String> getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #750                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasIgnoredCols$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #756                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;)Lscala/collection/immutable/Map;
       4: areturn

  public java.lang.String[] getIgnoredCols();
    Code:
       0: aload_0
       1: invokestatic  #762                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)[Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasIgnoredCols setIgnoredCols(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #768                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.setIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/HasIgnoredCols;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getIgnoredColsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #774                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredColsParam$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #780                // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;)Lscala/collection/immutable/Map;
       4: areturn

  public org.apache.spark.sql.Dataset<org.apache.spark.sql.Row> getCalibrationDataFrame();
    Code:
       0: aload_0
       1: invokestatic  #787                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.getCalibrationDataFrame$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;)Lorg/apache/spark/sql/Dataset;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasCalibrationDataFrame setCalibrationDataFrame(org.apache.spark.sql.Dataset<org.apache.spark.sql.Row>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #794                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.setCalibrationDataFrame$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getCalibrationDataFrameParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #800                // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.getCalibrationDataFrameParam$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #804                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getMonotoneConstraints();
    Code:
       0: aload_0
       1: invokestatic  #809                // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.getMonotoneConstraints$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;)Lscala/collection/immutable/Map;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasMonotoneConstraints setMonotoneConstraints(scala.collection.immutable.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #816                // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.setMonotoneConstraints$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;Lscala/collection/immutable/Map;)Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getMonotoneConstraintsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #822                // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.getMonotoneConstraintsParam$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public org.apache.spark.ml.param.IntParam ntrees();
    Code:
       0: aload_0
       1: getfield      #825                // Field ntrees:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxDepth();
    Code:
       0: aload_0
       1: getfield      #827                // Field maxDepth:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam minRows();
    Code:
       0: aload_0
       1: getfield      #830                // Field minRows:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam minChildWeight();
    Code:
       0: aload_0
       1: getfield      #832                // Field minChildWeight:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam learnRate();
    Code:
       0: aload_0
       1: getfield      #834                // Field learnRate:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam eta();
    Code:
       0: aload_0
       1: getfield      #836                // Field eta:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam sampleRate();
    Code:
       0: aload_0
       1: getfield      #838                // Field sampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam subsample();
    Code:
       0: aload_0
       1: getfield      #840                // Field subsample:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleRate();
    Code:
       0: aload_0
       1: getfield      #842                // Field colSampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleByLevel();
    Code:
       0: aload_0
       1: getfield      #844                // Field colSampleByLevel:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleRatePerTree();
    Code:
       0: aload_0
       1: getfield      #846                // Field colSampleRatePerTree:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleByTree();
    Code:
       0: aload_0
       1: getfield      #848                // Field colSampleByTree:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam colSampleByNode();
    Code:
       0: aload_0
       1: getfield      #850                // Field colSampleByNode:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam maxAbsLeafnodePred();
    Code:
       0: aload_0
       1: getfield      #853                // Field maxAbsLeafnodePred:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam maxDeltaStep();
    Code:
       0: aload_0
       1: getfield      #855                // Field maxDeltaStep:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam scoreTreeInterval();
    Code:
       0: aload_0
       1: getfield      #857                // Field scoreTreeInterval:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.LongParam seed();
    Code:
       0: aload_0
       1: getfield      #860                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam minSplitImprovement();
    Code:
       0: aload_0
       1: getfield      #862                // Field minSplitImprovement:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam gamma();
    Code:
       0: aload_0
       1: getfield      #864                // Field gamma:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nthread();
    Code:
       0: aload_0
       1: getfield      #866                // Field nthread:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam buildTreeOneNode();
    Code:
       0: aload_0
       1: getfield      #869                // Field buildTreeOneNode:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam saveMatrixDirectory();
    Code:
       0: aload_0
       1: getfield      #872                // Field saveMatrixDirectory:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam calibrateModel();
    Code:
       0: aload_0
       1: getfield      #874                // Field calibrateModel:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> calibrationMethod();
    Code:
       0: aload_0
       1: getfield      #878                // Field calibrationMethod:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxBins();
    Code:
       0: aload_0
       1: getfield      #880                // Field maxBins:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam maxLeaves();
    Code:
       0: aload_0
       1: getfield      #882                // Field maxLeaves:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> treeMethod();
    Code:
       0: aload_0
       1: getfield      #884                // Field treeMethod:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> growPolicy();
    Code:
       0: aload_0
       1: getfield      #886                // Field growPolicy:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> booster();
    Code:
       0: aload_0
       1: getfield      #888                // Field booster:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.FloatParam regLambda();
    Code:
       0: aload_0
       1: getfield      #890                // Field regLambda:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam regAlpha();
    Code:
       0: aload_0
       1: getfield      #892                // Field regAlpha:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam quietMode();
    Code:
       0: aload_0
       1: getfield      #894                // Field quietMode:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> sampleType();
    Code:
       0: aload_0
       1: getfield      #896                // Field sampleType:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> normalizeType();
    Code:
       0: aload_0
       1: getfield      #898                // Field normalizeType:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.FloatParam rateDrop();
    Code:
       0: aload_0
       1: getfield      #900                // Field rateDrop:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam oneDrop();
    Code:
       0: aload_0
       1: getfield      #902                // Field oneDrop:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam skipDrop();
    Code:
       0: aload_0
       1: getfield      #904                // Field skipDrop:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> dmatrixType();
    Code:
       0: aload_0
       1: getfield      #906                // Field dmatrixType:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> backend();
    Code:
       0: aload_0
       1: getfield      #908                // Field backend:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableIntArrayParam gpuId();
    Code:
       0: aload_0
       1: getfield      #911                // Field gpuId:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringArrayArrayParam interactionConstraints();
    Code:
       0: aload_0
       1: getfield      #914                // Field interactionConstraints:Lai/h2o/sparkling/ml/params/NullableStringArrayArrayParam;
       4: areturn

  public org.apache.spark.ml.param.FloatParam scalePosWeight();
    Code:
       0: aload_0
       1: getfield      #916                // Field scalePosWeight:Lorg/apache/spark/ml/param/FloatParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam evalMetric();
    Code:
       0: aload_0
       1: getfield      #918                // Field evalMetric:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam scoreEvalMetricOnly();
    Code:
       0: aload_0
       1: getfield      #920                // Field scoreEvalMetricOnly:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam modelId();
    Code:
       0: aload_0
       1: getfield      #922                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nfolds();
    Code:
       0: aload_0
       1: getfield      #924                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationModels();
    Code:
       0: aload_0
       1: getfield      #926                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions();
    Code:
       0: aload_0
       1: getfield      #928                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: getfield      #930                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam parallelizeCrossValidation();
    Code:
       0: aload_0
       1: getfield      #932                // Field parallelizeCrossValidation:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> distribution();
    Code:
       0: aload_0
       1: getfield      #934                // Field distribution:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam tweediePower();
    Code:
       0: aload_0
       1: getfield      #936                // Field tweediePower:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> labelCol();
    Code:
       0: aload_0
       1: getfield      #938                // Field labelCol:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam weightCol();
    Code:
       0: aload_0
       1: getfield      #940                // Field weightCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam offsetCol();
    Code:
       0: aload_0
       1: getfield      #942                // Field offsetCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam foldCol();
    Code:
       0: aload_0
       1: getfield      #944                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> foldAssignment();
    Code:
       0: aload_0
       1: getfield      #946                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> categoricalEncoding();
    Code:
       0: aload_0
       1: getfield      #948                // Field categoricalEncoding:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam ignoreConstCols();
    Code:
       0: aload_0
       1: getfield      #950                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam scoreEachIteration();
    Code:
       0: aload_0
       1: getfield      #952                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam stoppingRounds();
    Code:
       0: aload_0
       1: getfield      #954                // Field stoppingRounds:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam maxRuntimeSecs();
    Code:
       0: aload_0
       1: getfield      #956                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> stoppingMetric();
    Code:
       0: aload_0
       1: getfield      #958                // Field stoppingMetric:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam stoppingTolerance();
    Code:
       0: aload_0
       1: getfield      #960                // Field stoppingTolerance:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam gainsliftBins();
    Code:
       0: aload_0
       1: getfield      #962                // Field gainsliftBins:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir();
    Code:
       0: aload_0
       1: getfield      #964                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> aucType();
    Code:
       0: aload_0
       1: getfield      #966                // Field aucType:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$ntrees_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #825                // Field ntrees:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$maxDepth_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #827                // Field maxDepth:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$minRows_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #830                // Field minRows:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$minChildWeight_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #832                // Field minChildWeight:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$learnRate_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #834                // Field learnRate:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$eta_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #836                // Field eta:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$sampleRate_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #838                // Field sampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$subsample_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #840                // Field subsample:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$colSampleRate_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #842                // Field colSampleRate:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$colSampleByLevel_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #844                // Field colSampleByLevel:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$colSampleRatePerTree_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #846                // Field colSampleRatePerTree:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$colSampleByTree_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #848                // Field colSampleByTree:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$colSampleByNode_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #850                // Field colSampleByNode:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$maxAbsLeafnodePred_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #853                // Field maxAbsLeafnodePred:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$maxDeltaStep_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #855                // Field maxDeltaStep:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$scoreTreeInterval_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #857                // Field scoreTreeInterval:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$seed_$eq(org.apache.spark.ml.param.LongParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #860                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$minSplitImprovement_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #862                // Field minSplitImprovement:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$gamma_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #864                // Field gamma:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$nthread_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #866                // Field nthread:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$buildTreeOneNode_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #869                // Field buildTreeOneNode:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$saveMatrixDirectory_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #872                // Field saveMatrixDirectory:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$calibrateModel_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #874                // Field calibrateModel:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$calibrationMethod_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #878                // Field calibrationMethod:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$maxBins_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #880                // Field maxBins:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$maxLeaves_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #882                // Field maxLeaves:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$treeMethod_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #884                // Field treeMethod:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$growPolicy_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #886                // Field growPolicy:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$booster_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #888                // Field booster:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$regLambda_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #890                // Field regLambda:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$regAlpha_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #892                // Field regAlpha:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$quietMode_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #894                // Field quietMode:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$sampleType_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #896                // Field sampleType:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$normalizeType_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #898                // Field normalizeType:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$rateDrop_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #900                // Field rateDrop:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$oneDrop_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #902                // Field oneDrop:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$skipDrop_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #904                // Field skipDrop:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$dmatrixType_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #906                // Field dmatrixType:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$backend_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #908                // Field backend:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$gpuId_$eq(ai.h2o.sparkling.ml.params.NullableIntArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #911                // Field gpuId:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$interactionConstraints_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #914                // Field interactionConstraints:Lai/h2o/sparkling/ml/params/NullableStringArrayArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$scalePosWeight_$eq(org.apache.spark.ml.param.FloatParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #916                // Field scalePosWeight:Lorg/apache/spark/ml/param/FloatParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$evalMetric_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #918                // Field evalMetric:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$scoreEvalMetricOnly_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #920                // Field scoreEvalMetricOnly:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$modelId_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #922                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$nfolds_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #924                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$keepCrossValidationModels_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #926                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$keepCrossValidationPredictions_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #928                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$keepCrossValidationFoldAssignment_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #930                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$parallelizeCrossValidation_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #932                // Field parallelizeCrossValidation:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$distribution_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #934                // Field distribution:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$tweediePower_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #936                // Field tweediePower:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$labelCol_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #938                // Field labelCol:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$weightCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #940                // Field weightCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$offsetCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #942                // Field offsetCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$foldCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #944                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$foldAssignment_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #946                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$categoricalEncoding_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #948                // Field categoricalEncoding:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$ignoreConstCols_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #950                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$scoreEachIteration_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #952                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$stoppingRounds_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #954                // Field stoppingRounds:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$maxRuntimeSecs_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #956                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$stoppingMetric_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #958                // Field stoppingMetric:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$stoppingTolerance_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #960                // Field stoppingTolerance:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$gainsliftBins_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #962                // Field gainsliftBins:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$exportCheckpointsDir_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #964                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OXGBoostParams$_setter_$aucType_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #966                // Field aucType:Lorg/apache/spark/ml/param/Param;
       5: return

  public ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols();
    Code:
       0: aload_0
       1: getfield      #1047               // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasIgnoredCols$_setter_$ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1047               // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       5: return

  public ai.h2o.sparkling.ml.params.NullableDataFrameParam ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame();
    Code:
       0: aload_0
       1: getfield      #1052               // Field ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame:Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$_setter_$ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame_$eq(ai.h2o.sparkling.ml.params.NullableDataFrameParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1052               // Field ai$h2o$sparkling$ml$params$HasCalibrationDataFrame$$calibrationDataFrame:Lai/h2o/sparkling/ml/params/NullableDataFrameParam;
       5: return

  public ai.h2o.sparkling.ml.params.DictionaryParam ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints();
    Code:
       0: aload_0
       1: getfield      #1057               // Field ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints:Lai/h2o/sparkling/ml/params/DictionaryParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasMonotoneConstraints$_setter_$ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints_$eq(ai.h2o.sparkling.ml.params.DictionaryParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1057               // Field ai$h2o$sparkling$ml$params$HasMonotoneConstraints$$monotoneConstraints:Lai/h2o/sparkling/ml/params/DictionaryParam;
       5: return

  public java.lang.String uid();
    Code:
       0: aload_0
       1: getfield      #1061               // Field uid:Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.models.H2OXGBoostMOJOModel fit(org.apache.spark.sql.Dataset<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1068               // Method ai/h2o/sparkling/ml/algos/H2OTreeBasedSupervisedAlgorithm.fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OTreeBasedSupervisedMOJOModel;
       5: checkcast     #1070               // class ai/h2o/sparkling/ml/models/H2OXGBoostMOJOModel
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithmWithFoldColumn setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1073               // Method setFoldCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: checkcast     #1075               // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithmWithFoldColumn
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setOffsetCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1078               // Method setOffsetCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: checkcast     #1080               // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setWeightCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1082               // Method setWeightCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: checkcast     #1080               // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OSupervisedAlgorithm setLabelCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1084               // Method setLabelCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: checkcast     #1080               // class ai/h2o/sparkling/ml/algos/H2OSupervisedAlgorithm
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OTreeBasedSupervisedAlgorithm setNtrees(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #1087               // Method setNtrees:(I)Lai/h2o/sparkling/ml/params/H2OXGBoostParams;
       5: checkcast     #5                  // class ai/h2o/sparkling/ml/algos/H2OTreeBasedSupervisedAlgorithm
       8: areturn

  public org.apache.spark.ml.Model fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1090               // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OXGBoostMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1090               // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OXGBoostMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OAlgorithmMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1090               // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OXGBoostMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OSupervisedMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1090               // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OXGBoostMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OTreeBasedSupervisedMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1090               // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OXGBoostMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.algos.H2OXGBoost(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1061               // Field uid:Ljava/lang/String;
       5: aload_0
       6: getstatic     #1100               // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
       9: ldc           #15                 // class hex/tree/xgboost/XGBoostModel$XGBoostParameters
      11: invokevirtual #1104               // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      14: invokespecial #1107               // Method ai/h2o/sparkling/ml/algos/H2OTreeBasedSupervisedAlgorithm."<init>":(Lscala/reflect/ClassTag;)V
      17: aload_0
      18: invokestatic  #1111               // InterfaceMethod ai/h2o/sparkling/ml/params/HasMonotoneConstraints.$init$:(Lai/h2o/sparkling/ml/params/HasMonotoneConstraints;)V
      21: aload_0
      22: invokestatic  #1114               // InterfaceMethod ai/h2o/sparkling/ml/params/HasCalibrationDataFrame.$init$:(Lai/h2o/sparkling/ml/params/HasCalibrationDataFrame;)V
      25: aload_0
      26: invokestatic  #1117               // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.$init$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)V
      29: aload_0
      30: invokestatic  #1120               // InterfaceMethod ai/h2o/sparkling/ml/params/H2OXGBoostParams.$init$:(Lai/h2o/sparkling/ml/params/H2OXGBoostParams;)V
      33: aload_0
      34: invokestatic  #1123               // InterfaceMethod ai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation.$init$:(Lai/h2o/sparkling/ml/algos/DistributionBasedH2OTrainFramePreparation;)V
      37: return

  public ai.h2o.sparkling.ml.algos.H2OXGBoost();
    Code:
       0: aload_0
       1: getstatic     #1129               // Field org/apache/spark/ml/util/Identifiable$.MODULE$:Lorg/apache/spark/ml/util/Identifiable$;
       4: ldc           #2                  // class ai/h2o/sparkling/ml/algos/H2OXGBoost
       6: invokevirtual #1134               // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       9: invokevirtual #1138               // Method org/apache/spark/ml/util/Identifiable$.randomUID:(Ljava/lang/String;)Ljava/lang/String;
      12: invokespecial #1140               // Method "<init>":(Ljava/lang/String;)V
      15: return
}
