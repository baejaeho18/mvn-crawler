Compiled from "H2OKMeans.scala"
public class ai.h2o.sparkling.ml.algos.H2OKMeans extends ai.h2o.sparkling.ml.algos.H2OUnsupervisedAlgorithm<hex.kmeans.KMeansModel$KMeansParameters> implements ai.h2o.sparkling.ml.params.H2OKMeansParams, ai.h2o.sparkling.ml.algos.H2OKMeansExtras {
  private final java.lang.String uid;

  private final org.apache.spark.ml.param.IntParam maxIterations;

  private final org.apache.spark.ml.param.BooleanParam standardize;

  private final org.apache.spark.ml.param.LongParam seed;

  private final org.apache.spark.ml.param.Param<java.lang.String> init;

  private final org.apache.spark.ml.param.BooleanParam estimateK;

  private final ai.h2o.sparkling.ml.params.NullableIntArrayParam clusterSizeConstraints;

  private final org.apache.spark.ml.param.IntParam k;

  private final ai.h2o.sparkling.ml.params.NullableStringParam modelId;

  private final org.apache.spark.ml.param.IntParam nfolds;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationModels;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions;

  private final org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment;

  private final ai.h2o.sparkling.ml.params.NullableStringParam foldCol;

  private final org.apache.spark.ml.param.Param<java.lang.String> foldAssignment;

  private final org.apache.spark.ml.param.Param<java.lang.String> categoricalEncoding;

  private final org.apache.spark.ml.param.BooleanParam ignoreConstCols;

  private final org.apache.spark.ml.param.BooleanParam scoreEachIteration;

  private final org.apache.spark.ml.param.DoubleParam maxRuntimeSecs;

  private final ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir;

  private final ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols;

  private final ai.h2o.sparkling.ml.params.NullableDoubleArrayArrayParam ai$h2o$sparkling$ml$params$HasUserPoints$$userPoints;

  public static org.apache.spark.ml.util.MLReader<ai.h2o.sparkling.ml.algos.H2OKMeans> read();
    Code:
       0: getstatic     #60                 // Field ai/h2o/sparkling/ml/algos/H2OKMeans$.MODULE$:Lai/h2o/sparkling/ml/algos/H2OKMeans$;
       3: invokevirtual #62                 // Method ai/h2o/sparkling/ml/algos/H2OKMeans$.read:()Lorg/apache/spark/ml/util/MLReader;
       6: areturn

  public static java.lang.Object load(java.lang.String);
    Code:
       0: getstatic     #60                 // Field ai/h2o/sparkling/ml/algos/H2OKMeans$.MODULE$:Lai/h2o/sparkling/ml/algos/H2OKMeans$;
       3: aload_0
       4: invokevirtual #67                 // Method ai/h2o/sparkling/ml/algos/H2OKMeans$.load:(Ljava/lang/String;)Ljava/lang/Object;
       7: areturn

  public void ai$h2o$sparkling$ml$algos$H2OKMeansExtras$$super$prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OTrainFramePreparation.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/H2OTrainFramePreparation;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public scala.collection.Seq ai$h2o$sparkling$ml$algos$H2OKMeansExtras$$super$getExcludedCols();
    Code:
       0: aload_0
       1: invokestatic  #87                 // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OAlgoCommonUtils.getExcludedCols$:(Lai/h2o/sparkling/ml/algos/H2OAlgoCommonUtils;)Lscala/collection/Seq;
       4: areturn

  public void prepareH2OTrainFrameForFitting(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #92                 // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OKMeansExtras.prepareH2OTrainFrameForFitting$:(Lai/h2o/sparkling/ml/algos/H2OKMeansExtras;Lai/h2o/sparkling/H2OFrame;)V
       5: return

  public scala.collection.Seq<java.lang.String> getExcludedCols();
    Code:
       0: aload_0
       1: invokestatic  #97                 // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OKMeansExtras.getExcludedCols$:(Lai/h2o/sparkling/ml/algos/H2OKMeansExtras;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2OKMeansParams$$super$getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #106                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$H2OKMeansParams$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #114                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.reflect.ClassTag<hex.kmeans.KMeansModel$KMeansParameters> paramTag();
    Code:
       0: aload_0
       1: invokestatic  #121                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.paramTag$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Lscala/reflect/ClassTag;
       4: areturn

  public int getMaxIterations();
    Code:
       0: aload_0
       1: invokestatic  #127                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getMaxIterations$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)I
       4: ireturn

  public boolean getStandardize();
    Code:
       0: aload_0
       1: invokestatic  #133                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getStandardize$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Z
       4: ireturn

  public long getSeed();
    Code:
       0: aload_0
       1: invokestatic  #139                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getSeed$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)J
       4: lreturn

  public java.lang.String getInit();
    Code:
       0: aload_0
       1: invokestatic  #145                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getInit$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Ljava/lang/String;
       4: areturn

  public boolean getEstimateK();
    Code:
       0: aload_0
       1: invokestatic  #149                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getEstimateK$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Z
       4: ireturn

  public int[] getClusterSizeConstraints();
    Code:
       0: aload_0
       1: invokestatic  #155                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getClusterSizeConstraints$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)[I
       4: areturn

  public int getK();
    Code:
       0: aload_0
       1: invokestatic  #159                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getK$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)I
       4: ireturn

  public java.lang.String getModelId();
    Code:
       0: aload_0
       1: invokestatic  #163                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getModelId$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Ljava/lang/String;
       4: areturn

  public int getNfolds();
    Code:
       0: aload_0
       1: invokestatic  #167                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getNfolds$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)I
       4: ireturn

  public boolean getKeepCrossValidationModels();
    Code:
       0: aload_0
       1: invokestatic  #171                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationPredictions();
    Code:
       0: aload_0
       1: invokestatic  #175                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Z
       4: ireturn

  public boolean getKeepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #179                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Z
       4: ireturn

  public java.lang.String getFoldCol();
    Code:
       0: aload_0
       1: invokestatic  #183                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getFoldCol$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getFoldAssignment();
    Code:
       0: aload_0
       1: invokestatic  #187                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Ljava/lang/String;
       4: areturn

  public java.lang.String getCategoricalEncoding();
    Code:
       0: aload_0
       1: invokestatic  #191                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getCategoricalEncoding$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Ljava/lang/String;
       4: areturn

  public boolean getIgnoreConstCols();
    Code:
       0: aload_0
       1: invokestatic  #195                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Z
       4: ireturn

  public boolean getScoreEachIteration();
    Code:
       0: aload_0
       1: invokestatic  #199                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Z
       4: ireturn

  public double getMaxRuntimeSecs();
    Code:
       0: aload_0
       1: invokestatic  #205                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)D
       4: dreturn

  public java.lang.String getExportCheckpointsDir();
    Code:
       0: aload_0
       1: invokestatic  #209                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setMaxIterations(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #216                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setMaxIterations$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;I)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setStandardize(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #223                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setStandardize$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Z)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setSeed(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #230                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setSeed$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;J)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setInit(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #237                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setInit$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setEstimateK(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #241                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setEstimateK$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Z)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setClusterSizeConstraints(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #247                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setClusterSizeConstraints$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;[I)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setK(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #252                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setK$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;I)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setModelId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #256                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setModelId$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setNfolds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #260                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setNfolds$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;I)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setKeepCrossValidationModels(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #264                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setKeepCrossValidationModels$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Z)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setKeepCrossValidationPredictions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #268                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setKeepCrossValidationPredictions$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Z)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setKeepCrossValidationFoldAssignment(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #272                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setKeepCrossValidationFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Z)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #276                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setFoldCol$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setFoldAssignment(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #280                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setFoldAssignment$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setCategoricalEncoding(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #284                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setCategoricalEncoding$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setIgnoreConstCols(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #288                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setIgnoreConstCols$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Z)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setScoreEachIteration(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #292                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setScoreEachIteration$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Z)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setMaxRuntimeSecs(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #298                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setMaxRuntimeSecs$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;D)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.H2OKMeansParams setExportCheckpointsDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #303                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.setExportCheckpointsDir$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2OAlgorithmParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #308                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getH2OAlgorithmParams$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getH2OKMeansParams(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #312                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getH2OKMeansParams$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.String> getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #317                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)Lscala/collection/immutable/Map;
       4: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasIgnoredCols$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #323                // InterfaceMethod ai/h2o/sparkling/ml/params/HasUserPoints.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/HasUserPoints;)Lscala/collection/immutable/Map;
       4: areturn

  public java.lang.String[] getIgnoredCols();
    Code:
       0: aload_0
       1: invokestatic  #329                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)[Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.HasIgnoredCols setIgnoredCols(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #335                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.setIgnoredCols$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/HasIgnoredCols;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getIgnoredColsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #341                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.getIgnoredColsParam$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.immutable.Map ai$h2o$sparkling$ml$params$HasUserPoints$$super$getSWtoH2OParamNameMap();
    Code:
       0: aload_0
       1: invokestatic  #345                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OAlgoParamsBase.getSWtoH2OParamNameMap$:(Lai/h2o/sparkling/ml/params/H2OAlgoParamsBase;)Lscala/collection/immutable/Map;
       4: areturn

  public double[][] getUserPoints();
    Code:
       0: aload_0
       1: invokestatic  #351                // InterfaceMethod ai/h2o/sparkling/ml/params/HasUserPoints.getUserPoints$:(Lai/h2o/sparkling/ml/params/HasUserPoints;)[[D
       4: areturn

  public ai.h2o.sparkling.ml.params.HasUserPoints setUserPoints(double[][]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #357                // InterfaceMethod ai/h2o/sparkling/ml/params/HasUserPoints.setUserPoints$:(Lai/h2o/sparkling/ml/params/HasUserPoints;[[D)Lai/h2o/sparkling/ml/params/HasUserPoints;
       5: areturn

  public scala.collection.immutable.Map<java.lang.String, java.lang.Object> getUserPointsParam(ai.h2o.sparkling.H2OFrame);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #363                // InterfaceMethod ai/h2o/sparkling/ml/params/HasUserPoints.getUserPointsParam$:(Lai/h2o/sparkling/ml/params/HasUserPoints;Lai/h2o/sparkling/H2OFrame;)Lscala/collection/immutable/Map;
       5: areturn

  public org.apache.spark.ml.param.IntParam maxIterations();
    Code:
       0: aload_0
       1: getfield      #366                // Field maxIterations:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam standardize();
    Code:
       0: aload_0
       1: getfield      #369                // Field standardize:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.LongParam seed();
    Code:
       0: aload_0
       1: getfield      #372                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> init();
    Code:
       0: aload_0
       1: getfield      #376                // Field init:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam estimateK();
    Code:
       0: aload_0
       1: getfield      #378                // Field estimateK:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableIntArrayParam clusterSizeConstraints();
    Code:
       0: aload_0
       1: getfield      #381                // Field clusterSizeConstraints:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam k();
    Code:
       0: aload_0
       1: getfield      #383                // Field k:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam modelId();
    Code:
       0: aload_0
       1: getfield      #386                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.IntParam nfolds();
    Code:
       0: aload_0
       1: getfield      #388                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationModels();
    Code:
       0: aload_0
       1: getfield      #390                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationPredictions();
    Code:
       0: aload_0
       1: getfield      #392                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam keepCrossValidationFoldAssignment();
    Code:
       0: aload_0
       1: getfield      #394                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam foldCol();
    Code:
       0: aload_0
       1: getfield      #396                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> foldAssignment();
    Code:
       0: aload_0
       1: getfield      #398                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.Param<java.lang.String> categoricalEncoding();
    Code:
       0: aload_0
       1: getfield      #400                // Field categoricalEncoding:Lorg/apache/spark/ml/param/Param;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam ignoreConstCols();
    Code:
       0: aload_0
       1: getfield      #402                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.BooleanParam scoreEachIteration();
    Code:
       0: aload_0
       1: getfield      #404                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public org.apache.spark.ml.param.DoubleParam maxRuntimeSecs();
    Code:
       0: aload_0
       1: getfield      #407                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       4: areturn

  public ai.h2o.sparkling.ml.params.NullableStringParam exportCheckpointsDir();
    Code:
       0: aload_0
       1: getfield      #409                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       4: areturn

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$maxIterations_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #366                // Field maxIterations:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$standardize_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #369                // Field standardize:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$seed_$eq(org.apache.spark.ml.param.LongParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #372                // Field seed:Lorg/apache/spark/ml/param/LongParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$init_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #376                // Field init:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$estimateK_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #378                // Field estimateK:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$clusterSizeConstraints_$eq(ai.h2o.sparkling.ml.params.NullableIntArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #381                // Field clusterSizeConstraints:Lai/h2o/sparkling/ml/params/NullableIntArrayParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$k_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #383                // Field k:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$modelId_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #386                // Field modelId:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$nfolds_$eq(org.apache.spark.ml.param.IntParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #388                // Field nfolds:Lorg/apache/spark/ml/param/IntParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$keepCrossValidationModels_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #390                // Field keepCrossValidationModels:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$keepCrossValidationPredictions_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #392                // Field keepCrossValidationPredictions:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$keepCrossValidationFoldAssignment_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #394                // Field keepCrossValidationFoldAssignment:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$foldCol_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #396                // Field foldCol:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$foldAssignment_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #398                // Field foldAssignment:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$categoricalEncoding_$eq(org.apache.spark.ml.param.Param<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #400                // Field categoricalEncoding:Lorg/apache/spark/ml/param/Param;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$ignoreConstCols_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #402                // Field ignoreConstCols:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$scoreEachIteration_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #404                // Field scoreEachIteration:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$maxRuntimeSecs_$eq(org.apache.spark.ml.param.DoubleParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #407                // Field maxRuntimeSecs:Lorg/apache/spark/ml/param/DoubleParam;
       5: return

  public void ai$h2o$sparkling$ml$params$H2OKMeansParams$_setter_$exportCheckpointsDir_$eq(ai.h2o.sparkling.ml.params.NullableStringParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #409                // Field exportCheckpointsDir:Lai/h2o/sparkling/ml/params/NullableStringParam;
       5: return

  public ai.h2o.sparkling.ml.params.NullableStringArrayParam ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols();
    Code:
       0: aload_0
       1: getfield      #440                // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasIgnoredCols$_setter_$ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols_$eq(ai.h2o.sparkling.ml.params.NullableStringArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #440                // Field ai$h2o$sparkling$ml$params$HasIgnoredCols$$ignoredCols:Lai/h2o/sparkling/ml/params/NullableStringArrayParam;
       5: return

  public ai.h2o.sparkling.ml.params.NullableDoubleArrayArrayParam ai$h2o$sparkling$ml$params$HasUserPoints$$userPoints();
    Code:
       0: aload_0
       1: getfield      #445                // Field ai$h2o$sparkling$ml$params$HasUserPoints$$userPoints:Lai/h2o/sparkling/ml/params/NullableDoubleArrayArrayParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$HasUserPoints$_setter_$ai$h2o$sparkling$ml$params$HasUserPoints$$userPoints_$eq(ai.h2o.sparkling.ml.params.NullableDoubleArrayArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #445                // Field ai$h2o$sparkling$ml$params$HasUserPoints$$userPoints:Lai/h2o/sparkling/ml/params/NullableDoubleArrayArrayParam;
       5: return

  public java.lang.String uid();
    Code:
       0: aload_0
       1: getfield      #449                // Field uid:Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.models.H2OKMeansMOJOModel fit(org.apache.spark.sql.Dataset<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #456                // Method ai/h2o/sparkling/ml/algos/H2OUnsupervisedAlgorithm.fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OUnsupervisedMOJOModel;
       5: checkcast     #458                // class ai/h2o/sparkling/ml/models/H2OKMeansMOJOModel
       8: areturn

  public ai.h2o.sparkling.ml.algos.H2OKMeansExtras setFoldCol(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #462                // Method setFoldCol:(Ljava/lang/String;)Lai/h2o/sparkling/ml/params/H2OKMeansParams;
       5: checkcast     #9                  // class ai/h2o/sparkling/ml/algos/H2OKMeansExtras
       8: areturn

  public org.apache.spark.ml.Model fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #465                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OKMeansMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #465                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OKMeansMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OAlgorithmMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #465                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OKMeansMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.models.H2OUnsupervisedMOJOModel fit(org.apache.spark.sql.Dataset);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #465                // Method fit:(Lorg/apache/spark/sql/Dataset;)Lai/h2o/sparkling/ml/models/H2OKMeansMOJOModel;
       5: areturn

  public ai.h2o.sparkling.ml.algos.H2OKMeans(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #449                // Field uid:Ljava/lang/String;
       5: aload_0
       6: getstatic     #474                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
       9: ldc           #15                 // class hex/kmeans/KMeansModel$KMeansParameters
      11: invokevirtual #478                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      14: invokespecial #481                // Method ai/h2o/sparkling/ml/algos/H2OUnsupervisedAlgorithm."<init>":(Lscala/reflect/ClassTag;)V
      17: aload_0
      18: invokestatic  #485                // InterfaceMethod ai/h2o/sparkling/ml/params/HasUserPoints.$init$:(Lai/h2o/sparkling/ml/params/HasUserPoints;)V
      21: aload_0
      22: invokestatic  #488                // InterfaceMethod ai/h2o/sparkling/ml/params/HasIgnoredCols.$init$:(Lai/h2o/sparkling/ml/params/HasIgnoredCols;)V
      25: aload_0
      26: invokestatic  #491                // InterfaceMethod ai/h2o/sparkling/ml/params/H2OKMeansParams.$init$:(Lai/h2o/sparkling/ml/params/H2OKMeansParams;)V
      29: aload_0
      30: invokestatic  #494                // InterfaceMethod ai/h2o/sparkling/ml/algos/H2OKMeansExtras.$init$:(Lai/h2o/sparkling/ml/algos/H2OKMeansExtras;)V
      33: return

  public ai.h2o.sparkling.ml.algos.H2OKMeans();
    Code:
       0: aload_0
       1: getstatic     #500                // Field org/apache/spark/ml/util/Identifiable$.MODULE$:Lorg/apache/spark/ml/util/Identifiable$;
       4: ldc           #2                  // class ai/h2o/sparkling/ml/algos/H2OKMeans
       6: invokevirtual #505                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       9: invokevirtual #509                // Method org/apache/spark/ml/util/Identifiable$.randomUID:(Ljava/lang/String;)Ljava/lang/String;
      12: invokespecial #511                // Method "<init>":(Ljava/lang/String;)V
      15: return
}
