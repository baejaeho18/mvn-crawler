Compiled from "ColumnPruner.scala"
public class ai.h2o.sparkling.ml.features.ColumnPruner extends org.apache.spark.ml.Transformer implements ai.h2o.sparkling.ml.params.ColumnPrunerParams,org.apache.spark.ml.util.DefaultParamsWritable {
  private final java.lang.String uid;

  private final org.apache.spark.ml.param.BooleanParam ai$h2o$sparkling$ml$params$ColumnPrunerParams$$keep;

  private final org.apache.spark.ml.param.StringArrayParam ai$h2o$sparkling$ml$params$ColumnPrunerParams$$columns;

  public static org.apache.spark.ml.util.MLReader<ai.h2o.sparkling.ml.features.ColumnPruner> read();
    Code:
       0: getstatic     #37                 // Field ai/h2o/sparkling/ml/features/ColumnPruner$.MODULE$:Lai/h2o/sparkling/ml/features/ColumnPruner$;
       3: invokevirtual #39                 // Method ai/h2o/sparkling/ml/features/ColumnPruner$.read:()Lorg/apache/spark/ml/util/MLReader;
       6: areturn

  public static java.lang.Object load(java.lang.String);
    Code:
       0: getstatic     #37                 // Field ai/h2o/sparkling/ml/features/ColumnPruner$.MODULE$:Lai/h2o/sparkling/ml/features/ColumnPruner$;
       3: aload_0
       4: invokevirtual #44                 // Method ai/h2o/sparkling/ml/features/ColumnPruner$.load:(Ljava/lang/String;)Ljava/lang/Object;
       7: areturn

  public org.apache.spark.ml.util.MLWriter write();
    Code:
       0: aload_0
       1: invokestatic  #50                 // InterfaceMethod org/apache/spark/ml/util/DefaultParamsWritable.write$:(Lorg/apache/spark/ml/util/DefaultParamsWritable;)Lorg/apache/spark/ml/util/MLWriter;
       4: areturn

  public void save(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #62                 // InterfaceMethod org/apache/spark/ml/util/MLWritable.save$:(Lorg/apache/spark/ml/util/MLWritable;Ljava/lang/String;)V
       5: return

  public boolean getKeep();
    Code:
       0: aload_0
       1: invokestatic  #68                 // InterfaceMethod ai/h2o/sparkling/ml/params/ColumnPrunerParams.getKeep$:(Lai/h2o/sparkling/ml/params/ColumnPrunerParams;)Z
       4: ireturn

  public java.lang.String[] getColumns();
    Code:
       0: aload_0
       1: invokestatic  #74                 // InterfaceMethod ai/h2o/sparkling/ml/params/ColumnPrunerParams.getColumns$:(Lai/h2o/sparkling/ml/params/ColumnPrunerParams;)[Ljava/lang/String;
       4: areturn

  public ai.h2o.sparkling.ml.params.ColumnPrunerParams setKeep(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #81                 // InterfaceMethod ai/h2o/sparkling/ml/params/ColumnPrunerParams.setKeep$:(Lai/h2o/sparkling/ml/params/ColumnPrunerParams;Z)Lai/h2o/sparkling/ml/params/ColumnPrunerParams;
       5: areturn

  public ai.h2o.sparkling.ml.params.ColumnPrunerParams setColumns(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #88                 // InterfaceMethod ai/h2o/sparkling/ml/params/ColumnPrunerParams.setColumns$:(Lai/h2o/sparkling/ml/params/ColumnPrunerParams;[Ljava/lang/String;)Lai/h2o/sparkling/ml/params/ColumnPrunerParams;
       5: areturn

  public final org.apache.spark.ml.param.BooleanParam ai$h2o$sparkling$ml$params$ColumnPrunerParams$$keep();
    Code:
       0: aload_0
       1: getfield      #92                 // Field ai$h2o$sparkling$ml$params$ColumnPrunerParams$$keep:Lorg/apache/spark/ml/param/BooleanParam;
       4: areturn

  public final org.apache.spark.ml.param.StringArrayParam ai$h2o$sparkling$ml$params$ColumnPrunerParams$$columns();
    Code:
       0: aload_0
       1: getfield      #95                 // Field ai$h2o$sparkling$ml$params$ColumnPrunerParams$$columns:Lorg/apache/spark/ml/param/StringArrayParam;
       4: areturn

  public final void ai$h2o$sparkling$ml$params$ColumnPrunerParams$_setter_$ai$h2o$sparkling$ml$params$ColumnPrunerParams$$keep_$eq(org.apache.spark.ml.param.BooleanParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #92                 // Field ai$h2o$sparkling$ml$params$ColumnPrunerParams$$keep:Lorg/apache/spark/ml/param/BooleanParam;
       5: return

  public final void ai$h2o$sparkling$ml$params$ColumnPrunerParams$_setter_$ai$h2o$sparkling$ml$params$ColumnPrunerParams$$columns_$eq(org.apache.spark.ml.param.StringArrayParam);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #95                 // Field ai$h2o$sparkling$ml$params$ColumnPrunerParams$$columns:Lorg/apache/spark/ml/param/StringArrayParam;
       5: return

  public java.lang.String uid();
    Code:
       0: aload_0
       1: getfield      #103                // Field uid:Ljava/lang/String;
       4: areturn

  public org.apache.spark.sql.types.StructType transformSchema(org.apache.spark.sql.types.StructType);
    Code:
       0: aload_0
       1: invokevirtual #109                // Method getKeep:()Z
       4: ifeq          42
       7: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
      10: dup
      11: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      14: aload_1
      15: invokevirtual #119                // Method org/apache/spark/sql/types/StructType.fieldNames:()[Ljava/lang/String;
      18: checkcast     #121                // class "[Ljava/lang/Object;"
      21: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      24: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      27: aload_0
      28: invokedynamic #152,  0            // InvokeDynamic #0:apply:(Lai/h2o/sparkling/ml/features/ColumnPruner;)Lscala/Function1;
      33: invokevirtual #156                // Method scala/collection/mutable/ArrayOps$ofRef.filter:(Lscala/Function1;)Ljava/lang/Object;
      36: checkcast     #157                // class "[Ljava/lang/String;"
      39: goto          74
      42: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
      45: dup
      46: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      49: aload_1
      50: invokevirtual #119                // Method org/apache/spark/sql/types/StructType.fieldNames:()[Ljava/lang/String;
      53: checkcast     #121                // class "[Ljava/lang/Object;"
      56: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      59: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      62: aload_0
      63: invokedynamic #162,  0            // InvokeDynamic #1:apply:(Lai/h2o/sparkling/ml/features/ColumnPruner;)Lscala/Function1;
      68: invokevirtual #156                // Method scala/collection/mutable/ArrayOps$ofRef.filter:(Lscala/Function1;)Ljava/lang/Object;
      71: checkcast     #157                // class "[Ljava/lang/String;"
      74: astore_2
      75: new           #116                // class org/apache/spark/sql/types/StructType
      78: dup
      79: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
      82: dup
      83: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      86: aload_2
      87: checkcast     #121                // class "[Ljava/lang/Object;"
      90: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      93: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      96: aload_1
      97: invokedynamic #172,  0            // InvokeDynamic #2:apply:(Lorg/apache/spark/sql/types/StructType;)Lscala/Function1;
     102: getstatic     #177                // Field scala/Array$.MODULE$:Lscala/Array$;
     105: getstatic     #182                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
     108: ldc           #184                // class org/apache/spark/sql/types/StructField
     110: invokevirtual #187                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
     113: invokevirtual #191                // Method scala/Array$.canBuildFrom:(Lscala/reflect/ClassTag;)Lscala/collection/generic/CanBuildFrom;
     116: invokevirtual #195                // Method scala/collection/mutable/ArrayOps$ofRef.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     119: checkcast     #197                // class "[Lorg/apache/spark/sql/types/StructField;"
     122: invokespecial #200                // Method org/apache/spark/sql/types/StructType."<init>":([Lorg/apache/spark/sql/types/StructField;)V
     125: areturn

  public org.apache.spark.sql.Dataset<org.apache.spark.sql.Row> transform(org.apache.spark.sql.Dataset<?>);
    Code:
       0: aload_0
       1: invokevirtual #109                // Method getKeep:()Z
       4: ifeq          42
       7: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
      10: dup
      11: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      14: aload_1
      15: invokevirtual #211                // Method org/apache/spark/sql/Dataset.columns:()[Ljava/lang/String;
      18: checkcast     #121                // class "[Ljava/lang/Object;"
      21: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      24: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      27: aload_0
      28: invokedynamic #216,  0            // InvokeDynamic #3:apply:(Lai/h2o/sparkling/ml/features/ColumnPruner;)Lscala/Function1;
      33: invokevirtual #156                // Method scala/collection/mutable/ArrayOps$ofRef.filter:(Lscala/Function1;)Ljava/lang/Object;
      36: checkcast     #157                // class "[Ljava/lang/String;"
      39: goto          74
      42: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
      45: dup
      46: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      49: aload_1
      50: invokevirtual #211                // Method org/apache/spark/sql/Dataset.columns:()[Ljava/lang/String;
      53: checkcast     #121                // class "[Ljava/lang/Object;"
      56: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      59: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      62: aload_0
      63: invokedynamic #221,  0            // InvokeDynamic #4:apply:(Lai/h2o/sparkling/ml/features/ColumnPruner;)Lscala/Function1;
      68: invokevirtual #156                // Method scala/collection/mutable/ArrayOps$ofRef.filter:(Lscala/Function1;)Ljava/lang/Object;
      71: checkcast     #157                // class "[Ljava/lang/String;"
      74: astore_2
      75: aload_1
      76: invokestatic  #227                // Method scala/runtime/ObjectRef.create:(Ljava/lang/Object;)Lscala/runtime/ObjectRef;
      79: astore_3
      80: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
      83: dup
      84: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      87: aload_2
      88: checkcast     #121                // class "[Ljava/lang/Object;"
      91: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      94: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      97: aload_3
      98: invokedynamic #235,  0            // InvokeDynamic #5:apply:(Lscala/runtime/ObjectRef;)Lscala/Function1;
     103: invokevirtual #239                // Method scala/collection/mutable/ArrayOps$ofRef.foreach:(Lscala/Function1;)V
     106: aload_3
     107: getfield      #243                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
     110: checkcast     #208                // class org/apache/spark/sql/Dataset
     113: invokevirtual #247                // Method org/apache/spark/sql/Dataset.toDF:()Lorg/apache/spark/sql/Dataset;
     116: areturn

  public org.apache.spark.ml.Transformer copy(org.apache.spark.ml.param.ParamMap);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #258                // Method defaultCopy:(Lorg/apache/spark/ml/param/ParamMap;)Lorg/apache/spark/ml/param/Params;
       5: checkcast     #4                  // class org/apache/spark/ml/Transformer
       8: areturn

  public org.apache.spark.ml.param.Params copy(org.apache.spark.ml.param.ParamMap);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #261                // Method copy:(Lorg/apache/spark/ml/param/ParamMap;)Lorg/apache/spark/ml/Transformer;
       5: areturn

  public org.apache.spark.ml.PipelineStage copy(org.apache.spark.ml.param.ParamMap);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #261                // Method copy:(Lorg/apache/spark/ml/param/ParamMap;)Lorg/apache/spark/ml/Transformer;
       5: areturn

  public static final boolean $anonfun$transformSchema$1(ai.h2o.sparkling.ml.features.ColumnPruner, java.lang.String);
    Code:
       0: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
       3: dup
       4: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: aload_0
       8: invokevirtual #267                // Method getColumns:()[Ljava/lang/String;
      11: checkcast     #121                // class "[Ljava/lang/Object;"
      14: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      17: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      20: aload_1
      21: invokevirtual #271                // Method scala/collection/mutable/ArrayOps$ofRef.contains:(Ljava/lang/Object;)Z
      24: ireturn

  public static final boolean $anonfun$transformSchema$2(ai.h2o.sparkling.ml.features.ColumnPruner, java.lang.String);
    Code:
       0: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
       3: dup
       4: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: aload_0
       8: invokevirtual #267                // Method getColumns:()[Ljava/lang/String;
      11: checkcast     #121                // class "[Ljava/lang/Object;"
      14: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      17: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      20: aload_1
      21: invokevirtual #271                // Method scala/collection/mutable/ArrayOps$ofRef.contains:(Ljava/lang/Object;)Z
      24: ifne          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public static final org.apache.spark.sql.types.StructField $anonfun$transformSchema$3(org.apache.spark.sql.types.StructType, java.lang.String);
    Code:
       0: new           #184                // class org/apache/spark/sql/types/StructField
       3: dup
       4: aload_1
       5: aload_0
       6: aload_1
       7: invokevirtual #277                // Method org/apache/spark/sql/types/StructType.apply:(Ljava/lang/String;)Lorg/apache/spark/sql/types/StructField;
      10: invokevirtual #281                // Method org/apache/spark/sql/types/StructField.dataType:()Lorg/apache/spark/sql/types/DataType;
      13: aload_0
      14: aload_1
      15: invokevirtual #277                // Method org/apache/spark/sql/types/StructType.apply:(Ljava/lang/String;)Lorg/apache/spark/sql/types/StructField;
      18: invokevirtual #284                // Method org/apache/spark/sql/types/StructField.nullable:()Z
      21: aload_0
      22: aload_1
      23: invokevirtual #277                // Method org/apache/spark/sql/types/StructType.apply:(Ljava/lang/String;)Lorg/apache/spark/sql/types/StructField;
      26: invokevirtual #288                // Method org/apache/spark/sql/types/StructField.metadata:()Lorg/apache/spark/sql/types/Metadata;
      29: invokespecial #291                // Method org/apache/spark/sql/types/StructField."<init>":(Ljava/lang/String;Lorg/apache/spark/sql/types/DataType;ZLorg/apache/spark/sql/types/Metadata;)V
      32: areturn

  public static final boolean $anonfun$transform$1(ai.h2o.sparkling.ml.features.ColumnPruner, java.lang.String);
    Code:
       0: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
       3: dup
       4: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: aload_0
       8: invokevirtual #267                // Method getColumns:()[Ljava/lang/String;
      11: checkcast     #121                // class "[Ljava/lang/Object;"
      14: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      17: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      20: aload_1
      21: invokevirtual #271                // Method scala/collection/mutable/ArrayOps$ofRef.contains:(Ljava/lang/Object;)Z
      24: ifne          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public static final boolean $anonfun$transform$2(ai.h2o.sparkling.ml.features.ColumnPruner, java.lang.String);
    Code:
       0: new           #19                 // class scala/collection/mutable/ArrayOps$ofRef
       3: dup
       4: getstatic     #114                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: aload_0
       8: invokevirtual #267                // Method getColumns:()[Ljava/lang/String;
      11: checkcast     #121                // class "[Ljava/lang/Object;"
      14: invokevirtual #125                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      17: invokespecial #129                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      20: aload_1
      21: invokevirtual #271                // Method scala/collection/mutable/ArrayOps$ofRef.contains:(Ljava/lang/Object;)Z
      24: ireturn

  public static final void $anonfun$transform$3(scala.runtime.ObjectRef, java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #243                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
       5: checkcast     #208                // class org/apache/spark/sql/Dataset
       8: aload_1
       9: invokevirtual #302                // Method org/apache/spark/sql/Dataset.drop:(Ljava/lang/String;)Lorg/apache/spark/sql/Dataset;
      12: putfield      #243                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
      15: return

  public ai.h2o.sparkling.ml.features.ColumnPruner(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #103                // Field uid:Ljava/lang/String;
       5: aload_0
       6: invokespecial #305                // Method org/apache/spark/ml/Transformer."<init>":()V
       9: aload_0
      10: invokestatic  #309                // InterfaceMethod ai/h2o/sparkling/ml/params/ColumnPrunerParams.$init$:(Lai/h2o/sparkling/ml/params/ColumnPrunerParams;)V
      13: aload_0
      14: invokestatic  #312                // InterfaceMethod org/apache/spark/ml/util/MLWritable.$init$:(Lorg/apache/spark/ml/util/MLWritable;)V
      17: aload_0
      18: invokestatic  #315                // InterfaceMethod org/apache/spark/ml/util/DefaultParamsWritable.$init$:(Lorg/apache/spark/ml/util/DefaultParamsWritable;)V
      21: return

  public ai.h2o.sparkling.ml.features.ColumnPruner();
    Code:
       0: aload_0
       1: getstatic     #320                // Field org/apache/spark/ml/util/Identifiable$.MODULE$:Lorg/apache/spark/ml/util/Identifiable$;
       4: ldc_w         #322                // String columnPruner
       7: invokevirtual #326                // Method org/apache/spark/ml/util/Identifiable$.randomUID:(Ljava/lang/String;)Ljava/lang/String;
      10: invokespecial #328                // Method "<init>":(Ljava/lang/String;)V
      13: return

  public static final java.lang.Object $anonfun$transformSchema$1$adapted(ai.h2o.sparkling.ml.features.ColumnPruner, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #330                // Method $anonfun$transformSchema$1:(Lai/h2o/sparkling/ml/features/ColumnPruner;Ljava/lang/String;)Z
       5: invokestatic  #336                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       8: areturn

  public static final java.lang.Object $anonfun$transformSchema$2$adapted(ai.h2o.sparkling.ml.features.ColumnPruner, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #338                // Method $anonfun$transformSchema$2:(Lai/h2o/sparkling/ml/features/ColumnPruner;Ljava/lang/String;)Z
       5: invokestatic  #336                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       8: areturn

  public static final java.lang.Object $anonfun$transform$1$adapted(ai.h2o.sparkling.ml.features.ColumnPruner, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #340                // Method $anonfun$transform$1:(Lai/h2o/sparkling/ml/features/ColumnPruner;Ljava/lang/String;)Z
       5: invokestatic  #336                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       8: areturn

  public static final java.lang.Object $anonfun$transform$2$adapted(ai.h2o.sparkling.ml.features.ColumnPruner, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #342                // Method $anonfun$transform$2:(Lai/h2o/sparkling/ml/features/ColumnPruner;Ljava/lang/String;)Z
       5: invokestatic  #336                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       8: areturn

  public static final java.lang.Object $anonfun$transform$3$adapted(scala.runtime.ObjectRef, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #344                // Method $anonfun$transform$3:(Lscala/runtime/ObjectRef;Ljava/lang/String;)V
       5: getstatic     #350                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
       8: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #362,  0            // InvokeDynamic #6:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
