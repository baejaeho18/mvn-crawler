Compiled from "CosmosEntity.java"
public final class io.micronaut.data.cosmos.common.CosmosEntity {
  private static final org.slf4j.Logger LOG;

  private static final java.util.Collection<io.micronaut.data.model.DataType> IDENTITY_DATA_TYPES;

  private static final java.util.Map<io.micronaut.data.model.runtime.RuntimePersistentEntity<?>, io.micronaut.data.cosmos.common.CosmosEntity> COSMOS_ENTITY_BY_PERSISTENT_ENTITY;

  private final java.lang.String containerName;

  private final java.lang.String partitionKey;

  private final java.lang.String versionField;

  private io.micronaut.data.cosmos.common.CosmosEntity(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #7                  // Field containerName:Ljava/lang/String;
       9: aload_0
      10: aload_2
      11: putfield      #13                 // Field partitionKey:Ljava/lang/String;
      14: aload_0
      15: aload_3
      16: putfield      #16                 // Field versionField:Ljava/lang/String;
      19: return

  public java.lang.String getContainerName();
    Code:
       0: aload_0
       1: getfield      #7                  // Field containerName:Ljava/lang/String;
       4: areturn

  public java.lang.String getPartitionKey();
    Code:
       0: aload_0
       1: getfield      #13                 // Field partitionKey:Ljava/lang/String;
       4: areturn

  public java.lang.String getVersionField();
    Code:
       0: aload_0
       1: getfield      #16                 // Field versionField:Ljava/lang/String;
       4: areturn

  public static io.micronaut.data.cosmos.common.CosmosEntity create(io.micronaut.data.model.runtime.RuntimePersistentEntity<?>, io.micronaut.data.cosmos.config.CosmosDatabaseConfiguration$CosmosContainerSettings);
    Code:
       0: getstatic     #19                 // Field COSMOS_ENTITY_BY_PERSISTENT_ENTITY:Ljava/util/Map;
       3: aload_0
       4: aload_0
       5: aload_1
       6: invokedynamic #23,  0             // InvokeDynamic #0:apply:(Lio/micronaut/data/model/runtime/RuntimePersistentEntity;Lio/micronaut/data/cosmos/config/CosmosDatabaseConfiguration$CosmosContainerSettings;)Ljava/util/function/Function;
      11: invokeinterface #27,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      16: checkcast     #8                  // class io/micronaut/data/cosmos/common/CosmosEntity
      19: areturn

  public static io.micronaut.data.cosmos.common.CosmosEntity get(io.micronaut.data.model.runtime.RuntimePersistentEntity<?>);
    Code:
       0: getstatic     #19                 // Field COSMOS_ENTITY_BY_PERSISTENT_ENTITY:Ljava/util/Map;
       3: aload_0
       4: invokeinterface #33,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #8                  // class io/micronaut/data/cosmos/common/CosmosEntity
      12: areturn

  private static io.micronaut.data.cosmos.common.CosmosEntity createCosmosEntity(io.micronaut.data.model.runtime.RuntimePersistentEntity<?>, io.micronaut.data.cosmos.config.CosmosDatabaseConfiguration$CosmosContainerSettings);
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method io/micronaut/data/model/runtime/RuntimePersistentEntity.getPersistedName:()Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: aload_1
       7: invokestatic  #43                 // Method getPartitionKey:(Lio/micronaut/data/model/runtime/RuntimePersistentEntity;Lio/micronaut/data/cosmos/config/CosmosDatabaseConfiguration$CosmosContainerSettings;)Ljava/lang/String;
      10: astore_3
      11: aconst_null
      12: astore        4
      14: aload_0
      15: invokevirtual #47                 // Method io/micronaut/data/model/runtime/RuntimePersistentEntity.getPersistentProperties:()Ljava/util/Collection;
      18: invokeinterface #51,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      23: astore        5
      25: aload         5
      27: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          94
      35: aload         5
      37: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: checkcast     #67                 // class io/micronaut/data/model/runtime/RuntimePersistentProperty
      45: astore        6
      47: aload         6
      49: invokevirtual #69                 // Method io/micronaut/data/model/runtime/RuntimePersistentProperty.getAnnotationMetadata:()Lio/micronaut/core/annotation/AnnotationMetadata;
      52: ldc           #73                 // class io/micronaut/data/cosmos/annotation/ETag
      54: invokeinterface #75,  2           // InterfaceMethod io/micronaut/core/annotation/AnnotationMetadata.hasStereotype:(Ljava/lang/Class;)Z
      59: ifeq          91
      62: aload         4
      64: ifnull        84
      67: new           #81                 // class java/lang/IllegalStateException
      70: dup
      71: aload_0
      72: invokevirtual #37                 // Method io/micronaut/data/model/runtime/RuntimePersistentEntity.getPersistedName:()Ljava/lang/String;
      75: invokedynamic #83,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      80: invokespecial #87                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: aload         6
      86: invokevirtual #90                 // Method io/micronaut/data/model/runtime/RuntimePersistentProperty.getName:()Ljava/lang/String;
      89: astore        4
      91: goto          25
      94: new           #8                  // class io/micronaut/data/cosmos/common/CosmosEntity
      97: dup
      98: aload_2
      99: aload_3
     100: aload         4
     102: invokespecial #93                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     105: areturn

  private static java.lang.String getPartitionKey(io.micronaut.data.model.runtime.RuntimePersistentEntity<?>, io.micronaut.data.cosmos.config.CosmosDatabaseConfiguration$CosmosContainerSettings);
    Code:
       0: aload_1
       1: ifnull        22
       4: aload_1
       5: invokevirtual #96                 // Method io/micronaut/data/cosmos/config/CosmosDatabaseConfiguration$CosmosContainerSettings.getPartitionKeyPath:()Ljava/lang/String;
       8: invokestatic  #101                // Method io/micronaut/core/util/StringUtils.isNotEmpty:(Ljava/lang/CharSequence;)Z
      11: ifeq          22
      14: aload_1
      15: invokevirtual #96                 // Method io/micronaut/data/cosmos/config/CosmosDatabaseConfiguration$CosmosContainerSettings.getPartitionKeyPath:()Ljava/lang/String;
      18: astore_2
      19: goto          27
      22: aload_0
      23: invokestatic  #107                // Method findPartitionKey:(Lio/micronaut/data/model/runtime/RuntimePersistentEntity;)Ljava/lang/String;
      26: astore_2
      27: aload_2
      28: invokestatic  #101                // Method io/micronaut/core/util/StringUtils.isNotEmpty:(Ljava/lang/CharSequence;)Z
      31: ifeq          52
      34: aload_2
      35: ldc           #113                // String /
      37: invokevirtual #115                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      40: ifne          50
      43: aload_2
      44: invokedynamic #121,  0            // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      49: astore_2
      50: aload_2
      51: areturn
      52: getstatic     #122                // Field LOG:Lorg/slf4j/Logger;
      55: invokeinterface #126,  1          // InterfaceMethod org/slf4j/Logger.isInfoEnabled:()Z
      60: ifeq          77
      63: getstatic     #122                // Field LOG:Lorg/slf4j/Logger;
      66: ldc           #131                // String Fallback to default partition key value since none is defined for entity {}
      68: aload_0
      69: invokevirtual #37                 // Method io/micronaut/data/model/runtime/RuntimePersistentEntity.getPersistedName:()Ljava/lang/String;
      72: invokeinterface #133,  3          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      77: ldc           #137                // String /null
      79: areturn

  private static void validateIdentity(io.micronaut.data.model.runtime.RuntimePersistentEntity<?>, io.micronaut.data.model.PersistentProperty);
    Code:
       0: aload_1
       1: invokeinterface #139,  1          // InterfaceMethod io/micronaut/data/model/PersistentProperty.getDataType:()Lio/micronaut/data/model/DataType;
       6: astore_2
       7: getstatic     #145                // Field IDENTITY_DATA_TYPES:Ljava/util/Collection;
      10: aload_2
      11: invokeinterface #149,  2          // InterfaceMethod java/util/Collection.contains:(Ljava/lang/Object;)Z
      16: ifne          36
      19: new           #81                 // class java/lang/IllegalStateException
      22: dup
      23: aload_0
      24: invokevirtual #37                 // Method io/micronaut/data/model/runtime/RuntimePersistentEntity.getPersistedName:()Ljava/lang/String;
      27: invokedynamic #153,  0            // InvokeDynamic #3:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      32: invokespecial #87                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: return

  private static java.lang.String findPartitionKey(io.micronaut.data.model.runtime.RuntimePersistentEntity<?>);
    Code:
       0: ldc           #154                // String
       2: astore_1
       3: new           #156                // class java/util/ArrayList
       6: dup
       7: aload_0
       8: invokevirtual #47                 // Method io/micronaut/data/model/runtime/RuntimePersistentEntity.getPersistentProperties:()Ljava/util/Collection;
      11: invokespecial #158                // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      14: astore_2
      15: aload_0
      16: invokevirtual #161                // Method io/micronaut/data/model/runtime/RuntimePersistentEntity.getIdentity:()Lio/micronaut/data/model/runtime/RuntimePersistentProperty;
      19: astore_3
      20: aload_3
      21: ifnull        37
      24: aload_0
      25: aload_3
      26: invokestatic  #165                // Method validateIdentity:(Lio/micronaut/data/model/runtime/RuntimePersistentEntity;Lio/micronaut/data/model/PersistentProperty;)V
      29: aload_2
      30: iconst_0
      31: aload_3
      32: invokeinterface #169,  3          // InterfaceMethod java/util/List.add:(ILjava/lang/Object;)V
      37: aload_2
      38: invokeinterface #175,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      43: astore        4
      45: aload         4
      47: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      52: ifeq          149
      55: aload         4
      57: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      62: checkcast     #140                // class io/micronaut/data/model/PersistentProperty
      65: astore        5
      67: aload         5
      69: ldc           #176                // class io/micronaut/data/cosmos/annotation/PartitionKey
      71: invokeinterface #178,  2          // InterfaceMethod io/micronaut/data/model/PersistentProperty.getAnnotation:(Ljava/lang/Class;)Lio/micronaut/core/annotation/AnnotationValue;
      76: astore        6
      78: aload         6
      80: ifnull        146
      83: aload_1
      84: invokestatic  #101                // Method io/micronaut/core/util/StringUtils.isNotEmpty:(Ljava/lang/CharSequence;)Z
      87: ifeq          107
      90: new           #81                 // class java/lang/IllegalStateException
      93: dup
      94: aload_0
      95: invokevirtual #37                 // Method io/micronaut/data/model/runtime/RuntimePersistentEntity.getPersistedName:()Ljava/lang/String;
      98: invokedynamic #182,  0            // InvokeDynamic #4:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
     103: invokespecial #87                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     106: athrow
     107: aload         6
     109: ldc           #183                // String value
     111: invokevirtual #185                // Method io/micronaut/core/annotation/AnnotationValue.stringValue:(Ljava/lang/String;)Ljava/util/Optional;
     114: ldc           #154                // String
     116: invokevirtual #191                // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
     119: checkcast     #116                // class java/lang/String
     122: astore        7
     124: aload         7
     126: invokestatic  #101                // Method io/micronaut/core/util/StringUtils.isNotEmpty:(Ljava/lang/CharSequence;)Z
     129: ifeq          138
     132: aload         7
     134: astore_1
     135: goto          146
     138: aload         5
     140: invokeinterface #196,  1          // InterfaceMethod io/micronaut/data/model/PersistentProperty.getName:()Ljava/lang/String;
     145: astore_1
     146: goto          45
     149: aload_1
     150: areturn

  private static io.micronaut.data.cosmos.common.CosmosEntity lambda$create$0(io.micronaut.data.model.runtime.RuntimePersistentEntity, io.micronaut.data.cosmos.config.CosmosDatabaseConfiguration$CosmosContainerSettings, io.micronaut.data.model.runtime.RuntimePersistentEntity);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #197                // Method createCosmosEntity:(Lio/micronaut/data/model/runtime/RuntimePersistentEntity;Lio/micronaut/data/cosmos/config/CosmosDatabaseConfiguration$CosmosContainerSettings;)Lio/micronaut/data/cosmos/common/CosmosEntity;
       5: areturn

  static {};
    Code:
       0: ldc           #8                  // class io/micronaut/data/cosmos/common/CosmosEntity
       2: invokestatic  #201                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #122                // Field LOG:Lorg/slf4j/Logger;
       8: new           #207                // class java/util/concurrent/ConcurrentHashMap
      11: dup
      12: invokespecial #209                // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      15: putstatic     #19                 // Field COSMOS_ENTITY_BY_PERSISTENT_ENTITY:Ljava/util/Map;
      18: getstatic     #210                // Field io/micronaut/data/model/DataType.SHORT:Lio/micronaut/data/model/DataType;
      21: getstatic     #216                // Field io/micronaut/data/model/DataType.INTEGER:Lio/micronaut/data/model/DataType;
      24: getstatic     #219                // Field io/micronaut/data/model/DataType.LONG:Lio/micronaut/data/model/DataType;
      27: getstatic     #222                // Field io/micronaut/data/model/DataType.STRING:Lio/micronaut/data/model/DataType;
      30: getstatic     #225                // Field io/micronaut/data/model/DataType.UUID:Lio/micronaut/data/model/DataType;
      33: invokestatic  #228                // InterfaceMethod java/util/List.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;
      36: putstatic     #145                // Field IDENTITY_DATA_TYPES:Ljava/util/Collection;
      39: return
}
