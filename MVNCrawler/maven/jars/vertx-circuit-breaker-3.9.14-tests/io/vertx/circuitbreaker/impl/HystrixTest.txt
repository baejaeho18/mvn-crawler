Compiled from "HystrixTest.java"
public class io.vertx.circuitbreaker.impl.HystrixTest {
  private io.vertx.core.Vertx vertx;

  private io.vertx.core.http.HttpServer http;

  private io.vertx.core.http.HttpClient client;

  public io.vertx.circuitbreaker.impl.HystrixTest();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void setUp();
    Code:
       0: aload_0
       1: invokestatic  #2                  // InterfaceMethod io/vertx/core/Vertx.vertx:()Lio/vertx/core/Vertx;
       4: putfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
       7: aload_0
       8: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
      11: invokestatic  #4                  // InterfaceMethod io/vertx/ext/web/Router.router:(Lio/vertx/core/Vertx;)Lio/vertx/ext/web/Router;
      14: astore_1
      15: aload_1
      16: getstatic     #5                  // Field io/vertx/core/http/HttpMethod.GET:Lio/vertx/core/http/HttpMethod;
      19: ldc           #6                  // String /
      21: invokeinterface #7,  3            // InterfaceMethod io/vertx/ext/web/Router.route:(Lio/vertx/core/http/HttpMethod;Ljava/lang/String;)Lio/vertx/ext/web/Route;
      26: invokedynamic #8,  0              // InvokeDynamic #0:handle:()Lio/vertx/core/Handler;
      31: invokeinterface #9,  2            // InterfaceMethod io/vertx/ext/web/Route.handler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/Route;
      36: pop
      37: aload_1
      38: getstatic     #5                  // Field io/vertx/core/http/HttpMethod.GET:Lio/vertx/core/http/HttpMethod;
      41: ldc           #10                 // String /error
      43: invokeinterface #7,  3            // InterfaceMethod io/vertx/ext/web/Router.route:(Lio/vertx/core/http/HttpMethod;Ljava/lang/String;)Lio/vertx/ext/web/Route;
      48: invokedynamic #11,  0             // InvokeDynamic #1:handle:()Lio/vertx/core/Handler;
      53: invokeinterface #9,  2            // InterfaceMethod io/vertx/ext/web/Route.handler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/Route;
      58: pop
      59: aload_1
      60: getstatic     #5                  // Field io/vertx/core/http/HttpMethod.GET:Lio/vertx/core/http/HttpMethod;
      63: ldc           #12                 // String /long
      65: invokeinterface #7,  3            // InterfaceMethod io/vertx/ext/web/Router.route:(Lio/vertx/core/http/HttpMethod;Ljava/lang/String;)Lio/vertx/ext/web/Route;
      70: invokedynamic #13,  0             // InvokeDynamic #2:handle:()Lio/vertx/core/Handler;
      75: invokeinterface #9,  2            // InterfaceMethod io/vertx/ext/web/Route.handler:(Lio/vertx/core/Handler;)Lio/vertx/ext/web/Route;
      80: pop
      81: new           #14                 // class java/util/concurrent/atomic/AtomicBoolean
      84: dup
      85: invokespecial #15                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      88: astore_2
      89: aload_0
      90: aload_0
      91: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
      94: invokeinterface #16,  1           // InterfaceMethod io/vertx/core/Vertx.createHttpServer:()Lio/vertx/core/http/HttpServer;
      99: aload_1
     100: invokeinterface #17,  2           // InterfaceMethod io/vertx/core/http/HttpServer.requestHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/http/HttpServer;
     105: sipush        8080
     108: aload_2
     109: invokedynamic #18,  0             // InvokeDynamic #3:handle:(Ljava/util/concurrent/atomic/AtomicBoolean;)Lio/vertx/core/Handler;
     114: invokeinterface #19,  3           // InterfaceMethod io/vertx/core/http/HttpServer.listen:(ILio/vertx/core/Handler;)Lio/vertx/core/http/HttpServer;
     119: putfield      #20                 // Field http:Lio/vertx/core/http/HttpServer;
     122: invokestatic  #21                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
     125: aload_2
     126: iconst_1
     127: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     130: invokestatic  #23                 // Method org/hamcrest/core/Is.is:(Ljava/lang/Object;)Lorg/hamcrest/Matcher;
     133: invokevirtual #24                 // Method com/jayway/awaitility/core/ConditionFactory.untilAtomic:(Ljava/util/concurrent/atomic/AtomicBoolean;Lorg/hamcrest/Matcher;)V
     136: aload_0
     137: aload_0
     138: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
     141: new           #25                 // class io/vertx/core/http/HttpClientOptions
     144: dup
     145: invokespecial #26                 // Method io/vertx/core/http/HttpClientOptions."<init>":()V
     148: sipush        8080
     151: invokevirtual #27                 // Method io/vertx/core/http/HttpClientOptions.setDefaultPort:(I)Lio/vertx/core/http/HttpClientOptions;
     154: ldc           #28                 // String localhost
     156: invokevirtual #29                 // Method io/vertx/core/http/HttpClientOptions.setDefaultHost:(Ljava/lang/String;)Lio/vertx/core/http/HttpClientOptions;
     159: invokeinterface #30,  2           // InterfaceMethod io/vertx/core/Vertx.createHttpClient:(Lio/vertx/core/http/HttpClientOptions;)Lio/vertx/core/http/HttpClient;
     164: putfield      #31                 // Field client:Lio/vertx/core/http/HttpClient;
     167: return

  public void tearDown();
    Code:
       0: new           #14                 // class java/util/concurrent/atomic/AtomicBoolean
       3: dup
       4: invokespecial #15                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #20                 // Field http:Lio/vertx/core/http/HttpServer;
      12: aload_1
      13: invokedynamic #32,  0             // InvokeDynamic #4:handle:(Ljava/util/concurrent/atomic/AtomicBoolean;)Lio/vertx/core/Handler;
      18: invokeinterface #33,  2           // InterfaceMethod io/vertx/core/http/HttpServer.close:(Lio/vertx/core/Handler;)V
      23: invokestatic  #21                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
      26: aload_1
      27: iconst_1
      28: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      31: invokestatic  #23                 // Method org/hamcrest/core/Is.is:(Ljava/lang/Object;)Lorg/hamcrest/Matcher;
      34: invokevirtual #24                 // Method com/jayway/awaitility/core/ConditionFactory.untilAtomic:(Ljava/util/concurrent/atomic/AtomicBoolean;Lorg/hamcrest/Matcher;)V
      37: aload_1
      38: iconst_0
      39: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      42: aload_0
      43: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
      46: aload_1
      47: invokedynamic #35,  0             // InvokeDynamic #5:handle:(Ljava/util/concurrent/atomic/AtomicBoolean;)Lio/vertx/core/Handler;
      52: invokeinterface #36,  2           // InterfaceMethod io/vertx/core/Vertx.close:(Lio/vertx/core/Handler;)V
      57: invokestatic  #21                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
      60: aload_1
      61: iconst_1
      62: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      65: invokestatic  #23                 // Method org/hamcrest/core/Is.is:(Ljava/lang/Object;)Lorg/hamcrest/Matcher;
      68: invokevirtual #24                 // Method com/jayway/awaitility/core/ConditionFactory.untilAtomic:(Ljava/util/concurrent/atomic/AtomicBoolean;Lorg/hamcrest/Matcher;)V
      71: aload_0
      72: getfield      #31                 // Field client:Lio/vertx/core/http/HttpClient;
      75: invokeinterface #37,  1           // InterfaceMethod io/vertx/core/http/HttpClient.close:()V
      80: return

  public void testOk() throws java.lang.Exception;
    Code:
       0: new           #38                 // class java/util/concurrent/atomic/AtomicReference
       3: dup
       4: invokespecial #39                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
      12: aload_0
      13: aload_1
      14: invokedynamic #40,  0             // InvokeDynamic #6:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;Ljava/util/concurrent/atomic/AtomicReference;)Lio/vertx/core/Handler;
      19: invokeinterface #41,  2           // InterfaceMethod io/vertx/core/Vertx.runOnContext:(Lio/vertx/core/Handler;)V
      24: invokestatic  #21                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
      27: aload_1
      28: invokedynamic #42,  0             // InvokeDynamic #7:call:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/concurrent/Callable;
      33: invokevirtual #43                 // Method com/jayway/awaitility/core/ConditionFactory.until:(Ljava/util/concurrent/Callable;)V
      36: aload_1
      37: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      40: checkcast     #45                 // class java/lang/String
      43: invokestatic  #46                 // Method org/assertj/core/api/Assertions.assertThat:(Ljava/lang/String;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
      46: ldc           #47                 // String hello
      48: invokevirtual #48                 // Method org/assertj/core/api/AbstractCharSequenceAssert.isEqualToIgnoringCase:(Ljava/lang/CharSequence;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
      51: pop
      52: aload_1
      53: aconst_null
      54: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      57: aload_0
      58: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
      61: aload_0
      62: aload_1
      63: invokedynamic #50,  0             // InvokeDynamic #8:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;Ljava/util/concurrent/atomic/AtomicReference;)Lio/vertx/core/Handler;
      68: invokeinterface #41,  2           // InterfaceMethod io/vertx/core/Vertx.runOnContext:(Lio/vertx/core/Handler;)V
      73: invokestatic  #21                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
      76: aload_1
      77: invokedynamic #51,  0             // InvokeDynamic #9:call:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/concurrent/Callable;
      82: invokevirtual #43                 // Method com/jayway/awaitility/core/ConditionFactory.until:(Ljava/util/concurrent/Callable;)V
      85: aload_1
      86: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      89: checkcast     #45                 // class java/lang/String
      92: invokestatic  #46                 // Method org/assertj/core/api/Assertions.assertThat:(Ljava/lang/String;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
      95: ldc           #47                 // String hello
      97: invokevirtual #48                 // Method org/assertj/core/api/AbstractCharSequenceAssert.isEqualToIgnoringCase:(Ljava/lang/CharSequence;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
     100: pop
     101: return

  public void testFailure() throws java.lang.Exception;
    Code:
       0: new           #38                 // class java/util/concurrent/atomic/AtomicReference
       3: dup
       4: invokespecial #39                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
      12: aload_0
      13: aload_1
      14: invokedynamic #52,  0             // InvokeDynamic #10:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;Ljava/util/concurrent/atomic/AtomicReference;)Lio/vertx/core/Handler;
      19: invokeinterface #41,  2           // InterfaceMethod io/vertx/core/Vertx.runOnContext:(Lio/vertx/core/Handler;)V
      24: invokestatic  #21                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
      27: aload_1
      28: invokedynamic #53,  0             // InvokeDynamic #11:call:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/concurrent/Callable;
      33: invokevirtual #43                 // Method com/jayway/awaitility/core/ConditionFactory.until:(Ljava/util/concurrent/Callable;)V
      36: aload_1
      37: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      40: checkcast     #45                 // class java/lang/String
      43: invokestatic  #46                 // Method org/assertj/core/api/Assertions.assertThat:(Ljava/lang/String;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
      46: ldc           #54                 // String fallback
      48: invokevirtual #48                 // Method org/assertj/core/api/AbstractCharSequenceAssert.isEqualToIgnoringCase:(Ljava/lang/CharSequence;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
      51: pop
      52: aload_1
      53: aconst_null
      54: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      57: aload_0
      58: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
      61: aload_0
      62: aload_1
      63: invokedynamic #55,  0             // InvokeDynamic #12:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;Ljava/util/concurrent/atomic/AtomicReference;)Lio/vertx/core/Handler;
      68: invokeinterface #41,  2           // InterfaceMethod io/vertx/core/Vertx.runOnContext:(Lio/vertx/core/Handler;)V
      73: invokestatic  #21                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
      76: aload_1
      77: invokedynamic #56,  0             // InvokeDynamic #13:call:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/concurrent/Callable;
      82: invokevirtual #43                 // Method com/jayway/awaitility/core/ConditionFactory.until:(Ljava/util/concurrent/Callable;)V
      85: aload_1
      86: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      89: checkcast     #45                 // class java/lang/String
      92: invokestatic  #46                 // Method org/assertj/core/api/Assertions.assertThat:(Ljava/lang/String;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
      95: ldc           #54                 // String fallback
      97: invokevirtual #48                 // Method org/assertj/core/api/AbstractCharSequenceAssert.isEqualToIgnoringCase:(Ljava/lang/CharSequence;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
     100: pop
     101: return

  public void testObservable() throws java.lang.Exception;
    Code:
       0: new           #38                 // class java/util/concurrent/atomic/AtomicReference
       3: dup
       4: invokespecial #39                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
      12: aload_0
      13: aload_1
      14: invokedynamic #57,  0             // InvokeDynamic #14:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;Ljava/util/concurrent/atomic/AtomicReference;)Lio/vertx/core/Handler;
      19: invokeinterface #41,  2           // InterfaceMethod io/vertx/core/Vertx.runOnContext:(Lio/vertx/core/Handler;)V
      24: invokestatic  #21                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
      27: aload_1
      28: invokedynamic #58,  0             // InvokeDynamic #15:call:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/concurrent/Callable;
      33: invokevirtual #43                 // Method com/jayway/awaitility/core/ConditionFactory.until:(Ljava/util/concurrent/Callable;)V
      36: aload_1
      37: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      40: checkcast     #45                 // class java/lang/String
      43: invokestatic  #46                 // Method org/assertj/core/api/Assertions.assertThat:(Ljava/lang/String;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
      46: ldc           #47                 // String hello
      48: invokevirtual #48                 // Method org/assertj/core/api/AbstractCharSequenceAssert.isEqualToIgnoringCase:(Ljava/lang/CharSequence;)Lorg/assertj/core/api/AbstractCharSequenceAssert;
      51: pop
      52: return

  private void checkSetter(java.util.concurrent.atomic.AtomicReference<java.lang.String>, java.lang.String);
    Code:
       0: invokestatic  #59                 // InterfaceMethod io/vertx/core/Context.isOnEventLoopThread:()Z
       3: ifeq          14
       6: aload_1
       7: aload_2
       8: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      11: goto          20
      14: aload_1
      15: ldc           #60                 // String Not on the event loop
      17: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      20: return

  private static java.lang.Boolean lambda$testObservable$25(java.util.concurrent.atomic.AtomicReference) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  private void lambda$testObservable$24(java.util.concurrent.atomic.AtomicReference, java.lang.Void);
    Code:
       0: aload_0
       1: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
       4: invokeinterface #61,  1           // InterfaceMethod io/vertx/core/Vertx.getOrCreateContext:()Lio/vertx/core/Context;
       9: astore_3
      10: new           #62                 // class io/vertx/circuitbreaker/impl/HttpClientCommand
      13: dup
      14: aload_0
      15: getfield      #31                 // Field client:Lio/vertx/core/http/HttpClient;
      18: ldc           #6                  // String /
      20: invokespecial #63                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand."<init>":(Lio/vertx/core/http/HttpClient;Ljava/lang/String;)V
      23: astore        4
      25: aload         4
      27: invokevirtual #64                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand.observe:()Lrx/Observable;
      30: aload_0
      31: aload_3
      32: aload_1
      33: invokedynamic #65,  0             // InvokeDynamic #16:call:(Lio/vertx/circuitbreaker/impl/HystrixTest;Lio/vertx/core/Context;Ljava/util/concurrent/atomic/AtomicReference;)Lrx/functions/Action1;
      38: invokevirtual #66                 // Method rx/Observable.subscribe:(Lrx/functions/Action1;)Lrx/Subscription;
      41: pop
      42: return

  private void lambda$null$23(io.vertx.core.Context, java.util.concurrent.atomic.AtomicReference, java.lang.String);
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: aload_3
       4: invokedynamic #67,  0             // InvokeDynamic #17:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/String;)Lio/vertx/core/Handler;
       9: invokeinterface #68,  2           // InterfaceMethod io/vertx/core/Context.runOnContext:(Lio/vertx/core/Handler;)V
      14: return

  private void lambda$null$22(java.util.concurrent.atomic.AtomicReference, java.lang.String, java.lang.Void);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #69                 // Method checkSetter:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/String;)V
       6: return

  private static java.lang.Boolean lambda$testFailure$21(java.util.concurrent.atomic.AtomicReference) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  private void lambda$testFailure$20(java.util.concurrent.atomic.AtomicReference, java.lang.Void);
    Code:
       0: aload_0
       1: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
       4: aload_0
       5: invokedynamic #70,  0             // InvokeDynamic #18:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;)Lio/vertx/core/Handler;
      10: aload_1
      11: invokedynamic #71,  0             // InvokeDynamic #19:handle:(Ljava/util/concurrent/atomic/AtomicReference;)Lio/vertx/core/Handler;
      16: invokeinterface #72,  3           // InterfaceMethod io/vertx/core/Vertx.executeBlocking:(Lio/vertx/core/Handler;Lio/vertx/core/Handler;)V
      21: return

  private static void lambda$null$19(java.util.concurrent.atomic.AtomicReference, io.vertx.core.AsyncResult);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #73,  1           // InterfaceMethod io/vertx/core/AsyncResult.result:()Ljava/lang/Object;
       7: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      10: return

  private void lambda$null$18(io.vertx.core.Promise);
    Code:
       0: new           #62                 // class io/vertx/circuitbreaker/impl/HttpClientCommand
       3: dup
       4: aload_0
       5: getfield      #31                 // Field client:Lio/vertx/core/http/HttpClient;
       8: ldc           #10                 // String /error
      10: invokespecial #63                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand."<init>":(Lio/vertx/core/http/HttpClient;Ljava/lang/String;)V
      13: astore_2
      14: aload_1
      15: aload_2
      16: invokevirtual #74                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand.queue:()Ljava/util/concurrent/Future;
      19: invokeinterface #75,  1           // InterfaceMethod java/util/concurrent/Future.get:()Ljava/lang/Object;
      24: invokeinterface #76,  2           // InterfaceMethod io/vertx/core/Promise.complete:(Ljava/lang/Object;)V
      29: goto          40
      32: astore_3
      33: aload_1
      34: aload_3
      35: invokeinterface #78,  2           // InterfaceMethod io/vertx/core/Promise.fail:(Ljava/lang/Throwable;)V
      40: return
    Exception table:
       from    to  target type
          14    29    32   Class java/lang/Exception

  private static java.lang.Boolean lambda$testFailure$17(java.util.concurrent.atomic.AtomicReference) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  private void lambda$testFailure$16(java.util.concurrent.atomic.AtomicReference, java.lang.Void);
    Code:
       0: aload_0
       1: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
       4: aload_0
       5: invokedynamic #79,  0             // InvokeDynamic #20:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;)Lio/vertx/core/Handler;
      10: aload_1
      11: invokedynamic #80,  0             // InvokeDynamic #21:handle:(Ljava/util/concurrent/atomic/AtomicReference;)Lio/vertx/core/Handler;
      16: invokeinterface #72,  3           // InterfaceMethod io/vertx/core/Vertx.executeBlocking:(Lio/vertx/core/Handler;Lio/vertx/core/Handler;)V
      21: return

  private static void lambda$null$15(java.util.concurrent.atomic.AtomicReference, io.vertx.core.AsyncResult);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #73,  1           // InterfaceMethod io/vertx/core/AsyncResult.result:()Ljava/lang/Object;
       7: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      10: return

  private void lambda$null$14(io.vertx.core.Promise);
    Code:
       0: new           #62                 // class io/vertx/circuitbreaker/impl/HttpClientCommand
       3: dup
       4: aload_0
       5: getfield      #31                 // Field client:Lio/vertx/core/http/HttpClient;
       8: ldc           #10                 // String /error
      10: invokespecial #63                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand."<init>":(Lio/vertx/core/http/HttpClient;Ljava/lang/String;)V
      13: astore_2
      14: aload_1
      15: aload_2
      16: invokevirtual #81                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand.execute:()Ljava/lang/Object;
      19: invokeinterface #76,  2           // InterfaceMethod io/vertx/core/Promise.complete:(Ljava/lang/Object;)V
      24: return

  private static java.lang.Boolean lambda$testOk$13(java.util.concurrent.atomic.AtomicReference) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  private void lambda$testOk$12(java.util.concurrent.atomic.AtomicReference, java.lang.Void);
    Code:
       0: aload_0
       1: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
       4: aload_0
       5: invokedynamic #82,  0             // InvokeDynamic #22:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;)Lio/vertx/core/Handler;
      10: aload_1
      11: invokedynamic #83,  0             // InvokeDynamic #23:handle:(Ljava/util/concurrent/atomic/AtomicReference;)Lio/vertx/core/Handler;
      16: invokeinterface #72,  3           // InterfaceMethod io/vertx/core/Vertx.executeBlocking:(Lio/vertx/core/Handler;Lio/vertx/core/Handler;)V
      21: return

  private static void lambda$null$11(java.util.concurrent.atomic.AtomicReference, io.vertx.core.AsyncResult);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #73,  1           // InterfaceMethod io/vertx/core/AsyncResult.result:()Ljava/lang/Object;
       7: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      10: return

  private void lambda$null$10(io.vertx.core.Promise);
    Code:
       0: new           #62                 // class io/vertx/circuitbreaker/impl/HttpClientCommand
       3: dup
       4: aload_0
       5: getfield      #31                 // Field client:Lio/vertx/core/http/HttpClient;
       8: ldc           #6                  // String /
      10: invokespecial #63                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand."<init>":(Lio/vertx/core/http/HttpClient;Ljava/lang/String;)V
      13: astore_2
      14: aload_1
      15: aload_2
      16: invokevirtual #74                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand.queue:()Ljava/util/concurrent/Future;
      19: invokeinterface #75,  1           // InterfaceMethod java/util/concurrent/Future.get:()Ljava/lang/Object;
      24: invokeinterface #76,  2           // InterfaceMethod io/vertx/core/Promise.complete:(Ljava/lang/Object;)V
      29: goto          40
      32: astore_3
      33: aload_1
      34: aload_3
      35: invokeinterface #78,  2           // InterfaceMethod io/vertx/core/Promise.fail:(Ljava/lang/Throwable;)V
      40: return
    Exception table:
       from    to  target type
          14    29    32   Class java/lang/Exception

  private static java.lang.Boolean lambda$testOk$9(java.util.concurrent.atomic.AtomicReference) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  private void lambda$testOk$8(java.util.concurrent.atomic.AtomicReference, java.lang.Void);
    Code:
       0: aload_0
       1: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
       4: aload_0
       5: invokedynamic #84,  0             // InvokeDynamic #24:handle:(Lio/vertx/circuitbreaker/impl/HystrixTest;)Lio/vertx/core/Handler;
      10: aload_1
      11: invokedynamic #85,  0             // InvokeDynamic #25:handle:(Ljava/util/concurrent/atomic/AtomicReference;)Lio/vertx/core/Handler;
      16: invokeinterface #72,  3           // InterfaceMethod io/vertx/core/Vertx.executeBlocking:(Lio/vertx/core/Handler;Lio/vertx/core/Handler;)V
      21: return

  private static void lambda$null$7(java.util.concurrent.atomic.AtomicReference, io.vertx.core.AsyncResult);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #73,  1           // InterfaceMethod io/vertx/core/AsyncResult.result:()Ljava/lang/Object;
       7: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      10: return

  private void lambda$null$6(io.vertx.core.Promise);
    Code:
       0: new           #62                 // class io/vertx/circuitbreaker/impl/HttpClientCommand
       3: dup
       4: aload_0
       5: getfield      #31                 // Field client:Lio/vertx/core/http/HttpClient;
       8: ldc           #6                  // String /
      10: invokespecial #63                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand."<init>":(Lio/vertx/core/http/HttpClient;Ljava/lang/String;)V
      13: astore_2
      14: aload_1
      15: aload_2
      16: invokevirtual #81                 // Method io/vertx/circuitbreaker/impl/HttpClientCommand.execute:()Ljava/lang/Object;
      19: invokeinterface #76,  2           // InterfaceMethod io/vertx/core/Promise.complete:(Ljava/lang/Object;)V
      24: return

  private static void lambda$tearDown$5(java.util.concurrent.atomic.AtomicBoolean, io.vertx.core.AsyncResult);
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       5: return

  private static void lambda$tearDown$4(java.util.concurrent.atomic.AtomicBoolean, io.vertx.core.AsyncResult);
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       5: return

  private static void lambda$setUp$3(java.util.concurrent.atomic.AtomicBoolean, io.vertx.core.AsyncResult);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #86,  1           // InterfaceMethod io/vertx/core/AsyncResult.succeeded:()Z
       7: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      10: return

  private static void lambda$setUp$2(io.vertx.ext.web.RoutingContext);
    Code:
       0: ldc2_w        #87                 // long 2000l
       3: invokestatic  #89                 // Method java/lang/Thread.sleep:(J)V
       6: goto          10
       9: astore_1
      10: aload_0
      11: invokeinterface #90,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.response:()Lio/vertx/core/http/HttpServerResponse;
      16: sipush        200
      19: invokeinterface #91,  2           // InterfaceMethod io/vertx/core/http/HttpServerResponse.setStatusCode:(I)Lio/vertx/core/http/HttpServerResponse;
      24: ldc           #47                 // String hello
      26: invokeinterface #92,  2           // InterfaceMethod io/vertx/core/http/HttpServerResponse.end:(Ljava/lang/String;)V
      31: return
    Exception table:
       from    to  target type
           0     6     9   Class java/lang/Exception

  private static void lambda$setUp$1(io.vertx.ext.web.RoutingContext);
    Code:
       0: aload_0
       1: invokeinterface #90,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.response:()Lio/vertx/core/http/HttpServerResponse;
       6: sipush        500
       9: invokeinterface #91,  2           // InterfaceMethod io/vertx/core/http/HttpServerResponse.setStatusCode:(I)Lio/vertx/core/http/HttpServerResponse;
      14: ldc           #93                 // String failed !
      16: invokeinterface #92,  2           // InterfaceMethod io/vertx/core/http/HttpServerResponse.end:(Ljava/lang/String;)V
      21: return

  private static void lambda$setUp$0(io.vertx.ext.web.RoutingContext);
    Code:
       0: aload_0
       1: invokeinterface #90,  1           // InterfaceMethod io/vertx/ext/web/RoutingContext.response:()Lio/vertx/core/http/HttpServerResponse;
       6: sipush        200
       9: invokeinterface #91,  2           // InterfaceMethod io/vertx/core/http/HttpServerResponse.setStatusCode:(I)Lio/vertx/core/http/HttpServerResponse;
      14: ldc           #47                 // String hello
      16: invokeinterface #92,  2           // InterfaceMethod io/vertx/core/http/HttpServerResponse.end:(Ljava/lang/String;)V
      21: return
}
