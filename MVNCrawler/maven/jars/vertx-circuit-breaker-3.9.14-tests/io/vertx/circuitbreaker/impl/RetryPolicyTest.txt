Compiled from "RetryPolicyTest.java"
public class io.vertx.circuitbreaker.impl.RetryPolicyTest {
  private io.vertx.core.Vertx vertx;

  public io.vertx.circuitbreaker.impl.RetryPolicyTest();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void setup();
    Code:
       0: aload_0
       1: invokestatic  #2                  // InterfaceMethod io/vertx/core/Vertx.vertx:()Lio/vertx/core/Vertx;
       4: putfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
       7: return

  public void tearDown();
    Code:
       0: aload_0
       1: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
       4: invokeinterface #4,  1            // InterfaceMethod io/vertx/core/Vertx.close:()V
       9: return

  public void testWithRetryPolicy();
    Code:
       0: aload_0
       1: invokedynamic #5,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       6: invokespecial #6                  // Method runRetryPolicyTest:(Ljava/util/function/Function;)V
       9: return

  public void testWithZeroRetryPolicy();
    Code:
       0: aload_0
       1: invokedynamic #7,  0              // InvokeDynamic #1:apply:()Ljava/util/function/Function;
       6: invokespecial #6                  // Method runRetryPolicyTest:(Ljava/util/function/Function;)V
       9: return

  public void testWithNegativeRetryPolicy();
    Code:
       0: aload_0
       1: invokedynamic #8,  0              // InvokeDynamic #2:apply:()Ljava/util/function/Function;
       6: invokespecial #6                  // Method runRetryPolicyTest:(Ljava/util/function/Function;)V
       9: return

  private void runRetryPolicyTest(java.util.function.Function<java.lang.Integer, java.lang.Long>);
    Code:
       0: ldc           #9                  // String my-circuit-breaker
       2: aload_0
       3: getfield      #3                  // Field vertx:Lio/vertx/core/Vertx;
       6: new           #10                 // class io/vertx/circuitbreaker/CircuitBreakerOptions
       9: dup
      10: invokespecial #11                 // Method io/vertx/circuitbreaker/CircuitBreakerOptions."<init>":()V
      13: iconst_5
      14: invokevirtual #12                 // Method io/vertx/circuitbreaker/CircuitBreakerOptions.setMaxFailures:(I)Lio/vertx/circuitbreaker/CircuitBreakerOptions;
      17: iconst_5
      18: invokevirtual #13                 // Method io/vertx/circuitbreaker/CircuitBreakerOptions.setMaxRetries:(I)Lio/vertx/circuitbreaker/CircuitBreakerOptions;
      21: invokestatic  #14                 // InterfaceMethod io/vertx/circuitbreaker/CircuitBreaker.create:(Ljava/lang/String;Lio/vertx/core/Vertx;Lio/vertx/circuitbreaker/CircuitBreakerOptions;)Lio/vertx/circuitbreaker/CircuitBreaker;
      24: astore_2
      25: new           #15                 // class java/util/concurrent/atomic/AtomicInteger
      28: dup
      29: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      32: astore_3
      33: new           #15                 // class java/util/concurrent/atomic/AtomicInteger
      36: dup
      37: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      40: astore        4
      42: aload_2
      43: aload         4
      45: aload_1
      46: invokedynamic #17,  0             // InvokeDynamic #3:apply:(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/function/Function;)Ljava/util/function/Function;
      51: invokeinterface #18,  2           // InterfaceMethod io/vertx/circuitbreaker/CircuitBreaker.retryPolicy:(Ljava/util/function/Function;)Lio/vertx/circuitbreaker/CircuitBreaker;
      56: pop
      57: aload_2
      58: aload_3
      59: invokedynamic #19,  0             // InvokeDynamic #4:handle:(Ljava/util/concurrent/atomic/AtomicInteger;)Lio/vertx/core/Handler;
      64: invokeinterface #20,  2           // InterfaceMethod io/vertx/circuitbreaker/CircuitBreaker.execute:(Lio/vertx/core/Handler;)Lio/vertx/core/Future;
      69: invokedynamic #21,  0             // InvokeDynamic #5:handle:()Lio/vertx/core/Handler;
      74: invokeinterface #22,  2           // InterfaceMethod io/vertx/core/Future.setHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/Future;
      79: pop
      80: invokestatic  #23                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
      83: aload_3
      84: bipush        6
      86: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      89: invokestatic  #25                 // Method org/hamcrest/Matchers.is:(Ljava/lang/Object;)Lorg/hamcrest/Matcher;
      92: invokevirtual #26                 // Method com/jayway/awaitility/core/ConditionFactory.untilAtomic:(Ljava/util/concurrent/atomic/AtomicInteger;Lorg/hamcrest/Matcher;)Ljava/lang/Integer;
      95: pop
      96: invokestatic  #23                 // Method com/jayway/awaitility/Awaitility.await:()Lcom/jayway/awaitility/core/ConditionFactory;
      99: aload         4
     101: iconst_5
     102: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     105: invokestatic  #25                 // Method org/hamcrest/Matchers.is:(Ljava/lang/Object;)Lorg/hamcrest/Matcher;
     108: invokevirtual #26                 // Method com/jayway/awaitility/core/ConditionFactory.untilAtomic:(Ljava/util/concurrent/atomic/AtomicInteger;Lorg/hamcrest/Matcher;)Ljava/lang/Integer;
     111: pop
     112: return

  private static void lambda$runRetryPolicyTest$5(io.vertx.core.AsyncResult);
    Code:
       0: return

  private static void lambda$runRetryPolicyTest$4(java.util.concurrent.atomic.AtomicInteger, io.vertx.core.Promise);
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       4: pop
       5: aload_1
       6: ldc           #28                 // String FAILED
       8: invokeinterface #29,  2           // InterfaceMethod io/vertx/core/Promise.fail:(Ljava/lang/String;)V
      13: return

  private static java.lang.Long lambda$runRetryPolicyTest$3(java.util.concurrent.atomic.AtomicInteger, java.util.function.Function, java.lang.Integer);
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       4: pop
       5: aload_1
       6: aload_2
       7: invokeinterface #30,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #31                 // class java/lang/Long
      15: areturn

  private static java.lang.Long lambda$testWithNegativeRetryPolicy$2(java.lang.Integer);
    Code:
       0: ldc2_w        #32                 // long -1l
       3: invokestatic  #34                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       6: areturn

  private static java.lang.Long lambda$testWithZeroRetryPolicy$1(java.lang.Integer);
    Code:
       0: lconst_0
       1: invokestatic  #34                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       4: areturn

  private static java.lang.Long lambda$testWithRetryPolicy$0(java.lang.Integer);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method java/lang/Integer.intValue:()I
       4: i2l
       5: ldc2_w        #36                 // long 100l
       8: lmul
       9: invokestatic  #34                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: areturn
}
