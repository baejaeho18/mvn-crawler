Compiled from "AsyncSQLStorage.scala"
public interface net.fwbrasil.activate.storage.relational.async.AsyncSQLStorage<C extends com.github.mauricio.async.db.Connection> extends net.fwbrasil.activate.storage.relational.RelationalStorage<scala.concurrent.Future<C>> {
  public abstract void net$fwbrasil$activate$storage$relational$async$AsyncSQLStorage$_setter_$defaultTimeout_$eq(scala.concurrent.duration.Duration);

  public abstract void net$fwbrasil$activate$storage$relational$async$AsyncSQLStorage$_setter_$queryLimit_$eq(int);

  public abstract scala.concurrent.duration.Duration defaultTimeout();

  public abstract scala.concurrent.ExecutionContextExecutor executionContext();

  public abstract com.github.mauricio.async.db.pool.ObjectFactory<C> objectFactory();

  public abstract java.nio.charset.Charset charset();

  public abstract com.github.mauricio.async.db.pool.PoolConfiguration poolConfiguration();

  public abstract com.github.mauricio.async.db.pool.ConnectionPool<C> pool();

  public abstract int queryLimit();

  public abstract net.fwbrasil.activate.storage.relational.idiom.SqlIdiom dialect();

  public abstract scala.collection.immutable.List<scala.collection.immutable.List<net.fwbrasil.activate.storage.marshalling.StorageValue>> query(net.fwbrasil.activate.statement.query.Query<?>, scala.collection.immutable.List<net.fwbrasil.activate.storage.marshalling.StorageValue>, scala.collection.immutable.List<scala.collection.immutable.List<net.fwbrasil.activate.entity.BaseEntity>>);

  public abstract scala.concurrent.Future<scala.collection.immutable.List<scala.collection.immutable.List<net.fwbrasil.activate.storage.marshalling.StorageValue>>> queryAsync(net.fwbrasil.activate.statement.query.Query<?>, scala.collection.immutable.List<net.fwbrasil.activate.storage.marshalling.StorageValue>, scala.collection.immutable.List<scala.collection.immutable.List<net.fwbrasil.activate.entity.BaseEntity>>, net.fwbrasil.radon.transaction.TransactionalExecutionContext);

  public abstract <R> R await(scala.concurrent.Future<R>);

  public abstract scala.concurrent.Future<scala.runtime.BoxedUnit> executeStatementsAsync(scala.collection.immutable.Map<java.lang.Class<net.fwbrasil.activate.entity.BaseEntity>, scala.collection.immutable.List<scala.Tuple2<net.fwbrasil.activate.storage.marshalling.ReferenceStorageValue, java.lang.Object>>>, scala.collection.immutable.List<net.fwbrasil.activate.storage.relational.StorageStatement>, scala.concurrent.ExecutionContext);

  public abstract scala.Some<net.fwbrasil.activate.storage.TransactionHandle> executeStatements(scala.collection.immutable.Map<java.lang.Class<net.fwbrasil.activate.entity.BaseEntity>, scala.collection.immutable.List<scala.Tuple2<net.fwbrasil.activate.storage.marshalling.ReferenceStorageValue, java.lang.Object>>>, scala.collection.immutable.List<net.fwbrasil.activate.storage.relational.StorageStatement>);

  public abstract scala.concurrent.Future<scala.runtime.BoxedUnit> execute(net.fwbrasil.activate.storage.relational.QlStatement, com.github.mauricio.async.db.Connection, boolean);

  public abstract scala.concurrent.Future<java.lang.Object> satisfyRestriction(net.fwbrasil.activate.storage.relational.QlStatement, scala.concurrent.ExecutionContext);

  public abstract scala.concurrent.Future<net.fwbrasil.activate.storage.TransactionHandle> executeWithTransactionAndReturnHandle(scala.Function1<com.github.mauricio.async.db.Connection, scala.concurrent.Future<scala.runtime.BoxedUnit>>);

  public abstract scala.concurrent.Future<C> directAccess();

  public abstract boolean isMemoryStorage();

  public abstract boolean isSchemaless();

  public abstract boolean isTransactional();

  public abstract boolean supportsQueryJoin();

  public abstract boolean supportsAsync();

  public abstract scala.concurrent.Future<com.github.mauricio.async.db.QueryResult> sendPreparedStatement(net.fwbrasil.activate.storage.relational.QlStatement, com.github.mauricio.async.db.Connection);
}
