Compiled from "TestHiveAlluxioMetastore.java"
public class io.trino.plugin.hive.TestHiveAlluxioMetastore extends io.trino.plugin.hive.AbstractTestHive {
  public io.trino.plugin.hive.TestHiveAlluxioMetastore();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/trino/plugin/hive/AbstractTestHive."<init>":()V
       4: return

  public void setup(java.lang.String, java.lang.String);
    Code:
       0: ldc           #9                  // String alluxio.security.login.username
       2: ldc           #11                 // String presto
       4: invokestatic  #13                 // Method java/lang/System.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: pop
       8: ldc           #19                 // String alluxio.master.hostname
      10: aload_1
      11: invokestatic  #13                 // Method java/lang/System.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      14: pop
      15: new           #21                 // class io/trino/plugin/hive/HiveConfig
      18: dup
      19: invokespecial #23                 // Method io/trino/plugin/hive/HiveConfig."<init>":()V
      22: ldc           #24                 // String UTC
      24: invokevirtual #26                 // Method io/trino/plugin/hive/HiveConfig.setParquetTimeZone:(Ljava/lang/String;)Lio/trino/plugin/hive/HiveConfig;
      27: ldc           #24                 // String UTC
      29: invokevirtual #30                 // Method io/trino/plugin/hive/HiveConfig.setRcfileTimeZone:(Ljava/lang/String;)Lio/trino/plugin/hive/HiveConfig;
      32: astore_3
      33: new           #33                 // class io/trino/plugin/hive/metastore/alluxio/AlluxioHiveMetastoreConfig
      36: dup
      37: invokespecial #35                 // Method io/trino/plugin/hive/metastore/alluxio/AlluxioHiveMetastoreConfig."<init>":()V
      40: astore        4
      42: aload         4
      44: aload_1
      45: aload_2
      46: invokedynamic #36,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      51: invokevirtual #39                 // Method io/trino/plugin/hive/metastore/alluxio/AlluxioHiveMetastoreConfig.setMasterAddress:(Ljava/lang/String;)Lio/trino/plugin/hive/metastore/alluxio/AlluxioHiveMetastoreConfig;
      54: pop
      55: aload         4
      57: invokestatic  #43                 // Method io/trino/plugin/hive/metastore/alluxio/AlluxioMetastoreModule.createCatalogMasterClient:(Lio/trino/plugin/hive/metastore/alluxio/AlluxioHiveMetastoreConfig;)Lalluxio/client/table/TableMasterClient;
      60: astore        5
      62: aload_0
      63: ldc           #49                 // String default
      65: aload_3
      66: new           #51                 // class io/trino/plugin/hive/metastore/alluxio/AlluxioHiveMetastore
      69: dup
      70: aload         5
      72: new           #53                 // class io/trino/plugin/hive/metastore/HiveMetastoreConfig
      75: dup
      76: invokespecial #55                 // Method io/trino/plugin/hive/metastore/HiveMetastoreConfig."<init>":()V
      79: invokespecial #56                 // Method io/trino/plugin/hive/metastore/alluxio/AlluxioHiveMetastore."<init>":(Lalluxio/client/table/TableMasterClient;Lio/trino/plugin/hive/metastore/HiveMetastoreConfig;)V
      82: getstatic     #59                 // Field io/trino/plugin/hive/HiveTestUtils.HDFS_ENVIRONMENT:Lio/trino/hdfs/HdfsEnvironment;
      85: invokevirtual #65                 // Method setup:(Ljava/lang/String;Lio/trino/plugin/hive/HiveConfig;Lio/trino/plugin/hive/metastore/HiveMetastore;Lio/trino/hdfs/HdfsEnvironment;)V
      88: return

  public void testBucketSortedTables();
    Code:
       0: return

  public void testBucketedTableEvolution();
    Code:
       0: return

  public void testBucketedSortedTableEvolution();
    Code:
       0: return

  public void testBucketedTableValidation() throws java.lang.Exception;
    Code:
       0: return

  public void testBucketedTableEvolutionWithDifferentReadBucketCount();
    Code:
       0: return

  public void testEmptyOrcFile();
    Code:
       0: return

  public void testPerTransactionDirectoryListerCache();
    Code:
       0: return

  public void testEmptyRcBinaryFile();
    Code:
       0: return

  public void testEmptyRcTextFile();
    Code:
       0: return

  public void testEmptySequenceFile();
    Code:
       0: return

  public void testEmptyTableCreation();
    Code:
       0: return

  public void testEmptyTextFile();
    Code:
       0: return

  public void testGetPartitions();
    Code:
       0: return

  public void testGetPartitionsWithBindings();
    Code:
       0: return

  public void testGetPartitionsWithFilter();
    Code:
       0: return

  public void testHideDeltaLakeTables();
    Code:
       0: new           #71                 // class org/testng/SkipException
       3: dup
       4: ldc           #73                 // String not supported
       6: invokespecial #75                 // Method org/testng/SkipException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void testDisallowQueryingOfIcebergTables();
    Code:
       0: new           #71                 // class org/testng/SkipException
       3: dup
       4: ldc           #73                 // String not supported
       6: invokespecial #75                 // Method org/testng/SkipException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void testIllegalStorageFormatDuringTableScan();
    Code:
       0: return

  public void testInsert();
    Code:
       0: return

  public void testInsertIntoExistingPartition();
    Code:
       0: return

  public void testInsertIntoExistingPartitionEmptyStatistics();
    Code:
       0: return

  public void testInsertIntoNewPartition();
    Code:
       0: return

  public void testInsertOverwriteUnpartitioned();
    Code:
       0: return

  public void testInsertUnsupportedWriteType();
    Code:
       0: return

  public void testMetadataDelete();
    Code:
       0: return

  public void testMismatchSchemaTable();
    Code:
       0: return

  public void testPartitionStatisticsSampling();
    Code:
       0: return

  public void testApplyProjection();
    Code:
       0: return

  public void testApplyRedirection();
    Code:
       0: return

  public void testMaterializedViewMetadata();
    Code:
       0: return

  public void testOrcPageSourceMetrics();
    Code:
       0: return

  public void testParquetPageSourceMetrics();
    Code:
       0: return

  public void testPreferredInsertLayout();
    Code:
       0: return

  public void testInsertBucketedTableLayout();
    Code:
       0: return

  public void testInsertPartitionedBucketedTableLayout();
    Code:
       0: return

  public void testStorePartitionWithStatistics();
    Code:
       0: return

  public void testRenameTable();
    Code:
       0: return

  public void testTableCreation();
    Code:
       0: return

  public void testTableCreationWithTrailingSpaceInLocation();
    Code:
       0: return

  public void testTableCreationIgnoreExisting();
    Code:
       0: return

  public void testTableCreationRollback();
    Code:
       0: return

  public void testTransactionDeleteInsert();
    Code:
       0: return

  public void testTypesOrc() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #78                 // Method io/trino/plugin/hive/AbstractTestHive.testTypesOrc:()V
       4: return

  public void testUpdateBasicPartitionStatistics();
    Code:
       0: return

  public void testUpdateBasicTableStatistics();
    Code:
       0: return

  public void testUpdatePartitionColumnStatistics();
    Code:
       0: return

  public void testUpdatePartitionColumnStatisticsEmptyOptionalFields();
    Code:
       0: return

  public void testInputInfoWhenTableIsPartitioned();
    Code:
       0: return

  public void testInputInfoWhenTableIsNotPartitioned();
    Code:
       0: return

  public void testInputInfoWithParquetTableFormat();
    Code:
       0: return

  public void testUpdateTableColumnStatistics();
    Code:
       0: return

  public void testUpdateTableColumnStatisticsEmptyOptionalFields();
    Code:
       0: return

  public void testViewCreation();
    Code:
       0: return

  public void testNewDirectoryPermissions();
    Code:
       0: return

  public void testInsertBucketedTransactionalTableLayout() throws java.lang.Exception;
    Code:
       0: return

  public void testInsertPartitionedBucketedTransactionalTableLayout() throws java.lang.Exception;
    Code:
       0: return

  public void testCreateEmptyTableShouldNotCreateStagingDirectory();
    Code:
       0: return
}
