<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.4 on 2016-10-14 -->

<plugin>
  <name>Jetty :: Jetty Maven Plugin</name>
  <description>Jetty maven plugins</description>
  <groupId>org.eclipse.jetty</groupId>
  <artifactId>jetty-maven-plugin</artifactId>
  <version>9.3.13.v20161014</version>
  <goalPrefix>jetty</goalPrefix>
  <mojos>
    <mojo>
      <goal>deploy-war</goal>
      <description>This goal is used to run Jetty with a pre-assembled war.

It accepts exactly the same options as the run-war goal. However, it doesn&apos;t assume that the current artifact is a webapp and doesn&apos;t try to assemble it into a war before its execution. So using it makes sense only when used in conjunction with the war configuration parameter pointing to a pre-built WAR.

This goal is useful e.g. for launching a web app in Jetty as a target for unit-tested HTTP client components.
</description>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>validate</executePhase>
      <implementation>org.eclipse.jetty.maven.plugin.JettyDeployWar</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>contextHandlers</name>
          <type>org.eclipse.jetty.server.handler.ContextHandler[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of other contexts to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>contextXml</name>
          <alias>webAppXml</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of a context xml configuration file whose contents will be applied to the webapp AFTER anything in &lt;webApp&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>daemon</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, the plugin should continue and not block. Otherwise the plugin will block further execution and you will need to use cntrl-c to stop it.</description>
        </parameter>
        <parameter>
          <name>dumpOnStart</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Use the dump() facility of jetty to print out the server configuration to logging</description>
        </parameter>
        <parameter>
          <name>excludedGoals</name>
          <type>java.lang.String[]</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of goals that are NOT to be used</description>
        </parameter>
        <parameter>
          <name>httpConnector</name>
          <type>org.eclipse.jetty.maven.plugin.MavenServerConnector</type>
          <required>false</required>
          <editable>true</editable>
          <description>A ServerConnector to use.</description>
        </parameter>
        <parameter>
          <name>jettyXml</name>
          <alias>jettyConfig</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of a jetty xml configuration files whose contents will be applied before any plugin configuration. Optional.</description>
        </parameter>
        <parameter>
          <name>loginServices</name>
          <type>org.eclipse.jetty.security.LoginService[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of security realms to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>reload</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>reload can be set to either &apos;automatic&apos; or &apos;manual&apos; if &apos;manual&apos; then the context can be reloaded by a linefeed in the console if &apos;automatic&apos; then traditional reloading on changed files is enabled.</description>
        </parameter>
        <parameter>
          <name>requestLog</name>
          <type>org.eclipse.jetty.server.RequestLog</type>
          <required>false</required>
          <editable>true</editable>
          <description>A RequestLog implementation to use for the webapp at runtime. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>scanIntervalSeconds</name>
          <type>int</type>
          <required>true</required>
          <editable>true</editable>
          <description>The interval in seconds to scan the webapp for changes and restart the context if necessary. Ignored if reload is enabled. Disabled by default.</description>
        </parameter>
        <parameter>
          <name>server</name>
          <type>org.eclipse.jetty.server.Server</type>
          <required>false</required>
          <editable>true</editable>
          <description>A wrapper for the Server object</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip this mojo execution.</description>
        </parameter>
        <parameter>
          <name>stopKey</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Key to provide when stopping jetty on executing java -DSTOP.KEY=&lt;stopKey&gt; -DSTOP.PORT=&lt;stopPort&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>stopPort</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port to listen to stop jetty on executing -DSTOP.PORT=&lt;stopPort&gt; -DSTOP.KEY=&lt;stopKey&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>org.eclipse.jetty.maven.plugin.SystemProperties</type>
          <required>false</required>
          <editable>true</editable>
          <description>System properties to set before execution. Note that these properties will NOT override System properties that have been set on the command line or by the JVM. They WILL override System properties that have been set via systemPropertiesFile. Optional.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File containing system properties to be set before execution Note that these properties will NOT override System properties that have been set on the command line, by the JVM, or directly in the POM via systemProperties. Optional.</description>
        </parameter>
        <parameter>
          <name>useProvidedScope</name>
          <type>boolean</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether or not to include dependencies on the plugin&apos;s classpath with &lt;scope&gt;provided&lt;/scope&gt; Use WITH CAUTION as you may wind up with duplicate jars/classes.</description>
        </parameter>
        <parameter>
          <name>war</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The location of the war file.</description>
        </parameter>
        <parameter>
          <name>webApp</name>
          <alias>webAppConfig</alias>
          <type>org.eclipse.jetty.maven.plugin.JettyWebAppContext</type>
          <required>false</required>
          <editable>true</editable>
          <description>An instance of org.eclipse.jetty.webapp.WebAppContext that represents the webapp. Use any of its setters to configure the webapp. This is the preferred and most flexible method of configuration, rather than using the (deprecated) individual parameters like &apos;tmpDirectory&apos;, &apos;contextPath&apos; etc.</description>
        </parameter>
      </parameters>
      <configuration>
        <daemon implementation="boolean" default-value="true"/>
        <dumpOnStart implementation="boolean" default-value="false">${dumponStart}</dumpOnStart>
        <reload implementation="java.lang.String" default-value="automatic">${jetty.reload}</reload>
        <scanIntervalSeconds implementation="int" default-value="0">${jetty.scanIntervalSeconds}</scanIntervalSeconds>
        <skip implementation="boolean" default-value="false">${jetty.skip}</skip>
        <systemPropertiesFile implementation="java.io.File">${jetty.systemPropertiesFile}</systemPropertiesFile>
        <useProvidedScope implementation="boolean" default-value="false"/>
        <war implementation="java.io.File" default-value="${project.build.directory}/${project.build.finalName}.war"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>effective-web-xml</goal>
      <description>JettyEffectiveWebXml</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>org.eclipse.jetty.maven.plugin.JettyEffectiveWebXml</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory containing generated classes.</description>
        </parameter>
        <parameter>
          <name>contextHandlers</name>
          <type>org.eclipse.jetty.server.handler.ContextHandler[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of other contexts to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>contextXml</name>
          <alias>webAppXml</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of a context xml configuration file whose contents will be applied to the webapp AFTER anything in &lt;webApp&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>dumpOnStart</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Use the dump() facility of jetty to print out the server configuration to logging</description>
        </parameter>
        <parameter>
          <name>effectiveWebXml</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The target directory</description>
        </parameter>
        <parameter>
          <name>excludedGoals</name>
          <type>java.lang.String[]</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of goals that are NOT to be used</description>
        </parameter>
        <parameter>
          <name>httpConnector</name>
          <type>org.eclipse.jetty.maven.plugin.MavenServerConnector</type>
          <required>false</required>
          <editable>true</editable>
          <description>A ServerConnector to use.</description>
        </parameter>
        <parameter>
          <name>jettyXml</name>
          <alias>jettyConfig</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of a jetty xml configuration files whose contents will be applied before any plugin configuration. Optional.</description>
        </parameter>
        <parameter>
          <name>loginServices</name>
          <type>org.eclipse.jetty.security.LoginService[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of security realms to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>reload</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>reload can be set to either &apos;automatic&apos; or &apos;manual&apos; if &apos;manual&apos; then the context can be reloaded by a linefeed in the console if &apos;automatic&apos; then traditional reloading on changed files is enabled.</description>
        </parameter>
        <parameter>
          <name>requestLog</name>
          <type>org.eclipse.jetty.server.RequestLog</type>
          <required>false</required>
          <editable>true</editable>
          <description>A RequestLog implementation to use for the webapp at runtime. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>scanClassesPattern</name>
          <type>org.eclipse.jetty.maven.plugin.ScanPattern</type>
          <required>false</required>
          <editable>true</editable>
          <description>An optional pattern for includes/excludes of classes in the classesDirectory</description>
        </parameter>
        <parameter>
          <name>scanIntervalSeconds</name>
          <type>int</type>
          <required>true</required>
          <editable>true</editable>
          <description>The interval in seconds to scan the webapp for changes and restart the context if necessary. Ignored if reload is enabled. Disabled by default.</description>
        </parameter>
        <parameter>
          <name>scanTargetPatterns</name>
          <type>org.eclipse.jetty.maven.plugin.ScanTargetPattern[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of directories with ant-style &lt;include&gt; and &lt;exclude&gt; patterns for extra targets to periodically scan for changes. Can be used instead of, or in conjunction with &lt;scanTargets&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>scanTargets</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of files or directories to additionally periodically scan for changes. Optional.</description>
        </parameter>
        <parameter>
          <name>scanTestClassesPattern</name>
          <type>org.eclipse.jetty.maven.plugin.ScanPattern</type>
          <required>false</required>
          <editable>true</editable>
          <description>An optional pattern for includes/excludes of classes in the testClassesDirectory</description>
        </parameter>
        <parameter>
          <name>server</name>
          <type>org.eclipse.jetty.server.Server</type>
          <required>false</required>
          <editable>true</editable>
          <description>A wrapper for the Server object</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip this mojo execution.</description>
        </parameter>
        <parameter>
          <name>stopKey</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Key to provide when stopping jetty on executing java -DSTOP.KEY=&lt;stopKey&gt; -DSTOP.PORT=&lt;stopPort&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>stopPort</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port to listen to stop jetty on executing -DSTOP.PORT=&lt;stopPort&gt; -DSTOP.KEY=&lt;stopKey&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>org.eclipse.jetty.maven.plugin.SystemProperties</type>
          <required>false</required>
          <editable>true</editable>
          <description>System properties to set before execution. Note that these properties will NOT override System properties that have been set on the command line or by the JVM. They WILL override System properties that have been set via systemPropertiesFile. Optional.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File containing system properties to be set before execution Note that these properties will NOT override System properties that have been set on the command line, by the JVM, or directly in the POM via systemProperties. Optional.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory containing generated test classes.</description>
        </parameter>
        <parameter>
          <name>useProvidedScope</name>
          <type>boolean</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether or not to include dependencies on the plugin&apos;s classpath with &lt;scope&gt;provided&lt;/scope&gt; Use WITH CAUTION as you may wind up with duplicate jars/classes.</description>
        </parameter>
        <parameter>
          <name>useTestScope</name>
          <alias>useTestClasspath</alias>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, the &lt;testOutputDirectory&gt; and the dependencies of &lt;scope&gt;test&lt;scope&gt; will be put first on the runtime classpath.</description>
        </parameter>
        <parameter>
          <name>webApp</name>
          <alias>webAppConfig</alias>
          <type>org.eclipse.jetty.maven.plugin.JettyWebAppContext</type>
          <required>false</required>
          <editable>true</editable>
          <description>An instance of org.eclipse.jetty.webapp.WebAppContext that represents the webapp. Use any of its setters to configure the webapp. This is the preferred and most flexible method of configuration, rather than using the (deprecated) individual parameters like &apos;tmpDirectory&apos;, &apos;contextPath&apos; etc.</description>
        </parameter>
        <parameter>
          <name>webAppSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Root directory for all html/jsp etc files</description>
        </parameter>
      </parameters>
      <configuration>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <dumpOnStart implementation="boolean" default-value="false">${dumponStart}</dumpOnStart>
        <reload implementation="java.lang.String" default-value="automatic">${jetty.reload}</reload>
        <scanIntervalSeconds implementation="int" default-value="0">${jetty.scanIntervalSeconds}</scanIntervalSeconds>
        <skip implementation="boolean" default-value="false">${jetty.skip}</skip>
        <systemPropertiesFile implementation="java.io.File">${jetty.systemPropertiesFile}</systemPropertiesFile>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <useProvidedScope implementation="boolean" default-value="false"/>
        <useTestScope implementation="boolean" default-value="false"/>
        <webAppSourceDirectory implementation="java.io.File" default-value="${maven.war.src}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on jetty-maven-plugin.
Call mvn jetty:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.eclipse.jetty.maven.plugin.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>run</goal>
      <description>This goal is used in-situ on a Maven project without first requiring that the project is assembled into a war, saving time during the development cycle.
The plugin forks a parallel lifecycle to ensure that the &apos;compile&apos; phase has been completed before invoking Jetty. This means that you do not need to explicity execute a &apos;mvn compile&apos; first. It also means that a &apos;mvn clean jetty:run&apos; will ensure that a full fresh compile is done before invoking Jetty.

Once invoked, the plugin can be configured to run continuously, scanning for changes in the project and automatically performing a hot redeploy when necessary. This allows the developer to concentrate on coding changes to the project using their IDE of choice and have those changes immediately and transparently reflected in the running web container, eliminating development time that is wasted on rebuilding, reassembling and redeploying.

You may also specify the location of a jetty.xml file whose contents will be applied before any plugin configuration. This can be used, for example, to deploy a static webapp that is not part of your maven build.

There is a reference guide to the configuration parameters for this plugin.
</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>org.eclipse.jetty.maven.plugin.JettyRunMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory containing generated classes.</description>
        </parameter>
        <parameter>
          <name>contextHandlers</name>
          <type>org.eclipse.jetty.server.handler.ContextHandler[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of other contexts to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>contextXml</name>
          <alias>webAppXml</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of a context xml configuration file whose contents will be applied to the webapp AFTER anything in &lt;webApp&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>dumpOnStart</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Use the dump() facility of jetty to print out the server configuration to logging</description>
        </parameter>
        <parameter>
          <name>excludedGoals</name>
          <type>java.lang.String[]</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of goals that are NOT to be used</description>
        </parameter>
        <parameter>
          <name>httpConnector</name>
          <type>org.eclipse.jetty.maven.plugin.MavenServerConnector</type>
          <required>false</required>
          <editable>true</editable>
          <description>A ServerConnector to use.</description>
        </parameter>
        <parameter>
          <name>jettyXml</name>
          <alias>jettyConfig</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of a jetty xml configuration files whose contents will be applied before any plugin configuration. Optional.</description>
        </parameter>
        <parameter>
          <name>loginServices</name>
          <type>org.eclipse.jetty.security.LoginService[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of security realms to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>reload</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>reload can be set to either &apos;automatic&apos; or &apos;manual&apos; if &apos;manual&apos; then the context can be reloaded by a linefeed in the console if &apos;automatic&apos; then traditional reloading on changed files is enabled.</description>
        </parameter>
        <parameter>
          <name>requestLog</name>
          <type>org.eclipse.jetty.server.RequestLog</type>
          <required>false</required>
          <editable>true</editable>
          <description>A RequestLog implementation to use for the webapp at runtime. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>scanClassesPattern</name>
          <type>org.eclipse.jetty.maven.plugin.ScanPattern</type>
          <required>false</required>
          <editable>true</editable>
          <description>An optional pattern for includes/excludes of classes in the classesDirectory</description>
        </parameter>
        <parameter>
          <name>scanIntervalSeconds</name>
          <type>int</type>
          <required>true</required>
          <editable>true</editable>
          <description>The interval in seconds to scan the webapp for changes and restart the context if necessary. Ignored if reload is enabled. Disabled by default.</description>
        </parameter>
        <parameter>
          <name>scanTargetPatterns</name>
          <type>org.eclipse.jetty.maven.plugin.ScanTargetPattern[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of directories with ant-style &lt;include&gt; and &lt;exclude&gt; patterns for extra targets to periodically scan for changes. Can be used instead of, or in conjunction with &lt;scanTargets&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>scanTargets</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of files or directories to additionally periodically scan for changes. Optional.</description>
        </parameter>
        <parameter>
          <name>scanTestClassesPattern</name>
          <type>org.eclipse.jetty.maven.plugin.ScanPattern</type>
          <required>false</required>
          <editable>true</editable>
          <description>An optional pattern for includes/excludes of classes in the testClassesDirectory</description>
        </parameter>
        <parameter>
          <name>server</name>
          <type>org.eclipse.jetty.server.Server</type>
          <required>false</required>
          <editable>true</editable>
          <description>A wrapper for the Server object</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip this mojo execution.</description>
        </parameter>
        <parameter>
          <name>stopKey</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Key to provide when stopping jetty on executing java -DSTOP.KEY=&lt;stopKey&gt; -DSTOP.PORT=&lt;stopPort&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>stopPort</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port to listen to stop jetty on executing -DSTOP.PORT=&lt;stopPort&gt; -DSTOP.KEY=&lt;stopKey&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>org.eclipse.jetty.maven.plugin.SystemProperties</type>
          <required>false</required>
          <editable>true</editable>
          <description>System properties to set before execution. Note that these properties will NOT override System properties that have been set on the command line or by the JVM. They WILL override System properties that have been set via systemPropertiesFile. Optional.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File containing system properties to be set before execution Note that these properties will NOT override System properties that have been set on the command line, by the JVM, or directly in the POM via systemProperties. Optional.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory containing generated test classes.</description>
        </parameter>
        <parameter>
          <name>useProvidedScope</name>
          <type>boolean</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether or not to include dependencies on the plugin&apos;s classpath with &lt;scope&gt;provided&lt;/scope&gt; Use WITH CAUTION as you may wind up with duplicate jars/classes.</description>
        </parameter>
        <parameter>
          <name>useTestScope</name>
          <alias>useTestClasspath</alias>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, the &lt;testOutputDirectory&gt; and the dependencies of &lt;scope&gt;test&lt;scope&gt; will be put first on the runtime classpath.</description>
        </parameter>
        <parameter>
          <name>webApp</name>
          <alias>webAppConfig</alias>
          <type>org.eclipse.jetty.maven.plugin.JettyWebAppContext</type>
          <required>false</required>
          <editable>true</editable>
          <description>An instance of org.eclipse.jetty.webapp.WebAppContext that represents the webapp. Use any of its setters to configure the webapp. This is the preferred and most flexible method of configuration, rather than using the (deprecated) individual parameters like &apos;tmpDirectory&apos;, &apos;contextPath&apos; etc.</description>
        </parameter>
        <parameter>
          <name>webAppSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Root directory for all html/jsp etc files</description>
        </parameter>
      </parameters>
      <configuration>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <dumpOnStart implementation="boolean" default-value="false">${dumponStart}</dumpOnStart>
        <reload implementation="java.lang.String" default-value="automatic">${jetty.reload}</reload>
        <scanIntervalSeconds implementation="int" default-value="0">${jetty.scanIntervalSeconds}</scanIntervalSeconds>
        <skip implementation="boolean" default-value="false">${jetty.skip}</skip>
        <systemPropertiesFile implementation="java.io.File">${jetty.systemPropertiesFile}</systemPropertiesFile>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <useProvidedScope implementation="boolean" default-value="false"/>
        <useTestScope implementation="boolean" default-value="false"/>
        <webAppSourceDirectory implementation="java.io.File" default-value="${maven.war.src}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>run-exploded</goal>
      <description>This goal is used to assemble your webapp into an exploded war and automatically deploy it to Jetty.

Once invoked, the plugin runs continuously, and can be configured to scan for changes in the pom.xml and to WEB-INF/web.xml, WEB-INF/classes or WEB-INF/lib and hot redeploy when a change is detected.

You may also specify the location of a jetty.xml file whose contents will be applied before any plugin configuration. This can be used, for example, to deploy a static webapp that is not part of your maven build.
</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>package</executePhase>
      <implementation>org.eclipse.jetty.maven.plugin.JettyRunWarExplodedMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>contextHandlers</name>
          <type>org.eclipse.jetty.server.handler.ContextHandler[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of other contexts to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>contextXml</name>
          <alias>webAppXml</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of a context xml configuration file whose contents will be applied to the webapp AFTER anything in &lt;webApp&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>dumpOnStart</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Use the dump() facility of jetty to print out the server configuration to logging</description>
        </parameter>
        <parameter>
          <name>excludedGoals</name>
          <type>java.lang.String[]</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of goals that are NOT to be used</description>
        </parameter>
        <parameter>
          <name>httpConnector</name>
          <type>org.eclipse.jetty.maven.plugin.MavenServerConnector</type>
          <required>false</required>
          <editable>true</editable>
          <description>A ServerConnector to use.</description>
        </parameter>
        <parameter>
          <name>jettyXml</name>
          <alias>jettyConfig</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of a jetty xml configuration files whose contents will be applied before any plugin configuration. Optional.</description>
        </parameter>
        <parameter>
          <name>loginServices</name>
          <type>org.eclipse.jetty.security.LoginService[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of security realms to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>reload</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>reload can be set to either &apos;automatic&apos; or &apos;manual&apos; if &apos;manual&apos; then the context can be reloaded by a linefeed in the console if &apos;automatic&apos; then traditional reloading on changed files is enabled.</description>
        </parameter>
        <parameter>
          <name>requestLog</name>
          <type>org.eclipse.jetty.server.RequestLog</type>
          <required>false</required>
          <editable>true</editable>
          <description>A RequestLog implementation to use for the webapp at runtime. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>scanIntervalSeconds</name>
          <type>int</type>
          <required>true</required>
          <editable>true</editable>
          <description>The interval in seconds to scan the webapp for changes and restart the context if necessary. Ignored if reload is enabled. Disabled by default.</description>
        </parameter>
        <parameter>
          <name>server</name>
          <type>org.eclipse.jetty.server.Server</type>
          <required>false</required>
          <editable>true</editable>
          <description>A wrapper for the Server object</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip this mojo execution.</description>
        </parameter>
        <parameter>
          <name>stopKey</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Key to provide when stopping jetty on executing java -DSTOP.KEY=&lt;stopKey&gt; -DSTOP.PORT=&lt;stopPort&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>stopPort</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port to listen to stop jetty on executing -DSTOP.PORT=&lt;stopPort&gt; -DSTOP.KEY=&lt;stopKey&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>org.eclipse.jetty.maven.plugin.SystemProperties</type>
          <required>false</required>
          <editable>true</editable>
          <description>System properties to set before execution. Note that these properties will NOT override System properties that have been set on the command line or by the JVM. They WILL override System properties that have been set via systemPropertiesFile. Optional.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File containing system properties to be set before execution Note that these properties will NOT override System properties that have been set on the command line, by the JVM, or directly in the POM via systemProperties. Optional.</description>
        </parameter>
        <parameter>
          <name>useProvidedScope</name>
          <type>boolean</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether or not to include dependencies on the plugin&apos;s classpath with &lt;scope&gt;provided&lt;/scope&gt; Use WITH CAUTION as you may wind up with duplicate jars/classes.</description>
        </parameter>
        <parameter>
          <name>war</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The location of the war file.</description>
        </parameter>
        <parameter>
          <name>webApp</name>
          <alias>webAppConfig</alias>
          <type>org.eclipse.jetty.maven.plugin.JettyWebAppContext</type>
          <required>false</required>
          <editable>true</editable>
          <description>An instance of org.eclipse.jetty.webapp.WebAppContext that represents the webapp. Use any of its setters to configure the webapp. This is the preferred and most flexible method of configuration, rather than using the (deprecated) individual parameters like &apos;tmpDirectory&apos;, &apos;contextPath&apos; etc.</description>
        </parameter>
      </parameters>
      <configuration>
        <dumpOnStart implementation="boolean" default-value="false">${dumponStart}</dumpOnStart>
        <reload implementation="java.lang.String" default-value="automatic">${jetty.reload}</reload>
        <scanIntervalSeconds implementation="int" default-value="0">${jetty.scanIntervalSeconds}</scanIntervalSeconds>
        <skip implementation="boolean" default-value="false">${jetty.skip}</skip>
        <systemPropertiesFile implementation="java.io.File">${jetty.systemPropertiesFile}</systemPropertiesFile>
        <useProvidedScope implementation="boolean" default-value="false"/>
        <war implementation="java.io.File" default-value="${project.build.directory}/${project.build.finalName}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>run-forked</goal>
      <description>This goal is used to deploy your unassembled webapp into a forked JVM.
You need to define a jetty.xml file to configure connectors etc. You can use the normal setters of o.e.j.webapp.WebAppContext on the webApp configuration element for this plugin. You may also need context xml file for any particularly complex webapp setup. about your webapp.

Unlike the other jetty goals, this does NOT support the scanIntervalSeconds parameter: the webapp will be deployed only once.

The stopKey, stopPort configuration elements can be used to control the stopping of the forked process. By default, this plugin will launch the forked jetty instance and wait for it to complete (in which case it acts much like the jetty:run goal, and you will need to Cntrl-C to stop). By setting the configuration element waitForChild to false, the plugin will terminate after having forked the jetty process. In this case you can use the jetty:stop goal to terminate the process.

See http://www.eclipse.org/jetty/documentation for more information on this and other jetty plugins.
</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>org.eclipse.jetty.maven.plugin.JettyRunForkedMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory containing generated classes.</description>
        </parameter>
        <parameter>
          <name>contextHandlers</name>
          <type>org.eclipse.jetty.server.handler.ContextHandler[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of other contexts to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>contextXml</name>
          <alias>webAppXml</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of a context xml configuration file whose contents will be applied to the webapp AFTER anything in &lt;webApp&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>dumpOnStart</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Use the dump() facility of jetty to print out the server configuration to logging</description>
        </parameter>
        <parameter>
          <name>env</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>Extra environment variables to be passed to the forked process</description>
        </parameter>
        <parameter>
          <name>excludedGoals</name>
          <type>java.lang.String[]</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of goals that are NOT to be used</description>
        </parameter>
        <parameter>
          <name>forkWebXml</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The file into which to generate the quickstart web xml for the forked process to use</description>
        </parameter>
        <parameter>
          <name>httpConnector</name>
          <type>org.eclipse.jetty.maven.plugin.MavenServerConnector</type>
          <required>false</required>
          <editable>true</editable>
          <description>A ServerConnector to use.</description>
        </parameter>
        <parameter>
          <name>jettyXml</name>
          <alias>jettyConfig</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of a jetty xml configuration files whose contents will be applied before any plugin configuration. Optional.</description>
        </parameter>
        <parameter>
          <name>jvmArgs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary jvm args to pass to the forked process</description>
        </parameter>
        <parameter>
          <name>loginServices</name>
          <type>org.eclipse.jetty.security.LoginService[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of security realms to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>maxStartupLines</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>reload</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>reload can be set to either &apos;automatic&apos; or &apos;manual&apos; if &apos;manual&apos; then the context can be reloaded by a linefeed in the console if &apos;automatic&apos; then traditional reloading on changed files is enabled.</description>
        </parameter>
        <parameter>
          <name>requestLog</name>
          <type>org.eclipse.jetty.server.RequestLog</type>
          <required>false</required>
          <editable>true</editable>
          <description>A RequestLog implementation to use for the webapp at runtime. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>scanClassesPattern</name>
          <type>org.eclipse.jetty.maven.plugin.ScanPattern</type>
          <required>false</required>
          <editable>true</editable>
          <description>An optional pattern for includes/excludes of classes in the classesDirectory</description>
        </parameter>
        <parameter>
          <name>scanIntervalSeconds</name>
          <type>int</type>
          <required>true</required>
          <editable>true</editable>
          <description>The interval in seconds to scan the webapp for changes and restart the context if necessary. Ignored if reload is enabled. Disabled by default.</description>
        </parameter>
        <parameter>
          <name>scanTargetPatterns</name>
          <type>org.eclipse.jetty.maven.plugin.ScanTargetPattern[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of directories with ant-style &lt;include&gt; and &lt;exclude&gt; patterns for extra targets to periodically scan for changes. Can be used instead of, or in conjunction with &lt;scanTargets&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>scanTargets</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of files or directories to additionally periodically scan for changes. Optional.</description>
        </parameter>
        <parameter>
          <name>scanTestClassesPattern</name>
          <type>org.eclipse.jetty.maven.plugin.ScanPattern</type>
          <required>false</required>
          <editable>true</editable>
          <description>An optional pattern for includes/excludes of classes in the testClassesDirectory</description>
        </parameter>
        <parameter>
          <name>server</name>
          <type>org.eclipse.jetty.server.Server</type>
          <required>false</required>
          <editable>true</editable>
          <description>A wrapper for the Server object</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip this mojo execution.</description>
        </parameter>
        <parameter>
          <name>stopKey</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Key to provide when stopping jetty on executing java -DSTOP.KEY=&lt;stopKey&gt; -DSTOP.PORT=&lt;stopPort&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>stopPort</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port to listen to stop jetty on executing -DSTOP.PORT=&lt;stopPort&gt; -DSTOP.KEY=&lt;stopKey&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>org.eclipse.jetty.maven.plugin.SystemProperties</type>
          <required>false</required>
          <editable>true</editable>
          <description>System properties to set before execution. Note that these properties will NOT override System properties that have been set on the command line or by the JVM. They WILL override System properties that have been set via systemPropertiesFile. Optional.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File containing system properties to be set before execution Note that these properties will NOT override System properties that have been set on the command line, by the JVM, or directly in the POM via systemProperties. Optional.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory containing generated test classes.</description>
        </parameter>
        <parameter>
          <name>useProvidedScope</name>
          <type>boolean</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether or not to include dependencies on the plugin&apos;s classpath with &lt;scope&gt;provided&lt;/scope&gt; Use WITH CAUTION as you may wind up with duplicate jars/classes.</description>
        </parameter>
        <parameter>
          <name>useTestScope</name>
          <alias>useTestClasspath</alias>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, the &lt;testOutputDirectory&gt; and the dependencies of &lt;scope&gt;test&lt;scope&gt; will be put first on the runtime classpath.</description>
        </parameter>
        <parameter>
          <name>waitForChild</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>webApp</name>
          <alias>webAppConfig</alias>
          <type>org.eclipse.jetty.maven.plugin.JettyWebAppContext</type>
          <required>false</required>
          <editable>true</editable>
          <description>An instance of org.eclipse.jetty.webapp.WebAppContext that represents the webapp. Use any of its setters to configure the webapp. This is the preferred and most flexible method of configuration, rather than using the (deprecated) individual parameters like &apos;tmpDirectory&apos;, &apos;contextPath&apos; etc.</description>
        </parameter>
        <parameter>
          <name>webAppSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Root directory for all html/jsp etc files</description>
        </parameter>
      </parameters>
      <configuration>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <dumpOnStart implementation="boolean" default-value="false">${dumponStart}</dumpOnStart>
        <forkWebXml implementation="java.io.File" default-value="${project.build.directory}/fork-web.xml"/>
        <jvmArgs implementation="java.lang.String">${jetty.jvmArgs}</jvmArgs>
        <maxStartupLines implementation="int" default-value="50"/>
        <reload implementation="java.lang.String" default-value="automatic">${jetty.reload}</reload>
        <scanIntervalSeconds implementation="int" default-value="0">${jetty.scanIntervalSeconds}</scanIntervalSeconds>
        <skip implementation="boolean" default-value="false">${jetty.skip}</skip>
        <systemPropertiesFile implementation="java.io.File">${jetty.systemPropertiesFile}</systemPropertiesFile>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <useProvidedScope implementation="boolean" default-value="false"/>
        <useTestScope implementation="boolean" default-value="false"/>
        <waitForChild implementation="boolean" default-value="true"/>
        <webAppSourceDirectory implementation="java.io.File" default-value="${maven.war.src}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>run-war</goal>
      <description>This goal is used to assemble your webapp into a war and automatically deploy it to Jetty.

Once invoked, the plugin runs continuously and can be configured to scan for changes in the project and to the war file and automatically perform a hot redeploy when necessary.

You may also specify the location of a jetty.xml file whose contents will be applied before any plugin configuration. This can be used, for example, to deploy a static webapp that is not part of your maven build.
</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>package</executePhase>
      <implementation>org.eclipse.jetty.maven.plugin.JettyRunWarMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>contextHandlers</name>
          <type>org.eclipse.jetty.server.handler.ContextHandler[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of other contexts to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>contextXml</name>
          <alias>webAppXml</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of a context xml configuration file whose contents will be applied to the webapp AFTER anything in &lt;webApp&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>dumpOnStart</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Use the dump() facility of jetty to print out the server configuration to logging</description>
        </parameter>
        <parameter>
          <name>excludedGoals</name>
          <type>java.lang.String[]</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of goals that are NOT to be used</description>
        </parameter>
        <parameter>
          <name>httpConnector</name>
          <type>org.eclipse.jetty.maven.plugin.MavenServerConnector</type>
          <required>false</required>
          <editable>true</editable>
          <description>A ServerConnector to use.</description>
        </parameter>
        <parameter>
          <name>jettyXml</name>
          <alias>jettyConfig</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of a jetty xml configuration files whose contents will be applied before any plugin configuration. Optional.</description>
        </parameter>
        <parameter>
          <name>loginServices</name>
          <type>org.eclipse.jetty.security.LoginService[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of security realms to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>reload</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>reload can be set to either &apos;automatic&apos; or &apos;manual&apos; if &apos;manual&apos; then the context can be reloaded by a linefeed in the console if &apos;automatic&apos; then traditional reloading on changed files is enabled.</description>
        </parameter>
        <parameter>
          <name>requestLog</name>
          <type>org.eclipse.jetty.server.RequestLog</type>
          <required>false</required>
          <editable>true</editable>
          <description>A RequestLog implementation to use for the webapp at runtime. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>scanIntervalSeconds</name>
          <type>int</type>
          <required>true</required>
          <editable>true</editable>
          <description>The interval in seconds to scan the webapp for changes and restart the context if necessary. Ignored if reload is enabled. Disabled by default.</description>
        </parameter>
        <parameter>
          <name>server</name>
          <type>org.eclipse.jetty.server.Server</type>
          <required>false</required>
          <editable>true</editable>
          <description>A wrapper for the Server object</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip this mojo execution.</description>
        </parameter>
        <parameter>
          <name>stopKey</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Key to provide when stopping jetty on executing java -DSTOP.KEY=&lt;stopKey&gt; -DSTOP.PORT=&lt;stopPort&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>stopPort</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port to listen to stop jetty on executing -DSTOP.PORT=&lt;stopPort&gt; -DSTOP.KEY=&lt;stopKey&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>org.eclipse.jetty.maven.plugin.SystemProperties</type>
          <required>false</required>
          <editable>true</editable>
          <description>System properties to set before execution. Note that these properties will NOT override System properties that have been set on the command line or by the JVM. They WILL override System properties that have been set via systemPropertiesFile. Optional.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File containing system properties to be set before execution Note that these properties will NOT override System properties that have been set on the command line, by the JVM, or directly in the POM via systemProperties. Optional.</description>
        </parameter>
        <parameter>
          <name>useProvidedScope</name>
          <type>boolean</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether or not to include dependencies on the plugin&apos;s classpath with &lt;scope&gt;provided&lt;/scope&gt; Use WITH CAUTION as you may wind up with duplicate jars/classes.</description>
        </parameter>
        <parameter>
          <name>war</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The location of the war file.</description>
        </parameter>
        <parameter>
          <name>webApp</name>
          <alias>webAppConfig</alias>
          <type>org.eclipse.jetty.maven.plugin.JettyWebAppContext</type>
          <required>false</required>
          <editable>true</editable>
          <description>An instance of org.eclipse.jetty.webapp.WebAppContext that represents the webapp. Use any of its setters to configure the webapp. This is the preferred and most flexible method of configuration, rather than using the (deprecated) individual parameters like &apos;tmpDirectory&apos;, &apos;contextPath&apos; etc.</description>
        </parameter>
      </parameters>
      <configuration>
        <dumpOnStart implementation="boolean" default-value="false">${dumponStart}</dumpOnStart>
        <reload implementation="java.lang.String" default-value="automatic">${jetty.reload}</reload>
        <scanIntervalSeconds implementation="int" default-value="0">${jetty.scanIntervalSeconds}</scanIntervalSeconds>
        <skip implementation="boolean" default-value="false">${jetty.skip}</skip>
        <systemPropertiesFile implementation="java.io.File">${jetty.systemPropertiesFile}</systemPropertiesFile>
        <useProvidedScope implementation="boolean" default-value="false"/>
        <war implementation="java.io.File" default-value="${project.build.directory}/${project.build.finalName}.war"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>start</goal>
      <description>This goal is similar to the jetty:run goal, EXCEPT that it is designed to be bound to an execution inside your pom, rather than being run from the command line.

When using it, be careful to ensure that you bind it to a phase in which all necessary generated files and classes for the webapp will have been created. If you run it from the command line, then also ensure that all necessary generated files and classes for the webapp already exist.
</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>validate</executePhase>
      <implementation>org.eclipse.jetty.maven.plugin.JettyStartMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory containing generated classes.</description>
        </parameter>
        <parameter>
          <name>contextHandlers</name>
          <type>org.eclipse.jetty.server.handler.ContextHandler[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of other contexts to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>contextXml</name>
          <alias>webAppXml</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of a context xml configuration file whose contents will be applied to the webapp AFTER anything in &lt;webApp&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>dumpOnStart</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Use the dump() facility of jetty to print out the server configuration to logging</description>
        </parameter>
        <parameter>
          <name>excludedGoals</name>
          <type>java.lang.String[]</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of goals that are NOT to be used</description>
        </parameter>
        <parameter>
          <name>httpConnector</name>
          <type>org.eclipse.jetty.maven.plugin.MavenServerConnector</type>
          <required>false</required>
          <editable>true</editable>
          <description>A ServerConnector to use.</description>
        </parameter>
        <parameter>
          <name>jettyXml</name>
          <alias>jettyConfig</alias>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of a jetty xml configuration files whose contents will be applied before any plugin configuration. Optional.</description>
        </parameter>
        <parameter>
          <name>loginServices</name>
          <type>org.eclipse.jetty.security.LoginService[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of security realms to set up. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>reload</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>reload can be set to either &apos;automatic&apos; or &apos;manual&apos; if &apos;manual&apos; then the context can be reloaded by a linefeed in the console if &apos;automatic&apos; then traditional reloading on changed files is enabled.</description>
        </parameter>
        <parameter>
          <name>requestLog</name>
          <type>org.eclipse.jetty.server.RequestLog</type>
          <required>false</required>
          <editable>true</editable>
          <description>A RequestLog implementation to use for the webapp at runtime. Consider using instead the &lt;jettyXml&gt; element to specify external jetty xml config file. Optional.</description>
        </parameter>
        <parameter>
          <name>scanClassesPattern</name>
          <type>org.eclipse.jetty.maven.plugin.ScanPattern</type>
          <required>false</required>
          <editable>true</editable>
          <description>An optional pattern for includes/excludes of classes in the classesDirectory</description>
        </parameter>
        <parameter>
          <name>scanIntervalSeconds</name>
          <type>int</type>
          <required>true</required>
          <editable>true</editable>
          <description>The interval in seconds to scan the webapp for changes and restart the context if necessary. Ignored if reload is enabled. Disabled by default.</description>
        </parameter>
        <parameter>
          <name>scanTargetPatterns</name>
          <type>org.eclipse.jetty.maven.plugin.ScanTargetPattern[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of directories with ant-style &lt;include&gt; and &lt;exclude&gt; patterns for extra targets to periodically scan for changes. Can be used instead of, or in conjunction with &lt;scanTargets&gt;.Optional.</description>
        </parameter>
        <parameter>
          <name>scanTargets</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of files or directories to additionally periodically scan for changes. Optional.</description>
        </parameter>
        <parameter>
          <name>scanTestClassesPattern</name>
          <type>org.eclipse.jetty.maven.plugin.ScanPattern</type>
          <required>false</required>
          <editable>true</editable>
          <description>An optional pattern for includes/excludes of classes in the testClassesDirectory</description>
        </parameter>
        <parameter>
          <name>server</name>
          <type>org.eclipse.jetty.server.Server</type>
          <required>false</required>
          <editable>true</editable>
          <description>A wrapper for the Server object</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip this mojo execution.</description>
        </parameter>
        <parameter>
          <name>stopKey</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Key to provide when stopping jetty on executing java -DSTOP.KEY=&lt;stopKey&gt; -DSTOP.PORT=&lt;stopPort&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>stopPort</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port to listen to stop jetty on executing -DSTOP.PORT=&lt;stopPort&gt; -DSTOP.KEY=&lt;stopKey&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>org.eclipse.jetty.maven.plugin.SystemProperties</type>
          <required>false</required>
          <editable>true</editable>
          <description>System properties to set before execution. Note that these properties will NOT override System properties that have been set on the command line or by the JVM. They WILL override System properties that have been set via systemPropertiesFile. Optional.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File containing system properties to be set before execution Note that these properties will NOT override System properties that have been set on the command line, by the JVM, or directly in the POM via systemProperties. Optional.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory containing generated test classes.</description>
        </parameter>
        <parameter>
          <name>useProvidedScope</name>
          <type>boolean</type>
          <since>jetty-7.5.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether or not to include dependencies on the plugin&apos;s classpath with &lt;scope&gt;provided&lt;/scope&gt; Use WITH CAUTION as you may wind up with duplicate jars/classes.</description>
        </parameter>
        <parameter>
          <name>useTestScope</name>
          <alias>useTestClasspath</alias>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, the &lt;testOutputDirectory&gt; and the dependencies of &lt;scope&gt;test&lt;scope&gt; will be put first on the runtime classpath.</description>
        </parameter>
        <parameter>
          <name>webApp</name>
          <alias>webAppConfig</alias>
          <type>org.eclipse.jetty.maven.plugin.JettyWebAppContext</type>
          <required>false</required>
          <editable>true</editable>
          <description>An instance of org.eclipse.jetty.webapp.WebAppContext that represents the webapp. Use any of its setters to configure the webapp. This is the preferred and most flexible method of configuration, rather than using the (deprecated) individual parameters like &apos;tmpDirectory&apos;, &apos;contextPath&apos; etc.</description>
        </parameter>
        <parameter>
          <name>webAppSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Root directory for all html/jsp etc files</description>
        </parameter>
      </parameters>
      <configuration>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <dumpOnStart implementation="boolean" default-value="false">${dumponStart}</dumpOnStart>
        <reload implementation="java.lang.String" default-value="automatic">${jetty.reload}</reload>
        <scanIntervalSeconds implementation="int" default-value="0">${jetty.scanIntervalSeconds}</scanIntervalSeconds>
        <skip implementation="boolean" default-value="false">${jetty.skip}</skip>
        <systemPropertiesFile implementation="java.io.File">${jetty.systemPropertiesFile}</systemPropertiesFile>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <useProvidedScope implementation="boolean" default-value="false"/>
        <useTestScope implementation="boolean" default-value="false"/>
        <webAppSourceDirectory implementation="java.io.File" default-value="${maven.war.src}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>stop</goal>
      <description>JettyStopMojo - stops a running instance of jetty. The ff are required: -DstopKey=someKey -DstopPort=somePort</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.eclipse.jetty.maven.plugin.JettyStopMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>stopKey</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Key to provide when stopping jetty on executing java -DSTOP.KEY=&lt;stopKey&gt; -DSTOP.PORT=&lt;stopPort&gt; -jar start.jar --stop</description>
        </parameter>
        <parameter>
          <name>stopPort</name>
          <type>int</type>
          <required>true</required>
          <editable>true</editable>
          <description>Port to listen to stop jetty on sending stop command</description>
        </parameter>
        <parameter>
          <name>stopWait</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Max time in seconds that the plugin will wait for confirmation that jetty has stopped.</description>
        </parameter>
      </parameters>
    </mojo>
  </mojos>
</plugin>