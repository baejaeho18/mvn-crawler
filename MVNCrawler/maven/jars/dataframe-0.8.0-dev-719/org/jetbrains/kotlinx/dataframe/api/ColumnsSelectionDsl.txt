Compiled from "ColumnsSelectionDsl.kt"
public interface org.jetbrains.kotlinx.dataframe.api.ColumnsSelectionDsl<T> extends org.jetbrains.kotlinx.dataframe.api.ColumnSelectionDsl<T>, org.jetbrains.kotlinx.dataframe.columns.SingleColumn<org.jetbrains.kotlinx.dataframe.DataRow<? extends T>> {
  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.SingleColumn<C> first(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.columns.ColumnWithPath<? extends C>, java.lang.Boolean>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.SingleColumn<C> single(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.columns.ColumnWithPath<? extends C>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.SingleColumn<java.lang.Object> col(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<? extends org.jetbrains.kotlinx.dataframe.DataRow<?>>, int);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.SingleColumn<C> get(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, int);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnReference<org.jetbrains.kotlinx.dataframe.DataRow<?>> group(org.jetbrains.kotlinx.dataframe.ColumnsContainer<?>, java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> rangeTo(java.lang.String, java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> rangeTo(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<?>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> none();

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> cols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.DataColumn<?>, java.lang.Boolean>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> cols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends C>, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends C>...);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> cols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, java.lang.String, java.lang.String...);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> cols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, int...);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> cols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, kotlin.ranges.IntRange);

  public abstract <C, R> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<R> colsRange(org.jetbrains.kotlinx.dataframe.columns.ColumnGroup<? extends C>, kotlin.jvm.functions.Function2<? super org.jetbrains.kotlinx.dataframe.api.ColumnsSelectionDsl<? extends C>, ? super org.jetbrains.kotlinx.dataframe.api.ColumnsSelectionDsl<? extends C>, ? extends org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends R>>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> colsRange(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, java.lang.String, java.lang.String);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> dfs(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.columns.ColumnWithPath<?>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> dfs(java.lang.String, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.columns.ColumnWithPath<?>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> all(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> all(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allDfs(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, boolean);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allDfs(java.lang.String, boolean);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allAfter(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allAfter(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allAfter(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<?>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allSince(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allSince(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allSince(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<?>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allBefore(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allBefore(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allBefore(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<?>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allUntil(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allUntil(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> allUntil(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<?>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<org.jetbrains.kotlinx.dataframe.DataRow<?>> groups(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<?>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.columns.ColumnGroup<?>, java.lang.Boolean>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> children(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.columns.ColumnWithPath<? extends java.lang.Object>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> children(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends org.jetbrains.kotlinx.dataframe.DataRow<?>>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> get(java.util.List<? extends org.jetbrains.kotlinx.dataframe.DataColumn<? extends C>>, kotlin.ranges.IntRange);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnAccessor<C> col(kotlin.reflect.KProperty<? extends C>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> get(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, java.lang.String);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> get(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends C>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> take(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<? extends org.jetbrains.kotlinx.dataframe.DataRow<?>>, int);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> takeLast(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<? extends org.jetbrains.kotlinx.dataframe.DataRow<?>>, int);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> drop(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<? extends org.jetbrains.kotlinx.dataframe.DataRow<?>>, int);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> dropLast(org.jetbrains.kotlinx.dataframe.columns.SingleColumn<? extends org.jetbrains.kotlinx.dataframe.DataRow<?>>, int);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> drop(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, int);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> take(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, int);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> dropLast(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, int);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> takeLast(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, int);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> top(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> takeWhile(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.columns.ColumnWithPath<? extends C>, java.lang.Boolean>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> takeLastWhile(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.columns.ColumnWithPath<? extends C>, java.lang.Boolean>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> filter(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.columns.ColumnWithPath<? extends C>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Number> numberCols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.DataColumn<? extends java.lang.Number>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.String> stringCols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.String>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Integer> intCols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Integer>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Double> doubleCols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Double>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Boolean> booleanCols(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, kotlin.jvm.functions.Function1<? super org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Boolean>, java.lang.Boolean>);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> nameContains(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, java.lang.CharSequence);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> nameContains(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, kotlin.text.Regex);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> startsWith(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, java.lang.CharSequence);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> endsWith(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>, java.lang.CharSequence);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> and(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> except(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>...);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> except(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, java.lang.String...);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> withoutNulls(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?> except(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> except(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, kotlin.jvm.functions.Function2<? super org.jetbrains.kotlinx.dataframe.api.ColumnsSelectionDsl<? extends T>, ? super org.jetbrains.kotlinx.dataframe.api.ColumnsSelectionDsl<? extends T>, ? extends org.jetbrains.kotlinx.dataframe.columns.ColumnSet<?>>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> invoke(kotlin.jvm.functions.Function2<? super org.jetbrains.kotlinx.dataframe.api.ColumnsSelectionDsl<? extends T>, ? super org.jetbrains.kotlinx.dataframe.api.ColumnsSelectionDsl<? extends T>, ? extends org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnReference<C> into(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends C>, java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Object> into(java.lang.String, java.lang.String);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnReference<C> named(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends C>, java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Object> named(java.lang.String, java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> and(java.lang.String, java.lang.String);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> and(java.lang.String, org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> and(kotlin.reflect.KProperty<? extends C>, org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> and(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, kotlin.reflect.KProperty<? extends C>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<C> and(kotlin.reflect.KProperty<? extends C>, kotlin.reflect.KProperty<? extends C>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.columns.ColumnSet<java.lang.Object> and(org.jetbrains.kotlinx.dataframe.columns.ColumnSet<? extends C>, java.lang.String);

  public abstract <C> org.jetbrains.kotlinx.dataframe.DataColumn<C> invoke(java.lang.String, kotlin.jvm.functions.Function2<? super org.jetbrains.kotlinx.dataframe.DataRow<? extends T>, ? super org.jetbrains.kotlinx.dataframe.DataRow<? extends T>, ? extends C>);

  public abstract <C> org.jetbrains.kotlinx.dataframe.DataColumn<C> by(java.lang.String, kotlin.jvm.functions.Function2<? super org.jetbrains.kotlinx.dataframe.DataRow<? extends T>, ? super org.jetbrains.kotlinx.dataframe.DataRow<? extends T>, ? extends C>);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Integer> ints(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Integer> intOrNulls(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.String> strings(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.String> stringOrNulls(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Boolean> booleans(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Boolean> booleanOrNulls(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Double> doubles(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Double> doubleOrNulls(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Comparable<java.lang.Object>> comparables(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Comparable<java.lang.Object>> comparableOrNulls(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Number> numberOrNulls(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Integer> ints(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Integer> intOrNulls(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.String> strings(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.String> stringOrNulls(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Boolean> booleans(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Boolean> booleanOrNulls(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Double> doubles(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Double> doubleOrNulls(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Comparable<java.lang.Object>> comparables(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Comparable<java.lang.Object>> comparableOrNulls(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract org.jetbrains.kotlinx.dataframe.DataColumn<java.lang.Number> numberOrNulls(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract int nrow();

  public abstract java.lang.Iterable<org.jetbrains.kotlinx.dataframe.DataRow<T>> rows();

  public abstract java.lang.Iterable<org.jetbrains.kotlinx.dataframe.DataRow<T>> rowsReversed();
}
