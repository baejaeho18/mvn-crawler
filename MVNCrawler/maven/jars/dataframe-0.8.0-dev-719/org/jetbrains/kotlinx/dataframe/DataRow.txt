Compiled from "DataRow.kt"
public interface org.jetbrains.kotlinx.dataframe.DataRow<T> {
  public static final org.jetbrains.kotlinx.dataframe.DataRow$Companion Companion;

  public abstract int index();

  public abstract org.jetbrains.kotlinx.dataframe.DataFrame<T> df();

  public abstract java.lang.Object get(int);

  public abstract <R> R get(kotlin.jvm.functions.Function2<? super org.jetbrains.kotlinx.dataframe.DataRow<? extends T>, ? super org.jetbrains.kotlinx.dataframe.DataRow<? extends T>, ? extends R>);

  public abstract <R> R get(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends R>);

  public abstract <R> java.util.List<R> get(java.util.List<? extends org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends R>>);

  public abstract <R> R get(kotlin.reflect.KProperty<? extends R>);

  public abstract org.jetbrains.kotlinx.dataframe.DataRow<T> get(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<?>, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<?>...);

  public abstract org.jetbrains.kotlinx.dataframe.DataRow<T> get(java.lang.String, java.lang.String...);

  public abstract java.lang.Object get(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract java.lang.Object get(java.lang.String);

  public abstract org.jetbrains.kotlinx.dataframe.DataRow<?> getColumnGroup(java.lang.String);

  public abstract java.lang.Object tryGet(java.lang.String);

  public abstract <T> T read(java.lang.String);

  public abstract int size();

  public abstract java.util.List<java.lang.Object> values();

  public abstract org.jetbrains.kotlinx.dataframe.columns.ColumnPath get(java.lang.String, java.lang.String...);

  public abstract <R> R invoke(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends R>);

  public abstract <R> R invoke(java.lang.String);

  public abstract <R> R invoke(org.jetbrains.kotlinx.dataframe.columns.ColumnPath);

  public abstract int int(java.lang.String);

  public abstract java.lang.Integer intOrNull(java.lang.String);

  public abstract java.lang.String string(java.lang.String);

  public abstract java.lang.String stringOrNull(java.lang.String);

  public abstract boolean boolean(java.lang.String);

  public abstract java.lang.Boolean booleanOrNull(java.lang.String);

  public abstract double double(java.lang.String);

  public abstract java.lang.Double doubleOrNull(java.lang.String);

  public abstract java.lang.Comparable<java.lang.Object> comparable(java.lang.String);

  public abstract java.lang.Comparable<java.lang.Object> comparableOrNull(java.lang.String);

  public abstract java.lang.Number numberOrNull(java.lang.String);

  public abstract java.lang.Iterable<org.jetbrains.kotlinx.dataframe.DataRow<T>> forwardIterable();

  public abstract java.lang.Iterable<org.jetbrains.kotlinx.dataframe.DataRow<T>> backwardIterable();

  public abstract <R extends java.lang.Comparable<? super R>> int compareTo(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends R>, R);

  public abstract int plus(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Integer>, int);

  public abstract long plus(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Long>, long);

  public abstract double plus(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>, double);

  public abstract java.lang.String plus(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.String>, java.lang.String);

  public abstract int plus(int, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Integer>);

  public abstract long plus(long, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Long>);

  public abstract double plus(double, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>);

  public abstract int minus(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Integer>, int);

  public abstract long minus(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Long>, long);

  public abstract double minus(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>, double);

  public abstract int minus(int, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Integer>);

  public abstract long minus(long, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Long>);

  public abstract double minus(double, org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>);

  public abstract int times(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Integer>, int);

  public abstract long times(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Long>, long);

  public abstract double times(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>, double);

  public abstract double times(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>, int);

  public abstract long times(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Long>, int);

  public abstract double times(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>, long);

  public abstract int div(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Integer>, int);

  public abstract long div(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Long>, long);

  public abstract double div(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>, double);

  public abstract double div(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>, int);

  public abstract long div(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Long>, int);

  public abstract double div(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<java.lang.Double>, long);

  public abstract <R> boolean eq(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends R>, R);

  public abstract <R> boolean eq(kotlin.reflect.KProperty1<?, ? extends R>, R);

  public abstract <R> boolean neq(org.jetbrains.kotlinx.dataframe.columns.ColumnReference<? extends R>, R);

  public abstract <R> boolean neq(kotlin.reflect.KProperty1<?, ? extends R>, R);

  static {};
    Code:
       0: getstatic     #108                // Field org/jetbrains/kotlinx/dataframe/DataRow$Companion.$$INSTANCE:Lorg/jetbrains/kotlinx/dataframe/DataRow$Companion;
       3: putstatic     #111                // Field Companion:Lorg/jetbrains/kotlinx/dataframe/DataRow$Companion;
       6: return
}
