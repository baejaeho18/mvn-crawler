Compiled from "RoundRobinClusterLoadBalancer.java"
class io.manbang.ebatis.core.cluster.RoundRobinClusterLoadBalancer extends io.manbang.ebatis.core.cluster.AbstractClusterLoadBalancer {
  public static final io.manbang.ebatis.core.cluster.RoundRobinClusterLoadBalancer INSTANCE;

  private final java.lang.ThreadLocal<java.util.concurrent.atomic.AtomicInteger> index;

  private io.manbang.ebatis.core.cluster.RoundRobinClusterLoadBalancer();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/manbang/ebatis/core/cluster/AbstractClusterLoadBalancer."<init>":()V
       4: aload_0
       5: invokedynamic #2,  0              // InvokeDynamic #0:get:()Ljava/util/function/Supplier;
      10: invokestatic  #3                  // Method java/lang/ThreadLocal.withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;
      13: putfield      #4                  // Field index:Ljava/lang/ThreadLocal;
      16: return

  protected io.manbang.ebatis.core.cluster.Cluster doChoose(io.manbang.ebatis.core.cluster.Cluster[]);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #4                  // Field index:Ljava/lang/ThreadLocal;
       5: invokevirtual #5                  // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
       8: checkcast     #6                  // class java/util/concurrent/atomic/AtomicInteger
      11: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      14: aload_1
      15: arraylength
      16: irem
      17: aaload
      18: areturn

  static {};
    Code:
       0: new           #8                  // class io/manbang/ebatis/core/cluster/RoundRobinClusterLoadBalancer
       3: dup
       4: invokespecial #9                  // Method "<init>":()V
       7: putstatic     #10                 // Field INSTANCE:Lio/manbang/ebatis/core/cluster/RoundRobinClusterLoadBalancer;
      10: return
}
