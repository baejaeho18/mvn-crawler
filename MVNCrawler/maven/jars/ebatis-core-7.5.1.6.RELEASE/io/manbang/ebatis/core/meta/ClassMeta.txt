Compiled from "ClassMeta.java"
public interface io.manbang.ebatis.core.meta.ClassMeta extends io.manbang.ebatis.core.meta.AnnotatedMeta<java.lang.Class<?>> {
  public static io.manbang.ebatis.core.meta.ClassMeta parameter(java.lang.reflect.Parameter, java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method io/manbang/ebatis/core/meta/CachedParameterClassMeta.createIfAbsent:(Ljava/lang/reflect/Parameter;Ljava/lang/Class;)Lio/manbang/ebatis/core/meta/ClassMeta;
       5: areturn

  public static io.manbang.ebatis.core.meta.ClassMeta field(java.lang.reflect.Field, java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2                  // Method io/manbang/ebatis/core/meta/CachedFieldClassMeta.createIfAbsent:(Ljava/lang/reflect/Field;Ljava/lang/Class;)Lio/manbang/ebatis/core/meta/ClassMeta;
       5: areturn

  public static io.manbang.ebatis.core.meta.ClassMeta of(java.lang.Class<?>);
    Code:
       0: aload_0
       1: invokestatic  #3                  // Method io/manbang/ebatis/core/meta/CachedClassMeta.createIfAbsent:(Ljava/lang/Class;)Lio/manbang/ebatis/core/meta/ClassMeta;
       4: areturn

  public abstract java.util.List<io.manbang.ebatis.core.meta.MethodMeta> getMethodMetas();

  public abstract java.util.Optional<io.manbang.ebatis.core.meta.MethodMeta> findMethodMeta(java.lang.reflect.Method);

  public abstract io.manbang.ebatis.core.meta.MethodMeta getMethodMeta(java.lang.reflect.Method);

  public abstract java.util.List<io.manbang.ebatis.core.meta.FieldMeta> getFieldMetas();

  public abstract java.util.Optional<io.manbang.ebatis.core.meta.FieldMeta> findFieldMeta(java.lang.reflect.Field);

  public abstract io.manbang.ebatis.core.meta.FieldMeta getFieldMeta(java.lang.reflect.Field);

  public abstract java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.util.List<io.manbang.ebatis.core.meta.FieldMeta>> getQueryClauses();
}
