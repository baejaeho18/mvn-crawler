Compiled from "RetryAndFollowUpInterceptor.java"
public final class okhttp3.internal.http.RetryAndFollowUpInterceptor implements okhttp3.Interceptor {
  private static final int MAX_FOLLOW_UPS;

  private final okhttp3.OkHttpClient client;

  private okhttp3.internal.connection.StreamAllocation streamAllocation;

  private boolean forWebSocket;

  private volatile boolean canceled;

  public okhttp3.internal.http.RetryAndFollowUpInterceptor(okhttp3.OkHttpClient);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field client:Lokhttp3/OkHttpClient;
       9: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #5                  // Field canceled:Z
       5: aload_0
       6: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
       9: astore_1
      10: aload_1
      11: ifnull        18
      14: aload_1
      15: invokevirtual #7                  // Method okhttp3/internal/connection/StreamAllocation.cancel:()V
      18: return

  public boolean isCanceled();
    Code:
       0: aload_0
       1: getfield      #5                  // Field canceled:Z
       4: ireturn

  public okhttp3.OkHttpClient client();
    Code:
       0: aload_0
       1: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
       4: areturn

  public void setForWebSocket(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field forWebSocket:Z
       5: return

  public boolean isForWebSocket();
    Code:
       0: aload_0
       1: getfield      #8                  // Field forWebSocket:Z
       4: ireturn

  public okhttp3.internal.connection.StreamAllocation streamAllocation();
    Code:
       0: aload_0
       1: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
       4: areturn

  public okhttp3.Response intercept(okhttp3.Interceptor$Chain) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #9,  1            // InterfaceMethod okhttp3/Interceptor$Chain.request:()Lokhttp3/Request;
       6: astore_2
       7: aload_0
       8: new           #10                 // class okhttp3/internal/connection/StreamAllocation
      11: dup
      12: aload_0
      13: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      16: invokevirtual #11                 // Method okhttp3/OkHttpClient.connectionPool:()Lokhttp3/ConnectionPool;
      19: aload_0
      20: aload_2
      21: invokevirtual #12                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
      24: invokespecial #13                 // Method createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;
      27: invokespecial #14                 // Method okhttp3/internal/connection/StreamAllocation."<init>":(Lokhttp3/ConnectionPool;Lokhttp3/Address;)V
      30: putfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
      33: iconst_0
      34: istore_3
      35: aconst_null
      36: astore        4
      38: aload_0
      39: getfield      #5                  // Field canceled:Z
      42: ifeq          62
      45: aload_0
      46: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
      49: invokevirtual #15                 // Method okhttp3/internal/connection/StreamAllocation.release:()V
      52: new           #16                 // class java/io/IOException
      55: dup
      56: ldc           #17                 // String Canceled
      58: invokespecial #18                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      61: athrow
      62: aconst_null
      63: astore        5
      65: iconst_1
      66: istore        6
      68: aload_1
      69: checkcast     #19                 // class okhttp3/internal/http/RealInterceptorChain
      72: aload_2
      73: aload_0
      74: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
      77: aconst_null
      78: aconst_null
      79: invokevirtual #20                 // Method okhttp3/internal/http/RealInterceptorChain.proceed:(Lokhttp3/Request;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpStream;Lokhttp3/Connection;)Lokhttp3/Response;
      82: astore        5
      84: iconst_0
      85: istore        6
      87: iload         6
      89: ifeq          225
      92: aload_0
      93: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
      96: aconst_null
      97: invokevirtual #21                 // Method okhttp3/internal/connection/StreamAllocation.streamFailed:(Ljava/io/IOException;)V
     100: aload_0
     101: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     104: invokevirtual #15                 // Method okhttp3/internal/connection/StreamAllocation.release:()V
     107: goto          225
     110: astore        7
     112: aload_0
     113: aload         7
     115: invokevirtual #23                 // Method okhttp3/internal/connection/RouteException.getLastConnectException:()Ljava/io/IOException;
     118: iconst_1
     119: aload_2
     120: invokespecial #24                 // Method recover:(Ljava/io/IOException;ZLokhttp3/Request;)Z
     123: ifne          132
     126: aload         7
     128: invokevirtual #23                 // Method okhttp3/internal/connection/RouteException.getLastConnectException:()Ljava/io/IOException;
     131: athrow
     132: iconst_0
     133: istore        6
     135: iload         6
     137: ifeq          38
     140: aload_0
     141: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     144: aconst_null
     145: invokevirtual #21                 // Method okhttp3/internal/connection/StreamAllocation.streamFailed:(Ljava/io/IOException;)V
     148: aload_0
     149: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     152: invokevirtual #15                 // Method okhttp3/internal/connection/StreamAllocation.release:()V
     155: goto          38
     158: astore        7
     160: aload_0
     161: aload         7
     163: iconst_0
     164: aload_2
     165: invokespecial #24                 // Method recover:(Ljava/io/IOException;ZLokhttp3/Request;)Z
     168: ifne          174
     171: aload         7
     173: athrow
     174: iconst_0
     175: istore        6
     177: iload         6
     179: ifeq          38
     182: aload_0
     183: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     186: aconst_null
     187: invokevirtual #21                 // Method okhttp3/internal/connection/StreamAllocation.streamFailed:(Ljava/io/IOException;)V
     190: aload_0
     191: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     194: invokevirtual #15                 // Method okhttp3/internal/connection/StreamAllocation.release:()V
     197: goto          38
     200: astore        8
     202: iload         6
     204: ifeq          222
     207: aload_0
     208: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     211: aconst_null
     212: invokevirtual #21                 // Method okhttp3/internal/connection/StreamAllocation.streamFailed:(Ljava/io/IOException;)V
     215: aload_0
     216: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     219: invokevirtual #15                 // Method okhttp3/internal/connection/StreamAllocation.release:()V
     222: aload         8
     224: athrow
     225: aload         4
     227: ifnull        255
     230: aload         5
     232: invokevirtual #25                 // Method okhttp3/Response.newBuilder:()Lokhttp3/Response$Builder;
     235: aload         4
     237: invokevirtual #25                 // Method okhttp3/Response.newBuilder:()Lokhttp3/Response$Builder;
     240: aconst_null
     241: invokevirtual #26                 // Method okhttp3/Response$Builder.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;
     244: invokevirtual #27                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
     247: invokevirtual #28                 // Method okhttp3/Response$Builder.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;
     250: invokevirtual #27                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
     253: astore        5
     255: aload_0
     256: aload         5
     258: invokespecial #29                 // Method followUpRequest:(Lokhttp3/Response;)Lokhttp3/Request;
     261: astore        7
     263: aload         7
     265: ifnonnull     285
     268: aload_0
     269: getfield      #8                  // Field forWebSocket:Z
     272: ifne          282
     275: aload_0
     276: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     279: invokevirtual #15                 // Method okhttp3/internal/connection/StreamAllocation.release:()V
     282: aload         5
     284: areturn
     285: aload         5
     287: invokevirtual #30                 // Method okhttp3/Response.body:()Lokhttp3/ResponseBody;
     290: invokestatic  #31                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
     293: iinc          3, 1
     296: iload_3
     297: bipush        20
     299: if_icmple     336
     302: aload_0
     303: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     306: invokevirtual #15                 // Method okhttp3/internal/connection/StreamAllocation.release:()V
     309: new           #33                 // class java/net/ProtocolException
     312: dup
     313: new           #34                 // class java/lang/StringBuilder
     316: dup
     317: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     320: ldc           #36                 // String Too many follow-up requests:
     322: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     325: iload_3
     326: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     329: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     332: invokespecial #40                 // Method java/net/ProtocolException."<init>":(Ljava/lang/String;)V
     335: athrow
     336: aload         7
     338: invokevirtual #41                 // Method okhttp3/Request.body:()Lokhttp3/RequestBody;
     341: instanceof    #42                 // class okhttp3/internal/http/UnrepeatableRequestBody
     344: ifeq          362
     347: new           #43                 // class java/net/HttpRetryException
     350: dup
     351: ldc           #44                 // String Cannot retry streamed HTTP body
     353: aload         5
     355: invokevirtual #45                 // Method okhttp3/Response.code:()I
     358: invokespecial #46                 // Method java/net/HttpRetryException."<init>":(Ljava/lang/String;I)V
     361: athrow
     362: aload_0
     363: aload         5
     365: aload         7
     367: invokevirtual #12                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
     370: invokespecial #47                 // Method sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z
     373: ifne          413
     376: aload_0
     377: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     380: invokevirtual #15                 // Method okhttp3/internal/connection/StreamAllocation.release:()V
     383: aload_0
     384: new           #10                 // class okhttp3/internal/connection/StreamAllocation
     387: dup
     388: aload_0
     389: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
     392: invokevirtual #11                 // Method okhttp3/OkHttpClient.connectionPool:()Lokhttp3/ConnectionPool;
     395: aload_0
     396: aload         7
     398: invokevirtual #12                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
     401: invokespecial #13                 // Method createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;
     404: invokespecial #14                 // Method okhttp3/internal/connection/StreamAllocation."<init>":(Lokhttp3/ConnectionPool;Lokhttp3/Address;)V
     407: putfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     410: goto          456
     413: aload_0
     414: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
     417: invokevirtual #48                 // Method okhttp3/internal/connection/StreamAllocation.stream:()Lokhttp3/internal/http/HttpStream;
     420: ifnull        456
     423: new           #49                 // class java/lang/IllegalStateException
     426: dup
     427: new           #34                 // class java/lang/StringBuilder
     430: dup
     431: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     434: ldc           #50                 // String Closing the body of
     436: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     439: aload         5
     441: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     444: ldc           #52                 // String  didn\'t close its backing stream. Bad interceptor?
     446: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     449: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     452: invokespecial #53                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     455: athrow
     456: aload         7
     458: astore_2
     459: aload         5
     461: astore        4
     463: goto          38
    Exception table:
       from    to  target type
          68    87   110   Class okhttp3/internal/connection/RouteException
          68    87   158   Class java/io/IOException
          68    87   200   any
         110   135   200   any
         158   177   200   any
         200   202   200   any

  private okhttp3.Address createAddress(okhttp3.HttpUrl);
    Code:
       0: aconst_null
       1: astore_2
       2: aconst_null
       3: astore_3
       4: aconst_null
       5: astore        4
       7: aload_1
       8: invokevirtual #54                 // Method okhttp3/HttpUrl.isHttps:()Z
      11: ifeq          39
      14: aload_0
      15: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      18: invokevirtual #55                 // Method okhttp3/OkHttpClient.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;
      21: astore_2
      22: aload_0
      23: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      26: invokevirtual #56                 // Method okhttp3/OkHttpClient.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;
      29: astore_3
      30: aload_0
      31: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      34: invokevirtual #57                 // Method okhttp3/OkHttpClient.certificatePinner:()Lokhttp3/CertificatePinner;
      37: astore        4
      39: new           #58                 // class okhttp3/Address
      42: dup
      43: aload_1
      44: invokevirtual #59                 // Method okhttp3/HttpUrl.host:()Ljava/lang/String;
      47: aload_1
      48: invokevirtual #60                 // Method okhttp3/HttpUrl.port:()I
      51: aload_0
      52: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      55: invokevirtual #61                 // Method okhttp3/OkHttpClient.dns:()Lokhttp3/Dns;
      58: aload_0
      59: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      62: invokevirtual #62                 // Method okhttp3/OkHttpClient.socketFactory:()Ljavax/net/SocketFactory;
      65: aload_2
      66: aload_3
      67: aload         4
      69: aload_0
      70: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      73: invokevirtual #63                 // Method okhttp3/OkHttpClient.proxyAuthenticator:()Lokhttp3/Authenticator;
      76: aload_0
      77: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      80: invokevirtual #64                 // Method okhttp3/OkHttpClient.proxy:()Ljava/net/Proxy;
      83: aload_0
      84: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      87: invokevirtual #65                 // Method okhttp3/OkHttpClient.protocols:()Ljava/util/List;
      90: aload_0
      91: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      94: invokevirtual #66                 // Method okhttp3/OkHttpClient.connectionSpecs:()Ljava/util/List;
      97: aload_0
      98: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
     101: invokevirtual #67                 // Method okhttp3/OkHttpClient.proxySelector:()Ljava/net/ProxySelector;
     104: invokespecial #68                 // Method okhttp3/Address."<init>":(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V
     107: areturn

  private boolean recover(java.io.IOException, boolean, okhttp3.Request);
    Code:
       0: aload_0
       1: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
       4: aload_1
       5: invokevirtual #21                 // Method okhttp3/internal/connection/StreamAllocation.streamFailed:(Ljava/io/IOException;)V
       8: aload_0
       9: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      12: invokevirtual #69                 // Method okhttp3/OkHttpClient.retryOnConnectionFailure:()Z
      15: ifne          20
      18: iconst_0
      19: ireturn
      20: iload_2
      21: ifne          36
      24: aload_3
      25: invokevirtual #41                 // Method okhttp3/Request.body:()Lokhttp3/RequestBody;
      28: instanceof    #42                 // class okhttp3/internal/http/UnrepeatableRequestBody
      31: ifeq          36
      34: iconst_0
      35: ireturn
      36: aload_0
      37: aload_1
      38: iload_2
      39: invokespecial #70                 // Method isRecoverable:(Ljava/io/IOException;Z)Z
      42: ifne          47
      45: iconst_0
      46: ireturn
      47: aload_0
      48: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
      51: invokevirtual #71                 // Method okhttp3/internal/connection/StreamAllocation.hasMoreRoutes:()Z
      54: ifne          59
      57: iconst_0
      58: ireturn
      59: iconst_1
      60: ireturn

  private boolean isRecoverable(java.io.IOException, boolean);
    Code:
       0: aload_1
       1: instanceof    #33                 // class java/net/ProtocolException
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: instanceof    #72                 // class java/io/InterruptedIOException
      13: ifeq          33
      16: aload_1
      17: instanceof    #73                 // class java/net/SocketTimeoutException
      20: ifeq          31
      23: iload_2
      24: ifeq          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn
      33: aload_1
      34: instanceof    #74                 // class javax/net/ssl/SSLHandshakeException
      37: ifeq          52
      40: aload_1
      41: invokevirtual #75                 // Method java/io/IOException.getCause:()Ljava/lang/Throwable;
      44: instanceof    #76                 // class java/security/cert/CertificateException
      47: ifeq          52
      50: iconst_0
      51: ireturn
      52: aload_1
      53: instanceof    #77                 // class javax/net/ssl/SSLPeerUnverifiedException
      56: ifeq          61
      59: iconst_0
      60: ireturn
      61: iconst_1
      62: ireturn

  private okhttp3.Request followUpRequest(okhttp3.Response) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #49                 // class java/lang/IllegalStateException
       7: dup
       8: invokespecial #78                 // Method java/lang/IllegalStateException."<init>":()V
      11: athrow
      12: aload_0
      13: getfield      #6                  // Field streamAllocation:Lokhttp3/internal/connection/StreamAllocation;
      16: invokevirtual #79                 // Method okhttp3/internal/connection/StreamAllocation.connection:()Lokhttp3/internal/connection/RealConnection;
      19: astore_2
      20: aload_2
      21: ifnull        33
      24: aload_2
      25: invokeinterface #80,  1           // InterfaceMethod okhttp3/Connection.route:()Lokhttp3/Route;
      30: goto          34
      33: aconst_null
      34: astore_3
      35: aload_1
      36: invokevirtual #45                 // Method okhttp3/Response.code:()I
      39: istore        4
      41: aload_1
      42: invokevirtual #81                 // Method okhttp3/Response.request:()Lokhttp3/Request;
      45: invokevirtual #82                 // Method okhttp3/Request.method:()Ljava/lang/String;
      48: astore        5
      50: iload         4
      52: lookupswitch  { // 9
                   300: 229
                   301: 229
                   302: 229
                   303: 229
                   307: 207
                   308: 207
                   401: 192
                   407: 136
                   408: 413
               default: 433
          }
     136: aload_3
     137: ifnull        147
     140: aload_3
     141: invokevirtual #83                 // Method okhttp3/Route.proxy:()Ljava/net/Proxy;
     144: goto          154
     147: aload_0
     148: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
     151: invokevirtual #64                 // Method okhttp3/OkHttpClient.proxy:()Ljava/net/Proxy;
     154: astore        6
     156: aload         6
     158: invokevirtual #84                 // Method java/net/Proxy.type:()Ljava/net/Proxy$Type;
     161: getstatic     #85                 // Field java/net/Proxy$Type.HTTP:Ljava/net/Proxy$Type;
     164: if_acmpeq     177
     167: new           #33                 // class java/net/ProtocolException
     170: dup
     171: ldc           #86                 // String Received HTTP_PROXY_AUTH (407) code while not using proxy
     173: invokespecial #40                 // Method java/net/ProtocolException."<init>":(Ljava/lang/String;)V
     176: athrow
     177: aload_0
     178: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
     181: invokevirtual #63                 // Method okhttp3/OkHttpClient.proxyAuthenticator:()Lokhttp3/Authenticator;
     184: aload_3
     185: aload_1
     186: invokeinterface #87,  3           // InterfaceMethod okhttp3/Authenticator.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;
     191: areturn
     192: aload_0
     193: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
     196: invokevirtual #88                 // Method okhttp3/OkHttpClient.authenticator:()Lokhttp3/Authenticator;
     199: aload_3
     200: aload_1
     201: invokeinterface #87,  3           // InterfaceMethod okhttp3/Authenticator.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;
     206: areturn
     207: aload         5
     209: ldc           #89                 // String GET
     211: invokevirtual #90                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     214: ifne          229
     217: aload         5
     219: ldc           #91                 // String HEAD
     221: invokevirtual #90                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     224: ifne          229
     227: aconst_null
     228: areturn
     229: aload_0
     230: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
     233: invokevirtual #92                 // Method okhttp3/OkHttpClient.followRedirects:()Z
     236: ifne          241
     239: aconst_null
     240: areturn
     241: aload_1
     242: ldc           #93                 // String Location
     244: invokevirtual #94                 // Method okhttp3/Response.header:(Ljava/lang/String;)Ljava/lang/String;
     247: astore        7
     249: aload         7
     251: ifnonnull     256
     254: aconst_null
     255: areturn
     256: aload_1
     257: invokevirtual #81                 // Method okhttp3/Response.request:()Lokhttp3/Request;
     260: invokevirtual #12                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
     263: aload         7
     265: invokevirtual #95                 // Method okhttp3/HttpUrl.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;
     268: astore        8
     270: aload         8
     272: ifnonnull     277
     275: aconst_null
     276: areturn
     277: aload         8
     279: invokevirtual #96                 // Method okhttp3/HttpUrl.scheme:()Ljava/lang/String;
     282: aload_1
     283: invokevirtual #81                 // Method okhttp3/Response.request:()Lokhttp3/Request;
     286: invokevirtual #12                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
     289: invokevirtual #96                 // Method okhttp3/HttpUrl.scheme:()Ljava/lang/String;
     292: invokevirtual #90                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     295: istore        9
     297: iload         9
     299: ifne          314
     302: aload_0
     303: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
     306: invokevirtual #97                 // Method okhttp3/OkHttpClient.followSslRedirects:()Z
     309: ifne          314
     312: aconst_null
     313: areturn
     314: aload_1
     315: invokevirtual #81                 // Method okhttp3/Response.request:()Lokhttp3/Request;
     318: invokevirtual #98                 // Method okhttp3/Request.newBuilder:()Lokhttp3/Request$Builder;
     321: astore        10
     323: aload         5
     325: invokestatic  #99                 // Method okhttp3/internal/http/HttpMethod.permitsRequestBody:(Ljava/lang/String;)Z
     328: ifeq          384
     331: aload         5
     333: invokestatic  #100                // Method okhttp3/internal/http/HttpMethod.redirectsToGet:(Ljava/lang/String;)Z
     336: ifeq          351
     339: aload         10
     341: ldc           #89                 // String GET
     343: aconst_null
     344: invokevirtual #101                // Method okhttp3/Request$Builder.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;
     347: pop
     348: goto          360
     351: aload         10
     353: aload         5
     355: aconst_null
     356: invokevirtual #101                // Method okhttp3/Request$Builder.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;
     359: pop
     360: aload         10
     362: ldc           #102                // String Transfer-Encoding
     364: invokevirtual #103                // Method okhttp3/Request$Builder.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;
     367: pop
     368: aload         10
     370: ldc           #104                // String Content-Length
     372: invokevirtual #103                // Method okhttp3/Request$Builder.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;
     375: pop
     376: aload         10
     378: ldc           #105                // String Content-Type
     380: invokevirtual #103                // Method okhttp3/Request$Builder.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;
     383: pop
     384: aload_0
     385: aload_1
     386: aload         8
     388: invokespecial #47                 // Method sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z
     391: ifne          402
     394: aload         10
     396: ldc           #106                // String Authorization
     398: invokevirtual #103                // Method okhttp3/Request$Builder.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;
     401: pop
     402: aload         10
     404: aload         8
     406: invokevirtual #107                // Method okhttp3/Request$Builder.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;
     409: invokevirtual #108                // Method okhttp3/Request$Builder.build:()Lokhttp3/Request;
     412: areturn
     413: aload_1
     414: invokevirtual #81                 // Method okhttp3/Response.request:()Lokhttp3/Request;
     417: invokevirtual #41                 // Method okhttp3/Request.body:()Lokhttp3/RequestBody;
     420: instanceof    #42                 // class okhttp3/internal/http/UnrepeatableRequestBody
     423: ifeq          428
     426: aconst_null
     427: areturn
     428: aload_1
     429: invokevirtual #81                 // Method okhttp3/Response.request:()Lokhttp3/Request;
     432: areturn
     433: aconst_null
     434: areturn

  private boolean sameConnection(okhttp3.Response, okhttp3.HttpUrl);
    Code:
       0: aload_1
       1: invokevirtual #81                 // Method okhttp3/Response.request:()Lokhttp3/Request;
       4: invokevirtual #12                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
       7: astore_3
       8: aload_3
       9: invokevirtual #59                 // Method okhttp3/HttpUrl.host:()Ljava/lang/String;
      12: aload_2
      13: invokevirtual #59                 // Method okhttp3/HttpUrl.host:()Ljava/lang/String;
      16: invokevirtual #90                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      19: ifeq          51
      22: aload_3
      23: invokevirtual #60                 // Method okhttp3/HttpUrl.port:()I
      26: aload_2
      27: invokevirtual #60                 // Method okhttp3/HttpUrl.port:()I
      30: if_icmpne     51
      33: aload_3
      34: invokevirtual #96                 // Method okhttp3/HttpUrl.scheme:()Ljava/lang/String;
      37: aload_2
      38: invokevirtual #96                 // Method okhttp3/HttpUrl.scheme:()Ljava/lang/String;
      41: invokevirtual #90                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      44: ifeq          51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: ireturn
}
