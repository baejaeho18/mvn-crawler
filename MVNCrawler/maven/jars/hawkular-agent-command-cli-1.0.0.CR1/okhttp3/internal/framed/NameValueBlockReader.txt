Compiled from "NameValueBlockReader.java"
class okhttp3.internal.framed.NameValueBlockReader {
  private final okio.InflaterSource inflaterSource;

  private int compressedLimit;

  private final okio.BufferedSource source;

  public okhttp3.internal.framed.NameValueBlockReader(okio.BufferedSource);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: new           #3                  // class okhttp3/internal/framed/NameValueBlockReader$1
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #4                  // Method okhttp3/internal/framed/NameValueBlockReader$1."<init>":(Lokhttp3/internal/framed/NameValueBlockReader;Lokio/Source;)V
      13: astore_2
      14: new           #5                  // class okhttp3/internal/framed/NameValueBlockReader$2
      17: dup
      18: aload_0
      19: invokespecial #6                  // Method okhttp3/internal/framed/NameValueBlockReader$2."<init>":(Lokhttp3/internal/framed/NameValueBlockReader;)V
      22: astore_3
      23: aload_0
      24: new           #7                  // class okio/InflaterSource
      27: dup
      28: aload_2
      29: aload_3
      30: invokespecial #8                  // Method okio/InflaterSource."<init>":(Lokio/Source;Ljava/util/zip/Inflater;)V
      33: putfield      #9                  // Field inflaterSource:Lokio/InflaterSource;
      36: aload_0
      37: aload_0
      38: getfield      #9                  // Field inflaterSource:Lokio/InflaterSource;
      41: invokestatic  #10                 // Method okio/Okio.buffer:(Lokio/Source;)Lokio/BufferedSource;
      44: putfield      #11                 // Field source:Lokio/BufferedSource;
      47: return

  public java.util.List<okhttp3.internal.framed.Header> readNameValueBlock(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #1                  // Field compressedLimit:I
       5: iload_1
       6: iadd
       7: putfield      #1                  // Field compressedLimit:I
      10: aload_0
      11: getfield      #11                 // Field source:Lokio/BufferedSource;
      14: invokeinterface #12,  1           // InterfaceMethod okio/BufferedSource.readInt:()I
      19: istore_2
      20: iload_2
      21: ifge          51
      24: new           #13                 // class java/io/IOException
      27: dup
      28: new           #14                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #16                 // String numberOfPairs < 0:
      37: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: iload_2
      41: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      44: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #20                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: iload_2
      52: sipush        1024
      55: if_icmple     85
      58: new           #13                 // class java/io/IOException
      61: dup
      62: new           #14                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #21                 // String numberOfPairs > 1024:
      71: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: iload_2
      75: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      78: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      81: invokespecial #20                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      84: athrow
      85: new           #22                 // class java/util/ArrayList
      88: dup
      89: iload_2
      90: invokespecial #23                 // Method java/util/ArrayList."<init>":(I)V
      93: astore_3
      94: iconst_0
      95: istore        4
      97: iload         4
      99: iload_2
     100: if_icmpge     160
     103: aload_0
     104: invokespecial #24                 // Method readByteString:()Lokio/ByteString;
     107: invokevirtual #25                 // Method okio/ByteString.toAsciiLowercase:()Lokio/ByteString;
     110: astore        5
     112: aload_0
     113: invokespecial #24                 // Method readByteString:()Lokio/ByteString;
     116: astore        6
     118: aload         5
     120: invokevirtual #26                 // Method okio/ByteString.size:()I
     123: ifne          136
     126: new           #13                 // class java/io/IOException
     129: dup
     130: ldc           #27                 // String name.size == 0
     132: invokespecial #20                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     135: athrow
     136: aload_3
     137: new           #28                 // class okhttp3/internal/framed/Header
     140: dup
     141: aload         5
     143: aload         6
     145: invokespecial #29                 // Method okhttp3/internal/framed/Header."<init>":(Lokio/ByteString;Lokio/ByteString;)V
     148: invokeinterface #30,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     153: pop
     154: iinc          4, 1
     157: goto          97
     160: aload_0
     161: invokespecial #31                 // Method doneReading:()V
     164: aload_3
     165: areturn

  private okio.ByteString readByteString() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field source:Lokio/BufferedSource;
       4: invokeinterface #12,  1           // InterfaceMethod okio/BufferedSource.readInt:()I
       9: istore_1
      10: aload_0
      11: getfield      #11                 // Field source:Lokio/BufferedSource;
      14: iload_1
      15: i2l
      16: invokeinterface #32,  3           // InterfaceMethod okio/BufferedSource.readByteString:(J)Lokio/ByteString;
      21: areturn

  private void doneReading() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field compressedLimit:I
       4: ifle          52
       7: aload_0
       8: getfield      #9                  // Field inflaterSource:Lokio/InflaterSource;
      11: invokevirtual #33                 // Method okio/InflaterSource.refill:()Z
      14: pop
      15: aload_0
      16: getfield      #1                  // Field compressedLimit:I
      19: ifeq          52
      22: new           #13                 // class java/io/IOException
      25: dup
      26: new           #14                 // class java/lang/StringBuilder
      29: dup
      30: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      33: ldc           #34                 // String compressedLimit > 0:
      35: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_0
      39: getfield      #1                  // Field compressedLimit:I
      42: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      45: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokespecial #20                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field source:Lokio/BufferedSource;
       4: invokeinterface #35,  1           // InterfaceMethod okio/BufferedSource.close:()V
       9: return

  static int access$000(okhttp3.internal.framed.NameValueBlockReader);
    Code:
       0: aload_0
       1: getfield      #1                  // Field compressedLimit:I
       4: ireturn

  static int access$002(okhttp3.internal.framed.NameValueBlockReader, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #1                  // Field compressedLimit:I
       6: ireturn
}
