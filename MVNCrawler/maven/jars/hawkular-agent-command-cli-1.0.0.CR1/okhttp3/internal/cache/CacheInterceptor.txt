Compiled from "CacheInterceptor.java"
public final class okhttp3.internal.cache.CacheInterceptor implements okhttp3.Interceptor {
  private static final okhttp3.ResponseBody EMPTY_BODY;

  final okhttp3.internal.cache.InternalCache cache;

  public okhttp3.internal.cache.CacheInterceptor(okhttp3.internal.cache.InternalCache);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field cache:Lokhttp3/internal/cache/InternalCache;
       9: return

  public okhttp3.Response intercept(okhttp3.Interceptor$Chain) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field cache:Lokhttp3/internal/cache/InternalCache;
       4: ifnull        25
       7: aload_0
       8: getfield      #3                  // Field cache:Lokhttp3/internal/cache/InternalCache;
      11: aload_1
      12: invokeinterface #4,  1            // InterfaceMethod okhttp3/Interceptor$Chain.request:()Lokhttp3/Request;
      17: invokeinterface #5,  2            // InterfaceMethod okhttp3/internal/cache/InternalCache.get:(Lokhttp3/Request;)Lokhttp3/Response;
      22: goto          26
      25: aconst_null
      26: astore_2
      27: invokestatic  #6                  // Method java/lang/System.currentTimeMillis:()J
      30: lstore_3
      31: new           #7                  // class okhttp3/internal/cache/CacheStrategy$Factory
      34: dup
      35: lload_3
      36: aload_1
      37: invokeinterface #4,  1            // InterfaceMethod okhttp3/Interceptor$Chain.request:()Lokhttp3/Request;
      42: aload_2
      43: invokespecial #8                  // Method okhttp3/internal/cache/CacheStrategy$Factory."<init>":(JLokhttp3/Request;Lokhttp3/Response;)V
      46: invokevirtual #9                  // Method okhttp3/internal/cache/CacheStrategy$Factory.get:()Lokhttp3/internal/cache/CacheStrategy;
      49: astore        5
      51: aload         5
      53: getfield      #10                 // Field okhttp3/internal/cache/CacheStrategy.networkRequest:Lokhttp3/Request;
      56: astore        6
      58: aload         5
      60: getfield      #11                 // Field okhttp3/internal/cache/CacheStrategy.cacheResponse:Lokhttp3/Response;
      63: astore        7
      65: aload_0
      66: getfield      #3                  // Field cache:Lokhttp3/internal/cache/InternalCache;
      69: ifnull        83
      72: aload_0
      73: getfield      #3                  // Field cache:Lokhttp3/internal/cache/InternalCache;
      76: aload         5
      78: invokeinterface #12,  2           // InterfaceMethod okhttp3/internal/cache/InternalCache.trackResponse:(Lokhttp3/internal/cache/CacheStrategy;)V
      83: aload_2
      84: ifnull        99
      87: aload         7
      89: ifnonnull     99
      92: aload_2
      93: invokevirtual #13                 // Method okhttp3/Response.body:()Lokhttp3/ResponseBody;
      96: invokestatic  #14                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
      99: aload         6
     101: ifnonnull     164
     104: aload         7
     106: ifnonnull     164
     109: new           #15                 // class okhttp3/Response$Builder
     112: dup
     113: invokespecial #16                 // Method okhttp3/Response$Builder."<init>":()V
     116: aload_1
     117: invokeinterface #4,  1            // InterfaceMethod okhttp3/Interceptor$Chain.request:()Lokhttp3/Request;
     122: invokevirtual #17                 // Method okhttp3/Response$Builder.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;
     125: getstatic     #18                 // Field okhttp3/Protocol.HTTP_1_1:Lokhttp3/Protocol;
     128: invokevirtual #19                 // Method okhttp3/Response$Builder.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;
     131: sipush        504
     134: invokevirtual #20                 // Method okhttp3/Response$Builder.code:(I)Lokhttp3/Response$Builder;
     137: ldc           #21                 // String Unsatisfiable Request (only-if-cached)
     139: invokevirtual #22                 // Method okhttp3/Response$Builder.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;
     142: getstatic     #23                 // Field EMPTY_BODY:Lokhttp3/ResponseBody;
     145: invokevirtual #24                 // Method okhttp3/Response$Builder.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;
     148: ldc2_w        #25                 // long -1l
     151: invokevirtual #27                 // Method okhttp3/Response$Builder.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;
     154: invokestatic  #6                  // Method java/lang/System.currentTimeMillis:()J
     157: invokevirtual #28                 // Method okhttp3/Response$Builder.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;
     160: invokevirtual #29                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
     163: areturn
     164: aload         6
     166: ifnonnull     186
     169: aload         7
     171: invokevirtual #30                 // Method okhttp3/Response.newBuilder:()Lokhttp3/Response$Builder;
     174: aload         7
     176: invokestatic  #31                 // Method stripBody:(Lokhttp3/Response;)Lokhttp3/Response;
     179: invokevirtual #32                 // Method okhttp3/Response$Builder.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;
     182: invokevirtual #29                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
     185: areturn
     186: aconst_null
     187: astore        8
     189: aload_1
     190: aload         6
     192: invokeinterface #33,  2           // InterfaceMethod okhttp3/Interceptor$Chain.proceed:(Lokhttp3/Request;)Lokhttp3/Response;
     197: astore        8
     199: aload         8
     201: ifnonnull     239
     204: aload_2
     205: ifnull        239
     208: aload_2
     209: invokevirtual #13                 // Method okhttp3/Response.body:()Lokhttp3/ResponseBody;
     212: invokestatic  #14                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
     215: goto          239
     218: astore        9
     220: aload         8
     222: ifnonnull     236
     225: aload_2
     226: ifnull        236
     229: aload_2
     230: invokevirtual #13                 // Method okhttp3/Response.body:()Lokhttp3/ResponseBody;
     233: invokestatic  #14                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
     236: aload         9
     238: athrow
     239: aload         7
     241: ifnull        337
     244: aload         7
     246: aload         8
     248: invokestatic  #34                 // Method validate:(Lokhttp3/Response;Lokhttp3/Response;)Z
     251: ifeq          329
     254: aload         7
     256: invokevirtual #30                 // Method okhttp3/Response.newBuilder:()Lokhttp3/Response$Builder;
     259: aload         7
     261: invokevirtual #35                 // Method okhttp3/Response.headers:()Lokhttp3/Headers;
     264: aload         8
     266: invokevirtual #35                 // Method okhttp3/Response.headers:()Lokhttp3/Headers;
     269: invokestatic  #36                 // Method combine:(Lokhttp3/Headers;Lokhttp3/Headers;)Lokhttp3/Headers;
     272: invokevirtual #37                 // Method okhttp3/Response$Builder.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;
     275: aload         7
     277: invokestatic  #31                 // Method stripBody:(Lokhttp3/Response;)Lokhttp3/Response;
     280: invokevirtual #32                 // Method okhttp3/Response$Builder.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;
     283: aload         8
     285: invokestatic  #31                 // Method stripBody:(Lokhttp3/Response;)Lokhttp3/Response;
     288: invokevirtual #38                 // Method okhttp3/Response$Builder.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;
     291: invokevirtual #29                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
     294: astore        9
     296: aload         8
     298: invokevirtual #13                 // Method okhttp3/Response.body:()Lokhttp3/ResponseBody;
     301: invokevirtual #39                 // Method okhttp3/ResponseBody.close:()V
     304: aload_0
     305: getfield      #3                  // Field cache:Lokhttp3/internal/cache/InternalCache;
     308: invokeinterface #40,  1           // InterfaceMethod okhttp3/internal/cache/InternalCache.trackConditionalCacheHit:()V
     313: aload_0
     314: getfield      #3                  // Field cache:Lokhttp3/internal/cache/InternalCache;
     317: aload         7
     319: aload         9
     321: invokeinterface #41,  3           // InterfaceMethod okhttp3/internal/cache/InternalCache.update:(Lokhttp3/Response;Lokhttp3/Response;)V
     326: aload         9
     328: areturn
     329: aload         7
     331: invokevirtual #13                 // Method okhttp3/Response.body:()Lokhttp3/ResponseBody;
     334: invokestatic  #14                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
     337: aload         8
     339: invokevirtual #30                 // Method okhttp3/Response.newBuilder:()Lokhttp3/Response$Builder;
     342: aload         7
     344: invokestatic  #31                 // Method stripBody:(Lokhttp3/Response;)Lokhttp3/Response;
     347: invokevirtual #32                 // Method okhttp3/Response$Builder.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;
     350: aload         8
     352: invokestatic  #31                 // Method stripBody:(Lokhttp3/Response;)Lokhttp3/Response;
     355: invokevirtual #38                 // Method okhttp3/Response$Builder.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;
     358: invokevirtual #29                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
     361: astore        9
     363: aload         9
     365: invokestatic  #42                 // Method okhttp3/internal/http/HttpHeaders.hasBody:(Lokhttp3/Response;)Z
     368: ifeq          398
     371: aload_0
     372: aload         9
     374: aload         8
     376: invokevirtual #43                 // Method okhttp3/Response.request:()Lokhttp3/Request;
     379: aload_0
     380: getfield      #3                  // Field cache:Lokhttp3/internal/cache/InternalCache;
     383: invokespecial #44                 // Method maybeCache:(Lokhttp3/Response;Lokhttp3/Request;Lokhttp3/internal/cache/InternalCache;)Lokhttp3/internal/cache/CacheRequest;
     386: astore        10
     388: aload_0
     389: aload         10
     391: aload         9
     393: invokespecial #45                 // Method cacheWritingResponse:(Lokhttp3/internal/cache/CacheRequest;Lokhttp3/Response;)Lokhttp3/Response;
     396: astore        9
     398: aload         9
     400: areturn
    Exception table:
       from    to  target type
         189   199   218   any
         218   220   218   any

  private static okhttp3.Response stripBody(okhttp3.Response);
    Code:
       0: aload_0
       1: ifnull        25
       4: aload_0
       5: invokevirtual #13                 // Method okhttp3/Response.body:()Lokhttp3/ResponseBody;
       8: ifnull        25
      11: aload_0
      12: invokevirtual #30                 // Method okhttp3/Response.newBuilder:()Lokhttp3/Response$Builder;
      15: aconst_null
      16: invokevirtual #24                 // Method okhttp3/Response$Builder.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;
      19: invokevirtual #29                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
      22: goto          26
      25: aload_0
      26: areturn

  private okhttp3.internal.cache.CacheRequest maybeCache(okhttp3.Response, okhttp3.Request, okhttp3.internal.cache.InternalCache) throws java.io.IOException;
    Code:
       0: aload_3
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_1
       7: aload_2
       8: invokestatic  #46                 // Method okhttp3/internal/cache/CacheStrategy.isCacheable:(Lokhttp3/Response;Lokhttp3/Request;)Z
      11: ifne          38
      14: aload_2
      15: invokevirtual #47                 // Method okhttp3/Request.method:()Ljava/lang/String;
      18: invokestatic  #48                 // Method okhttp3/internal/http/HttpMethod.invalidatesCache:(Ljava/lang/String;)Z
      21: ifeq          36
      24: aload_3
      25: aload_2
      26: invokeinterface #49,  2           // InterfaceMethod okhttp3/internal/cache/InternalCache.remove:(Lokhttp3/Request;)V
      31: goto          36
      34: astore        4
      36: aconst_null
      37: areturn
      38: aload_3
      39: aload_1
      40: invokeinterface #51,  2           // InterfaceMethod okhttp3/internal/cache/InternalCache.put:(Lokhttp3/Response;)Lokhttp3/internal/cache/CacheRequest;
      45: areturn
    Exception table:
       from    to  target type
          24    31    34   Class java/io/IOException

  private okhttp3.Response cacheWritingResponse(okhttp3.internal.cache.CacheRequest, okhttp3.Response) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aload_2
       5: areturn
       6: aload_1
       7: invokeinterface #52,  1           // InterfaceMethod okhttp3/internal/cache/CacheRequest.body:()Lokio/Sink;
      12: astore_3
      13: aload_3
      14: ifnonnull     19
      17: aload_2
      18: areturn
      19: aload_2
      20: invokevirtual #13                 // Method okhttp3/Response.body:()Lokhttp3/ResponseBody;
      23: invokevirtual #53                 // Method okhttp3/ResponseBody.source:()Lokio/BufferedSource;
      26: astore        4
      28: aload_3
      29: invokestatic  #54                 // Method okio/Okio.buffer:(Lokio/Sink;)Lokio/BufferedSink;
      32: astore        5
      34: new           #55                 // class okhttp3/internal/cache/CacheInterceptor$2
      37: dup
      38: aload_0
      39: aload         4
      41: aload_1
      42: aload         5
      44: invokespecial #56                 // Method okhttp3/internal/cache/CacheInterceptor$2."<init>":(Lokhttp3/internal/cache/CacheInterceptor;Lokio/BufferedSource;Lokhttp3/internal/cache/CacheRequest;Lokio/BufferedSink;)V
      47: astore        6
      49: aload_2
      50: invokevirtual #30                 // Method okhttp3/Response.newBuilder:()Lokhttp3/Response$Builder;
      53: new           #57                 // class okhttp3/internal/http/RealResponseBody
      56: dup
      57: aload_2
      58: invokevirtual #35                 // Method okhttp3/Response.headers:()Lokhttp3/Headers;
      61: aload         6
      63: invokestatic  #58                 // Method okio/Okio.buffer:(Lokio/Source;)Lokio/BufferedSource;
      66: invokespecial #59                 // Method okhttp3/internal/http/RealResponseBody."<init>":(Lokhttp3/Headers;Lokio/BufferedSource;)V
      69: invokevirtual #24                 // Method okhttp3/Response$Builder.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;
      72: invokevirtual #29                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
      75: areturn

  private static boolean validate(okhttp3.Response, okhttp3.Response);
    Code:
       0: aload_1
       1: invokevirtual #60                 // Method okhttp3/Response.code:()I
       4: sipush        304
       7: if_icmpne     12
      10: iconst_1
      11: ireturn
      12: aload_0
      13: invokevirtual #35                 // Method okhttp3/Response.headers:()Lokhttp3/Headers;
      16: ldc           #61                 // String Last-Modified
      18: invokevirtual #62                 // Method okhttp3/Headers.getDate:(Ljava/lang/String;)Ljava/util/Date;
      21: astore_2
      22: aload_2
      23: ifnull        54
      26: aload_1
      27: invokevirtual #35                 // Method okhttp3/Response.headers:()Lokhttp3/Headers;
      30: ldc           #61                 // String Last-Modified
      32: invokevirtual #62                 // Method okhttp3/Headers.getDate:(Ljava/lang/String;)Ljava/util/Date;
      35: astore_3
      36: aload_3
      37: ifnull        54
      40: aload_3
      41: invokevirtual #63                 // Method java/util/Date.getTime:()J
      44: aload_2
      45: invokevirtual #63                 // Method java/util/Date.getTime:()J
      48: lcmp
      49: ifge          54
      52: iconst_1
      53: ireturn
      54: iconst_0
      55: ireturn

  private static okhttp3.Headers combine(okhttp3.Headers, okhttp3.Headers);
    Code:
       0: new           #64                 // class okhttp3/Headers$Builder
       3: dup
       4: invokespecial #65                 // Method okhttp3/Headers$Builder."<init>":()V
       7: astore_2
       8: iconst_0
       9: istore_3
      10: aload_0
      11: invokevirtual #66                 // Method okhttp3/Headers.size:()I
      14: istore        4
      16: iload_3
      17: iload         4
      19: if_icmpge     93
      22: aload_0
      23: iload_3
      24: invokevirtual #67                 // Method okhttp3/Headers.name:(I)Ljava/lang/String;
      27: astore        5
      29: aload_0
      30: iload_3
      31: invokevirtual #68                 // Method okhttp3/Headers.value:(I)Ljava/lang/String;
      34: astore        6
      36: ldc           #69                 // String Warning
      38: aload         5
      40: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      43: ifeq          59
      46: aload         6
      48: ldc           #71                 // String 1
      50: invokevirtual #72                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      53: ifeq          59
      56: goto          87
      59: aload         5
      61: invokestatic  #73                 // Method isEndToEnd:(Ljava/lang/String;)Z
      64: ifeq          76
      67: aload_1
      68: aload         5
      70: invokevirtual #74                 // Method okhttp3/Headers.get:(Ljava/lang/String;)Ljava/lang/String;
      73: ifnonnull     87
      76: getstatic     #75                 // Field okhttp3/internal/Internal.instance:Lokhttp3/internal/Internal;
      79: aload_2
      80: aload         5
      82: aload         6
      84: invokevirtual #76                 // Method okhttp3/internal/Internal.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V
      87: iinc          3, 1
      90: goto          16
      93: iconst_0
      94: istore_3
      95: aload_1
      96: invokevirtual #66                 // Method okhttp3/Headers.size:()I
      99: istore        4
     101: iload_3
     102: iload         4
     104: if_icmpge     155
     107: aload_1
     108: iload_3
     109: invokevirtual #67                 // Method okhttp3/Headers.name:(I)Ljava/lang/String;
     112: astore        5
     114: ldc           #77                 // String Content-Length
     116: aload         5
     118: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     121: ifeq          127
     124: goto          149
     127: aload         5
     129: invokestatic  #73                 // Method isEndToEnd:(Ljava/lang/String;)Z
     132: ifeq          149
     135: getstatic     #75                 // Field okhttp3/internal/Internal.instance:Lokhttp3/internal/Internal;
     138: aload_2
     139: aload         5
     141: aload_1
     142: iload_3
     143: invokevirtual #68                 // Method okhttp3/Headers.value:(I)Ljava/lang/String;
     146: invokevirtual #76                 // Method okhttp3/internal/Internal.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V
     149: iinc          3, 1
     152: goto          101
     155: aload_2
     156: invokevirtual #78                 // Method okhttp3/Headers$Builder.build:()Lokhttp3/Headers;
     159: areturn

  static boolean isEndToEnd(java.lang.String);
    Code:
       0: ldc           #79                 // String Connection
       2: aload_0
       3: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifne          76
       9: ldc           #80                 // String Keep-Alive
      11: aload_0
      12: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      15: ifne          76
      18: ldc           #81                 // String Proxy-Authenticate
      20: aload_0
      21: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      24: ifne          76
      27: ldc           #82                 // String Proxy-Authorization
      29: aload_0
      30: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      33: ifne          76
      36: ldc           #83                 // String TE
      38: aload_0
      39: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      42: ifne          76
      45: ldc           #84                 // String Trailers
      47: aload_0
      48: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      51: ifne          76
      54: ldc           #85                 // String Transfer-Encoding
      56: aload_0
      57: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      60: ifne          76
      63: ldc           #86                 // String Upgrade
      65: aload_0
      66: invokevirtual #70                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      69: ifne          76
      72: iconst_1
      73: goto          77
      76: iconst_0
      77: ireturn

  static {};
    Code:
       0: new           #87                 // class okhttp3/internal/cache/CacheInterceptor$1
       3: dup
       4: invokespecial #88                 // Method okhttp3/internal/cache/CacheInterceptor$1."<init>":()V
       7: putstatic     #23                 // Field EMPTY_BODY:Lokhttp3/ResponseBody;
      10: return
}
