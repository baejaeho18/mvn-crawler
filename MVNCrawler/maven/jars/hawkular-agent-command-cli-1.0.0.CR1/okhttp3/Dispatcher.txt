Compiled from "Dispatcher.java"
public final class okhttp3.Dispatcher {
  private int maxRequests;

  private int maxRequestsPerHost;

  private java.lang.Runnable idleCallback;

  private java.util.concurrent.ExecutorService executorService;

  private final java.util.Deque<okhttp3.RealCall$AsyncCall> readyAsyncCalls;

  private final java.util.Deque<okhttp3.RealCall$AsyncCall> runningAsyncCalls;

  private final java.util.Deque<okhttp3.RealCall> runningSyncCalls;

  public okhttp3.Dispatcher(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        64
       7: putfield      #2                  // Field maxRequests:I
      10: aload_0
      11: iconst_5
      12: putfield      #3                  // Field maxRequestsPerHost:I
      15: aload_0
      16: new           #4                  // class java/util/ArrayDeque
      19: dup
      20: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      23: putfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      26: aload_0
      27: new           #4                  // class java/util/ArrayDeque
      30: dup
      31: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      37: aload_0
      38: new           #4                  // class java/util/ArrayDeque
      41: dup
      42: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      45: putfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      48: aload_0
      49: aload_1
      50: putfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
      53: return

  public okhttp3.Dispatcher();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        64
       7: putfield      #2                  // Field maxRequests:I
      10: aload_0
      11: iconst_5
      12: putfield      #3                  // Field maxRequestsPerHost:I
      15: aload_0
      16: new           #4                  // class java/util/ArrayDeque
      19: dup
      20: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      23: putfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      26: aload_0
      27: new           #4                  // class java/util/ArrayDeque
      30: dup
      31: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      37: aload_0
      38: new           #4                  // class java/util/ArrayDeque
      41: dup
      42: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      45: putfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      48: return

  public synchronized java.util.concurrent.ExecutorService executorService();
    Code:
       0: aload_0
       1: getfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
       4: ifnonnull     40
       7: aload_0
       8: new           #10                 // class java/util/concurrent/ThreadPoolExecutor
      11: dup
      12: iconst_0
      13: ldc           #12                 // int 2147483647
      15: ldc2_w        #13                 // long 60l
      18: getstatic     #15                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      21: new           #16                 // class java/util/concurrent/SynchronousQueue
      24: dup
      25: invokespecial #17                 // Method java/util/concurrent/SynchronousQueue."<init>":()V
      28: ldc           #18                 // String OkHttp Dispatcher
      30: iconst_0
      31: invokestatic  #19                 // Method okhttp3/internal/Util.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;
      34: invokespecial #20                 // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V
      37: putfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
      40: aload_0
      41: getfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
      44: areturn

  public synchronized void setMaxRequests(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     32
       5: new           #21                 // class java/lang/IllegalArgumentException
       8: dup
       9: new           #22                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #24                 // String max < 1:
      18: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: iload_1
      22: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: iload_1
      34: putfield      #2                  // Field maxRequests:I
      37: aload_0
      38: invokespecial #29                 // Method promoteCalls:()V
      41: return

  public synchronized int getMaxRequests();
    Code:
       0: aload_0
       1: getfield      #2                  // Field maxRequests:I
       4: ireturn

  public synchronized void setMaxRequestsPerHost(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     32
       5: new           #21                 // class java/lang/IllegalArgumentException
       8: dup
       9: new           #22                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #24                 // String max < 1:
      18: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: iload_1
      22: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: iload_1
      34: putfield      #3                  // Field maxRequestsPerHost:I
      37: aload_0
      38: invokespecial #29                 // Method promoteCalls:()V
      41: return

  public synchronized int getMaxRequestsPerHost();
    Code:
       0: aload_0
       1: getfield      #3                  // Field maxRequestsPerHost:I
       4: ireturn

  public synchronized void setIdleCallback(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field idleCallback:Ljava/lang/Runnable;
       5: return

  synchronized void enqueue(okhttp3.RealCall$AsyncCall);
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #31,  1           // InterfaceMethod java/util/Deque.size:()I
       9: aload_0
      10: getfield      #2                  // Field maxRequests:I
      13: if_icmpge     52
      16: aload_0
      17: aload_1
      18: invokespecial #32                 // Method runningCallsForHost:(Lokhttp3/RealCall$AsyncCall;)I
      21: aload_0
      22: getfield      #3                  // Field maxRequestsPerHost:I
      25: if_icmpge     52
      28: aload_0
      29: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      32: aload_1
      33: invokeinterface #33,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      38: pop
      39: aload_0
      40: invokevirtual #34                 // Method executorService:()Ljava/util/concurrent/ExecutorService;
      43: aload_1
      44: invokeinterface #35,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      49: goto          63
      52: aload_0
      53: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      56: aload_1
      57: invokeinterface #33,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      62: pop
      63: return

  public synchronized void cancelAll();
    Code:
       0: aload_0
       1: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #36,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          39
      19: aload_1
      20: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #39                 // class okhttp3/RealCall$AsyncCall
      28: astore_2
      29: aload_2
      30: invokevirtual #40                 // Method okhttp3/RealCall$AsyncCall.get:()Lokhttp3/RealCall;
      33: invokevirtual #41                 // Method okhttp3/RealCall.cancel:()V
      36: goto          10
      39: aload_0
      40: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      43: invokeinterface #36,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      48: astore_1
      49: aload_1
      50: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          78
      58: aload_1
      59: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      64: checkcast     #39                 // class okhttp3/RealCall$AsyncCall
      67: astore_2
      68: aload_2
      69: invokevirtual #40                 // Method okhttp3/RealCall$AsyncCall.get:()Lokhttp3/RealCall;
      72: invokevirtual #41                 // Method okhttp3/RealCall.cancel:()V
      75: goto          49
      78: aload_0
      79: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      82: invokeinterface #36,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      87: astore_1
      88: aload_1
      89: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      94: ifeq          114
      97: aload_1
      98: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     103: checkcast     #42                 // class okhttp3/RealCall
     106: astore_2
     107: aload_2
     108: invokevirtual #41                 // Method okhttp3/RealCall.cancel:()V
     111: goto          88
     114: return

  private void promoteCalls();
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #31,  1           // InterfaceMethod java/util/Deque.size:()I
       9: aload_0
      10: getfield      #2                  // Field maxRequests:I
      13: if_icmplt     17
      16: return
      17: aload_0
      18: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      21: invokeinterface #43,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      26: ifeq          30
      29: return
      30: aload_0
      31: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      34: invokeinterface #36,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      39: astore_1
      40: aload_1
      41: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      46: ifeq          118
      49: aload_1
      50: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      55: checkcast     #39                 // class okhttp3/RealCall$AsyncCall
      58: astore_2
      59: aload_0
      60: aload_2
      61: invokespecial #32                 // Method runningCallsForHost:(Lokhttp3/RealCall$AsyncCall;)I
      64: aload_0
      65: getfield      #3                  // Field maxRequestsPerHost:I
      68: if_icmpge     98
      71: aload_1
      72: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.remove:()V
      77: aload_0
      78: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      81: aload_2
      82: invokeinterface #33,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      87: pop
      88: aload_0
      89: invokevirtual #34                 // Method executorService:()Ljava/util/concurrent/ExecutorService;
      92: aload_2
      93: invokeinterface #35,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      98: aload_0
      99: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
     102: invokeinterface #31,  1           // InterfaceMethod java/util/Deque.size:()I
     107: aload_0
     108: getfield      #2                  // Field maxRequests:I
     111: if_icmplt     115
     114: return
     115: goto          40
     118: return

  private int runningCallsForHost(okhttp3.RealCall$AsyncCall);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
       6: invokeinterface #36,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          53
      21: aload_3
      22: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #39                 // class okhttp3/RealCall$AsyncCall
      30: astore        4
      32: aload         4
      34: invokevirtual #45                 // Method okhttp3/RealCall$AsyncCall.host:()Ljava/lang/String;
      37: aload_1
      38: invokevirtual #45                 // Method okhttp3/RealCall$AsyncCall.host:()Ljava/lang/String;
      41: invokevirtual #46                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      44: ifeq          50
      47: iinc          2, 1
      50: goto          12
      53: iload_2
      54: ireturn

  synchronized void executed(okhttp3.RealCall);
    Code:
       0: aload_0
       1: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #33,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  void finished(okhttp3.RealCall$AsyncCall);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
       5: aload_1
       6: iconst_1
       7: invokespecial #47                 // Method finished:(Ljava/util/Deque;Ljava/lang/Object;Z)V
      10: return

  void finished(okhttp3.RealCall);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
       5: aload_1
       6: iconst_0
       7: invokespecial #47                 // Method finished:(Ljava/util/Deque;Ljava/lang/Object;Z)V
      10: return

  private <T> void finished(java.util.Deque<T>, T, boolean);
    Code:
       0: aload_0
       1: dup
       2: astore        6
       4: monitorenter
       5: aload_1
       6: aload_2
       7: invokeinterface #48,  2           // InterfaceMethod java/util/Deque.remove:(Ljava/lang/Object;)Z
      12: ifne          25
      15: new           #49                 // class java/lang/AssertionError
      18: dup
      19: ldc           #50                 // String Call wasn\'t in-flight!
      21: invokespecial #51                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      24: athrow
      25: iload_3
      26: ifeq          33
      29: aload_0
      30: invokespecial #29                 // Method promoteCalls:()V
      33: aload_0
      34: invokevirtual #52                 // Method runningCallsCount:()I
      37: istore        4
      39: aload_0
      40: getfield      #30                 // Field idleCallback:Ljava/lang/Runnable;
      43: astore        5
      45: aload         6
      47: monitorexit
      48: goto          59
      51: astore        7
      53: aload         6
      55: monitorexit
      56: aload         7
      58: athrow
      59: iload         4
      61: ifne          76
      64: aload         5
      66: ifnull        76
      69: aload         5
      71: invokeinterface #53,  1           // InterfaceMethod java/lang/Runnable.run:()V
      76: return
    Exception table:
       from    to  target type
           5    48    51   any
          51    56    51   any

  public synchronized java.util.List<okhttp3.Call> queuedCalls();
    Code:
       0: new           #54                 // class java/util/ArrayList
       3: dup
       4: invokespecial #55                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      12: invokeinterface #36,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          51
      27: aload_2
      28: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #39                 // class okhttp3/RealCall$AsyncCall
      36: astore_3
      37: aload_1
      38: aload_3
      39: invokevirtual #40                 // Method okhttp3/RealCall$AsyncCall.get:()Lokhttp3/RealCall;
      42: invokeinterface #56,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      47: pop
      48: goto          18
      51: aload_1
      52: invokestatic  #57                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      55: areturn

  public synchronized java.util.List<okhttp3.Call> runningCalls();
    Code:
       0: new           #54                 // class java/util/ArrayList
       3: dup
       4: invokespecial #55                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      13: invokeinterface #58,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      18: pop
      19: aload_0
      20: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      23: invokeinterface #36,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      28: astore_2
      29: aload_2
      30: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      35: ifeq          62
      38: aload_2
      39: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #39                 // class okhttp3/RealCall$AsyncCall
      47: astore_3
      48: aload_1
      49: aload_3
      50: invokevirtual #40                 // Method okhttp3/RealCall$AsyncCall.get:()Lokhttp3/RealCall;
      53: invokeinterface #56,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      58: pop
      59: goto          29
      62: aload_1
      63: invokestatic  #57                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      66: areturn

  public synchronized int queuedCallsCount();
    Code:
       0: aload_0
       1: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #31,  1           // InterfaceMethod java/util/Deque.size:()I
       9: ireturn

  public synchronized int runningCallsCount();
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #31,  1           // InterfaceMethod java/util/Deque.size:()I
       9: aload_0
      10: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      13: invokeinterface #31,  1           // InterfaceMethod java/util/Deque.size:()I
      18: iadd
      19: ireturn
}
